var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21171024626105844 ± 0.002338538980061823\n   G2(1) = 0.9176683429196945 ± 0.001061955573701124\n   G2(2) = 0.9810647092579887 ± 0.0007811369362835406\n   G2(3) = 0.990823649383576 ± 0.0011029320253435238\n   G2(4) = 0.9810647092579887 ± 0.0007811369362835406\n   G2(5) = 0.9176683429196945 ± 0.001061955573701124\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.036229859972224 ± 0.13411897662375236\n   Replica 2: -4.052652932423674 ± 0.14057247536465967\n   Replica 3: -4.001992429123946 ± 0.12845418484811613\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.92 2211.02,1003.92 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.963 2211.02,745.963 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.005 2211.02,488.005 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.047 2211.02,230.047 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.92 423.181,1003.92 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.963 423.181,745.963 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.005 423.181,488.005 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.047 423.181,230.047 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M290.043 1017.27 L306.363 1017.27 L306.363 1021.2 L284.418 1021.2 L284.418 1017.27 Q287.08 1014.51 291.664 1009.88 Q296.27 1005.23 297.451 1003.89 Q299.696 1001.36 300.576 999.627 Q301.478 997.867 301.478 996.178 Q301.478 993.423 299.534 991.687 Q297.613 989.951 294.511 989.951 Q292.312 989.951 289.858 990.715 Q287.427 991.479 284.65 993.03 L284.65 988.307 Q287.474 987.173 289.927 986.594 Q292.381 986.016 294.418 986.016 Q299.789 986.016 302.983 988.701 Q306.177 991.386 306.177 995.877 Q306.177 998.006 305.367 999.928 Q304.58 1001.83 302.474 1004.42 Q301.895 1005.09 298.793 1008.31 Q295.691 1011.5 290.043 1017.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M316.224 986.641 L334.58 986.641 L334.58 990.576 L320.506 990.576 L320.506 999.048 Q321.524 998.701 322.543 998.539 Q323.562 998.354 324.58 998.354 Q330.367 998.354 333.747 1001.52 Q337.126 1004.7 337.126 1010.11 Q337.126 1015.69 333.654 1018.79 Q330.182 1021.87 323.862 1021.87 Q321.687 1021.87 319.418 1021.5 Q317.173 1021.13 314.765 1020.39 L314.765 1015.69 Q316.849 1016.83 319.071 1017.38 Q321.293 1017.94 323.77 1017.94 Q327.774 1017.94 330.112 1015.83 Q332.45 1013.72 332.45 1010.11 Q332.45 1006.5 330.112 1004.4 Q327.774 1002.29 323.77 1002.29 Q321.895 1002.29 320.02 1002.71 Q318.168 1003.12 316.224 1004 L316.224 986.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 989.719 Q352.728 989.719 350.899 993.284 Q349.094 996.826 349.094 1003.96 Q349.094 1011.06 350.899 1014.63 Q352.728 1018.17 356.339 1018.17 Q359.973 1018.17 361.779 1014.63 Q363.608 1011.06 363.608 1003.96 Q363.608 996.826 361.779 993.284 Q359.973 989.719 356.339 989.719 M356.339 986.016 Q362.149 986.016 365.205 990.622 Q368.284 995.205 368.284 1003.96 Q368.284 1012.68 365.205 1017.29 Q362.149 1021.87 356.339 1021.87 Q350.529 1021.87 347.45 1017.29 Q344.395 1012.68 344.395 1003.96 Q344.395 995.205 347.45 990.622 Q350.529 986.016 356.339 986.016 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M286.062 728.683 L304.418 728.683 L304.418 732.618 L290.344 732.618 L290.344 741.09 Q291.363 740.743 292.381 740.581 Q293.4 740.396 294.418 740.396 Q300.205 740.396 303.585 743.567 Q306.964 746.738 306.964 752.155 Q306.964 757.733 303.492 760.835 Q300.02 763.914 293.701 763.914 Q291.525 763.914 289.256 763.544 Q287.011 763.173 284.603 762.432 L284.603 757.733 Q286.687 758.868 288.909 759.423 Q291.131 759.979 293.608 759.979 Q297.613 759.979 299.951 757.872 Q302.288 755.766 302.288 752.155 Q302.288 748.544 299.951 746.437 Q297.613 744.331 293.608 744.331 Q291.733 744.331 289.858 744.747 Q288.006 745.164 286.062 746.044 L286.062 728.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M326.177 731.761 Q322.566 731.761 320.737 735.326 Q318.932 738.868 318.932 745.997 Q318.932 753.104 320.737 756.669 Q322.566 760.21 326.177 760.21 Q329.811 760.21 331.617 756.669 Q333.446 753.104 333.446 745.997 Q333.446 738.868 331.617 735.326 Q329.811 731.761 326.177 731.761 M326.177 728.058 Q331.987 728.058 335.043 732.664 Q338.122 737.247 338.122 745.997 Q338.122 754.724 335.043 759.331 Q331.987 763.914 326.177 763.914 Q320.367 763.914 317.288 759.331 Q314.233 754.724 314.233 745.997 Q314.233 737.247 317.288 732.664 Q320.367 728.058 326.177 728.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 731.761 Q352.728 731.761 350.899 735.326 Q349.094 738.868 349.094 745.997 Q349.094 753.104 350.899 756.669 Q352.728 760.21 356.339 760.21 Q359.973 760.21 361.779 756.669 Q363.608 753.104 363.608 745.997 Q363.608 738.868 361.779 735.326 Q359.973 731.761 356.339 731.761 M356.339 728.058 Q362.149 728.058 365.205 732.664 Q368.284 737.247 368.284 745.997 Q368.284 754.724 365.205 759.331 Q362.149 763.914 356.339 763.914 Q350.529 763.914 347.45 759.331 Q344.395 754.724 344.395 745.997 Q344.395 737.247 347.45 732.664 Q350.529 728.058 356.339 728.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M284.835 470.725 L307.057 470.725 L307.057 472.715 L294.511 505.285 L289.627 505.285 L301.432 474.66 L284.835 474.66 L284.835 470.725 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M316.224 470.725 L334.58 470.725 L334.58 474.66 L320.506 474.66 L320.506 483.132 Q321.524 482.785 322.543 482.623 Q323.562 482.438 324.58 482.438 Q330.367 482.438 333.747 485.609 Q337.126 488.78 337.126 494.197 Q337.126 499.775 333.654 502.877 Q330.182 505.956 323.862 505.956 Q321.687 505.956 319.418 505.586 Q317.173 505.215 314.765 504.474 L314.765 499.775 Q316.849 500.91 319.071 501.465 Q321.293 502.021 323.77 502.021 Q327.774 502.021 330.112 499.914 Q332.45 497.808 332.45 494.197 Q332.45 490.586 330.112 488.479 Q327.774 486.373 323.77 486.373 Q321.895 486.373 320.02 486.789 Q318.168 487.206 316.224 488.086 L316.224 470.725 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 473.803 Q352.728 473.803 350.899 477.368 Q349.094 480.91 349.094 488.039 Q349.094 495.146 350.899 498.711 Q352.728 502.252 356.339 502.252 Q359.973 502.252 361.779 498.711 Q363.608 495.146 363.608 488.039 Q363.608 480.91 361.779 477.368 Q359.973 473.803 356.339 473.803 M356.339 470.1 Q362.149 470.1 365.205 474.706 Q368.284 479.289 368.284 488.039 Q368.284 496.766 365.205 501.373 Q362.149 505.956 356.339 505.956 Q350.529 505.956 347.45 501.373 Q344.395 496.766 344.395 488.039 Q344.395 479.289 347.45 474.706 Q350.529 470.1 356.339 470.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M256.664 243.391 L264.303 243.391 L264.303 217.026 L255.992 218.692 L255.992 214.433 L264.256 212.767 L268.932 212.767 L268.932 243.391 L276.571 243.391 L276.571 247.327 L256.664 247.327 L256.664 243.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M296.015 215.845 Q292.404 215.845 290.576 219.41 Q288.77 222.952 288.77 230.081 Q288.77 237.188 290.576 240.753 Q292.404 244.294 296.015 244.294 Q299.65 244.294 301.455 240.753 Q303.284 237.188 303.284 230.081 Q303.284 222.952 301.455 219.41 Q299.65 215.845 296.015 215.845 M296.015 212.142 Q301.826 212.142 304.881 216.748 Q307.96 221.331 307.96 230.081 Q307.96 238.808 304.881 243.415 Q301.826 247.998 296.015 247.998 Q290.205 247.998 287.127 243.415 Q284.071 238.808 284.071 230.081 Q284.071 221.331 287.127 216.748 Q290.205 212.142 296.015 212.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M326.177 215.845 Q322.566 215.845 320.737 219.41 Q318.932 222.952 318.932 230.081 Q318.932 237.188 320.737 240.753 Q322.566 244.294 326.177 244.294 Q329.811 244.294 331.617 240.753 Q333.446 237.188 333.446 230.081 Q333.446 222.952 331.617 219.41 Q329.811 215.845 326.177 215.845 M326.177 212.142 Q331.987 212.142 335.043 216.748 Q338.122 221.331 338.122 230.081 Q338.122 238.808 335.043 243.415 Q331.987 247.998 326.177 247.998 Q320.367 247.998 317.288 243.415 Q314.233 238.808 314.233 230.081 Q314.233 221.331 317.288 216.748 Q320.367 212.142 326.177 212.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M356.339 215.845 Q352.728 215.845 350.899 219.41 Q349.094 222.952 349.094 230.081 Q349.094 237.188 350.899 240.753 Q352.728 244.294 356.339 244.294 Q359.973 244.294 361.779 240.753 Q363.608 237.188 363.608 230.081 Q363.608 222.952 361.779 219.41 Q359.973 215.845 356.339 215.845 M356.339 212.142 Q362.149 212.142 365.205 216.748 Q368.284 221.331 368.284 230.081 Q368.284 238.808 365.205 243.415 Q362.149 247.998 356.339 247.998 Q350.529 247.998 347.45 243.415 Q344.395 238.808 344.395 230.081 Q344.395 221.331 347.45 216.748 Q350.529 212.142 356.339 212.142 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.047 4017.76,230.047 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.51 456.554,1250.44 457.123,1250.29 457.691,1249 458.259,1247.7 458.828,1247.43 459.396,1247.05 459.964,1246.63 460.533,1246.08 461.101,1245.5 461.669,1244.81 462.238,1244.03 462.806,1241.12 463.375,1240.2 463.943,1239.22 464.511,1238.13 465.08,1236.94 465.648,1235.62 466.216,1233.17 466.785,1231.68 467.353,1229.01 467.921,1227.29 468.49,1225.44 469.058,1223.46 469.626,1220.24 470.195,1217.97 470.763,1214.48 471.331,1211.89 471.9,1209.17 472.468,1205.22 473.036,1200.05 473.605,1196.78 474.173,1192.21 474.741,1188.49 475.31,1184.61 475.878,1178.51 476.446,1173.19 477.015,1167.66 477.583,1162.03 478.152,1155.18 478.72,1149.14 479.288,1142.82 479.857,1136.34 480.425,1129.7 480.993,1122.88 481.562,1116.73 482.13,1109.45 482.698,1100.94 483.267,1093.21 483.835,1084.3 484.403,1075.3 484.972,1067.27 485.54,1057.94 486.108,1050.71 486.677,1042.02 487.245,1033.31 487.813,1025.55 488.382,1016.52 488.95,1005.41 489.518,997.325 490.087,989.029 490.655,980.511 491.224,969.825 491.792,956.148 492.36,946.668 492.929,935.068 493.497,921.502 494.065,913.135 494.634,903.591 495.202,893.958 495.77,885.153 496.339,876.372 496.907,866.497 497.475,857.622 498.044,846.563 498.612,836.569 499.18,825.583 499.749,815.59 500.317,805.794 500.885,796.916 501.454,783.772 502.022,774.1 502.59,761.215 503.159,751.615 503.727,740.013 504.295,728.553 504.864,718.304 505.432,709.224 506.001,701.275 506.569,693.123 507.137,684.031 507.706,670.897 508.274,662.985 508.842,654.231 509.411,643.448 509.979,636.931 510.547,626.184 511.116,618.939 511.684,612.683 512.252,604.44 512.821,596.205 513.389,584.776 513.957,575.739 514.526,568.143 515.094,559.516 515.662,551.051 516.231,544.819 516.799,538.759 517.367,533.604 517.936,526.407 518.504,517.266 519.072,511.449 519.641,501.58 520.209,495.982 520.778,490.581 521.346,481.937 521.914,479.891 522.483,472.52 523.051,463.31 523.619,458.429 524.188,450.439 524.756,445.769 525.324,441.072 525.893,432.537 526.461,429.533 527.029,425.394 527.598,420.289 528.166,414.08 528.734,408.134 529.303,403.44 529.871,399.735 530.439,395.024 531.008,390.638 531.576,385.297 532.144,380.039 532.713,376.108 533.281,372.326 533.85,366.336 534.418,363.663 534.986,359.996 535.555,358.386 536.123,354.003 536.691,352.773 537.26,348.101 537.828,346.785 538.396,345.53 538.965,342.118 539.533,338.783 540.101,335.621 540.67,333.529 541.238,331.363 541.806,330.418 542.375,329.271 542.943,324.331 543.511,320.508 544.08,317.879 544.648,316.07 545.216,314.366 545.785,311.823 546.353,310.391 546.921,307.785 547.49,306.437 548.058,303.806 548.627,302.489 549.195,299.052 549.763,296.916 550.332,295.736 550.9,294.59 551.468,293.508 552.037,293.544 552.605,292.235 553.173,290.045 553.742,286.07 554.31,285.459 554.878,287.796 555.447,285.653 556.015,284.404 556.583,283.279 557.152,281.41 557.72,280.474 558.288,282.559 558.857,278.417 559.425,276.576 559.993,275.781 560.562,272.932 561.13,271.458 561.698,269.954 562.267,269.305 562.835,270.003 563.404,269.473 563.972,268.023 564.54,266.553 565.109,267.236 565.677,268.486 566.245,266.787 566.814,265.294 567.382,263.581 567.95,261.125 568.519,258.724 569.087,257.575 569.655,256.571 570.224,254.408 570.792,256.559 571.36,256.554 571.929,256.27 572.497,254.228 573.065,252.119 573.634,252.074 574.202,252.132 574.77,252.121 575.339,250.139 575.907,249.38 576.476,250.648 577.044,249.825 577.612,249.787 578.181,249.809 578.749,247.983 579.317,248.359 579.886,247.395 580.454,246.682 581.022,244.809 581.591,244.228 582.159,244.711 582.727,245.19 583.296,244.363 583.864,244.491 584.432,244.594 585.001,243.921 585.569,243.289 586.137,242.754 586.706,244.263 587.274,245.598 587.842,245.652 588.411,247.744 588.979,248.94 589.547,248.857 590.116,248.566 590.684,248.357 591.253,247.312 591.821,246.247 592.389,247.27 592.958,245.979 593.526,245.101 594.094,246.09 594.663,245.94 595.231,245.994 595.799,246.023 596.368,245.836 596.936,242.606 597.504,242.782 598.073,243.915 598.641,243.823 599.209,243.663 599.778,243.556 600.346,243.373 600.914,245.191 601.483,243.866 602.051,242.813 602.619,241.56 603.188,242.572 603.756,244.696 604.325,244.494 604.893,243.052 605.461,240.84 606.03,239.655 606.598,238.6 607.166,239.879 607.735,241.947 608.303,239.874 608.871,237.968 609.44,238.083 610.008,237.242 610.576,233.24 611.145,233.783 611.713,235.417 612.281,234.588 612.85,235.915 613.418,234.214 613.986,234.605 614.555,235.845 615.123,237.198 615.691,237.361 616.26,236.71 616.828,237.231 617.396,238.779 617.965,238.899 618.533,238.904 619.102,239.065 619.67,238.09 620.238,237.103 620.807,237.413 621.375,234.585 621.943,235.146 622.512,234.279 623.08,233.716 623.648,235.14 624.217,234.611 624.785,235.042 625.353,234.275 625.922,231.656 626.49,231.238 627.058,233.074 627.627,233.644 628.195,235.354 628.763,234.693 629.332,234.9 629.9,235.616 630.468,236.83 631.037,236.995 631.605,236.064 632.173,236.367 632.742,235.521 633.31,236.681 633.879,236.712 634.447,235.88 635.015,235.082 635.584,235.226 636.152,235.508 636.72,235.85 637.289,234.786 637.857,233.863 638.425,233.377 638.994,232.905 639.562,233.245 640.13,229.497 640.699,231.573 641.267,233.232 641.835,233.881 642.404,234.193 642.972,234.498 643.54,235.806 644.109,235.956 644.677,238.379 645.245,239.279 645.814,237.28 646.382,236.323 646.951,235.374 647.519,234.79 648.087,235.935 648.656,239.147 649.224,238.979 649.792,238.919 650.361,238.958 650.929,239.824 651.497,240.713 652.066,238.398 652.634,239.389 653.202,239.136 653.771,239.079 654.339,237.779 654.907,239.814 655.476,238.724 656.044,237.641 656.612,237.43 657.181,238.579 657.749,239.412 658.317,239.14 658.886,236.814 659.454,237.675 660.022,239.736 660.591,239.355 661.159,240.188 661.728,239.879 662.296,236.576 662.864,237.654 663.433,236.419 664.001,234.333 664.569,235.619 665.138,235.687 665.706,235.951 666.274,235.963 666.843,236.15 667.411,237.028 667.979,235.849 668.548,234.749 669.116,234.781 669.684,234.733 670.253,235.698 670.821,236.373 671.389,234.867 671.958,234.813 672.526,234.866 673.094,233.659 673.663,234.593 674.231,234.71 674.799,233.907 675.368,231.979 675.936,232.269 676.505,235.644 677.073,235.52 677.641,235.528 678.21,233.432 678.778,234.57 679.346,234.554 679.915,234.362 680.483,232.636 681.051,231.762 681.62,230.994 682.188,230.076 682.756,231.523 683.325,231.563 683.893,230.737 684.461,230.963 685.03,231.068 685.598,231.468 686.166,232.57 686.735,230.746 687.303,231.15 687.871,231.143 688.44,229.19 689.008,228.509 689.577,227.982 690.145,232.57 690.713,232.863 691.282,233.029 691.85,232.33 692.418,229.324 692.987,231.884 693.555,230.907 694.123,230.041 694.692,230.12 695.26,230.261 695.828,231.592 696.397,232.77 696.965,235.169 697.533,237.236 698.102,236.028 698.67,236.108 699.238,235.893 699.807,233.563 700.375,232.602 700.943,233.846 701.512,234.725 702.08,234.676 702.648,233.63 703.217,232.765 703.785,230.046 704.354,230.355 704.922,229.547 705.49,230.877 706.059,233.364 706.627,235.495 707.195,234.395 707.764,236.428 708.332,235.32 708.9,233.366 709.469,232.301 710.037,232.321 710.605,231.412 711.174,230.515 711.742,232.711 712.31,231.742 712.879,233.959 713.447,234.2 714.015,234.133 714.584,235.195 715.152,232.948 715.72,233.93 716.289,233.906 716.857,233.91 717.425,234.932 717.994,235.029 718.562,233.907 719.131,234.081 719.699,232.97 720.267,230.836 720.836,228.997 721.404,229.386 721.972,230.608 722.541,229.801 723.109,230.097 723.677,229.119 724.246,230.409 724.814,230.685 725.382,231.843 725.951,232.839 726.519,233.738 727.087,231.41 727.656,231.426 728.224,231.569 728.792,231.515 729.361,231.504 729.929,231.44 730.497,231.688 731.066,234.711 731.634,233.447 732.203,231.267 732.771,232.462 733.339,232.321 733.908,232.317 734.476,233.571 735.044,233.633 735.613,230.635 736.181,230.857 736.749,229.848 737.318,228.896 737.886,230.268 738.454,230.491 739.023,234.812 739.591,234.609 740.159,234.403 740.728,230.962 741.296,230.932 741.864,232.091 742.433,233.232 743.001,233.302 743.569,232.324 744.138,231.303 744.706,231.327 745.274,233.182 745.843,233.132 746.411,234.248 746.98,234.152 747.548,233.986 748.116,232.737 748.685,230.8 749.253,231.009 749.821,233.182 750.39,233.214 750.958,233.161 751.526,231.955 752.095,231.937 752.663,230.866 753.231,231 753.8,229.067 754.368,230.426 754.936,231.561 755.505,232.749 756.073,233.758 756.641,236.843 757.21,235.515 757.778,234.267 758.346,234.125 758.915,230.014 759.483,230.429 760.052,230.647 760.62,231.861 761.188,229.662 761.757,226.558 762.325,224.885 762.893,226.295 763.462,226.725 764.03,229.071 764.598,229.394 765.167,229.682 765.735,228.734 766.303,229.049 766.872,230.098 767.44,230.427 768.008,230.481 768.577,227.462 769.145,229.755 769.713,228.993 770.282,230.223 770.85,232.365 771.418,233.345 771.987,229.078 772.555,227.42 773.123,229.848 773.692,230.122 774.26,231.286 774.829,231.431 775.397,231.483 775.965,231.597 776.534,230.476 777.102,230.969 777.67,230.036 778.239,229.22 778.807,228.313 779.375,228.816 779.944,230.074 780.512,230.243 781.08,230.155 781.649,230.344 782.217,229.233 782.785,228.272 783.354,229.581 783.922,230.75 784.49,231.805 785.059,231.716 785.627,229.951 786.195,229.965 786.764,232.122 787.332,232.148 787.9,229.195 788.469,229.568 789.037,229.755 789.606,229.935 790.174,230.178 790.742,230.336 791.311,228.308 791.879,229.527 792.447,228.653 793.016,231.053 793.584,229.066 794.152,229.364 794.721,230.538 795.289,230.828 795.857,231.107 796.426,232.327 796.994,234.687 797.562,233.692 798.131,236.001 798.699,235.846 799.267,234.467 799.836,235.432 800.404,233.041 800.972,233.699 801.541,232.621 802.109,233.625 802.678,232.534 803.246,230.439 803.814,231.419 804.383,229.411 804.951,229.499 805.519,227.529 806.088,227.913 806.656,227.251 807.224,227.367 807.793,224.578 808.361,224.045 808.929,223.607 809.498,223.386 810.066,225.268 810.634,226.91 811.203,228.365 811.771,226.382 812.339,225.904 812.908,226.333 813.476,225.878 814.044,226.264 814.613,225.641 815.181,225.952 815.749,230.631 816.318,230.971 816.886,233.102 817.455,234.141 818.023,235.118 818.591,233.834 819.16,234.976 819.728,233.807 820.296,233.647 820.865,234.557 821.433,234.656 822.001,236.398 822.57,237.042 823.138,237.766 823.706,240.487 824.275,240.981 824.843,239.299 825.411,240.86 825.98,240.081 826.548,240.565 827.116,238.773 827.685,238.181 828.253,237.838 828.821,237.23 829.39,234.873 829.958,232.459 830.526,235.639 831.095,236.4 831.663,236.093 832.232,235.659 832.8,232.148 833.368,230.721 833.937,230.635 834.505,230.617 835.073,231.594 835.642,234.489 836.21,232.062 836.778,232.015 837.347,230.823 837.915,229.735 838.483,229.903 839.052,229.843 839.62,228.689 840.188,227.639 840.757,229.864 841.325,228.833 841.893,227.974 842.462,228.222 843.03,229.295 843.598,230.277 844.167,230.224 844.735,228.317 845.304,229.503 845.872,229.724 846.44,229.945 847.009,230.866 847.577,232.89 848.145,230.717 848.714,230.691 849.282,229.667 849.85,229.921 850.419,232.148 850.987,233.11 851.555,231.788 852.124,232.1 852.692,231.8 853.26,230.863 853.829,231.987 854.397,234.061 854.965,233.863 855.534,231.545 856.102,232.645 856.67,230.534 857.239,231.504 857.807,232.233 858.375,230.034 858.944,230.135 859.512,230.111 860.081,229.049 860.649,230.253 861.217,232.378 861.786,230.289 862.354,230.382 862.922,231.431 863.491,233.5 864.059,233.346 864.627,234.11 865.196,230.865 865.764,231.941 866.332,232.896 866.901,233.826 867.469,233.526 868.037,234.429 868.606,233.009 869.174,233.789 869.742,234.552 870.311,234.259 870.879,233.887 871.447,233.541 872.016,233.309 872.584,234.083 873.152,235.664 873.721,235.363 874.289,234.831 874.858,233.331 875.426,232.126 875.994,232.779 876.563,231.582 877.131,232.522 877.699,231.403 878.268,230.19 878.836,231.343 879.404,232.276 879.973,232.207 880.541,230.937 881.109,232.851 881.678,234.64 882.246,233.156 882.814,233.791 883.383,235.575 883.951,235.248 884.519,234.796 885.088,235.32 885.656,233.89 886.224,233.527 886.793,232.129 887.361,230.812 887.93,232.496 888.498,233.299 889.066,234.138 889.635,233.815 890.203,234.325 890.771,233.868 891.34,233.346 891.908,231.994 892.476,229.781 893.045,230.614 893.613,229.585 894.181,228.607 894.75,227.441 895.318,227.445 895.886,226.426 896.455,224.436 897.023,224.637 897.591,226.053 898.16,225.357 898.728,225.403 899.296,223.617 899.865,227.015 900.433,226.092 901.001,227.187 901.57,228.19 902.138,227.136 902.707,227.451 903.275,228.582 903.843,227.645 904.412,227.677 904.98,227.881 905.548,227.852 906.117,227.92 906.685,228.301 907.253,229.477 907.822,230.439 908.39,230.453 908.958,230.387 909.527,230.304 910.095,229.204 910.663,230.153 911.232,228.331 911.8,228.763 912.368,228.608 912.937,230.765 913.505,228.751 914.073,229.803 914.642,228.751 915.21,230.973 915.779,230.793 916.347,229.011 916.915,227.95 917.484,228.008 918.052,226.301 918.62,227.638 919.189,227.73 919.757,227.735 920.325,226.858 920.894,227.96 921.462,228.117 922.03,226.231 922.599,226.606 923.167,227.823 923.735,228.883 924.304,229.011 924.872,228.845 925.44,228.773 926.009,230.784 926.577,228.581 927.145,226.502 927.714,226.68 928.282,228.117 928.85,226.164 929.419,226.428 929.987,226.813 930.556,227.215 931.124,227.445 931.692,225.844 932.261,226.064 932.829,225.407 933.397,225.734 933.966,226.264 934.534,226.285 935.102,223.545 935.671,226.975 936.239,227.317 936.807,224.374 937.376,222.797 937.944,220.311 938.512,221.199 939.081,223.017 939.649,222.724 940.217,225.451 940.786,225.068 941.354,224.6 941.922,223.183 942.491,225.977 943.059,223.352 943.627,224.856 944.196,226.354 944.764,225.793 945.333,226.436 945.901,226.998 946.469,229.618 947.038,230.065 947.606,229.253 948.174,228.495 948.743,229.866 949.311,231.327 949.879,230.414 950.448,231.78 951.016,231.876 951.584,231.029 952.153,232.028 952.721,232.183 953.289,231.343 953.858,232.492 954.426,233.673 954.994,232.673 955.563,234.807 956.131,233.468 956.699,231.396 957.268,232.476 957.836,232.428 958.405,231.478 958.973,231.632 959.541,229.767 960.11,228.875 960.678,230.09 961.246,229.252 961.815,226.793 962.383,227.107 962.951,229.534 963.52,228.856 964.088,229.203 964.656,228.406 965.225,226.808 965.793,228.173 966.361,227.483 966.93,228.082 967.498,229.54 968.066,229.64 968.635,230.827 969.203,230.918 969.771,230.016 970.34,230.222 970.908,232.437 971.476,232.368 972.045,233.333 972.613,235.291 973.182,236.315 973.75,236.948 974.318,236.537 974.887,235.143 975.455,236.012 976.023,235.552 976.592,235.218 977.16,233.939 977.728,234.908 978.297,232.662 978.865,232.58 979.433,232.242 980.002,230.167 980.57,229.309 981.138,228.422 981.707,230.538 982.275,233.674 982.843,232.21 983.412,229.918 983.98,231.218 984.548,234.155 985.117,235.932 985.685,237.771 986.253,239.464 986.822,238.716 987.39,238.418 987.959,238.994 988.527,239.547 989.095,236.871 989.664,237.453 990.232,237.89 990.8,236.411 991.369,237.17 991.937,235.498 992.505,236.243 993.074,237.727 993.642,238.143 994.21,235.347 994.779,236.93 995.347,235.209 995.915,235.762 996.484,235.468 997.052,237.198 997.62,237.79 998.189,235.054 998.757,237.601 999.325,235.855 999.894,234.388 1000.46,233.071 1001.03,229.669 1001.6,230.447 1002.17,228.088 1002.74,229.305 1003.3,228.991 1003.87,229.033 1004.44,227.042 1005.01,227.191 1005.58,227.243 1006.15,229.228 1006.71,232.346 1007.28,232.035 1007.85,229.894 1008.42,228.644 1008.99,227.733 1009.56,226.832 1010.12,226.955 1010.69,228.997 1011.26,227.133 1011.83,226.23 1012.4,228.408 1012.97,228.235 1013.53,230.318 1014.1,231.278 1014.67,231.08 1015.24,229.741 1015.81,230.781 1016.38,229.673 1016.94,228.531 1017.51,228.853 1018.08,226.946 1018.65,225.982 1019.22,225.949 1019.79,226.09 1020.35,224.131 1020.92,224.378 1021.49,225.848 1022.06,224.983 1022.63,226.357 1023.2,223.485 1023.76,221.917 1024.33,222.378 1024.9,221.968 1025.47,222.689 1026.04,222.002 1026.61,222.647 1027.17,223.219 1027.74,223.901 1028.31,224.333 1028.88,221.731 1029.45,224.107 1030.02,223.411 1030.58,221.907 1031.15,222.674 1031.72,221.259 1032.29,221.075 1032.86,222.809 1033.43,223.641 1033.99,225.298 1034.56,225.589 1035.13,225.999 1035.7,228.791 1036.27,228.218 1036.84,229.773 1037.4,232.14 1037.97,230.927 1038.54,232.059 1039.11,234.145 1039.68,233.186 1040.25,236.08 1040.81,237.61 1041.38,238.975 1041.95,238.474 1042.52,237.073 1043.09,240.72 1043.66,241.017 1044.22,239.303 1044.79,237.853 1045.36,237.369 1045.93,235.926 1046.5,234.402 1047.07,233.017 1047.63,232.817 1048.2,232.681 1048.77,231.369 1049.34,231.502 1049.91,233.715 1050.48,230.673 1051.05,232.814 1051.61,231.686 1052.18,231.579 1052.75,232.418 1053.32,234.407 1053.89,234.048 1054.46,232.711 1055.02,231.362 1055.59,229.188 1056.16,232.471 1056.73,233.438 1057.3,234.073 1057.87,230.721 1058.43,233.959 1059,232.55 1059.57,231.481 1060.14,231.246 1060.71,232.238 1061.28,232.053 1061.84,232.698 1062.41,232.435 1062.98,232.5 1063.55,230.422 1064.12,228.29 1064.69,229.403 1065.25,230.357 1065.82,231.452 1066.39,231.22 1066.96,230.202 1067.53,233.138 1068.1,230.901 1068.66,231.526 1069.23,230.428 1069.8,231.268 1070.37,230.317 1070.94,230.988 1071.51,230.895 1072.07,228.673 1072.64,229.729 1073.21,229.914 1073.78,228.007 1074.35,227.221 1074.92,227.477 1075.48,228.597 1076.05,227.773 1076.62,225.925 1077.19,223.261 1077.76,223.577 1078.33,225.06 1078.89,228.908 1079.46,229.161 1080.03,231.423 1080.6,232.306 1081.17,230.233 1081.74,232.597 1082.3,231.562 1082.87,232.515 1083.44,234.264 1084.01,231.848 1084.58,232.626 1085.15,234.456 1085.71,236.278 1086.28,235.117 1086.85,235.594 1087.42,233.006 1087.99,233.661 1088.56,234.305 1089.12,235.962 1089.69,236.542 1090.26,234.092 1090.83,233.705 1091.4,233.452 1091.97,235.011 1092.53,232.575 1093.1,233.321 1093.67,236.15 1094.24,234.415 1094.81,234.892 1095.38,235.566 1095.94,234.001 1096.51,233.826 1097.08,233.547 1097.65,235.194 1098.22,235.674 1098.79,234.225 1099.35,234.734 1099.92,231.41 1100.49,232.285 1101.06,233.002 1101.63,231.616 1102.2,230.415 1102.76,230.385 1103.33,228.32 1103.9,226.475 1104.47,225.687 1105.04,226.881 1105.61,225.848 1106.17,226.877 1106.74,225.878 1107.31,229.299 1107.88,228.2 1108.45,228.359 1109.02,227.283 1109.58,227.387 1110.15,227.523 1110.72,228.219 1111.29,226.97 1111.86,225.971 1112.43,225.193 1112.99,225.696 1113.56,227.925 1114.13,225.749 1114.7,225.969 1115.27,226.319 1115.84,227.429 1116.4,224.378 1116.97,225.615 1117.54,225.855 1118.11,226.001 1118.68,226.15 1119.25,224.292 1119.81,224.67 1120.38,224.013 1120.95,224.34 1121.52,221.619 1122.09,222.26 1122.66,221.932 1123.23,221.463 1123.79,222.004 1124.36,223.543 1124.93,222.907 1125.5,225.548 1126.07,224.853 1126.64,226.518 1127.2,225.625 1127.77,226.81 1128.34,226.042 1128.91,226.266 1129.48,225.567 1130.05,228.121 1130.61,229.41 1131.18,231.312 1131.75,231.353 1132.32,230.357 1132.89,231.273 1133.46,230.177 1134.02,230.369 1134.59,227.27 1135.16,228.566 1135.73,228.659 1136.3,227.795 1136.87,225.955 1137.43,225.256 1138,226.763 1138.57,226.891 1139.14,226.155 1139.71,228.628 1140.28,229.029 1140.84,228.455 1141.41,228.831 1141.98,231.007 1142.55,232.105 1143.12,232.024 1143.69,231.93 1144.25,231.92 1144.82,231.609 1145.39,230.535 1145.96,230.591 1146.53,230.73 1147.1,230.892 1147.66,232.085 1148.23,232.192 1148.8,231.191 1149.37,232.049 1149.94,229.763 1150.51,230.222 1151.07,230.406 1151.64,231.28 1152.21,230.318 1152.78,229.187 1153.35,231.256 1153.92,231.369 1154.48,231.373 1155.05,230.094 1155.62,234.099 1156.19,232.966 1156.76,232.919 1157.33,235.898 1157.89,233.677 1158.46,233.492 1159.03,234.355 1159.6,234.301 1160.17,235.108 1160.74,234.744 1161.3,232.309 1161.87,234.409 1162.44,231.021 1163.01,228.844 1163.58,225.904 1164.15,226.25 1164.71,227.284 1165.28,226.47 1165.85,226.961 1166.42,227.139 1166.99,227.418 1167.56,226.608 1168.12,226.814 1168.69,227.043 1169.26,226.42 1169.83,226.955 1170.4,228.217 1170.97,229.512 1171.53,229.747 1172.1,230.664 1172.67,229.786 1173.24,229.59 1173.81,228.767 1174.38,229.056 1174.94,230.236 1175.51,229.315 1176.08,228.622 1176.65,229.986 1177.22,231.082 1177.79,231.192 1178.35,234.327 1178.92,233.947 1179.49,232.734 1180.06,233.856 1180.63,233.786 1181.2,236.861 1181.76,234.324 1182.33,234.188 1182.9,235.144 1183.47,235.705 1184.04,236.494 1184.61,236.156 1185.17,235.653 1185.74,236.34 1186.31,234.906 1186.88,235.757 1187.45,234.192 1188.02,234.945 1188.58,233.488 1189.15,233.36 1189.72,232.105 1190.29,235.926 1190.86,234.564 1191.43,232.16 1192,231.94 1192.56,230.731 1193.13,229.498 1193.7,229.545 1194.27,231.499 1194.84,234.258 1195.41,233.791 1195.97,232.523 1196.54,233.435 1197.11,232.989 1197.68,232.663 1198.25,231.25 1198.82,231.016 1199.38,229.794 1199.95,228.702 1200.52,229.941 1201.09,231.091 1201.66,230.192 1202.23,230.938 1202.79,230.906 1203.36,229.713 1203.93,230.641 1204.5,230.573 1205.07,231.592 1205.64,230.328 1206.2,230.076 1206.77,229.933 1207.34,229.782 1207.91,229.562 1208.48,229.57 1209.05,230.543 1209.61,233.34 1210.18,230.765 1210.75,230.367 1211.32,232.138 1211.89,231.785 1212.46,232.743 1213.02,229.379 1213.59,231.296 1214.16,231.105 1214.73,232.139 1215.3,232.007 1215.87,230.728 1216.43,230.612 1217,233.697 1217.57,234.31 1218.14,233.998 1218.71,234.74 1219.28,237.315 1219.84,238.672 1220.41,236.839 1220.98,235.227 1221.55,233.642 1222.12,231.203 1222.69,231.038 1223.25,230.976 1223.82,232.664 1224.39,232.35 1224.96,229.995 1225.53,229.955 1226.1,230.889 1226.66,230.757 1227.23,228.204 1227.8,228.182 1228.37,229.258 1228.94,228.296 1229.51,227.404 1230.07,227.608 1230.64,226.553 1231.21,226.315 1231.78,226.315 1232.35,226.699 1232.92,227.657 1233.48,228.741 1234.05,228.656 1234.62,228.786 1235.19,227.547 1235.76,227.497 1236.33,227.444 1236.89,226.754 1237.46,226.885 1238.03,226.974 1238.6,226.185 1239.17,226.518 1239.74,227.042 1240.3,225.248 1240.87,226.476 1241.44,227.666 1242.01,227.88 1242.58,229.099 1243.15,229.132 1243.71,229.295 1244.28,229.449 1244.85,228.334 1245.42,228.374 1245.99,229.322 1246.56,229.201 1247.12,229.256 1247.69,229.105 1248.26,228.188 1248.83,228.39 1249.4,228.454 1249.97,228.485 1250.53,225.609 1251.1,224.824 1251.67,225.084 1252.24,224.417 1252.81,224.513 1253.38,224.805 1253.94,226.064 1254.51,229.541 1255.08,229.701 1255.65,230.834 1256.22,230.638 1256.79,232.524 1257.35,230.003 1257.92,230.036 1258.49,228.837 1259.06,229.96 1259.63,229.009 1260.2,224.978 1260.76,226.375 1261.33,226.937 1261.9,225.012 1262.47,225.423 1263.04,225.909 1263.61,226.251 1264.18,227.855 1264.74,227.111 1265.31,227.318 1265.88,227.356 1266.45,228.87 1267.02,229.054 1267.59,230.311 1268.15,230.318 1268.72,229.496 1269.29,228.715 1269.86,229.98 1270.43,229.828 1271,228.967 1271.56,228.189 1272.13,227.598 1272.7,227.782 1273.27,229.102 1273.84,227.224 1274.41,225.462 1274.97,226.048 1275.54,226.483 1276.11,226.661 1276.68,227.939 1277.25,228.37 1277.82,227.448 1278.38,229.775 1278.95,230.785 1279.52,229.735 1280.09,229.864 1280.66,230.94 1281.23,230.906 1281.79,230.896 1282.36,229.748 1282.93,229.831 1283.5,229.784 1284.07,232.021 1284.64,231.807 1285.2,231.976 1285.77,231.99 1286.34,233.246 1286.91,234.25 1287.48,234.968 1288.05,236.773 1288.61,236.34 1289.18,237.132 1289.75,235.761 1290.32,234.308 1290.89,234.042 1291.46,234.777 1292.02,235.544 1292.59,234.088 1293.16,232.805 1293.73,233.651 1294.3,233.471 1294.87,233.432 1295.43,232.009 1296,229.772 1296.57,229.749 1297.14,229.784 1297.71,227.675 1298.28,230.068 1298.84,228.155 1299.41,228.102 1299.98,228.33 1300.55,228.414 1301.12,228.632 1301.69,230.66 1302.25,231.605 1302.82,232.307 1303.39,232.165 1303.96,232.946 1304.53,233.822 1305.1,233.349 1305.66,232.204 1306.23,232.181 1306.8,231.087 1307.37,231.186 1307.94,229.907 1308.51,230.909 1309.07,230.722 1309.64,229.756 1310.21,228.896 1310.78,227.836 1311.35,227.134 1311.92,226.029 1312.48,226.366 1313.05,227.407 1313.62,227.568 1314.19,227.752 1314.76,227.985 1315.33,230.543 1315.89,231.61 1316.46,231.63 1317.03,231.59 1317.6,231.341 1318.17,231.176 1318.74,232.211 1319.3,231.936 1319.87,229.653 1320.44,229.785 1321.01,228.699 1321.58,226.527 1322.15,226.704 1322.71,228.064 1323.28,225.1 1323.85,226.421 1324.42,227.792 1324.99,226.864 1325.56,226.333 1326.12,225.5 1326.69,227.809 1327.26,227.989 1327.83,226.275 1328.4,227.57 1328.97,227.829 1329.53,226.987 1330.1,227.494 1330.67,225.528 1331.24,225.975 1331.81,224.332 1332.38,224.621 1332.94,225.288 1333.51,223.613 1334.08,224.345 1334.65,222.623 1335.22,223.18 1335.79,224.766 1336.36,223.367 1336.92,227.006 1337.49,225.23 1338.06,226.766 1338.63,227.073 1339.2,228.331 1339.77,230.5 1340.33,232.623 1340.9,232.752 1341.47,233.843 1342.04,233.577 1342.61,232.431 1343.18,234.339 1343.74,233.218 1344.31,233.814 1344.88,234.646 1345.45,236.396 1346.02,238.579 1346.59,240.279 1347.15,240.565 1347.72,236.948 1348.29,236.414 1348.86,235.755 1349.43,236.713 1350,235.21 1350.56,234.855 1351.13,234.502 1351.7,233.025 1352.27,231.717 1352.84,230.821 1353.41,230.89 1353.97,231.938 1354.54,232.918 1355.11,235.849 1355.68,236.563 1356.25,236.114 1356.82,236.583 1357.38,237.184 1357.95,235.46 1358.52,235.007 1359.09,232.402 1359.66,232.136 1360.23,232.072 1360.79,230.91 1361.36,230.906 1361.93,231.672 1362.5,230.585 1363.07,230.414 1363.64,229.233 1364.2,229.052 1364.77,231.164 1365.34,231.938 1365.91,233.8 1366.48,232.379 1367.05,234.13 1367.61,234.936 1368.18,232.57 1368.75,233.32 1369.32,232.939 1369.89,232.675 1370.46,231.46 1371.02,228.609 1371.59,228.647 1372.16,229.566 1372.73,228.573 1373.3,228.51 1373.87,228.404 1374.43,226.599 1375,226.986 1375.57,226.045 1376.14,225.117 1376.71,224.305 1377.28,223.573 1377.84,224.206 1378.41,224.831 1378.98,227.462 1379.55,226.669 1380.12,227.819 1380.69,227.779 1381.25,228.986 1381.82,230.148 1382.39,230.327 1382.96,230.238 1383.53,227.08 1384.1,228.187 1384.66,228.047 1385.23,228.299 1385.8,228.334 1386.37,229.461 1386.94,228.42 1387.51,228.443 1388.07,228.295 1388.64,227.275 1389.21,228.298 1389.78,226.4 1390.35,225.709 1390.92,226.126 1391.48,226.465 1392.05,227.893 1392.62,227.721 1393.19,226.744 1393.76,224.891 1394.33,224.396 1394.89,226.031 1395.46,227.465 1396.03,227.624 1396.6,224.762 1397.17,226.205 1397.74,224.467 1398.3,221.674 1398.87,221.086 1399.44,222.909 1400.01,222.334 1400.58,219.895 1401.15,222.88 1401.71,222.501 1402.28,225.413 1402.85,225.803 1403.42,224.339 1403.99,225.944 1404.56,226.415 1405.13,229.856 1405.69,230.822 1406.26,233.175 1406.83,235.136 1407.4,236.916 1407.97,235.772 1408.54,235.314 1409.1,231.027 1409.67,230.898 1410.24,230.831 1410.81,229.985 1411.38,228.928 1411.95,227.051 1412.51,229.545 1413.08,229.809 1413.65,230.048 1414.22,231.22 1414.79,231.332 1415.36,232.297 1415.92,231.355 1416.49,229.213 1417.06,229.491 1417.63,230.585 1418.2,232.778 1418.77,232.711 1419.33,234.748 1419.9,233.549 1420.47,237.194 1421.04,237.705 1421.61,241.473 1422.18,241.886 1422.74,241.317 1423.31,241.785 1423.88,240.772 1424.45,239.069 1425.02,239.272 1425.59,240.801 1426.15,238.919 1426.72,237.286 1427.29,236.882 1427.86,235.049 1428.43,234.846 1429,235.426 1429.56,233.09 1430.13,231.614 1430.7,228.212 1431.27,229.171 1431.84,230.033 1432.41,228.903 1432.97,229.065 1433.54,227.985 1434.11,229.058 1434.68,229.006 1435.25,228.868 1435.82,228.706 1436.38,229.526 1436.95,232.699 1437.52,232.28 1438.09,231.962 1438.66,230.679 1439.23,230.494 1439.79,229.299 1440.36,228.547 1440.93,229.264 1441.5,228.262 1442.07,225.194 1442.64,225.535 1443.2,225.627 1443.77,222.931 1444.34,222.418 1444.91,223.967 1445.48,225.268 1446.05,225.76 1446.61,225.938 1447.18,225.058 1447.75,226.442 1448.32,227.842 1448.89,227.148 1449.46,230.143 1450.02,227.071 1450.59,227.364 1451.16,227.625 1451.73,225.874 1452.3,226.363 1452.87,225.416 1453.43,224.878 1454,225.253 1454.57,225.533 1455.14,225.957 1455.71,226.39 1456.28,228.754 1456.84,226.827 1457.41,227.131 1457.98,227.303 1458.55,226.715 1459.12,227.044 1459.69,227.416 1460.25,229.909 1460.82,230.14 1461.39,230.348 1461.96,232.556 1462.53,233.389 1463.1,231.143 1463.66,229.232 1464.23,229.21 1464.8,228.39 1465.37,227.616 1465.94,228.856 1466.51,230.203 1467.07,232.352 1467.64,230.203 1468.21,231.276 1468.78,232.404 1469.35,233.575 1469.92,233.684 1470.48,234.397 1471.05,233.096 1471.62,234.892 1472.19,235.985 1472.76,235.48 1473.33,235.104 1473.89,233.852 1474.46,234.669 1475.03,235.491 1475.6,234.262 1476.17,232.946 1476.74,233.074 1477.31,232.804 1477.87,233.658 1478.44,233.375 1479.01,232.269 1479.58,231.985 1480.15,230.636 1480.72,228.455 1481.28,229.675 1481.85,231.642 1482.42,233.438 1482.99,233.097 1483.56,232.992 1484.13,233.663 1484.69,235.449 1485.26,233.927 1485.83,234.747 1486.4,234.388 1486.97,233.088 1487.54,233 1488.1,230.81 1488.67,230.727 1489.24,231.788 1489.81,232.701 1490.38,230.469 1490.95,231.381 1491.51,233.067 1492.08,232.975 1492.65,231.859 1493.22,233.905 1493.79,234.655 1494.36,236.254 1494.92,235.786 1495.49,236.389 1496.06,236.001 1496.63,236.305 1497.2,232.857 1497.77,232.736 1498.33,231.308 1498.9,230.107 1499.47,229.849 1500.04,226.658 1500.61,226.745 1501.18,227.876 1501.74,227.803 1502.31,228.903 1502.88,228.735 1503.45,229.746 1504.02,229.452 1504.59,229.338 1505.15,228.278 1505.72,227.363 1506.29,227.561 1506.86,228.4 1507.43,227.134 1508,226.271 1508.56,226.563 1509.13,225.763 1509.7,228.093 1510.27,228.156 1510.84,226.249 1511.41,226.471 1511.97,229.879 1512.54,228.927 1513.11,228.944 1513.68,229.305 1514.25,230.536 1514.82,230.374 1515.38,231.622 1515.95,231.427 1516.52,231.165 1517.09,230.044 1517.66,227.845 1518.23,231.079 1518.79,229.744 1519.36,230.642 1519.93,229.486 1520.5,226.547 1521.07,226.585 1521.64,227.786 1522.2,227.96 1522.77,227.026 1523.34,228.306 1523.91,230.412 1524.48,229.279 1525.05,226.899 1525.61,226.98 1526.18,226.162 1526.75,228.575 1527.32,227.582 1527.89,229.753 1528.46,227.71 1529.02,228.879 1529.59,228.764 1530.16,231.854 1530.73,233.731 1531.3,233.482 1531.87,233.187 1532.43,232.707 1533,234.153 1533.57,233.771 1534.14,234.533 1534.71,234.237 1535.28,231.794 1535.84,231.735 1536.41,231.447 1536.98,228.914 1537.55,227.777 1538.12,226.755 1538.69,228.817 1539.25,227.771 1539.82,226.925 1540.39,227.054 1540.96,227.218 1541.53,229.449 1542.1,228.611 1542.66,228.799 1543.23,226.768 1543.8,227.176 1544.37,225.094 1544.94,225.339 1545.51,223.698 1546.08,224.261 1546.64,224.917 1547.21,227.342 1547.78,226.627 1548.35,225.732 1548.92,226.162 1549.49,225.457 1550.05,228.905 1550.62,229.123 1551.19,228.421 1551.76,227.66 1552.33,227.919 1552.9,229.068 1553.46,230.109 1554.03,231.25 1554.6,230.107 1555.17,232.36 1555.74,233.395 1556.31,232.351 1556.87,233.502 1557.44,232.197 1558.01,232.256 1558.58,234.248 1559.15,236.217 1559.72,234.027 1560.28,233.893 1560.85,233.655 1561.42,233.312 1561.99,233.017 1562.56,231.879 1563.13,229.891 1563.69,229.838 1564.26,231.935 1564.83,228.803 1565.4,229.84 1565.97,229.862 1566.54,231.985 1567.1,229.711 1567.67,229.661 1568.24,228.594 1568.81,228.682 1569.38,230.826 1569.95,229.939 1570.51,229.882 1571.08,228.918 1571.65,227.895 1572.22,229.173 1572.79,230.198 1573.36,231.269 1573.92,231.286 1574.49,231.263 1575.06,231.172 1575.63,232.051 1576.2,232.115 1576.77,231.981 1577.33,234.964 1577.9,235.757 1578.47,235.273 1579.04,234.957 1579.61,235.653 1580.18,237.207 1580.74,235.651 1581.31,235.243 1581.88,238.545 1582.45,235.932 1583.02,234.32 1583.59,234.809 1584.15,233.125 1584.72,234.099 1585.29,235.901 1585.86,234.336 1586.43,235.069 1587,235.496 1587.56,232.987 1588.13,232.636 1588.7,231.157 1589.27,226.887 1589.84,229.886 1590.41,231.833 1590.97,231.368 1591.54,229.059 1592.11,228.161 1592.68,226.268 1593.25,228.26 1593.82,228.338 1594.38,227.393 1594.95,227.631 1595.52,226.779 1596.09,225.057 1596.66,224.006 1597.23,226.287 1597.79,226.345 1598.36,227.602 1598.93,229.735 1599.5,229.4 1600.07,229.393 1600.64,230.724 1601.2,232.645 1601.77,229.39 1602.34,229.6 1602.91,230.608 1603.48,230.306 1604.05,232.434 1604.61,232.867 1605.18,232.618 1605.75,236.555 1606.32,235.808 1606.89,234.161 1607.46,233.82 1608.02,229.329 1608.59,228.293 1609.16,227.19 1609.73,227.187 1610.3,227.304 1610.87,227.19 1611.43,228.198 1612,228.058 1612.57,228.064 1613.14,226.036 1613.71,227.208 1614.28,226.334 1614.84,225.718 1615.41,225.989 1615.98,226.081 1616.55,227.308 1617.12,227.496 1617.69,228.574 1618.26,230.502 1618.82,230.506 1619.39,229.113 1619.96,230.175 1620.53,229.005 1621.1,228.925 1621.67,228.905 1622.23,224.737 1622.8,227.145 1623.37,228.371 1623.94,228.483 1624.51,228.571 1625.08,228.497 1625.64,229.518 1626.21,232.424 1626.78,234.221 1627.35,232.727 1627.92,231.451 1628.49,232.12 1629.05,231.768 1629.62,230.631 1630.19,229.518 1630.76,227.203 1631.33,226.37 1631.9,225.44 1632.46,226.853 1633.03,229 1633.6,229.157 1634.17,229.131 1634.74,229.288 1635.31,229.168 1635.87,229.042 1636.44,227.862 1637.01,229.247 1637.58,230.456 1638.15,226.462 1638.72,226.693 1639.28,228.951 1639.85,229.956 1640.42,230.931 1640.99,232.137 1641.56,234.151 1642.13,231.659 1642.69,231.621 1643.26,231.24 1643.83,230.996 1644.4,231.708 1644.97,232.69 1645.54,231.481 1646.1,230.253 1646.67,229.265 1647.24,229.48 1647.81,230.461 1648.38,229.236 1648.95,230.241 1649.51,229.184 1650.08,227.153 1650.65,228.049 1651.22,227.241 1651.79,227.591 1652.36,228.605 1652.92,228.713 1653.49,227.932 1654.06,228.141 1654.63,227.251 1655.2,227.185 1655.77,224.986 1656.33,225.353 1656.9,227.798 1657.47,226.828 1658.04,228.074 1658.61,228.158 1659.18,229.318 1659.74,228.313 1660.31,228.408 1660.88,230.657 1661.45,227.941 1662.02,227.012 1662.59,228.374 1663.15,226.601 1663.72,227.878 1664.29,228.154 1664.86,227.502 1665.43,228.907 1666,227.708 1666.56,226.909 1667.13,228.217 1667.7,227.228 1668.27,226.496 1668.84,227.028 1669.41,227.469 1669.97,226.623 1670.54,226.074 1671.11,227.476 1671.68,229.608 1672.25,228.765 1672.82,227.924 1673.38,229.174 1673.95,229.279 1674.52,232.509 1675.09,232.541 1675.66,234.674 1676.23,234.456 1676.79,233.084 1677.36,234.928 1677.93,233.546 1678.5,231.412 1679.07,230.181 1679.64,230.283 1680.2,228.393 1680.77,228.577 1681.34,229.763 1681.91,229.749 1682.48,229.777 1683.05,229.927 1683.61,230.932 1684.18,229.858 1684.75,232.069 1685.32,231.058 1685.89,231.703 1686.46,229.394 1687.02,229.296 1687.59,228.512 1688.16,229.84 1688.73,229.846 1689.3,228.933 1689.87,228.941 1690.44,226.961 1691,230.494 1691.57,231.506 1692.14,230.458 1692.71,230.429 1693.28,228.471 1693.85,226.766 1694.41,230.197 1694.98,232.258 1695.55,232.941 1696.12,232.574 1696.69,233.222 1697.26,235.183 1697.82,233.773 1698.39,235.565 1698.96,232.194 1699.53,233.846 1700.1,231.48 1700.67,231.786 1701.23,232.655 1701.8,232.389 1702.37,233.19 1702.94,233.17 1703.51,234.017 1704.08,230.518 1704.64,231.641 1705.21,230.762 1705.78,229.949 1706.35,229.181 1706.92,229.155 1707.49,228.218 1708.05,228.436 1708.62,227.472 1709.19,227.65 1709.76,226.737 1710.33,227.144 1710.9,228.379 1711.46,228.538 1712.03,227.748 1712.6,230.007 1713.17,231.159 1713.74,231.071 1714.31,230.95 1714.87,230.767 1715.44,232.123 1716.01,232.872 1716.58,234.7 1717.15,234.462 1717.72,233.16 1718.28,237.127 1718.85,236.516 1719.42,237.05 1719.99,238.59 1720.56,238.052 1721.13,234.339 1721.69,236.236 1722.26,232.643 1722.83,232.359 1723.4,232.054 1723.97,231.745 1724.54,231.736 1725.1,233.651 1725.67,233.317 1726.24,234.158 1726.81,232.527 1727.38,229.905 1727.95,230.899 1728.51,230.616 1729.08,231.449 1729.65,230.451 1730.22,231.561 1730.79,231.447 1731.36,230.087 1731.92,230.156 1732.49,229.238 1733.06,228.249 1733.63,227.189 1734.2,226.406 1734.77,224.507 1735.33,225.87 1735.9,226.46 1736.47,227.529 1737.04,229.853 1737.61,228.949 1738.18,228.813 1738.74,228.84 1739.31,228.874 1739.88,228.764 1740.45,228.905 1741.02,226.822 1741.59,227.134 1742.15,227.227 1742.72,228.404 1743.29,229.744 1743.86,233.828 1744.43,233.579 1745,233.199 1745.56,233.817 1746.13,232.525 1746.7,231.383 1747.27,230.063 1747.84,225.975 1748.41,226.229 1748.97,227.552 1749.54,228.742 1750.11,228.808 1750.68,228.892 1751.25,228.749 1751.82,227.798 1752.38,228.045 1752.95,229.413 1753.52,227.207 1754.09,225.197 1754.66,223.496 1755.23,224.653 1755.79,224.945 1756.36,223.057 1756.93,224.363 1757.5,223.875 1758.07,226.391 1758.64,226.7 1759.21,228.027 1759.77,226.26 1760.34,228.529 1760.91,228.782 1761.48,228.87 1762.05,230.002 1762.62,231.258 1763.18,231.264 1763.75,232.119 1764.32,232.05 1764.89,233.989 1765.46,232.797 1766.03,232.395 1766.59,229.964 1767.16,230.31 1767.73,230.329 1768.3,230.334 1768.87,230.224 1769.44,228.897 1770,227.812 1770.57,226.759 1771.14,226.936 1771.71,226.329 1772.28,226.654 1772.85,224.8 1773.41,224.12 1773.98,224.438 1774.55,224.856 1775.12,224.099 1775.69,224.575 1776.26,224.106 1776.82,224.68 1777.39,225.322 1777.96,229.848 1778.53,230.06 1779.1,231.068 1779.67,230.863 1780.23,231.707 1780.8,232.652 1781.37,230.539 1781.94,231.671 1782.51,230.75 1783.08,231.659 1783.64,230.575 1784.21,232.64 1784.78,233.488 1785.35,233.201 1785.92,232.007 1786.49,230.997 1787.05,229.377 1787.62,227.535 1788.19,226.653 1788.76,227.037 1789.33,230.497 1789.9,231.413 1790.46,233.327 1791.03,231.337 1791.6,231.393 1792.17,229.353 1792.74,229.422 1793.31,228.672 1793.87,226.793 1794.44,226.09 1795.01,225.584 1795.58,226.824 1796.15,225.284 1796.72,224.849 1797.28,226.309 1797.85,227.459 1798.42,226.721 1798.99,226.959 1799.56,225.281 1800.13,225.902 1800.69,227.329 1801.26,227.581 1801.83,225.93 1802.4,225.425 1802.97,223.574 1803.54,225.242 1804.1,225.66 1804.67,228.109 1805.24,228.274 1805.81,229.687 1806.38,232.174 1806.95,234.364 1807.51,232.413 1808.08,233.516 1808.65,233.521 1809.22,233.376 1809.79,233.195 1810.36,230.069 1810.92,231.196 1811.49,231.154 1812.06,232.189 1812.63,233.252 1813.2,235.279 1813.77,235.291 1814.33,235.094 1814.9,235.778 1815.47,234.239 1816.04,231.064 1816.61,232.145 1817.18,234.073 1817.74,233.877 1818.31,232.656 1818.88,232.291 1819.45,232.112 1820.02,231.922 1820.59,231.608 1821.15,233.502 1821.72,233.321 1822.29,233.21 1822.86,233.998 1823.43,234.646 1824,234.272 1824.56,233.971 1825.13,233.682 1825.7,234.222 1826.27,233.948 1826.84,233.709 1827.41,233.164 1827.97,232.921 1828.54,230.623 1829.11,232.56 1829.68,232.408 1830.25,232.157 1830.82,231.805 1831.39,230.598 1831.95,233.529 1832.52,233.395 1833.09,233.157 1833.66,231.052 1834.23,231.872 1834.8,233.779 1835.36,233.492 1835.93,233.11 1836.5,234.637 1837.07,237.085 1837.64,238.675 1838.21,237.921 1838.77,237.208 1839.34,235.516 1839.91,232.882 1840.48,231.71 1841.05,228.551 1841.62,228.779 1842.18,229.737 1842.75,229.87 1843.32,228.873 1843.89,227.827 1844.46,228.897 1845.03,229.912 1845.59,230.704 1846.16,231.729 1846.73,230.559 1847.3,230.671 1847.87,228.533 1848.44,224.428 1849,223.662 1849.57,221.993 1850.14,221.698 1850.71,223.033 1851.28,221.263 1851.85,221.012 1852.41,221.717 1852.98,221.206 1853.55,220.798 1854.12,220.508 1854.69,221.298 1855.26,222.705 1855.82,226.462 1856.39,229.78 1856.96,229.723 1857.53,230.203 1858.1,230.481 1858.67,229.62 1859.23,228.543 1859.8,227.573 1860.37,225.74 1860.94,224.145 1861.51,223.659 1862.08,222.097 1862.64,223.828 1863.21,227.215 1863.78,226.394 1864.35,225.727 1864.92,223.793 1865.49,227.403 1866.05,229.855 1866.62,231.026 1867.19,233.284 1867.76,236.33 1868.33,236.988 1868.9,235.456 1869.46,235.171 1870.03,235.941 1870.6,236.556 1871.17,239.163 1871.74,238.622 1872.31,237.929 1872.87,237.549 1873.44,233.947 1874.01,234.8 1874.58,233.434 1875.15,233.311 1875.72,231.051 1876.28,233.151 1876.85,231.907 1877.42,230.906 1877.99,231.86 1878.56,232.857 1879.13,233.648 1879.69,232.466 1880.26,230.402 1880.83,232.385 1881.4,232.452 1881.97,232.3 1882.54,231.076 1883.1,228.768 1883.67,229.811 1884.24,229.819 1884.81,228.882 1885.38,229.878 1885.95,227.781 1886.51,227.894 1887.08,226.089 1887.65,228.28 1888.22,229.714 1888.79,227.774 1889.36,227.703 1889.92,228.93 1890.49,230.239 1891.06,231.157 1891.63,232.159 1892.2,232.151 1892.77,233.112 1893.33,232.788 1893.9,230.267 1894.47,229.501 1895.04,230.365 1895.61,230.228 1896.18,229.059 1896.74,230.126 1897.31,228.081 1897.88,227.164 1898.45,227.392 1899.02,228.544 1899.59,225.579 1900.16,227.909 1900.72,227.826 1901.29,228.021 1901.86,229.196 1902.43,229.432 1903,227.475 1903.57,226.766 1904.13,225.951 1904.7,224.934 1905.27,227.394 1905.84,226.735 1906.41,227.964 1906.98,227.363 1907.54,229.692 1908.11,230.682 1908.68,229.574 1909.25,229.644 1909.82,228.631 1910.39,229.802 1910.95,230.833 1911.52,230.863 1912.09,231.83 1912.66,233.099 1913.23,232.813 1913.8,229.726 1914.36,228.637 1914.93,227.704 1915.5,227.151 1916.07,227.33 1916.64,227.368 1917.21,227.52 1917.77,229.928 1918.34,229.8 1918.91,229.639 1919.48,228.861 1920.05,229.226 1920.62,232.395 1921.18,231.087 1921.75,230.001 1922.32,232.398 1922.89,232.368 1923.46,233.136 1924.03,232.763 1924.59,233.643 1925.16,234.523 1925.73,234.456 1926.3,237.084 1926.87,238.612 1927.44,239.269 1928,238.534 1928.57,236.955 1929.14,235.38 1929.71,234.844 1930.28,234.204 1930.85,236.928 1931.41,236.439 1931.98,236.054 1932.55,236.641 1933.12,237.142 1933.69,236.339 1934.26,233.734 1934.82,233.253 1935.39,232.023 1935.96,232.774 1936.53,231.362 1937.1,231.18 1937.67,230.706 1938.23,231.64 1938.8,232.257 1939.37,230.92 1939.94,231.723 1940.51,231.522 1941.08,232.502 1941.64,234.246 1942.21,234.992 1942.78,233.397 1943.35,230.966 1943.92,232.877 1944.49,231.776 1945.05,231.697 1945.62,230.689 1946.19,227.355 1946.76,227.36 1947.33,227.512 1947.9,227.587 1948.46,227.571 1949.03,227.523 1949.6,227.489 1950.17,226.542 1950.74,226.625 1951.31,227.757 1951.87,228.965 1952.44,229.169 1953.01,229.067 1953.58,225.956 1954.15,227.248 1954.72,225.338 1955.28,225.537 1955.85,224.809 1956.42,225.912 1956.99,226.985 1957.56,231.341 1958.13,231.191 1958.69,229.742 1959.26,228.748 1959.83,228.647 1960.4,230.81 1960.97,232.791 1961.54,232.354 1962.1,232.103 1962.67,230.9 1963.24,231.164 1963.81,231.885 1964.38,231.756 1964.95,230.481 1965.51,230.337 1966.08,231.235 1966.65,232.922 1967.22,230.613 1967.79,229.635 1968.36,228.421 1968.92,228.382 1969.49,227.486 1970.06,226.605 1970.63,226.897 1971.2,227.8 1971.77,225.517 1972.34,224.78 1972.9,225.952 1973.47,225.224 1974.04,224.59 1974.61,223.89 1975.18,224.245 1975.75,225.681 1976.31,225.915 1976.88,226.267 1977.45,223.538 1978.02,225.063 1978.59,226.506 1979.16,227.809 1979.72,229.081 1980.29,228.189 1980.86,224.281 1981.43,224.886 1982,225.562 1982.57,224.893 1983.13,227.012 1983.7,226.341 1984.27,227.648 1984.84,224.752 1985.41,225.343 1985.98,222.441 1986.54,223.211 1987.11,224.712 1987.68,225.337 1988.25,222.638 1988.82,226.359 1989.39,223.789 1989.95,221.223 1990.52,222.131 1991.09,223.494 1991.66,224.068 1992.23,224.539 1992.8,224.177 1993.36,224.67 1993.93,225.228 1994.5,227.853 1995.07,229.216 1995.64,229.35 1996.21,228.548 1996.77,227.926 1997.34,226.26 1997.91,226.771 1998.48,228.213 1999.05,230.728 1999.62,228.734 2000.18,230.947 2000.75,231.183 2001.32,232.344 2001.89,233.423 2002.46,234.322 2003.03,234.134 2003.59,232.059 2004.16,232.016 2004.73,232.987 2005.3,231.859 2005.87,233.216 2006.44,233.936 2007,231.67 2007.57,231.652 2008.14,230.851 2008.71,230.881 2009.28,231.958 2009.85,230.953 2010.41,233.007 2010.98,232 2011.55,230.978 2012.12,232 2012.69,233.979 2013.26,233.88 2013.82,232.633 2014.39,233.591 2014.96,233.285 2015.53,236.264 2016.1,235.897 2016.67,236.345 2017.23,238.142 2017.8,236.451 2018.37,235.942 2018.94,237.554 2019.51,238.217 2020.08,238.827 2020.64,237.346 2021.21,237.058 2021.78,238.834 2022.35,240.259 2022.92,239.678 2023.49,238.766 2024.05,239.077 2024.62,237.614 2025.19,238.06 2025.76,237.445 2026.33,233.825 2026.9,234.418 2027.46,233.084 2028.03,232.818 2028.6,234.67 2029.17,233.064 2029.74,233.457 2030.31,234.202 2030.87,234.789 2031.44,233.278 2032.01,232.993 2032.58,233.481 2033.15,231.663 2033.72,230.529 2034.28,229.177 2034.85,227.843 2035.42,226.751 2035.99,225.739 2036.56,226.806 2037.13,226.898 2037.69,227.098 2038.26,227.056 2038.83,227.314 2039.4,229.455 2039.97,228.443 2040.54,229.62 2041.11,231.646 2041.67,230.248 2042.24,229.042 2042.81,229.112 2043.38,228.023 2043.95,225.204 2044.52,226.532 2045.08,225.758 2045.65,226.219 2046.22,227.424 2046.79,227.549 2047.36,228.645 2047.93,228.867 2048.49,230.042 2049.06,229.193 2049.63,230.439 2050.2,230.073 2050.77,229.967 2051.34,229.96 2051.9,227.718 2052.47,229.836 2053.04,228.823 2053.61,228.978 2054.18,226.037 2054.75,226.203 2055.31,225.418 2055.88,225.825 2056.45,227.265 2057.02,228.581 2057.59,231.896 2058.16,230.689 2058.72,229.405 2059.29,228.535 2059.86,229.942 2060.43,229.652 2061,229.39 2061.57,229.372 2062.13,229.248 2062.7,229.271 2063.27,230.286 2063.84,229.226 2064.41,229.421 2064.98,230.41 2065.54,228.309 2066.11,227.302 2066.68,226.411 2067.25,225.417 2067.82,226.661 2068.39,227.015 2068.95,225.839 2069.52,226.02 2070.09,225.22 2070.66,225.773 2071.23,228.135 2071.8,229.317 2072.36,229.501 2072.93,233.723 2073.5,233.399 2074.07,233.32 2074.64,232.273 2075.21,234.315 2075.77,232.108 2076.34,230.833 2076.91,229.653 2077.48,228.556 2078.05,229.768 2078.62,230.728 2079.18,230.9 2079.75,230.808 2080.32,230.775 2080.89,229.933 2081.46,232.794 2082.03,231.707 2082.59,231.393 2083.16,229.268 2083.73,229.175 2084.3,229.393 2084.87,230.698 2085.44,229.786 2086,233.051 2086.57,231.635 2087.14,231.76 2087.71,228.492 2088.28,228.762 2088.85,228.838 2089.41,228.099 2089.98,228.023 2090.55,230.337 2091.12,228.152 2091.69,227.285 2092.26,228.401 2092.82,229.531 2093.39,229.627 2093.96,229.56 2094.53,232.605 2095.1,232.368 2095.67,232.254 2096.23,231.008 2096.8,231.665 2097.37,228.574 2097.94,230.502 2098.51,229.558 2099.08,229.348 2099.64,229.6 2100.21,231.575 2100.78,233.571 2101.35,233.112 2101.92,234.002 2102.49,233.891 2103.05,232.382 2103.62,233.336 2104.19,234.994 2104.76,231.745 2105.33,231.63 2105.9,232.213 2106.46,232.146 2107.03,231.819 2107.6,230.608 2108.17,230.559 2108.74,230.513 2109.31,230.447 2109.87,230.536 2110.44,232.531 2111.01,233.273 2111.58,234.018 2112.15,233.413 2112.72,231.865 2113.29,230.759 2113.85,229.615 2114.42,229.463 2114.99,229.46 2115.56,227.401 2116.13,227.457 2116.7,227.69 2117.26,227.74 2117.83,228.963 2118.4,228.975 2118.97,228.781 2119.54,227.856 2120.11,228.151 2120.67,226.914 2121.24,228.159 2121.81,228.325 2122.38,228.4 2122.95,230.603 2123.52,230.535 2124.08,230.356 2124.65,227.153 2125.22,230.506 2125.79,231.453 2126.36,227.119 2126.93,228.398 2127.49,229.513 2128.06,229.496 2128.63,228.418 2129.2,227.658 2129.77,229.009 2130.34,226.234 2130.9,227.522 2131.47,228.914 2132.04,229.006 2132.61,228.853 2133.18,227.927 2133.75,229.137 2134.31,230.252 2134.88,232.231 2135.45,231.253 2136.02,231.092 2136.59,231.066 2137.16,232.106 2137.72,230.068 2138.29,228.926 2138.86,230.974 2139.43,230.922 2140,229.746 2140.57,229.539 2141.13,229.204 2141.7,229.334 2142.27,228.193 2142.84,227.281 2143.41,226.378 2143.98,226.697 2144.54,225.821 2145.11,226.154 2145.68,225.648 2146.25,225.844 2146.82,227.329 2147.39,227.61 2147.95,225.498 2148.52,229.072 2149.09,229.261 2149.66,227.278 2150.23,228.558 2150.8,227.6 2151.36,227.831 2151.93,227.997 2152.5,228.207 2153.07,228.36 2153.64,230.652 2154.21,230.56 2154.77,230.418 2155.34,228.385 2155.91,229.617 2156.48,230.56 2157.05,230.603 2157.62,232.6 2158.18,232.381 2158.75,232.229 2159.32,233.072 2159.89,231.862 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.025\n  with uncertainty of ± 0.002287945641715358\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.02056 ± (0.00210982, 0.00214422) (MC)\n  95% confidence interval: [-4.02472, -4.01661] (MC)\n  linear error propagation: -4.02066 ± 0.00203671\n  |δ_y| = |0.00131811| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.02056451886839, val_l = 0.00415429341600948, val_u = 0.003959175054546016)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip970\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip971\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip970)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip972\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.78 2211.02,1144.78 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,972.216 2211.02,972.216 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,799.652 2211.02,799.652 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,627.088 2211.02,627.088 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,454.524 2211.02,454.524 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,281.96 2211.02,281.96 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.78 365.751,1144.78 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,972.216 365.751,972.216 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,799.652 365.751,799.652 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,627.088 365.751,627.088 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,454.524 365.751,454.524 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,281.96 365.751,281.96 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M298.909 1130.58 Q295.298 1130.58 293.469 1134.14 Q291.664 1137.69 291.664 1144.81 Q291.664 1151.92 293.469 1155.49 Q295.298 1159.03 298.909 1159.03 Q302.543 1159.03 304.349 1155.49 Q306.177 1151.92 306.177 1144.81 Q306.177 1137.69 304.349 1134.14 Q302.543 1130.58 298.909 1130.58 M298.909 1126.88 Q304.719 1126.88 307.775 1131.48 Q310.853 1136.06 310.853 1144.81 Q310.853 1153.54 307.775 1158.15 Q304.719 1162.73 298.909 1162.73 Q293.099 1162.73 290.02 1158.15 Q286.964 1153.54 286.964 1144.81 Q286.964 1136.06 290.02 1131.48 Q293.099 1126.88 298.909 1126.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M259.557 985.561 L267.196 985.561 L267.196 959.195 L258.886 960.862 L258.886 956.603 L267.15 954.936 L271.826 954.936 L271.826 985.561 L279.465 985.561 L279.465 989.496 L259.557 989.496 L259.557 985.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 958.015 Q295.298 958.015 293.469 961.58 Q291.664 965.121 291.664 972.251 Q291.664 979.357 293.469 982.922 Q295.298 986.464 298.909 986.464 Q302.543 986.464 304.349 982.922 Q306.177 979.357 306.177 972.251 Q306.177 965.121 304.349 961.58 Q302.543 958.015 298.909 958.015 M298.909 954.311 Q304.719 954.311 307.775 958.918 Q310.853 963.501 310.853 972.251 Q310.853 980.978 307.775 985.584 Q304.719 990.168 298.909 990.168 Q293.099 990.168 290.02 985.584 Q286.964 980.978 286.964 972.251 Q286.964 963.501 290.02 958.918 Q293.099 954.311 298.909 954.311 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M262.775 812.997 L279.094 812.997 L279.094 816.932 L257.15 816.932 L257.15 812.997 Q259.812 810.242 264.395 805.613 Q269.002 800.96 270.182 799.618 Q272.428 797.094 273.307 795.358 Q274.21 793.599 274.21 791.909 Q274.21 789.155 272.266 787.419 Q270.344 785.682 267.242 785.682 Q265.043 785.682 262.59 786.446 Q260.159 787.21 257.381 788.761 L257.381 784.039 Q260.205 782.905 262.659 782.326 Q265.113 781.747 267.15 781.747 Q272.52 781.747 275.715 784.432 Q278.909 787.118 278.909 791.608 Q278.909 793.738 278.099 795.659 Q277.312 797.557 275.205 800.15 Q274.627 800.821 271.525 804.039 Q268.423 807.233 262.775 812.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 785.451 Q295.298 785.451 293.469 789.016 Q291.664 792.557 291.664 799.687 Q291.664 806.793 293.469 810.358 Q295.298 813.9 298.909 813.9 Q302.543 813.9 304.349 810.358 Q306.177 806.793 306.177 799.687 Q306.177 792.557 304.349 789.016 Q302.543 785.451 298.909 785.451 M298.909 781.747 Q304.719 781.747 307.775 786.354 Q310.853 790.937 310.853 799.687 Q310.853 808.414 307.775 813.02 Q304.719 817.604 298.909 817.604 Q293.099 817.604 290.02 813.02 Q286.964 808.414 286.964 799.687 Q286.964 790.937 290.02 786.354 Q293.099 781.747 298.909 781.747 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M272.914 625.734 Q276.27 626.452 278.145 628.72 Q280.043 630.989 280.043 634.322 Q280.043 639.438 276.525 642.239 Q273.006 645.04 266.525 645.04 Q264.349 645.04 262.034 644.6 Q259.742 644.183 257.289 643.327 L257.289 638.813 Q259.233 639.947 261.548 640.526 Q263.863 641.104 266.386 641.104 Q270.784 641.104 273.076 639.368 Q275.39 637.632 275.39 634.322 Q275.39 631.266 273.238 629.554 Q271.108 627.817 267.289 627.817 L263.261 627.817 L263.261 623.975 L267.474 623.975 Q270.923 623.975 272.752 622.609 Q274.58 621.22 274.58 618.628 Q274.58 615.966 272.682 614.554 Q270.807 613.118 267.289 613.118 Q265.367 613.118 263.168 613.535 Q260.969 613.952 258.33 614.831 L258.33 610.665 Q260.992 609.924 263.307 609.554 Q265.645 609.183 267.705 609.183 Q273.029 609.183 276.131 611.614 Q279.233 614.021 279.233 618.142 Q279.233 621.012 277.59 623.003 Q275.946 624.97 272.914 625.734 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 612.887 Q295.298 612.887 293.469 616.452 Q291.664 619.993 291.664 627.123 Q291.664 634.229 293.469 637.794 Q295.298 641.336 298.909 641.336 Q302.543 641.336 304.349 637.794 Q306.177 634.229 306.177 627.123 Q306.177 619.993 304.349 616.452 Q302.543 612.887 298.909 612.887 M298.909 609.183 Q304.719 609.183 307.775 613.79 Q310.853 618.373 310.853 627.123 Q310.853 635.85 307.775 640.456 Q304.719 645.04 298.909 645.04 Q293.099 645.04 290.02 640.456 Q286.964 635.85 286.964 627.123 Q286.964 618.373 290.02 613.79 Q293.099 609.183 298.909 609.183 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M271.594 441.318 L259.789 459.767 L271.594 459.767 L271.594 441.318 M270.367 437.244 L276.247 437.244 L276.247 459.767 L281.177 459.767 L281.177 463.656 L276.247 463.656 L276.247 471.804 L271.594 471.804 L271.594 463.656 L255.992 463.656 L255.992 459.142 L270.367 437.244 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 440.323 Q295.298 440.323 293.469 443.888 Q291.664 447.429 291.664 454.559 Q291.664 461.665 293.469 465.23 Q295.298 468.772 298.909 468.772 Q302.543 468.772 304.349 465.23 Q306.177 461.665 306.177 454.559 Q306.177 447.429 304.349 443.888 Q302.543 440.323 298.909 440.323 M298.909 436.619 Q304.719 436.619 307.775 441.226 Q310.853 445.809 310.853 454.559 Q310.853 463.286 307.775 467.892 Q304.719 472.476 298.909 472.476 Q293.099 472.476 290.02 467.892 Q286.964 463.286 286.964 454.559 Q286.964 445.809 290.02 441.226 Q293.099 436.619 298.909 436.619 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M258.793 264.68 L277.15 264.68 L277.15 268.615 L263.076 268.615 L263.076 277.088 Q264.094 276.74 265.113 276.578 Q266.131 276.393 267.15 276.393 Q272.937 276.393 276.316 279.564 Q279.696 282.736 279.696 288.152 Q279.696 293.731 276.224 296.833 Q272.752 299.912 266.432 299.912 Q264.256 299.912 261.988 299.541 Q259.742 299.171 257.335 298.43 L257.335 293.731 Q259.418 294.865 261.641 295.421 Q263.863 295.976 266.34 295.976 Q270.344 295.976 272.682 293.87 Q275.02 291.764 275.02 288.152 Q275.02 284.541 272.682 282.435 Q270.344 280.328 266.34 280.328 Q264.465 280.328 262.59 280.745 Q260.738 281.162 258.793 282.041 L258.793 264.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M298.909 267.759 Q295.298 267.759 293.469 271.324 Q291.664 274.865 291.664 281.995 Q291.664 289.101 293.469 292.666 Q295.298 296.208 298.909 296.208 Q302.543 296.208 304.349 292.666 Q306.177 289.101 306.177 281.995 Q306.177 274.865 304.349 271.324 Q302.543 267.759 298.909 267.759 M298.909 264.055 Q304.719 264.055 307.775 268.662 Q310.853 273.245 310.853 281.995 Q310.853 290.722 307.775 295.328 Q304.719 299.912 298.909 299.912 Q293.099 299.912 290.02 295.328 Q286.964 290.722 286.964 281.995 Q286.964 273.245 290.02 268.662 Q293.099 264.055 298.909 264.055 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip972)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1151.84 400.199,1029.96 400.786,914.059 401.372,807.702 401.958,832.13 402.545,847.236 403.131,754.662 403.718,673.57 404.304,595.695 404.891,529.577 405.477,464.788 406.063,408.649 406.65,358.115 407.236,458.732 407.823,411.96 408.409,367.804 408.995,328.282 409.582,293.094 410.168,263.235 410.755,287.353 411.341,259.781 411.927,281.385 412.514,257.887 413.1,237.698 413.687,219.895 414.273,242.443 414.86,228.591 415.446,249.069 416.032,238.899 416.619,229.834 417.205,249.471 417.792,292.327 418.378,287.288 418.964,306.387 419.551,305.234 420.137,304.862 420.724,340.314 421.31,357.864 421.896,375.342 422.483,390.984 423.069,419.937 423.656,434.771 424.242,450.471 424.829,465.54 425.415,479.878 426.001,493.995 426.588,499.615 427.174,514.385 427.761,538.076 428.347,552.884 428.933,575.363 429.52,596.331 430.106,608.507 430.693,628.345 431.279,632.657 431.865,645.65 432.452,657.688 433.038,663.028 433.625,675.186 434.211,697.852 434.798,703.131 435.384,709.033 435.97,715.595 436.557,732.206 437.143,761.801 437.73,771.217 438.316,789.364 438.902,814.892 439.489,818.466 440.075,826.531 440.662,834.685 441.248,839.515 441.835,844.141 442.421,852.574 443.007,857.347 443.594,869.481 444.18,877.835 444.767,889.277 445.353,897.4 445.939,904.83 446.526,909.436 447.112,926.682 447.699,933.643 448.285,949.671 448.871,956.448 449.458,968.665 450.044,980.431 450.631,989.014 451.217,994.644 451.804,997.515 452.39,1001 452.976,1006.89 453.563,1022.53 454.149,1025.86 454.736,1031.28 455.322,1041.43 455.908,1042.05 456.495,1052.22 457.081,1054.8 457.668,1055.38 458.254,1060.35 458.84,1065.43 459.427,1077.3 460.013,1084.34 460.6,1088.58 461.186,1095.02 461.773,1101.27 462.359,1103.27 462.945,1105.07 463.532,1105.26 464.118,1109.49 464.705,1117.53 465.291,1119.48 465.877,1129.09 466.464,1130.99 467.05,1132.65 467.637,1140.31 468.223,1136.27 468.809,1141.83 469.396,1150.77 469.982,1152.27 470.569,1159.3 471.155,1160.75 471.742,1162.35 472.328,1170.6 472.914,1169.66 473.501,1170.71 474.087,1173.48 474.674,1178.21 475.26,1182.63 475.846,1185.12 476.433,1186.1 477.019,1188.81 477.606,1191.11 478.192,1195.04 478.778,1198.96 479.365,1200.89 479.951,1202.67 480.538,1208.03 481.124,1208.31 481.711,1210.22 482.297,1209.02 482.883,1212.16 483.47,1210.54 484.056,1214.26 484.643,1212.93 485.229,1211.54 485.815,1213.5 486.402,1215.42 486.988,1217.16 487.575,1217.36 488.161,1217.72 488.748,1216.3 489.334,1215.21 489.92,1219.85 490.507,1222.94 491.093,1224.33 491.68,1224.57 492.266,1224.7 492.852,1226.12 493.439,1225.96 494.025,1227.58 494.612,1227.4 495.198,1229.15 495.784,1229.04 496.371,1232.06 496.957,1233.27 497.544,1233.14 498.13,1233 498.717,1232.79 499.303,1230.98 499.889,1231.13 500.476,1232.59 501.062,1236.69 501.649,1236.03 502.235,1231.13 502.821,1232.63 503.408,1232.9 503.994,1233.03 504.581,1234.25 505.167,1234.19 505.753,1229.81 506.34,1234.31 506.926,1235.62 507.513,1235.48 508.099,1238.29 508.686,1239.21 509.272,1240.22 509.858,1240.05 510.445,1237.99 511.031,1237.65 511.618,1238.63 512.204,1239.68 512.79,1237.72 513.377,1234.93 513.963,1236.29 514.55,1237.4 515.136,1238.86 515.722,1241.41 516.309,1243.94 516.895,1244.77 517.482,1245.43 518.068,1247.74 518.655,1244.07 519.241,1243.36 519.827,1243.04 520.414,1245.18 521,1247.47 521.587,1246.94 522.173,1246.26 522.759,1245.68 523.346,1247.84 523.932,1248.36 524.519,1246.07 525.105,1246.66 525.691,1246.18 526.278,1245.61 526.864,1247.62 527.451,1246.61 528.037,1247.45 528.624,1247.98 529.21,1250.12 529.796,1250.53 530.383,1249.48 530.969,1248.42 531.556,1249.16 532.142,1248.59 532.728,1248.06 533.315,1248.6 533.901,1249.1 534.488,1249.48 535.074,1247.06 535.661,1244.82 536.247,1244.33 536.833,1241.01 537.42,1238.87 538.006,1238.47 538.593,1238.37 539.179,1238.16 539.765,1239.12 540.352,1240.13 540.938,1238.27 541.525,1239.6 542.111,1240.38 542.697,1238.61 543.284,1238.38 543.87,1237.88 544.457,1237.41 545.043,1237.24 545.63,1241.28 546.216,1240.7 546.802,1238.79 547.389,1238.54 547.975,1238.4 548.562,1238.18 549.148,1238.07 549.734,1235.19 550.321,1236.62 550.907,1237.7 551.494,1239.09 552.08,1237.38 552.666,1234.1 553.253,1233.99 553.839,1235.59 554.426,1238.3 555.012,1239.64 555.599,1240.84 556.185,1238.84 556.771,1235.73 557.358,1238.27 557.944,1240.63 558.531,1240.26 559.117,1241.2 559.703,1246.49 560.29,1245.66 560.876,1243.32 561.463,1244.32 562.049,1242.37 562.635,1244.55 563.222,1243.9 563.808,1242.08 564.395,1240.06 564.981,1239.65 565.568,1240.35 566.154,1239.45 566.74,1237.13 567.327,1236.73 567.913,1236.49 568.5,1236.03 569.086,1237.12 569.672,1238.27 570.259,1237.65 570.845,1241.33 571.432,1240.44 572.018,1241.5 572.605,1242.15 573.191,1240.1 573.777,1240.69 574.364,1239.98 574.95,1240.9 575.537,1244.37 576.123,1244.89 576.709,1242.35 577.296,1241.49 577.882,1239.05 578.469,1239.81 579.055,1239.41 579.641,1238.29 580.228,1236.48 580.814,1236.07 581.401,1237.16 581.987,1236.58 582.574,1237.57 583.16,1235.84 583.746,1235.61 584.333,1236.58 584.919,1237.52 585.506,1237.18 586.092,1236.66 586.678,1236.04 587.265,1237.35 587.851,1238.48 588.438,1239.05 589.024,1239.6 589.61,1239.06 590.197,1244.1 590.783,1241.28 591.37,1238.97 591.956,1237.99 592.543,1237.46 593.129,1236.94 593.715,1235.02 594.302,1234.66 594.888,1231.17 595.475,1229.71 596.061,1232.21 596.647,1233.33 597.234,1234.47 597.82,1235.12 598.407,1233.43 598.993,1228.85 599.579,1228.84 600.166,1228.68 600.752,1228.39 601.339,1226.96 601.925,1225.47 602.512,1228.37 603.098,1226.78 603.684,1226.88 604.271,1226.71 604.857,1228.26 605.444,1225.25 606.03,1226.49 606.616,1227.75 607.203,1227.83 607.789,1226.05 608.376,1224.68 608.962,1224.8 609.548,1227.76 610.135,1226.39 610.721,1223.35 611.308,1223.61 611.894,1222.22 612.481,1222.37 613.067,1226.65 613.653,1224.99 614.24,1226.48 614.826,1229.17 615.413,1227.3 615.999,1227.05 616.585,1226.54 617.172,1226.36 617.758,1225.95 618.345,1224.58 618.931,1226.01 619.518,1227.36 620.104,1227.19 620.69,1227.13 621.277,1225.68 621.863,1224.61 622.45,1226.5 623.036,1226.45 623.622,1226.25 624.209,1227.77 624.795,1226.39 625.382,1226.11 625.968,1227.09 626.554,1229.62 627.141,1229.17 627.727,1224.49 628.314,1224.51 628.9,1224.35 629.487,1227.08 630.073,1225.43 630.659,1225.33 631.246,1225.47 631.832,1227.72 632.419,1228.85 633.005,1229.85 633.591,1231.08 634.178,1229.1 634.764,1229.01 635.351,1230.09 635.937,1229.77 636.523,1229.6 637.11,1229.03 637.696,1227.48 638.283,1229.91 638.869,1229.34 639.456,1229.31 640.042,1231.95 640.628,1232.9 641.215,1233.66 641.801,1227.45 642.388,1226.99 642.974,1226.68 643.56,1227.56 644.147,1231.6 644.733,1228.13 645.32,1229.41 645.906,1230.57 646.492,1230.46 647.079,1230.27 647.665,1228.45 648.252,1226.79 648.838,1223.43 649.425,1220.46 650.011,1221.93 650.597,1221.66 651.184,1221.79 651.77,1224.83 652.357,1226.05 652.943,1224.27 653.529,1222.97 654.116,1222.91 654.702,1224.22 655.289,1225.31 655.875,1228.95 656.462,1228.53 657.048,1229.62 657.634,1227.82 658.221,1224.4 658.807,1221.39 659.394,1222.75 659.98,1219.85 660.566,1221.19 661.153,1223.73 661.739,1225.1 662.326,1225.01 662.912,1226.19 663.498,1227.38 664.085,1224.37 664.671,1225.62 665.258,1222.54 665.844,1222.11 666.431,1222.09 667.017,1220.52 667.603,1223.46 668.19,1222.04 668.776,1221.97 669.363,1221.86 669.949,1220.36 670.535,1220.09 671.122,1221.5 671.708,1221.15 672.295,1222.57 672.881,1225.41 673.467,1227.89 674.054,1227.39 674.64,1225.74 675.227,1226.83 675.813,1226.43 676.4,1227.76 676.986,1226.03 677.572,1225.64 678.159,1224.04 678.745,1222.63 679.332,1221.33 679.918,1224.41 680.504,1224.36 681.091,1224.12 681.677,1224.16 682.264,1224.13 682.85,1224.18 683.436,1223.8 684.023,1219.62 684.609,1221.23 685.196,1224.12 685.782,1222.45 686.369,1222.58 686.955,1222.52 687.541,1220.75 688.128,1220.57 688.714,1224.57 689.301,1224.25 689.887,1225.61 690.473,1226.91 691.06,1225.07 691.646,1224.76 692.233,1218.84 692.819,1218.99 693.405,1219.15 693.992,1223.74 694.578,1223.76 695.165,1222.15 695.751,1220.53 696.338,1220.35 696.924,1221.6 697.51,1222.94 698.097,1222.87 698.683,1220.3 699.27,1220.28 699.856,1218.67 700.442,1218.69 701.029,1218.81 701.615,1220.41 702.202,1222.99 702.788,1222.68 703.375,1219.69 703.961,1219.56 704.547,1219.55 705.134,1221.11 705.72,1221.09 706.307,1222.5 706.893,1222.29 707.479,1224.91 708.066,1223.08 708.652,1221.52 709.239,1219.85 709.825,1218.4 710.411,1214.07 710.998,1215.71 711.584,1217.27 712.171,1217.35 712.757,1222.87 713.344,1222.3 713.93,1221.99 714.516,1220.32 715.103,1223.27 715.689,1227.51 716.276,1229.88 716.862,1228.1 717.448,1227.61 718.035,1224.51 718.621,1224.09 719.208,1223.72 719.794,1225.02 720.38,1224.63 720.967,1223.22 721.553,1222.77 722.14,1222.69 722.726,1226.79 723.313,1223.74 723.899,1224.78 724.485,1223.13 725.072,1220.2 725.658,1218.8 726.245,1224.54 726.831,1226.83 727.417,1223.59 728.004,1223.22 728.59,1221.63 729.177,1221.4 729.763,1221.29 730.349,1221.09 730.936,1222.58 731.522,1221.9 732.109,1223.15 732.695,1224.26 733.282,1225.52 733.868,1224.88 734.454,1223.2 735.041,1222.97 735.627,1223.08 736.214,1222.82 736.8,1224.33 737.386,1225.66 737.973,1223.92 738.559,1222.34 739.146,1220.88 739.732,1220.95 740.318,1223.32 740.905,1223.3 741.491,1220.36 742.078,1220.27 742.664,1224.24 743.251,1223.76 743.837,1223.51 744.423,1223.28 745.01,1222.95 745.596,1222.73 746.183,1225.49 746.769,1223.87 747.355,1225.08 747.942,1221.84 748.528,1224.52 749.115,1224.15 749.701,1222.56 750.288,1222.15 750.874,1221.75 751.46,1220.05 752.047,1216.76 752.633,1218 753.22,1214.74 753.806,1214.79 754.392,1216.53 754.979,1215.08 755.565,1218.21 756.152,1217.23 756.738,1218.61 757.324,1217.17 757.911,1218.57 758.497,1221.36 759.084,1220.01 759.67,1222.72 760.257,1222.61 760.843,1225.31 761.429,1224.86 762.016,1225.82 762.602,1225.73 763.189,1229.6 763.775,1230.46 764.361,1231.22 764.948,1231.69 765.534,1229.31 766.121,1227.21 766.707,1225.31 767.293,1228.06 767.88,1228.81 768.466,1228.33 769.053,1229.05 769.639,1228.64 770.226,1229.58 770.812,1229.28 771.398,1223.01 771.985,1222.53 772.571,1219.6 773.158,1218.09 773.744,1216.64 774.33,1218.27 774.917,1216.6 775.503,1218.07 776.09,1218.19 776.676,1216.84 777.262,1216.59 777.849,1214.07 778.435,1213.02 779.022,1211.84 779.608,1207.88 780.195,1206.92 780.781,1208.94 781.367,1206.54 781.954,1207.33 782.54,1206.39 783.127,1208.58 783.713,1209.16 784.299,1209.41 784.886,1210.04 785.472,1213.08 786.059,1216.25 786.645,1211.83 787.232,1210.64 787.818,1210.89 788.404,1211.32 788.991,1215.98 789.577,1217.88 790.164,1217.98 790.75,1217.98 791.336,1216.63 791.923,1212.63 792.509,1215.83 793.096,1215.84 793.682,1217.42 794.268,1218.88 794.855,1218.66 795.441,1218.75 796.028,1220.33 796.614,1221.79 797.201,1218.83 797.787,1220.24 798.373,1221.44 798.96,1221.16 799.546,1219.74 800.133,1218.42 800.719,1218.49 801.305,1221.09 801.892,1219.52 802.478,1219.23 803.065,1218.94 803.651,1217.68 804.237,1214.89 804.824,1217.79 805.41,1217.8 805.997,1219.18 806.583,1218.85 807.17,1215.81 807.756,1214.44 808.342,1216.16 808.929,1215.69 809.515,1216.05 810.102,1217.28 810.688,1215.72 811.274,1212.83 811.861,1212.99 812.447,1216.06 813.034,1214.52 813.62,1217.34 814.206,1216 814.793,1214.96 815.379,1217.91 815.966,1217.77 816.552,1217.8 817.139,1219.25 817.725,1217.63 818.311,1214.72 818.898,1217.51 819.484,1217.38 820.071,1215.94 820.657,1213.07 821.243,1213.19 821.83,1212.05 822.416,1216.38 823.003,1214.89 823.589,1213.54 824.175,1212.19 824.762,1212.49 825.348,1211.16 825.935,1212.99 826.521,1211.84 827.108,1210.7 827.694,1210.98 828.28,1211.38 828.867,1211.75 829.453,1211.97 830.04,1210.82 830.626,1208.55 831.212,1208.81 831.799,1209.4 832.385,1211.32 832.972,1212.89 833.558,1211.94 834.145,1213.5 834.731,1212.17 835.317,1213.64 835.904,1215.26 836.49,1213.68 837.077,1212.37 837.663,1212.4 838.249,1214.08 838.836,1211.44 839.422,1208.92 840.009,1210.82 840.595,1209.87 841.181,1207.33 841.768,1207.63 842.354,1208.11 842.941,1207.26 843.527,1209.08 844.114,1209.47 844.7,1211.29 845.286,1213.04 845.873,1210.71 846.459,1209.55 847.046,1208.31 847.632,1208.65 848.218,1207.85 848.805,1208.36 849.391,1208.97 849.978,1210.73 850.564,1213.7 851.15,1212.57 851.737,1213.96 852.323,1215.31 852.91,1216.93 853.496,1217 854.083,1218.45 854.669,1221.26 855.255,1221.13 855.842,1219.35 856.428,1220.4 857.015,1220.47 857.601,1223.02 858.187,1218.57 858.774,1219.91 859.36,1218.52 859.947,1217.23 860.533,1218.72 861.119,1218.37 861.706,1216.9 862.292,1218.21 862.879,1218.23 863.465,1218.02 864.052,1218.12 864.638,1218.08 865.224,1217.62 865.811,1216.06 866.397,1214.77 866.984,1214.74 867.57,1214.82 868.156,1214.92 868.743,1216.41 869.329,1215.14 869.916,1217.62 870.502,1217.08 871.089,1217.33 871.675,1214.42 872.261,1217.15 872.848,1215.75 873.434,1217.19 874.021,1214.19 874.607,1214.42 875.193,1216.83 875.78,1218.3 876.366,1218.28 876.953,1220.65 877.539,1218.94 878.125,1218.87 878.712,1218.93 879.298,1220.19 879.885,1218.77 880.471,1218.61 881.058,1221.23 881.644,1220.82 882.23,1219.26 882.817,1217.87 883.403,1217.73 883.99,1217.98 884.576,1218.11 885.162,1215.4 885.749,1218.39 886.335,1221.26 886.922,1221.11 887.508,1219.25 888.094,1221.96 888.681,1221.7 889.267,1221.27 889.854,1220.81 890.44,1220.58 891.027,1222.82 891.613,1222.64 892.199,1223.64 892.786,1223.31 893.372,1222.71 893.959,1222.78 894.545,1226.6 895.131,1222.12 895.718,1221.73 896.304,1225.81 896.891,1228.1 897.477,1231.65 898.063,1230.71 898.65,1228.49 899.236,1229.07 899.823,1225.57 900.409,1226.21 900.996,1226.98 901.582,1229.05 902.168,1225.44 902.755,1229.11 903.341,1227.25 903.928,1225.35 904.514,1226.21 905.1,1225.45 905.687,1224.78 906.273,1221.29 906.86,1220.7 907.446,1221.8 908.032,1222.86 908.619,1221.03 909.205,1219.04 909.792,1220.25 910.378,1218.38 910.965,1218.2 911.551,1219.31 912.137,1217.91 912.724,1217.65 913.31,1218.74 913.897,1217.14 914.483,1215.45 915.069,1216.73 915.656,1213.73 916.242,1215.44 916.829,1218.18 917.415,1216.67 918.002,1216.67 918.588,1217.9 919.174,1217.66 919.761,1220.16 920.347,1221.38 920.934,1219.76 921.52,1220.9 922.106,1224.27 922.693,1223.93 923.279,1220.7 923.866,1221.64 924.452,1221.2 925.038,1222.31 925.625,1224.53 926.211,1222.76 926.798,1223.75 927.384,1223 927.971,1221.06 928.557,1220.94 929.143,1219.33 929.73,1219.19 930.316,1220.39 930.903,1220.11 931.489,1217.08 932.075,1217.11 932.662,1215.73 933.248,1212.96 933.835,1211.41 934.421,1210.38 935.007,1210.75 935.594,1212.49 936.18,1211.16 936.767,1211.64 937.353,1211.95 937.94,1213.56 938.526,1212.13 939.112,1215.07 939.699,1215.12 940.285,1215.51 940.872,1218.29 941.458,1219.45 942.044,1220.68 942.631,1217.84 943.217,1213.54 943.804,1215.45 944.39,1218.52 944.976,1216.75 945.563,1212.7 946.149,1210.15 946.736,1207.47 947.322,1204.93 947.909,1205.71 948.495,1205.88 949.081,1204.86 949.668,1203.86 950.254,1207.29 950.841,1206.31 951.427,1205.51 952.013,1207.33 952.6,1206.11 953.186,1208.22 953.773,1207.05 954.359,1204.84 954.945,1204.07 955.532,1207.69 956.118,1205.37 956.705,1207.55 957.291,1206.65 957.878,1206.9 958.464,1204.38 959.05,1203.38 959.637,1206.93 960.223,1203.3 960.81,1205.49 961.396,1207.35 961.982,1209.03 962.569,1213.6 963.155,1212.55 963.742,1215.76 964.328,1214.15 964.915,1214.6 965.501,1214.57 966.087,1217.31 966.674,1217.18 967.26,1217.19 967.847,1214.56 968.433,1210.33 969.019,1210.69 969.606,1213.56 970.192,1215.27 970.779,1216.55 971.365,1217.84 971.951,1217.75 972.538,1215.06 973.124,1217.62 973.711,1218.93 974.297,1216.07 974.884,1216.35 975.47,1213.55 976.056,1212.24 976.643,1212.47 977.229,1214.27 977.816,1212.86 978.402,1214.35 978.988,1215.92 979.575,1215.52 980.161,1218.15 980.748,1219.55 981.334,1219.7 981.92,1219.62 982.507,1222.38 983.093,1222.21 983.68,1220.36 984.266,1221.65 984.853,1219.92 985.439,1223.91 986.025,1226.21 986.612,1225.81 987.198,1226.57 987.785,1225.8 988.371,1226.93 988.957,1226.27 989.544,1225.7 990.13,1224.95 990.717,1224.53 991.303,1228.21 991.889,1225.21 992.476,1226.31 993.062,1228.53 993.649,1227.71 994.235,1229.82 994.822,1230.3 995.408,1228.19 995.994,1227.26 996.581,1225.18 997.167,1224.91 997.754,1224.47 998.34,1220.78 998.926,1221.59 999.513,1219.52 1000.1,1216.3 1000.69,1217.9 1001.27,1216.33 1001.86,1213.42 1002.44,1214.62 1003.03,1210.57 1003.62,1208.31 1004.2,1206.23 1004.79,1206.68 1005.38,1208.38 1005.96,1203.17 1006.55,1202.47 1007.14,1204.54 1007.72,1206.28 1008.31,1206.74 1008.9,1208.53 1009.48,1210.46 1010.07,1212.24 1010.65,1212.43 1011.24,1212.54 1011.83,1214.27 1012.41,1214.05 1013,1210.98 1013.59,1215.05 1014.17,1212.1 1014.76,1213.57 1015.35,1213.67 1015.93,1212.48 1016.52,1209.7 1017.11,1210.07 1017.69,1211.8 1018.28,1213.57 1018.86,1216.5 1019.45,1212.04 1020.04,1210.65 1020.62,1209.69 1021.21,1214.17 1021.8,1209.72 1022.38,1211.55 1022.97,1212.94 1023.56,1213.22 1024.14,1211.84 1024.73,1212.03 1025.32,1211.09 1025.9,1211.38 1026.49,1211.23 1027.07,1214 1027.66,1216.9 1028.25,1215.43 1028.83,1214.15 1029.42,1212.64 1030.01,1212.92 1030.59,1214.28 1031.18,1210.26 1031.77,1213.24 1032.35,1212.36 1032.94,1213.82 1033.52,1212.66 1034.11,1213.93 1034.7,1213.01 1035.28,1213.11 1035.87,1216.12 1036.46,1214.72 1037.04,1214.47 1037.63,1217.07 1038.22,1218.2 1038.8,1217.93 1039.39,1216.47 1039.98,1217.63 1040.56,1220.21 1041.15,1223.93 1041.73,1223.68 1042.32,1221.85 1042.91,1216.74 1043.49,1216.43 1044.08,1213.36 1044.67,1212.12 1045.25,1214.89 1045.84,1211.66 1046.43,1213 1047.01,1211.66 1047.6,1209.2 1048.19,1212.39 1048.77,1211.28 1049.36,1208.71 1049.94,1206.09 1050.53,1207.51 1051.12,1206.72 1051.7,1210.12 1052.29,1209.14 1052.88,1208.17 1053.46,1205.78 1054.05,1204.82 1054.64,1208.01 1055.22,1208.43 1055.81,1208.68 1056.39,1206.45 1056.98,1209.66 1057.57,1208.57 1058.15,1204.6 1058.74,1206.82 1059.33,1206.05 1059.91,1204.99 1060.5,1206.99 1061.09,1207.12 1061.67,1207.4 1062.26,1205.05 1062.85,1204.26 1063.43,1206.09 1064.02,1205.28 1064.6,1209.71 1065.19,1208.47 1065.78,1207.43 1066.36,1209.25 1066.95,1210.85 1067.54,1210.88 1068.12,1213.69 1068.71,1216.24 1069.3,1217.41 1069.88,1215.9 1070.47,1217.39 1071.06,1216.1 1071.64,1217.55 1072.23,1213 1072.81,1214.52 1073.4,1214.35 1073.99,1215.86 1074.57,1215.8 1075.16,1215.68 1075.75,1214.8 1076.33,1216.55 1076.92,1217.99 1077.51,1219.16 1078.09,1218.6 1078.68,1215.69 1079.26,1218.7 1079.85,1218.52 1080.44,1218.15 1081.02,1216.74 1081.61,1220.96 1082.2,1219.43 1082.78,1219.22 1083.37,1219.14 1083.96,1219.04 1084.54,1221.67 1085.13,1221.31 1085.72,1222.35 1086.3,1222.06 1086.89,1225.9 1087.47,1225.26 1088.06,1225.91 1088.65,1226.76 1089.23,1226.26 1089.82,1224.39 1090.41,1225.42 1090.99,1222.03 1091.58,1223.09 1092.17,1220.97 1092.75,1222.28 1093.34,1220.78 1093.93,1221.92 1094.51,1221.72 1095.1,1222.77 1095.68,1219.41 1096.27,1217.71 1096.86,1215.13 1097.44,1215.04 1098.03,1216.37 1098.62,1215.11 1099.2,1216.57 1099.79,1216.3 1100.38,1220.52 1100.96,1218.83 1101.55,1218.74 1102.14,1219.96 1102.72,1222.52 1103.31,1223.58 1103.89,1221.66 1104.48,1221.57 1105.07,1222.66 1105.65,1219.39 1106.24,1218.89 1106.83,1219.7 1107.41,1219.23 1108,1216.29 1108.59,1214.76 1109.17,1214.82 1109.76,1214.89 1110.34,1214.86 1110.93,1215.23 1111.52,1216.66 1112.1,1216.57 1112.69,1216.36 1113.28,1216.12 1113.86,1214.47 1114.45,1214.27 1115.04,1215.58 1115.62,1214.38 1116.21,1217.45 1116.8,1216.83 1117.38,1216.57 1117.97,1215.37 1118.55,1216.65 1119.14,1218.18 1119.73,1215.38 1120.31,1215.2 1120.9,1215.16 1121.49,1216.87 1122.07,1211.39 1122.66,1212.83 1123.25,1212.82 1123.83,1208.66 1124.42,1211.55 1125.01,1211.7 1125.59,1210.43 1126.18,1210.39 1126.76,1209.17 1127.35,1209.53 1127.94,1212.74 1128.52,1209.8 1129.11,1214.32 1129.7,1217.26 1130.28,1221.3 1130.87,1220.94 1131.46,1219.63 1132.04,1220.81 1132.63,1220.24 1133.21,1220.08 1133.8,1219.78 1134.39,1220.95 1134.97,1220.76 1135.56,1220.54 1136.15,1221.47 1136.73,1220.84 1137.32,1219.2 1137.91,1217.48 1138.49,1217.18 1139.08,1215.93 1139.67,1217.12 1140.25,1217.39 1140.84,1218.53 1141.42,1218.17 1142.01,1216.58 1142.6,1217.83 1143.18,1218.8 1143.77,1216.98 1144.36,1215.48 1144.94,1215.3 1145.53,1210.98 1146.12,1211.39 1146.7,1212.95 1147.29,1211.34 1147.88,1211.33 1148.46,1207.01 1149.05,1210.31 1149.63,1210.38 1150.22,1208.96 1150.81,1208.05 1151.39,1206.82 1151.98,1207.11 1152.57,1207.64 1153.15,1206.54 1153.74,1208.34 1154.33,1207.04 1154.91,1209.04 1155.5,1207.89 1156.09,1209.76 1156.67,1209.84 1157.26,1211.47 1157.84,1206.18 1158.43,1207.89 1159.02,1211.06 1159.6,1211.31 1160.19,1212.91 1160.78,1214.57 1161.36,1214.52 1161.95,1211.87 1162.54,1208.05 1163.12,1208.58 1163.71,1210.21 1164.29,1208.9 1164.88,1209.42 1165.47,1209.79 1166.05,1211.65 1166.64,1211.94 1167.23,1213.58 1167.81,1215.07 1168.4,1213.42 1168.99,1211.85 1169.57,1213.05 1170.16,1212.03 1170.75,1212.05 1171.33,1213.66 1171.92,1212.4 1172.5,1212.48 1173.09,1211.07 1173.68,1212.75 1174.26,1213.09 1174.85,1213.29 1175.44,1213.49 1176.02,1213.8 1176.61,1213.8 1177.2,1212.49 1177.78,1208.65 1178.37,1212.08 1178.96,1212.61 1179.54,1210.18 1180.13,1210.61 1180.71,1209.25 1181.3,1213.77 1181.89,1211.17 1182.47,1211.4 1183.06,1209.96 1183.65,1210.08 1184.23,1211.78 1184.82,1211.92 1185.41,1207.69 1185.99,1206.75 1186.58,1207.06 1187.16,1205.94 1187.75,1202.28 1188.34,1200.22 1188.92,1202.5 1189.51,1204.54 1190.1,1206.57 1190.68,1209.81 1191.27,1210 1191.86,1210.06 1192.44,1207.73 1193.03,1208.09 1193.62,1211.24 1194.2,1211.3 1194.79,1210.03 1195.37,1210.18 1195.96,1213.65 1196.55,1213.73 1197.13,1212.31 1197.72,1213.64 1198.31,1214.9 1198.89,1214.7 1199.48,1216.2 1200.07,1216.62 1200.65,1216.71 1201.24,1216.29 1201.83,1215.08 1202.41,1213.66 1203,1213.82 1203.58,1213.68 1204.17,1215.4 1204.76,1215.53 1205.34,1215.67 1205.93,1216.68 1206.52,1216.59 1207.1,1216.55 1207.69,1217.71 1208.28,1217.36 1208.86,1216.74 1209.45,1219.26 1210.03,1217.72 1210.62,1216.2 1211.21,1215.97 1211.79,1214.36 1212.38,1214.34 1212.97,1214.15 1213.55,1213.96 1214.14,1215.49 1214.73,1215.48 1215.31,1214.24 1215.9,1214.42 1216.49,1214.37 1217.07,1214.6 1217.66,1215.87 1218.24,1215.65 1218.83,1215.6 1219.42,1215.6 1220,1219.56 1220.59,1220.74 1221.18,1220.53 1221.76,1221.57 1222.35,1221.59 1222.94,1221.34 1223.52,1219.77 1224.11,1215.14 1224.7,1214.93 1225.28,1213.4 1225.87,1213.64 1226.45,1211.05 1227.04,1214.43 1227.63,1214.38 1228.21,1216.02 1228.8,1214.52 1229.39,1215.82 1229.97,1221.33 1230.56,1219.57 1231.15,1218.9 1231.73,1221.6 1232.32,1221.18 1232.91,1220.64 1233.49,1220.29 1234.08,1218.21 1234.66,1219.28 1235.25,1219.08 1235.84,1219.1 1236.42,1217.11 1237.01,1216.89 1237.6,1215.2 1238.18,1215.18 1238.77,1216.3 1239.36,1217.38 1239.94,1215.69 1240.53,1215.89 1241.11,1217.07 1241.7,1218.16 1242.29,1219.02 1242.87,1218.83 1243.46,1217.09 1244.05,1219.68 1244.63,1222.15 1245.22,1221.48 1245.81,1220.99 1246.39,1220.84 1246.98,1219.2 1247.57,1218.66 1248.15,1219.97 1248.74,1216.86 1249.32,1215.49 1249.91,1216.91 1250.5,1216.74 1251.08,1215.27 1251.67,1215.3 1252.26,1215.29 1252.84,1216.83 1253.43,1216.73 1254.02,1216.8 1254.6,1213.75 1255.19,1213.99 1255.78,1213.71 1256.36,1213.64 1256.95,1211.87 1257.53,1210.41 1258.12,1209.31 1258.71,1206.7 1259.29,1207.12 1259.88,1205.86 1260.47,1207.55 1261.05,1209.39 1261.64,1209.64 1262.23,1208.53 1262.81,1207.35 1263.4,1209.2 1263.98,1210.84 1264.57,1209.61 1265.16,1209.76 1265.74,1209.72 1266.33,1211.58 1266.92,1214.58 1267.5,1214.62 1268.09,1214.58 1268.68,1217.46 1269.26,1214.26 1269.85,1216.87 1270.44,1217 1271.02,1216.74 1271.61,1216.67 1272.19,1216.41 1272.78,1213.69 1273.37,1212.38 1273.95,1211.38 1274.54,1211.51 1275.13,1210.39 1275.71,1209.11 1276.3,1209.65 1276.89,1211.13 1277.47,1211.11 1278.06,1212.54 1278.65,1212.38 1279.23,1214.1 1279.82,1212.73 1280.4,1212.97 1280.99,1214.27 1281.58,1215.45 1282.16,1216.92 1282.75,1217.94 1283.34,1219.52 1283.92,1219.17 1284.51,1217.85 1285.1,1217.7 1285.68,1217.51 1286.27,1217.26 1286.86,1213.83 1287.44,1212.36 1288.03,1212.29 1288.61,1212.3 1289.2,1212.6 1289.79,1212.79 1290.37,1211.34 1290.96,1211.66 1291.55,1214.73 1292.13,1214.56 1292.72,1216.05 1293.31,1219.04 1293.89,1218.89 1294.48,1217.13 1295.06,1221.22 1295.65,1219.55 1296.24,1217.78 1296.82,1219.11 1297.41,1219.91 1298,1221.15 1298.58,1218.13 1299.17,1217.94 1299.76,1220.33 1300.34,1218.67 1300.93,1218.38 1301.52,1219.59 1302.1,1218.98 1302.69,1221.72 1303.27,1221.23 1303.86,1223.57 1304.45,1223.33 1305.03,1222.57 1305.62,1224.97 1306.21,1224.15 1306.79,1226.64 1307.38,1226.08 1307.97,1224.11 1308.55,1226.15 1309.14,1221.39 1309.73,1223.88 1310.31,1221.92 1310.9,1221.59 1311.48,1219.96 1312.07,1217.05 1312.66,1214.13 1313.24,1213.89 1313.83,1212.32 1314.42,1212.59 1315,1214.06 1315.59,1211.38 1316.18,1212.8 1316.76,1211.9 1317.35,1210.66 1317.93,1208.14 1318.52,1204.97 1319.11,1202.4 1319.69,1201.73 1320.28,1206.42 1320.87,1206.97 1321.45,1207.7 1322.04,1206.24 1322.63,1208.12 1323.21,1208.47 1323.8,1208.82 1324.39,1210.73 1324.97,1212.43 1325.56,1213.61 1326.14,1213.5 1326.73,1212.04 1327.32,1210.65 1327.9,1206.56 1328.49,1205.42 1329.08,1205.87 1329.66,1205.06 1330.25,1204.06 1330.84,1206.23 1331.42,1206.71 1332.01,1210.14 1332.6,1210.44 1333.18,1210.48 1333.77,1212.01 1334.35,1211.99 1334.94,1210.92 1335.53,1212.36 1336.11,1212.58 1336.7,1214.18 1337.29,1214.45 1337.87,1211.6 1338.46,1210.51 1339.05,1207.91 1339.63,1209.75 1340.22,1207.3 1340.8,1206.08 1341.39,1209.19 1341.98,1208.1 1342.56,1208.53 1343.15,1208.81 1343.74,1210.4 1344.32,1214.26 1344.91,1214.25 1345.5,1213.03 1346.08,1214.4 1346.67,1214.52 1347.26,1214.71 1347.84,1217.21 1348.43,1216.77 1349.01,1218.14 1349.6,1219.5 1350.19,1220.74 1350.77,1221.88 1351.36,1221.2 1351.95,1220.5 1352.53,1217.07 1353.12,1218.21 1353.71,1216.74 1354.29,1216.85 1354.88,1215.27 1355.47,1213.71 1356.05,1213.47 1356.64,1213.58 1357.22,1217.88 1357.81,1216.45 1358.4,1216.69 1358.98,1216.4 1359.57,1216.4 1360.16,1214.91 1360.74,1216.34 1361.33,1216.36 1361.92,1216.6 1362.5,1218.04 1363.09,1216.72 1363.68,1219.35 1364.26,1220.39 1364.85,1219.93 1365.43,1219.58 1366.02,1217.73 1366.61,1218.02 1367.19,1219.41 1367.78,1222.02 1368.37,1222.83 1368.95,1220.76 1369.54,1218.92 1370.13,1218.77 1370.71,1222.72 1371.3,1220.91 1371.88,1223.37 1372.47,1227.3 1373.06,1228.32 1373.64,1226.09 1374.23,1227.06 1374.82,1230.57 1375.4,1226.8 1375.99,1227.5 1376.58,1223.75 1377.16,1223.35 1377.75,1225.45 1378.34,1223.42 1378.92,1222.89 1379.51,1218.3 1380.09,1216.99 1380.68,1213.75 1381.27,1210.98 1381.85,1208.4 1382.44,1209.79 1383.03,1210.26 1383.61,1215.99 1384.2,1216.14 1384.79,1216.21 1385.37,1217.34 1385.96,1218.78 1386.55,1221.37 1387.13,1218.05 1387.72,1217.71 1388.3,1217.39 1388.89,1215.78 1389.48,1215.6 1390.06,1214.25 1390.65,1215.47 1391.24,1218.36 1391.82,1218.01 1392.41,1216.53 1393,1213.52 1393.58,1213.53 1394.17,1210.67 1394.75,1212.19 1395.34,1207.1 1395.93,1206.2 1396.51,1200.81 1397.1,1199.93 1397.69,1200.4 1398.27,1199.45 1398.86,1200.53 1399.45,1202.58 1400.03,1202.06 1400.62,1199.71 1401.21,1202.01 1401.79,1204.02 1402.38,1204.38 1402.96,1206.71 1403.55,1206.86 1404.14,1205.93 1404.72,1208.99 1405.31,1210.93 1405.9,1215.53 1406.48,1214.27 1407.07,1213.12 1407.66,1214.66 1408.24,1214.47 1408.83,1215.97 1409.42,1214.56 1410,1214.66 1410.59,1214.87 1411.17,1215.12 1411.76,1214.04 1412.35,1209.72 1412.93,1210.22 1413.52,1210.6 1414.11,1212.3 1414.69,1212.54 1415.28,1214.15 1415.87,1215.2 1416.45,1214.26 1417.04,1215.65 1417.63,1219.87 1418.21,1219.54 1418.8,1219.53 1419.38,1223.31 1419.97,1224.19 1420.56,1222.3 1421.14,1220.69 1421.73,1220.15 1422.32,1220.02 1422.9,1221.33 1423.49,1219.58 1424.08,1217.77 1424.66,1218.78 1425.25,1214.77 1425.83,1218.96 1426.42,1218.64 1427.01,1218.35 1427.59,1220.8 1428.18,1220.25 1428.77,1221.63 1429.35,1222.49 1429.94,1222.12 1430.53,1221.86 1431.11,1221.41 1431.7,1220.93 1432.29,1217.81 1432.87,1220.47 1433.46,1220.14 1434.04,1219.98 1434.63,1220.86 1435.22,1220.5 1435.8,1220.07 1436.39,1216.74 1436.98,1216.43 1437.56,1216.15 1438.15,1213.12 1438.74,1211.91 1439.32,1214.89 1439.91,1217.47 1440.5,1217.53 1441.08,1218.67 1441.67,1219.76 1442.25,1218.14 1442.84,1216.33 1443.43,1213.39 1444.01,1216.27 1444.6,1214.8 1445.19,1213.22 1445.77,1211.56 1446.36,1211.31 1446.95,1210.24 1447.53,1211.91 1448.12,1209.36 1448.7,1207.73 1449.29,1208.27 1449.88,1208.64 1450.46,1210.22 1451.05,1209 1451.64,1207.75 1452.22,1209.28 1452.81,1210.97 1453.4,1210.72 1453.98,1211.01 1454.57,1209.77 1455.16,1210.06 1455.74,1211.48 1456.33,1211.81 1456.91,1213.6 1457.5,1216.56 1458.09,1214.94 1458.67,1212.26 1459.26,1209.76 1459.85,1210.14 1460.43,1210.2 1461.02,1209.2 1461.61,1206.66 1462.19,1208.6 1462.78,1207.37 1463.37,1207.74 1463.95,1209.4 1464.54,1209.44 1465.12,1212.36 1465.71,1212.45 1466.3,1210.98 1466.88,1209.69 1467.47,1212.67 1468.06,1211.41 1468.64,1209.07 1469.23,1209.11 1469.82,1210.56 1470.4,1207.71 1470.99,1206.58 1471.57,1204.26 1472.16,1204.74 1472.75,1203.76 1473.33,1204.12 1473.92,1203.54 1474.51,1208.1 1475.09,1208.19 1475.68,1210.07 1476.27,1211.68 1476.85,1212.03 1477.44,1216.38 1478.03,1216.35 1478.61,1214.9 1479.2,1215.06 1479.78,1213.62 1480.37,1213.88 1480.96,1212.54 1481.54,1212.95 1482.13,1213.12 1482.72,1214.58 1483.3,1215.87 1483.89,1215.68 1484.48,1214.6 1485.06,1216.37 1485.65,1217.62 1486.24,1217.32 1486.82,1218.5 1487.41,1215.45 1487.99,1215.41 1488.58,1218.06 1489.17,1217.86 1489.75,1213.31 1490.34,1214.62 1490.93,1214.62 1491.51,1214.16 1492.1,1212.5 1492.69,1212.71 1493.27,1211 1493.86,1211.22 1494.45,1211.54 1495.03,1213.04 1495.62,1216.04 1496.2,1211.69 1496.79,1213.48 1497.38,1212.26 1497.96,1213.83 1498.55,1217.84 1499.14,1217.89 1499.72,1216.34 1500.31,1216.17 1500.9,1217.49 1501.48,1215.83 1502.07,1213.01 1502.65,1214.54 1503.24,1217.81 1503.83,1217.78 1504.41,1218.97 1505,1215.79 1505.59,1217.18 1506.17,1214.29 1506.76,1217.08 1507.35,1215.55 1507.93,1215.74 1508.52,1211.56 1509.11,1208.94 1509.69,1209.18 1510.28,1209.5 1510.86,1210.07 1511.45,1208.02 1512.04,1208.43 1512.62,1207.29 1513.21,1207.57 1513.8,1210.8 1514.38,1210.84 1514.97,1211.18 1515.56,1214.6 1516.14,1216.18 1516.73,1217.64 1517.32,1214.92 1517.9,1216.37 1518.49,1217.59 1519.07,1217.49 1519.66,1217.35 1520.25,1214.39 1520.83,1215.55 1521.42,1215.33 1522.01,1218.13 1522.59,1217.66 1523.18,1220.57 1523.77,1220.37 1524.35,1222.72 1524.94,1222.12 1525.52,1221.39 1526.11,1218.23 1526.7,1219.27 1527.28,1220.58 1527.87,1220.11 1528.46,1221.17 1529.04,1216.6 1529.63,1216.34 1530.22,1217.32 1530.8,1218.4 1531.39,1218.11 1531.98,1216.6 1532.56,1215.21 1533.15,1213.65 1533.73,1215.18 1534.32,1212.1 1534.91,1210.62 1535.49,1211.96 1536.08,1210.32 1536.67,1212.01 1537.25,1211.88 1537.84,1209.09 1538.43,1206.28 1539.01,1209.11 1539.6,1209.19 1540.19,1209.41 1540.77,1209.79 1541.36,1210.1 1541.94,1211.58 1542.53,1214.25 1543.12,1214.32 1543.7,1211.46 1544.29,1215.69 1544.88,1214.31 1545.46,1214.28 1546.05,1211.39 1546.64,1214.44 1547.22,1214.52 1547.81,1215.98 1548.4,1215.9 1548.98,1213.01 1549.57,1214.21 1550.15,1214.29 1550.74,1215.61 1551.33,1217.03 1551.91,1215.34 1552.5,1213.97 1553.09,1212.5 1553.67,1212.45 1554.26,1212.44 1554.85,1212.54 1555.43,1211.31 1556.02,1211.16 1556.6,1211.29 1557.19,1207.16 1557.78,1205.94 1558.36,1206.45 1558.95,1206.74 1559.54,1205.65 1560.12,1203.37 1560.71,1205.31 1561.3,1205.72 1561.88,1201.05 1562.47,1204.41 1563.06,1206.46 1563.64,1205.68 1564.23,1207.86 1564.81,1206.44 1565.4,1203.86 1565.99,1205.85 1566.57,1204.73 1567.16,1204.01 1567.75,1207.3 1568.33,1207.7 1568.92,1209.66 1569.51,1215.45 1570.09,1211.45 1570.68,1208.79 1571.27,1209.38 1571.85,1212.5 1572.44,1213.75 1573.02,1216.37 1573.61,1213.76 1574.2,1213.7 1574.78,1215.04 1575.37,1214.78 1575.96,1216.01 1576.54,1218.44 1577.13,1219.99 1577.72,1217.06 1578.3,1217.08 1578.89,1215.47 1579.47,1212.63 1580.06,1213.09 1580.65,1213.12 1581.23,1211.32 1581.82,1208.68 1582.41,1213.05 1582.99,1212.78 1583.58,1211.42 1584.17,1211.82 1584.75,1208.9 1585.34,1208.25 1585.93,1208.51 1586.51,1203.05 1587.1,1203.9 1587.68,1206 1588.27,1206.36 1588.86,1212.39 1589.44,1213.82 1590.03,1215.37 1590.62,1215.45 1591.2,1215.37 1591.79,1215.6 1592.38,1214.3 1592.96,1214.54 1593.55,1214.59 1594.14,1217.4 1594.72,1215.91 1595.31,1217.18 1595.89,1218.12 1596.48,1217.86 1597.07,1217.85 1597.65,1216.28 1598.24,1216.1 1598.83,1214.7 1599.41,1212.11 1600,1212.09 1600.59,1213.98 1601.17,1212.56 1601.76,1214.15 1602.34,1214.29 1602.93,1214.34 1603.52,1220.04 1604.1,1216.91 1604.69,1215.32 1605.28,1215.21 1605.86,1215.13 1606.45,1215.28 1607.04,1213.92 1607.62,1209.97 1608.21,1207.45 1608.8,1209.38 1609.38,1211.05 1609.97,1210.1 1610.55,1210.53 1611.14,1212.03 1611.73,1213.54 1612.31,1216.71 1612.9,1217.91 1613.49,1219.28 1614.07,1217.48 1614.66,1214.64 1615.25,1214.45 1615.83,1214.51 1616.42,1214.32 1617.01,1214.51 1617.59,1214.7 1618.18,1216.34 1618.76,1214.51 1619.35,1212.88 1619.94,1218.31 1620.52,1218.09 1621.11,1215.11 1621.7,1213.77 1622.28,1212.44 1622.87,1210.77 1623.46,1207.95 1624.04,1211.25 1624.63,1211.26 1625.22,1211.74 1625.8,1212.04 1626.39,1211.04 1626.97,1209.66 1627.56,1211.24 1628.15,1212.88 1628.73,1214.22 1629.32,1213.95 1629.91,1212.62 1630.49,1214.28 1631.08,1212.93 1631.67,1214.37 1632.25,1217.16 1632.84,1216.02 1633.42,1217.17 1634.01,1216.77 1634.6,1215.45 1635.18,1215.35 1635.77,1216.45 1636.36,1216.22 1636.94,1217.48 1637.53,1217.65 1638.12,1220.71 1638.7,1220.35 1639.29,1217.15 1639.88,1218.53 1640.46,1216.92 1641.05,1216.86 1641.63,1215.33 1642.22,1216.72 1642.81,1216.63 1643.39,1213.61 1643.98,1217.3 1644.57,1218.62 1645.15,1216.84 1645.74,1219.3 1646.33,1217.66 1646.91,1217.34 1647.5,1218.28 1648.09,1216.43 1648.67,1218.09 1649.26,1219.24 1649.84,1217.55 1650.43,1218.94 1651.02,1220.01 1651.6,1219.38 1652.19,1218.86 1652.78,1220.09 1653.36,1220.92 1653.95,1219.12 1654.54,1216.29 1655.12,1217.45 1655.71,1218.63 1656.29,1216.98 1656.88,1216.86 1657.47,1212.47 1658.05,1212.36 1658.64,1209.37 1659.23,1209.55 1659.81,1211.31 1660.4,1208.7 1660.99,1210.46 1661.57,1213.29 1662.16,1214.93 1662.75,1214.79 1663.33,1217.36 1663.92,1217.15 1664.5,1215.58 1665.09,1215.6 1665.68,1215.57 1666.26,1215.38 1666.85,1214.01 1667.44,1215.45 1668.02,1212.43 1668.61,1213.76 1669.2,1212.85 1669.78,1215.96 1670.37,1216.11 1670.96,1217.2 1671.54,1215.43 1672.13,1215.43 1672.71,1216.68 1673.3,1216.7 1673.89,1219.42 1674.47,1214.69 1675.06,1213.3 1675.65,1214.69 1676.23,1214.72 1676.82,1217.38 1677.41,1219.74 1677.99,1215.16 1678.58,1212.33 1679.17,1211.34 1679.75,1211.77 1680.34,1210.81 1680.92,1208.04 1681.51,1209.83 1682.1,1207.28 1682.68,1211.75 1683.27,1209.43 1683.86,1212.56 1684.44,1212.11 1685.03,1210.87 1685.62,1211.17 1686.2,1210.01 1686.79,1209.95 1687.37,1208.71 1687.96,1213.39 1688.55,1211.84 1689.13,1213 1689.72,1214.09 1690.31,1215.14 1690.89,1215.2 1691.48,1216.5 1692.07,1216.25 1692.65,1217.61 1693.24,1217.43 1693.83,1218.74 1694.41,1218.27 1695,1216.67 1695.58,1216.5 1696.17,1217.61 1696.76,1214.6 1697.34,1213.02 1697.93,1213.11 1698.52,1213.25 1699.1,1213.48 1699.69,1211.61 1700.28,1210.52 1700.86,1207.95 1701.45,1208.15 1702.04,1209.81 1702.62,1204.29 1703.21,1204.94 1703.79,1204.03 1704.38,1201.73 1704.97,1202.24 1705.55,1207.12 1706.14,1204.4 1706.73,1209.16 1707.31,1209.48 1707.9,1209.83 1708.49,1210.2 1709.07,1210.17 1709.66,1207.5 1710.24,1207.86 1710.83,1206.62 1711.42,1208.75 1712,1212.26 1712.59,1210.91 1713.18,1211.27 1713.76,1210.12 1714.35,1211.45 1714.94,1209.92 1715.52,1210.03 1716.11,1211.85 1716.7,1211.76 1717.28,1213.01 1717.87,1214.38 1718.45,1215.87 1719.04,1217.01 1719.63,1219.69 1720.21,1217.98 1720.8,1217.29 1721.39,1215.93 1721.97,1212.84 1722.56,1214.07 1723.15,1214.29 1723.73,1214.28 1724.32,1214.27 1724.91,1214.45 1725.49,1214.29 1726.08,1217.16 1726.66,1216.82 1727.25,1216.77 1727.84,1215.25 1728.42,1213.46 1729.01,1207.89 1729.6,1208.13 1730.18,1208.55 1730.77,1207.62 1731.36,1209.29 1731.94,1210.78 1732.53,1212.55 1733.11,1218.12 1733.7,1217.88 1734.29,1216.18 1734.87,1214.63 1735.46,1214.58 1736.05,1214.49 1736.63,1214.72 1737.22,1216.05 1737.81,1215.77 1738.39,1213.96 1738.98,1216.98 1739.57,1219.79 1740.15,1222.23 1740.74,1220.84 1741.32,1220.58 1741.91,1223.28 1742.5,1221.7 1743.08,1222.51 1743.67,1219.26 1744.26,1218.93 1744.84,1217.22 1745.43,1219.68 1746.02,1216.69 1746.6,1216.39 1747.19,1216.3 1747.78,1214.79 1748.36,1213.07 1748.95,1213.03 1749.53,1211.83 1750.12,1211.87 1750.71,1209.16 1751.29,1210.69 1751.88,1211.16 1752.47,1214.42 1753.05,1213.95 1753.64,1213.92 1754.23,1213.91 1754.81,1214.05 1755.4,1215.85 1755.99,1217.36 1756.57,1218.86 1757.16,1218.7 1757.74,1219.61 1758.33,1219.27 1758.92,1221.88 1759.5,1222.94 1760.09,1222.67 1760.68,1222.25 1761.26,1223.42 1761.85,1222.93 1762.44,1223.71 1763.02,1223.09 1763.61,1222.36 1764.19,1216.33 1764.78,1216.04 1765.37,1214.67 1765.95,1214.92 1766.54,1213.74 1767.13,1212.41 1767.71,1215.23 1768.3,1213.67 1768.89,1214.88 1769.47,1213.62 1770.06,1215.06 1770.65,1212.22 1771.23,1210.99 1771.82,1211.29 1772.4,1212.84 1772.99,1214.17 1773.58,1216.35 1774.16,1218.88 1774.75,1220.15 1775.34,1219.72 1775.92,1215.08 1776.51,1213.82 1777.1,1211.16 1777.68,1213.8 1778.27,1213.69 1778.86,1216.44 1779.44,1216.36 1780.03,1217.4 1780.61,1219.99 1781.2,1221.04 1781.79,1221.83 1782.37,1220.26 1782.96,1222.44 1783.55,1223.16 1784.13,1221.32 1784.72,1219.85 1785.31,1220.93 1785.89,1220.69 1786.48,1223.05 1787.06,1222.34 1787.65,1220.51 1788.24,1220.24 1788.82,1222.55 1789.41,1223.35 1790,1225.98 1790.58,1223.89 1791.17,1223.45 1791.76,1220.24 1792.34,1220.06 1792.93,1218.18 1793.52,1214.8 1794.1,1211.74 1794.69,1214.3 1795.27,1212.72 1795.86,1212.62 1796.45,1212.73 1797.03,1212.89 1797.62,1217.08 1798.21,1215.54 1798.79,1215.56 1799.38,1214.12 1799.97,1212.61 1800.55,1209.74 1801.14,1209.59 1801.73,1209.72 1802.31,1208.64 1802.9,1210.6 1803.48,1214.83 1804.07,1213.33 1804.66,1210.63 1805.24,1210.79 1805.83,1212.36 1806.42,1212.79 1807,1212.97 1807.59,1213.18 1808.18,1213.56 1808.76,1210.92 1809.35,1211.08 1809.94,1211.14 1810.52,1209.98 1811.11,1208.99 1811.69,1209.38 1812.28,1209.67 1812.87,1209.97 1813.45,1209.13 1814.04,1209.39 1814.63,1209.61 1815.21,1210.26 1815.8,1210.51 1816.39,1213.58 1816.97,1210.91 1817.56,1211.05 1818.14,1211.33 1818.73,1211.76 1819.32,1213.36 1819.9,1209.34 1820.49,1209.43 1821.08,1209.66 1821.66,1212.46 1822.25,1211.31 1822.84,1208.65 1823.42,1208.95 1824.01,1209.38 1824.6,1207.2 1825.18,1203.72 1825.77,1201.35 1826.35,1202.15 1826.94,1202.92 1827.53,1205.05 1828.11,1208.51 1828.7,1210.04 1829.29,1214.31 1829.87,1214.04 1830.46,1212.76 1831.05,1212.59 1831.63,1213.95 1832.22,1215.41 1832.81,1214.01 1833.39,1212.66 1833.98,1211.58 1834.56,1210.16 1835.15,1211.72 1835.74,1211.55 1836.32,1214.45 1836.91,1220.07 1837.5,1221.26 1838.08,1223.69 1838.67,1224.31 1839.26,1222.72 1839.84,1225.31 1840.43,1225.88 1841.01,1225.17 1841.6,1226.08 1842.19,1226.87 1842.77,1227.51 1843.36,1226.69 1843.95,1225.02 1844.53,1220.12 1845.12,1215.69 1845.71,1215.78 1846.29,1215.13 1846.88,1214.75 1847.47,1215.91 1848.05,1217.39 1848.64,1218.75 1849.22,1221.31 1849.81,1223.59 1850.4,1224.41 1850.98,1226.69 1851.57,1224.56 1852.16,1220.12 1852.74,1221.32 1853.33,1222.32 1853.92,1225.06 1854.5,1220.32 1855.09,1217.05 1855.68,1215.46 1856.26,1212.35 1856.85,1208.08 1857.43,1207.01 1858.02,1208.93 1858.61,1209.17 1859.19,1207.98 1859.78,1206.98 1860.37,1203.22 1860.95,1203.72 1861.54,1204.44 1862.13,1204.75 1862.71,1209.49 1863.3,1208.22 1863.88,1209.96 1864.47,1210.04 1865.06,1213.04 1865.64,1210.14 1866.23,1211.76 1866.82,1213.08 1867.4,1211.75 1867.99,1210.34 1868.58,1209.18 1869.16,1210.71 1869.75,1213.46 1870.34,1210.74 1870.92,1210.59 1871.51,1210.73 1872.09,1212.34 1872.68,1215.47 1873.27,1214.08 1873.85,1214.07 1874.44,1215.36 1875.03,1214.03 1875.61,1216.89 1876.2,1216.8 1876.79,1219.31 1877.37,1216.44 1877.96,1214.53 1878.55,1217.18 1879.13,1217.34 1879.72,1215.73 1880.3,1213.97 1880.89,1212.72 1881.48,1211.32 1882.06,1211.27 1882.65,1209.9 1883.24,1210.26 1883.82,1213.63 1884.41,1214.67 1885,1213.51 1885.58,1213.69 1886.17,1215.28 1886.76,1213.85 1887.34,1216.63 1887.93,1217.93 1888.51,1217.7 1889.1,1216.2 1889.69,1220.28 1890.27,1217.23 1890.86,1217.4 1891.45,1217.19 1892.03,1215.64 1892.62,1215.35 1893.21,1218.03 1893.79,1219.06 1894.38,1220.26 1894.96,1221.75 1895.55,1218.54 1896.14,1219.51 1896.72,1217.92 1897.31,1218.8 1897.9,1215.7 1898.48,1214.35 1899.07,1215.85 1899.66,1215.77 1900.24,1217.16 1900.83,1215.6 1901.42,1214.2 1902,1214.14 1902.59,1212.79 1903.17,1211.01 1903.76,1211.32 1904.35,1215.46 1904.93,1216.96 1905.52,1218.26 1906.11,1219.08 1906.69,1218.91 1907.28,1218.94 1907.87,1218.8 1908.45,1215.59 1909.04,1215.76 1909.63,1215.99 1910.21,1217.06 1910.8,1216.6 1911.38,1212.29 1911.97,1214.01 1912.56,1215.47 1913.14,1212.2 1913.73,1212.17 1914.32,1211.06 1914.9,1211.49 1915.49,1210.21 1916.08,1208.91 1916.66,1208.88 1917.25,1205.16 1917.83,1202.87 1918.42,1201.73 1919.01,1202.5 1919.59,1204.44 1920.18,1206.41 1920.77,1207.01 1921.35,1207.76 1921.94,1203.91 1922.53,1204.39 1923.11,1204.75 1923.7,1203.78 1924.29,1202.92 1924.87,1203.83 1925.46,1207.23 1926.04,1207.79 1926.63,1209.39 1927.22,1208.31 1927.8,1210.17 1928.39,1210.38 1928.98,1211 1929.56,1209.7 1930.15,1208.82 1930.74,1210.59 1931.32,1209.47 1931.91,1209.7 1932.5,1208.32 1933.08,1205.86 1933.67,1204.73 1934.25,1206.78 1934.84,1210.01 1935.43,1207.38 1936.01,1208.81 1936.6,1208.87 1937.19,1210.2 1937.77,1214.73 1938.36,1214.8 1938.95,1214.66 1939.53,1214.63 1940.12,1214.71 1940.71,1214.85 1941.29,1214.96 1941.88,1216.32 1942.46,1216.3 1943.05,1214.85 1943.64,1213.26 1944.22,1213.01 1944.81,1213.18 1945.4,1217.44 1945.98,1215.79 1946.57,1218.46 1947.16,1218.32 1947.74,1219.43 1948.33,1218.07 1948.91,1216.72 1949.5,1210.86 1950.09,1211.03 1950.67,1212.98 1951.26,1214.34 1951.85,1214.52 1952.43,1211.6 1953.02,1208.87 1953.61,1209.4 1954.19,1209.68 1954.78,1211.27 1955.37,1210.88 1955.95,1209.87 1956.54,1210 1957.12,1211.69 1957.71,1211.88 1958.3,1210.64 1958.88,1208.3 1959.47,1211.38 1960.06,1212.7 1960.64,1214.37 1961.23,1214.47 1961.82,1215.73 1962.4,1217 1962.99,1216.69 1963.58,1215.55 1964.16,1218.71 1964.75,1219.84 1965.33,1218.38 1965.92,1219.48 1966.51,1220.47 1967.09,1221.57 1967.68,1221.25 1968.27,1219.45 1968.85,1219.25 1969.44,1218.89 1970.03,1222.69 1970.61,1220.8 1971.2,1218.97 1971.78,1217.29 1972.37,1215.62 1972.96,1216.86 1973.54,1222.22 1974.13,1221.55 1974.72,1220.77 1975.3,1221.8 1975.89,1219.06 1976.48,1220.05 1977.06,1218.37 1977.65,1222.37 1978.24,1221.71 1978.82,1225.77 1979.41,1224.93 1979.99,1223.08 1980.58,1222.37 1981.17,1226.16 1981.75,1221.31 1982.34,1224.9 1982.93,1228.54 1983.51,1227.55 1984.1,1225.91 1984.69,1225.31 1985.27,1224.83 1985.86,1225.46 1986.45,1224.95 1987.03,1224.34 1987.62,1220.9 1988.2,1219.1 1988.79,1218.94 1989.38,1220.05 1989.96,1220.94 1990.55,1223.26 1991.14,1222.67 1991.72,1220.79 1992.31,1217.41 1992.9,1220.11 1993.48,1217.13 1994.07,1216.78 1994.65,1215.16 1995.24,1213.63 1995.83,1212.3 1996.41,1212.45 1997,1215.18 1997.59,1215.18 1998.17,1213.8 1998.76,1215.26 1999.35,1213.36 1999.93,1212.29 2000.52,1215.29 2001.11,1215.27 2001.69,1216.32 2002.28,1216.26 2002.86,1214.76 2003.45,1216.08 2004.04,1213.25 2004.62,1214.55 2005.21,1215.89 2005.8,1214.47 2006.38,1211.71 2006.97,1211.74 2007.56,1213.35 2008.14,1211.96 2008.73,1212.29 2009.32,1208.12 2009.9,1208.46 2010.49,1207.68 2011.07,1205.04 2011.66,1207.15 2012.25,1207.68 2012.83,1205.31 2013.42,1204.19 2014.01,1203.13 2014.59,1204.93 2015.18,1205.13 2015.77,1202.5 2016.35,1200.3 2016.94,1200.83 2017.53,1201.83 2018.11,1201.17 2018.7,1202.94 2019.28,1202.12 2019.87,1202.75 2020.46,1207.52 2021.04,1206.6 2021.63,1208.31 2022.22,1208.6 2022.8,1205.99 2023.39,1208.06 2023.98,1207.44 2024.56,1206.33 2025.15,1205.41 2025.73,1207.36 2026.32,1207.66 2026.91,1206.91 2027.49,1209.31 2028.08,1210.81 2028.67,1212.65 2029.25,1214.49 2029.84,1216.03 2030.43,1217.5 2031.01,1216.16 2031.6,1216.12 2032.19,1215.93 2032.77,1216.07 2033.36,1215.8 2033.94,1212.95 2034.53,1214.35 2035.12,1212.79 2035.7,1210.03 2036.29,1211.9 2036.88,1213.54 2037.46,1213.47 2038.05,1214.98 2038.64,1218.87 2039.22,1217.19 2039.81,1218.34 2040.4,1217.83 2040.98,1216.29 2041.57,1216.19 2042.15,1214.76 2042.74,1214.5 2043.33,1212.93 2043.91,1214.09 2044.5,1212.41 2045.09,1212.9 2045.67,1213.04 2046.26,1213.05 2046.85,1216.11 2047.43,1213.29 2048.02,1214.67 2048.6,1214.5 2049.19,1218.53 2049.78,1218.41 2050.36,1219.58 2050.95,1219.15 2051.54,1217.3 2052.12,1215.59 2052.71,1211.1 2053.3,1212.7 2053.88,1214.43 2054.47,1215.64 2055.06,1213.76 2055.64,1214.16 2056.23,1214.53 2056.81,1214.57 2057.4,1214.76 2057.99,1214.75 2058.57,1213.38 2059.16,1214.82 2059.75,1214.58 2060.33,1213.24 2060.92,1216.1 2061.51,1217.52 2062.09,1218.8 2062.68,1220.25 2063.27,1218.68 2063.85,1218.29 2064.44,1219.97 2065.02,1219.84 2065.61,1221.03 2066.2,1220.41 2066.78,1217.31 2067.37,1215.75 2067.96,1215.52 2068.54,1209.77 2069.13,1210.11 2069.72,1210.13 2070.3,1211.47 2070.89,1208.62 2071.48,1211.52 2072.06,1213.21 2072.65,1214.8 2073.23,1216.31 2073.82,1214.69 2074.41,1213.39 2074.99,1213.14 2075.58,1213.24 2076.17,1213.27 2076.75,1214.4 2077.34,1210.49 2077.93,1211.9 2078.51,1212.29 2079.1,1215.15 2079.68,1215.3 2080.27,1215.03 2080.86,1213.26 2081.44,1214.49 2082.03,1210.04 2082.62,1211.89 2083.2,1211.68 2083.79,1216.09 2084.38,1215.77 2084.96,1215.7 2085.55,1216.74 2086.14,1216.89 2086.72,1213.79 2087.31,1216.76 2087.89,1217.99 2088.48,1216.55 2089.07,1215.05 2089.65,1214.93 2090.24,1215.04 2090.83,1210.89 2091.41,1211.15 2092,1211.24 2092.59,1212.88 2093.17,1211.96 2093.76,1216.14 2094.35,1213.54 2094.93,1214.82 2095.52,1215.12 2096.1,1214.8 2096.69,1212.11 2097.28,1209.34 2097.86,1209.87 2098.45,1208.57 2099.04,1208.62 2099.62,1210.58 2100.21,1209.21 2100.8,1206.85 2101.38,1211.17 2101.97,1211.28 2102.55,1210.44 2103.14,1210.47 2103.73,1210.86 2104.31,1212.47 2104.9,1212.52 2105.49,1212.57 2106.07,1212.65 2106.66,1212.52 2107.25,1209.78 2107.83,1208.7 2108.42,1207.59 2109.01,1208.31 2109.59,1210.34 2110.18,1211.8 2110.76,1213.34 2111.35,1213.56 2111.94,1213.58 2112.52,1216.4 2113.11,1216.4 2113.7,1216.15 2114.28,1216.15 2114.87,1214.54 2115.46,1214.55 2116.04,1214.85 2116.63,1216.14 2117.22,1215.8 2117.8,1217.53 2118.39,1215.92 2118.97,1215.75 2119.56,1215.69 2120.15,1212.73 2120.73,1212.81 2121.32,1213.04 2121.91,1217.39 2122.49,1212.9 2123.08,1211.6 2123.67,1217.47 2124.25,1215.8 2124.84,1214.33 2125.42,1214.37 2126.01,1215.85 2126.6,1216.93 2127.18,1215.15 2127.77,1218.96 2128.36,1217.31 2128.94,1215.48 2129.53,1215.38 2130.12,1215.62 2130.7,1216.91 2131.29,1215.32 2131.88,1213.82 2132.46,1211.12 2133.05,1212.39 2133.63,1212.58 2134.22,1212.59 2134.81,1211.14 2135.39,1213.87 2135.98,1215.43 2136.57,1212.66 2137.15,1212.71 2137.74,1214.29 2138.33,1214.58 2138.91,1215.05 2139.5,1214.9 2140.09,1216.47 2140.67,1217.76 2141.26,1219.06 2141.84,1218.73 2142.43,1220.01 2143.02,1219.67 2143.6,1220.46 2144.19,1220.31 2144.78,1218.4 2145.36,1218.1 2145.95,1221.03 2146.54,1216.29 2147.12,1216.06 2147.71,1218.78 2148.3,1217.11 2148.88,1218.46 2149.47,1218.21 2150.05,1218.04 2150.64,1217.81 2151.23,1217.65 2151.81,1214.57 2152.4,1214.68 2152.99,1214.86 2153.57,1217.62 2154.16,1215.98 2154.75,1214.71 2155.33,1214.64 2155.92,1211.89 2156.5,1212.12 2157.09,1212.27 2157.68,1211.06 2158.26,1212.63 \"/>\n<path clip-path=\"url(#clip972)\" d=\"M986.025 1214.8 L986.612 1214.8 L987.198 1214.8 L987.785 1214.8 L988.371 1214.8 L988.957 1214.8 L989.544 1214.8 L990.13 1214.8 L990.717 1214.8 L991.303 1214.8 L991.889 1214.8 L992.476 1214.8 L993.062 1214.8 L993.649 1214.8 L994.235 1214.8 L994.822 1214.8 L995.408 1214.8 L995.994 1214.8 L996.581 1214.8 L997.167 1214.8 L997.754 1214.8 L998.34 1214.8 L998.926 1214.8 L999.513 1214.8 L1000.1 1214.8 L1000.69 1214.8 L1001.27 1214.8 L1001.86 1214.8 L1002.44 1214.8 L1003.03 1214.8 L1003.62 1214.8 L1004.2 1214.8 L1004.79 1214.8 L1005.38 1214.8 L1005.96 1214.8 L1006.55 1214.8 L1007.14 1214.8 L1007.72 1214.8 L1008.31 1214.8 L1008.9 1214.8 L1009.48 1214.8 L1010.07 1214.8 L1010.65 1214.8 L1011.24 1214.8 L1011.83 1214.8 L1012.41 1214.8 L1013 1214.8 L1013.59 1214.8 L1014.17 1214.8 L1014.76 1214.8 L1015.35 1214.8 L1015.93 1214.8 L1016.52 1214.8 L1017.11 1214.8 L1017.69 1214.8 L1018.28 1214.8 L1018.86 1214.8 L1019.45 1214.8 L1020.04 1214.8 L1020.62 1214.8 L1021.21 1214.8 L1021.8 1214.8 L1022.38 1214.8 L1022.97 1214.8 L1023.56 1214.8 L1024.14 1214.8 L1024.73 1214.8 L1025.32 1214.8 L1025.9 1214.8 L1026.49 1214.8 L1027.07 1214.8 L1027.66 1214.8 L1028.25 1214.8 L1028.83 1214.8 L1029.42 1214.8 L1030.01 1214.8 L1030.59 1214.8 L1031.18 1214.8 L1031.77 1214.8 L1032.35 1214.8 L1032.94 1214.8 L1033.52 1214.8 L1034.11 1214.8 L1034.7 1214.8 L1035.28 1214.8 L1035.87 1214.8 L1036.46 1214.8 L1037.04 1214.8 L1037.63 1214.8 L1038.22 1214.8 L1038.8 1214.8 L1039.39 1214.8 L1039.98 1214.8 L1040.56 1214.8 L1041.15 1214.8 L1041.73 1214.8 L1042.32 1214.8 L1042.91 1214.8 L1043.49 1214.8 L1044.08 1214.8 L1044.67 1214.8 L1045.25 1214.8 L1045.84 1214.8 L1046.43 1214.8 L1047.01 1214.8 L1047.6 1214.8 L1048.19 1214.8 L1048.77 1214.8 L1049.36 1214.8 L1049.94 1214.8 L1050.53 1214.8 L1051.12 1214.8 L1051.7 1214.8 L1052.29 1214.8 L1052.88 1214.8 L1053.46 1214.8 L1054.05 1214.8 L1054.64 1214.8 L1055.22 1214.8 L1055.81 1214.8 L1056.39 1214.8 L1056.98 1214.8 L1057.57 1214.8 L1058.15 1214.8 L1058.74 1214.8 L1059.33 1214.8 L1059.91 1214.8 L1060.5 1214.8 L1061.09 1214.8 L1061.67 1214.8 L1062.26 1214.8 L1062.85 1214.8 L1063.43 1214.8 L1064.02 1214.8 L1064.6 1214.8 L1065.19 1214.8 L1065.78 1214.8 L1066.36 1214.8 L1066.95 1214.8 L1067.54 1214.8 L1068.12 1214.8 L1068.71 1214.8 L1069.3 1214.8 L1069.88 1214.8 L1070.47 1214.8 L1071.06 1214.8 L1071.64 1214.8 L1072.23 1214.8 L1072.81 1214.8 L1073.4 1214.8 L1073.99 1214.8 L1074.57 1214.8 L1075.16 1214.8 L1075.75 1214.8 L1076.33 1214.8 L1076.92 1214.8 L1077.51 1214.8 L1078.09 1214.8 L1078.68 1214.8 L1079.26 1214.8 L1079.85 1214.8 L1080.44 1214.8 L1081.02 1214.8 L1081.61 1214.8 L1082.2 1214.8 L1082.78 1214.8 L1083.37 1214.8 L1083.96 1214.8 L1084.54 1214.8 L1085.13 1214.8 L1085.72 1214.8 L1086.3 1214.8 L1086.89 1214.8 L1087.47 1214.8 L1088.06 1214.8 L1088.65 1214.8 L1089.23 1214.8 L1089.82 1214.8 L1090.41 1214.8 L1090.99 1214.8 L1091.58 1214.8 L1092.17 1214.8 L1092.75 1214.8 L1093.34 1214.8 L1093.93 1214.8 L1094.51 1214.8 L1095.1 1214.8 L1095.68 1214.8 L1096.27 1214.8 L1096.86 1214.8 L1097.44 1214.8 L1098.03 1214.8 L1098.62 1214.8 L1099.2 1214.8 L1099.79 1214.8 L1100.38 1214.8 L1100.96 1214.8 L1101.55 1214.8 L1102.14 1214.8 L1102.72 1214.8 L1103.31 1214.8 L1103.89 1214.8 L1104.48 1214.8 L1105.07 1214.8 L1105.65 1214.8 L1106.24 1214.8 L1106.83 1214.8 L1107.41 1214.8 L1108 1214.8 L1108.59 1214.8 L1109.17 1214.8 L1109.76 1214.8 L1110.34 1214.8 L1110.93 1214.8 L1111.52 1214.8 L1112.1 1214.8 L1112.69 1214.8 L1113.28 1214.8 L1113.86 1214.8 L1114.45 1214.8 L1115.04 1214.8 L1115.62 1214.8 L1116.21 1214.8 L1116.8 1214.8 L1117.38 1214.8 L1117.97 1214.8 L1118.55 1214.8 L1119.14 1214.8 L1119.73 1214.8 L1120.31 1214.8 L1120.9 1214.8 L1121.49 1214.8 L1122.07 1214.8 L1122.66 1214.8 L1123.25 1214.8 L1123.83 1214.8 L1124.42 1214.8 L1125.01 1214.8 L1125.59 1214.8 L1126.18 1214.8 L1126.76 1214.8 L1127.35 1214.8 L1127.94 1214.8 L1128.52 1214.8 L1129.11 1214.8 L1129.7 1214.8 L1130.28 1214.8 L1130.87 1214.8 L1131.46 1214.8 L1132.04 1214.8 L1132.63 1214.8 L1133.21 1214.8 L1133.8 1214.8 L1134.39 1214.8 L1134.97 1214.8 L1135.56 1214.8 L1136.15 1214.8 L1136.73 1214.8 L1137.32 1214.8 L1137.91 1214.8 L1138.49 1214.8 L1139.08 1214.8 L1139.67 1214.8 L1140.25 1214.8 L1140.84 1214.8 L1141.42 1214.8 L1142.01 1214.8 L1142.6 1214.8 L1143.18 1214.8 L1143.77 1214.8 L1144.36 1214.8 L1144.94 1214.8 L1145.53 1214.8 L1146.12 1214.8 L1146.7 1214.8 L1147.29 1214.8 L1147.88 1214.8 L1148.46 1214.8 L1149.05 1214.8 L1149.63 1214.8 L1150.22 1214.8 L1150.81 1214.8 L1151.39 1214.8 L1151.98 1214.8 L1152.57 1214.8 L1153.15 1214.8 L1153.74 1214.8 L1154.33 1214.8 L1154.91 1214.8 L1155.5 1214.8 L1156.09 1214.8 L1156.67 1214.8 L1157.26 1214.8 L1157.84 1214.8 L1158.43 1214.8 L1159.02 1214.8 L1159.6 1214.8 L1160.19 1214.8 L1160.78 1214.8 L1161.36 1214.8 L1161.95 1214.8 L1162.54 1214.8 L1163.12 1214.8 L1163.71 1214.8 L1164.29 1214.8 L1164.88 1214.8 L1165.47 1214.8 L1166.05 1214.8 L1166.64 1214.8 L1167.23 1214.8 L1167.81 1214.8 L1168.4 1214.8 L1168.99 1214.8 L1169.57 1214.8 L1170.16 1214.8 L1170.75 1214.8 L1171.33 1214.8 L1171.92 1214.8 L1172.5 1214.8 L1173.09 1214.8 L1173.68 1214.8 L1174.26 1214.8 L1174.85 1214.8 L1175.44 1214.8 L1176.02 1214.8 L1176.61 1214.8 L1177.2 1214.8 L1177.78 1214.8 L1178.37 1214.8 L1178.96 1214.8 L1179.54 1214.8 L1180.13 1214.8 L1180.71 1214.8 L1181.3 1214.8 L1181.89 1214.8 L1182.47 1214.8 L1183.06 1214.8 L1183.65 1214.8 L1184.23 1214.8 L1184.82 1214.8 L1185.41 1214.8 L1185.99 1214.8 L1186.58 1214.8 L1187.16 1214.8 L1187.75 1214.8 L1188.34 1214.8 L1188.92 1214.8 L1189.51 1214.8 L1190.1 1214.8 L1190.68 1214.8 L1191.27 1214.8 L1191.86 1214.8 L1192.44 1214.8 L1193.03 1214.8 L1193.62 1214.8 L1194.2 1214.8 L1194.79 1214.8 L1195.37 1214.8 L1195.96 1214.8 L1196.55 1214.8 L1197.13 1214.8 L1197.72 1214.8 L1198.31 1214.8 L1198.89 1214.8 L1199.48 1214.8 L1200.07 1214.8 L1200.65 1214.8 L1201.24 1214.8 L1201.83 1214.8 L1202.41 1214.8 L1203 1214.8 L1203.58 1214.8 L1204.17 1214.8 L1204.76 1214.8 L1205.34 1214.8 L1205.93 1214.8 L1206.52 1214.8 L1207.1 1214.8 L1207.69 1214.8 L1208.28 1214.8 L1208.86 1214.8 L1209.45 1214.8 L1210.03 1214.8 L1210.62 1214.8 L1211.21 1214.8 L1211.79 1214.8 L1212.38 1214.8 L1212.97 1214.8 L1213.55 1214.8 L1214.14 1214.8 L1214.73 1214.8 L1215.31 1214.8 L1215.9 1214.8 L1216.49 1214.8 L1217.07 1214.8 L1217.66 1214.8 L1218.24 1214.8 L1218.83 1214.8 L1219.42 1214.8 L1220 1214.8 L1220.59 1214.8 L1221.18 1214.8 L1221.76 1214.8 L1222.35 1214.8 L1222.94 1214.8 L1223.52 1214.8 L1224.11 1214.8 L1224.7 1214.8 L1225.28 1214.8 L1225.87 1214.8 L1226.45 1214.8 L1227.04 1214.8 L1227.63 1214.8 L1228.21 1214.8 L1228.8 1214.8 L1229.39 1214.8 L1229.97 1214.8 L1230.56 1214.8 L1231.15 1214.8 L1231.73 1214.8 L1232.32 1214.8 L1232.91 1214.8 L1233.49 1214.8 L1234.08 1214.8 L1234.66 1214.8 L1235.25 1214.8 L1235.84 1214.8 L1236.42 1214.8 L1237.01 1214.8 L1237.6 1214.8 L1238.18 1214.8 L1238.77 1214.8 L1239.36 1214.8 L1239.94 1214.8 L1240.53 1214.8 L1241.11 1214.8 L1241.7 1214.8 L1242.29 1214.8 L1242.87 1214.8 L1243.46 1214.8 L1244.05 1214.8 L1244.63 1214.8 L1245.22 1214.8 L1245.81 1214.8 L1246.39 1214.8 L1246.98 1214.8 L1247.57 1214.8 L1248.15 1214.8 L1248.74 1214.8 L1249.32 1214.8 L1249.91 1214.8 L1250.5 1214.8 L1251.08 1214.8 L1251.67 1214.8 L1252.26 1214.8 L1252.84 1214.8 L1253.43 1214.8 L1254.02 1214.8 L1254.6 1214.8 L1255.19 1214.8 L1255.78 1214.8 L1256.36 1214.8 L1256.95 1214.8 L1257.53 1214.8 L1258.12 1214.8 L1258.71 1214.8 L1259.29 1214.8 L1259.88 1214.8 L1260.47 1214.8 L1261.05 1214.8 L1261.64 1214.8 L1262.23 1214.8 L1262.81 1214.8 L1263.4 1214.8 L1263.98 1214.8 L1264.57 1214.8 L1265.16 1214.8 L1265.74 1214.8 L1266.33 1214.8 L1266.92 1214.8 L1267.5 1214.8 L1268.09 1214.8 L1268.68 1214.8 L1269.26 1214.8 L1269.85 1214.8 L1270.44 1214.8 L1271.02 1214.8 L1271.61 1214.8 L1272.19 1214.8 L1272.78 1214.8 L1273.37 1214.8 L1273.95 1214.8 L1274.54 1214.8 L1275.13 1214.8 L1275.71 1214.8 L1276.3 1214.8 L1276.89 1214.8 L1277.47 1214.8 L1278.06 1214.8 L1278.65 1214.8 L1279.23 1214.8 L1279.82 1214.8 L1280.4 1214.8 L1280.99 1214.8 L1281.58 1214.8 L1282.16 1214.8 L1282.75 1214.8 L1283.34 1214.8 L1283.92 1214.8 L1284.51 1214.8 L1285.1 1214.8 L1285.68 1214.8 L1286.27 1214.8 L1286.86 1214.8 L1287.44 1214.8 L1288.03 1214.8 L1288.61 1214.8 L1289.2 1214.8 L1289.79 1214.8 L1290.37 1214.8 L1290.96 1214.8 L1291.55 1214.8 L1292.13 1214.8 L1292.72 1214.8 L1293.31 1214.8 L1293.89 1214.8 L1294.48 1214.8 L1295.06 1214.8 L1295.65 1214.8 L1296.24 1214.8 L1296.82 1214.8 L1297.41 1214.8 L1298 1214.8 L1298.58 1214.8 L1299.17 1214.8 L1299.76 1214.8 L1300.34 1214.8 L1300.93 1214.8 L1301.52 1214.8 L1302.1 1214.8 L1302.69 1214.8 L1303.27 1214.8 L1303.86 1214.8 L1304.45 1214.8 L1305.03 1214.8 L1305.62 1214.8 L1306.21 1214.8 L1306.79 1214.8 L1307.38 1214.8 L1307.97 1214.8 L1308.55 1214.8 L1309.14 1214.8 L1309.73 1214.8 L1310.31 1214.8 L1310.9 1214.8 L1311.48 1214.8 L1312.07 1214.8 L1312.66 1214.8 L1313.24 1214.8 L1313.83 1214.8 L1314.42 1214.8 L1315 1214.8 L1315.59 1214.8 L1316.18 1214.8 L1316.76 1214.8 L1317.35 1214.8 L1317.93 1214.8 L1318.52 1214.8 L1319.11 1214.8 L1319.69 1214.8 L1320.28 1214.8 L1320.87 1214.8 L1321.45 1214.8 L1322.04 1214.8 L1322.63 1214.8 L1323.21 1214.8 L1323.8 1214.8 L1324.39 1214.8 L1324.97 1214.8 L1325.56 1214.8 L1326.14 1214.8 L1326.73 1214.8 L1327.32 1214.8 L1327.9 1214.8 L1328.49 1214.8 L1329.08 1214.8 L1329.66 1214.8 L1330.25 1214.8 L1330.84 1214.8 L1331.42 1214.8 L1332.01 1214.8 L1332.6 1214.8 L1333.18 1214.8 L1333.77 1214.8 L1334.35 1214.8 L1334.94 1214.8 L1335.53 1214.8 L1336.11 1214.8 L1336.7 1214.8 L1337.29 1214.8 L1337.87 1214.8 L1338.46 1214.8 L1339.05 1214.8 L1339.63 1214.8 L1340.22 1214.8 L1340.8 1214.8 L1341.39 1214.8 L1341.98 1214.8 L1342.56 1214.8 L1343.15 1214.8 L1343.74 1214.8 L1344.32 1214.8 L1344.91 1214.8 L1345.5 1214.8 L1346.08 1214.8 L1346.67 1214.8 L1347.26 1214.8 L1347.84 1214.8 L1348.43 1214.8 L1349.01 1214.8 L1349.6 1214.8 L1350.19 1214.8 L1350.77 1214.8 L1351.36 1214.8 L1351.95 1214.8 L1352.53 1214.8 L1353.12 1214.8 L1353.71 1214.8 L1354.29 1214.8 L1354.88 1214.8 L1355.47 1214.8 L1356.05 1214.8 L1356.64 1214.8 L1357.22 1214.8 L1357.81 1214.8 L1358.4 1214.8 L1358.98 1214.8 L1359.57 1214.8 L1360.16 1214.8 L1360.74 1214.8 L1361.33 1214.8 L1361.92 1214.8 L1362.5 1214.8 L1363.09 1214.8 L1363.68 1214.8 L1364.26 1214.8 L1364.85 1214.8 L1365.43 1214.8 L1366.02 1214.8 L1366.61 1214.8 L1367.19 1214.8 L1367.78 1214.8 L1368.37 1214.8 L1368.95 1214.8 L1369.54 1214.8 L1370.13 1214.8 L1370.71 1214.8 L1371.3 1214.8 L1371.88 1214.8 L1372.47 1214.8 L1373.06 1214.8 L1373.64 1214.8 L1374.23 1214.8 L1374.82 1214.8 L1375.4 1214.8 L1375.99 1214.8 L1376.58 1214.8 L1377.16 1214.8 L1377.75 1214.8 L1378.34 1214.8 L1378.92 1214.8 L1379.51 1214.8 L1380.09 1214.8 L1380.68 1214.8 L1381.27 1214.8 L1381.85 1214.8 L1382.44 1214.8 L1383.03 1214.8 L1383.61 1214.8 L1384.2 1214.8 L1384.79 1214.8 L1385.37 1214.8 L1385.96 1214.8 L1386.55 1214.8 L1387.13 1214.8 L1387.72 1214.8 L1388.3 1214.8 L1388.89 1214.8 L1389.48 1214.8 L1390.06 1214.8 L1390.65 1214.8 L1391.24 1214.8 L1391.82 1214.8 L1392.41 1214.8 L1393 1214.8 L1393.58 1214.8 L1394.17 1214.8 L1394.75 1214.8 L1395.34 1214.8 L1395.93 1214.8 L1396.51 1214.8 L1397.1 1214.8 L1397.69 1214.8 L1398.27 1214.8 L1398.86 1214.8 L1399.45 1214.8 L1400.03 1214.8 L1400.62 1214.8 L1401.21 1214.8 L1401.79 1214.8 L1402.38 1214.8 L1402.96 1214.8 L1403.55 1214.8 L1404.14 1214.8 L1404.72 1214.8 L1405.31 1214.8 L1405.9 1214.8 L1406.48 1214.8 L1407.07 1214.8 L1407.66 1214.8 L1408.24 1214.8 L1408.83 1214.8 L1409.42 1214.8 L1410 1214.8 L1410.59 1214.8 L1411.17 1214.8 L1411.76 1214.8 L1412.35 1214.8 L1412.93 1214.8 L1413.52 1214.8 L1414.11 1214.8 L1414.69 1214.8 L1415.28 1214.8 L1415.87 1214.8 L1416.45 1214.8 L1417.04 1214.8 L1417.63 1214.8 L1418.21 1214.8 L1418.8 1214.8 L1419.38 1214.8 L1419.97 1214.8 L1420.56 1214.8 L1421.14 1214.8 L1421.73 1214.8 L1422.32 1214.8 L1422.9 1214.8 L1423.49 1214.8 L1424.08 1214.8 L1424.66 1214.8 L1425.25 1214.8 L1425.83 1214.8 L1426.42 1214.8 L1427.01 1214.8 L1427.59 1214.8 L1428.18 1214.8 L1428.77 1214.8 L1429.35 1214.8 L1429.94 1214.8 L1430.53 1214.8 L1431.11 1214.8 L1431.7 1214.8 L1432.29 1214.8 L1432.87 1214.8 L1433.46 1214.8 L1434.04 1214.8 L1434.63 1214.8 L1435.22 1214.8 L1435.8 1214.8 L1436.39 1214.8 L1436.98 1214.8 L1437.56 1214.8 L1438.15 1214.8 L1438.74 1214.8 L1439.32 1214.8 L1439.91 1214.8 L1440.5 1214.8 L1441.08 1214.8 L1441.67 1214.8 L1442.25 1214.8 L1442.84 1214.8 L1443.43 1214.8 L1444.01 1214.8 L1444.6 1214.8 L1445.19 1214.8 L1445.77 1214.8 L1446.36 1214.8 L1446.95 1214.8 L1447.53 1214.8 L1448.12 1214.8 L1448.7 1214.8 L1449.29 1214.8 L1449.88 1214.8 L1450.46 1214.8 L1451.05 1214.8 L1451.64 1214.8 L1452.22 1214.8 L1452.81 1214.8 L1453.4 1214.8 L1453.98 1214.8 L1454.57 1214.8 L1455.16 1214.8 L1455.74 1214.8 L1456.33 1214.8 L1456.91 1214.8 L1457.5 1214.8 L1458.09 1214.8 L1458.67 1214.8 L1459.26 1214.8 L1459.85 1214.8 L1460.43 1214.8 L1461.02 1214.8 L1461.61 1214.8 L1462.19 1214.8 L1462.78 1214.8 L1463.37 1214.8 L1463.95 1214.8 L1464.54 1214.8 L1465.12 1214.8 L1465.71 1214.8 L1466.3 1214.8 L1466.88 1214.8 L1467.47 1214.8 L1468.06 1214.8 L1468.64 1214.8 L1469.23 1214.8 L1469.82 1214.8 L1470.4 1214.8 L1470.99 1214.8 L1471.57 1214.8 L1472.16 1214.8 L1472.75 1214.8 L1473.33 1214.8 L1473.92 1214.8 L1474.51 1214.8 L1475.09 1214.8 L1475.68 1214.8 L1476.27 1214.8 L1476.85 1214.8 L1477.44 1214.8 L1478.03 1214.8 L1478.61 1214.8 L1479.2 1214.8 L1479.78 1214.8 L1480.37 1214.8 L1480.96 1214.8 L1481.54 1214.8 L1482.13 1214.8 L1482.72 1214.8 L1483.3 1214.8 L1483.89 1214.8 L1484.48 1214.8 L1485.06 1214.8 L1485.65 1214.8 L1486.24 1214.8 L1486.82 1214.8 L1487.41 1214.8 L1487.99 1214.8 L1488.58 1214.8 L1489.17 1214.8 L1489.75 1214.8 L1490.34 1214.8 L1490.93 1214.8 L1491.51 1214.8 L1492.1 1214.8 L1492.69 1214.8 L1493.27 1214.8 L1493.86 1214.8 L1494.45 1214.8 L1495.03 1214.8 L1495.62 1214.8 L1496.2 1214.8 L1496.79 1214.8 L1497.38 1214.8 L1497.96 1214.8 L1498.55 1214.8 L1499.14 1214.8 L1499.72 1214.8 L1500.31 1214.8 L1500.9 1214.8 L1501.48 1214.8 L1502.07 1214.8 L1502.65 1214.8 L1503.24 1214.8 L1503.83 1214.8 L1504.41 1214.8 L1505 1214.8 L1505.59 1214.8 L1506.17 1214.8 L1506.76 1214.8 L1507.35 1214.8 L1507.93 1214.8 L1508.52 1214.8 L1509.11 1214.8 L1509.69 1214.8 L1510.28 1214.8 L1510.86 1214.8 L1511.45 1214.8 L1512.04 1214.8 L1512.62 1214.8 L1513.21 1214.8 L1513.8 1214.8 L1514.38 1214.8 L1514.97 1214.8 L1515.56 1214.8 L1516.14 1214.8 L1516.73 1214.8 L1517.32 1214.8 L1517.9 1214.8 L1518.49 1214.8 L1519.07 1214.8 L1519.66 1214.8 L1520.25 1214.8 L1520.83 1214.8 L1521.42 1214.8 L1522.01 1214.8 L1522.59 1214.8 L1523.18 1214.8 L1523.77 1214.8 L1524.35 1214.8 L1524.94 1214.8 L1525.52 1214.8 L1526.11 1214.8 L1526.7 1214.8 L1527.28 1214.8 L1527.87 1214.8 L1528.46 1214.8 L1529.04 1214.8 L1529.63 1214.8 L1530.22 1214.8 L1530.8 1214.8 L1531.39 1214.8 L1531.98 1214.8 L1532.56 1214.8 L1533.15 1214.8 L1533.73 1214.8 L1534.32 1214.8 L1534.91 1214.8 L1535.49 1214.8 L1536.08 1214.8 L1536.67 1214.8 L1537.25 1214.8 L1537.84 1214.8 L1538.43 1214.8 L1539.01 1214.8 L1539.6 1214.8 L1540.19 1214.8 L1540.77 1214.8 L1541.36 1214.8 L1541.94 1214.8 L1542.53 1214.8 L1543.12 1214.8 L1543.7 1214.8 L1544.29 1214.8 L1544.88 1214.8 L1545.46 1214.8 L1546.05 1214.8 L1546.64 1214.8 L1547.22 1214.8 L1547.81 1214.8 L1548.4 1214.8 L1548.98 1214.8 L1549.57 1214.8 L1550.15 1214.8 L1550.74 1214.8 L1551.33 1214.8 L1551.91 1214.8 L1552.5 1214.8 L1553.09 1214.8 L1553.67 1214.8 L1554.26 1214.8 L1554.85 1214.8 L1555.43 1214.8 L1556.02 1214.8 L1556.6 1214.8 L1557.19 1214.8 L1557.78 1214.8 L1558.36 1214.8 L1558.95 1214.8 L1559.54 1214.8 L1560.12 1214.8 L1560.71 1214.8 L1561.3 1214.8 L1561.88 1214.8 L1562.47 1214.8 L1563.06 1214.8 L1563.64 1214.8 L1564.23 1214.8 L1564.81 1214.8 L1565.4 1214.8 L1565.99 1214.8 L1566.57 1214.8 L1567.16 1214.8 L1567.75 1214.8 L1568.33 1214.8 L1568.92 1214.8 L1569.51 1214.8 L1570.09 1214.8 L1570.68 1214.8 L1571.27 1214.8 L1571.85 1214.8 L1572.44 1214.8 L1573.02 1214.8 L1573.61 1214.8 L1574.2 1214.8 L1574.78 1214.8 L1575.37 1214.8 L1575.96 1214.8 L1576.54 1214.8 L1577.13 1214.8 L1577.72 1214.8 L1578.3 1214.8 L1578.89 1214.8 L1579.47 1214.8 L1580.06 1214.8 L1580.65 1214.8 L1581.23 1214.8 L1581.82 1214.8 L1582.41 1214.8 L1582.99 1214.8 L1583.58 1214.8 L1584.17 1214.8 L1584.75 1214.8 L1585.34 1214.8 L1585.93 1214.8 L1586.51 1214.8 L1587.1 1214.8 L1587.68 1214.8 L1588.27 1214.8 L1588.86 1214.8 L1589.44 1214.8 L1590.03 1214.8 L1590.62 1214.8 L1591.2 1214.8 L1591.79 1214.8 L1592.38 1214.8 L1592.96 1214.8 L1593.55 1214.8 L1594.14 1214.8 L1594.72 1214.8 L1595.31 1214.8 L1595.89 1214.8 L1596.48 1214.8 L1597.07 1214.8 L1597.65 1214.8 L1598.24 1214.8 L1598.83 1214.8 L1599.41 1214.8 L1600 1214.8 L1600.59 1214.8 L1601.17 1214.8 L1601.76 1214.8 L1602.34 1214.8 L1602.93 1214.8 L1603.52 1214.8 L1604.1 1214.8 L1604.69 1214.8 L1605.28 1214.8 L1605.86 1214.8 L1606.45 1214.8 L1607.04 1214.8 L1607.62 1214.8 L1608.21 1214.8 L1608.8 1214.8 L1609.38 1214.8 L1609.97 1214.8 L1610.55 1214.8 L1611.14 1214.8 L1611.73 1214.8 L1612.31 1214.8 L1612.9 1214.8 L1613.49 1214.8 L1614.07 1214.8 L1614.66 1214.8 L1615.25 1214.8 L1615.83 1214.8 L1616.42 1214.8 L1617.01 1214.8 L1617.59 1214.8 L1618.18 1214.8 L1618.76 1214.8 L1619.35 1214.8 L1619.94 1214.8 L1620.52 1214.8 L1621.11 1214.8 L1621.7 1214.8 L1622.28 1214.8 L1622.87 1214.8 L1623.46 1214.8 L1624.04 1214.8 L1624.63 1214.8 L1625.22 1214.8 L1625.8 1214.8 L1626.39 1214.8 L1626.97 1214.8 L1627.56 1214.8 L1628.15 1214.8 L1628.73 1214.8 L1629.32 1214.8 L1629.91 1214.8 L1630.49 1214.8 L1631.08 1214.8 L1631.67 1214.8 L1632.25 1214.8 L1632.84 1214.8 L1633.42 1214.8 L1634.01 1214.8 L1634.6 1214.8 L1635.18 1214.8 L1635.77 1214.8 L1636.36 1214.8 L1636.94 1214.8 L1637.53 1214.8 L1638.12 1214.8 L1638.7 1214.8 L1639.29 1214.8 L1639.88 1214.8 L1640.46 1214.8 L1641.05 1214.8 L1641.63 1214.8 L1642.22 1214.8 L1642.81 1214.8 L1643.39 1214.8 L1643.98 1214.8 L1644.57 1214.8 L1645.15 1214.8 L1645.74 1214.8 L1646.33 1214.8 L1646.91 1214.8 L1647.5 1214.8 L1648.09 1214.8 L1648.67 1214.8 L1649.26 1214.8 L1649.84 1214.8 L1650.43 1214.8 L1651.02 1214.8 L1651.6 1214.8 L1652.19 1214.8 L1652.78 1214.8 L1653.36 1214.8 L1653.95 1214.8 L1654.54 1214.8 L1655.12 1214.8 L1655.71 1214.8 L1656.29 1214.8 L1656.88 1214.8 L1657.47 1214.8 L1658.05 1214.8 L1658.64 1214.8 L1659.23 1214.8 L1659.81 1214.8 L1660.4 1214.8 L1660.99 1214.8 L1661.57 1214.8 L1662.16 1214.8 L1662.75 1214.8 L1663.33 1214.8 L1663.92 1214.8 L1664.5 1214.8 L1665.09 1214.8 L1665.68 1214.8 L1666.26 1214.8 L1666.85 1214.8 L1667.44 1214.8 L1668.02 1214.8 L1668.61 1214.8 L1669.2 1214.8 L1669.78 1214.8 L1670.37 1214.8 L1670.96 1214.8 L1671.54 1214.8 L1672.13 1214.8 L1672.71 1214.8 L1673.3 1214.8 L1673.89 1214.8 L1674.47 1214.8 L1675.06 1214.8 L1675.65 1214.8 L1676.23 1214.8 L1676.82 1214.8 L1677.41 1214.8 L1677.99 1214.8 L1678.58 1214.8 L1679.17 1214.8 L1679.75 1214.8 L1680.34 1214.8 L1680.92 1214.8 L1681.51 1214.8 L1682.1 1214.8 L1682.68 1214.8 L1683.27 1214.8 L1683.86 1214.8 L1684.44 1214.8 L1685.03 1214.8 L1685.62 1214.8 L1686.2 1214.8 L1686.79 1214.8 L1687.37 1214.8 L1687.96 1214.8 L1688.55 1214.8 L1689.13 1214.8 L1689.72 1214.8 L1690.31 1214.8 L1690.89 1214.8 L1691.48 1214.8 L1692.07 1214.8 L1692.65 1214.8 L1693.24 1214.8 L1693.83 1214.8 L1694.41 1214.8 L1695 1214.8 L1695.58 1214.8 L1696.17 1214.8 L1696.76 1214.8 L1697.34 1214.8 L1697.93 1214.8 L1698.52 1214.8 L1699.1 1214.8 L1699.69 1214.8 L1700.28 1214.8 L1700.86 1214.8 L1701.45 1214.8 L1702.04 1214.8 L1702.62 1214.8 L1703.21 1214.8 L1703.79 1214.8 L1704.38 1214.8 L1704.97 1214.8 L1705.55 1214.8 L1706.14 1214.8 L1706.73 1214.8 L1707.31 1214.8 L1707.9 1214.8 L1708.49 1214.8 L1709.07 1214.8 L1709.66 1214.8 L1710.24 1214.8 L1710.83 1214.8 L1711.42 1214.8 L1712 1214.8 L1712.59 1214.8 L1713.18 1214.8 L1713.76 1214.8 L1714.35 1214.8 L1714.94 1214.8 L1715.52 1214.8 L1716.11 1214.8 L1716.7 1214.8 L1717.28 1214.8 L1717.87 1214.8 L1718.45 1214.8 L1719.04 1214.8 L1719.63 1214.8 L1720.21 1214.8 L1720.8 1214.8 L1721.39 1214.8 L1721.97 1214.8 L1722.56 1214.8 L1723.15 1214.8 L1723.73 1214.8 L1724.32 1214.8 L1724.91 1214.8 L1725.49 1214.8 L1726.08 1214.8 L1726.66 1214.8 L1727.25 1214.8 L1727.84 1214.8 L1728.42 1214.8 L1729.01 1214.8 L1729.6 1214.8 L1730.18 1214.8 L1730.77 1214.8 L1731.36 1214.8 L1731.94 1214.8 L1732.53 1214.8 L1733.11 1214.8 L1733.7 1214.8 L1734.29 1214.8 L1734.87 1214.8 L1735.46 1214.8 L1736.05 1214.8 L1736.63 1214.8 L1737.22 1214.8 L1737.81 1214.8 L1738.39 1214.8 L1738.98 1214.8 L1739.57 1214.8 L1740.15 1214.8 L1740.74 1214.8 L1741.32 1214.8 L1741.91 1214.8 L1742.5 1214.8 L1743.08 1214.8 L1743.67 1214.8 L1744.26 1214.8 L1744.84 1214.8 L1745.43 1214.8 L1746.02 1214.8 L1746.6 1214.8 L1747.19 1214.8 L1747.78 1214.8 L1748.36 1214.8 L1748.95 1214.8 L1749.53 1214.8 L1750.12 1214.8 L1750.71 1214.8 L1751.29 1214.8 L1751.88 1214.8 L1752.47 1214.8 L1753.05 1214.8 L1753.64 1214.8 L1754.23 1214.8 L1754.81 1214.8 L1755.4 1214.8 L1755.99 1214.8 L1756.57 1214.8 L1757.16 1214.8 L1757.74 1214.8 L1758.33 1214.8 L1758.92 1214.8 L1759.5 1214.8 L1760.09 1214.8 L1760.68 1214.8 L1761.26 1214.8 L1761.85 1214.8 L1762.44 1214.8 L1763.02 1214.8 L1763.61 1214.8 L1764.19 1214.8 L1764.78 1214.8 L1765.37 1214.8 L1765.95 1214.8 L1766.54 1214.8 L1767.13 1214.8 L1767.71 1214.8 L1768.3 1214.8 L1768.89 1214.8 L1769.47 1214.8 L1770.06 1214.8 L1770.65 1214.8 L1771.23 1214.8 L1771.82 1214.8 L1772.4 1214.8 L1772.99 1214.8 L1773.58 1214.8 L1774.16 1214.8 L1774.75 1214.8 L1775.34 1214.8 L1775.92 1214.8 L1776.51 1214.8 L1777.1 1214.8 L1777.68 1214.8 L1778.27 1214.8 L1778.86 1214.8 L1779.44 1214.8 L1780.03 1214.8 L1780.61 1214.8 L1781.2 1214.8 L1781.79 1214.8 L1782.37 1214.8 L1782.96 1214.8 L1783.55 1214.8 L1784.13 1214.8 L1784.72 1214.8 L1785.31 1214.8 L1785.89 1214.8 L1786.48 1214.8 L1787.06 1214.8 L1787.65 1214.8 L1788.24 1214.8 L1788.82 1214.8 L1789.41 1214.8 L1790 1214.8 L1790.58 1214.8 L1791.17 1214.8 L1791.76 1214.8 L1792.34 1214.8 L1792.93 1214.8 L1793.52 1214.8 L1794.1 1214.8 L1794.69 1214.8 L1795.27 1214.8 L1795.86 1214.8 L1796.45 1214.8 L1797.03 1214.8 L1797.62 1214.8 L1798.21 1214.8 L1798.79 1214.8 L1799.38 1214.8 L1799.97 1214.8 L1800.55 1214.8 L1801.14 1214.8 L1801.73 1214.8 L1802.31 1214.8 L1802.9 1214.8 L1803.48 1214.8 L1804.07 1214.8 L1804.66 1214.8 L1805.24 1214.8 L1805.83 1214.8 L1806.42 1214.8 L1807 1214.8 L1807.59 1214.8 L1808.18 1214.8 L1808.76 1214.8 L1809.35 1214.8 L1809.94 1214.8 L1810.52 1214.8 L1811.11 1214.8 L1811.69 1214.8 L1812.28 1214.8 L1812.87 1214.8 L1813.45 1214.8 L1814.04 1214.8 L1814.63 1214.8 L1815.21 1214.8 L1815.8 1214.8 L1816.39 1214.8 L1816.97 1214.8 L1817.56 1214.8 L1818.14 1214.8 L1818.73 1214.8 L1819.32 1214.8 L1819.9 1214.8 L1820.49 1214.8 L1821.08 1214.8 L1821.66 1214.8 L1822.25 1214.8 L1822.84 1214.8 L1823.42 1214.8 L1824.01 1214.8 L1824.6 1214.8 L1825.18 1214.8 L1825.77 1214.8 L1826.35 1214.8 L1826.94 1214.8 L1827.53 1214.8 L1828.11 1214.8 L1828.7 1214.8 L1829.29 1214.8 L1829.87 1214.8 L1830.46 1214.8 L1831.05 1214.8 L1831.63 1214.8 L1832.22 1214.8 L1832.81 1214.8 L1833.39 1214.8 L1833.98 1214.8 L1834.56 1214.8 L1835.15 1214.8 L1835.74 1214.8 L1836.32 1214.8 L1836.91 1214.8 L1837.5 1214.8 L1838.08 1214.8 L1838.67 1214.8 L1839.26 1214.8 L1839.84 1214.8 L1840.43 1214.8 L1841.01 1214.8 L1841.6 1214.8 L1842.19 1214.8 L1842.77 1214.8 L1843.36 1214.8 L1843.95 1214.8 L1844.53 1214.8 L1845.12 1214.8 L1845.71 1214.8 L1846.29 1214.8 L1846.88 1214.8 L1847.47 1214.8 L1848.05 1214.8 L1848.64 1214.8 L1849.22 1214.8 L1849.81 1214.8 L1850.4 1214.8 L1850.98 1214.8 L1851.57 1214.8 L1852.16 1214.8 L1852.74 1214.8 L1853.33 1214.8 L1853.92 1214.8 L1854.5 1214.8 L1855.09 1214.8 L1855.68 1214.8 L1856.26 1214.8 L1856.85 1214.8 L1857.43 1214.8 L1858.02 1214.8 L1858.61 1214.8 L1859.19 1214.8 L1859.78 1214.8 L1860.37 1214.8 L1860.95 1214.8 L1861.54 1214.8 L1862.13 1214.8 L1862.71 1214.8 L1863.3 1214.8 L1863.88 1214.8 L1864.47 1214.8 L1865.06 1214.8 L1865.64 1214.8 L1866.23 1214.8 L1866.82 1214.8 L1867.4 1214.8 L1867.99 1214.8 L1868.58 1214.8 L1869.16 1214.8 L1869.75 1214.8 L1870.34 1214.8 L1870.92 1214.8 L1871.51 1214.8 L1872.09 1214.8 L1872.68 1214.8 L1873.27 1214.8 L1873.85 1214.8 L1874.44 1214.8 L1875.03 1214.8 L1875.61 1214.8 L1876.2 1214.8 L1876.79 1214.8 L1877.37 1214.8 L1877.96 1214.8 L1878.55 1214.8 L1879.13 1214.8 L1879.72 1214.8 L1880.3 1214.8 L1880.89 1214.8 L1881.48 1214.8 L1882.06 1214.8 L1882.65 1214.8 L1883.24 1214.8 L1883.82 1214.8 L1884.41 1214.8 L1885 1214.8 L1885.58 1214.8 L1886.17 1214.8 L1886.76 1214.8 L1887.34 1214.8 L1887.93 1214.8 L1888.51 1214.8 L1889.1 1214.8 L1889.69 1214.8 L1890.27 1214.8 L1890.86 1214.8 L1891.45 1214.8 L1892.03 1214.8 L1892.62 1214.8 L1893.21 1214.8 L1893.79 1214.8 L1894.38 1214.8 L1894.96 1214.8 L1895.55 1214.8 L1896.14 1214.8 L1896.72 1214.8 L1897.31 1214.8 L1897.9 1214.8 L1898.48 1214.8 L1899.07 1214.8 L1899.66 1214.8 L1900.24 1214.8 L1900.83 1214.8 L1901.42 1214.8 L1902 1214.8 L1902.59 1214.8 L1903.17 1214.8 L1903.76 1214.8 L1904.35 1214.8 L1904.93 1214.8 L1905.52 1214.8 L1906.11 1214.8 L1906.69 1214.8 L1907.28 1214.8 L1907.87 1214.8 L1908.45 1214.8 L1909.04 1214.8 L1909.63 1214.8 L1910.21 1214.8 L1910.8 1214.8 L1911.38 1214.8 L1911.97 1214.8 L1912.56 1214.8 L1913.14 1214.8 L1913.73 1214.8 L1914.32 1214.8 L1914.9 1214.8 L1915.49 1214.8 L1916.08 1214.8 L1916.66 1214.8 L1917.25 1214.8 L1917.83 1214.8 L1918.42 1214.8 L1919.01 1214.8 L1919.59 1214.8 L1920.18 1214.8 L1920.77 1214.8 L1921.35 1214.8 L1921.94 1214.8 L1922.53 1214.8 L1923.11 1214.8 L1923.7 1214.8 L1924.29 1214.8 L1924.87 1214.8 L1925.46 1214.8 L1926.04 1214.8 L1926.63 1214.8 L1927.22 1214.8 L1927.8 1214.8 L1928.39 1214.8 L1928.98 1214.8 L1929.56 1214.8 L1930.15 1214.8 L1930.74 1214.8 L1931.32 1214.8 L1931.91 1214.8 L1932.5 1214.8 L1933.08 1214.8 L1933.67 1214.8 L1934.25 1214.8 L1934.84 1214.8 L1935.43 1214.8 L1936.01 1214.8 L1936.6 1214.8 L1937.19 1214.8 L1937.77 1214.8 L1938.36 1214.8 L1938.95 1214.8 L1939.53 1214.8 L1940.12 1214.8 L1940.71 1214.8 L1941.29 1214.8 L1941.88 1214.8 L1942.46 1214.8 L1943.05 1214.8 L1943.64 1214.8 L1944.22 1214.8 L1944.81 1214.8 L1945.4 1214.8 L1945.98 1214.8 L1946.57 1214.8 L1947.16 1214.8 L1947.74 1214.8 L1948.33 1214.8 L1948.91 1214.8 L1949.5 1214.8 L1950.09 1214.8 L1950.67 1214.8 L1951.26 1214.8 L1951.85 1214.8 L1952.43 1214.8 L1953.02 1214.8 L1953.61 1214.8 L1954.19 1214.8 L1954.78 1214.8 L1955.37 1214.8 L1955.95 1214.8 L1956.54 1214.8 L1957.12 1214.8 L1957.71 1214.8 L1958.3 1214.8 L1958.88 1214.8 L1959.47 1214.8 L1960.06 1214.8 L1960.64 1214.8 L1961.23 1214.8 L1961.82 1214.8 L1962.4 1214.8 L1962.99 1214.8 L1963.58 1214.8 L1964.16 1214.8 L1964.75 1214.8 L1965.33 1214.8 L1965.92 1214.8 L1966.51 1214.8 L1967.09 1214.8 L1967.68 1214.8 L1968.27 1214.8 L1968.85 1214.8 L1969.44 1214.8 L1970.03 1214.8 L1970.61 1214.8 L1971.2 1214.8 L1971.78 1214.8 L1972.37 1214.8 L1972.96 1214.8 L1973.54 1214.8 L1974.13 1214.8 L1974.72 1214.8 L1975.3 1214.8 L1975.89 1214.8 L1976.48 1214.8 L1977.06 1214.8 L1977.65 1214.8 L1978.24 1214.8 L1978.82 1214.8 L1979.41 1214.8 L1979.99 1214.8 L1980.58 1214.8 L1981.17 1214.8 L1981.75 1214.8 L1982.34 1214.8 L1982.93 1214.8 L1983.51 1214.8 L1984.1 1214.8 L1984.69 1214.8 L1985.27 1214.8 L1985.86 1214.8 L1986.45 1214.8 L1987.03 1214.8 L1987.62 1214.8 L1988.2 1214.8 L1988.79 1214.8 L1989.38 1214.8 L1989.96 1214.8 L1990.55 1214.8 L1991.14 1214.8 L1991.72 1214.8 L1992.31 1214.8 L1992.9 1214.8 L1993.48 1214.8 L1994.07 1214.8 L1994.65 1214.8 L1995.24 1214.8 L1995.83 1214.8 L1996.41 1214.8 L1997 1214.8 L1997.59 1214.8 L1998.17 1214.8 L1998.76 1214.8 L1999.35 1214.8 L1999.93 1214.8 L2000.52 1214.8 L2001.11 1214.8 L2001.69 1214.8 L2002.28 1214.8 L2002.86 1214.8 L2003.45 1214.8 L2004.04 1214.8 L2004.62 1214.8 L2005.21 1214.8 L2005.8 1214.8 L2006.38 1214.8 L2006.97 1214.8 L2007.56 1214.8 L2008.14 1214.8 L2008.73 1214.8 L2009.32 1214.8 L2009.9 1214.8 L2010.49 1214.8 L2011.07 1214.8 L2011.66 1214.8 L2012.25 1214.8 L2012.83 1214.8 L2013.42 1214.8 L2014.01 1214.8 L2014.59 1214.8 L2015.18 1214.8 L2015.77 1214.8 L2016.35 1214.8 L2016.94 1214.8 L2017.53 1214.8 L2018.11 1214.8 L2018.7 1214.8 L2019.28 1214.8 L2019.87 1214.8 L2020.46 1214.8 L2021.04 1214.8 L2021.63 1214.8 L2022.22 1214.8 L2022.8 1214.8 L2023.39 1214.8 L2023.98 1214.8 L2024.56 1214.8 L2025.15 1214.8 L2025.73 1214.8 L2026.32 1214.8 L2026.91 1214.8 L2027.49 1214.8 L2028.08 1214.8 L2028.67 1214.8 L2029.25 1214.8 L2029.84 1214.8 L2030.43 1214.8 L2031.01 1214.8 L2031.6 1214.8 L2032.19 1214.8 L2032.77 1214.8 L2033.36 1214.8 L2033.94 1214.8 L2034.53 1214.8 L2035.12 1214.8 L2035.7 1214.8 L2036.29 1214.8 L2036.88 1214.8 L2037.46 1214.8 L2038.05 1214.8 L2038.64 1214.8 L2039.22 1214.8 L2039.81 1214.8 L2040.4 1214.8 L2040.98 1214.8 L2041.57 1214.8 L2042.15 1214.8 L2042.74 1214.8 L2043.33 1214.8 L2043.91 1214.8 L2044.5 1214.8 L2045.09 1214.8 L2045.67 1214.8 L2046.26 1214.8 L2046.85 1214.8 L2047.43 1214.8 L2048.02 1214.8 L2048.6 1214.8 L2049.19 1214.8 L2049.78 1214.8 L2050.36 1214.8 L2050.95 1214.8 L2051.54 1214.8 L2052.12 1214.8 L2052.71 1214.8 L2053.3 1214.8 L2053.88 1214.8 L2054.47 1214.8 L2055.06 1214.8 L2055.64 1214.8 L2056.23 1214.8 L2056.81 1214.8 L2057.4 1214.8 L2057.99 1214.8 L2058.57 1214.8 L2059.16 1214.8 L2059.75 1214.8 L2060.33 1214.8 L2060.92 1214.8 L2061.51 1214.8 L2062.09 1214.8 L2062.68 1214.8 L2063.27 1214.8 L2063.85 1214.8 L2064.44 1214.8 L2065.02 1214.8 L2065.61 1214.8 L2066.2 1214.8 L2066.78 1214.8 L2067.37 1214.8 L2067.96 1214.8 L2068.54 1214.8 L2069.13 1214.8 L2069.72 1214.8 L2070.3 1214.8 L2070.89 1214.8 L2071.48 1214.8 L2072.06 1214.8 L2072.65 1214.8 L2073.23 1214.8 L2073.82 1214.8 L2074.41 1214.8 L2074.99 1214.8 L2075.58 1214.8 L2076.17 1214.8 L2076.75 1214.8 L2077.34 1214.8 L2077.93 1214.8 L2078.51 1214.8 L2079.1 1214.8 L2079.68 1214.8 L2080.27 1214.8 L2080.86 1214.8 L2081.44 1214.8 L2082.03 1214.8 L2082.62 1214.8 L2083.2 1214.8 L2083.79 1214.8 L2084.38 1214.8 L2084.96 1214.8 L2085.55 1214.8 L2086.14 1214.8 L2086.72 1214.8 L2087.31 1214.8 L2087.89 1214.8 L2088.48 1214.8 L2089.07 1214.8 L2089.65 1214.8 L2090.24 1214.8 L2090.83 1214.8 L2091.41 1214.8 L2092 1214.8 L2092.59 1214.8 L2093.17 1214.8 L2093.76 1214.8 L2094.35 1214.8 L2094.93 1214.8 L2095.52 1214.8 L2096.1 1214.8 L2096.69 1214.8 L2097.28 1214.8 L2097.86 1214.8 L2098.45 1214.8 L2099.04 1214.8 L2099.62 1214.8 L2100.21 1214.8 L2100.8 1214.8 L2101.38 1214.8 L2101.97 1214.8 L2102.55 1214.8 L2103.14 1214.8 L2103.73 1214.8 L2104.31 1214.8 L2104.9 1214.8 L2105.49 1214.8 L2106.07 1214.8 L2106.66 1214.8 L2107.25 1214.8 L2107.83 1214.8 L2108.42 1214.8 L2109.01 1214.8 L2109.59 1214.8 L2110.18 1214.8 L2110.76 1214.8 L2111.35 1214.8 L2111.94 1214.8 L2112.52 1214.8 L2113.11 1214.8 L2113.7 1214.8 L2114.28 1214.8 L2114.87 1214.8 L2115.46 1214.8 L2116.04 1214.8 L2116.63 1214.8 L2117.22 1214.8 L2117.8 1214.8 L2118.39 1214.8 L2118.97 1214.8 L2119.56 1214.8 L2120.15 1214.8 L2120.73 1214.8 L2121.32 1214.8 L2121.91 1214.8 L2122.49 1214.8 L2123.08 1214.8 L2123.67 1214.8 L2124.25 1214.8 L2124.84 1214.8 L2125.42 1214.8 L2126.01 1214.8 L2126.6 1214.8 L2127.18 1214.8 L2127.77 1214.8 L2128.36 1214.8 L2128.94 1214.8 L2129.53 1214.8 L2130.12 1214.8 L2130.7 1214.8 L2131.29 1214.8 L2131.88 1214.8 L2132.46 1214.8 L2133.05 1214.8 L2133.63 1214.8 L2134.22 1214.8 L2134.81 1214.8 L2135.39 1214.8 L2135.98 1214.8 L2136.57 1214.8 L2137.15 1214.8 L2137.74 1214.8 L2138.33 1214.8 L2138.91 1214.8 L2139.5 1214.8 L2140.09 1214.8 L2140.67 1214.8 L2141.26 1214.8 L2141.84 1214.8 L2142.43 1214.8 L2143.02 1214.8 L2143.6 1214.8 L2144.19 1214.8 L2144.78 1214.8 L2145.36 1214.8 L2145.95 1214.8 L2146.54 1214.8 L2147.12 1214.8 L2147.71 1214.8 L2148.3 1214.8 L2148.88 1214.8 L2149.47 1214.8 L2150.05 1214.8 L2150.64 1214.8 L2151.23 1214.8 L2151.81 1214.8 L2152.4 1214.8 L2152.99 1214.8 L2153.57 1214.8 L2154.16 1214.8 L2154.75 1214.8 L2155.33 1214.8 L2155.92 1214.8 L2156.5 1214.8 L2157.09 1214.8 L2157.68 1214.8 L2158.26 1214.8 L2158.26 1213.92 L2157.68 1213.92 L2157.09 1213.92 L2156.5 1213.92 L2155.92 1213.92 L2155.33 1213.92 L2154.75 1213.92 L2154.16 1213.92 L2153.57 1213.92 L2152.99 1213.92 L2152.4 1213.92 L2151.81 1213.92 L2151.23 1213.92 L2150.64 1213.92 L2150.05 1213.92 L2149.47 1213.92 L2148.88 1213.92 L2148.3 1213.92 L2147.71 1213.92 L2147.12 1213.92 L2146.54 1213.92 L2145.95 1213.92 L2145.36 1213.92 L2144.78 1213.92 L2144.19 1213.92 L2143.6 1213.92 L2143.02 1213.92 L2142.43 1213.92 L2141.84 1213.92 L2141.26 1213.92 L2140.67 1213.92 L2140.09 1213.92 L2139.5 1213.92 L2138.91 1213.92 L2138.33 1213.92 L2137.74 1213.92 L2137.15 1213.92 L2136.57 1213.92 L2135.98 1213.92 L2135.39 1213.92 L2134.81 1213.92 L2134.22 1213.92 L2133.63 1213.92 L2133.05 1213.92 L2132.46 1213.92 L2131.88 1213.92 L2131.29 1213.92 L2130.7 1213.92 L2130.12 1213.92 L2129.53 1213.92 L2128.94 1213.92 L2128.36 1213.92 L2127.77 1213.92 L2127.18 1213.92 L2126.6 1213.92 L2126.01 1213.92 L2125.42 1213.92 L2124.84 1213.92 L2124.25 1213.92 L2123.67 1213.92 L2123.08 1213.92 L2122.49 1213.92 L2121.91 1213.92 L2121.32 1213.92 L2120.73 1213.92 L2120.15 1213.92 L2119.56 1213.92 L2118.97 1213.92 L2118.39 1213.92 L2117.8 1213.92 L2117.22 1213.92 L2116.63 1213.92 L2116.04 1213.92 L2115.46 1213.92 L2114.87 1213.92 L2114.28 1213.92 L2113.7 1213.92 L2113.11 1213.92 L2112.52 1213.92 L2111.94 1213.92 L2111.35 1213.92 L2110.76 1213.92 L2110.18 1213.92 L2109.59 1213.92 L2109.01 1213.92 L2108.42 1213.92 L2107.83 1213.92 L2107.25 1213.92 L2106.66 1213.92 L2106.07 1213.92 L2105.49 1213.92 L2104.9 1213.92 L2104.31 1213.92 L2103.73 1213.92 L2103.14 1213.92 L2102.55 1213.92 L2101.97 1213.92 L2101.38 1213.92 L2100.8 1213.92 L2100.21 1213.92 L2099.62 1213.92 L2099.04 1213.92 L2098.45 1213.92 L2097.86 1213.92 L2097.28 1213.92 L2096.69 1213.92 L2096.1 1213.92 L2095.52 1213.92 L2094.93 1213.92 L2094.35 1213.92 L2093.76 1213.92 L2093.17 1213.92 L2092.59 1213.92 L2092 1213.92 L2091.41 1213.92 L2090.83 1213.92 L2090.24 1213.92 L2089.65 1213.92 L2089.07 1213.92 L2088.48 1213.92 L2087.89 1213.92 L2087.31 1213.92 L2086.72 1213.92 L2086.14 1213.92 L2085.55 1213.92 L2084.96 1213.92 L2084.38 1213.92 L2083.79 1213.92 L2083.2 1213.92 L2082.62 1213.92 L2082.03 1213.92 L2081.44 1213.92 L2080.86 1213.92 L2080.27 1213.92 L2079.68 1213.92 L2079.1 1213.92 L2078.51 1213.92 L2077.93 1213.92 L2077.34 1213.92 L2076.75 1213.92 L2076.17 1213.92 L2075.58 1213.92 L2074.99 1213.92 L2074.41 1213.92 L2073.82 1213.92 L2073.23 1213.92 L2072.65 1213.92 L2072.06 1213.92 L2071.48 1213.92 L2070.89 1213.92 L2070.3 1213.92 L2069.72 1213.92 L2069.13 1213.92 L2068.54 1213.92 L2067.96 1213.92 L2067.37 1213.92 L2066.78 1213.92 L2066.2 1213.92 L2065.61 1213.92 L2065.02 1213.92 L2064.44 1213.92 L2063.85 1213.92 L2063.27 1213.92 L2062.68 1213.92 L2062.09 1213.92 L2061.51 1213.92 L2060.92 1213.92 L2060.33 1213.92 L2059.75 1213.92 L2059.16 1213.92 L2058.57 1213.92 L2057.99 1213.92 L2057.4 1213.92 L2056.81 1213.92 L2056.23 1213.92 L2055.64 1213.92 L2055.06 1213.92 L2054.47 1213.92 L2053.88 1213.92 L2053.3 1213.92 L2052.71 1213.92 L2052.12 1213.92 L2051.54 1213.92 L2050.95 1213.92 L2050.36 1213.92 L2049.78 1213.92 L2049.19 1213.92 L2048.6 1213.92 L2048.02 1213.92 L2047.43 1213.92 L2046.85 1213.92 L2046.26 1213.92 L2045.67 1213.92 L2045.09 1213.92 L2044.5 1213.92 L2043.91 1213.92 L2043.33 1213.92 L2042.74 1213.92 L2042.15 1213.92 L2041.57 1213.92 L2040.98 1213.92 L2040.4 1213.92 L2039.81 1213.92 L2039.22 1213.92 L2038.64 1213.92 L2038.05 1213.92 L2037.46 1213.92 L2036.88 1213.92 L2036.29 1213.92 L2035.7 1213.92 L2035.12 1213.92 L2034.53 1213.92 L2033.94 1213.92 L2033.36 1213.92 L2032.77 1213.92 L2032.19 1213.92 L2031.6 1213.92 L2031.01 1213.92 L2030.43 1213.92 L2029.84 1213.92 L2029.25 1213.92 L2028.67 1213.92 L2028.08 1213.92 L2027.49 1213.92 L2026.91 1213.92 L2026.32 1213.92 L2025.73 1213.92 L2025.15 1213.92 L2024.56 1213.92 L2023.98 1213.92 L2023.39 1213.92 L2022.8 1213.92 L2022.22 1213.92 L2021.63 1213.92 L2021.04 1213.92 L2020.46 1213.92 L2019.87 1213.92 L2019.28 1213.92 L2018.7 1213.92 L2018.11 1213.92 L2017.53 1213.92 L2016.94 1213.92 L2016.35 1213.92 L2015.77 1213.92 L2015.18 1213.92 L2014.59 1213.92 L2014.01 1213.92 L2013.42 1213.92 L2012.83 1213.92 L2012.25 1213.92 L2011.66 1213.92 L2011.07 1213.92 L2010.49 1213.92 L2009.9 1213.92 L2009.32 1213.92 L2008.73 1213.92 L2008.14 1213.92 L2007.56 1213.92 L2006.97 1213.92 L2006.38 1213.92 L2005.8 1213.92 L2005.21 1213.92 L2004.62 1213.92 L2004.04 1213.92 L2003.45 1213.92 L2002.86 1213.92 L2002.28 1213.92 L2001.69 1213.92 L2001.11 1213.92 L2000.52 1213.92 L1999.93 1213.92 L1999.35 1213.92 L1998.76 1213.92 L1998.17 1213.92 L1997.59 1213.92 L1997 1213.92 L1996.41 1213.92 L1995.83 1213.92 L1995.24 1213.92 L1994.65 1213.92 L1994.07 1213.92 L1993.48 1213.92 L1992.9 1213.92 L1992.31 1213.92 L1991.72 1213.92 L1991.14 1213.92 L1990.55 1213.92 L1989.96 1213.92 L1989.38 1213.92 L1988.79 1213.92 L1988.2 1213.92 L1987.62 1213.92 L1987.03 1213.92 L1986.45 1213.92 L1985.86 1213.92 L1985.27 1213.92 L1984.69 1213.92 L1984.1 1213.92 L1983.51 1213.92 L1982.93 1213.92 L1982.34 1213.92 L1981.75 1213.92 L1981.17 1213.92 L1980.58 1213.92 L1979.99 1213.92 L1979.41 1213.92 L1978.82 1213.92 L1978.24 1213.92 L1977.65 1213.92 L1977.06 1213.92 L1976.48 1213.92 L1975.89 1213.92 L1975.3 1213.92 L1974.72 1213.92 L1974.13 1213.92 L1973.54 1213.92 L1972.96 1213.92 L1972.37 1213.92 L1971.78 1213.92 L1971.2 1213.92 L1970.61 1213.92 L1970.03 1213.92 L1969.44 1213.92 L1968.85 1213.92 L1968.27 1213.92 L1967.68 1213.92 L1967.09 1213.92 L1966.51 1213.92 L1965.92 1213.92 L1965.33 1213.92 L1964.75 1213.92 L1964.16 1213.92 L1963.58 1213.92 L1962.99 1213.92 L1962.4 1213.92 L1961.82 1213.92 L1961.23 1213.92 L1960.64 1213.92 L1960.06 1213.92 L1959.47 1213.92 L1958.88 1213.92 L1958.3 1213.92 L1957.71 1213.92 L1957.12 1213.92 L1956.54 1213.92 L1955.95 1213.92 L1955.37 1213.92 L1954.78 1213.92 L1954.19 1213.92 L1953.61 1213.92 L1953.02 1213.92 L1952.43 1213.92 L1951.85 1213.92 L1951.26 1213.92 L1950.67 1213.92 L1950.09 1213.92 L1949.5 1213.92 L1948.91 1213.92 L1948.33 1213.92 L1947.74 1213.92 L1947.16 1213.92 L1946.57 1213.92 L1945.98 1213.92 L1945.4 1213.92 L1944.81 1213.92 L1944.22 1213.92 L1943.64 1213.92 L1943.05 1213.92 L1942.46 1213.92 L1941.88 1213.92 L1941.29 1213.92 L1940.71 1213.92 L1940.12 1213.92 L1939.53 1213.92 L1938.95 1213.92 L1938.36 1213.92 L1937.77 1213.92 L1937.19 1213.92 L1936.6 1213.92 L1936.01 1213.92 L1935.43 1213.92 L1934.84 1213.92 L1934.25 1213.92 L1933.67 1213.92 L1933.08 1213.92 L1932.5 1213.92 L1931.91 1213.92 L1931.32 1213.92 L1930.74 1213.92 L1930.15 1213.92 L1929.56 1213.92 L1928.98 1213.92 L1928.39 1213.92 L1927.8 1213.92 L1927.22 1213.92 L1926.63 1213.92 L1926.04 1213.92 L1925.46 1213.92 L1924.87 1213.92 L1924.29 1213.92 L1923.7 1213.92 L1923.11 1213.92 L1922.53 1213.92 L1921.94 1213.92 L1921.35 1213.92 L1920.77 1213.92 L1920.18 1213.92 L1919.59 1213.92 L1919.01 1213.92 L1918.42 1213.92 L1917.83 1213.92 L1917.25 1213.92 L1916.66 1213.92 L1916.08 1213.92 L1915.49 1213.92 L1914.9 1213.92 L1914.32 1213.92 L1913.73 1213.92 L1913.14 1213.92 L1912.56 1213.92 L1911.97 1213.92 L1911.38 1213.92 L1910.8 1213.92 L1910.21 1213.92 L1909.63 1213.92 L1909.04 1213.92 L1908.45 1213.92 L1907.87 1213.92 L1907.28 1213.92 L1906.69 1213.92 L1906.11 1213.92 L1905.52 1213.92 L1904.93 1213.92 L1904.35 1213.92 L1903.76 1213.92 L1903.17 1213.92 L1902.59 1213.92 L1902 1213.92 L1901.42 1213.92 L1900.83 1213.92 L1900.24 1213.92 L1899.66 1213.92 L1899.07 1213.92 L1898.48 1213.92 L1897.9 1213.92 L1897.31 1213.92 L1896.72 1213.92 L1896.14 1213.92 L1895.55 1213.92 L1894.96 1213.92 L1894.38 1213.92 L1893.79 1213.92 L1893.21 1213.92 L1892.62 1213.92 L1892.03 1213.92 L1891.45 1213.92 L1890.86 1213.92 L1890.27 1213.92 L1889.69 1213.92 L1889.1 1213.92 L1888.51 1213.92 L1887.93 1213.92 L1887.34 1213.92 L1886.76 1213.92 L1886.17 1213.92 L1885.58 1213.92 L1885 1213.92 L1884.41 1213.92 L1883.82 1213.92 L1883.24 1213.92 L1882.65 1213.92 L1882.06 1213.92 L1881.48 1213.92 L1880.89 1213.92 L1880.3 1213.92 L1879.72 1213.92 L1879.13 1213.92 L1878.55 1213.92 L1877.96 1213.92 L1877.37 1213.92 L1876.79 1213.92 L1876.2 1213.92 L1875.61 1213.92 L1875.03 1213.92 L1874.44 1213.92 L1873.85 1213.92 L1873.27 1213.92 L1872.68 1213.92 L1872.09 1213.92 L1871.51 1213.92 L1870.92 1213.92 L1870.34 1213.92 L1869.75 1213.92 L1869.16 1213.92 L1868.58 1213.92 L1867.99 1213.92 L1867.4 1213.92 L1866.82 1213.92 L1866.23 1213.92 L1865.64 1213.92 L1865.06 1213.92 L1864.47 1213.92 L1863.88 1213.92 L1863.3 1213.92 L1862.71 1213.92 L1862.13 1213.92 L1861.54 1213.92 L1860.95 1213.92 L1860.37 1213.92 L1859.78 1213.92 L1859.19 1213.92 L1858.61 1213.92 L1858.02 1213.92 L1857.43 1213.92 L1856.85 1213.92 L1856.26 1213.92 L1855.68 1213.92 L1855.09 1213.92 L1854.5 1213.92 L1853.92 1213.92 L1853.33 1213.92 L1852.74 1213.92 L1852.16 1213.92 L1851.57 1213.92 L1850.98 1213.92 L1850.4 1213.92 L1849.81 1213.92 L1849.22 1213.92 L1848.64 1213.92 L1848.05 1213.92 L1847.47 1213.92 L1846.88 1213.92 L1846.29 1213.92 L1845.71 1213.92 L1845.12 1213.92 L1844.53 1213.92 L1843.95 1213.92 L1843.36 1213.92 L1842.77 1213.92 L1842.19 1213.92 L1841.6 1213.92 L1841.01 1213.92 L1840.43 1213.92 L1839.84 1213.92 L1839.26 1213.92 L1838.67 1213.92 L1838.08 1213.92 L1837.5 1213.92 L1836.91 1213.92 L1836.32 1213.92 L1835.74 1213.92 L1835.15 1213.92 L1834.56 1213.92 L1833.98 1213.92 L1833.39 1213.92 L1832.81 1213.92 L1832.22 1213.92 L1831.63 1213.92 L1831.05 1213.92 L1830.46 1213.92 L1829.87 1213.92 L1829.29 1213.92 L1828.7 1213.92 L1828.11 1213.92 L1827.53 1213.92 L1826.94 1213.92 L1826.35 1213.92 L1825.77 1213.92 L1825.18 1213.92 L1824.6 1213.92 L1824.01 1213.92 L1823.42 1213.92 L1822.84 1213.92 L1822.25 1213.92 L1821.66 1213.92 L1821.08 1213.92 L1820.49 1213.92 L1819.9 1213.92 L1819.32 1213.92 L1818.73 1213.92 L1818.14 1213.92 L1817.56 1213.92 L1816.97 1213.92 L1816.39 1213.92 L1815.8 1213.92 L1815.21 1213.92 L1814.63 1213.92 L1814.04 1213.92 L1813.45 1213.92 L1812.87 1213.92 L1812.28 1213.92 L1811.69 1213.92 L1811.11 1213.92 L1810.52 1213.92 L1809.94 1213.92 L1809.35 1213.92 L1808.76 1213.92 L1808.18 1213.92 L1807.59 1213.92 L1807 1213.92 L1806.42 1213.92 L1805.83 1213.92 L1805.24 1213.92 L1804.66 1213.92 L1804.07 1213.92 L1803.48 1213.92 L1802.9 1213.92 L1802.31 1213.92 L1801.73 1213.92 L1801.14 1213.92 L1800.55 1213.92 L1799.97 1213.92 L1799.38 1213.92 L1798.79 1213.92 L1798.21 1213.92 L1797.62 1213.92 L1797.03 1213.92 L1796.45 1213.92 L1795.86 1213.92 L1795.27 1213.92 L1794.69 1213.92 L1794.1 1213.92 L1793.52 1213.92 L1792.93 1213.92 L1792.34 1213.92 L1791.76 1213.92 L1791.17 1213.92 L1790.58 1213.92 L1790 1213.92 L1789.41 1213.92 L1788.82 1213.92 L1788.24 1213.92 L1787.65 1213.92 L1787.06 1213.92 L1786.48 1213.92 L1785.89 1213.92 L1785.31 1213.92 L1784.72 1213.92 L1784.13 1213.92 L1783.55 1213.92 L1782.96 1213.92 L1782.37 1213.92 L1781.79 1213.92 L1781.2 1213.92 L1780.61 1213.92 L1780.03 1213.92 L1779.44 1213.92 L1778.86 1213.92 L1778.27 1213.92 L1777.68 1213.92 L1777.1 1213.92 L1776.51 1213.92 L1775.92 1213.92 L1775.34 1213.92 L1774.75 1213.92 L1774.16 1213.92 L1773.58 1213.92 L1772.99 1213.92 L1772.4 1213.92 L1771.82 1213.92 L1771.23 1213.92 L1770.65 1213.92 L1770.06 1213.92 L1769.47 1213.92 L1768.89 1213.92 L1768.3 1213.92 L1767.71 1213.92 L1767.13 1213.92 L1766.54 1213.92 L1765.95 1213.92 L1765.37 1213.92 L1764.78 1213.92 L1764.19 1213.92 L1763.61 1213.92 L1763.02 1213.92 L1762.44 1213.92 L1761.85 1213.92 L1761.26 1213.92 L1760.68 1213.92 L1760.09 1213.92 L1759.5 1213.92 L1758.92 1213.92 L1758.33 1213.92 L1757.74 1213.92 L1757.16 1213.92 L1756.57 1213.92 L1755.99 1213.92 L1755.4 1213.92 L1754.81 1213.92 L1754.23 1213.92 L1753.64 1213.92 L1753.05 1213.92 L1752.47 1213.92 L1751.88 1213.92 L1751.29 1213.92 L1750.71 1213.92 L1750.12 1213.92 L1749.53 1213.92 L1748.95 1213.92 L1748.36 1213.92 L1747.78 1213.92 L1747.19 1213.92 L1746.6 1213.92 L1746.02 1213.92 L1745.43 1213.92 L1744.84 1213.92 L1744.26 1213.92 L1743.67 1213.92 L1743.08 1213.92 L1742.5 1213.92 L1741.91 1213.92 L1741.32 1213.92 L1740.74 1213.92 L1740.15 1213.92 L1739.57 1213.92 L1738.98 1213.92 L1738.39 1213.92 L1737.81 1213.92 L1737.22 1213.92 L1736.63 1213.92 L1736.05 1213.92 L1735.46 1213.92 L1734.87 1213.92 L1734.29 1213.92 L1733.7 1213.92 L1733.11 1213.92 L1732.53 1213.92 L1731.94 1213.92 L1731.36 1213.92 L1730.77 1213.92 L1730.18 1213.92 L1729.6 1213.92 L1729.01 1213.92 L1728.42 1213.92 L1727.84 1213.92 L1727.25 1213.92 L1726.66 1213.92 L1726.08 1213.92 L1725.49 1213.92 L1724.91 1213.92 L1724.32 1213.92 L1723.73 1213.92 L1723.15 1213.92 L1722.56 1213.92 L1721.97 1213.92 L1721.39 1213.92 L1720.8 1213.92 L1720.21 1213.92 L1719.63 1213.92 L1719.04 1213.92 L1718.45 1213.92 L1717.87 1213.92 L1717.28 1213.92 L1716.7 1213.92 L1716.11 1213.92 L1715.52 1213.92 L1714.94 1213.92 L1714.35 1213.92 L1713.76 1213.92 L1713.18 1213.92 L1712.59 1213.92 L1712 1213.92 L1711.42 1213.92 L1710.83 1213.92 L1710.24 1213.92 L1709.66 1213.92 L1709.07 1213.92 L1708.49 1213.92 L1707.9 1213.92 L1707.31 1213.92 L1706.73 1213.92 L1706.14 1213.92 L1705.55 1213.92 L1704.97 1213.92 L1704.38 1213.92 L1703.79 1213.92 L1703.21 1213.92 L1702.62 1213.92 L1702.04 1213.92 L1701.45 1213.92 L1700.86 1213.92 L1700.28 1213.92 L1699.69 1213.92 L1699.1 1213.92 L1698.52 1213.92 L1697.93 1213.92 L1697.34 1213.92 L1696.76 1213.92 L1696.17 1213.92 L1695.58 1213.92 L1695 1213.92 L1694.41 1213.92 L1693.83 1213.92 L1693.24 1213.92 L1692.65 1213.92 L1692.07 1213.92 L1691.48 1213.92 L1690.89 1213.92 L1690.31 1213.92 L1689.72 1213.92 L1689.13 1213.92 L1688.55 1213.92 L1687.96 1213.92 L1687.37 1213.92 L1686.79 1213.92 L1686.2 1213.92 L1685.62 1213.92 L1685.03 1213.92 L1684.44 1213.92 L1683.86 1213.92 L1683.27 1213.92 L1682.68 1213.92 L1682.1 1213.92 L1681.51 1213.92 L1680.92 1213.92 L1680.34 1213.92 L1679.75 1213.92 L1679.17 1213.92 L1678.58 1213.92 L1677.99 1213.92 L1677.41 1213.92 L1676.82 1213.92 L1676.23 1213.92 L1675.65 1213.92 L1675.06 1213.92 L1674.47 1213.92 L1673.89 1213.92 L1673.3 1213.92 L1672.71 1213.92 L1672.13 1213.92 L1671.54 1213.92 L1670.96 1213.92 L1670.37 1213.92 L1669.78 1213.92 L1669.2 1213.92 L1668.61 1213.92 L1668.02 1213.92 L1667.44 1213.92 L1666.85 1213.92 L1666.26 1213.92 L1665.68 1213.92 L1665.09 1213.92 L1664.5 1213.92 L1663.92 1213.92 L1663.33 1213.92 L1662.75 1213.92 L1662.16 1213.92 L1661.57 1213.92 L1660.99 1213.92 L1660.4 1213.92 L1659.81 1213.92 L1659.23 1213.92 L1658.64 1213.92 L1658.05 1213.92 L1657.47 1213.92 L1656.88 1213.92 L1656.29 1213.92 L1655.71 1213.92 L1655.12 1213.92 L1654.54 1213.92 L1653.95 1213.92 L1653.36 1213.92 L1652.78 1213.92 L1652.19 1213.92 L1651.6 1213.92 L1651.02 1213.92 L1650.43 1213.92 L1649.84 1213.92 L1649.26 1213.92 L1648.67 1213.92 L1648.09 1213.92 L1647.5 1213.92 L1646.91 1213.92 L1646.33 1213.92 L1645.74 1213.92 L1645.15 1213.92 L1644.57 1213.92 L1643.98 1213.92 L1643.39 1213.92 L1642.81 1213.92 L1642.22 1213.92 L1641.63 1213.92 L1641.05 1213.92 L1640.46 1213.92 L1639.88 1213.92 L1639.29 1213.92 L1638.7 1213.92 L1638.12 1213.92 L1637.53 1213.92 L1636.94 1213.92 L1636.36 1213.92 L1635.77 1213.92 L1635.18 1213.92 L1634.6 1213.92 L1634.01 1213.92 L1633.42 1213.92 L1632.84 1213.92 L1632.25 1213.92 L1631.67 1213.92 L1631.08 1213.92 L1630.49 1213.92 L1629.91 1213.92 L1629.32 1213.92 L1628.73 1213.92 L1628.15 1213.92 L1627.56 1213.92 L1626.97 1213.92 L1626.39 1213.92 L1625.8 1213.92 L1625.22 1213.92 L1624.63 1213.92 L1624.04 1213.92 L1623.46 1213.92 L1622.87 1213.92 L1622.28 1213.92 L1621.7 1213.92 L1621.11 1213.92 L1620.52 1213.92 L1619.94 1213.92 L1619.35 1213.92 L1618.76 1213.92 L1618.18 1213.92 L1617.59 1213.92 L1617.01 1213.92 L1616.42 1213.92 L1615.83 1213.92 L1615.25 1213.92 L1614.66 1213.92 L1614.07 1213.92 L1613.49 1213.92 L1612.9 1213.92 L1612.31 1213.92 L1611.73 1213.92 L1611.14 1213.92 L1610.55 1213.92 L1609.97 1213.92 L1609.38 1213.92 L1608.8 1213.92 L1608.21 1213.92 L1607.62 1213.92 L1607.04 1213.92 L1606.45 1213.92 L1605.86 1213.92 L1605.28 1213.92 L1604.69 1213.92 L1604.1 1213.92 L1603.52 1213.92 L1602.93 1213.92 L1602.34 1213.92 L1601.76 1213.92 L1601.17 1213.92 L1600.59 1213.92 L1600 1213.92 L1599.41 1213.92 L1598.83 1213.92 L1598.24 1213.92 L1597.65 1213.92 L1597.07 1213.92 L1596.48 1213.92 L1595.89 1213.92 L1595.31 1213.92 L1594.72 1213.92 L1594.14 1213.92 L1593.55 1213.92 L1592.96 1213.92 L1592.38 1213.92 L1591.79 1213.92 L1591.2 1213.92 L1590.62 1213.92 L1590.03 1213.92 L1589.44 1213.92 L1588.86 1213.92 L1588.27 1213.92 L1587.68 1213.92 L1587.1 1213.92 L1586.51 1213.92 L1585.93 1213.92 L1585.34 1213.92 L1584.75 1213.92 L1584.17 1213.92 L1583.58 1213.92 L1582.99 1213.92 L1582.41 1213.92 L1581.82 1213.92 L1581.23 1213.92 L1580.65 1213.92 L1580.06 1213.92 L1579.47 1213.92 L1578.89 1213.92 L1578.3 1213.92 L1577.72 1213.92 L1577.13 1213.92 L1576.54 1213.92 L1575.96 1213.92 L1575.37 1213.92 L1574.78 1213.92 L1574.2 1213.92 L1573.61 1213.92 L1573.02 1213.92 L1572.44 1213.92 L1571.85 1213.92 L1571.27 1213.92 L1570.68 1213.92 L1570.09 1213.92 L1569.51 1213.92 L1568.92 1213.92 L1568.33 1213.92 L1567.75 1213.92 L1567.16 1213.92 L1566.57 1213.92 L1565.99 1213.92 L1565.4 1213.92 L1564.81 1213.92 L1564.23 1213.92 L1563.64 1213.92 L1563.06 1213.92 L1562.47 1213.92 L1561.88 1213.92 L1561.3 1213.92 L1560.71 1213.92 L1560.12 1213.92 L1559.54 1213.92 L1558.95 1213.92 L1558.36 1213.92 L1557.78 1213.92 L1557.19 1213.92 L1556.6 1213.92 L1556.02 1213.92 L1555.43 1213.92 L1554.85 1213.92 L1554.26 1213.92 L1553.67 1213.92 L1553.09 1213.92 L1552.5 1213.92 L1551.91 1213.92 L1551.33 1213.92 L1550.74 1213.92 L1550.15 1213.92 L1549.57 1213.92 L1548.98 1213.92 L1548.4 1213.92 L1547.81 1213.92 L1547.22 1213.92 L1546.64 1213.92 L1546.05 1213.92 L1545.46 1213.92 L1544.88 1213.92 L1544.29 1213.92 L1543.7 1213.92 L1543.12 1213.92 L1542.53 1213.92 L1541.94 1213.92 L1541.36 1213.92 L1540.77 1213.92 L1540.19 1213.92 L1539.6 1213.92 L1539.01 1213.92 L1538.43 1213.92 L1537.84 1213.92 L1537.25 1213.92 L1536.67 1213.92 L1536.08 1213.92 L1535.49 1213.92 L1534.91 1213.92 L1534.32 1213.92 L1533.73 1213.92 L1533.15 1213.92 L1532.56 1213.92 L1531.98 1213.92 L1531.39 1213.92 L1530.8 1213.92 L1530.22 1213.92 L1529.63 1213.92 L1529.04 1213.92 L1528.46 1213.92 L1527.87 1213.92 L1527.28 1213.92 L1526.7 1213.92 L1526.11 1213.92 L1525.52 1213.92 L1524.94 1213.92 L1524.35 1213.92 L1523.77 1213.92 L1523.18 1213.92 L1522.59 1213.92 L1522.01 1213.92 L1521.42 1213.92 L1520.83 1213.92 L1520.25 1213.92 L1519.66 1213.92 L1519.07 1213.92 L1518.49 1213.92 L1517.9 1213.92 L1517.32 1213.92 L1516.73 1213.92 L1516.14 1213.92 L1515.56 1213.92 L1514.97 1213.92 L1514.38 1213.92 L1513.8 1213.92 L1513.21 1213.92 L1512.62 1213.92 L1512.04 1213.92 L1511.45 1213.92 L1510.86 1213.92 L1510.28 1213.92 L1509.69 1213.92 L1509.11 1213.92 L1508.52 1213.92 L1507.93 1213.92 L1507.35 1213.92 L1506.76 1213.92 L1506.17 1213.92 L1505.59 1213.92 L1505 1213.92 L1504.41 1213.92 L1503.83 1213.92 L1503.24 1213.92 L1502.65 1213.92 L1502.07 1213.92 L1501.48 1213.92 L1500.9 1213.92 L1500.31 1213.92 L1499.72 1213.92 L1499.14 1213.92 L1498.55 1213.92 L1497.96 1213.92 L1497.38 1213.92 L1496.79 1213.92 L1496.2 1213.92 L1495.62 1213.92 L1495.03 1213.92 L1494.45 1213.92 L1493.86 1213.92 L1493.27 1213.92 L1492.69 1213.92 L1492.1 1213.92 L1491.51 1213.92 L1490.93 1213.92 L1490.34 1213.92 L1489.75 1213.92 L1489.17 1213.92 L1488.58 1213.92 L1487.99 1213.92 L1487.41 1213.92 L1486.82 1213.92 L1486.24 1213.92 L1485.65 1213.92 L1485.06 1213.92 L1484.48 1213.92 L1483.89 1213.92 L1483.3 1213.92 L1482.72 1213.92 L1482.13 1213.92 L1481.54 1213.92 L1480.96 1213.92 L1480.37 1213.92 L1479.78 1213.92 L1479.2 1213.92 L1478.61 1213.92 L1478.03 1213.92 L1477.44 1213.92 L1476.85 1213.92 L1476.27 1213.92 L1475.68 1213.92 L1475.09 1213.92 L1474.51 1213.92 L1473.92 1213.92 L1473.33 1213.92 L1472.75 1213.92 L1472.16 1213.92 L1471.57 1213.92 L1470.99 1213.92 L1470.4 1213.92 L1469.82 1213.92 L1469.23 1213.92 L1468.64 1213.92 L1468.06 1213.92 L1467.47 1213.92 L1466.88 1213.92 L1466.3 1213.92 L1465.71 1213.92 L1465.12 1213.92 L1464.54 1213.92 L1463.95 1213.92 L1463.37 1213.92 L1462.78 1213.92 L1462.19 1213.92 L1461.61 1213.92 L1461.02 1213.92 L1460.43 1213.92 L1459.85 1213.92 L1459.26 1213.92 L1458.67 1213.92 L1458.09 1213.92 L1457.5 1213.92 L1456.91 1213.92 L1456.33 1213.92 L1455.74 1213.92 L1455.16 1213.92 L1454.57 1213.92 L1453.98 1213.92 L1453.4 1213.92 L1452.81 1213.92 L1452.22 1213.92 L1451.64 1213.92 L1451.05 1213.92 L1450.46 1213.92 L1449.88 1213.92 L1449.29 1213.92 L1448.7 1213.92 L1448.12 1213.92 L1447.53 1213.92 L1446.95 1213.92 L1446.36 1213.92 L1445.77 1213.92 L1445.19 1213.92 L1444.6 1213.92 L1444.01 1213.92 L1443.43 1213.92 L1442.84 1213.92 L1442.25 1213.92 L1441.67 1213.92 L1441.08 1213.92 L1440.5 1213.92 L1439.91 1213.92 L1439.32 1213.92 L1438.74 1213.92 L1438.15 1213.92 L1437.56 1213.92 L1436.98 1213.92 L1436.39 1213.92 L1435.8 1213.92 L1435.22 1213.92 L1434.63 1213.92 L1434.04 1213.92 L1433.46 1213.92 L1432.87 1213.92 L1432.29 1213.92 L1431.7 1213.92 L1431.11 1213.92 L1430.53 1213.92 L1429.94 1213.92 L1429.35 1213.92 L1428.77 1213.92 L1428.18 1213.92 L1427.59 1213.92 L1427.01 1213.92 L1426.42 1213.92 L1425.83 1213.92 L1425.25 1213.92 L1424.66 1213.92 L1424.08 1213.92 L1423.49 1213.92 L1422.9 1213.92 L1422.32 1213.92 L1421.73 1213.92 L1421.14 1213.92 L1420.56 1213.92 L1419.97 1213.92 L1419.38 1213.92 L1418.8 1213.92 L1418.21 1213.92 L1417.63 1213.92 L1417.04 1213.92 L1416.45 1213.92 L1415.87 1213.92 L1415.28 1213.92 L1414.69 1213.92 L1414.11 1213.92 L1413.52 1213.92 L1412.93 1213.92 L1412.35 1213.92 L1411.76 1213.92 L1411.17 1213.92 L1410.59 1213.92 L1410 1213.92 L1409.42 1213.92 L1408.83 1213.92 L1408.24 1213.92 L1407.66 1213.92 L1407.07 1213.92 L1406.48 1213.92 L1405.9 1213.92 L1405.31 1213.92 L1404.72 1213.92 L1404.14 1213.92 L1403.55 1213.92 L1402.96 1213.92 L1402.38 1213.92 L1401.79 1213.92 L1401.21 1213.92 L1400.62 1213.92 L1400.03 1213.92 L1399.45 1213.92 L1398.86 1213.92 L1398.27 1213.92 L1397.69 1213.92 L1397.1 1213.92 L1396.51 1213.92 L1395.93 1213.92 L1395.34 1213.92 L1394.75 1213.92 L1394.17 1213.92 L1393.58 1213.92 L1393 1213.92 L1392.41 1213.92 L1391.82 1213.92 L1391.24 1213.92 L1390.65 1213.92 L1390.06 1213.92 L1389.48 1213.92 L1388.89 1213.92 L1388.3 1213.92 L1387.72 1213.92 L1387.13 1213.92 L1386.55 1213.92 L1385.96 1213.92 L1385.37 1213.92 L1384.79 1213.92 L1384.2 1213.92 L1383.61 1213.92 L1383.03 1213.92 L1382.44 1213.92 L1381.85 1213.92 L1381.27 1213.92 L1380.68 1213.92 L1380.09 1213.92 L1379.51 1213.92 L1378.92 1213.92 L1378.34 1213.92 L1377.75 1213.92 L1377.16 1213.92 L1376.58 1213.92 L1375.99 1213.92 L1375.4 1213.92 L1374.82 1213.92 L1374.23 1213.92 L1373.64 1213.92 L1373.06 1213.92 L1372.47 1213.92 L1371.88 1213.92 L1371.3 1213.92 L1370.71 1213.92 L1370.13 1213.92 L1369.54 1213.92 L1368.95 1213.92 L1368.37 1213.92 L1367.78 1213.92 L1367.19 1213.92 L1366.61 1213.92 L1366.02 1213.92 L1365.43 1213.92 L1364.85 1213.92 L1364.26 1213.92 L1363.68 1213.92 L1363.09 1213.92 L1362.5 1213.92 L1361.92 1213.92 L1361.33 1213.92 L1360.74 1213.92 L1360.16 1213.92 L1359.57 1213.92 L1358.98 1213.92 L1358.4 1213.92 L1357.81 1213.92 L1357.22 1213.92 L1356.64 1213.92 L1356.05 1213.92 L1355.47 1213.92 L1354.88 1213.92 L1354.29 1213.92 L1353.71 1213.92 L1353.12 1213.92 L1352.53 1213.92 L1351.95 1213.92 L1351.36 1213.92 L1350.77 1213.92 L1350.19 1213.92 L1349.6 1213.92 L1349.01 1213.92 L1348.43 1213.92 L1347.84 1213.92 L1347.26 1213.92 L1346.67 1213.92 L1346.08 1213.92 L1345.5 1213.92 L1344.91 1213.92 L1344.32 1213.92 L1343.74 1213.92 L1343.15 1213.92 L1342.56 1213.92 L1341.98 1213.92 L1341.39 1213.92 L1340.8 1213.92 L1340.22 1213.92 L1339.63 1213.92 L1339.05 1213.92 L1338.46 1213.92 L1337.87 1213.92 L1337.29 1213.92 L1336.7 1213.92 L1336.11 1213.92 L1335.53 1213.92 L1334.94 1213.92 L1334.35 1213.92 L1333.77 1213.92 L1333.18 1213.92 L1332.6 1213.92 L1332.01 1213.92 L1331.42 1213.92 L1330.84 1213.92 L1330.25 1213.92 L1329.66 1213.92 L1329.08 1213.92 L1328.49 1213.92 L1327.9 1213.92 L1327.32 1213.92 L1326.73 1213.92 L1326.14 1213.92 L1325.56 1213.92 L1324.97 1213.92 L1324.39 1213.92 L1323.8 1213.92 L1323.21 1213.92 L1322.63 1213.92 L1322.04 1213.92 L1321.45 1213.92 L1320.87 1213.92 L1320.28 1213.92 L1319.69 1213.92 L1319.11 1213.92 L1318.52 1213.92 L1317.93 1213.92 L1317.35 1213.92 L1316.76 1213.92 L1316.18 1213.92 L1315.59 1213.92 L1315 1213.92 L1314.42 1213.92 L1313.83 1213.92 L1313.24 1213.92 L1312.66 1213.92 L1312.07 1213.92 L1311.48 1213.92 L1310.9 1213.92 L1310.31 1213.92 L1309.73 1213.92 L1309.14 1213.92 L1308.55 1213.92 L1307.97 1213.92 L1307.38 1213.92 L1306.79 1213.92 L1306.21 1213.92 L1305.62 1213.92 L1305.03 1213.92 L1304.45 1213.92 L1303.86 1213.92 L1303.27 1213.92 L1302.69 1213.92 L1302.1 1213.92 L1301.52 1213.92 L1300.93 1213.92 L1300.34 1213.92 L1299.76 1213.92 L1299.17 1213.92 L1298.58 1213.92 L1298 1213.92 L1297.41 1213.92 L1296.82 1213.92 L1296.24 1213.92 L1295.65 1213.92 L1295.06 1213.92 L1294.48 1213.92 L1293.89 1213.92 L1293.31 1213.92 L1292.72 1213.92 L1292.13 1213.92 L1291.55 1213.92 L1290.96 1213.92 L1290.37 1213.92 L1289.79 1213.92 L1289.2 1213.92 L1288.61 1213.92 L1288.03 1213.92 L1287.44 1213.92 L1286.86 1213.92 L1286.27 1213.92 L1285.68 1213.92 L1285.1 1213.92 L1284.51 1213.92 L1283.92 1213.92 L1283.34 1213.92 L1282.75 1213.92 L1282.16 1213.92 L1281.58 1213.92 L1280.99 1213.92 L1280.4 1213.92 L1279.82 1213.92 L1279.23 1213.92 L1278.65 1213.92 L1278.06 1213.92 L1277.47 1213.92 L1276.89 1213.92 L1276.3 1213.92 L1275.71 1213.92 L1275.13 1213.92 L1274.54 1213.92 L1273.95 1213.92 L1273.37 1213.92 L1272.78 1213.92 L1272.19 1213.92 L1271.61 1213.92 L1271.02 1213.92 L1270.44 1213.92 L1269.85 1213.92 L1269.26 1213.92 L1268.68 1213.92 L1268.09 1213.92 L1267.5 1213.92 L1266.92 1213.92 L1266.33 1213.92 L1265.74 1213.92 L1265.16 1213.92 L1264.57 1213.92 L1263.98 1213.92 L1263.4 1213.92 L1262.81 1213.92 L1262.23 1213.92 L1261.64 1213.92 L1261.05 1213.92 L1260.47 1213.92 L1259.88 1213.92 L1259.29 1213.92 L1258.71 1213.92 L1258.12 1213.92 L1257.53 1213.92 L1256.95 1213.92 L1256.36 1213.92 L1255.78 1213.92 L1255.19 1213.92 L1254.6 1213.92 L1254.02 1213.92 L1253.43 1213.92 L1252.84 1213.92 L1252.26 1213.92 L1251.67 1213.92 L1251.08 1213.92 L1250.5 1213.92 L1249.91 1213.92 L1249.32 1213.92 L1248.74 1213.92 L1248.15 1213.92 L1247.57 1213.92 L1246.98 1213.92 L1246.39 1213.92 L1245.81 1213.92 L1245.22 1213.92 L1244.63 1213.92 L1244.05 1213.92 L1243.46 1213.92 L1242.87 1213.92 L1242.29 1213.92 L1241.7 1213.92 L1241.11 1213.92 L1240.53 1213.92 L1239.94 1213.92 L1239.36 1213.92 L1238.77 1213.92 L1238.18 1213.92 L1237.6 1213.92 L1237.01 1213.92 L1236.42 1213.92 L1235.84 1213.92 L1235.25 1213.92 L1234.66 1213.92 L1234.08 1213.92 L1233.49 1213.92 L1232.91 1213.92 L1232.32 1213.92 L1231.73 1213.92 L1231.15 1213.92 L1230.56 1213.92 L1229.97 1213.92 L1229.39 1213.92 L1228.8 1213.92 L1228.21 1213.92 L1227.63 1213.92 L1227.04 1213.92 L1226.45 1213.92 L1225.87 1213.92 L1225.28 1213.92 L1224.7 1213.92 L1224.11 1213.92 L1223.52 1213.92 L1222.94 1213.92 L1222.35 1213.92 L1221.76 1213.92 L1221.18 1213.92 L1220.59 1213.92 L1220 1213.92 L1219.42 1213.92 L1218.83 1213.92 L1218.24 1213.92 L1217.66 1213.92 L1217.07 1213.92 L1216.49 1213.92 L1215.9 1213.92 L1215.31 1213.92 L1214.73 1213.92 L1214.14 1213.92 L1213.55 1213.92 L1212.97 1213.92 L1212.38 1213.92 L1211.79 1213.92 L1211.21 1213.92 L1210.62 1213.92 L1210.03 1213.92 L1209.45 1213.92 L1208.86 1213.92 L1208.28 1213.92 L1207.69 1213.92 L1207.1 1213.92 L1206.52 1213.92 L1205.93 1213.92 L1205.34 1213.92 L1204.76 1213.92 L1204.17 1213.92 L1203.58 1213.92 L1203 1213.92 L1202.41 1213.92 L1201.83 1213.92 L1201.24 1213.92 L1200.65 1213.92 L1200.07 1213.92 L1199.48 1213.92 L1198.89 1213.92 L1198.31 1213.92 L1197.72 1213.92 L1197.13 1213.92 L1196.55 1213.92 L1195.96 1213.92 L1195.37 1213.92 L1194.79 1213.92 L1194.2 1213.92 L1193.62 1213.92 L1193.03 1213.92 L1192.44 1213.92 L1191.86 1213.92 L1191.27 1213.92 L1190.68 1213.92 L1190.1 1213.92 L1189.51 1213.92 L1188.92 1213.92 L1188.34 1213.92 L1187.75 1213.92 L1187.16 1213.92 L1186.58 1213.92 L1185.99 1213.92 L1185.41 1213.92 L1184.82 1213.92 L1184.23 1213.92 L1183.65 1213.92 L1183.06 1213.92 L1182.47 1213.92 L1181.89 1213.92 L1181.3 1213.92 L1180.71 1213.92 L1180.13 1213.92 L1179.54 1213.92 L1178.96 1213.92 L1178.37 1213.92 L1177.78 1213.92 L1177.2 1213.92 L1176.61 1213.92 L1176.02 1213.92 L1175.44 1213.92 L1174.85 1213.92 L1174.26 1213.92 L1173.68 1213.92 L1173.09 1213.92 L1172.5 1213.92 L1171.92 1213.92 L1171.33 1213.92 L1170.75 1213.92 L1170.16 1213.92 L1169.57 1213.92 L1168.99 1213.92 L1168.4 1213.92 L1167.81 1213.92 L1167.23 1213.92 L1166.64 1213.92 L1166.05 1213.92 L1165.47 1213.92 L1164.88 1213.92 L1164.29 1213.92 L1163.71 1213.92 L1163.12 1213.92 L1162.54 1213.92 L1161.95 1213.92 L1161.36 1213.92 L1160.78 1213.92 L1160.19 1213.92 L1159.6 1213.92 L1159.02 1213.92 L1158.43 1213.92 L1157.84 1213.92 L1157.26 1213.92 L1156.67 1213.92 L1156.09 1213.92 L1155.5 1213.92 L1154.91 1213.92 L1154.33 1213.92 L1153.74 1213.92 L1153.15 1213.92 L1152.57 1213.92 L1151.98 1213.92 L1151.39 1213.92 L1150.81 1213.92 L1150.22 1213.92 L1149.63 1213.92 L1149.05 1213.92 L1148.46 1213.92 L1147.88 1213.92 L1147.29 1213.92 L1146.7 1213.92 L1146.12 1213.92 L1145.53 1213.92 L1144.94 1213.92 L1144.36 1213.92 L1143.77 1213.92 L1143.18 1213.92 L1142.6 1213.92 L1142.01 1213.92 L1141.42 1213.92 L1140.84 1213.92 L1140.25 1213.92 L1139.67 1213.92 L1139.08 1213.92 L1138.49 1213.92 L1137.91 1213.92 L1137.32 1213.92 L1136.73 1213.92 L1136.15 1213.92 L1135.56 1213.92 L1134.97 1213.92 L1134.39 1213.92 L1133.8 1213.92 L1133.21 1213.92 L1132.63 1213.92 L1132.04 1213.92 L1131.46 1213.92 L1130.87 1213.92 L1130.28 1213.92 L1129.7 1213.92 L1129.11 1213.92 L1128.52 1213.92 L1127.94 1213.92 L1127.35 1213.92 L1126.76 1213.92 L1126.18 1213.92 L1125.59 1213.92 L1125.01 1213.92 L1124.42 1213.92 L1123.83 1213.92 L1123.25 1213.92 L1122.66 1213.92 L1122.07 1213.92 L1121.49 1213.92 L1120.9 1213.92 L1120.31 1213.92 L1119.73 1213.92 L1119.14 1213.92 L1118.55 1213.92 L1117.97 1213.92 L1117.38 1213.92 L1116.8 1213.92 L1116.21 1213.92 L1115.62 1213.92 L1115.04 1213.92 L1114.45 1213.92 L1113.86 1213.92 L1113.28 1213.92 L1112.69 1213.92 L1112.1 1213.92 L1111.52 1213.92 L1110.93 1213.92 L1110.34 1213.92 L1109.76 1213.92 L1109.17 1213.92 L1108.59 1213.92 L1108 1213.92 L1107.41 1213.92 L1106.83 1213.92 L1106.24 1213.92 L1105.65 1213.92 L1105.07 1213.92 L1104.48 1213.92 L1103.89 1213.92 L1103.31 1213.92 L1102.72 1213.92 L1102.14 1213.92 L1101.55 1213.92 L1100.96 1213.92 L1100.38 1213.92 L1099.79 1213.92 L1099.2 1213.92 L1098.62 1213.92 L1098.03 1213.92 L1097.44 1213.92 L1096.86 1213.92 L1096.27 1213.92 L1095.68 1213.92 L1095.1 1213.92 L1094.51 1213.92 L1093.93 1213.92 L1093.34 1213.92 L1092.75 1213.92 L1092.17 1213.92 L1091.58 1213.92 L1090.99 1213.92 L1090.41 1213.92 L1089.82 1213.92 L1089.23 1213.92 L1088.65 1213.92 L1088.06 1213.92 L1087.47 1213.92 L1086.89 1213.92 L1086.3 1213.92 L1085.72 1213.92 L1085.13 1213.92 L1084.54 1213.92 L1083.96 1213.92 L1083.37 1213.92 L1082.78 1213.92 L1082.2 1213.92 L1081.61 1213.92 L1081.02 1213.92 L1080.44 1213.92 L1079.85 1213.92 L1079.26 1213.92 L1078.68 1213.92 L1078.09 1213.92 L1077.51 1213.92 L1076.92 1213.92 L1076.33 1213.92 L1075.75 1213.92 L1075.16 1213.92 L1074.57 1213.92 L1073.99 1213.92 L1073.4 1213.92 L1072.81 1213.92 L1072.23 1213.92 L1071.64 1213.92 L1071.06 1213.92 L1070.47 1213.92 L1069.88 1213.92 L1069.3 1213.92 L1068.71 1213.92 L1068.12 1213.92 L1067.54 1213.92 L1066.95 1213.92 L1066.36 1213.92 L1065.78 1213.92 L1065.19 1213.92 L1064.6 1213.92 L1064.02 1213.92 L1063.43 1213.92 L1062.85 1213.92 L1062.26 1213.92 L1061.67 1213.92 L1061.09 1213.92 L1060.5 1213.92 L1059.91 1213.92 L1059.33 1213.92 L1058.74 1213.92 L1058.15 1213.92 L1057.57 1213.92 L1056.98 1213.92 L1056.39 1213.92 L1055.81 1213.92 L1055.22 1213.92 L1054.64 1213.92 L1054.05 1213.92 L1053.46 1213.92 L1052.88 1213.92 L1052.29 1213.92 L1051.7 1213.92 L1051.12 1213.92 L1050.53 1213.92 L1049.94 1213.92 L1049.36 1213.92 L1048.77 1213.92 L1048.19 1213.92 L1047.6 1213.92 L1047.01 1213.92 L1046.43 1213.92 L1045.84 1213.92 L1045.25 1213.92 L1044.67 1213.92 L1044.08 1213.92 L1043.49 1213.92 L1042.91 1213.92 L1042.32 1213.92 L1041.73 1213.92 L1041.15 1213.92 L1040.56 1213.92 L1039.98 1213.92 L1039.39 1213.92 L1038.8 1213.92 L1038.22 1213.92 L1037.63 1213.92 L1037.04 1213.92 L1036.46 1213.92 L1035.87 1213.92 L1035.28 1213.92 L1034.7 1213.92 L1034.11 1213.92 L1033.52 1213.92 L1032.94 1213.92 L1032.35 1213.92 L1031.77 1213.92 L1031.18 1213.92 L1030.59 1213.92 L1030.01 1213.92 L1029.42 1213.92 L1028.83 1213.92 L1028.25 1213.92 L1027.66 1213.92 L1027.07 1213.92 L1026.49 1213.92 L1025.9 1213.92 L1025.32 1213.92 L1024.73 1213.92 L1024.14 1213.92 L1023.56 1213.92 L1022.97 1213.92 L1022.38 1213.92 L1021.8 1213.92 L1021.21 1213.92 L1020.62 1213.92 L1020.04 1213.92 L1019.45 1213.92 L1018.86 1213.92 L1018.28 1213.92 L1017.69 1213.92 L1017.11 1213.92 L1016.52 1213.92 L1015.93 1213.92 L1015.35 1213.92 L1014.76 1213.92 L1014.17 1213.92 L1013.59 1213.92 L1013 1213.92 L1012.41 1213.92 L1011.83 1213.92 L1011.24 1213.92 L1010.65 1213.92 L1010.07 1213.92 L1009.48 1213.92 L1008.9 1213.92 L1008.31 1213.92 L1007.72 1213.92 L1007.14 1213.92 L1006.55 1213.92 L1005.96 1213.92 L1005.38 1213.92 L1004.79 1213.92 L1004.2 1213.92 L1003.62 1213.92 L1003.03 1213.92 L1002.44 1213.92 L1001.86 1213.92 L1001.27 1213.92 L1000.69 1213.92 L1000.1 1213.92 L999.513 1213.92 L998.926 1213.92 L998.34 1213.92 L997.754 1213.92 L997.167 1213.92 L996.581 1213.92 L995.994 1213.92 L995.408 1213.92 L994.822 1213.92 L994.235 1213.92 L993.649 1213.92 L993.062 1213.92 L992.476 1213.92 L991.889 1213.92 L991.303 1213.92 L990.717 1213.92 L990.13 1213.92 L989.544 1213.92 L988.957 1213.92 L988.371 1213.92 L987.785 1213.92 L987.198 1213.92 L986.612 1213.92 L986.025 1213.92  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.36 986.612,1214.36 987.198,1214.36 987.785,1214.36 988.371,1214.36 988.957,1214.36 989.544,1214.36 990.13,1214.36 990.717,1214.36 991.303,1214.36 991.889,1214.36 992.476,1214.36 993.062,1214.36 993.649,1214.36 994.235,1214.36 994.822,1214.36 995.408,1214.36 995.994,1214.36 996.581,1214.36 997.167,1214.36 997.754,1214.36 998.34,1214.36 998.926,1214.36 999.513,1214.36 1000.1,1214.36 1000.69,1214.36 1001.27,1214.36 1001.86,1214.36 1002.44,1214.36 1003.03,1214.36 1003.62,1214.36 1004.2,1214.36 1004.79,1214.36 1005.38,1214.36 1005.96,1214.36 1006.55,1214.36 1007.14,1214.36 1007.72,1214.36 1008.31,1214.36 1008.9,1214.36 1009.48,1214.36 1010.07,1214.36 1010.65,1214.36 1011.24,1214.36 1011.83,1214.36 1012.41,1214.36 1013,1214.36 1013.59,1214.36 1014.17,1214.36 1014.76,1214.36 1015.35,1214.36 1015.93,1214.36 1016.52,1214.36 1017.11,1214.36 1017.69,1214.36 1018.28,1214.36 1018.86,1214.36 1019.45,1214.36 1020.04,1214.36 1020.62,1214.36 1021.21,1214.36 1021.8,1214.36 1022.38,1214.36 1022.97,1214.36 1023.56,1214.36 1024.14,1214.36 1024.73,1214.36 1025.32,1214.36 1025.9,1214.36 1026.49,1214.36 1027.07,1214.36 1027.66,1214.36 1028.25,1214.36 1028.83,1214.36 1029.42,1214.36 1030.01,1214.36 1030.59,1214.36 1031.18,1214.36 1031.77,1214.36 1032.35,1214.36 1032.94,1214.36 1033.52,1214.36 1034.11,1214.36 1034.7,1214.36 1035.28,1214.36 1035.87,1214.36 1036.46,1214.36 1037.04,1214.36 1037.63,1214.36 1038.22,1214.36 1038.8,1214.36 1039.39,1214.36 1039.98,1214.36 1040.56,1214.36 1041.15,1214.36 1041.73,1214.36 1042.32,1214.36 1042.91,1214.36 1043.49,1214.36 1044.08,1214.36 1044.67,1214.36 1045.25,1214.36 1045.84,1214.36 1046.43,1214.36 1047.01,1214.36 1047.6,1214.36 1048.19,1214.36 1048.77,1214.36 1049.36,1214.36 1049.94,1214.36 1050.53,1214.36 1051.12,1214.36 1051.7,1214.36 1052.29,1214.36 1052.88,1214.36 1053.46,1214.36 1054.05,1214.36 1054.64,1214.36 1055.22,1214.36 1055.81,1214.36 1056.39,1214.36 1056.98,1214.36 1057.57,1214.36 1058.15,1214.36 1058.74,1214.36 1059.33,1214.36 1059.91,1214.36 1060.5,1214.36 1061.09,1214.36 1061.67,1214.36 1062.26,1214.36 1062.85,1214.36 1063.43,1214.36 1064.02,1214.36 1064.6,1214.36 1065.19,1214.36 1065.78,1214.36 1066.36,1214.36 1066.95,1214.36 1067.54,1214.36 1068.12,1214.36 1068.71,1214.36 1069.3,1214.36 1069.88,1214.36 1070.47,1214.36 1071.06,1214.36 1071.64,1214.36 1072.23,1214.36 1072.81,1214.36 1073.4,1214.36 1073.99,1214.36 1074.57,1214.36 1075.16,1214.36 1075.75,1214.36 1076.33,1214.36 1076.92,1214.36 1077.51,1214.36 1078.09,1214.36 1078.68,1214.36 1079.26,1214.36 1079.85,1214.36 1080.44,1214.36 1081.02,1214.36 1081.61,1214.36 1082.2,1214.36 1082.78,1214.36 1083.37,1214.36 1083.96,1214.36 1084.54,1214.36 1085.13,1214.36 1085.72,1214.36 1086.3,1214.36 1086.89,1214.36 1087.47,1214.36 1088.06,1214.36 1088.65,1214.36 1089.23,1214.36 1089.82,1214.36 1090.41,1214.36 1090.99,1214.36 1091.58,1214.36 1092.17,1214.36 1092.75,1214.36 1093.34,1214.36 1093.93,1214.36 1094.51,1214.36 1095.1,1214.36 1095.68,1214.36 1096.27,1214.36 1096.86,1214.36 1097.44,1214.36 1098.03,1214.36 1098.62,1214.36 1099.2,1214.36 1099.79,1214.36 1100.38,1214.36 1100.96,1214.36 1101.55,1214.36 1102.14,1214.36 1102.72,1214.36 1103.31,1214.36 1103.89,1214.36 1104.48,1214.36 1105.07,1214.36 1105.65,1214.36 1106.24,1214.36 1106.83,1214.36 1107.41,1214.36 1108,1214.36 1108.59,1214.36 1109.17,1214.36 1109.76,1214.36 1110.34,1214.36 1110.93,1214.36 1111.52,1214.36 1112.1,1214.36 1112.69,1214.36 1113.28,1214.36 1113.86,1214.36 1114.45,1214.36 1115.04,1214.36 1115.62,1214.36 1116.21,1214.36 1116.8,1214.36 1117.38,1214.36 1117.97,1214.36 1118.55,1214.36 1119.14,1214.36 1119.73,1214.36 1120.31,1214.36 1120.9,1214.36 1121.49,1214.36 1122.07,1214.36 1122.66,1214.36 1123.25,1214.36 1123.83,1214.36 1124.42,1214.36 1125.01,1214.36 1125.59,1214.36 1126.18,1214.36 1126.76,1214.36 1127.35,1214.36 1127.94,1214.36 1128.52,1214.36 1129.11,1214.36 1129.7,1214.36 1130.28,1214.36 1130.87,1214.36 1131.46,1214.36 1132.04,1214.36 1132.63,1214.36 1133.21,1214.36 1133.8,1214.36 1134.39,1214.36 1134.97,1214.36 1135.56,1214.36 1136.15,1214.36 1136.73,1214.36 1137.32,1214.36 1137.91,1214.36 1138.49,1214.36 1139.08,1214.36 1139.67,1214.36 1140.25,1214.36 1140.84,1214.36 1141.42,1214.36 1142.01,1214.36 1142.6,1214.36 1143.18,1214.36 1143.77,1214.36 1144.36,1214.36 1144.94,1214.36 1145.53,1214.36 1146.12,1214.36 1146.7,1214.36 1147.29,1214.36 1147.88,1214.36 1148.46,1214.36 1149.05,1214.36 1149.63,1214.36 1150.22,1214.36 1150.81,1214.36 1151.39,1214.36 1151.98,1214.36 1152.57,1214.36 1153.15,1214.36 1153.74,1214.36 1154.33,1214.36 1154.91,1214.36 1155.5,1214.36 1156.09,1214.36 1156.67,1214.36 1157.26,1214.36 1157.84,1214.36 1158.43,1214.36 1159.02,1214.36 1159.6,1214.36 1160.19,1214.36 1160.78,1214.36 1161.36,1214.36 1161.95,1214.36 1162.54,1214.36 1163.12,1214.36 1163.71,1214.36 1164.29,1214.36 1164.88,1214.36 1165.47,1214.36 1166.05,1214.36 1166.64,1214.36 1167.23,1214.36 1167.81,1214.36 1168.4,1214.36 1168.99,1214.36 1169.57,1214.36 1170.16,1214.36 1170.75,1214.36 1171.33,1214.36 1171.92,1214.36 1172.5,1214.36 1173.09,1214.36 1173.68,1214.36 1174.26,1214.36 1174.85,1214.36 1175.44,1214.36 1176.02,1214.36 1176.61,1214.36 1177.2,1214.36 1177.78,1214.36 1178.37,1214.36 1178.96,1214.36 1179.54,1214.36 1180.13,1214.36 1180.71,1214.36 1181.3,1214.36 1181.89,1214.36 1182.47,1214.36 1183.06,1214.36 1183.65,1214.36 1184.23,1214.36 1184.82,1214.36 1185.41,1214.36 1185.99,1214.36 1186.58,1214.36 1187.16,1214.36 1187.75,1214.36 1188.34,1214.36 1188.92,1214.36 1189.51,1214.36 1190.1,1214.36 1190.68,1214.36 1191.27,1214.36 1191.86,1214.36 1192.44,1214.36 1193.03,1214.36 1193.62,1214.36 1194.2,1214.36 1194.79,1214.36 1195.37,1214.36 1195.96,1214.36 1196.55,1214.36 1197.13,1214.36 1197.72,1214.36 1198.31,1214.36 1198.89,1214.36 1199.48,1214.36 1200.07,1214.36 1200.65,1214.36 1201.24,1214.36 1201.83,1214.36 1202.41,1214.36 1203,1214.36 1203.58,1214.36 1204.17,1214.36 1204.76,1214.36 1205.34,1214.36 1205.93,1214.36 1206.52,1214.36 1207.1,1214.36 1207.69,1214.36 1208.28,1214.36 1208.86,1214.36 1209.45,1214.36 1210.03,1214.36 1210.62,1214.36 1211.21,1214.36 1211.79,1214.36 1212.38,1214.36 1212.97,1214.36 1213.55,1214.36 1214.14,1214.36 1214.73,1214.36 1215.31,1214.36 1215.9,1214.36 1216.49,1214.36 1217.07,1214.36 1217.66,1214.36 1218.24,1214.36 1218.83,1214.36 1219.42,1214.36 1220,1214.36 1220.59,1214.36 1221.18,1214.36 1221.76,1214.36 1222.35,1214.36 1222.94,1214.36 1223.52,1214.36 1224.11,1214.36 1224.7,1214.36 1225.28,1214.36 1225.87,1214.36 1226.45,1214.36 1227.04,1214.36 1227.63,1214.36 1228.21,1214.36 1228.8,1214.36 1229.39,1214.36 1229.97,1214.36 1230.56,1214.36 1231.15,1214.36 1231.73,1214.36 1232.32,1214.36 1232.91,1214.36 1233.49,1214.36 1234.08,1214.36 1234.66,1214.36 1235.25,1214.36 1235.84,1214.36 1236.42,1214.36 1237.01,1214.36 1237.6,1214.36 1238.18,1214.36 1238.77,1214.36 1239.36,1214.36 1239.94,1214.36 1240.53,1214.36 1241.11,1214.36 1241.7,1214.36 1242.29,1214.36 1242.87,1214.36 1243.46,1214.36 1244.05,1214.36 1244.63,1214.36 1245.22,1214.36 1245.81,1214.36 1246.39,1214.36 1246.98,1214.36 1247.57,1214.36 1248.15,1214.36 1248.74,1214.36 1249.32,1214.36 1249.91,1214.36 1250.5,1214.36 1251.08,1214.36 1251.67,1214.36 1252.26,1214.36 1252.84,1214.36 1253.43,1214.36 1254.02,1214.36 1254.6,1214.36 1255.19,1214.36 1255.78,1214.36 1256.36,1214.36 1256.95,1214.36 1257.53,1214.36 1258.12,1214.36 1258.71,1214.36 1259.29,1214.36 1259.88,1214.36 1260.47,1214.36 1261.05,1214.36 1261.64,1214.36 1262.23,1214.36 1262.81,1214.36 1263.4,1214.36 1263.98,1214.36 1264.57,1214.36 1265.16,1214.36 1265.74,1214.36 1266.33,1214.36 1266.92,1214.36 1267.5,1214.36 1268.09,1214.36 1268.68,1214.36 1269.26,1214.36 1269.85,1214.36 1270.44,1214.36 1271.02,1214.36 1271.61,1214.36 1272.19,1214.36 1272.78,1214.36 1273.37,1214.36 1273.95,1214.36 1274.54,1214.36 1275.13,1214.36 1275.71,1214.36 1276.3,1214.36 1276.89,1214.36 1277.47,1214.36 1278.06,1214.36 1278.65,1214.36 1279.23,1214.36 1279.82,1214.36 1280.4,1214.36 1280.99,1214.36 1281.58,1214.36 1282.16,1214.36 1282.75,1214.36 1283.34,1214.36 1283.92,1214.36 1284.51,1214.36 1285.1,1214.36 1285.68,1214.36 1286.27,1214.36 1286.86,1214.36 1287.44,1214.36 1288.03,1214.36 1288.61,1214.36 1289.2,1214.36 1289.79,1214.36 1290.37,1214.36 1290.96,1214.36 1291.55,1214.36 1292.13,1214.36 1292.72,1214.36 1293.31,1214.36 1293.89,1214.36 1294.48,1214.36 1295.06,1214.36 1295.65,1214.36 1296.24,1214.36 1296.82,1214.36 1297.41,1214.36 1298,1214.36 1298.58,1214.36 1299.17,1214.36 1299.76,1214.36 1300.34,1214.36 1300.93,1214.36 1301.52,1214.36 1302.1,1214.36 1302.69,1214.36 1303.27,1214.36 1303.86,1214.36 1304.45,1214.36 1305.03,1214.36 1305.62,1214.36 1306.21,1214.36 1306.79,1214.36 1307.38,1214.36 1307.97,1214.36 1308.55,1214.36 1309.14,1214.36 1309.73,1214.36 1310.31,1214.36 1310.9,1214.36 1311.48,1214.36 1312.07,1214.36 1312.66,1214.36 1313.24,1214.36 1313.83,1214.36 1314.42,1214.36 1315,1214.36 1315.59,1214.36 1316.18,1214.36 1316.76,1214.36 1317.35,1214.36 1317.93,1214.36 1318.52,1214.36 1319.11,1214.36 1319.69,1214.36 1320.28,1214.36 1320.87,1214.36 1321.45,1214.36 1322.04,1214.36 1322.63,1214.36 1323.21,1214.36 1323.8,1214.36 1324.39,1214.36 1324.97,1214.36 1325.56,1214.36 1326.14,1214.36 1326.73,1214.36 1327.32,1214.36 1327.9,1214.36 1328.49,1214.36 1329.08,1214.36 1329.66,1214.36 1330.25,1214.36 1330.84,1214.36 1331.42,1214.36 1332.01,1214.36 1332.6,1214.36 1333.18,1214.36 1333.77,1214.36 1334.35,1214.36 1334.94,1214.36 1335.53,1214.36 1336.11,1214.36 1336.7,1214.36 1337.29,1214.36 1337.87,1214.36 1338.46,1214.36 1339.05,1214.36 1339.63,1214.36 1340.22,1214.36 1340.8,1214.36 1341.39,1214.36 1341.98,1214.36 1342.56,1214.36 1343.15,1214.36 1343.74,1214.36 1344.32,1214.36 1344.91,1214.36 1345.5,1214.36 1346.08,1214.36 1346.67,1214.36 1347.26,1214.36 1347.84,1214.36 1348.43,1214.36 1349.01,1214.36 1349.6,1214.36 1350.19,1214.36 1350.77,1214.36 1351.36,1214.36 1351.95,1214.36 1352.53,1214.36 1353.12,1214.36 1353.71,1214.36 1354.29,1214.36 1354.88,1214.36 1355.47,1214.36 1356.05,1214.36 1356.64,1214.36 1357.22,1214.36 1357.81,1214.36 1358.4,1214.36 1358.98,1214.36 1359.57,1214.36 1360.16,1214.36 1360.74,1214.36 1361.33,1214.36 1361.92,1214.36 1362.5,1214.36 1363.09,1214.36 1363.68,1214.36 1364.26,1214.36 1364.85,1214.36 1365.43,1214.36 1366.02,1214.36 1366.61,1214.36 1367.19,1214.36 1367.78,1214.36 1368.37,1214.36 1368.95,1214.36 1369.54,1214.36 1370.13,1214.36 1370.71,1214.36 1371.3,1214.36 1371.88,1214.36 1372.47,1214.36 1373.06,1214.36 1373.64,1214.36 1374.23,1214.36 1374.82,1214.36 1375.4,1214.36 1375.99,1214.36 1376.58,1214.36 1377.16,1214.36 1377.75,1214.36 1378.34,1214.36 1378.92,1214.36 1379.51,1214.36 1380.09,1214.36 1380.68,1214.36 1381.27,1214.36 1381.85,1214.36 1382.44,1214.36 1383.03,1214.36 1383.61,1214.36 1384.2,1214.36 1384.79,1214.36 1385.37,1214.36 1385.96,1214.36 1386.55,1214.36 1387.13,1214.36 1387.72,1214.36 1388.3,1214.36 1388.89,1214.36 1389.48,1214.36 1390.06,1214.36 1390.65,1214.36 1391.24,1214.36 1391.82,1214.36 1392.41,1214.36 1393,1214.36 1393.58,1214.36 1394.17,1214.36 1394.75,1214.36 1395.34,1214.36 1395.93,1214.36 1396.51,1214.36 1397.1,1214.36 1397.69,1214.36 1398.27,1214.36 1398.86,1214.36 1399.45,1214.36 1400.03,1214.36 1400.62,1214.36 1401.21,1214.36 1401.79,1214.36 1402.38,1214.36 1402.96,1214.36 1403.55,1214.36 1404.14,1214.36 1404.72,1214.36 1405.31,1214.36 1405.9,1214.36 1406.48,1214.36 1407.07,1214.36 1407.66,1214.36 1408.24,1214.36 1408.83,1214.36 1409.42,1214.36 1410,1214.36 1410.59,1214.36 1411.17,1214.36 1411.76,1214.36 1412.35,1214.36 1412.93,1214.36 1413.52,1214.36 1414.11,1214.36 1414.69,1214.36 1415.28,1214.36 1415.87,1214.36 1416.45,1214.36 1417.04,1214.36 1417.63,1214.36 1418.21,1214.36 1418.8,1214.36 1419.38,1214.36 1419.97,1214.36 1420.56,1214.36 1421.14,1214.36 1421.73,1214.36 1422.32,1214.36 1422.9,1214.36 1423.49,1214.36 1424.08,1214.36 1424.66,1214.36 1425.25,1214.36 1425.83,1214.36 1426.42,1214.36 1427.01,1214.36 1427.59,1214.36 1428.18,1214.36 1428.77,1214.36 1429.35,1214.36 1429.94,1214.36 1430.53,1214.36 1431.11,1214.36 1431.7,1214.36 1432.29,1214.36 1432.87,1214.36 1433.46,1214.36 1434.04,1214.36 1434.63,1214.36 1435.22,1214.36 1435.8,1214.36 1436.39,1214.36 1436.98,1214.36 1437.56,1214.36 1438.15,1214.36 1438.74,1214.36 1439.32,1214.36 1439.91,1214.36 1440.5,1214.36 1441.08,1214.36 1441.67,1214.36 1442.25,1214.36 1442.84,1214.36 1443.43,1214.36 1444.01,1214.36 1444.6,1214.36 1445.19,1214.36 1445.77,1214.36 1446.36,1214.36 1446.95,1214.36 1447.53,1214.36 1448.12,1214.36 1448.7,1214.36 1449.29,1214.36 1449.88,1214.36 1450.46,1214.36 1451.05,1214.36 1451.64,1214.36 1452.22,1214.36 1452.81,1214.36 1453.4,1214.36 1453.98,1214.36 1454.57,1214.36 1455.16,1214.36 1455.74,1214.36 1456.33,1214.36 1456.91,1214.36 1457.5,1214.36 1458.09,1214.36 1458.67,1214.36 1459.26,1214.36 1459.85,1214.36 1460.43,1214.36 1461.02,1214.36 1461.61,1214.36 1462.19,1214.36 1462.78,1214.36 1463.37,1214.36 1463.95,1214.36 1464.54,1214.36 1465.12,1214.36 1465.71,1214.36 1466.3,1214.36 1466.88,1214.36 1467.47,1214.36 1468.06,1214.36 1468.64,1214.36 1469.23,1214.36 1469.82,1214.36 1470.4,1214.36 1470.99,1214.36 1471.57,1214.36 1472.16,1214.36 1472.75,1214.36 1473.33,1214.36 1473.92,1214.36 1474.51,1214.36 1475.09,1214.36 1475.68,1214.36 1476.27,1214.36 1476.85,1214.36 1477.44,1214.36 1478.03,1214.36 1478.61,1214.36 1479.2,1214.36 1479.78,1214.36 1480.37,1214.36 1480.96,1214.36 1481.54,1214.36 1482.13,1214.36 1482.72,1214.36 1483.3,1214.36 1483.89,1214.36 1484.48,1214.36 1485.06,1214.36 1485.65,1214.36 1486.24,1214.36 1486.82,1214.36 1487.41,1214.36 1487.99,1214.36 1488.58,1214.36 1489.17,1214.36 1489.75,1214.36 1490.34,1214.36 1490.93,1214.36 1491.51,1214.36 1492.1,1214.36 1492.69,1214.36 1493.27,1214.36 1493.86,1214.36 1494.45,1214.36 1495.03,1214.36 1495.62,1214.36 1496.2,1214.36 1496.79,1214.36 1497.38,1214.36 1497.96,1214.36 1498.55,1214.36 1499.14,1214.36 1499.72,1214.36 1500.31,1214.36 1500.9,1214.36 1501.48,1214.36 1502.07,1214.36 1502.65,1214.36 1503.24,1214.36 1503.83,1214.36 1504.41,1214.36 1505,1214.36 1505.59,1214.36 1506.17,1214.36 1506.76,1214.36 1507.35,1214.36 1507.93,1214.36 1508.52,1214.36 1509.11,1214.36 1509.69,1214.36 1510.28,1214.36 1510.86,1214.36 1511.45,1214.36 1512.04,1214.36 1512.62,1214.36 1513.21,1214.36 1513.8,1214.36 1514.38,1214.36 1514.97,1214.36 1515.56,1214.36 1516.14,1214.36 1516.73,1214.36 1517.32,1214.36 1517.9,1214.36 1518.49,1214.36 1519.07,1214.36 1519.66,1214.36 1520.25,1214.36 1520.83,1214.36 1521.42,1214.36 1522.01,1214.36 1522.59,1214.36 1523.18,1214.36 1523.77,1214.36 1524.35,1214.36 1524.94,1214.36 1525.52,1214.36 1526.11,1214.36 1526.7,1214.36 1527.28,1214.36 1527.87,1214.36 1528.46,1214.36 1529.04,1214.36 1529.63,1214.36 1530.22,1214.36 1530.8,1214.36 1531.39,1214.36 1531.98,1214.36 1532.56,1214.36 1533.15,1214.36 1533.73,1214.36 1534.32,1214.36 1534.91,1214.36 1535.49,1214.36 1536.08,1214.36 1536.67,1214.36 1537.25,1214.36 1537.84,1214.36 1538.43,1214.36 1539.01,1214.36 1539.6,1214.36 1540.19,1214.36 1540.77,1214.36 1541.36,1214.36 1541.94,1214.36 1542.53,1214.36 1543.12,1214.36 1543.7,1214.36 1544.29,1214.36 1544.88,1214.36 1545.46,1214.36 1546.05,1214.36 1546.64,1214.36 1547.22,1214.36 1547.81,1214.36 1548.4,1214.36 1548.98,1214.36 1549.57,1214.36 1550.15,1214.36 1550.74,1214.36 1551.33,1214.36 1551.91,1214.36 1552.5,1214.36 1553.09,1214.36 1553.67,1214.36 1554.26,1214.36 1554.85,1214.36 1555.43,1214.36 1556.02,1214.36 1556.6,1214.36 1557.19,1214.36 1557.78,1214.36 1558.36,1214.36 1558.95,1214.36 1559.54,1214.36 1560.12,1214.36 1560.71,1214.36 1561.3,1214.36 1561.88,1214.36 1562.47,1214.36 1563.06,1214.36 1563.64,1214.36 1564.23,1214.36 1564.81,1214.36 1565.4,1214.36 1565.99,1214.36 1566.57,1214.36 1567.16,1214.36 1567.75,1214.36 1568.33,1214.36 1568.92,1214.36 1569.51,1214.36 1570.09,1214.36 1570.68,1214.36 1571.27,1214.36 1571.85,1214.36 1572.44,1214.36 1573.02,1214.36 1573.61,1214.36 1574.2,1214.36 1574.78,1214.36 1575.37,1214.36 1575.96,1214.36 1576.54,1214.36 1577.13,1214.36 1577.72,1214.36 1578.3,1214.36 1578.89,1214.36 1579.47,1214.36 1580.06,1214.36 1580.65,1214.36 1581.23,1214.36 1581.82,1214.36 1582.41,1214.36 1582.99,1214.36 1583.58,1214.36 1584.17,1214.36 1584.75,1214.36 1585.34,1214.36 1585.93,1214.36 1586.51,1214.36 1587.1,1214.36 1587.68,1214.36 1588.27,1214.36 1588.86,1214.36 1589.44,1214.36 1590.03,1214.36 1590.62,1214.36 1591.2,1214.36 1591.79,1214.36 1592.38,1214.36 1592.96,1214.36 1593.55,1214.36 1594.14,1214.36 1594.72,1214.36 1595.31,1214.36 1595.89,1214.36 1596.48,1214.36 1597.07,1214.36 1597.65,1214.36 1598.24,1214.36 1598.83,1214.36 1599.41,1214.36 1600,1214.36 1600.59,1214.36 1601.17,1214.36 1601.76,1214.36 1602.34,1214.36 1602.93,1214.36 1603.52,1214.36 1604.1,1214.36 1604.69,1214.36 1605.28,1214.36 1605.86,1214.36 1606.45,1214.36 1607.04,1214.36 1607.62,1214.36 1608.21,1214.36 1608.8,1214.36 1609.38,1214.36 1609.97,1214.36 1610.55,1214.36 1611.14,1214.36 1611.73,1214.36 1612.31,1214.36 1612.9,1214.36 1613.49,1214.36 1614.07,1214.36 1614.66,1214.36 1615.25,1214.36 1615.83,1214.36 1616.42,1214.36 1617.01,1214.36 1617.59,1214.36 1618.18,1214.36 1618.76,1214.36 1619.35,1214.36 1619.94,1214.36 1620.52,1214.36 1621.11,1214.36 1621.7,1214.36 1622.28,1214.36 1622.87,1214.36 1623.46,1214.36 1624.04,1214.36 1624.63,1214.36 1625.22,1214.36 1625.8,1214.36 1626.39,1214.36 1626.97,1214.36 1627.56,1214.36 1628.15,1214.36 1628.73,1214.36 1629.32,1214.36 1629.91,1214.36 1630.49,1214.36 1631.08,1214.36 1631.67,1214.36 1632.25,1214.36 1632.84,1214.36 1633.42,1214.36 1634.01,1214.36 1634.6,1214.36 1635.18,1214.36 1635.77,1214.36 1636.36,1214.36 1636.94,1214.36 1637.53,1214.36 1638.12,1214.36 1638.7,1214.36 1639.29,1214.36 1639.88,1214.36 1640.46,1214.36 1641.05,1214.36 1641.63,1214.36 1642.22,1214.36 1642.81,1214.36 1643.39,1214.36 1643.98,1214.36 1644.57,1214.36 1645.15,1214.36 1645.74,1214.36 1646.33,1214.36 1646.91,1214.36 1647.5,1214.36 1648.09,1214.36 1648.67,1214.36 1649.26,1214.36 1649.84,1214.36 1650.43,1214.36 1651.02,1214.36 1651.6,1214.36 1652.19,1214.36 1652.78,1214.36 1653.36,1214.36 1653.95,1214.36 1654.54,1214.36 1655.12,1214.36 1655.71,1214.36 1656.29,1214.36 1656.88,1214.36 1657.47,1214.36 1658.05,1214.36 1658.64,1214.36 1659.23,1214.36 1659.81,1214.36 1660.4,1214.36 1660.99,1214.36 1661.57,1214.36 1662.16,1214.36 1662.75,1214.36 1663.33,1214.36 1663.92,1214.36 1664.5,1214.36 1665.09,1214.36 1665.68,1214.36 1666.26,1214.36 1666.85,1214.36 1667.44,1214.36 1668.02,1214.36 1668.61,1214.36 1669.2,1214.36 1669.78,1214.36 1670.37,1214.36 1670.96,1214.36 1671.54,1214.36 1672.13,1214.36 1672.71,1214.36 1673.3,1214.36 1673.89,1214.36 1674.47,1214.36 1675.06,1214.36 1675.65,1214.36 1676.23,1214.36 1676.82,1214.36 1677.41,1214.36 1677.99,1214.36 1678.58,1214.36 1679.17,1214.36 1679.75,1214.36 1680.34,1214.36 1680.92,1214.36 1681.51,1214.36 1682.1,1214.36 1682.68,1214.36 1683.27,1214.36 1683.86,1214.36 1684.44,1214.36 1685.03,1214.36 1685.62,1214.36 1686.2,1214.36 1686.79,1214.36 1687.37,1214.36 1687.96,1214.36 1688.55,1214.36 1689.13,1214.36 1689.72,1214.36 1690.31,1214.36 1690.89,1214.36 1691.48,1214.36 1692.07,1214.36 1692.65,1214.36 1693.24,1214.36 1693.83,1214.36 1694.41,1214.36 1695,1214.36 1695.58,1214.36 1696.17,1214.36 1696.76,1214.36 1697.34,1214.36 1697.93,1214.36 1698.52,1214.36 1699.1,1214.36 1699.69,1214.36 1700.28,1214.36 1700.86,1214.36 1701.45,1214.36 1702.04,1214.36 1702.62,1214.36 1703.21,1214.36 1703.79,1214.36 1704.38,1214.36 1704.97,1214.36 1705.55,1214.36 1706.14,1214.36 1706.73,1214.36 1707.31,1214.36 1707.9,1214.36 1708.49,1214.36 1709.07,1214.36 1709.66,1214.36 1710.24,1214.36 1710.83,1214.36 1711.42,1214.36 1712,1214.36 1712.59,1214.36 1713.18,1214.36 1713.76,1214.36 1714.35,1214.36 1714.94,1214.36 1715.52,1214.36 1716.11,1214.36 1716.7,1214.36 1717.28,1214.36 1717.87,1214.36 1718.45,1214.36 1719.04,1214.36 1719.63,1214.36 1720.21,1214.36 1720.8,1214.36 1721.39,1214.36 1721.97,1214.36 1722.56,1214.36 1723.15,1214.36 1723.73,1214.36 1724.32,1214.36 1724.91,1214.36 1725.49,1214.36 1726.08,1214.36 1726.66,1214.36 1727.25,1214.36 1727.84,1214.36 1728.42,1214.36 1729.01,1214.36 1729.6,1214.36 1730.18,1214.36 1730.77,1214.36 1731.36,1214.36 1731.94,1214.36 1732.53,1214.36 1733.11,1214.36 1733.7,1214.36 1734.29,1214.36 1734.87,1214.36 1735.46,1214.36 1736.05,1214.36 1736.63,1214.36 1737.22,1214.36 1737.81,1214.36 1738.39,1214.36 1738.98,1214.36 1739.57,1214.36 1740.15,1214.36 1740.74,1214.36 1741.32,1214.36 1741.91,1214.36 1742.5,1214.36 1743.08,1214.36 1743.67,1214.36 1744.26,1214.36 1744.84,1214.36 1745.43,1214.36 1746.02,1214.36 1746.6,1214.36 1747.19,1214.36 1747.78,1214.36 1748.36,1214.36 1748.95,1214.36 1749.53,1214.36 1750.12,1214.36 1750.71,1214.36 1751.29,1214.36 1751.88,1214.36 1752.47,1214.36 1753.05,1214.36 1753.64,1214.36 1754.23,1214.36 1754.81,1214.36 1755.4,1214.36 1755.99,1214.36 1756.57,1214.36 1757.16,1214.36 1757.74,1214.36 1758.33,1214.36 1758.92,1214.36 1759.5,1214.36 1760.09,1214.36 1760.68,1214.36 1761.26,1214.36 1761.85,1214.36 1762.44,1214.36 1763.02,1214.36 1763.61,1214.36 1764.19,1214.36 1764.78,1214.36 1765.37,1214.36 1765.95,1214.36 1766.54,1214.36 1767.13,1214.36 1767.71,1214.36 1768.3,1214.36 1768.89,1214.36 1769.47,1214.36 1770.06,1214.36 1770.65,1214.36 1771.23,1214.36 1771.82,1214.36 1772.4,1214.36 1772.99,1214.36 1773.58,1214.36 1774.16,1214.36 1774.75,1214.36 1775.34,1214.36 1775.92,1214.36 1776.51,1214.36 1777.1,1214.36 1777.68,1214.36 1778.27,1214.36 1778.86,1214.36 1779.44,1214.36 1780.03,1214.36 1780.61,1214.36 1781.2,1214.36 1781.79,1214.36 1782.37,1214.36 1782.96,1214.36 1783.55,1214.36 1784.13,1214.36 1784.72,1214.36 1785.31,1214.36 1785.89,1214.36 1786.48,1214.36 1787.06,1214.36 1787.65,1214.36 1788.24,1214.36 1788.82,1214.36 1789.41,1214.36 1790,1214.36 1790.58,1214.36 1791.17,1214.36 1791.76,1214.36 1792.34,1214.36 1792.93,1214.36 1793.52,1214.36 1794.1,1214.36 1794.69,1214.36 1795.27,1214.36 1795.86,1214.36 1796.45,1214.36 1797.03,1214.36 1797.62,1214.36 1798.21,1214.36 1798.79,1214.36 1799.38,1214.36 1799.97,1214.36 1800.55,1214.36 1801.14,1214.36 1801.73,1214.36 1802.31,1214.36 1802.9,1214.36 1803.48,1214.36 1804.07,1214.36 1804.66,1214.36 1805.24,1214.36 1805.83,1214.36 1806.42,1214.36 1807,1214.36 1807.59,1214.36 1808.18,1214.36 1808.76,1214.36 1809.35,1214.36 1809.94,1214.36 1810.52,1214.36 1811.11,1214.36 1811.69,1214.36 1812.28,1214.36 1812.87,1214.36 1813.45,1214.36 1814.04,1214.36 1814.63,1214.36 1815.21,1214.36 1815.8,1214.36 1816.39,1214.36 1816.97,1214.36 1817.56,1214.36 1818.14,1214.36 1818.73,1214.36 1819.32,1214.36 1819.9,1214.36 1820.49,1214.36 1821.08,1214.36 1821.66,1214.36 1822.25,1214.36 1822.84,1214.36 1823.42,1214.36 1824.01,1214.36 1824.6,1214.36 1825.18,1214.36 1825.77,1214.36 1826.35,1214.36 1826.94,1214.36 1827.53,1214.36 1828.11,1214.36 1828.7,1214.36 1829.29,1214.36 1829.87,1214.36 1830.46,1214.36 1831.05,1214.36 1831.63,1214.36 1832.22,1214.36 1832.81,1214.36 1833.39,1214.36 1833.98,1214.36 1834.56,1214.36 1835.15,1214.36 1835.74,1214.36 1836.32,1214.36 1836.91,1214.36 1837.5,1214.36 1838.08,1214.36 1838.67,1214.36 1839.26,1214.36 1839.84,1214.36 1840.43,1214.36 1841.01,1214.36 1841.6,1214.36 1842.19,1214.36 1842.77,1214.36 1843.36,1214.36 1843.95,1214.36 1844.53,1214.36 1845.12,1214.36 1845.71,1214.36 1846.29,1214.36 1846.88,1214.36 1847.47,1214.36 1848.05,1214.36 1848.64,1214.36 1849.22,1214.36 1849.81,1214.36 1850.4,1214.36 1850.98,1214.36 1851.57,1214.36 1852.16,1214.36 1852.74,1214.36 1853.33,1214.36 1853.92,1214.36 1854.5,1214.36 1855.09,1214.36 1855.68,1214.36 1856.26,1214.36 1856.85,1214.36 1857.43,1214.36 1858.02,1214.36 1858.61,1214.36 1859.19,1214.36 1859.78,1214.36 1860.37,1214.36 1860.95,1214.36 1861.54,1214.36 1862.13,1214.36 1862.71,1214.36 1863.3,1214.36 1863.88,1214.36 1864.47,1214.36 1865.06,1214.36 1865.64,1214.36 1866.23,1214.36 1866.82,1214.36 1867.4,1214.36 1867.99,1214.36 1868.58,1214.36 1869.16,1214.36 1869.75,1214.36 1870.34,1214.36 1870.92,1214.36 1871.51,1214.36 1872.09,1214.36 1872.68,1214.36 1873.27,1214.36 1873.85,1214.36 1874.44,1214.36 1875.03,1214.36 1875.61,1214.36 1876.2,1214.36 1876.79,1214.36 1877.37,1214.36 1877.96,1214.36 1878.55,1214.36 1879.13,1214.36 1879.72,1214.36 1880.3,1214.36 1880.89,1214.36 1881.48,1214.36 1882.06,1214.36 1882.65,1214.36 1883.24,1214.36 1883.82,1214.36 1884.41,1214.36 1885,1214.36 1885.58,1214.36 1886.17,1214.36 1886.76,1214.36 1887.34,1214.36 1887.93,1214.36 1888.51,1214.36 1889.1,1214.36 1889.69,1214.36 1890.27,1214.36 1890.86,1214.36 1891.45,1214.36 1892.03,1214.36 1892.62,1214.36 1893.21,1214.36 1893.79,1214.36 1894.38,1214.36 1894.96,1214.36 1895.55,1214.36 1896.14,1214.36 1896.72,1214.36 1897.31,1214.36 1897.9,1214.36 1898.48,1214.36 1899.07,1214.36 1899.66,1214.36 1900.24,1214.36 1900.83,1214.36 1901.42,1214.36 1902,1214.36 1902.59,1214.36 1903.17,1214.36 1903.76,1214.36 1904.35,1214.36 1904.93,1214.36 1905.52,1214.36 1906.11,1214.36 1906.69,1214.36 1907.28,1214.36 1907.87,1214.36 1908.45,1214.36 1909.04,1214.36 1909.63,1214.36 1910.21,1214.36 1910.8,1214.36 1911.38,1214.36 1911.97,1214.36 1912.56,1214.36 1913.14,1214.36 1913.73,1214.36 1914.32,1214.36 1914.9,1214.36 1915.49,1214.36 1916.08,1214.36 1916.66,1214.36 1917.25,1214.36 1917.83,1214.36 1918.42,1214.36 1919.01,1214.36 1919.59,1214.36 1920.18,1214.36 1920.77,1214.36 1921.35,1214.36 1921.94,1214.36 1922.53,1214.36 1923.11,1214.36 1923.7,1214.36 1924.29,1214.36 1924.87,1214.36 1925.46,1214.36 1926.04,1214.36 1926.63,1214.36 1927.22,1214.36 1927.8,1214.36 1928.39,1214.36 1928.98,1214.36 1929.56,1214.36 1930.15,1214.36 1930.74,1214.36 1931.32,1214.36 1931.91,1214.36 1932.5,1214.36 1933.08,1214.36 1933.67,1214.36 1934.25,1214.36 1934.84,1214.36 1935.43,1214.36 1936.01,1214.36 1936.6,1214.36 1937.19,1214.36 1937.77,1214.36 1938.36,1214.36 1938.95,1214.36 1939.53,1214.36 1940.12,1214.36 1940.71,1214.36 1941.29,1214.36 1941.88,1214.36 1942.46,1214.36 1943.05,1214.36 1943.64,1214.36 1944.22,1214.36 1944.81,1214.36 1945.4,1214.36 1945.98,1214.36 1946.57,1214.36 1947.16,1214.36 1947.74,1214.36 1948.33,1214.36 1948.91,1214.36 1949.5,1214.36 1950.09,1214.36 1950.67,1214.36 1951.26,1214.36 1951.85,1214.36 1952.43,1214.36 1953.02,1214.36 1953.61,1214.36 1954.19,1214.36 1954.78,1214.36 1955.37,1214.36 1955.95,1214.36 1956.54,1214.36 1957.12,1214.36 1957.71,1214.36 1958.3,1214.36 1958.88,1214.36 1959.47,1214.36 1960.06,1214.36 1960.64,1214.36 1961.23,1214.36 1961.82,1214.36 1962.4,1214.36 1962.99,1214.36 1963.58,1214.36 1964.16,1214.36 1964.75,1214.36 1965.33,1214.36 1965.92,1214.36 1966.51,1214.36 1967.09,1214.36 1967.68,1214.36 1968.27,1214.36 1968.85,1214.36 1969.44,1214.36 1970.03,1214.36 1970.61,1214.36 1971.2,1214.36 1971.78,1214.36 1972.37,1214.36 1972.96,1214.36 1973.54,1214.36 1974.13,1214.36 1974.72,1214.36 1975.3,1214.36 1975.89,1214.36 1976.48,1214.36 1977.06,1214.36 1977.65,1214.36 1978.24,1214.36 1978.82,1214.36 1979.41,1214.36 1979.99,1214.36 1980.58,1214.36 1981.17,1214.36 1981.75,1214.36 1982.34,1214.36 1982.93,1214.36 1983.51,1214.36 1984.1,1214.36 1984.69,1214.36 1985.27,1214.36 1985.86,1214.36 1986.45,1214.36 1987.03,1214.36 1987.62,1214.36 1988.2,1214.36 1988.79,1214.36 1989.38,1214.36 1989.96,1214.36 1990.55,1214.36 1991.14,1214.36 1991.72,1214.36 1992.31,1214.36 1992.9,1214.36 1993.48,1214.36 1994.07,1214.36 1994.65,1214.36 1995.24,1214.36 1995.83,1214.36 1996.41,1214.36 1997,1214.36 1997.59,1214.36 1998.17,1214.36 1998.76,1214.36 1999.35,1214.36 1999.93,1214.36 2000.52,1214.36 2001.11,1214.36 2001.69,1214.36 2002.28,1214.36 2002.86,1214.36 2003.45,1214.36 2004.04,1214.36 2004.62,1214.36 2005.21,1214.36 2005.8,1214.36 2006.38,1214.36 2006.97,1214.36 2007.56,1214.36 2008.14,1214.36 2008.73,1214.36 2009.32,1214.36 2009.9,1214.36 2010.49,1214.36 2011.07,1214.36 2011.66,1214.36 2012.25,1214.36 2012.83,1214.36 2013.42,1214.36 2014.01,1214.36 2014.59,1214.36 2015.18,1214.36 2015.77,1214.36 2016.35,1214.36 2016.94,1214.36 2017.53,1214.36 2018.11,1214.36 2018.7,1214.36 2019.28,1214.36 2019.87,1214.36 2020.46,1214.36 2021.04,1214.36 2021.63,1214.36 2022.22,1214.36 2022.8,1214.36 2023.39,1214.36 2023.98,1214.36 2024.56,1214.36 2025.15,1214.36 2025.73,1214.36 2026.32,1214.36 2026.91,1214.36 2027.49,1214.36 2028.08,1214.36 2028.67,1214.36 2029.25,1214.36 2029.84,1214.36 2030.43,1214.36 2031.01,1214.36 2031.6,1214.36 2032.19,1214.36 2032.77,1214.36 2033.36,1214.36 2033.94,1214.36 2034.53,1214.36 2035.12,1214.36 2035.7,1214.36 2036.29,1214.36 2036.88,1214.36 2037.46,1214.36 2038.05,1214.36 2038.64,1214.36 2039.22,1214.36 2039.81,1214.36 2040.4,1214.36 2040.98,1214.36 2041.57,1214.36 2042.15,1214.36 2042.74,1214.36 2043.33,1214.36 2043.91,1214.36 2044.5,1214.36 2045.09,1214.36 2045.67,1214.36 2046.26,1214.36 2046.85,1214.36 2047.43,1214.36 2048.02,1214.36 2048.6,1214.36 2049.19,1214.36 2049.78,1214.36 2050.36,1214.36 2050.95,1214.36 2051.54,1214.36 2052.12,1214.36 2052.71,1214.36 2053.3,1214.36 2053.88,1214.36 2054.47,1214.36 2055.06,1214.36 2055.64,1214.36 2056.23,1214.36 2056.81,1214.36 2057.4,1214.36 2057.99,1214.36 2058.57,1214.36 2059.16,1214.36 2059.75,1214.36 2060.33,1214.36 2060.92,1214.36 2061.51,1214.36 2062.09,1214.36 2062.68,1214.36 2063.27,1214.36 2063.85,1214.36 2064.44,1214.36 2065.02,1214.36 2065.61,1214.36 2066.2,1214.36 2066.78,1214.36 2067.37,1214.36 2067.96,1214.36 2068.54,1214.36 2069.13,1214.36 2069.72,1214.36 2070.3,1214.36 2070.89,1214.36 2071.48,1214.36 2072.06,1214.36 2072.65,1214.36 2073.23,1214.36 2073.82,1214.36 2074.41,1214.36 2074.99,1214.36 2075.58,1214.36 2076.17,1214.36 2076.75,1214.36 2077.34,1214.36 2077.93,1214.36 2078.51,1214.36 2079.1,1214.36 2079.68,1214.36 2080.27,1214.36 2080.86,1214.36 2081.44,1214.36 2082.03,1214.36 2082.62,1214.36 2083.2,1214.36 2083.79,1214.36 2084.38,1214.36 2084.96,1214.36 2085.55,1214.36 2086.14,1214.36 2086.72,1214.36 2087.31,1214.36 2087.89,1214.36 2088.48,1214.36 2089.07,1214.36 2089.65,1214.36 2090.24,1214.36 2090.83,1214.36 2091.41,1214.36 2092,1214.36 2092.59,1214.36 2093.17,1214.36 2093.76,1214.36 2094.35,1214.36 2094.93,1214.36 2095.52,1214.36 2096.1,1214.36 2096.69,1214.36 2097.28,1214.36 2097.86,1214.36 2098.45,1214.36 2099.04,1214.36 2099.62,1214.36 2100.21,1214.36 2100.8,1214.36 2101.38,1214.36 2101.97,1214.36 2102.55,1214.36 2103.14,1214.36 2103.73,1214.36 2104.31,1214.36 2104.9,1214.36 2105.49,1214.36 2106.07,1214.36 2106.66,1214.36 2107.25,1214.36 2107.83,1214.36 2108.42,1214.36 2109.01,1214.36 2109.59,1214.36 2110.18,1214.36 2110.76,1214.36 2111.35,1214.36 2111.94,1214.36 2112.52,1214.36 2113.11,1214.36 2113.7,1214.36 2114.28,1214.36 2114.87,1214.36 2115.46,1214.36 2116.04,1214.36 2116.63,1214.36 2117.22,1214.36 2117.8,1214.36 2118.39,1214.36 2118.97,1214.36 2119.56,1214.36 2120.15,1214.36 2120.73,1214.36 2121.32,1214.36 2121.91,1214.36 2122.49,1214.36 2123.08,1214.36 2123.67,1214.36 2124.25,1214.36 2124.84,1214.36 2125.42,1214.36 2126.01,1214.36 2126.6,1214.36 2127.18,1214.36 2127.77,1214.36 2128.36,1214.36 2128.94,1214.36 2129.53,1214.36 2130.12,1214.36 2130.7,1214.36 2131.29,1214.36 2131.88,1214.36 2132.46,1214.36 2133.05,1214.36 2133.63,1214.36 2134.22,1214.36 2134.81,1214.36 2135.39,1214.36 2135.98,1214.36 2136.57,1214.36 2137.15,1214.36 2137.74,1214.36 2138.33,1214.36 2138.91,1214.36 2139.5,1214.36 2140.09,1214.36 2140.67,1214.36 2141.26,1214.36 2141.84,1214.36 2142.43,1214.36 2143.02,1214.36 2143.6,1214.36 2144.19,1214.36 2144.78,1214.36 2145.36,1214.36 2145.95,1214.36 2146.54,1214.36 2147.12,1214.36 2147.71,1214.36 2148.3,1214.36 2148.88,1214.36 2149.47,1214.36 2150.05,1214.36 2150.64,1214.36 2151.23,1214.36 2151.81,1214.36 2152.4,1214.36 2152.99,1214.36 2153.57,1214.36 2154.16,1214.36 2154.75,1214.36 2155.33,1214.36 2155.92,1214.36 2156.5,1214.36 2157.09,1214.36 2157.68,1214.36 2158.26,1214.36 \"/>\n<path clip-path=\"url(#clip972)\" d=\"M986.025 1214.23 L986.612 1214.23 L987.198 1214.23 L987.785 1214.23 L988.371 1214.23 L988.957 1214.23 L989.544 1214.23 L990.13 1214.23 L990.717 1214.23 L991.303 1214.23 L991.889 1214.23 L992.476 1214.23 L993.062 1214.23 L993.649 1214.23 L994.235 1214.23 L994.822 1214.23 L995.408 1214.23 L995.994 1214.23 L996.581 1214.23 L997.167 1214.23 L997.754 1214.23 L998.34 1214.23 L998.926 1214.23 L999.513 1214.23 L1000.1 1214.23 L1000.69 1214.23 L1001.27 1214.23 L1001.86 1214.23 L1002.44 1214.23 L1003.03 1214.23 L1003.62 1214.23 L1004.2 1214.23 L1004.79 1214.23 L1005.38 1214.23 L1005.96 1214.23 L1006.55 1214.23 L1007.14 1214.23 L1007.72 1214.23 L1008.31 1214.23 L1008.9 1214.23 L1009.48 1214.23 L1010.07 1214.23 L1010.65 1214.23 L1011.24 1214.23 L1011.83 1214.23 L1012.41 1214.23 L1013 1214.23 L1013.59 1214.23 L1014.17 1214.23 L1014.76 1214.23 L1015.35 1214.23 L1015.93 1214.23 L1016.52 1214.23 L1017.11 1214.23 L1017.69 1214.23 L1018.28 1214.23 L1018.86 1214.23 L1019.45 1214.23 L1020.04 1214.23 L1020.62 1214.23 L1021.21 1214.23 L1021.8 1214.23 L1022.38 1214.23 L1022.97 1214.23 L1023.56 1214.23 L1024.14 1214.23 L1024.73 1214.23 L1025.32 1214.23 L1025.9 1214.23 L1026.49 1214.23 L1027.07 1214.23 L1027.66 1214.23 L1028.25 1214.23 L1028.83 1214.23 L1029.42 1214.23 L1030.01 1214.23 L1030.59 1214.23 L1031.18 1214.23 L1031.77 1214.23 L1032.35 1214.23 L1032.94 1214.23 L1033.52 1214.23 L1034.11 1214.23 L1034.7 1214.23 L1035.28 1214.23 L1035.87 1214.23 L1036.46 1214.23 L1037.04 1214.23 L1037.63 1214.23 L1038.22 1214.23 L1038.8 1214.23 L1039.39 1214.23 L1039.98 1214.23 L1040.56 1214.23 L1041.15 1214.23 L1041.73 1214.23 L1042.32 1214.23 L1042.91 1214.23 L1043.49 1214.23 L1044.08 1214.23 L1044.67 1214.23 L1045.25 1214.23 L1045.84 1214.23 L1046.43 1214.23 L1047.01 1214.23 L1047.6 1214.23 L1048.19 1214.23 L1048.77 1214.23 L1049.36 1214.23 L1049.94 1214.23 L1050.53 1214.23 L1051.12 1214.23 L1051.7 1214.23 L1052.29 1214.23 L1052.88 1214.23 L1053.46 1214.23 L1054.05 1214.23 L1054.64 1214.23 L1055.22 1214.23 L1055.81 1214.23 L1056.39 1214.23 L1056.98 1214.23 L1057.57 1214.23 L1058.15 1214.23 L1058.74 1214.23 L1059.33 1214.23 L1059.91 1214.23 L1060.5 1214.23 L1061.09 1214.23 L1061.67 1214.23 L1062.26 1214.23 L1062.85 1214.23 L1063.43 1214.23 L1064.02 1214.23 L1064.6 1214.23 L1065.19 1214.23 L1065.78 1214.23 L1066.36 1214.23 L1066.95 1214.23 L1067.54 1214.23 L1068.12 1214.23 L1068.71 1214.23 L1069.3 1214.23 L1069.88 1214.23 L1070.47 1214.23 L1071.06 1214.23 L1071.64 1214.23 L1072.23 1214.23 L1072.81 1214.23 L1073.4 1214.23 L1073.99 1214.23 L1074.57 1214.23 L1075.16 1214.23 L1075.75 1214.23 L1076.33 1214.23 L1076.92 1214.23 L1077.51 1214.23 L1078.09 1214.23 L1078.68 1214.23 L1079.26 1214.23 L1079.85 1214.23 L1080.44 1214.23 L1081.02 1214.23 L1081.61 1214.23 L1082.2 1214.23 L1082.78 1214.23 L1083.37 1214.23 L1083.96 1214.23 L1084.54 1214.23 L1085.13 1214.23 L1085.72 1214.23 L1086.3 1214.23 L1086.89 1214.23 L1087.47 1214.23 L1088.06 1214.23 L1088.65 1214.23 L1089.23 1214.23 L1089.82 1214.23 L1090.41 1214.23 L1090.99 1214.23 L1091.58 1214.23 L1092.17 1214.23 L1092.75 1214.23 L1093.34 1214.23 L1093.93 1214.23 L1094.51 1214.23 L1095.1 1214.23 L1095.68 1214.23 L1096.27 1214.23 L1096.86 1214.23 L1097.44 1214.23 L1098.03 1214.23 L1098.62 1214.23 L1099.2 1214.23 L1099.79 1214.23 L1100.38 1214.23 L1100.96 1214.23 L1101.55 1214.23 L1102.14 1214.23 L1102.72 1214.23 L1103.31 1214.23 L1103.89 1214.23 L1104.48 1214.23 L1105.07 1214.23 L1105.65 1214.23 L1106.24 1214.23 L1106.83 1214.23 L1107.41 1214.23 L1108 1214.23 L1108.59 1214.23 L1109.17 1214.23 L1109.76 1214.23 L1110.34 1214.23 L1110.93 1214.23 L1111.52 1214.23 L1112.1 1214.23 L1112.69 1214.23 L1113.28 1214.23 L1113.86 1214.23 L1114.45 1214.23 L1115.04 1214.23 L1115.62 1214.23 L1116.21 1214.23 L1116.8 1214.23 L1117.38 1214.23 L1117.97 1214.23 L1118.55 1214.23 L1119.14 1214.23 L1119.73 1214.23 L1120.31 1214.23 L1120.9 1214.23 L1121.49 1214.23 L1122.07 1214.23 L1122.66 1214.23 L1123.25 1214.23 L1123.83 1214.23 L1124.42 1214.23 L1125.01 1214.23 L1125.59 1214.23 L1126.18 1214.23 L1126.76 1214.23 L1127.35 1214.23 L1127.94 1214.23 L1128.52 1214.23 L1129.11 1214.23 L1129.7 1214.23 L1130.28 1214.23 L1130.87 1214.23 L1131.46 1214.23 L1132.04 1214.23 L1132.63 1214.23 L1133.21 1214.23 L1133.8 1214.23 L1134.39 1214.23 L1134.97 1214.23 L1135.56 1214.23 L1136.15 1214.23 L1136.73 1214.23 L1137.32 1214.23 L1137.91 1214.23 L1138.49 1214.23 L1139.08 1214.23 L1139.67 1214.23 L1140.25 1214.23 L1140.84 1214.23 L1141.42 1214.23 L1142.01 1214.23 L1142.6 1214.23 L1143.18 1214.23 L1143.77 1214.23 L1144.36 1214.23 L1144.94 1214.23 L1145.53 1214.23 L1146.12 1214.23 L1146.7 1214.23 L1147.29 1214.23 L1147.88 1214.23 L1148.46 1214.23 L1149.05 1214.23 L1149.63 1214.23 L1150.22 1214.23 L1150.81 1214.23 L1151.39 1214.23 L1151.98 1214.23 L1152.57 1214.23 L1153.15 1214.23 L1153.74 1214.23 L1154.33 1214.23 L1154.91 1214.23 L1155.5 1214.23 L1156.09 1214.23 L1156.67 1214.23 L1157.26 1214.23 L1157.84 1214.23 L1158.43 1214.23 L1159.02 1214.23 L1159.6 1214.23 L1160.19 1214.23 L1160.78 1214.23 L1161.36 1214.23 L1161.95 1214.23 L1162.54 1214.23 L1163.12 1214.23 L1163.71 1214.23 L1164.29 1214.23 L1164.88 1214.23 L1165.47 1214.23 L1166.05 1214.23 L1166.64 1214.23 L1167.23 1214.23 L1167.81 1214.23 L1168.4 1214.23 L1168.99 1214.23 L1169.57 1214.23 L1170.16 1214.23 L1170.75 1214.23 L1171.33 1214.23 L1171.92 1214.23 L1172.5 1214.23 L1173.09 1214.23 L1173.68 1214.23 L1174.26 1214.23 L1174.85 1214.23 L1175.44 1214.23 L1176.02 1214.23 L1176.61 1214.23 L1177.2 1214.23 L1177.78 1214.23 L1178.37 1214.23 L1178.96 1214.23 L1179.54 1214.23 L1180.13 1214.23 L1180.71 1214.23 L1181.3 1214.23 L1181.89 1214.23 L1182.47 1214.23 L1183.06 1214.23 L1183.65 1214.23 L1184.23 1214.23 L1184.82 1214.23 L1185.41 1214.23 L1185.99 1214.23 L1186.58 1214.23 L1187.16 1214.23 L1187.75 1214.23 L1188.34 1214.23 L1188.92 1214.23 L1189.51 1214.23 L1190.1 1214.23 L1190.68 1214.23 L1191.27 1214.23 L1191.86 1214.23 L1192.44 1214.23 L1193.03 1214.23 L1193.62 1214.23 L1194.2 1214.23 L1194.79 1214.23 L1195.37 1214.23 L1195.96 1214.23 L1196.55 1214.23 L1197.13 1214.23 L1197.72 1214.23 L1198.31 1214.23 L1198.89 1214.23 L1199.48 1214.23 L1200.07 1214.23 L1200.65 1214.23 L1201.24 1214.23 L1201.83 1214.23 L1202.41 1214.23 L1203 1214.23 L1203.58 1214.23 L1204.17 1214.23 L1204.76 1214.23 L1205.34 1214.23 L1205.93 1214.23 L1206.52 1214.23 L1207.1 1214.23 L1207.69 1214.23 L1208.28 1214.23 L1208.86 1214.23 L1209.45 1214.23 L1210.03 1214.23 L1210.62 1214.23 L1211.21 1214.23 L1211.79 1214.23 L1212.38 1214.23 L1212.97 1214.23 L1213.55 1214.23 L1214.14 1214.23 L1214.73 1214.23 L1215.31 1214.23 L1215.9 1214.23 L1216.49 1214.23 L1217.07 1214.23 L1217.66 1214.23 L1218.24 1214.23 L1218.83 1214.23 L1219.42 1214.23 L1220 1214.23 L1220.59 1214.23 L1221.18 1214.23 L1221.76 1214.23 L1222.35 1214.23 L1222.94 1214.23 L1223.52 1214.23 L1224.11 1214.23 L1224.7 1214.23 L1225.28 1214.23 L1225.87 1214.23 L1226.45 1214.23 L1227.04 1214.23 L1227.63 1214.23 L1228.21 1214.23 L1228.8 1214.23 L1229.39 1214.23 L1229.97 1214.23 L1230.56 1214.23 L1231.15 1214.23 L1231.73 1214.23 L1232.32 1214.23 L1232.91 1214.23 L1233.49 1214.23 L1234.08 1214.23 L1234.66 1214.23 L1235.25 1214.23 L1235.84 1214.23 L1236.42 1214.23 L1237.01 1214.23 L1237.6 1214.23 L1238.18 1214.23 L1238.77 1214.23 L1239.36 1214.23 L1239.94 1214.23 L1240.53 1214.23 L1241.11 1214.23 L1241.7 1214.23 L1242.29 1214.23 L1242.87 1214.23 L1243.46 1214.23 L1244.05 1214.23 L1244.63 1214.23 L1245.22 1214.23 L1245.81 1214.23 L1246.39 1214.23 L1246.98 1214.23 L1247.57 1214.23 L1248.15 1214.23 L1248.74 1214.23 L1249.32 1214.23 L1249.91 1214.23 L1250.5 1214.23 L1251.08 1214.23 L1251.67 1214.23 L1252.26 1214.23 L1252.84 1214.23 L1253.43 1214.23 L1254.02 1214.23 L1254.6 1214.23 L1255.19 1214.23 L1255.78 1214.23 L1256.36 1214.23 L1256.95 1214.23 L1257.53 1214.23 L1258.12 1214.23 L1258.71 1214.23 L1259.29 1214.23 L1259.88 1214.23 L1260.47 1214.23 L1261.05 1214.23 L1261.64 1214.23 L1262.23 1214.23 L1262.81 1214.23 L1263.4 1214.23 L1263.98 1214.23 L1264.57 1214.23 L1265.16 1214.23 L1265.74 1214.23 L1266.33 1214.23 L1266.92 1214.23 L1267.5 1214.23 L1268.09 1214.23 L1268.68 1214.23 L1269.26 1214.23 L1269.85 1214.23 L1270.44 1214.23 L1271.02 1214.23 L1271.61 1214.23 L1272.19 1214.23 L1272.78 1214.23 L1273.37 1214.23 L1273.95 1214.23 L1274.54 1214.23 L1275.13 1214.23 L1275.71 1214.23 L1276.3 1214.23 L1276.89 1214.23 L1277.47 1214.23 L1278.06 1214.23 L1278.65 1214.23 L1279.23 1214.23 L1279.82 1214.23 L1280.4 1214.23 L1280.99 1214.23 L1281.58 1214.23 L1282.16 1214.23 L1282.75 1214.23 L1283.34 1214.23 L1283.92 1214.23 L1284.51 1214.23 L1285.1 1214.23 L1285.68 1214.23 L1286.27 1214.23 L1286.86 1214.23 L1287.44 1214.23 L1288.03 1214.23 L1288.61 1214.23 L1289.2 1214.23 L1289.79 1214.23 L1290.37 1214.23 L1290.96 1214.23 L1291.55 1214.23 L1292.13 1214.23 L1292.72 1214.23 L1293.31 1214.23 L1293.89 1214.23 L1294.48 1214.23 L1295.06 1214.23 L1295.65 1214.23 L1296.24 1214.23 L1296.82 1214.23 L1297.41 1214.23 L1298 1214.23 L1298.58 1214.23 L1299.17 1214.23 L1299.76 1214.23 L1300.34 1214.23 L1300.93 1214.23 L1301.52 1214.23 L1302.1 1214.23 L1302.69 1214.23 L1303.27 1214.23 L1303.86 1214.23 L1304.45 1214.23 L1305.03 1214.23 L1305.62 1214.23 L1306.21 1214.23 L1306.79 1214.23 L1307.38 1214.23 L1307.97 1214.23 L1308.55 1214.23 L1309.14 1214.23 L1309.73 1214.23 L1310.31 1214.23 L1310.9 1214.23 L1311.48 1214.23 L1312.07 1214.23 L1312.66 1214.23 L1313.24 1214.23 L1313.83 1214.23 L1314.42 1214.23 L1315 1214.23 L1315.59 1214.23 L1316.18 1214.23 L1316.76 1214.23 L1317.35 1214.23 L1317.93 1214.23 L1318.52 1214.23 L1319.11 1214.23 L1319.69 1214.23 L1320.28 1214.23 L1320.87 1214.23 L1321.45 1214.23 L1322.04 1214.23 L1322.63 1214.23 L1323.21 1214.23 L1323.8 1214.23 L1324.39 1214.23 L1324.97 1214.23 L1325.56 1214.23 L1326.14 1214.23 L1326.73 1214.23 L1327.32 1214.23 L1327.9 1214.23 L1328.49 1214.23 L1329.08 1214.23 L1329.66 1214.23 L1330.25 1214.23 L1330.84 1214.23 L1331.42 1214.23 L1332.01 1214.23 L1332.6 1214.23 L1333.18 1214.23 L1333.77 1214.23 L1334.35 1214.23 L1334.94 1214.23 L1335.53 1214.23 L1336.11 1214.23 L1336.7 1214.23 L1337.29 1214.23 L1337.87 1214.23 L1338.46 1214.23 L1339.05 1214.23 L1339.63 1214.23 L1340.22 1214.23 L1340.8 1214.23 L1341.39 1214.23 L1341.98 1214.23 L1342.56 1214.23 L1343.15 1214.23 L1343.74 1214.23 L1344.32 1214.23 L1344.91 1214.23 L1345.5 1214.23 L1346.08 1214.23 L1346.67 1214.23 L1347.26 1214.23 L1347.84 1214.23 L1348.43 1214.23 L1349.01 1214.23 L1349.6 1214.23 L1350.19 1214.23 L1350.77 1214.23 L1351.36 1214.23 L1351.95 1214.23 L1352.53 1214.23 L1353.12 1214.23 L1353.71 1214.23 L1354.29 1214.23 L1354.88 1214.23 L1355.47 1214.23 L1356.05 1214.23 L1356.64 1214.23 L1357.22 1214.23 L1357.81 1214.23 L1358.4 1214.23 L1358.98 1214.23 L1359.57 1214.23 L1360.16 1214.23 L1360.74 1214.23 L1361.33 1214.23 L1361.92 1214.23 L1362.5 1214.23 L1363.09 1214.23 L1363.68 1214.23 L1364.26 1214.23 L1364.85 1214.23 L1365.43 1214.23 L1366.02 1214.23 L1366.61 1214.23 L1367.19 1214.23 L1367.78 1214.23 L1368.37 1214.23 L1368.95 1214.23 L1369.54 1214.23 L1370.13 1214.23 L1370.71 1214.23 L1371.3 1214.23 L1371.88 1214.23 L1372.47 1214.23 L1373.06 1214.23 L1373.64 1214.23 L1374.23 1214.23 L1374.82 1214.23 L1375.4 1214.23 L1375.99 1214.23 L1376.58 1214.23 L1377.16 1214.23 L1377.75 1214.23 L1378.34 1214.23 L1378.92 1214.23 L1379.51 1214.23 L1380.09 1214.23 L1380.68 1214.23 L1381.27 1214.23 L1381.85 1214.23 L1382.44 1214.23 L1383.03 1214.23 L1383.61 1214.23 L1384.2 1214.23 L1384.79 1214.23 L1385.37 1214.23 L1385.96 1214.23 L1386.55 1214.23 L1387.13 1214.23 L1387.72 1214.23 L1388.3 1214.23 L1388.89 1214.23 L1389.48 1214.23 L1390.06 1214.23 L1390.65 1214.23 L1391.24 1214.23 L1391.82 1214.23 L1392.41 1214.23 L1393 1214.23 L1393.58 1214.23 L1394.17 1214.23 L1394.75 1214.23 L1395.34 1214.23 L1395.93 1214.23 L1396.51 1214.23 L1397.1 1214.23 L1397.69 1214.23 L1398.27 1214.23 L1398.86 1214.23 L1399.45 1214.23 L1400.03 1214.23 L1400.62 1214.23 L1401.21 1214.23 L1401.79 1214.23 L1402.38 1214.23 L1402.96 1214.23 L1403.55 1214.23 L1404.14 1214.23 L1404.72 1214.23 L1405.31 1214.23 L1405.9 1214.23 L1406.48 1214.23 L1407.07 1214.23 L1407.66 1214.23 L1408.24 1214.23 L1408.83 1214.23 L1409.42 1214.23 L1410 1214.23 L1410.59 1214.23 L1411.17 1214.23 L1411.76 1214.23 L1412.35 1214.23 L1412.93 1214.23 L1413.52 1214.23 L1414.11 1214.23 L1414.69 1214.23 L1415.28 1214.23 L1415.87 1214.23 L1416.45 1214.23 L1417.04 1214.23 L1417.63 1214.23 L1418.21 1214.23 L1418.8 1214.23 L1419.38 1214.23 L1419.97 1214.23 L1420.56 1214.23 L1421.14 1214.23 L1421.73 1214.23 L1422.32 1214.23 L1422.9 1214.23 L1423.49 1214.23 L1424.08 1214.23 L1424.66 1214.23 L1425.25 1214.23 L1425.83 1214.23 L1426.42 1214.23 L1427.01 1214.23 L1427.59 1214.23 L1428.18 1214.23 L1428.77 1214.23 L1429.35 1214.23 L1429.94 1214.23 L1430.53 1214.23 L1431.11 1214.23 L1431.7 1214.23 L1432.29 1214.23 L1432.87 1214.23 L1433.46 1214.23 L1434.04 1214.23 L1434.63 1214.23 L1435.22 1214.23 L1435.8 1214.23 L1436.39 1214.23 L1436.98 1214.23 L1437.56 1214.23 L1438.15 1214.23 L1438.74 1214.23 L1439.32 1214.23 L1439.91 1214.23 L1440.5 1214.23 L1441.08 1214.23 L1441.67 1214.23 L1442.25 1214.23 L1442.84 1214.23 L1443.43 1214.23 L1444.01 1214.23 L1444.6 1214.23 L1445.19 1214.23 L1445.77 1214.23 L1446.36 1214.23 L1446.95 1214.23 L1447.53 1214.23 L1448.12 1214.23 L1448.7 1214.23 L1449.29 1214.23 L1449.88 1214.23 L1450.46 1214.23 L1451.05 1214.23 L1451.64 1214.23 L1452.22 1214.23 L1452.81 1214.23 L1453.4 1214.23 L1453.98 1214.23 L1454.57 1214.23 L1455.16 1214.23 L1455.74 1214.23 L1456.33 1214.23 L1456.91 1214.23 L1457.5 1214.23 L1458.09 1214.23 L1458.67 1214.23 L1459.26 1214.23 L1459.85 1214.23 L1460.43 1214.23 L1461.02 1214.23 L1461.61 1214.23 L1462.19 1214.23 L1462.78 1214.23 L1463.37 1214.23 L1463.95 1214.23 L1464.54 1214.23 L1465.12 1214.23 L1465.71 1214.23 L1466.3 1214.23 L1466.88 1214.23 L1467.47 1214.23 L1468.06 1214.23 L1468.64 1214.23 L1469.23 1214.23 L1469.82 1214.23 L1470.4 1214.23 L1470.99 1214.23 L1471.57 1214.23 L1472.16 1214.23 L1472.75 1214.23 L1473.33 1214.23 L1473.92 1214.23 L1474.51 1214.23 L1475.09 1214.23 L1475.68 1214.23 L1476.27 1214.23 L1476.85 1214.23 L1477.44 1214.23 L1478.03 1214.23 L1478.61 1214.23 L1479.2 1214.23 L1479.78 1214.23 L1480.37 1214.23 L1480.96 1214.23 L1481.54 1214.23 L1482.13 1214.23 L1482.72 1214.23 L1483.3 1214.23 L1483.89 1214.23 L1484.48 1214.23 L1485.06 1214.23 L1485.65 1214.23 L1486.24 1214.23 L1486.82 1214.23 L1487.41 1214.23 L1487.99 1214.23 L1488.58 1214.23 L1489.17 1214.23 L1489.75 1214.23 L1490.34 1214.23 L1490.93 1214.23 L1491.51 1214.23 L1492.1 1214.23 L1492.69 1214.23 L1493.27 1214.23 L1493.86 1214.23 L1494.45 1214.23 L1495.03 1214.23 L1495.62 1214.23 L1496.2 1214.23 L1496.79 1214.23 L1497.38 1214.23 L1497.96 1214.23 L1498.55 1214.23 L1499.14 1214.23 L1499.72 1214.23 L1500.31 1214.23 L1500.9 1214.23 L1501.48 1214.23 L1502.07 1214.23 L1502.65 1214.23 L1503.24 1214.23 L1503.83 1214.23 L1504.41 1214.23 L1505 1214.23 L1505.59 1214.23 L1506.17 1214.23 L1506.76 1214.23 L1507.35 1214.23 L1507.93 1214.23 L1508.52 1214.23 L1509.11 1214.23 L1509.69 1214.23 L1510.28 1214.23 L1510.86 1214.23 L1511.45 1214.23 L1512.04 1214.23 L1512.62 1214.23 L1513.21 1214.23 L1513.8 1214.23 L1514.38 1214.23 L1514.97 1214.23 L1515.56 1214.23 L1516.14 1214.23 L1516.73 1214.23 L1517.32 1214.23 L1517.9 1214.23 L1518.49 1214.23 L1519.07 1214.23 L1519.66 1214.23 L1520.25 1214.23 L1520.83 1214.23 L1521.42 1214.23 L1522.01 1214.23 L1522.59 1214.23 L1523.18 1214.23 L1523.77 1214.23 L1524.35 1214.23 L1524.94 1214.23 L1525.52 1214.23 L1526.11 1214.23 L1526.7 1214.23 L1527.28 1214.23 L1527.87 1214.23 L1528.46 1214.23 L1529.04 1214.23 L1529.63 1214.23 L1530.22 1214.23 L1530.8 1214.23 L1531.39 1214.23 L1531.98 1214.23 L1532.56 1214.23 L1533.15 1214.23 L1533.73 1214.23 L1534.32 1214.23 L1534.91 1214.23 L1535.49 1214.23 L1536.08 1214.23 L1536.67 1214.23 L1537.25 1214.23 L1537.84 1214.23 L1538.43 1214.23 L1539.01 1214.23 L1539.6 1214.23 L1540.19 1214.23 L1540.77 1214.23 L1541.36 1214.23 L1541.94 1214.23 L1542.53 1214.23 L1543.12 1214.23 L1543.7 1214.23 L1544.29 1214.23 L1544.88 1214.23 L1545.46 1214.23 L1546.05 1214.23 L1546.64 1214.23 L1547.22 1214.23 L1547.81 1214.23 L1548.4 1214.23 L1548.98 1214.23 L1549.57 1214.23 L1550.15 1214.23 L1550.74 1214.23 L1551.33 1214.23 L1551.91 1214.23 L1552.5 1214.23 L1553.09 1214.23 L1553.67 1214.23 L1554.26 1214.23 L1554.85 1214.23 L1555.43 1214.23 L1556.02 1214.23 L1556.6 1214.23 L1557.19 1214.23 L1557.78 1214.23 L1558.36 1214.23 L1558.95 1214.23 L1559.54 1214.23 L1560.12 1214.23 L1560.71 1214.23 L1561.3 1214.23 L1561.88 1214.23 L1562.47 1214.23 L1563.06 1214.23 L1563.64 1214.23 L1564.23 1214.23 L1564.81 1214.23 L1565.4 1214.23 L1565.99 1214.23 L1566.57 1214.23 L1567.16 1214.23 L1567.75 1214.23 L1568.33 1214.23 L1568.92 1214.23 L1569.51 1214.23 L1570.09 1214.23 L1570.68 1214.23 L1571.27 1214.23 L1571.85 1214.23 L1572.44 1214.23 L1573.02 1214.23 L1573.61 1214.23 L1574.2 1214.23 L1574.78 1214.23 L1575.37 1214.23 L1575.96 1214.23 L1576.54 1214.23 L1577.13 1214.23 L1577.72 1214.23 L1578.3 1214.23 L1578.89 1214.23 L1579.47 1214.23 L1580.06 1214.23 L1580.65 1214.23 L1581.23 1214.23 L1581.82 1214.23 L1582.41 1214.23 L1582.99 1214.23 L1583.58 1214.23 L1584.17 1214.23 L1584.75 1214.23 L1585.34 1214.23 L1585.93 1214.23 L1586.51 1214.23 L1587.1 1214.23 L1587.68 1214.23 L1588.27 1214.23 L1588.86 1214.23 L1589.44 1214.23 L1590.03 1214.23 L1590.62 1214.23 L1591.2 1214.23 L1591.79 1214.23 L1592.38 1214.23 L1592.96 1214.23 L1593.55 1214.23 L1594.14 1214.23 L1594.72 1214.23 L1595.31 1214.23 L1595.89 1214.23 L1596.48 1214.23 L1597.07 1214.23 L1597.65 1214.23 L1598.24 1214.23 L1598.83 1214.23 L1599.41 1214.23 L1600 1214.23 L1600.59 1214.23 L1601.17 1214.23 L1601.76 1214.23 L1602.34 1214.23 L1602.93 1214.23 L1603.52 1214.23 L1604.1 1214.23 L1604.69 1214.23 L1605.28 1214.23 L1605.86 1214.23 L1606.45 1214.23 L1607.04 1214.23 L1607.62 1214.23 L1608.21 1214.23 L1608.8 1214.23 L1609.38 1214.23 L1609.97 1214.23 L1610.55 1214.23 L1611.14 1214.23 L1611.73 1214.23 L1612.31 1214.23 L1612.9 1214.23 L1613.49 1214.23 L1614.07 1214.23 L1614.66 1214.23 L1615.25 1214.23 L1615.83 1214.23 L1616.42 1214.23 L1617.01 1214.23 L1617.59 1214.23 L1618.18 1214.23 L1618.76 1214.23 L1619.35 1214.23 L1619.94 1214.23 L1620.52 1214.23 L1621.11 1214.23 L1621.7 1214.23 L1622.28 1214.23 L1622.87 1214.23 L1623.46 1214.23 L1624.04 1214.23 L1624.63 1214.23 L1625.22 1214.23 L1625.8 1214.23 L1626.39 1214.23 L1626.97 1214.23 L1627.56 1214.23 L1628.15 1214.23 L1628.73 1214.23 L1629.32 1214.23 L1629.91 1214.23 L1630.49 1214.23 L1631.08 1214.23 L1631.67 1214.23 L1632.25 1214.23 L1632.84 1214.23 L1633.42 1214.23 L1634.01 1214.23 L1634.6 1214.23 L1635.18 1214.23 L1635.77 1214.23 L1636.36 1214.23 L1636.94 1214.23 L1637.53 1214.23 L1638.12 1214.23 L1638.7 1214.23 L1639.29 1214.23 L1639.88 1214.23 L1640.46 1214.23 L1641.05 1214.23 L1641.63 1214.23 L1642.22 1214.23 L1642.81 1214.23 L1643.39 1214.23 L1643.98 1214.23 L1644.57 1214.23 L1645.15 1214.23 L1645.74 1214.23 L1646.33 1214.23 L1646.91 1214.23 L1647.5 1214.23 L1648.09 1214.23 L1648.67 1214.23 L1649.26 1214.23 L1649.84 1214.23 L1650.43 1214.23 L1651.02 1214.23 L1651.6 1214.23 L1652.19 1214.23 L1652.78 1214.23 L1653.36 1214.23 L1653.95 1214.23 L1654.54 1214.23 L1655.12 1214.23 L1655.71 1214.23 L1656.29 1214.23 L1656.88 1214.23 L1657.47 1214.23 L1658.05 1214.23 L1658.64 1214.23 L1659.23 1214.23 L1659.81 1214.23 L1660.4 1214.23 L1660.99 1214.23 L1661.57 1214.23 L1662.16 1214.23 L1662.75 1214.23 L1663.33 1214.23 L1663.92 1214.23 L1664.5 1214.23 L1665.09 1214.23 L1665.68 1214.23 L1666.26 1214.23 L1666.85 1214.23 L1667.44 1214.23 L1668.02 1214.23 L1668.61 1214.23 L1669.2 1214.23 L1669.78 1214.23 L1670.37 1214.23 L1670.96 1214.23 L1671.54 1214.23 L1672.13 1214.23 L1672.71 1214.23 L1673.3 1214.23 L1673.89 1214.23 L1674.47 1214.23 L1675.06 1214.23 L1675.65 1214.23 L1676.23 1214.23 L1676.82 1214.23 L1677.41 1214.23 L1677.99 1214.23 L1678.58 1214.23 L1679.17 1214.23 L1679.75 1214.23 L1680.34 1214.23 L1680.92 1214.23 L1681.51 1214.23 L1682.1 1214.23 L1682.68 1214.23 L1683.27 1214.23 L1683.86 1214.23 L1684.44 1214.23 L1685.03 1214.23 L1685.62 1214.23 L1686.2 1214.23 L1686.79 1214.23 L1687.37 1214.23 L1687.96 1214.23 L1688.55 1214.23 L1689.13 1214.23 L1689.72 1214.23 L1690.31 1214.23 L1690.89 1214.23 L1691.48 1214.23 L1692.07 1214.23 L1692.65 1214.23 L1693.24 1214.23 L1693.83 1214.23 L1694.41 1214.23 L1695 1214.23 L1695.58 1214.23 L1696.17 1214.23 L1696.76 1214.23 L1697.34 1214.23 L1697.93 1214.23 L1698.52 1214.23 L1699.1 1214.23 L1699.69 1214.23 L1700.28 1214.23 L1700.86 1214.23 L1701.45 1214.23 L1702.04 1214.23 L1702.62 1214.23 L1703.21 1214.23 L1703.79 1214.23 L1704.38 1214.23 L1704.97 1214.23 L1705.55 1214.23 L1706.14 1214.23 L1706.73 1214.23 L1707.31 1214.23 L1707.9 1214.23 L1708.49 1214.23 L1709.07 1214.23 L1709.66 1214.23 L1710.24 1214.23 L1710.83 1214.23 L1711.42 1214.23 L1712 1214.23 L1712.59 1214.23 L1713.18 1214.23 L1713.76 1214.23 L1714.35 1214.23 L1714.94 1214.23 L1715.52 1214.23 L1716.11 1214.23 L1716.7 1214.23 L1717.28 1214.23 L1717.87 1214.23 L1718.45 1214.23 L1719.04 1214.23 L1719.63 1214.23 L1720.21 1214.23 L1720.8 1214.23 L1721.39 1214.23 L1721.97 1214.23 L1722.56 1214.23 L1723.15 1214.23 L1723.73 1214.23 L1724.32 1214.23 L1724.91 1214.23 L1725.49 1214.23 L1726.08 1214.23 L1726.66 1214.23 L1727.25 1214.23 L1727.84 1214.23 L1728.42 1214.23 L1729.01 1214.23 L1729.6 1214.23 L1730.18 1214.23 L1730.77 1214.23 L1731.36 1214.23 L1731.94 1214.23 L1732.53 1214.23 L1733.11 1214.23 L1733.7 1214.23 L1734.29 1214.23 L1734.87 1214.23 L1735.46 1214.23 L1736.05 1214.23 L1736.63 1214.23 L1737.22 1214.23 L1737.81 1214.23 L1738.39 1214.23 L1738.98 1214.23 L1739.57 1214.23 L1740.15 1214.23 L1740.74 1214.23 L1741.32 1214.23 L1741.91 1214.23 L1742.5 1214.23 L1743.08 1214.23 L1743.67 1214.23 L1744.26 1214.23 L1744.84 1214.23 L1745.43 1214.23 L1746.02 1214.23 L1746.6 1214.23 L1747.19 1214.23 L1747.78 1214.23 L1748.36 1214.23 L1748.95 1214.23 L1749.53 1214.23 L1750.12 1214.23 L1750.71 1214.23 L1751.29 1214.23 L1751.88 1214.23 L1752.47 1214.23 L1753.05 1214.23 L1753.64 1214.23 L1754.23 1214.23 L1754.81 1214.23 L1755.4 1214.23 L1755.99 1214.23 L1756.57 1214.23 L1757.16 1214.23 L1757.74 1214.23 L1758.33 1214.23 L1758.92 1214.23 L1759.5 1214.23 L1760.09 1214.23 L1760.68 1214.23 L1761.26 1214.23 L1761.85 1214.23 L1762.44 1214.23 L1763.02 1214.23 L1763.61 1214.23 L1764.19 1214.23 L1764.78 1214.23 L1765.37 1214.23 L1765.95 1214.23 L1766.54 1214.23 L1767.13 1214.23 L1767.71 1214.23 L1768.3 1214.23 L1768.89 1214.23 L1769.47 1214.23 L1770.06 1214.23 L1770.65 1214.23 L1771.23 1214.23 L1771.82 1214.23 L1772.4 1214.23 L1772.99 1214.23 L1773.58 1214.23 L1774.16 1214.23 L1774.75 1214.23 L1775.34 1214.23 L1775.92 1214.23 L1776.51 1214.23 L1777.1 1214.23 L1777.68 1214.23 L1778.27 1214.23 L1778.86 1214.23 L1779.44 1214.23 L1780.03 1214.23 L1780.61 1214.23 L1781.2 1214.23 L1781.79 1214.23 L1782.37 1214.23 L1782.96 1214.23 L1783.55 1214.23 L1784.13 1214.23 L1784.72 1214.23 L1785.31 1214.23 L1785.89 1214.23 L1786.48 1214.23 L1787.06 1214.23 L1787.65 1214.23 L1788.24 1214.23 L1788.82 1214.23 L1789.41 1214.23 L1790 1214.23 L1790.58 1214.23 L1791.17 1214.23 L1791.76 1214.23 L1792.34 1214.23 L1792.93 1214.23 L1793.52 1214.23 L1794.1 1214.23 L1794.69 1214.23 L1795.27 1214.23 L1795.86 1214.23 L1796.45 1214.23 L1797.03 1214.23 L1797.62 1214.23 L1798.21 1214.23 L1798.79 1214.23 L1799.38 1214.23 L1799.97 1214.23 L1800.55 1214.23 L1801.14 1214.23 L1801.73 1214.23 L1802.31 1214.23 L1802.9 1214.23 L1803.48 1214.23 L1804.07 1214.23 L1804.66 1214.23 L1805.24 1214.23 L1805.83 1214.23 L1806.42 1214.23 L1807 1214.23 L1807.59 1214.23 L1808.18 1214.23 L1808.76 1214.23 L1809.35 1214.23 L1809.94 1214.23 L1810.52 1214.23 L1811.11 1214.23 L1811.69 1214.23 L1812.28 1214.23 L1812.87 1214.23 L1813.45 1214.23 L1814.04 1214.23 L1814.63 1214.23 L1815.21 1214.23 L1815.8 1214.23 L1816.39 1214.23 L1816.97 1214.23 L1817.56 1214.23 L1818.14 1214.23 L1818.73 1214.23 L1819.32 1214.23 L1819.9 1214.23 L1820.49 1214.23 L1821.08 1214.23 L1821.66 1214.23 L1822.25 1214.23 L1822.84 1214.23 L1823.42 1214.23 L1824.01 1214.23 L1824.6 1214.23 L1825.18 1214.23 L1825.77 1214.23 L1826.35 1214.23 L1826.94 1214.23 L1827.53 1214.23 L1828.11 1214.23 L1828.7 1214.23 L1829.29 1214.23 L1829.87 1214.23 L1830.46 1214.23 L1831.05 1214.23 L1831.63 1214.23 L1832.22 1214.23 L1832.81 1214.23 L1833.39 1214.23 L1833.98 1214.23 L1834.56 1214.23 L1835.15 1214.23 L1835.74 1214.23 L1836.32 1214.23 L1836.91 1214.23 L1837.5 1214.23 L1838.08 1214.23 L1838.67 1214.23 L1839.26 1214.23 L1839.84 1214.23 L1840.43 1214.23 L1841.01 1214.23 L1841.6 1214.23 L1842.19 1214.23 L1842.77 1214.23 L1843.36 1214.23 L1843.95 1214.23 L1844.53 1214.23 L1845.12 1214.23 L1845.71 1214.23 L1846.29 1214.23 L1846.88 1214.23 L1847.47 1214.23 L1848.05 1214.23 L1848.64 1214.23 L1849.22 1214.23 L1849.81 1214.23 L1850.4 1214.23 L1850.98 1214.23 L1851.57 1214.23 L1852.16 1214.23 L1852.74 1214.23 L1853.33 1214.23 L1853.92 1214.23 L1854.5 1214.23 L1855.09 1214.23 L1855.68 1214.23 L1856.26 1214.23 L1856.85 1214.23 L1857.43 1214.23 L1858.02 1214.23 L1858.61 1214.23 L1859.19 1214.23 L1859.78 1214.23 L1860.37 1214.23 L1860.95 1214.23 L1861.54 1214.23 L1862.13 1214.23 L1862.71 1214.23 L1863.3 1214.23 L1863.88 1214.23 L1864.47 1214.23 L1865.06 1214.23 L1865.64 1214.23 L1866.23 1214.23 L1866.82 1214.23 L1867.4 1214.23 L1867.99 1214.23 L1868.58 1214.23 L1869.16 1214.23 L1869.75 1214.23 L1870.34 1214.23 L1870.92 1214.23 L1871.51 1214.23 L1872.09 1214.23 L1872.68 1214.23 L1873.27 1214.23 L1873.85 1214.23 L1874.44 1214.23 L1875.03 1214.23 L1875.61 1214.23 L1876.2 1214.23 L1876.79 1214.23 L1877.37 1214.23 L1877.96 1214.23 L1878.55 1214.23 L1879.13 1214.23 L1879.72 1214.23 L1880.3 1214.23 L1880.89 1214.23 L1881.48 1214.23 L1882.06 1214.23 L1882.65 1214.23 L1883.24 1214.23 L1883.82 1214.23 L1884.41 1214.23 L1885 1214.23 L1885.58 1214.23 L1886.17 1214.23 L1886.76 1214.23 L1887.34 1214.23 L1887.93 1214.23 L1888.51 1214.23 L1889.1 1214.23 L1889.69 1214.23 L1890.27 1214.23 L1890.86 1214.23 L1891.45 1214.23 L1892.03 1214.23 L1892.62 1214.23 L1893.21 1214.23 L1893.79 1214.23 L1894.38 1214.23 L1894.96 1214.23 L1895.55 1214.23 L1896.14 1214.23 L1896.72 1214.23 L1897.31 1214.23 L1897.9 1214.23 L1898.48 1214.23 L1899.07 1214.23 L1899.66 1214.23 L1900.24 1214.23 L1900.83 1214.23 L1901.42 1214.23 L1902 1214.23 L1902.59 1214.23 L1903.17 1214.23 L1903.76 1214.23 L1904.35 1214.23 L1904.93 1214.23 L1905.52 1214.23 L1906.11 1214.23 L1906.69 1214.23 L1907.28 1214.23 L1907.87 1214.23 L1908.45 1214.23 L1909.04 1214.23 L1909.63 1214.23 L1910.21 1214.23 L1910.8 1214.23 L1911.38 1214.23 L1911.97 1214.23 L1912.56 1214.23 L1913.14 1214.23 L1913.73 1214.23 L1914.32 1214.23 L1914.9 1214.23 L1915.49 1214.23 L1916.08 1214.23 L1916.66 1214.23 L1917.25 1214.23 L1917.83 1214.23 L1918.42 1214.23 L1919.01 1214.23 L1919.59 1214.23 L1920.18 1214.23 L1920.77 1214.23 L1921.35 1214.23 L1921.94 1214.23 L1922.53 1214.23 L1923.11 1214.23 L1923.7 1214.23 L1924.29 1214.23 L1924.87 1214.23 L1925.46 1214.23 L1926.04 1214.23 L1926.63 1214.23 L1927.22 1214.23 L1927.8 1214.23 L1928.39 1214.23 L1928.98 1214.23 L1929.56 1214.23 L1930.15 1214.23 L1930.74 1214.23 L1931.32 1214.23 L1931.91 1214.23 L1932.5 1214.23 L1933.08 1214.23 L1933.67 1214.23 L1934.25 1214.23 L1934.84 1214.23 L1935.43 1214.23 L1936.01 1214.23 L1936.6 1214.23 L1937.19 1214.23 L1937.77 1214.23 L1938.36 1214.23 L1938.95 1214.23 L1939.53 1214.23 L1940.12 1214.23 L1940.71 1214.23 L1941.29 1214.23 L1941.88 1214.23 L1942.46 1214.23 L1943.05 1214.23 L1943.64 1214.23 L1944.22 1214.23 L1944.81 1214.23 L1945.4 1214.23 L1945.98 1214.23 L1946.57 1214.23 L1947.16 1214.23 L1947.74 1214.23 L1948.33 1214.23 L1948.91 1214.23 L1949.5 1214.23 L1950.09 1214.23 L1950.67 1214.23 L1951.26 1214.23 L1951.85 1214.23 L1952.43 1214.23 L1953.02 1214.23 L1953.61 1214.23 L1954.19 1214.23 L1954.78 1214.23 L1955.37 1214.23 L1955.95 1214.23 L1956.54 1214.23 L1957.12 1214.23 L1957.71 1214.23 L1958.3 1214.23 L1958.88 1214.23 L1959.47 1214.23 L1960.06 1214.23 L1960.64 1214.23 L1961.23 1214.23 L1961.82 1214.23 L1962.4 1214.23 L1962.99 1214.23 L1963.58 1214.23 L1964.16 1214.23 L1964.75 1214.23 L1965.33 1214.23 L1965.92 1214.23 L1966.51 1214.23 L1967.09 1214.23 L1967.68 1214.23 L1968.27 1214.23 L1968.85 1214.23 L1969.44 1214.23 L1970.03 1214.23 L1970.61 1214.23 L1971.2 1214.23 L1971.78 1214.23 L1972.37 1214.23 L1972.96 1214.23 L1973.54 1214.23 L1974.13 1214.23 L1974.72 1214.23 L1975.3 1214.23 L1975.89 1214.23 L1976.48 1214.23 L1977.06 1214.23 L1977.65 1214.23 L1978.24 1214.23 L1978.82 1214.23 L1979.41 1214.23 L1979.99 1214.23 L1980.58 1214.23 L1981.17 1214.23 L1981.75 1214.23 L1982.34 1214.23 L1982.93 1214.23 L1983.51 1214.23 L1984.1 1214.23 L1984.69 1214.23 L1985.27 1214.23 L1985.86 1214.23 L1986.45 1214.23 L1987.03 1214.23 L1987.62 1214.23 L1988.2 1214.23 L1988.79 1214.23 L1989.38 1214.23 L1989.96 1214.23 L1990.55 1214.23 L1991.14 1214.23 L1991.72 1214.23 L1992.31 1214.23 L1992.9 1214.23 L1993.48 1214.23 L1994.07 1214.23 L1994.65 1214.23 L1995.24 1214.23 L1995.83 1214.23 L1996.41 1214.23 L1997 1214.23 L1997.59 1214.23 L1998.17 1214.23 L1998.76 1214.23 L1999.35 1214.23 L1999.93 1214.23 L2000.52 1214.23 L2001.11 1214.23 L2001.69 1214.23 L2002.28 1214.23 L2002.86 1214.23 L2003.45 1214.23 L2004.04 1214.23 L2004.62 1214.23 L2005.21 1214.23 L2005.8 1214.23 L2006.38 1214.23 L2006.97 1214.23 L2007.56 1214.23 L2008.14 1214.23 L2008.73 1214.23 L2009.32 1214.23 L2009.9 1214.23 L2010.49 1214.23 L2011.07 1214.23 L2011.66 1214.23 L2012.25 1214.23 L2012.83 1214.23 L2013.42 1214.23 L2014.01 1214.23 L2014.59 1214.23 L2015.18 1214.23 L2015.77 1214.23 L2016.35 1214.23 L2016.94 1214.23 L2017.53 1214.23 L2018.11 1214.23 L2018.7 1214.23 L2019.28 1214.23 L2019.87 1214.23 L2020.46 1214.23 L2021.04 1214.23 L2021.63 1214.23 L2022.22 1214.23 L2022.8 1214.23 L2023.39 1214.23 L2023.98 1214.23 L2024.56 1214.23 L2025.15 1214.23 L2025.73 1214.23 L2026.32 1214.23 L2026.91 1214.23 L2027.49 1214.23 L2028.08 1214.23 L2028.67 1214.23 L2029.25 1214.23 L2029.84 1214.23 L2030.43 1214.23 L2031.01 1214.23 L2031.6 1214.23 L2032.19 1214.23 L2032.77 1214.23 L2033.36 1214.23 L2033.94 1214.23 L2034.53 1214.23 L2035.12 1214.23 L2035.7 1214.23 L2036.29 1214.23 L2036.88 1214.23 L2037.46 1214.23 L2038.05 1214.23 L2038.64 1214.23 L2039.22 1214.23 L2039.81 1214.23 L2040.4 1214.23 L2040.98 1214.23 L2041.57 1214.23 L2042.15 1214.23 L2042.74 1214.23 L2043.33 1214.23 L2043.91 1214.23 L2044.5 1214.23 L2045.09 1214.23 L2045.67 1214.23 L2046.26 1214.23 L2046.85 1214.23 L2047.43 1214.23 L2048.02 1214.23 L2048.6 1214.23 L2049.19 1214.23 L2049.78 1214.23 L2050.36 1214.23 L2050.95 1214.23 L2051.54 1214.23 L2052.12 1214.23 L2052.71 1214.23 L2053.3 1214.23 L2053.88 1214.23 L2054.47 1214.23 L2055.06 1214.23 L2055.64 1214.23 L2056.23 1214.23 L2056.81 1214.23 L2057.4 1214.23 L2057.99 1214.23 L2058.57 1214.23 L2059.16 1214.23 L2059.75 1214.23 L2060.33 1214.23 L2060.92 1214.23 L2061.51 1214.23 L2062.09 1214.23 L2062.68 1214.23 L2063.27 1214.23 L2063.85 1214.23 L2064.44 1214.23 L2065.02 1214.23 L2065.61 1214.23 L2066.2 1214.23 L2066.78 1214.23 L2067.37 1214.23 L2067.96 1214.23 L2068.54 1214.23 L2069.13 1214.23 L2069.72 1214.23 L2070.3 1214.23 L2070.89 1214.23 L2071.48 1214.23 L2072.06 1214.23 L2072.65 1214.23 L2073.23 1214.23 L2073.82 1214.23 L2074.41 1214.23 L2074.99 1214.23 L2075.58 1214.23 L2076.17 1214.23 L2076.75 1214.23 L2077.34 1214.23 L2077.93 1214.23 L2078.51 1214.23 L2079.1 1214.23 L2079.68 1214.23 L2080.27 1214.23 L2080.86 1214.23 L2081.44 1214.23 L2082.03 1214.23 L2082.62 1214.23 L2083.2 1214.23 L2083.79 1214.23 L2084.38 1214.23 L2084.96 1214.23 L2085.55 1214.23 L2086.14 1214.23 L2086.72 1214.23 L2087.31 1214.23 L2087.89 1214.23 L2088.48 1214.23 L2089.07 1214.23 L2089.65 1214.23 L2090.24 1214.23 L2090.83 1214.23 L2091.41 1214.23 L2092 1214.23 L2092.59 1214.23 L2093.17 1214.23 L2093.76 1214.23 L2094.35 1214.23 L2094.93 1214.23 L2095.52 1214.23 L2096.1 1214.23 L2096.69 1214.23 L2097.28 1214.23 L2097.86 1214.23 L2098.45 1214.23 L2099.04 1214.23 L2099.62 1214.23 L2100.21 1214.23 L2100.8 1214.23 L2101.38 1214.23 L2101.97 1214.23 L2102.55 1214.23 L2103.14 1214.23 L2103.73 1214.23 L2104.31 1214.23 L2104.9 1214.23 L2105.49 1214.23 L2106.07 1214.23 L2106.66 1214.23 L2107.25 1214.23 L2107.83 1214.23 L2108.42 1214.23 L2109.01 1214.23 L2109.59 1214.23 L2110.18 1214.23 L2110.76 1214.23 L2111.35 1214.23 L2111.94 1214.23 L2112.52 1214.23 L2113.11 1214.23 L2113.7 1214.23 L2114.28 1214.23 L2114.87 1214.23 L2115.46 1214.23 L2116.04 1214.23 L2116.63 1214.23 L2117.22 1214.23 L2117.8 1214.23 L2118.39 1214.23 L2118.97 1214.23 L2119.56 1214.23 L2120.15 1214.23 L2120.73 1214.23 L2121.32 1214.23 L2121.91 1214.23 L2122.49 1214.23 L2123.08 1214.23 L2123.67 1214.23 L2124.25 1214.23 L2124.84 1214.23 L2125.42 1214.23 L2126.01 1214.23 L2126.6 1214.23 L2127.18 1214.23 L2127.77 1214.23 L2128.36 1214.23 L2128.94 1214.23 L2129.53 1214.23 L2130.12 1214.23 L2130.7 1214.23 L2131.29 1214.23 L2131.88 1214.23 L2132.46 1214.23 L2133.05 1214.23 L2133.63 1214.23 L2134.22 1214.23 L2134.81 1214.23 L2135.39 1214.23 L2135.98 1214.23 L2136.57 1214.23 L2137.15 1214.23 L2137.74 1214.23 L2138.33 1214.23 L2138.91 1214.23 L2139.5 1214.23 L2140.09 1214.23 L2140.67 1214.23 L2141.26 1214.23 L2141.84 1214.23 L2142.43 1214.23 L2143.02 1214.23 L2143.6 1214.23 L2144.19 1214.23 L2144.78 1214.23 L2145.36 1214.23 L2145.95 1214.23 L2146.54 1214.23 L2147.12 1214.23 L2147.71 1214.23 L2148.3 1214.23 L2148.88 1214.23 L2149.47 1214.23 L2150.05 1214.23 L2150.64 1214.23 L2151.23 1214.23 L2151.81 1214.23 L2152.4 1214.23 L2152.99 1214.23 L2153.57 1214.23 L2154.16 1214.23 L2154.75 1214.23 L2155.33 1214.23 L2155.92 1214.23 L2156.5 1214.23 L2157.09 1214.23 L2157.68 1214.23 L2158.26 1214.23 L2158.26 1214.09 L2157.68 1214.09 L2157.09 1214.09 L2156.5 1214.09 L2155.92 1214.09 L2155.33 1214.09 L2154.75 1214.09 L2154.16 1214.09 L2153.57 1214.09 L2152.99 1214.09 L2152.4 1214.09 L2151.81 1214.09 L2151.23 1214.09 L2150.64 1214.09 L2150.05 1214.09 L2149.47 1214.09 L2148.88 1214.09 L2148.3 1214.09 L2147.71 1214.09 L2147.12 1214.09 L2146.54 1214.09 L2145.95 1214.09 L2145.36 1214.09 L2144.78 1214.09 L2144.19 1214.09 L2143.6 1214.09 L2143.02 1214.09 L2142.43 1214.09 L2141.84 1214.09 L2141.26 1214.09 L2140.67 1214.09 L2140.09 1214.09 L2139.5 1214.09 L2138.91 1214.09 L2138.33 1214.09 L2137.74 1214.09 L2137.15 1214.09 L2136.57 1214.09 L2135.98 1214.09 L2135.39 1214.09 L2134.81 1214.09 L2134.22 1214.09 L2133.63 1214.09 L2133.05 1214.09 L2132.46 1214.09 L2131.88 1214.09 L2131.29 1214.09 L2130.7 1214.09 L2130.12 1214.09 L2129.53 1214.09 L2128.94 1214.09 L2128.36 1214.09 L2127.77 1214.09 L2127.18 1214.09 L2126.6 1214.09 L2126.01 1214.09 L2125.42 1214.09 L2124.84 1214.09 L2124.25 1214.09 L2123.67 1214.09 L2123.08 1214.09 L2122.49 1214.09 L2121.91 1214.09 L2121.32 1214.09 L2120.73 1214.09 L2120.15 1214.09 L2119.56 1214.09 L2118.97 1214.09 L2118.39 1214.09 L2117.8 1214.09 L2117.22 1214.09 L2116.63 1214.09 L2116.04 1214.09 L2115.46 1214.09 L2114.87 1214.09 L2114.28 1214.09 L2113.7 1214.09 L2113.11 1214.09 L2112.52 1214.09 L2111.94 1214.09 L2111.35 1214.09 L2110.76 1214.09 L2110.18 1214.09 L2109.59 1214.09 L2109.01 1214.09 L2108.42 1214.09 L2107.83 1214.09 L2107.25 1214.09 L2106.66 1214.09 L2106.07 1214.09 L2105.49 1214.09 L2104.9 1214.09 L2104.31 1214.09 L2103.73 1214.09 L2103.14 1214.09 L2102.55 1214.09 L2101.97 1214.09 L2101.38 1214.09 L2100.8 1214.09 L2100.21 1214.09 L2099.62 1214.09 L2099.04 1214.09 L2098.45 1214.09 L2097.86 1214.09 L2097.28 1214.09 L2096.69 1214.09 L2096.1 1214.09 L2095.52 1214.09 L2094.93 1214.09 L2094.35 1214.09 L2093.76 1214.09 L2093.17 1214.09 L2092.59 1214.09 L2092 1214.09 L2091.41 1214.09 L2090.83 1214.09 L2090.24 1214.09 L2089.65 1214.09 L2089.07 1214.09 L2088.48 1214.09 L2087.89 1214.09 L2087.31 1214.09 L2086.72 1214.09 L2086.14 1214.09 L2085.55 1214.09 L2084.96 1214.09 L2084.38 1214.09 L2083.79 1214.09 L2083.2 1214.09 L2082.62 1214.09 L2082.03 1214.09 L2081.44 1214.09 L2080.86 1214.09 L2080.27 1214.09 L2079.68 1214.09 L2079.1 1214.09 L2078.51 1214.09 L2077.93 1214.09 L2077.34 1214.09 L2076.75 1214.09 L2076.17 1214.09 L2075.58 1214.09 L2074.99 1214.09 L2074.41 1214.09 L2073.82 1214.09 L2073.23 1214.09 L2072.65 1214.09 L2072.06 1214.09 L2071.48 1214.09 L2070.89 1214.09 L2070.3 1214.09 L2069.72 1214.09 L2069.13 1214.09 L2068.54 1214.09 L2067.96 1214.09 L2067.37 1214.09 L2066.78 1214.09 L2066.2 1214.09 L2065.61 1214.09 L2065.02 1214.09 L2064.44 1214.09 L2063.85 1214.09 L2063.27 1214.09 L2062.68 1214.09 L2062.09 1214.09 L2061.51 1214.09 L2060.92 1214.09 L2060.33 1214.09 L2059.75 1214.09 L2059.16 1214.09 L2058.57 1214.09 L2057.99 1214.09 L2057.4 1214.09 L2056.81 1214.09 L2056.23 1214.09 L2055.64 1214.09 L2055.06 1214.09 L2054.47 1214.09 L2053.88 1214.09 L2053.3 1214.09 L2052.71 1214.09 L2052.12 1214.09 L2051.54 1214.09 L2050.95 1214.09 L2050.36 1214.09 L2049.78 1214.09 L2049.19 1214.09 L2048.6 1214.09 L2048.02 1214.09 L2047.43 1214.09 L2046.85 1214.09 L2046.26 1214.09 L2045.67 1214.09 L2045.09 1214.09 L2044.5 1214.09 L2043.91 1214.09 L2043.33 1214.09 L2042.74 1214.09 L2042.15 1214.09 L2041.57 1214.09 L2040.98 1214.09 L2040.4 1214.09 L2039.81 1214.09 L2039.22 1214.09 L2038.64 1214.09 L2038.05 1214.09 L2037.46 1214.09 L2036.88 1214.09 L2036.29 1214.09 L2035.7 1214.09 L2035.12 1214.09 L2034.53 1214.09 L2033.94 1214.09 L2033.36 1214.09 L2032.77 1214.09 L2032.19 1214.09 L2031.6 1214.09 L2031.01 1214.09 L2030.43 1214.09 L2029.84 1214.09 L2029.25 1214.09 L2028.67 1214.09 L2028.08 1214.09 L2027.49 1214.09 L2026.91 1214.09 L2026.32 1214.09 L2025.73 1214.09 L2025.15 1214.09 L2024.56 1214.09 L2023.98 1214.09 L2023.39 1214.09 L2022.8 1214.09 L2022.22 1214.09 L2021.63 1214.09 L2021.04 1214.09 L2020.46 1214.09 L2019.87 1214.09 L2019.28 1214.09 L2018.7 1214.09 L2018.11 1214.09 L2017.53 1214.09 L2016.94 1214.09 L2016.35 1214.09 L2015.77 1214.09 L2015.18 1214.09 L2014.59 1214.09 L2014.01 1214.09 L2013.42 1214.09 L2012.83 1214.09 L2012.25 1214.09 L2011.66 1214.09 L2011.07 1214.09 L2010.49 1214.09 L2009.9 1214.09 L2009.32 1214.09 L2008.73 1214.09 L2008.14 1214.09 L2007.56 1214.09 L2006.97 1214.09 L2006.38 1214.09 L2005.8 1214.09 L2005.21 1214.09 L2004.62 1214.09 L2004.04 1214.09 L2003.45 1214.09 L2002.86 1214.09 L2002.28 1214.09 L2001.69 1214.09 L2001.11 1214.09 L2000.52 1214.09 L1999.93 1214.09 L1999.35 1214.09 L1998.76 1214.09 L1998.17 1214.09 L1997.59 1214.09 L1997 1214.09 L1996.41 1214.09 L1995.83 1214.09 L1995.24 1214.09 L1994.65 1214.09 L1994.07 1214.09 L1993.48 1214.09 L1992.9 1214.09 L1992.31 1214.09 L1991.72 1214.09 L1991.14 1214.09 L1990.55 1214.09 L1989.96 1214.09 L1989.38 1214.09 L1988.79 1214.09 L1988.2 1214.09 L1987.62 1214.09 L1987.03 1214.09 L1986.45 1214.09 L1985.86 1214.09 L1985.27 1214.09 L1984.69 1214.09 L1984.1 1214.09 L1983.51 1214.09 L1982.93 1214.09 L1982.34 1214.09 L1981.75 1214.09 L1981.17 1214.09 L1980.58 1214.09 L1979.99 1214.09 L1979.41 1214.09 L1978.82 1214.09 L1978.24 1214.09 L1977.65 1214.09 L1977.06 1214.09 L1976.48 1214.09 L1975.89 1214.09 L1975.3 1214.09 L1974.72 1214.09 L1974.13 1214.09 L1973.54 1214.09 L1972.96 1214.09 L1972.37 1214.09 L1971.78 1214.09 L1971.2 1214.09 L1970.61 1214.09 L1970.03 1214.09 L1969.44 1214.09 L1968.85 1214.09 L1968.27 1214.09 L1967.68 1214.09 L1967.09 1214.09 L1966.51 1214.09 L1965.92 1214.09 L1965.33 1214.09 L1964.75 1214.09 L1964.16 1214.09 L1963.58 1214.09 L1962.99 1214.09 L1962.4 1214.09 L1961.82 1214.09 L1961.23 1214.09 L1960.64 1214.09 L1960.06 1214.09 L1959.47 1214.09 L1958.88 1214.09 L1958.3 1214.09 L1957.71 1214.09 L1957.12 1214.09 L1956.54 1214.09 L1955.95 1214.09 L1955.37 1214.09 L1954.78 1214.09 L1954.19 1214.09 L1953.61 1214.09 L1953.02 1214.09 L1952.43 1214.09 L1951.85 1214.09 L1951.26 1214.09 L1950.67 1214.09 L1950.09 1214.09 L1949.5 1214.09 L1948.91 1214.09 L1948.33 1214.09 L1947.74 1214.09 L1947.16 1214.09 L1946.57 1214.09 L1945.98 1214.09 L1945.4 1214.09 L1944.81 1214.09 L1944.22 1214.09 L1943.64 1214.09 L1943.05 1214.09 L1942.46 1214.09 L1941.88 1214.09 L1941.29 1214.09 L1940.71 1214.09 L1940.12 1214.09 L1939.53 1214.09 L1938.95 1214.09 L1938.36 1214.09 L1937.77 1214.09 L1937.19 1214.09 L1936.6 1214.09 L1936.01 1214.09 L1935.43 1214.09 L1934.84 1214.09 L1934.25 1214.09 L1933.67 1214.09 L1933.08 1214.09 L1932.5 1214.09 L1931.91 1214.09 L1931.32 1214.09 L1930.74 1214.09 L1930.15 1214.09 L1929.56 1214.09 L1928.98 1214.09 L1928.39 1214.09 L1927.8 1214.09 L1927.22 1214.09 L1926.63 1214.09 L1926.04 1214.09 L1925.46 1214.09 L1924.87 1214.09 L1924.29 1214.09 L1923.7 1214.09 L1923.11 1214.09 L1922.53 1214.09 L1921.94 1214.09 L1921.35 1214.09 L1920.77 1214.09 L1920.18 1214.09 L1919.59 1214.09 L1919.01 1214.09 L1918.42 1214.09 L1917.83 1214.09 L1917.25 1214.09 L1916.66 1214.09 L1916.08 1214.09 L1915.49 1214.09 L1914.9 1214.09 L1914.32 1214.09 L1913.73 1214.09 L1913.14 1214.09 L1912.56 1214.09 L1911.97 1214.09 L1911.38 1214.09 L1910.8 1214.09 L1910.21 1214.09 L1909.63 1214.09 L1909.04 1214.09 L1908.45 1214.09 L1907.87 1214.09 L1907.28 1214.09 L1906.69 1214.09 L1906.11 1214.09 L1905.52 1214.09 L1904.93 1214.09 L1904.35 1214.09 L1903.76 1214.09 L1903.17 1214.09 L1902.59 1214.09 L1902 1214.09 L1901.42 1214.09 L1900.83 1214.09 L1900.24 1214.09 L1899.66 1214.09 L1899.07 1214.09 L1898.48 1214.09 L1897.9 1214.09 L1897.31 1214.09 L1896.72 1214.09 L1896.14 1214.09 L1895.55 1214.09 L1894.96 1214.09 L1894.38 1214.09 L1893.79 1214.09 L1893.21 1214.09 L1892.62 1214.09 L1892.03 1214.09 L1891.45 1214.09 L1890.86 1214.09 L1890.27 1214.09 L1889.69 1214.09 L1889.1 1214.09 L1888.51 1214.09 L1887.93 1214.09 L1887.34 1214.09 L1886.76 1214.09 L1886.17 1214.09 L1885.58 1214.09 L1885 1214.09 L1884.41 1214.09 L1883.82 1214.09 L1883.24 1214.09 L1882.65 1214.09 L1882.06 1214.09 L1881.48 1214.09 L1880.89 1214.09 L1880.3 1214.09 L1879.72 1214.09 L1879.13 1214.09 L1878.55 1214.09 L1877.96 1214.09 L1877.37 1214.09 L1876.79 1214.09 L1876.2 1214.09 L1875.61 1214.09 L1875.03 1214.09 L1874.44 1214.09 L1873.85 1214.09 L1873.27 1214.09 L1872.68 1214.09 L1872.09 1214.09 L1871.51 1214.09 L1870.92 1214.09 L1870.34 1214.09 L1869.75 1214.09 L1869.16 1214.09 L1868.58 1214.09 L1867.99 1214.09 L1867.4 1214.09 L1866.82 1214.09 L1866.23 1214.09 L1865.64 1214.09 L1865.06 1214.09 L1864.47 1214.09 L1863.88 1214.09 L1863.3 1214.09 L1862.71 1214.09 L1862.13 1214.09 L1861.54 1214.09 L1860.95 1214.09 L1860.37 1214.09 L1859.78 1214.09 L1859.19 1214.09 L1858.61 1214.09 L1858.02 1214.09 L1857.43 1214.09 L1856.85 1214.09 L1856.26 1214.09 L1855.68 1214.09 L1855.09 1214.09 L1854.5 1214.09 L1853.92 1214.09 L1853.33 1214.09 L1852.74 1214.09 L1852.16 1214.09 L1851.57 1214.09 L1850.98 1214.09 L1850.4 1214.09 L1849.81 1214.09 L1849.22 1214.09 L1848.64 1214.09 L1848.05 1214.09 L1847.47 1214.09 L1846.88 1214.09 L1846.29 1214.09 L1845.71 1214.09 L1845.12 1214.09 L1844.53 1214.09 L1843.95 1214.09 L1843.36 1214.09 L1842.77 1214.09 L1842.19 1214.09 L1841.6 1214.09 L1841.01 1214.09 L1840.43 1214.09 L1839.84 1214.09 L1839.26 1214.09 L1838.67 1214.09 L1838.08 1214.09 L1837.5 1214.09 L1836.91 1214.09 L1836.32 1214.09 L1835.74 1214.09 L1835.15 1214.09 L1834.56 1214.09 L1833.98 1214.09 L1833.39 1214.09 L1832.81 1214.09 L1832.22 1214.09 L1831.63 1214.09 L1831.05 1214.09 L1830.46 1214.09 L1829.87 1214.09 L1829.29 1214.09 L1828.7 1214.09 L1828.11 1214.09 L1827.53 1214.09 L1826.94 1214.09 L1826.35 1214.09 L1825.77 1214.09 L1825.18 1214.09 L1824.6 1214.09 L1824.01 1214.09 L1823.42 1214.09 L1822.84 1214.09 L1822.25 1214.09 L1821.66 1214.09 L1821.08 1214.09 L1820.49 1214.09 L1819.9 1214.09 L1819.32 1214.09 L1818.73 1214.09 L1818.14 1214.09 L1817.56 1214.09 L1816.97 1214.09 L1816.39 1214.09 L1815.8 1214.09 L1815.21 1214.09 L1814.63 1214.09 L1814.04 1214.09 L1813.45 1214.09 L1812.87 1214.09 L1812.28 1214.09 L1811.69 1214.09 L1811.11 1214.09 L1810.52 1214.09 L1809.94 1214.09 L1809.35 1214.09 L1808.76 1214.09 L1808.18 1214.09 L1807.59 1214.09 L1807 1214.09 L1806.42 1214.09 L1805.83 1214.09 L1805.24 1214.09 L1804.66 1214.09 L1804.07 1214.09 L1803.48 1214.09 L1802.9 1214.09 L1802.31 1214.09 L1801.73 1214.09 L1801.14 1214.09 L1800.55 1214.09 L1799.97 1214.09 L1799.38 1214.09 L1798.79 1214.09 L1798.21 1214.09 L1797.62 1214.09 L1797.03 1214.09 L1796.45 1214.09 L1795.86 1214.09 L1795.27 1214.09 L1794.69 1214.09 L1794.1 1214.09 L1793.52 1214.09 L1792.93 1214.09 L1792.34 1214.09 L1791.76 1214.09 L1791.17 1214.09 L1790.58 1214.09 L1790 1214.09 L1789.41 1214.09 L1788.82 1214.09 L1788.24 1214.09 L1787.65 1214.09 L1787.06 1214.09 L1786.48 1214.09 L1785.89 1214.09 L1785.31 1214.09 L1784.72 1214.09 L1784.13 1214.09 L1783.55 1214.09 L1782.96 1214.09 L1782.37 1214.09 L1781.79 1214.09 L1781.2 1214.09 L1780.61 1214.09 L1780.03 1214.09 L1779.44 1214.09 L1778.86 1214.09 L1778.27 1214.09 L1777.68 1214.09 L1777.1 1214.09 L1776.51 1214.09 L1775.92 1214.09 L1775.34 1214.09 L1774.75 1214.09 L1774.16 1214.09 L1773.58 1214.09 L1772.99 1214.09 L1772.4 1214.09 L1771.82 1214.09 L1771.23 1214.09 L1770.65 1214.09 L1770.06 1214.09 L1769.47 1214.09 L1768.89 1214.09 L1768.3 1214.09 L1767.71 1214.09 L1767.13 1214.09 L1766.54 1214.09 L1765.95 1214.09 L1765.37 1214.09 L1764.78 1214.09 L1764.19 1214.09 L1763.61 1214.09 L1763.02 1214.09 L1762.44 1214.09 L1761.85 1214.09 L1761.26 1214.09 L1760.68 1214.09 L1760.09 1214.09 L1759.5 1214.09 L1758.92 1214.09 L1758.33 1214.09 L1757.74 1214.09 L1757.16 1214.09 L1756.57 1214.09 L1755.99 1214.09 L1755.4 1214.09 L1754.81 1214.09 L1754.23 1214.09 L1753.64 1214.09 L1753.05 1214.09 L1752.47 1214.09 L1751.88 1214.09 L1751.29 1214.09 L1750.71 1214.09 L1750.12 1214.09 L1749.53 1214.09 L1748.95 1214.09 L1748.36 1214.09 L1747.78 1214.09 L1747.19 1214.09 L1746.6 1214.09 L1746.02 1214.09 L1745.43 1214.09 L1744.84 1214.09 L1744.26 1214.09 L1743.67 1214.09 L1743.08 1214.09 L1742.5 1214.09 L1741.91 1214.09 L1741.32 1214.09 L1740.74 1214.09 L1740.15 1214.09 L1739.57 1214.09 L1738.98 1214.09 L1738.39 1214.09 L1737.81 1214.09 L1737.22 1214.09 L1736.63 1214.09 L1736.05 1214.09 L1735.46 1214.09 L1734.87 1214.09 L1734.29 1214.09 L1733.7 1214.09 L1733.11 1214.09 L1732.53 1214.09 L1731.94 1214.09 L1731.36 1214.09 L1730.77 1214.09 L1730.18 1214.09 L1729.6 1214.09 L1729.01 1214.09 L1728.42 1214.09 L1727.84 1214.09 L1727.25 1214.09 L1726.66 1214.09 L1726.08 1214.09 L1725.49 1214.09 L1724.91 1214.09 L1724.32 1214.09 L1723.73 1214.09 L1723.15 1214.09 L1722.56 1214.09 L1721.97 1214.09 L1721.39 1214.09 L1720.8 1214.09 L1720.21 1214.09 L1719.63 1214.09 L1719.04 1214.09 L1718.45 1214.09 L1717.87 1214.09 L1717.28 1214.09 L1716.7 1214.09 L1716.11 1214.09 L1715.52 1214.09 L1714.94 1214.09 L1714.35 1214.09 L1713.76 1214.09 L1713.18 1214.09 L1712.59 1214.09 L1712 1214.09 L1711.42 1214.09 L1710.83 1214.09 L1710.24 1214.09 L1709.66 1214.09 L1709.07 1214.09 L1708.49 1214.09 L1707.9 1214.09 L1707.31 1214.09 L1706.73 1214.09 L1706.14 1214.09 L1705.55 1214.09 L1704.97 1214.09 L1704.38 1214.09 L1703.79 1214.09 L1703.21 1214.09 L1702.62 1214.09 L1702.04 1214.09 L1701.45 1214.09 L1700.86 1214.09 L1700.28 1214.09 L1699.69 1214.09 L1699.1 1214.09 L1698.52 1214.09 L1697.93 1214.09 L1697.34 1214.09 L1696.76 1214.09 L1696.17 1214.09 L1695.58 1214.09 L1695 1214.09 L1694.41 1214.09 L1693.83 1214.09 L1693.24 1214.09 L1692.65 1214.09 L1692.07 1214.09 L1691.48 1214.09 L1690.89 1214.09 L1690.31 1214.09 L1689.72 1214.09 L1689.13 1214.09 L1688.55 1214.09 L1687.96 1214.09 L1687.37 1214.09 L1686.79 1214.09 L1686.2 1214.09 L1685.62 1214.09 L1685.03 1214.09 L1684.44 1214.09 L1683.86 1214.09 L1683.27 1214.09 L1682.68 1214.09 L1682.1 1214.09 L1681.51 1214.09 L1680.92 1214.09 L1680.34 1214.09 L1679.75 1214.09 L1679.17 1214.09 L1678.58 1214.09 L1677.99 1214.09 L1677.41 1214.09 L1676.82 1214.09 L1676.23 1214.09 L1675.65 1214.09 L1675.06 1214.09 L1674.47 1214.09 L1673.89 1214.09 L1673.3 1214.09 L1672.71 1214.09 L1672.13 1214.09 L1671.54 1214.09 L1670.96 1214.09 L1670.37 1214.09 L1669.78 1214.09 L1669.2 1214.09 L1668.61 1214.09 L1668.02 1214.09 L1667.44 1214.09 L1666.85 1214.09 L1666.26 1214.09 L1665.68 1214.09 L1665.09 1214.09 L1664.5 1214.09 L1663.92 1214.09 L1663.33 1214.09 L1662.75 1214.09 L1662.16 1214.09 L1661.57 1214.09 L1660.99 1214.09 L1660.4 1214.09 L1659.81 1214.09 L1659.23 1214.09 L1658.64 1214.09 L1658.05 1214.09 L1657.47 1214.09 L1656.88 1214.09 L1656.29 1214.09 L1655.71 1214.09 L1655.12 1214.09 L1654.54 1214.09 L1653.95 1214.09 L1653.36 1214.09 L1652.78 1214.09 L1652.19 1214.09 L1651.6 1214.09 L1651.02 1214.09 L1650.43 1214.09 L1649.84 1214.09 L1649.26 1214.09 L1648.67 1214.09 L1648.09 1214.09 L1647.5 1214.09 L1646.91 1214.09 L1646.33 1214.09 L1645.74 1214.09 L1645.15 1214.09 L1644.57 1214.09 L1643.98 1214.09 L1643.39 1214.09 L1642.81 1214.09 L1642.22 1214.09 L1641.63 1214.09 L1641.05 1214.09 L1640.46 1214.09 L1639.88 1214.09 L1639.29 1214.09 L1638.7 1214.09 L1638.12 1214.09 L1637.53 1214.09 L1636.94 1214.09 L1636.36 1214.09 L1635.77 1214.09 L1635.18 1214.09 L1634.6 1214.09 L1634.01 1214.09 L1633.42 1214.09 L1632.84 1214.09 L1632.25 1214.09 L1631.67 1214.09 L1631.08 1214.09 L1630.49 1214.09 L1629.91 1214.09 L1629.32 1214.09 L1628.73 1214.09 L1628.15 1214.09 L1627.56 1214.09 L1626.97 1214.09 L1626.39 1214.09 L1625.8 1214.09 L1625.22 1214.09 L1624.63 1214.09 L1624.04 1214.09 L1623.46 1214.09 L1622.87 1214.09 L1622.28 1214.09 L1621.7 1214.09 L1621.11 1214.09 L1620.52 1214.09 L1619.94 1214.09 L1619.35 1214.09 L1618.76 1214.09 L1618.18 1214.09 L1617.59 1214.09 L1617.01 1214.09 L1616.42 1214.09 L1615.83 1214.09 L1615.25 1214.09 L1614.66 1214.09 L1614.07 1214.09 L1613.49 1214.09 L1612.9 1214.09 L1612.31 1214.09 L1611.73 1214.09 L1611.14 1214.09 L1610.55 1214.09 L1609.97 1214.09 L1609.38 1214.09 L1608.8 1214.09 L1608.21 1214.09 L1607.62 1214.09 L1607.04 1214.09 L1606.45 1214.09 L1605.86 1214.09 L1605.28 1214.09 L1604.69 1214.09 L1604.1 1214.09 L1603.52 1214.09 L1602.93 1214.09 L1602.34 1214.09 L1601.76 1214.09 L1601.17 1214.09 L1600.59 1214.09 L1600 1214.09 L1599.41 1214.09 L1598.83 1214.09 L1598.24 1214.09 L1597.65 1214.09 L1597.07 1214.09 L1596.48 1214.09 L1595.89 1214.09 L1595.31 1214.09 L1594.72 1214.09 L1594.14 1214.09 L1593.55 1214.09 L1592.96 1214.09 L1592.38 1214.09 L1591.79 1214.09 L1591.2 1214.09 L1590.62 1214.09 L1590.03 1214.09 L1589.44 1214.09 L1588.86 1214.09 L1588.27 1214.09 L1587.68 1214.09 L1587.1 1214.09 L1586.51 1214.09 L1585.93 1214.09 L1585.34 1214.09 L1584.75 1214.09 L1584.17 1214.09 L1583.58 1214.09 L1582.99 1214.09 L1582.41 1214.09 L1581.82 1214.09 L1581.23 1214.09 L1580.65 1214.09 L1580.06 1214.09 L1579.47 1214.09 L1578.89 1214.09 L1578.3 1214.09 L1577.72 1214.09 L1577.13 1214.09 L1576.54 1214.09 L1575.96 1214.09 L1575.37 1214.09 L1574.78 1214.09 L1574.2 1214.09 L1573.61 1214.09 L1573.02 1214.09 L1572.44 1214.09 L1571.85 1214.09 L1571.27 1214.09 L1570.68 1214.09 L1570.09 1214.09 L1569.51 1214.09 L1568.92 1214.09 L1568.33 1214.09 L1567.75 1214.09 L1567.16 1214.09 L1566.57 1214.09 L1565.99 1214.09 L1565.4 1214.09 L1564.81 1214.09 L1564.23 1214.09 L1563.64 1214.09 L1563.06 1214.09 L1562.47 1214.09 L1561.88 1214.09 L1561.3 1214.09 L1560.71 1214.09 L1560.12 1214.09 L1559.54 1214.09 L1558.95 1214.09 L1558.36 1214.09 L1557.78 1214.09 L1557.19 1214.09 L1556.6 1214.09 L1556.02 1214.09 L1555.43 1214.09 L1554.85 1214.09 L1554.26 1214.09 L1553.67 1214.09 L1553.09 1214.09 L1552.5 1214.09 L1551.91 1214.09 L1551.33 1214.09 L1550.74 1214.09 L1550.15 1214.09 L1549.57 1214.09 L1548.98 1214.09 L1548.4 1214.09 L1547.81 1214.09 L1547.22 1214.09 L1546.64 1214.09 L1546.05 1214.09 L1545.46 1214.09 L1544.88 1214.09 L1544.29 1214.09 L1543.7 1214.09 L1543.12 1214.09 L1542.53 1214.09 L1541.94 1214.09 L1541.36 1214.09 L1540.77 1214.09 L1540.19 1214.09 L1539.6 1214.09 L1539.01 1214.09 L1538.43 1214.09 L1537.84 1214.09 L1537.25 1214.09 L1536.67 1214.09 L1536.08 1214.09 L1535.49 1214.09 L1534.91 1214.09 L1534.32 1214.09 L1533.73 1214.09 L1533.15 1214.09 L1532.56 1214.09 L1531.98 1214.09 L1531.39 1214.09 L1530.8 1214.09 L1530.22 1214.09 L1529.63 1214.09 L1529.04 1214.09 L1528.46 1214.09 L1527.87 1214.09 L1527.28 1214.09 L1526.7 1214.09 L1526.11 1214.09 L1525.52 1214.09 L1524.94 1214.09 L1524.35 1214.09 L1523.77 1214.09 L1523.18 1214.09 L1522.59 1214.09 L1522.01 1214.09 L1521.42 1214.09 L1520.83 1214.09 L1520.25 1214.09 L1519.66 1214.09 L1519.07 1214.09 L1518.49 1214.09 L1517.9 1214.09 L1517.32 1214.09 L1516.73 1214.09 L1516.14 1214.09 L1515.56 1214.09 L1514.97 1214.09 L1514.38 1214.09 L1513.8 1214.09 L1513.21 1214.09 L1512.62 1214.09 L1512.04 1214.09 L1511.45 1214.09 L1510.86 1214.09 L1510.28 1214.09 L1509.69 1214.09 L1509.11 1214.09 L1508.52 1214.09 L1507.93 1214.09 L1507.35 1214.09 L1506.76 1214.09 L1506.17 1214.09 L1505.59 1214.09 L1505 1214.09 L1504.41 1214.09 L1503.83 1214.09 L1503.24 1214.09 L1502.65 1214.09 L1502.07 1214.09 L1501.48 1214.09 L1500.9 1214.09 L1500.31 1214.09 L1499.72 1214.09 L1499.14 1214.09 L1498.55 1214.09 L1497.96 1214.09 L1497.38 1214.09 L1496.79 1214.09 L1496.2 1214.09 L1495.62 1214.09 L1495.03 1214.09 L1494.45 1214.09 L1493.86 1214.09 L1493.27 1214.09 L1492.69 1214.09 L1492.1 1214.09 L1491.51 1214.09 L1490.93 1214.09 L1490.34 1214.09 L1489.75 1214.09 L1489.17 1214.09 L1488.58 1214.09 L1487.99 1214.09 L1487.41 1214.09 L1486.82 1214.09 L1486.24 1214.09 L1485.65 1214.09 L1485.06 1214.09 L1484.48 1214.09 L1483.89 1214.09 L1483.3 1214.09 L1482.72 1214.09 L1482.13 1214.09 L1481.54 1214.09 L1480.96 1214.09 L1480.37 1214.09 L1479.78 1214.09 L1479.2 1214.09 L1478.61 1214.09 L1478.03 1214.09 L1477.44 1214.09 L1476.85 1214.09 L1476.27 1214.09 L1475.68 1214.09 L1475.09 1214.09 L1474.51 1214.09 L1473.92 1214.09 L1473.33 1214.09 L1472.75 1214.09 L1472.16 1214.09 L1471.57 1214.09 L1470.99 1214.09 L1470.4 1214.09 L1469.82 1214.09 L1469.23 1214.09 L1468.64 1214.09 L1468.06 1214.09 L1467.47 1214.09 L1466.88 1214.09 L1466.3 1214.09 L1465.71 1214.09 L1465.12 1214.09 L1464.54 1214.09 L1463.95 1214.09 L1463.37 1214.09 L1462.78 1214.09 L1462.19 1214.09 L1461.61 1214.09 L1461.02 1214.09 L1460.43 1214.09 L1459.85 1214.09 L1459.26 1214.09 L1458.67 1214.09 L1458.09 1214.09 L1457.5 1214.09 L1456.91 1214.09 L1456.33 1214.09 L1455.74 1214.09 L1455.16 1214.09 L1454.57 1214.09 L1453.98 1214.09 L1453.4 1214.09 L1452.81 1214.09 L1452.22 1214.09 L1451.64 1214.09 L1451.05 1214.09 L1450.46 1214.09 L1449.88 1214.09 L1449.29 1214.09 L1448.7 1214.09 L1448.12 1214.09 L1447.53 1214.09 L1446.95 1214.09 L1446.36 1214.09 L1445.77 1214.09 L1445.19 1214.09 L1444.6 1214.09 L1444.01 1214.09 L1443.43 1214.09 L1442.84 1214.09 L1442.25 1214.09 L1441.67 1214.09 L1441.08 1214.09 L1440.5 1214.09 L1439.91 1214.09 L1439.32 1214.09 L1438.74 1214.09 L1438.15 1214.09 L1437.56 1214.09 L1436.98 1214.09 L1436.39 1214.09 L1435.8 1214.09 L1435.22 1214.09 L1434.63 1214.09 L1434.04 1214.09 L1433.46 1214.09 L1432.87 1214.09 L1432.29 1214.09 L1431.7 1214.09 L1431.11 1214.09 L1430.53 1214.09 L1429.94 1214.09 L1429.35 1214.09 L1428.77 1214.09 L1428.18 1214.09 L1427.59 1214.09 L1427.01 1214.09 L1426.42 1214.09 L1425.83 1214.09 L1425.25 1214.09 L1424.66 1214.09 L1424.08 1214.09 L1423.49 1214.09 L1422.9 1214.09 L1422.32 1214.09 L1421.73 1214.09 L1421.14 1214.09 L1420.56 1214.09 L1419.97 1214.09 L1419.38 1214.09 L1418.8 1214.09 L1418.21 1214.09 L1417.63 1214.09 L1417.04 1214.09 L1416.45 1214.09 L1415.87 1214.09 L1415.28 1214.09 L1414.69 1214.09 L1414.11 1214.09 L1413.52 1214.09 L1412.93 1214.09 L1412.35 1214.09 L1411.76 1214.09 L1411.17 1214.09 L1410.59 1214.09 L1410 1214.09 L1409.42 1214.09 L1408.83 1214.09 L1408.24 1214.09 L1407.66 1214.09 L1407.07 1214.09 L1406.48 1214.09 L1405.9 1214.09 L1405.31 1214.09 L1404.72 1214.09 L1404.14 1214.09 L1403.55 1214.09 L1402.96 1214.09 L1402.38 1214.09 L1401.79 1214.09 L1401.21 1214.09 L1400.62 1214.09 L1400.03 1214.09 L1399.45 1214.09 L1398.86 1214.09 L1398.27 1214.09 L1397.69 1214.09 L1397.1 1214.09 L1396.51 1214.09 L1395.93 1214.09 L1395.34 1214.09 L1394.75 1214.09 L1394.17 1214.09 L1393.58 1214.09 L1393 1214.09 L1392.41 1214.09 L1391.82 1214.09 L1391.24 1214.09 L1390.65 1214.09 L1390.06 1214.09 L1389.48 1214.09 L1388.89 1214.09 L1388.3 1214.09 L1387.72 1214.09 L1387.13 1214.09 L1386.55 1214.09 L1385.96 1214.09 L1385.37 1214.09 L1384.79 1214.09 L1384.2 1214.09 L1383.61 1214.09 L1383.03 1214.09 L1382.44 1214.09 L1381.85 1214.09 L1381.27 1214.09 L1380.68 1214.09 L1380.09 1214.09 L1379.51 1214.09 L1378.92 1214.09 L1378.34 1214.09 L1377.75 1214.09 L1377.16 1214.09 L1376.58 1214.09 L1375.99 1214.09 L1375.4 1214.09 L1374.82 1214.09 L1374.23 1214.09 L1373.64 1214.09 L1373.06 1214.09 L1372.47 1214.09 L1371.88 1214.09 L1371.3 1214.09 L1370.71 1214.09 L1370.13 1214.09 L1369.54 1214.09 L1368.95 1214.09 L1368.37 1214.09 L1367.78 1214.09 L1367.19 1214.09 L1366.61 1214.09 L1366.02 1214.09 L1365.43 1214.09 L1364.85 1214.09 L1364.26 1214.09 L1363.68 1214.09 L1363.09 1214.09 L1362.5 1214.09 L1361.92 1214.09 L1361.33 1214.09 L1360.74 1214.09 L1360.16 1214.09 L1359.57 1214.09 L1358.98 1214.09 L1358.4 1214.09 L1357.81 1214.09 L1357.22 1214.09 L1356.64 1214.09 L1356.05 1214.09 L1355.47 1214.09 L1354.88 1214.09 L1354.29 1214.09 L1353.71 1214.09 L1353.12 1214.09 L1352.53 1214.09 L1351.95 1214.09 L1351.36 1214.09 L1350.77 1214.09 L1350.19 1214.09 L1349.6 1214.09 L1349.01 1214.09 L1348.43 1214.09 L1347.84 1214.09 L1347.26 1214.09 L1346.67 1214.09 L1346.08 1214.09 L1345.5 1214.09 L1344.91 1214.09 L1344.32 1214.09 L1343.74 1214.09 L1343.15 1214.09 L1342.56 1214.09 L1341.98 1214.09 L1341.39 1214.09 L1340.8 1214.09 L1340.22 1214.09 L1339.63 1214.09 L1339.05 1214.09 L1338.46 1214.09 L1337.87 1214.09 L1337.29 1214.09 L1336.7 1214.09 L1336.11 1214.09 L1335.53 1214.09 L1334.94 1214.09 L1334.35 1214.09 L1333.77 1214.09 L1333.18 1214.09 L1332.6 1214.09 L1332.01 1214.09 L1331.42 1214.09 L1330.84 1214.09 L1330.25 1214.09 L1329.66 1214.09 L1329.08 1214.09 L1328.49 1214.09 L1327.9 1214.09 L1327.32 1214.09 L1326.73 1214.09 L1326.14 1214.09 L1325.56 1214.09 L1324.97 1214.09 L1324.39 1214.09 L1323.8 1214.09 L1323.21 1214.09 L1322.63 1214.09 L1322.04 1214.09 L1321.45 1214.09 L1320.87 1214.09 L1320.28 1214.09 L1319.69 1214.09 L1319.11 1214.09 L1318.52 1214.09 L1317.93 1214.09 L1317.35 1214.09 L1316.76 1214.09 L1316.18 1214.09 L1315.59 1214.09 L1315 1214.09 L1314.42 1214.09 L1313.83 1214.09 L1313.24 1214.09 L1312.66 1214.09 L1312.07 1214.09 L1311.48 1214.09 L1310.9 1214.09 L1310.31 1214.09 L1309.73 1214.09 L1309.14 1214.09 L1308.55 1214.09 L1307.97 1214.09 L1307.38 1214.09 L1306.79 1214.09 L1306.21 1214.09 L1305.62 1214.09 L1305.03 1214.09 L1304.45 1214.09 L1303.86 1214.09 L1303.27 1214.09 L1302.69 1214.09 L1302.1 1214.09 L1301.52 1214.09 L1300.93 1214.09 L1300.34 1214.09 L1299.76 1214.09 L1299.17 1214.09 L1298.58 1214.09 L1298 1214.09 L1297.41 1214.09 L1296.82 1214.09 L1296.24 1214.09 L1295.65 1214.09 L1295.06 1214.09 L1294.48 1214.09 L1293.89 1214.09 L1293.31 1214.09 L1292.72 1214.09 L1292.13 1214.09 L1291.55 1214.09 L1290.96 1214.09 L1290.37 1214.09 L1289.79 1214.09 L1289.2 1214.09 L1288.61 1214.09 L1288.03 1214.09 L1287.44 1214.09 L1286.86 1214.09 L1286.27 1214.09 L1285.68 1214.09 L1285.1 1214.09 L1284.51 1214.09 L1283.92 1214.09 L1283.34 1214.09 L1282.75 1214.09 L1282.16 1214.09 L1281.58 1214.09 L1280.99 1214.09 L1280.4 1214.09 L1279.82 1214.09 L1279.23 1214.09 L1278.65 1214.09 L1278.06 1214.09 L1277.47 1214.09 L1276.89 1214.09 L1276.3 1214.09 L1275.71 1214.09 L1275.13 1214.09 L1274.54 1214.09 L1273.95 1214.09 L1273.37 1214.09 L1272.78 1214.09 L1272.19 1214.09 L1271.61 1214.09 L1271.02 1214.09 L1270.44 1214.09 L1269.85 1214.09 L1269.26 1214.09 L1268.68 1214.09 L1268.09 1214.09 L1267.5 1214.09 L1266.92 1214.09 L1266.33 1214.09 L1265.74 1214.09 L1265.16 1214.09 L1264.57 1214.09 L1263.98 1214.09 L1263.4 1214.09 L1262.81 1214.09 L1262.23 1214.09 L1261.64 1214.09 L1261.05 1214.09 L1260.47 1214.09 L1259.88 1214.09 L1259.29 1214.09 L1258.71 1214.09 L1258.12 1214.09 L1257.53 1214.09 L1256.95 1214.09 L1256.36 1214.09 L1255.78 1214.09 L1255.19 1214.09 L1254.6 1214.09 L1254.02 1214.09 L1253.43 1214.09 L1252.84 1214.09 L1252.26 1214.09 L1251.67 1214.09 L1251.08 1214.09 L1250.5 1214.09 L1249.91 1214.09 L1249.32 1214.09 L1248.74 1214.09 L1248.15 1214.09 L1247.57 1214.09 L1246.98 1214.09 L1246.39 1214.09 L1245.81 1214.09 L1245.22 1214.09 L1244.63 1214.09 L1244.05 1214.09 L1243.46 1214.09 L1242.87 1214.09 L1242.29 1214.09 L1241.7 1214.09 L1241.11 1214.09 L1240.53 1214.09 L1239.94 1214.09 L1239.36 1214.09 L1238.77 1214.09 L1238.18 1214.09 L1237.6 1214.09 L1237.01 1214.09 L1236.42 1214.09 L1235.84 1214.09 L1235.25 1214.09 L1234.66 1214.09 L1234.08 1214.09 L1233.49 1214.09 L1232.91 1214.09 L1232.32 1214.09 L1231.73 1214.09 L1231.15 1214.09 L1230.56 1214.09 L1229.97 1214.09 L1229.39 1214.09 L1228.8 1214.09 L1228.21 1214.09 L1227.63 1214.09 L1227.04 1214.09 L1226.45 1214.09 L1225.87 1214.09 L1225.28 1214.09 L1224.7 1214.09 L1224.11 1214.09 L1223.52 1214.09 L1222.94 1214.09 L1222.35 1214.09 L1221.76 1214.09 L1221.18 1214.09 L1220.59 1214.09 L1220 1214.09 L1219.42 1214.09 L1218.83 1214.09 L1218.24 1214.09 L1217.66 1214.09 L1217.07 1214.09 L1216.49 1214.09 L1215.9 1214.09 L1215.31 1214.09 L1214.73 1214.09 L1214.14 1214.09 L1213.55 1214.09 L1212.97 1214.09 L1212.38 1214.09 L1211.79 1214.09 L1211.21 1214.09 L1210.62 1214.09 L1210.03 1214.09 L1209.45 1214.09 L1208.86 1214.09 L1208.28 1214.09 L1207.69 1214.09 L1207.1 1214.09 L1206.52 1214.09 L1205.93 1214.09 L1205.34 1214.09 L1204.76 1214.09 L1204.17 1214.09 L1203.58 1214.09 L1203 1214.09 L1202.41 1214.09 L1201.83 1214.09 L1201.24 1214.09 L1200.65 1214.09 L1200.07 1214.09 L1199.48 1214.09 L1198.89 1214.09 L1198.31 1214.09 L1197.72 1214.09 L1197.13 1214.09 L1196.55 1214.09 L1195.96 1214.09 L1195.37 1214.09 L1194.79 1214.09 L1194.2 1214.09 L1193.62 1214.09 L1193.03 1214.09 L1192.44 1214.09 L1191.86 1214.09 L1191.27 1214.09 L1190.68 1214.09 L1190.1 1214.09 L1189.51 1214.09 L1188.92 1214.09 L1188.34 1214.09 L1187.75 1214.09 L1187.16 1214.09 L1186.58 1214.09 L1185.99 1214.09 L1185.41 1214.09 L1184.82 1214.09 L1184.23 1214.09 L1183.65 1214.09 L1183.06 1214.09 L1182.47 1214.09 L1181.89 1214.09 L1181.3 1214.09 L1180.71 1214.09 L1180.13 1214.09 L1179.54 1214.09 L1178.96 1214.09 L1178.37 1214.09 L1177.78 1214.09 L1177.2 1214.09 L1176.61 1214.09 L1176.02 1214.09 L1175.44 1214.09 L1174.85 1214.09 L1174.26 1214.09 L1173.68 1214.09 L1173.09 1214.09 L1172.5 1214.09 L1171.92 1214.09 L1171.33 1214.09 L1170.75 1214.09 L1170.16 1214.09 L1169.57 1214.09 L1168.99 1214.09 L1168.4 1214.09 L1167.81 1214.09 L1167.23 1214.09 L1166.64 1214.09 L1166.05 1214.09 L1165.47 1214.09 L1164.88 1214.09 L1164.29 1214.09 L1163.71 1214.09 L1163.12 1214.09 L1162.54 1214.09 L1161.95 1214.09 L1161.36 1214.09 L1160.78 1214.09 L1160.19 1214.09 L1159.6 1214.09 L1159.02 1214.09 L1158.43 1214.09 L1157.84 1214.09 L1157.26 1214.09 L1156.67 1214.09 L1156.09 1214.09 L1155.5 1214.09 L1154.91 1214.09 L1154.33 1214.09 L1153.74 1214.09 L1153.15 1214.09 L1152.57 1214.09 L1151.98 1214.09 L1151.39 1214.09 L1150.81 1214.09 L1150.22 1214.09 L1149.63 1214.09 L1149.05 1214.09 L1148.46 1214.09 L1147.88 1214.09 L1147.29 1214.09 L1146.7 1214.09 L1146.12 1214.09 L1145.53 1214.09 L1144.94 1214.09 L1144.36 1214.09 L1143.77 1214.09 L1143.18 1214.09 L1142.6 1214.09 L1142.01 1214.09 L1141.42 1214.09 L1140.84 1214.09 L1140.25 1214.09 L1139.67 1214.09 L1139.08 1214.09 L1138.49 1214.09 L1137.91 1214.09 L1137.32 1214.09 L1136.73 1214.09 L1136.15 1214.09 L1135.56 1214.09 L1134.97 1214.09 L1134.39 1214.09 L1133.8 1214.09 L1133.21 1214.09 L1132.63 1214.09 L1132.04 1214.09 L1131.46 1214.09 L1130.87 1214.09 L1130.28 1214.09 L1129.7 1214.09 L1129.11 1214.09 L1128.52 1214.09 L1127.94 1214.09 L1127.35 1214.09 L1126.76 1214.09 L1126.18 1214.09 L1125.59 1214.09 L1125.01 1214.09 L1124.42 1214.09 L1123.83 1214.09 L1123.25 1214.09 L1122.66 1214.09 L1122.07 1214.09 L1121.49 1214.09 L1120.9 1214.09 L1120.31 1214.09 L1119.73 1214.09 L1119.14 1214.09 L1118.55 1214.09 L1117.97 1214.09 L1117.38 1214.09 L1116.8 1214.09 L1116.21 1214.09 L1115.62 1214.09 L1115.04 1214.09 L1114.45 1214.09 L1113.86 1214.09 L1113.28 1214.09 L1112.69 1214.09 L1112.1 1214.09 L1111.52 1214.09 L1110.93 1214.09 L1110.34 1214.09 L1109.76 1214.09 L1109.17 1214.09 L1108.59 1214.09 L1108 1214.09 L1107.41 1214.09 L1106.83 1214.09 L1106.24 1214.09 L1105.65 1214.09 L1105.07 1214.09 L1104.48 1214.09 L1103.89 1214.09 L1103.31 1214.09 L1102.72 1214.09 L1102.14 1214.09 L1101.55 1214.09 L1100.96 1214.09 L1100.38 1214.09 L1099.79 1214.09 L1099.2 1214.09 L1098.62 1214.09 L1098.03 1214.09 L1097.44 1214.09 L1096.86 1214.09 L1096.27 1214.09 L1095.68 1214.09 L1095.1 1214.09 L1094.51 1214.09 L1093.93 1214.09 L1093.34 1214.09 L1092.75 1214.09 L1092.17 1214.09 L1091.58 1214.09 L1090.99 1214.09 L1090.41 1214.09 L1089.82 1214.09 L1089.23 1214.09 L1088.65 1214.09 L1088.06 1214.09 L1087.47 1214.09 L1086.89 1214.09 L1086.3 1214.09 L1085.72 1214.09 L1085.13 1214.09 L1084.54 1214.09 L1083.96 1214.09 L1083.37 1214.09 L1082.78 1214.09 L1082.2 1214.09 L1081.61 1214.09 L1081.02 1214.09 L1080.44 1214.09 L1079.85 1214.09 L1079.26 1214.09 L1078.68 1214.09 L1078.09 1214.09 L1077.51 1214.09 L1076.92 1214.09 L1076.33 1214.09 L1075.75 1214.09 L1075.16 1214.09 L1074.57 1214.09 L1073.99 1214.09 L1073.4 1214.09 L1072.81 1214.09 L1072.23 1214.09 L1071.64 1214.09 L1071.06 1214.09 L1070.47 1214.09 L1069.88 1214.09 L1069.3 1214.09 L1068.71 1214.09 L1068.12 1214.09 L1067.54 1214.09 L1066.95 1214.09 L1066.36 1214.09 L1065.78 1214.09 L1065.19 1214.09 L1064.6 1214.09 L1064.02 1214.09 L1063.43 1214.09 L1062.85 1214.09 L1062.26 1214.09 L1061.67 1214.09 L1061.09 1214.09 L1060.5 1214.09 L1059.91 1214.09 L1059.33 1214.09 L1058.74 1214.09 L1058.15 1214.09 L1057.57 1214.09 L1056.98 1214.09 L1056.39 1214.09 L1055.81 1214.09 L1055.22 1214.09 L1054.64 1214.09 L1054.05 1214.09 L1053.46 1214.09 L1052.88 1214.09 L1052.29 1214.09 L1051.7 1214.09 L1051.12 1214.09 L1050.53 1214.09 L1049.94 1214.09 L1049.36 1214.09 L1048.77 1214.09 L1048.19 1214.09 L1047.6 1214.09 L1047.01 1214.09 L1046.43 1214.09 L1045.84 1214.09 L1045.25 1214.09 L1044.67 1214.09 L1044.08 1214.09 L1043.49 1214.09 L1042.91 1214.09 L1042.32 1214.09 L1041.73 1214.09 L1041.15 1214.09 L1040.56 1214.09 L1039.98 1214.09 L1039.39 1214.09 L1038.8 1214.09 L1038.22 1214.09 L1037.63 1214.09 L1037.04 1214.09 L1036.46 1214.09 L1035.87 1214.09 L1035.28 1214.09 L1034.7 1214.09 L1034.11 1214.09 L1033.52 1214.09 L1032.94 1214.09 L1032.35 1214.09 L1031.77 1214.09 L1031.18 1214.09 L1030.59 1214.09 L1030.01 1214.09 L1029.42 1214.09 L1028.83 1214.09 L1028.25 1214.09 L1027.66 1214.09 L1027.07 1214.09 L1026.49 1214.09 L1025.9 1214.09 L1025.32 1214.09 L1024.73 1214.09 L1024.14 1214.09 L1023.56 1214.09 L1022.97 1214.09 L1022.38 1214.09 L1021.8 1214.09 L1021.21 1214.09 L1020.62 1214.09 L1020.04 1214.09 L1019.45 1214.09 L1018.86 1214.09 L1018.28 1214.09 L1017.69 1214.09 L1017.11 1214.09 L1016.52 1214.09 L1015.93 1214.09 L1015.35 1214.09 L1014.76 1214.09 L1014.17 1214.09 L1013.59 1214.09 L1013 1214.09 L1012.41 1214.09 L1011.83 1214.09 L1011.24 1214.09 L1010.65 1214.09 L1010.07 1214.09 L1009.48 1214.09 L1008.9 1214.09 L1008.31 1214.09 L1007.72 1214.09 L1007.14 1214.09 L1006.55 1214.09 L1005.96 1214.09 L1005.38 1214.09 L1004.79 1214.09 L1004.2 1214.09 L1003.62 1214.09 L1003.03 1214.09 L1002.44 1214.09 L1001.86 1214.09 L1001.27 1214.09 L1000.69 1214.09 L1000.1 1214.09 L999.513 1214.09 L998.926 1214.09 L998.34 1214.09 L997.754 1214.09 L997.167 1214.09 L996.581 1214.09 L995.994 1214.09 L995.408 1214.09 L994.822 1214.09 L994.235 1214.09 L993.649 1214.09 L993.062 1214.09 L992.476 1214.09 L991.889 1214.09 L991.303 1214.09 L990.717 1214.09 L990.13 1214.09 L989.544 1214.09 L988.957 1214.09 L988.371 1214.09 L987.785 1214.09 L987.198 1214.09 L986.612 1214.09 L986.025 1214.09  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.16 986.612,1214.16 987.198,1214.16 987.785,1214.16 988.371,1214.16 988.957,1214.16 989.544,1214.16 990.13,1214.16 990.717,1214.16 991.303,1214.16 991.889,1214.16 992.476,1214.16 993.062,1214.16 993.649,1214.16 994.235,1214.16 994.822,1214.16 995.408,1214.16 995.994,1214.16 996.581,1214.16 997.167,1214.16 997.754,1214.16 998.34,1214.16 998.926,1214.16 999.513,1214.16 1000.1,1214.16 1000.69,1214.16 1001.27,1214.16 1001.86,1214.16 1002.44,1214.16 1003.03,1214.16 1003.62,1214.16 1004.2,1214.16 1004.79,1214.16 1005.38,1214.16 1005.96,1214.16 1006.55,1214.16 1007.14,1214.16 1007.72,1214.16 1008.31,1214.16 1008.9,1214.16 1009.48,1214.16 1010.07,1214.16 1010.65,1214.16 1011.24,1214.16 1011.83,1214.16 1012.41,1214.16 1013,1214.16 1013.59,1214.16 1014.17,1214.16 1014.76,1214.16 1015.35,1214.16 1015.93,1214.16 1016.52,1214.16 1017.11,1214.16 1017.69,1214.16 1018.28,1214.16 1018.86,1214.16 1019.45,1214.16 1020.04,1214.16 1020.62,1214.16 1021.21,1214.16 1021.8,1214.16 1022.38,1214.16 1022.97,1214.16 1023.56,1214.16 1024.14,1214.16 1024.73,1214.16 1025.32,1214.16 1025.9,1214.16 1026.49,1214.16 1027.07,1214.16 1027.66,1214.16 1028.25,1214.16 1028.83,1214.16 1029.42,1214.16 1030.01,1214.16 1030.59,1214.16 1031.18,1214.16 1031.77,1214.16 1032.35,1214.16 1032.94,1214.16 1033.52,1214.16 1034.11,1214.16 1034.7,1214.16 1035.28,1214.16 1035.87,1214.16 1036.46,1214.16 1037.04,1214.16 1037.63,1214.16 1038.22,1214.16 1038.8,1214.16 1039.39,1214.16 1039.98,1214.16 1040.56,1214.16 1041.15,1214.16 1041.73,1214.16 1042.32,1214.16 1042.91,1214.16 1043.49,1214.16 1044.08,1214.16 1044.67,1214.16 1045.25,1214.16 1045.84,1214.16 1046.43,1214.16 1047.01,1214.16 1047.6,1214.16 1048.19,1214.16 1048.77,1214.16 1049.36,1214.16 1049.94,1214.16 1050.53,1214.16 1051.12,1214.16 1051.7,1214.16 1052.29,1214.16 1052.88,1214.16 1053.46,1214.16 1054.05,1214.16 1054.64,1214.16 1055.22,1214.16 1055.81,1214.16 1056.39,1214.16 1056.98,1214.16 1057.57,1214.16 1058.15,1214.16 1058.74,1214.16 1059.33,1214.16 1059.91,1214.16 1060.5,1214.16 1061.09,1214.16 1061.67,1214.16 1062.26,1214.16 1062.85,1214.16 1063.43,1214.16 1064.02,1214.16 1064.6,1214.16 1065.19,1214.16 1065.78,1214.16 1066.36,1214.16 1066.95,1214.16 1067.54,1214.16 1068.12,1214.16 1068.71,1214.16 1069.3,1214.16 1069.88,1214.16 1070.47,1214.16 1071.06,1214.16 1071.64,1214.16 1072.23,1214.16 1072.81,1214.16 1073.4,1214.16 1073.99,1214.16 1074.57,1214.16 1075.16,1214.16 1075.75,1214.16 1076.33,1214.16 1076.92,1214.16 1077.51,1214.16 1078.09,1214.16 1078.68,1214.16 1079.26,1214.16 1079.85,1214.16 1080.44,1214.16 1081.02,1214.16 1081.61,1214.16 1082.2,1214.16 1082.78,1214.16 1083.37,1214.16 1083.96,1214.16 1084.54,1214.16 1085.13,1214.16 1085.72,1214.16 1086.3,1214.16 1086.89,1214.16 1087.47,1214.16 1088.06,1214.16 1088.65,1214.16 1089.23,1214.16 1089.82,1214.16 1090.41,1214.16 1090.99,1214.16 1091.58,1214.16 1092.17,1214.16 1092.75,1214.16 1093.34,1214.16 1093.93,1214.16 1094.51,1214.16 1095.1,1214.16 1095.68,1214.16 1096.27,1214.16 1096.86,1214.16 1097.44,1214.16 1098.03,1214.16 1098.62,1214.16 1099.2,1214.16 1099.79,1214.16 1100.38,1214.16 1100.96,1214.16 1101.55,1214.16 1102.14,1214.16 1102.72,1214.16 1103.31,1214.16 1103.89,1214.16 1104.48,1214.16 1105.07,1214.16 1105.65,1214.16 1106.24,1214.16 1106.83,1214.16 1107.41,1214.16 1108,1214.16 1108.59,1214.16 1109.17,1214.16 1109.76,1214.16 1110.34,1214.16 1110.93,1214.16 1111.52,1214.16 1112.1,1214.16 1112.69,1214.16 1113.28,1214.16 1113.86,1214.16 1114.45,1214.16 1115.04,1214.16 1115.62,1214.16 1116.21,1214.16 1116.8,1214.16 1117.38,1214.16 1117.97,1214.16 1118.55,1214.16 1119.14,1214.16 1119.73,1214.16 1120.31,1214.16 1120.9,1214.16 1121.49,1214.16 1122.07,1214.16 1122.66,1214.16 1123.25,1214.16 1123.83,1214.16 1124.42,1214.16 1125.01,1214.16 1125.59,1214.16 1126.18,1214.16 1126.76,1214.16 1127.35,1214.16 1127.94,1214.16 1128.52,1214.16 1129.11,1214.16 1129.7,1214.16 1130.28,1214.16 1130.87,1214.16 1131.46,1214.16 1132.04,1214.16 1132.63,1214.16 1133.21,1214.16 1133.8,1214.16 1134.39,1214.16 1134.97,1214.16 1135.56,1214.16 1136.15,1214.16 1136.73,1214.16 1137.32,1214.16 1137.91,1214.16 1138.49,1214.16 1139.08,1214.16 1139.67,1214.16 1140.25,1214.16 1140.84,1214.16 1141.42,1214.16 1142.01,1214.16 1142.6,1214.16 1143.18,1214.16 1143.77,1214.16 1144.36,1214.16 1144.94,1214.16 1145.53,1214.16 1146.12,1214.16 1146.7,1214.16 1147.29,1214.16 1147.88,1214.16 1148.46,1214.16 1149.05,1214.16 1149.63,1214.16 1150.22,1214.16 1150.81,1214.16 1151.39,1214.16 1151.98,1214.16 1152.57,1214.16 1153.15,1214.16 1153.74,1214.16 1154.33,1214.16 1154.91,1214.16 1155.5,1214.16 1156.09,1214.16 1156.67,1214.16 1157.26,1214.16 1157.84,1214.16 1158.43,1214.16 1159.02,1214.16 1159.6,1214.16 1160.19,1214.16 1160.78,1214.16 1161.36,1214.16 1161.95,1214.16 1162.54,1214.16 1163.12,1214.16 1163.71,1214.16 1164.29,1214.16 1164.88,1214.16 1165.47,1214.16 1166.05,1214.16 1166.64,1214.16 1167.23,1214.16 1167.81,1214.16 1168.4,1214.16 1168.99,1214.16 1169.57,1214.16 1170.16,1214.16 1170.75,1214.16 1171.33,1214.16 1171.92,1214.16 1172.5,1214.16 1173.09,1214.16 1173.68,1214.16 1174.26,1214.16 1174.85,1214.16 1175.44,1214.16 1176.02,1214.16 1176.61,1214.16 1177.2,1214.16 1177.78,1214.16 1178.37,1214.16 1178.96,1214.16 1179.54,1214.16 1180.13,1214.16 1180.71,1214.16 1181.3,1214.16 1181.89,1214.16 1182.47,1214.16 1183.06,1214.16 1183.65,1214.16 1184.23,1214.16 1184.82,1214.16 1185.41,1214.16 1185.99,1214.16 1186.58,1214.16 1187.16,1214.16 1187.75,1214.16 1188.34,1214.16 1188.92,1214.16 1189.51,1214.16 1190.1,1214.16 1190.68,1214.16 1191.27,1214.16 1191.86,1214.16 1192.44,1214.16 1193.03,1214.16 1193.62,1214.16 1194.2,1214.16 1194.79,1214.16 1195.37,1214.16 1195.96,1214.16 1196.55,1214.16 1197.13,1214.16 1197.72,1214.16 1198.31,1214.16 1198.89,1214.16 1199.48,1214.16 1200.07,1214.16 1200.65,1214.16 1201.24,1214.16 1201.83,1214.16 1202.41,1214.16 1203,1214.16 1203.58,1214.16 1204.17,1214.16 1204.76,1214.16 1205.34,1214.16 1205.93,1214.16 1206.52,1214.16 1207.1,1214.16 1207.69,1214.16 1208.28,1214.16 1208.86,1214.16 1209.45,1214.16 1210.03,1214.16 1210.62,1214.16 1211.21,1214.16 1211.79,1214.16 1212.38,1214.16 1212.97,1214.16 1213.55,1214.16 1214.14,1214.16 1214.73,1214.16 1215.31,1214.16 1215.9,1214.16 1216.49,1214.16 1217.07,1214.16 1217.66,1214.16 1218.24,1214.16 1218.83,1214.16 1219.42,1214.16 1220,1214.16 1220.59,1214.16 1221.18,1214.16 1221.76,1214.16 1222.35,1214.16 1222.94,1214.16 1223.52,1214.16 1224.11,1214.16 1224.7,1214.16 1225.28,1214.16 1225.87,1214.16 1226.45,1214.16 1227.04,1214.16 1227.63,1214.16 1228.21,1214.16 1228.8,1214.16 1229.39,1214.16 1229.97,1214.16 1230.56,1214.16 1231.15,1214.16 1231.73,1214.16 1232.32,1214.16 1232.91,1214.16 1233.49,1214.16 1234.08,1214.16 1234.66,1214.16 1235.25,1214.16 1235.84,1214.16 1236.42,1214.16 1237.01,1214.16 1237.6,1214.16 1238.18,1214.16 1238.77,1214.16 1239.36,1214.16 1239.94,1214.16 1240.53,1214.16 1241.11,1214.16 1241.7,1214.16 1242.29,1214.16 1242.87,1214.16 1243.46,1214.16 1244.05,1214.16 1244.63,1214.16 1245.22,1214.16 1245.81,1214.16 1246.39,1214.16 1246.98,1214.16 1247.57,1214.16 1248.15,1214.16 1248.74,1214.16 1249.32,1214.16 1249.91,1214.16 1250.5,1214.16 1251.08,1214.16 1251.67,1214.16 1252.26,1214.16 1252.84,1214.16 1253.43,1214.16 1254.02,1214.16 1254.6,1214.16 1255.19,1214.16 1255.78,1214.16 1256.36,1214.16 1256.95,1214.16 1257.53,1214.16 1258.12,1214.16 1258.71,1214.16 1259.29,1214.16 1259.88,1214.16 1260.47,1214.16 1261.05,1214.16 1261.64,1214.16 1262.23,1214.16 1262.81,1214.16 1263.4,1214.16 1263.98,1214.16 1264.57,1214.16 1265.16,1214.16 1265.74,1214.16 1266.33,1214.16 1266.92,1214.16 1267.5,1214.16 1268.09,1214.16 1268.68,1214.16 1269.26,1214.16 1269.85,1214.16 1270.44,1214.16 1271.02,1214.16 1271.61,1214.16 1272.19,1214.16 1272.78,1214.16 1273.37,1214.16 1273.95,1214.16 1274.54,1214.16 1275.13,1214.16 1275.71,1214.16 1276.3,1214.16 1276.89,1214.16 1277.47,1214.16 1278.06,1214.16 1278.65,1214.16 1279.23,1214.16 1279.82,1214.16 1280.4,1214.16 1280.99,1214.16 1281.58,1214.16 1282.16,1214.16 1282.75,1214.16 1283.34,1214.16 1283.92,1214.16 1284.51,1214.16 1285.1,1214.16 1285.68,1214.16 1286.27,1214.16 1286.86,1214.16 1287.44,1214.16 1288.03,1214.16 1288.61,1214.16 1289.2,1214.16 1289.79,1214.16 1290.37,1214.16 1290.96,1214.16 1291.55,1214.16 1292.13,1214.16 1292.72,1214.16 1293.31,1214.16 1293.89,1214.16 1294.48,1214.16 1295.06,1214.16 1295.65,1214.16 1296.24,1214.16 1296.82,1214.16 1297.41,1214.16 1298,1214.16 1298.58,1214.16 1299.17,1214.16 1299.76,1214.16 1300.34,1214.16 1300.93,1214.16 1301.52,1214.16 1302.1,1214.16 1302.69,1214.16 1303.27,1214.16 1303.86,1214.16 1304.45,1214.16 1305.03,1214.16 1305.62,1214.16 1306.21,1214.16 1306.79,1214.16 1307.38,1214.16 1307.97,1214.16 1308.55,1214.16 1309.14,1214.16 1309.73,1214.16 1310.31,1214.16 1310.9,1214.16 1311.48,1214.16 1312.07,1214.16 1312.66,1214.16 1313.24,1214.16 1313.83,1214.16 1314.42,1214.16 1315,1214.16 1315.59,1214.16 1316.18,1214.16 1316.76,1214.16 1317.35,1214.16 1317.93,1214.16 1318.52,1214.16 1319.11,1214.16 1319.69,1214.16 1320.28,1214.16 1320.87,1214.16 1321.45,1214.16 1322.04,1214.16 1322.63,1214.16 1323.21,1214.16 1323.8,1214.16 1324.39,1214.16 1324.97,1214.16 1325.56,1214.16 1326.14,1214.16 1326.73,1214.16 1327.32,1214.16 1327.9,1214.16 1328.49,1214.16 1329.08,1214.16 1329.66,1214.16 1330.25,1214.16 1330.84,1214.16 1331.42,1214.16 1332.01,1214.16 1332.6,1214.16 1333.18,1214.16 1333.77,1214.16 1334.35,1214.16 1334.94,1214.16 1335.53,1214.16 1336.11,1214.16 1336.7,1214.16 1337.29,1214.16 1337.87,1214.16 1338.46,1214.16 1339.05,1214.16 1339.63,1214.16 1340.22,1214.16 1340.8,1214.16 1341.39,1214.16 1341.98,1214.16 1342.56,1214.16 1343.15,1214.16 1343.74,1214.16 1344.32,1214.16 1344.91,1214.16 1345.5,1214.16 1346.08,1214.16 1346.67,1214.16 1347.26,1214.16 1347.84,1214.16 1348.43,1214.16 1349.01,1214.16 1349.6,1214.16 1350.19,1214.16 1350.77,1214.16 1351.36,1214.16 1351.95,1214.16 1352.53,1214.16 1353.12,1214.16 1353.71,1214.16 1354.29,1214.16 1354.88,1214.16 1355.47,1214.16 1356.05,1214.16 1356.64,1214.16 1357.22,1214.16 1357.81,1214.16 1358.4,1214.16 1358.98,1214.16 1359.57,1214.16 1360.16,1214.16 1360.74,1214.16 1361.33,1214.16 1361.92,1214.16 1362.5,1214.16 1363.09,1214.16 1363.68,1214.16 1364.26,1214.16 1364.85,1214.16 1365.43,1214.16 1366.02,1214.16 1366.61,1214.16 1367.19,1214.16 1367.78,1214.16 1368.37,1214.16 1368.95,1214.16 1369.54,1214.16 1370.13,1214.16 1370.71,1214.16 1371.3,1214.16 1371.88,1214.16 1372.47,1214.16 1373.06,1214.16 1373.64,1214.16 1374.23,1214.16 1374.82,1214.16 1375.4,1214.16 1375.99,1214.16 1376.58,1214.16 1377.16,1214.16 1377.75,1214.16 1378.34,1214.16 1378.92,1214.16 1379.51,1214.16 1380.09,1214.16 1380.68,1214.16 1381.27,1214.16 1381.85,1214.16 1382.44,1214.16 1383.03,1214.16 1383.61,1214.16 1384.2,1214.16 1384.79,1214.16 1385.37,1214.16 1385.96,1214.16 1386.55,1214.16 1387.13,1214.16 1387.72,1214.16 1388.3,1214.16 1388.89,1214.16 1389.48,1214.16 1390.06,1214.16 1390.65,1214.16 1391.24,1214.16 1391.82,1214.16 1392.41,1214.16 1393,1214.16 1393.58,1214.16 1394.17,1214.16 1394.75,1214.16 1395.34,1214.16 1395.93,1214.16 1396.51,1214.16 1397.1,1214.16 1397.69,1214.16 1398.27,1214.16 1398.86,1214.16 1399.45,1214.16 1400.03,1214.16 1400.62,1214.16 1401.21,1214.16 1401.79,1214.16 1402.38,1214.16 1402.96,1214.16 1403.55,1214.16 1404.14,1214.16 1404.72,1214.16 1405.31,1214.16 1405.9,1214.16 1406.48,1214.16 1407.07,1214.16 1407.66,1214.16 1408.24,1214.16 1408.83,1214.16 1409.42,1214.16 1410,1214.16 1410.59,1214.16 1411.17,1214.16 1411.76,1214.16 1412.35,1214.16 1412.93,1214.16 1413.52,1214.16 1414.11,1214.16 1414.69,1214.16 1415.28,1214.16 1415.87,1214.16 1416.45,1214.16 1417.04,1214.16 1417.63,1214.16 1418.21,1214.16 1418.8,1214.16 1419.38,1214.16 1419.97,1214.16 1420.56,1214.16 1421.14,1214.16 1421.73,1214.16 1422.32,1214.16 1422.9,1214.16 1423.49,1214.16 1424.08,1214.16 1424.66,1214.16 1425.25,1214.16 1425.83,1214.16 1426.42,1214.16 1427.01,1214.16 1427.59,1214.16 1428.18,1214.16 1428.77,1214.16 1429.35,1214.16 1429.94,1214.16 1430.53,1214.16 1431.11,1214.16 1431.7,1214.16 1432.29,1214.16 1432.87,1214.16 1433.46,1214.16 1434.04,1214.16 1434.63,1214.16 1435.22,1214.16 1435.8,1214.16 1436.39,1214.16 1436.98,1214.16 1437.56,1214.16 1438.15,1214.16 1438.74,1214.16 1439.32,1214.16 1439.91,1214.16 1440.5,1214.16 1441.08,1214.16 1441.67,1214.16 1442.25,1214.16 1442.84,1214.16 1443.43,1214.16 1444.01,1214.16 1444.6,1214.16 1445.19,1214.16 1445.77,1214.16 1446.36,1214.16 1446.95,1214.16 1447.53,1214.16 1448.12,1214.16 1448.7,1214.16 1449.29,1214.16 1449.88,1214.16 1450.46,1214.16 1451.05,1214.16 1451.64,1214.16 1452.22,1214.16 1452.81,1214.16 1453.4,1214.16 1453.98,1214.16 1454.57,1214.16 1455.16,1214.16 1455.74,1214.16 1456.33,1214.16 1456.91,1214.16 1457.5,1214.16 1458.09,1214.16 1458.67,1214.16 1459.26,1214.16 1459.85,1214.16 1460.43,1214.16 1461.02,1214.16 1461.61,1214.16 1462.19,1214.16 1462.78,1214.16 1463.37,1214.16 1463.95,1214.16 1464.54,1214.16 1465.12,1214.16 1465.71,1214.16 1466.3,1214.16 1466.88,1214.16 1467.47,1214.16 1468.06,1214.16 1468.64,1214.16 1469.23,1214.16 1469.82,1214.16 1470.4,1214.16 1470.99,1214.16 1471.57,1214.16 1472.16,1214.16 1472.75,1214.16 1473.33,1214.16 1473.92,1214.16 1474.51,1214.16 1475.09,1214.16 1475.68,1214.16 1476.27,1214.16 1476.85,1214.16 1477.44,1214.16 1478.03,1214.16 1478.61,1214.16 1479.2,1214.16 1479.78,1214.16 1480.37,1214.16 1480.96,1214.16 1481.54,1214.16 1482.13,1214.16 1482.72,1214.16 1483.3,1214.16 1483.89,1214.16 1484.48,1214.16 1485.06,1214.16 1485.65,1214.16 1486.24,1214.16 1486.82,1214.16 1487.41,1214.16 1487.99,1214.16 1488.58,1214.16 1489.17,1214.16 1489.75,1214.16 1490.34,1214.16 1490.93,1214.16 1491.51,1214.16 1492.1,1214.16 1492.69,1214.16 1493.27,1214.16 1493.86,1214.16 1494.45,1214.16 1495.03,1214.16 1495.62,1214.16 1496.2,1214.16 1496.79,1214.16 1497.38,1214.16 1497.96,1214.16 1498.55,1214.16 1499.14,1214.16 1499.72,1214.16 1500.31,1214.16 1500.9,1214.16 1501.48,1214.16 1502.07,1214.16 1502.65,1214.16 1503.24,1214.16 1503.83,1214.16 1504.41,1214.16 1505,1214.16 1505.59,1214.16 1506.17,1214.16 1506.76,1214.16 1507.35,1214.16 1507.93,1214.16 1508.52,1214.16 1509.11,1214.16 1509.69,1214.16 1510.28,1214.16 1510.86,1214.16 1511.45,1214.16 1512.04,1214.16 1512.62,1214.16 1513.21,1214.16 1513.8,1214.16 1514.38,1214.16 1514.97,1214.16 1515.56,1214.16 1516.14,1214.16 1516.73,1214.16 1517.32,1214.16 1517.9,1214.16 1518.49,1214.16 1519.07,1214.16 1519.66,1214.16 1520.25,1214.16 1520.83,1214.16 1521.42,1214.16 1522.01,1214.16 1522.59,1214.16 1523.18,1214.16 1523.77,1214.16 1524.35,1214.16 1524.94,1214.16 1525.52,1214.16 1526.11,1214.16 1526.7,1214.16 1527.28,1214.16 1527.87,1214.16 1528.46,1214.16 1529.04,1214.16 1529.63,1214.16 1530.22,1214.16 1530.8,1214.16 1531.39,1214.16 1531.98,1214.16 1532.56,1214.16 1533.15,1214.16 1533.73,1214.16 1534.32,1214.16 1534.91,1214.16 1535.49,1214.16 1536.08,1214.16 1536.67,1214.16 1537.25,1214.16 1537.84,1214.16 1538.43,1214.16 1539.01,1214.16 1539.6,1214.16 1540.19,1214.16 1540.77,1214.16 1541.36,1214.16 1541.94,1214.16 1542.53,1214.16 1543.12,1214.16 1543.7,1214.16 1544.29,1214.16 1544.88,1214.16 1545.46,1214.16 1546.05,1214.16 1546.64,1214.16 1547.22,1214.16 1547.81,1214.16 1548.4,1214.16 1548.98,1214.16 1549.57,1214.16 1550.15,1214.16 1550.74,1214.16 1551.33,1214.16 1551.91,1214.16 1552.5,1214.16 1553.09,1214.16 1553.67,1214.16 1554.26,1214.16 1554.85,1214.16 1555.43,1214.16 1556.02,1214.16 1556.6,1214.16 1557.19,1214.16 1557.78,1214.16 1558.36,1214.16 1558.95,1214.16 1559.54,1214.16 1560.12,1214.16 1560.71,1214.16 1561.3,1214.16 1561.88,1214.16 1562.47,1214.16 1563.06,1214.16 1563.64,1214.16 1564.23,1214.16 1564.81,1214.16 1565.4,1214.16 1565.99,1214.16 1566.57,1214.16 1567.16,1214.16 1567.75,1214.16 1568.33,1214.16 1568.92,1214.16 1569.51,1214.16 1570.09,1214.16 1570.68,1214.16 1571.27,1214.16 1571.85,1214.16 1572.44,1214.16 1573.02,1214.16 1573.61,1214.16 1574.2,1214.16 1574.78,1214.16 1575.37,1214.16 1575.96,1214.16 1576.54,1214.16 1577.13,1214.16 1577.72,1214.16 1578.3,1214.16 1578.89,1214.16 1579.47,1214.16 1580.06,1214.16 1580.65,1214.16 1581.23,1214.16 1581.82,1214.16 1582.41,1214.16 1582.99,1214.16 1583.58,1214.16 1584.17,1214.16 1584.75,1214.16 1585.34,1214.16 1585.93,1214.16 1586.51,1214.16 1587.1,1214.16 1587.68,1214.16 1588.27,1214.16 1588.86,1214.16 1589.44,1214.16 1590.03,1214.16 1590.62,1214.16 1591.2,1214.16 1591.79,1214.16 1592.38,1214.16 1592.96,1214.16 1593.55,1214.16 1594.14,1214.16 1594.72,1214.16 1595.31,1214.16 1595.89,1214.16 1596.48,1214.16 1597.07,1214.16 1597.65,1214.16 1598.24,1214.16 1598.83,1214.16 1599.41,1214.16 1600,1214.16 1600.59,1214.16 1601.17,1214.16 1601.76,1214.16 1602.34,1214.16 1602.93,1214.16 1603.52,1214.16 1604.1,1214.16 1604.69,1214.16 1605.28,1214.16 1605.86,1214.16 1606.45,1214.16 1607.04,1214.16 1607.62,1214.16 1608.21,1214.16 1608.8,1214.16 1609.38,1214.16 1609.97,1214.16 1610.55,1214.16 1611.14,1214.16 1611.73,1214.16 1612.31,1214.16 1612.9,1214.16 1613.49,1214.16 1614.07,1214.16 1614.66,1214.16 1615.25,1214.16 1615.83,1214.16 1616.42,1214.16 1617.01,1214.16 1617.59,1214.16 1618.18,1214.16 1618.76,1214.16 1619.35,1214.16 1619.94,1214.16 1620.52,1214.16 1621.11,1214.16 1621.7,1214.16 1622.28,1214.16 1622.87,1214.16 1623.46,1214.16 1624.04,1214.16 1624.63,1214.16 1625.22,1214.16 1625.8,1214.16 1626.39,1214.16 1626.97,1214.16 1627.56,1214.16 1628.15,1214.16 1628.73,1214.16 1629.32,1214.16 1629.91,1214.16 1630.49,1214.16 1631.08,1214.16 1631.67,1214.16 1632.25,1214.16 1632.84,1214.16 1633.42,1214.16 1634.01,1214.16 1634.6,1214.16 1635.18,1214.16 1635.77,1214.16 1636.36,1214.16 1636.94,1214.16 1637.53,1214.16 1638.12,1214.16 1638.7,1214.16 1639.29,1214.16 1639.88,1214.16 1640.46,1214.16 1641.05,1214.16 1641.63,1214.16 1642.22,1214.16 1642.81,1214.16 1643.39,1214.16 1643.98,1214.16 1644.57,1214.16 1645.15,1214.16 1645.74,1214.16 1646.33,1214.16 1646.91,1214.16 1647.5,1214.16 1648.09,1214.16 1648.67,1214.16 1649.26,1214.16 1649.84,1214.16 1650.43,1214.16 1651.02,1214.16 1651.6,1214.16 1652.19,1214.16 1652.78,1214.16 1653.36,1214.16 1653.95,1214.16 1654.54,1214.16 1655.12,1214.16 1655.71,1214.16 1656.29,1214.16 1656.88,1214.16 1657.47,1214.16 1658.05,1214.16 1658.64,1214.16 1659.23,1214.16 1659.81,1214.16 1660.4,1214.16 1660.99,1214.16 1661.57,1214.16 1662.16,1214.16 1662.75,1214.16 1663.33,1214.16 1663.92,1214.16 1664.5,1214.16 1665.09,1214.16 1665.68,1214.16 1666.26,1214.16 1666.85,1214.16 1667.44,1214.16 1668.02,1214.16 1668.61,1214.16 1669.2,1214.16 1669.78,1214.16 1670.37,1214.16 1670.96,1214.16 1671.54,1214.16 1672.13,1214.16 1672.71,1214.16 1673.3,1214.16 1673.89,1214.16 1674.47,1214.16 1675.06,1214.16 1675.65,1214.16 1676.23,1214.16 1676.82,1214.16 1677.41,1214.16 1677.99,1214.16 1678.58,1214.16 1679.17,1214.16 1679.75,1214.16 1680.34,1214.16 1680.92,1214.16 1681.51,1214.16 1682.1,1214.16 1682.68,1214.16 1683.27,1214.16 1683.86,1214.16 1684.44,1214.16 1685.03,1214.16 1685.62,1214.16 1686.2,1214.16 1686.79,1214.16 1687.37,1214.16 1687.96,1214.16 1688.55,1214.16 1689.13,1214.16 1689.72,1214.16 1690.31,1214.16 1690.89,1214.16 1691.48,1214.16 1692.07,1214.16 1692.65,1214.16 1693.24,1214.16 1693.83,1214.16 1694.41,1214.16 1695,1214.16 1695.58,1214.16 1696.17,1214.16 1696.76,1214.16 1697.34,1214.16 1697.93,1214.16 1698.52,1214.16 1699.1,1214.16 1699.69,1214.16 1700.28,1214.16 1700.86,1214.16 1701.45,1214.16 1702.04,1214.16 1702.62,1214.16 1703.21,1214.16 1703.79,1214.16 1704.38,1214.16 1704.97,1214.16 1705.55,1214.16 1706.14,1214.16 1706.73,1214.16 1707.31,1214.16 1707.9,1214.16 1708.49,1214.16 1709.07,1214.16 1709.66,1214.16 1710.24,1214.16 1710.83,1214.16 1711.42,1214.16 1712,1214.16 1712.59,1214.16 1713.18,1214.16 1713.76,1214.16 1714.35,1214.16 1714.94,1214.16 1715.52,1214.16 1716.11,1214.16 1716.7,1214.16 1717.28,1214.16 1717.87,1214.16 1718.45,1214.16 1719.04,1214.16 1719.63,1214.16 1720.21,1214.16 1720.8,1214.16 1721.39,1214.16 1721.97,1214.16 1722.56,1214.16 1723.15,1214.16 1723.73,1214.16 1724.32,1214.16 1724.91,1214.16 1725.49,1214.16 1726.08,1214.16 1726.66,1214.16 1727.25,1214.16 1727.84,1214.16 1728.42,1214.16 1729.01,1214.16 1729.6,1214.16 1730.18,1214.16 1730.77,1214.16 1731.36,1214.16 1731.94,1214.16 1732.53,1214.16 1733.11,1214.16 1733.7,1214.16 1734.29,1214.16 1734.87,1214.16 1735.46,1214.16 1736.05,1214.16 1736.63,1214.16 1737.22,1214.16 1737.81,1214.16 1738.39,1214.16 1738.98,1214.16 1739.57,1214.16 1740.15,1214.16 1740.74,1214.16 1741.32,1214.16 1741.91,1214.16 1742.5,1214.16 1743.08,1214.16 1743.67,1214.16 1744.26,1214.16 1744.84,1214.16 1745.43,1214.16 1746.02,1214.16 1746.6,1214.16 1747.19,1214.16 1747.78,1214.16 1748.36,1214.16 1748.95,1214.16 1749.53,1214.16 1750.12,1214.16 1750.71,1214.16 1751.29,1214.16 1751.88,1214.16 1752.47,1214.16 1753.05,1214.16 1753.64,1214.16 1754.23,1214.16 1754.81,1214.16 1755.4,1214.16 1755.99,1214.16 1756.57,1214.16 1757.16,1214.16 1757.74,1214.16 1758.33,1214.16 1758.92,1214.16 1759.5,1214.16 1760.09,1214.16 1760.68,1214.16 1761.26,1214.16 1761.85,1214.16 1762.44,1214.16 1763.02,1214.16 1763.61,1214.16 1764.19,1214.16 1764.78,1214.16 1765.37,1214.16 1765.95,1214.16 1766.54,1214.16 1767.13,1214.16 1767.71,1214.16 1768.3,1214.16 1768.89,1214.16 1769.47,1214.16 1770.06,1214.16 1770.65,1214.16 1771.23,1214.16 1771.82,1214.16 1772.4,1214.16 1772.99,1214.16 1773.58,1214.16 1774.16,1214.16 1774.75,1214.16 1775.34,1214.16 1775.92,1214.16 1776.51,1214.16 1777.1,1214.16 1777.68,1214.16 1778.27,1214.16 1778.86,1214.16 1779.44,1214.16 1780.03,1214.16 1780.61,1214.16 1781.2,1214.16 1781.79,1214.16 1782.37,1214.16 1782.96,1214.16 1783.55,1214.16 1784.13,1214.16 1784.72,1214.16 1785.31,1214.16 1785.89,1214.16 1786.48,1214.16 1787.06,1214.16 1787.65,1214.16 1788.24,1214.16 1788.82,1214.16 1789.41,1214.16 1790,1214.16 1790.58,1214.16 1791.17,1214.16 1791.76,1214.16 1792.34,1214.16 1792.93,1214.16 1793.52,1214.16 1794.1,1214.16 1794.69,1214.16 1795.27,1214.16 1795.86,1214.16 1796.45,1214.16 1797.03,1214.16 1797.62,1214.16 1798.21,1214.16 1798.79,1214.16 1799.38,1214.16 1799.97,1214.16 1800.55,1214.16 1801.14,1214.16 1801.73,1214.16 1802.31,1214.16 1802.9,1214.16 1803.48,1214.16 1804.07,1214.16 1804.66,1214.16 1805.24,1214.16 1805.83,1214.16 1806.42,1214.16 1807,1214.16 1807.59,1214.16 1808.18,1214.16 1808.76,1214.16 1809.35,1214.16 1809.94,1214.16 1810.52,1214.16 1811.11,1214.16 1811.69,1214.16 1812.28,1214.16 1812.87,1214.16 1813.45,1214.16 1814.04,1214.16 1814.63,1214.16 1815.21,1214.16 1815.8,1214.16 1816.39,1214.16 1816.97,1214.16 1817.56,1214.16 1818.14,1214.16 1818.73,1214.16 1819.32,1214.16 1819.9,1214.16 1820.49,1214.16 1821.08,1214.16 1821.66,1214.16 1822.25,1214.16 1822.84,1214.16 1823.42,1214.16 1824.01,1214.16 1824.6,1214.16 1825.18,1214.16 1825.77,1214.16 1826.35,1214.16 1826.94,1214.16 1827.53,1214.16 1828.11,1214.16 1828.7,1214.16 1829.29,1214.16 1829.87,1214.16 1830.46,1214.16 1831.05,1214.16 1831.63,1214.16 1832.22,1214.16 1832.81,1214.16 1833.39,1214.16 1833.98,1214.16 1834.56,1214.16 1835.15,1214.16 1835.74,1214.16 1836.32,1214.16 1836.91,1214.16 1837.5,1214.16 1838.08,1214.16 1838.67,1214.16 1839.26,1214.16 1839.84,1214.16 1840.43,1214.16 1841.01,1214.16 1841.6,1214.16 1842.19,1214.16 1842.77,1214.16 1843.36,1214.16 1843.95,1214.16 1844.53,1214.16 1845.12,1214.16 1845.71,1214.16 1846.29,1214.16 1846.88,1214.16 1847.47,1214.16 1848.05,1214.16 1848.64,1214.16 1849.22,1214.16 1849.81,1214.16 1850.4,1214.16 1850.98,1214.16 1851.57,1214.16 1852.16,1214.16 1852.74,1214.16 1853.33,1214.16 1853.92,1214.16 1854.5,1214.16 1855.09,1214.16 1855.68,1214.16 1856.26,1214.16 1856.85,1214.16 1857.43,1214.16 1858.02,1214.16 1858.61,1214.16 1859.19,1214.16 1859.78,1214.16 1860.37,1214.16 1860.95,1214.16 1861.54,1214.16 1862.13,1214.16 1862.71,1214.16 1863.3,1214.16 1863.88,1214.16 1864.47,1214.16 1865.06,1214.16 1865.64,1214.16 1866.23,1214.16 1866.82,1214.16 1867.4,1214.16 1867.99,1214.16 1868.58,1214.16 1869.16,1214.16 1869.75,1214.16 1870.34,1214.16 1870.92,1214.16 1871.51,1214.16 1872.09,1214.16 1872.68,1214.16 1873.27,1214.16 1873.85,1214.16 1874.44,1214.16 1875.03,1214.16 1875.61,1214.16 1876.2,1214.16 1876.79,1214.16 1877.37,1214.16 1877.96,1214.16 1878.55,1214.16 1879.13,1214.16 1879.72,1214.16 1880.3,1214.16 1880.89,1214.16 1881.48,1214.16 1882.06,1214.16 1882.65,1214.16 1883.24,1214.16 1883.82,1214.16 1884.41,1214.16 1885,1214.16 1885.58,1214.16 1886.17,1214.16 1886.76,1214.16 1887.34,1214.16 1887.93,1214.16 1888.51,1214.16 1889.1,1214.16 1889.69,1214.16 1890.27,1214.16 1890.86,1214.16 1891.45,1214.16 1892.03,1214.16 1892.62,1214.16 1893.21,1214.16 1893.79,1214.16 1894.38,1214.16 1894.96,1214.16 1895.55,1214.16 1896.14,1214.16 1896.72,1214.16 1897.31,1214.16 1897.9,1214.16 1898.48,1214.16 1899.07,1214.16 1899.66,1214.16 1900.24,1214.16 1900.83,1214.16 1901.42,1214.16 1902,1214.16 1902.59,1214.16 1903.17,1214.16 1903.76,1214.16 1904.35,1214.16 1904.93,1214.16 1905.52,1214.16 1906.11,1214.16 1906.69,1214.16 1907.28,1214.16 1907.87,1214.16 1908.45,1214.16 1909.04,1214.16 1909.63,1214.16 1910.21,1214.16 1910.8,1214.16 1911.38,1214.16 1911.97,1214.16 1912.56,1214.16 1913.14,1214.16 1913.73,1214.16 1914.32,1214.16 1914.9,1214.16 1915.49,1214.16 1916.08,1214.16 1916.66,1214.16 1917.25,1214.16 1917.83,1214.16 1918.42,1214.16 1919.01,1214.16 1919.59,1214.16 1920.18,1214.16 1920.77,1214.16 1921.35,1214.16 1921.94,1214.16 1922.53,1214.16 1923.11,1214.16 1923.7,1214.16 1924.29,1214.16 1924.87,1214.16 1925.46,1214.16 1926.04,1214.16 1926.63,1214.16 1927.22,1214.16 1927.8,1214.16 1928.39,1214.16 1928.98,1214.16 1929.56,1214.16 1930.15,1214.16 1930.74,1214.16 1931.32,1214.16 1931.91,1214.16 1932.5,1214.16 1933.08,1214.16 1933.67,1214.16 1934.25,1214.16 1934.84,1214.16 1935.43,1214.16 1936.01,1214.16 1936.6,1214.16 1937.19,1214.16 1937.77,1214.16 1938.36,1214.16 1938.95,1214.16 1939.53,1214.16 1940.12,1214.16 1940.71,1214.16 1941.29,1214.16 1941.88,1214.16 1942.46,1214.16 1943.05,1214.16 1943.64,1214.16 1944.22,1214.16 1944.81,1214.16 1945.4,1214.16 1945.98,1214.16 1946.57,1214.16 1947.16,1214.16 1947.74,1214.16 1948.33,1214.16 1948.91,1214.16 1949.5,1214.16 1950.09,1214.16 1950.67,1214.16 1951.26,1214.16 1951.85,1214.16 1952.43,1214.16 1953.02,1214.16 1953.61,1214.16 1954.19,1214.16 1954.78,1214.16 1955.37,1214.16 1955.95,1214.16 1956.54,1214.16 1957.12,1214.16 1957.71,1214.16 1958.3,1214.16 1958.88,1214.16 1959.47,1214.16 1960.06,1214.16 1960.64,1214.16 1961.23,1214.16 1961.82,1214.16 1962.4,1214.16 1962.99,1214.16 1963.58,1214.16 1964.16,1214.16 1964.75,1214.16 1965.33,1214.16 1965.92,1214.16 1966.51,1214.16 1967.09,1214.16 1967.68,1214.16 1968.27,1214.16 1968.85,1214.16 1969.44,1214.16 1970.03,1214.16 1970.61,1214.16 1971.2,1214.16 1971.78,1214.16 1972.37,1214.16 1972.96,1214.16 1973.54,1214.16 1974.13,1214.16 1974.72,1214.16 1975.3,1214.16 1975.89,1214.16 1976.48,1214.16 1977.06,1214.16 1977.65,1214.16 1978.24,1214.16 1978.82,1214.16 1979.41,1214.16 1979.99,1214.16 1980.58,1214.16 1981.17,1214.16 1981.75,1214.16 1982.34,1214.16 1982.93,1214.16 1983.51,1214.16 1984.1,1214.16 1984.69,1214.16 1985.27,1214.16 1985.86,1214.16 1986.45,1214.16 1987.03,1214.16 1987.62,1214.16 1988.2,1214.16 1988.79,1214.16 1989.38,1214.16 1989.96,1214.16 1990.55,1214.16 1991.14,1214.16 1991.72,1214.16 1992.31,1214.16 1992.9,1214.16 1993.48,1214.16 1994.07,1214.16 1994.65,1214.16 1995.24,1214.16 1995.83,1214.16 1996.41,1214.16 1997,1214.16 1997.59,1214.16 1998.17,1214.16 1998.76,1214.16 1999.35,1214.16 1999.93,1214.16 2000.52,1214.16 2001.11,1214.16 2001.69,1214.16 2002.28,1214.16 2002.86,1214.16 2003.45,1214.16 2004.04,1214.16 2004.62,1214.16 2005.21,1214.16 2005.8,1214.16 2006.38,1214.16 2006.97,1214.16 2007.56,1214.16 2008.14,1214.16 2008.73,1214.16 2009.32,1214.16 2009.9,1214.16 2010.49,1214.16 2011.07,1214.16 2011.66,1214.16 2012.25,1214.16 2012.83,1214.16 2013.42,1214.16 2014.01,1214.16 2014.59,1214.16 2015.18,1214.16 2015.77,1214.16 2016.35,1214.16 2016.94,1214.16 2017.53,1214.16 2018.11,1214.16 2018.7,1214.16 2019.28,1214.16 2019.87,1214.16 2020.46,1214.16 2021.04,1214.16 2021.63,1214.16 2022.22,1214.16 2022.8,1214.16 2023.39,1214.16 2023.98,1214.16 2024.56,1214.16 2025.15,1214.16 2025.73,1214.16 2026.32,1214.16 2026.91,1214.16 2027.49,1214.16 2028.08,1214.16 2028.67,1214.16 2029.25,1214.16 2029.84,1214.16 2030.43,1214.16 2031.01,1214.16 2031.6,1214.16 2032.19,1214.16 2032.77,1214.16 2033.36,1214.16 2033.94,1214.16 2034.53,1214.16 2035.12,1214.16 2035.7,1214.16 2036.29,1214.16 2036.88,1214.16 2037.46,1214.16 2038.05,1214.16 2038.64,1214.16 2039.22,1214.16 2039.81,1214.16 2040.4,1214.16 2040.98,1214.16 2041.57,1214.16 2042.15,1214.16 2042.74,1214.16 2043.33,1214.16 2043.91,1214.16 2044.5,1214.16 2045.09,1214.16 2045.67,1214.16 2046.26,1214.16 2046.85,1214.16 2047.43,1214.16 2048.02,1214.16 2048.6,1214.16 2049.19,1214.16 2049.78,1214.16 2050.36,1214.16 2050.95,1214.16 2051.54,1214.16 2052.12,1214.16 2052.71,1214.16 2053.3,1214.16 2053.88,1214.16 2054.47,1214.16 2055.06,1214.16 2055.64,1214.16 2056.23,1214.16 2056.81,1214.16 2057.4,1214.16 2057.99,1214.16 2058.57,1214.16 2059.16,1214.16 2059.75,1214.16 2060.33,1214.16 2060.92,1214.16 2061.51,1214.16 2062.09,1214.16 2062.68,1214.16 2063.27,1214.16 2063.85,1214.16 2064.44,1214.16 2065.02,1214.16 2065.61,1214.16 2066.2,1214.16 2066.78,1214.16 2067.37,1214.16 2067.96,1214.16 2068.54,1214.16 2069.13,1214.16 2069.72,1214.16 2070.3,1214.16 2070.89,1214.16 2071.48,1214.16 2072.06,1214.16 2072.65,1214.16 2073.23,1214.16 2073.82,1214.16 2074.41,1214.16 2074.99,1214.16 2075.58,1214.16 2076.17,1214.16 2076.75,1214.16 2077.34,1214.16 2077.93,1214.16 2078.51,1214.16 2079.1,1214.16 2079.68,1214.16 2080.27,1214.16 2080.86,1214.16 2081.44,1214.16 2082.03,1214.16 2082.62,1214.16 2083.2,1214.16 2083.79,1214.16 2084.38,1214.16 2084.96,1214.16 2085.55,1214.16 2086.14,1214.16 2086.72,1214.16 2087.31,1214.16 2087.89,1214.16 2088.48,1214.16 2089.07,1214.16 2089.65,1214.16 2090.24,1214.16 2090.83,1214.16 2091.41,1214.16 2092,1214.16 2092.59,1214.16 2093.17,1214.16 2093.76,1214.16 2094.35,1214.16 2094.93,1214.16 2095.52,1214.16 2096.1,1214.16 2096.69,1214.16 2097.28,1214.16 2097.86,1214.16 2098.45,1214.16 2099.04,1214.16 2099.62,1214.16 2100.21,1214.16 2100.8,1214.16 2101.38,1214.16 2101.97,1214.16 2102.55,1214.16 2103.14,1214.16 2103.73,1214.16 2104.31,1214.16 2104.9,1214.16 2105.49,1214.16 2106.07,1214.16 2106.66,1214.16 2107.25,1214.16 2107.83,1214.16 2108.42,1214.16 2109.01,1214.16 2109.59,1214.16 2110.18,1214.16 2110.76,1214.16 2111.35,1214.16 2111.94,1214.16 2112.52,1214.16 2113.11,1214.16 2113.7,1214.16 2114.28,1214.16 2114.87,1214.16 2115.46,1214.16 2116.04,1214.16 2116.63,1214.16 2117.22,1214.16 2117.8,1214.16 2118.39,1214.16 2118.97,1214.16 2119.56,1214.16 2120.15,1214.16 2120.73,1214.16 2121.32,1214.16 2121.91,1214.16 2122.49,1214.16 2123.08,1214.16 2123.67,1214.16 2124.25,1214.16 2124.84,1214.16 2125.42,1214.16 2126.01,1214.16 2126.6,1214.16 2127.18,1214.16 2127.77,1214.16 2128.36,1214.16 2128.94,1214.16 2129.53,1214.16 2130.12,1214.16 2130.7,1214.16 2131.29,1214.16 2131.88,1214.16 2132.46,1214.16 2133.05,1214.16 2133.63,1214.16 2134.22,1214.16 2134.81,1214.16 2135.39,1214.16 2135.98,1214.16 2136.57,1214.16 2137.15,1214.16 2137.74,1214.16 2138.33,1214.16 2138.91,1214.16 2139.5,1214.16 2140.09,1214.16 2140.67,1214.16 2141.26,1214.16 2141.84,1214.16 2142.43,1214.16 2143.02,1214.16 2143.6,1214.16 2144.19,1214.16 2144.78,1214.16 2145.36,1214.16 2145.95,1214.16 2146.54,1214.16 2147.12,1214.16 2147.71,1214.16 2148.3,1214.16 2148.88,1214.16 2149.47,1214.16 2150.05,1214.16 2150.64,1214.16 2151.23,1214.16 2151.81,1214.16 2152.4,1214.16 2152.99,1214.16 2153.57,1214.16 2154.16,1214.16 2154.75,1214.16 2155.33,1214.16 2155.92,1214.16 2156.5,1214.16 2157.09,1214.16 2157.68,1214.16 2158.26,1214.16 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.42,1194.82 1398.96,899.083 \"/>\n<polyline clip-path=\"url(#clip972)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.79 985.439,1194.82 2158.26,1194.82 2158.26,1232.79 985.439,1232.79 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip973\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip970)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip970)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip970)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip973)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1435.62 162.114,-2769.67 162.673,-3993.9 163.232,-3712.73 163.792,-3538.84 164.351,-4604.42 164.91,-5537.83 165.469,-6434.22 166.029,-7195.28 166.588,-7941.04 167.147,-8587.24 167.706,-9168.91 168.266,-8010.75 168.825,-8549.12 169.384,-9057.38 169.943,-9512.3 170.503,-9917.33 171.062,-10261 171.621,-9983.42 172.18,-10300.8 172.74,-10052.1 173.299,-10322.6 173.858,-10555 174.417,-10759.9 174.977,-10500.4 175.536,-10659.8 176.095,-10424.1 176.655,-10541.2 177.214,-10645.5 177.773,-10419.5 178.332,-9926.17 178.892,-9984.16 179.451,-9764.32 180.01,-9777.6 180.569,-9781.89 181.129,-9373.8 181.688,-9171.8 182.247,-8970.62 182.806,-8790.57 183.366,-8457.3 183.925,-8286.55 184.484,-8105.83 185.043,-7932.38 185.603,-7767.34 186.162,-7604.85 186.721,-7540.16 187.28,-7370.15 187.84,-7097.45 188.399,-6927 188.958,-6668.26 189.517,-6426.91 190.077,-6286.75 190.636,-6058.41 191.195,-6008.77 191.754,-5859.22 192.314,-5720.65 192.873,-5659.18 193.432,-5519.24 193.991,-5258.34 194.551,-5197.57 195.11,-5129.64 195.669,-5054.11 196.228,-4862.9 196.788,-4522.25 197.347,-4413.86 197.906,-4204.99 198.465,-3911.14 199.025,-3870 199.584,-3777.17 200.143,-3683.31 200.702,-3627.71 201.262,-3574.46 201.821,-3477.4 202.38,-3422.46 202.939,-3282.79 203.499,-3186.62 204.058,-3054.92 204.617,-2961.43 205.176,-2875.9 205.736,-2822.88 206.295,-2624.38 206.854,-2544.24 207.413,-2359.75 207.973,-2281.74 208.532,-2141.13 209.091,-2005.69 209.65,-1906.89 210.21,-1842.09 210.769,-1809.04 211.328,-1768.93 211.887,-1701.19 212.447,-1521.16 213.006,-1482.74 213.565,-1420.42 214.124,-1303.6 214.684,-1296.37 215.243,-1179.38 215.802,-1149.63 216.361,-1143.02 216.921,-1085.78 217.48,-1027.26 218.039,-890.639 218.598,-809.627 219.158,-760.85 219.717,-686.695 220.276,-614.766 220.835,-591.707 221.395,-570.975 221.954,-568.816 222.513,-520.158 223.072,-427.564 223.632,-405.107 224.191,-294.557 224.75,-272.7 225.309,-253.519 225.869,-165.366 226.428,-211.864 226.987,-147.91 227.546,-45.0198 228.106,-27.6891 228.665,53.1863 229.224,69.8321 229.783,88.3085 230.343,183.256 230.902,172.434 231.461,184.567 232.02,216.464 232.58,270.852 233.139,321.696 233.698,350.356 234.257,361.694 234.817,392.915 235.376,419.342 235.935,464.633 236.494,509.753 237.054,531.919 237.613,552.466 238.172,614.091 238.731,617.371 239.291,639.333 239.85,625.463 240.409,661.696 240.968,642.97 241.528,685.801 242.087,670.503 242.646,654.558 243.205,677.078 243.765,699.212 244.324,719.243 244.883,721.497 245.442,725.687 246.002,709.293 246.561,696.721 247.12,750.207 247.679,785.716 248.239,801.761 248.798,804.517 249.357,806.018 249.916,822.367 250.476,820.547 251.035,839.11 251.594,837.109 252.153,857.225 252.713,855.93 253.272,890.749 253.831,904.679 254.39,903.185 254.95,901.497 255.509,899.088 256.068,878.309 256.627,880.017 257.187,896.835 257.746,943.953 258.305,936.359 258.864,879.974 259.424,897.281 259.983,900.404 260.542,901.853 261.101,915.946 261.661,915.174 262.22,864.786 262.779,916.597 263.338,931.639 263.898,930.059 264.457,962.404 265.016,973.062 265.575,984.627 266.135,982.7 266.694,958.976 267.253,955.071 267.812,966.366 268.372,978.397 268.931,955.823 269.49,923.772 270.049,939.403 270.609,952.18 271.168,968.977 271.727,998.296 272.286,1027.42 272.846,1037.01 273.405,1044.62 273.964,1071.17 274.523,1028.94 275.083,1020.75 275.642,1017.06 276.201,1041.75 276.76,1068.1 277.32,1061.96 277.879,1054.17 278.438,1047.46 278.997,1072.37 279.557,1078.28 280.116,1051.96 280.675,1058.74 281.234,1053.2 281.794,1046.71 282.353,1069.78 282.912,1058.19 283.471,1067.9 284.031,1073.91 284.59,1098.62 285.149,1103.29 285.708,1091.2 286.268,1079.02 286.827,1087.49 287.386,1081.02 287.945,1074.9 288.505,1081.1 289.064,1086.85 289.623,1091.27 290.182,1063.31 290.742,1037.62 291.301,1031.93 291.86,993.695 292.419,969.07 292.979,964.523 293.538,963.328 294.097,960.91 294.656,971.934 295.216,983.569 295.775,962.21 296.334,977.47 296.893,986.525 297.453,966.074 298.012,963.491 298.571,957.699 299.13,952.289 299.69,950.315 300.249,996.852 300.808,990.171 301.368,968.181 301.927,965.35 302.486,963.633 303.045,961.11 303.605,959.836 304.164,926.749 304.723,943.152 305.282,955.619 305.842,971.583 306.401,951.941 306.96,914.24 307.519,912.919 308.079,931.39 308.638,962.513 309.197,977.975 309.756,991.712 310.316,968.798 310.875,932.934 311.434,962.156 311.993,989.312 312.553,985.035 313.112,995.867 313.671,1056.82 314.23,1047.29 314.79,1020.35 315.349,1031.77 315.908,1009.43 316.467,1034.46 317.027,1027 317.586,1006.02 318.145,982.845 318.704,978.053 319.264,986.09 319.823,975.784 320.382,949.066 320.941,944.453 321.501,941.647 322.06,936.349 322.619,949.004 323.178,962.138 323.738,955.045 324.297,997.453 324.856,987.196 325.415,999.308 325.975,1006.88 326.534,983.286 327.093,990.052 327.652,981.848 328.212,992.409 328.771,1032.35 329.33,1038.44 329.889,1009.17 330.449,999.253 331.008,971.169 331.567,979.96 332.126,975.256 332.686,962.456 333.245,941.56 333.804,936.854 334.363,949.419 334.923,942.771 335.482,954.183 336.041,934.159 336.6,931.625 337.16,942.714 337.719,953.52 338.278,949.691 338.837,943.63 339.397,936.539 339.956,951.544 340.515,964.652 341.074,971.123 341.634,977.535 342.193,971.295 342.752,1029.26 343.311,996.801 343.871,970.217 344.43,959.008 344.989,952.908 345.548,946.82 346.108,924.796 346.667,920.639 347.226,880.493 347.785,863.654 348.345,892.457 348.904,905.347 349.463,918.393 350.022,925.973 350.582,906.426 351.141,853.791 351.7,853.629 352.259,851.82 352.819,848.461 353.378,831.968 353.937,814.85 354.496,848.243 355.056,829.962 355.615,831.08 356.174,829.171 356.733,846.971 357.293,812.329 357.852,826.589 358.411,841.047 358.97,842.044 359.53,821.577 360.089,805.727 360.648,807.151 361.207,841.159 361.767,825.435 362.326,790.432 362.885,793.483 363.444,777.386 364.004,779.156 364.563,828.409 365.122,809.341 365.681,826.515 366.241,857.491 366.8,835.859 367.359,833.078 367.918,827.163 368.478,825.141 369.037,820.367 369.596,804.603 370.155,821.081 370.715,836.647 371.274,834.697 371.833,833.984 372.392,817.309 372.952,804.905 373.511,826.725 374.07,826.097 374.629,823.791 375.189,841.329 375.748,825.485 376.307,822.246 376.866,833.461 377.426,862.653 377.985,857.481 378.544,803.585 379.103,803.81 379.663,802.001 380.222,833.377 380.781,814.38 381.34,813.238 381.9,814.882 382.459,840.749 383.018,853.706 383.577,865.256 384.137,879.397 384.696,856.634 385.255,855.556 385.814,868.067 386.374,864.316 386.933,862.376 387.492,855.772 388.051,837.994 388.611,865.901 389.17,859.345 389.729,859.102 390.288,889.458 390.848,900.408 391.407,909.138 391.966,837.681 392.525,832.29 393.085,828.805 393.644,838.905 394.203,885.445 394.762,845.442 395.322,860.245 395.881,873.59 396.44,872.345 396.999,870.104 397.559,849.107 398.118,830.1 398.677,791.421 399.236,757.177 399.796,774.064 400.355,770.952 400.914,772.463 401.473,807.439 402.033,821.49 402.592,801.091 403.151,786.053 403.71,785.384 404.27,800.454 404.829,812.983 405.388,854.914 405.947,850.059 406.507,862.645 407.066,841.914 407.625,802.506 408.184,767.873 408.744,783.543 409.303,750.11 409.862,765.641 410.421,794.831 410.981,810.576 411.54,809.565 412.099,823.164 412.658,836.846 413.218,802.168 413.777,816.595 414.336,781.146 414.895,776.144 415.455,775.922 416.014,757.905 416.573,791.746 417.132,775.371 417.692,774.548 418.251,773.296 418.81,755.985 419.369,752.942 419.929,769.113 420.488,765.175 421.047,781.44 421.606,814.126 422.166,842.76 422.725,836.984 423.284,817.988 423.843,830.494 424.403,825.924 424.962,841.257 425.521,821.283 426.08,816.832 426.64,798.422 427.199,782.197 427.758,767.16 428.318,802.692 428.877,802.017 429.436,799.347 429.995,799.718 430.555,799.438 431.114,799.992 431.673,795.66 432.232,747.53 432.792,766.028 433.351,799.292 433.91,780.116 434.469,781.582 435.029,780.945 435.588,760.495 436.147,758.429 436.706,804.515 437.266,800.842 437.825,816.449 438.384,831.45 438.943,810.259 439.503,806.689 440.062,738.513 440.621,740.239 441.18,742.085 441.74,794.926 442.299,795.111 442.858,776.61 443.417,758.019 443.977,755.932 444.536,770.321 445.095,785.69 445.654,784.931 446.214,755.335 446.773,755.16 447.332,736.608 447.891,736.824 448.451,738.169 449.01,756.647 449.569,786.291 450.128,782.769 450.688,748.277 451.247,746.801 451.806,746.662 452.365,764.698 452.925,764.39 453.484,780.644 454.043,778.296 454.602,808.353 455.162,787.325 455.721,769.351 456.28,750.196 456.839,733.466 457.399,683.607 457.958,702.488 458.517,720.493 459.076,721.427 459.636,784.881 460.195,778.367 460.754,774.823 461.313,755.544 461.873,789.56 462.432,838.347 462.991,865.589 463.55,845.117 464.11,839.539 464.669,803.784 465.228,799.009 465.787,794.693 466.347,809.683 466.906,805.151 467.465,788.979 468.024,783.805 468.584,782.828 469.143,830.067 469.702,794.897 470.261,806.954 470.821,787.969 471.38,754.217 471.939,738.077 472.498,804.153 473.058,830.456 473.617,793.176 474.176,788.927 474.735,770.607 475.295,767.95 475.854,766.703 476.413,764.462 476.972,781.61 477.532,773.731 478.091,788.115 478.65,800.935 479.209,815.414 479.769,808.063 480.328,788.693 480.887,786.019 481.446,787.349 482.006,784.334 482.565,801.693 483.124,817.03 483.683,797.027 484.243,778.808 484.802,761.998 485.361,762.856 485.92,790.084 486.48,789.904 487.039,756.016 487.598,754.953 488.157,800.725 488.717,795.137 489.276,792.338 489.835,789.613 490.394,785.819 490.954,783.305 491.513,815.051 492.072,796.455 492.631,810.331 493.191,773.071 493.75,803.963 494.309,799.601 494.868,781.365 495.428,776.653 495.987,772.023 496.546,752.512 497.105,714.6 497.665,728.863 498.224,691.3 498.783,691.914 499.342,711.891 499.902,695.291 500.461,731.336 501.02,720.042 501.579,735.906 502.139,719.301 502.698,735.377 503.257,767.56 503.816,752.031 504.376,783.163 504.935,781.981 505.494,813.046 506.053,807.805 506.613,818.839 507.172,817.884 507.731,862.344 508.29,872.345 508.85,881.034 509.409,886.464 509.968,859.099 510.527,834.87 511.087,813.045 511.646,844.63 512.205,853.239 512.764,847.788 513.324,856.055 513.883,851.288 514.442,862.214 515.001,858.695 515.561,786.576 516.12,781.061 516.679,747.233 517.238,729.913 517.798,713.228 518.357,731.928 518.916,712.743 519.475,729.65 520.035,731.017 520.594,715.562 521.153,712.604 521.712,683.663 522.272,671.526 522.831,657.913 523.39,612.401 523.949,601.323 524.509,624.632 525.068,597.008 525.627,606.012 526.186,595.235 526.746,620.391 527.305,627.065 527.864,629.973 528.423,637.194 528.983,672.21 529.542,708.776 530.101,657.881 530.66,644.137 531.22,647.019 531.779,652.012 532.338,705.631 532.897,727.437 533.457,728.579 534.016,728.673 534.575,713.134 535.134,667.061 535.694,703.935 536.253,704.04 536.812,722.194 537.371,739.047 537.931,736.508 538.49,737.481 539.049,755.666 539.608,772.538 540.168,738.383 540.727,754.617 541.286,768.464 541.845,765.216 542.405,748.938 542.964,733.752 543.523,734.511 544.082,764.386 544.642,746.316 545.201,743.007 545.76,739.632 546.319,725.203 546.879,693.094 547.438,726.413 547.997,726.617 548.556,742.502 549.116,738.633 549.675,703.655 550.234,687.864 550.793,707.73 551.353,702.285 551.912,706.368 552.471,720.557 553.031,702.64 553.59,669.355 554.149,671.238 554.708,706.565 555.268,688.795 555.827,721.213 556.386,705.798 556.945,693.884 557.505,727.784 558.064,726.208 558.623,726.56 559.182,743.209 559.742,724.616 560.301,691.119 560.86,723.269 561.419,721.734 561.979,705.135 562.538,672.132 563.097,673.489 563.656,660.429 564.216,710.271 564.775,693.087 565.334,677.479 565.893,661.933 566.453,665.497 567.012,650.186 567.571,671.222 568.13,658.014 568.69,644.832 569.249,648.06 569.808,652.631 570.367,656.89 570.927,659.471 571.486,646.261 572.045,620.066 572.604,623.081 573.164,629.837 573.723,652.012 574.282,669.991 574.841,659.066 575.401,677.058 575.96,661.798 576.519,678.646 577.078,697.283 577.638,679.117 578.197,664.046 578.756,664.433 579.315,683.757 579.875,653.355 580.434,624.295 580.993,646.27 581.552,635.304 582.112,605.996 582.671,609.455 583.23,614.987 583.789,605.246 584.349,626.177 584.908,630.713 585.467,651.653 586.026,671.743 586.586,645.001 587.145,631.604 587.704,617.375 588.263,621.202 588.823,611.999 589.382,617.878 589.941,624.932 590.5,645.205 591.06,679.392 591.619,666.386 592.178,682.383 592.737,697.868 593.297,716.596 593.856,717.337 594.415,734.096 594.974,766.334 595.534,764.905 596.093,744.43 596.652,756.542 597.211,757.261 597.771,786.606 598.33,735.435 598.889,750.814 599.448,734.896 600.008,720.045 600.567,737.137 601.126,733.11 601.685,716.165 602.245,731.312 602.804,731.545 603.363,729.083 603.922,730.196 604.482,729.805 605.041,724.498 605.6,706.572 606.159,691.645 606.719,691.295 607.278,692.213 607.837,693.413 608.396,710.605 608.956,695.958 609.515,724.534 610.074,718.281 610.633,721.112 611.193,687.684 611.752,719.084 612.311,702.98 612.87,719.554 613.43,685.063 613.989,687.602 614.548,715.366 615.107,732.33 615.667,732.058 616.226,759.424 616.785,739.636 617.344,738.935 617.904,739.572 618.463,754.03 619.022,737.738 619.581,735.915 620.141,766.056 620.7,761.361 621.259,743.358 621.818,727.412 622.378,725.755 622.937,728.682 623.496,730.184 624.055,698.988 624.615,733.367 625.174,766.386 625.733,764.698 626.292,743.218 626.852,774.405 627.411,771.467 627.97,766.539 628.529,761.24 629.089,758.515 629.648,784.383 630.207,782.231 630.766,793.731 631.326,790.036 631.885,783.07 632.444,783.904 633.003,827.9 633.563,776.263 634.122,771.852 634.681,818.723 635.24,845.095 635.8,886.039 636.359,875.202 636.918,849.573 637.477,856.314 638.037,815.957 638.596,823.372 639.155,832.21 639.714,856.015 640.274,814.46 640.833,856.736 641.392,835.297 641.951,813.455 642.511,823.375 643.07,814.623 643.629,806.924 644.188,766.786 644.748,759.896 645.307,772.642 645.866,784.78 646.425,763.741 646.985,740.835 647.544,754.79 648.103,733.192 648.662,731.143 649.222,743.912 649.781,727.887 650.34,724.848 650.899,737.398 651.459,718.921 652.018,699.562 652.577,714.198 653.136,679.744 653.696,699.394 654.255,730.95 654.814,713.548 655.373,713.548 655.933,727.764 656.492,724.91 657.051,753.725 657.61,767.813 658.17,749.105 658.729,762.256 659.288,801.041 659.847,797.128 660.407,759.972 660.966,770.773 661.525,765.687 662.084,778.463 662.644,803.998 663.203,783.609 663.762,794.998 664.321,786.409 664.881,764.135 665.44,762.719 665.999,744.193 666.558,742.526 667.118,756.423 667.677,753.201 668.236,718.306 668.795,718.659 669.355,702.737 669.914,670.846 670.473,653.045 671.032,641.105 671.592,645.468 672.151,665.487 672.71,650.188 673.269,655.618 673.829,659.187 674.388,677.77 674.947,661.277 675.506,695.187 676.066,695.668 676.625,700.213 677.184,732.168 677.743,745.6 678.303,759.744 678.862,727.029 679.421,677.512 679.981,699.465 680.54,734.835 681.099,714.447 681.658,667.822 682.218,638.503 682.777,607.616 683.336,578.402 683.895,587.343 684.455,589.384 685.014,577.67 685.573,566.145 686.132,605.57 686.692,594.251 687.251,585.054 687.81,606.013 688.369,592.044 688.929,616.282 689.488,602.817 690.047,577.44 690.606,568.485 691.166,610.188 691.725,583.537 692.284,608.596 692.843,598.269 693.403,601.156 693.962,572.132 694.521,560.553 695.08,601.407 695.64,559.607 696.199,584.872 696.758,606.235 697.317,625.668 697.877,678.234 698.436,666.129 698.995,703.032 699.554,684.548 700.114,689.706 700.673,689.377 701.232,720.898 701.791,719.482 702.351,719.55 702.91,689.289 703.469,640.523 704.028,644.717 704.588,677.755 705.147,697.432 705.706,712.138 706.265,726.975 706.825,726.031 707.384,694.975 707.943,724.517 708.502,739.558 709.062,706.598 709.621,709.817 710.18,677.691 710.739,662.51 711.299,665.24 711.858,685.97 712.417,669.716 712.976,686.901 713.536,704.945 714.095,700.348 714.654,730.62 715.213,746.666 715.773,748.422 716.332,747.47 716.891,779.321 717.45,777.278 718.01,756.031 718.569,770.855 719.128,750.925 719.687,796.944 720.247,823.421 720.806,818.72 721.365,827.466 721.924,818.706 722.484,831.672 723.043,824.094 723.602,817.441 724.161,808.888 724.721,804.027 725.28,846.373 725.839,811.865 726.398,824.558 726.958,850.05 727.517,840.59 728.076,864.898 728.635,870.464 729.195,846.185 729.754,835.422 730.313,811.505 730.872,808.417 731.432,803.368 731.991,760.869 732.55,770.242 733.109,746.396 733.669,709.279 734.228,727.705 734.787,709.638 735.346,676.145 735.906,689.995 736.465,643.375 737.024,617.318 737.583,593.366 738.143,598.533 738.702,618.103 739.261,558.141 739.82,550.127 740.38,573.92 740.939,594.016 741.498,599.268 742.057,619.82 742.617,642.061 743.176,662.554 743.735,664.78 744.294,666.064 744.854,685.906 745.413,683.399 745.972,648.103 746.531,694.858 747.091,660.988 747.65,677.879 748.209,679.067 748.768,665.382 749.328,633.302 749.887,637.619 750.446,657.463 751.005,677.864 751.565,711.617 752.124,660.284 752.683,644.303 753.242,633.239 753.802,684.775 754.361,633.59 754.92,654.585 755.479,670.639 756.039,673.882 756.598,657.905 757.157,660.146 757.716,649.377 758.276,652.7 758.835,650.934 759.394,682.869 759.953,716.224 760.513,699.295 761.072,684.512 761.631,667.194 762.19,670.416 762.75,686.058 763.309,639.818 763.868,674.076 764.427,663.977 764.987,680.782 765.546,667.455 766.105,682.028 766.664,671.411 767.224,672.569 767.783,707.202 768.342,691.054 768.901,688.244 769.461,718.21 770.02,731.159 770.579,728.018 771.138,711.245 771.698,724.61 772.257,754.26 772.816,797.157 773.375,794.298 773.935,773.127 774.494,714.381 775.053,710.765 775.612,675.499 776.172,661.176 776.731,693.087 777.29,655.84 777.849,671.341 778.409,655.882 778.968,627.55 779.527,664.309 780.086,651.507 780.646,621.88 781.205,591.744 781.764,608.15 782.323,599.061 782.883,638.166 783.442,626.927 784.001,615.668 784.56,588.196 785.12,577.198 785.679,613.87 786.238,618.73 786.797,621.594 787.357,595.945 787.916,632.813 788.475,620.294 789.034,574.632 789.594,600.142 790.153,591.268 790.712,579.133 791.271,602.132 791.831,603.668 792.39,606.893 792.949,579.842 793.508,570.663 794.068,591.793 794.627,582.482 795.186,633.405 795.745,619.203 796.305,607.23 796.864,628.145 797.423,646.53 797.982,646.892 798.542,679.202 799.101,708.638 799.66,722.07 800.219,704.728 800.779,721.871 801.338,707.049 801.897,723.67 802.456,671.331 803.016,688.814 803.575,686.886 804.134,704.273 804.693,703.49 805.253,702.178 805.812,692.045 806.371,712.185 806.931,728.768 807.49,742.188 808.049,735.813 808.608,702.238 809.168,736.975 809.727,734.844 810.286,730.621 810.845,714.386 811.405,762.924 811.964,745.336 812.523,742.938 813.082,741.94 813.642,740.858 814.201,771.111 814.76,766.965 815.319,778.88 815.879,775.634 816.438,819.833 816.997,812.425 817.556,819.924 818.116,829.719 818.675,823.933 819.234,802.391 819.793,814.311 820.353,775.256 820.912,787.5 821.471,763.051 822.03,778.109 822.59,760.917 823.149,773.941 823.708,771.673 824.267,783.763 824.827,745.153 825.386,725.514 825.945,695.819 826.504,694.794 827.064,710.053 827.623,695.555 828.182,712.398 828.741,709.347 829.301,757.87 829.86,738.409 830.419,737.395 830.978,751.381 831.538,780.884 832.097,793.068 832.656,770.961 833.215,769.974 833.775,782.462 834.334,744.912 834.893,739.058 835.452,748.384 836.012,742.973 836.571,709.161 837.13,691.59 837.689,692.244 838.249,693.104 838.808,692.678 839.367,697.003 839.926,713.398 840.486,712.381 841.045,710.017 841.604,707.261 842.163,688.236 842.723,685.919 843.282,701.017 843.841,687.17 844.4,722.484 844.96,715.367 845.519,712.414 846.078,698.572 846.637,713.315 847.197,730.983 847.756,698.742 848.315,696.599 848.874,696.122 849.434,715.823 849.993,652.77 850.552,669.378 851.111,669.211 851.671,621.333 852.23,654.575 852.789,656.378 853.348,641.7 853.908,641.232 854.467,627.177 855.026,631.355 855.585,668.29 856.145,634.495 856.704,686.516 857.263,720.398 857.822,766.838 858.382,762.701 858.941,747.678 859.5,761.265 860.059,754.686 860.619,752.834 861.178,749.368 861.737,762.863 862.296,760.684 862.856,758.102 863.415,768.771 863.974,761.513 864.533,742.689 865.093,722.93 865.652,719.41 866.211,705.09 866.77,718.703 867.33,721.852 867.889,734.916 868.448,730.78 869.007,712.548 869.567,726.948 870.126,738.062 870.685,717.075 871.244,699.87 871.804,697.82 872.363,648.101 872.922,652.763 873.481,670.681 874.041,652.165 874.6,652.099 875.159,602.39 875.718,640.357 876.278,641.189 876.837,624.812 877.396,614.379 877.955,600.165 878.515,603.518 879.074,609.583 879.633,596.991 880.192,617.694 880.752,602.755 881.311,625.706 881.87,612.541 882.429,634.01 882.989,634.968 883.548,653.701 884.107,592.822 884.666,612.502 885.226,648.998 885.785,651.813 886.344,670.24 886.903,689.4 887.463,688.822 888.022,658.273 888.581,614.374 889.14,620.432 889.7,639.252 890.259,624.126 890.818,630.113 891.377,634.329 891.937,655.769 892.496,659.078 893.055,677.98 893.614,695.19 894.174,676.159 894.733,658.125 895.292,671.92 895.851,660.157 896.411,660.379 896.97,678.864 897.529,664.397 898.088,665.282 898.648,649.093 899.207,668.486 899.766,672.357 900.325,674.6 900.885,677.005 901.444,680.533 902.003,680.568 902.562,665.421 903.122,621.252 903.681,660.774 904.24,666.801 904.799,638.843 905.359,643.767 905.918,628.14 906.477,680.209 907.036,650.293 907.596,652.912 908.155,636.316 908.714,637.744 909.273,657.268 909.833,658.875 910.392,610.147 910.951,599.349 911.51,602.957 912.07,590.025 912.629,547.897 913.188,524.165 913.747,550.506 914.307,573.886 914.866,597.289 915.425,634.581 915.984,636.816 916.544,637.482 917.103,610.637 917.662,614.777 918.221,651.09 918.781,651.74 919.34,637.089 919.899,638.9 920.458,678.764 921.018,679.678 921.577,663.382 922.136,678.717 922.695,693.236 923.255,690.843 923.814,708.116 924.373,712.928 924.932,714.069 925.492,709.204 926.051,695.223 926.61,678.961 927.169,680.702 927.729,679.089 928.288,698.902 928.847,700.453 929.406,702.076 929.966,713.674 930.525,712.633 931.084,712.216 931.644,725.521 932.203,721.499 932.762,714.366 933.321,743.373 933.881,725.637 934.44,708.09 934.999,705.475 935.558,687.02 936.118,686.784 936.677,684.521 937.236,682.334 937.795,700.007 938.355,699.901 938.914,685.543 939.473,687.675 940.032,687.065 940.592,689.688 941.151,704.361 941.71,701.761 942.269,701.259 942.829,701.272 943.388,746.802 943.947,760.427 944.506,757.979 945.066,769.926 945.625,770.154 946.184,767.294 946.743,749.214 947.303,695.943 947.862,693.584 948.421,675.881 948.98,678.716 949.54,648.869 950.099,687.756 950.658,687.251 951.217,706.079 951.777,688.826 952.336,703.781 952.895,767.229 953.454,746.941 954.014,739.27 954.573,770.346 955.132,765.46 955.691,759.275 956.251,755.197 956.81,731.251 957.369,743.583 957.928,741.242 958.488,741.483 959.047,718.567 959.606,716.04 960.165,696.615 960.725,696.421 961.284,709.241 961.843,721.681 962.402,702.229 962.962,704.632 963.521,718.212 964.08,730.759 964.639,740.592 965.199,738.453 965.758,718.447 966.317,748.194 966.876,776.637 967.436,768.877 967.995,763.297 968.554,761.603 969.113,742.629 969.673,736.52 970.232,751.487 970.791,715.784 971.35,699.995 971.91,716.265 972.469,714.341 973.028,697.493 973.587,697.742 974.147,697.643 974.706,715.414 975.265,714.2 975.824,715.013 976.384,679.913 976.943,682.686 977.502,679.482 978.061,678.666 978.621,658.279 979.18,641.474 979.739,628.846 980.298,598.809 980.858,603.581 981.417,589.103 981.976,608.594 982.535,629.763 983.095,632.637 983.654,619.815 984.213,606.251 984.772,627.529 985.332,646.492 985.891,632.318 986.45,634.036 987.009,633.603 987.569,654.961 988.128,689.523 988.687,689.971 989.246,689.519 989.806,722.68 990.365,685.863 990.924,715.88 991.483,717.3 992.043,714.322 992.602,713.53 993.161,710.616 993.72,679.21 994.28,664.152 994.839,652.629 995.398,654.162 995.957,641.213 996.517,626.521 997.076,632.798 997.635,649.825 998.194,649.513 998.754,666.075 999.313,664.193 999.872,683.947 1000.43,668.237 1000.99,670.922 1001.55,685.884 1002.11,699.477 1002.67,716.447 1003.23,728.137 1003.79,746.324 1004.35,742.29 1004.91,727.12 1005.46,725.412 1006.02,723.281 1006.58,720.344 1007.14,680.827 1007.7,663.897 1008.26,663.09 1008.82,663.242 1009.38,666.676 1009.94,668.872 1010.5,652.247 1011.06,655.909 1011.62,691.202 1012.18,689.259 1012.73,706.377 1013.29,740.834 1013.85,739.142 1014.41,718.865 1014.97,765.882 1015.53,746.733 1016.09,726.369 1016.65,741.612 1017.21,750.905 1017.77,765.078 1018.33,730.316 1018.89,728.187 1019.45,755.67 1020.01,736.543 1020.56,733.243 1021.12,747.123 1021.68,740.124 1022.24,771.687 1022.8,766.079 1023.36,793.015 1023.92,790.26 1024.48,781.504 1025.04,809.135 1025.6,799.673 1026.16,828.303 1026.72,821.902 1027.28,799.234 1027.83,822.703 1028.39,767.86 1028.95,796.591 1029.51,774.043 1030.07,770.232 1030.63,751.433 1031.19,717.912 1031.75,684.368 1032.31,681.548 1032.87,663.517 1033.43,666.544 1033.99,683.516 1034.55,652.7 1035.1,669.048 1035.66,658.675 1036.22,644.399 1036.78,615.333 1037.34,578.838 1037.9,549.247 1038.46,541.545 1039.02,595.591 1039.58,601.904 1040.14,610.351 1040.7,593.445 1041.26,615.134 1041.82,619.134 1042.38,623.227 1042.93,645.129 1043.49,664.805 1044.05,678.381 1044.61,677.057 1045.17,660.317 1045.73,644.307 1046.29,597.178 1046.85,584.11 1047.41,589.196 1047.97,579.901 1048.53,568.378 1049.09,593.419 1049.65,598.907 1050.2,638.437 1050.76,641.893 1051.32,642.26 1051.88,659.915 1052.44,659.706 1053,647.39 1053.56,663.986 1054.12,666.508 1054.68,684.937 1055.24,688.042 1055.8,655.166 1056.36,642.641 1056.92,612.733 1057.48,633.958 1058.03,605.647 1058.59,591.674 1059.15,627.463 1059.71,614.87 1060.27,619.869 1060.83,623.136 1061.39,641.437 1061.95,685.788 1062.51,685.644 1063.07,671.649 1063.63,687.382 1064.19,688.824 1064.75,690.954 1065.3,719.742 1065.86,714.741 1066.42,730.424 1066.98,746.164 1067.54,760.364 1068.1,773.562 1068.66,765.67 1069.22,757.687 1069.78,718.126 1070.34,731.335 1070.9,714.366 1071.46,715.671 1072.02,697.441 1072.57,679.519 1073.13,676.68 1073.69,677.998 1074.25,727.478 1074.81,711.029 1075.37,713.798 1075.93,710.46 1076.49,710.457 1077.05,693.304 1077.61,709.81 1078.17,709.951 1078.73,712.766 1079.29,729.293 1079.85,714.116 1080.4,744.386 1080.96,756.323 1081.52,751.13 1082.08,747.025 1082.64,725.763 1083.2,729.116 1083.76,745.149 1084.32,775.148 1084.88,784.472 1085.44,760.636 1086,739.418 1086.56,737.724 1087.12,783.252 1087.67,762.315 1088.23,790.672 1088.79,835.956 1089.35,847.69 1089.91,822.026 1090.47,833.178 1091.03,873.527 1091.59,830.147 1092.15,838.253 1092.71,795.103 1093.27,790.416 1093.83,814.615 1094.39,791.274 1094.94,785.157 1095.5,732.323 1096.06,717.208 1096.62,679.93 1097.18,648.052 1097.74,618.356 1098.3,634.309 1098.86,639.778 1099.42,705.695 1099.98,707.415 1100.54,708.21 1101.1,721.261 1101.66,737.882 1102.22,767.638 1102.77,729.451 1103.33,725.471 1103.89,721.79 1104.45,703.358 1105.01,701.245 1105.57,685.661 1106.13,699.781 1106.69,733.037 1107.25,728.936 1107.81,711.917 1108.37,677.253 1108.93,677.46 1109.49,644.533 1110.04,661.993 1110.6,603.35 1111.16,593.059 1111.72,530.951 1112.28,520.856 1112.84,526.227 1113.4,515.291 1113.96,527.745 1114.52,551.43 1115.08,545.427 1115.64,518.327 1116.2,544.83 1116.76,567.945 1117.31,572.091 1117.87,598.938 1118.43,600.598 1118.99,589.971 1119.55,625.156 1120.11,647.45 1120.67,700.405 1121.23,685.917 1121.79,672.659 1122.35,690.403 1122.91,688.204 1123.47,705.45 1124.03,689.247 1124.59,690.379 1125.14,692.868 1125.7,695.771 1126.26,683.316 1126.82,633.569 1127.38,639.347 1127.94,643.673 1128.5,663.26 1129.06,665.972 1129.62,684.606 1130.18,696.631 1130.74,685.842 1131.3,701.808 1131.86,750.4 1132.41,746.55 1132.97,746.501 1133.53,789.969 1134.09,800.163 1134.65,778.319 1135.21,759.865 1135.77,753.632 1136.33,752.175 1136.89,767.19 1137.45,747.084 1138.01,726.26 1138.57,737.804 1139.13,691.715 1139.68,739.88 1140.24,736.203 1140.8,732.939 1141.36,761.1 1141.92,754.739 1142.48,770.676 1143.04,780.507 1143.6,776.248 1144.16,773.329 1144.72,768.095 1145.28,762.569 1145.84,726.654 1146.4,757.256 1146.96,753.476 1147.51,751.682 1148.07,761.735 1148.63,757.607 1149.19,752.698 1149.75,714.41 1150.31,710.818 1150.87,707.516 1151.43,672.704 1151.99,658.795 1152.55,693.122 1153.11,722.808 1153.67,723.403 1154.23,736.528 1154.78,749.169 1155.34,730.473 1155.9,709.696 1156.46,675.847 1157.02,708.942 1157.58,692.03 1158.14,673.892 1158.7,654.718 1159.26,651.911 1159.82,639.546 1160.38,658.718 1160.94,629.451 1161.5,610.694 1162.05,616.838 1162.61,621.103 1163.17,639.281 1163.73,625.222 1164.29,610.826 1164.85,628.54 1165.41,647.98 1165.97,645.068 1166.53,648.395 1167.09,634.078 1167.65,637.43 1168.21,653.823 1168.77,657.612 1169.33,678.232 1169.88,712.284 1170.44,693.635 1171,662.824 1171.56,634.057 1172.12,638.386 1172.68,639.1 1173.24,627.613 1173.8,598.318 1174.36,620.678 1174.92,606.539 1175.48,610.753 1176.04,629.904 1176.6,630.356 1177.15,663.905 1177.71,664.978 1178.27,648.086 1178.83,633.175 1179.39,667.463 1179.95,652.993 1180.51,626.048 1181.07,626.556 1181.63,643.224 1182.19,610.439 1182.75,597.42 1183.31,570.757 1183.87,576.225 1184.43,564.93 1184.98,569.106 1185.54,562.456 1186.1,614.918 1186.66,615.961 1187.22,637.611 1187.78,656.092 1188.34,660.134 1188.9,710.225 1189.46,709.912 1190.02,693.205 1190.58,695.012 1191.14,678.463 1191.7,681.44 1192.25,665.987 1192.81,670.688 1193.37,672.659 1193.93,689.514 1194.49,704.401 1195.05,702.127 1195.61,689.737 1196.17,710.078 1196.73,724.492 1197.29,721.079 1197.85,734.669 1198.41,699.492 1198.97,699.105 1199.52,729.561 1200.08,727.257 1200.64,674.921 1201.2,689.918 1201.76,689.994 1202.32,684.663 1202.88,665.569 1203.44,667.957 1204,648.236 1204.56,650.817 1205.12,654.504 1205.68,671.788 1206.24,706.288 1206.8,656.202 1207.35,676.851 1207.91,662.845 1208.47,680.815 1209.03,727.073 1209.59,727.548 1210.15,709.797 1210.71,707.769 1211.27,723.041 1211.83,703.915 1212.39,671.389 1212.95,689.063 1213.51,726.624 1214.07,726.323 1214.62,740.075 1215.18,703.465 1215.74,719.477 1216.3,686.179 1216.86,718.33 1217.42,700.704 1217.98,702.869 1218.54,654.713 1219.1,624.592 1219.66,627.382 1220.22,630.974 1220.78,637.57 1221.34,613.95 1221.89,618.715 1222.45,605.545 1223.01,608.831 1223.57,646.016 1224.13,646.41 1224.69,650.415 1225.25,689.779 1225.81,707.958 1226.37,724.681 1226.93,693.362 1227.49,710.152 1228.05,724.1 1228.61,723.036 1229.17,721.388 1229.72,687.278 1230.28,700.609 1230.84,698.1 1231.4,730.315 1231.96,724.936 1232.52,758.397 1233.08,756.098 1233.64,783.185 1234.2,776.346 1234.76,767.857 1235.32,731.485 1235.88,743.517 1236.44,758.584 1236.99,753.175 1237.55,765.403 1238.11,712.807 1238.67,709.726 1239.23,721.032 1239.79,733.467 1240.35,730.132 1240.91,712.765 1241.47,696.725 1242.03,678.772 1242.59,696.367 1243.15,660.919 1243.71,643.902 1244.26,659.313 1244.82,640.465 1245.38,659.954 1245.94,658.369 1246.5,626.304 1247.06,593.915 1247.62,626.572 1248.18,627.467 1248.74,630.024 1249.3,634.327 1249.86,637.966 1250.42,654.962 1250.98,685.653 1251.54,686.532 1252.09,653.622 1252.65,702.254 1253.21,686.371 1253.77,686.079 1254.33,652.756 1254.89,687.909 1255.45,688.809 1256.01,705.671 1256.57,704.727 1257.13,671.478 1257.69,685.185 1258.25,686.111 1258.81,701.299 1259.36,717.679 1259.92,698.298 1260.48,682.472 1261.04,665.599 1261.6,664.947 1262.16,664.924 1262.72,665.989 1263.28,651.804 1263.84,650.181 1264.4,651.657 1264.96,604.049 1265.52,590 1266.08,595.893 1266.63,599.261 1267.19,586.759 1267.75,560.46 1268.31,582.843 1268.87,587.56 1269.43,533.732 1269.99,572.445 1270.55,596.067 1271.11,587.039 1271.67,612.112 1272.23,595.81 1272.79,566.124 1273.35,589.015 1273.91,576.136 1274.46,567.836 1275.02,605.726 1275.58,610.342 1276.14,632.826 1276.7,699.487 1277.26,653.43 1277.82,622.874 1278.38,629.639 1278.94,665.507 1279.5,679.892 1280.06,710.128 1280.62,680.086 1281.18,679.416 1281.73,694.745 1282.29,691.829 1282.85,705.925 1283.41,733.879 1283.97,751.819 1284.53,718.016 1285.09,718.268 1285.65,699.722 1286.21,667.004 1286.77,672.362 1287.33,672.675 1287.89,651.964 1288.45,621.542 1289,671.921 1289.56,668.821 1290.12,653.129 1290.68,657.701 1291.24,624.151 1291.8,616.584 1292.36,619.64 1292.92,556.739 1293.48,566.52 1294.04,590.744 1294.6,594.847 1295.16,664.333 1295.72,680.808 1296.28,698.633 1296.83,699.563 1297.39,698.613 1297.95,701.234 1298.51,686.315 1299.07,689.09 1299.63,689.596 1300.19,721.97 1300.75,704.862 1301.31,719.416 1301.87,730.205 1302.43,727.283 1302.99,727.09 1303.55,709.101 1304.1,706.999 1304.66,690.884 1305.22,661.065 1305.78,660.863 1306.34,682.601 1306.9,666.208 1307.46,684.539 1308.02,686.121 1308.58,686.779 1309.14,752.392 1309.7,716.346 1310.26,698.036 1310.82,696.794 1311.38,695.887 1311.93,697.506 1312.49,681.958 1313.05,636.429 1313.61,607.388 1314.17,629.635 1314.73,648.89 1315.29,637.941 1315.85,642.841 1316.41,660.194 1316.97,677.49 1317.53,713.965 1318.09,727.879 1318.65,743.563 1319.2,722.856 1319.76,690.181 1320.32,688.04 1320.88,688.728 1321.44,686.545 1322,688.657 1322.56,690.914 1323.12,709.727 1323.68,688.675 1324.24,669.937 1324.8,732.452 1325.36,729.934 1325.92,695.579 1326.47,680.133 1327.03,664.831 1327.59,645.591 1328.15,613.212 1328.71,651.205 1329.27,651.31 1329.83,656.818 1330.39,660.28 1330.95,648.795 1331.51,632.816 1332.07,651.038 1332.63,669.905 1333.19,685.357 1333.75,682.219 1334.3,666.982 1334.86,686.1 1335.42,670.561 1335.98,687.097 1336.54,719.214 1337.1,706.055 1337.66,719.329 1338.22,714.714 1338.78,699.571 1339.34,698.323 1339.9,710.98 1340.46,708.359 1341.02,722.886 1341.57,724.791 1342.13,760.072 1342.69,755.887 1343.25,719.053 1343.81,734.943 1344.37,716.409 1344.93,715.706 1345.49,698.083 1346.05,714.077 1346.61,713.123 1347.17,678.312 1347.73,720.754 1348.29,735.959 1348.84,715.551 1349.4,743.851 1349.96,724.896 1350.52,721.248 1351.08,732.039 1351.64,710.788 1352.2,729.94 1352.76,743.182 1353.32,723.647 1353.88,739.712 1354.44,752.049 1355,744.807 1355.56,738.822 1356.12,752.878 1356.67,762.522 1357.23,741.788 1357.79,709.14 1358.35,722.498 1358.91,736.089 1359.47,717.134 1360.03,715.755 1360.59,665.201 1361.15,663.947 1361.71,629.557 1362.27,631.572 1362.83,651.829 1363.39,621.819 1363.94,642.104 1364.5,674.63 1365.06,693.559 1365.62,691.92 1366.18,721.516 1366.74,719.135 1367.3,700.975 1367.86,701.273 1368.42,700.933 1368.98,698.655 1369.54,682.898 1370.1,699.509 1370.66,664.795 1371.21,680.084 1371.77,669.623 1372.33,705.399 1372.89,707.151 1373.45,719.673 1374.01,699.302 1374.57,699.273 1375.13,713.67 1375.69,713.885 1376.25,745.26 1376.81,690.787 1377.37,674.735 1377.93,690.763 1378.49,691.093 1379.04,721.715 1379.6,748.921 1380.16,696.124 1380.72,663.656 1381.28,652.226 1381.84,657.115 1382.4,646.122 1382.96,614.21 1383.52,634.875 1384.08,605.451 1384.64,656.898 1385.2,630.205 1385.76,666.291 1386.31,661.037 1386.87,646.829 1387.43,650.209 1387.99,636.865 1388.55,636.212 1389.11,621.898 1389.67,675.762 1390.23,657.957 1390.79,671.28 1391.35,683.84 1391.91,695.923 1392.47,696.599 1393.03,711.568 1393.58,708.711 1394.14,724.33 1394.7,722.329 1395.26,737.376 1395.82,732.016 1396.38,713.542 1396.94,711.562 1397.5,724.423 1398.06,689.678 1398.62,671.592 1399.18,672.63 1399.74,674.219 1400.3,676.821 1400.86,655.266 1401.41,642.822 1401.97,613.138 1402.53,615.459 1403.09,634.62 1403.65,571.03 1404.21,578.514 1404.77,568.07 1405.33,541.533 1405.89,547.409 1406.45,603.603 1407.01,572.331 1407.57,627.095 1408.13,630.768 1408.68,634.86 1409.24,639.094 1409.8,638.714 1410.36,608.045 1410.92,612.195 1411.48,597.932 1412.04,622.36 1412.6,662.825 1413.16,647.245 1413.72,651.442 1414.28,638.169 1414.84,653.421 1415.4,635.84 1415.95,637.178 1416.51,658.121 1417.07,657.021 1417.63,671.405 1418.19,687.167 1418.75,704.339 1419.31,717.475 1419.87,748.294 1420.43,728.688 1420.99,720.742 1421.55,705.089 1422.11,669.418 1422.67,683.662 1423.23,686.131 1423.78,686.095 1424.34,685.928 1424.9,688.009 1425.46,686.196 1426.02,719.193 1426.58,715.304 1427.14,714.747 1427.7,697.163 1428.26,676.638 1428.82,612.476 1429.38,615.226 1429.94,620.121 1430.5,609.417 1431.05,628.613 1431.61,645.809 1432.17,666.146 1432.73,730.242 1433.29,727.516 1433.85,707.972 1434.41,690.078 1434.97,689.448 1435.53,688.505 1436.09,691.105 1436.65,706.412 1437.21,703.243 1437.77,682.387 1438.33,717.178 1438.88,749.517 1439.44,777.578 1440,761.509 1440.56,758.608 1441.12,789.668 1441.68,771.411 1442.24,780.793 1442.8,743.341 1443.36,739.628 1443.92,719.876 1444.48,748.169 1445.04,713.791 1445.6,710.279 1446.15,709.297 1446.71,691.884 1447.27,672.154 1447.83,671.683 1448.39,657.859 1448.95,658.314 1449.51,627.136 1450.07,644.707 1450.63,650.187 1451.19,687.702 1451.75,682.294 1452.31,681.913 1452.87,681.736 1453.42,683.385 1453.98,704.164 1454.54,721.539 1455.1,738.724 1455.66,736.958 1456.22,747.421 1456.78,743.466 1457.34,773.515 1457.9,785.747 1458.46,782.598 1459.02,777.793 1459.58,791.215 1460.14,785.612 1460.7,794.611 1461.25,787.469 1461.81,779.091 1462.37,709.604 1462.93,706.343 1463.49,690.501 1464.05,693.412 1464.61,679.875 1465.17,664.495 1465.73,696.934 1466.29,678.981 1466.85,692.961 1467.41,678.455 1467.97,694.997 1468.52,662.35 1469.08,648.188 1469.64,651.658 1470.2,669.488 1470.76,684.764 1471.32,709.928 1471.88,739.018 1472.44,753.607 1473,748.64 1473.56,695.272 1474.12,680.742 1474.68,650.186 1475.24,680.5 1475.79,679.217 1476.35,710.869 1476.91,709.996 1477.47,721.954 1478.03,751.829 1478.59,763.835 1479.15,772.961 1479.71,754.935 1480.27,780.018 1480.83,788.28 1481.39,767.038 1481.95,750.184 1482.51,762.537 1483.07,759.841 1483.62,787.045 1484.18,778.799 1484.74,757.73 1485.3,754.615 1485.86,781.223 1486.42,790.393 1486.98,820.738 1487.54,796.66 1488.1,791.599 1488.66,754.598 1489.22,752.61 1489.78,730.982 1490.34,691.987 1490.89,656.825 1491.45,686.233 1492.01,668.127 1492.57,666.989 1493.13,668.199 1493.69,670.015 1494.25,718.235 1494.81,700.516 1495.37,700.809 1495.93,684.186 1496.49,666.785 1497.05,633.834 1497.61,632.023 1498.16,633.511 1498.72,621.158 1499.28,643.679 1499.84,692.383 1500.4,675.055 1500.96,644.044 1501.52,645.884 1502.08,663.941 1502.64,668.891 1503.2,671.011 1503.76,673.373 1504.32,677.733 1504.88,647.424 1505.44,649.211 1505.99,649.953 1506.55,636.552 1507.11,625.109 1507.67,629.596 1508.23,633.04 1508.79,636.388 1509.35,626.74 1509.91,629.781 1510.47,632.344 1511.03,639.801 1511.59,642.669 1512.15,677.941 1512.71,647.291 1513.26,648.902 1513.82,652.129 1514.38,657.019 1514.94,675.461 1515.5,629.151 1516.06,630.201 1516.62,632.91 1517.18,665.084 1517.74,651.869 1518.3,621.276 1518.86,624.655 1519.42,629.607 1519.98,604.58 1520.53,564.497 1521.09,537.157 1521.65,546.417 1522.21,555.27 1522.77,579.794 1523.33,619.657 1523.89,637.237 1524.45,686.35 1525.01,683.228 1525.57,668.578 1526.13,666.59 1526.69,682.286 1527.25,699.06 1527.81,682.954 1528.36,667.383 1528.92,654.979 1529.48,638.658 1530.04,656.536 1530.6,654.621 1531.16,687.991 1531.72,752.725 1532.28,766.416 1532.84,794.399 1533.4,801.467 1533.96,783.216 1534.52,812.97 1535.08,819.561 1535.63,811.352 1536.19,821.866 1536.75,830.937 1537.31,838.289 1537.87,828.909 1538.43,809.663 1538.99,753.213 1539.55,702.296 1540.11,703.274 1540.67,695.827 1541.23,691.415 1541.79,704.801 1542.35,721.83 1542.9,737.501 1543.46,766.958 1544.02,793.221 1544.58,802.627 1545.14,828.944 1545.7,804.391 1546.26,753.322 1546.82,767.05 1547.38,778.617 1547.94,810.156 1548.5,755.615 1549.06,717.964 1549.62,699.627 1550.18,663.784 1550.73,614.716 1551.29,602.366 1551.85,624.434 1552.41,627.266 1552.97,613.514 1553.53,601.985 1554.09,558.709 1554.65,564.452 1555.21,572.774 1555.77,576.363 1556.33,630.925 1556.89,616.265 1557.45,636.345 1558,637.235 1558.56,671.815 1559.12,638.446 1559.68,657.083 1560.24,672.254 1560.8,656.976 1561.36,640.717 1561.92,627.399 1562.48,644.905 1563.04,676.623 1563.6,645.314 1564.16,643.548 1564.72,645.196 1565.28,663.763 1565.83,699.692 1566.39,683.72 1566.95,683.662 1567.51,698.441 1568.07,683.157 1568.63,716.124 1569.19,715.049 1569.75,743.968 1570.31,710.871 1570.87,688.91 1571.43,719.451 1571.99,721.266 1572.55,702.745 1573.1,682.535 1573.66,668.041 1574.22,651.933 1574.78,651.417 1575.34,635.629 1575.9,639.79 1576.46,678.605 1577.02,690.566 1577.58,677.165 1578.14,679.207 1578.7,697.507 1579.26,681.058 1579.82,713.128 1580.37,728.106 1580.93,725.418 1581.49,708.174 1582.05,755.091 1582.61,719.969 1583.17,721.929 1583.73,719.559 1584.29,701.745 1584.85,698.315 1585.41,729.193 1585.97,741.085 1586.53,754.858 1587.09,772.015 1587.65,735.091 1588.2,746.228 1588.76,727.997 1589.32,738.057 1589.88,702.348 1590.44,686.904 1591,704.104 1591.56,703.164 1592.12,719.184 1592.68,701.242 1593.24,685.109 1593.8,684.406 1594.36,668.94 1594.92,648.406 1595.47,651.97 1596.03,699.66 1596.59,716.862 1597.15,731.915 1597.71,741.307 1598.27,739.394 1598.83,739.629 1599.39,738.075 1599.95,701.079 1600.51,703.126 1601.07,705.725 1601.63,718.056 1602.19,712.701 1602.74,663.133 1603.3,682.991 1603.86,699.733 1604.42,662.057 1604.98,661.803 1605.54,648.99 1606.1,653.914 1606.66,639.207 1607.22,624.233 1607.78,623.903 1608.34,581.031 1608.9,554.67 1609.46,541.607 1610.02,550.408 1610.57,572.769 1611.13,595.513 1611.69,602.341 1612.25,610.956 1612.81,566.644 1613.37,572.255 1613.93,576.355 1614.49,565.227 1615.05,555.275 1615.61,565.774 1616.17,604.939 1616.73,611.394 1617.29,629.773 1617.84,617.329 1618.4,638.718 1618.96,641.175 1619.52,648.272 1620.08,633.381 1620.64,623.184 1621.2,643.531 1621.76,630.632 1622.32,633.279 1622.88,617.409 1623.44,589.166 1624,576.103 1624.56,599.731 1625.11,636.953 1625.67,606.607 1626.23,623.071 1626.79,623.777 1627.35,639.12 1627.91,691.246 1628.47,691.988 1629.03,690.436 1629.59,690.043 1630.15,691.044 1630.71,692.566 1631.27,693.861 1631.83,709.482 1632.39,709.258 1632.94,692.59 1633.5,674.35 1634.06,671.477 1634.62,673.339 1635.18,722.4 1635.74,703.427 1636.3,734.186 1636.86,732.511 1637.42,745.278 1637.98,729.647 1638.54,714.115 1639.1,646.688 1639.66,648.65 1640.21,671.072 1640.77,686.762 1641.33,688.755 1641.89,655.216 1642.45,623.814 1643.01,629.852 1643.57,633.079 1644.13,651.38 1644.69,646.959 1645.25,635.273 1645.81,636.731 1646.37,656.253 1646.93,658.39 1647.48,644.175 1648.04,617.265 1648.6,652.708 1649.16,667.903 1649.72,687.072 1650.28,688.181 1650.84,702.747 1651.4,717.329 1651.96,713.812 1652.52,700.641 1653.08,737.081 1653.64,749.995 1654.2,733.288 1654.76,745.932 1655.31,757.315 1655.87,769.927 1656.43,766.278 1656.99,745.613 1657.55,743.284 1658.11,739.057 1658.67,782.87 1659.23,761.042 1659.79,739.996 1660.35,720.685 1660.91,701.419 1661.47,715.713 1662.03,777.444 1662.58,769.755 1663.14,760.772 1663.7,772.618 1664.26,741.038 1664.82,752.48 1665.38,733.145 1665.94,779.219 1666.5,771.597 1667.06,818.355 1667.62,808.687 1668.18,787.349 1668.74,779.203 1669.3,822.81 1669.85,766.941 1670.41,808.258 1670.97,850.193 1671.53,838.743 1672.09,819.911 1672.65,812.971 1673.21,807.445 1673.77,814.79 1674.33,808.891 1674.89,801.813 1675.45,762.209 1676.01,741.51 1676.57,739.661 1677.13,752.458 1677.68,762.661 1678.24,789.423 1678.8,782.583 1679.36,760.992 1679.92,722.067 1680.48,753.176 1681.04,718.819 1681.6,714.832 1682.16,696.212 1682.72,678.516 1683.28,663.299 1683.84,664.948 1684.4,696.367 1684.95,696.433 1685.51,680.535 1686.07,697.38 1686.63,675.463 1687.19,663.139 1687.75,697.618 1688.31,697.407 1688.87,709.51 1689.43,708.782 1689.99,691.589 1690.55,706.815 1691.11,674.208 1691.67,689.146 1692.23,704.619 1692.78,688.266 1693.34,656.484 1693.9,656.833 1694.46,675.291 1695.02,659.398 1695.58,663.128 1696.14,615.123 1696.7,619 1697.26,610.117 1697.82,579.739 1698.38,603.988 1698.94,610.056 1699.5,582.749 1700.05,569.935 1700.61,557.747 1701.17,578.479 1701.73,580.775 1702.29,550.497 1702.85,525.183 1703.41,531.237 1703.97,542.714 1704.53,535.086 1705.09,555.464 1705.65,546.06 1706.21,553.323 1706.77,608.211 1707.32,597.689 1707.88,617.367 1708.44,620.618 1709,590.569 1709.56,614.458 1710.12,607.336 1710.68,594.541 1711.24,584 1711.8,606.368 1712.36,609.857 1712.92,601.251 1713.48,628.829 1714.04,646.152 1714.6,667.248 1715.15,688.437 1715.71,706.224 1716.27,723.068 1716.83,707.692 1717.39,707.25 1717.95,705.085 1718.51,706.656 1719.07,703.537 1719.63,670.794 1720.19,686.862 1720.75,668.878 1721.31,637.163 1721.87,658.648 1722.42,677.532 1722.98,676.737 1723.54,694.109 1724.1,738.863 1724.66,719.58 1725.22,732.779 1725.78,726.871 1726.34,709.183 1726.9,708.033 1727.46,691.611 1728.02,688.56 1728.58,670.475 1729.14,683.82 1729.69,664.513 1730.25,670.13 1730.81,671.788 1731.37,671.934 1731.93,707.129 1732.49,674.619 1733.05,690.589 1733.61,688.537 1734.17,734.948 1734.73,733.578 1735.29,747.047 1735.85,742.105 1736.41,720.853 1736.97,701.073 1737.52,649.448 1738.08,667.861 1738.64,687.824 1739.2,701.673 1739.76,680.055 1740.32,684.646 1740.88,688.89 1741.44,689.373 1742,691.52 1742.56,691.401 1743.12,675.699 1743.68,692.272 1744.24,689.469 1744.79,674.121 1745.35,706.995 1745.91,723.317 1746.47,738.107 1747.03,754.786 1747.59,736.737 1748.15,732.243 1748.71,751.572 1749.27,750.035 1749.83,763.795 1750.39,756.628 1750.95,720.94 1751.51,702.999 1752.06,700.331 1752.62,634.081 1753.18,638.05 1753.74,638.251 1754.3,653.742 1754.86,620.872 1755.42,654.332 1755.98,673.755 1756.54,692.042 1757.1,709.39 1757.66,690.818 1758.22,675.826 1758.78,672.906 1759.34,674.097 1759.89,674.385 1760.45,687.383 1761.01,642.425 1761.57,658.693 1762.13,663.118 1762.69,696.093 1763.25,697.793 1763.81,694.641 1764.37,674.332 1764.93,688.468 1765.49,637.187 1766.05,658.549 1766.61,656.105 1767.16,706.906 1767.72,703.153 1768.28,702.347 1768.84,714.311 1769.4,716.109 1769.96,680.408 1770.52,714.623 1771.08,728.796 1771.64,712.153 1772.2,694.92 1772.76,693.572 1773.32,694.757 1773.88,647.019 1774.43,649.966 1774.99,651.047 1775.55,669.972 1776.11,659.334 1776.67,707.402 1777.23,677.581 1777.79,692.27 1778.35,695.72 1778.91,691.975 1779.47,661.076 1780.03,629.176 1780.59,635.322 1781.15,620.343 1781.71,620.871 1782.26,643.455 1782.82,627.716 1783.38,600.546 1783.94,650.227 1784.5,651.507 1785.06,641.842 1785.62,642.239 1786.18,646.737 1786.74,665.23 1787.3,665.822 1787.86,666.385 1788.42,667.28 1788.98,665.762 1789.53,634.228 1790.09,621.777 1790.65,609.044 1791.21,617.346 1791.77,640.692 1792.33,657.527 1792.89,675.274 1793.45,677.8 1794.01,678.025 1794.57,710.491 1795.13,710.437 1795.69,707.57 1796.25,707.52 1796.8,689.051 1797.36,689.192 1797.92,692.561 1798.48,707.466 1799.04,703.513 1799.6,723.476 1800.16,704.934 1800.72,702.912 1801.28,702.266 1801.84,668.177 1802.4,669.076 1802.96,671.749 1803.52,721.901 1804.08,670.182 1804.63,655.151 1805.19,722.748 1805.75,703.597 1806.31,686.612 1806.87,687.04 1807.43,704.129 1807.99,716.542 1808.55,696.09 1809.11,739.906 1809.67,720.904 1810.23,699.851 1810.79,698.761 1811.35,701.473 1811.9,716.375 1812.46,698.048 1813.02,680.806 1813.58,649.62 1814.14,664.336 1814.7,666.504 1815.26,666.584 1815.82,649.919 1816.38,681.326 1816.94,699.247 1817.5,667.429 1818.06,667.962 1818.62,686.171 1819.18,689.512 1819.73,694.916 1820.29,693.148 1820.85,711.266 1821.41,726.121 1821.97,741.114 1822.53,737.251 1823.09,751.988 1823.65,748.079 1824.21,757.198 1824.77,755.478 1825.33,733.517 1825.89,729.962 1826.45,763.769 1827,709.177 1827.56,706.507 1828.12,737.845 1828.68,718.637 1829.24,734.113 1829.8,731.246 1830.36,729.33 1830.92,726.664 1831.48,724.82 1832.04,689.363 1832.6,690.615 1833.16,692.687 1833.72,724.498 1834.27,705.67 1834.83,690.991 1835.39,690.154 1835.95,658.571 1836.51,661.228 1837.07,662.898 1837.63,648.949 1838.19,667.078 \"/>\n<path clip-path=\"url(#clip973)\" d=\"M720.247 691.985 L720.806 691.985 L721.365 691.985 L721.924 691.985 L722.484 691.985 L723.043 691.985 L723.602 691.985 L724.161 691.985 L724.721 691.985 L725.28 691.985 L725.839 691.985 L726.398 691.985 L726.958 691.985 L727.517 691.985 L728.076 691.985 L728.635 691.985 L729.195 691.985 L729.754 691.985 L730.313 691.985 L730.872 691.985 L731.432 691.985 L731.991 691.985 L732.55 691.985 L733.109 691.985 L733.669 691.985 L734.228 691.985 L734.787 691.985 L735.346 691.985 L735.906 691.985 L736.465 691.985 L737.024 691.985 L737.583 691.985 L738.143 691.985 L738.702 691.985 L739.261 691.985 L739.82 691.985 L740.38 691.985 L740.939 691.985 L741.498 691.985 L742.057 691.985 L742.617 691.985 L743.176 691.985 L743.735 691.985 L744.294 691.985 L744.854 691.985 L745.413 691.985 L745.972 691.985 L746.531 691.985 L747.091 691.985 L747.65 691.985 L748.209 691.985 L748.768 691.985 L749.328 691.985 L749.887 691.985 L750.446 691.985 L751.005 691.985 L751.565 691.985 L752.124 691.985 L752.683 691.985 L753.242 691.985 L753.802 691.985 L754.361 691.985 L754.92 691.985 L755.479 691.985 L756.039 691.985 L756.598 691.985 L757.157 691.985 L757.716 691.985 L758.276 691.985 L758.835 691.985 L759.394 691.985 L759.953 691.985 L760.513 691.985 L761.072 691.985 L761.631 691.985 L762.19 691.985 L762.75 691.985 L763.309 691.985 L763.868 691.985 L764.427 691.985 L764.987 691.985 L765.546 691.985 L766.105 691.985 L766.664 691.985 L767.224 691.985 L767.783 691.985 L768.342 691.985 L768.901 691.985 L769.461 691.985 L770.02 691.985 L770.579 691.985 L771.138 691.985 L771.698 691.985 L772.257 691.985 L772.816 691.985 L773.375 691.985 L773.935 691.985 L774.494 691.985 L775.053 691.985 L775.612 691.985 L776.172 691.985 L776.731 691.985 L777.29 691.985 L777.849 691.985 L778.409 691.985 L778.968 691.985 L779.527 691.985 L780.086 691.985 L780.646 691.985 L781.205 691.985 L781.764 691.985 L782.323 691.985 L782.883 691.985 L783.442 691.985 L784.001 691.985 L784.56 691.985 L785.12 691.985 L785.679 691.985 L786.238 691.985 L786.797 691.985 L787.357 691.985 L787.916 691.985 L788.475 691.985 L789.034 691.985 L789.594 691.985 L790.153 691.985 L790.712 691.985 L791.271 691.985 L791.831 691.985 L792.39 691.985 L792.949 691.985 L793.508 691.985 L794.068 691.985 L794.627 691.985 L795.186 691.985 L795.745 691.985 L796.305 691.985 L796.864 691.985 L797.423 691.985 L797.982 691.985 L798.542 691.985 L799.101 691.985 L799.66 691.985 L800.219 691.985 L800.779 691.985 L801.338 691.985 L801.897 691.985 L802.456 691.985 L803.016 691.985 L803.575 691.985 L804.134 691.985 L804.693 691.985 L805.253 691.985 L805.812 691.985 L806.371 691.985 L806.931 691.985 L807.49 691.985 L808.049 691.985 L808.608 691.985 L809.168 691.985 L809.727 691.985 L810.286 691.985 L810.845 691.985 L811.405 691.985 L811.964 691.985 L812.523 691.985 L813.082 691.985 L813.642 691.985 L814.201 691.985 L814.76 691.985 L815.319 691.985 L815.879 691.985 L816.438 691.985 L816.997 691.985 L817.556 691.985 L818.116 691.985 L818.675 691.985 L819.234 691.985 L819.793 691.985 L820.353 691.985 L820.912 691.985 L821.471 691.985 L822.03 691.985 L822.59 691.985 L823.149 691.985 L823.708 691.985 L824.267 691.985 L824.827 691.985 L825.386 691.985 L825.945 691.985 L826.504 691.985 L827.064 691.985 L827.623 691.985 L828.182 691.985 L828.741 691.985 L829.301 691.985 L829.86 691.985 L830.419 691.985 L830.978 691.985 L831.538 691.985 L832.097 691.985 L832.656 691.985 L833.215 691.985 L833.775 691.985 L834.334 691.985 L834.893 691.985 L835.452 691.985 L836.012 691.985 L836.571 691.985 L837.13 691.985 L837.689 691.985 L838.249 691.985 L838.808 691.985 L839.367 691.985 L839.926 691.985 L840.486 691.985 L841.045 691.985 L841.604 691.985 L842.163 691.985 L842.723 691.985 L843.282 691.985 L843.841 691.985 L844.4 691.985 L844.96 691.985 L845.519 691.985 L846.078 691.985 L846.637 691.985 L847.197 691.985 L847.756 691.985 L848.315 691.985 L848.874 691.985 L849.434 691.985 L849.993 691.985 L850.552 691.985 L851.111 691.985 L851.671 691.985 L852.23 691.985 L852.789 691.985 L853.348 691.985 L853.908 691.985 L854.467 691.985 L855.026 691.985 L855.585 691.985 L856.145 691.985 L856.704 691.985 L857.263 691.985 L857.822 691.985 L858.382 691.985 L858.941 691.985 L859.5 691.985 L860.059 691.985 L860.619 691.985 L861.178 691.985 L861.737 691.985 L862.296 691.985 L862.856 691.985 L863.415 691.985 L863.974 691.985 L864.533 691.985 L865.093 691.985 L865.652 691.985 L866.211 691.985 L866.77 691.985 L867.33 691.985 L867.889 691.985 L868.448 691.985 L869.007 691.985 L869.567 691.985 L870.126 691.985 L870.685 691.985 L871.244 691.985 L871.804 691.985 L872.363 691.985 L872.922 691.985 L873.481 691.985 L874.041 691.985 L874.6 691.985 L875.159 691.985 L875.718 691.985 L876.278 691.985 L876.837 691.985 L877.396 691.985 L877.955 691.985 L878.515 691.985 L879.074 691.985 L879.633 691.985 L880.192 691.985 L880.752 691.985 L881.311 691.985 L881.87 691.985 L882.429 691.985 L882.989 691.985 L883.548 691.985 L884.107 691.985 L884.666 691.985 L885.226 691.985 L885.785 691.985 L886.344 691.985 L886.903 691.985 L887.463 691.985 L888.022 691.985 L888.581 691.985 L889.14 691.985 L889.7 691.985 L890.259 691.985 L890.818 691.985 L891.377 691.985 L891.937 691.985 L892.496 691.985 L893.055 691.985 L893.614 691.985 L894.174 691.985 L894.733 691.985 L895.292 691.985 L895.851 691.985 L896.411 691.985 L896.97 691.985 L897.529 691.985 L898.088 691.985 L898.648 691.985 L899.207 691.985 L899.766 691.985 L900.325 691.985 L900.885 691.985 L901.444 691.985 L902.003 691.985 L902.562 691.985 L903.122 691.985 L903.681 691.985 L904.24 691.985 L904.799 691.985 L905.359 691.985 L905.918 691.985 L906.477 691.985 L907.036 691.985 L907.596 691.985 L908.155 691.985 L908.714 691.985 L909.273 691.985 L909.833 691.985 L910.392 691.985 L910.951 691.985 L911.51 691.985 L912.07 691.985 L912.629 691.985 L913.188 691.985 L913.747 691.985 L914.307 691.985 L914.866 691.985 L915.425 691.985 L915.984 691.985 L916.544 691.985 L917.103 691.985 L917.662 691.985 L918.221 691.985 L918.781 691.985 L919.34 691.985 L919.899 691.985 L920.458 691.985 L921.018 691.985 L921.577 691.985 L922.136 691.985 L922.695 691.985 L923.255 691.985 L923.814 691.985 L924.373 691.985 L924.932 691.985 L925.492 691.985 L926.051 691.985 L926.61 691.985 L927.169 691.985 L927.729 691.985 L928.288 691.985 L928.847 691.985 L929.406 691.985 L929.966 691.985 L930.525 691.985 L931.084 691.985 L931.644 691.985 L932.203 691.985 L932.762 691.985 L933.321 691.985 L933.881 691.985 L934.44 691.985 L934.999 691.985 L935.558 691.985 L936.118 691.985 L936.677 691.985 L937.236 691.985 L937.795 691.985 L938.355 691.985 L938.914 691.985 L939.473 691.985 L940.032 691.985 L940.592 691.985 L941.151 691.985 L941.71 691.985 L942.269 691.985 L942.829 691.985 L943.388 691.985 L943.947 691.985 L944.506 691.985 L945.066 691.985 L945.625 691.985 L946.184 691.985 L946.743 691.985 L947.303 691.985 L947.862 691.985 L948.421 691.985 L948.98 691.985 L949.54 691.985 L950.099 691.985 L950.658 691.985 L951.217 691.985 L951.777 691.985 L952.336 691.985 L952.895 691.985 L953.454 691.985 L954.014 691.985 L954.573 691.985 L955.132 691.985 L955.691 691.985 L956.251 691.985 L956.81 691.985 L957.369 691.985 L957.928 691.985 L958.488 691.985 L959.047 691.985 L959.606 691.985 L960.165 691.985 L960.725 691.985 L961.284 691.985 L961.843 691.985 L962.402 691.985 L962.962 691.985 L963.521 691.985 L964.08 691.985 L964.639 691.985 L965.199 691.985 L965.758 691.985 L966.317 691.985 L966.876 691.985 L967.436 691.985 L967.995 691.985 L968.554 691.985 L969.113 691.985 L969.673 691.985 L970.232 691.985 L970.791 691.985 L971.35 691.985 L971.91 691.985 L972.469 691.985 L973.028 691.985 L973.587 691.985 L974.147 691.985 L974.706 691.985 L975.265 691.985 L975.824 691.985 L976.384 691.985 L976.943 691.985 L977.502 691.985 L978.061 691.985 L978.621 691.985 L979.18 691.985 L979.739 691.985 L980.298 691.985 L980.858 691.985 L981.417 691.985 L981.976 691.985 L982.535 691.985 L983.095 691.985 L983.654 691.985 L984.213 691.985 L984.772 691.985 L985.332 691.985 L985.891 691.985 L986.45 691.985 L987.009 691.985 L987.569 691.985 L988.128 691.985 L988.687 691.985 L989.246 691.985 L989.806 691.985 L990.365 691.985 L990.924 691.985 L991.483 691.985 L992.043 691.985 L992.602 691.985 L993.161 691.985 L993.72 691.985 L994.28 691.985 L994.839 691.985 L995.398 691.985 L995.957 691.985 L996.517 691.985 L997.076 691.985 L997.635 691.985 L998.194 691.985 L998.754 691.985 L999.313 691.985 L999.872 691.985 L1000.43 691.985 L1000.99 691.985 L1001.55 691.985 L1002.11 691.985 L1002.67 691.985 L1003.23 691.985 L1003.79 691.985 L1004.35 691.985 L1004.91 691.985 L1005.46 691.985 L1006.02 691.985 L1006.58 691.985 L1007.14 691.985 L1007.7 691.985 L1008.26 691.985 L1008.82 691.985 L1009.38 691.985 L1009.94 691.985 L1010.5 691.985 L1011.06 691.985 L1011.62 691.985 L1012.18 691.985 L1012.73 691.985 L1013.29 691.985 L1013.85 691.985 L1014.41 691.985 L1014.97 691.985 L1015.53 691.985 L1016.09 691.985 L1016.65 691.985 L1017.21 691.985 L1017.77 691.985 L1018.33 691.985 L1018.89 691.985 L1019.45 691.985 L1020.01 691.985 L1020.56 691.985 L1021.12 691.985 L1021.68 691.985 L1022.24 691.985 L1022.8 691.985 L1023.36 691.985 L1023.92 691.985 L1024.48 691.985 L1025.04 691.985 L1025.6 691.985 L1026.16 691.985 L1026.72 691.985 L1027.28 691.985 L1027.83 691.985 L1028.39 691.985 L1028.95 691.985 L1029.51 691.985 L1030.07 691.985 L1030.63 691.985 L1031.19 691.985 L1031.75 691.985 L1032.31 691.985 L1032.87 691.985 L1033.43 691.985 L1033.99 691.985 L1034.55 691.985 L1035.1 691.985 L1035.66 691.985 L1036.22 691.985 L1036.78 691.985 L1037.34 691.985 L1037.9 691.985 L1038.46 691.985 L1039.02 691.985 L1039.58 691.985 L1040.14 691.985 L1040.7 691.985 L1041.26 691.985 L1041.82 691.985 L1042.38 691.985 L1042.93 691.985 L1043.49 691.985 L1044.05 691.985 L1044.61 691.985 L1045.17 691.985 L1045.73 691.985 L1046.29 691.985 L1046.85 691.985 L1047.41 691.985 L1047.97 691.985 L1048.53 691.985 L1049.09 691.985 L1049.65 691.985 L1050.2 691.985 L1050.76 691.985 L1051.32 691.985 L1051.88 691.985 L1052.44 691.985 L1053 691.985 L1053.56 691.985 L1054.12 691.985 L1054.68 691.985 L1055.24 691.985 L1055.8 691.985 L1056.36 691.985 L1056.92 691.985 L1057.48 691.985 L1058.03 691.985 L1058.59 691.985 L1059.15 691.985 L1059.71 691.985 L1060.27 691.985 L1060.83 691.985 L1061.39 691.985 L1061.95 691.985 L1062.51 691.985 L1063.07 691.985 L1063.63 691.985 L1064.19 691.985 L1064.75 691.985 L1065.3 691.985 L1065.86 691.985 L1066.42 691.985 L1066.98 691.985 L1067.54 691.985 L1068.1 691.985 L1068.66 691.985 L1069.22 691.985 L1069.78 691.985 L1070.34 691.985 L1070.9 691.985 L1071.46 691.985 L1072.02 691.985 L1072.57 691.985 L1073.13 691.985 L1073.69 691.985 L1074.25 691.985 L1074.81 691.985 L1075.37 691.985 L1075.93 691.985 L1076.49 691.985 L1077.05 691.985 L1077.61 691.985 L1078.17 691.985 L1078.73 691.985 L1079.29 691.985 L1079.85 691.985 L1080.4 691.985 L1080.96 691.985 L1081.52 691.985 L1082.08 691.985 L1082.64 691.985 L1083.2 691.985 L1083.76 691.985 L1084.32 691.985 L1084.88 691.985 L1085.44 691.985 L1086 691.985 L1086.56 691.985 L1087.12 691.985 L1087.67 691.985 L1088.23 691.985 L1088.79 691.985 L1089.35 691.985 L1089.91 691.985 L1090.47 691.985 L1091.03 691.985 L1091.59 691.985 L1092.15 691.985 L1092.71 691.985 L1093.27 691.985 L1093.83 691.985 L1094.39 691.985 L1094.94 691.985 L1095.5 691.985 L1096.06 691.985 L1096.62 691.985 L1097.18 691.985 L1097.74 691.985 L1098.3 691.985 L1098.86 691.985 L1099.42 691.985 L1099.98 691.985 L1100.54 691.985 L1101.1 691.985 L1101.66 691.985 L1102.22 691.985 L1102.77 691.985 L1103.33 691.985 L1103.89 691.985 L1104.45 691.985 L1105.01 691.985 L1105.57 691.985 L1106.13 691.985 L1106.69 691.985 L1107.25 691.985 L1107.81 691.985 L1108.37 691.985 L1108.93 691.985 L1109.49 691.985 L1110.04 691.985 L1110.6 691.985 L1111.16 691.985 L1111.72 691.985 L1112.28 691.985 L1112.84 691.985 L1113.4 691.985 L1113.96 691.985 L1114.52 691.985 L1115.08 691.985 L1115.64 691.985 L1116.2 691.985 L1116.76 691.985 L1117.31 691.985 L1117.87 691.985 L1118.43 691.985 L1118.99 691.985 L1119.55 691.985 L1120.11 691.985 L1120.67 691.985 L1121.23 691.985 L1121.79 691.985 L1122.35 691.985 L1122.91 691.985 L1123.47 691.985 L1124.03 691.985 L1124.59 691.985 L1125.14 691.985 L1125.7 691.985 L1126.26 691.985 L1126.82 691.985 L1127.38 691.985 L1127.94 691.985 L1128.5 691.985 L1129.06 691.985 L1129.62 691.985 L1130.18 691.985 L1130.74 691.985 L1131.3 691.985 L1131.86 691.985 L1132.41 691.985 L1132.97 691.985 L1133.53 691.985 L1134.09 691.985 L1134.65 691.985 L1135.21 691.985 L1135.77 691.985 L1136.33 691.985 L1136.89 691.985 L1137.45 691.985 L1138.01 691.985 L1138.57 691.985 L1139.13 691.985 L1139.68 691.985 L1140.24 691.985 L1140.8 691.985 L1141.36 691.985 L1141.92 691.985 L1142.48 691.985 L1143.04 691.985 L1143.6 691.985 L1144.16 691.985 L1144.72 691.985 L1145.28 691.985 L1145.84 691.985 L1146.4 691.985 L1146.96 691.985 L1147.51 691.985 L1148.07 691.985 L1148.63 691.985 L1149.19 691.985 L1149.75 691.985 L1150.31 691.985 L1150.87 691.985 L1151.43 691.985 L1151.99 691.985 L1152.55 691.985 L1153.11 691.985 L1153.67 691.985 L1154.23 691.985 L1154.78 691.985 L1155.34 691.985 L1155.9 691.985 L1156.46 691.985 L1157.02 691.985 L1157.58 691.985 L1158.14 691.985 L1158.7 691.985 L1159.26 691.985 L1159.82 691.985 L1160.38 691.985 L1160.94 691.985 L1161.5 691.985 L1162.05 691.985 L1162.61 691.985 L1163.17 691.985 L1163.73 691.985 L1164.29 691.985 L1164.85 691.985 L1165.41 691.985 L1165.97 691.985 L1166.53 691.985 L1167.09 691.985 L1167.65 691.985 L1168.21 691.985 L1168.77 691.985 L1169.33 691.985 L1169.88 691.985 L1170.44 691.985 L1171 691.985 L1171.56 691.985 L1172.12 691.985 L1172.68 691.985 L1173.24 691.985 L1173.8 691.985 L1174.36 691.985 L1174.92 691.985 L1175.48 691.985 L1176.04 691.985 L1176.6 691.985 L1177.15 691.985 L1177.71 691.985 L1178.27 691.985 L1178.83 691.985 L1179.39 691.985 L1179.95 691.985 L1180.51 691.985 L1181.07 691.985 L1181.63 691.985 L1182.19 691.985 L1182.75 691.985 L1183.31 691.985 L1183.87 691.985 L1184.43 691.985 L1184.98 691.985 L1185.54 691.985 L1186.1 691.985 L1186.66 691.985 L1187.22 691.985 L1187.78 691.985 L1188.34 691.985 L1188.9 691.985 L1189.46 691.985 L1190.02 691.985 L1190.58 691.985 L1191.14 691.985 L1191.7 691.985 L1192.25 691.985 L1192.81 691.985 L1193.37 691.985 L1193.93 691.985 L1194.49 691.985 L1195.05 691.985 L1195.61 691.985 L1196.17 691.985 L1196.73 691.985 L1197.29 691.985 L1197.85 691.985 L1198.41 691.985 L1198.97 691.985 L1199.52 691.985 L1200.08 691.985 L1200.64 691.985 L1201.2 691.985 L1201.76 691.985 L1202.32 691.985 L1202.88 691.985 L1203.44 691.985 L1204 691.985 L1204.56 691.985 L1205.12 691.985 L1205.68 691.985 L1206.24 691.985 L1206.8 691.985 L1207.35 691.985 L1207.91 691.985 L1208.47 691.985 L1209.03 691.985 L1209.59 691.985 L1210.15 691.985 L1210.71 691.985 L1211.27 691.985 L1211.83 691.985 L1212.39 691.985 L1212.95 691.985 L1213.51 691.985 L1214.07 691.985 L1214.62 691.985 L1215.18 691.985 L1215.74 691.985 L1216.3 691.985 L1216.86 691.985 L1217.42 691.985 L1217.98 691.985 L1218.54 691.985 L1219.1 691.985 L1219.66 691.985 L1220.22 691.985 L1220.78 691.985 L1221.34 691.985 L1221.89 691.985 L1222.45 691.985 L1223.01 691.985 L1223.57 691.985 L1224.13 691.985 L1224.69 691.985 L1225.25 691.985 L1225.81 691.985 L1226.37 691.985 L1226.93 691.985 L1227.49 691.985 L1228.05 691.985 L1228.61 691.985 L1229.17 691.985 L1229.72 691.985 L1230.28 691.985 L1230.84 691.985 L1231.4 691.985 L1231.96 691.985 L1232.52 691.985 L1233.08 691.985 L1233.64 691.985 L1234.2 691.985 L1234.76 691.985 L1235.32 691.985 L1235.88 691.985 L1236.44 691.985 L1236.99 691.985 L1237.55 691.985 L1238.11 691.985 L1238.67 691.985 L1239.23 691.985 L1239.79 691.985 L1240.35 691.985 L1240.91 691.985 L1241.47 691.985 L1242.03 691.985 L1242.59 691.985 L1243.15 691.985 L1243.71 691.985 L1244.26 691.985 L1244.82 691.985 L1245.38 691.985 L1245.94 691.985 L1246.5 691.985 L1247.06 691.985 L1247.62 691.985 L1248.18 691.985 L1248.74 691.985 L1249.3 691.985 L1249.86 691.985 L1250.42 691.985 L1250.98 691.985 L1251.54 691.985 L1252.09 691.985 L1252.65 691.985 L1253.21 691.985 L1253.77 691.985 L1254.33 691.985 L1254.89 691.985 L1255.45 691.985 L1256.01 691.985 L1256.57 691.985 L1257.13 691.985 L1257.69 691.985 L1258.25 691.985 L1258.81 691.985 L1259.36 691.985 L1259.92 691.985 L1260.48 691.985 L1261.04 691.985 L1261.6 691.985 L1262.16 691.985 L1262.72 691.985 L1263.28 691.985 L1263.84 691.985 L1264.4 691.985 L1264.96 691.985 L1265.52 691.985 L1266.08 691.985 L1266.63 691.985 L1267.19 691.985 L1267.75 691.985 L1268.31 691.985 L1268.87 691.985 L1269.43 691.985 L1269.99 691.985 L1270.55 691.985 L1271.11 691.985 L1271.67 691.985 L1272.23 691.985 L1272.79 691.985 L1273.35 691.985 L1273.91 691.985 L1274.46 691.985 L1275.02 691.985 L1275.58 691.985 L1276.14 691.985 L1276.7 691.985 L1277.26 691.985 L1277.82 691.985 L1278.38 691.985 L1278.94 691.985 L1279.5 691.985 L1280.06 691.985 L1280.62 691.985 L1281.18 691.985 L1281.73 691.985 L1282.29 691.985 L1282.85 691.985 L1283.41 691.985 L1283.97 691.985 L1284.53 691.985 L1285.09 691.985 L1285.65 691.985 L1286.21 691.985 L1286.77 691.985 L1287.33 691.985 L1287.89 691.985 L1288.45 691.985 L1289 691.985 L1289.56 691.985 L1290.12 691.985 L1290.68 691.985 L1291.24 691.985 L1291.8 691.985 L1292.36 691.985 L1292.92 691.985 L1293.48 691.985 L1294.04 691.985 L1294.6 691.985 L1295.16 691.985 L1295.72 691.985 L1296.28 691.985 L1296.83 691.985 L1297.39 691.985 L1297.95 691.985 L1298.51 691.985 L1299.07 691.985 L1299.63 691.985 L1300.19 691.985 L1300.75 691.985 L1301.31 691.985 L1301.87 691.985 L1302.43 691.985 L1302.99 691.985 L1303.55 691.985 L1304.1 691.985 L1304.66 691.985 L1305.22 691.985 L1305.78 691.985 L1306.34 691.985 L1306.9 691.985 L1307.46 691.985 L1308.02 691.985 L1308.58 691.985 L1309.14 691.985 L1309.7 691.985 L1310.26 691.985 L1310.82 691.985 L1311.38 691.985 L1311.93 691.985 L1312.49 691.985 L1313.05 691.985 L1313.61 691.985 L1314.17 691.985 L1314.73 691.985 L1315.29 691.985 L1315.85 691.985 L1316.41 691.985 L1316.97 691.985 L1317.53 691.985 L1318.09 691.985 L1318.65 691.985 L1319.2 691.985 L1319.76 691.985 L1320.32 691.985 L1320.88 691.985 L1321.44 691.985 L1322 691.985 L1322.56 691.985 L1323.12 691.985 L1323.68 691.985 L1324.24 691.985 L1324.8 691.985 L1325.36 691.985 L1325.92 691.985 L1326.47 691.985 L1327.03 691.985 L1327.59 691.985 L1328.15 691.985 L1328.71 691.985 L1329.27 691.985 L1329.83 691.985 L1330.39 691.985 L1330.95 691.985 L1331.51 691.985 L1332.07 691.985 L1332.63 691.985 L1333.19 691.985 L1333.75 691.985 L1334.3 691.985 L1334.86 691.985 L1335.42 691.985 L1335.98 691.985 L1336.54 691.985 L1337.1 691.985 L1337.66 691.985 L1338.22 691.985 L1338.78 691.985 L1339.34 691.985 L1339.9 691.985 L1340.46 691.985 L1341.02 691.985 L1341.57 691.985 L1342.13 691.985 L1342.69 691.985 L1343.25 691.985 L1343.81 691.985 L1344.37 691.985 L1344.93 691.985 L1345.49 691.985 L1346.05 691.985 L1346.61 691.985 L1347.17 691.985 L1347.73 691.985 L1348.29 691.985 L1348.84 691.985 L1349.4 691.985 L1349.96 691.985 L1350.52 691.985 L1351.08 691.985 L1351.64 691.985 L1352.2 691.985 L1352.76 691.985 L1353.32 691.985 L1353.88 691.985 L1354.44 691.985 L1355 691.985 L1355.56 691.985 L1356.12 691.985 L1356.67 691.985 L1357.23 691.985 L1357.79 691.985 L1358.35 691.985 L1358.91 691.985 L1359.47 691.985 L1360.03 691.985 L1360.59 691.985 L1361.15 691.985 L1361.71 691.985 L1362.27 691.985 L1362.83 691.985 L1363.39 691.985 L1363.94 691.985 L1364.5 691.985 L1365.06 691.985 L1365.62 691.985 L1366.18 691.985 L1366.74 691.985 L1367.3 691.985 L1367.86 691.985 L1368.42 691.985 L1368.98 691.985 L1369.54 691.985 L1370.1 691.985 L1370.66 691.985 L1371.21 691.985 L1371.77 691.985 L1372.33 691.985 L1372.89 691.985 L1373.45 691.985 L1374.01 691.985 L1374.57 691.985 L1375.13 691.985 L1375.69 691.985 L1376.25 691.985 L1376.81 691.985 L1377.37 691.985 L1377.93 691.985 L1378.49 691.985 L1379.04 691.985 L1379.6 691.985 L1380.16 691.985 L1380.72 691.985 L1381.28 691.985 L1381.84 691.985 L1382.4 691.985 L1382.96 691.985 L1383.52 691.985 L1384.08 691.985 L1384.64 691.985 L1385.2 691.985 L1385.76 691.985 L1386.31 691.985 L1386.87 691.985 L1387.43 691.985 L1387.99 691.985 L1388.55 691.985 L1389.11 691.985 L1389.67 691.985 L1390.23 691.985 L1390.79 691.985 L1391.35 691.985 L1391.91 691.985 L1392.47 691.985 L1393.03 691.985 L1393.58 691.985 L1394.14 691.985 L1394.7 691.985 L1395.26 691.985 L1395.82 691.985 L1396.38 691.985 L1396.94 691.985 L1397.5 691.985 L1398.06 691.985 L1398.62 691.985 L1399.18 691.985 L1399.74 691.985 L1400.3 691.985 L1400.86 691.985 L1401.41 691.985 L1401.97 691.985 L1402.53 691.985 L1403.09 691.985 L1403.65 691.985 L1404.21 691.985 L1404.77 691.985 L1405.33 691.985 L1405.89 691.985 L1406.45 691.985 L1407.01 691.985 L1407.57 691.985 L1408.13 691.985 L1408.68 691.985 L1409.24 691.985 L1409.8 691.985 L1410.36 691.985 L1410.92 691.985 L1411.48 691.985 L1412.04 691.985 L1412.6 691.985 L1413.16 691.985 L1413.72 691.985 L1414.28 691.985 L1414.84 691.985 L1415.4 691.985 L1415.95 691.985 L1416.51 691.985 L1417.07 691.985 L1417.63 691.985 L1418.19 691.985 L1418.75 691.985 L1419.31 691.985 L1419.87 691.985 L1420.43 691.985 L1420.99 691.985 L1421.55 691.985 L1422.11 691.985 L1422.67 691.985 L1423.23 691.985 L1423.78 691.985 L1424.34 691.985 L1424.9 691.985 L1425.46 691.985 L1426.02 691.985 L1426.58 691.985 L1427.14 691.985 L1427.7 691.985 L1428.26 691.985 L1428.82 691.985 L1429.38 691.985 L1429.94 691.985 L1430.5 691.985 L1431.05 691.985 L1431.61 691.985 L1432.17 691.985 L1432.73 691.985 L1433.29 691.985 L1433.85 691.985 L1434.41 691.985 L1434.97 691.985 L1435.53 691.985 L1436.09 691.985 L1436.65 691.985 L1437.21 691.985 L1437.77 691.985 L1438.33 691.985 L1438.88 691.985 L1439.44 691.985 L1440 691.985 L1440.56 691.985 L1441.12 691.985 L1441.68 691.985 L1442.24 691.985 L1442.8 691.985 L1443.36 691.985 L1443.92 691.985 L1444.48 691.985 L1445.04 691.985 L1445.6 691.985 L1446.15 691.985 L1446.71 691.985 L1447.27 691.985 L1447.83 691.985 L1448.39 691.985 L1448.95 691.985 L1449.51 691.985 L1450.07 691.985 L1450.63 691.985 L1451.19 691.985 L1451.75 691.985 L1452.31 691.985 L1452.87 691.985 L1453.42 691.985 L1453.98 691.985 L1454.54 691.985 L1455.1 691.985 L1455.66 691.985 L1456.22 691.985 L1456.78 691.985 L1457.34 691.985 L1457.9 691.985 L1458.46 691.985 L1459.02 691.985 L1459.58 691.985 L1460.14 691.985 L1460.7 691.985 L1461.25 691.985 L1461.81 691.985 L1462.37 691.985 L1462.93 691.985 L1463.49 691.985 L1464.05 691.985 L1464.61 691.985 L1465.17 691.985 L1465.73 691.985 L1466.29 691.985 L1466.85 691.985 L1467.41 691.985 L1467.97 691.985 L1468.52 691.985 L1469.08 691.985 L1469.64 691.985 L1470.2 691.985 L1470.76 691.985 L1471.32 691.985 L1471.88 691.985 L1472.44 691.985 L1473 691.985 L1473.56 691.985 L1474.12 691.985 L1474.68 691.985 L1475.24 691.985 L1475.79 691.985 L1476.35 691.985 L1476.91 691.985 L1477.47 691.985 L1478.03 691.985 L1478.59 691.985 L1479.15 691.985 L1479.71 691.985 L1480.27 691.985 L1480.83 691.985 L1481.39 691.985 L1481.95 691.985 L1482.51 691.985 L1483.07 691.985 L1483.62 691.985 L1484.18 691.985 L1484.74 691.985 L1485.3 691.985 L1485.86 691.985 L1486.42 691.985 L1486.98 691.985 L1487.54 691.985 L1488.1 691.985 L1488.66 691.985 L1489.22 691.985 L1489.78 691.985 L1490.34 691.985 L1490.89 691.985 L1491.45 691.985 L1492.01 691.985 L1492.57 691.985 L1493.13 691.985 L1493.69 691.985 L1494.25 691.985 L1494.81 691.985 L1495.37 691.985 L1495.93 691.985 L1496.49 691.985 L1497.05 691.985 L1497.61 691.985 L1498.16 691.985 L1498.72 691.985 L1499.28 691.985 L1499.84 691.985 L1500.4 691.985 L1500.96 691.985 L1501.52 691.985 L1502.08 691.985 L1502.64 691.985 L1503.2 691.985 L1503.76 691.985 L1504.32 691.985 L1504.88 691.985 L1505.44 691.985 L1505.99 691.985 L1506.55 691.985 L1507.11 691.985 L1507.67 691.985 L1508.23 691.985 L1508.79 691.985 L1509.35 691.985 L1509.91 691.985 L1510.47 691.985 L1511.03 691.985 L1511.59 691.985 L1512.15 691.985 L1512.71 691.985 L1513.26 691.985 L1513.82 691.985 L1514.38 691.985 L1514.94 691.985 L1515.5 691.985 L1516.06 691.985 L1516.62 691.985 L1517.18 691.985 L1517.74 691.985 L1518.3 691.985 L1518.86 691.985 L1519.42 691.985 L1519.98 691.985 L1520.53 691.985 L1521.09 691.985 L1521.65 691.985 L1522.21 691.985 L1522.77 691.985 L1523.33 691.985 L1523.89 691.985 L1524.45 691.985 L1525.01 691.985 L1525.57 691.985 L1526.13 691.985 L1526.69 691.985 L1527.25 691.985 L1527.81 691.985 L1528.36 691.985 L1528.92 691.985 L1529.48 691.985 L1530.04 691.985 L1530.6 691.985 L1531.16 691.985 L1531.72 691.985 L1532.28 691.985 L1532.84 691.985 L1533.4 691.985 L1533.96 691.985 L1534.52 691.985 L1535.08 691.985 L1535.63 691.985 L1536.19 691.985 L1536.75 691.985 L1537.31 691.985 L1537.87 691.985 L1538.43 691.985 L1538.99 691.985 L1539.55 691.985 L1540.11 691.985 L1540.67 691.985 L1541.23 691.985 L1541.79 691.985 L1542.35 691.985 L1542.9 691.985 L1543.46 691.985 L1544.02 691.985 L1544.58 691.985 L1545.14 691.985 L1545.7 691.985 L1546.26 691.985 L1546.82 691.985 L1547.38 691.985 L1547.94 691.985 L1548.5 691.985 L1549.06 691.985 L1549.62 691.985 L1550.18 691.985 L1550.73 691.985 L1551.29 691.985 L1551.85 691.985 L1552.41 691.985 L1552.97 691.985 L1553.53 691.985 L1554.09 691.985 L1554.65 691.985 L1555.21 691.985 L1555.77 691.985 L1556.33 691.985 L1556.89 691.985 L1557.45 691.985 L1558 691.985 L1558.56 691.985 L1559.12 691.985 L1559.68 691.985 L1560.24 691.985 L1560.8 691.985 L1561.36 691.985 L1561.92 691.985 L1562.48 691.985 L1563.04 691.985 L1563.6 691.985 L1564.16 691.985 L1564.72 691.985 L1565.28 691.985 L1565.83 691.985 L1566.39 691.985 L1566.95 691.985 L1567.51 691.985 L1568.07 691.985 L1568.63 691.985 L1569.19 691.985 L1569.75 691.985 L1570.31 691.985 L1570.87 691.985 L1571.43 691.985 L1571.99 691.985 L1572.55 691.985 L1573.1 691.985 L1573.66 691.985 L1574.22 691.985 L1574.78 691.985 L1575.34 691.985 L1575.9 691.985 L1576.46 691.985 L1577.02 691.985 L1577.58 691.985 L1578.14 691.985 L1578.7 691.985 L1579.26 691.985 L1579.82 691.985 L1580.37 691.985 L1580.93 691.985 L1581.49 691.985 L1582.05 691.985 L1582.61 691.985 L1583.17 691.985 L1583.73 691.985 L1584.29 691.985 L1584.85 691.985 L1585.41 691.985 L1585.97 691.985 L1586.53 691.985 L1587.09 691.985 L1587.65 691.985 L1588.2 691.985 L1588.76 691.985 L1589.32 691.985 L1589.88 691.985 L1590.44 691.985 L1591 691.985 L1591.56 691.985 L1592.12 691.985 L1592.68 691.985 L1593.24 691.985 L1593.8 691.985 L1594.36 691.985 L1594.92 691.985 L1595.47 691.985 L1596.03 691.985 L1596.59 691.985 L1597.15 691.985 L1597.71 691.985 L1598.27 691.985 L1598.83 691.985 L1599.39 691.985 L1599.95 691.985 L1600.51 691.985 L1601.07 691.985 L1601.63 691.985 L1602.19 691.985 L1602.74 691.985 L1603.3 691.985 L1603.86 691.985 L1604.42 691.985 L1604.98 691.985 L1605.54 691.985 L1606.1 691.985 L1606.66 691.985 L1607.22 691.985 L1607.78 691.985 L1608.34 691.985 L1608.9 691.985 L1609.46 691.985 L1610.02 691.985 L1610.57 691.985 L1611.13 691.985 L1611.69 691.985 L1612.25 691.985 L1612.81 691.985 L1613.37 691.985 L1613.93 691.985 L1614.49 691.985 L1615.05 691.985 L1615.61 691.985 L1616.17 691.985 L1616.73 691.985 L1617.29 691.985 L1617.84 691.985 L1618.4 691.985 L1618.96 691.985 L1619.52 691.985 L1620.08 691.985 L1620.64 691.985 L1621.2 691.985 L1621.76 691.985 L1622.32 691.985 L1622.88 691.985 L1623.44 691.985 L1624 691.985 L1624.56 691.985 L1625.11 691.985 L1625.67 691.985 L1626.23 691.985 L1626.79 691.985 L1627.35 691.985 L1627.91 691.985 L1628.47 691.985 L1629.03 691.985 L1629.59 691.985 L1630.15 691.985 L1630.71 691.985 L1631.27 691.985 L1631.83 691.985 L1632.39 691.985 L1632.94 691.985 L1633.5 691.985 L1634.06 691.985 L1634.62 691.985 L1635.18 691.985 L1635.74 691.985 L1636.3 691.985 L1636.86 691.985 L1637.42 691.985 L1637.98 691.985 L1638.54 691.985 L1639.1 691.985 L1639.66 691.985 L1640.21 691.985 L1640.77 691.985 L1641.33 691.985 L1641.89 691.985 L1642.45 691.985 L1643.01 691.985 L1643.57 691.985 L1644.13 691.985 L1644.69 691.985 L1645.25 691.985 L1645.81 691.985 L1646.37 691.985 L1646.93 691.985 L1647.48 691.985 L1648.04 691.985 L1648.6 691.985 L1649.16 691.985 L1649.72 691.985 L1650.28 691.985 L1650.84 691.985 L1651.4 691.985 L1651.96 691.985 L1652.52 691.985 L1653.08 691.985 L1653.64 691.985 L1654.2 691.985 L1654.76 691.985 L1655.31 691.985 L1655.87 691.985 L1656.43 691.985 L1656.99 691.985 L1657.55 691.985 L1658.11 691.985 L1658.67 691.985 L1659.23 691.985 L1659.79 691.985 L1660.35 691.985 L1660.91 691.985 L1661.47 691.985 L1662.03 691.985 L1662.58 691.985 L1663.14 691.985 L1663.7 691.985 L1664.26 691.985 L1664.82 691.985 L1665.38 691.985 L1665.94 691.985 L1666.5 691.985 L1667.06 691.985 L1667.62 691.985 L1668.18 691.985 L1668.74 691.985 L1669.3 691.985 L1669.85 691.985 L1670.41 691.985 L1670.97 691.985 L1671.53 691.985 L1672.09 691.985 L1672.65 691.985 L1673.21 691.985 L1673.77 691.985 L1674.33 691.985 L1674.89 691.985 L1675.45 691.985 L1676.01 691.985 L1676.57 691.985 L1677.13 691.985 L1677.68 691.985 L1678.24 691.985 L1678.8 691.985 L1679.36 691.985 L1679.92 691.985 L1680.48 691.985 L1681.04 691.985 L1681.6 691.985 L1682.16 691.985 L1682.72 691.985 L1683.28 691.985 L1683.84 691.985 L1684.4 691.985 L1684.95 691.985 L1685.51 691.985 L1686.07 691.985 L1686.63 691.985 L1687.19 691.985 L1687.75 691.985 L1688.31 691.985 L1688.87 691.985 L1689.43 691.985 L1689.99 691.985 L1690.55 691.985 L1691.11 691.985 L1691.67 691.985 L1692.23 691.985 L1692.78 691.985 L1693.34 691.985 L1693.9 691.985 L1694.46 691.985 L1695.02 691.985 L1695.58 691.985 L1696.14 691.985 L1696.7 691.985 L1697.26 691.985 L1697.82 691.985 L1698.38 691.985 L1698.94 691.985 L1699.5 691.985 L1700.05 691.985 L1700.61 691.985 L1701.17 691.985 L1701.73 691.985 L1702.29 691.985 L1702.85 691.985 L1703.41 691.985 L1703.97 691.985 L1704.53 691.985 L1705.09 691.985 L1705.65 691.985 L1706.21 691.985 L1706.77 691.985 L1707.32 691.985 L1707.88 691.985 L1708.44 691.985 L1709 691.985 L1709.56 691.985 L1710.12 691.985 L1710.68 691.985 L1711.24 691.985 L1711.8 691.985 L1712.36 691.985 L1712.92 691.985 L1713.48 691.985 L1714.04 691.985 L1714.6 691.985 L1715.15 691.985 L1715.71 691.985 L1716.27 691.985 L1716.83 691.985 L1717.39 691.985 L1717.95 691.985 L1718.51 691.985 L1719.07 691.985 L1719.63 691.985 L1720.19 691.985 L1720.75 691.985 L1721.31 691.985 L1721.87 691.985 L1722.42 691.985 L1722.98 691.985 L1723.54 691.985 L1724.1 691.985 L1724.66 691.985 L1725.22 691.985 L1725.78 691.985 L1726.34 691.985 L1726.9 691.985 L1727.46 691.985 L1728.02 691.985 L1728.58 691.985 L1729.14 691.985 L1729.69 691.985 L1730.25 691.985 L1730.81 691.985 L1731.37 691.985 L1731.93 691.985 L1732.49 691.985 L1733.05 691.985 L1733.61 691.985 L1734.17 691.985 L1734.73 691.985 L1735.29 691.985 L1735.85 691.985 L1736.41 691.985 L1736.97 691.985 L1737.52 691.985 L1738.08 691.985 L1738.64 691.985 L1739.2 691.985 L1739.76 691.985 L1740.32 691.985 L1740.88 691.985 L1741.44 691.985 L1742 691.985 L1742.56 691.985 L1743.12 691.985 L1743.68 691.985 L1744.24 691.985 L1744.79 691.985 L1745.35 691.985 L1745.91 691.985 L1746.47 691.985 L1747.03 691.985 L1747.59 691.985 L1748.15 691.985 L1748.71 691.985 L1749.27 691.985 L1749.83 691.985 L1750.39 691.985 L1750.95 691.985 L1751.51 691.985 L1752.06 691.985 L1752.62 691.985 L1753.18 691.985 L1753.74 691.985 L1754.3 691.985 L1754.86 691.985 L1755.42 691.985 L1755.98 691.985 L1756.54 691.985 L1757.1 691.985 L1757.66 691.985 L1758.22 691.985 L1758.78 691.985 L1759.34 691.985 L1759.89 691.985 L1760.45 691.985 L1761.01 691.985 L1761.57 691.985 L1762.13 691.985 L1762.69 691.985 L1763.25 691.985 L1763.81 691.985 L1764.37 691.985 L1764.93 691.985 L1765.49 691.985 L1766.05 691.985 L1766.61 691.985 L1767.16 691.985 L1767.72 691.985 L1768.28 691.985 L1768.84 691.985 L1769.4 691.985 L1769.96 691.985 L1770.52 691.985 L1771.08 691.985 L1771.64 691.985 L1772.2 691.985 L1772.76 691.985 L1773.32 691.985 L1773.88 691.985 L1774.43 691.985 L1774.99 691.985 L1775.55 691.985 L1776.11 691.985 L1776.67 691.985 L1777.23 691.985 L1777.79 691.985 L1778.35 691.985 L1778.91 691.985 L1779.47 691.985 L1780.03 691.985 L1780.59 691.985 L1781.15 691.985 L1781.71 691.985 L1782.26 691.985 L1782.82 691.985 L1783.38 691.985 L1783.94 691.985 L1784.5 691.985 L1785.06 691.985 L1785.62 691.985 L1786.18 691.985 L1786.74 691.985 L1787.3 691.985 L1787.86 691.985 L1788.42 691.985 L1788.98 691.985 L1789.53 691.985 L1790.09 691.985 L1790.65 691.985 L1791.21 691.985 L1791.77 691.985 L1792.33 691.985 L1792.89 691.985 L1793.45 691.985 L1794.01 691.985 L1794.57 691.985 L1795.13 691.985 L1795.69 691.985 L1796.25 691.985 L1796.8 691.985 L1797.36 691.985 L1797.92 691.985 L1798.48 691.985 L1799.04 691.985 L1799.6 691.985 L1800.16 691.985 L1800.72 691.985 L1801.28 691.985 L1801.84 691.985 L1802.4 691.985 L1802.96 691.985 L1803.52 691.985 L1804.08 691.985 L1804.63 691.985 L1805.19 691.985 L1805.75 691.985 L1806.31 691.985 L1806.87 691.985 L1807.43 691.985 L1807.99 691.985 L1808.55 691.985 L1809.11 691.985 L1809.67 691.985 L1810.23 691.985 L1810.79 691.985 L1811.35 691.985 L1811.9 691.985 L1812.46 691.985 L1813.02 691.985 L1813.58 691.985 L1814.14 691.985 L1814.7 691.985 L1815.26 691.985 L1815.82 691.985 L1816.38 691.985 L1816.94 691.985 L1817.5 691.985 L1818.06 691.985 L1818.62 691.985 L1819.18 691.985 L1819.73 691.985 L1820.29 691.985 L1820.85 691.985 L1821.41 691.985 L1821.97 691.985 L1822.53 691.985 L1823.09 691.985 L1823.65 691.985 L1824.21 691.985 L1824.77 691.985 L1825.33 691.985 L1825.89 691.985 L1826.45 691.985 L1827 691.985 L1827.56 691.985 L1828.12 691.985 L1828.68 691.985 L1829.24 691.985 L1829.8 691.985 L1830.36 691.985 L1830.92 691.985 L1831.48 691.985 L1832.04 691.985 L1832.6 691.985 L1833.16 691.985 L1833.72 691.985 L1834.27 691.985 L1834.83 691.985 L1835.39 691.985 L1835.95 691.985 L1836.51 691.985 L1837.07 691.985 L1837.63 691.985 L1838.19 691.985 L1838.19 681.945 L1837.63 681.945 L1837.07 681.945 L1836.51 681.945 L1835.95 681.945 L1835.39 681.945 L1834.83 681.945 L1834.27 681.945 L1833.72 681.945 L1833.16 681.945 L1832.6 681.945 L1832.04 681.945 L1831.48 681.945 L1830.92 681.945 L1830.36 681.945 L1829.8 681.945 L1829.24 681.945 L1828.68 681.945 L1828.12 681.945 L1827.56 681.945 L1827 681.945 L1826.45 681.945 L1825.89 681.945 L1825.33 681.945 L1824.77 681.945 L1824.21 681.945 L1823.65 681.945 L1823.09 681.945 L1822.53 681.945 L1821.97 681.945 L1821.41 681.945 L1820.85 681.945 L1820.29 681.945 L1819.73 681.945 L1819.18 681.945 L1818.62 681.945 L1818.06 681.945 L1817.5 681.945 L1816.94 681.945 L1816.38 681.945 L1815.82 681.945 L1815.26 681.945 L1814.7 681.945 L1814.14 681.945 L1813.58 681.945 L1813.02 681.945 L1812.46 681.945 L1811.9 681.945 L1811.35 681.945 L1810.79 681.945 L1810.23 681.945 L1809.67 681.945 L1809.11 681.945 L1808.55 681.945 L1807.99 681.945 L1807.43 681.945 L1806.87 681.945 L1806.31 681.945 L1805.75 681.945 L1805.19 681.945 L1804.63 681.945 L1804.08 681.945 L1803.52 681.945 L1802.96 681.945 L1802.4 681.945 L1801.84 681.945 L1801.28 681.945 L1800.72 681.945 L1800.16 681.945 L1799.6 681.945 L1799.04 681.945 L1798.48 681.945 L1797.92 681.945 L1797.36 681.945 L1796.8 681.945 L1796.25 681.945 L1795.69 681.945 L1795.13 681.945 L1794.57 681.945 L1794.01 681.945 L1793.45 681.945 L1792.89 681.945 L1792.33 681.945 L1791.77 681.945 L1791.21 681.945 L1790.65 681.945 L1790.09 681.945 L1789.53 681.945 L1788.98 681.945 L1788.42 681.945 L1787.86 681.945 L1787.3 681.945 L1786.74 681.945 L1786.18 681.945 L1785.62 681.945 L1785.06 681.945 L1784.5 681.945 L1783.94 681.945 L1783.38 681.945 L1782.82 681.945 L1782.26 681.945 L1781.71 681.945 L1781.15 681.945 L1780.59 681.945 L1780.03 681.945 L1779.47 681.945 L1778.91 681.945 L1778.35 681.945 L1777.79 681.945 L1777.23 681.945 L1776.67 681.945 L1776.11 681.945 L1775.55 681.945 L1774.99 681.945 L1774.43 681.945 L1773.88 681.945 L1773.32 681.945 L1772.76 681.945 L1772.2 681.945 L1771.64 681.945 L1771.08 681.945 L1770.52 681.945 L1769.96 681.945 L1769.4 681.945 L1768.84 681.945 L1768.28 681.945 L1767.72 681.945 L1767.16 681.945 L1766.61 681.945 L1766.05 681.945 L1765.49 681.945 L1764.93 681.945 L1764.37 681.945 L1763.81 681.945 L1763.25 681.945 L1762.69 681.945 L1762.13 681.945 L1761.57 681.945 L1761.01 681.945 L1760.45 681.945 L1759.89 681.945 L1759.34 681.945 L1758.78 681.945 L1758.22 681.945 L1757.66 681.945 L1757.1 681.945 L1756.54 681.945 L1755.98 681.945 L1755.42 681.945 L1754.86 681.945 L1754.3 681.945 L1753.74 681.945 L1753.18 681.945 L1752.62 681.945 L1752.06 681.945 L1751.51 681.945 L1750.95 681.945 L1750.39 681.945 L1749.83 681.945 L1749.27 681.945 L1748.71 681.945 L1748.15 681.945 L1747.59 681.945 L1747.03 681.945 L1746.47 681.945 L1745.91 681.945 L1745.35 681.945 L1744.79 681.945 L1744.24 681.945 L1743.68 681.945 L1743.12 681.945 L1742.56 681.945 L1742 681.945 L1741.44 681.945 L1740.88 681.945 L1740.32 681.945 L1739.76 681.945 L1739.2 681.945 L1738.64 681.945 L1738.08 681.945 L1737.52 681.945 L1736.97 681.945 L1736.41 681.945 L1735.85 681.945 L1735.29 681.945 L1734.73 681.945 L1734.17 681.945 L1733.61 681.945 L1733.05 681.945 L1732.49 681.945 L1731.93 681.945 L1731.37 681.945 L1730.81 681.945 L1730.25 681.945 L1729.69 681.945 L1729.14 681.945 L1728.58 681.945 L1728.02 681.945 L1727.46 681.945 L1726.9 681.945 L1726.34 681.945 L1725.78 681.945 L1725.22 681.945 L1724.66 681.945 L1724.1 681.945 L1723.54 681.945 L1722.98 681.945 L1722.42 681.945 L1721.87 681.945 L1721.31 681.945 L1720.75 681.945 L1720.19 681.945 L1719.63 681.945 L1719.07 681.945 L1718.51 681.945 L1717.95 681.945 L1717.39 681.945 L1716.83 681.945 L1716.27 681.945 L1715.71 681.945 L1715.15 681.945 L1714.6 681.945 L1714.04 681.945 L1713.48 681.945 L1712.92 681.945 L1712.36 681.945 L1711.8 681.945 L1711.24 681.945 L1710.68 681.945 L1710.12 681.945 L1709.56 681.945 L1709 681.945 L1708.44 681.945 L1707.88 681.945 L1707.32 681.945 L1706.77 681.945 L1706.21 681.945 L1705.65 681.945 L1705.09 681.945 L1704.53 681.945 L1703.97 681.945 L1703.41 681.945 L1702.85 681.945 L1702.29 681.945 L1701.73 681.945 L1701.17 681.945 L1700.61 681.945 L1700.05 681.945 L1699.5 681.945 L1698.94 681.945 L1698.38 681.945 L1697.82 681.945 L1697.26 681.945 L1696.7 681.945 L1696.14 681.945 L1695.58 681.945 L1695.02 681.945 L1694.46 681.945 L1693.9 681.945 L1693.34 681.945 L1692.78 681.945 L1692.23 681.945 L1691.67 681.945 L1691.11 681.945 L1690.55 681.945 L1689.99 681.945 L1689.43 681.945 L1688.87 681.945 L1688.31 681.945 L1687.75 681.945 L1687.19 681.945 L1686.63 681.945 L1686.07 681.945 L1685.51 681.945 L1684.95 681.945 L1684.4 681.945 L1683.84 681.945 L1683.28 681.945 L1682.72 681.945 L1682.16 681.945 L1681.6 681.945 L1681.04 681.945 L1680.48 681.945 L1679.92 681.945 L1679.36 681.945 L1678.8 681.945 L1678.24 681.945 L1677.68 681.945 L1677.13 681.945 L1676.57 681.945 L1676.01 681.945 L1675.45 681.945 L1674.89 681.945 L1674.33 681.945 L1673.77 681.945 L1673.21 681.945 L1672.65 681.945 L1672.09 681.945 L1671.53 681.945 L1670.97 681.945 L1670.41 681.945 L1669.85 681.945 L1669.3 681.945 L1668.74 681.945 L1668.18 681.945 L1667.62 681.945 L1667.06 681.945 L1666.5 681.945 L1665.94 681.945 L1665.38 681.945 L1664.82 681.945 L1664.26 681.945 L1663.7 681.945 L1663.14 681.945 L1662.58 681.945 L1662.03 681.945 L1661.47 681.945 L1660.91 681.945 L1660.35 681.945 L1659.79 681.945 L1659.23 681.945 L1658.67 681.945 L1658.11 681.945 L1657.55 681.945 L1656.99 681.945 L1656.43 681.945 L1655.87 681.945 L1655.31 681.945 L1654.76 681.945 L1654.2 681.945 L1653.64 681.945 L1653.08 681.945 L1652.52 681.945 L1651.96 681.945 L1651.4 681.945 L1650.84 681.945 L1650.28 681.945 L1649.72 681.945 L1649.16 681.945 L1648.6 681.945 L1648.04 681.945 L1647.48 681.945 L1646.93 681.945 L1646.37 681.945 L1645.81 681.945 L1645.25 681.945 L1644.69 681.945 L1644.13 681.945 L1643.57 681.945 L1643.01 681.945 L1642.45 681.945 L1641.89 681.945 L1641.33 681.945 L1640.77 681.945 L1640.21 681.945 L1639.66 681.945 L1639.1 681.945 L1638.54 681.945 L1637.98 681.945 L1637.42 681.945 L1636.86 681.945 L1636.3 681.945 L1635.74 681.945 L1635.18 681.945 L1634.62 681.945 L1634.06 681.945 L1633.5 681.945 L1632.94 681.945 L1632.39 681.945 L1631.83 681.945 L1631.27 681.945 L1630.71 681.945 L1630.15 681.945 L1629.59 681.945 L1629.03 681.945 L1628.47 681.945 L1627.91 681.945 L1627.35 681.945 L1626.79 681.945 L1626.23 681.945 L1625.67 681.945 L1625.11 681.945 L1624.56 681.945 L1624 681.945 L1623.44 681.945 L1622.88 681.945 L1622.32 681.945 L1621.76 681.945 L1621.2 681.945 L1620.64 681.945 L1620.08 681.945 L1619.52 681.945 L1618.96 681.945 L1618.4 681.945 L1617.84 681.945 L1617.29 681.945 L1616.73 681.945 L1616.17 681.945 L1615.61 681.945 L1615.05 681.945 L1614.49 681.945 L1613.93 681.945 L1613.37 681.945 L1612.81 681.945 L1612.25 681.945 L1611.69 681.945 L1611.13 681.945 L1610.57 681.945 L1610.02 681.945 L1609.46 681.945 L1608.9 681.945 L1608.34 681.945 L1607.78 681.945 L1607.22 681.945 L1606.66 681.945 L1606.1 681.945 L1605.54 681.945 L1604.98 681.945 L1604.42 681.945 L1603.86 681.945 L1603.3 681.945 L1602.74 681.945 L1602.19 681.945 L1601.63 681.945 L1601.07 681.945 L1600.51 681.945 L1599.95 681.945 L1599.39 681.945 L1598.83 681.945 L1598.27 681.945 L1597.71 681.945 L1597.15 681.945 L1596.59 681.945 L1596.03 681.945 L1595.47 681.945 L1594.92 681.945 L1594.36 681.945 L1593.8 681.945 L1593.24 681.945 L1592.68 681.945 L1592.12 681.945 L1591.56 681.945 L1591 681.945 L1590.44 681.945 L1589.88 681.945 L1589.32 681.945 L1588.76 681.945 L1588.2 681.945 L1587.65 681.945 L1587.09 681.945 L1586.53 681.945 L1585.97 681.945 L1585.41 681.945 L1584.85 681.945 L1584.29 681.945 L1583.73 681.945 L1583.17 681.945 L1582.61 681.945 L1582.05 681.945 L1581.49 681.945 L1580.93 681.945 L1580.37 681.945 L1579.82 681.945 L1579.26 681.945 L1578.7 681.945 L1578.14 681.945 L1577.58 681.945 L1577.02 681.945 L1576.46 681.945 L1575.9 681.945 L1575.34 681.945 L1574.78 681.945 L1574.22 681.945 L1573.66 681.945 L1573.1 681.945 L1572.55 681.945 L1571.99 681.945 L1571.43 681.945 L1570.87 681.945 L1570.31 681.945 L1569.75 681.945 L1569.19 681.945 L1568.63 681.945 L1568.07 681.945 L1567.51 681.945 L1566.95 681.945 L1566.39 681.945 L1565.83 681.945 L1565.28 681.945 L1564.72 681.945 L1564.16 681.945 L1563.6 681.945 L1563.04 681.945 L1562.48 681.945 L1561.92 681.945 L1561.36 681.945 L1560.8 681.945 L1560.24 681.945 L1559.68 681.945 L1559.12 681.945 L1558.56 681.945 L1558 681.945 L1557.45 681.945 L1556.89 681.945 L1556.33 681.945 L1555.77 681.945 L1555.21 681.945 L1554.65 681.945 L1554.09 681.945 L1553.53 681.945 L1552.97 681.945 L1552.41 681.945 L1551.85 681.945 L1551.29 681.945 L1550.73 681.945 L1550.18 681.945 L1549.62 681.945 L1549.06 681.945 L1548.5 681.945 L1547.94 681.945 L1547.38 681.945 L1546.82 681.945 L1546.26 681.945 L1545.7 681.945 L1545.14 681.945 L1544.58 681.945 L1544.02 681.945 L1543.46 681.945 L1542.9 681.945 L1542.35 681.945 L1541.79 681.945 L1541.23 681.945 L1540.67 681.945 L1540.11 681.945 L1539.55 681.945 L1538.99 681.945 L1538.43 681.945 L1537.87 681.945 L1537.31 681.945 L1536.75 681.945 L1536.19 681.945 L1535.63 681.945 L1535.08 681.945 L1534.52 681.945 L1533.96 681.945 L1533.4 681.945 L1532.84 681.945 L1532.28 681.945 L1531.72 681.945 L1531.16 681.945 L1530.6 681.945 L1530.04 681.945 L1529.48 681.945 L1528.92 681.945 L1528.36 681.945 L1527.81 681.945 L1527.25 681.945 L1526.69 681.945 L1526.13 681.945 L1525.57 681.945 L1525.01 681.945 L1524.45 681.945 L1523.89 681.945 L1523.33 681.945 L1522.77 681.945 L1522.21 681.945 L1521.65 681.945 L1521.09 681.945 L1520.53 681.945 L1519.98 681.945 L1519.42 681.945 L1518.86 681.945 L1518.3 681.945 L1517.74 681.945 L1517.18 681.945 L1516.62 681.945 L1516.06 681.945 L1515.5 681.945 L1514.94 681.945 L1514.38 681.945 L1513.82 681.945 L1513.26 681.945 L1512.71 681.945 L1512.15 681.945 L1511.59 681.945 L1511.03 681.945 L1510.47 681.945 L1509.91 681.945 L1509.35 681.945 L1508.79 681.945 L1508.23 681.945 L1507.67 681.945 L1507.11 681.945 L1506.55 681.945 L1505.99 681.945 L1505.44 681.945 L1504.88 681.945 L1504.32 681.945 L1503.76 681.945 L1503.2 681.945 L1502.64 681.945 L1502.08 681.945 L1501.52 681.945 L1500.96 681.945 L1500.4 681.945 L1499.84 681.945 L1499.28 681.945 L1498.72 681.945 L1498.16 681.945 L1497.61 681.945 L1497.05 681.945 L1496.49 681.945 L1495.93 681.945 L1495.37 681.945 L1494.81 681.945 L1494.25 681.945 L1493.69 681.945 L1493.13 681.945 L1492.57 681.945 L1492.01 681.945 L1491.45 681.945 L1490.89 681.945 L1490.34 681.945 L1489.78 681.945 L1489.22 681.945 L1488.66 681.945 L1488.1 681.945 L1487.54 681.945 L1486.98 681.945 L1486.42 681.945 L1485.86 681.945 L1485.3 681.945 L1484.74 681.945 L1484.18 681.945 L1483.62 681.945 L1483.07 681.945 L1482.51 681.945 L1481.95 681.945 L1481.39 681.945 L1480.83 681.945 L1480.27 681.945 L1479.71 681.945 L1479.15 681.945 L1478.59 681.945 L1478.03 681.945 L1477.47 681.945 L1476.91 681.945 L1476.35 681.945 L1475.79 681.945 L1475.24 681.945 L1474.68 681.945 L1474.12 681.945 L1473.56 681.945 L1473 681.945 L1472.44 681.945 L1471.88 681.945 L1471.32 681.945 L1470.76 681.945 L1470.2 681.945 L1469.64 681.945 L1469.08 681.945 L1468.52 681.945 L1467.97 681.945 L1467.41 681.945 L1466.85 681.945 L1466.29 681.945 L1465.73 681.945 L1465.17 681.945 L1464.61 681.945 L1464.05 681.945 L1463.49 681.945 L1462.93 681.945 L1462.37 681.945 L1461.81 681.945 L1461.25 681.945 L1460.7 681.945 L1460.14 681.945 L1459.58 681.945 L1459.02 681.945 L1458.46 681.945 L1457.9 681.945 L1457.34 681.945 L1456.78 681.945 L1456.22 681.945 L1455.66 681.945 L1455.1 681.945 L1454.54 681.945 L1453.98 681.945 L1453.42 681.945 L1452.87 681.945 L1452.31 681.945 L1451.75 681.945 L1451.19 681.945 L1450.63 681.945 L1450.07 681.945 L1449.51 681.945 L1448.95 681.945 L1448.39 681.945 L1447.83 681.945 L1447.27 681.945 L1446.71 681.945 L1446.15 681.945 L1445.6 681.945 L1445.04 681.945 L1444.48 681.945 L1443.92 681.945 L1443.36 681.945 L1442.8 681.945 L1442.24 681.945 L1441.68 681.945 L1441.12 681.945 L1440.56 681.945 L1440 681.945 L1439.44 681.945 L1438.88 681.945 L1438.33 681.945 L1437.77 681.945 L1437.21 681.945 L1436.65 681.945 L1436.09 681.945 L1435.53 681.945 L1434.97 681.945 L1434.41 681.945 L1433.85 681.945 L1433.29 681.945 L1432.73 681.945 L1432.17 681.945 L1431.61 681.945 L1431.05 681.945 L1430.5 681.945 L1429.94 681.945 L1429.38 681.945 L1428.82 681.945 L1428.26 681.945 L1427.7 681.945 L1427.14 681.945 L1426.58 681.945 L1426.02 681.945 L1425.46 681.945 L1424.9 681.945 L1424.34 681.945 L1423.78 681.945 L1423.23 681.945 L1422.67 681.945 L1422.11 681.945 L1421.55 681.945 L1420.99 681.945 L1420.43 681.945 L1419.87 681.945 L1419.31 681.945 L1418.75 681.945 L1418.19 681.945 L1417.63 681.945 L1417.07 681.945 L1416.51 681.945 L1415.95 681.945 L1415.4 681.945 L1414.84 681.945 L1414.28 681.945 L1413.72 681.945 L1413.16 681.945 L1412.6 681.945 L1412.04 681.945 L1411.48 681.945 L1410.92 681.945 L1410.36 681.945 L1409.8 681.945 L1409.24 681.945 L1408.68 681.945 L1408.13 681.945 L1407.57 681.945 L1407.01 681.945 L1406.45 681.945 L1405.89 681.945 L1405.33 681.945 L1404.77 681.945 L1404.21 681.945 L1403.65 681.945 L1403.09 681.945 L1402.53 681.945 L1401.97 681.945 L1401.41 681.945 L1400.86 681.945 L1400.3 681.945 L1399.74 681.945 L1399.18 681.945 L1398.62 681.945 L1398.06 681.945 L1397.5 681.945 L1396.94 681.945 L1396.38 681.945 L1395.82 681.945 L1395.26 681.945 L1394.7 681.945 L1394.14 681.945 L1393.58 681.945 L1393.03 681.945 L1392.47 681.945 L1391.91 681.945 L1391.35 681.945 L1390.79 681.945 L1390.23 681.945 L1389.67 681.945 L1389.11 681.945 L1388.55 681.945 L1387.99 681.945 L1387.43 681.945 L1386.87 681.945 L1386.31 681.945 L1385.76 681.945 L1385.2 681.945 L1384.64 681.945 L1384.08 681.945 L1383.52 681.945 L1382.96 681.945 L1382.4 681.945 L1381.84 681.945 L1381.28 681.945 L1380.72 681.945 L1380.16 681.945 L1379.6 681.945 L1379.04 681.945 L1378.49 681.945 L1377.93 681.945 L1377.37 681.945 L1376.81 681.945 L1376.25 681.945 L1375.69 681.945 L1375.13 681.945 L1374.57 681.945 L1374.01 681.945 L1373.45 681.945 L1372.89 681.945 L1372.33 681.945 L1371.77 681.945 L1371.21 681.945 L1370.66 681.945 L1370.1 681.945 L1369.54 681.945 L1368.98 681.945 L1368.42 681.945 L1367.86 681.945 L1367.3 681.945 L1366.74 681.945 L1366.18 681.945 L1365.62 681.945 L1365.06 681.945 L1364.5 681.945 L1363.94 681.945 L1363.39 681.945 L1362.83 681.945 L1362.27 681.945 L1361.71 681.945 L1361.15 681.945 L1360.59 681.945 L1360.03 681.945 L1359.47 681.945 L1358.91 681.945 L1358.35 681.945 L1357.79 681.945 L1357.23 681.945 L1356.67 681.945 L1356.12 681.945 L1355.56 681.945 L1355 681.945 L1354.44 681.945 L1353.88 681.945 L1353.32 681.945 L1352.76 681.945 L1352.2 681.945 L1351.64 681.945 L1351.08 681.945 L1350.52 681.945 L1349.96 681.945 L1349.4 681.945 L1348.84 681.945 L1348.29 681.945 L1347.73 681.945 L1347.17 681.945 L1346.61 681.945 L1346.05 681.945 L1345.49 681.945 L1344.93 681.945 L1344.37 681.945 L1343.81 681.945 L1343.25 681.945 L1342.69 681.945 L1342.13 681.945 L1341.57 681.945 L1341.02 681.945 L1340.46 681.945 L1339.9 681.945 L1339.34 681.945 L1338.78 681.945 L1338.22 681.945 L1337.66 681.945 L1337.1 681.945 L1336.54 681.945 L1335.98 681.945 L1335.42 681.945 L1334.86 681.945 L1334.3 681.945 L1333.75 681.945 L1333.19 681.945 L1332.63 681.945 L1332.07 681.945 L1331.51 681.945 L1330.95 681.945 L1330.39 681.945 L1329.83 681.945 L1329.27 681.945 L1328.71 681.945 L1328.15 681.945 L1327.59 681.945 L1327.03 681.945 L1326.47 681.945 L1325.92 681.945 L1325.36 681.945 L1324.8 681.945 L1324.24 681.945 L1323.68 681.945 L1323.12 681.945 L1322.56 681.945 L1322 681.945 L1321.44 681.945 L1320.88 681.945 L1320.32 681.945 L1319.76 681.945 L1319.2 681.945 L1318.65 681.945 L1318.09 681.945 L1317.53 681.945 L1316.97 681.945 L1316.41 681.945 L1315.85 681.945 L1315.29 681.945 L1314.73 681.945 L1314.17 681.945 L1313.61 681.945 L1313.05 681.945 L1312.49 681.945 L1311.93 681.945 L1311.38 681.945 L1310.82 681.945 L1310.26 681.945 L1309.7 681.945 L1309.14 681.945 L1308.58 681.945 L1308.02 681.945 L1307.46 681.945 L1306.9 681.945 L1306.34 681.945 L1305.78 681.945 L1305.22 681.945 L1304.66 681.945 L1304.1 681.945 L1303.55 681.945 L1302.99 681.945 L1302.43 681.945 L1301.87 681.945 L1301.31 681.945 L1300.75 681.945 L1300.19 681.945 L1299.63 681.945 L1299.07 681.945 L1298.51 681.945 L1297.95 681.945 L1297.39 681.945 L1296.83 681.945 L1296.28 681.945 L1295.72 681.945 L1295.16 681.945 L1294.6 681.945 L1294.04 681.945 L1293.48 681.945 L1292.92 681.945 L1292.36 681.945 L1291.8 681.945 L1291.24 681.945 L1290.68 681.945 L1290.12 681.945 L1289.56 681.945 L1289 681.945 L1288.45 681.945 L1287.89 681.945 L1287.33 681.945 L1286.77 681.945 L1286.21 681.945 L1285.65 681.945 L1285.09 681.945 L1284.53 681.945 L1283.97 681.945 L1283.41 681.945 L1282.85 681.945 L1282.29 681.945 L1281.73 681.945 L1281.18 681.945 L1280.62 681.945 L1280.06 681.945 L1279.5 681.945 L1278.94 681.945 L1278.38 681.945 L1277.82 681.945 L1277.26 681.945 L1276.7 681.945 L1276.14 681.945 L1275.58 681.945 L1275.02 681.945 L1274.46 681.945 L1273.91 681.945 L1273.35 681.945 L1272.79 681.945 L1272.23 681.945 L1271.67 681.945 L1271.11 681.945 L1270.55 681.945 L1269.99 681.945 L1269.43 681.945 L1268.87 681.945 L1268.31 681.945 L1267.75 681.945 L1267.19 681.945 L1266.63 681.945 L1266.08 681.945 L1265.52 681.945 L1264.96 681.945 L1264.4 681.945 L1263.84 681.945 L1263.28 681.945 L1262.72 681.945 L1262.16 681.945 L1261.6 681.945 L1261.04 681.945 L1260.48 681.945 L1259.92 681.945 L1259.36 681.945 L1258.81 681.945 L1258.25 681.945 L1257.69 681.945 L1257.13 681.945 L1256.57 681.945 L1256.01 681.945 L1255.45 681.945 L1254.89 681.945 L1254.33 681.945 L1253.77 681.945 L1253.21 681.945 L1252.65 681.945 L1252.09 681.945 L1251.54 681.945 L1250.98 681.945 L1250.42 681.945 L1249.86 681.945 L1249.3 681.945 L1248.74 681.945 L1248.18 681.945 L1247.62 681.945 L1247.06 681.945 L1246.5 681.945 L1245.94 681.945 L1245.38 681.945 L1244.82 681.945 L1244.26 681.945 L1243.71 681.945 L1243.15 681.945 L1242.59 681.945 L1242.03 681.945 L1241.47 681.945 L1240.91 681.945 L1240.35 681.945 L1239.79 681.945 L1239.23 681.945 L1238.67 681.945 L1238.11 681.945 L1237.55 681.945 L1236.99 681.945 L1236.44 681.945 L1235.88 681.945 L1235.32 681.945 L1234.76 681.945 L1234.2 681.945 L1233.64 681.945 L1233.08 681.945 L1232.52 681.945 L1231.96 681.945 L1231.4 681.945 L1230.84 681.945 L1230.28 681.945 L1229.72 681.945 L1229.17 681.945 L1228.61 681.945 L1228.05 681.945 L1227.49 681.945 L1226.93 681.945 L1226.37 681.945 L1225.81 681.945 L1225.25 681.945 L1224.69 681.945 L1224.13 681.945 L1223.57 681.945 L1223.01 681.945 L1222.45 681.945 L1221.89 681.945 L1221.34 681.945 L1220.78 681.945 L1220.22 681.945 L1219.66 681.945 L1219.1 681.945 L1218.54 681.945 L1217.98 681.945 L1217.42 681.945 L1216.86 681.945 L1216.3 681.945 L1215.74 681.945 L1215.18 681.945 L1214.62 681.945 L1214.07 681.945 L1213.51 681.945 L1212.95 681.945 L1212.39 681.945 L1211.83 681.945 L1211.27 681.945 L1210.71 681.945 L1210.15 681.945 L1209.59 681.945 L1209.03 681.945 L1208.47 681.945 L1207.91 681.945 L1207.35 681.945 L1206.8 681.945 L1206.24 681.945 L1205.68 681.945 L1205.12 681.945 L1204.56 681.945 L1204 681.945 L1203.44 681.945 L1202.88 681.945 L1202.32 681.945 L1201.76 681.945 L1201.2 681.945 L1200.64 681.945 L1200.08 681.945 L1199.52 681.945 L1198.97 681.945 L1198.41 681.945 L1197.85 681.945 L1197.29 681.945 L1196.73 681.945 L1196.17 681.945 L1195.61 681.945 L1195.05 681.945 L1194.49 681.945 L1193.93 681.945 L1193.37 681.945 L1192.81 681.945 L1192.25 681.945 L1191.7 681.945 L1191.14 681.945 L1190.58 681.945 L1190.02 681.945 L1189.46 681.945 L1188.9 681.945 L1188.34 681.945 L1187.78 681.945 L1187.22 681.945 L1186.66 681.945 L1186.1 681.945 L1185.54 681.945 L1184.98 681.945 L1184.43 681.945 L1183.87 681.945 L1183.31 681.945 L1182.75 681.945 L1182.19 681.945 L1181.63 681.945 L1181.07 681.945 L1180.51 681.945 L1179.95 681.945 L1179.39 681.945 L1178.83 681.945 L1178.27 681.945 L1177.71 681.945 L1177.15 681.945 L1176.6 681.945 L1176.04 681.945 L1175.48 681.945 L1174.92 681.945 L1174.36 681.945 L1173.8 681.945 L1173.24 681.945 L1172.68 681.945 L1172.12 681.945 L1171.56 681.945 L1171 681.945 L1170.44 681.945 L1169.88 681.945 L1169.33 681.945 L1168.77 681.945 L1168.21 681.945 L1167.65 681.945 L1167.09 681.945 L1166.53 681.945 L1165.97 681.945 L1165.41 681.945 L1164.85 681.945 L1164.29 681.945 L1163.73 681.945 L1163.17 681.945 L1162.61 681.945 L1162.05 681.945 L1161.5 681.945 L1160.94 681.945 L1160.38 681.945 L1159.82 681.945 L1159.26 681.945 L1158.7 681.945 L1158.14 681.945 L1157.58 681.945 L1157.02 681.945 L1156.46 681.945 L1155.9 681.945 L1155.34 681.945 L1154.78 681.945 L1154.23 681.945 L1153.67 681.945 L1153.11 681.945 L1152.55 681.945 L1151.99 681.945 L1151.43 681.945 L1150.87 681.945 L1150.31 681.945 L1149.75 681.945 L1149.19 681.945 L1148.63 681.945 L1148.07 681.945 L1147.51 681.945 L1146.96 681.945 L1146.4 681.945 L1145.84 681.945 L1145.28 681.945 L1144.72 681.945 L1144.16 681.945 L1143.6 681.945 L1143.04 681.945 L1142.48 681.945 L1141.92 681.945 L1141.36 681.945 L1140.8 681.945 L1140.24 681.945 L1139.68 681.945 L1139.13 681.945 L1138.57 681.945 L1138.01 681.945 L1137.45 681.945 L1136.89 681.945 L1136.33 681.945 L1135.77 681.945 L1135.21 681.945 L1134.65 681.945 L1134.09 681.945 L1133.53 681.945 L1132.97 681.945 L1132.41 681.945 L1131.86 681.945 L1131.3 681.945 L1130.74 681.945 L1130.18 681.945 L1129.62 681.945 L1129.06 681.945 L1128.5 681.945 L1127.94 681.945 L1127.38 681.945 L1126.82 681.945 L1126.26 681.945 L1125.7 681.945 L1125.14 681.945 L1124.59 681.945 L1124.03 681.945 L1123.47 681.945 L1122.91 681.945 L1122.35 681.945 L1121.79 681.945 L1121.23 681.945 L1120.67 681.945 L1120.11 681.945 L1119.55 681.945 L1118.99 681.945 L1118.43 681.945 L1117.87 681.945 L1117.31 681.945 L1116.76 681.945 L1116.2 681.945 L1115.64 681.945 L1115.08 681.945 L1114.52 681.945 L1113.96 681.945 L1113.4 681.945 L1112.84 681.945 L1112.28 681.945 L1111.72 681.945 L1111.16 681.945 L1110.6 681.945 L1110.04 681.945 L1109.49 681.945 L1108.93 681.945 L1108.37 681.945 L1107.81 681.945 L1107.25 681.945 L1106.69 681.945 L1106.13 681.945 L1105.57 681.945 L1105.01 681.945 L1104.45 681.945 L1103.89 681.945 L1103.33 681.945 L1102.77 681.945 L1102.22 681.945 L1101.66 681.945 L1101.1 681.945 L1100.54 681.945 L1099.98 681.945 L1099.42 681.945 L1098.86 681.945 L1098.3 681.945 L1097.74 681.945 L1097.18 681.945 L1096.62 681.945 L1096.06 681.945 L1095.5 681.945 L1094.94 681.945 L1094.39 681.945 L1093.83 681.945 L1093.27 681.945 L1092.71 681.945 L1092.15 681.945 L1091.59 681.945 L1091.03 681.945 L1090.47 681.945 L1089.91 681.945 L1089.35 681.945 L1088.79 681.945 L1088.23 681.945 L1087.67 681.945 L1087.12 681.945 L1086.56 681.945 L1086 681.945 L1085.44 681.945 L1084.88 681.945 L1084.32 681.945 L1083.76 681.945 L1083.2 681.945 L1082.64 681.945 L1082.08 681.945 L1081.52 681.945 L1080.96 681.945 L1080.4 681.945 L1079.85 681.945 L1079.29 681.945 L1078.73 681.945 L1078.17 681.945 L1077.61 681.945 L1077.05 681.945 L1076.49 681.945 L1075.93 681.945 L1075.37 681.945 L1074.81 681.945 L1074.25 681.945 L1073.69 681.945 L1073.13 681.945 L1072.57 681.945 L1072.02 681.945 L1071.46 681.945 L1070.9 681.945 L1070.34 681.945 L1069.78 681.945 L1069.22 681.945 L1068.66 681.945 L1068.1 681.945 L1067.54 681.945 L1066.98 681.945 L1066.42 681.945 L1065.86 681.945 L1065.3 681.945 L1064.75 681.945 L1064.19 681.945 L1063.63 681.945 L1063.07 681.945 L1062.51 681.945 L1061.95 681.945 L1061.39 681.945 L1060.83 681.945 L1060.27 681.945 L1059.71 681.945 L1059.15 681.945 L1058.59 681.945 L1058.03 681.945 L1057.48 681.945 L1056.92 681.945 L1056.36 681.945 L1055.8 681.945 L1055.24 681.945 L1054.68 681.945 L1054.12 681.945 L1053.56 681.945 L1053 681.945 L1052.44 681.945 L1051.88 681.945 L1051.32 681.945 L1050.76 681.945 L1050.2 681.945 L1049.65 681.945 L1049.09 681.945 L1048.53 681.945 L1047.97 681.945 L1047.41 681.945 L1046.85 681.945 L1046.29 681.945 L1045.73 681.945 L1045.17 681.945 L1044.61 681.945 L1044.05 681.945 L1043.49 681.945 L1042.93 681.945 L1042.38 681.945 L1041.82 681.945 L1041.26 681.945 L1040.7 681.945 L1040.14 681.945 L1039.58 681.945 L1039.02 681.945 L1038.46 681.945 L1037.9 681.945 L1037.34 681.945 L1036.78 681.945 L1036.22 681.945 L1035.66 681.945 L1035.1 681.945 L1034.55 681.945 L1033.99 681.945 L1033.43 681.945 L1032.87 681.945 L1032.31 681.945 L1031.75 681.945 L1031.19 681.945 L1030.63 681.945 L1030.07 681.945 L1029.51 681.945 L1028.95 681.945 L1028.39 681.945 L1027.83 681.945 L1027.28 681.945 L1026.72 681.945 L1026.16 681.945 L1025.6 681.945 L1025.04 681.945 L1024.48 681.945 L1023.92 681.945 L1023.36 681.945 L1022.8 681.945 L1022.24 681.945 L1021.68 681.945 L1021.12 681.945 L1020.56 681.945 L1020.01 681.945 L1019.45 681.945 L1018.89 681.945 L1018.33 681.945 L1017.77 681.945 L1017.21 681.945 L1016.65 681.945 L1016.09 681.945 L1015.53 681.945 L1014.97 681.945 L1014.41 681.945 L1013.85 681.945 L1013.29 681.945 L1012.73 681.945 L1012.18 681.945 L1011.62 681.945 L1011.06 681.945 L1010.5 681.945 L1009.94 681.945 L1009.38 681.945 L1008.82 681.945 L1008.26 681.945 L1007.7 681.945 L1007.14 681.945 L1006.58 681.945 L1006.02 681.945 L1005.46 681.945 L1004.91 681.945 L1004.35 681.945 L1003.79 681.945 L1003.23 681.945 L1002.67 681.945 L1002.11 681.945 L1001.55 681.945 L1000.99 681.945 L1000.43 681.945 L999.872 681.945 L999.313 681.945 L998.754 681.945 L998.194 681.945 L997.635 681.945 L997.076 681.945 L996.517 681.945 L995.957 681.945 L995.398 681.945 L994.839 681.945 L994.28 681.945 L993.72 681.945 L993.161 681.945 L992.602 681.945 L992.043 681.945 L991.483 681.945 L990.924 681.945 L990.365 681.945 L989.806 681.945 L989.246 681.945 L988.687 681.945 L988.128 681.945 L987.569 681.945 L987.009 681.945 L986.45 681.945 L985.891 681.945 L985.332 681.945 L984.772 681.945 L984.213 681.945 L983.654 681.945 L983.095 681.945 L982.535 681.945 L981.976 681.945 L981.417 681.945 L980.858 681.945 L980.298 681.945 L979.739 681.945 L979.18 681.945 L978.621 681.945 L978.061 681.945 L977.502 681.945 L976.943 681.945 L976.384 681.945 L975.824 681.945 L975.265 681.945 L974.706 681.945 L974.147 681.945 L973.587 681.945 L973.028 681.945 L972.469 681.945 L971.91 681.945 L971.35 681.945 L970.791 681.945 L970.232 681.945 L969.673 681.945 L969.113 681.945 L968.554 681.945 L967.995 681.945 L967.436 681.945 L966.876 681.945 L966.317 681.945 L965.758 681.945 L965.199 681.945 L964.639 681.945 L964.08 681.945 L963.521 681.945 L962.962 681.945 L962.402 681.945 L961.843 681.945 L961.284 681.945 L960.725 681.945 L960.165 681.945 L959.606 681.945 L959.047 681.945 L958.488 681.945 L957.928 681.945 L957.369 681.945 L956.81 681.945 L956.251 681.945 L955.691 681.945 L955.132 681.945 L954.573 681.945 L954.014 681.945 L953.454 681.945 L952.895 681.945 L952.336 681.945 L951.777 681.945 L951.217 681.945 L950.658 681.945 L950.099 681.945 L949.54 681.945 L948.98 681.945 L948.421 681.945 L947.862 681.945 L947.303 681.945 L946.743 681.945 L946.184 681.945 L945.625 681.945 L945.066 681.945 L944.506 681.945 L943.947 681.945 L943.388 681.945 L942.829 681.945 L942.269 681.945 L941.71 681.945 L941.151 681.945 L940.592 681.945 L940.032 681.945 L939.473 681.945 L938.914 681.945 L938.355 681.945 L937.795 681.945 L937.236 681.945 L936.677 681.945 L936.118 681.945 L935.558 681.945 L934.999 681.945 L934.44 681.945 L933.881 681.945 L933.321 681.945 L932.762 681.945 L932.203 681.945 L931.644 681.945 L931.084 681.945 L930.525 681.945 L929.966 681.945 L929.406 681.945 L928.847 681.945 L928.288 681.945 L927.729 681.945 L927.169 681.945 L926.61 681.945 L926.051 681.945 L925.492 681.945 L924.932 681.945 L924.373 681.945 L923.814 681.945 L923.255 681.945 L922.695 681.945 L922.136 681.945 L921.577 681.945 L921.018 681.945 L920.458 681.945 L919.899 681.945 L919.34 681.945 L918.781 681.945 L918.221 681.945 L917.662 681.945 L917.103 681.945 L916.544 681.945 L915.984 681.945 L915.425 681.945 L914.866 681.945 L914.307 681.945 L913.747 681.945 L913.188 681.945 L912.629 681.945 L912.07 681.945 L911.51 681.945 L910.951 681.945 L910.392 681.945 L909.833 681.945 L909.273 681.945 L908.714 681.945 L908.155 681.945 L907.596 681.945 L907.036 681.945 L906.477 681.945 L905.918 681.945 L905.359 681.945 L904.799 681.945 L904.24 681.945 L903.681 681.945 L903.122 681.945 L902.562 681.945 L902.003 681.945 L901.444 681.945 L900.885 681.945 L900.325 681.945 L899.766 681.945 L899.207 681.945 L898.648 681.945 L898.088 681.945 L897.529 681.945 L896.97 681.945 L896.411 681.945 L895.851 681.945 L895.292 681.945 L894.733 681.945 L894.174 681.945 L893.614 681.945 L893.055 681.945 L892.496 681.945 L891.937 681.945 L891.377 681.945 L890.818 681.945 L890.259 681.945 L889.7 681.945 L889.14 681.945 L888.581 681.945 L888.022 681.945 L887.463 681.945 L886.903 681.945 L886.344 681.945 L885.785 681.945 L885.226 681.945 L884.666 681.945 L884.107 681.945 L883.548 681.945 L882.989 681.945 L882.429 681.945 L881.87 681.945 L881.311 681.945 L880.752 681.945 L880.192 681.945 L879.633 681.945 L879.074 681.945 L878.515 681.945 L877.955 681.945 L877.396 681.945 L876.837 681.945 L876.278 681.945 L875.718 681.945 L875.159 681.945 L874.6 681.945 L874.041 681.945 L873.481 681.945 L872.922 681.945 L872.363 681.945 L871.804 681.945 L871.244 681.945 L870.685 681.945 L870.126 681.945 L869.567 681.945 L869.007 681.945 L868.448 681.945 L867.889 681.945 L867.33 681.945 L866.77 681.945 L866.211 681.945 L865.652 681.945 L865.093 681.945 L864.533 681.945 L863.974 681.945 L863.415 681.945 L862.856 681.945 L862.296 681.945 L861.737 681.945 L861.178 681.945 L860.619 681.945 L860.059 681.945 L859.5 681.945 L858.941 681.945 L858.382 681.945 L857.822 681.945 L857.263 681.945 L856.704 681.945 L856.145 681.945 L855.585 681.945 L855.026 681.945 L854.467 681.945 L853.908 681.945 L853.348 681.945 L852.789 681.945 L852.23 681.945 L851.671 681.945 L851.111 681.945 L850.552 681.945 L849.993 681.945 L849.434 681.945 L848.874 681.945 L848.315 681.945 L847.756 681.945 L847.197 681.945 L846.637 681.945 L846.078 681.945 L845.519 681.945 L844.96 681.945 L844.4 681.945 L843.841 681.945 L843.282 681.945 L842.723 681.945 L842.163 681.945 L841.604 681.945 L841.045 681.945 L840.486 681.945 L839.926 681.945 L839.367 681.945 L838.808 681.945 L838.249 681.945 L837.689 681.945 L837.13 681.945 L836.571 681.945 L836.012 681.945 L835.452 681.945 L834.893 681.945 L834.334 681.945 L833.775 681.945 L833.215 681.945 L832.656 681.945 L832.097 681.945 L831.538 681.945 L830.978 681.945 L830.419 681.945 L829.86 681.945 L829.301 681.945 L828.741 681.945 L828.182 681.945 L827.623 681.945 L827.064 681.945 L826.504 681.945 L825.945 681.945 L825.386 681.945 L824.827 681.945 L824.267 681.945 L823.708 681.945 L823.149 681.945 L822.59 681.945 L822.03 681.945 L821.471 681.945 L820.912 681.945 L820.353 681.945 L819.793 681.945 L819.234 681.945 L818.675 681.945 L818.116 681.945 L817.556 681.945 L816.997 681.945 L816.438 681.945 L815.879 681.945 L815.319 681.945 L814.76 681.945 L814.201 681.945 L813.642 681.945 L813.082 681.945 L812.523 681.945 L811.964 681.945 L811.405 681.945 L810.845 681.945 L810.286 681.945 L809.727 681.945 L809.168 681.945 L808.608 681.945 L808.049 681.945 L807.49 681.945 L806.931 681.945 L806.371 681.945 L805.812 681.945 L805.253 681.945 L804.693 681.945 L804.134 681.945 L803.575 681.945 L803.016 681.945 L802.456 681.945 L801.897 681.945 L801.338 681.945 L800.779 681.945 L800.219 681.945 L799.66 681.945 L799.101 681.945 L798.542 681.945 L797.982 681.945 L797.423 681.945 L796.864 681.945 L796.305 681.945 L795.745 681.945 L795.186 681.945 L794.627 681.945 L794.068 681.945 L793.508 681.945 L792.949 681.945 L792.39 681.945 L791.831 681.945 L791.271 681.945 L790.712 681.945 L790.153 681.945 L789.594 681.945 L789.034 681.945 L788.475 681.945 L787.916 681.945 L787.357 681.945 L786.797 681.945 L786.238 681.945 L785.679 681.945 L785.12 681.945 L784.56 681.945 L784.001 681.945 L783.442 681.945 L782.883 681.945 L782.323 681.945 L781.764 681.945 L781.205 681.945 L780.646 681.945 L780.086 681.945 L779.527 681.945 L778.968 681.945 L778.409 681.945 L777.849 681.945 L777.29 681.945 L776.731 681.945 L776.172 681.945 L775.612 681.945 L775.053 681.945 L774.494 681.945 L773.935 681.945 L773.375 681.945 L772.816 681.945 L772.257 681.945 L771.698 681.945 L771.138 681.945 L770.579 681.945 L770.02 681.945 L769.461 681.945 L768.901 681.945 L768.342 681.945 L767.783 681.945 L767.224 681.945 L766.664 681.945 L766.105 681.945 L765.546 681.945 L764.987 681.945 L764.427 681.945 L763.868 681.945 L763.309 681.945 L762.75 681.945 L762.19 681.945 L761.631 681.945 L761.072 681.945 L760.513 681.945 L759.953 681.945 L759.394 681.945 L758.835 681.945 L758.276 681.945 L757.716 681.945 L757.157 681.945 L756.598 681.945 L756.039 681.945 L755.479 681.945 L754.92 681.945 L754.361 681.945 L753.802 681.945 L753.242 681.945 L752.683 681.945 L752.124 681.945 L751.565 681.945 L751.005 681.945 L750.446 681.945 L749.887 681.945 L749.328 681.945 L748.768 681.945 L748.209 681.945 L747.65 681.945 L747.091 681.945 L746.531 681.945 L745.972 681.945 L745.413 681.945 L744.854 681.945 L744.294 681.945 L743.735 681.945 L743.176 681.945 L742.617 681.945 L742.057 681.945 L741.498 681.945 L740.939 681.945 L740.38 681.945 L739.82 681.945 L739.261 681.945 L738.702 681.945 L738.143 681.945 L737.583 681.945 L737.024 681.945 L736.465 681.945 L735.906 681.945 L735.346 681.945 L734.787 681.945 L734.228 681.945 L733.669 681.945 L733.109 681.945 L732.55 681.945 L731.991 681.945 L731.432 681.945 L730.872 681.945 L730.313 681.945 L729.754 681.945 L729.195 681.945 L728.635 681.945 L728.076 681.945 L727.517 681.945 L726.958 681.945 L726.398 681.945 L725.839 681.945 L725.28 681.945 L724.721 681.945 L724.161 681.945 L723.602 681.945 L723.043 681.945 L722.484 681.945 L721.924 681.945 L721.365 681.945 L720.806 681.945 L720.247 681.945  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.965 720.806,686.965 721.365,686.965 721.924,686.965 722.484,686.965 723.043,686.965 723.602,686.965 724.161,686.965 724.721,686.965 725.28,686.965 725.839,686.965 726.398,686.965 726.958,686.965 727.517,686.965 728.076,686.965 728.635,686.965 729.195,686.965 729.754,686.965 730.313,686.965 730.872,686.965 731.432,686.965 731.991,686.965 732.55,686.965 733.109,686.965 733.669,686.965 734.228,686.965 734.787,686.965 735.346,686.965 735.906,686.965 736.465,686.965 737.024,686.965 737.583,686.965 738.143,686.965 738.702,686.965 739.261,686.965 739.82,686.965 740.38,686.965 740.939,686.965 741.498,686.965 742.057,686.965 742.617,686.965 743.176,686.965 743.735,686.965 744.294,686.965 744.854,686.965 745.413,686.965 745.972,686.965 746.531,686.965 747.091,686.965 747.65,686.965 748.209,686.965 748.768,686.965 749.328,686.965 749.887,686.965 750.446,686.965 751.005,686.965 751.565,686.965 752.124,686.965 752.683,686.965 753.242,686.965 753.802,686.965 754.361,686.965 754.92,686.965 755.479,686.965 756.039,686.965 756.598,686.965 757.157,686.965 757.716,686.965 758.276,686.965 758.835,686.965 759.394,686.965 759.953,686.965 760.513,686.965 761.072,686.965 761.631,686.965 762.19,686.965 762.75,686.965 763.309,686.965 763.868,686.965 764.427,686.965 764.987,686.965 765.546,686.965 766.105,686.965 766.664,686.965 767.224,686.965 767.783,686.965 768.342,686.965 768.901,686.965 769.461,686.965 770.02,686.965 770.579,686.965 771.138,686.965 771.698,686.965 772.257,686.965 772.816,686.965 773.375,686.965 773.935,686.965 774.494,686.965 775.053,686.965 775.612,686.965 776.172,686.965 776.731,686.965 777.29,686.965 777.849,686.965 778.409,686.965 778.968,686.965 779.527,686.965 780.086,686.965 780.646,686.965 781.205,686.965 781.764,686.965 782.323,686.965 782.883,686.965 783.442,686.965 784.001,686.965 784.56,686.965 785.12,686.965 785.679,686.965 786.238,686.965 786.797,686.965 787.357,686.965 787.916,686.965 788.475,686.965 789.034,686.965 789.594,686.965 790.153,686.965 790.712,686.965 791.271,686.965 791.831,686.965 792.39,686.965 792.949,686.965 793.508,686.965 794.068,686.965 794.627,686.965 795.186,686.965 795.745,686.965 796.305,686.965 796.864,686.965 797.423,686.965 797.982,686.965 798.542,686.965 799.101,686.965 799.66,686.965 800.219,686.965 800.779,686.965 801.338,686.965 801.897,686.965 802.456,686.965 803.016,686.965 803.575,686.965 804.134,686.965 804.693,686.965 805.253,686.965 805.812,686.965 806.371,686.965 806.931,686.965 807.49,686.965 808.049,686.965 808.608,686.965 809.168,686.965 809.727,686.965 810.286,686.965 810.845,686.965 811.405,686.965 811.964,686.965 812.523,686.965 813.082,686.965 813.642,686.965 814.201,686.965 814.76,686.965 815.319,686.965 815.879,686.965 816.438,686.965 816.997,686.965 817.556,686.965 818.116,686.965 818.675,686.965 819.234,686.965 819.793,686.965 820.353,686.965 820.912,686.965 821.471,686.965 822.03,686.965 822.59,686.965 823.149,686.965 823.708,686.965 824.267,686.965 824.827,686.965 825.386,686.965 825.945,686.965 826.504,686.965 827.064,686.965 827.623,686.965 828.182,686.965 828.741,686.965 829.301,686.965 829.86,686.965 830.419,686.965 830.978,686.965 831.538,686.965 832.097,686.965 832.656,686.965 833.215,686.965 833.775,686.965 834.334,686.965 834.893,686.965 835.452,686.965 836.012,686.965 836.571,686.965 837.13,686.965 837.689,686.965 838.249,686.965 838.808,686.965 839.367,686.965 839.926,686.965 840.486,686.965 841.045,686.965 841.604,686.965 842.163,686.965 842.723,686.965 843.282,686.965 843.841,686.965 844.4,686.965 844.96,686.965 845.519,686.965 846.078,686.965 846.637,686.965 847.197,686.965 847.756,686.965 848.315,686.965 848.874,686.965 849.434,686.965 849.993,686.965 850.552,686.965 851.111,686.965 851.671,686.965 852.23,686.965 852.789,686.965 853.348,686.965 853.908,686.965 854.467,686.965 855.026,686.965 855.585,686.965 856.145,686.965 856.704,686.965 857.263,686.965 857.822,686.965 858.382,686.965 858.941,686.965 859.5,686.965 860.059,686.965 860.619,686.965 861.178,686.965 861.737,686.965 862.296,686.965 862.856,686.965 863.415,686.965 863.974,686.965 864.533,686.965 865.093,686.965 865.652,686.965 866.211,686.965 866.77,686.965 867.33,686.965 867.889,686.965 868.448,686.965 869.007,686.965 869.567,686.965 870.126,686.965 870.685,686.965 871.244,686.965 871.804,686.965 872.363,686.965 872.922,686.965 873.481,686.965 874.041,686.965 874.6,686.965 875.159,686.965 875.718,686.965 876.278,686.965 876.837,686.965 877.396,686.965 877.955,686.965 878.515,686.965 879.074,686.965 879.633,686.965 880.192,686.965 880.752,686.965 881.311,686.965 881.87,686.965 882.429,686.965 882.989,686.965 883.548,686.965 884.107,686.965 884.666,686.965 885.226,686.965 885.785,686.965 886.344,686.965 886.903,686.965 887.463,686.965 888.022,686.965 888.581,686.965 889.14,686.965 889.7,686.965 890.259,686.965 890.818,686.965 891.377,686.965 891.937,686.965 892.496,686.965 893.055,686.965 893.614,686.965 894.174,686.965 894.733,686.965 895.292,686.965 895.851,686.965 896.411,686.965 896.97,686.965 897.529,686.965 898.088,686.965 898.648,686.965 899.207,686.965 899.766,686.965 900.325,686.965 900.885,686.965 901.444,686.965 902.003,686.965 902.562,686.965 903.122,686.965 903.681,686.965 904.24,686.965 904.799,686.965 905.359,686.965 905.918,686.965 906.477,686.965 907.036,686.965 907.596,686.965 908.155,686.965 908.714,686.965 909.273,686.965 909.833,686.965 910.392,686.965 910.951,686.965 911.51,686.965 912.07,686.965 912.629,686.965 913.188,686.965 913.747,686.965 914.307,686.965 914.866,686.965 915.425,686.965 915.984,686.965 916.544,686.965 917.103,686.965 917.662,686.965 918.221,686.965 918.781,686.965 919.34,686.965 919.899,686.965 920.458,686.965 921.018,686.965 921.577,686.965 922.136,686.965 922.695,686.965 923.255,686.965 923.814,686.965 924.373,686.965 924.932,686.965 925.492,686.965 926.051,686.965 926.61,686.965 927.169,686.965 927.729,686.965 928.288,686.965 928.847,686.965 929.406,686.965 929.966,686.965 930.525,686.965 931.084,686.965 931.644,686.965 932.203,686.965 932.762,686.965 933.321,686.965 933.881,686.965 934.44,686.965 934.999,686.965 935.558,686.965 936.118,686.965 936.677,686.965 937.236,686.965 937.795,686.965 938.355,686.965 938.914,686.965 939.473,686.965 940.032,686.965 940.592,686.965 941.151,686.965 941.71,686.965 942.269,686.965 942.829,686.965 943.388,686.965 943.947,686.965 944.506,686.965 945.066,686.965 945.625,686.965 946.184,686.965 946.743,686.965 947.303,686.965 947.862,686.965 948.421,686.965 948.98,686.965 949.54,686.965 950.099,686.965 950.658,686.965 951.217,686.965 951.777,686.965 952.336,686.965 952.895,686.965 953.454,686.965 954.014,686.965 954.573,686.965 955.132,686.965 955.691,686.965 956.251,686.965 956.81,686.965 957.369,686.965 957.928,686.965 958.488,686.965 959.047,686.965 959.606,686.965 960.165,686.965 960.725,686.965 961.284,686.965 961.843,686.965 962.402,686.965 962.962,686.965 963.521,686.965 964.08,686.965 964.639,686.965 965.199,686.965 965.758,686.965 966.317,686.965 966.876,686.965 967.436,686.965 967.995,686.965 968.554,686.965 969.113,686.965 969.673,686.965 970.232,686.965 970.791,686.965 971.35,686.965 971.91,686.965 972.469,686.965 973.028,686.965 973.587,686.965 974.147,686.965 974.706,686.965 975.265,686.965 975.824,686.965 976.384,686.965 976.943,686.965 977.502,686.965 978.061,686.965 978.621,686.965 979.18,686.965 979.739,686.965 980.298,686.965 980.858,686.965 981.417,686.965 981.976,686.965 982.535,686.965 983.095,686.965 983.654,686.965 984.213,686.965 984.772,686.965 985.332,686.965 985.891,686.965 986.45,686.965 987.009,686.965 987.569,686.965 988.128,686.965 988.687,686.965 989.246,686.965 989.806,686.965 990.365,686.965 990.924,686.965 991.483,686.965 992.043,686.965 992.602,686.965 993.161,686.965 993.72,686.965 994.28,686.965 994.839,686.965 995.398,686.965 995.957,686.965 996.517,686.965 997.076,686.965 997.635,686.965 998.194,686.965 998.754,686.965 999.313,686.965 999.872,686.965 1000.43,686.965 1000.99,686.965 1001.55,686.965 1002.11,686.965 1002.67,686.965 1003.23,686.965 1003.79,686.965 1004.35,686.965 1004.91,686.965 1005.46,686.965 1006.02,686.965 1006.58,686.965 1007.14,686.965 1007.7,686.965 1008.26,686.965 1008.82,686.965 1009.38,686.965 1009.94,686.965 1010.5,686.965 1011.06,686.965 1011.62,686.965 1012.18,686.965 1012.73,686.965 1013.29,686.965 1013.85,686.965 1014.41,686.965 1014.97,686.965 1015.53,686.965 1016.09,686.965 1016.65,686.965 1017.21,686.965 1017.77,686.965 1018.33,686.965 1018.89,686.965 1019.45,686.965 1020.01,686.965 1020.56,686.965 1021.12,686.965 1021.68,686.965 1022.24,686.965 1022.8,686.965 1023.36,686.965 1023.92,686.965 1024.48,686.965 1025.04,686.965 1025.6,686.965 1026.16,686.965 1026.72,686.965 1027.28,686.965 1027.83,686.965 1028.39,686.965 1028.95,686.965 1029.51,686.965 1030.07,686.965 1030.63,686.965 1031.19,686.965 1031.75,686.965 1032.31,686.965 1032.87,686.965 1033.43,686.965 1033.99,686.965 1034.55,686.965 1035.1,686.965 1035.66,686.965 1036.22,686.965 1036.78,686.965 1037.34,686.965 1037.9,686.965 1038.46,686.965 1039.02,686.965 1039.58,686.965 1040.14,686.965 1040.7,686.965 1041.26,686.965 1041.82,686.965 1042.38,686.965 1042.93,686.965 1043.49,686.965 1044.05,686.965 1044.61,686.965 1045.17,686.965 1045.73,686.965 1046.29,686.965 1046.85,686.965 1047.41,686.965 1047.97,686.965 1048.53,686.965 1049.09,686.965 1049.65,686.965 1050.2,686.965 1050.76,686.965 1051.32,686.965 1051.88,686.965 1052.44,686.965 1053,686.965 1053.56,686.965 1054.12,686.965 1054.68,686.965 1055.24,686.965 1055.8,686.965 1056.36,686.965 1056.92,686.965 1057.48,686.965 1058.03,686.965 1058.59,686.965 1059.15,686.965 1059.71,686.965 1060.27,686.965 1060.83,686.965 1061.39,686.965 1061.95,686.965 1062.51,686.965 1063.07,686.965 1063.63,686.965 1064.19,686.965 1064.75,686.965 1065.3,686.965 1065.86,686.965 1066.42,686.965 1066.98,686.965 1067.54,686.965 1068.1,686.965 1068.66,686.965 1069.22,686.965 1069.78,686.965 1070.34,686.965 1070.9,686.965 1071.46,686.965 1072.02,686.965 1072.57,686.965 1073.13,686.965 1073.69,686.965 1074.25,686.965 1074.81,686.965 1075.37,686.965 1075.93,686.965 1076.49,686.965 1077.05,686.965 1077.61,686.965 1078.17,686.965 1078.73,686.965 1079.29,686.965 1079.85,686.965 1080.4,686.965 1080.96,686.965 1081.52,686.965 1082.08,686.965 1082.64,686.965 1083.2,686.965 1083.76,686.965 1084.32,686.965 1084.88,686.965 1085.44,686.965 1086,686.965 1086.56,686.965 1087.12,686.965 1087.67,686.965 1088.23,686.965 1088.79,686.965 1089.35,686.965 1089.91,686.965 1090.47,686.965 1091.03,686.965 1091.59,686.965 1092.15,686.965 1092.71,686.965 1093.27,686.965 1093.83,686.965 1094.39,686.965 1094.94,686.965 1095.5,686.965 1096.06,686.965 1096.62,686.965 1097.18,686.965 1097.74,686.965 1098.3,686.965 1098.86,686.965 1099.42,686.965 1099.98,686.965 1100.54,686.965 1101.1,686.965 1101.66,686.965 1102.22,686.965 1102.77,686.965 1103.33,686.965 1103.89,686.965 1104.45,686.965 1105.01,686.965 1105.57,686.965 1106.13,686.965 1106.69,686.965 1107.25,686.965 1107.81,686.965 1108.37,686.965 1108.93,686.965 1109.49,686.965 1110.04,686.965 1110.6,686.965 1111.16,686.965 1111.72,686.965 1112.28,686.965 1112.84,686.965 1113.4,686.965 1113.96,686.965 1114.52,686.965 1115.08,686.965 1115.64,686.965 1116.2,686.965 1116.76,686.965 1117.31,686.965 1117.87,686.965 1118.43,686.965 1118.99,686.965 1119.55,686.965 1120.11,686.965 1120.67,686.965 1121.23,686.965 1121.79,686.965 1122.35,686.965 1122.91,686.965 1123.47,686.965 1124.03,686.965 1124.59,686.965 1125.14,686.965 1125.7,686.965 1126.26,686.965 1126.82,686.965 1127.38,686.965 1127.94,686.965 1128.5,686.965 1129.06,686.965 1129.62,686.965 1130.18,686.965 1130.74,686.965 1131.3,686.965 1131.86,686.965 1132.41,686.965 1132.97,686.965 1133.53,686.965 1134.09,686.965 1134.65,686.965 1135.21,686.965 1135.77,686.965 1136.33,686.965 1136.89,686.965 1137.45,686.965 1138.01,686.965 1138.57,686.965 1139.13,686.965 1139.68,686.965 1140.24,686.965 1140.8,686.965 1141.36,686.965 1141.92,686.965 1142.48,686.965 1143.04,686.965 1143.6,686.965 1144.16,686.965 1144.72,686.965 1145.28,686.965 1145.84,686.965 1146.4,686.965 1146.96,686.965 1147.51,686.965 1148.07,686.965 1148.63,686.965 1149.19,686.965 1149.75,686.965 1150.31,686.965 1150.87,686.965 1151.43,686.965 1151.99,686.965 1152.55,686.965 1153.11,686.965 1153.67,686.965 1154.23,686.965 1154.78,686.965 1155.34,686.965 1155.9,686.965 1156.46,686.965 1157.02,686.965 1157.58,686.965 1158.14,686.965 1158.7,686.965 1159.26,686.965 1159.82,686.965 1160.38,686.965 1160.94,686.965 1161.5,686.965 1162.05,686.965 1162.61,686.965 1163.17,686.965 1163.73,686.965 1164.29,686.965 1164.85,686.965 1165.41,686.965 1165.97,686.965 1166.53,686.965 1167.09,686.965 1167.65,686.965 1168.21,686.965 1168.77,686.965 1169.33,686.965 1169.88,686.965 1170.44,686.965 1171,686.965 1171.56,686.965 1172.12,686.965 1172.68,686.965 1173.24,686.965 1173.8,686.965 1174.36,686.965 1174.92,686.965 1175.48,686.965 1176.04,686.965 1176.6,686.965 1177.15,686.965 1177.71,686.965 1178.27,686.965 1178.83,686.965 1179.39,686.965 1179.95,686.965 1180.51,686.965 1181.07,686.965 1181.63,686.965 1182.19,686.965 1182.75,686.965 1183.31,686.965 1183.87,686.965 1184.43,686.965 1184.98,686.965 1185.54,686.965 1186.1,686.965 1186.66,686.965 1187.22,686.965 1187.78,686.965 1188.34,686.965 1188.9,686.965 1189.46,686.965 1190.02,686.965 1190.58,686.965 1191.14,686.965 1191.7,686.965 1192.25,686.965 1192.81,686.965 1193.37,686.965 1193.93,686.965 1194.49,686.965 1195.05,686.965 1195.61,686.965 1196.17,686.965 1196.73,686.965 1197.29,686.965 1197.85,686.965 1198.41,686.965 1198.97,686.965 1199.52,686.965 1200.08,686.965 1200.64,686.965 1201.2,686.965 1201.76,686.965 1202.32,686.965 1202.88,686.965 1203.44,686.965 1204,686.965 1204.56,686.965 1205.12,686.965 1205.68,686.965 1206.24,686.965 1206.8,686.965 1207.35,686.965 1207.91,686.965 1208.47,686.965 1209.03,686.965 1209.59,686.965 1210.15,686.965 1210.71,686.965 1211.27,686.965 1211.83,686.965 1212.39,686.965 1212.95,686.965 1213.51,686.965 1214.07,686.965 1214.62,686.965 1215.18,686.965 1215.74,686.965 1216.3,686.965 1216.86,686.965 1217.42,686.965 1217.98,686.965 1218.54,686.965 1219.1,686.965 1219.66,686.965 1220.22,686.965 1220.78,686.965 1221.34,686.965 1221.89,686.965 1222.45,686.965 1223.01,686.965 1223.57,686.965 1224.13,686.965 1224.69,686.965 1225.25,686.965 1225.81,686.965 1226.37,686.965 1226.93,686.965 1227.49,686.965 1228.05,686.965 1228.61,686.965 1229.17,686.965 1229.72,686.965 1230.28,686.965 1230.84,686.965 1231.4,686.965 1231.96,686.965 1232.52,686.965 1233.08,686.965 1233.64,686.965 1234.2,686.965 1234.76,686.965 1235.32,686.965 1235.88,686.965 1236.44,686.965 1236.99,686.965 1237.55,686.965 1238.11,686.965 1238.67,686.965 1239.23,686.965 1239.79,686.965 1240.35,686.965 1240.91,686.965 1241.47,686.965 1242.03,686.965 1242.59,686.965 1243.15,686.965 1243.71,686.965 1244.26,686.965 1244.82,686.965 1245.38,686.965 1245.94,686.965 1246.5,686.965 1247.06,686.965 1247.62,686.965 1248.18,686.965 1248.74,686.965 1249.3,686.965 1249.86,686.965 1250.42,686.965 1250.98,686.965 1251.54,686.965 1252.09,686.965 1252.65,686.965 1253.21,686.965 1253.77,686.965 1254.33,686.965 1254.89,686.965 1255.45,686.965 1256.01,686.965 1256.57,686.965 1257.13,686.965 1257.69,686.965 1258.25,686.965 1258.81,686.965 1259.36,686.965 1259.92,686.965 1260.48,686.965 1261.04,686.965 1261.6,686.965 1262.16,686.965 1262.72,686.965 1263.28,686.965 1263.84,686.965 1264.4,686.965 1264.96,686.965 1265.52,686.965 1266.08,686.965 1266.63,686.965 1267.19,686.965 1267.75,686.965 1268.31,686.965 1268.87,686.965 1269.43,686.965 1269.99,686.965 1270.55,686.965 1271.11,686.965 1271.67,686.965 1272.23,686.965 1272.79,686.965 1273.35,686.965 1273.91,686.965 1274.46,686.965 1275.02,686.965 1275.58,686.965 1276.14,686.965 1276.7,686.965 1277.26,686.965 1277.82,686.965 1278.38,686.965 1278.94,686.965 1279.5,686.965 1280.06,686.965 1280.62,686.965 1281.18,686.965 1281.73,686.965 1282.29,686.965 1282.85,686.965 1283.41,686.965 1283.97,686.965 1284.53,686.965 1285.09,686.965 1285.65,686.965 1286.21,686.965 1286.77,686.965 1287.33,686.965 1287.89,686.965 1288.45,686.965 1289,686.965 1289.56,686.965 1290.12,686.965 1290.68,686.965 1291.24,686.965 1291.8,686.965 1292.36,686.965 1292.92,686.965 1293.48,686.965 1294.04,686.965 1294.6,686.965 1295.16,686.965 1295.72,686.965 1296.28,686.965 1296.83,686.965 1297.39,686.965 1297.95,686.965 1298.51,686.965 1299.07,686.965 1299.63,686.965 1300.19,686.965 1300.75,686.965 1301.31,686.965 1301.87,686.965 1302.43,686.965 1302.99,686.965 1303.55,686.965 1304.1,686.965 1304.66,686.965 1305.22,686.965 1305.78,686.965 1306.34,686.965 1306.9,686.965 1307.46,686.965 1308.02,686.965 1308.58,686.965 1309.14,686.965 1309.7,686.965 1310.26,686.965 1310.82,686.965 1311.38,686.965 1311.93,686.965 1312.49,686.965 1313.05,686.965 1313.61,686.965 1314.17,686.965 1314.73,686.965 1315.29,686.965 1315.85,686.965 1316.41,686.965 1316.97,686.965 1317.53,686.965 1318.09,686.965 1318.65,686.965 1319.2,686.965 1319.76,686.965 1320.32,686.965 1320.88,686.965 1321.44,686.965 1322,686.965 1322.56,686.965 1323.12,686.965 1323.68,686.965 1324.24,686.965 1324.8,686.965 1325.36,686.965 1325.92,686.965 1326.47,686.965 1327.03,686.965 1327.59,686.965 1328.15,686.965 1328.71,686.965 1329.27,686.965 1329.83,686.965 1330.39,686.965 1330.95,686.965 1331.51,686.965 1332.07,686.965 1332.63,686.965 1333.19,686.965 1333.75,686.965 1334.3,686.965 1334.86,686.965 1335.42,686.965 1335.98,686.965 1336.54,686.965 1337.1,686.965 1337.66,686.965 1338.22,686.965 1338.78,686.965 1339.34,686.965 1339.9,686.965 1340.46,686.965 1341.02,686.965 1341.57,686.965 1342.13,686.965 1342.69,686.965 1343.25,686.965 1343.81,686.965 1344.37,686.965 1344.93,686.965 1345.49,686.965 1346.05,686.965 1346.61,686.965 1347.17,686.965 1347.73,686.965 1348.29,686.965 1348.84,686.965 1349.4,686.965 1349.96,686.965 1350.52,686.965 1351.08,686.965 1351.64,686.965 1352.2,686.965 1352.76,686.965 1353.32,686.965 1353.88,686.965 1354.44,686.965 1355,686.965 1355.56,686.965 1356.12,686.965 1356.67,686.965 1357.23,686.965 1357.79,686.965 1358.35,686.965 1358.91,686.965 1359.47,686.965 1360.03,686.965 1360.59,686.965 1361.15,686.965 1361.71,686.965 1362.27,686.965 1362.83,686.965 1363.39,686.965 1363.94,686.965 1364.5,686.965 1365.06,686.965 1365.62,686.965 1366.18,686.965 1366.74,686.965 1367.3,686.965 1367.86,686.965 1368.42,686.965 1368.98,686.965 1369.54,686.965 1370.1,686.965 1370.66,686.965 1371.21,686.965 1371.77,686.965 1372.33,686.965 1372.89,686.965 1373.45,686.965 1374.01,686.965 1374.57,686.965 1375.13,686.965 1375.69,686.965 1376.25,686.965 1376.81,686.965 1377.37,686.965 1377.93,686.965 1378.49,686.965 1379.04,686.965 1379.6,686.965 1380.16,686.965 1380.72,686.965 1381.28,686.965 1381.84,686.965 1382.4,686.965 1382.96,686.965 1383.52,686.965 1384.08,686.965 1384.64,686.965 1385.2,686.965 1385.76,686.965 1386.31,686.965 1386.87,686.965 1387.43,686.965 1387.99,686.965 1388.55,686.965 1389.11,686.965 1389.67,686.965 1390.23,686.965 1390.79,686.965 1391.35,686.965 1391.91,686.965 1392.47,686.965 1393.03,686.965 1393.58,686.965 1394.14,686.965 1394.7,686.965 1395.26,686.965 1395.82,686.965 1396.38,686.965 1396.94,686.965 1397.5,686.965 1398.06,686.965 1398.62,686.965 1399.18,686.965 1399.74,686.965 1400.3,686.965 1400.86,686.965 1401.41,686.965 1401.97,686.965 1402.53,686.965 1403.09,686.965 1403.65,686.965 1404.21,686.965 1404.77,686.965 1405.33,686.965 1405.89,686.965 1406.45,686.965 1407.01,686.965 1407.57,686.965 1408.13,686.965 1408.68,686.965 1409.24,686.965 1409.8,686.965 1410.36,686.965 1410.92,686.965 1411.48,686.965 1412.04,686.965 1412.6,686.965 1413.16,686.965 1413.72,686.965 1414.28,686.965 1414.84,686.965 1415.4,686.965 1415.95,686.965 1416.51,686.965 1417.07,686.965 1417.63,686.965 1418.19,686.965 1418.75,686.965 1419.31,686.965 1419.87,686.965 1420.43,686.965 1420.99,686.965 1421.55,686.965 1422.11,686.965 1422.67,686.965 1423.23,686.965 1423.78,686.965 1424.34,686.965 1424.9,686.965 1425.46,686.965 1426.02,686.965 1426.58,686.965 1427.14,686.965 1427.7,686.965 1428.26,686.965 1428.82,686.965 1429.38,686.965 1429.94,686.965 1430.5,686.965 1431.05,686.965 1431.61,686.965 1432.17,686.965 1432.73,686.965 1433.29,686.965 1433.85,686.965 1434.41,686.965 1434.97,686.965 1435.53,686.965 1436.09,686.965 1436.65,686.965 1437.21,686.965 1437.77,686.965 1438.33,686.965 1438.88,686.965 1439.44,686.965 1440,686.965 1440.56,686.965 1441.12,686.965 1441.68,686.965 1442.24,686.965 1442.8,686.965 1443.36,686.965 1443.92,686.965 1444.48,686.965 1445.04,686.965 1445.6,686.965 1446.15,686.965 1446.71,686.965 1447.27,686.965 1447.83,686.965 1448.39,686.965 1448.95,686.965 1449.51,686.965 1450.07,686.965 1450.63,686.965 1451.19,686.965 1451.75,686.965 1452.31,686.965 1452.87,686.965 1453.42,686.965 1453.98,686.965 1454.54,686.965 1455.1,686.965 1455.66,686.965 1456.22,686.965 1456.78,686.965 1457.34,686.965 1457.9,686.965 1458.46,686.965 1459.02,686.965 1459.58,686.965 1460.14,686.965 1460.7,686.965 1461.25,686.965 1461.81,686.965 1462.37,686.965 1462.93,686.965 1463.49,686.965 1464.05,686.965 1464.61,686.965 1465.17,686.965 1465.73,686.965 1466.29,686.965 1466.85,686.965 1467.41,686.965 1467.97,686.965 1468.52,686.965 1469.08,686.965 1469.64,686.965 1470.2,686.965 1470.76,686.965 1471.32,686.965 1471.88,686.965 1472.44,686.965 1473,686.965 1473.56,686.965 1474.12,686.965 1474.68,686.965 1475.24,686.965 1475.79,686.965 1476.35,686.965 1476.91,686.965 1477.47,686.965 1478.03,686.965 1478.59,686.965 1479.15,686.965 1479.71,686.965 1480.27,686.965 1480.83,686.965 1481.39,686.965 1481.95,686.965 1482.51,686.965 1483.07,686.965 1483.62,686.965 1484.18,686.965 1484.74,686.965 1485.3,686.965 1485.86,686.965 1486.42,686.965 1486.98,686.965 1487.54,686.965 1488.1,686.965 1488.66,686.965 1489.22,686.965 1489.78,686.965 1490.34,686.965 1490.89,686.965 1491.45,686.965 1492.01,686.965 1492.57,686.965 1493.13,686.965 1493.69,686.965 1494.25,686.965 1494.81,686.965 1495.37,686.965 1495.93,686.965 1496.49,686.965 1497.05,686.965 1497.61,686.965 1498.16,686.965 1498.72,686.965 1499.28,686.965 1499.84,686.965 1500.4,686.965 1500.96,686.965 1501.52,686.965 1502.08,686.965 1502.64,686.965 1503.2,686.965 1503.76,686.965 1504.32,686.965 1504.88,686.965 1505.44,686.965 1505.99,686.965 1506.55,686.965 1507.11,686.965 1507.67,686.965 1508.23,686.965 1508.79,686.965 1509.35,686.965 1509.91,686.965 1510.47,686.965 1511.03,686.965 1511.59,686.965 1512.15,686.965 1512.71,686.965 1513.26,686.965 1513.82,686.965 1514.38,686.965 1514.94,686.965 1515.5,686.965 1516.06,686.965 1516.62,686.965 1517.18,686.965 1517.74,686.965 1518.3,686.965 1518.86,686.965 1519.42,686.965 1519.98,686.965 1520.53,686.965 1521.09,686.965 1521.65,686.965 1522.21,686.965 1522.77,686.965 1523.33,686.965 1523.89,686.965 1524.45,686.965 1525.01,686.965 1525.57,686.965 1526.13,686.965 1526.69,686.965 1527.25,686.965 1527.81,686.965 1528.36,686.965 1528.92,686.965 1529.48,686.965 1530.04,686.965 1530.6,686.965 1531.16,686.965 1531.72,686.965 1532.28,686.965 1532.84,686.965 1533.4,686.965 1533.96,686.965 1534.52,686.965 1535.08,686.965 1535.63,686.965 1536.19,686.965 1536.75,686.965 1537.31,686.965 1537.87,686.965 1538.43,686.965 1538.99,686.965 1539.55,686.965 1540.11,686.965 1540.67,686.965 1541.23,686.965 1541.79,686.965 1542.35,686.965 1542.9,686.965 1543.46,686.965 1544.02,686.965 1544.58,686.965 1545.14,686.965 1545.7,686.965 1546.26,686.965 1546.82,686.965 1547.38,686.965 1547.94,686.965 1548.5,686.965 1549.06,686.965 1549.62,686.965 1550.18,686.965 1550.73,686.965 1551.29,686.965 1551.85,686.965 1552.41,686.965 1552.97,686.965 1553.53,686.965 1554.09,686.965 1554.65,686.965 1555.21,686.965 1555.77,686.965 1556.33,686.965 1556.89,686.965 1557.45,686.965 1558,686.965 1558.56,686.965 1559.12,686.965 1559.68,686.965 1560.24,686.965 1560.8,686.965 1561.36,686.965 1561.92,686.965 1562.48,686.965 1563.04,686.965 1563.6,686.965 1564.16,686.965 1564.72,686.965 1565.28,686.965 1565.83,686.965 1566.39,686.965 1566.95,686.965 1567.51,686.965 1568.07,686.965 1568.63,686.965 1569.19,686.965 1569.75,686.965 1570.31,686.965 1570.87,686.965 1571.43,686.965 1571.99,686.965 1572.55,686.965 1573.1,686.965 1573.66,686.965 1574.22,686.965 1574.78,686.965 1575.34,686.965 1575.9,686.965 1576.46,686.965 1577.02,686.965 1577.58,686.965 1578.14,686.965 1578.7,686.965 1579.26,686.965 1579.82,686.965 1580.37,686.965 1580.93,686.965 1581.49,686.965 1582.05,686.965 1582.61,686.965 1583.17,686.965 1583.73,686.965 1584.29,686.965 1584.85,686.965 1585.41,686.965 1585.97,686.965 1586.53,686.965 1587.09,686.965 1587.65,686.965 1588.2,686.965 1588.76,686.965 1589.32,686.965 1589.88,686.965 1590.44,686.965 1591,686.965 1591.56,686.965 1592.12,686.965 1592.68,686.965 1593.24,686.965 1593.8,686.965 1594.36,686.965 1594.92,686.965 1595.47,686.965 1596.03,686.965 1596.59,686.965 1597.15,686.965 1597.71,686.965 1598.27,686.965 1598.83,686.965 1599.39,686.965 1599.95,686.965 1600.51,686.965 1601.07,686.965 1601.63,686.965 1602.19,686.965 1602.74,686.965 1603.3,686.965 1603.86,686.965 1604.42,686.965 1604.98,686.965 1605.54,686.965 1606.1,686.965 1606.66,686.965 1607.22,686.965 1607.78,686.965 1608.34,686.965 1608.9,686.965 1609.46,686.965 1610.02,686.965 1610.57,686.965 1611.13,686.965 1611.69,686.965 1612.25,686.965 1612.81,686.965 1613.37,686.965 1613.93,686.965 1614.49,686.965 1615.05,686.965 1615.61,686.965 1616.17,686.965 1616.73,686.965 1617.29,686.965 1617.84,686.965 1618.4,686.965 1618.96,686.965 1619.52,686.965 1620.08,686.965 1620.64,686.965 1621.2,686.965 1621.76,686.965 1622.32,686.965 1622.88,686.965 1623.44,686.965 1624,686.965 1624.56,686.965 1625.11,686.965 1625.67,686.965 1626.23,686.965 1626.79,686.965 1627.35,686.965 1627.91,686.965 1628.47,686.965 1629.03,686.965 1629.59,686.965 1630.15,686.965 1630.71,686.965 1631.27,686.965 1631.83,686.965 1632.39,686.965 1632.94,686.965 1633.5,686.965 1634.06,686.965 1634.62,686.965 1635.18,686.965 1635.74,686.965 1636.3,686.965 1636.86,686.965 1637.42,686.965 1637.98,686.965 1638.54,686.965 1639.1,686.965 1639.66,686.965 1640.21,686.965 1640.77,686.965 1641.33,686.965 1641.89,686.965 1642.45,686.965 1643.01,686.965 1643.57,686.965 1644.13,686.965 1644.69,686.965 1645.25,686.965 1645.81,686.965 1646.37,686.965 1646.93,686.965 1647.48,686.965 1648.04,686.965 1648.6,686.965 1649.16,686.965 1649.72,686.965 1650.28,686.965 1650.84,686.965 1651.4,686.965 1651.96,686.965 1652.52,686.965 1653.08,686.965 1653.64,686.965 1654.2,686.965 1654.76,686.965 1655.31,686.965 1655.87,686.965 1656.43,686.965 1656.99,686.965 1657.55,686.965 1658.11,686.965 1658.67,686.965 1659.23,686.965 1659.79,686.965 1660.35,686.965 1660.91,686.965 1661.47,686.965 1662.03,686.965 1662.58,686.965 1663.14,686.965 1663.7,686.965 1664.26,686.965 1664.82,686.965 1665.38,686.965 1665.94,686.965 1666.5,686.965 1667.06,686.965 1667.62,686.965 1668.18,686.965 1668.74,686.965 1669.3,686.965 1669.85,686.965 1670.41,686.965 1670.97,686.965 1671.53,686.965 1672.09,686.965 1672.65,686.965 1673.21,686.965 1673.77,686.965 1674.33,686.965 1674.89,686.965 1675.45,686.965 1676.01,686.965 1676.57,686.965 1677.13,686.965 1677.68,686.965 1678.24,686.965 1678.8,686.965 1679.36,686.965 1679.92,686.965 1680.48,686.965 1681.04,686.965 1681.6,686.965 1682.16,686.965 1682.72,686.965 1683.28,686.965 1683.84,686.965 1684.4,686.965 1684.95,686.965 1685.51,686.965 1686.07,686.965 1686.63,686.965 1687.19,686.965 1687.75,686.965 1688.31,686.965 1688.87,686.965 1689.43,686.965 1689.99,686.965 1690.55,686.965 1691.11,686.965 1691.67,686.965 1692.23,686.965 1692.78,686.965 1693.34,686.965 1693.9,686.965 1694.46,686.965 1695.02,686.965 1695.58,686.965 1696.14,686.965 1696.7,686.965 1697.26,686.965 1697.82,686.965 1698.38,686.965 1698.94,686.965 1699.5,686.965 1700.05,686.965 1700.61,686.965 1701.17,686.965 1701.73,686.965 1702.29,686.965 1702.85,686.965 1703.41,686.965 1703.97,686.965 1704.53,686.965 1705.09,686.965 1705.65,686.965 1706.21,686.965 1706.77,686.965 1707.32,686.965 1707.88,686.965 1708.44,686.965 1709,686.965 1709.56,686.965 1710.12,686.965 1710.68,686.965 1711.24,686.965 1711.8,686.965 1712.36,686.965 1712.92,686.965 1713.48,686.965 1714.04,686.965 1714.6,686.965 1715.15,686.965 1715.71,686.965 1716.27,686.965 1716.83,686.965 1717.39,686.965 1717.95,686.965 1718.51,686.965 1719.07,686.965 1719.63,686.965 1720.19,686.965 1720.75,686.965 1721.31,686.965 1721.87,686.965 1722.42,686.965 1722.98,686.965 1723.54,686.965 1724.1,686.965 1724.66,686.965 1725.22,686.965 1725.78,686.965 1726.34,686.965 1726.9,686.965 1727.46,686.965 1728.02,686.965 1728.58,686.965 1729.14,686.965 1729.69,686.965 1730.25,686.965 1730.81,686.965 1731.37,686.965 1731.93,686.965 1732.49,686.965 1733.05,686.965 1733.61,686.965 1734.17,686.965 1734.73,686.965 1735.29,686.965 1735.85,686.965 1736.41,686.965 1736.97,686.965 1737.52,686.965 1738.08,686.965 1738.64,686.965 1739.2,686.965 1739.76,686.965 1740.32,686.965 1740.88,686.965 1741.44,686.965 1742,686.965 1742.56,686.965 1743.12,686.965 1743.68,686.965 1744.24,686.965 1744.79,686.965 1745.35,686.965 1745.91,686.965 1746.47,686.965 1747.03,686.965 1747.59,686.965 1748.15,686.965 1748.71,686.965 1749.27,686.965 1749.83,686.965 1750.39,686.965 1750.95,686.965 1751.51,686.965 1752.06,686.965 1752.62,686.965 1753.18,686.965 1753.74,686.965 1754.3,686.965 1754.86,686.965 1755.42,686.965 1755.98,686.965 1756.54,686.965 1757.1,686.965 1757.66,686.965 1758.22,686.965 1758.78,686.965 1759.34,686.965 1759.89,686.965 1760.45,686.965 1761.01,686.965 1761.57,686.965 1762.13,686.965 1762.69,686.965 1763.25,686.965 1763.81,686.965 1764.37,686.965 1764.93,686.965 1765.49,686.965 1766.05,686.965 1766.61,686.965 1767.16,686.965 1767.72,686.965 1768.28,686.965 1768.84,686.965 1769.4,686.965 1769.96,686.965 1770.52,686.965 1771.08,686.965 1771.64,686.965 1772.2,686.965 1772.76,686.965 1773.32,686.965 1773.88,686.965 1774.43,686.965 1774.99,686.965 1775.55,686.965 1776.11,686.965 1776.67,686.965 1777.23,686.965 1777.79,686.965 1778.35,686.965 1778.91,686.965 1779.47,686.965 1780.03,686.965 1780.59,686.965 1781.15,686.965 1781.71,686.965 1782.26,686.965 1782.82,686.965 1783.38,686.965 1783.94,686.965 1784.5,686.965 1785.06,686.965 1785.62,686.965 1786.18,686.965 1786.74,686.965 1787.3,686.965 1787.86,686.965 1788.42,686.965 1788.98,686.965 1789.53,686.965 1790.09,686.965 1790.65,686.965 1791.21,686.965 1791.77,686.965 1792.33,686.965 1792.89,686.965 1793.45,686.965 1794.01,686.965 1794.57,686.965 1795.13,686.965 1795.69,686.965 1796.25,686.965 1796.8,686.965 1797.36,686.965 1797.92,686.965 1798.48,686.965 1799.04,686.965 1799.6,686.965 1800.16,686.965 1800.72,686.965 1801.28,686.965 1801.84,686.965 1802.4,686.965 1802.96,686.965 1803.52,686.965 1804.08,686.965 1804.63,686.965 1805.19,686.965 1805.75,686.965 1806.31,686.965 1806.87,686.965 1807.43,686.965 1807.99,686.965 1808.55,686.965 1809.11,686.965 1809.67,686.965 1810.23,686.965 1810.79,686.965 1811.35,686.965 1811.9,686.965 1812.46,686.965 1813.02,686.965 1813.58,686.965 1814.14,686.965 1814.7,686.965 1815.26,686.965 1815.82,686.965 1816.38,686.965 1816.94,686.965 1817.5,686.965 1818.06,686.965 1818.62,686.965 1819.18,686.965 1819.73,686.965 1820.29,686.965 1820.85,686.965 1821.41,686.965 1821.97,686.965 1822.53,686.965 1823.09,686.965 1823.65,686.965 1824.21,686.965 1824.77,686.965 1825.33,686.965 1825.89,686.965 1826.45,686.965 1827,686.965 1827.56,686.965 1828.12,686.965 1828.68,686.965 1829.24,686.965 1829.8,686.965 1830.36,686.965 1830.92,686.965 1831.48,686.965 1832.04,686.965 1832.6,686.965 1833.16,686.965 1833.72,686.965 1834.27,686.965 1834.83,686.965 1835.39,686.965 1835.95,686.965 1836.51,686.965 1837.07,686.965 1837.63,686.965 1838.19,686.965 \"/>\n<path clip-path=\"url(#clip973)\" d=\"M720.247 685.498 L720.806 685.498 L721.365 685.498 L721.924 685.498 L722.484 685.498 L723.043 685.498 L723.602 685.498 L724.161 685.498 L724.721 685.498 L725.28 685.498 L725.839 685.498 L726.398 685.498 L726.958 685.498 L727.517 685.498 L728.076 685.498 L728.635 685.498 L729.195 685.498 L729.754 685.498 L730.313 685.498 L730.872 685.498 L731.432 685.498 L731.991 685.498 L732.55 685.498 L733.109 685.498 L733.669 685.498 L734.228 685.498 L734.787 685.498 L735.346 685.498 L735.906 685.498 L736.465 685.498 L737.024 685.498 L737.583 685.498 L738.143 685.498 L738.702 685.498 L739.261 685.498 L739.82 685.498 L740.38 685.498 L740.939 685.498 L741.498 685.498 L742.057 685.498 L742.617 685.498 L743.176 685.498 L743.735 685.498 L744.294 685.498 L744.854 685.498 L745.413 685.498 L745.972 685.498 L746.531 685.498 L747.091 685.498 L747.65 685.498 L748.209 685.498 L748.768 685.498 L749.328 685.498 L749.887 685.498 L750.446 685.498 L751.005 685.498 L751.565 685.498 L752.124 685.498 L752.683 685.498 L753.242 685.498 L753.802 685.498 L754.361 685.498 L754.92 685.498 L755.479 685.498 L756.039 685.498 L756.598 685.498 L757.157 685.498 L757.716 685.498 L758.276 685.498 L758.835 685.498 L759.394 685.498 L759.953 685.498 L760.513 685.498 L761.072 685.498 L761.631 685.498 L762.19 685.498 L762.75 685.498 L763.309 685.498 L763.868 685.498 L764.427 685.498 L764.987 685.498 L765.546 685.498 L766.105 685.498 L766.664 685.498 L767.224 685.498 L767.783 685.498 L768.342 685.498 L768.901 685.498 L769.461 685.498 L770.02 685.498 L770.579 685.498 L771.138 685.498 L771.698 685.498 L772.257 685.498 L772.816 685.498 L773.375 685.498 L773.935 685.498 L774.494 685.498 L775.053 685.498 L775.612 685.498 L776.172 685.498 L776.731 685.498 L777.29 685.498 L777.849 685.498 L778.409 685.498 L778.968 685.498 L779.527 685.498 L780.086 685.498 L780.646 685.498 L781.205 685.498 L781.764 685.498 L782.323 685.498 L782.883 685.498 L783.442 685.498 L784.001 685.498 L784.56 685.498 L785.12 685.498 L785.679 685.498 L786.238 685.498 L786.797 685.498 L787.357 685.498 L787.916 685.498 L788.475 685.498 L789.034 685.498 L789.594 685.498 L790.153 685.498 L790.712 685.498 L791.271 685.498 L791.831 685.498 L792.39 685.498 L792.949 685.498 L793.508 685.498 L794.068 685.498 L794.627 685.498 L795.186 685.498 L795.745 685.498 L796.305 685.498 L796.864 685.498 L797.423 685.498 L797.982 685.498 L798.542 685.498 L799.101 685.498 L799.66 685.498 L800.219 685.498 L800.779 685.498 L801.338 685.498 L801.897 685.498 L802.456 685.498 L803.016 685.498 L803.575 685.498 L804.134 685.498 L804.693 685.498 L805.253 685.498 L805.812 685.498 L806.371 685.498 L806.931 685.498 L807.49 685.498 L808.049 685.498 L808.608 685.498 L809.168 685.498 L809.727 685.498 L810.286 685.498 L810.845 685.498 L811.405 685.498 L811.964 685.498 L812.523 685.498 L813.082 685.498 L813.642 685.498 L814.201 685.498 L814.76 685.498 L815.319 685.498 L815.879 685.498 L816.438 685.498 L816.997 685.498 L817.556 685.498 L818.116 685.498 L818.675 685.498 L819.234 685.498 L819.793 685.498 L820.353 685.498 L820.912 685.498 L821.471 685.498 L822.03 685.498 L822.59 685.498 L823.149 685.498 L823.708 685.498 L824.267 685.498 L824.827 685.498 L825.386 685.498 L825.945 685.498 L826.504 685.498 L827.064 685.498 L827.623 685.498 L828.182 685.498 L828.741 685.498 L829.301 685.498 L829.86 685.498 L830.419 685.498 L830.978 685.498 L831.538 685.498 L832.097 685.498 L832.656 685.498 L833.215 685.498 L833.775 685.498 L834.334 685.498 L834.893 685.498 L835.452 685.498 L836.012 685.498 L836.571 685.498 L837.13 685.498 L837.689 685.498 L838.249 685.498 L838.808 685.498 L839.367 685.498 L839.926 685.498 L840.486 685.498 L841.045 685.498 L841.604 685.498 L842.163 685.498 L842.723 685.498 L843.282 685.498 L843.841 685.498 L844.4 685.498 L844.96 685.498 L845.519 685.498 L846.078 685.498 L846.637 685.498 L847.197 685.498 L847.756 685.498 L848.315 685.498 L848.874 685.498 L849.434 685.498 L849.993 685.498 L850.552 685.498 L851.111 685.498 L851.671 685.498 L852.23 685.498 L852.789 685.498 L853.348 685.498 L853.908 685.498 L854.467 685.498 L855.026 685.498 L855.585 685.498 L856.145 685.498 L856.704 685.498 L857.263 685.498 L857.822 685.498 L858.382 685.498 L858.941 685.498 L859.5 685.498 L860.059 685.498 L860.619 685.498 L861.178 685.498 L861.737 685.498 L862.296 685.498 L862.856 685.498 L863.415 685.498 L863.974 685.498 L864.533 685.498 L865.093 685.498 L865.652 685.498 L866.211 685.498 L866.77 685.498 L867.33 685.498 L867.889 685.498 L868.448 685.498 L869.007 685.498 L869.567 685.498 L870.126 685.498 L870.685 685.498 L871.244 685.498 L871.804 685.498 L872.363 685.498 L872.922 685.498 L873.481 685.498 L874.041 685.498 L874.6 685.498 L875.159 685.498 L875.718 685.498 L876.278 685.498 L876.837 685.498 L877.396 685.498 L877.955 685.498 L878.515 685.498 L879.074 685.498 L879.633 685.498 L880.192 685.498 L880.752 685.498 L881.311 685.498 L881.87 685.498 L882.429 685.498 L882.989 685.498 L883.548 685.498 L884.107 685.498 L884.666 685.498 L885.226 685.498 L885.785 685.498 L886.344 685.498 L886.903 685.498 L887.463 685.498 L888.022 685.498 L888.581 685.498 L889.14 685.498 L889.7 685.498 L890.259 685.498 L890.818 685.498 L891.377 685.498 L891.937 685.498 L892.496 685.498 L893.055 685.498 L893.614 685.498 L894.174 685.498 L894.733 685.498 L895.292 685.498 L895.851 685.498 L896.411 685.498 L896.97 685.498 L897.529 685.498 L898.088 685.498 L898.648 685.498 L899.207 685.498 L899.766 685.498 L900.325 685.498 L900.885 685.498 L901.444 685.498 L902.003 685.498 L902.562 685.498 L903.122 685.498 L903.681 685.498 L904.24 685.498 L904.799 685.498 L905.359 685.498 L905.918 685.498 L906.477 685.498 L907.036 685.498 L907.596 685.498 L908.155 685.498 L908.714 685.498 L909.273 685.498 L909.833 685.498 L910.392 685.498 L910.951 685.498 L911.51 685.498 L912.07 685.498 L912.629 685.498 L913.188 685.498 L913.747 685.498 L914.307 685.498 L914.866 685.498 L915.425 685.498 L915.984 685.498 L916.544 685.498 L917.103 685.498 L917.662 685.498 L918.221 685.498 L918.781 685.498 L919.34 685.498 L919.899 685.498 L920.458 685.498 L921.018 685.498 L921.577 685.498 L922.136 685.498 L922.695 685.498 L923.255 685.498 L923.814 685.498 L924.373 685.498 L924.932 685.498 L925.492 685.498 L926.051 685.498 L926.61 685.498 L927.169 685.498 L927.729 685.498 L928.288 685.498 L928.847 685.498 L929.406 685.498 L929.966 685.498 L930.525 685.498 L931.084 685.498 L931.644 685.498 L932.203 685.498 L932.762 685.498 L933.321 685.498 L933.881 685.498 L934.44 685.498 L934.999 685.498 L935.558 685.498 L936.118 685.498 L936.677 685.498 L937.236 685.498 L937.795 685.498 L938.355 685.498 L938.914 685.498 L939.473 685.498 L940.032 685.498 L940.592 685.498 L941.151 685.498 L941.71 685.498 L942.269 685.498 L942.829 685.498 L943.388 685.498 L943.947 685.498 L944.506 685.498 L945.066 685.498 L945.625 685.498 L946.184 685.498 L946.743 685.498 L947.303 685.498 L947.862 685.498 L948.421 685.498 L948.98 685.498 L949.54 685.498 L950.099 685.498 L950.658 685.498 L951.217 685.498 L951.777 685.498 L952.336 685.498 L952.895 685.498 L953.454 685.498 L954.014 685.498 L954.573 685.498 L955.132 685.498 L955.691 685.498 L956.251 685.498 L956.81 685.498 L957.369 685.498 L957.928 685.498 L958.488 685.498 L959.047 685.498 L959.606 685.498 L960.165 685.498 L960.725 685.498 L961.284 685.498 L961.843 685.498 L962.402 685.498 L962.962 685.498 L963.521 685.498 L964.08 685.498 L964.639 685.498 L965.199 685.498 L965.758 685.498 L966.317 685.498 L966.876 685.498 L967.436 685.498 L967.995 685.498 L968.554 685.498 L969.113 685.498 L969.673 685.498 L970.232 685.498 L970.791 685.498 L971.35 685.498 L971.91 685.498 L972.469 685.498 L973.028 685.498 L973.587 685.498 L974.147 685.498 L974.706 685.498 L975.265 685.498 L975.824 685.498 L976.384 685.498 L976.943 685.498 L977.502 685.498 L978.061 685.498 L978.621 685.498 L979.18 685.498 L979.739 685.498 L980.298 685.498 L980.858 685.498 L981.417 685.498 L981.976 685.498 L982.535 685.498 L983.095 685.498 L983.654 685.498 L984.213 685.498 L984.772 685.498 L985.332 685.498 L985.891 685.498 L986.45 685.498 L987.009 685.498 L987.569 685.498 L988.128 685.498 L988.687 685.498 L989.246 685.498 L989.806 685.498 L990.365 685.498 L990.924 685.498 L991.483 685.498 L992.043 685.498 L992.602 685.498 L993.161 685.498 L993.72 685.498 L994.28 685.498 L994.839 685.498 L995.398 685.498 L995.957 685.498 L996.517 685.498 L997.076 685.498 L997.635 685.498 L998.194 685.498 L998.754 685.498 L999.313 685.498 L999.872 685.498 L1000.43 685.498 L1000.99 685.498 L1001.55 685.498 L1002.11 685.498 L1002.67 685.498 L1003.23 685.498 L1003.79 685.498 L1004.35 685.498 L1004.91 685.498 L1005.46 685.498 L1006.02 685.498 L1006.58 685.498 L1007.14 685.498 L1007.7 685.498 L1008.26 685.498 L1008.82 685.498 L1009.38 685.498 L1009.94 685.498 L1010.5 685.498 L1011.06 685.498 L1011.62 685.498 L1012.18 685.498 L1012.73 685.498 L1013.29 685.498 L1013.85 685.498 L1014.41 685.498 L1014.97 685.498 L1015.53 685.498 L1016.09 685.498 L1016.65 685.498 L1017.21 685.498 L1017.77 685.498 L1018.33 685.498 L1018.89 685.498 L1019.45 685.498 L1020.01 685.498 L1020.56 685.498 L1021.12 685.498 L1021.68 685.498 L1022.24 685.498 L1022.8 685.498 L1023.36 685.498 L1023.92 685.498 L1024.48 685.498 L1025.04 685.498 L1025.6 685.498 L1026.16 685.498 L1026.72 685.498 L1027.28 685.498 L1027.83 685.498 L1028.39 685.498 L1028.95 685.498 L1029.51 685.498 L1030.07 685.498 L1030.63 685.498 L1031.19 685.498 L1031.75 685.498 L1032.31 685.498 L1032.87 685.498 L1033.43 685.498 L1033.99 685.498 L1034.55 685.498 L1035.1 685.498 L1035.66 685.498 L1036.22 685.498 L1036.78 685.498 L1037.34 685.498 L1037.9 685.498 L1038.46 685.498 L1039.02 685.498 L1039.58 685.498 L1040.14 685.498 L1040.7 685.498 L1041.26 685.498 L1041.82 685.498 L1042.38 685.498 L1042.93 685.498 L1043.49 685.498 L1044.05 685.498 L1044.61 685.498 L1045.17 685.498 L1045.73 685.498 L1046.29 685.498 L1046.85 685.498 L1047.41 685.498 L1047.97 685.498 L1048.53 685.498 L1049.09 685.498 L1049.65 685.498 L1050.2 685.498 L1050.76 685.498 L1051.32 685.498 L1051.88 685.498 L1052.44 685.498 L1053 685.498 L1053.56 685.498 L1054.12 685.498 L1054.68 685.498 L1055.24 685.498 L1055.8 685.498 L1056.36 685.498 L1056.92 685.498 L1057.48 685.498 L1058.03 685.498 L1058.59 685.498 L1059.15 685.498 L1059.71 685.498 L1060.27 685.498 L1060.83 685.498 L1061.39 685.498 L1061.95 685.498 L1062.51 685.498 L1063.07 685.498 L1063.63 685.498 L1064.19 685.498 L1064.75 685.498 L1065.3 685.498 L1065.86 685.498 L1066.42 685.498 L1066.98 685.498 L1067.54 685.498 L1068.1 685.498 L1068.66 685.498 L1069.22 685.498 L1069.78 685.498 L1070.34 685.498 L1070.9 685.498 L1071.46 685.498 L1072.02 685.498 L1072.57 685.498 L1073.13 685.498 L1073.69 685.498 L1074.25 685.498 L1074.81 685.498 L1075.37 685.498 L1075.93 685.498 L1076.49 685.498 L1077.05 685.498 L1077.61 685.498 L1078.17 685.498 L1078.73 685.498 L1079.29 685.498 L1079.85 685.498 L1080.4 685.498 L1080.96 685.498 L1081.52 685.498 L1082.08 685.498 L1082.64 685.498 L1083.2 685.498 L1083.76 685.498 L1084.32 685.498 L1084.88 685.498 L1085.44 685.498 L1086 685.498 L1086.56 685.498 L1087.12 685.498 L1087.67 685.498 L1088.23 685.498 L1088.79 685.498 L1089.35 685.498 L1089.91 685.498 L1090.47 685.498 L1091.03 685.498 L1091.59 685.498 L1092.15 685.498 L1092.71 685.498 L1093.27 685.498 L1093.83 685.498 L1094.39 685.498 L1094.94 685.498 L1095.5 685.498 L1096.06 685.498 L1096.62 685.498 L1097.18 685.498 L1097.74 685.498 L1098.3 685.498 L1098.86 685.498 L1099.42 685.498 L1099.98 685.498 L1100.54 685.498 L1101.1 685.498 L1101.66 685.498 L1102.22 685.498 L1102.77 685.498 L1103.33 685.498 L1103.89 685.498 L1104.45 685.498 L1105.01 685.498 L1105.57 685.498 L1106.13 685.498 L1106.69 685.498 L1107.25 685.498 L1107.81 685.498 L1108.37 685.498 L1108.93 685.498 L1109.49 685.498 L1110.04 685.498 L1110.6 685.498 L1111.16 685.498 L1111.72 685.498 L1112.28 685.498 L1112.84 685.498 L1113.4 685.498 L1113.96 685.498 L1114.52 685.498 L1115.08 685.498 L1115.64 685.498 L1116.2 685.498 L1116.76 685.498 L1117.31 685.498 L1117.87 685.498 L1118.43 685.498 L1118.99 685.498 L1119.55 685.498 L1120.11 685.498 L1120.67 685.498 L1121.23 685.498 L1121.79 685.498 L1122.35 685.498 L1122.91 685.498 L1123.47 685.498 L1124.03 685.498 L1124.59 685.498 L1125.14 685.498 L1125.7 685.498 L1126.26 685.498 L1126.82 685.498 L1127.38 685.498 L1127.94 685.498 L1128.5 685.498 L1129.06 685.498 L1129.62 685.498 L1130.18 685.498 L1130.74 685.498 L1131.3 685.498 L1131.86 685.498 L1132.41 685.498 L1132.97 685.498 L1133.53 685.498 L1134.09 685.498 L1134.65 685.498 L1135.21 685.498 L1135.77 685.498 L1136.33 685.498 L1136.89 685.498 L1137.45 685.498 L1138.01 685.498 L1138.57 685.498 L1139.13 685.498 L1139.68 685.498 L1140.24 685.498 L1140.8 685.498 L1141.36 685.498 L1141.92 685.498 L1142.48 685.498 L1143.04 685.498 L1143.6 685.498 L1144.16 685.498 L1144.72 685.498 L1145.28 685.498 L1145.84 685.498 L1146.4 685.498 L1146.96 685.498 L1147.51 685.498 L1148.07 685.498 L1148.63 685.498 L1149.19 685.498 L1149.75 685.498 L1150.31 685.498 L1150.87 685.498 L1151.43 685.498 L1151.99 685.498 L1152.55 685.498 L1153.11 685.498 L1153.67 685.498 L1154.23 685.498 L1154.78 685.498 L1155.34 685.498 L1155.9 685.498 L1156.46 685.498 L1157.02 685.498 L1157.58 685.498 L1158.14 685.498 L1158.7 685.498 L1159.26 685.498 L1159.82 685.498 L1160.38 685.498 L1160.94 685.498 L1161.5 685.498 L1162.05 685.498 L1162.61 685.498 L1163.17 685.498 L1163.73 685.498 L1164.29 685.498 L1164.85 685.498 L1165.41 685.498 L1165.97 685.498 L1166.53 685.498 L1167.09 685.498 L1167.65 685.498 L1168.21 685.498 L1168.77 685.498 L1169.33 685.498 L1169.88 685.498 L1170.44 685.498 L1171 685.498 L1171.56 685.498 L1172.12 685.498 L1172.68 685.498 L1173.24 685.498 L1173.8 685.498 L1174.36 685.498 L1174.92 685.498 L1175.48 685.498 L1176.04 685.498 L1176.6 685.498 L1177.15 685.498 L1177.71 685.498 L1178.27 685.498 L1178.83 685.498 L1179.39 685.498 L1179.95 685.498 L1180.51 685.498 L1181.07 685.498 L1181.63 685.498 L1182.19 685.498 L1182.75 685.498 L1183.31 685.498 L1183.87 685.498 L1184.43 685.498 L1184.98 685.498 L1185.54 685.498 L1186.1 685.498 L1186.66 685.498 L1187.22 685.498 L1187.78 685.498 L1188.34 685.498 L1188.9 685.498 L1189.46 685.498 L1190.02 685.498 L1190.58 685.498 L1191.14 685.498 L1191.7 685.498 L1192.25 685.498 L1192.81 685.498 L1193.37 685.498 L1193.93 685.498 L1194.49 685.498 L1195.05 685.498 L1195.61 685.498 L1196.17 685.498 L1196.73 685.498 L1197.29 685.498 L1197.85 685.498 L1198.41 685.498 L1198.97 685.498 L1199.52 685.498 L1200.08 685.498 L1200.64 685.498 L1201.2 685.498 L1201.76 685.498 L1202.32 685.498 L1202.88 685.498 L1203.44 685.498 L1204 685.498 L1204.56 685.498 L1205.12 685.498 L1205.68 685.498 L1206.24 685.498 L1206.8 685.498 L1207.35 685.498 L1207.91 685.498 L1208.47 685.498 L1209.03 685.498 L1209.59 685.498 L1210.15 685.498 L1210.71 685.498 L1211.27 685.498 L1211.83 685.498 L1212.39 685.498 L1212.95 685.498 L1213.51 685.498 L1214.07 685.498 L1214.62 685.498 L1215.18 685.498 L1215.74 685.498 L1216.3 685.498 L1216.86 685.498 L1217.42 685.498 L1217.98 685.498 L1218.54 685.498 L1219.1 685.498 L1219.66 685.498 L1220.22 685.498 L1220.78 685.498 L1221.34 685.498 L1221.89 685.498 L1222.45 685.498 L1223.01 685.498 L1223.57 685.498 L1224.13 685.498 L1224.69 685.498 L1225.25 685.498 L1225.81 685.498 L1226.37 685.498 L1226.93 685.498 L1227.49 685.498 L1228.05 685.498 L1228.61 685.498 L1229.17 685.498 L1229.72 685.498 L1230.28 685.498 L1230.84 685.498 L1231.4 685.498 L1231.96 685.498 L1232.52 685.498 L1233.08 685.498 L1233.64 685.498 L1234.2 685.498 L1234.76 685.498 L1235.32 685.498 L1235.88 685.498 L1236.44 685.498 L1236.99 685.498 L1237.55 685.498 L1238.11 685.498 L1238.67 685.498 L1239.23 685.498 L1239.79 685.498 L1240.35 685.498 L1240.91 685.498 L1241.47 685.498 L1242.03 685.498 L1242.59 685.498 L1243.15 685.498 L1243.71 685.498 L1244.26 685.498 L1244.82 685.498 L1245.38 685.498 L1245.94 685.498 L1246.5 685.498 L1247.06 685.498 L1247.62 685.498 L1248.18 685.498 L1248.74 685.498 L1249.3 685.498 L1249.86 685.498 L1250.42 685.498 L1250.98 685.498 L1251.54 685.498 L1252.09 685.498 L1252.65 685.498 L1253.21 685.498 L1253.77 685.498 L1254.33 685.498 L1254.89 685.498 L1255.45 685.498 L1256.01 685.498 L1256.57 685.498 L1257.13 685.498 L1257.69 685.498 L1258.25 685.498 L1258.81 685.498 L1259.36 685.498 L1259.92 685.498 L1260.48 685.498 L1261.04 685.498 L1261.6 685.498 L1262.16 685.498 L1262.72 685.498 L1263.28 685.498 L1263.84 685.498 L1264.4 685.498 L1264.96 685.498 L1265.52 685.498 L1266.08 685.498 L1266.63 685.498 L1267.19 685.498 L1267.75 685.498 L1268.31 685.498 L1268.87 685.498 L1269.43 685.498 L1269.99 685.498 L1270.55 685.498 L1271.11 685.498 L1271.67 685.498 L1272.23 685.498 L1272.79 685.498 L1273.35 685.498 L1273.91 685.498 L1274.46 685.498 L1275.02 685.498 L1275.58 685.498 L1276.14 685.498 L1276.7 685.498 L1277.26 685.498 L1277.82 685.498 L1278.38 685.498 L1278.94 685.498 L1279.5 685.498 L1280.06 685.498 L1280.62 685.498 L1281.18 685.498 L1281.73 685.498 L1282.29 685.498 L1282.85 685.498 L1283.41 685.498 L1283.97 685.498 L1284.53 685.498 L1285.09 685.498 L1285.65 685.498 L1286.21 685.498 L1286.77 685.498 L1287.33 685.498 L1287.89 685.498 L1288.45 685.498 L1289 685.498 L1289.56 685.498 L1290.12 685.498 L1290.68 685.498 L1291.24 685.498 L1291.8 685.498 L1292.36 685.498 L1292.92 685.498 L1293.48 685.498 L1294.04 685.498 L1294.6 685.498 L1295.16 685.498 L1295.72 685.498 L1296.28 685.498 L1296.83 685.498 L1297.39 685.498 L1297.95 685.498 L1298.51 685.498 L1299.07 685.498 L1299.63 685.498 L1300.19 685.498 L1300.75 685.498 L1301.31 685.498 L1301.87 685.498 L1302.43 685.498 L1302.99 685.498 L1303.55 685.498 L1304.1 685.498 L1304.66 685.498 L1305.22 685.498 L1305.78 685.498 L1306.34 685.498 L1306.9 685.498 L1307.46 685.498 L1308.02 685.498 L1308.58 685.498 L1309.14 685.498 L1309.7 685.498 L1310.26 685.498 L1310.82 685.498 L1311.38 685.498 L1311.93 685.498 L1312.49 685.498 L1313.05 685.498 L1313.61 685.498 L1314.17 685.498 L1314.73 685.498 L1315.29 685.498 L1315.85 685.498 L1316.41 685.498 L1316.97 685.498 L1317.53 685.498 L1318.09 685.498 L1318.65 685.498 L1319.2 685.498 L1319.76 685.498 L1320.32 685.498 L1320.88 685.498 L1321.44 685.498 L1322 685.498 L1322.56 685.498 L1323.12 685.498 L1323.68 685.498 L1324.24 685.498 L1324.8 685.498 L1325.36 685.498 L1325.92 685.498 L1326.47 685.498 L1327.03 685.498 L1327.59 685.498 L1328.15 685.498 L1328.71 685.498 L1329.27 685.498 L1329.83 685.498 L1330.39 685.498 L1330.95 685.498 L1331.51 685.498 L1332.07 685.498 L1332.63 685.498 L1333.19 685.498 L1333.75 685.498 L1334.3 685.498 L1334.86 685.498 L1335.42 685.498 L1335.98 685.498 L1336.54 685.498 L1337.1 685.498 L1337.66 685.498 L1338.22 685.498 L1338.78 685.498 L1339.34 685.498 L1339.9 685.498 L1340.46 685.498 L1341.02 685.498 L1341.57 685.498 L1342.13 685.498 L1342.69 685.498 L1343.25 685.498 L1343.81 685.498 L1344.37 685.498 L1344.93 685.498 L1345.49 685.498 L1346.05 685.498 L1346.61 685.498 L1347.17 685.498 L1347.73 685.498 L1348.29 685.498 L1348.84 685.498 L1349.4 685.498 L1349.96 685.498 L1350.52 685.498 L1351.08 685.498 L1351.64 685.498 L1352.2 685.498 L1352.76 685.498 L1353.32 685.498 L1353.88 685.498 L1354.44 685.498 L1355 685.498 L1355.56 685.498 L1356.12 685.498 L1356.67 685.498 L1357.23 685.498 L1357.79 685.498 L1358.35 685.498 L1358.91 685.498 L1359.47 685.498 L1360.03 685.498 L1360.59 685.498 L1361.15 685.498 L1361.71 685.498 L1362.27 685.498 L1362.83 685.498 L1363.39 685.498 L1363.94 685.498 L1364.5 685.498 L1365.06 685.498 L1365.62 685.498 L1366.18 685.498 L1366.74 685.498 L1367.3 685.498 L1367.86 685.498 L1368.42 685.498 L1368.98 685.498 L1369.54 685.498 L1370.1 685.498 L1370.66 685.498 L1371.21 685.498 L1371.77 685.498 L1372.33 685.498 L1372.89 685.498 L1373.45 685.498 L1374.01 685.498 L1374.57 685.498 L1375.13 685.498 L1375.69 685.498 L1376.25 685.498 L1376.81 685.498 L1377.37 685.498 L1377.93 685.498 L1378.49 685.498 L1379.04 685.498 L1379.6 685.498 L1380.16 685.498 L1380.72 685.498 L1381.28 685.498 L1381.84 685.498 L1382.4 685.498 L1382.96 685.498 L1383.52 685.498 L1384.08 685.498 L1384.64 685.498 L1385.2 685.498 L1385.76 685.498 L1386.31 685.498 L1386.87 685.498 L1387.43 685.498 L1387.99 685.498 L1388.55 685.498 L1389.11 685.498 L1389.67 685.498 L1390.23 685.498 L1390.79 685.498 L1391.35 685.498 L1391.91 685.498 L1392.47 685.498 L1393.03 685.498 L1393.58 685.498 L1394.14 685.498 L1394.7 685.498 L1395.26 685.498 L1395.82 685.498 L1396.38 685.498 L1396.94 685.498 L1397.5 685.498 L1398.06 685.498 L1398.62 685.498 L1399.18 685.498 L1399.74 685.498 L1400.3 685.498 L1400.86 685.498 L1401.41 685.498 L1401.97 685.498 L1402.53 685.498 L1403.09 685.498 L1403.65 685.498 L1404.21 685.498 L1404.77 685.498 L1405.33 685.498 L1405.89 685.498 L1406.45 685.498 L1407.01 685.498 L1407.57 685.498 L1408.13 685.498 L1408.68 685.498 L1409.24 685.498 L1409.8 685.498 L1410.36 685.498 L1410.92 685.498 L1411.48 685.498 L1412.04 685.498 L1412.6 685.498 L1413.16 685.498 L1413.72 685.498 L1414.28 685.498 L1414.84 685.498 L1415.4 685.498 L1415.95 685.498 L1416.51 685.498 L1417.07 685.498 L1417.63 685.498 L1418.19 685.498 L1418.75 685.498 L1419.31 685.498 L1419.87 685.498 L1420.43 685.498 L1420.99 685.498 L1421.55 685.498 L1422.11 685.498 L1422.67 685.498 L1423.23 685.498 L1423.78 685.498 L1424.34 685.498 L1424.9 685.498 L1425.46 685.498 L1426.02 685.498 L1426.58 685.498 L1427.14 685.498 L1427.7 685.498 L1428.26 685.498 L1428.82 685.498 L1429.38 685.498 L1429.94 685.498 L1430.5 685.498 L1431.05 685.498 L1431.61 685.498 L1432.17 685.498 L1432.73 685.498 L1433.29 685.498 L1433.85 685.498 L1434.41 685.498 L1434.97 685.498 L1435.53 685.498 L1436.09 685.498 L1436.65 685.498 L1437.21 685.498 L1437.77 685.498 L1438.33 685.498 L1438.88 685.498 L1439.44 685.498 L1440 685.498 L1440.56 685.498 L1441.12 685.498 L1441.68 685.498 L1442.24 685.498 L1442.8 685.498 L1443.36 685.498 L1443.92 685.498 L1444.48 685.498 L1445.04 685.498 L1445.6 685.498 L1446.15 685.498 L1446.71 685.498 L1447.27 685.498 L1447.83 685.498 L1448.39 685.498 L1448.95 685.498 L1449.51 685.498 L1450.07 685.498 L1450.63 685.498 L1451.19 685.498 L1451.75 685.498 L1452.31 685.498 L1452.87 685.498 L1453.42 685.498 L1453.98 685.498 L1454.54 685.498 L1455.1 685.498 L1455.66 685.498 L1456.22 685.498 L1456.78 685.498 L1457.34 685.498 L1457.9 685.498 L1458.46 685.498 L1459.02 685.498 L1459.58 685.498 L1460.14 685.498 L1460.7 685.498 L1461.25 685.498 L1461.81 685.498 L1462.37 685.498 L1462.93 685.498 L1463.49 685.498 L1464.05 685.498 L1464.61 685.498 L1465.17 685.498 L1465.73 685.498 L1466.29 685.498 L1466.85 685.498 L1467.41 685.498 L1467.97 685.498 L1468.52 685.498 L1469.08 685.498 L1469.64 685.498 L1470.2 685.498 L1470.76 685.498 L1471.32 685.498 L1471.88 685.498 L1472.44 685.498 L1473 685.498 L1473.56 685.498 L1474.12 685.498 L1474.68 685.498 L1475.24 685.498 L1475.79 685.498 L1476.35 685.498 L1476.91 685.498 L1477.47 685.498 L1478.03 685.498 L1478.59 685.498 L1479.15 685.498 L1479.71 685.498 L1480.27 685.498 L1480.83 685.498 L1481.39 685.498 L1481.95 685.498 L1482.51 685.498 L1483.07 685.498 L1483.62 685.498 L1484.18 685.498 L1484.74 685.498 L1485.3 685.498 L1485.86 685.498 L1486.42 685.498 L1486.98 685.498 L1487.54 685.498 L1488.1 685.498 L1488.66 685.498 L1489.22 685.498 L1489.78 685.498 L1490.34 685.498 L1490.89 685.498 L1491.45 685.498 L1492.01 685.498 L1492.57 685.498 L1493.13 685.498 L1493.69 685.498 L1494.25 685.498 L1494.81 685.498 L1495.37 685.498 L1495.93 685.498 L1496.49 685.498 L1497.05 685.498 L1497.61 685.498 L1498.16 685.498 L1498.72 685.498 L1499.28 685.498 L1499.84 685.498 L1500.4 685.498 L1500.96 685.498 L1501.52 685.498 L1502.08 685.498 L1502.64 685.498 L1503.2 685.498 L1503.76 685.498 L1504.32 685.498 L1504.88 685.498 L1505.44 685.498 L1505.99 685.498 L1506.55 685.498 L1507.11 685.498 L1507.67 685.498 L1508.23 685.498 L1508.79 685.498 L1509.35 685.498 L1509.91 685.498 L1510.47 685.498 L1511.03 685.498 L1511.59 685.498 L1512.15 685.498 L1512.71 685.498 L1513.26 685.498 L1513.82 685.498 L1514.38 685.498 L1514.94 685.498 L1515.5 685.498 L1516.06 685.498 L1516.62 685.498 L1517.18 685.498 L1517.74 685.498 L1518.3 685.498 L1518.86 685.498 L1519.42 685.498 L1519.98 685.498 L1520.53 685.498 L1521.09 685.498 L1521.65 685.498 L1522.21 685.498 L1522.77 685.498 L1523.33 685.498 L1523.89 685.498 L1524.45 685.498 L1525.01 685.498 L1525.57 685.498 L1526.13 685.498 L1526.69 685.498 L1527.25 685.498 L1527.81 685.498 L1528.36 685.498 L1528.92 685.498 L1529.48 685.498 L1530.04 685.498 L1530.6 685.498 L1531.16 685.498 L1531.72 685.498 L1532.28 685.498 L1532.84 685.498 L1533.4 685.498 L1533.96 685.498 L1534.52 685.498 L1535.08 685.498 L1535.63 685.498 L1536.19 685.498 L1536.75 685.498 L1537.31 685.498 L1537.87 685.498 L1538.43 685.498 L1538.99 685.498 L1539.55 685.498 L1540.11 685.498 L1540.67 685.498 L1541.23 685.498 L1541.79 685.498 L1542.35 685.498 L1542.9 685.498 L1543.46 685.498 L1544.02 685.498 L1544.58 685.498 L1545.14 685.498 L1545.7 685.498 L1546.26 685.498 L1546.82 685.498 L1547.38 685.498 L1547.94 685.498 L1548.5 685.498 L1549.06 685.498 L1549.62 685.498 L1550.18 685.498 L1550.73 685.498 L1551.29 685.498 L1551.85 685.498 L1552.41 685.498 L1552.97 685.498 L1553.53 685.498 L1554.09 685.498 L1554.65 685.498 L1555.21 685.498 L1555.77 685.498 L1556.33 685.498 L1556.89 685.498 L1557.45 685.498 L1558 685.498 L1558.56 685.498 L1559.12 685.498 L1559.68 685.498 L1560.24 685.498 L1560.8 685.498 L1561.36 685.498 L1561.92 685.498 L1562.48 685.498 L1563.04 685.498 L1563.6 685.498 L1564.16 685.498 L1564.72 685.498 L1565.28 685.498 L1565.83 685.498 L1566.39 685.498 L1566.95 685.498 L1567.51 685.498 L1568.07 685.498 L1568.63 685.498 L1569.19 685.498 L1569.75 685.498 L1570.31 685.498 L1570.87 685.498 L1571.43 685.498 L1571.99 685.498 L1572.55 685.498 L1573.1 685.498 L1573.66 685.498 L1574.22 685.498 L1574.78 685.498 L1575.34 685.498 L1575.9 685.498 L1576.46 685.498 L1577.02 685.498 L1577.58 685.498 L1578.14 685.498 L1578.7 685.498 L1579.26 685.498 L1579.82 685.498 L1580.37 685.498 L1580.93 685.498 L1581.49 685.498 L1582.05 685.498 L1582.61 685.498 L1583.17 685.498 L1583.73 685.498 L1584.29 685.498 L1584.85 685.498 L1585.41 685.498 L1585.97 685.498 L1586.53 685.498 L1587.09 685.498 L1587.65 685.498 L1588.2 685.498 L1588.76 685.498 L1589.32 685.498 L1589.88 685.498 L1590.44 685.498 L1591 685.498 L1591.56 685.498 L1592.12 685.498 L1592.68 685.498 L1593.24 685.498 L1593.8 685.498 L1594.36 685.498 L1594.92 685.498 L1595.47 685.498 L1596.03 685.498 L1596.59 685.498 L1597.15 685.498 L1597.71 685.498 L1598.27 685.498 L1598.83 685.498 L1599.39 685.498 L1599.95 685.498 L1600.51 685.498 L1601.07 685.498 L1601.63 685.498 L1602.19 685.498 L1602.74 685.498 L1603.3 685.498 L1603.86 685.498 L1604.42 685.498 L1604.98 685.498 L1605.54 685.498 L1606.1 685.498 L1606.66 685.498 L1607.22 685.498 L1607.78 685.498 L1608.34 685.498 L1608.9 685.498 L1609.46 685.498 L1610.02 685.498 L1610.57 685.498 L1611.13 685.498 L1611.69 685.498 L1612.25 685.498 L1612.81 685.498 L1613.37 685.498 L1613.93 685.498 L1614.49 685.498 L1615.05 685.498 L1615.61 685.498 L1616.17 685.498 L1616.73 685.498 L1617.29 685.498 L1617.84 685.498 L1618.4 685.498 L1618.96 685.498 L1619.52 685.498 L1620.08 685.498 L1620.64 685.498 L1621.2 685.498 L1621.76 685.498 L1622.32 685.498 L1622.88 685.498 L1623.44 685.498 L1624 685.498 L1624.56 685.498 L1625.11 685.498 L1625.67 685.498 L1626.23 685.498 L1626.79 685.498 L1627.35 685.498 L1627.91 685.498 L1628.47 685.498 L1629.03 685.498 L1629.59 685.498 L1630.15 685.498 L1630.71 685.498 L1631.27 685.498 L1631.83 685.498 L1632.39 685.498 L1632.94 685.498 L1633.5 685.498 L1634.06 685.498 L1634.62 685.498 L1635.18 685.498 L1635.74 685.498 L1636.3 685.498 L1636.86 685.498 L1637.42 685.498 L1637.98 685.498 L1638.54 685.498 L1639.1 685.498 L1639.66 685.498 L1640.21 685.498 L1640.77 685.498 L1641.33 685.498 L1641.89 685.498 L1642.45 685.498 L1643.01 685.498 L1643.57 685.498 L1644.13 685.498 L1644.69 685.498 L1645.25 685.498 L1645.81 685.498 L1646.37 685.498 L1646.93 685.498 L1647.48 685.498 L1648.04 685.498 L1648.6 685.498 L1649.16 685.498 L1649.72 685.498 L1650.28 685.498 L1650.84 685.498 L1651.4 685.498 L1651.96 685.498 L1652.52 685.498 L1653.08 685.498 L1653.64 685.498 L1654.2 685.498 L1654.76 685.498 L1655.31 685.498 L1655.87 685.498 L1656.43 685.498 L1656.99 685.498 L1657.55 685.498 L1658.11 685.498 L1658.67 685.498 L1659.23 685.498 L1659.79 685.498 L1660.35 685.498 L1660.91 685.498 L1661.47 685.498 L1662.03 685.498 L1662.58 685.498 L1663.14 685.498 L1663.7 685.498 L1664.26 685.498 L1664.82 685.498 L1665.38 685.498 L1665.94 685.498 L1666.5 685.498 L1667.06 685.498 L1667.62 685.498 L1668.18 685.498 L1668.74 685.498 L1669.3 685.498 L1669.85 685.498 L1670.41 685.498 L1670.97 685.498 L1671.53 685.498 L1672.09 685.498 L1672.65 685.498 L1673.21 685.498 L1673.77 685.498 L1674.33 685.498 L1674.89 685.498 L1675.45 685.498 L1676.01 685.498 L1676.57 685.498 L1677.13 685.498 L1677.68 685.498 L1678.24 685.498 L1678.8 685.498 L1679.36 685.498 L1679.92 685.498 L1680.48 685.498 L1681.04 685.498 L1681.6 685.498 L1682.16 685.498 L1682.72 685.498 L1683.28 685.498 L1683.84 685.498 L1684.4 685.498 L1684.95 685.498 L1685.51 685.498 L1686.07 685.498 L1686.63 685.498 L1687.19 685.498 L1687.75 685.498 L1688.31 685.498 L1688.87 685.498 L1689.43 685.498 L1689.99 685.498 L1690.55 685.498 L1691.11 685.498 L1691.67 685.498 L1692.23 685.498 L1692.78 685.498 L1693.34 685.498 L1693.9 685.498 L1694.46 685.498 L1695.02 685.498 L1695.58 685.498 L1696.14 685.498 L1696.7 685.498 L1697.26 685.498 L1697.82 685.498 L1698.38 685.498 L1698.94 685.498 L1699.5 685.498 L1700.05 685.498 L1700.61 685.498 L1701.17 685.498 L1701.73 685.498 L1702.29 685.498 L1702.85 685.498 L1703.41 685.498 L1703.97 685.498 L1704.53 685.498 L1705.09 685.498 L1705.65 685.498 L1706.21 685.498 L1706.77 685.498 L1707.32 685.498 L1707.88 685.498 L1708.44 685.498 L1709 685.498 L1709.56 685.498 L1710.12 685.498 L1710.68 685.498 L1711.24 685.498 L1711.8 685.498 L1712.36 685.498 L1712.92 685.498 L1713.48 685.498 L1714.04 685.498 L1714.6 685.498 L1715.15 685.498 L1715.71 685.498 L1716.27 685.498 L1716.83 685.498 L1717.39 685.498 L1717.95 685.498 L1718.51 685.498 L1719.07 685.498 L1719.63 685.498 L1720.19 685.498 L1720.75 685.498 L1721.31 685.498 L1721.87 685.498 L1722.42 685.498 L1722.98 685.498 L1723.54 685.498 L1724.1 685.498 L1724.66 685.498 L1725.22 685.498 L1725.78 685.498 L1726.34 685.498 L1726.9 685.498 L1727.46 685.498 L1728.02 685.498 L1728.58 685.498 L1729.14 685.498 L1729.69 685.498 L1730.25 685.498 L1730.81 685.498 L1731.37 685.498 L1731.93 685.498 L1732.49 685.498 L1733.05 685.498 L1733.61 685.498 L1734.17 685.498 L1734.73 685.498 L1735.29 685.498 L1735.85 685.498 L1736.41 685.498 L1736.97 685.498 L1737.52 685.498 L1738.08 685.498 L1738.64 685.498 L1739.2 685.498 L1739.76 685.498 L1740.32 685.498 L1740.88 685.498 L1741.44 685.498 L1742 685.498 L1742.56 685.498 L1743.12 685.498 L1743.68 685.498 L1744.24 685.498 L1744.79 685.498 L1745.35 685.498 L1745.91 685.498 L1746.47 685.498 L1747.03 685.498 L1747.59 685.498 L1748.15 685.498 L1748.71 685.498 L1749.27 685.498 L1749.83 685.498 L1750.39 685.498 L1750.95 685.498 L1751.51 685.498 L1752.06 685.498 L1752.62 685.498 L1753.18 685.498 L1753.74 685.498 L1754.3 685.498 L1754.86 685.498 L1755.42 685.498 L1755.98 685.498 L1756.54 685.498 L1757.1 685.498 L1757.66 685.498 L1758.22 685.498 L1758.78 685.498 L1759.34 685.498 L1759.89 685.498 L1760.45 685.498 L1761.01 685.498 L1761.57 685.498 L1762.13 685.498 L1762.69 685.498 L1763.25 685.498 L1763.81 685.498 L1764.37 685.498 L1764.93 685.498 L1765.49 685.498 L1766.05 685.498 L1766.61 685.498 L1767.16 685.498 L1767.72 685.498 L1768.28 685.498 L1768.84 685.498 L1769.4 685.498 L1769.96 685.498 L1770.52 685.498 L1771.08 685.498 L1771.64 685.498 L1772.2 685.498 L1772.76 685.498 L1773.32 685.498 L1773.88 685.498 L1774.43 685.498 L1774.99 685.498 L1775.55 685.498 L1776.11 685.498 L1776.67 685.498 L1777.23 685.498 L1777.79 685.498 L1778.35 685.498 L1778.91 685.498 L1779.47 685.498 L1780.03 685.498 L1780.59 685.498 L1781.15 685.498 L1781.71 685.498 L1782.26 685.498 L1782.82 685.498 L1783.38 685.498 L1783.94 685.498 L1784.5 685.498 L1785.06 685.498 L1785.62 685.498 L1786.18 685.498 L1786.74 685.498 L1787.3 685.498 L1787.86 685.498 L1788.42 685.498 L1788.98 685.498 L1789.53 685.498 L1790.09 685.498 L1790.65 685.498 L1791.21 685.498 L1791.77 685.498 L1792.33 685.498 L1792.89 685.498 L1793.45 685.498 L1794.01 685.498 L1794.57 685.498 L1795.13 685.498 L1795.69 685.498 L1796.25 685.498 L1796.8 685.498 L1797.36 685.498 L1797.92 685.498 L1798.48 685.498 L1799.04 685.498 L1799.6 685.498 L1800.16 685.498 L1800.72 685.498 L1801.28 685.498 L1801.84 685.498 L1802.4 685.498 L1802.96 685.498 L1803.52 685.498 L1804.08 685.498 L1804.63 685.498 L1805.19 685.498 L1805.75 685.498 L1806.31 685.498 L1806.87 685.498 L1807.43 685.498 L1807.99 685.498 L1808.55 685.498 L1809.11 685.498 L1809.67 685.498 L1810.23 685.498 L1810.79 685.498 L1811.35 685.498 L1811.9 685.498 L1812.46 685.498 L1813.02 685.498 L1813.58 685.498 L1814.14 685.498 L1814.7 685.498 L1815.26 685.498 L1815.82 685.498 L1816.38 685.498 L1816.94 685.498 L1817.5 685.498 L1818.06 685.498 L1818.62 685.498 L1819.18 685.498 L1819.73 685.498 L1820.29 685.498 L1820.85 685.498 L1821.41 685.498 L1821.97 685.498 L1822.53 685.498 L1823.09 685.498 L1823.65 685.498 L1824.21 685.498 L1824.77 685.498 L1825.33 685.498 L1825.89 685.498 L1826.45 685.498 L1827 685.498 L1827.56 685.498 L1828.12 685.498 L1828.68 685.498 L1829.24 685.498 L1829.8 685.498 L1830.36 685.498 L1830.92 685.498 L1831.48 685.498 L1832.04 685.498 L1832.6 685.498 L1833.16 685.498 L1833.72 685.498 L1834.27 685.498 L1834.83 685.498 L1835.39 685.498 L1835.95 685.498 L1836.51 685.498 L1837.07 685.498 L1837.63 685.498 L1838.19 685.498 L1838.19 683.887 L1837.63 683.887 L1837.07 683.887 L1836.51 683.887 L1835.95 683.887 L1835.39 683.887 L1834.83 683.887 L1834.27 683.887 L1833.72 683.887 L1833.16 683.887 L1832.6 683.887 L1832.04 683.887 L1831.48 683.887 L1830.92 683.887 L1830.36 683.887 L1829.8 683.887 L1829.24 683.887 L1828.68 683.887 L1828.12 683.887 L1827.56 683.887 L1827 683.887 L1826.45 683.887 L1825.89 683.887 L1825.33 683.887 L1824.77 683.887 L1824.21 683.887 L1823.65 683.887 L1823.09 683.887 L1822.53 683.887 L1821.97 683.887 L1821.41 683.887 L1820.85 683.887 L1820.29 683.887 L1819.73 683.887 L1819.18 683.887 L1818.62 683.887 L1818.06 683.887 L1817.5 683.887 L1816.94 683.887 L1816.38 683.887 L1815.82 683.887 L1815.26 683.887 L1814.7 683.887 L1814.14 683.887 L1813.58 683.887 L1813.02 683.887 L1812.46 683.887 L1811.9 683.887 L1811.35 683.887 L1810.79 683.887 L1810.23 683.887 L1809.67 683.887 L1809.11 683.887 L1808.55 683.887 L1807.99 683.887 L1807.43 683.887 L1806.87 683.887 L1806.31 683.887 L1805.75 683.887 L1805.19 683.887 L1804.63 683.887 L1804.08 683.887 L1803.52 683.887 L1802.96 683.887 L1802.4 683.887 L1801.84 683.887 L1801.28 683.887 L1800.72 683.887 L1800.16 683.887 L1799.6 683.887 L1799.04 683.887 L1798.48 683.887 L1797.92 683.887 L1797.36 683.887 L1796.8 683.887 L1796.25 683.887 L1795.69 683.887 L1795.13 683.887 L1794.57 683.887 L1794.01 683.887 L1793.45 683.887 L1792.89 683.887 L1792.33 683.887 L1791.77 683.887 L1791.21 683.887 L1790.65 683.887 L1790.09 683.887 L1789.53 683.887 L1788.98 683.887 L1788.42 683.887 L1787.86 683.887 L1787.3 683.887 L1786.74 683.887 L1786.18 683.887 L1785.62 683.887 L1785.06 683.887 L1784.5 683.887 L1783.94 683.887 L1783.38 683.887 L1782.82 683.887 L1782.26 683.887 L1781.71 683.887 L1781.15 683.887 L1780.59 683.887 L1780.03 683.887 L1779.47 683.887 L1778.91 683.887 L1778.35 683.887 L1777.79 683.887 L1777.23 683.887 L1776.67 683.887 L1776.11 683.887 L1775.55 683.887 L1774.99 683.887 L1774.43 683.887 L1773.88 683.887 L1773.32 683.887 L1772.76 683.887 L1772.2 683.887 L1771.64 683.887 L1771.08 683.887 L1770.52 683.887 L1769.96 683.887 L1769.4 683.887 L1768.84 683.887 L1768.28 683.887 L1767.72 683.887 L1767.16 683.887 L1766.61 683.887 L1766.05 683.887 L1765.49 683.887 L1764.93 683.887 L1764.37 683.887 L1763.81 683.887 L1763.25 683.887 L1762.69 683.887 L1762.13 683.887 L1761.57 683.887 L1761.01 683.887 L1760.45 683.887 L1759.89 683.887 L1759.34 683.887 L1758.78 683.887 L1758.22 683.887 L1757.66 683.887 L1757.1 683.887 L1756.54 683.887 L1755.98 683.887 L1755.42 683.887 L1754.86 683.887 L1754.3 683.887 L1753.74 683.887 L1753.18 683.887 L1752.62 683.887 L1752.06 683.887 L1751.51 683.887 L1750.95 683.887 L1750.39 683.887 L1749.83 683.887 L1749.27 683.887 L1748.71 683.887 L1748.15 683.887 L1747.59 683.887 L1747.03 683.887 L1746.47 683.887 L1745.91 683.887 L1745.35 683.887 L1744.79 683.887 L1744.24 683.887 L1743.68 683.887 L1743.12 683.887 L1742.56 683.887 L1742 683.887 L1741.44 683.887 L1740.88 683.887 L1740.32 683.887 L1739.76 683.887 L1739.2 683.887 L1738.64 683.887 L1738.08 683.887 L1737.52 683.887 L1736.97 683.887 L1736.41 683.887 L1735.85 683.887 L1735.29 683.887 L1734.73 683.887 L1734.17 683.887 L1733.61 683.887 L1733.05 683.887 L1732.49 683.887 L1731.93 683.887 L1731.37 683.887 L1730.81 683.887 L1730.25 683.887 L1729.69 683.887 L1729.14 683.887 L1728.58 683.887 L1728.02 683.887 L1727.46 683.887 L1726.9 683.887 L1726.34 683.887 L1725.78 683.887 L1725.22 683.887 L1724.66 683.887 L1724.1 683.887 L1723.54 683.887 L1722.98 683.887 L1722.42 683.887 L1721.87 683.887 L1721.31 683.887 L1720.75 683.887 L1720.19 683.887 L1719.63 683.887 L1719.07 683.887 L1718.51 683.887 L1717.95 683.887 L1717.39 683.887 L1716.83 683.887 L1716.27 683.887 L1715.71 683.887 L1715.15 683.887 L1714.6 683.887 L1714.04 683.887 L1713.48 683.887 L1712.92 683.887 L1712.36 683.887 L1711.8 683.887 L1711.24 683.887 L1710.68 683.887 L1710.12 683.887 L1709.56 683.887 L1709 683.887 L1708.44 683.887 L1707.88 683.887 L1707.32 683.887 L1706.77 683.887 L1706.21 683.887 L1705.65 683.887 L1705.09 683.887 L1704.53 683.887 L1703.97 683.887 L1703.41 683.887 L1702.85 683.887 L1702.29 683.887 L1701.73 683.887 L1701.17 683.887 L1700.61 683.887 L1700.05 683.887 L1699.5 683.887 L1698.94 683.887 L1698.38 683.887 L1697.82 683.887 L1697.26 683.887 L1696.7 683.887 L1696.14 683.887 L1695.58 683.887 L1695.02 683.887 L1694.46 683.887 L1693.9 683.887 L1693.34 683.887 L1692.78 683.887 L1692.23 683.887 L1691.67 683.887 L1691.11 683.887 L1690.55 683.887 L1689.99 683.887 L1689.43 683.887 L1688.87 683.887 L1688.31 683.887 L1687.75 683.887 L1687.19 683.887 L1686.63 683.887 L1686.07 683.887 L1685.51 683.887 L1684.95 683.887 L1684.4 683.887 L1683.84 683.887 L1683.28 683.887 L1682.72 683.887 L1682.16 683.887 L1681.6 683.887 L1681.04 683.887 L1680.48 683.887 L1679.92 683.887 L1679.36 683.887 L1678.8 683.887 L1678.24 683.887 L1677.68 683.887 L1677.13 683.887 L1676.57 683.887 L1676.01 683.887 L1675.45 683.887 L1674.89 683.887 L1674.33 683.887 L1673.77 683.887 L1673.21 683.887 L1672.65 683.887 L1672.09 683.887 L1671.53 683.887 L1670.97 683.887 L1670.41 683.887 L1669.85 683.887 L1669.3 683.887 L1668.74 683.887 L1668.18 683.887 L1667.62 683.887 L1667.06 683.887 L1666.5 683.887 L1665.94 683.887 L1665.38 683.887 L1664.82 683.887 L1664.26 683.887 L1663.7 683.887 L1663.14 683.887 L1662.58 683.887 L1662.03 683.887 L1661.47 683.887 L1660.91 683.887 L1660.35 683.887 L1659.79 683.887 L1659.23 683.887 L1658.67 683.887 L1658.11 683.887 L1657.55 683.887 L1656.99 683.887 L1656.43 683.887 L1655.87 683.887 L1655.31 683.887 L1654.76 683.887 L1654.2 683.887 L1653.64 683.887 L1653.08 683.887 L1652.52 683.887 L1651.96 683.887 L1651.4 683.887 L1650.84 683.887 L1650.28 683.887 L1649.72 683.887 L1649.16 683.887 L1648.6 683.887 L1648.04 683.887 L1647.48 683.887 L1646.93 683.887 L1646.37 683.887 L1645.81 683.887 L1645.25 683.887 L1644.69 683.887 L1644.13 683.887 L1643.57 683.887 L1643.01 683.887 L1642.45 683.887 L1641.89 683.887 L1641.33 683.887 L1640.77 683.887 L1640.21 683.887 L1639.66 683.887 L1639.1 683.887 L1638.54 683.887 L1637.98 683.887 L1637.42 683.887 L1636.86 683.887 L1636.3 683.887 L1635.74 683.887 L1635.18 683.887 L1634.62 683.887 L1634.06 683.887 L1633.5 683.887 L1632.94 683.887 L1632.39 683.887 L1631.83 683.887 L1631.27 683.887 L1630.71 683.887 L1630.15 683.887 L1629.59 683.887 L1629.03 683.887 L1628.47 683.887 L1627.91 683.887 L1627.35 683.887 L1626.79 683.887 L1626.23 683.887 L1625.67 683.887 L1625.11 683.887 L1624.56 683.887 L1624 683.887 L1623.44 683.887 L1622.88 683.887 L1622.32 683.887 L1621.76 683.887 L1621.2 683.887 L1620.64 683.887 L1620.08 683.887 L1619.52 683.887 L1618.96 683.887 L1618.4 683.887 L1617.84 683.887 L1617.29 683.887 L1616.73 683.887 L1616.17 683.887 L1615.61 683.887 L1615.05 683.887 L1614.49 683.887 L1613.93 683.887 L1613.37 683.887 L1612.81 683.887 L1612.25 683.887 L1611.69 683.887 L1611.13 683.887 L1610.57 683.887 L1610.02 683.887 L1609.46 683.887 L1608.9 683.887 L1608.34 683.887 L1607.78 683.887 L1607.22 683.887 L1606.66 683.887 L1606.1 683.887 L1605.54 683.887 L1604.98 683.887 L1604.42 683.887 L1603.86 683.887 L1603.3 683.887 L1602.74 683.887 L1602.19 683.887 L1601.63 683.887 L1601.07 683.887 L1600.51 683.887 L1599.95 683.887 L1599.39 683.887 L1598.83 683.887 L1598.27 683.887 L1597.71 683.887 L1597.15 683.887 L1596.59 683.887 L1596.03 683.887 L1595.47 683.887 L1594.92 683.887 L1594.36 683.887 L1593.8 683.887 L1593.24 683.887 L1592.68 683.887 L1592.12 683.887 L1591.56 683.887 L1591 683.887 L1590.44 683.887 L1589.88 683.887 L1589.32 683.887 L1588.76 683.887 L1588.2 683.887 L1587.65 683.887 L1587.09 683.887 L1586.53 683.887 L1585.97 683.887 L1585.41 683.887 L1584.85 683.887 L1584.29 683.887 L1583.73 683.887 L1583.17 683.887 L1582.61 683.887 L1582.05 683.887 L1581.49 683.887 L1580.93 683.887 L1580.37 683.887 L1579.82 683.887 L1579.26 683.887 L1578.7 683.887 L1578.14 683.887 L1577.58 683.887 L1577.02 683.887 L1576.46 683.887 L1575.9 683.887 L1575.34 683.887 L1574.78 683.887 L1574.22 683.887 L1573.66 683.887 L1573.1 683.887 L1572.55 683.887 L1571.99 683.887 L1571.43 683.887 L1570.87 683.887 L1570.31 683.887 L1569.75 683.887 L1569.19 683.887 L1568.63 683.887 L1568.07 683.887 L1567.51 683.887 L1566.95 683.887 L1566.39 683.887 L1565.83 683.887 L1565.28 683.887 L1564.72 683.887 L1564.16 683.887 L1563.6 683.887 L1563.04 683.887 L1562.48 683.887 L1561.92 683.887 L1561.36 683.887 L1560.8 683.887 L1560.24 683.887 L1559.68 683.887 L1559.12 683.887 L1558.56 683.887 L1558 683.887 L1557.45 683.887 L1556.89 683.887 L1556.33 683.887 L1555.77 683.887 L1555.21 683.887 L1554.65 683.887 L1554.09 683.887 L1553.53 683.887 L1552.97 683.887 L1552.41 683.887 L1551.85 683.887 L1551.29 683.887 L1550.73 683.887 L1550.18 683.887 L1549.62 683.887 L1549.06 683.887 L1548.5 683.887 L1547.94 683.887 L1547.38 683.887 L1546.82 683.887 L1546.26 683.887 L1545.7 683.887 L1545.14 683.887 L1544.58 683.887 L1544.02 683.887 L1543.46 683.887 L1542.9 683.887 L1542.35 683.887 L1541.79 683.887 L1541.23 683.887 L1540.67 683.887 L1540.11 683.887 L1539.55 683.887 L1538.99 683.887 L1538.43 683.887 L1537.87 683.887 L1537.31 683.887 L1536.75 683.887 L1536.19 683.887 L1535.63 683.887 L1535.08 683.887 L1534.52 683.887 L1533.96 683.887 L1533.4 683.887 L1532.84 683.887 L1532.28 683.887 L1531.72 683.887 L1531.16 683.887 L1530.6 683.887 L1530.04 683.887 L1529.48 683.887 L1528.92 683.887 L1528.36 683.887 L1527.81 683.887 L1527.25 683.887 L1526.69 683.887 L1526.13 683.887 L1525.57 683.887 L1525.01 683.887 L1524.45 683.887 L1523.89 683.887 L1523.33 683.887 L1522.77 683.887 L1522.21 683.887 L1521.65 683.887 L1521.09 683.887 L1520.53 683.887 L1519.98 683.887 L1519.42 683.887 L1518.86 683.887 L1518.3 683.887 L1517.74 683.887 L1517.18 683.887 L1516.62 683.887 L1516.06 683.887 L1515.5 683.887 L1514.94 683.887 L1514.38 683.887 L1513.82 683.887 L1513.26 683.887 L1512.71 683.887 L1512.15 683.887 L1511.59 683.887 L1511.03 683.887 L1510.47 683.887 L1509.91 683.887 L1509.35 683.887 L1508.79 683.887 L1508.23 683.887 L1507.67 683.887 L1507.11 683.887 L1506.55 683.887 L1505.99 683.887 L1505.44 683.887 L1504.88 683.887 L1504.32 683.887 L1503.76 683.887 L1503.2 683.887 L1502.64 683.887 L1502.08 683.887 L1501.52 683.887 L1500.96 683.887 L1500.4 683.887 L1499.84 683.887 L1499.28 683.887 L1498.72 683.887 L1498.16 683.887 L1497.61 683.887 L1497.05 683.887 L1496.49 683.887 L1495.93 683.887 L1495.37 683.887 L1494.81 683.887 L1494.25 683.887 L1493.69 683.887 L1493.13 683.887 L1492.57 683.887 L1492.01 683.887 L1491.45 683.887 L1490.89 683.887 L1490.34 683.887 L1489.78 683.887 L1489.22 683.887 L1488.66 683.887 L1488.1 683.887 L1487.54 683.887 L1486.98 683.887 L1486.42 683.887 L1485.86 683.887 L1485.3 683.887 L1484.74 683.887 L1484.18 683.887 L1483.62 683.887 L1483.07 683.887 L1482.51 683.887 L1481.95 683.887 L1481.39 683.887 L1480.83 683.887 L1480.27 683.887 L1479.71 683.887 L1479.15 683.887 L1478.59 683.887 L1478.03 683.887 L1477.47 683.887 L1476.91 683.887 L1476.35 683.887 L1475.79 683.887 L1475.24 683.887 L1474.68 683.887 L1474.12 683.887 L1473.56 683.887 L1473 683.887 L1472.44 683.887 L1471.88 683.887 L1471.32 683.887 L1470.76 683.887 L1470.2 683.887 L1469.64 683.887 L1469.08 683.887 L1468.52 683.887 L1467.97 683.887 L1467.41 683.887 L1466.85 683.887 L1466.29 683.887 L1465.73 683.887 L1465.17 683.887 L1464.61 683.887 L1464.05 683.887 L1463.49 683.887 L1462.93 683.887 L1462.37 683.887 L1461.81 683.887 L1461.25 683.887 L1460.7 683.887 L1460.14 683.887 L1459.58 683.887 L1459.02 683.887 L1458.46 683.887 L1457.9 683.887 L1457.34 683.887 L1456.78 683.887 L1456.22 683.887 L1455.66 683.887 L1455.1 683.887 L1454.54 683.887 L1453.98 683.887 L1453.42 683.887 L1452.87 683.887 L1452.31 683.887 L1451.75 683.887 L1451.19 683.887 L1450.63 683.887 L1450.07 683.887 L1449.51 683.887 L1448.95 683.887 L1448.39 683.887 L1447.83 683.887 L1447.27 683.887 L1446.71 683.887 L1446.15 683.887 L1445.6 683.887 L1445.04 683.887 L1444.48 683.887 L1443.92 683.887 L1443.36 683.887 L1442.8 683.887 L1442.24 683.887 L1441.68 683.887 L1441.12 683.887 L1440.56 683.887 L1440 683.887 L1439.44 683.887 L1438.88 683.887 L1438.33 683.887 L1437.77 683.887 L1437.21 683.887 L1436.65 683.887 L1436.09 683.887 L1435.53 683.887 L1434.97 683.887 L1434.41 683.887 L1433.85 683.887 L1433.29 683.887 L1432.73 683.887 L1432.17 683.887 L1431.61 683.887 L1431.05 683.887 L1430.5 683.887 L1429.94 683.887 L1429.38 683.887 L1428.82 683.887 L1428.26 683.887 L1427.7 683.887 L1427.14 683.887 L1426.58 683.887 L1426.02 683.887 L1425.46 683.887 L1424.9 683.887 L1424.34 683.887 L1423.78 683.887 L1423.23 683.887 L1422.67 683.887 L1422.11 683.887 L1421.55 683.887 L1420.99 683.887 L1420.43 683.887 L1419.87 683.887 L1419.31 683.887 L1418.75 683.887 L1418.19 683.887 L1417.63 683.887 L1417.07 683.887 L1416.51 683.887 L1415.95 683.887 L1415.4 683.887 L1414.84 683.887 L1414.28 683.887 L1413.72 683.887 L1413.16 683.887 L1412.6 683.887 L1412.04 683.887 L1411.48 683.887 L1410.92 683.887 L1410.36 683.887 L1409.8 683.887 L1409.24 683.887 L1408.68 683.887 L1408.13 683.887 L1407.57 683.887 L1407.01 683.887 L1406.45 683.887 L1405.89 683.887 L1405.33 683.887 L1404.77 683.887 L1404.21 683.887 L1403.65 683.887 L1403.09 683.887 L1402.53 683.887 L1401.97 683.887 L1401.41 683.887 L1400.86 683.887 L1400.3 683.887 L1399.74 683.887 L1399.18 683.887 L1398.62 683.887 L1398.06 683.887 L1397.5 683.887 L1396.94 683.887 L1396.38 683.887 L1395.82 683.887 L1395.26 683.887 L1394.7 683.887 L1394.14 683.887 L1393.58 683.887 L1393.03 683.887 L1392.47 683.887 L1391.91 683.887 L1391.35 683.887 L1390.79 683.887 L1390.23 683.887 L1389.67 683.887 L1389.11 683.887 L1388.55 683.887 L1387.99 683.887 L1387.43 683.887 L1386.87 683.887 L1386.31 683.887 L1385.76 683.887 L1385.2 683.887 L1384.64 683.887 L1384.08 683.887 L1383.52 683.887 L1382.96 683.887 L1382.4 683.887 L1381.84 683.887 L1381.28 683.887 L1380.72 683.887 L1380.16 683.887 L1379.6 683.887 L1379.04 683.887 L1378.49 683.887 L1377.93 683.887 L1377.37 683.887 L1376.81 683.887 L1376.25 683.887 L1375.69 683.887 L1375.13 683.887 L1374.57 683.887 L1374.01 683.887 L1373.45 683.887 L1372.89 683.887 L1372.33 683.887 L1371.77 683.887 L1371.21 683.887 L1370.66 683.887 L1370.1 683.887 L1369.54 683.887 L1368.98 683.887 L1368.42 683.887 L1367.86 683.887 L1367.3 683.887 L1366.74 683.887 L1366.18 683.887 L1365.62 683.887 L1365.06 683.887 L1364.5 683.887 L1363.94 683.887 L1363.39 683.887 L1362.83 683.887 L1362.27 683.887 L1361.71 683.887 L1361.15 683.887 L1360.59 683.887 L1360.03 683.887 L1359.47 683.887 L1358.91 683.887 L1358.35 683.887 L1357.79 683.887 L1357.23 683.887 L1356.67 683.887 L1356.12 683.887 L1355.56 683.887 L1355 683.887 L1354.44 683.887 L1353.88 683.887 L1353.32 683.887 L1352.76 683.887 L1352.2 683.887 L1351.64 683.887 L1351.08 683.887 L1350.52 683.887 L1349.96 683.887 L1349.4 683.887 L1348.84 683.887 L1348.29 683.887 L1347.73 683.887 L1347.17 683.887 L1346.61 683.887 L1346.05 683.887 L1345.49 683.887 L1344.93 683.887 L1344.37 683.887 L1343.81 683.887 L1343.25 683.887 L1342.69 683.887 L1342.13 683.887 L1341.57 683.887 L1341.02 683.887 L1340.46 683.887 L1339.9 683.887 L1339.34 683.887 L1338.78 683.887 L1338.22 683.887 L1337.66 683.887 L1337.1 683.887 L1336.54 683.887 L1335.98 683.887 L1335.42 683.887 L1334.86 683.887 L1334.3 683.887 L1333.75 683.887 L1333.19 683.887 L1332.63 683.887 L1332.07 683.887 L1331.51 683.887 L1330.95 683.887 L1330.39 683.887 L1329.83 683.887 L1329.27 683.887 L1328.71 683.887 L1328.15 683.887 L1327.59 683.887 L1327.03 683.887 L1326.47 683.887 L1325.92 683.887 L1325.36 683.887 L1324.8 683.887 L1324.24 683.887 L1323.68 683.887 L1323.12 683.887 L1322.56 683.887 L1322 683.887 L1321.44 683.887 L1320.88 683.887 L1320.32 683.887 L1319.76 683.887 L1319.2 683.887 L1318.65 683.887 L1318.09 683.887 L1317.53 683.887 L1316.97 683.887 L1316.41 683.887 L1315.85 683.887 L1315.29 683.887 L1314.73 683.887 L1314.17 683.887 L1313.61 683.887 L1313.05 683.887 L1312.49 683.887 L1311.93 683.887 L1311.38 683.887 L1310.82 683.887 L1310.26 683.887 L1309.7 683.887 L1309.14 683.887 L1308.58 683.887 L1308.02 683.887 L1307.46 683.887 L1306.9 683.887 L1306.34 683.887 L1305.78 683.887 L1305.22 683.887 L1304.66 683.887 L1304.1 683.887 L1303.55 683.887 L1302.99 683.887 L1302.43 683.887 L1301.87 683.887 L1301.31 683.887 L1300.75 683.887 L1300.19 683.887 L1299.63 683.887 L1299.07 683.887 L1298.51 683.887 L1297.95 683.887 L1297.39 683.887 L1296.83 683.887 L1296.28 683.887 L1295.72 683.887 L1295.16 683.887 L1294.6 683.887 L1294.04 683.887 L1293.48 683.887 L1292.92 683.887 L1292.36 683.887 L1291.8 683.887 L1291.24 683.887 L1290.68 683.887 L1290.12 683.887 L1289.56 683.887 L1289 683.887 L1288.45 683.887 L1287.89 683.887 L1287.33 683.887 L1286.77 683.887 L1286.21 683.887 L1285.65 683.887 L1285.09 683.887 L1284.53 683.887 L1283.97 683.887 L1283.41 683.887 L1282.85 683.887 L1282.29 683.887 L1281.73 683.887 L1281.18 683.887 L1280.62 683.887 L1280.06 683.887 L1279.5 683.887 L1278.94 683.887 L1278.38 683.887 L1277.82 683.887 L1277.26 683.887 L1276.7 683.887 L1276.14 683.887 L1275.58 683.887 L1275.02 683.887 L1274.46 683.887 L1273.91 683.887 L1273.35 683.887 L1272.79 683.887 L1272.23 683.887 L1271.67 683.887 L1271.11 683.887 L1270.55 683.887 L1269.99 683.887 L1269.43 683.887 L1268.87 683.887 L1268.31 683.887 L1267.75 683.887 L1267.19 683.887 L1266.63 683.887 L1266.08 683.887 L1265.52 683.887 L1264.96 683.887 L1264.4 683.887 L1263.84 683.887 L1263.28 683.887 L1262.72 683.887 L1262.16 683.887 L1261.6 683.887 L1261.04 683.887 L1260.48 683.887 L1259.92 683.887 L1259.36 683.887 L1258.81 683.887 L1258.25 683.887 L1257.69 683.887 L1257.13 683.887 L1256.57 683.887 L1256.01 683.887 L1255.45 683.887 L1254.89 683.887 L1254.33 683.887 L1253.77 683.887 L1253.21 683.887 L1252.65 683.887 L1252.09 683.887 L1251.54 683.887 L1250.98 683.887 L1250.42 683.887 L1249.86 683.887 L1249.3 683.887 L1248.74 683.887 L1248.18 683.887 L1247.62 683.887 L1247.06 683.887 L1246.5 683.887 L1245.94 683.887 L1245.38 683.887 L1244.82 683.887 L1244.26 683.887 L1243.71 683.887 L1243.15 683.887 L1242.59 683.887 L1242.03 683.887 L1241.47 683.887 L1240.91 683.887 L1240.35 683.887 L1239.79 683.887 L1239.23 683.887 L1238.67 683.887 L1238.11 683.887 L1237.55 683.887 L1236.99 683.887 L1236.44 683.887 L1235.88 683.887 L1235.32 683.887 L1234.76 683.887 L1234.2 683.887 L1233.64 683.887 L1233.08 683.887 L1232.52 683.887 L1231.96 683.887 L1231.4 683.887 L1230.84 683.887 L1230.28 683.887 L1229.72 683.887 L1229.17 683.887 L1228.61 683.887 L1228.05 683.887 L1227.49 683.887 L1226.93 683.887 L1226.37 683.887 L1225.81 683.887 L1225.25 683.887 L1224.69 683.887 L1224.13 683.887 L1223.57 683.887 L1223.01 683.887 L1222.45 683.887 L1221.89 683.887 L1221.34 683.887 L1220.78 683.887 L1220.22 683.887 L1219.66 683.887 L1219.1 683.887 L1218.54 683.887 L1217.98 683.887 L1217.42 683.887 L1216.86 683.887 L1216.3 683.887 L1215.74 683.887 L1215.18 683.887 L1214.62 683.887 L1214.07 683.887 L1213.51 683.887 L1212.95 683.887 L1212.39 683.887 L1211.83 683.887 L1211.27 683.887 L1210.71 683.887 L1210.15 683.887 L1209.59 683.887 L1209.03 683.887 L1208.47 683.887 L1207.91 683.887 L1207.35 683.887 L1206.8 683.887 L1206.24 683.887 L1205.68 683.887 L1205.12 683.887 L1204.56 683.887 L1204 683.887 L1203.44 683.887 L1202.88 683.887 L1202.32 683.887 L1201.76 683.887 L1201.2 683.887 L1200.64 683.887 L1200.08 683.887 L1199.52 683.887 L1198.97 683.887 L1198.41 683.887 L1197.85 683.887 L1197.29 683.887 L1196.73 683.887 L1196.17 683.887 L1195.61 683.887 L1195.05 683.887 L1194.49 683.887 L1193.93 683.887 L1193.37 683.887 L1192.81 683.887 L1192.25 683.887 L1191.7 683.887 L1191.14 683.887 L1190.58 683.887 L1190.02 683.887 L1189.46 683.887 L1188.9 683.887 L1188.34 683.887 L1187.78 683.887 L1187.22 683.887 L1186.66 683.887 L1186.1 683.887 L1185.54 683.887 L1184.98 683.887 L1184.43 683.887 L1183.87 683.887 L1183.31 683.887 L1182.75 683.887 L1182.19 683.887 L1181.63 683.887 L1181.07 683.887 L1180.51 683.887 L1179.95 683.887 L1179.39 683.887 L1178.83 683.887 L1178.27 683.887 L1177.71 683.887 L1177.15 683.887 L1176.6 683.887 L1176.04 683.887 L1175.48 683.887 L1174.92 683.887 L1174.36 683.887 L1173.8 683.887 L1173.24 683.887 L1172.68 683.887 L1172.12 683.887 L1171.56 683.887 L1171 683.887 L1170.44 683.887 L1169.88 683.887 L1169.33 683.887 L1168.77 683.887 L1168.21 683.887 L1167.65 683.887 L1167.09 683.887 L1166.53 683.887 L1165.97 683.887 L1165.41 683.887 L1164.85 683.887 L1164.29 683.887 L1163.73 683.887 L1163.17 683.887 L1162.61 683.887 L1162.05 683.887 L1161.5 683.887 L1160.94 683.887 L1160.38 683.887 L1159.82 683.887 L1159.26 683.887 L1158.7 683.887 L1158.14 683.887 L1157.58 683.887 L1157.02 683.887 L1156.46 683.887 L1155.9 683.887 L1155.34 683.887 L1154.78 683.887 L1154.23 683.887 L1153.67 683.887 L1153.11 683.887 L1152.55 683.887 L1151.99 683.887 L1151.43 683.887 L1150.87 683.887 L1150.31 683.887 L1149.75 683.887 L1149.19 683.887 L1148.63 683.887 L1148.07 683.887 L1147.51 683.887 L1146.96 683.887 L1146.4 683.887 L1145.84 683.887 L1145.28 683.887 L1144.72 683.887 L1144.16 683.887 L1143.6 683.887 L1143.04 683.887 L1142.48 683.887 L1141.92 683.887 L1141.36 683.887 L1140.8 683.887 L1140.24 683.887 L1139.68 683.887 L1139.13 683.887 L1138.57 683.887 L1138.01 683.887 L1137.45 683.887 L1136.89 683.887 L1136.33 683.887 L1135.77 683.887 L1135.21 683.887 L1134.65 683.887 L1134.09 683.887 L1133.53 683.887 L1132.97 683.887 L1132.41 683.887 L1131.86 683.887 L1131.3 683.887 L1130.74 683.887 L1130.18 683.887 L1129.62 683.887 L1129.06 683.887 L1128.5 683.887 L1127.94 683.887 L1127.38 683.887 L1126.82 683.887 L1126.26 683.887 L1125.7 683.887 L1125.14 683.887 L1124.59 683.887 L1124.03 683.887 L1123.47 683.887 L1122.91 683.887 L1122.35 683.887 L1121.79 683.887 L1121.23 683.887 L1120.67 683.887 L1120.11 683.887 L1119.55 683.887 L1118.99 683.887 L1118.43 683.887 L1117.87 683.887 L1117.31 683.887 L1116.76 683.887 L1116.2 683.887 L1115.64 683.887 L1115.08 683.887 L1114.52 683.887 L1113.96 683.887 L1113.4 683.887 L1112.84 683.887 L1112.28 683.887 L1111.72 683.887 L1111.16 683.887 L1110.6 683.887 L1110.04 683.887 L1109.49 683.887 L1108.93 683.887 L1108.37 683.887 L1107.81 683.887 L1107.25 683.887 L1106.69 683.887 L1106.13 683.887 L1105.57 683.887 L1105.01 683.887 L1104.45 683.887 L1103.89 683.887 L1103.33 683.887 L1102.77 683.887 L1102.22 683.887 L1101.66 683.887 L1101.1 683.887 L1100.54 683.887 L1099.98 683.887 L1099.42 683.887 L1098.86 683.887 L1098.3 683.887 L1097.74 683.887 L1097.18 683.887 L1096.62 683.887 L1096.06 683.887 L1095.5 683.887 L1094.94 683.887 L1094.39 683.887 L1093.83 683.887 L1093.27 683.887 L1092.71 683.887 L1092.15 683.887 L1091.59 683.887 L1091.03 683.887 L1090.47 683.887 L1089.91 683.887 L1089.35 683.887 L1088.79 683.887 L1088.23 683.887 L1087.67 683.887 L1087.12 683.887 L1086.56 683.887 L1086 683.887 L1085.44 683.887 L1084.88 683.887 L1084.32 683.887 L1083.76 683.887 L1083.2 683.887 L1082.64 683.887 L1082.08 683.887 L1081.52 683.887 L1080.96 683.887 L1080.4 683.887 L1079.85 683.887 L1079.29 683.887 L1078.73 683.887 L1078.17 683.887 L1077.61 683.887 L1077.05 683.887 L1076.49 683.887 L1075.93 683.887 L1075.37 683.887 L1074.81 683.887 L1074.25 683.887 L1073.69 683.887 L1073.13 683.887 L1072.57 683.887 L1072.02 683.887 L1071.46 683.887 L1070.9 683.887 L1070.34 683.887 L1069.78 683.887 L1069.22 683.887 L1068.66 683.887 L1068.1 683.887 L1067.54 683.887 L1066.98 683.887 L1066.42 683.887 L1065.86 683.887 L1065.3 683.887 L1064.75 683.887 L1064.19 683.887 L1063.63 683.887 L1063.07 683.887 L1062.51 683.887 L1061.95 683.887 L1061.39 683.887 L1060.83 683.887 L1060.27 683.887 L1059.71 683.887 L1059.15 683.887 L1058.59 683.887 L1058.03 683.887 L1057.48 683.887 L1056.92 683.887 L1056.36 683.887 L1055.8 683.887 L1055.24 683.887 L1054.68 683.887 L1054.12 683.887 L1053.56 683.887 L1053 683.887 L1052.44 683.887 L1051.88 683.887 L1051.32 683.887 L1050.76 683.887 L1050.2 683.887 L1049.65 683.887 L1049.09 683.887 L1048.53 683.887 L1047.97 683.887 L1047.41 683.887 L1046.85 683.887 L1046.29 683.887 L1045.73 683.887 L1045.17 683.887 L1044.61 683.887 L1044.05 683.887 L1043.49 683.887 L1042.93 683.887 L1042.38 683.887 L1041.82 683.887 L1041.26 683.887 L1040.7 683.887 L1040.14 683.887 L1039.58 683.887 L1039.02 683.887 L1038.46 683.887 L1037.9 683.887 L1037.34 683.887 L1036.78 683.887 L1036.22 683.887 L1035.66 683.887 L1035.1 683.887 L1034.55 683.887 L1033.99 683.887 L1033.43 683.887 L1032.87 683.887 L1032.31 683.887 L1031.75 683.887 L1031.19 683.887 L1030.63 683.887 L1030.07 683.887 L1029.51 683.887 L1028.95 683.887 L1028.39 683.887 L1027.83 683.887 L1027.28 683.887 L1026.72 683.887 L1026.16 683.887 L1025.6 683.887 L1025.04 683.887 L1024.48 683.887 L1023.92 683.887 L1023.36 683.887 L1022.8 683.887 L1022.24 683.887 L1021.68 683.887 L1021.12 683.887 L1020.56 683.887 L1020.01 683.887 L1019.45 683.887 L1018.89 683.887 L1018.33 683.887 L1017.77 683.887 L1017.21 683.887 L1016.65 683.887 L1016.09 683.887 L1015.53 683.887 L1014.97 683.887 L1014.41 683.887 L1013.85 683.887 L1013.29 683.887 L1012.73 683.887 L1012.18 683.887 L1011.62 683.887 L1011.06 683.887 L1010.5 683.887 L1009.94 683.887 L1009.38 683.887 L1008.82 683.887 L1008.26 683.887 L1007.7 683.887 L1007.14 683.887 L1006.58 683.887 L1006.02 683.887 L1005.46 683.887 L1004.91 683.887 L1004.35 683.887 L1003.79 683.887 L1003.23 683.887 L1002.67 683.887 L1002.11 683.887 L1001.55 683.887 L1000.99 683.887 L1000.43 683.887 L999.872 683.887 L999.313 683.887 L998.754 683.887 L998.194 683.887 L997.635 683.887 L997.076 683.887 L996.517 683.887 L995.957 683.887 L995.398 683.887 L994.839 683.887 L994.28 683.887 L993.72 683.887 L993.161 683.887 L992.602 683.887 L992.043 683.887 L991.483 683.887 L990.924 683.887 L990.365 683.887 L989.806 683.887 L989.246 683.887 L988.687 683.887 L988.128 683.887 L987.569 683.887 L987.009 683.887 L986.45 683.887 L985.891 683.887 L985.332 683.887 L984.772 683.887 L984.213 683.887 L983.654 683.887 L983.095 683.887 L982.535 683.887 L981.976 683.887 L981.417 683.887 L980.858 683.887 L980.298 683.887 L979.739 683.887 L979.18 683.887 L978.621 683.887 L978.061 683.887 L977.502 683.887 L976.943 683.887 L976.384 683.887 L975.824 683.887 L975.265 683.887 L974.706 683.887 L974.147 683.887 L973.587 683.887 L973.028 683.887 L972.469 683.887 L971.91 683.887 L971.35 683.887 L970.791 683.887 L970.232 683.887 L969.673 683.887 L969.113 683.887 L968.554 683.887 L967.995 683.887 L967.436 683.887 L966.876 683.887 L966.317 683.887 L965.758 683.887 L965.199 683.887 L964.639 683.887 L964.08 683.887 L963.521 683.887 L962.962 683.887 L962.402 683.887 L961.843 683.887 L961.284 683.887 L960.725 683.887 L960.165 683.887 L959.606 683.887 L959.047 683.887 L958.488 683.887 L957.928 683.887 L957.369 683.887 L956.81 683.887 L956.251 683.887 L955.691 683.887 L955.132 683.887 L954.573 683.887 L954.014 683.887 L953.454 683.887 L952.895 683.887 L952.336 683.887 L951.777 683.887 L951.217 683.887 L950.658 683.887 L950.099 683.887 L949.54 683.887 L948.98 683.887 L948.421 683.887 L947.862 683.887 L947.303 683.887 L946.743 683.887 L946.184 683.887 L945.625 683.887 L945.066 683.887 L944.506 683.887 L943.947 683.887 L943.388 683.887 L942.829 683.887 L942.269 683.887 L941.71 683.887 L941.151 683.887 L940.592 683.887 L940.032 683.887 L939.473 683.887 L938.914 683.887 L938.355 683.887 L937.795 683.887 L937.236 683.887 L936.677 683.887 L936.118 683.887 L935.558 683.887 L934.999 683.887 L934.44 683.887 L933.881 683.887 L933.321 683.887 L932.762 683.887 L932.203 683.887 L931.644 683.887 L931.084 683.887 L930.525 683.887 L929.966 683.887 L929.406 683.887 L928.847 683.887 L928.288 683.887 L927.729 683.887 L927.169 683.887 L926.61 683.887 L926.051 683.887 L925.492 683.887 L924.932 683.887 L924.373 683.887 L923.814 683.887 L923.255 683.887 L922.695 683.887 L922.136 683.887 L921.577 683.887 L921.018 683.887 L920.458 683.887 L919.899 683.887 L919.34 683.887 L918.781 683.887 L918.221 683.887 L917.662 683.887 L917.103 683.887 L916.544 683.887 L915.984 683.887 L915.425 683.887 L914.866 683.887 L914.307 683.887 L913.747 683.887 L913.188 683.887 L912.629 683.887 L912.07 683.887 L911.51 683.887 L910.951 683.887 L910.392 683.887 L909.833 683.887 L909.273 683.887 L908.714 683.887 L908.155 683.887 L907.596 683.887 L907.036 683.887 L906.477 683.887 L905.918 683.887 L905.359 683.887 L904.799 683.887 L904.24 683.887 L903.681 683.887 L903.122 683.887 L902.562 683.887 L902.003 683.887 L901.444 683.887 L900.885 683.887 L900.325 683.887 L899.766 683.887 L899.207 683.887 L898.648 683.887 L898.088 683.887 L897.529 683.887 L896.97 683.887 L896.411 683.887 L895.851 683.887 L895.292 683.887 L894.733 683.887 L894.174 683.887 L893.614 683.887 L893.055 683.887 L892.496 683.887 L891.937 683.887 L891.377 683.887 L890.818 683.887 L890.259 683.887 L889.7 683.887 L889.14 683.887 L888.581 683.887 L888.022 683.887 L887.463 683.887 L886.903 683.887 L886.344 683.887 L885.785 683.887 L885.226 683.887 L884.666 683.887 L884.107 683.887 L883.548 683.887 L882.989 683.887 L882.429 683.887 L881.87 683.887 L881.311 683.887 L880.752 683.887 L880.192 683.887 L879.633 683.887 L879.074 683.887 L878.515 683.887 L877.955 683.887 L877.396 683.887 L876.837 683.887 L876.278 683.887 L875.718 683.887 L875.159 683.887 L874.6 683.887 L874.041 683.887 L873.481 683.887 L872.922 683.887 L872.363 683.887 L871.804 683.887 L871.244 683.887 L870.685 683.887 L870.126 683.887 L869.567 683.887 L869.007 683.887 L868.448 683.887 L867.889 683.887 L867.33 683.887 L866.77 683.887 L866.211 683.887 L865.652 683.887 L865.093 683.887 L864.533 683.887 L863.974 683.887 L863.415 683.887 L862.856 683.887 L862.296 683.887 L861.737 683.887 L861.178 683.887 L860.619 683.887 L860.059 683.887 L859.5 683.887 L858.941 683.887 L858.382 683.887 L857.822 683.887 L857.263 683.887 L856.704 683.887 L856.145 683.887 L855.585 683.887 L855.026 683.887 L854.467 683.887 L853.908 683.887 L853.348 683.887 L852.789 683.887 L852.23 683.887 L851.671 683.887 L851.111 683.887 L850.552 683.887 L849.993 683.887 L849.434 683.887 L848.874 683.887 L848.315 683.887 L847.756 683.887 L847.197 683.887 L846.637 683.887 L846.078 683.887 L845.519 683.887 L844.96 683.887 L844.4 683.887 L843.841 683.887 L843.282 683.887 L842.723 683.887 L842.163 683.887 L841.604 683.887 L841.045 683.887 L840.486 683.887 L839.926 683.887 L839.367 683.887 L838.808 683.887 L838.249 683.887 L837.689 683.887 L837.13 683.887 L836.571 683.887 L836.012 683.887 L835.452 683.887 L834.893 683.887 L834.334 683.887 L833.775 683.887 L833.215 683.887 L832.656 683.887 L832.097 683.887 L831.538 683.887 L830.978 683.887 L830.419 683.887 L829.86 683.887 L829.301 683.887 L828.741 683.887 L828.182 683.887 L827.623 683.887 L827.064 683.887 L826.504 683.887 L825.945 683.887 L825.386 683.887 L824.827 683.887 L824.267 683.887 L823.708 683.887 L823.149 683.887 L822.59 683.887 L822.03 683.887 L821.471 683.887 L820.912 683.887 L820.353 683.887 L819.793 683.887 L819.234 683.887 L818.675 683.887 L818.116 683.887 L817.556 683.887 L816.997 683.887 L816.438 683.887 L815.879 683.887 L815.319 683.887 L814.76 683.887 L814.201 683.887 L813.642 683.887 L813.082 683.887 L812.523 683.887 L811.964 683.887 L811.405 683.887 L810.845 683.887 L810.286 683.887 L809.727 683.887 L809.168 683.887 L808.608 683.887 L808.049 683.887 L807.49 683.887 L806.931 683.887 L806.371 683.887 L805.812 683.887 L805.253 683.887 L804.693 683.887 L804.134 683.887 L803.575 683.887 L803.016 683.887 L802.456 683.887 L801.897 683.887 L801.338 683.887 L800.779 683.887 L800.219 683.887 L799.66 683.887 L799.101 683.887 L798.542 683.887 L797.982 683.887 L797.423 683.887 L796.864 683.887 L796.305 683.887 L795.745 683.887 L795.186 683.887 L794.627 683.887 L794.068 683.887 L793.508 683.887 L792.949 683.887 L792.39 683.887 L791.831 683.887 L791.271 683.887 L790.712 683.887 L790.153 683.887 L789.594 683.887 L789.034 683.887 L788.475 683.887 L787.916 683.887 L787.357 683.887 L786.797 683.887 L786.238 683.887 L785.679 683.887 L785.12 683.887 L784.56 683.887 L784.001 683.887 L783.442 683.887 L782.883 683.887 L782.323 683.887 L781.764 683.887 L781.205 683.887 L780.646 683.887 L780.086 683.887 L779.527 683.887 L778.968 683.887 L778.409 683.887 L777.849 683.887 L777.29 683.887 L776.731 683.887 L776.172 683.887 L775.612 683.887 L775.053 683.887 L774.494 683.887 L773.935 683.887 L773.375 683.887 L772.816 683.887 L772.257 683.887 L771.698 683.887 L771.138 683.887 L770.579 683.887 L770.02 683.887 L769.461 683.887 L768.901 683.887 L768.342 683.887 L767.783 683.887 L767.224 683.887 L766.664 683.887 L766.105 683.887 L765.546 683.887 L764.987 683.887 L764.427 683.887 L763.868 683.887 L763.309 683.887 L762.75 683.887 L762.19 683.887 L761.631 683.887 L761.072 683.887 L760.513 683.887 L759.953 683.887 L759.394 683.887 L758.835 683.887 L758.276 683.887 L757.716 683.887 L757.157 683.887 L756.598 683.887 L756.039 683.887 L755.479 683.887 L754.92 683.887 L754.361 683.887 L753.802 683.887 L753.242 683.887 L752.683 683.887 L752.124 683.887 L751.565 683.887 L751.005 683.887 L750.446 683.887 L749.887 683.887 L749.328 683.887 L748.768 683.887 L748.209 683.887 L747.65 683.887 L747.091 683.887 L746.531 683.887 L745.972 683.887 L745.413 683.887 L744.854 683.887 L744.294 683.887 L743.735 683.887 L743.176 683.887 L742.617 683.887 L742.057 683.887 L741.498 683.887 L740.939 683.887 L740.38 683.887 L739.82 683.887 L739.261 683.887 L738.702 683.887 L738.143 683.887 L737.583 683.887 L737.024 683.887 L736.465 683.887 L735.906 683.887 L735.346 683.887 L734.787 683.887 L734.228 683.887 L733.669 683.887 L733.109 683.887 L732.55 683.887 L731.991 683.887 L731.432 683.887 L730.872 683.887 L730.313 683.887 L729.754 683.887 L729.195 683.887 L728.635 683.887 L728.076 683.887 L727.517 683.887 L726.958 683.887 L726.398 683.887 L725.839 683.887 L725.28 683.887 L724.721 683.887 L724.161 683.887 L723.602 683.887 L723.043 683.887 L722.484 683.887 L721.924 683.887 L721.365 683.887 L720.806 683.887 L720.247 683.887  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip973)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.673 720.806,684.673 721.365,684.673 721.924,684.673 722.484,684.673 723.043,684.673 723.602,684.673 724.161,684.673 724.721,684.673 725.28,684.673 725.839,684.673 726.398,684.673 726.958,684.673 727.517,684.673 728.076,684.673 728.635,684.673 729.195,684.673 729.754,684.673 730.313,684.673 730.872,684.673 731.432,684.673 731.991,684.673 732.55,684.673 733.109,684.673 733.669,684.673 734.228,684.673 734.787,684.673 735.346,684.673 735.906,684.673 736.465,684.673 737.024,684.673 737.583,684.673 738.143,684.673 738.702,684.673 739.261,684.673 739.82,684.673 740.38,684.673 740.939,684.673 741.498,684.673 742.057,684.673 742.617,684.673 743.176,684.673 743.735,684.673 744.294,684.673 744.854,684.673 745.413,684.673 745.972,684.673 746.531,684.673 747.091,684.673 747.65,684.673 748.209,684.673 748.768,684.673 749.328,684.673 749.887,684.673 750.446,684.673 751.005,684.673 751.565,684.673 752.124,684.673 752.683,684.673 753.242,684.673 753.802,684.673 754.361,684.673 754.92,684.673 755.479,684.673 756.039,684.673 756.598,684.673 757.157,684.673 757.716,684.673 758.276,684.673 758.835,684.673 759.394,684.673 759.953,684.673 760.513,684.673 761.072,684.673 761.631,684.673 762.19,684.673 762.75,684.673 763.309,684.673 763.868,684.673 764.427,684.673 764.987,684.673 765.546,684.673 766.105,684.673 766.664,684.673 767.224,684.673 767.783,684.673 768.342,684.673 768.901,684.673 769.461,684.673 770.02,684.673 770.579,684.673 771.138,684.673 771.698,684.673 772.257,684.673 772.816,684.673 773.375,684.673 773.935,684.673 774.494,684.673 775.053,684.673 775.612,684.673 776.172,684.673 776.731,684.673 777.29,684.673 777.849,684.673 778.409,684.673 778.968,684.673 779.527,684.673 780.086,684.673 780.646,684.673 781.205,684.673 781.764,684.673 782.323,684.673 782.883,684.673 783.442,684.673 784.001,684.673 784.56,684.673 785.12,684.673 785.679,684.673 786.238,684.673 786.797,684.673 787.357,684.673 787.916,684.673 788.475,684.673 789.034,684.673 789.594,684.673 790.153,684.673 790.712,684.673 791.271,684.673 791.831,684.673 792.39,684.673 792.949,684.673 793.508,684.673 794.068,684.673 794.627,684.673 795.186,684.673 795.745,684.673 796.305,684.673 796.864,684.673 797.423,684.673 797.982,684.673 798.542,684.673 799.101,684.673 799.66,684.673 800.219,684.673 800.779,684.673 801.338,684.673 801.897,684.673 802.456,684.673 803.016,684.673 803.575,684.673 804.134,684.673 804.693,684.673 805.253,684.673 805.812,684.673 806.371,684.673 806.931,684.673 807.49,684.673 808.049,684.673 808.608,684.673 809.168,684.673 809.727,684.673 810.286,684.673 810.845,684.673 811.405,684.673 811.964,684.673 812.523,684.673 813.082,684.673 813.642,684.673 814.201,684.673 814.76,684.673 815.319,684.673 815.879,684.673 816.438,684.673 816.997,684.673 817.556,684.673 818.116,684.673 818.675,684.673 819.234,684.673 819.793,684.673 820.353,684.673 820.912,684.673 821.471,684.673 822.03,684.673 822.59,684.673 823.149,684.673 823.708,684.673 824.267,684.673 824.827,684.673 825.386,684.673 825.945,684.673 826.504,684.673 827.064,684.673 827.623,684.673 828.182,684.673 828.741,684.673 829.301,684.673 829.86,684.673 830.419,684.673 830.978,684.673 831.538,684.673 832.097,684.673 832.656,684.673 833.215,684.673 833.775,684.673 834.334,684.673 834.893,684.673 835.452,684.673 836.012,684.673 836.571,684.673 837.13,684.673 837.689,684.673 838.249,684.673 838.808,684.673 839.367,684.673 839.926,684.673 840.486,684.673 841.045,684.673 841.604,684.673 842.163,684.673 842.723,684.673 843.282,684.673 843.841,684.673 844.4,684.673 844.96,684.673 845.519,684.673 846.078,684.673 846.637,684.673 847.197,684.673 847.756,684.673 848.315,684.673 848.874,684.673 849.434,684.673 849.993,684.673 850.552,684.673 851.111,684.673 851.671,684.673 852.23,684.673 852.789,684.673 853.348,684.673 853.908,684.673 854.467,684.673 855.026,684.673 855.585,684.673 856.145,684.673 856.704,684.673 857.263,684.673 857.822,684.673 858.382,684.673 858.941,684.673 859.5,684.673 860.059,684.673 860.619,684.673 861.178,684.673 861.737,684.673 862.296,684.673 862.856,684.673 863.415,684.673 863.974,684.673 864.533,684.673 865.093,684.673 865.652,684.673 866.211,684.673 866.77,684.673 867.33,684.673 867.889,684.673 868.448,684.673 869.007,684.673 869.567,684.673 870.126,684.673 870.685,684.673 871.244,684.673 871.804,684.673 872.363,684.673 872.922,684.673 873.481,684.673 874.041,684.673 874.6,684.673 875.159,684.673 875.718,684.673 876.278,684.673 876.837,684.673 877.396,684.673 877.955,684.673 878.515,684.673 879.074,684.673 879.633,684.673 880.192,684.673 880.752,684.673 881.311,684.673 881.87,684.673 882.429,684.673 882.989,684.673 883.548,684.673 884.107,684.673 884.666,684.673 885.226,684.673 885.785,684.673 886.344,684.673 886.903,684.673 887.463,684.673 888.022,684.673 888.581,684.673 889.14,684.673 889.7,684.673 890.259,684.673 890.818,684.673 891.377,684.673 891.937,684.673 892.496,684.673 893.055,684.673 893.614,684.673 894.174,684.673 894.733,684.673 895.292,684.673 895.851,684.673 896.411,684.673 896.97,684.673 897.529,684.673 898.088,684.673 898.648,684.673 899.207,684.673 899.766,684.673 900.325,684.673 900.885,684.673 901.444,684.673 902.003,684.673 902.562,684.673 903.122,684.673 903.681,684.673 904.24,684.673 904.799,684.673 905.359,684.673 905.918,684.673 906.477,684.673 907.036,684.673 907.596,684.673 908.155,684.673 908.714,684.673 909.273,684.673 909.833,684.673 910.392,684.673 910.951,684.673 911.51,684.673 912.07,684.673 912.629,684.673 913.188,684.673 913.747,684.673 914.307,684.673 914.866,684.673 915.425,684.673 915.984,684.673 916.544,684.673 917.103,684.673 917.662,684.673 918.221,684.673 918.781,684.673 919.34,684.673 919.899,684.673 920.458,684.673 921.018,684.673 921.577,684.673 922.136,684.673 922.695,684.673 923.255,684.673 923.814,684.673 924.373,684.673 924.932,684.673 925.492,684.673 926.051,684.673 926.61,684.673 927.169,684.673 927.729,684.673 928.288,684.673 928.847,684.673 929.406,684.673 929.966,684.673 930.525,684.673 931.084,684.673 931.644,684.673 932.203,684.673 932.762,684.673 933.321,684.673 933.881,684.673 934.44,684.673 934.999,684.673 935.558,684.673 936.118,684.673 936.677,684.673 937.236,684.673 937.795,684.673 938.355,684.673 938.914,684.673 939.473,684.673 940.032,684.673 940.592,684.673 941.151,684.673 941.71,684.673 942.269,684.673 942.829,684.673 943.388,684.673 943.947,684.673 944.506,684.673 945.066,684.673 945.625,684.673 946.184,684.673 946.743,684.673 947.303,684.673 947.862,684.673 948.421,684.673 948.98,684.673 949.54,684.673 950.099,684.673 950.658,684.673 951.217,684.673 951.777,684.673 952.336,684.673 952.895,684.673 953.454,684.673 954.014,684.673 954.573,684.673 955.132,684.673 955.691,684.673 956.251,684.673 956.81,684.673 957.369,684.673 957.928,684.673 958.488,684.673 959.047,684.673 959.606,684.673 960.165,684.673 960.725,684.673 961.284,684.673 961.843,684.673 962.402,684.673 962.962,684.673 963.521,684.673 964.08,684.673 964.639,684.673 965.199,684.673 965.758,684.673 966.317,684.673 966.876,684.673 967.436,684.673 967.995,684.673 968.554,684.673 969.113,684.673 969.673,684.673 970.232,684.673 970.791,684.673 971.35,684.673 971.91,684.673 972.469,684.673 973.028,684.673 973.587,684.673 974.147,684.673 974.706,684.673 975.265,684.673 975.824,684.673 976.384,684.673 976.943,684.673 977.502,684.673 978.061,684.673 978.621,684.673 979.18,684.673 979.739,684.673 980.298,684.673 980.858,684.673 981.417,684.673 981.976,684.673 982.535,684.673 983.095,684.673 983.654,684.673 984.213,684.673 984.772,684.673 985.332,684.673 985.891,684.673 986.45,684.673 987.009,684.673 987.569,684.673 988.128,684.673 988.687,684.673 989.246,684.673 989.806,684.673 990.365,684.673 990.924,684.673 991.483,684.673 992.043,684.673 992.602,684.673 993.161,684.673 993.72,684.673 994.28,684.673 994.839,684.673 995.398,684.673 995.957,684.673 996.517,684.673 997.076,684.673 997.635,684.673 998.194,684.673 998.754,684.673 999.313,684.673 999.872,684.673 1000.43,684.673 1000.99,684.673 1001.55,684.673 1002.11,684.673 1002.67,684.673 1003.23,684.673 1003.79,684.673 1004.35,684.673 1004.91,684.673 1005.46,684.673 1006.02,684.673 1006.58,684.673 1007.14,684.673 1007.7,684.673 1008.26,684.673 1008.82,684.673 1009.38,684.673 1009.94,684.673 1010.5,684.673 1011.06,684.673 1011.62,684.673 1012.18,684.673 1012.73,684.673 1013.29,684.673 1013.85,684.673 1014.41,684.673 1014.97,684.673 1015.53,684.673 1016.09,684.673 1016.65,684.673 1017.21,684.673 1017.77,684.673 1018.33,684.673 1018.89,684.673 1019.45,684.673 1020.01,684.673 1020.56,684.673 1021.12,684.673 1021.68,684.673 1022.24,684.673 1022.8,684.673 1023.36,684.673 1023.92,684.673 1024.48,684.673 1025.04,684.673 1025.6,684.673 1026.16,684.673 1026.72,684.673 1027.28,684.673 1027.83,684.673 1028.39,684.673 1028.95,684.673 1029.51,684.673 1030.07,684.673 1030.63,684.673 1031.19,684.673 1031.75,684.673 1032.31,684.673 1032.87,684.673 1033.43,684.673 1033.99,684.673 1034.55,684.673 1035.1,684.673 1035.66,684.673 1036.22,684.673 1036.78,684.673 1037.34,684.673 1037.9,684.673 1038.46,684.673 1039.02,684.673 1039.58,684.673 1040.14,684.673 1040.7,684.673 1041.26,684.673 1041.82,684.673 1042.38,684.673 1042.93,684.673 1043.49,684.673 1044.05,684.673 1044.61,684.673 1045.17,684.673 1045.73,684.673 1046.29,684.673 1046.85,684.673 1047.41,684.673 1047.97,684.673 1048.53,684.673 1049.09,684.673 1049.65,684.673 1050.2,684.673 1050.76,684.673 1051.32,684.673 1051.88,684.673 1052.44,684.673 1053,684.673 1053.56,684.673 1054.12,684.673 1054.68,684.673 1055.24,684.673 1055.8,684.673 1056.36,684.673 1056.92,684.673 1057.48,684.673 1058.03,684.673 1058.59,684.673 1059.15,684.673 1059.71,684.673 1060.27,684.673 1060.83,684.673 1061.39,684.673 1061.95,684.673 1062.51,684.673 1063.07,684.673 1063.63,684.673 1064.19,684.673 1064.75,684.673 1065.3,684.673 1065.86,684.673 1066.42,684.673 1066.98,684.673 1067.54,684.673 1068.1,684.673 1068.66,684.673 1069.22,684.673 1069.78,684.673 1070.34,684.673 1070.9,684.673 1071.46,684.673 1072.02,684.673 1072.57,684.673 1073.13,684.673 1073.69,684.673 1074.25,684.673 1074.81,684.673 1075.37,684.673 1075.93,684.673 1076.49,684.673 1077.05,684.673 1077.61,684.673 1078.17,684.673 1078.73,684.673 1079.29,684.673 1079.85,684.673 1080.4,684.673 1080.96,684.673 1081.52,684.673 1082.08,684.673 1082.64,684.673 1083.2,684.673 1083.76,684.673 1084.32,684.673 1084.88,684.673 1085.44,684.673 1086,684.673 1086.56,684.673 1087.12,684.673 1087.67,684.673 1088.23,684.673 1088.79,684.673 1089.35,684.673 1089.91,684.673 1090.47,684.673 1091.03,684.673 1091.59,684.673 1092.15,684.673 1092.71,684.673 1093.27,684.673 1093.83,684.673 1094.39,684.673 1094.94,684.673 1095.5,684.673 1096.06,684.673 1096.62,684.673 1097.18,684.673 1097.74,684.673 1098.3,684.673 1098.86,684.673 1099.42,684.673 1099.98,684.673 1100.54,684.673 1101.1,684.673 1101.66,684.673 1102.22,684.673 1102.77,684.673 1103.33,684.673 1103.89,684.673 1104.45,684.673 1105.01,684.673 1105.57,684.673 1106.13,684.673 1106.69,684.673 1107.25,684.673 1107.81,684.673 1108.37,684.673 1108.93,684.673 1109.49,684.673 1110.04,684.673 1110.6,684.673 1111.16,684.673 1111.72,684.673 1112.28,684.673 1112.84,684.673 1113.4,684.673 1113.96,684.673 1114.52,684.673 1115.08,684.673 1115.64,684.673 1116.2,684.673 1116.76,684.673 1117.31,684.673 1117.87,684.673 1118.43,684.673 1118.99,684.673 1119.55,684.673 1120.11,684.673 1120.67,684.673 1121.23,684.673 1121.79,684.673 1122.35,684.673 1122.91,684.673 1123.47,684.673 1124.03,684.673 1124.59,684.673 1125.14,684.673 1125.7,684.673 1126.26,684.673 1126.82,684.673 1127.38,684.673 1127.94,684.673 1128.5,684.673 1129.06,684.673 1129.62,684.673 1130.18,684.673 1130.74,684.673 1131.3,684.673 1131.86,684.673 1132.41,684.673 1132.97,684.673 1133.53,684.673 1134.09,684.673 1134.65,684.673 1135.21,684.673 1135.77,684.673 1136.33,684.673 1136.89,684.673 1137.45,684.673 1138.01,684.673 1138.57,684.673 1139.13,684.673 1139.68,684.673 1140.24,684.673 1140.8,684.673 1141.36,684.673 1141.92,684.673 1142.48,684.673 1143.04,684.673 1143.6,684.673 1144.16,684.673 1144.72,684.673 1145.28,684.673 1145.84,684.673 1146.4,684.673 1146.96,684.673 1147.51,684.673 1148.07,684.673 1148.63,684.673 1149.19,684.673 1149.75,684.673 1150.31,684.673 1150.87,684.673 1151.43,684.673 1151.99,684.673 1152.55,684.673 1153.11,684.673 1153.67,684.673 1154.23,684.673 1154.78,684.673 1155.34,684.673 1155.9,684.673 1156.46,684.673 1157.02,684.673 1157.58,684.673 1158.14,684.673 1158.7,684.673 1159.26,684.673 1159.82,684.673 1160.38,684.673 1160.94,684.673 1161.5,684.673 1162.05,684.673 1162.61,684.673 1163.17,684.673 1163.73,684.673 1164.29,684.673 1164.85,684.673 1165.41,684.673 1165.97,684.673 1166.53,684.673 1167.09,684.673 1167.65,684.673 1168.21,684.673 1168.77,684.673 1169.33,684.673 1169.88,684.673 1170.44,684.673 1171,684.673 1171.56,684.673 1172.12,684.673 1172.68,684.673 1173.24,684.673 1173.8,684.673 1174.36,684.673 1174.92,684.673 1175.48,684.673 1176.04,684.673 1176.6,684.673 1177.15,684.673 1177.71,684.673 1178.27,684.673 1178.83,684.673 1179.39,684.673 1179.95,684.673 1180.51,684.673 1181.07,684.673 1181.63,684.673 1182.19,684.673 1182.75,684.673 1183.31,684.673 1183.87,684.673 1184.43,684.673 1184.98,684.673 1185.54,684.673 1186.1,684.673 1186.66,684.673 1187.22,684.673 1187.78,684.673 1188.34,684.673 1188.9,684.673 1189.46,684.673 1190.02,684.673 1190.58,684.673 1191.14,684.673 1191.7,684.673 1192.25,684.673 1192.81,684.673 1193.37,684.673 1193.93,684.673 1194.49,684.673 1195.05,684.673 1195.61,684.673 1196.17,684.673 1196.73,684.673 1197.29,684.673 1197.85,684.673 1198.41,684.673 1198.97,684.673 1199.52,684.673 1200.08,684.673 1200.64,684.673 1201.2,684.673 1201.76,684.673 1202.32,684.673 1202.88,684.673 1203.44,684.673 1204,684.673 1204.56,684.673 1205.12,684.673 1205.68,684.673 1206.24,684.673 1206.8,684.673 1207.35,684.673 1207.91,684.673 1208.47,684.673 1209.03,684.673 1209.59,684.673 1210.15,684.673 1210.71,684.673 1211.27,684.673 1211.83,684.673 1212.39,684.673 1212.95,684.673 1213.51,684.673 1214.07,684.673 1214.62,684.673 1215.18,684.673 1215.74,684.673 1216.3,684.673 1216.86,684.673 1217.42,684.673 1217.98,684.673 1218.54,684.673 1219.1,684.673 1219.66,684.673 1220.22,684.673 1220.78,684.673 1221.34,684.673 1221.89,684.673 1222.45,684.673 1223.01,684.673 1223.57,684.673 1224.13,684.673 1224.69,684.673 1225.25,684.673 1225.81,684.673 1226.37,684.673 1226.93,684.673 1227.49,684.673 1228.05,684.673 1228.61,684.673 1229.17,684.673 1229.72,684.673 1230.28,684.673 1230.84,684.673 1231.4,684.673 1231.96,684.673 1232.52,684.673 1233.08,684.673 1233.64,684.673 1234.2,684.673 1234.76,684.673 1235.32,684.673 1235.88,684.673 1236.44,684.673 1236.99,684.673 1237.55,684.673 1238.11,684.673 1238.67,684.673 1239.23,684.673 1239.79,684.673 1240.35,684.673 1240.91,684.673 1241.47,684.673 1242.03,684.673 1242.59,684.673 1243.15,684.673 1243.71,684.673 1244.26,684.673 1244.82,684.673 1245.38,684.673 1245.94,684.673 1246.5,684.673 1247.06,684.673 1247.62,684.673 1248.18,684.673 1248.74,684.673 1249.3,684.673 1249.86,684.673 1250.42,684.673 1250.98,684.673 1251.54,684.673 1252.09,684.673 1252.65,684.673 1253.21,684.673 1253.77,684.673 1254.33,684.673 1254.89,684.673 1255.45,684.673 1256.01,684.673 1256.57,684.673 1257.13,684.673 1257.69,684.673 1258.25,684.673 1258.81,684.673 1259.36,684.673 1259.92,684.673 1260.48,684.673 1261.04,684.673 1261.6,684.673 1262.16,684.673 1262.72,684.673 1263.28,684.673 1263.84,684.673 1264.4,684.673 1264.96,684.673 1265.52,684.673 1266.08,684.673 1266.63,684.673 1267.19,684.673 1267.75,684.673 1268.31,684.673 1268.87,684.673 1269.43,684.673 1269.99,684.673 1270.55,684.673 1271.11,684.673 1271.67,684.673 1272.23,684.673 1272.79,684.673 1273.35,684.673 1273.91,684.673 1274.46,684.673 1275.02,684.673 1275.58,684.673 1276.14,684.673 1276.7,684.673 1277.26,684.673 1277.82,684.673 1278.38,684.673 1278.94,684.673 1279.5,684.673 1280.06,684.673 1280.62,684.673 1281.18,684.673 1281.73,684.673 1282.29,684.673 1282.85,684.673 1283.41,684.673 1283.97,684.673 1284.53,684.673 1285.09,684.673 1285.65,684.673 1286.21,684.673 1286.77,684.673 1287.33,684.673 1287.89,684.673 1288.45,684.673 1289,684.673 1289.56,684.673 1290.12,684.673 1290.68,684.673 1291.24,684.673 1291.8,684.673 1292.36,684.673 1292.92,684.673 1293.48,684.673 1294.04,684.673 1294.6,684.673 1295.16,684.673 1295.72,684.673 1296.28,684.673 1296.83,684.673 1297.39,684.673 1297.95,684.673 1298.51,684.673 1299.07,684.673 1299.63,684.673 1300.19,684.673 1300.75,684.673 1301.31,684.673 1301.87,684.673 1302.43,684.673 1302.99,684.673 1303.55,684.673 1304.1,684.673 1304.66,684.673 1305.22,684.673 1305.78,684.673 1306.34,684.673 1306.9,684.673 1307.46,684.673 1308.02,684.673 1308.58,684.673 1309.14,684.673 1309.7,684.673 1310.26,684.673 1310.82,684.673 1311.38,684.673 1311.93,684.673 1312.49,684.673 1313.05,684.673 1313.61,684.673 1314.17,684.673 1314.73,684.673 1315.29,684.673 1315.85,684.673 1316.41,684.673 1316.97,684.673 1317.53,684.673 1318.09,684.673 1318.65,684.673 1319.2,684.673 1319.76,684.673 1320.32,684.673 1320.88,684.673 1321.44,684.673 1322,684.673 1322.56,684.673 1323.12,684.673 1323.68,684.673 1324.24,684.673 1324.8,684.673 1325.36,684.673 1325.92,684.673 1326.47,684.673 1327.03,684.673 1327.59,684.673 1328.15,684.673 1328.71,684.673 1329.27,684.673 1329.83,684.673 1330.39,684.673 1330.95,684.673 1331.51,684.673 1332.07,684.673 1332.63,684.673 1333.19,684.673 1333.75,684.673 1334.3,684.673 1334.86,684.673 1335.42,684.673 1335.98,684.673 1336.54,684.673 1337.1,684.673 1337.66,684.673 1338.22,684.673 1338.78,684.673 1339.34,684.673 1339.9,684.673 1340.46,684.673 1341.02,684.673 1341.57,684.673 1342.13,684.673 1342.69,684.673 1343.25,684.673 1343.81,684.673 1344.37,684.673 1344.93,684.673 1345.49,684.673 1346.05,684.673 1346.61,684.673 1347.17,684.673 1347.73,684.673 1348.29,684.673 1348.84,684.673 1349.4,684.673 1349.96,684.673 1350.52,684.673 1351.08,684.673 1351.64,684.673 1352.2,684.673 1352.76,684.673 1353.32,684.673 1353.88,684.673 1354.44,684.673 1355,684.673 1355.56,684.673 1356.12,684.673 1356.67,684.673 1357.23,684.673 1357.79,684.673 1358.35,684.673 1358.91,684.673 1359.47,684.673 1360.03,684.673 1360.59,684.673 1361.15,684.673 1361.71,684.673 1362.27,684.673 1362.83,684.673 1363.39,684.673 1363.94,684.673 1364.5,684.673 1365.06,684.673 1365.62,684.673 1366.18,684.673 1366.74,684.673 1367.3,684.673 1367.86,684.673 1368.42,684.673 1368.98,684.673 1369.54,684.673 1370.1,684.673 1370.66,684.673 1371.21,684.673 1371.77,684.673 1372.33,684.673 1372.89,684.673 1373.45,684.673 1374.01,684.673 1374.57,684.673 1375.13,684.673 1375.69,684.673 1376.25,684.673 1376.81,684.673 1377.37,684.673 1377.93,684.673 1378.49,684.673 1379.04,684.673 1379.6,684.673 1380.16,684.673 1380.72,684.673 1381.28,684.673 1381.84,684.673 1382.4,684.673 1382.96,684.673 1383.52,684.673 1384.08,684.673 1384.64,684.673 1385.2,684.673 1385.76,684.673 1386.31,684.673 1386.87,684.673 1387.43,684.673 1387.99,684.673 1388.55,684.673 1389.11,684.673 1389.67,684.673 1390.23,684.673 1390.79,684.673 1391.35,684.673 1391.91,684.673 1392.47,684.673 1393.03,684.673 1393.58,684.673 1394.14,684.673 1394.7,684.673 1395.26,684.673 1395.82,684.673 1396.38,684.673 1396.94,684.673 1397.5,684.673 1398.06,684.673 1398.62,684.673 1399.18,684.673 1399.74,684.673 1400.3,684.673 1400.86,684.673 1401.41,684.673 1401.97,684.673 1402.53,684.673 1403.09,684.673 1403.65,684.673 1404.21,684.673 1404.77,684.673 1405.33,684.673 1405.89,684.673 1406.45,684.673 1407.01,684.673 1407.57,684.673 1408.13,684.673 1408.68,684.673 1409.24,684.673 1409.8,684.673 1410.36,684.673 1410.92,684.673 1411.48,684.673 1412.04,684.673 1412.6,684.673 1413.16,684.673 1413.72,684.673 1414.28,684.673 1414.84,684.673 1415.4,684.673 1415.95,684.673 1416.51,684.673 1417.07,684.673 1417.63,684.673 1418.19,684.673 1418.75,684.673 1419.31,684.673 1419.87,684.673 1420.43,684.673 1420.99,684.673 1421.55,684.673 1422.11,684.673 1422.67,684.673 1423.23,684.673 1423.78,684.673 1424.34,684.673 1424.9,684.673 1425.46,684.673 1426.02,684.673 1426.58,684.673 1427.14,684.673 1427.7,684.673 1428.26,684.673 1428.82,684.673 1429.38,684.673 1429.94,684.673 1430.5,684.673 1431.05,684.673 1431.61,684.673 1432.17,684.673 1432.73,684.673 1433.29,684.673 1433.85,684.673 1434.41,684.673 1434.97,684.673 1435.53,684.673 1436.09,684.673 1436.65,684.673 1437.21,684.673 1437.77,684.673 1438.33,684.673 1438.88,684.673 1439.44,684.673 1440,684.673 1440.56,684.673 1441.12,684.673 1441.68,684.673 1442.24,684.673 1442.8,684.673 1443.36,684.673 1443.92,684.673 1444.48,684.673 1445.04,684.673 1445.6,684.673 1446.15,684.673 1446.71,684.673 1447.27,684.673 1447.83,684.673 1448.39,684.673 1448.95,684.673 1449.51,684.673 1450.07,684.673 1450.63,684.673 1451.19,684.673 1451.75,684.673 1452.31,684.673 1452.87,684.673 1453.42,684.673 1453.98,684.673 1454.54,684.673 1455.1,684.673 1455.66,684.673 1456.22,684.673 1456.78,684.673 1457.34,684.673 1457.9,684.673 1458.46,684.673 1459.02,684.673 1459.58,684.673 1460.14,684.673 1460.7,684.673 1461.25,684.673 1461.81,684.673 1462.37,684.673 1462.93,684.673 1463.49,684.673 1464.05,684.673 1464.61,684.673 1465.17,684.673 1465.73,684.673 1466.29,684.673 1466.85,684.673 1467.41,684.673 1467.97,684.673 1468.52,684.673 1469.08,684.673 1469.64,684.673 1470.2,684.673 1470.76,684.673 1471.32,684.673 1471.88,684.673 1472.44,684.673 1473,684.673 1473.56,684.673 1474.12,684.673 1474.68,684.673 1475.24,684.673 1475.79,684.673 1476.35,684.673 1476.91,684.673 1477.47,684.673 1478.03,684.673 1478.59,684.673 1479.15,684.673 1479.71,684.673 1480.27,684.673 1480.83,684.673 1481.39,684.673 1481.95,684.673 1482.51,684.673 1483.07,684.673 1483.62,684.673 1484.18,684.673 1484.74,684.673 1485.3,684.673 1485.86,684.673 1486.42,684.673 1486.98,684.673 1487.54,684.673 1488.1,684.673 1488.66,684.673 1489.22,684.673 1489.78,684.673 1490.34,684.673 1490.89,684.673 1491.45,684.673 1492.01,684.673 1492.57,684.673 1493.13,684.673 1493.69,684.673 1494.25,684.673 1494.81,684.673 1495.37,684.673 1495.93,684.673 1496.49,684.673 1497.05,684.673 1497.61,684.673 1498.16,684.673 1498.72,684.673 1499.28,684.673 1499.84,684.673 1500.4,684.673 1500.96,684.673 1501.52,684.673 1502.08,684.673 1502.64,684.673 1503.2,684.673 1503.76,684.673 1504.32,684.673 1504.88,684.673 1505.44,684.673 1505.99,684.673 1506.55,684.673 1507.11,684.673 1507.67,684.673 1508.23,684.673 1508.79,684.673 1509.35,684.673 1509.91,684.673 1510.47,684.673 1511.03,684.673 1511.59,684.673 1512.15,684.673 1512.71,684.673 1513.26,684.673 1513.82,684.673 1514.38,684.673 1514.94,684.673 1515.5,684.673 1516.06,684.673 1516.62,684.673 1517.18,684.673 1517.74,684.673 1518.3,684.673 1518.86,684.673 1519.42,684.673 1519.98,684.673 1520.53,684.673 1521.09,684.673 1521.65,684.673 1522.21,684.673 1522.77,684.673 1523.33,684.673 1523.89,684.673 1524.45,684.673 1525.01,684.673 1525.57,684.673 1526.13,684.673 1526.69,684.673 1527.25,684.673 1527.81,684.673 1528.36,684.673 1528.92,684.673 1529.48,684.673 1530.04,684.673 1530.6,684.673 1531.16,684.673 1531.72,684.673 1532.28,684.673 1532.84,684.673 1533.4,684.673 1533.96,684.673 1534.52,684.673 1535.08,684.673 1535.63,684.673 1536.19,684.673 1536.75,684.673 1537.31,684.673 1537.87,684.673 1538.43,684.673 1538.99,684.673 1539.55,684.673 1540.11,684.673 1540.67,684.673 1541.23,684.673 1541.79,684.673 1542.35,684.673 1542.9,684.673 1543.46,684.673 1544.02,684.673 1544.58,684.673 1545.14,684.673 1545.7,684.673 1546.26,684.673 1546.82,684.673 1547.38,684.673 1547.94,684.673 1548.5,684.673 1549.06,684.673 1549.62,684.673 1550.18,684.673 1550.73,684.673 1551.29,684.673 1551.85,684.673 1552.41,684.673 1552.97,684.673 1553.53,684.673 1554.09,684.673 1554.65,684.673 1555.21,684.673 1555.77,684.673 1556.33,684.673 1556.89,684.673 1557.45,684.673 1558,684.673 1558.56,684.673 1559.12,684.673 1559.68,684.673 1560.24,684.673 1560.8,684.673 1561.36,684.673 1561.92,684.673 1562.48,684.673 1563.04,684.673 1563.6,684.673 1564.16,684.673 1564.72,684.673 1565.28,684.673 1565.83,684.673 1566.39,684.673 1566.95,684.673 1567.51,684.673 1568.07,684.673 1568.63,684.673 1569.19,684.673 1569.75,684.673 1570.31,684.673 1570.87,684.673 1571.43,684.673 1571.99,684.673 1572.55,684.673 1573.1,684.673 1573.66,684.673 1574.22,684.673 1574.78,684.673 1575.34,684.673 1575.9,684.673 1576.46,684.673 1577.02,684.673 1577.58,684.673 1578.14,684.673 1578.7,684.673 1579.26,684.673 1579.82,684.673 1580.37,684.673 1580.93,684.673 1581.49,684.673 1582.05,684.673 1582.61,684.673 1583.17,684.673 1583.73,684.673 1584.29,684.673 1584.85,684.673 1585.41,684.673 1585.97,684.673 1586.53,684.673 1587.09,684.673 1587.65,684.673 1588.2,684.673 1588.76,684.673 1589.32,684.673 1589.88,684.673 1590.44,684.673 1591,684.673 1591.56,684.673 1592.12,684.673 1592.68,684.673 1593.24,684.673 1593.8,684.673 1594.36,684.673 1594.92,684.673 1595.47,684.673 1596.03,684.673 1596.59,684.673 1597.15,684.673 1597.71,684.673 1598.27,684.673 1598.83,684.673 1599.39,684.673 1599.95,684.673 1600.51,684.673 1601.07,684.673 1601.63,684.673 1602.19,684.673 1602.74,684.673 1603.3,684.673 1603.86,684.673 1604.42,684.673 1604.98,684.673 1605.54,684.673 1606.1,684.673 1606.66,684.673 1607.22,684.673 1607.78,684.673 1608.34,684.673 1608.9,684.673 1609.46,684.673 1610.02,684.673 1610.57,684.673 1611.13,684.673 1611.69,684.673 1612.25,684.673 1612.81,684.673 1613.37,684.673 1613.93,684.673 1614.49,684.673 1615.05,684.673 1615.61,684.673 1616.17,684.673 1616.73,684.673 1617.29,684.673 1617.84,684.673 1618.4,684.673 1618.96,684.673 1619.52,684.673 1620.08,684.673 1620.64,684.673 1621.2,684.673 1621.76,684.673 1622.32,684.673 1622.88,684.673 1623.44,684.673 1624,684.673 1624.56,684.673 1625.11,684.673 1625.67,684.673 1626.23,684.673 1626.79,684.673 1627.35,684.673 1627.91,684.673 1628.47,684.673 1629.03,684.673 1629.59,684.673 1630.15,684.673 1630.71,684.673 1631.27,684.673 1631.83,684.673 1632.39,684.673 1632.94,684.673 1633.5,684.673 1634.06,684.673 1634.62,684.673 1635.18,684.673 1635.74,684.673 1636.3,684.673 1636.86,684.673 1637.42,684.673 1637.98,684.673 1638.54,684.673 1639.1,684.673 1639.66,684.673 1640.21,684.673 1640.77,684.673 1641.33,684.673 1641.89,684.673 1642.45,684.673 1643.01,684.673 1643.57,684.673 1644.13,684.673 1644.69,684.673 1645.25,684.673 1645.81,684.673 1646.37,684.673 1646.93,684.673 1647.48,684.673 1648.04,684.673 1648.6,684.673 1649.16,684.673 1649.72,684.673 1650.28,684.673 1650.84,684.673 1651.4,684.673 1651.96,684.673 1652.52,684.673 1653.08,684.673 1653.64,684.673 1654.2,684.673 1654.76,684.673 1655.31,684.673 1655.87,684.673 1656.43,684.673 1656.99,684.673 1657.55,684.673 1658.11,684.673 1658.67,684.673 1659.23,684.673 1659.79,684.673 1660.35,684.673 1660.91,684.673 1661.47,684.673 1662.03,684.673 1662.58,684.673 1663.14,684.673 1663.7,684.673 1664.26,684.673 1664.82,684.673 1665.38,684.673 1665.94,684.673 1666.5,684.673 1667.06,684.673 1667.62,684.673 1668.18,684.673 1668.74,684.673 1669.3,684.673 1669.85,684.673 1670.41,684.673 1670.97,684.673 1671.53,684.673 1672.09,684.673 1672.65,684.673 1673.21,684.673 1673.77,684.673 1674.33,684.673 1674.89,684.673 1675.45,684.673 1676.01,684.673 1676.57,684.673 1677.13,684.673 1677.68,684.673 1678.24,684.673 1678.8,684.673 1679.36,684.673 1679.92,684.673 1680.48,684.673 1681.04,684.673 1681.6,684.673 1682.16,684.673 1682.72,684.673 1683.28,684.673 1683.84,684.673 1684.4,684.673 1684.95,684.673 1685.51,684.673 1686.07,684.673 1686.63,684.673 1687.19,684.673 1687.75,684.673 1688.31,684.673 1688.87,684.673 1689.43,684.673 1689.99,684.673 1690.55,684.673 1691.11,684.673 1691.67,684.673 1692.23,684.673 1692.78,684.673 1693.34,684.673 1693.9,684.673 1694.46,684.673 1695.02,684.673 1695.58,684.673 1696.14,684.673 1696.7,684.673 1697.26,684.673 1697.82,684.673 1698.38,684.673 1698.94,684.673 1699.5,684.673 1700.05,684.673 1700.61,684.673 1701.17,684.673 1701.73,684.673 1702.29,684.673 1702.85,684.673 1703.41,684.673 1703.97,684.673 1704.53,684.673 1705.09,684.673 1705.65,684.673 1706.21,684.673 1706.77,684.673 1707.32,684.673 1707.88,684.673 1708.44,684.673 1709,684.673 1709.56,684.673 1710.12,684.673 1710.68,684.673 1711.24,684.673 1711.8,684.673 1712.36,684.673 1712.92,684.673 1713.48,684.673 1714.04,684.673 1714.6,684.673 1715.15,684.673 1715.71,684.673 1716.27,684.673 1716.83,684.673 1717.39,684.673 1717.95,684.673 1718.51,684.673 1719.07,684.673 1719.63,684.673 1720.19,684.673 1720.75,684.673 1721.31,684.673 1721.87,684.673 1722.42,684.673 1722.98,684.673 1723.54,684.673 1724.1,684.673 1724.66,684.673 1725.22,684.673 1725.78,684.673 1726.34,684.673 1726.9,684.673 1727.46,684.673 1728.02,684.673 1728.58,684.673 1729.14,684.673 1729.69,684.673 1730.25,684.673 1730.81,684.673 1731.37,684.673 1731.93,684.673 1732.49,684.673 1733.05,684.673 1733.61,684.673 1734.17,684.673 1734.73,684.673 1735.29,684.673 1735.85,684.673 1736.41,684.673 1736.97,684.673 1737.52,684.673 1738.08,684.673 1738.64,684.673 1739.2,684.673 1739.76,684.673 1740.32,684.673 1740.88,684.673 1741.44,684.673 1742,684.673 1742.56,684.673 1743.12,684.673 1743.68,684.673 1744.24,684.673 1744.79,684.673 1745.35,684.673 1745.91,684.673 1746.47,684.673 1747.03,684.673 1747.59,684.673 1748.15,684.673 1748.71,684.673 1749.27,684.673 1749.83,684.673 1750.39,684.673 1750.95,684.673 1751.51,684.673 1752.06,684.673 1752.62,684.673 1753.18,684.673 1753.74,684.673 1754.3,684.673 1754.86,684.673 1755.42,684.673 1755.98,684.673 1756.54,684.673 1757.1,684.673 1757.66,684.673 1758.22,684.673 1758.78,684.673 1759.34,684.673 1759.89,684.673 1760.45,684.673 1761.01,684.673 1761.57,684.673 1762.13,684.673 1762.69,684.673 1763.25,684.673 1763.81,684.673 1764.37,684.673 1764.93,684.673 1765.49,684.673 1766.05,684.673 1766.61,684.673 1767.16,684.673 1767.72,684.673 1768.28,684.673 1768.84,684.673 1769.4,684.673 1769.96,684.673 1770.52,684.673 1771.08,684.673 1771.64,684.673 1772.2,684.673 1772.76,684.673 1773.32,684.673 1773.88,684.673 1774.43,684.673 1774.99,684.673 1775.55,684.673 1776.11,684.673 1776.67,684.673 1777.23,684.673 1777.79,684.673 1778.35,684.673 1778.91,684.673 1779.47,684.673 1780.03,684.673 1780.59,684.673 1781.15,684.673 1781.71,684.673 1782.26,684.673 1782.82,684.673 1783.38,684.673 1783.94,684.673 1784.5,684.673 1785.06,684.673 1785.62,684.673 1786.18,684.673 1786.74,684.673 1787.3,684.673 1787.86,684.673 1788.42,684.673 1788.98,684.673 1789.53,684.673 1790.09,684.673 1790.65,684.673 1791.21,684.673 1791.77,684.673 1792.33,684.673 1792.89,684.673 1793.45,684.673 1794.01,684.673 1794.57,684.673 1795.13,684.673 1795.69,684.673 1796.25,684.673 1796.8,684.673 1797.36,684.673 1797.92,684.673 1798.48,684.673 1799.04,684.673 1799.6,684.673 1800.16,684.673 1800.72,684.673 1801.28,684.673 1801.84,684.673 1802.4,684.673 1802.96,684.673 1803.52,684.673 1804.08,684.673 1804.63,684.673 1805.19,684.673 1805.75,684.673 1806.31,684.673 1806.87,684.673 1807.43,684.673 1807.99,684.673 1808.55,684.673 1809.11,684.673 1809.67,684.673 1810.23,684.673 1810.79,684.673 1811.35,684.673 1811.9,684.673 1812.46,684.673 1813.02,684.673 1813.58,684.673 1814.14,684.673 1814.7,684.673 1815.26,684.673 1815.82,684.673 1816.38,684.673 1816.94,684.673 1817.5,684.673 1818.06,684.673 1818.62,684.673 1819.18,684.673 1819.73,684.673 1820.29,684.673 1820.85,684.673 1821.41,684.673 1821.97,684.673 1822.53,684.673 1823.09,684.673 1823.65,684.673 1824.21,684.673 1824.77,684.673 1825.33,684.673 1825.89,684.673 1826.45,684.673 1827,684.673 1827.56,684.673 1828.12,684.673 1828.68,684.673 1829.24,684.673 1829.8,684.673 1830.36,684.673 1830.92,684.673 1831.48,684.673 1832.04,684.673 1832.6,684.673 1833.16,684.673 1833.72,684.673 1834.27,684.673 1834.83,684.673 1835.39,684.673 1835.95,684.673 1836.51,684.673 1837.07,684.673 1837.63,684.673 1838.19,684.673 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0321033732051585 ± 0.025271185600446305\nProjected Energy: -4.02056451886839 ± (0.00415429341600948, 0.003959175054546016)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.54699</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3876e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1531e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.0299e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.473e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.825e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.338e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.97986399832163\n -3.363124291613362\n -0.7590191922770746\n  0.13584182219622498\n  0.15789998694607732\n  0.8767114411781378\n  1.5305929970973162\n  1.5835732611867455\n  3.072870330325851\n  3.125672653951848\n  4.862107221562169\n  6.260694850380591\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
