var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2103203695859716 ± 0.0014604583770373718\n   G2(1) = 0.9166187802237148 ± 0.0007669072260751434\n   G2(2) = 0.9832826440979981 ± 0.0005353019478406172\n   G2(3) = 0.9898767817706025 ± 0.0009432993295669464\n   G2(4) = 0.9832826440979981 ± 0.0005353019478406172\n   G2(5) = 0.9166187802237148 ± 0.0007669072260751434\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.044548178381318 ± 0.12469953908184564\n   Replica 2: -4.008825198724857 ± 0.14986405680118062\n   Replica 3: -4.0061456374560835 ± 0.1336025634734964\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.9 2211.02,1261.9 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.55 2211.02,1003.55 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.206 2211.02,745.206 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.861 2211.02,486.861 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.517 2211.02,228.517 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.9 423.181,1261.9 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.55 423.181,1003.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.206 423.181,745.206 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.861 423.181,486.861 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.517 423.181,228.517 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M356.339 1247.69 Q352.728 1247.69 350.899 1251.26 Q349.094 1254.8 349.094 1261.93 Q349.094 1269.04 350.899 1272.6 Q352.728 1276.14 356.339 1276.14 Q359.973 1276.14 361.779 1272.6 Q363.608 1269.04 363.608 1261.93 Q363.608 1254.8 361.779 1251.26 Q359.973 1247.69 356.339 1247.69 M356.339 1243.99 Q362.149 1243.99 365.205 1248.6 Q368.284 1253.18 368.284 1261.93 Q368.284 1270.66 365.205 1275.26 Q362.149 1279.85 356.339 1279.85 Q350.529 1279.85 347.45 1275.26 Q344.395 1270.66 344.395 1261.93 Q344.395 1253.18 347.45 1248.6 Q350.529 1243.99 356.339 1243.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M290.043 1016.9 L306.363 1016.9 L306.363 1020.83 L284.418 1020.83 L284.418 1016.9 Q287.08 1014.14 291.664 1009.51 Q296.27 1004.86 297.451 1003.52 Q299.696 1000.99 300.576 999.257 Q301.478 997.498 301.478 995.808 Q301.478 993.053 299.534 991.317 Q297.613 989.581 294.511 989.581 Q292.312 989.581 289.858 990.345 Q287.427 991.109 284.65 992.66 L284.65 987.938 Q287.474 986.803 289.927 986.225 Q292.381 985.646 294.418 985.646 Q299.789 985.646 302.983 988.331 Q306.177 991.016 306.177 995.507 Q306.177 997.637 305.367 999.558 Q304.58 1001.46 302.474 1004.05 Q301.895 1004.72 298.793 1007.94 Q295.691 1011.13 290.043 1016.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 986.271 L334.58 986.271 L334.58 990.206 L320.506 990.206 L320.506 998.678 Q321.524 998.331 322.543 998.169 Q323.562 997.984 324.58 997.984 Q330.367 997.984 333.747 1001.16 Q337.126 1004.33 337.126 1009.74 Q337.126 1015.32 333.654 1018.42 Q330.182 1021.5 323.862 1021.5 Q321.687 1021.5 319.418 1021.13 Q317.173 1020.76 314.765 1020.02 L314.765 1015.32 Q316.849 1016.46 319.071 1017.01 Q321.293 1017.57 323.77 1017.57 Q327.774 1017.57 330.112 1015.46 Q332.45 1013.35 332.45 1009.74 Q332.45 1006.13 330.112 1004.03 Q327.774 1001.92 323.77 1001.92 Q321.895 1001.92 320.02 1002.34 Q318.168 1002.75 316.224 1003.63 L316.224 986.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 989.35 Q352.728 989.35 350.899 992.914 Q349.094 996.456 349.094 1003.59 Q349.094 1010.69 350.899 1014.26 Q352.728 1017.8 356.339 1017.8 Q359.973 1017.8 361.779 1014.26 Q363.608 1010.69 363.608 1003.59 Q363.608 996.456 361.779 992.914 Q359.973 989.35 356.339 989.35 M356.339 985.646 Q362.149 985.646 365.205 990.252 Q368.284 994.836 368.284 1003.59 Q368.284 1012.31 365.205 1016.92 Q362.149 1021.5 356.339 1021.5 Q350.529 1021.5 347.45 1016.92 Q344.395 1012.31 344.395 1003.59 Q344.395 994.836 347.45 990.252 Q350.529 985.646 356.339 985.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M286.062 727.926 L304.418 727.926 L304.418 731.861 L290.344 731.861 L290.344 740.333 Q291.363 739.986 292.381 739.824 Q293.4 739.639 294.418 739.639 Q300.205 739.639 303.585 742.81 Q306.964 745.982 306.964 751.398 Q306.964 756.977 303.492 760.079 Q300.02 763.157 293.701 763.157 Q291.525 763.157 289.256 762.787 Q287.011 762.417 284.603 761.676 L284.603 756.977 Q286.687 758.111 288.909 758.667 Q291.131 759.222 293.608 759.222 Q297.613 759.222 299.951 757.116 Q302.288 755.009 302.288 751.398 Q302.288 747.787 299.951 745.681 Q297.613 743.574 293.608 743.574 Q291.733 743.574 289.858 743.991 Q288.006 744.408 286.062 745.287 L286.062 727.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 731.005 Q322.566 731.005 320.737 734.57 Q318.932 738.111 318.932 745.241 Q318.932 752.347 320.737 755.912 Q322.566 759.454 326.177 759.454 Q329.811 759.454 331.617 755.912 Q333.446 752.347 333.446 745.241 Q333.446 738.111 331.617 734.57 Q329.811 731.005 326.177 731.005 M326.177 727.301 Q331.987 727.301 335.043 731.908 Q338.122 736.491 338.122 745.241 Q338.122 753.968 335.043 758.574 Q331.987 763.157 326.177 763.157 Q320.367 763.157 317.288 758.574 Q314.233 753.968 314.233 745.241 Q314.233 736.491 317.288 731.908 Q320.367 727.301 326.177 727.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 731.005 Q352.728 731.005 350.899 734.57 Q349.094 738.111 349.094 745.241 Q349.094 752.347 350.899 755.912 Q352.728 759.454 356.339 759.454 Q359.973 759.454 361.779 755.912 Q363.608 752.347 363.608 745.241 Q363.608 738.111 361.779 734.57 Q359.973 731.005 356.339 731.005 M356.339 727.301 Q362.149 727.301 365.205 731.908 Q368.284 736.491 368.284 745.241 Q368.284 753.968 365.205 758.574 Q362.149 763.157 356.339 763.157 Q350.529 763.157 347.45 758.574 Q344.395 753.968 344.395 745.241 Q344.395 736.491 347.45 731.908 Q350.529 727.301 356.339 727.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M284.835 469.581 L307.057 469.581 L307.057 471.572 L294.511 504.141 L289.627 504.141 L301.432 473.516 L284.835 473.516 L284.835 469.581 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M316.224 469.581 L334.58 469.581 L334.58 473.516 L320.506 473.516 L320.506 481.989 Q321.524 481.641 322.543 481.479 Q323.562 481.294 324.58 481.294 Q330.367 481.294 333.747 484.465 Q337.126 487.637 337.126 493.053 Q337.126 498.632 333.654 501.734 Q330.182 504.813 323.862 504.813 Q321.687 504.813 319.418 504.442 Q317.173 504.072 314.765 503.331 L314.765 498.632 Q316.849 499.766 319.071 500.322 Q321.293 500.877 323.77 500.877 Q327.774 500.877 330.112 498.771 Q332.45 496.664 332.45 493.053 Q332.45 489.442 330.112 487.336 Q327.774 485.229 323.77 485.229 Q321.895 485.229 320.02 485.646 Q318.168 486.063 316.224 486.942 L316.224 469.581 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 472.66 Q352.728 472.66 350.899 476.225 Q349.094 479.766 349.094 486.896 Q349.094 494.002 350.899 497.567 Q352.728 501.109 356.339 501.109 Q359.973 501.109 361.779 497.567 Q363.608 494.002 363.608 486.896 Q363.608 479.766 361.779 476.225 Q359.973 472.66 356.339 472.66 M356.339 468.956 Q362.149 468.956 365.205 473.563 Q368.284 478.146 368.284 486.896 Q368.284 495.623 365.205 500.229 Q362.149 504.813 356.339 504.813 Q350.529 504.813 347.45 500.229 Q344.395 495.623 344.395 486.896 Q344.395 478.146 347.45 473.563 Q350.529 468.956 356.339 468.956 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M256.664 241.861 L264.303 241.861 L264.303 215.496 L255.992 217.162 L255.992 212.903 L264.256 211.237 L268.932 211.237 L268.932 241.861 L276.571 241.861 L276.571 245.797 L256.664 245.797 L256.664 241.861 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M296.015 214.315 Q292.404 214.315 290.576 217.88 Q288.77 221.422 288.77 228.551 Q288.77 235.658 290.576 239.222 Q292.404 242.764 296.015 242.764 Q299.65 242.764 301.455 239.222 Q303.284 235.658 303.284 228.551 Q303.284 221.422 301.455 217.88 Q299.65 214.315 296.015 214.315 M296.015 210.612 Q301.826 210.612 304.881 215.218 Q307.96 219.801 307.96 228.551 Q307.96 237.278 304.881 241.884 Q301.826 246.468 296.015 246.468 Q290.205 246.468 287.127 241.884 Q284.071 237.278 284.071 228.551 Q284.071 219.801 287.127 215.218 Q290.205 210.612 296.015 210.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M326.177 214.315 Q322.566 214.315 320.737 217.88 Q318.932 221.422 318.932 228.551 Q318.932 235.658 320.737 239.222 Q322.566 242.764 326.177 242.764 Q329.811 242.764 331.617 239.222 Q333.446 235.658 333.446 228.551 Q333.446 221.422 331.617 217.88 Q329.811 214.315 326.177 214.315 M326.177 210.612 Q331.987 210.612 335.043 215.218 Q338.122 219.801 338.122 228.551 Q338.122 237.278 335.043 241.884 Q331.987 246.468 326.177 246.468 Q320.367 246.468 317.288 241.884 Q314.233 237.278 314.233 228.551 Q314.233 219.801 317.288 215.218 Q320.367 210.612 326.177 210.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M356.339 214.315 Q352.728 214.315 350.899 217.88 Q349.094 221.422 349.094 228.551 Q349.094 235.658 350.899 239.222 Q352.728 242.764 356.339 242.764 Q359.973 242.764 361.779 239.222 Q363.608 235.658 363.608 228.551 Q363.608 221.422 361.779 217.88 Q359.973 214.315 356.339 214.315 M356.339 210.612 Q362.149 210.612 365.205 215.218 Q368.284 219.801 368.284 228.551 Q368.284 237.278 365.205 241.884 Q362.149 246.468 356.339 246.468 Q350.529 246.468 347.45 241.884 Q344.395 237.278 344.395 228.551 Q344.395 219.801 347.45 215.218 Q350.529 210.612 356.339 210.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.517 4017.76,228.517 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.27 457.691,1250.03 458.259,1249.73 458.828,1248.34 459.396,1247.96 459.964,1247.51 460.533,1246.92 461.101,1246.32 461.669,1245.64 462.238,1244.88 462.806,1244.01 463.375,1243.07 463.943,1242.04 464.511,1240.92 465.08,1239.68 465.648,1238.33 466.216,1235.83 466.785,1234.25 467.353,1232.53 467.921,1229.63 468.49,1225.53 469.058,1223.34 469.626,1221.02 470.195,1218.54 470.763,1214.85 471.331,1211.01 471.9,1205.96 472.468,1202.74 473.036,1198.26 473.605,1193.58 474.173,1189.75 474.741,1185.69 475.31,1181.49 475.878,1174.94 476.446,1169.37 477.015,1164.53 477.583,1157.44 478.152,1152.29 478.72,1145.88 479.288,1140.26 479.857,1133.36 480.425,1126.25 480.993,1118.99 481.562,1110.54 482.13,1104.01 482.698,1097.23 483.267,1089.3 483.835,1081.16 484.403,1071.79 484.972,1064.38 485.54,1055.66 486.108,1046.96 486.677,1039.15 487.245,1029.97 487.813,1021.58 488.382,1012.23 488.95,1003.79 489.518,993.949 490.087,985.116 490.655,972.984 491.224,964.04 491.792,952.929 492.36,942.832 492.929,933.503 493.497,922.141 494.065,912.705 494.634,901.19 495.202,889.71 495.77,880.268 496.339,866.697 496.907,853.207 497.475,842.91 498.044,833.594 498.612,823.376 499.18,813.132 499.749,803.867 500.317,793.691 500.885,784.387 501.454,775.187 502.022,764.846 502.59,753.565 503.159,742.346 503.727,731.258 504.295,720.296 504.864,709.336 505.432,700.648 506.001,691.024 506.569,678.405 507.137,665.992 507.706,655.878 508.274,646.909 508.842,637.912 509.411,625.966 509.979,616.337 510.547,607.973 511.116,600.749 511.684,592.772 512.252,583.785 512.821,575.984 513.389,569.358 513.957,559.394 514.526,550.017 515.094,543.774 515.662,536.435 516.231,529.413 516.799,523.341 517.367,516.437 517.936,509.657 518.504,502.913 519.072,497.274 519.641,491.885 520.209,482.264 520.778,477.95 521.346,471.871 521.914,465.681 522.483,460.808 523.051,453.995 523.619,449.169 524.188,443.482 524.756,435.868 525.324,431.461 525.893,425.105 526.461,420.859 527.029,415.668 527.598,412.041 528.166,408.12 528.734,403.363 529.303,399.82 529.871,396.114 530.439,390.525 531.008,385.217 531.576,380.914 532.144,376.923 532.713,372.886 533.281,366.885 533.85,364.192 534.418,359.57 534.986,355.983 535.555,354.87 536.123,348.253 536.691,343.975 537.26,339.006 537.828,332.144 538.396,327.871 538.965,325.666 539.533,323.338 540.101,320.314 540.67,319.412 541.238,317.341 541.806,316.399 542.375,315.356 542.943,312.397 543.511,311.728 544.08,310.869 544.648,308.814 545.216,307.88 545.785,306.929 546.353,305.92 546.921,305.051 547.49,303.09 548.058,301.162 548.627,301.232 549.195,298.431 549.763,297.452 550.332,295.681 550.9,292.8 551.468,291.946 552.037,289.206 552.605,287.582 553.173,283.929 553.742,281.528 554.31,282.5 554.878,282.061 555.447,281.809 556.015,282.565 556.583,280.136 557.152,279.786 557.72,277.286 558.288,275.996 558.857,274.404 559.425,274.117 559.993,272.713 560.562,270.221 561.13,271.236 561.698,271.069 562.267,273 562.835,271.357 563.404,267.77 563.972,266.555 564.54,265.7 565.109,263.553 565.677,265.625 566.245,266.43 566.814,266.177 567.382,266.83 567.95,264.386 568.519,263.25 569.087,263.197 569.655,263.008 570.224,264.89 570.792,265.552 571.36,262.149 571.929,260.59 572.497,260.26 573.065,262.198 573.634,261.956 574.202,263.659 574.77,263.079 575.339,263.787 575.907,260.154 576.476,259.899 577.044,258.625 577.612,258.399 578.181,260.29 578.749,257.428 579.317,257.337 579.886,257.1 580.454,256.602 581.022,254.158 581.591,254.05 582.159,253.936 582.727,252.739 583.296,250.519 583.864,249.527 584.432,251.642 585.001,248.377 585.569,247.501 586.137,242.138 586.706,242.562 587.274,240.948 587.842,241.505 588.411,241.016 588.979,239.356 589.547,239.233 590.116,243.122 590.684,242.627 591.253,242.993 591.821,245.533 592.389,243.786 592.958,243.076 593.526,242.374 594.094,239.7 594.663,240.235 595.231,242.822 595.799,241.975 596.368,242.418 596.936,243.906 597.504,246.053 598.073,244.094 598.641,242.993 599.209,241.929 599.778,241.895 600.346,244.37 600.914,245.462 601.483,244.509 602.051,242.302 602.619,243.541 603.188,239.539 603.756,240.746 604.325,239.976 604.893,239.327 605.461,241.781 606.03,244.987 606.598,243.986 607.166,247.045 607.735,245.602 608.303,244.457 608.871,244.345 609.44,245.282 610.008,242.813 610.576,243.618 611.145,244.592 611.713,243.378 612.281,242.283 612.85,242.305 613.418,241.154 613.986,241.949 614.555,241.057 615.123,241.159 615.691,240.905 616.26,238.765 616.828,238.839 617.396,238.763 617.965,236.72 618.533,237.977 619.102,238.103 619.67,238.077 620.238,237.095 620.807,236.225 621.375,236.276 621.943,234.555 622.512,236.813 623.08,235.75 623.648,235.932 624.217,236.131 624.785,236.48 625.353,236.632 625.922,235.781 626.49,234.857 627.058,234.945 627.627,234.072 628.195,234.478 628.763,233.902 629.332,233.301 629.9,230.54 630.468,232.96 631.037,231.212 631.605,231.612 632.173,232.539 632.742,231.908 633.31,231.385 633.879,233.929 634.447,233.193 635.015,234.504 635.584,236.752 636.152,235.696 636.72,233.683 637.289,234.106 637.857,233.529 638.425,233.949 638.994,235.147 639.562,235.32 640.13,235.43 640.699,236.729 641.267,235.697 641.835,236.8 642.404,235.594 642.972,234.614 643.54,233.691 644.109,232.999 644.677,231.158 645.245,230.694 645.814,231.278 646.382,231.555 646.951,233.015 647.519,233.25 648.087,232.396 648.656,232.814 649.224,233.086 649.792,232.304 650.361,231.655 650.929,233.182 651.497,231.522 652.066,231.863 652.634,234.208 653.202,233.39 653.771,231.784 654.339,230.958 654.907,232.214 655.476,232.575 656.044,232.854 656.612,231.747 657.181,232.105 657.749,233.351 658.317,232.551 658.886,231.759 659.454,233.429 660.022,235.701 660.591,235.699 661.159,236.71 661.728,239.845 662.296,238.675 662.864,238.583 663.433,237.374 664.001,238.349 664.569,238.112 665.138,238.991 665.706,239.613 666.274,240.234 666.843,240.876 667.411,238.426 667.979,238.157 668.548,239.056 669.116,239.643 669.684,236.291 670.253,237.158 670.821,236.022 671.389,235.074 671.958,236.942 672.526,235.737 673.094,236.742 673.663,237.335 674.231,239.044 674.799,236.369 675.368,234.312 675.936,232.168 676.505,228.963 677.073,229.389 677.641,228.362 678.21,229.594 678.778,228.605 679.346,231.889 679.915,231.85 680.483,232.902 681.051,231.941 681.62,232.046 682.188,233.099 682.756,235.169 683.325,236.948 683.893,238.77 684.461,238.513 685.03,236.971 685.598,237.713 686.166,235.245 686.735,233.916 687.303,232.838 687.871,233.775 688.44,234.663 689.008,237.553 689.577,235.07 690.145,234.791 690.713,235.331 691.282,236.43 691.85,237.305 692.418,236.932 692.987,235.287 693.555,233.049 694.123,231.714 694.692,231.763 695.26,230.703 695.828,230.959 696.397,231.071 696.965,232.043 697.533,233.268 698.102,233.046 698.67,231.952 699.238,230.871 699.807,230.542 700.375,231.548 700.943,228.41 701.512,227.811 702.08,227.178 702.648,227.444 703.217,228.702 703.785,227.787 704.354,227.003 704.922,229.335 705.49,229.258 706.059,228.28 706.627,230.636 707.195,228.653 707.764,228.851 708.332,228.002 708.9,229.373 709.469,228.462 710.037,229.284 710.605,228.278 711.174,227.431 711.742,228.88 712.31,230.142 712.879,232.232 713.447,234.398 714.015,234.186 714.584,234.177 715.152,232.987 715.72,233.19 716.289,232.201 716.857,232.094 717.425,232.059 717.994,231.996 718.562,231.953 719.131,231.895 719.699,235 720.267,233.747 720.836,233.645 721.404,233.378 721.972,232.151 722.541,232.078 723.109,231.943 723.677,230.751 724.246,231.917 724.814,230.749 725.382,229.821 725.951,229.831 726.519,231.763 727.087,230.42 727.656,230.475 728.224,232.362 728.792,233.191 729.361,232.941 729.929,232.955 730.497,231.764 731.066,230.773 731.634,227.769 732.203,227.704 732.771,226.924 733.339,225.96 733.908,226.483 734.476,227.744 735.044,229.005 735.613,229.072 736.181,227.275 736.749,227.623 737.318,226.873 737.886,226.07 738.454,225.332 739.023,223.623 739.591,224.069 740.159,225.603 740.728,222.824 741.296,221.434 741.864,223.067 742.433,223.769 743.001,223.227 743.569,222.61 744.138,222.3 744.706,222.071 745.274,222.694 745.843,224.601 746.411,226.302 746.98,227.911 747.548,229.217 748.116,229.552 748.685,229.837 749.253,226.869 749.821,229.359 750.39,229.55 750.958,229.763 751.526,227.984 752.095,231.368 752.663,231.296 753.231,230.425 753.8,229.513 754.368,227.843 754.936,229.103 755.505,230.384 756.073,232.517 756.641,233.208 757.21,232.02 757.778,231.302 758.346,230.33 758.915,228.342 759.483,227.704 760.052,224.867 760.62,224.348 761.188,223.93 761.757,225.648 762.325,224.975 762.893,226.46 763.462,227.712 764.03,228.17 764.598,228.61 765.167,227.882 765.735,228.143 766.303,228.465 766.872,232.071 767.44,231.967 768.008,231.045 768.577,231.173 769.145,231.32 769.713,231.38 770.282,233.582 770.85,233.552 771.418,233.538 771.987,234.58 772.555,234.455 773.123,235.286 773.692,236.198 774.26,235.989 774.829,236.803 775.397,236.478 775.965,236.071 776.534,234.322 777.102,235.308 777.67,234.087 778.239,233.966 778.807,231.405 779.375,230.309 779.944,230.535 780.512,231.635 781.08,231.794 781.649,229.762 782.217,229.835 782.785,231.015 783.354,233.321 783.922,233.139 784.49,231.835 785.059,229.82 785.627,229.911 786.195,230.119 786.764,230.03 787.332,229.949 787.9,231.078 788.469,231.021 789.037,229.135 789.606,229.219 790.174,228.403 790.742,230.645 791.311,230.461 791.879,233.613 792.447,234.151 793.016,234.964 793.584,234.731 794.152,234.446 794.721,234.237 795.289,232.996 795.857,230.62 796.426,227.348 796.994,227.645 797.562,227.864 798.131,226.903 798.699,227.203 799.267,229.63 799.836,229.723 800.404,230.626 800.972,230.606 801.541,228.742 802.109,231.115 802.678,233.351 803.246,234.114 803.814,234.942 804.383,235.698 804.951,236.066 805.519,235.642 806.088,237.258 806.656,236.829 807.224,235.167 807.793,232.631 808.361,235.473 808.929,235.9 809.498,234.471 810.066,236.227 810.634,236.752 811.203,234.859 811.771,235.391 812.339,233.866 812.908,232.511 813.476,231.258 814.044,231.127 814.613,230.965 815.181,230.771 815.749,229.551 816.318,230.564 816.886,228.422 817.455,228.439 818.023,229.493 818.591,229.169 819.16,228.201 819.728,230.282 820.296,230.156 820.865,230.103 821.433,230.045 822.001,227.807 822.57,228.968 823.138,229.856 823.706,230.864 824.275,230.634 824.843,231.528 825.411,231.242 825.98,228.107 826.548,228.341 827.116,228.297 827.685,229.324 828.253,229.199 828.821,229.233 829.39,230.112 829.958,229.948 830.526,229.816 831.095,229.705 831.663,229.518 832.232,228.492 832.8,228.513 833.368,228.47 833.937,228.332 834.505,228.323 835.073,227.384 835.642,227.412 836.21,227.391 836.778,226.433 837.347,226.524 837.915,227.823 838.483,227.981 839.052,227.918 839.62,226.893 840.188,228.295 840.757,228.344 841.325,227.3 841.893,226.389 842.462,227.68 843.03,228.965 843.598,228.985 844.167,229.074 844.735,228.268 845.304,227.23 845.872,225.195 846.44,227.274 847.009,226.378 847.577,227.721 848.145,226.558 848.714,224.511 849.282,225.872 849.85,225.998 850.419,226.202 850.987,226.315 851.555,228.602 852.124,229.453 852.692,229.387 853.26,229.463 853.829,228.578 854.397,229.7 854.965,231.604 855.534,230.638 856.102,230.607 856.67,229.504 857.239,228.411 857.807,226.276 858.375,225.275 858.944,225.506 859.512,226.803 860.081,227.154 860.649,226.312 861.217,226.411 861.786,226.696 862.354,224.671 862.922,225.172 863.491,224.365 864.059,225.733 864.627,227.203 865.196,228.067 865.764,227.995 866.332,228.135 866.901,228.175 867.469,227.443 868.037,227.726 868.606,225.773 869.174,228.178 869.742,229.198 870.311,231.235 870.879,230.94 871.447,233.066 872.016,231.584 872.584,230.506 873.152,229.432 873.721,229.501 874.289,229.642 874.858,229.611 875.426,227.43 875.994,228.537 876.563,227.528 877.131,227.604 877.699,226.857 878.268,226.04 878.836,227.304 879.404,227.729 879.973,225.873 880.541,224.965 881.109,225.452 881.678,226.005 882.246,226.292 882.814,226.502 883.383,227.871 883.951,225.746 884.519,225.811 885.088,227.41 885.656,228.459 886.224,233.738 886.793,228.229 887.361,227.284 887.93,227.558 888.498,228.684 889.066,227.836 889.635,227.969 890.203,227.953 890.771,228.193 891.34,227.553 891.908,231.032 892.476,227.766 893.045,229.922 893.613,227.93 894.181,230.139 894.75,230.126 895.318,228.053 895.886,228.195 896.455,227.135 897.023,228.409 897.591,227.465 898.16,227.573 898.728,225.795 899.296,227.108 899.865,226.54 900.433,228.982 901.001,228.012 901.57,230.294 902.138,232.234 902.707,228.818 903.275,228.963 903.843,228.991 904.412,228.789 904.98,229.791 905.548,231.798 906.117,229.645 906.685,230.767 907.253,231.737 907.822,233.63 908.39,229.308 908.958,228.333 909.527,225.448 910.095,225.628 910.663,228.035 911.232,229.045 911.8,228.094 912.368,229.213 912.937,228.413 913.505,227.599 914.073,228.908 914.642,226.873 915.21,229.342 915.779,230.34 916.347,230.387 916.915,230.154 917.484,231.055 918.052,233.167 918.62,230.69 919.189,230.544 919.757,229.628 920.325,229.573 920.894,229.757 921.462,228.675 922.03,228.735 922.599,229.831 923.167,229.758 923.735,229.703 924.304,229.734 924.872,229.581 925.44,229.538 926.009,229.677 926.577,232.816 927.145,231.576 927.714,230.256 928.282,231.198 928.85,231.216 929.419,234.04 929.987,233.813 930.556,232.33 931.124,231.14 931.692,230.806 932.261,230.565 932.829,229.65 933.397,229.476 933.966,226.579 934.534,228.875 935.102,228.926 935.671,228.764 936.239,229.737 936.807,228.722 937.376,228.672 937.944,225.874 938.512,227.235 939.081,224.292 939.649,225.53 940.217,226.831 940.786,227.869 941.354,227.076 941.922,228.318 942.491,228.414 943.059,227.361 943.627,229.523 944.196,230.529 944.764,230.657 945.333,231.65 945.901,231.391 946.469,231.285 947.038,228.132 947.606,230.046 948.174,230.767 948.743,229.879 949.311,228.803 949.879,229.71 950.448,227.505 951.016,227.67 951.584,229.671 952.153,229.816 952.721,230.668 953.289,230.518 953.858,232.444 954.426,229.974 954.994,228.922 955.563,228.717 956.131,227.931 956.699,227.956 957.268,229.12 957.836,229.225 958.405,231.04 958.973,232.778 959.541,232.123 960.11,231.988 960.678,230.483 961.246,229.462 961.815,229.224 962.383,227.242 962.951,227.396 963.52,224.609 964.088,223.876 964.656,223.448 965.225,223.875 965.793,227.35 966.361,226.462 966.93,226.821 967.498,229.299 968.066,229.285 968.635,229.431 969.203,234.482 969.771,234.089 970.34,232.757 970.908,232.472 971.476,233.221 972.045,233.798 972.613,232.274 973.182,234.025 973.75,235.827 974.318,237.424 974.887,236.727 975.455,237.119 976.023,235.555 976.592,236.033 977.16,236.507 977.728,234.802 978.297,233.103 978.865,234.958 979.433,233.635 980.002,235.053 980.57,235.572 981.138,234.904 981.707,234.205 982.275,233.666 982.843,231.165 983.412,231.807 983.98,232.6 984.548,232.443 985.117,233.031 985.685,231.683 986.253,232.396 986.822,230.107 987.39,230.774 987.959,230.342 988.527,230.162 989.095,229.868 989.664,228.593 990.232,228.338 990.8,229.069 991.369,230.966 991.937,229.879 992.505,229.646 993.074,227.448 993.642,229.562 994.21,229.459 994.779,229.078 995.347,229.984 995.915,228.695 996.484,230.595 997.052,228.027 997.62,228.915 998.189,228.917 998.757,229.81 999.325,227.53 999.894,225.312 1000.46,224.193 1001.03,223.306 1001.6,223.62 1002.17,222.778 1002.74,225.055 1003.3,225.972 1003.87,226.022 1004.44,228.194 1005.01,226.852 1005.58,225.969 1006.15,227.91 1006.71,226.727 1007.28,227.811 1007.85,226.675 1008.42,226.608 1008.99,226.844 1009.56,225.828 1010.12,227.22 1010.69,228.099 1011.26,228.1 1011.83,227.998 1012.4,226.936 1012.97,227.008 1013.53,229.133 1014.1,228.9 1014.67,226.61 1015.24,225.552 1015.81,226.595 1016.38,226.712 1016.94,226.777 1017.51,224.901 1018.08,223.941 1018.65,222.118 1019.22,223.323 1019.79,221.447 1020.35,223.926 1020.92,224.332 1021.49,224.651 1022.06,226.764 1022.63,226.867 1023.2,228.062 1023.76,227.091 1024.33,229.217 1024.9,229.257 1025.47,227.166 1026.04,227.468 1026.61,227.502 1027.17,227.435 1027.74,227.634 1028.31,226.572 1028.88,224.831 1029.45,225.306 1030.02,225.405 1030.58,224.55 1031.15,225.949 1031.72,227.105 1032.29,226.138 1032.86,226.448 1033.43,227.578 1033.99,229.697 1034.56,228.601 1035.13,228.608 1035.7,226.5 1036.27,226.726 1036.84,226.813 1037.4,227.851 1037.97,227.996 1038.54,227.033 1039.11,228.046 1039.68,228.915 1040.25,230.886 1040.81,231.744 1041.38,232.393 1041.95,234.088 1042.52,230.495 1043.09,231.298 1043.66,232.238 1044.22,234.099 1044.79,232.644 1045.36,232.236 1045.93,233.015 1046.5,236.569 1047.07,232.976 1047.63,232.52 1048.2,230.707 1048.77,229.313 1049.34,230.275 1049.91,230.01 1050.48,228.75 1051.05,228.588 1051.61,227.267 1052.18,226.154 1052.75,225.287 1053.32,225.576 1053.89,224.806 1054.46,225.233 1055.02,225.241 1055.59,225.63 1056.16,226.87 1056.73,224.812 1057.3,225.088 1057.87,222.348 1058.43,220.68 1059,222.06 1059.57,224.55 1060.14,227.932 1060.71,228.049 1061.28,226.89 1061.84,226.05 1062.41,226.075 1062.98,226.073 1063.55,226.179 1064.12,224.632 1064.69,225.013 1065.25,226.292 1065.82,223.481 1066.39,224.883 1066.96,225.038 1067.53,226.373 1068.1,226.682 1068.66,226.808 1069.23,225.935 1069.8,226.249 1070.37,224.723 1070.94,225.99 1071.51,227.259 1072.07,228.546 1072.64,228.581 1073.21,232.707 1073.78,232.333 1074.35,232.162 1074.92,232.088 1075.48,232.042 1076.05,230.789 1076.62,230.67 1077.19,231.701 1077.76,230.586 1078.33,229.391 1078.89,229.501 1079.46,229.564 1080.03,229.603 1080.6,229.62 1081.17,231.805 1081.74,231.561 1082.3,232.411 1082.87,231.153 1083.44,230.862 1084.01,231.794 1084.58,230.611 1085.15,230.71 1085.71,230.478 1086.28,230.311 1086.85,230.295 1087.42,231.23 1087.99,231.895 1088.56,230.605 1089.12,230.616 1089.69,230.475 1090.26,229.348 1090.83,229.316 1091.4,228.203 1091.97,228.304 1092.53,226.081 1093.1,226.34 1093.67,225.394 1094.24,225.703 1094.81,225.924 1095.38,227.481 1095.94,223.378 1096.51,223.793 1097.08,224.11 1097.65,225.293 1098.22,223.356 1098.79,224.691 1099.35,224.868 1099.92,226.32 1100.49,225.673 1101.06,225.995 1101.63,225.108 1102.2,225.407 1102.76,223.669 1103.33,224.062 1103.9,224.399 1104.47,223.627 1105.04,221.804 1105.61,220.327 1106.17,221.157 1106.74,222.941 1107.31,224.413 1107.88,227.102 1108.45,226.411 1109.02,226.894 1109.58,228.233 1110.15,228.332 1110.72,226.429 1111.29,227.779 1111.86,231.093 1112.43,230.052 1112.99,227.045 1113.56,228.183 1114.13,230.415 1114.7,230.293 1115.27,230.387 1115.84,232.422 1116.4,232.084 1116.97,230.887 1117.54,230.956 1118.11,231.012 1118.68,232.797 1119.25,231.55 1119.81,233.533 1120.38,234.331 1120.95,233.948 1121.52,233.736 1122.09,233.354 1122.66,230.131 1123.23,231.179 1123.79,233.129 1124.36,231.715 1124.93,232.63 1125.5,233.333 1126.07,231.907 1126.64,231.669 1127.2,229.313 1127.77,228.607 1128.34,228.713 1128.91,229.4 1129.48,227.398 1130.05,225.529 1130.61,226.785 1131.18,226.767 1131.75,228.845 1132.32,228.794 1132.89,228.714 1133.46,229.03 1134.02,231.945 1134.59,233.771 1135.16,234.513 1135.73,233.055 1136.3,231.623 1136.87,230.305 1137.43,230.1 1138,226.769 1138.57,227.01 1139.14,227.275 1139.71,226.191 1140.28,224.188 1140.84,224.482 1141.41,225.693 1141.98,225.974 1142.55,224.243 1143.12,223.481 1143.69,224.895 1144.25,224.226 1144.82,224.656 1145.39,224.859 1145.96,226.03 1146.53,226.317 1147.1,229.532 1147.66,232.618 1148.23,232.468 1148.8,233.346 1149.37,234.09 1149.94,234.718 1150.51,234.325 1151.07,232.844 1151.64,232.749 1152.21,231.492 1152.78,232.358 1153.35,230.176 1153.92,229.883 1154.48,228.607 1155.05,229.742 1155.62,231.626 1156.19,234.257 1156.76,232.893 1157.33,231.454 1157.89,230.192 1158.46,228.972 1159.03,229.008 1159.6,227.956 1160.17,228.151 1160.74,227.158 1161.3,227.295 1161.87,228.627 1162.44,228.528 1163.01,228.584 1163.58,228.595 1164.15,228.781 1164.71,230.669 1165.28,229.566 1165.85,229.432 1166.42,229.387 1166.99,229.239 1167.56,230.274 1168.12,232.356 1168.69,230.743 1169.26,229.383 1169.83,227.134 1170.4,227.073 1170.97,228.582 1171.53,229.815 1172.1,229.766 1172.67,228.527 1173.24,228.544 1173.81,228.271 1174.38,225.032 1174.94,223.208 1175.51,223.686 1176.08,225.123 1176.65,224.245 1177.22,224.641 1177.79,223.876 1178.35,224.429 1178.92,222.638 1179.49,223.042 1180.06,223.529 1180.63,224.956 1181.2,225.185 1181.76,225.548 1182.33,225.886 1182.9,227.162 1183.47,230.345 1184.04,229.091 1184.61,231.138 1185.17,230.962 1185.74,231.703 1186.31,229.332 1186.88,228.204 1187.45,226.379 1188.02,225.846 1188.58,229.28 1189.15,228.374 1189.72,228.466 1190.29,227.692 1190.86,227.874 1191.43,230.055 1192,229.188 1192.56,229.078 1193.13,230.147 1193.7,231.993 1194.27,231.797 1194.84,230.493 1195.41,230.389 1195.97,231.169 1196.54,232.979 1197.11,233.755 1197.68,232.424 1198.25,231.193 1198.82,230.041 1199.38,228.903 1199.95,227.831 1200.52,228.904 1201.09,229.873 1201.66,227.595 1202.23,227.876 1202.79,228.028 1203.36,228.052 1203.93,229.041 1204.5,231.068 1205.07,231.14 1205.64,228.691 1206.2,228.475 1206.77,227.475 1207.34,226.603 1207.91,227.525 1208.48,228.374 1209.05,228.138 1209.61,228.22 1210.18,228.348 1210.75,227.3 1211.32,227.537 1211.89,225.461 1212.46,225.783 1213.02,228.139 1213.59,226.158 1214.16,224.183 1214.73,224.502 1215.3,226.789 1215.87,226.971 1216.43,227.185 1217,226.449 1217.57,225.688 1218.14,225.86 1218.71,229.061 1219.28,229.127 1219.84,225.723 1220.41,225.942 1220.98,224.78 1221.55,222.957 1222.12,222.226 1222.69,223.636 1223.25,226 1223.82,226.099 1224.39,226.125 1224.96,226.247 1225.53,227.31 1226.1,227.517 1226.66,226.637 1227.23,226.719 1227.8,226.023 1228.37,226.124 1228.94,229.388 1229.51,229.253 1230.07,228.327 1230.64,228.616 1231.21,228.922 1231.78,228.968 1232.35,229.103 1232.92,228.196 1233.48,227.446 1234.05,227.725 1234.62,227.947 1235.19,228.243 1235.76,228.25 1236.33,227.475 1236.89,228.459 1237.46,227.663 1238.03,229.808 1238.6,230.804 1239.17,229.532 1239.74,228.425 1240.3,229.572 1240.87,227.545 1241.44,228.878 1242.01,230.96 1242.58,231.796 1243.15,231.579 1243.71,228.19 1244.28,229.327 1244.85,231.372 1245.42,230.126 1245.99,228.23 1246.56,229.223 1247.12,231.492 1247.69,229.381 1248.26,229.315 1248.83,228.286 1249.4,226.459 1249.97,228.112 1250.53,229.315 1251.1,230.552 1251.67,229.295 1252.24,229.276 1252.81,227.306 1253.38,227.612 1253.94,226.042 1254.51,226.066 1255.08,226.3 1255.65,226.695 1256.22,227.949 1256.79,228.236 1257.35,230.26 1257.92,227.059 1258.49,230.498 1259.06,231.421 1259.63,232.352 1260.2,232.335 1260.76,232.043 1261.33,230.809 1261.9,229.714 1262.47,229.838 1263.04,230.74 1263.61,233.761 1264.18,236.4 1264.74,236.829 1265.31,237.323 1265.88,236.64 1266.45,235.048 1267.02,234.375 1267.59,234.177 1268.15,232.77 1268.72,235.574 1269.29,237.224 1269.86,238.46 1270.43,240.788 1271,238.947 1271.56,239.006 1272.13,238.106 1272.7,234.341 1273.27,234.759 1273.84,234.023 1274.41,231.111 1274.97,231.628 1275.54,230.159 1276.11,230.818 1276.68,228.781 1277.25,227.562 1277.82,226.216 1278.38,226.255 1278.95,226.326 1279.52,227.348 1280.09,227.371 1280.66,229.48 1281.23,229.213 1281.79,228.303 1282.36,227.086 1282.93,225.123 1283.5,224.094 1284.07,226.577 1284.64,226.379 1285.2,226.417 1285.77,225.538 1286.34,226.724 1286.91,227.879 1287.48,227.834 1288.05,227.83 1288.61,227.811 1289.18,226.641 1289.75,224.667 1290.32,222.905 1290.89,223.345 1291.46,223.591 1292.02,224.166 1292.59,226.517 1293.16,225.549 1293.73,225.551 1294.3,226.831 1294.87,225.888 1295.43,226.954 1296,227.067 1296.57,224.008 1297.14,223.312 1297.71,224.777 1298.28,223.112 1298.84,223.479 1299.41,222.752 1299.98,223.08 1300.55,225.443 1301.12,226.66 1301.69,227.812 1302.25,226.881 1302.82,226.911 1303.39,228.092 1303.96,230.119 1304.53,229.846 1305.1,228.785 1305.66,228.83 1306.23,227.542 1306.8,223.482 1307.37,222.924 1307.94,221.256 1308.51,221.78 1309.07,221.217 1309.64,221.666 1310.21,222.162 1310.78,222.71 1311.35,223.287 1311.92,223.588 1312.48,223.114 1313.05,224.62 1313.62,227.298 1314.19,227.621 1314.76,228.942 1315.33,232.42 1315.89,231.111 1316.46,231.964 1317.03,232.748 1317.6,231.576 1318.17,231.546 1318.74,230.234 1319.3,230.006 1319.87,229.871 1320.44,230.834 1321.01,230.469 1321.58,231.513 1322.15,231.438 1322.71,230.206 1323.28,232.428 1323.85,232.162 1324.42,233.082 1324.99,232.855 1325.56,232.451 1326.12,235.311 1326.69,236 1327.26,234.446 1327.83,232.829 1328.4,232.36 1328.97,233.081 1329.53,228.67 1330.1,230.595 1330.67,230.332 1331.24,230.285 1331.81,231.219 1332.38,231.07 1332.94,229.953 1333.51,229.787 1334.08,229.634 1334.65,228.346 1335.22,226.985 1335.79,226.156 1336.36,225.39 1336.92,225.67 1337.49,224.808 1338.06,227.083 1338.63,229.033 1339.2,229.028 1339.77,228.926 1340.33,230.784 1340.9,229.722 1341.47,228.346 1342.04,227.443 1342.61,227.512 1343.18,227.598 1343.74,224.677 1344.31,223.675 1344.88,225.082 1345.45,224.435 1346.02,224.715 1346.59,227.206 1347.15,228.276 1347.72,228.009 1348.29,228.073 1348.86,227.984 1349.43,228.03 1350,230.444 1350.56,229.317 1351.13,230.459 1351.7,231.502 1352.27,231.146 1352.84,228.897 1353.41,230.104 1353.97,230.14 1354.54,230.116 1355.11,230.245 1355.68,229.068 1356.25,229.104 1356.82,230.27 1357.38,229.14 1357.95,229.12 1358.52,226.103 1359.09,225.318 1359.66,223.441 1360.23,221.593 1360.79,220.968 1361.36,221.624 1361.93,223.354 1362.5,225.929 1363.07,228.968 1363.64,229.075 1364.2,230.211 1364.77,229.041 1365.34,231.077 1365.91,230.958 1366.48,232.824 1367.05,233.777 1367.61,235.623 1368.18,234.118 1368.75,231.677 1369.32,230.564 1369.89,229.487 1370.46,229.32 1371.02,230.35 1371.59,231.151 1372.16,230.838 1372.73,229.565 1373.3,229.642 1373.87,229.455 1374.43,230.044 1375,228.694 1375.57,227.862 1376.14,227.67 1376.71,229.572 1377.28,229.516 1377.84,229.63 1378.41,225.728 1378.98,223.879 1379.55,225.02 1380.12,224.015 1380.69,225.294 1381.25,225.311 1381.82,226.471 1382.39,227.785 1382.96,223.939 1383.53,224.426 1384.1,223.65 1384.66,223.999 1385.23,224.254 1385.8,226.895 1386.37,228.947 1386.94,229.829 1387.51,227.926 1388.07,230.182 1388.64,230.169 1389.21,229.987 1389.78,230.811 1390.35,228.591 1390.92,230.593 1391.48,230.525 1392.05,229.41 1392.62,231.548 1393.19,229.254 1393.76,229.378 1394.33,232.709 1394.89,233.327 1395.46,232.075 1396.03,231.793 1396.6,232.556 1397.17,232.052 1397.74,230.583 1398.3,230.599 1398.87,231.433 1399.44,230.257 1400.01,232.384 1400.58,232.184 1401.15,233.903 1401.71,232.455 1402.28,235.294 1402.85,233.646 1403.42,234.042 1403.99,231.27 1404.56,231.082 1405.13,230.555 1405.69,230.329 1406.26,233.164 1406.83,231.889 1407.4,232.607 1407.97,231.008 1408.54,231.094 1409.1,230.949 1409.67,229.827 1410.24,227.449 1410.81,227.549 1411.38,227.592 1411.95,227.609 1412.51,226.56 1413.08,225.429 1413.65,224.502 1414.22,223.838 1414.79,220.106 1415.36,222.835 1415.92,223.133 1416.49,224.519 1417.06,226.662 1417.63,225.637 1418.2,228.982 1418.77,229.976 1419.33,229.807 1419.9,226.396 1420.47,225.517 1421.04,224.562 1421.61,223.066 1422.18,222.304 1422.74,222.756 1423.31,223.131 1423.88,224.473 1424.45,227.96 1425.02,229.02 1425.59,230.082 1426.15,227.871 1426.72,225.892 1427.29,225.978 1427.86,228.347 1428.43,228.459 1429,227.6 1429.56,226.656 1430.13,228.927 1430.7,227.684 1431.27,227.774 1431.84,226.842 1432.41,228.068 1432.97,225.974 1433.54,225.974 1434.11,226.29 1434.68,226.24 1435.25,227.402 1435.82,227.637 1436.38,226.671 1436.95,226.89 1437.52,227.089 1438.09,226.083 1438.66,225.469 1439.23,227.85 1439.79,230.951 1440.36,231.826 1440.93,233.944 1441.5,235.624 1442.07,234.097 1442.64,230.569 1443.2,231.169 1443.77,229.869 1444.34,226.619 1444.91,228.727 1445.48,230.943 1446.05,230.864 1446.61,229.744 1447.18,229.455 1447.75,227.135 1448.32,226.094 1448.89,227.377 1449.46,227.279 1450.02,227.475 1450.59,228.482 1451.16,227.468 1451.73,230.718 1452.3,230.487 1452.87,231.102 1453.43,231.899 1454,233.85 1454.57,235.626 1455.14,236.253 1455.71,234.545 1456.28,234.419 1456.84,234.046 1457.41,233.658 1457.98,232.29 1458.55,231.912 1459.12,230.637 1459.69,230.668 1460.25,229.37 1460.82,228 1461.39,226.02 1461.96,226.224 1462.53,226.374 1463.1,226.511 1463.66,228.834 1464.23,227.856 1464.8,225.687 1465.37,226.832 1465.94,227.011 1466.51,227.202 1467.07,227.347 1467.64,227.234 1468.21,226.182 1468.78,229.262 1469.35,227.956 1469.92,228.857 1470.48,229.679 1471.05,229.723 1471.62,231.825 1472.19,231.508 1472.76,230.154 1473.33,229.863 1473.89,230.703 1474.46,231.563 1475.03,232.096 1475.6,231.61 1476.17,230.266 1476.74,228.195 1477.31,227.121 1477.87,226.229 1478.44,227.414 1479.01,227.428 1479.58,227.396 1480.15,227.382 1480.72,227.351 1481.28,229.298 1481.85,229.162 1482.42,226.976 1482.99,225.615 1483.56,225.641 1484.13,226.706 1484.69,228.89 1485.26,229.837 1485.83,230.447 1486.4,229.121 1486.97,228.849 1487.54,228.624 1488.1,229.706 1488.67,230.548 1489.24,230.331 1489.81,228.102 1490.38,227.92 1490.95,229.145 1491.51,232.108 1492.08,232.807 1492.65,232.575 1493.22,230.039 1493.79,229.8 1494.36,229.468 1494.92,229.496 1495.49,229.335 1496.06,231.412 1496.63,230.234 1497.2,230.997 1497.77,232.585 1498.33,232.115 1498.9,229.731 1499.47,227.357 1500.04,226.287 1500.61,225.409 1501.18,224.773 1501.74,224.827 1502.31,223.825 1502.88,224.063 1503.45,223.365 1504.02,224.632 1504.59,224.599 1505.15,223.643 1505.72,222.942 1506.29,221.219 1506.86,222.625 1507.43,223.936 1508,223.244 1508.56,225.721 1509.13,227.887 1509.7,225.707 1510.27,225.073 1510.84,226.353 1511.41,225.369 1511.97,226.757 1512.54,223.679 1513.11,224.014 1513.68,225.456 1514.25,225.897 1514.82,226.254 1515.38,225.552 1515.95,226.585 1516.52,226.631 1517.09,224.913 1517.66,224.989 1518.23,225.411 1518.79,226.631 1519.36,226.918 1519.93,227.116 1520.5,228.306 1521.07,226.413 1521.64,226.636 1522.2,226.807 1522.77,226.11 1523.34,227.342 1523.91,227.202 1524.48,227.249 1525.05,225.364 1525.61,224.62 1526.18,225.956 1526.75,225.066 1527.32,226.392 1527.89,227.438 1528.46,229.774 1529.02,229.556 1529.59,230.744 1530.16,232.654 1530.73,233.354 1531.3,232.036 1531.87,232.035 1532.43,232.109 1533,231.875 1533.57,230.567 1534.14,229.341 1534.71,228.389 1535.28,229.238 1535.84,228.417 1536.41,230.452 1536.98,231.581 1537.55,228.276 1538.12,228.338 1538.69,231.618 1539.25,230.417 1539.82,232.449 1540.39,231.221 1540.96,232.251 1541.53,229.865 1542.1,229.649 1542.66,231.528 1543.23,231.409 1543.8,230.226 1544.37,230.254 1544.94,227.806 1545.51,227.742 1546.08,228.908 1546.64,229.864 1547.21,229.779 1547.78,228.799 1548.35,228.793 1548.92,228.934 1549.49,229.881 1550.05,228.805 1550.62,229.782 1551.19,229.639 1551.76,229.559 1552.33,227.608 1552.9,230.803 1553.46,229.711 1554.03,228.484 1554.6,227.589 1555.17,227.61 1555.74,226.46 1556.31,226.696 1556.87,228.749 1557.44,228.768 1558.01,228.589 1558.58,227.889 1559.15,226.745 1559.72,227.856 1560.28,226.821 1560.85,225.578 1561.42,225.837 1561.99,223.937 1562.56,225.343 1563.13,225.694 1563.69,224.932 1564.26,227.237 1564.83,228.323 1565.4,229.319 1565.97,229.314 1566.54,229.262 1567.1,228.181 1567.67,229.275 1568.24,231.351 1568.81,231.942 1569.38,230.531 1569.95,231.444 1570.51,231.398 1571.08,227.926 1571.65,226.679 1572.22,225.655 1572.79,223.811 1573.36,226.033 1573.92,226.23 1574.49,226.215 1575.06,225.102 1575.63,225.408 1576.2,223.716 1576.77,223.149 1577.33,221.363 1577.9,222.944 1578.47,223.308 1579.04,224.826 1579.61,225.112 1580.18,225.61 1580.74,228.026 1581.31,225.105 1581.88,225.513 1582.45,224.724 1583.02,225.915 1583.59,227.023 1584.15,227.221 1584.72,228.6 1585.29,229.892 1585.86,230.202 1586.43,230.189 1587,231.29 1587.56,234.555 1588.13,235.316 1588.7,234.922 1589.27,233.538 1589.84,232.316 1590.41,230.041 1590.97,230.951 1591.54,231.695 1592.11,232.26 1592.68,230.943 1593.25,229.922 1593.82,231.961 1594.38,230.575 1594.95,229.119 1595.52,228.121 1596.09,229.083 1596.66,229.108 1597.23,230.069 1597.79,229.822 1598.36,230.787 1598.93,229.62 1599.5,226.396 1600.07,227.692 1600.64,229.982 1601.2,230.015 1601.77,229.872 1602.34,228.898 1602.91,228.842 1603.48,228.807 1604.05,226.867 1604.61,226.981 1605.18,228.207 1605.75,228.227 1606.32,228.156 1606.89,227.213 1607.46,227.409 1608.02,228.646 1608.59,226.505 1609.16,225.676 1609.73,226.096 1610.3,225.174 1610.87,224.604 1611.43,222.789 1612,225.161 1612.57,225.452 1613.14,227.708 1613.71,225.747 1614.28,229.124 1614.84,231.279 1615.41,232.388 1615.98,232.114 1616.55,231.956 1617.12,229.761 1617.69,228.572 1618.26,227.472 1618.82,226.828 1619.39,229.159 1619.96,226.991 1620.53,227.922 1621.1,226.804 1621.67,225.727 1622.23,225.837 1622.8,223.08 1623.37,222.501 1623.94,224.942 1624.51,223.336 1625.08,223.793 1625.64,223.209 1626.21,223.721 1626.78,223.996 1627.35,223.275 1627.92,222.521 1628.49,223.256 1629.05,223.647 1629.62,223.972 1630.19,224.355 1630.76,224.569 1631.33,223.113 1631.9,221.438 1632.46,225.174 1633.03,226.457 1633.6,229.846 1634.17,230.881 1634.74,226.663 1635.31,226.909 1635.87,229.283 1636.44,227.005 1637.01,224.889 1637.58,225.517 1638.15,226.641 1638.72,227.969 1639.28,227.097 1639.85,228.347 1640.42,228.637 1640.99,228.927 1641.56,228.967 1642.13,230.277 1642.69,230.354 1643.26,231.461 1643.83,233.413 1644.4,233.021 1644.97,233.938 1645.54,229.56 1646.1,230.481 1646.67,231.492 1647.24,229.314 1647.81,232.394 1648.38,234.144 1648.95,231.8 1649.51,230.666 1650.08,232.687 1650.65,231.304 1651.22,231.171 1651.79,230.073 1652.36,230.052 1652.92,227.712 1653.49,227.773 1654.06,230.931 1654.63,230.954 1655.2,232.743 1655.77,231.396 1656.33,230.089 1656.9,227.853 1657.47,227.824 1658.04,228.108 1658.61,228.061 1659.18,228.312 1659.74,226.371 1660.31,226.538 1660.88,227.749 1661.45,230.02 1662.02,229.854 1662.59,230.991 1663.15,231.919 1663.72,230.811 1664.29,230.774 1664.86,229.629 1665.43,228.565 1666,229.499 1666.56,229.607 1667.13,229.461 1667.7,229.224 1668.27,228.274 1668.84,228.292 1669.41,230.588 1669.97,234.544 1670.54,231.187 1671.11,230.894 1671.68,230.929 1672.25,232.037 1672.82,234.971 1673.38,234.542 1673.95,235.14 1674.52,235.66 1675.09,235.099 1675.66,235.752 1676.23,234.329 1676.79,235.083 1677.36,233.519 1677.93,234.216 1678.5,232.831 1679.07,232.369 1679.64,233.023 1680.2,232.64 1680.77,233.34 1681.34,232.871 1681.91,231.396 1682.48,232.224 1683.05,231.855 1683.61,231.408 1684.18,230.034 1684.75,228.828 1685.32,228.533 1685.89,226.27 1686.46,225.539 1687.02,225.738 1687.59,227.129 1688.16,228.436 1688.73,231.43 1689.3,231.389 1689.87,228.796 1690.44,229.817 1691,229.742 1691.57,228.326 1692.14,229.346 1692.71,226.987 1693.28,227 1693.85,229.153 1694.41,228.954 1694.98,228.833 1695.55,226.848 1696.12,226.815 1696.69,227.913 1697.26,227.916 1697.82,226.842 1698.39,226.957 1698.96,225.85 1699.53,224.778 1700.1,227.164 1700.67,227.161 1701.23,228.327 1701.8,229.361 1702.37,230.299 1702.94,229.065 1703.51,231.068 1704.08,231.994 1704.64,231.82 1705.21,233.651 1705.78,234.08 1706.35,232.663 1706.92,232.267 1707.49,232.019 1708.05,231.887 1708.62,230.389 1709.19,228.889 1709.76,228.815 1710.33,228.566 1710.9,226.246 1711.46,227.404 1712.03,228.584 1712.6,228.429 1713.17,227.526 1713.74,228.497 1714.31,228.454 1714.87,227.266 1715.44,226.123 1716.01,226.096 1716.58,225.119 1717.15,222.078 1717.72,223.599 1718.28,223.96 1718.85,224.37 1719.42,223.698 1719.99,227.188 1720.56,225.175 1721.13,224.407 1721.69,225.603 1722.26,226.851 1722.83,228.973 1723.4,229.791 1723.97,228.367 1724.54,228.146 1725.1,228.509 1725.67,228.337 1726.24,226.173 1726.81,224.4 1727.38,224.664 1727.95,226.961 1728.51,227.95 1729.08,227.056 1729.65,225.148 1730.22,224.21 1730.79,225.503 1731.36,226.503 1731.92,226.747 1732.49,228.695 1733.06,230.936 1733.63,233.123 1734.2,231.998 1734.77,232.96 1735.33,231.478 1735.9,232.187 1736.47,232.814 1737.04,234.365 1737.61,234.919 1738.18,232.403 1738.74,231.957 1739.31,231.73 1739.88,230.179 1740.45,231.252 1741.02,228.967 1741.59,226.812 1742.15,228.007 1742.72,227.953 1743.29,226.999 1743.86,227.786 1744.43,226.861 1745,226.013 1745.56,224.971 1746.13,225.216 1746.7,225.5 1747.27,226.866 1747.84,226.929 1748.41,228.008 1748.97,228.86 1749.54,228.763 1750.11,227.693 1750.68,228.874 1751.25,225.921 1751.82,223.99 1752.38,225.717 1752.95,224.738 1753.52,226.034 1754.09,224.989 1754.66,224.979 1755.23,226.248 1755.79,227.651 1756.36,228.758 1756.93,230.612 1757.5,230.533 1758.07,227.239 1758.64,227.007 1759.21,227.073 1759.77,226.109 1760.34,225.177 1760.91,225.452 1761.48,224.874 1762.05,224.358 1762.62,225.538 1763.18,226.945 1763.75,227.215 1764.32,230.467 1764.89,229.225 1765.46,229.22 1766.03,230.296 1766.59,230.128 1767.16,229.028 1767.73,229.172 1768.3,229.075 1768.87,229.065 1769.44,229.128 1770,229.162 1770.57,229.261 1771.14,230.5 1771.71,233.543 1772.28,232.187 1772.85,232.93 1773.41,232.573 1773.98,235.575 1774.55,236.078 1775.12,233.578 1775.69,233.438 1776.26,233.19 1776.82,231.82 1777.39,232.503 1777.96,232.283 1778.53,230.71 1779.1,229.457 1779.67,229.091 1780.23,230.061 1780.8,229.912 1781.37,228.759 1781.94,228.651 1782.51,227.444 1783.08,228.818 1783.64,227.793 1784.21,227.651 1784.78,227.706 1785.35,228.781 1785.92,227.792 1786.49,225.594 1787.05,225.797 1787.62,227.131 1788.19,230.33 1788.76,229.215 1789.33,228.126 1789.9,226.958 1790.46,226.565 1791.03,226.621 1791.6,227.015 1792.17,228.176 1792.74,228.188 1793.31,227.158 1793.87,227.489 1794.44,227.5 1795.01,227.637 1795.58,226.781 1796.15,229.944 1796.72,230.77 1797.28,230.536 1797.85,230.426 1798.42,229.213 1798.99,230.053 1799.56,229.005 1800.13,230.176 1800.69,228.996 1801.26,228.801 1801.83,228.716 1802.4,227.481 1802.97,227.5 1803.54,226.403 1804.1,226.298 1804.67,224.272 1805.24,224.571 1805.81,225.023 1806.38,224.08 1806.95,224.366 1807.51,224.644 1808.08,224.862 1808.65,225.21 1809.22,223.278 1809.79,220.468 1810.36,219.895 1810.92,221.732 1811.49,223.015 1812.06,223.481 1812.63,226.965 1813.2,227.025 1813.77,227.329 1814.33,229.662 1814.9,228.791 1815.47,227.705 1816.04,227.661 1816.61,227.901 1817.18,228.99 1817.74,228.783 1818.31,228.774 1818.88,229.73 1819.45,229.779 1820.02,227.654 1820.59,226.605 1821.15,225.907 1821.72,226.111 1822.29,226.332 1822.86,227.899 1823.43,228.014 1824,229.269 1824.56,229.369 1825.13,229.51 1825.7,229.401 1826.27,229.348 1826.84,229.254 1827.41,228.268 1827.97,229.651 1828.54,230.656 1829.11,231.493 1829.68,231.145 1830.25,231.099 1830.82,230.9 1831.39,230.471 1831.95,229.213 1832.52,228.096 1833.09,229.049 1833.66,228.995 1834.23,229.967 1834.8,230.855 1835.36,230.662 1835.93,230.43 1836.5,233.531 1837.07,234.248 1837.64,236.104 1838.21,236.666 1838.77,232.993 1839.34,230.742 1839.91,229.607 1840.48,229.258 1841.05,230.173 1841.62,229.774 1842.18,229.806 1842.75,226.57 1843.32,227.769 1843.89,227.903 1844.46,226.949 1845.03,229.193 1845.59,228.988 1846.16,227.068 1846.73,228.161 1847.3,227.904 1847.87,229.932 1848.44,227.738 1849,227.782 1849.57,230.123 1850.14,230.027 1850.71,228.839 1851.28,226.764 1851.85,226.77 1852.41,226.745 1852.98,225.717 1853.55,228.772 1854.12,229.844 1854.69,229.721 1855.26,230.618 1855.82,229.416 1856.39,227.309 1856.96,227.33 1857.53,226.384 1858.1,226.375 1858.67,226.639 1859.23,226.625 1859.8,226.715 1860.37,227.795 1860.94,229.112 1861.51,229.877 1862.08,229.874 1862.64,231.791 1863.21,233.773 1863.78,232.448 1864.35,229.165 1864.92,229.174 1865.49,228.997 1866.05,228.955 1866.62,227.889 1867.19,227.036 1867.76,225.116 1868.33,225.254 1868.9,226.475 1869.46,226.409 1870.03,227.51 1870.6,228.706 1871.17,227.579 1871.74,229.647 1872.31,228.582 1872.87,228.656 1873.44,229.726 1874.01,231.547 1874.58,229.104 1875.15,228.947 1875.72,231.837 1876.28,232.814 1876.85,231.352 1877.42,231.28 1877.99,229.954 1878.56,231.941 1879.13,231.978 1879.69,231.544 1880.26,232.489 1880.83,232.201 1881.4,232.022 1881.97,230.671 1882.54,231.39 1883.1,230.357 1883.67,231.246 1884.24,229.772 1884.81,226.539 1885.38,224.653 1885.95,224.918 1886.51,224.815 1887.08,225.004 1887.65,226.462 1888.22,227.551 1888.79,225.459 1889.36,225.865 1889.92,225.146 1890.49,224.374 1891.06,222.85 1891.63,223.083 1892.2,226.508 1892.77,226.928 1893.33,225.845 1893.9,225.058 1894.47,225.576 1895.04,222.616 1895.61,225.316 1896.18,224.346 1896.74,225.762 1897.31,227.067 1897.88,226.252 1898.45,226.35 1899.02,226.454 1899.59,226.521 1900.16,226.903 1900.72,227.891 1901.29,227.091 1901.86,227.087 1902.43,227.26 1903,228.434 1903.57,228.404 1904.13,228.324 1904.7,228.526 1905.27,228.66 1905.84,228.551 1906.41,227.528 1906.98,227.537 1907.54,228.382 1908.11,226.469 1908.68,225.563 1909.25,226.694 1909.82,227.014 1910.39,227.245 1910.95,226.327 1911.52,226.546 1912.09,225.616 1912.66,225.143 1913.23,223.508 1913.8,225.768 1914.36,227.021 1914.93,229.222 1915.5,230.379 1916.07,228.17 1916.64,226.188 1917.21,226.155 1917.77,226.224 1918.34,227.468 1918.91,227.439 1919.48,226.69 1920.05,226.739 1920.62,226.983 1921.18,228.1 1921.75,228.301 1922.32,228.443 1922.89,226.458 1923.46,229.848 1924.03,229.766 1924.59,228.703 1925.16,229.721 1925.73,229.727 1926.3,227.77 1926.87,227.76 1927.44,227.805 1928,227.079 1928.57,227.257 1929.14,227.555 1929.71,230.472 1930.28,229.33 1930.85,230.303 1931.41,231.422 1931.98,233.397 1932.55,234.062 1933.12,233.718 1933.69,234.514 1934.26,235.2 1934.82,234.903 1935.39,233.27 1935.96,235.006 1936.53,234.337 1937.1,236.102 1937.67,236.317 1938.23,235.678 1938.8,234.914 1939.37,233.362 1939.94,233.01 1940.51,232.867 1941.08,232.512 1941.64,232.194 1942.21,233.834 1942.78,232.566 1943.35,231.186 1943.92,229.696 1944.49,228.698 1945.05,228.403 1945.62,226.223 1946.19,225.233 1946.76,226.383 1947.33,225.402 1947.9,224.643 1948.46,224.796 1949.03,226.133 1949.6,224.417 1950.17,223.544 1950.74,226.009 1951.31,227.264 1951.87,227.32 1952.44,227.29 1953.01,225.229 1953.58,226.647 1954.15,227.79 1954.72,225.839 1955.28,227.338 1955.85,227.279 1956.42,228.543 1956.99,227.532 1957.56,228.677 1958.13,229.721 1958.69,230.466 1959.26,228.217 1959.83,228.147 1960.4,228.358 1960.97,231.577 1961.54,230.189 1962.1,229.743 1962.67,229.62 1963.24,230.497 1963.81,230.353 1964.38,229.12 1964.95,229.142 1965.51,228.055 1966.08,230.143 1966.65,231.181 1967.22,228.901 1967.79,230.684 1968.36,229.464 1968.92,231.579 1969.49,230.192 1970.06,229.222 1970.63,232.312 1971.2,231.812 1971.77,231.469 1972.34,230.244 1972.9,231.247 1973.47,231.758 1974.04,231.429 1974.61,231.19 1975.18,229.97 1975.75,228.918 1976.31,229.877 1976.88,229.751 1977.45,229.559 1978.02,229.452 1978.59,231.13 1979.16,231.089 1979.72,230.034 1980.29,229.886 1980.86,227.766 1981.43,225.601 1982,223.946 1982.57,224.135 1983.13,221.429 1983.7,220.895 1984.27,222.256 1984.84,222.701 1985.41,222.09 1985.98,225.61 1986.54,225.828 1987.11,224.961 1987.68,225.102 1988.25,229.229 1988.82,229.032 1989.39,228.799 1989.95,228.818 1990.52,230.706 1991.09,230.317 1991.66,229.141 1992.23,229.165 1992.8,229.02 1993.36,228.966 1993.93,226.008 1994.5,226.088 1995.07,225.337 1995.64,225.474 1996.21,223.637 1996.77,223.967 1997.34,226.602 1997.91,224.748 1998.48,222.999 1999.05,223.266 1999.62,221.672 2000.18,222.41 2000.75,223.974 2001.32,226.377 2001.89,225.582 2002.46,226.938 2003.03,227.014 2003.59,227.296 2004.16,225.324 2004.73,226.804 2005.3,227.98 2005.87,229.111 2006.44,227.103 2007,224.913 2007.57,223.11 2008.14,221.774 2008.71,221.975 2009.28,223.827 2009.85,222.092 2010.41,222.566 2010.98,221.832 2011.55,224.463 2012.12,227.904 2012.69,227.052 2013.26,227.333 2013.82,227.474 2014.39,226.804 2014.96,227.314 2015.53,228.738 2016.1,228.88 2016.67,229.149 2017.23,227.155 2017.8,227.374 2018.37,231.548 2018.94,232.411 2019.51,233.195 2020.08,235.035 2020.64,233.644 2021.21,232.449 2021.78,232.304 2022.35,232.095 2022.92,231.948 2023.49,229.611 2024.05,229.673 2024.62,230.928 2025.19,230.132 2025.76,232.353 2026.33,232.178 2026.9,231.217 2027.46,229.98 2028.03,229.044 2028.6,230.151 2029.17,230.295 2029.74,230.297 2030.31,228.261 2030.87,228.374 2031.44,225.31 2032.01,227.788 2032.58,225.771 2033.15,226.171 2033.72,227.409 2034.28,229.563 2034.85,230.567 2035.42,230.727 2035.99,230.635 2036.56,228.493 2037.13,228.49 2037.69,227.553 2038.26,227.609 2038.83,229.819 2039.4,228.817 2039.97,229.818 2040.54,231.061 2041.11,230.766 2041.67,228.619 2042.24,228.604 2042.81,227.592 2043.38,228.027 2043.95,227.083 2044.52,227.172 2045.08,229.427 2045.65,229.451 2046.22,228.51 2046.79,228.592 2047.36,229.59 2047.93,232.422 2048.49,232.125 2049.06,235.805 2049.63,236.046 2050.2,235.555 2050.77,231.794 2051.34,231.48 2051.9,230.137 2052.47,230.085 2053.04,231.309 2053.61,231.019 2054.18,232.692 2054.75,234.338 2055.31,233.018 2055.88,231.399 2056.45,231.248 2057.02,231.905 2057.59,232.807 2058.16,232.451 2058.72,234.26 2059.29,233.733 2059.86,233.415 2060.43,232.187 2061,232.932 2061.57,230.305 2062.13,228.903 2062.7,228.968 2063.27,228.912 2063.84,228.743 2064.41,230.861 2064.98,231.747 2065.54,228.288 2066.11,228.198 2066.68,227.194 2067.25,226.049 2067.82,226.147 2068.39,226.178 2068.95,225.293 2069.52,226.457 2070.09,226.582 2070.66,226.722 2071.23,225.619 2071.8,225.802 2072.36,224.692 2072.93,224.857 2073.5,223.977 2074.07,222.114 2074.64,224.49 2075.21,225.739 2075.77,226.971 2076.34,225.029 2076.91,225.081 2077.48,224.166 2078.05,226.505 2078.62,227.459 2079.18,224.249 2079.75,224.654 2080.32,225.075 2080.89,225.491 2081.46,226.661 2082.03,227.963 2082.59,227.998 2083.16,228.952 2083.73,228.998 2084.3,228.112 2084.87,230.17 2085.44,229.235 2086,229.24 2086.57,230.156 2087.14,232.117 2087.71,231.924 2088.28,230.568 2088.85,230.283 2089.41,230.192 2089.98,231.951 2090.55,230.857 2091.12,231.712 2091.69,231.586 2092.26,231.509 2092.82,229.974 2093.39,230.922 2093.96,231.813 2094.53,232.666 2095.1,232.088 2095.67,232.496 2096.23,231.888 2096.8,229.352 2097.37,231.145 2097.94,231.874 2098.51,231.743 2099.08,232.429 2099.64,232.092 2100.21,233.532 2100.78,232.976 2101.35,230.288 2101.92,229.287 2102.49,227.958 2103.05,229.863 2103.62,228.558 2104.19,230.557 2104.76,231.418 2105.33,230.912 2105.9,230.581 2106.46,229.175 2107.03,227.957 2107.6,225.915 2108.17,226.038 2108.74,225.249 2109.31,226.62 2109.87,226.752 2110.44,225.557 2111.01,225.684 2111.58,227.199 2112.15,228.274 2112.72,228.167 2113.29,229.199 2113.85,229.06 2114.42,229.079 2114.99,230.959 2115.56,232.835 2116.13,233.673 2116.7,235.395 2117.26,232.897 2117.83,232.606 2118.4,233.131 2118.97,233.631 2119.54,233.065 2120.11,230.683 2120.67,229.534 2121.24,228.411 2121.81,228.114 2122.38,226.078 2122.95,227.27 2123.52,227.252 2124.08,226.217 2124.65,226.237 2125.22,228.025 2125.79,227.093 2126.36,226.179 2126.93,226.225 2127.49,226.169 2128.06,225.155 2128.63,228.497 2129.2,227.247 2129.77,228.507 2130.34,229.468 2130.9,228.176 2131.47,226.777 2132.04,226.917 2132.61,226.974 2133.18,226.976 2133.75,226.845 2134.31,226.725 2134.88,225.556 2135.45,226.419 2136.02,228.394 2136.59,225.316 2137.16,224.488 2137.72,222.918 2138.29,222.221 2138.86,223.427 2139.43,223.604 2140,223.909 2140.57,224.106 2141.13,224.385 2141.7,223.664 2142.27,223.837 2142.84,223.225 2143.41,221.398 2143.98,222.917 2144.54,220.182 2145.11,221.956 2145.68,220.327 2146.25,220.98 2146.82,222.543 2147.39,222.041 2147.95,220.605 2148.52,220.31 2149.09,221.895 2149.66,221.327 2150.23,222.8 2150.8,223.301 2151.36,223.628 2151.93,221.965 2152.5,222.736 2153.07,223.205 2153.64,223.734 2154.21,224.152 2154.77,223.621 2155.34,226.055 2155.91,227.235 2156.48,228.633 2157.05,227.504 2157.62,230.02 2158.18,230.992 2158.75,232.204 2159.32,232.085 2159.89,230.94 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.036 ± 0.018\n  with uncertainty of ± 0.0011390354113498954\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01322 ± (0.00225074, 0.00232044) (MC)\n  95% confidence interval: [-4.01787, -4.0086]) (MC)\n  linear error propagation: -4.01316 ± 0.00235512\n  |δ_y| = |0.00175383| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013220727289051, val_l = 0.004649655766242766, val_u = 0.004620066304952708)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip790\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip791\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip790)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip792\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1153.88 2211.02,1153.88 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1003.52 2211.02,1003.52 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,853.165 2211.02,853.165 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,702.81 2211.02,702.81 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,552.455 2211.02,552.455 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,402.1 2211.02,402.1 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,251.745 2211.02,251.745 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1153.88 365.751,1153.88 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1003.52 365.751,1003.52 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,853.165 365.751,853.165 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,702.81 365.751,702.81 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,552.455 365.751,552.455 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,402.1 365.751,402.1 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,251.745 365.751,251.745 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M298.909 1139.67 Q295.298 1139.67 293.469 1143.24 Q291.664 1146.78 291.664 1153.91 Q291.664 1161.02 293.469 1164.58 Q295.298 1168.12 298.909 1168.12 Q302.543 1168.12 304.349 1164.58 Q306.177 1161.02 306.177 1153.91 Q306.177 1146.78 304.349 1143.24 Q302.543 1139.67 298.909 1139.67 M298.909 1135.97 Q304.719 1135.97 307.775 1140.58 Q310.853 1145.16 310.853 1153.91 Q310.853 1162.64 307.775 1167.24 Q304.719 1171.83 298.909 1171.83 Q293.099 1171.83 290.02 1167.24 Q286.964 1162.64 286.964 1153.91 Q286.964 1145.16 290.02 1140.58 Q293.099 1135.97 298.909 1135.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M259.557 1016.87 L267.196 1016.87 L267.196 990.5 L258.886 992.166 L258.886 987.907 L267.15 986.241 L271.826 986.241 L271.826 1016.87 L279.465 1016.87 L279.465 1020.8 L259.557 1020.8 L259.557 1016.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 989.319 Q295.298 989.319 293.469 992.884 Q291.664 996.426 291.664 1003.56 Q291.664 1010.66 293.469 1014.23 Q295.298 1017.77 298.909 1017.77 Q302.543 1017.77 304.349 1014.23 Q306.177 1010.66 306.177 1003.56 Q306.177 996.426 304.349 992.884 Q302.543 989.319 298.909 989.319 M298.909 985.616 Q304.719 985.616 307.775 990.222 Q310.853 994.805 310.853 1003.56 Q310.853 1012.28 307.775 1016.89 Q304.719 1021.47 298.909 1021.47 Q293.099 1021.47 290.02 1016.89 Q286.964 1012.28 286.964 1003.56 Q286.964 994.805 290.02 990.222 Q293.099 985.616 298.909 985.616 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M262.775 866.51 L279.094 866.51 L279.094 870.445 L257.15 870.445 L257.15 866.51 Q259.812 863.756 264.395 859.126 Q269.002 854.473 270.182 853.131 Q272.428 850.608 273.307 848.871 Q274.21 847.112 274.21 845.422 Q274.21 842.668 272.266 840.932 Q270.344 839.196 267.242 839.196 Q265.043 839.196 262.59 839.96 Q260.159 840.723 257.381 842.274 L257.381 837.552 Q260.205 836.418 262.659 835.839 Q265.113 835.26 267.15 835.26 Q272.52 835.26 275.715 837.946 Q278.909 840.631 278.909 845.122 Q278.909 847.251 278.099 849.172 Q277.312 851.071 275.205 853.663 Q274.627 854.334 271.525 857.552 Q268.423 860.746 262.775 866.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 838.964 Q295.298 838.964 293.469 842.529 Q291.664 846.071 291.664 853.2 Q291.664 860.307 293.469 863.871 Q295.298 867.413 298.909 867.413 Q302.543 867.413 304.349 863.871 Q306.177 860.307 306.177 853.2 Q306.177 846.071 304.349 842.529 Q302.543 838.964 298.909 838.964 M298.909 835.26 Q304.719 835.26 307.775 839.867 Q310.853 844.45 310.853 853.2 Q310.853 861.927 307.775 866.533 Q304.719 871.117 298.909 871.117 Q293.099 871.117 290.02 866.533 Q286.964 861.927 286.964 853.2 Q286.964 844.45 290.02 839.867 Q293.099 835.26 298.909 835.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M272.914 701.456 Q276.27 702.174 278.145 704.442 Q280.043 706.711 280.043 710.044 Q280.043 715.16 276.525 717.961 Q273.006 720.762 266.525 720.762 Q264.349 720.762 262.034 720.322 Q259.742 719.905 257.289 719.049 L257.289 714.535 Q259.233 715.669 261.548 716.248 Q263.863 716.827 266.386 716.827 Q270.784 716.827 273.076 715.09 Q275.39 713.354 275.39 710.044 Q275.39 706.989 273.238 705.276 Q271.108 703.54 267.289 703.54 L263.261 703.54 L263.261 699.697 L267.474 699.697 Q270.923 699.697 272.752 698.331 Q274.58 696.942 274.58 694.35 Q274.58 691.688 272.682 690.276 Q270.807 688.841 267.289 688.841 Q265.367 688.841 263.168 689.257 Q260.969 689.674 258.33 690.554 L258.33 686.387 Q260.992 685.646 263.307 685.276 Q265.645 684.905 267.705 684.905 Q273.029 684.905 276.131 687.336 Q279.233 689.743 279.233 693.864 Q279.233 696.734 277.59 698.725 Q275.946 700.692 272.914 701.456 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 688.609 Q295.298 688.609 293.469 692.174 Q291.664 695.716 291.664 702.845 Q291.664 709.952 293.469 713.516 Q295.298 717.058 298.909 717.058 Q302.543 717.058 304.349 713.516 Q306.177 709.952 306.177 702.845 Q306.177 695.716 304.349 692.174 Q302.543 688.609 298.909 688.609 M298.909 684.905 Q304.719 684.905 307.775 689.512 Q310.853 694.095 310.853 702.845 Q310.853 711.572 307.775 716.178 Q304.719 720.762 298.909 720.762 Q293.099 720.762 290.02 716.178 Q286.964 711.572 286.964 702.845 Q286.964 694.095 290.02 689.512 Q293.099 684.905 298.909 684.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M271.594 539.249 L259.789 557.698 L271.594 557.698 L271.594 539.249 M270.367 535.175 L276.247 535.175 L276.247 557.698 L281.177 557.698 L281.177 561.587 L276.247 561.587 L276.247 569.735 L271.594 569.735 L271.594 561.587 L255.992 561.587 L255.992 557.073 L270.367 535.175 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 538.254 Q295.298 538.254 293.469 541.819 Q291.664 545.36 291.664 552.49 Q291.664 559.597 293.469 563.161 Q295.298 566.703 298.909 566.703 Q302.543 566.703 304.349 563.161 Q306.177 559.597 306.177 552.49 Q306.177 545.36 304.349 541.819 Q302.543 538.254 298.909 538.254 M298.909 534.55 Q304.719 534.55 307.775 539.157 Q310.853 543.74 310.853 552.49 Q310.853 561.217 307.775 565.823 Q304.719 570.407 298.909 570.407 Q293.099 570.407 290.02 565.823 Q286.964 561.217 286.964 552.49 Q286.964 543.74 290.02 539.157 Q293.099 534.55 298.909 534.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M258.793 384.82 L277.15 384.82 L277.15 388.755 L263.076 388.755 L263.076 397.228 Q264.094 396.88 265.113 396.718 Q266.131 396.533 267.15 396.533 Q272.937 396.533 276.316 399.704 Q279.696 402.876 279.696 408.292 Q279.696 413.871 276.224 416.973 Q272.752 420.052 266.432 420.052 Q264.256 420.052 261.988 419.681 Q259.742 419.311 257.335 418.57 L257.335 413.871 Q259.418 415.005 261.641 415.561 Q263.863 416.116 266.34 416.116 Q270.344 416.116 272.682 414.01 Q275.02 411.903 275.02 408.292 Q275.02 404.681 272.682 402.575 Q270.344 400.468 266.34 400.468 Q264.465 400.468 262.59 400.885 Q260.738 401.302 258.793 402.181 L258.793 384.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 387.899 Q295.298 387.899 293.469 391.464 Q291.664 395.005 291.664 402.135 Q291.664 409.241 293.469 412.806 Q295.298 416.348 298.909 416.348 Q302.543 416.348 304.349 412.806 Q306.177 409.241 306.177 402.135 Q306.177 395.005 304.349 391.464 Q302.543 387.899 298.909 387.899 M298.909 384.195 Q304.719 384.195 307.775 388.802 Q310.853 393.385 310.853 402.135 Q310.853 410.862 307.775 415.468 Q304.719 420.052 298.909 420.052 Q293.099 420.052 290.02 415.468 Q286.964 410.862 286.964 402.135 Q286.964 393.385 290.02 388.802 Q293.099 384.195 298.909 384.195 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M269.326 249.882 Q266.178 249.882 264.326 252.035 Q262.497 254.187 262.497 257.937 Q262.497 261.664 264.326 263.84 Q266.178 265.993 269.326 265.993 Q272.474 265.993 274.303 263.84 Q276.154 261.664 276.154 257.937 Q276.154 254.187 274.303 252.035 Q272.474 249.882 269.326 249.882 M278.608 235.229 L278.608 239.488 Q276.849 238.655 275.043 238.215 Q273.261 237.775 271.502 237.775 Q266.872 237.775 264.418 240.9 Q261.988 244.025 261.641 250.345 Q263.006 248.331 265.066 247.266 Q267.127 246.178 269.603 246.178 Q274.812 246.178 277.821 249.349 Q280.853 252.498 280.853 257.937 Q280.853 263.261 277.705 266.479 Q274.557 269.697 269.326 269.697 Q263.33 269.697 260.159 265.113 Q256.988 260.507 256.988 251.78 Q256.988 243.586 260.877 238.724 Q264.766 233.84 271.316 233.84 Q273.076 233.84 274.858 234.187 Q276.664 234.535 278.608 235.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M298.909 237.544 Q295.298 237.544 293.469 241.109 Q291.664 244.65 291.664 251.78 Q291.664 258.886 293.469 262.451 Q295.298 265.993 298.909 265.993 Q302.543 265.993 304.349 262.451 Q306.177 258.886 306.177 251.78 Q306.177 244.65 304.349 241.109 Q302.543 237.544 298.909 237.544 M298.909 233.84 Q304.719 233.84 307.775 238.447 Q310.853 243.03 310.853 251.78 Q310.853 260.507 307.775 265.113 Q304.719 269.697 298.909 269.697 Q293.099 269.697 290.02 265.113 Q286.964 260.507 286.964 251.78 Q286.964 243.03 290.02 238.447 Q293.099 233.84 298.909 233.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip792)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1160.03 400.199,1052.25 400.786,953.455 401.372,862.601 401.958,779.368 402.545,703.013 403.131,728.987 403.718,658.369 404.304,593.571 404.891,539.824 405.477,486.258 406.063,437.856 406.65,394.284 407.236,356.361 407.823,321.458 408.409,290.507 408.995,263.25 409.582,239.445 410.168,219.895 410.755,252.683 411.341,236.038 411.927,222.872 412.514,253.039 413.1,316.174 413.687,307.599 414.273,300.195 414.86,294.765 415.446,318.646 416.032,340.586 416.619,384.126 417.205,382.759 417.792,403.457 418.378,423.583 418.964,425.021 419.551,428.2 420.137,431.285 420.724,466.018 421.31,482.618 421.896,487.138 422.483,516.55 423.069,520.385 423.656,536.212 424.242,541.563 424.829,557.852 425.415,573.771 426.001,588.84 426.588,611.772 427.174,617.383 427.761,623.737 428.347,637.254 428.933,650.779 429.52,670.864 430.106,677.03 430.693,690.226 431.279,702.162 431.865,708.162 432.452,720.814 433.038,728.43 433.625,740.184 434.211,746.78 434.798,759.339 435.384,766.659 435.97,787.599 436.557,794.346 437.143,809.353 437.73,819.764 438.316,826.849 438.902,841.002 439.489,847.854 440.075,861.558 440.662,874.678 441.248,880.846 441.835,899.755 442.421,917.812 443.007,926.024 443.594,931.289 444.18,939.028 444.767,946.736 445.353,951.744 445.939,959.13 446.526,964.224 447.112,969.065 447.699,976.748 448.285,986.675 448.871,996.39 449.458,1005.76 450.044,1014.81 450.631,1023.85 451.217,1027.93 451.804,1034.1 452.39,1046.65 452.976,1058.73 453.563,1066.13 454.149,1071.32 454.736,1076.65 455.322,1087.79 455.908,1094.54 456.495,1099.02 457.081,1101.49 457.668,1105.46 458.254,1111.37 458.84,1115.27 459.427,1117.21 460.013,1125.11 460.6,1132.09 461.186,1133.84 461.773,1137.56 462.359,1140.86 462.945,1142.71 463.532,1146.05 464.118,1149.3 464.705,1152.61 465.291,1154.27 465.877,1155.64 466.464,1163.8 467.05,1163.79 467.637,1166.62 468.223,1169.74 468.809,1170.95 469.396,1175.22 469.982,1176.6 470.569,1179.38 471.155,1185.13 471.742,1186.27 472.328,1190.37 472.914,1191.5 473.501,1194.09 474.087,1194.53 474.674,1195.48 475.26,1197.7 475.846,1198.29 476.433,1199.2 477.019,1202.84 477.606,1206.18 478.192,1208.24 478.778,1209.94 479.365,1211.8 479.951,1216.43 480.538,1216.66 481.124,1219.57 481.711,1221.18 482.297,1219.52 482.883,1225.3 483.47,1228.07 484.056,1231.84 484.643,1238.21 485.229,1241.29 485.815,1241.75 486.402,1242.43 486.988,1244.06 487.575,1242.99 488.161,1243.47 488.748,1242.53 489.334,1241.75 489.92,1243.47 490.507,1242.29 491.093,1241.38 491.68,1242.03 492.266,1241.29 492.852,1240.59 493.439,1239.98 494.025,1239.23 494.612,1239.89 495.198,1240.55 495.784,1238.71 496.371,1240.52 496.957,1240.08 497.544,1240.67 498.13,1242.71 498.717,1242.25 499.303,1244.18 499.889,1244.78 500.476,1247.95 501.062,1249.63 501.649,1247.15 502.235,1246.41 502.821,1245.44 503.408,1243.22 503.994,1244.97 504.581,1244.17 505.167,1246.07 505.753,1246.51 506.34,1247.36 506.926,1246.62 507.513,1247.28 508.099,1249.32 508.686,1247.07 509.272,1246.26 509.858,1242.86 510.445,1243.83 511.031,1247.25 511.618,1247.82 512.204,1247.97 512.79,1249.73 513.377,1246.35 513.963,1244.48 514.55,1243.89 515.136,1242.19 515.722,1244.29 516.309,1244.84 516.895,1244.08 517.482,1243.49 518.068,1240.36 518.655,1238.69 519.241,1241.99 519.827,1243.11 520.414,1242.75 521,1239.63 521.587,1239.13 522.173,1236.24 522.759,1236.12 523.346,1234.44 523.932,1238.06 524.519,1237.62 525.105,1238.44 525.691,1238 526.278,1234.98 526.864,1237.73 527.451,1237.16 528.037,1236.77 528.624,1236.7 529.21,1239.02 529.796,1238.55 530.383,1238.08 530.969,1238.94 531.556,1241.07 532.142,1241.75 532.728,1238.69 533.315,1242.11 533.901,1242.7 534.488,1248.72 535.074,1247.89 535.661,1249.5 536.247,1248.54 536.833,1248.83 537.42,1250.53 538.006,1250.42 538.593,1245.5 539.179,1245.75 539.765,1244.98 540.352,1241.58 540.938,1243.28 541.525,1243.78 542.111,1244.29 542.697,1247.17 543.284,1246.27 543.87,1242.89 544.457,1243.57 545.043,1242.72 545.63,1240.6 546.216,1237.65 546.802,1239.6 547.389,1240.56 547.975,1241.51 548.562,1241.23 549.148,1237.94 549.734,1236.25 550.321,1237 550.907,1239.29 551.494,1237.47 552.08,1241.93 552.666,1240.22 553.253,1240.86 553.839,1241.37 554.426,1238.17 555.012,1234 555.599,1234.82 556.185,1230.76 556.771,1232.07 557.358,1233.05 557.944,1232.81 558.531,1231.31 559.117,1233.89 559.703,1232.59 560.29,1231.06 560.876,1232.15 561.463,1233.12 562.049,1232.77 562.635,1233.83 563.222,1232.58 563.808,1233.33 564.395,1232.92 564.981,1232.93 565.568,1235.21 566.154,1234.88 566.74,1234.73 567.327,1236.93 567.913,1235.24 568.5,1234.86 569.086,1234.67 569.672,1235.62 570.259,1236.47 570.845,1236.22 571.432,1238.1 572.018,1235.26 572.605,1236.34 573.191,1235.95 573.777,1235.54 574.364,1234.94 574.95,1234.58 575.537,1235.4 576.123,1236.34 576.709,1236.09 577.296,1236.98 577.882,1236.36 578.469,1236.91 579.055,1237.5 579.641,1240.68 580.228,1237.75 580.814,1239.73 581.401,1239.19 581.987,1238.01 582.574,1238.67 583.16,1239.22 583.746,1236.12 584.333,1236.87 584.919,1235.19 585.506,1232.37 586.092,1233.44 586.678,1235.68 587.265,1235.05 587.851,1235.61 588.438,1234.99 589.024,1233.43 589.61,1233.07 590.197,1232.78 590.783,1231.06 591.37,1232.11 591.956,1230.62 592.543,1231.87 593.129,1232.87 593.715,1233.83 594.302,1234.54 594.888,1236.63 595.475,1237.12 596.061,1236.37 596.647,1235.98 597.234,1234.17 597.82,1233.78 598.407,1234.69 598.993,1234.1 599.579,1233.68 600.166,1234.5 600.752,1235.19 601.339,1233.29 601.925,1235.16 602.512,1234.69 603.098,1231.81 603.684,1232.66 604.271,1234.46 604.857,1235.36 605.444,1233.81 606.03,1233.3 606.616,1232.87 607.203,1234.09 607.789,1233.58 608.376,1232.01 608.962,1232.86 609.548,1233.71 610.135,1231.64 610.721,1228.81 611.308,1228.65 611.894,1227.27 612.481,1223.32 613.067,1224.46 613.653,1224.33 614.24,1225.54 614.826,1224.17 615.413,1224.22 615.999,1222.95 616.585,1221.95 617.172,1220.95 617.758,1219.9 618.345,1222.55 618.931,1222.64 619.518,1221.34 620.104,1220.39 620.69,1224.15 621.277,1222.93 621.863,1224.08 622.45,1225.04 623.036,1222.65 623.622,1223.9 624.209,1222.53 624.795,1221.63 625.382,1219.37 625.968,1222.33 626.554,1224.6 627.141,1227.03 627.727,1230.75 628.314,1230.24 628.9,1231.44 629.487,1229.98 630.073,1231.13 630.659,1227.22 631.246,1227.19 631.832,1225.86 632.419,1226.9 633.005,1226.69 633.591,1225.36 634.178,1222.78 634.764,1220.5 635.351,1218.12 635.937,1218.18 636.523,1219.8 637.11,1218.71 637.696,1221.45 638.283,1222.88 638.869,1224.04 639.456,1222.82 640.042,1221.64 640.628,1218.04 641.215,1220.8 641.801,1220.98 642.388,1220.19 642.974,1218.71 643.56,1217.48 644.147,1217.72 644.733,1219.49 645.32,1222.01 645.906,1223.49 646.492,1223.36 647.079,1224.54 647.665,1224.19 648.252,1224 648.838,1222.78 649.425,1221.24 650.011,1221.39 650.597,1222.59 651.184,1223.8 651.77,1224.13 652.357,1222.89 652.943,1226.55 653.529,1227.26 654.116,1228.03 654.702,1227.75 655.289,1226.28 655.875,1227.36 656.462,1228.31 657.048,1225.57 657.634,1225.65 658.221,1226.79 658.807,1224 659.394,1226.3 659.98,1226.07 660.566,1227.07 661.153,1225.45 661.739,1226.51 662.326,1225.54 662.912,1226.71 663.498,1227.72 664.085,1226.03 664.671,1224.52 665.258,1222 665.844,1219.33 666.431,1219.44 667.017,1219.32 667.603,1220.61 668.19,1220.26 668.776,1221.33 669.363,1221.37 669.949,1221.33 670.535,1221.32 671.122,1221.29 671.708,1221.28 672.295,1217.5 672.881,1218.84 673.467,1218.84 674.054,1219.04 674.64,1220.39 675.227,1220.39 675.813,1220.47 676.4,1221.81 676.986,1220.37 677.572,1221.68 678.159,1222.73 678.745,1222.69 679.332,1220.36 679.918,1221.88 680.504,1221.77 681.091,1219.48 681.677,1218.4 682.264,1218.59 682.85,1218.47 683.436,1219.79 684.023,1220.89 684.609,1224.41 685.196,1224.5 685.782,1225.45 686.369,1226.63 686.955,1226.07 687.541,1224.62 688.128,1223.14 688.714,1223.05 689.301,1225.17 689.887,1224.79 690.473,1225.7 691.06,1226.69 691.646,1227.62 692.233,1229.71 692.819,1229.3 693.405,1227.59 693.992,1230.94 694.578,1232.71 695.165,1230.95 695.751,1230.25 696.338,1231 696.924,1231.85 697.51,1232.35 698.097,1232.77 698.683,1232.18 699.27,1230.06 699.856,1228.14 700.442,1226.28 701.029,1224.75 701.615,1224.33 702.202,1223.97 702.788,1227.46 703.375,1224.55 703.961,1224.3 704.547,1224.02 705.134,1226.1 705.72,1222.1 706.307,1222.12 706.893,1223.09 707.479,1224.13 708.066,1226.09 708.652,1224.61 709.239,1223.07 709.825,1220.49 710.411,1219.57 710.998,1220.88 711.584,1221.65 712.171,1222.74 712.757,1225.06 713.344,1225.82 713.93,1229.2 714.516,1229.9 715.103,1230.49 715.689,1228.57 716.276,1229.43 716.862,1227.75 717.448,1226.32 718.035,1225.79 718.621,1225.28 719.208,1226.14 719.794,1225.84 720.38,1225.47 720.967,1221.18 721.553,1221.22 722.14,1222.24 722.726,1222.03 723.313,1221.79 723.899,1221.66 724.485,1218.97 725.072,1218.88 725.658,1218.78 726.245,1217.42 726.831,1217.43 727.417,1216.3 728.004,1215.05 728.59,1215.12 729.177,1213.97 729.763,1214.17 730.349,1214.47 730.936,1216.38 731.522,1215.07 732.109,1216.37 732.695,1216.38 733.282,1219.31 733.868,1220.54 734.454,1220.23 735.041,1218.88 735.627,1218.62 736.214,1220.96 736.8,1220.84 737.386,1219.41 737.973,1216.6 738.559,1216.71 739.146,1218.15 739.732,1220.47 740.318,1220.33 740.905,1220.05 741.491,1220.12 742.078,1220.18 742.664,1218.81 743.251,1218.82 743.837,1221 744.423,1220.89 745.01,1221.84 745.596,1219.18 746.183,1219.35 746.769,1215.55 747.355,1214.78 747.942,1213.68 748.528,1213.81 749.115,1214.01 749.701,1214.12 750.288,1215.46 750.874,1218.19 751.46,1222.03 752.047,1221.7 752.633,1221.46 753.22,1222.62 753.806,1222.3 754.392,1219.45 754.979,1219.31 755.565,1218.21 756.152,1218.18 756.738,1220.35 757.324,1217.52 757.911,1214.8 758.497,1213.78 759.084,1212.66 759.67,1211.6 760.257,1211 760.843,1211.33 761.429,1209.23 762.016,1209.53 762.602,1211.33 763.189,1214.2 763.775,1210.71 764.361,1210.04 764.948,1211.57 765.534,1209.34 766.121,1208.53 766.707,1210.6 767.293,1209.81 767.88,1211.47 768.466,1212.97 769.053,1214.37 769.639,1214.46 770.226,1214.59 770.812,1214.76 771.398,1216.16 771.985,1214.93 772.571,1217.43 773.158,1217.41 773.744,1216.16 774.33,1216.53 774.917,1217.66 775.503,1215.19 776.09,1215.3 776.676,1215.33 777.262,1215.36 777.849,1217.98 778.435,1216.62 779.022,1215.55 779.608,1214.33 780.195,1214.54 780.781,1213.43 781.367,1213.7 781.954,1217.36 782.54,1217.1 783.127,1217.15 783.713,1215.94 784.299,1216.07 784.886,1216.01 785.472,1214.95 786.059,1215.11 786.645,1215.23 787.232,1215.33 787.818,1215.53 788.404,1216.72 788.991,1216.7 789.577,1216.75 790.164,1216.91 790.75,1216.93 791.336,1218.05 791.923,1218.04 792.509,1218.09 793.096,1219.25 793.682,1219.19 794.268,1217.7 794.855,1217.53 795.441,1217.62 796.028,1218.84 796.614,1217.22 797.201,1217.17 797.787,1218.41 798.373,1219.52 798.96,1218.04 799.546,1216.53 800.133,1216.5 800.719,1216.38 801.305,1217.32 801.892,1218.56 802.478,1221 803.065,1218.62 803.651,1219.71 804.237,1218.16 804.824,1219.56 805.41,1222.03 805.997,1220.51 806.583,1220.43 807.17,1220.24 807.756,1220.16 808.342,1217.5 808.929,1216.49 809.515,1216.55 810.102,1216.43 810.688,1217.46 811.274,1216.13 811.861,1213.84 812.447,1214.91 813.034,1214.9 813.62,1216.16 814.206,1217.44 814.793,1219.97 815.379,1221.21 815.966,1221.01 816.552,1219.55 817.139,1219.17 817.725,1220.2 818.311,1220.13 818.898,1219.84 819.484,1222.29 820.071,1221.78 820.657,1222.81 821.243,1221.29 821.83,1219.61 822.416,1218.62 823.003,1218.72 823.589,1218.56 824.175,1218.52 824.762,1219.4 825.348,1219.09 825.935,1221.42 826.521,1218.64 827.108,1217.43 827.694,1214.99 828.28,1215.28 828.867,1212.69 829.453,1214.35 830.04,1215.56 830.626,1216.79 831.212,1216.69 831.799,1216.5 832.385,1216.51 832.972,1219.07 833.558,1217.79 834.145,1218.98 834.731,1218.92 835.317,1219.82 835.904,1220.83 836.49,1219.39 837.077,1218.91 837.663,1221.13 838.249,1222.27 838.836,1221.77 839.422,1221.19 840.009,1220.91 840.595,1220.71 841.181,1219.14 841.768,1221.67 842.354,1221.66 842.941,1219.83 843.527,1218.61 844.114,1212.32 844.7,1218.76 845.286,1219.89 845.873,1219.59 846.459,1218.28 847.046,1219.28 847.632,1219.14 848.218,1219.17 848.805,1218.9 849.391,1219.66 849.978,1215.55 850.564,1219.38 851.15,1216.83 851.737,1219.16 852.323,1216.55 852.91,1216.53 853.496,1218.96 854.083,1218.8 854.669,1220.06 855.255,1218.59 855.842,1219.71 856.428,1219.6 857.015,1221.73 857.601,1220.24 858.187,1220.95 858.774,1218.1 859.36,1219.24 859.947,1216.54 860.533,1214.19 861.119,1218.16 861.706,1217.98 862.292,1217.94 862.879,1218.17 863.465,1216.97 864.052,1214.55 864.638,1217.04 865.224,1215.68 865.811,1214.47 866.397,1212.14 866.984,1217.17 867.57,1218.31 868.156,1221.73 868.743,1221.59 869.329,1218.8 869.916,1217.62 870.502,1218.73 871.089,1217.41 871.675,1218.35 872.261,1219.32 872.848,1217.78 873.434,1220.19 874.021,1217.3 874.607,1216.09 875.193,1215.99 875.78,1216.23 876.366,1215.12 876.953,1212.54 877.539,1215.38 878.125,1215.51 878.712,1216.55 879.298,1216.59 879.885,1216.34 880.471,1217.6 881.058,1217.52 881.644,1216.22 882.23,1216.27 882.817,1216.31 883.403,1216.25 883.99,1216.4 884.576,1216.43 885.162,1216.24 885.749,1212.47 886.335,1213.85 886.922,1215.35 887.508,1214.19 888.094,1214.1 888.681,1210.68 889.267,1210.82 889.854,1212.46 890.44,1213.79 891.027,1214.13 891.613,1214.36 892.199,1215.4 892.786,1215.58 893.372,1219 893.959,1216.32 894.545,1216.25 895.131,1216.43 895.718,1215.27 896.304,1216.45 896.891,1216.5 897.477,1219.82 898.063,1218.26 898.65,1221.78 899.236,1220.41 899.823,1218.94 900.409,1217.75 900.996,1218.7 901.582,1217.26 902.168,1217.16 902.755,1218.41 903.341,1215.87 903.928,1214.65 904.514,1214.45 905.1,1213.22 905.687,1213.45 906.273,1213.51 906.86,1217.19 907.446,1214.93 908.032,1214.04 908.619,1215.04 909.205,1216.29 909.792,1215.2 910.378,1217.79 910.965,1217.62 911.551,1215.26 912.137,1215.07 912.724,1214.02 913.31,1214.15 913.897,1211.81 914.483,1214.66 915.069,1215.88 915.656,1216.11 916.242,1217.04 916.829,1217.02 917.415,1215.65 918.002,1215.51 918.588,1213.34 919.174,1211.21 919.761,1211.89 920.347,1211.97 920.934,1213.68 921.52,1214.85 922.106,1215.11 922.693,1217.44 923.279,1217.29 923.866,1220.62 924.452,1221.57 925.038,1222.19 925.625,1221.8 926.211,1217.8 926.798,1218.87 927.384,1218.5 927.971,1215.6 928.557,1215.59 929.143,1215.4 929.73,1209.37 930.316,1209.69 930.903,1211.15 931.489,1211.39 932.075,1210.41 932.662,1209.61 933.248,1211.3 933.835,1209.13 934.421,1206.85 935.007,1204.77 935.594,1205.39 936.18,1204.73 936.767,1206.4 937.353,1205.67 937.94,1204.92 938.526,1206.77 939.112,1208.66 939.699,1206.33 940.285,1207.76 940.872,1205.95 941.458,1205.18 942.044,1205.81 942.631,1206.5 943.217,1207.01 943.804,1209.87 944.39,1209.04 944.976,1208.02 945.563,1208.11 946.149,1207.32 946.736,1208.82 947.322,1207.9 947.909,1210.53 948.495,1209.7 949.081,1210.16 949.668,1210.33 950.254,1210.64 950.841,1212.13 951.427,1212.43 952.013,1211.57 952.6,1209.3 953.186,1210.53 953.773,1210.78 954.359,1213.36 954.945,1210.88 955.532,1210.97 956.118,1211.41 956.705,1210.32 957.291,1211.81 957.878,1209.55 958.464,1212.55 959.05,1211.51 959.637,1211.5 960.223,1210.43 960.81,1213.11 961.396,1215.76 961.982,1217.15 962.569,1218.3 963.155,1218.05 963.742,1219.16 964.328,1216.6 964.915,1215.6 965.501,1215.6 966.087,1213.08 966.674,1214.68 967.26,1215.77 967.847,1213.52 968.433,1214.94 969.019,1213.7 969.606,1215.06 970.192,1215.18 970.779,1214.95 971.365,1216.19 971.951,1214.6 972.538,1213.59 973.124,1213.6 973.711,1213.73 974.297,1215 974.884,1214.95 975.47,1212.47 976.056,1212.73 976.643,1215.44 977.229,1216.73 977.816,1215.57 978.402,1215.47 978.988,1215.44 979.575,1217.7 980.161,1218.92 980.748,1221.18 981.334,1219.9 981.92,1222.24 982.507,1219.48 983.093,1219.1 983.68,1218.82 984.266,1216.41 984.853,1216.33 985.439,1214.95 986.025,1216.11 986.612,1213.62 987.198,1213.56 987.785,1216.02 988.371,1215.7 988.957,1215.68 989.544,1215.78 990.13,1215.57 990.717,1216.85 991.303,1218.96 991.889,1218.48 992.476,1218.44 993.062,1219.53 993.649,1217.96 994.235,1216.65 994.822,1217.83 995.408,1217.52 995.994,1216.23 996.581,1213.73 997.167,1215.01 997.754,1215 998.34,1217.49 998.926,1217.27 999.513,1217.21 1000.1,1216.02 1000.69,1215.86 1001.27,1217.02 1001.86,1215.85 1002.44,1214.83 1003.03,1212.48 1003.62,1211.4 1004.2,1210.55 1004.79,1208.44 1005.38,1212.59 1005.96,1211.59 1006.55,1210.41 1007.14,1208.1 1007.72,1209.71 1008.31,1210.1 1008.9,1209.08 1009.48,1204.73 1010.07,1208.83 1010.65,1209.27 1011.24,1211.34 1011.83,1212.95 1012.41,1211.78 1013,1212.06 1013.59,1213.52 1014.17,1213.71 1014.76,1215.27 1015.35,1216.62 1015.93,1217.7 1016.52,1217.44 1017.11,1218.42 1017.69,1218 1018.28,1218.06 1018.86,1217.68 1019.45,1216.28 1020.04,1218.75 1020.62,1218.51 1021.21,1221.83 1021.8,1223.94 1022.38,1222.49 1022.97,1219.7 1023.56,1215.79 1024.14,1215.66 1024.73,1217.05 1025.32,1218.08 1025.9,1218.11 1026.49,1218.17 1027.07,1218.1 1027.66,1219.99 1028.25,1219.62 1028.83,1218.19 1029.42,1221.57 1030.01,1220.03 1030.59,1219.93 1031.18,1218.43 1031.77,1218.11 1032.35,1218.01 1032.94,1219.08 1033.52,1218.77 1034.11,1220.63 1034.7,1219.22 1035.28,1217.77 1035.87,1216.27 1036.46,1216.23 1037.04,1211.32 1037.63,1211.67 1038.22,1211.78 1038.8,1211.79 1039.39,1211.76 1039.98,1213.17 1040.56,1213.26 1041.15,1211.98 1041.73,1213.23 1042.32,1214.6 1042.91,1214.45 1043.49,1214.36 1044.08,1214.29 1044.67,1214.24 1045.25,1211.61 1045.84,1211.83 1046.43,1210.74 1047.01,1212.15 1047.6,1212.44 1048.19,1211.27 1048.77,1212.6 1049.36,1212.44 1049.94,1212.66 1050.53,1212.82 1051.12,1212.79 1051.7,1211.64 1052.29,1210.78 1052.88,1212.24 1053.46,1212.18 1054.05,1212.3 1054.64,1213.59 1055.22,1213.61 1055.81,1214.91 1056.39,1214.8 1056.98,1217.44 1057.57,1217.19 1058.15,1218.36 1058.74,1218.07 1059.33,1217.87 1059.91,1216.09 1060.5,1220.97 1061.09,1220.6 1061.67,1220.33 1062.26,1219.04 1062.85,1221.4 1063.43,1219.94 1064.02,1219.82 1064.6,1218.19 1065.19,1219.01 1065.78,1218.69 1066.36,1219.8 1066.95,1219.52 1067.54,1221.65 1068.12,1221.3 1068.71,1221.01 1069.3,1222.01 1069.88,1224.28 1070.47,1226.18 1071.06,1225.39 1071.64,1223.45 1072.23,1221.84 1072.81,1218.76 1073.4,1219.61 1073.99,1219.08 1074.57,1217.53 1075.16,1217.42 1075.75,1219.68 1076.33,1218.13 1076.92,1214.21 1077.51,1215.39 1078.09,1218.92 1078.68,1217.61 1079.26,1214.96 1079.85,1215.06 1080.44,1214.91 1081.02,1212.44 1081.61,1212.76 1082.2,1214.1 1082.78,1213.96 1083.37,1213.84 1083.96,1211.65 1084.54,1213.04 1085.13,1210.61 1085.72,1209.54 1086.3,1209.86 1086.89,1209.98 1087.47,1210.32 1088.06,1214.04 1088.65,1212.76 1089.23,1210.37 1089.82,1211.95 1090.41,1210.79 1090.99,1209.85 1091.58,1211.44 1092.17,1211.64 1092.75,1214.37 1093.34,1215.19 1093.93,1215.06 1094.51,1214.24 1095.1,1216.6 1095.68,1218.84 1096.27,1217.42 1096.86,1217.48 1097.44,1215.06 1098.03,1215.11 1098.62,1215.2 1099.2,1214.82 1099.79,1211.34 1100.38,1209.08 1100.96,1208.08 1101.55,1209.67 1102.14,1211.28 1102.72,1212.77 1103.31,1212.97 1103.89,1216.89 1104.48,1216.65 1105.07,1216.37 1105.65,1217.68 1106.24,1220.11 1106.83,1219.86 1107.41,1218.52 1108,1218.25 1108.59,1220.36 1109.17,1221.36 1109.76,1219.8 1110.34,1220.68 1110.93,1220.27 1111.52,1220.12 1112.1,1218.82 1112.69,1218.54 1113.28,1214.77 1113.86,1211.08 1114.45,1211.16 1115.04,1210.02 1115.62,1209.02 1116.21,1208.14 1116.8,1208.47 1117.38,1210.1 1117.97,1210.11 1118.55,1211.51 1119.14,1210.41 1119.73,1212.91 1120.31,1213.22 1120.9,1214.71 1121.49,1213.36 1122.07,1211.09 1122.66,1207.88 1123.25,1209.37 1123.83,1210.99 1124.42,1212.42 1125.01,1213.83 1125.59,1213.78 1126.18,1215.01 1126.76,1214.79 1127.35,1215.98 1127.94,1215.85 1128.52,1214.3 1129.11,1214.41 1129.7,1214.35 1130.28,1214.33 1130.87,1214.11 1131.46,1211.86 1132.04,1213.12 1132.63,1213.25 1133.21,1213.29 1133.8,1213.44 1134.39,1212.2 1134.97,1209.68 1135.56,1211.51 1136.15,1213.07 1136.73,1215.72 1137.32,1215.83 1137.91,1214.07 1138.49,1212.6 1139.08,1212.63 1139.67,1214.07 1140.25,1214.05 1140.84,1214.38 1141.42,1218.22 1142.01,1220.46 1142.6,1220.02 1143.18,1218.43 1143.77,1219.55 1144.36,1219.18 1144.94,1220.17 1145.53,1219.63 1146.12,1221.84 1146.7,1221.5 1147.29,1221.05 1147.88,1219.48 1148.46,1219.29 1149.05,1218.94 1149.63,1218.61 1150.22,1217.16 1150.81,1213.41 1151.39,1214.85 1151.98,1212.41 1152.57,1212.55 1153.15,1211.62 1153.74,1214.36 1154.33,1215.68 1154.91,1217.85 1155.5,1218.54 1156.09,1214.52 1156.67,1215.58 1157.26,1215.48 1157.84,1216.4 1158.43,1216.2 1159.02,1213.62 1159.6,1214.62 1160.19,1214.73 1160.78,1213.45 1161.36,1211.22 1161.95,1211.37 1162.54,1212.84 1163.12,1212.92 1163.71,1211.95 1164.29,1209.73 1164.88,1208.7 1165.47,1210.17 1166.05,1211.54 1166.64,1212.85 1167.23,1214.17 1167.81,1215.43 1168.4,1214.17 1168.99,1213.01 1169.57,1215.68 1170.16,1215.37 1170.75,1215.21 1171.33,1215.19 1171.92,1214.03 1172.5,1211.61 1173.09,1211.46 1173.68,1214.31 1174.26,1214.56 1174.85,1215.75 1175.44,1216.81 1176.02,1215.76 1176.61,1214.77 1177.2,1215.06 1177.78,1214.97 1178.37,1214.82 1178.96,1216.07 1179.54,1215.82 1180.13,1218.3 1180.71,1217.99 1181.3,1215.26 1181.89,1217.62 1182.47,1220.01 1183.06,1219.74 1183.65,1217.12 1184.23,1216.95 1184.82,1216.73 1185.41,1217.63 1185.99,1218.58 1186.58,1218.44 1187.16,1214.71 1187.75,1214.62 1188.34,1218.64 1188.92,1218.45 1189.51,1219.88 1190.1,1222.12 1190.68,1223.11 1191.27,1221.6 1191.86,1218.91 1192.44,1218.85 1193.03,1218.88 1193.62,1218.79 1194.2,1217.58 1194.79,1217.36 1195.37,1218.43 1195.96,1218.38 1196.55,1219.24 1197.13,1219.18 1197.72,1215.37 1198.31,1215.51 1198.89,1216.59 1199.48,1216.25 1200.07,1215.88 1200.65,1215.82 1201.24,1215.65 1201.83,1216.71 1202.41,1217.61 1203,1217.3 1203.58,1217.06 1204.17,1216.72 1204.76,1216.72 1205.34,1217.64 1205.93,1216.5 1206.52,1217.45 1207.1,1214.92 1207.69,1213.7 1208.28,1215.16 1208.86,1216.46 1209.45,1215.1 1210.03,1217.48 1210.62,1215.92 1211.21,1213.43 1211.79,1212.38 1212.38,1212.56 1212.97,1216.52 1213.55,1215.18 1214.14,1212.73 1214.73,1214.14 1215.31,1216.36 1215.9,1215.19 1216.49,1212.47 1217.07,1214.91 1217.66,1214.97 1218.24,1216.17 1218.83,1218.35 1219.42,1216.43 1220,1215.01 1220.59,1213.53 1221.18,1214.97 1221.76,1214.98 1222.35,1217.3 1222.94,1216.96 1223.52,1218.85 1224.11,1218.87 1224.7,1218.65 1225.28,1218.24 1225.87,1216.79 1226.45,1216.47 1227.04,1214.07 1227.63,1217.83 1228.21,1213.78 1228.8,1212.63 1229.39,1211.46 1229.97,1211.39 1230.56,1211.65 1231.15,1213.03 1231.73,1214.28 1232.32,1214.11 1232.91,1213 1233.49,1209.35 1234.08,1206.08 1234.66,1205.38 1235.25,1204.59 1235.84,1205.2 1236.42,1206.92 1237.01,1207.57 1237.6,1207.67 1238.18,1209.22 1238.77,1205.77 1239.36,1203.63 1239.94,1201.95 1240.53,1198.92 1241.11,1200.84 1241.7,1200.53 1242.29,1201.36 1242.87,1205.64 1243.46,1205 1244.05,1205.74 1244.63,1209.08 1245.22,1208.4 1245.81,1210.08 1246.39,1209.26 1246.98,1211.63 1247.57,1213.07 1248.15,1214.68 1248.74,1214.69 1249.32,1214.66 1249.91,1213.5 1250.5,1213.5 1251.08,1211.02 1251.67,1211.32 1252.26,1212.38 1252.84,1213.83 1253.43,1216.19 1254.02,1217.48 1254.6,1214.65 1255.19,1214.93 1255.78,1214.93 1256.36,1216.02 1256.95,1214.69 1257.53,1213.36 1258.12,1213.43 1258.71,1213.45 1259.29,1213.49 1259.88,1214.89 1260.47,1217.27 1261.05,1219.44 1261.64,1219.05 1262.23,1218.88 1262.81,1218.32 1263.4,1215.64 1263.98,1216.83 1264.57,1216.9 1265.16,1215.45 1265.74,1216.6 1266.33,1215.4 1266.92,1215.3 1267.5,1218.96 1268.09,1219.89 1268.68,1218.28 1269.26,1220.33 1269.85,1220.02 1270.44,1221 1271.02,1220.74 1271.61,1218.08 1272.19,1216.71 1272.78,1215.38 1273.37,1216.51 1273.95,1216.51 1274.54,1215.14 1275.13,1212.75 1275.71,1213.03 1276.3,1214.26 1276.89,1214.2 1277.47,1215.72 1278.06,1220.55 1278.65,1221.33 1279.23,1223.43 1279.82,1222.98 1280.4,1223.8 1280.99,1223.44 1281.58,1223.01 1282.16,1222.51 1282.75,1221.97 1283.34,1221.73 1283.92,1222.41 1284.51,1220.75 1285.1,1217.67 1285.68,1217.32 1286.27,1215.77 1286.86,1211.62 1287.44,1213.09 1288.03,1212.01 1288.61,1211 1289.2,1212.3 1289.79,1212.26 1290.37,1213.75 1290.96,1213.98 1291.55,1214.11 1292.13,1212.93 1292.72,1213.31 1293.31,1212.02 1293.89,1212.04 1294.48,1213.44 1295.06,1210.76 1295.65,1210.98 1296.24,1209.8 1296.82,1209.96 1297.41,1210.34 1298,1206.84 1298.58,1205.86 1299.17,1207.54 1299.76,1209.33 1300.34,1209.79 1300.93,1208.84 1301.52,1213.98 1302.1,1211.69 1302.69,1211.95 1303.27,1211.97 1303.86,1210.82 1304.45,1210.93 1305.03,1212.2 1305.62,1212.36 1306.21,1212.52 1306.79,1214.02 1307.38,1215.64 1307.97,1216.66 1308.55,1217.62 1309.14,1217.36 1309.73,1218.45 1310.31,1215.84 1310.9,1213.56 1311.48,1213.55 1312.07,1213.66 1312.66,1211.44 1313.24,1212.65 1313.83,1214.26 1314.42,1215.33 1315,1215.28 1315.59,1215.2 1316.18,1218.68 1316.76,1219.95 1317.35,1218.4 1317.93,1219.25 1318.52,1219.01 1319.11,1216.15 1319.69,1214.91 1320.28,1215.23 1320.87,1215.17 1321.45,1215.28 1322.04,1215.24 1322.63,1212.38 1323.21,1213.68 1323.8,1212.3 1324.39,1211.02 1324.97,1211.37 1325.56,1213.98 1326.14,1212.54 1326.73,1212.46 1327.32,1212.45 1327.9,1212.26 1328.49,1213.62 1329.08,1213.56 1329.66,1212.16 1330.25,1213.47 1330.84,1213.48 1331.42,1217.04 1332.01,1218.03 1332.6,1220.32 1333.18,1222.62 1333.77,1223.52 1334.35,1222.92 1334.94,1221.04 1335.53,1218.11 1336.11,1214.57 1336.7,1214.43 1337.29,1213.07 1337.87,1214.42 1338.46,1211.98 1339.05,1212.07 1339.63,1209.79 1340.22,1208.55 1340.8,1206.22 1341.39,1207.85 1341.98,1210.63 1342.56,1211.88 1343.15,1213.12 1343.74,1213.29 1344.32,1212.05 1344.91,1211.05 1345.5,1211.36 1346.08,1212.82 1346.67,1212.71 1347.26,1212.9 1347.84,1212.18 1348.43,1213.75 1349.01,1214.73 1349.6,1214.98 1350.19,1212.74 1350.77,1212.78 1351.36,1212.62 1351.95,1217.22 1352.53,1219.48 1353.12,1218.24 1353.71,1219.51 1354.29,1218.1 1354.88,1218.15 1355.47,1216.85 1356.05,1215.34 1356.64,1219.91 1357.22,1219.44 1357.81,1220.46 1358.4,1220.16 1358.98,1219.96 1359.57,1216.93 1360.16,1214.54 1360.74,1213.48 1361.33,1215.71 1361.92,1213.04 1362.5,1213.02 1363.09,1213.2 1363.68,1212.18 1364.26,1214.77 1364.85,1212.39 1365.43,1212.42 1366.02,1213.7 1366.61,1211.13 1367.19,1213.79 1367.78,1213.63 1368.37,1209.64 1368.95,1208.81 1369.54,1210.19 1370.13,1210.44 1370.71,1209.45 1371.3,1209.96 1371.88,1211.63 1372.47,1211.56 1373.06,1210.52 1373.64,1211.85 1374.23,1209.28 1374.82,1209.43 1375.4,1207.29 1375.99,1208.89 1376.58,1205.41 1377.16,1207.22 1377.75,1206.63 1378.34,1209.8 1378.92,1209.96 1379.51,1210.53 1380.09,1210.75 1380.68,1207.33 1381.27,1208.74 1381.85,1207.81 1382.44,1209.62 1383.03,1209.46 1383.61,1209.57 1384.2,1210.85 1384.79,1213.64 1385.37,1213.55 1385.96,1213.52 1386.55,1213.52 1387.13,1214.79 1387.72,1216.17 1388.3,1217.34 1388.89,1218.22 1389.48,1222.73 1390.06,1219.71 1390.65,1219.49 1391.24,1217.97 1391.82,1215.53 1392.41,1216.79 1393,1212.89 1393.58,1211.69 1394.17,1211.86 1394.75,1215.88 1395.34,1216.97 1395.93,1218.17 1396.51,1220.03 1397.1,1221.06 1397.69,1220.67 1398.27,1220.36 1398.86,1218.9 1399.45,1214.86 1400.03,1213.61 1400.62,1212.34 1401.21,1214.93 1401.79,1217.29 1402.38,1217.25 1402.96,1214.5 1403.55,1214.37 1404.14,1215.39 1404.72,1216.53 1405.31,1213.88 1405.9,1215.35 1406.48,1215.26 1407.07,1216.38 1407.66,1214.97 1408.24,1217.46 1408.83,1217.52 1409.42,1217.2 1410,1217.32 1410.59,1215.99 1411.17,1215.74 1411.76,1216.9 1412.35,1216.69 1412.93,1216.49 1413.52,1217.72 1414.11,1218.5 1414.69,1215.75 1415.28,1212.08 1415.87,1210.98 1416.45,1208.38 1417.04,1206.24 1417.63,1207.9 1418.21,1211.98 1418.8,1211.21 1419.38,1212.7 1419.97,1216.53 1420.56,1214.07 1421.14,1211.43 1421.73,1211.47 1422.32,1212.74 1422.9,1213.06 1423.49,1215.79 1424.08,1217.06 1424.66,1215.59 1425.25,1215.73 1425.83,1215.53 1426.42,1214.36 1427.01,1215.56 1427.59,1211.73 1428.18,1211.95 1428.77,1211.17 1429.35,1210.16 1429.94,1207.76 1430.53,1205.51 1431.11,1204.6 1431.7,1206.46 1432.29,1206.47 1432.87,1206.78 1433.46,1207.11 1434.04,1208.62 1434.63,1208.98 1435.22,1210.42 1435.8,1210.34 1436.39,1211.83 1436.98,1213.44 1437.56,1215.79 1438.15,1215.61 1438.74,1215.49 1439.32,1215.37 1439.91,1212.67 1440.5,1213.82 1441.08,1216.41 1441.67,1215.11 1442.25,1214.94 1442.84,1214.75 1443.43,1214.61 1444.01,1214.77 1444.6,1216.05 1445.19,1212.45 1445.77,1213.98 1446.36,1212.92 1446.95,1211.94 1447.53,1211.86 1448.12,1209.33 1448.7,1209.63 1449.29,1211.17 1449.88,1211.48 1450.46,1210.45 1451.05,1209.38 1451.64,1208.67 1452.22,1209.17 1452.81,1210.69 1453.4,1213.11 1453.98,1214.39 1454.57,1215.48 1455.16,1214.13 1455.74,1214.14 1456.33,1214.2 1456.91,1214.25 1457.5,1214.31 1458.09,1212.03 1458.67,1212.17 1459.26,1214.75 1459.85,1216.4 1460.43,1216.43 1461.02,1215.24 1461.61,1212.69 1462.19,1211.56 1462.78,1210.8 1463.37,1212.33 1463.95,1212.64 1464.54,1212.9 1465.12,1211.61 1465.71,1210.58 1466.3,1210.79 1466.88,1213.4 1467.47,1213.62 1468.06,1212.18 1468.64,1208.64 1469.23,1207.73 1469.82,1207.9 1470.4,1210.83 1470.99,1211.08 1471.57,1211.44 1472.16,1211.39 1472.75,1211.55 1473.33,1209.07 1473.92,1210.4 1474.51,1209.45 1475.09,1207.5 1475.68,1207.97 1476.27,1210.72 1476.85,1213.51 1477.44,1214.81 1478.03,1215.9 1478.61,1216.72 1479.2,1216.75 1479.78,1218.02 1480.37,1217.84 1480.96,1218.77 1481.54,1217.4 1482.13,1217.52 1482.72,1218.75 1483.3,1219.69 1483.89,1221.85 1484.48,1220.36 1485.06,1218.95 1485.65,1219.87 1486.24,1217.06 1486.82,1214.56 1487.41,1217.16 1487.99,1217.98 1488.58,1216.54 1489.17,1217.76 1489.75,1216.19 1490.34,1219.87 1490.93,1219.59 1491.51,1217.99 1492.1,1217.53 1492.69,1217.17 1493.27,1218.06 1493.86,1216.9 1494.45,1216.89 1495.03,1218.97 1495.62,1218.96 1496.2,1218.55 1496.79,1217.17 1497.38,1216.88 1497.96,1216.68 1498.55,1215.3 1499.14,1217.55 1499.72,1217.33 1500.31,1217.18 1500.9,1218.04 1501.48,1216.64 1502.07,1216.83 1502.65,1216.81 1503.24,1219.07 1503.83,1220.02 1504.41,1218.53 1505,1219.64 1505.59,1218.15 1506.17,1216.96 1506.76,1214.22 1507.35,1214.45 1507.93,1213.01 1508.52,1210.68 1509.11,1209.75 1509.69,1211.21 1510.28,1211.13 1510.86,1210.96 1511.45,1211.15 1512.04,1212.63 1512.62,1214.04 1513.21,1215.15 1513.8,1214.15 1514.38,1215.11 1514.97,1212.69 1515.56,1211.3 1516.14,1215.16 1516.73,1215.09 1517.32,1211.2 1517.9,1212.55 1518.49,1210.09 1519.07,1211.46 1519.66,1210.17 1520.25,1212.92 1520.83,1213.15 1521.42,1210.89 1522.01,1210.96 1522.59,1212.3 1523.18,1212.22 1523.77,1215.09 1524.35,1215.18 1524.94,1213.82 1525.52,1212.67 1526.11,1212.74 1526.7,1213.88 1527.28,1213.88 1527.87,1213.7 1528.46,1212.57 1529.04,1213.82 1529.63,1212.65 1530.22,1212.79 1530.8,1212.86 1531.39,1215.15 1531.98,1211.38 1532.56,1212.62 1533.15,1214.05 1533.73,1215.11 1534.32,1215.11 1534.91,1216.5 1535.49,1216.26 1536.08,1213.87 1536.67,1213.84 1537.25,1214.05 1537.84,1214.88 1538.43,1216.25 1539.01,1214.97 1539.6,1216.21 1540.19,1217.73 1540.77,1217.49 1541.36,1219.8 1541.94,1218.24 1542.53,1217.9 1543.12,1218.87 1543.7,1216.22 1544.29,1214.96 1544.88,1213.78 1545.46,1213.77 1546.05,1213.81 1546.64,1215.08 1547.22,1213.79 1547.81,1211.3 1548.4,1210.53 1548.98,1212.13 1549.57,1211 1550.15,1210.99 1550.74,1215.05 1551.33,1216.54 1551.91,1217.79 1552.5,1220.04 1553.09,1217.52 1553.67,1217.35 1554.26,1217.42 1554.85,1218.79 1555.43,1218.51 1556.02,1220.58 1556.6,1221.36 1557.19,1223.59 1557.78,1221.89 1558.36,1221.59 1558.95,1219.92 1559.54,1219.67 1560.12,1219.16 1560.71,1216.36 1561.3,1219.83 1561.88,1219.43 1562.47,1220.43 1563.06,1219.11 1563.64,1217.86 1564.23,1217.66 1564.81,1216.05 1565.4,1214.52 1565.99,1214.11 1566.57,1214.09 1567.16,1212.74 1567.75,1208.78 1568.33,1207.73 1568.92,1208.05 1569.51,1209.55 1570.09,1210.89 1570.68,1213.51 1571.27,1212.39 1571.85,1211.45 1572.44,1210.7 1573.02,1212.18 1573.61,1213.34 1574.2,1210.88 1574.78,1212.45 1575.37,1214.13 1575.96,1215.3 1576.54,1214.17 1577.13,1214.13 1577.72,1212.97 1578.3,1213.23 1578.89,1212.05 1579.47,1213.39 1580.06,1217.19 1580.65,1215.7 1581.23,1213 1581.82,1212.93 1582.41,1213.06 1582.99,1214.19 1583.58,1214.24 1584.17,1214.28 1584.75,1216.57 1585.34,1216.48 1585.93,1215.06 1586.51,1215.04 1587.1,1215.13 1587.68,1216.26 1588.27,1216.06 1588.86,1214.61 1589.44,1217.15 1590.03,1218.18 1590.62,1217.75 1591.2,1218.9 1591.79,1219.65 1592.38,1221.89 1592.96,1219.21 1593.55,1218.95 1594.14,1216.35 1594.72,1218.69 1595.31,1214.75 1595.89,1212.17 1596.48,1210.79 1597.07,1211.02 1597.65,1211.13 1598.24,1213.66 1598.83,1215.04 1599.41,1216.35 1600,1217.13 1600.59,1214.41 1601.17,1216.96 1601.76,1215.9 1602.34,1217.24 1602.93,1218.55 1603.52,1218.49 1604.1,1221.81 1604.69,1222.62 1605.28,1219.87 1605.86,1221.85 1606.45,1221.44 1607.04,1222.23 1607.62,1221.75 1608.21,1221.54 1608.8,1222.5 1609.38,1223.51 1609.97,1222.78 1610.55,1222.44 1611.14,1222.17 1611.73,1221.82 1612.31,1221.66 1612.9,1223.48 1613.49,1225.58 1614.07,1221.33 1614.66,1219.89 1615.25,1215.91 1615.83,1214.65 1616.42,1219.61 1617.01,1219.36 1617.59,1216.58 1618.18,1219.26 1618.76,1221.81 1619.35,1221.15 1619.94,1219.89 1620.52,1218.35 1621.11,1219.4 1621.7,1217.95 1622.28,1217.61 1622.87,1217.26 1623.46,1217.21 1624.04,1215.64 1624.63,1215.51 1625.22,1214.15 1625.8,1211.75 1626.39,1212.1 1626.97,1210.91 1627.56,1215.99 1628.15,1214.87 1628.73,1213.62 1629.32,1216.15 1629.91,1212.46 1630.49,1210.28 1631.08,1212.95 1631.67,1214.22 1632.25,1211.76 1632.84,1213.31 1633.42,1213.41 1634.01,1214.65 1634.6,1214.64 1635.18,1217.38 1635.77,1217.33 1636.36,1213.6 1636.94,1213.51 1637.53,1211.32 1638.12,1212.83 1638.7,1214.32 1639.29,1216.94 1639.88,1216.99 1640.46,1216.67 1641.05,1216.73 1641.63,1216.44 1642.22,1218.75 1642.81,1218.6 1643.39,1217.21 1643.98,1214.53 1644.57,1214.7 1645.15,1213.31 1645.74,1212.15 1646.33,1213.39 1646.91,1213.38 1647.5,1214.69 1648.09,1215.93 1648.67,1214.82 1649.26,1214.67 1649.84,1214.81 1650.43,1215.07 1651.02,1216.19 1651.6,1216.17 1652.19,1213.45 1652.78,1208.68 1653.36,1212.54 1653.95,1212.83 1654.54,1212.73 1655.12,1211.36 1655.71,1207.78 1656.29,1208.14 1656.88,1207.28 1657.47,1206.51 1658.05,1207.01 1658.64,1206.08 1659.23,1207.61 1659.81,1206.57 1660.4,1208.28 1660.99,1207.34 1661.57,1208.86 1662.16,1209.31 1662.75,1208.44 1663.33,1208.79 1663.92,1207.86 1664.5,1208.3 1665.09,1209.96 1665.68,1208.91 1666.26,1209.26 1666.85,1209.71 1667.44,1211.28 1668.02,1212.68 1668.61,1213.02 1669.2,1215.7 1669.78,1216.62 1670.37,1216.46 1670.96,1214.87 1671.54,1213.35 1672.13,1209.8 1672.71,1209.78 1673.3,1212.79 1673.89,1211.58 1674.47,1211.63 1675.06,1213.29 1675.65,1212.08 1676.23,1214.86 1676.82,1214.88 1677.41,1212.36 1677.99,1212.58 1678.58,1212.72 1679.17,1215.06 1679.75,1215.14 1680.34,1213.88 1680.92,1213.89 1681.51,1215.18 1682.1,1215.08 1682.68,1216.43 1683.27,1217.76 1683.86,1215.02 1684.44,1215.05 1685.03,1213.7 1685.62,1212.48 1686.2,1211.34 1686.79,1212.77 1687.37,1210.37 1687.96,1209.21 1688.55,1209.34 1689.13,1207.08 1689.72,1206.45 1690.31,1208.01 1690.89,1208.38 1691.48,1208.59 1692.07,1208.67 1692.65,1210.37 1693.24,1212.11 1693.83,1212.19 1694.41,1212.48 1695,1215.23 1695.58,1213.91 1696.17,1212.53 1696.76,1212.72 1697.34,1213.79 1697.93,1212.66 1698.52,1212.71 1699.1,1214.12 1699.69,1215.51 1700.28,1215.6 1700.86,1216.81 1701.45,1220.48 1702.04,1218.83 1702.62,1218.52 1703.21,1218.14 1703.79,1219.03 1704.38,1215.01 1704.97,1217.43 1705.55,1218.42 1706.14,1217.1 1706.73,1215.69 1707.31,1213.21 1707.9,1212.22 1708.49,1213.89 1709.07,1214.15 1709.66,1213.73 1710.24,1213.93 1710.83,1216.5 1711.42,1218.66 1712,1218.44 1712.59,1215.81 1713.18,1214.67 1713.76,1215.75 1714.35,1218.04 1714.94,1219.23 1715.52,1217.8 1716.11,1216.68 1716.7,1216.44 1717.28,1214.17 1717.87,1211.5 1718.45,1208.84 1719.04,1210.08 1719.63,1208.85 1720.21,1210.51 1720.8,1209.6 1721.39,1208.76 1721.97,1206.81 1722.56,1206.01 1723.15,1208.87 1723.73,1209.31 1724.32,1209.5 1724.91,1211.27 1725.49,1209.95 1726.08,1212.61 1726.66,1215.15 1727.25,1213.78 1727.84,1213.85 1728.42,1215 1729.01,1214.1 1729.6,1215.21 1730.18,1216.26 1730.77,1217.55 1731.36,1217.34 1731.94,1217.08 1732.53,1215.53 1733.11,1215.5 1733.7,1214.25 1734.29,1213.25 1734.87,1213.36 1735.46,1214.62 1736.05,1213.24 1736.63,1216.74 1737.22,1219.08 1737.81,1217.14 1738.39,1218.37 1738.98,1216.92 1739.57,1218.22 1740.15,1218.31 1740.74,1216.89 1741.32,1215.28 1741.91,1213.99 1742.5,1211.78 1743.08,1211.82 1743.67,1215.69 1744.26,1215.99 1744.84,1215.95 1745.43,1217.12 1746.02,1218.28 1746.6,1218.03 1747.19,1218.79 1747.78,1219.49 1748.36,1218.19 1748.95,1216.59 1749.53,1216.3 1750.12,1212.47 1750.71,1213.9 1751.29,1213.89 1751.88,1212.6 1752.47,1212.76 1753.05,1214.03 1753.64,1213.84 1754.23,1213.94 1754.81,1213.94 1755.4,1213.85 1755.99,1213.8 1756.57,1213.67 1757.16,1212.18 1757.74,1208.5 1758.33,1210 1758.92,1209.03 1759.5,1209.36 1760.09,1205.68 1760.68,1204.91 1761.26,1207.72 1761.85,1207.77 1762.44,1207.95 1763.02,1209.48 1763.61,1208.58 1764.19,1208.75 1764.78,1210.54 1765.37,1211.98 1765.95,1212.39 1766.54,1211.22 1767.13,1211.36 1767.71,1212.7 1768.3,1212.83 1768.89,1214.25 1769.47,1212.65 1770.06,1213.86 1770.65,1214.04 1771.23,1214 1771.82,1212.74 1772.4,1213.91 1772.99,1216.53 1773.58,1216.36 1774.16,1214.84 1774.75,1211.07 1775.34,1212.36 1775.92,1213.63 1776.51,1215.03 1777.1,1215.53 1777.68,1215.51 1778.27,1215.09 1778.86,1213.74 1779.44,1213.74 1780.03,1214.97 1780.61,1214.61 1781.2,1214.62 1781.79,1214.48 1782.37,1215.52 1782.96,1211.8 1783.55,1210.78 1784.13,1211.01 1784.72,1211.09 1785.31,1212.49 1785.89,1211.48 1786.48,1212.69 1787.06,1211.28 1787.65,1212.65 1788.24,1212.87 1788.82,1212.96 1789.41,1214.42 1790,1214.42 1790.58,1215.75 1791.17,1215.92 1791.76,1218.37 1792.34,1218.12 1792.93,1217.67 1793.52,1218.87 1794.1,1218.64 1794.69,1218.4 1795.27,1218.23 1795.86,1217.91 1796.45,1220.27 1797.03,1223.71 1797.62,1224.57 1798.21,1222.6 1798.79,1221.25 1799.38,1220.82 1799.97,1216.82 1800.55,1216.78 1801.14,1216.46 1801.73,1213.71 1802.31,1214.72 1802.9,1216.01 1803.48,1216.08 1804.07,1215.81 1804.66,1214.53 1805.24,1214.77 1805.83,1214.77 1806.42,1213.63 1807,1213.54 1807.59,1216.04 1808.18,1217.3 1808.76,1218.17 1809.35,1217.99 1809.94,1217.79 1810.52,1215.98 1811.11,1215.86 1811.69,1214.38 1812.28,1214.24 1812.87,1214.05 1813.45,1214.16 1814.04,1214.2 1814.63,1214.29 1815.21,1215.45 1815.8,1213.81 1816.39,1212.59 1816.97,1211.54 1817.56,1211.89 1818.14,1211.88 1818.73,1212.06 1819.32,1212.51 1819.9,1213.96 1820.49,1215.27 1821.08,1214.15 1821.66,1214.2 1822.25,1213.04 1822.84,1211.95 1823.42,1212.12 1824.01,1212.35 1824.6,1208.61 1825.18,1207.64 1825.77,1205.29 1826.35,1204.44 1826.94,1208.63 1827.53,1211.21 1828.11,1212.51 1828.7,1212.9 1829.29,1211.79 1829.87,1212.23 1830.46,1212.16 1831.05,1215.97 1831.63,1214.6 1832.22,1214.45 1832.81,1215.6 1833.39,1212.97 1833.98,1213.2 1834.56,1215.47 1835.15,1214.21 1835.74,1214.52 1836.32,1212.12 1836.91,1214.7 1837.5,1214.66 1838.08,1211.9 1838.67,1211.98 1839.26,1213.35 1839.84,1215.81 1840.43,1215.84 1841.01,1215.91 1841.6,1217.17 1842.19,1213.61 1842.77,1212.33 1843.36,1212.45 1843.95,1211.35 1844.53,1212.73 1845.12,1215.21 1845.71,1215.22 1846.29,1216.37 1846.88,1216.43 1847.47,1216.16 1848.05,1216.22 1848.64,1216.16 1849.22,1214.92 1849.81,1213.38 1850.4,1212.45 1850.98,1212.42 1851.57,1210.11 1852.16,1207.67 1852.74,1209.13 1853.33,1212.94 1853.92,1212.92 1854.5,1213.11 1855.09,1213.15 1855.68,1214.41 1856.26,1215.43 1856.85,1217.74 1857.43,1217.66 1858.02,1216.29 1858.61,1216.41 1859.19,1215.16 1859.78,1213.76 1860.37,1215.09 1860.95,1212.66 1861.54,1213.9 1862.13,1213.81 1862.71,1212.54 1863.3,1210.34 1863.88,1213.18 1864.47,1213.35 1865.06,1209.9 1865.64,1208.66 1866.23,1210.3 1866.82,1210.32 1867.4,1211.83 1867.99,1209.44 1868.58,1209.31 1869.16,1209.75 1869.75,1208.55 1870.34,1208.8 1870.92,1208.93 1871.51,1210.46 1872.09,1209.55 1872.68,1210.71 1873.27,1209.61 1873.85,1211.3 1874.44,1215.11 1875.03,1217.39 1875.61,1217.16 1876.2,1217.37 1876.79,1217.23 1877.37,1215.59 1877.96,1214.35 1878.55,1216.85 1879.13,1216.44 1879.72,1217.35 1880.3,1218.34 1880.89,1220.24 1881.48,1220.09 1882.06,1216.17 1882.65,1215.72 1883.24,1217.04 1883.82,1218.03 1884.41,1217.5 1885,1221.07 1885.58,1218.01 1886.17,1219.23 1886.76,1217.66 1887.34,1216.17 1887.93,1217.17 1888.51,1217.11 1889.1,1217.04 1889.69,1217.01 1890.27,1216.6 1890.86,1215.46 1891.45,1216.43 1892.03,1216.47 1892.62,1216.29 1893.21,1214.93 1893.79,1214.97 1894.38,1215.07 1894.96,1214.83 1895.55,1214.67 1896.14,1214.8 1896.72,1216.01 1897.31,1216.02 1897.9,1215.04 1898.48,1217.31 1899.07,1218.44 1899.66,1217.16 1900.24,1216.83 1900.83,1216.59 1901.42,1217.71 1902,1217.5 1902.59,1218.64 1903.17,1219.27 1903.76,1221.28 1904.35,1218.73 1904.93,1217.31 1905.52,1214.73 1906.11,1213.34 1906.69,1215.92 1907.28,1218.28 1907.87,1218.37 1908.45,1218.34 1909.04,1216.92 1909.63,1216.98 1910.21,1217.89 1910.8,1217.88 1911.38,1217.63 1911.97,1216.34 1912.56,1216.11 1913.14,1215.95 1913.73,1218.3 1914.32,1214.33 1914.9,1214.4 1915.49,1215.63 1916.08,1214.42 1916.66,1214.38 1917.25,1216.68 1917.83,1216.7 1918.42,1216.67 1919.01,1217.55 1919.59,1217.37 1920.18,1217.05 1920.77,1213.6 1921.35,1214.91 1921.94,1213.74 1922.53,1212.37 1923.11,1209.94 1923.7,1209.04 1924.29,1209.32 1924.87,1208.25 1925.46,1207.29 1926.04,1207.49 1926.63,1209.29 1927.22,1207.1 1927.8,1207.75 1928.39,1205.51 1928.98,1205.07 1929.56,1205.65 1930.15,1206.4 1930.74,1208.1 1931.32,1208.41 1931.91,1208.47 1932.5,1208.8 1933.08,1209.08 1933.67,1207.04 1934.25,1208.43 1934.84,1209.98 1935.43,1211.69 1936.01,1212.85 1936.6,1213.19 1937.19,1215.78 1937.77,1217.01 1938.36,1215.72 1938.95,1216.93 1939.53,1217.9 1940.12,1217.81 1940.71,1216.31 1941.29,1218.4 1941.88,1219.53 1942.46,1216.73 1943.05,1215.3 1943.64,1215.26 1944.22,1215.32 1944.81,1217.79 1945.4,1216.19 1945.98,1214.88 1946.57,1217.21 1947.16,1215.5 1947.74,1215.59 1948.33,1214.12 1948.91,1215.32 1949.5,1213.99 1950.09,1212.74 1950.67,1211.83 1951.26,1214.45 1951.85,1214.54 1952.43,1214.3 1953.02,1210.48 1953.61,1212.06 1954.19,1212.55 1954.78,1212.67 1955.37,1211.6 1955.95,1211.72 1956.54,1213.15 1957.12,1213.11 1957.71,1214.38 1958.3,1211.91 1958.88,1210.64 1959.47,1213.29 1960.06,1211.16 1960.64,1212.56 1961.23,1210.02 1961.82,1211.6 1962.4,1212.72 1962.99,1209.02 1963.58,1209.53 1964.16,1209.86 1964.75,1211.25 1965.33,1210.02 1965.92,1209.34 1966.51,1209.66 1967.09,1209.88 1967.68,1211.27 1968.27,1212.48 1968.85,1211.33 1969.44,1211.45 1970.03,1211.65 1970.61,1211.75 1971.2,1209.74 1971.78,1209.72 1972.37,1210.92 1972.96,1211.06 1973.54,1213.55 1974.13,1216.13 1974.72,1218.16 1975.3,1218.04 1975.89,1221.34 1976.48,1222.13 1977.06,1220.7 1977.65,1220.32 1978.24,1221.18 1978.82,1217.17 1979.41,1216.97 1979.99,1218.06 1980.58,1217.98 1981.17,1213.17 1981.75,1213.38 1982.34,1213.65 1982.93,1213.62 1983.51,1211.37 1984.1,1211.78 1984.69,1213.14 1985.27,1213.09 1985.86,1213.25 1986.45,1213.3 1987.03,1216.8 1987.62,1216.76 1988.2,1217.71 1988.79,1217.62 1989.38,1219.86 1989.96,1219.59 1990.55,1216.57 1991.14,1218.81 1991.72,1220.97 1992.31,1220.78 1992.9,1222.78 1993.48,1222.07 1994.07,1220.37 1994.65,1217.63 1995.24,1218.62 1995.83,1217.08 1996.41,1217.03 1997,1216.73 1997.59,1219.09 1998.17,1217.42 1998.76,1216.06 1999.35,1214.73 1999.93,1217.1 2000.52,1219.73 2001.11,1221.94 2001.69,1223.64 2002.28,1223.56 2002.86,1221.53 2003.45,1223.69 2004.04,1223.27 2004.62,1224.28 2005.21,1221.33 2005.8,1217.34 2006.38,1218.37 2006.97,1218.07 2007.56,1217.93 2008.14,1218.75 2008.73,1218.18 2009.32,1216.52 2009.9,1216.35 2010.49,1216.02 2011.07,1218.37 2011.66,1218.15 2012.25,1213.21 2012.83,1212.11 2013.42,1211.09 2014.01,1208.78 2014.59,1210.29 2015.18,1211.6 2015.77,1211.68 2016.35,1211.84 2016.94,1211.93 2017.53,1214.63 2018.11,1214.53 2018.7,1213.01 2019.28,1213.9 2019.87,1211.22 2020.46,1211.34 2021.04,1212.4 2021.63,1213.81 2022.22,1214.89 2022.8,1213.56 2023.39,1213.35 2023.98,1213.3 2024.56,1215.68 2025.15,1215.55 2025.73,1219.19 2026.32,1216.33 2026.91,1218.73 2027.49,1218.32 2028.08,1216.91 2028.67,1214.38 2029.25,1213.16 2029.84,1212.92 2030.43,1212.98 2031.01,1215.48 2031.6,1215.48 2032.19,1216.6 2032.77,1216.55 2033.36,1213.95 2033.94,1215.11 2034.53,1213.91 2035.12,1212.4 2035.7,1212.69 2036.29,1215.19 2036.88,1215.21 2037.46,1216.41 2038.05,1215.91 2038.64,1217.05 2039.22,1216.97 2039.81,1214.33 2040.4,1214.28 2040.98,1215.37 2041.57,1215.28 2042.15,1214.09 2042.74,1210.69 2043.33,1210.96 2043.91,1206.48 2044.5,1206.02 2045.09,1206.43 2045.67,1210.76 2046.26,1211.05 2046.85,1212.58 2047.43,1212.61 2048.02,1211.11 2048.6,1211.39 2049.19,1209.34 2049.78,1207.28 2050.36,1208.72 2050.95,1210.54 2051.54,1210.66 2052.12,1209.81 2052.71,1208.66 2053.3,1208.98 2053.88,1206.73 2054.47,1207.23 2055.06,1207.48 2055.64,1208.83 2056.23,1207.86 2056.81,1210.89 2057.4,1212.51 2057.99,1212.42 2058.57,1212.48 2059.16,1212.67 2059.75,1210.15 2060.33,1209.04 2060.92,1213.08 2061.51,1213.19 2062.09,1214.39 2062.68,1215.77 2063.27,1215.72 2063.85,1215.73 2064.44,1216.84 2065.02,1215.53 2065.61,1215.43 2066.2,1215.31 2066.78,1216.66 2067.37,1216.51 2067.96,1217.89 2068.54,1217.78 2069.13,1218.91 2069.72,1221.21 2070.3,1218.56 2070.89,1217.17 2071.48,1215.77 2072.06,1218.11 2072.65,1218.13 2073.23,1219.29 2073.82,1216.63 2074.41,1215.54 2074.99,1219.37 2075.58,1218.99 2076.17,1218.58 2076.75,1218.17 2077.34,1216.85 2077.93,1215.35 2078.51,1215.32 2079.1,1214.2 2079.68,1214.14 2080.27,1215.18 2080.86,1212.74 2081.44,1213.82 2082.03,1213.79 2082.62,1212.69 2083.2,1210.31 2083.79,1210.46 2084.38,1211.99 2084.96,1212.29 2085.55,1212.35 2086.14,1210.22 2086.72,1211.44 2087.31,1210.37 2087.89,1210.45 2088.48,1210.47 2089.07,1212.22 2089.65,1211.06 2090.24,1209.94 2090.83,1208.85 2091.41,1209.44 2092,1208.87 2092.59,1209.51 2093.17,1212.44 2093.76,1210.29 2094.35,1209.36 2094.93,1209.44 2095.52,1208.55 2096.1,1208.86 2096.69,1207.06 2097.28,1207.6 2097.86,1210.7 2098.45,1211.85 2099.04,1213.41 2099.62,1211.16 2100.21,1212.68 2100.8,1210.3 2101.38,1209.23 2101.97,1209.77 2102.55,1210.1 2103.14,1211.73 2103.73,1213.16 2104.31,1215.59 2104.9,1215.51 2105.49,1216.5 2106.07,1214.95 2106.66,1214.84 2107.25,1216.29 2107.83,1216.21 2108.42,1214.48 2109.01,1213.24 2109.59,1213.37 2110.18,1212.15 2110.76,1212.3 2111.35,1212.27 2111.94,1210.02 2112.52,1207.73 2113.11,1206.63 2113.7,1204.45 2114.28,1207.27 2114.87,1207.52 2115.46,1206.8 2116.04,1206.09 2116.63,1206.65 2117.22,1209.38 2117.8,1210.69 2118.39,1212 2118.97,1212.36 2119.56,1214.78 2120.15,1213.43 2120.73,1213.48 2121.32,1214.73 2121.91,1214.76 2122.49,1212.7 2123.08,1213.81 2123.67,1214.93 2124.25,1214.93 2124.84,1215.05 2125.42,1216.3 2126.01,1212.42 2126.6,1213.9 2127.18,1212.44 2127.77,1211.3 2128.36,1212.81 2128.94,1214.48 2129.53,1214.35 2130.12,1214.32 2130.7,1214.35 2131.29,1214.55 2131.88,1214.73 2132.46,1216.15 2133.05,1215.2 2133.63,1212.91 2134.22,1216.56 2134.81,1217.61 2135.39,1219.56 2135.98,1220.51 2136.57,1219.24 2137.15,1219.14 2137.74,1218.9 2138.33,1218.77 2138.91,1218.55 2139.5,1219.49 2140.09,1219.4 2140.67,1220.23 2141.26,1222.51 2141.84,1220.89 2142.43,1224.24 2143.02,1222.34 2143.6,1224.42 2144.19,1223.84 2144.78,1222.17 2145.36,1222.9 2145.95,1224.74 2146.54,1225.27 2147.12,1223.59 2147.71,1224.42 2148.3,1222.85 2148.88,1222.39 2149.47,1222.12 2150.05,1224.2 2150.64,1223.44 2151.23,1223.02 2151.81,1222.52 2152.4,1222.14 2152.99,1222.87 2153.57,1220.1 2154.16,1218.76 2154.75,1217.13 2155.33,1218.47 2155.92,1215.5 2156.5,1214.31 2157.09,1212.81 2157.68,1212.87 2158.26,1214.15 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1214.83 L986.612 1214.83 L987.198 1214.83 L987.785 1214.83 L988.371 1214.83 L988.957 1214.83 L989.544 1214.83 L990.13 1214.83 L990.717 1214.83 L991.303 1214.83 L991.889 1214.83 L992.476 1214.83 L993.062 1214.83 L993.649 1214.83 L994.235 1214.83 L994.822 1214.83 L995.408 1214.83 L995.994 1214.83 L996.581 1214.83 L997.167 1214.83 L997.754 1214.83 L998.34 1214.83 L998.926 1214.83 L999.513 1214.83 L1000.1 1214.83 L1000.69 1214.83 L1001.27 1214.83 L1001.86 1214.83 L1002.44 1214.83 L1003.03 1214.83 L1003.62 1214.83 L1004.2 1214.83 L1004.79 1214.83 L1005.38 1214.83 L1005.96 1214.83 L1006.55 1214.83 L1007.14 1214.83 L1007.72 1214.83 L1008.31 1214.83 L1008.9 1214.83 L1009.48 1214.83 L1010.07 1214.83 L1010.65 1214.83 L1011.24 1214.83 L1011.83 1214.83 L1012.41 1214.83 L1013 1214.83 L1013.59 1214.83 L1014.17 1214.83 L1014.76 1214.83 L1015.35 1214.83 L1015.93 1214.83 L1016.52 1214.83 L1017.11 1214.83 L1017.69 1214.83 L1018.28 1214.83 L1018.86 1214.83 L1019.45 1214.83 L1020.04 1214.83 L1020.62 1214.83 L1021.21 1214.83 L1021.8 1214.83 L1022.38 1214.83 L1022.97 1214.83 L1023.56 1214.83 L1024.14 1214.83 L1024.73 1214.83 L1025.32 1214.83 L1025.9 1214.83 L1026.49 1214.83 L1027.07 1214.83 L1027.66 1214.83 L1028.25 1214.83 L1028.83 1214.83 L1029.42 1214.83 L1030.01 1214.83 L1030.59 1214.83 L1031.18 1214.83 L1031.77 1214.83 L1032.35 1214.83 L1032.94 1214.83 L1033.52 1214.83 L1034.11 1214.83 L1034.7 1214.83 L1035.28 1214.83 L1035.87 1214.83 L1036.46 1214.83 L1037.04 1214.83 L1037.63 1214.83 L1038.22 1214.83 L1038.8 1214.83 L1039.39 1214.83 L1039.98 1214.83 L1040.56 1214.83 L1041.15 1214.83 L1041.73 1214.83 L1042.32 1214.83 L1042.91 1214.83 L1043.49 1214.83 L1044.08 1214.83 L1044.67 1214.83 L1045.25 1214.83 L1045.84 1214.83 L1046.43 1214.83 L1047.01 1214.83 L1047.6 1214.83 L1048.19 1214.83 L1048.77 1214.83 L1049.36 1214.83 L1049.94 1214.83 L1050.53 1214.83 L1051.12 1214.83 L1051.7 1214.83 L1052.29 1214.83 L1052.88 1214.83 L1053.46 1214.83 L1054.05 1214.83 L1054.64 1214.83 L1055.22 1214.83 L1055.81 1214.83 L1056.39 1214.83 L1056.98 1214.83 L1057.57 1214.83 L1058.15 1214.83 L1058.74 1214.83 L1059.33 1214.83 L1059.91 1214.83 L1060.5 1214.83 L1061.09 1214.83 L1061.67 1214.83 L1062.26 1214.83 L1062.85 1214.83 L1063.43 1214.83 L1064.02 1214.83 L1064.6 1214.83 L1065.19 1214.83 L1065.78 1214.83 L1066.36 1214.83 L1066.95 1214.83 L1067.54 1214.83 L1068.12 1214.83 L1068.71 1214.83 L1069.3 1214.83 L1069.88 1214.83 L1070.47 1214.83 L1071.06 1214.83 L1071.64 1214.83 L1072.23 1214.83 L1072.81 1214.83 L1073.4 1214.83 L1073.99 1214.83 L1074.57 1214.83 L1075.16 1214.83 L1075.75 1214.83 L1076.33 1214.83 L1076.92 1214.83 L1077.51 1214.83 L1078.09 1214.83 L1078.68 1214.83 L1079.26 1214.83 L1079.85 1214.83 L1080.44 1214.83 L1081.02 1214.83 L1081.61 1214.83 L1082.2 1214.83 L1082.78 1214.83 L1083.37 1214.83 L1083.96 1214.83 L1084.54 1214.83 L1085.13 1214.83 L1085.72 1214.83 L1086.3 1214.83 L1086.89 1214.83 L1087.47 1214.83 L1088.06 1214.83 L1088.65 1214.83 L1089.23 1214.83 L1089.82 1214.83 L1090.41 1214.83 L1090.99 1214.83 L1091.58 1214.83 L1092.17 1214.83 L1092.75 1214.83 L1093.34 1214.83 L1093.93 1214.83 L1094.51 1214.83 L1095.1 1214.83 L1095.68 1214.83 L1096.27 1214.83 L1096.86 1214.83 L1097.44 1214.83 L1098.03 1214.83 L1098.62 1214.83 L1099.2 1214.83 L1099.79 1214.83 L1100.38 1214.83 L1100.96 1214.83 L1101.55 1214.83 L1102.14 1214.83 L1102.72 1214.83 L1103.31 1214.83 L1103.89 1214.83 L1104.48 1214.83 L1105.07 1214.83 L1105.65 1214.83 L1106.24 1214.83 L1106.83 1214.83 L1107.41 1214.83 L1108 1214.83 L1108.59 1214.83 L1109.17 1214.83 L1109.76 1214.83 L1110.34 1214.83 L1110.93 1214.83 L1111.52 1214.83 L1112.1 1214.83 L1112.69 1214.83 L1113.28 1214.83 L1113.86 1214.83 L1114.45 1214.83 L1115.04 1214.83 L1115.62 1214.83 L1116.21 1214.83 L1116.8 1214.83 L1117.38 1214.83 L1117.97 1214.83 L1118.55 1214.83 L1119.14 1214.83 L1119.73 1214.83 L1120.31 1214.83 L1120.9 1214.83 L1121.49 1214.83 L1122.07 1214.83 L1122.66 1214.83 L1123.25 1214.83 L1123.83 1214.83 L1124.42 1214.83 L1125.01 1214.83 L1125.59 1214.83 L1126.18 1214.83 L1126.76 1214.83 L1127.35 1214.83 L1127.94 1214.83 L1128.52 1214.83 L1129.11 1214.83 L1129.7 1214.83 L1130.28 1214.83 L1130.87 1214.83 L1131.46 1214.83 L1132.04 1214.83 L1132.63 1214.83 L1133.21 1214.83 L1133.8 1214.83 L1134.39 1214.83 L1134.97 1214.83 L1135.56 1214.83 L1136.15 1214.83 L1136.73 1214.83 L1137.32 1214.83 L1137.91 1214.83 L1138.49 1214.83 L1139.08 1214.83 L1139.67 1214.83 L1140.25 1214.83 L1140.84 1214.83 L1141.42 1214.83 L1142.01 1214.83 L1142.6 1214.83 L1143.18 1214.83 L1143.77 1214.83 L1144.36 1214.83 L1144.94 1214.83 L1145.53 1214.83 L1146.12 1214.83 L1146.7 1214.83 L1147.29 1214.83 L1147.88 1214.83 L1148.46 1214.83 L1149.05 1214.83 L1149.63 1214.83 L1150.22 1214.83 L1150.81 1214.83 L1151.39 1214.83 L1151.98 1214.83 L1152.57 1214.83 L1153.15 1214.83 L1153.74 1214.83 L1154.33 1214.83 L1154.91 1214.83 L1155.5 1214.83 L1156.09 1214.83 L1156.67 1214.83 L1157.26 1214.83 L1157.84 1214.83 L1158.43 1214.83 L1159.02 1214.83 L1159.6 1214.83 L1160.19 1214.83 L1160.78 1214.83 L1161.36 1214.83 L1161.95 1214.83 L1162.54 1214.83 L1163.12 1214.83 L1163.71 1214.83 L1164.29 1214.83 L1164.88 1214.83 L1165.47 1214.83 L1166.05 1214.83 L1166.64 1214.83 L1167.23 1214.83 L1167.81 1214.83 L1168.4 1214.83 L1168.99 1214.83 L1169.57 1214.83 L1170.16 1214.83 L1170.75 1214.83 L1171.33 1214.83 L1171.92 1214.83 L1172.5 1214.83 L1173.09 1214.83 L1173.68 1214.83 L1174.26 1214.83 L1174.85 1214.83 L1175.44 1214.83 L1176.02 1214.83 L1176.61 1214.83 L1177.2 1214.83 L1177.78 1214.83 L1178.37 1214.83 L1178.96 1214.83 L1179.54 1214.83 L1180.13 1214.83 L1180.71 1214.83 L1181.3 1214.83 L1181.89 1214.83 L1182.47 1214.83 L1183.06 1214.83 L1183.65 1214.83 L1184.23 1214.83 L1184.82 1214.83 L1185.41 1214.83 L1185.99 1214.83 L1186.58 1214.83 L1187.16 1214.83 L1187.75 1214.83 L1188.34 1214.83 L1188.92 1214.83 L1189.51 1214.83 L1190.1 1214.83 L1190.68 1214.83 L1191.27 1214.83 L1191.86 1214.83 L1192.44 1214.83 L1193.03 1214.83 L1193.62 1214.83 L1194.2 1214.83 L1194.79 1214.83 L1195.37 1214.83 L1195.96 1214.83 L1196.55 1214.83 L1197.13 1214.83 L1197.72 1214.83 L1198.31 1214.83 L1198.89 1214.83 L1199.48 1214.83 L1200.07 1214.83 L1200.65 1214.83 L1201.24 1214.83 L1201.83 1214.83 L1202.41 1214.83 L1203 1214.83 L1203.58 1214.83 L1204.17 1214.83 L1204.76 1214.83 L1205.34 1214.83 L1205.93 1214.83 L1206.52 1214.83 L1207.1 1214.83 L1207.69 1214.83 L1208.28 1214.83 L1208.86 1214.83 L1209.45 1214.83 L1210.03 1214.83 L1210.62 1214.83 L1211.21 1214.83 L1211.79 1214.83 L1212.38 1214.83 L1212.97 1214.83 L1213.55 1214.83 L1214.14 1214.83 L1214.73 1214.83 L1215.31 1214.83 L1215.9 1214.83 L1216.49 1214.83 L1217.07 1214.83 L1217.66 1214.83 L1218.24 1214.83 L1218.83 1214.83 L1219.42 1214.83 L1220 1214.83 L1220.59 1214.83 L1221.18 1214.83 L1221.76 1214.83 L1222.35 1214.83 L1222.94 1214.83 L1223.52 1214.83 L1224.11 1214.83 L1224.7 1214.83 L1225.28 1214.83 L1225.87 1214.83 L1226.45 1214.83 L1227.04 1214.83 L1227.63 1214.83 L1228.21 1214.83 L1228.8 1214.83 L1229.39 1214.83 L1229.97 1214.83 L1230.56 1214.83 L1231.15 1214.83 L1231.73 1214.83 L1232.32 1214.83 L1232.91 1214.83 L1233.49 1214.83 L1234.08 1214.83 L1234.66 1214.83 L1235.25 1214.83 L1235.84 1214.83 L1236.42 1214.83 L1237.01 1214.83 L1237.6 1214.83 L1238.18 1214.83 L1238.77 1214.83 L1239.36 1214.83 L1239.94 1214.83 L1240.53 1214.83 L1241.11 1214.83 L1241.7 1214.83 L1242.29 1214.83 L1242.87 1214.83 L1243.46 1214.83 L1244.05 1214.83 L1244.63 1214.83 L1245.22 1214.83 L1245.81 1214.83 L1246.39 1214.83 L1246.98 1214.83 L1247.57 1214.83 L1248.15 1214.83 L1248.74 1214.83 L1249.32 1214.83 L1249.91 1214.83 L1250.5 1214.83 L1251.08 1214.83 L1251.67 1214.83 L1252.26 1214.83 L1252.84 1214.83 L1253.43 1214.83 L1254.02 1214.83 L1254.6 1214.83 L1255.19 1214.83 L1255.78 1214.83 L1256.36 1214.83 L1256.95 1214.83 L1257.53 1214.83 L1258.12 1214.83 L1258.71 1214.83 L1259.29 1214.83 L1259.88 1214.83 L1260.47 1214.83 L1261.05 1214.83 L1261.64 1214.83 L1262.23 1214.83 L1262.81 1214.83 L1263.4 1214.83 L1263.98 1214.83 L1264.57 1214.83 L1265.16 1214.83 L1265.74 1214.83 L1266.33 1214.83 L1266.92 1214.83 L1267.5 1214.83 L1268.09 1214.83 L1268.68 1214.83 L1269.26 1214.83 L1269.85 1214.83 L1270.44 1214.83 L1271.02 1214.83 L1271.61 1214.83 L1272.19 1214.83 L1272.78 1214.83 L1273.37 1214.83 L1273.95 1214.83 L1274.54 1214.83 L1275.13 1214.83 L1275.71 1214.83 L1276.3 1214.83 L1276.89 1214.83 L1277.47 1214.83 L1278.06 1214.83 L1278.65 1214.83 L1279.23 1214.83 L1279.82 1214.83 L1280.4 1214.83 L1280.99 1214.83 L1281.58 1214.83 L1282.16 1214.83 L1282.75 1214.83 L1283.34 1214.83 L1283.92 1214.83 L1284.51 1214.83 L1285.1 1214.83 L1285.68 1214.83 L1286.27 1214.83 L1286.86 1214.83 L1287.44 1214.83 L1288.03 1214.83 L1288.61 1214.83 L1289.2 1214.83 L1289.79 1214.83 L1290.37 1214.83 L1290.96 1214.83 L1291.55 1214.83 L1292.13 1214.83 L1292.72 1214.83 L1293.31 1214.83 L1293.89 1214.83 L1294.48 1214.83 L1295.06 1214.83 L1295.65 1214.83 L1296.24 1214.83 L1296.82 1214.83 L1297.41 1214.83 L1298 1214.83 L1298.58 1214.83 L1299.17 1214.83 L1299.76 1214.83 L1300.34 1214.83 L1300.93 1214.83 L1301.52 1214.83 L1302.1 1214.83 L1302.69 1214.83 L1303.27 1214.83 L1303.86 1214.83 L1304.45 1214.83 L1305.03 1214.83 L1305.62 1214.83 L1306.21 1214.83 L1306.79 1214.83 L1307.38 1214.83 L1307.97 1214.83 L1308.55 1214.83 L1309.14 1214.83 L1309.73 1214.83 L1310.31 1214.83 L1310.9 1214.83 L1311.48 1214.83 L1312.07 1214.83 L1312.66 1214.83 L1313.24 1214.83 L1313.83 1214.83 L1314.42 1214.83 L1315 1214.83 L1315.59 1214.83 L1316.18 1214.83 L1316.76 1214.83 L1317.35 1214.83 L1317.93 1214.83 L1318.52 1214.83 L1319.11 1214.83 L1319.69 1214.83 L1320.28 1214.83 L1320.87 1214.83 L1321.45 1214.83 L1322.04 1214.83 L1322.63 1214.83 L1323.21 1214.83 L1323.8 1214.83 L1324.39 1214.83 L1324.97 1214.83 L1325.56 1214.83 L1326.14 1214.83 L1326.73 1214.83 L1327.32 1214.83 L1327.9 1214.83 L1328.49 1214.83 L1329.08 1214.83 L1329.66 1214.83 L1330.25 1214.83 L1330.84 1214.83 L1331.42 1214.83 L1332.01 1214.83 L1332.6 1214.83 L1333.18 1214.83 L1333.77 1214.83 L1334.35 1214.83 L1334.94 1214.83 L1335.53 1214.83 L1336.11 1214.83 L1336.7 1214.83 L1337.29 1214.83 L1337.87 1214.83 L1338.46 1214.83 L1339.05 1214.83 L1339.63 1214.83 L1340.22 1214.83 L1340.8 1214.83 L1341.39 1214.83 L1341.98 1214.83 L1342.56 1214.83 L1343.15 1214.83 L1343.74 1214.83 L1344.32 1214.83 L1344.91 1214.83 L1345.5 1214.83 L1346.08 1214.83 L1346.67 1214.83 L1347.26 1214.83 L1347.84 1214.83 L1348.43 1214.83 L1349.01 1214.83 L1349.6 1214.83 L1350.19 1214.83 L1350.77 1214.83 L1351.36 1214.83 L1351.95 1214.83 L1352.53 1214.83 L1353.12 1214.83 L1353.71 1214.83 L1354.29 1214.83 L1354.88 1214.83 L1355.47 1214.83 L1356.05 1214.83 L1356.64 1214.83 L1357.22 1214.83 L1357.81 1214.83 L1358.4 1214.83 L1358.98 1214.83 L1359.57 1214.83 L1360.16 1214.83 L1360.74 1214.83 L1361.33 1214.83 L1361.92 1214.83 L1362.5 1214.83 L1363.09 1214.83 L1363.68 1214.83 L1364.26 1214.83 L1364.85 1214.83 L1365.43 1214.83 L1366.02 1214.83 L1366.61 1214.83 L1367.19 1214.83 L1367.78 1214.83 L1368.37 1214.83 L1368.95 1214.83 L1369.54 1214.83 L1370.13 1214.83 L1370.71 1214.83 L1371.3 1214.83 L1371.88 1214.83 L1372.47 1214.83 L1373.06 1214.83 L1373.64 1214.83 L1374.23 1214.83 L1374.82 1214.83 L1375.4 1214.83 L1375.99 1214.83 L1376.58 1214.83 L1377.16 1214.83 L1377.75 1214.83 L1378.34 1214.83 L1378.92 1214.83 L1379.51 1214.83 L1380.09 1214.83 L1380.68 1214.83 L1381.27 1214.83 L1381.85 1214.83 L1382.44 1214.83 L1383.03 1214.83 L1383.61 1214.83 L1384.2 1214.83 L1384.79 1214.83 L1385.37 1214.83 L1385.96 1214.83 L1386.55 1214.83 L1387.13 1214.83 L1387.72 1214.83 L1388.3 1214.83 L1388.89 1214.83 L1389.48 1214.83 L1390.06 1214.83 L1390.65 1214.83 L1391.24 1214.83 L1391.82 1214.83 L1392.41 1214.83 L1393 1214.83 L1393.58 1214.83 L1394.17 1214.83 L1394.75 1214.83 L1395.34 1214.83 L1395.93 1214.83 L1396.51 1214.83 L1397.1 1214.83 L1397.69 1214.83 L1398.27 1214.83 L1398.86 1214.83 L1399.45 1214.83 L1400.03 1214.83 L1400.62 1214.83 L1401.21 1214.83 L1401.79 1214.83 L1402.38 1214.83 L1402.96 1214.83 L1403.55 1214.83 L1404.14 1214.83 L1404.72 1214.83 L1405.31 1214.83 L1405.9 1214.83 L1406.48 1214.83 L1407.07 1214.83 L1407.66 1214.83 L1408.24 1214.83 L1408.83 1214.83 L1409.42 1214.83 L1410 1214.83 L1410.59 1214.83 L1411.17 1214.83 L1411.76 1214.83 L1412.35 1214.83 L1412.93 1214.83 L1413.52 1214.83 L1414.11 1214.83 L1414.69 1214.83 L1415.28 1214.83 L1415.87 1214.83 L1416.45 1214.83 L1417.04 1214.83 L1417.63 1214.83 L1418.21 1214.83 L1418.8 1214.83 L1419.38 1214.83 L1419.97 1214.83 L1420.56 1214.83 L1421.14 1214.83 L1421.73 1214.83 L1422.32 1214.83 L1422.9 1214.83 L1423.49 1214.83 L1424.08 1214.83 L1424.66 1214.83 L1425.25 1214.83 L1425.83 1214.83 L1426.42 1214.83 L1427.01 1214.83 L1427.59 1214.83 L1428.18 1214.83 L1428.77 1214.83 L1429.35 1214.83 L1429.94 1214.83 L1430.53 1214.83 L1431.11 1214.83 L1431.7 1214.83 L1432.29 1214.83 L1432.87 1214.83 L1433.46 1214.83 L1434.04 1214.83 L1434.63 1214.83 L1435.22 1214.83 L1435.8 1214.83 L1436.39 1214.83 L1436.98 1214.83 L1437.56 1214.83 L1438.15 1214.83 L1438.74 1214.83 L1439.32 1214.83 L1439.91 1214.83 L1440.5 1214.83 L1441.08 1214.83 L1441.67 1214.83 L1442.25 1214.83 L1442.84 1214.83 L1443.43 1214.83 L1444.01 1214.83 L1444.6 1214.83 L1445.19 1214.83 L1445.77 1214.83 L1446.36 1214.83 L1446.95 1214.83 L1447.53 1214.83 L1448.12 1214.83 L1448.7 1214.83 L1449.29 1214.83 L1449.88 1214.83 L1450.46 1214.83 L1451.05 1214.83 L1451.64 1214.83 L1452.22 1214.83 L1452.81 1214.83 L1453.4 1214.83 L1453.98 1214.83 L1454.57 1214.83 L1455.16 1214.83 L1455.74 1214.83 L1456.33 1214.83 L1456.91 1214.83 L1457.5 1214.83 L1458.09 1214.83 L1458.67 1214.83 L1459.26 1214.83 L1459.85 1214.83 L1460.43 1214.83 L1461.02 1214.83 L1461.61 1214.83 L1462.19 1214.83 L1462.78 1214.83 L1463.37 1214.83 L1463.95 1214.83 L1464.54 1214.83 L1465.12 1214.83 L1465.71 1214.83 L1466.3 1214.83 L1466.88 1214.83 L1467.47 1214.83 L1468.06 1214.83 L1468.64 1214.83 L1469.23 1214.83 L1469.82 1214.83 L1470.4 1214.83 L1470.99 1214.83 L1471.57 1214.83 L1472.16 1214.83 L1472.75 1214.83 L1473.33 1214.83 L1473.92 1214.83 L1474.51 1214.83 L1475.09 1214.83 L1475.68 1214.83 L1476.27 1214.83 L1476.85 1214.83 L1477.44 1214.83 L1478.03 1214.83 L1478.61 1214.83 L1479.2 1214.83 L1479.78 1214.83 L1480.37 1214.83 L1480.96 1214.83 L1481.54 1214.83 L1482.13 1214.83 L1482.72 1214.83 L1483.3 1214.83 L1483.89 1214.83 L1484.48 1214.83 L1485.06 1214.83 L1485.65 1214.83 L1486.24 1214.83 L1486.82 1214.83 L1487.41 1214.83 L1487.99 1214.83 L1488.58 1214.83 L1489.17 1214.83 L1489.75 1214.83 L1490.34 1214.83 L1490.93 1214.83 L1491.51 1214.83 L1492.1 1214.83 L1492.69 1214.83 L1493.27 1214.83 L1493.86 1214.83 L1494.45 1214.83 L1495.03 1214.83 L1495.62 1214.83 L1496.2 1214.83 L1496.79 1214.83 L1497.38 1214.83 L1497.96 1214.83 L1498.55 1214.83 L1499.14 1214.83 L1499.72 1214.83 L1500.31 1214.83 L1500.9 1214.83 L1501.48 1214.83 L1502.07 1214.83 L1502.65 1214.83 L1503.24 1214.83 L1503.83 1214.83 L1504.41 1214.83 L1505 1214.83 L1505.59 1214.83 L1506.17 1214.83 L1506.76 1214.83 L1507.35 1214.83 L1507.93 1214.83 L1508.52 1214.83 L1509.11 1214.83 L1509.69 1214.83 L1510.28 1214.83 L1510.86 1214.83 L1511.45 1214.83 L1512.04 1214.83 L1512.62 1214.83 L1513.21 1214.83 L1513.8 1214.83 L1514.38 1214.83 L1514.97 1214.83 L1515.56 1214.83 L1516.14 1214.83 L1516.73 1214.83 L1517.32 1214.83 L1517.9 1214.83 L1518.49 1214.83 L1519.07 1214.83 L1519.66 1214.83 L1520.25 1214.83 L1520.83 1214.83 L1521.42 1214.83 L1522.01 1214.83 L1522.59 1214.83 L1523.18 1214.83 L1523.77 1214.83 L1524.35 1214.83 L1524.94 1214.83 L1525.52 1214.83 L1526.11 1214.83 L1526.7 1214.83 L1527.28 1214.83 L1527.87 1214.83 L1528.46 1214.83 L1529.04 1214.83 L1529.63 1214.83 L1530.22 1214.83 L1530.8 1214.83 L1531.39 1214.83 L1531.98 1214.83 L1532.56 1214.83 L1533.15 1214.83 L1533.73 1214.83 L1534.32 1214.83 L1534.91 1214.83 L1535.49 1214.83 L1536.08 1214.83 L1536.67 1214.83 L1537.25 1214.83 L1537.84 1214.83 L1538.43 1214.83 L1539.01 1214.83 L1539.6 1214.83 L1540.19 1214.83 L1540.77 1214.83 L1541.36 1214.83 L1541.94 1214.83 L1542.53 1214.83 L1543.12 1214.83 L1543.7 1214.83 L1544.29 1214.83 L1544.88 1214.83 L1545.46 1214.83 L1546.05 1214.83 L1546.64 1214.83 L1547.22 1214.83 L1547.81 1214.83 L1548.4 1214.83 L1548.98 1214.83 L1549.57 1214.83 L1550.15 1214.83 L1550.74 1214.83 L1551.33 1214.83 L1551.91 1214.83 L1552.5 1214.83 L1553.09 1214.83 L1553.67 1214.83 L1554.26 1214.83 L1554.85 1214.83 L1555.43 1214.83 L1556.02 1214.83 L1556.6 1214.83 L1557.19 1214.83 L1557.78 1214.83 L1558.36 1214.83 L1558.95 1214.83 L1559.54 1214.83 L1560.12 1214.83 L1560.71 1214.83 L1561.3 1214.83 L1561.88 1214.83 L1562.47 1214.83 L1563.06 1214.83 L1563.64 1214.83 L1564.23 1214.83 L1564.81 1214.83 L1565.4 1214.83 L1565.99 1214.83 L1566.57 1214.83 L1567.16 1214.83 L1567.75 1214.83 L1568.33 1214.83 L1568.92 1214.83 L1569.51 1214.83 L1570.09 1214.83 L1570.68 1214.83 L1571.27 1214.83 L1571.85 1214.83 L1572.44 1214.83 L1573.02 1214.83 L1573.61 1214.83 L1574.2 1214.83 L1574.78 1214.83 L1575.37 1214.83 L1575.96 1214.83 L1576.54 1214.83 L1577.13 1214.83 L1577.72 1214.83 L1578.3 1214.83 L1578.89 1214.83 L1579.47 1214.83 L1580.06 1214.83 L1580.65 1214.83 L1581.23 1214.83 L1581.82 1214.83 L1582.41 1214.83 L1582.99 1214.83 L1583.58 1214.83 L1584.17 1214.83 L1584.75 1214.83 L1585.34 1214.83 L1585.93 1214.83 L1586.51 1214.83 L1587.1 1214.83 L1587.68 1214.83 L1588.27 1214.83 L1588.86 1214.83 L1589.44 1214.83 L1590.03 1214.83 L1590.62 1214.83 L1591.2 1214.83 L1591.79 1214.83 L1592.38 1214.83 L1592.96 1214.83 L1593.55 1214.83 L1594.14 1214.83 L1594.72 1214.83 L1595.31 1214.83 L1595.89 1214.83 L1596.48 1214.83 L1597.07 1214.83 L1597.65 1214.83 L1598.24 1214.83 L1598.83 1214.83 L1599.41 1214.83 L1600 1214.83 L1600.59 1214.83 L1601.17 1214.83 L1601.76 1214.83 L1602.34 1214.83 L1602.93 1214.83 L1603.52 1214.83 L1604.1 1214.83 L1604.69 1214.83 L1605.28 1214.83 L1605.86 1214.83 L1606.45 1214.83 L1607.04 1214.83 L1607.62 1214.83 L1608.21 1214.83 L1608.8 1214.83 L1609.38 1214.83 L1609.97 1214.83 L1610.55 1214.83 L1611.14 1214.83 L1611.73 1214.83 L1612.31 1214.83 L1612.9 1214.83 L1613.49 1214.83 L1614.07 1214.83 L1614.66 1214.83 L1615.25 1214.83 L1615.83 1214.83 L1616.42 1214.83 L1617.01 1214.83 L1617.59 1214.83 L1618.18 1214.83 L1618.76 1214.83 L1619.35 1214.83 L1619.94 1214.83 L1620.52 1214.83 L1621.11 1214.83 L1621.7 1214.83 L1622.28 1214.83 L1622.87 1214.83 L1623.46 1214.83 L1624.04 1214.83 L1624.63 1214.83 L1625.22 1214.83 L1625.8 1214.83 L1626.39 1214.83 L1626.97 1214.83 L1627.56 1214.83 L1628.15 1214.83 L1628.73 1214.83 L1629.32 1214.83 L1629.91 1214.83 L1630.49 1214.83 L1631.08 1214.83 L1631.67 1214.83 L1632.25 1214.83 L1632.84 1214.83 L1633.42 1214.83 L1634.01 1214.83 L1634.6 1214.83 L1635.18 1214.83 L1635.77 1214.83 L1636.36 1214.83 L1636.94 1214.83 L1637.53 1214.83 L1638.12 1214.83 L1638.7 1214.83 L1639.29 1214.83 L1639.88 1214.83 L1640.46 1214.83 L1641.05 1214.83 L1641.63 1214.83 L1642.22 1214.83 L1642.81 1214.83 L1643.39 1214.83 L1643.98 1214.83 L1644.57 1214.83 L1645.15 1214.83 L1645.74 1214.83 L1646.33 1214.83 L1646.91 1214.83 L1647.5 1214.83 L1648.09 1214.83 L1648.67 1214.83 L1649.26 1214.83 L1649.84 1214.83 L1650.43 1214.83 L1651.02 1214.83 L1651.6 1214.83 L1652.19 1214.83 L1652.78 1214.83 L1653.36 1214.83 L1653.95 1214.83 L1654.54 1214.83 L1655.12 1214.83 L1655.71 1214.83 L1656.29 1214.83 L1656.88 1214.83 L1657.47 1214.83 L1658.05 1214.83 L1658.64 1214.83 L1659.23 1214.83 L1659.81 1214.83 L1660.4 1214.83 L1660.99 1214.83 L1661.57 1214.83 L1662.16 1214.83 L1662.75 1214.83 L1663.33 1214.83 L1663.92 1214.83 L1664.5 1214.83 L1665.09 1214.83 L1665.68 1214.83 L1666.26 1214.83 L1666.85 1214.83 L1667.44 1214.83 L1668.02 1214.83 L1668.61 1214.83 L1669.2 1214.83 L1669.78 1214.83 L1670.37 1214.83 L1670.96 1214.83 L1671.54 1214.83 L1672.13 1214.83 L1672.71 1214.83 L1673.3 1214.83 L1673.89 1214.83 L1674.47 1214.83 L1675.06 1214.83 L1675.65 1214.83 L1676.23 1214.83 L1676.82 1214.83 L1677.41 1214.83 L1677.99 1214.83 L1678.58 1214.83 L1679.17 1214.83 L1679.75 1214.83 L1680.34 1214.83 L1680.92 1214.83 L1681.51 1214.83 L1682.1 1214.83 L1682.68 1214.83 L1683.27 1214.83 L1683.86 1214.83 L1684.44 1214.83 L1685.03 1214.83 L1685.62 1214.83 L1686.2 1214.83 L1686.79 1214.83 L1687.37 1214.83 L1687.96 1214.83 L1688.55 1214.83 L1689.13 1214.83 L1689.72 1214.83 L1690.31 1214.83 L1690.89 1214.83 L1691.48 1214.83 L1692.07 1214.83 L1692.65 1214.83 L1693.24 1214.83 L1693.83 1214.83 L1694.41 1214.83 L1695 1214.83 L1695.58 1214.83 L1696.17 1214.83 L1696.76 1214.83 L1697.34 1214.83 L1697.93 1214.83 L1698.52 1214.83 L1699.1 1214.83 L1699.69 1214.83 L1700.28 1214.83 L1700.86 1214.83 L1701.45 1214.83 L1702.04 1214.83 L1702.62 1214.83 L1703.21 1214.83 L1703.79 1214.83 L1704.38 1214.83 L1704.97 1214.83 L1705.55 1214.83 L1706.14 1214.83 L1706.73 1214.83 L1707.31 1214.83 L1707.9 1214.83 L1708.49 1214.83 L1709.07 1214.83 L1709.66 1214.83 L1710.24 1214.83 L1710.83 1214.83 L1711.42 1214.83 L1712 1214.83 L1712.59 1214.83 L1713.18 1214.83 L1713.76 1214.83 L1714.35 1214.83 L1714.94 1214.83 L1715.52 1214.83 L1716.11 1214.83 L1716.7 1214.83 L1717.28 1214.83 L1717.87 1214.83 L1718.45 1214.83 L1719.04 1214.83 L1719.63 1214.83 L1720.21 1214.83 L1720.8 1214.83 L1721.39 1214.83 L1721.97 1214.83 L1722.56 1214.83 L1723.15 1214.83 L1723.73 1214.83 L1724.32 1214.83 L1724.91 1214.83 L1725.49 1214.83 L1726.08 1214.83 L1726.66 1214.83 L1727.25 1214.83 L1727.84 1214.83 L1728.42 1214.83 L1729.01 1214.83 L1729.6 1214.83 L1730.18 1214.83 L1730.77 1214.83 L1731.36 1214.83 L1731.94 1214.83 L1732.53 1214.83 L1733.11 1214.83 L1733.7 1214.83 L1734.29 1214.83 L1734.87 1214.83 L1735.46 1214.83 L1736.05 1214.83 L1736.63 1214.83 L1737.22 1214.83 L1737.81 1214.83 L1738.39 1214.83 L1738.98 1214.83 L1739.57 1214.83 L1740.15 1214.83 L1740.74 1214.83 L1741.32 1214.83 L1741.91 1214.83 L1742.5 1214.83 L1743.08 1214.83 L1743.67 1214.83 L1744.26 1214.83 L1744.84 1214.83 L1745.43 1214.83 L1746.02 1214.83 L1746.6 1214.83 L1747.19 1214.83 L1747.78 1214.83 L1748.36 1214.83 L1748.95 1214.83 L1749.53 1214.83 L1750.12 1214.83 L1750.71 1214.83 L1751.29 1214.83 L1751.88 1214.83 L1752.47 1214.83 L1753.05 1214.83 L1753.64 1214.83 L1754.23 1214.83 L1754.81 1214.83 L1755.4 1214.83 L1755.99 1214.83 L1756.57 1214.83 L1757.16 1214.83 L1757.74 1214.83 L1758.33 1214.83 L1758.92 1214.83 L1759.5 1214.83 L1760.09 1214.83 L1760.68 1214.83 L1761.26 1214.83 L1761.85 1214.83 L1762.44 1214.83 L1763.02 1214.83 L1763.61 1214.83 L1764.19 1214.83 L1764.78 1214.83 L1765.37 1214.83 L1765.95 1214.83 L1766.54 1214.83 L1767.13 1214.83 L1767.71 1214.83 L1768.3 1214.83 L1768.89 1214.83 L1769.47 1214.83 L1770.06 1214.83 L1770.65 1214.83 L1771.23 1214.83 L1771.82 1214.83 L1772.4 1214.83 L1772.99 1214.83 L1773.58 1214.83 L1774.16 1214.83 L1774.75 1214.83 L1775.34 1214.83 L1775.92 1214.83 L1776.51 1214.83 L1777.1 1214.83 L1777.68 1214.83 L1778.27 1214.83 L1778.86 1214.83 L1779.44 1214.83 L1780.03 1214.83 L1780.61 1214.83 L1781.2 1214.83 L1781.79 1214.83 L1782.37 1214.83 L1782.96 1214.83 L1783.55 1214.83 L1784.13 1214.83 L1784.72 1214.83 L1785.31 1214.83 L1785.89 1214.83 L1786.48 1214.83 L1787.06 1214.83 L1787.65 1214.83 L1788.24 1214.83 L1788.82 1214.83 L1789.41 1214.83 L1790 1214.83 L1790.58 1214.83 L1791.17 1214.83 L1791.76 1214.83 L1792.34 1214.83 L1792.93 1214.83 L1793.52 1214.83 L1794.1 1214.83 L1794.69 1214.83 L1795.27 1214.83 L1795.86 1214.83 L1796.45 1214.83 L1797.03 1214.83 L1797.62 1214.83 L1798.21 1214.83 L1798.79 1214.83 L1799.38 1214.83 L1799.97 1214.83 L1800.55 1214.83 L1801.14 1214.83 L1801.73 1214.83 L1802.31 1214.83 L1802.9 1214.83 L1803.48 1214.83 L1804.07 1214.83 L1804.66 1214.83 L1805.24 1214.83 L1805.83 1214.83 L1806.42 1214.83 L1807 1214.83 L1807.59 1214.83 L1808.18 1214.83 L1808.76 1214.83 L1809.35 1214.83 L1809.94 1214.83 L1810.52 1214.83 L1811.11 1214.83 L1811.69 1214.83 L1812.28 1214.83 L1812.87 1214.83 L1813.45 1214.83 L1814.04 1214.83 L1814.63 1214.83 L1815.21 1214.83 L1815.8 1214.83 L1816.39 1214.83 L1816.97 1214.83 L1817.56 1214.83 L1818.14 1214.83 L1818.73 1214.83 L1819.32 1214.83 L1819.9 1214.83 L1820.49 1214.83 L1821.08 1214.83 L1821.66 1214.83 L1822.25 1214.83 L1822.84 1214.83 L1823.42 1214.83 L1824.01 1214.83 L1824.6 1214.83 L1825.18 1214.83 L1825.77 1214.83 L1826.35 1214.83 L1826.94 1214.83 L1827.53 1214.83 L1828.11 1214.83 L1828.7 1214.83 L1829.29 1214.83 L1829.87 1214.83 L1830.46 1214.83 L1831.05 1214.83 L1831.63 1214.83 L1832.22 1214.83 L1832.81 1214.83 L1833.39 1214.83 L1833.98 1214.83 L1834.56 1214.83 L1835.15 1214.83 L1835.74 1214.83 L1836.32 1214.83 L1836.91 1214.83 L1837.5 1214.83 L1838.08 1214.83 L1838.67 1214.83 L1839.26 1214.83 L1839.84 1214.83 L1840.43 1214.83 L1841.01 1214.83 L1841.6 1214.83 L1842.19 1214.83 L1842.77 1214.83 L1843.36 1214.83 L1843.95 1214.83 L1844.53 1214.83 L1845.12 1214.83 L1845.71 1214.83 L1846.29 1214.83 L1846.88 1214.83 L1847.47 1214.83 L1848.05 1214.83 L1848.64 1214.83 L1849.22 1214.83 L1849.81 1214.83 L1850.4 1214.83 L1850.98 1214.83 L1851.57 1214.83 L1852.16 1214.83 L1852.74 1214.83 L1853.33 1214.83 L1853.92 1214.83 L1854.5 1214.83 L1855.09 1214.83 L1855.68 1214.83 L1856.26 1214.83 L1856.85 1214.83 L1857.43 1214.83 L1858.02 1214.83 L1858.61 1214.83 L1859.19 1214.83 L1859.78 1214.83 L1860.37 1214.83 L1860.95 1214.83 L1861.54 1214.83 L1862.13 1214.83 L1862.71 1214.83 L1863.3 1214.83 L1863.88 1214.83 L1864.47 1214.83 L1865.06 1214.83 L1865.64 1214.83 L1866.23 1214.83 L1866.82 1214.83 L1867.4 1214.83 L1867.99 1214.83 L1868.58 1214.83 L1869.16 1214.83 L1869.75 1214.83 L1870.34 1214.83 L1870.92 1214.83 L1871.51 1214.83 L1872.09 1214.83 L1872.68 1214.83 L1873.27 1214.83 L1873.85 1214.83 L1874.44 1214.83 L1875.03 1214.83 L1875.61 1214.83 L1876.2 1214.83 L1876.79 1214.83 L1877.37 1214.83 L1877.96 1214.83 L1878.55 1214.83 L1879.13 1214.83 L1879.72 1214.83 L1880.3 1214.83 L1880.89 1214.83 L1881.48 1214.83 L1882.06 1214.83 L1882.65 1214.83 L1883.24 1214.83 L1883.82 1214.83 L1884.41 1214.83 L1885 1214.83 L1885.58 1214.83 L1886.17 1214.83 L1886.76 1214.83 L1887.34 1214.83 L1887.93 1214.83 L1888.51 1214.83 L1889.1 1214.83 L1889.69 1214.83 L1890.27 1214.83 L1890.86 1214.83 L1891.45 1214.83 L1892.03 1214.83 L1892.62 1214.83 L1893.21 1214.83 L1893.79 1214.83 L1894.38 1214.83 L1894.96 1214.83 L1895.55 1214.83 L1896.14 1214.83 L1896.72 1214.83 L1897.31 1214.83 L1897.9 1214.83 L1898.48 1214.83 L1899.07 1214.83 L1899.66 1214.83 L1900.24 1214.83 L1900.83 1214.83 L1901.42 1214.83 L1902 1214.83 L1902.59 1214.83 L1903.17 1214.83 L1903.76 1214.83 L1904.35 1214.83 L1904.93 1214.83 L1905.52 1214.83 L1906.11 1214.83 L1906.69 1214.83 L1907.28 1214.83 L1907.87 1214.83 L1908.45 1214.83 L1909.04 1214.83 L1909.63 1214.83 L1910.21 1214.83 L1910.8 1214.83 L1911.38 1214.83 L1911.97 1214.83 L1912.56 1214.83 L1913.14 1214.83 L1913.73 1214.83 L1914.32 1214.83 L1914.9 1214.83 L1915.49 1214.83 L1916.08 1214.83 L1916.66 1214.83 L1917.25 1214.83 L1917.83 1214.83 L1918.42 1214.83 L1919.01 1214.83 L1919.59 1214.83 L1920.18 1214.83 L1920.77 1214.83 L1921.35 1214.83 L1921.94 1214.83 L1922.53 1214.83 L1923.11 1214.83 L1923.7 1214.83 L1924.29 1214.83 L1924.87 1214.83 L1925.46 1214.83 L1926.04 1214.83 L1926.63 1214.83 L1927.22 1214.83 L1927.8 1214.83 L1928.39 1214.83 L1928.98 1214.83 L1929.56 1214.83 L1930.15 1214.83 L1930.74 1214.83 L1931.32 1214.83 L1931.91 1214.83 L1932.5 1214.83 L1933.08 1214.83 L1933.67 1214.83 L1934.25 1214.83 L1934.84 1214.83 L1935.43 1214.83 L1936.01 1214.83 L1936.6 1214.83 L1937.19 1214.83 L1937.77 1214.83 L1938.36 1214.83 L1938.95 1214.83 L1939.53 1214.83 L1940.12 1214.83 L1940.71 1214.83 L1941.29 1214.83 L1941.88 1214.83 L1942.46 1214.83 L1943.05 1214.83 L1943.64 1214.83 L1944.22 1214.83 L1944.81 1214.83 L1945.4 1214.83 L1945.98 1214.83 L1946.57 1214.83 L1947.16 1214.83 L1947.74 1214.83 L1948.33 1214.83 L1948.91 1214.83 L1949.5 1214.83 L1950.09 1214.83 L1950.67 1214.83 L1951.26 1214.83 L1951.85 1214.83 L1952.43 1214.83 L1953.02 1214.83 L1953.61 1214.83 L1954.19 1214.83 L1954.78 1214.83 L1955.37 1214.83 L1955.95 1214.83 L1956.54 1214.83 L1957.12 1214.83 L1957.71 1214.83 L1958.3 1214.83 L1958.88 1214.83 L1959.47 1214.83 L1960.06 1214.83 L1960.64 1214.83 L1961.23 1214.83 L1961.82 1214.83 L1962.4 1214.83 L1962.99 1214.83 L1963.58 1214.83 L1964.16 1214.83 L1964.75 1214.83 L1965.33 1214.83 L1965.92 1214.83 L1966.51 1214.83 L1967.09 1214.83 L1967.68 1214.83 L1968.27 1214.83 L1968.85 1214.83 L1969.44 1214.83 L1970.03 1214.83 L1970.61 1214.83 L1971.2 1214.83 L1971.78 1214.83 L1972.37 1214.83 L1972.96 1214.83 L1973.54 1214.83 L1974.13 1214.83 L1974.72 1214.83 L1975.3 1214.83 L1975.89 1214.83 L1976.48 1214.83 L1977.06 1214.83 L1977.65 1214.83 L1978.24 1214.83 L1978.82 1214.83 L1979.41 1214.83 L1979.99 1214.83 L1980.58 1214.83 L1981.17 1214.83 L1981.75 1214.83 L1982.34 1214.83 L1982.93 1214.83 L1983.51 1214.83 L1984.1 1214.83 L1984.69 1214.83 L1985.27 1214.83 L1985.86 1214.83 L1986.45 1214.83 L1987.03 1214.83 L1987.62 1214.83 L1988.2 1214.83 L1988.79 1214.83 L1989.38 1214.83 L1989.96 1214.83 L1990.55 1214.83 L1991.14 1214.83 L1991.72 1214.83 L1992.31 1214.83 L1992.9 1214.83 L1993.48 1214.83 L1994.07 1214.83 L1994.65 1214.83 L1995.24 1214.83 L1995.83 1214.83 L1996.41 1214.83 L1997 1214.83 L1997.59 1214.83 L1998.17 1214.83 L1998.76 1214.83 L1999.35 1214.83 L1999.93 1214.83 L2000.52 1214.83 L2001.11 1214.83 L2001.69 1214.83 L2002.28 1214.83 L2002.86 1214.83 L2003.45 1214.83 L2004.04 1214.83 L2004.62 1214.83 L2005.21 1214.83 L2005.8 1214.83 L2006.38 1214.83 L2006.97 1214.83 L2007.56 1214.83 L2008.14 1214.83 L2008.73 1214.83 L2009.32 1214.83 L2009.9 1214.83 L2010.49 1214.83 L2011.07 1214.83 L2011.66 1214.83 L2012.25 1214.83 L2012.83 1214.83 L2013.42 1214.83 L2014.01 1214.83 L2014.59 1214.83 L2015.18 1214.83 L2015.77 1214.83 L2016.35 1214.83 L2016.94 1214.83 L2017.53 1214.83 L2018.11 1214.83 L2018.7 1214.83 L2019.28 1214.83 L2019.87 1214.83 L2020.46 1214.83 L2021.04 1214.83 L2021.63 1214.83 L2022.22 1214.83 L2022.8 1214.83 L2023.39 1214.83 L2023.98 1214.83 L2024.56 1214.83 L2025.15 1214.83 L2025.73 1214.83 L2026.32 1214.83 L2026.91 1214.83 L2027.49 1214.83 L2028.08 1214.83 L2028.67 1214.83 L2029.25 1214.83 L2029.84 1214.83 L2030.43 1214.83 L2031.01 1214.83 L2031.6 1214.83 L2032.19 1214.83 L2032.77 1214.83 L2033.36 1214.83 L2033.94 1214.83 L2034.53 1214.83 L2035.12 1214.83 L2035.7 1214.83 L2036.29 1214.83 L2036.88 1214.83 L2037.46 1214.83 L2038.05 1214.83 L2038.64 1214.83 L2039.22 1214.83 L2039.81 1214.83 L2040.4 1214.83 L2040.98 1214.83 L2041.57 1214.83 L2042.15 1214.83 L2042.74 1214.83 L2043.33 1214.83 L2043.91 1214.83 L2044.5 1214.83 L2045.09 1214.83 L2045.67 1214.83 L2046.26 1214.83 L2046.85 1214.83 L2047.43 1214.83 L2048.02 1214.83 L2048.6 1214.83 L2049.19 1214.83 L2049.78 1214.83 L2050.36 1214.83 L2050.95 1214.83 L2051.54 1214.83 L2052.12 1214.83 L2052.71 1214.83 L2053.3 1214.83 L2053.88 1214.83 L2054.47 1214.83 L2055.06 1214.83 L2055.64 1214.83 L2056.23 1214.83 L2056.81 1214.83 L2057.4 1214.83 L2057.99 1214.83 L2058.57 1214.83 L2059.16 1214.83 L2059.75 1214.83 L2060.33 1214.83 L2060.92 1214.83 L2061.51 1214.83 L2062.09 1214.83 L2062.68 1214.83 L2063.27 1214.83 L2063.85 1214.83 L2064.44 1214.83 L2065.02 1214.83 L2065.61 1214.83 L2066.2 1214.83 L2066.78 1214.83 L2067.37 1214.83 L2067.96 1214.83 L2068.54 1214.83 L2069.13 1214.83 L2069.72 1214.83 L2070.3 1214.83 L2070.89 1214.83 L2071.48 1214.83 L2072.06 1214.83 L2072.65 1214.83 L2073.23 1214.83 L2073.82 1214.83 L2074.41 1214.83 L2074.99 1214.83 L2075.58 1214.83 L2076.17 1214.83 L2076.75 1214.83 L2077.34 1214.83 L2077.93 1214.83 L2078.51 1214.83 L2079.1 1214.83 L2079.68 1214.83 L2080.27 1214.83 L2080.86 1214.83 L2081.44 1214.83 L2082.03 1214.83 L2082.62 1214.83 L2083.2 1214.83 L2083.79 1214.83 L2084.38 1214.83 L2084.96 1214.83 L2085.55 1214.83 L2086.14 1214.83 L2086.72 1214.83 L2087.31 1214.83 L2087.89 1214.83 L2088.48 1214.83 L2089.07 1214.83 L2089.65 1214.83 L2090.24 1214.83 L2090.83 1214.83 L2091.41 1214.83 L2092 1214.83 L2092.59 1214.83 L2093.17 1214.83 L2093.76 1214.83 L2094.35 1214.83 L2094.93 1214.83 L2095.52 1214.83 L2096.1 1214.83 L2096.69 1214.83 L2097.28 1214.83 L2097.86 1214.83 L2098.45 1214.83 L2099.04 1214.83 L2099.62 1214.83 L2100.21 1214.83 L2100.8 1214.83 L2101.38 1214.83 L2101.97 1214.83 L2102.55 1214.83 L2103.14 1214.83 L2103.73 1214.83 L2104.31 1214.83 L2104.9 1214.83 L2105.49 1214.83 L2106.07 1214.83 L2106.66 1214.83 L2107.25 1214.83 L2107.83 1214.83 L2108.42 1214.83 L2109.01 1214.83 L2109.59 1214.83 L2110.18 1214.83 L2110.76 1214.83 L2111.35 1214.83 L2111.94 1214.83 L2112.52 1214.83 L2113.11 1214.83 L2113.7 1214.83 L2114.28 1214.83 L2114.87 1214.83 L2115.46 1214.83 L2116.04 1214.83 L2116.63 1214.83 L2117.22 1214.83 L2117.8 1214.83 L2118.39 1214.83 L2118.97 1214.83 L2119.56 1214.83 L2120.15 1214.83 L2120.73 1214.83 L2121.32 1214.83 L2121.91 1214.83 L2122.49 1214.83 L2123.08 1214.83 L2123.67 1214.83 L2124.25 1214.83 L2124.84 1214.83 L2125.42 1214.83 L2126.01 1214.83 L2126.6 1214.83 L2127.18 1214.83 L2127.77 1214.83 L2128.36 1214.83 L2128.94 1214.83 L2129.53 1214.83 L2130.12 1214.83 L2130.7 1214.83 L2131.29 1214.83 L2131.88 1214.83 L2132.46 1214.83 L2133.05 1214.83 L2133.63 1214.83 L2134.22 1214.83 L2134.81 1214.83 L2135.39 1214.83 L2135.98 1214.83 L2136.57 1214.83 L2137.15 1214.83 L2137.74 1214.83 L2138.33 1214.83 L2138.91 1214.83 L2139.5 1214.83 L2140.09 1214.83 L2140.67 1214.83 L2141.26 1214.83 L2141.84 1214.83 L2142.43 1214.83 L2143.02 1214.83 L2143.6 1214.83 L2144.19 1214.83 L2144.78 1214.83 L2145.36 1214.83 L2145.95 1214.83 L2146.54 1214.83 L2147.12 1214.83 L2147.71 1214.83 L2148.3 1214.83 L2148.88 1214.83 L2149.47 1214.83 L2150.05 1214.83 L2150.64 1214.83 L2151.23 1214.83 L2151.81 1214.83 L2152.4 1214.83 L2152.99 1214.83 L2153.57 1214.83 L2154.16 1214.83 L2154.75 1214.83 L2155.33 1214.83 L2155.92 1214.83 L2156.5 1214.83 L2157.09 1214.83 L2157.68 1214.83 L2158.26 1214.83 L2158.26 1214.29 L2157.68 1214.29 L2157.09 1214.29 L2156.5 1214.29 L2155.92 1214.29 L2155.33 1214.29 L2154.75 1214.29 L2154.16 1214.29 L2153.57 1214.29 L2152.99 1214.29 L2152.4 1214.29 L2151.81 1214.29 L2151.23 1214.29 L2150.64 1214.29 L2150.05 1214.29 L2149.47 1214.29 L2148.88 1214.29 L2148.3 1214.29 L2147.71 1214.29 L2147.12 1214.29 L2146.54 1214.29 L2145.95 1214.29 L2145.36 1214.29 L2144.78 1214.29 L2144.19 1214.29 L2143.6 1214.29 L2143.02 1214.29 L2142.43 1214.29 L2141.84 1214.29 L2141.26 1214.29 L2140.67 1214.29 L2140.09 1214.29 L2139.5 1214.29 L2138.91 1214.29 L2138.33 1214.29 L2137.74 1214.29 L2137.15 1214.29 L2136.57 1214.29 L2135.98 1214.29 L2135.39 1214.29 L2134.81 1214.29 L2134.22 1214.29 L2133.63 1214.29 L2133.05 1214.29 L2132.46 1214.29 L2131.88 1214.29 L2131.29 1214.29 L2130.7 1214.29 L2130.12 1214.29 L2129.53 1214.29 L2128.94 1214.29 L2128.36 1214.29 L2127.77 1214.29 L2127.18 1214.29 L2126.6 1214.29 L2126.01 1214.29 L2125.42 1214.29 L2124.84 1214.29 L2124.25 1214.29 L2123.67 1214.29 L2123.08 1214.29 L2122.49 1214.29 L2121.91 1214.29 L2121.32 1214.29 L2120.73 1214.29 L2120.15 1214.29 L2119.56 1214.29 L2118.97 1214.29 L2118.39 1214.29 L2117.8 1214.29 L2117.22 1214.29 L2116.63 1214.29 L2116.04 1214.29 L2115.46 1214.29 L2114.87 1214.29 L2114.28 1214.29 L2113.7 1214.29 L2113.11 1214.29 L2112.52 1214.29 L2111.94 1214.29 L2111.35 1214.29 L2110.76 1214.29 L2110.18 1214.29 L2109.59 1214.29 L2109.01 1214.29 L2108.42 1214.29 L2107.83 1214.29 L2107.25 1214.29 L2106.66 1214.29 L2106.07 1214.29 L2105.49 1214.29 L2104.9 1214.29 L2104.31 1214.29 L2103.73 1214.29 L2103.14 1214.29 L2102.55 1214.29 L2101.97 1214.29 L2101.38 1214.29 L2100.8 1214.29 L2100.21 1214.29 L2099.62 1214.29 L2099.04 1214.29 L2098.45 1214.29 L2097.86 1214.29 L2097.28 1214.29 L2096.69 1214.29 L2096.1 1214.29 L2095.52 1214.29 L2094.93 1214.29 L2094.35 1214.29 L2093.76 1214.29 L2093.17 1214.29 L2092.59 1214.29 L2092 1214.29 L2091.41 1214.29 L2090.83 1214.29 L2090.24 1214.29 L2089.65 1214.29 L2089.07 1214.29 L2088.48 1214.29 L2087.89 1214.29 L2087.31 1214.29 L2086.72 1214.29 L2086.14 1214.29 L2085.55 1214.29 L2084.96 1214.29 L2084.38 1214.29 L2083.79 1214.29 L2083.2 1214.29 L2082.62 1214.29 L2082.03 1214.29 L2081.44 1214.29 L2080.86 1214.29 L2080.27 1214.29 L2079.68 1214.29 L2079.1 1214.29 L2078.51 1214.29 L2077.93 1214.29 L2077.34 1214.29 L2076.75 1214.29 L2076.17 1214.29 L2075.58 1214.29 L2074.99 1214.29 L2074.41 1214.29 L2073.82 1214.29 L2073.23 1214.29 L2072.65 1214.29 L2072.06 1214.29 L2071.48 1214.29 L2070.89 1214.29 L2070.3 1214.29 L2069.72 1214.29 L2069.13 1214.29 L2068.54 1214.29 L2067.96 1214.29 L2067.37 1214.29 L2066.78 1214.29 L2066.2 1214.29 L2065.61 1214.29 L2065.02 1214.29 L2064.44 1214.29 L2063.85 1214.29 L2063.27 1214.29 L2062.68 1214.29 L2062.09 1214.29 L2061.51 1214.29 L2060.92 1214.29 L2060.33 1214.29 L2059.75 1214.29 L2059.16 1214.29 L2058.57 1214.29 L2057.99 1214.29 L2057.4 1214.29 L2056.81 1214.29 L2056.23 1214.29 L2055.64 1214.29 L2055.06 1214.29 L2054.47 1214.29 L2053.88 1214.29 L2053.3 1214.29 L2052.71 1214.29 L2052.12 1214.29 L2051.54 1214.29 L2050.95 1214.29 L2050.36 1214.29 L2049.78 1214.29 L2049.19 1214.29 L2048.6 1214.29 L2048.02 1214.29 L2047.43 1214.29 L2046.85 1214.29 L2046.26 1214.29 L2045.67 1214.29 L2045.09 1214.29 L2044.5 1214.29 L2043.91 1214.29 L2043.33 1214.29 L2042.74 1214.29 L2042.15 1214.29 L2041.57 1214.29 L2040.98 1214.29 L2040.4 1214.29 L2039.81 1214.29 L2039.22 1214.29 L2038.64 1214.29 L2038.05 1214.29 L2037.46 1214.29 L2036.88 1214.29 L2036.29 1214.29 L2035.7 1214.29 L2035.12 1214.29 L2034.53 1214.29 L2033.94 1214.29 L2033.36 1214.29 L2032.77 1214.29 L2032.19 1214.29 L2031.6 1214.29 L2031.01 1214.29 L2030.43 1214.29 L2029.84 1214.29 L2029.25 1214.29 L2028.67 1214.29 L2028.08 1214.29 L2027.49 1214.29 L2026.91 1214.29 L2026.32 1214.29 L2025.73 1214.29 L2025.15 1214.29 L2024.56 1214.29 L2023.98 1214.29 L2023.39 1214.29 L2022.8 1214.29 L2022.22 1214.29 L2021.63 1214.29 L2021.04 1214.29 L2020.46 1214.29 L2019.87 1214.29 L2019.28 1214.29 L2018.7 1214.29 L2018.11 1214.29 L2017.53 1214.29 L2016.94 1214.29 L2016.35 1214.29 L2015.77 1214.29 L2015.18 1214.29 L2014.59 1214.29 L2014.01 1214.29 L2013.42 1214.29 L2012.83 1214.29 L2012.25 1214.29 L2011.66 1214.29 L2011.07 1214.29 L2010.49 1214.29 L2009.9 1214.29 L2009.32 1214.29 L2008.73 1214.29 L2008.14 1214.29 L2007.56 1214.29 L2006.97 1214.29 L2006.38 1214.29 L2005.8 1214.29 L2005.21 1214.29 L2004.62 1214.29 L2004.04 1214.29 L2003.45 1214.29 L2002.86 1214.29 L2002.28 1214.29 L2001.69 1214.29 L2001.11 1214.29 L2000.52 1214.29 L1999.93 1214.29 L1999.35 1214.29 L1998.76 1214.29 L1998.17 1214.29 L1997.59 1214.29 L1997 1214.29 L1996.41 1214.29 L1995.83 1214.29 L1995.24 1214.29 L1994.65 1214.29 L1994.07 1214.29 L1993.48 1214.29 L1992.9 1214.29 L1992.31 1214.29 L1991.72 1214.29 L1991.14 1214.29 L1990.55 1214.29 L1989.96 1214.29 L1989.38 1214.29 L1988.79 1214.29 L1988.2 1214.29 L1987.62 1214.29 L1987.03 1214.29 L1986.45 1214.29 L1985.86 1214.29 L1985.27 1214.29 L1984.69 1214.29 L1984.1 1214.29 L1983.51 1214.29 L1982.93 1214.29 L1982.34 1214.29 L1981.75 1214.29 L1981.17 1214.29 L1980.58 1214.29 L1979.99 1214.29 L1979.41 1214.29 L1978.82 1214.29 L1978.24 1214.29 L1977.65 1214.29 L1977.06 1214.29 L1976.48 1214.29 L1975.89 1214.29 L1975.3 1214.29 L1974.72 1214.29 L1974.13 1214.29 L1973.54 1214.29 L1972.96 1214.29 L1972.37 1214.29 L1971.78 1214.29 L1971.2 1214.29 L1970.61 1214.29 L1970.03 1214.29 L1969.44 1214.29 L1968.85 1214.29 L1968.27 1214.29 L1967.68 1214.29 L1967.09 1214.29 L1966.51 1214.29 L1965.92 1214.29 L1965.33 1214.29 L1964.75 1214.29 L1964.16 1214.29 L1963.58 1214.29 L1962.99 1214.29 L1962.4 1214.29 L1961.82 1214.29 L1961.23 1214.29 L1960.64 1214.29 L1960.06 1214.29 L1959.47 1214.29 L1958.88 1214.29 L1958.3 1214.29 L1957.71 1214.29 L1957.12 1214.29 L1956.54 1214.29 L1955.95 1214.29 L1955.37 1214.29 L1954.78 1214.29 L1954.19 1214.29 L1953.61 1214.29 L1953.02 1214.29 L1952.43 1214.29 L1951.85 1214.29 L1951.26 1214.29 L1950.67 1214.29 L1950.09 1214.29 L1949.5 1214.29 L1948.91 1214.29 L1948.33 1214.29 L1947.74 1214.29 L1947.16 1214.29 L1946.57 1214.29 L1945.98 1214.29 L1945.4 1214.29 L1944.81 1214.29 L1944.22 1214.29 L1943.64 1214.29 L1943.05 1214.29 L1942.46 1214.29 L1941.88 1214.29 L1941.29 1214.29 L1940.71 1214.29 L1940.12 1214.29 L1939.53 1214.29 L1938.95 1214.29 L1938.36 1214.29 L1937.77 1214.29 L1937.19 1214.29 L1936.6 1214.29 L1936.01 1214.29 L1935.43 1214.29 L1934.84 1214.29 L1934.25 1214.29 L1933.67 1214.29 L1933.08 1214.29 L1932.5 1214.29 L1931.91 1214.29 L1931.32 1214.29 L1930.74 1214.29 L1930.15 1214.29 L1929.56 1214.29 L1928.98 1214.29 L1928.39 1214.29 L1927.8 1214.29 L1927.22 1214.29 L1926.63 1214.29 L1926.04 1214.29 L1925.46 1214.29 L1924.87 1214.29 L1924.29 1214.29 L1923.7 1214.29 L1923.11 1214.29 L1922.53 1214.29 L1921.94 1214.29 L1921.35 1214.29 L1920.77 1214.29 L1920.18 1214.29 L1919.59 1214.29 L1919.01 1214.29 L1918.42 1214.29 L1917.83 1214.29 L1917.25 1214.29 L1916.66 1214.29 L1916.08 1214.29 L1915.49 1214.29 L1914.9 1214.29 L1914.32 1214.29 L1913.73 1214.29 L1913.14 1214.29 L1912.56 1214.29 L1911.97 1214.29 L1911.38 1214.29 L1910.8 1214.29 L1910.21 1214.29 L1909.63 1214.29 L1909.04 1214.29 L1908.45 1214.29 L1907.87 1214.29 L1907.28 1214.29 L1906.69 1214.29 L1906.11 1214.29 L1905.52 1214.29 L1904.93 1214.29 L1904.35 1214.29 L1903.76 1214.29 L1903.17 1214.29 L1902.59 1214.29 L1902 1214.29 L1901.42 1214.29 L1900.83 1214.29 L1900.24 1214.29 L1899.66 1214.29 L1899.07 1214.29 L1898.48 1214.29 L1897.9 1214.29 L1897.31 1214.29 L1896.72 1214.29 L1896.14 1214.29 L1895.55 1214.29 L1894.96 1214.29 L1894.38 1214.29 L1893.79 1214.29 L1893.21 1214.29 L1892.62 1214.29 L1892.03 1214.29 L1891.45 1214.29 L1890.86 1214.29 L1890.27 1214.29 L1889.69 1214.29 L1889.1 1214.29 L1888.51 1214.29 L1887.93 1214.29 L1887.34 1214.29 L1886.76 1214.29 L1886.17 1214.29 L1885.58 1214.29 L1885 1214.29 L1884.41 1214.29 L1883.82 1214.29 L1883.24 1214.29 L1882.65 1214.29 L1882.06 1214.29 L1881.48 1214.29 L1880.89 1214.29 L1880.3 1214.29 L1879.72 1214.29 L1879.13 1214.29 L1878.55 1214.29 L1877.96 1214.29 L1877.37 1214.29 L1876.79 1214.29 L1876.2 1214.29 L1875.61 1214.29 L1875.03 1214.29 L1874.44 1214.29 L1873.85 1214.29 L1873.27 1214.29 L1872.68 1214.29 L1872.09 1214.29 L1871.51 1214.29 L1870.92 1214.29 L1870.34 1214.29 L1869.75 1214.29 L1869.16 1214.29 L1868.58 1214.29 L1867.99 1214.29 L1867.4 1214.29 L1866.82 1214.29 L1866.23 1214.29 L1865.64 1214.29 L1865.06 1214.29 L1864.47 1214.29 L1863.88 1214.29 L1863.3 1214.29 L1862.71 1214.29 L1862.13 1214.29 L1861.54 1214.29 L1860.95 1214.29 L1860.37 1214.29 L1859.78 1214.29 L1859.19 1214.29 L1858.61 1214.29 L1858.02 1214.29 L1857.43 1214.29 L1856.85 1214.29 L1856.26 1214.29 L1855.68 1214.29 L1855.09 1214.29 L1854.5 1214.29 L1853.92 1214.29 L1853.33 1214.29 L1852.74 1214.29 L1852.16 1214.29 L1851.57 1214.29 L1850.98 1214.29 L1850.4 1214.29 L1849.81 1214.29 L1849.22 1214.29 L1848.64 1214.29 L1848.05 1214.29 L1847.47 1214.29 L1846.88 1214.29 L1846.29 1214.29 L1845.71 1214.29 L1845.12 1214.29 L1844.53 1214.29 L1843.95 1214.29 L1843.36 1214.29 L1842.77 1214.29 L1842.19 1214.29 L1841.6 1214.29 L1841.01 1214.29 L1840.43 1214.29 L1839.84 1214.29 L1839.26 1214.29 L1838.67 1214.29 L1838.08 1214.29 L1837.5 1214.29 L1836.91 1214.29 L1836.32 1214.29 L1835.74 1214.29 L1835.15 1214.29 L1834.56 1214.29 L1833.98 1214.29 L1833.39 1214.29 L1832.81 1214.29 L1832.22 1214.29 L1831.63 1214.29 L1831.05 1214.29 L1830.46 1214.29 L1829.87 1214.29 L1829.29 1214.29 L1828.7 1214.29 L1828.11 1214.29 L1827.53 1214.29 L1826.94 1214.29 L1826.35 1214.29 L1825.77 1214.29 L1825.18 1214.29 L1824.6 1214.29 L1824.01 1214.29 L1823.42 1214.29 L1822.84 1214.29 L1822.25 1214.29 L1821.66 1214.29 L1821.08 1214.29 L1820.49 1214.29 L1819.9 1214.29 L1819.32 1214.29 L1818.73 1214.29 L1818.14 1214.29 L1817.56 1214.29 L1816.97 1214.29 L1816.39 1214.29 L1815.8 1214.29 L1815.21 1214.29 L1814.63 1214.29 L1814.04 1214.29 L1813.45 1214.29 L1812.87 1214.29 L1812.28 1214.29 L1811.69 1214.29 L1811.11 1214.29 L1810.52 1214.29 L1809.94 1214.29 L1809.35 1214.29 L1808.76 1214.29 L1808.18 1214.29 L1807.59 1214.29 L1807 1214.29 L1806.42 1214.29 L1805.83 1214.29 L1805.24 1214.29 L1804.66 1214.29 L1804.07 1214.29 L1803.48 1214.29 L1802.9 1214.29 L1802.31 1214.29 L1801.73 1214.29 L1801.14 1214.29 L1800.55 1214.29 L1799.97 1214.29 L1799.38 1214.29 L1798.79 1214.29 L1798.21 1214.29 L1797.62 1214.29 L1797.03 1214.29 L1796.45 1214.29 L1795.86 1214.29 L1795.27 1214.29 L1794.69 1214.29 L1794.1 1214.29 L1793.52 1214.29 L1792.93 1214.29 L1792.34 1214.29 L1791.76 1214.29 L1791.17 1214.29 L1790.58 1214.29 L1790 1214.29 L1789.41 1214.29 L1788.82 1214.29 L1788.24 1214.29 L1787.65 1214.29 L1787.06 1214.29 L1786.48 1214.29 L1785.89 1214.29 L1785.31 1214.29 L1784.72 1214.29 L1784.13 1214.29 L1783.55 1214.29 L1782.96 1214.29 L1782.37 1214.29 L1781.79 1214.29 L1781.2 1214.29 L1780.61 1214.29 L1780.03 1214.29 L1779.44 1214.29 L1778.86 1214.29 L1778.27 1214.29 L1777.68 1214.29 L1777.1 1214.29 L1776.51 1214.29 L1775.92 1214.29 L1775.34 1214.29 L1774.75 1214.29 L1774.16 1214.29 L1773.58 1214.29 L1772.99 1214.29 L1772.4 1214.29 L1771.82 1214.29 L1771.23 1214.29 L1770.65 1214.29 L1770.06 1214.29 L1769.47 1214.29 L1768.89 1214.29 L1768.3 1214.29 L1767.71 1214.29 L1767.13 1214.29 L1766.54 1214.29 L1765.95 1214.29 L1765.37 1214.29 L1764.78 1214.29 L1764.19 1214.29 L1763.61 1214.29 L1763.02 1214.29 L1762.44 1214.29 L1761.85 1214.29 L1761.26 1214.29 L1760.68 1214.29 L1760.09 1214.29 L1759.5 1214.29 L1758.92 1214.29 L1758.33 1214.29 L1757.74 1214.29 L1757.16 1214.29 L1756.57 1214.29 L1755.99 1214.29 L1755.4 1214.29 L1754.81 1214.29 L1754.23 1214.29 L1753.64 1214.29 L1753.05 1214.29 L1752.47 1214.29 L1751.88 1214.29 L1751.29 1214.29 L1750.71 1214.29 L1750.12 1214.29 L1749.53 1214.29 L1748.95 1214.29 L1748.36 1214.29 L1747.78 1214.29 L1747.19 1214.29 L1746.6 1214.29 L1746.02 1214.29 L1745.43 1214.29 L1744.84 1214.29 L1744.26 1214.29 L1743.67 1214.29 L1743.08 1214.29 L1742.5 1214.29 L1741.91 1214.29 L1741.32 1214.29 L1740.74 1214.29 L1740.15 1214.29 L1739.57 1214.29 L1738.98 1214.29 L1738.39 1214.29 L1737.81 1214.29 L1737.22 1214.29 L1736.63 1214.29 L1736.05 1214.29 L1735.46 1214.29 L1734.87 1214.29 L1734.29 1214.29 L1733.7 1214.29 L1733.11 1214.29 L1732.53 1214.29 L1731.94 1214.29 L1731.36 1214.29 L1730.77 1214.29 L1730.18 1214.29 L1729.6 1214.29 L1729.01 1214.29 L1728.42 1214.29 L1727.84 1214.29 L1727.25 1214.29 L1726.66 1214.29 L1726.08 1214.29 L1725.49 1214.29 L1724.91 1214.29 L1724.32 1214.29 L1723.73 1214.29 L1723.15 1214.29 L1722.56 1214.29 L1721.97 1214.29 L1721.39 1214.29 L1720.8 1214.29 L1720.21 1214.29 L1719.63 1214.29 L1719.04 1214.29 L1718.45 1214.29 L1717.87 1214.29 L1717.28 1214.29 L1716.7 1214.29 L1716.11 1214.29 L1715.52 1214.29 L1714.94 1214.29 L1714.35 1214.29 L1713.76 1214.29 L1713.18 1214.29 L1712.59 1214.29 L1712 1214.29 L1711.42 1214.29 L1710.83 1214.29 L1710.24 1214.29 L1709.66 1214.29 L1709.07 1214.29 L1708.49 1214.29 L1707.9 1214.29 L1707.31 1214.29 L1706.73 1214.29 L1706.14 1214.29 L1705.55 1214.29 L1704.97 1214.29 L1704.38 1214.29 L1703.79 1214.29 L1703.21 1214.29 L1702.62 1214.29 L1702.04 1214.29 L1701.45 1214.29 L1700.86 1214.29 L1700.28 1214.29 L1699.69 1214.29 L1699.1 1214.29 L1698.52 1214.29 L1697.93 1214.29 L1697.34 1214.29 L1696.76 1214.29 L1696.17 1214.29 L1695.58 1214.29 L1695 1214.29 L1694.41 1214.29 L1693.83 1214.29 L1693.24 1214.29 L1692.65 1214.29 L1692.07 1214.29 L1691.48 1214.29 L1690.89 1214.29 L1690.31 1214.29 L1689.72 1214.29 L1689.13 1214.29 L1688.55 1214.29 L1687.96 1214.29 L1687.37 1214.29 L1686.79 1214.29 L1686.2 1214.29 L1685.62 1214.29 L1685.03 1214.29 L1684.44 1214.29 L1683.86 1214.29 L1683.27 1214.29 L1682.68 1214.29 L1682.1 1214.29 L1681.51 1214.29 L1680.92 1214.29 L1680.34 1214.29 L1679.75 1214.29 L1679.17 1214.29 L1678.58 1214.29 L1677.99 1214.29 L1677.41 1214.29 L1676.82 1214.29 L1676.23 1214.29 L1675.65 1214.29 L1675.06 1214.29 L1674.47 1214.29 L1673.89 1214.29 L1673.3 1214.29 L1672.71 1214.29 L1672.13 1214.29 L1671.54 1214.29 L1670.96 1214.29 L1670.37 1214.29 L1669.78 1214.29 L1669.2 1214.29 L1668.61 1214.29 L1668.02 1214.29 L1667.44 1214.29 L1666.85 1214.29 L1666.26 1214.29 L1665.68 1214.29 L1665.09 1214.29 L1664.5 1214.29 L1663.92 1214.29 L1663.33 1214.29 L1662.75 1214.29 L1662.16 1214.29 L1661.57 1214.29 L1660.99 1214.29 L1660.4 1214.29 L1659.81 1214.29 L1659.23 1214.29 L1658.64 1214.29 L1658.05 1214.29 L1657.47 1214.29 L1656.88 1214.29 L1656.29 1214.29 L1655.71 1214.29 L1655.12 1214.29 L1654.54 1214.29 L1653.95 1214.29 L1653.36 1214.29 L1652.78 1214.29 L1652.19 1214.29 L1651.6 1214.29 L1651.02 1214.29 L1650.43 1214.29 L1649.84 1214.29 L1649.26 1214.29 L1648.67 1214.29 L1648.09 1214.29 L1647.5 1214.29 L1646.91 1214.29 L1646.33 1214.29 L1645.74 1214.29 L1645.15 1214.29 L1644.57 1214.29 L1643.98 1214.29 L1643.39 1214.29 L1642.81 1214.29 L1642.22 1214.29 L1641.63 1214.29 L1641.05 1214.29 L1640.46 1214.29 L1639.88 1214.29 L1639.29 1214.29 L1638.7 1214.29 L1638.12 1214.29 L1637.53 1214.29 L1636.94 1214.29 L1636.36 1214.29 L1635.77 1214.29 L1635.18 1214.29 L1634.6 1214.29 L1634.01 1214.29 L1633.42 1214.29 L1632.84 1214.29 L1632.25 1214.29 L1631.67 1214.29 L1631.08 1214.29 L1630.49 1214.29 L1629.91 1214.29 L1629.32 1214.29 L1628.73 1214.29 L1628.15 1214.29 L1627.56 1214.29 L1626.97 1214.29 L1626.39 1214.29 L1625.8 1214.29 L1625.22 1214.29 L1624.63 1214.29 L1624.04 1214.29 L1623.46 1214.29 L1622.87 1214.29 L1622.28 1214.29 L1621.7 1214.29 L1621.11 1214.29 L1620.52 1214.29 L1619.94 1214.29 L1619.35 1214.29 L1618.76 1214.29 L1618.18 1214.29 L1617.59 1214.29 L1617.01 1214.29 L1616.42 1214.29 L1615.83 1214.29 L1615.25 1214.29 L1614.66 1214.29 L1614.07 1214.29 L1613.49 1214.29 L1612.9 1214.29 L1612.31 1214.29 L1611.73 1214.29 L1611.14 1214.29 L1610.55 1214.29 L1609.97 1214.29 L1609.38 1214.29 L1608.8 1214.29 L1608.21 1214.29 L1607.62 1214.29 L1607.04 1214.29 L1606.45 1214.29 L1605.86 1214.29 L1605.28 1214.29 L1604.69 1214.29 L1604.1 1214.29 L1603.52 1214.29 L1602.93 1214.29 L1602.34 1214.29 L1601.76 1214.29 L1601.17 1214.29 L1600.59 1214.29 L1600 1214.29 L1599.41 1214.29 L1598.83 1214.29 L1598.24 1214.29 L1597.65 1214.29 L1597.07 1214.29 L1596.48 1214.29 L1595.89 1214.29 L1595.31 1214.29 L1594.72 1214.29 L1594.14 1214.29 L1593.55 1214.29 L1592.96 1214.29 L1592.38 1214.29 L1591.79 1214.29 L1591.2 1214.29 L1590.62 1214.29 L1590.03 1214.29 L1589.44 1214.29 L1588.86 1214.29 L1588.27 1214.29 L1587.68 1214.29 L1587.1 1214.29 L1586.51 1214.29 L1585.93 1214.29 L1585.34 1214.29 L1584.75 1214.29 L1584.17 1214.29 L1583.58 1214.29 L1582.99 1214.29 L1582.41 1214.29 L1581.82 1214.29 L1581.23 1214.29 L1580.65 1214.29 L1580.06 1214.29 L1579.47 1214.29 L1578.89 1214.29 L1578.3 1214.29 L1577.72 1214.29 L1577.13 1214.29 L1576.54 1214.29 L1575.96 1214.29 L1575.37 1214.29 L1574.78 1214.29 L1574.2 1214.29 L1573.61 1214.29 L1573.02 1214.29 L1572.44 1214.29 L1571.85 1214.29 L1571.27 1214.29 L1570.68 1214.29 L1570.09 1214.29 L1569.51 1214.29 L1568.92 1214.29 L1568.33 1214.29 L1567.75 1214.29 L1567.16 1214.29 L1566.57 1214.29 L1565.99 1214.29 L1565.4 1214.29 L1564.81 1214.29 L1564.23 1214.29 L1563.64 1214.29 L1563.06 1214.29 L1562.47 1214.29 L1561.88 1214.29 L1561.3 1214.29 L1560.71 1214.29 L1560.12 1214.29 L1559.54 1214.29 L1558.95 1214.29 L1558.36 1214.29 L1557.78 1214.29 L1557.19 1214.29 L1556.6 1214.29 L1556.02 1214.29 L1555.43 1214.29 L1554.85 1214.29 L1554.26 1214.29 L1553.67 1214.29 L1553.09 1214.29 L1552.5 1214.29 L1551.91 1214.29 L1551.33 1214.29 L1550.74 1214.29 L1550.15 1214.29 L1549.57 1214.29 L1548.98 1214.29 L1548.4 1214.29 L1547.81 1214.29 L1547.22 1214.29 L1546.64 1214.29 L1546.05 1214.29 L1545.46 1214.29 L1544.88 1214.29 L1544.29 1214.29 L1543.7 1214.29 L1543.12 1214.29 L1542.53 1214.29 L1541.94 1214.29 L1541.36 1214.29 L1540.77 1214.29 L1540.19 1214.29 L1539.6 1214.29 L1539.01 1214.29 L1538.43 1214.29 L1537.84 1214.29 L1537.25 1214.29 L1536.67 1214.29 L1536.08 1214.29 L1535.49 1214.29 L1534.91 1214.29 L1534.32 1214.29 L1533.73 1214.29 L1533.15 1214.29 L1532.56 1214.29 L1531.98 1214.29 L1531.39 1214.29 L1530.8 1214.29 L1530.22 1214.29 L1529.63 1214.29 L1529.04 1214.29 L1528.46 1214.29 L1527.87 1214.29 L1527.28 1214.29 L1526.7 1214.29 L1526.11 1214.29 L1525.52 1214.29 L1524.94 1214.29 L1524.35 1214.29 L1523.77 1214.29 L1523.18 1214.29 L1522.59 1214.29 L1522.01 1214.29 L1521.42 1214.29 L1520.83 1214.29 L1520.25 1214.29 L1519.66 1214.29 L1519.07 1214.29 L1518.49 1214.29 L1517.9 1214.29 L1517.32 1214.29 L1516.73 1214.29 L1516.14 1214.29 L1515.56 1214.29 L1514.97 1214.29 L1514.38 1214.29 L1513.8 1214.29 L1513.21 1214.29 L1512.62 1214.29 L1512.04 1214.29 L1511.45 1214.29 L1510.86 1214.29 L1510.28 1214.29 L1509.69 1214.29 L1509.11 1214.29 L1508.52 1214.29 L1507.93 1214.29 L1507.35 1214.29 L1506.76 1214.29 L1506.17 1214.29 L1505.59 1214.29 L1505 1214.29 L1504.41 1214.29 L1503.83 1214.29 L1503.24 1214.29 L1502.65 1214.29 L1502.07 1214.29 L1501.48 1214.29 L1500.9 1214.29 L1500.31 1214.29 L1499.72 1214.29 L1499.14 1214.29 L1498.55 1214.29 L1497.96 1214.29 L1497.38 1214.29 L1496.79 1214.29 L1496.2 1214.29 L1495.62 1214.29 L1495.03 1214.29 L1494.45 1214.29 L1493.86 1214.29 L1493.27 1214.29 L1492.69 1214.29 L1492.1 1214.29 L1491.51 1214.29 L1490.93 1214.29 L1490.34 1214.29 L1489.75 1214.29 L1489.17 1214.29 L1488.58 1214.29 L1487.99 1214.29 L1487.41 1214.29 L1486.82 1214.29 L1486.24 1214.29 L1485.65 1214.29 L1485.06 1214.29 L1484.48 1214.29 L1483.89 1214.29 L1483.3 1214.29 L1482.72 1214.29 L1482.13 1214.29 L1481.54 1214.29 L1480.96 1214.29 L1480.37 1214.29 L1479.78 1214.29 L1479.2 1214.29 L1478.61 1214.29 L1478.03 1214.29 L1477.44 1214.29 L1476.85 1214.29 L1476.27 1214.29 L1475.68 1214.29 L1475.09 1214.29 L1474.51 1214.29 L1473.92 1214.29 L1473.33 1214.29 L1472.75 1214.29 L1472.16 1214.29 L1471.57 1214.29 L1470.99 1214.29 L1470.4 1214.29 L1469.82 1214.29 L1469.23 1214.29 L1468.64 1214.29 L1468.06 1214.29 L1467.47 1214.29 L1466.88 1214.29 L1466.3 1214.29 L1465.71 1214.29 L1465.12 1214.29 L1464.54 1214.29 L1463.95 1214.29 L1463.37 1214.29 L1462.78 1214.29 L1462.19 1214.29 L1461.61 1214.29 L1461.02 1214.29 L1460.43 1214.29 L1459.85 1214.29 L1459.26 1214.29 L1458.67 1214.29 L1458.09 1214.29 L1457.5 1214.29 L1456.91 1214.29 L1456.33 1214.29 L1455.74 1214.29 L1455.16 1214.29 L1454.57 1214.29 L1453.98 1214.29 L1453.4 1214.29 L1452.81 1214.29 L1452.22 1214.29 L1451.64 1214.29 L1451.05 1214.29 L1450.46 1214.29 L1449.88 1214.29 L1449.29 1214.29 L1448.7 1214.29 L1448.12 1214.29 L1447.53 1214.29 L1446.95 1214.29 L1446.36 1214.29 L1445.77 1214.29 L1445.19 1214.29 L1444.6 1214.29 L1444.01 1214.29 L1443.43 1214.29 L1442.84 1214.29 L1442.25 1214.29 L1441.67 1214.29 L1441.08 1214.29 L1440.5 1214.29 L1439.91 1214.29 L1439.32 1214.29 L1438.74 1214.29 L1438.15 1214.29 L1437.56 1214.29 L1436.98 1214.29 L1436.39 1214.29 L1435.8 1214.29 L1435.22 1214.29 L1434.63 1214.29 L1434.04 1214.29 L1433.46 1214.29 L1432.87 1214.29 L1432.29 1214.29 L1431.7 1214.29 L1431.11 1214.29 L1430.53 1214.29 L1429.94 1214.29 L1429.35 1214.29 L1428.77 1214.29 L1428.18 1214.29 L1427.59 1214.29 L1427.01 1214.29 L1426.42 1214.29 L1425.83 1214.29 L1425.25 1214.29 L1424.66 1214.29 L1424.08 1214.29 L1423.49 1214.29 L1422.9 1214.29 L1422.32 1214.29 L1421.73 1214.29 L1421.14 1214.29 L1420.56 1214.29 L1419.97 1214.29 L1419.38 1214.29 L1418.8 1214.29 L1418.21 1214.29 L1417.63 1214.29 L1417.04 1214.29 L1416.45 1214.29 L1415.87 1214.29 L1415.28 1214.29 L1414.69 1214.29 L1414.11 1214.29 L1413.52 1214.29 L1412.93 1214.29 L1412.35 1214.29 L1411.76 1214.29 L1411.17 1214.29 L1410.59 1214.29 L1410 1214.29 L1409.42 1214.29 L1408.83 1214.29 L1408.24 1214.29 L1407.66 1214.29 L1407.07 1214.29 L1406.48 1214.29 L1405.9 1214.29 L1405.31 1214.29 L1404.72 1214.29 L1404.14 1214.29 L1403.55 1214.29 L1402.96 1214.29 L1402.38 1214.29 L1401.79 1214.29 L1401.21 1214.29 L1400.62 1214.29 L1400.03 1214.29 L1399.45 1214.29 L1398.86 1214.29 L1398.27 1214.29 L1397.69 1214.29 L1397.1 1214.29 L1396.51 1214.29 L1395.93 1214.29 L1395.34 1214.29 L1394.75 1214.29 L1394.17 1214.29 L1393.58 1214.29 L1393 1214.29 L1392.41 1214.29 L1391.82 1214.29 L1391.24 1214.29 L1390.65 1214.29 L1390.06 1214.29 L1389.48 1214.29 L1388.89 1214.29 L1388.3 1214.29 L1387.72 1214.29 L1387.13 1214.29 L1386.55 1214.29 L1385.96 1214.29 L1385.37 1214.29 L1384.79 1214.29 L1384.2 1214.29 L1383.61 1214.29 L1383.03 1214.29 L1382.44 1214.29 L1381.85 1214.29 L1381.27 1214.29 L1380.68 1214.29 L1380.09 1214.29 L1379.51 1214.29 L1378.92 1214.29 L1378.34 1214.29 L1377.75 1214.29 L1377.16 1214.29 L1376.58 1214.29 L1375.99 1214.29 L1375.4 1214.29 L1374.82 1214.29 L1374.23 1214.29 L1373.64 1214.29 L1373.06 1214.29 L1372.47 1214.29 L1371.88 1214.29 L1371.3 1214.29 L1370.71 1214.29 L1370.13 1214.29 L1369.54 1214.29 L1368.95 1214.29 L1368.37 1214.29 L1367.78 1214.29 L1367.19 1214.29 L1366.61 1214.29 L1366.02 1214.29 L1365.43 1214.29 L1364.85 1214.29 L1364.26 1214.29 L1363.68 1214.29 L1363.09 1214.29 L1362.5 1214.29 L1361.92 1214.29 L1361.33 1214.29 L1360.74 1214.29 L1360.16 1214.29 L1359.57 1214.29 L1358.98 1214.29 L1358.4 1214.29 L1357.81 1214.29 L1357.22 1214.29 L1356.64 1214.29 L1356.05 1214.29 L1355.47 1214.29 L1354.88 1214.29 L1354.29 1214.29 L1353.71 1214.29 L1353.12 1214.29 L1352.53 1214.29 L1351.95 1214.29 L1351.36 1214.29 L1350.77 1214.29 L1350.19 1214.29 L1349.6 1214.29 L1349.01 1214.29 L1348.43 1214.29 L1347.84 1214.29 L1347.26 1214.29 L1346.67 1214.29 L1346.08 1214.29 L1345.5 1214.29 L1344.91 1214.29 L1344.32 1214.29 L1343.74 1214.29 L1343.15 1214.29 L1342.56 1214.29 L1341.98 1214.29 L1341.39 1214.29 L1340.8 1214.29 L1340.22 1214.29 L1339.63 1214.29 L1339.05 1214.29 L1338.46 1214.29 L1337.87 1214.29 L1337.29 1214.29 L1336.7 1214.29 L1336.11 1214.29 L1335.53 1214.29 L1334.94 1214.29 L1334.35 1214.29 L1333.77 1214.29 L1333.18 1214.29 L1332.6 1214.29 L1332.01 1214.29 L1331.42 1214.29 L1330.84 1214.29 L1330.25 1214.29 L1329.66 1214.29 L1329.08 1214.29 L1328.49 1214.29 L1327.9 1214.29 L1327.32 1214.29 L1326.73 1214.29 L1326.14 1214.29 L1325.56 1214.29 L1324.97 1214.29 L1324.39 1214.29 L1323.8 1214.29 L1323.21 1214.29 L1322.63 1214.29 L1322.04 1214.29 L1321.45 1214.29 L1320.87 1214.29 L1320.28 1214.29 L1319.69 1214.29 L1319.11 1214.29 L1318.52 1214.29 L1317.93 1214.29 L1317.35 1214.29 L1316.76 1214.29 L1316.18 1214.29 L1315.59 1214.29 L1315 1214.29 L1314.42 1214.29 L1313.83 1214.29 L1313.24 1214.29 L1312.66 1214.29 L1312.07 1214.29 L1311.48 1214.29 L1310.9 1214.29 L1310.31 1214.29 L1309.73 1214.29 L1309.14 1214.29 L1308.55 1214.29 L1307.97 1214.29 L1307.38 1214.29 L1306.79 1214.29 L1306.21 1214.29 L1305.62 1214.29 L1305.03 1214.29 L1304.45 1214.29 L1303.86 1214.29 L1303.27 1214.29 L1302.69 1214.29 L1302.1 1214.29 L1301.52 1214.29 L1300.93 1214.29 L1300.34 1214.29 L1299.76 1214.29 L1299.17 1214.29 L1298.58 1214.29 L1298 1214.29 L1297.41 1214.29 L1296.82 1214.29 L1296.24 1214.29 L1295.65 1214.29 L1295.06 1214.29 L1294.48 1214.29 L1293.89 1214.29 L1293.31 1214.29 L1292.72 1214.29 L1292.13 1214.29 L1291.55 1214.29 L1290.96 1214.29 L1290.37 1214.29 L1289.79 1214.29 L1289.2 1214.29 L1288.61 1214.29 L1288.03 1214.29 L1287.44 1214.29 L1286.86 1214.29 L1286.27 1214.29 L1285.68 1214.29 L1285.1 1214.29 L1284.51 1214.29 L1283.92 1214.29 L1283.34 1214.29 L1282.75 1214.29 L1282.16 1214.29 L1281.58 1214.29 L1280.99 1214.29 L1280.4 1214.29 L1279.82 1214.29 L1279.23 1214.29 L1278.65 1214.29 L1278.06 1214.29 L1277.47 1214.29 L1276.89 1214.29 L1276.3 1214.29 L1275.71 1214.29 L1275.13 1214.29 L1274.54 1214.29 L1273.95 1214.29 L1273.37 1214.29 L1272.78 1214.29 L1272.19 1214.29 L1271.61 1214.29 L1271.02 1214.29 L1270.44 1214.29 L1269.85 1214.29 L1269.26 1214.29 L1268.68 1214.29 L1268.09 1214.29 L1267.5 1214.29 L1266.92 1214.29 L1266.33 1214.29 L1265.74 1214.29 L1265.16 1214.29 L1264.57 1214.29 L1263.98 1214.29 L1263.4 1214.29 L1262.81 1214.29 L1262.23 1214.29 L1261.64 1214.29 L1261.05 1214.29 L1260.47 1214.29 L1259.88 1214.29 L1259.29 1214.29 L1258.71 1214.29 L1258.12 1214.29 L1257.53 1214.29 L1256.95 1214.29 L1256.36 1214.29 L1255.78 1214.29 L1255.19 1214.29 L1254.6 1214.29 L1254.02 1214.29 L1253.43 1214.29 L1252.84 1214.29 L1252.26 1214.29 L1251.67 1214.29 L1251.08 1214.29 L1250.5 1214.29 L1249.91 1214.29 L1249.32 1214.29 L1248.74 1214.29 L1248.15 1214.29 L1247.57 1214.29 L1246.98 1214.29 L1246.39 1214.29 L1245.81 1214.29 L1245.22 1214.29 L1244.63 1214.29 L1244.05 1214.29 L1243.46 1214.29 L1242.87 1214.29 L1242.29 1214.29 L1241.7 1214.29 L1241.11 1214.29 L1240.53 1214.29 L1239.94 1214.29 L1239.36 1214.29 L1238.77 1214.29 L1238.18 1214.29 L1237.6 1214.29 L1237.01 1214.29 L1236.42 1214.29 L1235.84 1214.29 L1235.25 1214.29 L1234.66 1214.29 L1234.08 1214.29 L1233.49 1214.29 L1232.91 1214.29 L1232.32 1214.29 L1231.73 1214.29 L1231.15 1214.29 L1230.56 1214.29 L1229.97 1214.29 L1229.39 1214.29 L1228.8 1214.29 L1228.21 1214.29 L1227.63 1214.29 L1227.04 1214.29 L1226.45 1214.29 L1225.87 1214.29 L1225.28 1214.29 L1224.7 1214.29 L1224.11 1214.29 L1223.52 1214.29 L1222.94 1214.29 L1222.35 1214.29 L1221.76 1214.29 L1221.18 1214.29 L1220.59 1214.29 L1220 1214.29 L1219.42 1214.29 L1218.83 1214.29 L1218.24 1214.29 L1217.66 1214.29 L1217.07 1214.29 L1216.49 1214.29 L1215.9 1214.29 L1215.31 1214.29 L1214.73 1214.29 L1214.14 1214.29 L1213.55 1214.29 L1212.97 1214.29 L1212.38 1214.29 L1211.79 1214.29 L1211.21 1214.29 L1210.62 1214.29 L1210.03 1214.29 L1209.45 1214.29 L1208.86 1214.29 L1208.28 1214.29 L1207.69 1214.29 L1207.1 1214.29 L1206.52 1214.29 L1205.93 1214.29 L1205.34 1214.29 L1204.76 1214.29 L1204.17 1214.29 L1203.58 1214.29 L1203 1214.29 L1202.41 1214.29 L1201.83 1214.29 L1201.24 1214.29 L1200.65 1214.29 L1200.07 1214.29 L1199.48 1214.29 L1198.89 1214.29 L1198.31 1214.29 L1197.72 1214.29 L1197.13 1214.29 L1196.55 1214.29 L1195.96 1214.29 L1195.37 1214.29 L1194.79 1214.29 L1194.2 1214.29 L1193.62 1214.29 L1193.03 1214.29 L1192.44 1214.29 L1191.86 1214.29 L1191.27 1214.29 L1190.68 1214.29 L1190.1 1214.29 L1189.51 1214.29 L1188.92 1214.29 L1188.34 1214.29 L1187.75 1214.29 L1187.16 1214.29 L1186.58 1214.29 L1185.99 1214.29 L1185.41 1214.29 L1184.82 1214.29 L1184.23 1214.29 L1183.65 1214.29 L1183.06 1214.29 L1182.47 1214.29 L1181.89 1214.29 L1181.3 1214.29 L1180.71 1214.29 L1180.13 1214.29 L1179.54 1214.29 L1178.96 1214.29 L1178.37 1214.29 L1177.78 1214.29 L1177.2 1214.29 L1176.61 1214.29 L1176.02 1214.29 L1175.44 1214.29 L1174.85 1214.29 L1174.26 1214.29 L1173.68 1214.29 L1173.09 1214.29 L1172.5 1214.29 L1171.92 1214.29 L1171.33 1214.29 L1170.75 1214.29 L1170.16 1214.29 L1169.57 1214.29 L1168.99 1214.29 L1168.4 1214.29 L1167.81 1214.29 L1167.23 1214.29 L1166.64 1214.29 L1166.05 1214.29 L1165.47 1214.29 L1164.88 1214.29 L1164.29 1214.29 L1163.71 1214.29 L1163.12 1214.29 L1162.54 1214.29 L1161.95 1214.29 L1161.36 1214.29 L1160.78 1214.29 L1160.19 1214.29 L1159.6 1214.29 L1159.02 1214.29 L1158.43 1214.29 L1157.84 1214.29 L1157.26 1214.29 L1156.67 1214.29 L1156.09 1214.29 L1155.5 1214.29 L1154.91 1214.29 L1154.33 1214.29 L1153.74 1214.29 L1153.15 1214.29 L1152.57 1214.29 L1151.98 1214.29 L1151.39 1214.29 L1150.81 1214.29 L1150.22 1214.29 L1149.63 1214.29 L1149.05 1214.29 L1148.46 1214.29 L1147.88 1214.29 L1147.29 1214.29 L1146.7 1214.29 L1146.12 1214.29 L1145.53 1214.29 L1144.94 1214.29 L1144.36 1214.29 L1143.77 1214.29 L1143.18 1214.29 L1142.6 1214.29 L1142.01 1214.29 L1141.42 1214.29 L1140.84 1214.29 L1140.25 1214.29 L1139.67 1214.29 L1139.08 1214.29 L1138.49 1214.29 L1137.91 1214.29 L1137.32 1214.29 L1136.73 1214.29 L1136.15 1214.29 L1135.56 1214.29 L1134.97 1214.29 L1134.39 1214.29 L1133.8 1214.29 L1133.21 1214.29 L1132.63 1214.29 L1132.04 1214.29 L1131.46 1214.29 L1130.87 1214.29 L1130.28 1214.29 L1129.7 1214.29 L1129.11 1214.29 L1128.52 1214.29 L1127.94 1214.29 L1127.35 1214.29 L1126.76 1214.29 L1126.18 1214.29 L1125.59 1214.29 L1125.01 1214.29 L1124.42 1214.29 L1123.83 1214.29 L1123.25 1214.29 L1122.66 1214.29 L1122.07 1214.29 L1121.49 1214.29 L1120.9 1214.29 L1120.31 1214.29 L1119.73 1214.29 L1119.14 1214.29 L1118.55 1214.29 L1117.97 1214.29 L1117.38 1214.29 L1116.8 1214.29 L1116.21 1214.29 L1115.62 1214.29 L1115.04 1214.29 L1114.45 1214.29 L1113.86 1214.29 L1113.28 1214.29 L1112.69 1214.29 L1112.1 1214.29 L1111.52 1214.29 L1110.93 1214.29 L1110.34 1214.29 L1109.76 1214.29 L1109.17 1214.29 L1108.59 1214.29 L1108 1214.29 L1107.41 1214.29 L1106.83 1214.29 L1106.24 1214.29 L1105.65 1214.29 L1105.07 1214.29 L1104.48 1214.29 L1103.89 1214.29 L1103.31 1214.29 L1102.72 1214.29 L1102.14 1214.29 L1101.55 1214.29 L1100.96 1214.29 L1100.38 1214.29 L1099.79 1214.29 L1099.2 1214.29 L1098.62 1214.29 L1098.03 1214.29 L1097.44 1214.29 L1096.86 1214.29 L1096.27 1214.29 L1095.68 1214.29 L1095.1 1214.29 L1094.51 1214.29 L1093.93 1214.29 L1093.34 1214.29 L1092.75 1214.29 L1092.17 1214.29 L1091.58 1214.29 L1090.99 1214.29 L1090.41 1214.29 L1089.82 1214.29 L1089.23 1214.29 L1088.65 1214.29 L1088.06 1214.29 L1087.47 1214.29 L1086.89 1214.29 L1086.3 1214.29 L1085.72 1214.29 L1085.13 1214.29 L1084.54 1214.29 L1083.96 1214.29 L1083.37 1214.29 L1082.78 1214.29 L1082.2 1214.29 L1081.61 1214.29 L1081.02 1214.29 L1080.44 1214.29 L1079.85 1214.29 L1079.26 1214.29 L1078.68 1214.29 L1078.09 1214.29 L1077.51 1214.29 L1076.92 1214.29 L1076.33 1214.29 L1075.75 1214.29 L1075.16 1214.29 L1074.57 1214.29 L1073.99 1214.29 L1073.4 1214.29 L1072.81 1214.29 L1072.23 1214.29 L1071.64 1214.29 L1071.06 1214.29 L1070.47 1214.29 L1069.88 1214.29 L1069.3 1214.29 L1068.71 1214.29 L1068.12 1214.29 L1067.54 1214.29 L1066.95 1214.29 L1066.36 1214.29 L1065.78 1214.29 L1065.19 1214.29 L1064.6 1214.29 L1064.02 1214.29 L1063.43 1214.29 L1062.85 1214.29 L1062.26 1214.29 L1061.67 1214.29 L1061.09 1214.29 L1060.5 1214.29 L1059.91 1214.29 L1059.33 1214.29 L1058.74 1214.29 L1058.15 1214.29 L1057.57 1214.29 L1056.98 1214.29 L1056.39 1214.29 L1055.81 1214.29 L1055.22 1214.29 L1054.64 1214.29 L1054.05 1214.29 L1053.46 1214.29 L1052.88 1214.29 L1052.29 1214.29 L1051.7 1214.29 L1051.12 1214.29 L1050.53 1214.29 L1049.94 1214.29 L1049.36 1214.29 L1048.77 1214.29 L1048.19 1214.29 L1047.6 1214.29 L1047.01 1214.29 L1046.43 1214.29 L1045.84 1214.29 L1045.25 1214.29 L1044.67 1214.29 L1044.08 1214.29 L1043.49 1214.29 L1042.91 1214.29 L1042.32 1214.29 L1041.73 1214.29 L1041.15 1214.29 L1040.56 1214.29 L1039.98 1214.29 L1039.39 1214.29 L1038.8 1214.29 L1038.22 1214.29 L1037.63 1214.29 L1037.04 1214.29 L1036.46 1214.29 L1035.87 1214.29 L1035.28 1214.29 L1034.7 1214.29 L1034.11 1214.29 L1033.52 1214.29 L1032.94 1214.29 L1032.35 1214.29 L1031.77 1214.29 L1031.18 1214.29 L1030.59 1214.29 L1030.01 1214.29 L1029.42 1214.29 L1028.83 1214.29 L1028.25 1214.29 L1027.66 1214.29 L1027.07 1214.29 L1026.49 1214.29 L1025.9 1214.29 L1025.32 1214.29 L1024.73 1214.29 L1024.14 1214.29 L1023.56 1214.29 L1022.97 1214.29 L1022.38 1214.29 L1021.8 1214.29 L1021.21 1214.29 L1020.62 1214.29 L1020.04 1214.29 L1019.45 1214.29 L1018.86 1214.29 L1018.28 1214.29 L1017.69 1214.29 L1017.11 1214.29 L1016.52 1214.29 L1015.93 1214.29 L1015.35 1214.29 L1014.76 1214.29 L1014.17 1214.29 L1013.59 1214.29 L1013 1214.29 L1012.41 1214.29 L1011.83 1214.29 L1011.24 1214.29 L1010.65 1214.29 L1010.07 1214.29 L1009.48 1214.29 L1008.9 1214.29 L1008.31 1214.29 L1007.72 1214.29 L1007.14 1214.29 L1006.55 1214.29 L1005.96 1214.29 L1005.38 1214.29 L1004.79 1214.29 L1004.2 1214.29 L1003.62 1214.29 L1003.03 1214.29 L1002.44 1214.29 L1001.86 1214.29 L1001.27 1214.29 L1000.69 1214.29 L1000.1 1214.29 L999.513 1214.29 L998.926 1214.29 L998.34 1214.29 L997.754 1214.29 L997.167 1214.29 L996.581 1214.29 L995.994 1214.29 L995.408 1214.29 L994.822 1214.29 L994.235 1214.29 L993.649 1214.29 L993.062 1214.29 L992.476 1214.29 L991.889 1214.29 L991.303 1214.29 L990.717 1214.29 L990.13 1214.29 L989.544 1214.29 L988.957 1214.29 L988.371 1214.29 L987.785 1214.29 L987.198 1214.29 L986.612 1214.29 L986.025 1214.29  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.56 986.612,1214.56 987.198,1214.56 987.785,1214.56 988.371,1214.56 988.957,1214.56 989.544,1214.56 990.13,1214.56 990.717,1214.56 991.303,1214.56 991.889,1214.56 992.476,1214.56 993.062,1214.56 993.649,1214.56 994.235,1214.56 994.822,1214.56 995.408,1214.56 995.994,1214.56 996.581,1214.56 997.167,1214.56 997.754,1214.56 998.34,1214.56 998.926,1214.56 999.513,1214.56 1000.1,1214.56 1000.69,1214.56 1001.27,1214.56 1001.86,1214.56 1002.44,1214.56 1003.03,1214.56 1003.62,1214.56 1004.2,1214.56 1004.79,1214.56 1005.38,1214.56 1005.96,1214.56 1006.55,1214.56 1007.14,1214.56 1007.72,1214.56 1008.31,1214.56 1008.9,1214.56 1009.48,1214.56 1010.07,1214.56 1010.65,1214.56 1011.24,1214.56 1011.83,1214.56 1012.41,1214.56 1013,1214.56 1013.59,1214.56 1014.17,1214.56 1014.76,1214.56 1015.35,1214.56 1015.93,1214.56 1016.52,1214.56 1017.11,1214.56 1017.69,1214.56 1018.28,1214.56 1018.86,1214.56 1019.45,1214.56 1020.04,1214.56 1020.62,1214.56 1021.21,1214.56 1021.8,1214.56 1022.38,1214.56 1022.97,1214.56 1023.56,1214.56 1024.14,1214.56 1024.73,1214.56 1025.32,1214.56 1025.9,1214.56 1026.49,1214.56 1027.07,1214.56 1027.66,1214.56 1028.25,1214.56 1028.83,1214.56 1029.42,1214.56 1030.01,1214.56 1030.59,1214.56 1031.18,1214.56 1031.77,1214.56 1032.35,1214.56 1032.94,1214.56 1033.52,1214.56 1034.11,1214.56 1034.7,1214.56 1035.28,1214.56 1035.87,1214.56 1036.46,1214.56 1037.04,1214.56 1037.63,1214.56 1038.22,1214.56 1038.8,1214.56 1039.39,1214.56 1039.98,1214.56 1040.56,1214.56 1041.15,1214.56 1041.73,1214.56 1042.32,1214.56 1042.91,1214.56 1043.49,1214.56 1044.08,1214.56 1044.67,1214.56 1045.25,1214.56 1045.84,1214.56 1046.43,1214.56 1047.01,1214.56 1047.6,1214.56 1048.19,1214.56 1048.77,1214.56 1049.36,1214.56 1049.94,1214.56 1050.53,1214.56 1051.12,1214.56 1051.7,1214.56 1052.29,1214.56 1052.88,1214.56 1053.46,1214.56 1054.05,1214.56 1054.64,1214.56 1055.22,1214.56 1055.81,1214.56 1056.39,1214.56 1056.98,1214.56 1057.57,1214.56 1058.15,1214.56 1058.74,1214.56 1059.33,1214.56 1059.91,1214.56 1060.5,1214.56 1061.09,1214.56 1061.67,1214.56 1062.26,1214.56 1062.85,1214.56 1063.43,1214.56 1064.02,1214.56 1064.6,1214.56 1065.19,1214.56 1065.78,1214.56 1066.36,1214.56 1066.95,1214.56 1067.54,1214.56 1068.12,1214.56 1068.71,1214.56 1069.3,1214.56 1069.88,1214.56 1070.47,1214.56 1071.06,1214.56 1071.64,1214.56 1072.23,1214.56 1072.81,1214.56 1073.4,1214.56 1073.99,1214.56 1074.57,1214.56 1075.16,1214.56 1075.75,1214.56 1076.33,1214.56 1076.92,1214.56 1077.51,1214.56 1078.09,1214.56 1078.68,1214.56 1079.26,1214.56 1079.85,1214.56 1080.44,1214.56 1081.02,1214.56 1081.61,1214.56 1082.2,1214.56 1082.78,1214.56 1083.37,1214.56 1083.96,1214.56 1084.54,1214.56 1085.13,1214.56 1085.72,1214.56 1086.3,1214.56 1086.89,1214.56 1087.47,1214.56 1088.06,1214.56 1088.65,1214.56 1089.23,1214.56 1089.82,1214.56 1090.41,1214.56 1090.99,1214.56 1091.58,1214.56 1092.17,1214.56 1092.75,1214.56 1093.34,1214.56 1093.93,1214.56 1094.51,1214.56 1095.1,1214.56 1095.68,1214.56 1096.27,1214.56 1096.86,1214.56 1097.44,1214.56 1098.03,1214.56 1098.62,1214.56 1099.2,1214.56 1099.79,1214.56 1100.38,1214.56 1100.96,1214.56 1101.55,1214.56 1102.14,1214.56 1102.72,1214.56 1103.31,1214.56 1103.89,1214.56 1104.48,1214.56 1105.07,1214.56 1105.65,1214.56 1106.24,1214.56 1106.83,1214.56 1107.41,1214.56 1108,1214.56 1108.59,1214.56 1109.17,1214.56 1109.76,1214.56 1110.34,1214.56 1110.93,1214.56 1111.52,1214.56 1112.1,1214.56 1112.69,1214.56 1113.28,1214.56 1113.86,1214.56 1114.45,1214.56 1115.04,1214.56 1115.62,1214.56 1116.21,1214.56 1116.8,1214.56 1117.38,1214.56 1117.97,1214.56 1118.55,1214.56 1119.14,1214.56 1119.73,1214.56 1120.31,1214.56 1120.9,1214.56 1121.49,1214.56 1122.07,1214.56 1122.66,1214.56 1123.25,1214.56 1123.83,1214.56 1124.42,1214.56 1125.01,1214.56 1125.59,1214.56 1126.18,1214.56 1126.76,1214.56 1127.35,1214.56 1127.94,1214.56 1128.52,1214.56 1129.11,1214.56 1129.7,1214.56 1130.28,1214.56 1130.87,1214.56 1131.46,1214.56 1132.04,1214.56 1132.63,1214.56 1133.21,1214.56 1133.8,1214.56 1134.39,1214.56 1134.97,1214.56 1135.56,1214.56 1136.15,1214.56 1136.73,1214.56 1137.32,1214.56 1137.91,1214.56 1138.49,1214.56 1139.08,1214.56 1139.67,1214.56 1140.25,1214.56 1140.84,1214.56 1141.42,1214.56 1142.01,1214.56 1142.6,1214.56 1143.18,1214.56 1143.77,1214.56 1144.36,1214.56 1144.94,1214.56 1145.53,1214.56 1146.12,1214.56 1146.7,1214.56 1147.29,1214.56 1147.88,1214.56 1148.46,1214.56 1149.05,1214.56 1149.63,1214.56 1150.22,1214.56 1150.81,1214.56 1151.39,1214.56 1151.98,1214.56 1152.57,1214.56 1153.15,1214.56 1153.74,1214.56 1154.33,1214.56 1154.91,1214.56 1155.5,1214.56 1156.09,1214.56 1156.67,1214.56 1157.26,1214.56 1157.84,1214.56 1158.43,1214.56 1159.02,1214.56 1159.6,1214.56 1160.19,1214.56 1160.78,1214.56 1161.36,1214.56 1161.95,1214.56 1162.54,1214.56 1163.12,1214.56 1163.71,1214.56 1164.29,1214.56 1164.88,1214.56 1165.47,1214.56 1166.05,1214.56 1166.64,1214.56 1167.23,1214.56 1167.81,1214.56 1168.4,1214.56 1168.99,1214.56 1169.57,1214.56 1170.16,1214.56 1170.75,1214.56 1171.33,1214.56 1171.92,1214.56 1172.5,1214.56 1173.09,1214.56 1173.68,1214.56 1174.26,1214.56 1174.85,1214.56 1175.44,1214.56 1176.02,1214.56 1176.61,1214.56 1177.2,1214.56 1177.78,1214.56 1178.37,1214.56 1178.96,1214.56 1179.54,1214.56 1180.13,1214.56 1180.71,1214.56 1181.3,1214.56 1181.89,1214.56 1182.47,1214.56 1183.06,1214.56 1183.65,1214.56 1184.23,1214.56 1184.82,1214.56 1185.41,1214.56 1185.99,1214.56 1186.58,1214.56 1187.16,1214.56 1187.75,1214.56 1188.34,1214.56 1188.92,1214.56 1189.51,1214.56 1190.1,1214.56 1190.68,1214.56 1191.27,1214.56 1191.86,1214.56 1192.44,1214.56 1193.03,1214.56 1193.62,1214.56 1194.2,1214.56 1194.79,1214.56 1195.37,1214.56 1195.96,1214.56 1196.55,1214.56 1197.13,1214.56 1197.72,1214.56 1198.31,1214.56 1198.89,1214.56 1199.48,1214.56 1200.07,1214.56 1200.65,1214.56 1201.24,1214.56 1201.83,1214.56 1202.41,1214.56 1203,1214.56 1203.58,1214.56 1204.17,1214.56 1204.76,1214.56 1205.34,1214.56 1205.93,1214.56 1206.52,1214.56 1207.1,1214.56 1207.69,1214.56 1208.28,1214.56 1208.86,1214.56 1209.45,1214.56 1210.03,1214.56 1210.62,1214.56 1211.21,1214.56 1211.79,1214.56 1212.38,1214.56 1212.97,1214.56 1213.55,1214.56 1214.14,1214.56 1214.73,1214.56 1215.31,1214.56 1215.9,1214.56 1216.49,1214.56 1217.07,1214.56 1217.66,1214.56 1218.24,1214.56 1218.83,1214.56 1219.42,1214.56 1220,1214.56 1220.59,1214.56 1221.18,1214.56 1221.76,1214.56 1222.35,1214.56 1222.94,1214.56 1223.52,1214.56 1224.11,1214.56 1224.7,1214.56 1225.28,1214.56 1225.87,1214.56 1226.45,1214.56 1227.04,1214.56 1227.63,1214.56 1228.21,1214.56 1228.8,1214.56 1229.39,1214.56 1229.97,1214.56 1230.56,1214.56 1231.15,1214.56 1231.73,1214.56 1232.32,1214.56 1232.91,1214.56 1233.49,1214.56 1234.08,1214.56 1234.66,1214.56 1235.25,1214.56 1235.84,1214.56 1236.42,1214.56 1237.01,1214.56 1237.6,1214.56 1238.18,1214.56 1238.77,1214.56 1239.36,1214.56 1239.94,1214.56 1240.53,1214.56 1241.11,1214.56 1241.7,1214.56 1242.29,1214.56 1242.87,1214.56 1243.46,1214.56 1244.05,1214.56 1244.63,1214.56 1245.22,1214.56 1245.81,1214.56 1246.39,1214.56 1246.98,1214.56 1247.57,1214.56 1248.15,1214.56 1248.74,1214.56 1249.32,1214.56 1249.91,1214.56 1250.5,1214.56 1251.08,1214.56 1251.67,1214.56 1252.26,1214.56 1252.84,1214.56 1253.43,1214.56 1254.02,1214.56 1254.6,1214.56 1255.19,1214.56 1255.78,1214.56 1256.36,1214.56 1256.95,1214.56 1257.53,1214.56 1258.12,1214.56 1258.71,1214.56 1259.29,1214.56 1259.88,1214.56 1260.47,1214.56 1261.05,1214.56 1261.64,1214.56 1262.23,1214.56 1262.81,1214.56 1263.4,1214.56 1263.98,1214.56 1264.57,1214.56 1265.16,1214.56 1265.74,1214.56 1266.33,1214.56 1266.92,1214.56 1267.5,1214.56 1268.09,1214.56 1268.68,1214.56 1269.26,1214.56 1269.85,1214.56 1270.44,1214.56 1271.02,1214.56 1271.61,1214.56 1272.19,1214.56 1272.78,1214.56 1273.37,1214.56 1273.95,1214.56 1274.54,1214.56 1275.13,1214.56 1275.71,1214.56 1276.3,1214.56 1276.89,1214.56 1277.47,1214.56 1278.06,1214.56 1278.65,1214.56 1279.23,1214.56 1279.82,1214.56 1280.4,1214.56 1280.99,1214.56 1281.58,1214.56 1282.16,1214.56 1282.75,1214.56 1283.34,1214.56 1283.92,1214.56 1284.51,1214.56 1285.1,1214.56 1285.68,1214.56 1286.27,1214.56 1286.86,1214.56 1287.44,1214.56 1288.03,1214.56 1288.61,1214.56 1289.2,1214.56 1289.79,1214.56 1290.37,1214.56 1290.96,1214.56 1291.55,1214.56 1292.13,1214.56 1292.72,1214.56 1293.31,1214.56 1293.89,1214.56 1294.48,1214.56 1295.06,1214.56 1295.65,1214.56 1296.24,1214.56 1296.82,1214.56 1297.41,1214.56 1298,1214.56 1298.58,1214.56 1299.17,1214.56 1299.76,1214.56 1300.34,1214.56 1300.93,1214.56 1301.52,1214.56 1302.1,1214.56 1302.69,1214.56 1303.27,1214.56 1303.86,1214.56 1304.45,1214.56 1305.03,1214.56 1305.62,1214.56 1306.21,1214.56 1306.79,1214.56 1307.38,1214.56 1307.97,1214.56 1308.55,1214.56 1309.14,1214.56 1309.73,1214.56 1310.31,1214.56 1310.9,1214.56 1311.48,1214.56 1312.07,1214.56 1312.66,1214.56 1313.24,1214.56 1313.83,1214.56 1314.42,1214.56 1315,1214.56 1315.59,1214.56 1316.18,1214.56 1316.76,1214.56 1317.35,1214.56 1317.93,1214.56 1318.52,1214.56 1319.11,1214.56 1319.69,1214.56 1320.28,1214.56 1320.87,1214.56 1321.45,1214.56 1322.04,1214.56 1322.63,1214.56 1323.21,1214.56 1323.8,1214.56 1324.39,1214.56 1324.97,1214.56 1325.56,1214.56 1326.14,1214.56 1326.73,1214.56 1327.32,1214.56 1327.9,1214.56 1328.49,1214.56 1329.08,1214.56 1329.66,1214.56 1330.25,1214.56 1330.84,1214.56 1331.42,1214.56 1332.01,1214.56 1332.6,1214.56 1333.18,1214.56 1333.77,1214.56 1334.35,1214.56 1334.94,1214.56 1335.53,1214.56 1336.11,1214.56 1336.7,1214.56 1337.29,1214.56 1337.87,1214.56 1338.46,1214.56 1339.05,1214.56 1339.63,1214.56 1340.22,1214.56 1340.8,1214.56 1341.39,1214.56 1341.98,1214.56 1342.56,1214.56 1343.15,1214.56 1343.74,1214.56 1344.32,1214.56 1344.91,1214.56 1345.5,1214.56 1346.08,1214.56 1346.67,1214.56 1347.26,1214.56 1347.84,1214.56 1348.43,1214.56 1349.01,1214.56 1349.6,1214.56 1350.19,1214.56 1350.77,1214.56 1351.36,1214.56 1351.95,1214.56 1352.53,1214.56 1353.12,1214.56 1353.71,1214.56 1354.29,1214.56 1354.88,1214.56 1355.47,1214.56 1356.05,1214.56 1356.64,1214.56 1357.22,1214.56 1357.81,1214.56 1358.4,1214.56 1358.98,1214.56 1359.57,1214.56 1360.16,1214.56 1360.74,1214.56 1361.33,1214.56 1361.92,1214.56 1362.5,1214.56 1363.09,1214.56 1363.68,1214.56 1364.26,1214.56 1364.85,1214.56 1365.43,1214.56 1366.02,1214.56 1366.61,1214.56 1367.19,1214.56 1367.78,1214.56 1368.37,1214.56 1368.95,1214.56 1369.54,1214.56 1370.13,1214.56 1370.71,1214.56 1371.3,1214.56 1371.88,1214.56 1372.47,1214.56 1373.06,1214.56 1373.64,1214.56 1374.23,1214.56 1374.82,1214.56 1375.4,1214.56 1375.99,1214.56 1376.58,1214.56 1377.16,1214.56 1377.75,1214.56 1378.34,1214.56 1378.92,1214.56 1379.51,1214.56 1380.09,1214.56 1380.68,1214.56 1381.27,1214.56 1381.85,1214.56 1382.44,1214.56 1383.03,1214.56 1383.61,1214.56 1384.2,1214.56 1384.79,1214.56 1385.37,1214.56 1385.96,1214.56 1386.55,1214.56 1387.13,1214.56 1387.72,1214.56 1388.3,1214.56 1388.89,1214.56 1389.48,1214.56 1390.06,1214.56 1390.65,1214.56 1391.24,1214.56 1391.82,1214.56 1392.41,1214.56 1393,1214.56 1393.58,1214.56 1394.17,1214.56 1394.75,1214.56 1395.34,1214.56 1395.93,1214.56 1396.51,1214.56 1397.1,1214.56 1397.69,1214.56 1398.27,1214.56 1398.86,1214.56 1399.45,1214.56 1400.03,1214.56 1400.62,1214.56 1401.21,1214.56 1401.79,1214.56 1402.38,1214.56 1402.96,1214.56 1403.55,1214.56 1404.14,1214.56 1404.72,1214.56 1405.31,1214.56 1405.9,1214.56 1406.48,1214.56 1407.07,1214.56 1407.66,1214.56 1408.24,1214.56 1408.83,1214.56 1409.42,1214.56 1410,1214.56 1410.59,1214.56 1411.17,1214.56 1411.76,1214.56 1412.35,1214.56 1412.93,1214.56 1413.52,1214.56 1414.11,1214.56 1414.69,1214.56 1415.28,1214.56 1415.87,1214.56 1416.45,1214.56 1417.04,1214.56 1417.63,1214.56 1418.21,1214.56 1418.8,1214.56 1419.38,1214.56 1419.97,1214.56 1420.56,1214.56 1421.14,1214.56 1421.73,1214.56 1422.32,1214.56 1422.9,1214.56 1423.49,1214.56 1424.08,1214.56 1424.66,1214.56 1425.25,1214.56 1425.83,1214.56 1426.42,1214.56 1427.01,1214.56 1427.59,1214.56 1428.18,1214.56 1428.77,1214.56 1429.35,1214.56 1429.94,1214.56 1430.53,1214.56 1431.11,1214.56 1431.7,1214.56 1432.29,1214.56 1432.87,1214.56 1433.46,1214.56 1434.04,1214.56 1434.63,1214.56 1435.22,1214.56 1435.8,1214.56 1436.39,1214.56 1436.98,1214.56 1437.56,1214.56 1438.15,1214.56 1438.74,1214.56 1439.32,1214.56 1439.91,1214.56 1440.5,1214.56 1441.08,1214.56 1441.67,1214.56 1442.25,1214.56 1442.84,1214.56 1443.43,1214.56 1444.01,1214.56 1444.6,1214.56 1445.19,1214.56 1445.77,1214.56 1446.36,1214.56 1446.95,1214.56 1447.53,1214.56 1448.12,1214.56 1448.7,1214.56 1449.29,1214.56 1449.88,1214.56 1450.46,1214.56 1451.05,1214.56 1451.64,1214.56 1452.22,1214.56 1452.81,1214.56 1453.4,1214.56 1453.98,1214.56 1454.57,1214.56 1455.16,1214.56 1455.74,1214.56 1456.33,1214.56 1456.91,1214.56 1457.5,1214.56 1458.09,1214.56 1458.67,1214.56 1459.26,1214.56 1459.85,1214.56 1460.43,1214.56 1461.02,1214.56 1461.61,1214.56 1462.19,1214.56 1462.78,1214.56 1463.37,1214.56 1463.95,1214.56 1464.54,1214.56 1465.12,1214.56 1465.71,1214.56 1466.3,1214.56 1466.88,1214.56 1467.47,1214.56 1468.06,1214.56 1468.64,1214.56 1469.23,1214.56 1469.82,1214.56 1470.4,1214.56 1470.99,1214.56 1471.57,1214.56 1472.16,1214.56 1472.75,1214.56 1473.33,1214.56 1473.92,1214.56 1474.51,1214.56 1475.09,1214.56 1475.68,1214.56 1476.27,1214.56 1476.85,1214.56 1477.44,1214.56 1478.03,1214.56 1478.61,1214.56 1479.2,1214.56 1479.78,1214.56 1480.37,1214.56 1480.96,1214.56 1481.54,1214.56 1482.13,1214.56 1482.72,1214.56 1483.3,1214.56 1483.89,1214.56 1484.48,1214.56 1485.06,1214.56 1485.65,1214.56 1486.24,1214.56 1486.82,1214.56 1487.41,1214.56 1487.99,1214.56 1488.58,1214.56 1489.17,1214.56 1489.75,1214.56 1490.34,1214.56 1490.93,1214.56 1491.51,1214.56 1492.1,1214.56 1492.69,1214.56 1493.27,1214.56 1493.86,1214.56 1494.45,1214.56 1495.03,1214.56 1495.62,1214.56 1496.2,1214.56 1496.79,1214.56 1497.38,1214.56 1497.96,1214.56 1498.55,1214.56 1499.14,1214.56 1499.72,1214.56 1500.31,1214.56 1500.9,1214.56 1501.48,1214.56 1502.07,1214.56 1502.65,1214.56 1503.24,1214.56 1503.83,1214.56 1504.41,1214.56 1505,1214.56 1505.59,1214.56 1506.17,1214.56 1506.76,1214.56 1507.35,1214.56 1507.93,1214.56 1508.52,1214.56 1509.11,1214.56 1509.69,1214.56 1510.28,1214.56 1510.86,1214.56 1511.45,1214.56 1512.04,1214.56 1512.62,1214.56 1513.21,1214.56 1513.8,1214.56 1514.38,1214.56 1514.97,1214.56 1515.56,1214.56 1516.14,1214.56 1516.73,1214.56 1517.32,1214.56 1517.9,1214.56 1518.49,1214.56 1519.07,1214.56 1519.66,1214.56 1520.25,1214.56 1520.83,1214.56 1521.42,1214.56 1522.01,1214.56 1522.59,1214.56 1523.18,1214.56 1523.77,1214.56 1524.35,1214.56 1524.94,1214.56 1525.52,1214.56 1526.11,1214.56 1526.7,1214.56 1527.28,1214.56 1527.87,1214.56 1528.46,1214.56 1529.04,1214.56 1529.63,1214.56 1530.22,1214.56 1530.8,1214.56 1531.39,1214.56 1531.98,1214.56 1532.56,1214.56 1533.15,1214.56 1533.73,1214.56 1534.32,1214.56 1534.91,1214.56 1535.49,1214.56 1536.08,1214.56 1536.67,1214.56 1537.25,1214.56 1537.84,1214.56 1538.43,1214.56 1539.01,1214.56 1539.6,1214.56 1540.19,1214.56 1540.77,1214.56 1541.36,1214.56 1541.94,1214.56 1542.53,1214.56 1543.12,1214.56 1543.7,1214.56 1544.29,1214.56 1544.88,1214.56 1545.46,1214.56 1546.05,1214.56 1546.64,1214.56 1547.22,1214.56 1547.81,1214.56 1548.4,1214.56 1548.98,1214.56 1549.57,1214.56 1550.15,1214.56 1550.74,1214.56 1551.33,1214.56 1551.91,1214.56 1552.5,1214.56 1553.09,1214.56 1553.67,1214.56 1554.26,1214.56 1554.85,1214.56 1555.43,1214.56 1556.02,1214.56 1556.6,1214.56 1557.19,1214.56 1557.78,1214.56 1558.36,1214.56 1558.95,1214.56 1559.54,1214.56 1560.12,1214.56 1560.71,1214.56 1561.3,1214.56 1561.88,1214.56 1562.47,1214.56 1563.06,1214.56 1563.64,1214.56 1564.23,1214.56 1564.81,1214.56 1565.4,1214.56 1565.99,1214.56 1566.57,1214.56 1567.16,1214.56 1567.75,1214.56 1568.33,1214.56 1568.92,1214.56 1569.51,1214.56 1570.09,1214.56 1570.68,1214.56 1571.27,1214.56 1571.85,1214.56 1572.44,1214.56 1573.02,1214.56 1573.61,1214.56 1574.2,1214.56 1574.78,1214.56 1575.37,1214.56 1575.96,1214.56 1576.54,1214.56 1577.13,1214.56 1577.72,1214.56 1578.3,1214.56 1578.89,1214.56 1579.47,1214.56 1580.06,1214.56 1580.65,1214.56 1581.23,1214.56 1581.82,1214.56 1582.41,1214.56 1582.99,1214.56 1583.58,1214.56 1584.17,1214.56 1584.75,1214.56 1585.34,1214.56 1585.93,1214.56 1586.51,1214.56 1587.1,1214.56 1587.68,1214.56 1588.27,1214.56 1588.86,1214.56 1589.44,1214.56 1590.03,1214.56 1590.62,1214.56 1591.2,1214.56 1591.79,1214.56 1592.38,1214.56 1592.96,1214.56 1593.55,1214.56 1594.14,1214.56 1594.72,1214.56 1595.31,1214.56 1595.89,1214.56 1596.48,1214.56 1597.07,1214.56 1597.65,1214.56 1598.24,1214.56 1598.83,1214.56 1599.41,1214.56 1600,1214.56 1600.59,1214.56 1601.17,1214.56 1601.76,1214.56 1602.34,1214.56 1602.93,1214.56 1603.52,1214.56 1604.1,1214.56 1604.69,1214.56 1605.28,1214.56 1605.86,1214.56 1606.45,1214.56 1607.04,1214.56 1607.62,1214.56 1608.21,1214.56 1608.8,1214.56 1609.38,1214.56 1609.97,1214.56 1610.55,1214.56 1611.14,1214.56 1611.73,1214.56 1612.31,1214.56 1612.9,1214.56 1613.49,1214.56 1614.07,1214.56 1614.66,1214.56 1615.25,1214.56 1615.83,1214.56 1616.42,1214.56 1617.01,1214.56 1617.59,1214.56 1618.18,1214.56 1618.76,1214.56 1619.35,1214.56 1619.94,1214.56 1620.52,1214.56 1621.11,1214.56 1621.7,1214.56 1622.28,1214.56 1622.87,1214.56 1623.46,1214.56 1624.04,1214.56 1624.63,1214.56 1625.22,1214.56 1625.8,1214.56 1626.39,1214.56 1626.97,1214.56 1627.56,1214.56 1628.15,1214.56 1628.73,1214.56 1629.32,1214.56 1629.91,1214.56 1630.49,1214.56 1631.08,1214.56 1631.67,1214.56 1632.25,1214.56 1632.84,1214.56 1633.42,1214.56 1634.01,1214.56 1634.6,1214.56 1635.18,1214.56 1635.77,1214.56 1636.36,1214.56 1636.94,1214.56 1637.53,1214.56 1638.12,1214.56 1638.7,1214.56 1639.29,1214.56 1639.88,1214.56 1640.46,1214.56 1641.05,1214.56 1641.63,1214.56 1642.22,1214.56 1642.81,1214.56 1643.39,1214.56 1643.98,1214.56 1644.57,1214.56 1645.15,1214.56 1645.74,1214.56 1646.33,1214.56 1646.91,1214.56 1647.5,1214.56 1648.09,1214.56 1648.67,1214.56 1649.26,1214.56 1649.84,1214.56 1650.43,1214.56 1651.02,1214.56 1651.6,1214.56 1652.19,1214.56 1652.78,1214.56 1653.36,1214.56 1653.95,1214.56 1654.54,1214.56 1655.12,1214.56 1655.71,1214.56 1656.29,1214.56 1656.88,1214.56 1657.47,1214.56 1658.05,1214.56 1658.64,1214.56 1659.23,1214.56 1659.81,1214.56 1660.4,1214.56 1660.99,1214.56 1661.57,1214.56 1662.16,1214.56 1662.75,1214.56 1663.33,1214.56 1663.92,1214.56 1664.5,1214.56 1665.09,1214.56 1665.68,1214.56 1666.26,1214.56 1666.85,1214.56 1667.44,1214.56 1668.02,1214.56 1668.61,1214.56 1669.2,1214.56 1669.78,1214.56 1670.37,1214.56 1670.96,1214.56 1671.54,1214.56 1672.13,1214.56 1672.71,1214.56 1673.3,1214.56 1673.89,1214.56 1674.47,1214.56 1675.06,1214.56 1675.65,1214.56 1676.23,1214.56 1676.82,1214.56 1677.41,1214.56 1677.99,1214.56 1678.58,1214.56 1679.17,1214.56 1679.75,1214.56 1680.34,1214.56 1680.92,1214.56 1681.51,1214.56 1682.1,1214.56 1682.68,1214.56 1683.27,1214.56 1683.86,1214.56 1684.44,1214.56 1685.03,1214.56 1685.62,1214.56 1686.2,1214.56 1686.79,1214.56 1687.37,1214.56 1687.96,1214.56 1688.55,1214.56 1689.13,1214.56 1689.72,1214.56 1690.31,1214.56 1690.89,1214.56 1691.48,1214.56 1692.07,1214.56 1692.65,1214.56 1693.24,1214.56 1693.83,1214.56 1694.41,1214.56 1695,1214.56 1695.58,1214.56 1696.17,1214.56 1696.76,1214.56 1697.34,1214.56 1697.93,1214.56 1698.52,1214.56 1699.1,1214.56 1699.69,1214.56 1700.28,1214.56 1700.86,1214.56 1701.45,1214.56 1702.04,1214.56 1702.62,1214.56 1703.21,1214.56 1703.79,1214.56 1704.38,1214.56 1704.97,1214.56 1705.55,1214.56 1706.14,1214.56 1706.73,1214.56 1707.31,1214.56 1707.9,1214.56 1708.49,1214.56 1709.07,1214.56 1709.66,1214.56 1710.24,1214.56 1710.83,1214.56 1711.42,1214.56 1712,1214.56 1712.59,1214.56 1713.18,1214.56 1713.76,1214.56 1714.35,1214.56 1714.94,1214.56 1715.52,1214.56 1716.11,1214.56 1716.7,1214.56 1717.28,1214.56 1717.87,1214.56 1718.45,1214.56 1719.04,1214.56 1719.63,1214.56 1720.21,1214.56 1720.8,1214.56 1721.39,1214.56 1721.97,1214.56 1722.56,1214.56 1723.15,1214.56 1723.73,1214.56 1724.32,1214.56 1724.91,1214.56 1725.49,1214.56 1726.08,1214.56 1726.66,1214.56 1727.25,1214.56 1727.84,1214.56 1728.42,1214.56 1729.01,1214.56 1729.6,1214.56 1730.18,1214.56 1730.77,1214.56 1731.36,1214.56 1731.94,1214.56 1732.53,1214.56 1733.11,1214.56 1733.7,1214.56 1734.29,1214.56 1734.87,1214.56 1735.46,1214.56 1736.05,1214.56 1736.63,1214.56 1737.22,1214.56 1737.81,1214.56 1738.39,1214.56 1738.98,1214.56 1739.57,1214.56 1740.15,1214.56 1740.74,1214.56 1741.32,1214.56 1741.91,1214.56 1742.5,1214.56 1743.08,1214.56 1743.67,1214.56 1744.26,1214.56 1744.84,1214.56 1745.43,1214.56 1746.02,1214.56 1746.6,1214.56 1747.19,1214.56 1747.78,1214.56 1748.36,1214.56 1748.95,1214.56 1749.53,1214.56 1750.12,1214.56 1750.71,1214.56 1751.29,1214.56 1751.88,1214.56 1752.47,1214.56 1753.05,1214.56 1753.64,1214.56 1754.23,1214.56 1754.81,1214.56 1755.4,1214.56 1755.99,1214.56 1756.57,1214.56 1757.16,1214.56 1757.74,1214.56 1758.33,1214.56 1758.92,1214.56 1759.5,1214.56 1760.09,1214.56 1760.68,1214.56 1761.26,1214.56 1761.85,1214.56 1762.44,1214.56 1763.02,1214.56 1763.61,1214.56 1764.19,1214.56 1764.78,1214.56 1765.37,1214.56 1765.95,1214.56 1766.54,1214.56 1767.13,1214.56 1767.71,1214.56 1768.3,1214.56 1768.89,1214.56 1769.47,1214.56 1770.06,1214.56 1770.65,1214.56 1771.23,1214.56 1771.82,1214.56 1772.4,1214.56 1772.99,1214.56 1773.58,1214.56 1774.16,1214.56 1774.75,1214.56 1775.34,1214.56 1775.92,1214.56 1776.51,1214.56 1777.1,1214.56 1777.68,1214.56 1778.27,1214.56 1778.86,1214.56 1779.44,1214.56 1780.03,1214.56 1780.61,1214.56 1781.2,1214.56 1781.79,1214.56 1782.37,1214.56 1782.96,1214.56 1783.55,1214.56 1784.13,1214.56 1784.72,1214.56 1785.31,1214.56 1785.89,1214.56 1786.48,1214.56 1787.06,1214.56 1787.65,1214.56 1788.24,1214.56 1788.82,1214.56 1789.41,1214.56 1790,1214.56 1790.58,1214.56 1791.17,1214.56 1791.76,1214.56 1792.34,1214.56 1792.93,1214.56 1793.52,1214.56 1794.1,1214.56 1794.69,1214.56 1795.27,1214.56 1795.86,1214.56 1796.45,1214.56 1797.03,1214.56 1797.62,1214.56 1798.21,1214.56 1798.79,1214.56 1799.38,1214.56 1799.97,1214.56 1800.55,1214.56 1801.14,1214.56 1801.73,1214.56 1802.31,1214.56 1802.9,1214.56 1803.48,1214.56 1804.07,1214.56 1804.66,1214.56 1805.24,1214.56 1805.83,1214.56 1806.42,1214.56 1807,1214.56 1807.59,1214.56 1808.18,1214.56 1808.76,1214.56 1809.35,1214.56 1809.94,1214.56 1810.52,1214.56 1811.11,1214.56 1811.69,1214.56 1812.28,1214.56 1812.87,1214.56 1813.45,1214.56 1814.04,1214.56 1814.63,1214.56 1815.21,1214.56 1815.8,1214.56 1816.39,1214.56 1816.97,1214.56 1817.56,1214.56 1818.14,1214.56 1818.73,1214.56 1819.32,1214.56 1819.9,1214.56 1820.49,1214.56 1821.08,1214.56 1821.66,1214.56 1822.25,1214.56 1822.84,1214.56 1823.42,1214.56 1824.01,1214.56 1824.6,1214.56 1825.18,1214.56 1825.77,1214.56 1826.35,1214.56 1826.94,1214.56 1827.53,1214.56 1828.11,1214.56 1828.7,1214.56 1829.29,1214.56 1829.87,1214.56 1830.46,1214.56 1831.05,1214.56 1831.63,1214.56 1832.22,1214.56 1832.81,1214.56 1833.39,1214.56 1833.98,1214.56 1834.56,1214.56 1835.15,1214.56 1835.74,1214.56 1836.32,1214.56 1836.91,1214.56 1837.5,1214.56 1838.08,1214.56 1838.67,1214.56 1839.26,1214.56 1839.84,1214.56 1840.43,1214.56 1841.01,1214.56 1841.6,1214.56 1842.19,1214.56 1842.77,1214.56 1843.36,1214.56 1843.95,1214.56 1844.53,1214.56 1845.12,1214.56 1845.71,1214.56 1846.29,1214.56 1846.88,1214.56 1847.47,1214.56 1848.05,1214.56 1848.64,1214.56 1849.22,1214.56 1849.81,1214.56 1850.4,1214.56 1850.98,1214.56 1851.57,1214.56 1852.16,1214.56 1852.74,1214.56 1853.33,1214.56 1853.92,1214.56 1854.5,1214.56 1855.09,1214.56 1855.68,1214.56 1856.26,1214.56 1856.85,1214.56 1857.43,1214.56 1858.02,1214.56 1858.61,1214.56 1859.19,1214.56 1859.78,1214.56 1860.37,1214.56 1860.95,1214.56 1861.54,1214.56 1862.13,1214.56 1862.71,1214.56 1863.3,1214.56 1863.88,1214.56 1864.47,1214.56 1865.06,1214.56 1865.64,1214.56 1866.23,1214.56 1866.82,1214.56 1867.4,1214.56 1867.99,1214.56 1868.58,1214.56 1869.16,1214.56 1869.75,1214.56 1870.34,1214.56 1870.92,1214.56 1871.51,1214.56 1872.09,1214.56 1872.68,1214.56 1873.27,1214.56 1873.85,1214.56 1874.44,1214.56 1875.03,1214.56 1875.61,1214.56 1876.2,1214.56 1876.79,1214.56 1877.37,1214.56 1877.96,1214.56 1878.55,1214.56 1879.13,1214.56 1879.72,1214.56 1880.3,1214.56 1880.89,1214.56 1881.48,1214.56 1882.06,1214.56 1882.65,1214.56 1883.24,1214.56 1883.82,1214.56 1884.41,1214.56 1885,1214.56 1885.58,1214.56 1886.17,1214.56 1886.76,1214.56 1887.34,1214.56 1887.93,1214.56 1888.51,1214.56 1889.1,1214.56 1889.69,1214.56 1890.27,1214.56 1890.86,1214.56 1891.45,1214.56 1892.03,1214.56 1892.62,1214.56 1893.21,1214.56 1893.79,1214.56 1894.38,1214.56 1894.96,1214.56 1895.55,1214.56 1896.14,1214.56 1896.72,1214.56 1897.31,1214.56 1897.9,1214.56 1898.48,1214.56 1899.07,1214.56 1899.66,1214.56 1900.24,1214.56 1900.83,1214.56 1901.42,1214.56 1902,1214.56 1902.59,1214.56 1903.17,1214.56 1903.76,1214.56 1904.35,1214.56 1904.93,1214.56 1905.52,1214.56 1906.11,1214.56 1906.69,1214.56 1907.28,1214.56 1907.87,1214.56 1908.45,1214.56 1909.04,1214.56 1909.63,1214.56 1910.21,1214.56 1910.8,1214.56 1911.38,1214.56 1911.97,1214.56 1912.56,1214.56 1913.14,1214.56 1913.73,1214.56 1914.32,1214.56 1914.9,1214.56 1915.49,1214.56 1916.08,1214.56 1916.66,1214.56 1917.25,1214.56 1917.83,1214.56 1918.42,1214.56 1919.01,1214.56 1919.59,1214.56 1920.18,1214.56 1920.77,1214.56 1921.35,1214.56 1921.94,1214.56 1922.53,1214.56 1923.11,1214.56 1923.7,1214.56 1924.29,1214.56 1924.87,1214.56 1925.46,1214.56 1926.04,1214.56 1926.63,1214.56 1927.22,1214.56 1927.8,1214.56 1928.39,1214.56 1928.98,1214.56 1929.56,1214.56 1930.15,1214.56 1930.74,1214.56 1931.32,1214.56 1931.91,1214.56 1932.5,1214.56 1933.08,1214.56 1933.67,1214.56 1934.25,1214.56 1934.84,1214.56 1935.43,1214.56 1936.01,1214.56 1936.6,1214.56 1937.19,1214.56 1937.77,1214.56 1938.36,1214.56 1938.95,1214.56 1939.53,1214.56 1940.12,1214.56 1940.71,1214.56 1941.29,1214.56 1941.88,1214.56 1942.46,1214.56 1943.05,1214.56 1943.64,1214.56 1944.22,1214.56 1944.81,1214.56 1945.4,1214.56 1945.98,1214.56 1946.57,1214.56 1947.16,1214.56 1947.74,1214.56 1948.33,1214.56 1948.91,1214.56 1949.5,1214.56 1950.09,1214.56 1950.67,1214.56 1951.26,1214.56 1951.85,1214.56 1952.43,1214.56 1953.02,1214.56 1953.61,1214.56 1954.19,1214.56 1954.78,1214.56 1955.37,1214.56 1955.95,1214.56 1956.54,1214.56 1957.12,1214.56 1957.71,1214.56 1958.3,1214.56 1958.88,1214.56 1959.47,1214.56 1960.06,1214.56 1960.64,1214.56 1961.23,1214.56 1961.82,1214.56 1962.4,1214.56 1962.99,1214.56 1963.58,1214.56 1964.16,1214.56 1964.75,1214.56 1965.33,1214.56 1965.92,1214.56 1966.51,1214.56 1967.09,1214.56 1967.68,1214.56 1968.27,1214.56 1968.85,1214.56 1969.44,1214.56 1970.03,1214.56 1970.61,1214.56 1971.2,1214.56 1971.78,1214.56 1972.37,1214.56 1972.96,1214.56 1973.54,1214.56 1974.13,1214.56 1974.72,1214.56 1975.3,1214.56 1975.89,1214.56 1976.48,1214.56 1977.06,1214.56 1977.65,1214.56 1978.24,1214.56 1978.82,1214.56 1979.41,1214.56 1979.99,1214.56 1980.58,1214.56 1981.17,1214.56 1981.75,1214.56 1982.34,1214.56 1982.93,1214.56 1983.51,1214.56 1984.1,1214.56 1984.69,1214.56 1985.27,1214.56 1985.86,1214.56 1986.45,1214.56 1987.03,1214.56 1987.62,1214.56 1988.2,1214.56 1988.79,1214.56 1989.38,1214.56 1989.96,1214.56 1990.55,1214.56 1991.14,1214.56 1991.72,1214.56 1992.31,1214.56 1992.9,1214.56 1993.48,1214.56 1994.07,1214.56 1994.65,1214.56 1995.24,1214.56 1995.83,1214.56 1996.41,1214.56 1997,1214.56 1997.59,1214.56 1998.17,1214.56 1998.76,1214.56 1999.35,1214.56 1999.93,1214.56 2000.52,1214.56 2001.11,1214.56 2001.69,1214.56 2002.28,1214.56 2002.86,1214.56 2003.45,1214.56 2004.04,1214.56 2004.62,1214.56 2005.21,1214.56 2005.8,1214.56 2006.38,1214.56 2006.97,1214.56 2007.56,1214.56 2008.14,1214.56 2008.73,1214.56 2009.32,1214.56 2009.9,1214.56 2010.49,1214.56 2011.07,1214.56 2011.66,1214.56 2012.25,1214.56 2012.83,1214.56 2013.42,1214.56 2014.01,1214.56 2014.59,1214.56 2015.18,1214.56 2015.77,1214.56 2016.35,1214.56 2016.94,1214.56 2017.53,1214.56 2018.11,1214.56 2018.7,1214.56 2019.28,1214.56 2019.87,1214.56 2020.46,1214.56 2021.04,1214.56 2021.63,1214.56 2022.22,1214.56 2022.8,1214.56 2023.39,1214.56 2023.98,1214.56 2024.56,1214.56 2025.15,1214.56 2025.73,1214.56 2026.32,1214.56 2026.91,1214.56 2027.49,1214.56 2028.08,1214.56 2028.67,1214.56 2029.25,1214.56 2029.84,1214.56 2030.43,1214.56 2031.01,1214.56 2031.6,1214.56 2032.19,1214.56 2032.77,1214.56 2033.36,1214.56 2033.94,1214.56 2034.53,1214.56 2035.12,1214.56 2035.7,1214.56 2036.29,1214.56 2036.88,1214.56 2037.46,1214.56 2038.05,1214.56 2038.64,1214.56 2039.22,1214.56 2039.81,1214.56 2040.4,1214.56 2040.98,1214.56 2041.57,1214.56 2042.15,1214.56 2042.74,1214.56 2043.33,1214.56 2043.91,1214.56 2044.5,1214.56 2045.09,1214.56 2045.67,1214.56 2046.26,1214.56 2046.85,1214.56 2047.43,1214.56 2048.02,1214.56 2048.6,1214.56 2049.19,1214.56 2049.78,1214.56 2050.36,1214.56 2050.95,1214.56 2051.54,1214.56 2052.12,1214.56 2052.71,1214.56 2053.3,1214.56 2053.88,1214.56 2054.47,1214.56 2055.06,1214.56 2055.64,1214.56 2056.23,1214.56 2056.81,1214.56 2057.4,1214.56 2057.99,1214.56 2058.57,1214.56 2059.16,1214.56 2059.75,1214.56 2060.33,1214.56 2060.92,1214.56 2061.51,1214.56 2062.09,1214.56 2062.68,1214.56 2063.27,1214.56 2063.85,1214.56 2064.44,1214.56 2065.02,1214.56 2065.61,1214.56 2066.2,1214.56 2066.78,1214.56 2067.37,1214.56 2067.96,1214.56 2068.54,1214.56 2069.13,1214.56 2069.72,1214.56 2070.3,1214.56 2070.89,1214.56 2071.48,1214.56 2072.06,1214.56 2072.65,1214.56 2073.23,1214.56 2073.82,1214.56 2074.41,1214.56 2074.99,1214.56 2075.58,1214.56 2076.17,1214.56 2076.75,1214.56 2077.34,1214.56 2077.93,1214.56 2078.51,1214.56 2079.1,1214.56 2079.68,1214.56 2080.27,1214.56 2080.86,1214.56 2081.44,1214.56 2082.03,1214.56 2082.62,1214.56 2083.2,1214.56 2083.79,1214.56 2084.38,1214.56 2084.96,1214.56 2085.55,1214.56 2086.14,1214.56 2086.72,1214.56 2087.31,1214.56 2087.89,1214.56 2088.48,1214.56 2089.07,1214.56 2089.65,1214.56 2090.24,1214.56 2090.83,1214.56 2091.41,1214.56 2092,1214.56 2092.59,1214.56 2093.17,1214.56 2093.76,1214.56 2094.35,1214.56 2094.93,1214.56 2095.52,1214.56 2096.1,1214.56 2096.69,1214.56 2097.28,1214.56 2097.86,1214.56 2098.45,1214.56 2099.04,1214.56 2099.62,1214.56 2100.21,1214.56 2100.8,1214.56 2101.38,1214.56 2101.97,1214.56 2102.55,1214.56 2103.14,1214.56 2103.73,1214.56 2104.31,1214.56 2104.9,1214.56 2105.49,1214.56 2106.07,1214.56 2106.66,1214.56 2107.25,1214.56 2107.83,1214.56 2108.42,1214.56 2109.01,1214.56 2109.59,1214.56 2110.18,1214.56 2110.76,1214.56 2111.35,1214.56 2111.94,1214.56 2112.52,1214.56 2113.11,1214.56 2113.7,1214.56 2114.28,1214.56 2114.87,1214.56 2115.46,1214.56 2116.04,1214.56 2116.63,1214.56 2117.22,1214.56 2117.8,1214.56 2118.39,1214.56 2118.97,1214.56 2119.56,1214.56 2120.15,1214.56 2120.73,1214.56 2121.32,1214.56 2121.91,1214.56 2122.49,1214.56 2123.08,1214.56 2123.67,1214.56 2124.25,1214.56 2124.84,1214.56 2125.42,1214.56 2126.01,1214.56 2126.6,1214.56 2127.18,1214.56 2127.77,1214.56 2128.36,1214.56 2128.94,1214.56 2129.53,1214.56 2130.12,1214.56 2130.7,1214.56 2131.29,1214.56 2131.88,1214.56 2132.46,1214.56 2133.05,1214.56 2133.63,1214.56 2134.22,1214.56 2134.81,1214.56 2135.39,1214.56 2135.98,1214.56 2136.57,1214.56 2137.15,1214.56 2137.74,1214.56 2138.33,1214.56 2138.91,1214.56 2139.5,1214.56 2140.09,1214.56 2140.67,1214.56 2141.26,1214.56 2141.84,1214.56 2142.43,1214.56 2143.02,1214.56 2143.6,1214.56 2144.19,1214.56 2144.78,1214.56 2145.36,1214.56 2145.95,1214.56 2146.54,1214.56 2147.12,1214.56 2147.71,1214.56 2148.3,1214.56 2148.88,1214.56 2149.47,1214.56 2150.05,1214.56 2150.64,1214.56 2151.23,1214.56 2151.81,1214.56 2152.4,1214.56 2152.99,1214.56 2153.57,1214.56 2154.16,1214.56 2154.75,1214.56 2155.33,1214.56 2155.92,1214.56 2156.5,1214.56 2157.09,1214.56 2157.68,1214.56 2158.26,1214.56 \"/>\n<path clip-path=\"url(#clip792)\" d=\"M986.025 1214.29 L986.612 1214.29 L987.198 1214.29 L987.785 1214.29 L988.371 1214.29 L988.957 1214.29 L989.544 1214.29 L990.13 1214.29 L990.717 1214.29 L991.303 1214.29 L991.889 1214.29 L992.476 1214.29 L993.062 1214.29 L993.649 1214.29 L994.235 1214.29 L994.822 1214.29 L995.408 1214.29 L995.994 1214.29 L996.581 1214.29 L997.167 1214.29 L997.754 1214.29 L998.34 1214.29 L998.926 1214.29 L999.513 1214.29 L1000.1 1214.29 L1000.69 1214.29 L1001.27 1214.29 L1001.86 1214.29 L1002.44 1214.29 L1003.03 1214.29 L1003.62 1214.29 L1004.2 1214.29 L1004.79 1214.29 L1005.38 1214.29 L1005.96 1214.29 L1006.55 1214.29 L1007.14 1214.29 L1007.72 1214.29 L1008.31 1214.29 L1008.9 1214.29 L1009.48 1214.29 L1010.07 1214.29 L1010.65 1214.29 L1011.24 1214.29 L1011.83 1214.29 L1012.41 1214.29 L1013 1214.29 L1013.59 1214.29 L1014.17 1214.29 L1014.76 1214.29 L1015.35 1214.29 L1015.93 1214.29 L1016.52 1214.29 L1017.11 1214.29 L1017.69 1214.29 L1018.28 1214.29 L1018.86 1214.29 L1019.45 1214.29 L1020.04 1214.29 L1020.62 1214.29 L1021.21 1214.29 L1021.8 1214.29 L1022.38 1214.29 L1022.97 1214.29 L1023.56 1214.29 L1024.14 1214.29 L1024.73 1214.29 L1025.32 1214.29 L1025.9 1214.29 L1026.49 1214.29 L1027.07 1214.29 L1027.66 1214.29 L1028.25 1214.29 L1028.83 1214.29 L1029.42 1214.29 L1030.01 1214.29 L1030.59 1214.29 L1031.18 1214.29 L1031.77 1214.29 L1032.35 1214.29 L1032.94 1214.29 L1033.52 1214.29 L1034.11 1214.29 L1034.7 1214.29 L1035.28 1214.29 L1035.87 1214.29 L1036.46 1214.29 L1037.04 1214.29 L1037.63 1214.29 L1038.22 1214.29 L1038.8 1214.29 L1039.39 1214.29 L1039.98 1214.29 L1040.56 1214.29 L1041.15 1214.29 L1041.73 1214.29 L1042.32 1214.29 L1042.91 1214.29 L1043.49 1214.29 L1044.08 1214.29 L1044.67 1214.29 L1045.25 1214.29 L1045.84 1214.29 L1046.43 1214.29 L1047.01 1214.29 L1047.6 1214.29 L1048.19 1214.29 L1048.77 1214.29 L1049.36 1214.29 L1049.94 1214.29 L1050.53 1214.29 L1051.12 1214.29 L1051.7 1214.29 L1052.29 1214.29 L1052.88 1214.29 L1053.46 1214.29 L1054.05 1214.29 L1054.64 1214.29 L1055.22 1214.29 L1055.81 1214.29 L1056.39 1214.29 L1056.98 1214.29 L1057.57 1214.29 L1058.15 1214.29 L1058.74 1214.29 L1059.33 1214.29 L1059.91 1214.29 L1060.5 1214.29 L1061.09 1214.29 L1061.67 1214.29 L1062.26 1214.29 L1062.85 1214.29 L1063.43 1214.29 L1064.02 1214.29 L1064.6 1214.29 L1065.19 1214.29 L1065.78 1214.29 L1066.36 1214.29 L1066.95 1214.29 L1067.54 1214.29 L1068.12 1214.29 L1068.71 1214.29 L1069.3 1214.29 L1069.88 1214.29 L1070.47 1214.29 L1071.06 1214.29 L1071.64 1214.29 L1072.23 1214.29 L1072.81 1214.29 L1073.4 1214.29 L1073.99 1214.29 L1074.57 1214.29 L1075.16 1214.29 L1075.75 1214.29 L1076.33 1214.29 L1076.92 1214.29 L1077.51 1214.29 L1078.09 1214.29 L1078.68 1214.29 L1079.26 1214.29 L1079.85 1214.29 L1080.44 1214.29 L1081.02 1214.29 L1081.61 1214.29 L1082.2 1214.29 L1082.78 1214.29 L1083.37 1214.29 L1083.96 1214.29 L1084.54 1214.29 L1085.13 1214.29 L1085.72 1214.29 L1086.3 1214.29 L1086.89 1214.29 L1087.47 1214.29 L1088.06 1214.29 L1088.65 1214.29 L1089.23 1214.29 L1089.82 1214.29 L1090.41 1214.29 L1090.99 1214.29 L1091.58 1214.29 L1092.17 1214.29 L1092.75 1214.29 L1093.34 1214.29 L1093.93 1214.29 L1094.51 1214.29 L1095.1 1214.29 L1095.68 1214.29 L1096.27 1214.29 L1096.86 1214.29 L1097.44 1214.29 L1098.03 1214.29 L1098.62 1214.29 L1099.2 1214.29 L1099.79 1214.29 L1100.38 1214.29 L1100.96 1214.29 L1101.55 1214.29 L1102.14 1214.29 L1102.72 1214.29 L1103.31 1214.29 L1103.89 1214.29 L1104.48 1214.29 L1105.07 1214.29 L1105.65 1214.29 L1106.24 1214.29 L1106.83 1214.29 L1107.41 1214.29 L1108 1214.29 L1108.59 1214.29 L1109.17 1214.29 L1109.76 1214.29 L1110.34 1214.29 L1110.93 1214.29 L1111.52 1214.29 L1112.1 1214.29 L1112.69 1214.29 L1113.28 1214.29 L1113.86 1214.29 L1114.45 1214.29 L1115.04 1214.29 L1115.62 1214.29 L1116.21 1214.29 L1116.8 1214.29 L1117.38 1214.29 L1117.97 1214.29 L1118.55 1214.29 L1119.14 1214.29 L1119.73 1214.29 L1120.31 1214.29 L1120.9 1214.29 L1121.49 1214.29 L1122.07 1214.29 L1122.66 1214.29 L1123.25 1214.29 L1123.83 1214.29 L1124.42 1214.29 L1125.01 1214.29 L1125.59 1214.29 L1126.18 1214.29 L1126.76 1214.29 L1127.35 1214.29 L1127.94 1214.29 L1128.52 1214.29 L1129.11 1214.29 L1129.7 1214.29 L1130.28 1214.29 L1130.87 1214.29 L1131.46 1214.29 L1132.04 1214.29 L1132.63 1214.29 L1133.21 1214.29 L1133.8 1214.29 L1134.39 1214.29 L1134.97 1214.29 L1135.56 1214.29 L1136.15 1214.29 L1136.73 1214.29 L1137.32 1214.29 L1137.91 1214.29 L1138.49 1214.29 L1139.08 1214.29 L1139.67 1214.29 L1140.25 1214.29 L1140.84 1214.29 L1141.42 1214.29 L1142.01 1214.29 L1142.6 1214.29 L1143.18 1214.29 L1143.77 1214.29 L1144.36 1214.29 L1144.94 1214.29 L1145.53 1214.29 L1146.12 1214.29 L1146.7 1214.29 L1147.29 1214.29 L1147.88 1214.29 L1148.46 1214.29 L1149.05 1214.29 L1149.63 1214.29 L1150.22 1214.29 L1150.81 1214.29 L1151.39 1214.29 L1151.98 1214.29 L1152.57 1214.29 L1153.15 1214.29 L1153.74 1214.29 L1154.33 1214.29 L1154.91 1214.29 L1155.5 1214.29 L1156.09 1214.29 L1156.67 1214.29 L1157.26 1214.29 L1157.84 1214.29 L1158.43 1214.29 L1159.02 1214.29 L1159.6 1214.29 L1160.19 1214.29 L1160.78 1214.29 L1161.36 1214.29 L1161.95 1214.29 L1162.54 1214.29 L1163.12 1214.29 L1163.71 1214.29 L1164.29 1214.29 L1164.88 1214.29 L1165.47 1214.29 L1166.05 1214.29 L1166.64 1214.29 L1167.23 1214.29 L1167.81 1214.29 L1168.4 1214.29 L1168.99 1214.29 L1169.57 1214.29 L1170.16 1214.29 L1170.75 1214.29 L1171.33 1214.29 L1171.92 1214.29 L1172.5 1214.29 L1173.09 1214.29 L1173.68 1214.29 L1174.26 1214.29 L1174.85 1214.29 L1175.44 1214.29 L1176.02 1214.29 L1176.61 1214.29 L1177.2 1214.29 L1177.78 1214.29 L1178.37 1214.29 L1178.96 1214.29 L1179.54 1214.29 L1180.13 1214.29 L1180.71 1214.29 L1181.3 1214.29 L1181.89 1214.29 L1182.47 1214.29 L1183.06 1214.29 L1183.65 1214.29 L1184.23 1214.29 L1184.82 1214.29 L1185.41 1214.29 L1185.99 1214.29 L1186.58 1214.29 L1187.16 1214.29 L1187.75 1214.29 L1188.34 1214.29 L1188.92 1214.29 L1189.51 1214.29 L1190.1 1214.29 L1190.68 1214.29 L1191.27 1214.29 L1191.86 1214.29 L1192.44 1214.29 L1193.03 1214.29 L1193.62 1214.29 L1194.2 1214.29 L1194.79 1214.29 L1195.37 1214.29 L1195.96 1214.29 L1196.55 1214.29 L1197.13 1214.29 L1197.72 1214.29 L1198.31 1214.29 L1198.89 1214.29 L1199.48 1214.29 L1200.07 1214.29 L1200.65 1214.29 L1201.24 1214.29 L1201.83 1214.29 L1202.41 1214.29 L1203 1214.29 L1203.58 1214.29 L1204.17 1214.29 L1204.76 1214.29 L1205.34 1214.29 L1205.93 1214.29 L1206.52 1214.29 L1207.1 1214.29 L1207.69 1214.29 L1208.28 1214.29 L1208.86 1214.29 L1209.45 1214.29 L1210.03 1214.29 L1210.62 1214.29 L1211.21 1214.29 L1211.79 1214.29 L1212.38 1214.29 L1212.97 1214.29 L1213.55 1214.29 L1214.14 1214.29 L1214.73 1214.29 L1215.31 1214.29 L1215.9 1214.29 L1216.49 1214.29 L1217.07 1214.29 L1217.66 1214.29 L1218.24 1214.29 L1218.83 1214.29 L1219.42 1214.29 L1220 1214.29 L1220.59 1214.29 L1221.18 1214.29 L1221.76 1214.29 L1222.35 1214.29 L1222.94 1214.29 L1223.52 1214.29 L1224.11 1214.29 L1224.7 1214.29 L1225.28 1214.29 L1225.87 1214.29 L1226.45 1214.29 L1227.04 1214.29 L1227.63 1214.29 L1228.21 1214.29 L1228.8 1214.29 L1229.39 1214.29 L1229.97 1214.29 L1230.56 1214.29 L1231.15 1214.29 L1231.73 1214.29 L1232.32 1214.29 L1232.91 1214.29 L1233.49 1214.29 L1234.08 1214.29 L1234.66 1214.29 L1235.25 1214.29 L1235.84 1214.29 L1236.42 1214.29 L1237.01 1214.29 L1237.6 1214.29 L1238.18 1214.29 L1238.77 1214.29 L1239.36 1214.29 L1239.94 1214.29 L1240.53 1214.29 L1241.11 1214.29 L1241.7 1214.29 L1242.29 1214.29 L1242.87 1214.29 L1243.46 1214.29 L1244.05 1214.29 L1244.63 1214.29 L1245.22 1214.29 L1245.81 1214.29 L1246.39 1214.29 L1246.98 1214.29 L1247.57 1214.29 L1248.15 1214.29 L1248.74 1214.29 L1249.32 1214.29 L1249.91 1214.29 L1250.5 1214.29 L1251.08 1214.29 L1251.67 1214.29 L1252.26 1214.29 L1252.84 1214.29 L1253.43 1214.29 L1254.02 1214.29 L1254.6 1214.29 L1255.19 1214.29 L1255.78 1214.29 L1256.36 1214.29 L1256.95 1214.29 L1257.53 1214.29 L1258.12 1214.29 L1258.71 1214.29 L1259.29 1214.29 L1259.88 1214.29 L1260.47 1214.29 L1261.05 1214.29 L1261.64 1214.29 L1262.23 1214.29 L1262.81 1214.29 L1263.4 1214.29 L1263.98 1214.29 L1264.57 1214.29 L1265.16 1214.29 L1265.74 1214.29 L1266.33 1214.29 L1266.92 1214.29 L1267.5 1214.29 L1268.09 1214.29 L1268.68 1214.29 L1269.26 1214.29 L1269.85 1214.29 L1270.44 1214.29 L1271.02 1214.29 L1271.61 1214.29 L1272.19 1214.29 L1272.78 1214.29 L1273.37 1214.29 L1273.95 1214.29 L1274.54 1214.29 L1275.13 1214.29 L1275.71 1214.29 L1276.3 1214.29 L1276.89 1214.29 L1277.47 1214.29 L1278.06 1214.29 L1278.65 1214.29 L1279.23 1214.29 L1279.82 1214.29 L1280.4 1214.29 L1280.99 1214.29 L1281.58 1214.29 L1282.16 1214.29 L1282.75 1214.29 L1283.34 1214.29 L1283.92 1214.29 L1284.51 1214.29 L1285.1 1214.29 L1285.68 1214.29 L1286.27 1214.29 L1286.86 1214.29 L1287.44 1214.29 L1288.03 1214.29 L1288.61 1214.29 L1289.2 1214.29 L1289.79 1214.29 L1290.37 1214.29 L1290.96 1214.29 L1291.55 1214.29 L1292.13 1214.29 L1292.72 1214.29 L1293.31 1214.29 L1293.89 1214.29 L1294.48 1214.29 L1295.06 1214.29 L1295.65 1214.29 L1296.24 1214.29 L1296.82 1214.29 L1297.41 1214.29 L1298 1214.29 L1298.58 1214.29 L1299.17 1214.29 L1299.76 1214.29 L1300.34 1214.29 L1300.93 1214.29 L1301.52 1214.29 L1302.1 1214.29 L1302.69 1214.29 L1303.27 1214.29 L1303.86 1214.29 L1304.45 1214.29 L1305.03 1214.29 L1305.62 1214.29 L1306.21 1214.29 L1306.79 1214.29 L1307.38 1214.29 L1307.97 1214.29 L1308.55 1214.29 L1309.14 1214.29 L1309.73 1214.29 L1310.31 1214.29 L1310.9 1214.29 L1311.48 1214.29 L1312.07 1214.29 L1312.66 1214.29 L1313.24 1214.29 L1313.83 1214.29 L1314.42 1214.29 L1315 1214.29 L1315.59 1214.29 L1316.18 1214.29 L1316.76 1214.29 L1317.35 1214.29 L1317.93 1214.29 L1318.52 1214.29 L1319.11 1214.29 L1319.69 1214.29 L1320.28 1214.29 L1320.87 1214.29 L1321.45 1214.29 L1322.04 1214.29 L1322.63 1214.29 L1323.21 1214.29 L1323.8 1214.29 L1324.39 1214.29 L1324.97 1214.29 L1325.56 1214.29 L1326.14 1214.29 L1326.73 1214.29 L1327.32 1214.29 L1327.9 1214.29 L1328.49 1214.29 L1329.08 1214.29 L1329.66 1214.29 L1330.25 1214.29 L1330.84 1214.29 L1331.42 1214.29 L1332.01 1214.29 L1332.6 1214.29 L1333.18 1214.29 L1333.77 1214.29 L1334.35 1214.29 L1334.94 1214.29 L1335.53 1214.29 L1336.11 1214.29 L1336.7 1214.29 L1337.29 1214.29 L1337.87 1214.29 L1338.46 1214.29 L1339.05 1214.29 L1339.63 1214.29 L1340.22 1214.29 L1340.8 1214.29 L1341.39 1214.29 L1341.98 1214.29 L1342.56 1214.29 L1343.15 1214.29 L1343.74 1214.29 L1344.32 1214.29 L1344.91 1214.29 L1345.5 1214.29 L1346.08 1214.29 L1346.67 1214.29 L1347.26 1214.29 L1347.84 1214.29 L1348.43 1214.29 L1349.01 1214.29 L1349.6 1214.29 L1350.19 1214.29 L1350.77 1214.29 L1351.36 1214.29 L1351.95 1214.29 L1352.53 1214.29 L1353.12 1214.29 L1353.71 1214.29 L1354.29 1214.29 L1354.88 1214.29 L1355.47 1214.29 L1356.05 1214.29 L1356.64 1214.29 L1357.22 1214.29 L1357.81 1214.29 L1358.4 1214.29 L1358.98 1214.29 L1359.57 1214.29 L1360.16 1214.29 L1360.74 1214.29 L1361.33 1214.29 L1361.92 1214.29 L1362.5 1214.29 L1363.09 1214.29 L1363.68 1214.29 L1364.26 1214.29 L1364.85 1214.29 L1365.43 1214.29 L1366.02 1214.29 L1366.61 1214.29 L1367.19 1214.29 L1367.78 1214.29 L1368.37 1214.29 L1368.95 1214.29 L1369.54 1214.29 L1370.13 1214.29 L1370.71 1214.29 L1371.3 1214.29 L1371.88 1214.29 L1372.47 1214.29 L1373.06 1214.29 L1373.64 1214.29 L1374.23 1214.29 L1374.82 1214.29 L1375.4 1214.29 L1375.99 1214.29 L1376.58 1214.29 L1377.16 1214.29 L1377.75 1214.29 L1378.34 1214.29 L1378.92 1214.29 L1379.51 1214.29 L1380.09 1214.29 L1380.68 1214.29 L1381.27 1214.29 L1381.85 1214.29 L1382.44 1214.29 L1383.03 1214.29 L1383.61 1214.29 L1384.2 1214.29 L1384.79 1214.29 L1385.37 1214.29 L1385.96 1214.29 L1386.55 1214.29 L1387.13 1214.29 L1387.72 1214.29 L1388.3 1214.29 L1388.89 1214.29 L1389.48 1214.29 L1390.06 1214.29 L1390.65 1214.29 L1391.24 1214.29 L1391.82 1214.29 L1392.41 1214.29 L1393 1214.29 L1393.58 1214.29 L1394.17 1214.29 L1394.75 1214.29 L1395.34 1214.29 L1395.93 1214.29 L1396.51 1214.29 L1397.1 1214.29 L1397.69 1214.29 L1398.27 1214.29 L1398.86 1214.29 L1399.45 1214.29 L1400.03 1214.29 L1400.62 1214.29 L1401.21 1214.29 L1401.79 1214.29 L1402.38 1214.29 L1402.96 1214.29 L1403.55 1214.29 L1404.14 1214.29 L1404.72 1214.29 L1405.31 1214.29 L1405.9 1214.29 L1406.48 1214.29 L1407.07 1214.29 L1407.66 1214.29 L1408.24 1214.29 L1408.83 1214.29 L1409.42 1214.29 L1410 1214.29 L1410.59 1214.29 L1411.17 1214.29 L1411.76 1214.29 L1412.35 1214.29 L1412.93 1214.29 L1413.52 1214.29 L1414.11 1214.29 L1414.69 1214.29 L1415.28 1214.29 L1415.87 1214.29 L1416.45 1214.29 L1417.04 1214.29 L1417.63 1214.29 L1418.21 1214.29 L1418.8 1214.29 L1419.38 1214.29 L1419.97 1214.29 L1420.56 1214.29 L1421.14 1214.29 L1421.73 1214.29 L1422.32 1214.29 L1422.9 1214.29 L1423.49 1214.29 L1424.08 1214.29 L1424.66 1214.29 L1425.25 1214.29 L1425.83 1214.29 L1426.42 1214.29 L1427.01 1214.29 L1427.59 1214.29 L1428.18 1214.29 L1428.77 1214.29 L1429.35 1214.29 L1429.94 1214.29 L1430.53 1214.29 L1431.11 1214.29 L1431.7 1214.29 L1432.29 1214.29 L1432.87 1214.29 L1433.46 1214.29 L1434.04 1214.29 L1434.63 1214.29 L1435.22 1214.29 L1435.8 1214.29 L1436.39 1214.29 L1436.98 1214.29 L1437.56 1214.29 L1438.15 1214.29 L1438.74 1214.29 L1439.32 1214.29 L1439.91 1214.29 L1440.5 1214.29 L1441.08 1214.29 L1441.67 1214.29 L1442.25 1214.29 L1442.84 1214.29 L1443.43 1214.29 L1444.01 1214.29 L1444.6 1214.29 L1445.19 1214.29 L1445.77 1214.29 L1446.36 1214.29 L1446.95 1214.29 L1447.53 1214.29 L1448.12 1214.29 L1448.7 1214.29 L1449.29 1214.29 L1449.88 1214.29 L1450.46 1214.29 L1451.05 1214.29 L1451.64 1214.29 L1452.22 1214.29 L1452.81 1214.29 L1453.4 1214.29 L1453.98 1214.29 L1454.57 1214.29 L1455.16 1214.29 L1455.74 1214.29 L1456.33 1214.29 L1456.91 1214.29 L1457.5 1214.29 L1458.09 1214.29 L1458.67 1214.29 L1459.26 1214.29 L1459.85 1214.29 L1460.43 1214.29 L1461.02 1214.29 L1461.61 1214.29 L1462.19 1214.29 L1462.78 1214.29 L1463.37 1214.29 L1463.95 1214.29 L1464.54 1214.29 L1465.12 1214.29 L1465.71 1214.29 L1466.3 1214.29 L1466.88 1214.29 L1467.47 1214.29 L1468.06 1214.29 L1468.64 1214.29 L1469.23 1214.29 L1469.82 1214.29 L1470.4 1214.29 L1470.99 1214.29 L1471.57 1214.29 L1472.16 1214.29 L1472.75 1214.29 L1473.33 1214.29 L1473.92 1214.29 L1474.51 1214.29 L1475.09 1214.29 L1475.68 1214.29 L1476.27 1214.29 L1476.85 1214.29 L1477.44 1214.29 L1478.03 1214.29 L1478.61 1214.29 L1479.2 1214.29 L1479.78 1214.29 L1480.37 1214.29 L1480.96 1214.29 L1481.54 1214.29 L1482.13 1214.29 L1482.72 1214.29 L1483.3 1214.29 L1483.89 1214.29 L1484.48 1214.29 L1485.06 1214.29 L1485.65 1214.29 L1486.24 1214.29 L1486.82 1214.29 L1487.41 1214.29 L1487.99 1214.29 L1488.58 1214.29 L1489.17 1214.29 L1489.75 1214.29 L1490.34 1214.29 L1490.93 1214.29 L1491.51 1214.29 L1492.1 1214.29 L1492.69 1214.29 L1493.27 1214.29 L1493.86 1214.29 L1494.45 1214.29 L1495.03 1214.29 L1495.62 1214.29 L1496.2 1214.29 L1496.79 1214.29 L1497.38 1214.29 L1497.96 1214.29 L1498.55 1214.29 L1499.14 1214.29 L1499.72 1214.29 L1500.31 1214.29 L1500.9 1214.29 L1501.48 1214.29 L1502.07 1214.29 L1502.65 1214.29 L1503.24 1214.29 L1503.83 1214.29 L1504.41 1214.29 L1505 1214.29 L1505.59 1214.29 L1506.17 1214.29 L1506.76 1214.29 L1507.35 1214.29 L1507.93 1214.29 L1508.52 1214.29 L1509.11 1214.29 L1509.69 1214.29 L1510.28 1214.29 L1510.86 1214.29 L1511.45 1214.29 L1512.04 1214.29 L1512.62 1214.29 L1513.21 1214.29 L1513.8 1214.29 L1514.38 1214.29 L1514.97 1214.29 L1515.56 1214.29 L1516.14 1214.29 L1516.73 1214.29 L1517.32 1214.29 L1517.9 1214.29 L1518.49 1214.29 L1519.07 1214.29 L1519.66 1214.29 L1520.25 1214.29 L1520.83 1214.29 L1521.42 1214.29 L1522.01 1214.29 L1522.59 1214.29 L1523.18 1214.29 L1523.77 1214.29 L1524.35 1214.29 L1524.94 1214.29 L1525.52 1214.29 L1526.11 1214.29 L1526.7 1214.29 L1527.28 1214.29 L1527.87 1214.29 L1528.46 1214.29 L1529.04 1214.29 L1529.63 1214.29 L1530.22 1214.29 L1530.8 1214.29 L1531.39 1214.29 L1531.98 1214.29 L1532.56 1214.29 L1533.15 1214.29 L1533.73 1214.29 L1534.32 1214.29 L1534.91 1214.29 L1535.49 1214.29 L1536.08 1214.29 L1536.67 1214.29 L1537.25 1214.29 L1537.84 1214.29 L1538.43 1214.29 L1539.01 1214.29 L1539.6 1214.29 L1540.19 1214.29 L1540.77 1214.29 L1541.36 1214.29 L1541.94 1214.29 L1542.53 1214.29 L1543.12 1214.29 L1543.7 1214.29 L1544.29 1214.29 L1544.88 1214.29 L1545.46 1214.29 L1546.05 1214.29 L1546.64 1214.29 L1547.22 1214.29 L1547.81 1214.29 L1548.4 1214.29 L1548.98 1214.29 L1549.57 1214.29 L1550.15 1214.29 L1550.74 1214.29 L1551.33 1214.29 L1551.91 1214.29 L1552.5 1214.29 L1553.09 1214.29 L1553.67 1214.29 L1554.26 1214.29 L1554.85 1214.29 L1555.43 1214.29 L1556.02 1214.29 L1556.6 1214.29 L1557.19 1214.29 L1557.78 1214.29 L1558.36 1214.29 L1558.95 1214.29 L1559.54 1214.29 L1560.12 1214.29 L1560.71 1214.29 L1561.3 1214.29 L1561.88 1214.29 L1562.47 1214.29 L1563.06 1214.29 L1563.64 1214.29 L1564.23 1214.29 L1564.81 1214.29 L1565.4 1214.29 L1565.99 1214.29 L1566.57 1214.29 L1567.16 1214.29 L1567.75 1214.29 L1568.33 1214.29 L1568.92 1214.29 L1569.51 1214.29 L1570.09 1214.29 L1570.68 1214.29 L1571.27 1214.29 L1571.85 1214.29 L1572.44 1214.29 L1573.02 1214.29 L1573.61 1214.29 L1574.2 1214.29 L1574.78 1214.29 L1575.37 1214.29 L1575.96 1214.29 L1576.54 1214.29 L1577.13 1214.29 L1577.72 1214.29 L1578.3 1214.29 L1578.89 1214.29 L1579.47 1214.29 L1580.06 1214.29 L1580.65 1214.29 L1581.23 1214.29 L1581.82 1214.29 L1582.41 1214.29 L1582.99 1214.29 L1583.58 1214.29 L1584.17 1214.29 L1584.75 1214.29 L1585.34 1214.29 L1585.93 1214.29 L1586.51 1214.29 L1587.1 1214.29 L1587.68 1214.29 L1588.27 1214.29 L1588.86 1214.29 L1589.44 1214.29 L1590.03 1214.29 L1590.62 1214.29 L1591.2 1214.29 L1591.79 1214.29 L1592.38 1214.29 L1592.96 1214.29 L1593.55 1214.29 L1594.14 1214.29 L1594.72 1214.29 L1595.31 1214.29 L1595.89 1214.29 L1596.48 1214.29 L1597.07 1214.29 L1597.65 1214.29 L1598.24 1214.29 L1598.83 1214.29 L1599.41 1214.29 L1600 1214.29 L1600.59 1214.29 L1601.17 1214.29 L1601.76 1214.29 L1602.34 1214.29 L1602.93 1214.29 L1603.52 1214.29 L1604.1 1214.29 L1604.69 1214.29 L1605.28 1214.29 L1605.86 1214.29 L1606.45 1214.29 L1607.04 1214.29 L1607.62 1214.29 L1608.21 1214.29 L1608.8 1214.29 L1609.38 1214.29 L1609.97 1214.29 L1610.55 1214.29 L1611.14 1214.29 L1611.73 1214.29 L1612.31 1214.29 L1612.9 1214.29 L1613.49 1214.29 L1614.07 1214.29 L1614.66 1214.29 L1615.25 1214.29 L1615.83 1214.29 L1616.42 1214.29 L1617.01 1214.29 L1617.59 1214.29 L1618.18 1214.29 L1618.76 1214.29 L1619.35 1214.29 L1619.94 1214.29 L1620.52 1214.29 L1621.11 1214.29 L1621.7 1214.29 L1622.28 1214.29 L1622.87 1214.29 L1623.46 1214.29 L1624.04 1214.29 L1624.63 1214.29 L1625.22 1214.29 L1625.8 1214.29 L1626.39 1214.29 L1626.97 1214.29 L1627.56 1214.29 L1628.15 1214.29 L1628.73 1214.29 L1629.32 1214.29 L1629.91 1214.29 L1630.49 1214.29 L1631.08 1214.29 L1631.67 1214.29 L1632.25 1214.29 L1632.84 1214.29 L1633.42 1214.29 L1634.01 1214.29 L1634.6 1214.29 L1635.18 1214.29 L1635.77 1214.29 L1636.36 1214.29 L1636.94 1214.29 L1637.53 1214.29 L1638.12 1214.29 L1638.7 1214.29 L1639.29 1214.29 L1639.88 1214.29 L1640.46 1214.29 L1641.05 1214.29 L1641.63 1214.29 L1642.22 1214.29 L1642.81 1214.29 L1643.39 1214.29 L1643.98 1214.29 L1644.57 1214.29 L1645.15 1214.29 L1645.74 1214.29 L1646.33 1214.29 L1646.91 1214.29 L1647.5 1214.29 L1648.09 1214.29 L1648.67 1214.29 L1649.26 1214.29 L1649.84 1214.29 L1650.43 1214.29 L1651.02 1214.29 L1651.6 1214.29 L1652.19 1214.29 L1652.78 1214.29 L1653.36 1214.29 L1653.95 1214.29 L1654.54 1214.29 L1655.12 1214.29 L1655.71 1214.29 L1656.29 1214.29 L1656.88 1214.29 L1657.47 1214.29 L1658.05 1214.29 L1658.64 1214.29 L1659.23 1214.29 L1659.81 1214.29 L1660.4 1214.29 L1660.99 1214.29 L1661.57 1214.29 L1662.16 1214.29 L1662.75 1214.29 L1663.33 1214.29 L1663.92 1214.29 L1664.5 1214.29 L1665.09 1214.29 L1665.68 1214.29 L1666.26 1214.29 L1666.85 1214.29 L1667.44 1214.29 L1668.02 1214.29 L1668.61 1214.29 L1669.2 1214.29 L1669.78 1214.29 L1670.37 1214.29 L1670.96 1214.29 L1671.54 1214.29 L1672.13 1214.29 L1672.71 1214.29 L1673.3 1214.29 L1673.89 1214.29 L1674.47 1214.29 L1675.06 1214.29 L1675.65 1214.29 L1676.23 1214.29 L1676.82 1214.29 L1677.41 1214.29 L1677.99 1214.29 L1678.58 1214.29 L1679.17 1214.29 L1679.75 1214.29 L1680.34 1214.29 L1680.92 1214.29 L1681.51 1214.29 L1682.1 1214.29 L1682.68 1214.29 L1683.27 1214.29 L1683.86 1214.29 L1684.44 1214.29 L1685.03 1214.29 L1685.62 1214.29 L1686.2 1214.29 L1686.79 1214.29 L1687.37 1214.29 L1687.96 1214.29 L1688.55 1214.29 L1689.13 1214.29 L1689.72 1214.29 L1690.31 1214.29 L1690.89 1214.29 L1691.48 1214.29 L1692.07 1214.29 L1692.65 1214.29 L1693.24 1214.29 L1693.83 1214.29 L1694.41 1214.29 L1695 1214.29 L1695.58 1214.29 L1696.17 1214.29 L1696.76 1214.29 L1697.34 1214.29 L1697.93 1214.29 L1698.52 1214.29 L1699.1 1214.29 L1699.69 1214.29 L1700.28 1214.29 L1700.86 1214.29 L1701.45 1214.29 L1702.04 1214.29 L1702.62 1214.29 L1703.21 1214.29 L1703.79 1214.29 L1704.38 1214.29 L1704.97 1214.29 L1705.55 1214.29 L1706.14 1214.29 L1706.73 1214.29 L1707.31 1214.29 L1707.9 1214.29 L1708.49 1214.29 L1709.07 1214.29 L1709.66 1214.29 L1710.24 1214.29 L1710.83 1214.29 L1711.42 1214.29 L1712 1214.29 L1712.59 1214.29 L1713.18 1214.29 L1713.76 1214.29 L1714.35 1214.29 L1714.94 1214.29 L1715.52 1214.29 L1716.11 1214.29 L1716.7 1214.29 L1717.28 1214.29 L1717.87 1214.29 L1718.45 1214.29 L1719.04 1214.29 L1719.63 1214.29 L1720.21 1214.29 L1720.8 1214.29 L1721.39 1214.29 L1721.97 1214.29 L1722.56 1214.29 L1723.15 1214.29 L1723.73 1214.29 L1724.32 1214.29 L1724.91 1214.29 L1725.49 1214.29 L1726.08 1214.29 L1726.66 1214.29 L1727.25 1214.29 L1727.84 1214.29 L1728.42 1214.29 L1729.01 1214.29 L1729.6 1214.29 L1730.18 1214.29 L1730.77 1214.29 L1731.36 1214.29 L1731.94 1214.29 L1732.53 1214.29 L1733.11 1214.29 L1733.7 1214.29 L1734.29 1214.29 L1734.87 1214.29 L1735.46 1214.29 L1736.05 1214.29 L1736.63 1214.29 L1737.22 1214.29 L1737.81 1214.29 L1738.39 1214.29 L1738.98 1214.29 L1739.57 1214.29 L1740.15 1214.29 L1740.74 1214.29 L1741.32 1214.29 L1741.91 1214.29 L1742.5 1214.29 L1743.08 1214.29 L1743.67 1214.29 L1744.26 1214.29 L1744.84 1214.29 L1745.43 1214.29 L1746.02 1214.29 L1746.6 1214.29 L1747.19 1214.29 L1747.78 1214.29 L1748.36 1214.29 L1748.95 1214.29 L1749.53 1214.29 L1750.12 1214.29 L1750.71 1214.29 L1751.29 1214.29 L1751.88 1214.29 L1752.47 1214.29 L1753.05 1214.29 L1753.64 1214.29 L1754.23 1214.29 L1754.81 1214.29 L1755.4 1214.29 L1755.99 1214.29 L1756.57 1214.29 L1757.16 1214.29 L1757.74 1214.29 L1758.33 1214.29 L1758.92 1214.29 L1759.5 1214.29 L1760.09 1214.29 L1760.68 1214.29 L1761.26 1214.29 L1761.85 1214.29 L1762.44 1214.29 L1763.02 1214.29 L1763.61 1214.29 L1764.19 1214.29 L1764.78 1214.29 L1765.37 1214.29 L1765.95 1214.29 L1766.54 1214.29 L1767.13 1214.29 L1767.71 1214.29 L1768.3 1214.29 L1768.89 1214.29 L1769.47 1214.29 L1770.06 1214.29 L1770.65 1214.29 L1771.23 1214.29 L1771.82 1214.29 L1772.4 1214.29 L1772.99 1214.29 L1773.58 1214.29 L1774.16 1214.29 L1774.75 1214.29 L1775.34 1214.29 L1775.92 1214.29 L1776.51 1214.29 L1777.1 1214.29 L1777.68 1214.29 L1778.27 1214.29 L1778.86 1214.29 L1779.44 1214.29 L1780.03 1214.29 L1780.61 1214.29 L1781.2 1214.29 L1781.79 1214.29 L1782.37 1214.29 L1782.96 1214.29 L1783.55 1214.29 L1784.13 1214.29 L1784.72 1214.29 L1785.31 1214.29 L1785.89 1214.29 L1786.48 1214.29 L1787.06 1214.29 L1787.65 1214.29 L1788.24 1214.29 L1788.82 1214.29 L1789.41 1214.29 L1790 1214.29 L1790.58 1214.29 L1791.17 1214.29 L1791.76 1214.29 L1792.34 1214.29 L1792.93 1214.29 L1793.52 1214.29 L1794.1 1214.29 L1794.69 1214.29 L1795.27 1214.29 L1795.86 1214.29 L1796.45 1214.29 L1797.03 1214.29 L1797.62 1214.29 L1798.21 1214.29 L1798.79 1214.29 L1799.38 1214.29 L1799.97 1214.29 L1800.55 1214.29 L1801.14 1214.29 L1801.73 1214.29 L1802.31 1214.29 L1802.9 1214.29 L1803.48 1214.29 L1804.07 1214.29 L1804.66 1214.29 L1805.24 1214.29 L1805.83 1214.29 L1806.42 1214.29 L1807 1214.29 L1807.59 1214.29 L1808.18 1214.29 L1808.76 1214.29 L1809.35 1214.29 L1809.94 1214.29 L1810.52 1214.29 L1811.11 1214.29 L1811.69 1214.29 L1812.28 1214.29 L1812.87 1214.29 L1813.45 1214.29 L1814.04 1214.29 L1814.63 1214.29 L1815.21 1214.29 L1815.8 1214.29 L1816.39 1214.29 L1816.97 1214.29 L1817.56 1214.29 L1818.14 1214.29 L1818.73 1214.29 L1819.32 1214.29 L1819.9 1214.29 L1820.49 1214.29 L1821.08 1214.29 L1821.66 1214.29 L1822.25 1214.29 L1822.84 1214.29 L1823.42 1214.29 L1824.01 1214.29 L1824.6 1214.29 L1825.18 1214.29 L1825.77 1214.29 L1826.35 1214.29 L1826.94 1214.29 L1827.53 1214.29 L1828.11 1214.29 L1828.7 1214.29 L1829.29 1214.29 L1829.87 1214.29 L1830.46 1214.29 L1831.05 1214.29 L1831.63 1214.29 L1832.22 1214.29 L1832.81 1214.29 L1833.39 1214.29 L1833.98 1214.29 L1834.56 1214.29 L1835.15 1214.29 L1835.74 1214.29 L1836.32 1214.29 L1836.91 1214.29 L1837.5 1214.29 L1838.08 1214.29 L1838.67 1214.29 L1839.26 1214.29 L1839.84 1214.29 L1840.43 1214.29 L1841.01 1214.29 L1841.6 1214.29 L1842.19 1214.29 L1842.77 1214.29 L1843.36 1214.29 L1843.95 1214.29 L1844.53 1214.29 L1845.12 1214.29 L1845.71 1214.29 L1846.29 1214.29 L1846.88 1214.29 L1847.47 1214.29 L1848.05 1214.29 L1848.64 1214.29 L1849.22 1214.29 L1849.81 1214.29 L1850.4 1214.29 L1850.98 1214.29 L1851.57 1214.29 L1852.16 1214.29 L1852.74 1214.29 L1853.33 1214.29 L1853.92 1214.29 L1854.5 1214.29 L1855.09 1214.29 L1855.68 1214.29 L1856.26 1214.29 L1856.85 1214.29 L1857.43 1214.29 L1858.02 1214.29 L1858.61 1214.29 L1859.19 1214.29 L1859.78 1214.29 L1860.37 1214.29 L1860.95 1214.29 L1861.54 1214.29 L1862.13 1214.29 L1862.71 1214.29 L1863.3 1214.29 L1863.88 1214.29 L1864.47 1214.29 L1865.06 1214.29 L1865.64 1214.29 L1866.23 1214.29 L1866.82 1214.29 L1867.4 1214.29 L1867.99 1214.29 L1868.58 1214.29 L1869.16 1214.29 L1869.75 1214.29 L1870.34 1214.29 L1870.92 1214.29 L1871.51 1214.29 L1872.09 1214.29 L1872.68 1214.29 L1873.27 1214.29 L1873.85 1214.29 L1874.44 1214.29 L1875.03 1214.29 L1875.61 1214.29 L1876.2 1214.29 L1876.79 1214.29 L1877.37 1214.29 L1877.96 1214.29 L1878.55 1214.29 L1879.13 1214.29 L1879.72 1214.29 L1880.3 1214.29 L1880.89 1214.29 L1881.48 1214.29 L1882.06 1214.29 L1882.65 1214.29 L1883.24 1214.29 L1883.82 1214.29 L1884.41 1214.29 L1885 1214.29 L1885.58 1214.29 L1886.17 1214.29 L1886.76 1214.29 L1887.34 1214.29 L1887.93 1214.29 L1888.51 1214.29 L1889.1 1214.29 L1889.69 1214.29 L1890.27 1214.29 L1890.86 1214.29 L1891.45 1214.29 L1892.03 1214.29 L1892.62 1214.29 L1893.21 1214.29 L1893.79 1214.29 L1894.38 1214.29 L1894.96 1214.29 L1895.55 1214.29 L1896.14 1214.29 L1896.72 1214.29 L1897.31 1214.29 L1897.9 1214.29 L1898.48 1214.29 L1899.07 1214.29 L1899.66 1214.29 L1900.24 1214.29 L1900.83 1214.29 L1901.42 1214.29 L1902 1214.29 L1902.59 1214.29 L1903.17 1214.29 L1903.76 1214.29 L1904.35 1214.29 L1904.93 1214.29 L1905.52 1214.29 L1906.11 1214.29 L1906.69 1214.29 L1907.28 1214.29 L1907.87 1214.29 L1908.45 1214.29 L1909.04 1214.29 L1909.63 1214.29 L1910.21 1214.29 L1910.8 1214.29 L1911.38 1214.29 L1911.97 1214.29 L1912.56 1214.29 L1913.14 1214.29 L1913.73 1214.29 L1914.32 1214.29 L1914.9 1214.29 L1915.49 1214.29 L1916.08 1214.29 L1916.66 1214.29 L1917.25 1214.29 L1917.83 1214.29 L1918.42 1214.29 L1919.01 1214.29 L1919.59 1214.29 L1920.18 1214.29 L1920.77 1214.29 L1921.35 1214.29 L1921.94 1214.29 L1922.53 1214.29 L1923.11 1214.29 L1923.7 1214.29 L1924.29 1214.29 L1924.87 1214.29 L1925.46 1214.29 L1926.04 1214.29 L1926.63 1214.29 L1927.22 1214.29 L1927.8 1214.29 L1928.39 1214.29 L1928.98 1214.29 L1929.56 1214.29 L1930.15 1214.29 L1930.74 1214.29 L1931.32 1214.29 L1931.91 1214.29 L1932.5 1214.29 L1933.08 1214.29 L1933.67 1214.29 L1934.25 1214.29 L1934.84 1214.29 L1935.43 1214.29 L1936.01 1214.29 L1936.6 1214.29 L1937.19 1214.29 L1937.77 1214.29 L1938.36 1214.29 L1938.95 1214.29 L1939.53 1214.29 L1940.12 1214.29 L1940.71 1214.29 L1941.29 1214.29 L1941.88 1214.29 L1942.46 1214.29 L1943.05 1214.29 L1943.64 1214.29 L1944.22 1214.29 L1944.81 1214.29 L1945.4 1214.29 L1945.98 1214.29 L1946.57 1214.29 L1947.16 1214.29 L1947.74 1214.29 L1948.33 1214.29 L1948.91 1214.29 L1949.5 1214.29 L1950.09 1214.29 L1950.67 1214.29 L1951.26 1214.29 L1951.85 1214.29 L1952.43 1214.29 L1953.02 1214.29 L1953.61 1214.29 L1954.19 1214.29 L1954.78 1214.29 L1955.37 1214.29 L1955.95 1214.29 L1956.54 1214.29 L1957.12 1214.29 L1957.71 1214.29 L1958.3 1214.29 L1958.88 1214.29 L1959.47 1214.29 L1960.06 1214.29 L1960.64 1214.29 L1961.23 1214.29 L1961.82 1214.29 L1962.4 1214.29 L1962.99 1214.29 L1963.58 1214.29 L1964.16 1214.29 L1964.75 1214.29 L1965.33 1214.29 L1965.92 1214.29 L1966.51 1214.29 L1967.09 1214.29 L1967.68 1214.29 L1968.27 1214.29 L1968.85 1214.29 L1969.44 1214.29 L1970.03 1214.29 L1970.61 1214.29 L1971.2 1214.29 L1971.78 1214.29 L1972.37 1214.29 L1972.96 1214.29 L1973.54 1214.29 L1974.13 1214.29 L1974.72 1214.29 L1975.3 1214.29 L1975.89 1214.29 L1976.48 1214.29 L1977.06 1214.29 L1977.65 1214.29 L1978.24 1214.29 L1978.82 1214.29 L1979.41 1214.29 L1979.99 1214.29 L1980.58 1214.29 L1981.17 1214.29 L1981.75 1214.29 L1982.34 1214.29 L1982.93 1214.29 L1983.51 1214.29 L1984.1 1214.29 L1984.69 1214.29 L1985.27 1214.29 L1985.86 1214.29 L1986.45 1214.29 L1987.03 1214.29 L1987.62 1214.29 L1988.2 1214.29 L1988.79 1214.29 L1989.38 1214.29 L1989.96 1214.29 L1990.55 1214.29 L1991.14 1214.29 L1991.72 1214.29 L1992.31 1214.29 L1992.9 1214.29 L1993.48 1214.29 L1994.07 1214.29 L1994.65 1214.29 L1995.24 1214.29 L1995.83 1214.29 L1996.41 1214.29 L1997 1214.29 L1997.59 1214.29 L1998.17 1214.29 L1998.76 1214.29 L1999.35 1214.29 L1999.93 1214.29 L2000.52 1214.29 L2001.11 1214.29 L2001.69 1214.29 L2002.28 1214.29 L2002.86 1214.29 L2003.45 1214.29 L2004.04 1214.29 L2004.62 1214.29 L2005.21 1214.29 L2005.8 1214.29 L2006.38 1214.29 L2006.97 1214.29 L2007.56 1214.29 L2008.14 1214.29 L2008.73 1214.29 L2009.32 1214.29 L2009.9 1214.29 L2010.49 1214.29 L2011.07 1214.29 L2011.66 1214.29 L2012.25 1214.29 L2012.83 1214.29 L2013.42 1214.29 L2014.01 1214.29 L2014.59 1214.29 L2015.18 1214.29 L2015.77 1214.29 L2016.35 1214.29 L2016.94 1214.29 L2017.53 1214.29 L2018.11 1214.29 L2018.7 1214.29 L2019.28 1214.29 L2019.87 1214.29 L2020.46 1214.29 L2021.04 1214.29 L2021.63 1214.29 L2022.22 1214.29 L2022.8 1214.29 L2023.39 1214.29 L2023.98 1214.29 L2024.56 1214.29 L2025.15 1214.29 L2025.73 1214.29 L2026.32 1214.29 L2026.91 1214.29 L2027.49 1214.29 L2028.08 1214.29 L2028.67 1214.29 L2029.25 1214.29 L2029.84 1214.29 L2030.43 1214.29 L2031.01 1214.29 L2031.6 1214.29 L2032.19 1214.29 L2032.77 1214.29 L2033.36 1214.29 L2033.94 1214.29 L2034.53 1214.29 L2035.12 1214.29 L2035.7 1214.29 L2036.29 1214.29 L2036.88 1214.29 L2037.46 1214.29 L2038.05 1214.29 L2038.64 1214.29 L2039.22 1214.29 L2039.81 1214.29 L2040.4 1214.29 L2040.98 1214.29 L2041.57 1214.29 L2042.15 1214.29 L2042.74 1214.29 L2043.33 1214.29 L2043.91 1214.29 L2044.5 1214.29 L2045.09 1214.29 L2045.67 1214.29 L2046.26 1214.29 L2046.85 1214.29 L2047.43 1214.29 L2048.02 1214.29 L2048.6 1214.29 L2049.19 1214.29 L2049.78 1214.29 L2050.36 1214.29 L2050.95 1214.29 L2051.54 1214.29 L2052.12 1214.29 L2052.71 1214.29 L2053.3 1214.29 L2053.88 1214.29 L2054.47 1214.29 L2055.06 1214.29 L2055.64 1214.29 L2056.23 1214.29 L2056.81 1214.29 L2057.4 1214.29 L2057.99 1214.29 L2058.57 1214.29 L2059.16 1214.29 L2059.75 1214.29 L2060.33 1214.29 L2060.92 1214.29 L2061.51 1214.29 L2062.09 1214.29 L2062.68 1214.29 L2063.27 1214.29 L2063.85 1214.29 L2064.44 1214.29 L2065.02 1214.29 L2065.61 1214.29 L2066.2 1214.29 L2066.78 1214.29 L2067.37 1214.29 L2067.96 1214.29 L2068.54 1214.29 L2069.13 1214.29 L2069.72 1214.29 L2070.3 1214.29 L2070.89 1214.29 L2071.48 1214.29 L2072.06 1214.29 L2072.65 1214.29 L2073.23 1214.29 L2073.82 1214.29 L2074.41 1214.29 L2074.99 1214.29 L2075.58 1214.29 L2076.17 1214.29 L2076.75 1214.29 L2077.34 1214.29 L2077.93 1214.29 L2078.51 1214.29 L2079.1 1214.29 L2079.68 1214.29 L2080.27 1214.29 L2080.86 1214.29 L2081.44 1214.29 L2082.03 1214.29 L2082.62 1214.29 L2083.2 1214.29 L2083.79 1214.29 L2084.38 1214.29 L2084.96 1214.29 L2085.55 1214.29 L2086.14 1214.29 L2086.72 1214.29 L2087.31 1214.29 L2087.89 1214.29 L2088.48 1214.29 L2089.07 1214.29 L2089.65 1214.29 L2090.24 1214.29 L2090.83 1214.29 L2091.41 1214.29 L2092 1214.29 L2092.59 1214.29 L2093.17 1214.29 L2093.76 1214.29 L2094.35 1214.29 L2094.93 1214.29 L2095.52 1214.29 L2096.1 1214.29 L2096.69 1214.29 L2097.28 1214.29 L2097.86 1214.29 L2098.45 1214.29 L2099.04 1214.29 L2099.62 1214.29 L2100.21 1214.29 L2100.8 1214.29 L2101.38 1214.29 L2101.97 1214.29 L2102.55 1214.29 L2103.14 1214.29 L2103.73 1214.29 L2104.31 1214.29 L2104.9 1214.29 L2105.49 1214.29 L2106.07 1214.29 L2106.66 1214.29 L2107.25 1214.29 L2107.83 1214.29 L2108.42 1214.29 L2109.01 1214.29 L2109.59 1214.29 L2110.18 1214.29 L2110.76 1214.29 L2111.35 1214.29 L2111.94 1214.29 L2112.52 1214.29 L2113.11 1214.29 L2113.7 1214.29 L2114.28 1214.29 L2114.87 1214.29 L2115.46 1214.29 L2116.04 1214.29 L2116.63 1214.29 L2117.22 1214.29 L2117.8 1214.29 L2118.39 1214.29 L2118.97 1214.29 L2119.56 1214.29 L2120.15 1214.29 L2120.73 1214.29 L2121.32 1214.29 L2121.91 1214.29 L2122.49 1214.29 L2123.08 1214.29 L2123.67 1214.29 L2124.25 1214.29 L2124.84 1214.29 L2125.42 1214.29 L2126.01 1214.29 L2126.6 1214.29 L2127.18 1214.29 L2127.77 1214.29 L2128.36 1214.29 L2128.94 1214.29 L2129.53 1214.29 L2130.12 1214.29 L2130.7 1214.29 L2131.29 1214.29 L2131.88 1214.29 L2132.46 1214.29 L2133.05 1214.29 L2133.63 1214.29 L2134.22 1214.29 L2134.81 1214.29 L2135.39 1214.29 L2135.98 1214.29 L2136.57 1214.29 L2137.15 1214.29 L2137.74 1214.29 L2138.33 1214.29 L2138.91 1214.29 L2139.5 1214.29 L2140.09 1214.29 L2140.67 1214.29 L2141.26 1214.29 L2141.84 1214.29 L2142.43 1214.29 L2143.02 1214.29 L2143.6 1214.29 L2144.19 1214.29 L2144.78 1214.29 L2145.36 1214.29 L2145.95 1214.29 L2146.54 1214.29 L2147.12 1214.29 L2147.71 1214.29 L2148.3 1214.29 L2148.88 1214.29 L2149.47 1214.29 L2150.05 1214.29 L2150.64 1214.29 L2151.23 1214.29 L2151.81 1214.29 L2152.4 1214.29 L2152.99 1214.29 L2153.57 1214.29 L2154.16 1214.29 L2154.75 1214.29 L2155.33 1214.29 L2155.92 1214.29 L2156.5 1214.29 L2157.09 1214.29 L2157.68 1214.29 L2158.26 1214.29 L2158.26 1214.15 L2157.68 1214.15 L2157.09 1214.15 L2156.5 1214.15 L2155.92 1214.15 L2155.33 1214.15 L2154.75 1214.15 L2154.16 1214.15 L2153.57 1214.15 L2152.99 1214.15 L2152.4 1214.15 L2151.81 1214.15 L2151.23 1214.15 L2150.64 1214.15 L2150.05 1214.15 L2149.47 1214.15 L2148.88 1214.15 L2148.3 1214.15 L2147.71 1214.15 L2147.12 1214.15 L2146.54 1214.15 L2145.95 1214.15 L2145.36 1214.15 L2144.78 1214.15 L2144.19 1214.15 L2143.6 1214.15 L2143.02 1214.15 L2142.43 1214.15 L2141.84 1214.15 L2141.26 1214.15 L2140.67 1214.15 L2140.09 1214.15 L2139.5 1214.15 L2138.91 1214.15 L2138.33 1214.15 L2137.74 1214.15 L2137.15 1214.15 L2136.57 1214.15 L2135.98 1214.15 L2135.39 1214.15 L2134.81 1214.15 L2134.22 1214.15 L2133.63 1214.15 L2133.05 1214.15 L2132.46 1214.15 L2131.88 1214.15 L2131.29 1214.15 L2130.7 1214.15 L2130.12 1214.15 L2129.53 1214.15 L2128.94 1214.15 L2128.36 1214.15 L2127.77 1214.15 L2127.18 1214.15 L2126.6 1214.15 L2126.01 1214.15 L2125.42 1214.15 L2124.84 1214.15 L2124.25 1214.15 L2123.67 1214.15 L2123.08 1214.15 L2122.49 1214.15 L2121.91 1214.15 L2121.32 1214.15 L2120.73 1214.15 L2120.15 1214.15 L2119.56 1214.15 L2118.97 1214.15 L2118.39 1214.15 L2117.8 1214.15 L2117.22 1214.15 L2116.63 1214.15 L2116.04 1214.15 L2115.46 1214.15 L2114.87 1214.15 L2114.28 1214.15 L2113.7 1214.15 L2113.11 1214.15 L2112.52 1214.15 L2111.94 1214.15 L2111.35 1214.15 L2110.76 1214.15 L2110.18 1214.15 L2109.59 1214.15 L2109.01 1214.15 L2108.42 1214.15 L2107.83 1214.15 L2107.25 1214.15 L2106.66 1214.15 L2106.07 1214.15 L2105.49 1214.15 L2104.9 1214.15 L2104.31 1214.15 L2103.73 1214.15 L2103.14 1214.15 L2102.55 1214.15 L2101.97 1214.15 L2101.38 1214.15 L2100.8 1214.15 L2100.21 1214.15 L2099.62 1214.15 L2099.04 1214.15 L2098.45 1214.15 L2097.86 1214.15 L2097.28 1214.15 L2096.69 1214.15 L2096.1 1214.15 L2095.52 1214.15 L2094.93 1214.15 L2094.35 1214.15 L2093.76 1214.15 L2093.17 1214.15 L2092.59 1214.15 L2092 1214.15 L2091.41 1214.15 L2090.83 1214.15 L2090.24 1214.15 L2089.65 1214.15 L2089.07 1214.15 L2088.48 1214.15 L2087.89 1214.15 L2087.31 1214.15 L2086.72 1214.15 L2086.14 1214.15 L2085.55 1214.15 L2084.96 1214.15 L2084.38 1214.15 L2083.79 1214.15 L2083.2 1214.15 L2082.62 1214.15 L2082.03 1214.15 L2081.44 1214.15 L2080.86 1214.15 L2080.27 1214.15 L2079.68 1214.15 L2079.1 1214.15 L2078.51 1214.15 L2077.93 1214.15 L2077.34 1214.15 L2076.75 1214.15 L2076.17 1214.15 L2075.58 1214.15 L2074.99 1214.15 L2074.41 1214.15 L2073.82 1214.15 L2073.23 1214.15 L2072.65 1214.15 L2072.06 1214.15 L2071.48 1214.15 L2070.89 1214.15 L2070.3 1214.15 L2069.72 1214.15 L2069.13 1214.15 L2068.54 1214.15 L2067.96 1214.15 L2067.37 1214.15 L2066.78 1214.15 L2066.2 1214.15 L2065.61 1214.15 L2065.02 1214.15 L2064.44 1214.15 L2063.85 1214.15 L2063.27 1214.15 L2062.68 1214.15 L2062.09 1214.15 L2061.51 1214.15 L2060.92 1214.15 L2060.33 1214.15 L2059.75 1214.15 L2059.16 1214.15 L2058.57 1214.15 L2057.99 1214.15 L2057.4 1214.15 L2056.81 1214.15 L2056.23 1214.15 L2055.64 1214.15 L2055.06 1214.15 L2054.47 1214.15 L2053.88 1214.15 L2053.3 1214.15 L2052.71 1214.15 L2052.12 1214.15 L2051.54 1214.15 L2050.95 1214.15 L2050.36 1214.15 L2049.78 1214.15 L2049.19 1214.15 L2048.6 1214.15 L2048.02 1214.15 L2047.43 1214.15 L2046.85 1214.15 L2046.26 1214.15 L2045.67 1214.15 L2045.09 1214.15 L2044.5 1214.15 L2043.91 1214.15 L2043.33 1214.15 L2042.74 1214.15 L2042.15 1214.15 L2041.57 1214.15 L2040.98 1214.15 L2040.4 1214.15 L2039.81 1214.15 L2039.22 1214.15 L2038.64 1214.15 L2038.05 1214.15 L2037.46 1214.15 L2036.88 1214.15 L2036.29 1214.15 L2035.7 1214.15 L2035.12 1214.15 L2034.53 1214.15 L2033.94 1214.15 L2033.36 1214.15 L2032.77 1214.15 L2032.19 1214.15 L2031.6 1214.15 L2031.01 1214.15 L2030.43 1214.15 L2029.84 1214.15 L2029.25 1214.15 L2028.67 1214.15 L2028.08 1214.15 L2027.49 1214.15 L2026.91 1214.15 L2026.32 1214.15 L2025.73 1214.15 L2025.15 1214.15 L2024.56 1214.15 L2023.98 1214.15 L2023.39 1214.15 L2022.8 1214.15 L2022.22 1214.15 L2021.63 1214.15 L2021.04 1214.15 L2020.46 1214.15 L2019.87 1214.15 L2019.28 1214.15 L2018.7 1214.15 L2018.11 1214.15 L2017.53 1214.15 L2016.94 1214.15 L2016.35 1214.15 L2015.77 1214.15 L2015.18 1214.15 L2014.59 1214.15 L2014.01 1214.15 L2013.42 1214.15 L2012.83 1214.15 L2012.25 1214.15 L2011.66 1214.15 L2011.07 1214.15 L2010.49 1214.15 L2009.9 1214.15 L2009.32 1214.15 L2008.73 1214.15 L2008.14 1214.15 L2007.56 1214.15 L2006.97 1214.15 L2006.38 1214.15 L2005.8 1214.15 L2005.21 1214.15 L2004.62 1214.15 L2004.04 1214.15 L2003.45 1214.15 L2002.86 1214.15 L2002.28 1214.15 L2001.69 1214.15 L2001.11 1214.15 L2000.52 1214.15 L1999.93 1214.15 L1999.35 1214.15 L1998.76 1214.15 L1998.17 1214.15 L1997.59 1214.15 L1997 1214.15 L1996.41 1214.15 L1995.83 1214.15 L1995.24 1214.15 L1994.65 1214.15 L1994.07 1214.15 L1993.48 1214.15 L1992.9 1214.15 L1992.31 1214.15 L1991.72 1214.15 L1991.14 1214.15 L1990.55 1214.15 L1989.96 1214.15 L1989.38 1214.15 L1988.79 1214.15 L1988.2 1214.15 L1987.62 1214.15 L1987.03 1214.15 L1986.45 1214.15 L1985.86 1214.15 L1985.27 1214.15 L1984.69 1214.15 L1984.1 1214.15 L1983.51 1214.15 L1982.93 1214.15 L1982.34 1214.15 L1981.75 1214.15 L1981.17 1214.15 L1980.58 1214.15 L1979.99 1214.15 L1979.41 1214.15 L1978.82 1214.15 L1978.24 1214.15 L1977.65 1214.15 L1977.06 1214.15 L1976.48 1214.15 L1975.89 1214.15 L1975.3 1214.15 L1974.72 1214.15 L1974.13 1214.15 L1973.54 1214.15 L1972.96 1214.15 L1972.37 1214.15 L1971.78 1214.15 L1971.2 1214.15 L1970.61 1214.15 L1970.03 1214.15 L1969.44 1214.15 L1968.85 1214.15 L1968.27 1214.15 L1967.68 1214.15 L1967.09 1214.15 L1966.51 1214.15 L1965.92 1214.15 L1965.33 1214.15 L1964.75 1214.15 L1964.16 1214.15 L1963.58 1214.15 L1962.99 1214.15 L1962.4 1214.15 L1961.82 1214.15 L1961.23 1214.15 L1960.64 1214.15 L1960.06 1214.15 L1959.47 1214.15 L1958.88 1214.15 L1958.3 1214.15 L1957.71 1214.15 L1957.12 1214.15 L1956.54 1214.15 L1955.95 1214.15 L1955.37 1214.15 L1954.78 1214.15 L1954.19 1214.15 L1953.61 1214.15 L1953.02 1214.15 L1952.43 1214.15 L1951.85 1214.15 L1951.26 1214.15 L1950.67 1214.15 L1950.09 1214.15 L1949.5 1214.15 L1948.91 1214.15 L1948.33 1214.15 L1947.74 1214.15 L1947.16 1214.15 L1946.57 1214.15 L1945.98 1214.15 L1945.4 1214.15 L1944.81 1214.15 L1944.22 1214.15 L1943.64 1214.15 L1943.05 1214.15 L1942.46 1214.15 L1941.88 1214.15 L1941.29 1214.15 L1940.71 1214.15 L1940.12 1214.15 L1939.53 1214.15 L1938.95 1214.15 L1938.36 1214.15 L1937.77 1214.15 L1937.19 1214.15 L1936.6 1214.15 L1936.01 1214.15 L1935.43 1214.15 L1934.84 1214.15 L1934.25 1214.15 L1933.67 1214.15 L1933.08 1214.15 L1932.5 1214.15 L1931.91 1214.15 L1931.32 1214.15 L1930.74 1214.15 L1930.15 1214.15 L1929.56 1214.15 L1928.98 1214.15 L1928.39 1214.15 L1927.8 1214.15 L1927.22 1214.15 L1926.63 1214.15 L1926.04 1214.15 L1925.46 1214.15 L1924.87 1214.15 L1924.29 1214.15 L1923.7 1214.15 L1923.11 1214.15 L1922.53 1214.15 L1921.94 1214.15 L1921.35 1214.15 L1920.77 1214.15 L1920.18 1214.15 L1919.59 1214.15 L1919.01 1214.15 L1918.42 1214.15 L1917.83 1214.15 L1917.25 1214.15 L1916.66 1214.15 L1916.08 1214.15 L1915.49 1214.15 L1914.9 1214.15 L1914.32 1214.15 L1913.73 1214.15 L1913.14 1214.15 L1912.56 1214.15 L1911.97 1214.15 L1911.38 1214.15 L1910.8 1214.15 L1910.21 1214.15 L1909.63 1214.15 L1909.04 1214.15 L1908.45 1214.15 L1907.87 1214.15 L1907.28 1214.15 L1906.69 1214.15 L1906.11 1214.15 L1905.52 1214.15 L1904.93 1214.15 L1904.35 1214.15 L1903.76 1214.15 L1903.17 1214.15 L1902.59 1214.15 L1902 1214.15 L1901.42 1214.15 L1900.83 1214.15 L1900.24 1214.15 L1899.66 1214.15 L1899.07 1214.15 L1898.48 1214.15 L1897.9 1214.15 L1897.31 1214.15 L1896.72 1214.15 L1896.14 1214.15 L1895.55 1214.15 L1894.96 1214.15 L1894.38 1214.15 L1893.79 1214.15 L1893.21 1214.15 L1892.62 1214.15 L1892.03 1214.15 L1891.45 1214.15 L1890.86 1214.15 L1890.27 1214.15 L1889.69 1214.15 L1889.1 1214.15 L1888.51 1214.15 L1887.93 1214.15 L1887.34 1214.15 L1886.76 1214.15 L1886.17 1214.15 L1885.58 1214.15 L1885 1214.15 L1884.41 1214.15 L1883.82 1214.15 L1883.24 1214.15 L1882.65 1214.15 L1882.06 1214.15 L1881.48 1214.15 L1880.89 1214.15 L1880.3 1214.15 L1879.72 1214.15 L1879.13 1214.15 L1878.55 1214.15 L1877.96 1214.15 L1877.37 1214.15 L1876.79 1214.15 L1876.2 1214.15 L1875.61 1214.15 L1875.03 1214.15 L1874.44 1214.15 L1873.85 1214.15 L1873.27 1214.15 L1872.68 1214.15 L1872.09 1214.15 L1871.51 1214.15 L1870.92 1214.15 L1870.34 1214.15 L1869.75 1214.15 L1869.16 1214.15 L1868.58 1214.15 L1867.99 1214.15 L1867.4 1214.15 L1866.82 1214.15 L1866.23 1214.15 L1865.64 1214.15 L1865.06 1214.15 L1864.47 1214.15 L1863.88 1214.15 L1863.3 1214.15 L1862.71 1214.15 L1862.13 1214.15 L1861.54 1214.15 L1860.95 1214.15 L1860.37 1214.15 L1859.78 1214.15 L1859.19 1214.15 L1858.61 1214.15 L1858.02 1214.15 L1857.43 1214.15 L1856.85 1214.15 L1856.26 1214.15 L1855.68 1214.15 L1855.09 1214.15 L1854.5 1214.15 L1853.92 1214.15 L1853.33 1214.15 L1852.74 1214.15 L1852.16 1214.15 L1851.57 1214.15 L1850.98 1214.15 L1850.4 1214.15 L1849.81 1214.15 L1849.22 1214.15 L1848.64 1214.15 L1848.05 1214.15 L1847.47 1214.15 L1846.88 1214.15 L1846.29 1214.15 L1845.71 1214.15 L1845.12 1214.15 L1844.53 1214.15 L1843.95 1214.15 L1843.36 1214.15 L1842.77 1214.15 L1842.19 1214.15 L1841.6 1214.15 L1841.01 1214.15 L1840.43 1214.15 L1839.84 1214.15 L1839.26 1214.15 L1838.67 1214.15 L1838.08 1214.15 L1837.5 1214.15 L1836.91 1214.15 L1836.32 1214.15 L1835.74 1214.15 L1835.15 1214.15 L1834.56 1214.15 L1833.98 1214.15 L1833.39 1214.15 L1832.81 1214.15 L1832.22 1214.15 L1831.63 1214.15 L1831.05 1214.15 L1830.46 1214.15 L1829.87 1214.15 L1829.29 1214.15 L1828.7 1214.15 L1828.11 1214.15 L1827.53 1214.15 L1826.94 1214.15 L1826.35 1214.15 L1825.77 1214.15 L1825.18 1214.15 L1824.6 1214.15 L1824.01 1214.15 L1823.42 1214.15 L1822.84 1214.15 L1822.25 1214.15 L1821.66 1214.15 L1821.08 1214.15 L1820.49 1214.15 L1819.9 1214.15 L1819.32 1214.15 L1818.73 1214.15 L1818.14 1214.15 L1817.56 1214.15 L1816.97 1214.15 L1816.39 1214.15 L1815.8 1214.15 L1815.21 1214.15 L1814.63 1214.15 L1814.04 1214.15 L1813.45 1214.15 L1812.87 1214.15 L1812.28 1214.15 L1811.69 1214.15 L1811.11 1214.15 L1810.52 1214.15 L1809.94 1214.15 L1809.35 1214.15 L1808.76 1214.15 L1808.18 1214.15 L1807.59 1214.15 L1807 1214.15 L1806.42 1214.15 L1805.83 1214.15 L1805.24 1214.15 L1804.66 1214.15 L1804.07 1214.15 L1803.48 1214.15 L1802.9 1214.15 L1802.31 1214.15 L1801.73 1214.15 L1801.14 1214.15 L1800.55 1214.15 L1799.97 1214.15 L1799.38 1214.15 L1798.79 1214.15 L1798.21 1214.15 L1797.62 1214.15 L1797.03 1214.15 L1796.45 1214.15 L1795.86 1214.15 L1795.27 1214.15 L1794.69 1214.15 L1794.1 1214.15 L1793.52 1214.15 L1792.93 1214.15 L1792.34 1214.15 L1791.76 1214.15 L1791.17 1214.15 L1790.58 1214.15 L1790 1214.15 L1789.41 1214.15 L1788.82 1214.15 L1788.24 1214.15 L1787.65 1214.15 L1787.06 1214.15 L1786.48 1214.15 L1785.89 1214.15 L1785.31 1214.15 L1784.72 1214.15 L1784.13 1214.15 L1783.55 1214.15 L1782.96 1214.15 L1782.37 1214.15 L1781.79 1214.15 L1781.2 1214.15 L1780.61 1214.15 L1780.03 1214.15 L1779.44 1214.15 L1778.86 1214.15 L1778.27 1214.15 L1777.68 1214.15 L1777.1 1214.15 L1776.51 1214.15 L1775.92 1214.15 L1775.34 1214.15 L1774.75 1214.15 L1774.16 1214.15 L1773.58 1214.15 L1772.99 1214.15 L1772.4 1214.15 L1771.82 1214.15 L1771.23 1214.15 L1770.65 1214.15 L1770.06 1214.15 L1769.47 1214.15 L1768.89 1214.15 L1768.3 1214.15 L1767.71 1214.15 L1767.13 1214.15 L1766.54 1214.15 L1765.95 1214.15 L1765.37 1214.15 L1764.78 1214.15 L1764.19 1214.15 L1763.61 1214.15 L1763.02 1214.15 L1762.44 1214.15 L1761.85 1214.15 L1761.26 1214.15 L1760.68 1214.15 L1760.09 1214.15 L1759.5 1214.15 L1758.92 1214.15 L1758.33 1214.15 L1757.74 1214.15 L1757.16 1214.15 L1756.57 1214.15 L1755.99 1214.15 L1755.4 1214.15 L1754.81 1214.15 L1754.23 1214.15 L1753.64 1214.15 L1753.05 1214.15 L1752.47 1214.15 L1751.88 1214.15 L1751.29 1214.15 L1750.71 1214.15 L1750.12 1214.15 L1749.53 1214.15 L1748.95 1214.15 L1748.36 1214.15 L1747.78 1214.15 L1747.19 1214.15 L1746.6 1214.15 L1746.02 1214.15 L1745.43 1214.15 L1744.84 1214.15 L1744.26 1214.15 L1743.67 1214.15 L1743.08 1214.15 L1742.5 1214.15 L1741.91 1214.15 L1741.32 1214.15 L1740.74 1214.15 L1740.15 1214.15 L1739.57 1214.15 L1738.98 1214.15 L1738.39 1214.15 L1737.81 1214.15 L1737.22 1214.15 L1736.63 1214.15 L1736.05 1214.15 L1735.46 1214.15 L1734.87 1214.15 L1734.29 1214.15 L1733.7 1214.15 L1733.11 1214.15 L1732.53 1214.15 L1731.94 1214.15 L1731.36 1214.15 L1730.77 1214.15 L1730.18 1214.15 L1729.6 1214.15 L1729.01 1214.15 L1728.42 1214.15 L1727.84 1214.15 L1727.25 1214.15 L1726.66 1214.15 L1726.08 1214.15 L1725.49 1214.15 L1724.91 1214.15 L1724.32 1214.15 L1723.73 1214.15 L1723.15 1214.15 L1722.56 1214.15 L1721.97 1214.15 L1721.39 1214.15 L1720.8 1214.15 L1720.21 1214.15 L1719.63 1214.15 L1719.04 1214.15 L1718.45 1214.15 L1717.87 1214.15 L1717.28 1214.15 L1716.7 1214.15 L1716.11 1214.15 L1715.52 1214.15 L1714.94 1214.15 L1714.35 1214.15 L1713.76 1214.15 L1713.18 1214.15 L1712.59 1214.15 L1712 1214.15 L1711.42 1214.15 L1710.83 1214.15 L1710.24 1214.15 L1709.66 1214.15 L1709.07 1214.15 L1708.49 1214.15 L1707.9 1214.15 L1707.31 1214.15 L1706.73 1214.15 L1706.14 1214.15 L1705.55 1214.15 L1704.97 1214.15 L1704.38 1214.15 L1703.79 1214.15 L1703.21 1214.15 L1702.62 1214.15 L1702.04 1214.15 L1701.45 1214.15 L1700.86 1214.15 L1700.28 1214.15 L1699.69 1214.15 L1699.1 1214.15 L1698.52 1214.15 L1697.93 1214.15 L1697.34 1214.15 L1696.76 1214.15 L1696.17 1214.15 L1695.58 1214.15 L1695 1214.15 L1694.41 1214.15 L1693.83 1214.15 L1693.24 1214.15 L1692.65 1214.15 L1692.07 1214.15 L1691.48 1214.15 L1690.89 1214.15 L1690.31 1214.15 L1689.72 1214.15 L1689.13 1214.15 L1688.55 1214.15 L1687.96 1214.15 L1687.37 1214.15 L1686.79 1214.15 L1686.2 1214.15 L1685.62 1214.15 L1685.03 1214.15 L1684.44 1214.15 L1683.86 1214.15 L1683.27 1214.15 L1682.68 1214.15 L1682.1 1214.15 L1681.51 1214.15 L1680.92 1214.15 L1680.34 1214.15 L1679.75 1214.15 L1679.17 1214.15 L1678.58 1214.15 L1677.99 1214.15 L1677.41 1214.15 L1676.82 1214.15 L1676.23 1214.15 L1675.65 1214.15 L1675.06 1214.15 L1674.47 1214.15 L1673.89 1214.15 L1673.3 1214.15 L1672.71 1214.15 L1672.13 1214.15 L1671.54 1214.15 L1670.96 1214.15 L1670.37 1214.15 L1669.78 1214.15 L1669.2 1214.15 L1668.61 1214.15 L1668.02 1214.15 L1667.44 1214.15 L1666.85 1214.15 L1666.26 1214.15 L1665.68 1214.15 L1665.09 1214.15 L1664.5 1214.15 L1663.92 1214.15 L1663.33 1214.15 L1662.75 1214.15 L1662.16 1214.15 L1661.57 1214.15 L1660.99 1214.15 L1660.4 1214.15 L1659.81 1214.15 L1659.23 1214.15 L1658.64 1214.15 L1658.05 1214.15 L1657.47 1214.15 L1656.88 1214.15 L1656.29 1214.15 L1655.71 1214.15 L1655.12 1214.15 L1654.54 1214.15 L1653.95 1214.15 L1653.36 1214.15 L1652.78 1214.15 L1652.19 1214.15 L1651.6 1214.15 L1651.02 1214.15 L1650.43 1214.15 L1649.84 1214.15 L1649.26 1214.15 L1648.67 1214.15 L1648.09 1214.15 L1647.5 1214.15 L1646.91 1214.15 L1646.33 1214.15 L1645.74 1214.15 L1645.15 1214.15 L1644.57 1214.15 L1643.98 1214.15 L1643.39 1214.15 L1642.81 1214.15 L1642.22 1214.15 L1641.63 1214.15 L1641.05 1214.15 L1640.46 1214.15 L1639.88 1214.15 L1639.29 1214.15 L1638.7 1214.15 L1638.12 1214.15 L1637.53 1214.15 L1636.94 1214.15 L1636.36 1214.15 L1635.77 1214.15 L1635.18 1214.15 L1634.6 1214.15 L1634.01 1214.15 L1633.42 1214.15 L1632.84 1214.15 L1632.25 1214.15 L1631.67 1214.15 L1631.08 1214.15 L1630.49 1214.15 L1629.91 1214.15 L1629.32 1214.15 L1628.73 1214.15 L1628.15 1214.15 L1627.56 1214.15 L1626.97 1214.15 L1626.39 1214.15 L1625.8 1214.15 L1625.22 1214.15 L1624.63 1214.15 L1624.04 1214.15 L1623.46 1214.15 L1622.87 1214.15 L1622.28 1214.15 L1621.7 1214.15 L1621.11 1214.15 L1620.52 1214.15 L1619.94 1214.15 L1619.35 1214.15 L1618.76 1214.15 L1618.18 1214.15 L1617.59 1214.15 L1617.01 1214.15 L1616.42 1214.15 L1615.83 1214.15 L1615.25 1214.15 L1614.66 1214.15 L1614.07 1214.15 L1613.49 1214.15 L1612.9 1214.15 L1612.31 1214.15 L1611.73 1214.15 L1611.14 1214.15 L1610.55 1214.15 L1609.97 1214.15 L1609.38 1214.15 L1608.8 1214.15 L1608.21 1214.15 L1607.62 1214.15 L1607.04 1214.15 L1606.45 1214.15 L1605.86 1214.15 L1605.28 1214.15 L1604.69 1214.15 L1604.1 1214.15 L1603.52 1214.15 L1602.93 1214.15 L1602.34 1214.15 L1601.76 1214.15 L1601.17 1214.15 L1600.59 1214.15 L1600 1214.15 L1599.41 1214.15 L1598.83 1214.15 L1598.24 1214.15 L1597.65 1214.15 L1597.07 1214.15 L1596.48 1214.15 L1595.89 1214.15 L1595.31 1214.15 L1594.72 1214.15 L1594.14 1214.15 L1593.55 1214.15 L1592.96 1214.15 L1592.38 1214.15 L1591.79 1214.15 L1591.2 1214.15 L1590.62 1214.15 L1590.03 1214.15 L1589.44 1214.15 L1588.86 1214.15 L1588.27 1214.15 L1587.68 1214.15 L1587.1 1214.15 L1586.51 1214.15 L1585.93 1214.15 L1585.34 1214.15 L1584.75 1214.15 L1584.17 1214.15 L1583.58 1214.15 L1582.99 1214.15 L1582.41 1214.15 L1581.82 1214.15 L1581.23 1214.15 L1580.65 1214.15 L1580.06 1214.15 L1579.47 1214.15 L1578.89 1214.15 L1578.3 1214.15 L1577.72 1214.15 L1577.13 1214.15 L1576.54 1214.15 L1575.96 1214.15 L1575.37 1214.15 L1574.78 1214.15 L1574.2 1214.15 L1573.61 1214.15 L1573.02 1214.15 L1572.44 1214.15 L1571.85 1214.15 L1571.27 1214.15 L1570.68 1214.15 L1570.09 1214.15 L1569.51 1214.15 L1568.92 1214.15 L1568.33 1214.15 L1567.75 1214.15 L1567.16 1214.15 L1566.57 1214.15 L1565.99 1214.15 L1565.4 1214.15 L1564.81 1214.15 L1564.23 1214.15 L1563.64 1214.15 L1563.06 1214.15 L1562.47 1214.15 L1561.88 1214.15 L1561.3 1214.15 L1560.71 1214.15 L1560.12 1214.15 L1559.54 1214.15 L1558.95 1214.15 L1558.36 1214.15 L1557.78 1214.15 L1557.19 1214.15 L1556.6 1214.15 L1556.02 1214.15 L1555.43 1214.15 L1554.85 1214.15 L1554.26 1214.15 L1553.67 1214.15 L1553.09 1214.15 L1552.5 1214.15 L1551.91 1214.15 L1551.33 1214.15 L1550.74 1214.15 L1550.15 1214.15 L1549.57 1214.15 L1548.98 1214.15 L1548.4 1214.15 L1547.81 1214.15 L1547.22 1214.15 L1546.64 1214.15 L1546.05 1214.15 L1545.46 1214.15 L1544.88 1214.15 L1544.29 1214.15 L1543.7 1214.15 L1543.12 1214.15 L1542.53 1214.15 L1541.94 1214.15 L1541.36 1214.15 L1540.77 1214.15 L1540.19 1214.15 L1539.6 1214.15 L1539.01 1214.15 L1538.43 1214.15 L1537.84 1214.15 L1537.25 1214.15 L1536.67 1214.15 L1536.08 1214.15 L1535.49 1214.15 L1534.91 1214.15 L1534.32 1214.15 L1533.73 1214.15 L1533.15 1214.15 L1532.56 1214.15 L1531.98 1214.15 L1531.39 1214.15 L1530.8 1214.15 L1530.22 1214.15 L1529.63 1214.15 L1529.04 1214.15 L1528.46 1214.15 L1527.87 1214.15 L1527.28 1214.15 L1526.7 1214.15 L1526.11 1214.15 L1525.52 1214.15 L1524.94 1214.15 L1524.35 1214.15 L1523.77 1214.15 L1523.18 1214.15 L1522.59 1214.15 L1522.01 1214.15 L1521.42 1214.15 L1520.83 1214.15 L1520.25 1214.15 L1519.66 1214.15 L1519.07 1214.15 L1518.49 1214.15 L1517.9 1214.15 L1517.32 1214.15 L1516.73 1214.15 L1516.14 1214.15 L1515.56 1214.15 L1514.97 1214.15 L1514.38 1214.15 L1513.8 1214.15 L1513.21 1214.15 L1512.62 1214.15 L1512.04 1214.15 L1511.45 1214.15 L1510.86 1214.15 L1510.28 1214.15 L1509.69 1214.15 L1509.11 1214.15 L1508.52 1214.15 L1507.93 1214.15 L1507.35 1214.15 L1506.76 1214.15 L1506.17 1214.15 L1505.59 1214.15 L1505 1214.15 L1504.41 1214.15 L1503.83 1214.15 L1503.24 1214.15 L1502.65 1214.15 L1502.07 1214.15 L1501.48 1214.15 L1500.9 1214.15 L1500.31 1214.15 L1499.72 1214.15 L1499.14 1214.15 L1498.55 1214.15 L1497.96 1214.15 L1497.38 1214.15 L1496.79 1214.15 L1496.2 1214.15 L1495.62 1214.15 L1495.03 1214.15 L1494.45 1214.15 L1493.86 1214.15 L1493.27 1214.15 L1492.69 1214.15 L1492.1 1214.15 L1491.51 1214.15 L1490.93 1214.15 L1490.34 1214.15 L1489.75 1214.15 L1489.17 1214.15 L1488.58 1214.15 L1487.99 1214.15 L1487.41 1214.15 L1486.82 1214.15 L1486.24 1214.15 L1485.65 1214.15 L1485.06 1214.15 L1484.48 1214.15 L1483.89 1214.15 L1483.3 1214.15 L1482.72 1214.15 L1482.13 1214.15 L1481.54 1214.15 L1480.96 1214.15 L1480.37 1214.15 L1479.78 1214.15 L1479.2 1214.15 L1478.61 1214.15 L1478.03 1214.15 L1477.44 1214.15 L1476.85 1214.15 L1476.27 1214.15 L1475.68 1214.15 L1475.09 1214.15 L1474.51 1214.15 L1473.92 1214.15 L1473.33 1214.15 L1472.75 1214.15 L1472.16 1214.15 L1471.57 1214.15 L1470.99 1214.15 L1470.4 1214.15 L1469.82 1214.15 L1469.23 1214.15 L1468.64 1214.15 L1468.06 1214.15 L1467.47 1214.15 L1466.88 1214.15 L1466.3 1214.15 L1465.71 1214.15 L1465.12 1214.15 L1464.54 1214.15 L1463.95 1214.15 L1463.37 1214.15 L1462.78 1214.15 L1462.19 1214.15 L1461.61 1214.15 L1461.02 1214.15 L1460.43 1214.15 L1459.85 1214.15 L1459.26 1214.15 L1458.67 1214.15 L1458.09 1214.15 L1457.5 1214.15 L1456.91 1214.15 L1456.33 1214.15 L1455.74 1214.15 L1455.16 1214.15 L1454.57 1214.15 L1453.98 1214.15 L1453.4 1214.15 L1452.81 1214.15 L1452.22 1214.15 L1451.64 1214.15 L1451.05 1214.15 L1450.46 1214.15 L1449.88 1214.15 L1449.29 1214.15 L1448.7 1214.15 L1448.12 1214.15 L1447.53 1214.15 L1446.95 1214.15 L1446.36 1214.15 L1445.77 1214.15 L1445.19 1214.15 L1444.6 1214.15 L1444.01 1214.15 L1443.43 1214.15 L1442.84 1214.15 L1442.25 1214.15 L1441.67 1214.15 L1441.08 1214.15 L1440.5 1214.15 L1439.91 1214.15 L1439.32 1214.15 L1438.74 1214.15 L1438.15 1214.15 L1437.56 1214.15 L1436.98 1214.15 L1436.39 1214.15 L1435.8 1214.15 L1435.22 1214.15 L1434.63 1214.15 L1434.04 1214.15 L1433.46 1214.15 L1432.87 1214.15 L1432.29 1214.15 L1431.7 1214.15 L1431.11 1214.15 L1430.53 1214.15 L1429.94 1214.15 L1429.35 1214.15 L1428.77 1214.15 L1428.18 1214.15 L1427.59 1214.15 L1427.01 1214.15 L1426.42 1214.15 L1425.83 1214.15 L1425.25 1214.15 L1424.66 1214.15 L1424.08 1214.15 L1423.49 1214.15 L1422.9 1214.15 L1422.32 1214.15 L1421.73 1214.15 L1421.14 1214.15 L1420.56 1214.15 L1419.97 1214.15 L1419.38 1214.15 L1418.8 1214.15 L1418.21 1214.15 L1417.63 1214.15 L1417.04 1214.15 L1416.45 1214.15 L1415.87 1214.15 L1415.28 1214.15 L1414.69 1214.15 L1414.11 1214.15 L1413.52 1214.15 L1412.93 1214.15 L1412.35 1214.15 L1411.76 1214.15 L1411.17 1214.15 L1410.59 1214.15 L1410 1214.15 L1409.42 1214.15 L1408.83 1214.15 L1408.24 1214.15 L1407.66 1214.15 L1407.07 1214.15 L1406.48 1214.15 L1405.9 1214.15 L1405.31 1214.15 L1404.72 1214.15 L1404.14 1214.15 L1403.55 1214.15 L1402.96 1214.15 L1402.38 1214.15 L1401.79 1214.15 L1401.21 1214.15 L1400.62 1214.15 L1400.03 1214.15 L1399.45 1214.15 L1398.86 1214.15 L1398.27 1214.15 L1397.69 1214.15 L1397.1 1214.15 L1396.51 1214.15 L1395.93 1214.15 L1395.34 1214.15 L1394.75 1214.15 L1394.17 1214.15 L1393.58 1214.15 L1393 1214.15 L1392.41 1214.15 L1391.82 1214.15 L1391.24 1214.15 L1390.65 1214.15 L1390.06 1214.15 L1389.48 1214.15 L1388.89 1214.15 L1388.3 1214.15 L1387.72 1214.15 L1387.13 1214.15 L1386.55 1214.15 L1385.96 1214.15 L1385.37 1214.15 L1384.79 1214.15 L1384.2 1214.15 L1383.61 1214.15 L1383.03 1214.15 L1382.44 1214.15 L1381.85 1214.15 L1381.27 1214.15 L1380.68 1214.15 L1380.09 1214.15 L1379.51 1214.15 L1378.92 1214.15 L1378.34 1214.15 L1377.75 1214.15 L1377.16 1214.15 L1376.58 1214.15 L1375.99 1214.15 L1375.4 1214.15 L1374.82 1214.15 L1374.23 1214.15 L1373.64 1214.15 L1373.06 1214.15 L1372.47 1214.15 L1371.88 1214.15 L1371.3 1214.15 L1370.71 1214.15 L1370.13 1214.15 L1369.54 1214.15 L1368.95 1214.15 L1368.37 1214.15 L1367.78 1214.15 L1367.19 1214.15 L1366.61 1214.15 L1366.02 1214.15 L1365.43 1214.15 L1364.85 1214.15 L1364.26 1214.15 L1363.68 1214.15 L1363.09 1214.15 L1362.5 1214.15 L1361.92 1214.15 L1361.33 1214.15 L1360.74 1214.15 L1360.16 1214.15 L1359.57 1214.15 L1358.98 1214.15 L1358.4 1214.15 L1357.81 1214.15 L1357.22 1214.15 L1356.64 1214.15 L1356.05 1214.15 L1355.47 1214.15 L1354.88 1214.15 L1354.29 1214.15 L1353.71 1214.15 L1353.12 1214.15 L1352.53 1214.15 L1351.95 1214.15 L1351.36 1214.15 L1350.77 1214.15 L1350.19 1214.15 L1349.6 1214.15 L1349.01 1214.15 L1348.43 1214.15 L1347.84 1214.15 L1347.26 1214.15 L1346.67 1214.15 L1346.08 1214.15 L1345.5 1214.15 L1344.91 1214.15 L1344.32 1214.15 L1343.74 1214.15 L1343.15 1214.15 L1342.56 1214.15 L1341.98 1214.15 L1341.39 1214.15 L1340.8 1214.15 L1340.22 1214.15 L1339.63 1214.15 L1339.05 1214.15 L1338.46 1214.15 L1337.87 1214.15 L1337.29 1214.15 L1336.7 1214.15 L1336.11 1214.15 L1335.53 1214.15 L1334.94 1214.15 L1334.35 1214.15 L1333.77 1214.15 L1333.18 1214.15 L1332.6 1214.15 L1332.01 1214.15 L1331.42 1214.15 L1330.84 1214.15 L1330.25 1214.15 L1329.66 1214.15 L1329.08 1214.15 L1328.49 1214.15 L1327.9 1214.15 L1327.32 1214.15 L1326.73 1214.15 L1326.14 1214.15 L1325.56 1214.15 L1324.97 1214.15 L1324.39 1214.15 L1323.8 1214.15 L1323.21 1214.15 L1322.63 1214.15 L1322.04 1214.15 L1321.45 1214.15 L1320.87 1214.15 L1320.28 1214.15 L1319.69 1214.15 L1319.11 1214.15 L1318.52 1214.15 L1317.93 1214.15 L1317.35 1214.15 L1316.76 1214.15 L1316.18 1214.15 L1315.59 1214.15 L1315 1214.15 L1314.42 1214.15 L1313.83 1214.15 L1313.24 1214.15 L1312.66 1214.15 L1312.07 1214.15 L1311.48 1214.15 L1310.9 1214.15 L1310.31 1214.15 L1309.73 1214.15 L1309.14 1214.15 L1308.55 1214.15 L1307.97 1214.15 L1307.38 1214.15 L1306.79 1214.15 L1306.21 1214.15 L1305.62 1214.15 L1305.03 1214.15 L1304.45 1214.15 L1303.86 1214.15 L1303.27 1214.15 L1302.69 1214.15 L1302.1 1214.15 L1301.52 1214.15 L1300.93 1214.15 L1300.34 1214.15 L1299.76 1214.15 L1299.17 1214.15 L1298.58 1214.15 L1298 1214.15 L1297.41 1214.15 L1296.82 1214.15 L1296.24 1214.15 L1295.65 1214.15 L1295.06 1214.15 L1294.48 1214.15 L1293.89 1214.15 L1293.31 1214.15 L1292.72 1214.15 L1292.13 1214.15 L1291.55 1214.15 L1290.96 1214.15 L1290.37 1214.15 L1289.79 1214.15 L1289.2 1214.15 L1288.61 1214.15 L1288.03 1214.15 L1287.44 1214.15 L1286.86 1214.15 L1286.27 1214.15 L1285.68 1214.15 L1285.1 1214.15 L1284.51 1214.15 L1283.92 1214.15 L1283.34 1214.15 L1282.75 1214.15 L1282.16 1214.15 L1281.58 1214.15 L1280.99 1214.15 L1280.4 1214.15 L1279.82 1214.15 L1279.23 1214.15 L1278.65 1214.15 L1278.06 1214.15 L1277.47 1214.15 L1276.89 1214.15 L1276.3 1214.15 L1275.71 1214.15 L1275.13 1214.15 L1274.54 1214.15 L1273.95 1214.15 L1273.37 1214.15 L1272.78 1214.15 L1272.19 1214.15 L1271.61 1214.15 L1271.02 1214.15 L1270.44 1214.15 L1269.85 1214.15 L1269.26 1214.15 L1268.68 1214.15 L1268.09 1214.15 L1267.5 1214.15 L1266.92 1214.15 L1266.33 1214.15 L1265.74 1214.15 L1265.16 1214.15 L1264.57 1214.15 L1263.98 1214.15 L1263.4 1214.15 L1262.81 1214.15 L1262.23 1214.15 L1261.64 1214.15 L1261.05 1214.15 L1260.47 1214.15 L1259.88 1214.15 L1259.29 1214.15 L1258.71 1214.15 L1258.12 1214.15 L1257.53 1214.15 L1256.95 1214.15 L1256.36 1214.15 L1255.78 1214.15 L1255.19 1214.15 L1254.6 1214.15 L1254.02 1214.15 L1253.43 1214.15 L1252.84 1214.15 L1252.26 1214.15 L1251.67 1214.15 L1251.08 1214.15 L1250.5 1214.15 L1249.91 1214.15 L1249.32 1214.15 L1248.74 1214.15 L1248.15 1214.15 L1247.57 1214.15 L1246.98 1214.15 L1246.39 1214.15 L1245.81 1214.15 L1245.22 1214.15 L1244.63 1214.15 L1244.05 1214.15 L1243.46 1214.15 L1242.87 1214.15 L1242.29 1214.15 L1241.7 1214.15 L1241.11 1214.15 L1240.53 1214.15 L1239.94 1214.15 L1239.36 1214.15 L1238.77 1214.15 L1238.18 1214.15 L1237.6 1214.15 L1237.01 1214.15 L1236.42 1214.15 L1235.84 1214.15 L1235.25 1214.15 L1234.66 1214.15 L1234.08 1214.15 L1233.49 1214.15 L1232.91 1214.15 L1232.32 1214.15 L1231.73 1214.15 L1231.15 1214.15 L1230.56 1214.15 L1229.97 1214.15 L1229.39 1214.15 L1228.8 1214.15 L1228.21 1214.15 L1227.63 1214.15 L1227.04 1214.15 L1226.45 1214.15 L1225.87 1214.15 L1225.28 1214.15 L1224.7 1214.15 L1224.11 1214.15 L1223.52 1214.15 L1222.94 1214.15 L1222.35 1214.15 L1221.76 1214.15 L1221.18 1214.15 L1220.59 1214.15 L1220 1214.15 L1219.42 1214.15 L1218.83 1214.15 L1218.24 1214.15 L1217.66 1214.15 L1217.07 1214.15 L1216.49 1214.15 L1215.9 1214.15 L1215.31 1214.15 L1214.73 1214.15 L1214.14 1214.15 L1213.55 1214.15 L1212.97 1214.15 L1212.38 1214.15 L1211.79 1214.15 L1211.21 1214.15 L1210.62 1214.15 L1210.03 1214.15 L1209.45 1214.15 L1208.86 1214.15 L1208.28 1214.15 L1207.69 1214.15 L1207.1 1214.15 L1206.52 1214.15 L1205.93 1214.15 L1205.34 1214.15 L1204.76 1214.15 L1204.17 1214.15 L1203.58 1214.15 L1203 1214.15 L1202.41 1214.15 L1201.83 1214.15 L1201.24 1214.15 L1200.65 1214.15 L1200.07 1214.15 L1199.48 1214.15 L1198.89 1214.15 L1198.31 1214.15 L1197.72 1214.15 L1197.13 1214.15 L1196.55 1214.15 L1195.96 1214.15 L1195.37 1214.15 L1194.79 1214.15 L1194.2 1214.15 L1193.62 1214.15 L1193.03 1214.15 L1192.44 1214.15 L1191.86 1214.15 L1191.27 1214.15 L1190.68 1214.15 L1190.1 1214.15 L1189.51 1214.15 L1188.92 1214.15 L1188.34 1214.15 L1187.75 1214.15 L1187.16 1214.15 L1186.58 1214.15 L1185.99 1214.15 L1185.41 1214.15 L1184.82 1214.15 L1184.23 1214.15 L1183.65 1214.15 L1183.06 1214.15 L1182.47 1214.15 L1181.89 1214.15 L1181.3 1214.15 L1180.71 1214.15 L1180.13 1214.15 L1179.54 1214.15 L1178.96 1214.15 L1178.37 1214.15 L1177.78 1214.15 L1177.2 1214.15 L1176.61 1214.15 L1176.02 1214.15 L1175.44 1214.15 L1174.85 1214.15 L1174.26 1214.15 L1173.68 1214.15 L1173.09 1214.15 L1172.5 1214.15 L1171.92 1214.15 L1171.33 1214.15 L1170.75 1214.15 L1170.16 1214.15 L1169.57 1214.15 L1168.99 1214.15 L1168.4 1214.15 L1167.81 1214.15 L1167.23 1214.15 L1166.64 1214.15 L1166.05 1214.15 L1165.47 1214.15 L1164.88 1214.15 L1164.29 1214.15 L1163.71 1214.15 L1163.12 1214.15 L1162.54 1214.15 L1161.95 1214.15 L1161.36 1214.15 L1160.78 1214.15 L1160.19 1214.15 L1159.6 1214.15 L1159.02 1214.15 L1158.43 1214.15 L1157.84 1214.15 L1157.26 1214.15 L1156.67 1214.15 L1156.09 1214.15 L1155.5 1214.15 L1154.91 1214.15 L1154.33 1214.15 L1153.74 1214.15 L1153.15 1214.15 L1152.57 1214.15 L1151.98 1214.15 L1151.39 1214.15 L1150.81 1214.15 L1150.22 1214.15 L1149.63 1214.15 L1149.05 1214.15 L1148.46 1214.15 L1147.88 1214.15 L1147.29 1214.15 L1146.7 1214.15 L1146.12 1214.15 L1145.53 1214.15 L1144.94 1214.15 L1144.36 1214.15 L1143.77 1214.15 L1143.18 1214.15 L1142.6 1214.15 L1142.01 1214.15 L1141.42 1214.15 L1140.84 1214.15 L1140.25 1214.15 L1139.67 1214.15 L1139.08 1214.15 L1138.49 1214.15 L1137.91 1214.15 L1137.32 1214.15 L1136.73 1214.15 L1136.15 1214.15 L1135.56 1214.15 L1134.97 1214.15 L1134.39 1214.15 L1133.8 1214.15 L1133.21 1214.15 L1132.63 1214.15 L1132.04 1214.15 L1131.46 1214.15 L1130.87 1214.15 L1130.28 1214.15 L1129.7 1214.15 L1129.11 1214.15 L1128.52 1214.15 L1127.94 1214.15 L1127.35 1214.15 L1126.76 1214.15 L1126.18 1214.15 L1125.59 1214.15 L1125.01 1214.15 L1124.42 1214.15 L1123.83 1214.15 L1123.25 1214.15 L1122.66 1214.15 L1122.07 1214.15 L1121.49 1214.15 L1120.9 1214.15 L1120.31 1214.15 L1119.73 1214.15 L1119.14 1214.15 L1118.55 1214.15 L1117.97 1214.15 L1117.38 1214.15 L1116.8 1214.15 L1116.21 1214.15 L1115.62 1214.15 L1115.04 1214.15 L1114.45 1214.15 L1113.86 1214.15 L1113.28 1214.15 L1112.69 1214.15 L1112.1 1214.15 L1111.52 1214.15 L1110.93 1214.15 L1110.34 1214.15 L1109.76 1214.15 L1109.17 1214.15 L1108.59 1214.15 L1108 1214.15 L1107.41 1214.15 L1106.83 1214.15 L1106.24 1214.15 L1105.65 1214.15 L1105.07 1214.15 L1104.48 1214.15 L1103.89 1214.15 L1103.31 1214.15 L1102.72 1214.15 L1102.14 1214.15 L1101.55 1214.15 L1100.96 1214.15 L1100.38 1214.15 L1099.79 1214.15 L1099.2 1214.15 L1098.62 1214.15 L1098.03 1214.15 L1097.44 1214.15 L1096.86 1214.15 L1096.27 1214.15 L1095.68 1214.15 L1095.1 1214.15 L1094.51 1214.15 L1093.93 1214.15 L1093.34 1214.15 L1092.75 1214.15 L1092.17 1214.15 L1091.58 1214.15 L1090.99 1214.15 L1090.41 1214.15 L1089.82 1214.15 L1089.23 1214.15 L1088.65 1214.15 L1088.06 1214.15 L1087.47 1214.15 L1086.89 1214.15 L1086.3 1214.15 L1085.72 1214.15 L1085.13 1214.15 L1084.54 1214.15 L1083.96 1214.15 L1083.37 1214.15 L1082.78 1214.15 L1082.2 1214.15 L1081.61 1214.15 L1081.02 1214.15 L1080.44 1214.15 L1079.85 1214.15 L1079.26 1214.15 L1078.68 1214.15 L1078.09 1214.15 L1077.51 1214.15 L1076.92 1214.15 L1076.33 1214.15 L1075.75 1214.15 L1075.16 1214.15 L1074.57 1214.15 L1073.99 1214.15 L1073.4 1214.15 L1072.81 1214.15 L1072.23 1214.15 L1071.64 1214.15 L1071.06 1214.15 L1070.47 1214.15 L1069.88 1214.15 L1069.3 1214.15 L1068.71 1214.15 L1068.12 1214.15 L1067.54 1214.15 L1066.95 1214.15 L1066.36 1214.15 L1065.78 1214.15 L1065.19 1214.15 L1064.6 1214.15 L1064.02 1214.15 L1063.43 1214.15 L1062.85 1214.15 L1062.26 1214.15 L1061.67 1214.15 L1061.09 1214.15 L1060.5 1214.15 L1059.91 1214.15 L1059.33 1214.15 L1058.74 1214.15 L1058.15 1214.15 L1057.57 1214.15 L1056.98 1214.15 L1056.39 1214.15 L1055.81 1214.15 L1055.22 1214.15 L1054.64 1214.15 L1054.05 1214.15 L1053.46 1214.15 L1052.88 1214.15 L1052.29 1214.15 L1051.7 1214.15 L1051.12 1214.15 L1050.53 1214.15 L1049.94 1214.15 L1049.36 1214.15 L1048.77 1214.15 L1048.19 1214.15 L1047.6 1214.15 L1047.01 1214.15 L1046.43 1214.15 L1045.84 1214.15 L1045.25 1214.15 L1044.67 1214.15 L1044.08 1214.15 L1043.49 1214.15 L1042.91 1214.15 L1042.32 1214.15 L1041.73 1214.15 L1041.15 1214.15 L1040.56 1214.15 L1039.98 1214.15 L1039.39 1214.15 L1038.8 1214.15 L1038.22 1214.15 L1037.63 1214.15 L1037.04 1214.15 L1036.46 1214.15 L1035.87 1214.15 L1035.28 1214.15 L1034.7 1214.15 L1034.11 1214.15 L1033.52 1214.15 L1032.94 1214.15 L1032.35 1214.15 L1031.77 1214.15 L1031.18 1214.15 L1030.59 1214.15 L1030.01 1214.15 L1029.42 1214.15 L1028.83 1214.15 L1028.25 1214.15 L1027.66 1214.15 L1027.07 1214.15 L1026.49 1214.15 L1025.9 1214.15 L1025.32 1214.15 L1024.73 1214.15 L1024.14 1214.15 L1023.56 1214.15 L1022.97 1214.15 L1022.38 1214.15 L1021.8 1214.15 L1021.21 1214.15 L1020.62 1214.15 L1020.04 1214.15 L1019.45 1214.15 L1018.86 1214.15 L1018.28 1214.15 L1017.69 1214.15 L1017.11 1214.15 L1016.52 1214.15 L1015.93 1214.15 L1015.35 1214.15 L1014.76 1214.15 L1014.17 1214.15 L1013.59 1214.15 L1013 1214.15 L1012.41 1214.15 L1011.83 1214.15 L1011.24 1214.15 L1010.65 1214.15 L1010.07 1214.15 L1009.48 1214.15 L1008.9 1214.15 L1008.31 1214.15 L1007.72 1214.15 L1007.14 1214.15 L1006.55 1214.15 L1005.96 1214.15 L1005.38 1214.15 L1004.79 1214.15 L1004.2 1214.15 L1003.62 1214.15 L1003.03 1214.15 L1002.44 1214.15 L1001.86 1214.15 L1001.27 1214.15 L1000.69 1214.15 L1000.1 1214.15 L999.513 1214.15 L998.926 1214.15 L998.34 1214.15 L997.754 1214.15 L997.167 1214.15 L996.581 1214.15 L995.994 1214.15 L995.408 1214.15 L994.822 1214.15 L994.235 1214.15 L993.649 1214.15 L993.062 1214.15 L992.476 1214.15 L991.889 1214.15 L991.303 1214.15 L990.717 1214.15 L990.13 1214.15 L989.544 1214.15 L988.957 1214.15 L988.371 1214.15 L987.785 1214.15 L987.198 1214.15 L986.612 1214.15 L986.025 1214.15  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1214.22 986.612,1214.22 987.198,1214.22 987.785,1214.22 988.371,1214.22 988.957,1214.22 989.544,1214.22 990.13,1214.22 990.717,1214.22 991.303,1214.22 991.889,1214.22 992.476,1214.22 993.062,1214.22 993.649,1214.22 994.235,1214.22 994.822,1214.22 995.408,1214.22 995.994,1214.22 996.581,1214.22 997.167,1214.22 997.754,1214.22 998.34,1214.22 998.926,1214.22 999.513,1214.22 1000.1,1214.22 1000.69,1214.22 1001.27,1214.22 1001.86,1214.22 1002.44,1214.22 1003.03,1214.22 1003.62,1214.22 1004.2,1214.22 1004.79,1214.22 1005.38,1214.22 1005.96,1214.22 1006.55,1214.22 1007.14,1214.22 1007.72,1214.22 1008.31,1214.22 1008.9,1214.22 1009.48,1214.22 1010.07,1214.22 1010.65,1214.22 1011.24,1214.22 1011.83,1214.22 1012.41,1214.22 1013,1214.22 1013.59,1214.22 1014.17,1214.22 1014.76,1214.22 1015.35,1214.22 1015.93,1214.22 1016.52,1214.22 1017.11,1214.22 1017.69,1214.22 1018.28,1214.22 1018.86,1214.22 1019.45,1214.22 1020.04,1214.22 1020.62,1214.22 1021.21,1214.22 1021.8,1214.22 1022.38,1214.22 1022.97,1214.22 1023.56,1214.22 1024.14,1214.22 1024.73,1214.22 1025.32,1214.22 1025.9,1214.22 1026.49,1214.22 1027.07,1214.22 1027.66,1214.22 1028.25,1214.22 1028.83,1214.22 1029.42,1214.22 1030.01,1214.22 1030.59,1214.22 1031.18,1214.22 1031.77,1214.22 1032.35,1214.22 1032.94,1214.22 1033.52,1214.22 1034.11,1214.22 1034.7,1214.22 1035.28,1214.22 1035.87,1214.22 1036.46,1214.22 1037.04,1214.22 1037.63,1214.22 1038.22,1214.22 1038.8,1214.22 1039.39,1214.22 1039.98,1214.22 1040.56,1214.22 1041.15,1214.22 1041.73,1214.22 1042.32,1214.22 1042.91,1214.22 1043.49,1214.22 1044.08,1214.22 1044.67,1214.22 1045.25,1214.22 1045.84,1214.22 1046.43,1214.22 1047.01,1214.22 1047.6,1214.22 1048.19,1214.22 1048.77,1214.22 1049.36,1214.22 1049.94,1214.22 1050.53,1214.22 1051.12,1214.22 1051.7,1214.22 1052.29,1214.22 1052.88,1214.22 1053.46,1214.22 1054.05,1214.22 1054.64,1214.22 1055.22,1214.22 1055.81,1214.22 1056.39,1214.22 1056.98,1214.22 1057.57,1214.22 1058.15,1214.22 1058.74,1214.22 1059.33,1214.22 1059.91,1214.22 1060.5,1214.22 1061.09,1214.22 1061.67,1214.22 1062.26,1214.22 1062.85,1214.22 1063.43,1214.22 1064.02,1214.22 1064.6,1214.22 1065.19,1214.22 1065.78,1214.22 1066.36,1214.22 1066.95,1214.22 1067.54,1214.22 1068.12,1214.22 1068.71,1214.22 1069.3,1214.22 1069.88,1214.22 1070.47,1214.22 1071.06,1214.22 1071.64,1214.22 1072.23,1214.22 1072.81,1214.22 1073.4,1214.22 1073.99,1214.22 1074.57,1214.22 1075.16,1214.22 1075.75,1214.22 1076.33,1214.22 1076.92,1214.22 1077.51,1214.22 1078.09,1214.22 1078.68,1214.22 1079.26,1214.22 1079.85,1214.22 1080.44,1214.22 1081.02,1214.22 1081.61,1214.22 1082.2,1214.22 1082.78,1214.22 1083.37,1214.22 1083.96,1214.22 1084.54,1214.22 1085.13,1214.22 1085.72,1214.22 1086.3,1214.22 1086.89,1214.22 1087.47,1214.22 1088.06,1214.22 1088.65,1214.22 1089.23,1214.22 1089.82,1214.22 1090.41,1214.22 1090.99,1214.22 1091.58,1214.22 1092.17,1214.22 1092.75,1214.22 1093.34,1214.22 1093.93,1214.22 1094.51,1214.22 1095.1,1214.22 1095.68,1214.22 1096.27,1214.22 1096.86,1214.22 1097.44,1214.22 1098.03,1214.22 1098.62,1214.22 1099.2,1214.22 1099.79,1214.22 1100.38,1214.22 1100.96,1214.22 1101.55,1214.22 1102.14,1214.22 1102.72,1214.22 1103.31,1214.22 1103.89,1214.22 1104.48,1214.22 1105.07,1214.22 1105.65,1214.22 1106.24,1214.22 1106.83,1214.22 1107.41,1214.22 1108,1214.22 1108.59,1214.22 1109.17,1214.22 1109.76,1214.22 1110.34,1214.22 1110.93,1214.22 1111.52,1214.22 1112.1,1214.22 1112.69,1214.22 1113.28,1214.22 1113.86,1214.22 1114.45,1214.22 1115.04,1214.22 1115.62,1214.22 1116.21,1214.22 1116.8,1214.22 1117.38,1214.22 1117.97,1214.22 1118.55,1214.22 1119.14,1214.22 1119.73,1214.22 1120.31,1214.22 1120.9,1214.22 1121.49,1214.22 1122.07,1214.22 1122.66,1214.22 1123.25,1214.22 1123.83,1214.22 1124.42,1214.22 1125.01,1214.22 1125.59,1214.22 1126.18,1214.22 1126.76,1214.22 1127.35,1214.22 1127.94,1214.22 1128.52,1214.22 1129.11,1214.22 1129.7,1214.22 1130.28,1214.22 1130.87,1214.22 1131.46,1214.22 1132.04,1214.22 1132.63,1214.22 1133.21,1214.22 1133.8,1214.22 1134.39,1214.22 1134.97,1214.22 1135.56,1214.22 1136.15,1214.22 1136.73,1214.22 1137.32,1214.22 1137.91,1214.22 1138.49,1214.22 1139.08,1214.22 1139.67,1214.22 1140.25,1214.22 1140.84,1214.22 1141.42,1214.22 1142.01,1214.22 1142.6,1214.22 1143.18,1214.22 1143.77,1214.22 1144.36,1214.22 1144.94,1214.22 1145.53,1214.22 1146.12,1214.22 1146.7,1214.22 1147.29,1214.22 1147.88,1214.22 1148.46,1214.22 1149.05,1214.22 1149.63,1214.22 1150.22,1214.22 1150.81,1214.22 1151.39,1214.22 1151.98,1214.22 1152.57,1214.22 1153.15,1214.22 1153.74,1214.22 1154.33,1214.22 1154.91,1214.22 1155.5,1214.22 1156.09,1214.22 1156.67,1214.22 1157.26,1214.22 1157.84,1214.22 1158.43,1214.22 1159.02,1214.22 1159.6,1214.22 1160.19,1214.22 1160.78,1214.22 1161.36,1214.22 1161.95,1214.22 1162.54,1214.22 1163.12,1214.22 1163.71,1214.22 1164.29,1214.22 1164.88,1214.22 1165.47,1214.22 1166.05,1214.22 1166.64,1214.22 1167.23,1214.22 1167.81,1214.22 1168.4,1214.22 1168.99,1214.22 1169.57,1214.22 1170.16,1214.22 1170.75,1214.22 1171.33,1214.22 1171.92,1214.22 1172.5,1214.22 1173.09,1214.22 1173.68,1214.22 1174.26,1214.22 1174.85,1214.22 1175.44,1214.22 1176.02,1214.22 1176.61,1214.22 1177.2,1214.22 1177.78,1214.22 1178.37,1214.22 1178.96,1214.22 1179.54,1214.22 1180.13,1214.22 1180.71,1214.22 1181.3,1214.22 1181.89,1214.22 1182.47,1214.22 1183.06,1214.22 1183.65,1214.22 1184.23,1214.22 1184.82,1214.22 1185.41,1214.22 1185.99,1214.22 1186.58,1214.22 1187.16,1214.22 1187.75,1214.22 1188.34,1214.22 1188.92,1214.22 1189.51,1214.22 1190.1,1214.22 1190.68,1214.22 1191.27,1214.22 1191.86,1214.22 1192.44,1214.22 1193.03,1214.22 1193.62,1214.22 1194.2,1214.22 1194.79,1214.22 1195.37,1214.22 1195.96,1214.22 1196.55,1214.22 1197.13,1214.22 1197.72,1214.22 1198.31,1214.22 1198.89,1214.22 1199.48,1214.22 1200.07,1214.22 1200.65,1214.22 1201.24,1214.22 1201.83,1214.22 1202.41,1214.22 1203,1214.22 1203.58,1214.22 1204.17,1214.22 1204.76,1214.22 1205.34,1214.22 1205.93,1214.22 1206.52,1214.22 1207.1,1214.22 1207.69,1214.22 1208.28,1214.22 1208.86,1214.22 1209.45,1214.22 1210.03,1214.22 1210.62,1214.22 1211.21,1214.22 1211.79,1214.22 1212.38,1214.22 1212.97,1214.22 1213.55,1214.22 1214.14,1214.22 1214.73,1214.22 1215.31,1214.22 1215.9,1214.22 1216.49,1214.22 1217.07,1214.22 1217.66,1214.22 1218.24,1214.22 1218.83,1214.22 1219.42,1214.22 1220,1214.22 1220.59,1214.22 1221.18,1214.22 1221.76,1214.22 1222.35,1214.22 1222.94,1214.22 1223.52,1214.22 1224.11,1214.22 1224.7,1214.22 1225.28,1214.22 1225.87,1214.22 1226.45,1214.22 1227.04,1214.22 1227.63,1214.22 1228.21,1214.22 1228.8,1214.22 1229.39,1214.22 1229.97,1214.22 1230.56,1214.22 1231.15,1214.22 1231.73,1214.22 1232.32,1214.22 1232.91,1214.22 1233.49,1214.22 1234.08,1214.22 1234.66,1214.22 1235.25,1214.22 1235.84,1214.22 1236.42,1214.22 1237.01,1214.22 1237.6,1214.22 1238.18,1214.22 1238.77,1214.22 1239.36,1214.22 1239.94,1214.22 1240.53,1214.22 1241.11,1214.22 1241.7,1214.22 1242.29,1214.22 1242.87,1214.22 1243.46,1214.22 1244.05,1214.22 1244.63,1214.22 1245.22,1214.22 1245.81,1214.22 1246.39,1214.22 1246.98,1214.22 1247.57,1214.22 1248.15,1214.22 1248.74,1214.22 1249.32,1214.22 1249.91,1214.22 1250.5,1214.22 1251.08,1214.22 1251.67,1214.22 1252.26,1214.22 1252.84,1214.22 1253.43,1214.22 1254.02,1214.22 1254.6,1214.22 1255.19,1214.22 1255.78,1214.22 1256.36,1214.22 1256.95,1214.22 1257.53,1214.22 1258.12,1214.22 1258.71,1214.22 1259.29,1214.22 1259.88,1214.22 1260.47,1214.22 1261.05,1214.22 1261.64,1214.22 1262.23,1214.22 1262.81,1214.22 1263.4,1214.22 1263.98,1214.22 1264.57,1214.22 1265.16,1214.22 1265.74,1214.22 1266.33,1214.22 1266.92,1214.22 1267.5,1214.22 1268.09,1214.22 1268.68,1214.22 1269.26,1214.22 1269.85,1214.22 1270.44,1214.22 1271.02,1214.22 1271.61,1214.22 1272.19,1214.22 1272.78,1214.22 1273.37,1214.22 1273.95,1214.22 1274.54,1214.22 1275.13,1214.22 1275.71,1214.22 1276.3,1214.22 1276.89,1214.22 1277.47,1214.22 1278.06,1214.22 1278.65,1214.22 1279.23,1214.22 1279.82,1214.22 1280.4,1214.22 1280.99,1214.22 1281.58,1214.22 1282.16,1214.22 1282.75,1214.22 1283.34,1214.22 1283.92,1214.22 1284.51,1214.22 1285.1,1214.22 1285.68,1214.22 1286.27,1214.22 1286.86,1214.22 1287.44,1214.22 1288.03,1214.22 1288.61,1214.22 1289.2,1214.22 1289.79,1214.22 1290.37,1214.22 1290.96,1214.22 1291.55,1214.22 1292.13,1214.22 1292.72,1214.22 1293.31,1214.22 1293.89,1214.22 1294.48,1214.22 1295.06,1214.22 1295.65,1214.22 1296.24,1214.22 1296.82,1214.22 1297.41,1214.22 1298,1214.22 1298.58,1214.22 1299.17,1214.22 1299.76,1214.22 1300.34,1214.22 1300.93,1214.22 1301.52,1214.22 1302.1,1214.22 1302.69,1214.22 1303.27,1214.22 1303.86,1214.22 1304.45,1214.22 1305.03,1214.22 1305.62,1214.22 1306.21,1214.22 1306.79,1214.22 1307.38,1214.22 1307.97,1214.22 1308.55,1214.22 1309.14,1214.22 1309.73,1214.22 1310.31,1214.22 1310.9,1214.22 1311.48,1214.22 1312.07,1214.22 1312.66,1214.22 1313.24,1214.22 1313.83,1214.22 1314.42,1214.22 1315,1214.22 1315.59,1214.22 1316.18,1214.22 1316.76,1214.22 1317.35,1214.22 1317.93,1214.22 1318.52,1214.22 1319.11,1214.22 1319.69,1214.22 1320.28,1214.22 1320.87,1214.22 1321.45,1214.22 1322.04,1214.22 1322.63,1214.22 1323.21,1214.22 1323.8,1214.22 1324.39,1214.22 1324.97,1214.22 1325.56,1214.22 1326.14,1214.22 1326.73,1214.22 1327.32,1214.22 1327.9,1214.22 1328.49,1214.22 1329.08,1214.22 1329.66,1214.22 1330.25,1214.22 1330.84,1214.22 1331.42,1214.22 1332.01,1214.22 1332.6,1214.22 1333.18,1214.22 1333.77,1214.22 1334.35,1214.22 1334.94,1214.22 1335.53,1214.22 1336.11,1214.22 1336.7,1214.22 1337.29,1214.22 1337.87,1214.22 1338.46,1214.22 1339.05,1214.22 1339.63,1214.22 1340.22,1214.22 1340.8,1214.22 1341.39,1214.22 1341.98,1214.22 1342.56,1214.22 1343.15,1214.22 1343.74,1214.22 1344.32,1214.22 1344.91,1214.22 1345.5,1214.22 1346.08,1214.22 1346.67,1214.22 1347.26,1214.22 1347.84,1214.22 1348.43,1214.22 1349.01,1214.22 1349.6,1214.22 1350.19,1214.22 1350.77,1214.22 1351.36,1214.22 1351.95,1214.22 1352.53,1214.22 1353.12,1214.22 1353.71,1214.22 1354.29,1214.22 1354.88,1214.22 1355.47,1214.22 1356.05,1214.22 1356.64,1214.22 1357.22,1214.22 1357.81,1214.22 1358.4,1214.22 1358.98,1214.22 1359.57,1214.22 1360.16,1214.22 1360.74,1214.22 1361.33,1214.22 1361.92,1214.22 1362.5,1214.22 1363.09,1214.22 1363.68,1214.22 1364.26,1214.22 1364.85,1214.22 1365.43,1214.22 1366.02,1214.22 1366.61,1214.22 1367.19,1214.22 1367.78,1214.22 1368.37,1214.22 1368.95,1214.22 1369.54,1214.22 1370.13,1214.22 1370.71,1214.22 1371.3,1214.22 1371.88,1214.22 1372.47,1214.22 1373.06,1214.22 1373.64,1214.22 1374.23,1214.22 1374.82,1214.22 1375.4,1214.22 1375.99,1214.22 1376.58,1214.22 1377.16,1214.22 1377.75,1214.22 1378.34,1214.22 1378.92,1214.22 1379.51,1214.22 1380.09,1214.22 1380.68,1214.22 1381.27,1214.22 1381.85,1214.22 1382.44,1214.22 1383.03,1214.22 1383.61,1214.22 1384.2,1214.22 1384.79,1214.22 1385.37,1214.22 1385.96,1214.22 1386.55,1214.22 1387.13,1214.22 1387.72,1214.22 1388.3,1214.22 1388.89,1214.22 1389.48,1214.22 1390.06,1214.22 1390.65,1214.22 1391.24,1214.22 1391.82,1214.22 1392.41,1214.22 1393,1214.22 1393.58,1214.22 1394.17,1214.22 1394.75,1214.22 1395.34,1214.22 1395.93,1214.22 1396.51,1214.22 1397.1,1214.22 1397.69,1214.22 1398.27,1214.22 1398.86,1214.22 1399.45,1214.22 1400.03,1214.22 1400.62,1214.22 1401.21,1214.22 1401.79,1214.22 1402.38,1214.22 1402.96,1214.22 1403.55,1214.22 1404.14,1214.22 1404.72,1214.22 1405.31,1214.22 1405.9,1214.22 1406.48,1214.22 1407.07,1214.22 1407.66,1214.22 1408.24,1214.22 1408.83,1214.22 1409.42,1214.22 1410,1214.22 1410.59,1214.22 1411.17,1214.22 1411.76,1214.22 1412.35,1214.22 1412.93,1214.22 1413.52,1214.22 1414.11,1214.22 1414.69,1214.22 1415.28,1214.22 1415.87,1214.22 1416.45,1214.22 1417.04,1214.22 1417.63,1214.22 1418.21,1214.22 1418.8,1214.22 1419.38,1214.22 1419.97,1214.22 1420.56,1214.22 1421.14,1214.22 1421.73,1214.22 1422.32,1214.22 1422.9,1214.22 1423.49,1214.22 1424.08,1214.22 1424.66,1214.22 1425.25,1214.22 1425.83,1214.22 1426.42,1214.22 1427.01,1214.22 1427.59,1214.22 1428.18,1214.22 1428.77,1214.22 1429.35,1214.22 1429.94,1214.22 1430.53,1214.22 1431.11,1214.22 1431.7,1214.22 1432.29,1214.22 1432.87,1214.22 1433.46,1214.22 1434.04,1214.22 1434.63,1214.22 1435.22,1214.22 1435.8,1214.22 1436.39,1214.22 1436.98,1214.22 1437.56,1214.22 1438.15,1214.22 1438.74,1214.22 1439.32,1214.22 1439.91,1214.22 1440.5,1214.22 1441.08,1214.22 1441.67,1214.22 1442.25,1214.22 1442.84,1214.22 1443.43,1214.22 1444.01,1214.22 1444.6,1214.22 1445.19,1214.22 1445.77,1214.22 1446.36,1214.22 1446.95,1214.22 1447.53,1214.22 1448.12,1214.22 1448.7,1214.22 1449.29,1214.22 1449.88,1214.22 1450.46,1214.22 1451.05,1214.22 1451.64,1214.22 1452.22,1214.22 1452.81,1214.22 1453.4,1214.22 1453.98,1214.22 1454.57,1214.22 1455.16,1214.22 1455.74,1214.22 1456.33,1214.22 1456.91,1214.22 1457.5,1214.22 1458.09,1214.22 1458.67,1214.22 1459.26,1214.22 1459.85,1214.22 1460.43,1214.22 1461.02,1214.22 1461.61,1214.22 1462.19,1214.22 1462.78,1214.22 1463.37,1214.22 1463.95,1214.22 1464.54,1214.22 1465.12,1214.22 1465.71,1214.22 1466.3,1214.22 1466.88,1214.22 1467.47,1214.22 1468.06,1214.22 1468.64,1214.22 1469.23,1214.22 1469.82,1214.22 1470.4,1214.22 1470.99,1214.22 1471.57,1214.22 1472.16,1214.22 1472.75,1214.22 1473.33,1214.22 1473.92,1214.22 1474.51,1214.22 1475.09,1214.22 1475.68,1214.22 1476.27,1214.22 1476.85,1214.22 1477.44,1214.22 1478.03,1214.22 1478.61,1214.22 1479.2,1214.22 1479.78,1214.22 1480.37,1214.22 1480.96,1214.22 1481.54,1214.22 1482.13,1214.22 1482.72,1214.22 1483.3,1214.22 1483.89,1214.22 1484.48,1214.22 1485.06,1214.22 1485.65,1214.22 1486.24,1214.22 1486.82,1214.22 1487.41,1214.22 1487.99,1214.22 1488.58,1214.22 1489.17,1214.22 1489.75,1214.22 1490.34,1214.22 1490.93,1214.22 1491.51,1214.22 1492.1,1214.22 1492.69,1214.22 1493.27,1214.22 1493.86,1214.22 1494.45,1214.22 1495.03,1214.22 1495.62,1214.22 1496.2,1214.22 1496.79,1214.22 1497.38,1214.22 1497.96,1214.22 1498.55,1214.22 1499.14,1214.22 1499.72,1214.22 1500.31,1214.22 1500.9,1214.22 1501.48,1214.22 1502.07,1214.22 1502.65,1214.22 1503.24,1214.22 1503.83,1214.22 1504.41,1214.22 1505,1214.22 1505.59,1214.22 1506.17,1214.22 1506.76,1214.22 1507.35,1214.22 1507.93,1214.22 1508.52,1214.22 1509.11,1214.22 1509.69,1214.22 1510.28,1214.22 1510.86,1214.22 1511.45,1214.22 1512.04,1214.22 1512.62,1214.22 1513.21,1214.22 1513.8,1214.22 1514.38,1214.22 1514.97,1214.22 1515.56,1214.22 1516.14,1214.22 1516.73,1214.22 1517.32,1214.22 1517.9,1214.22 1518.49,1214.22 1519.07,1214.22 1519.66,1214.22 1520.25,1214.22 1520.83,1214.22 1521.42,1214.22 1522.01,1214.22 1522.59,1214.22 1523.18,1214.22 1523.77,1214.22 1524.35,1214.22 1524.94,1214.22 1525.52,1214.22 1526.11,1214.22 1526.7,1214.22 1527.28,1214.22 1527.87,1214.22 1528.46,1214.22 1529.04,1214.22 1529.63,1214.22 1530.22,1214.22 1530.8,1214.22 1531.39,1214.22 1531.98,1214.22 1532.56,1214.22 1533.15,1214.22 1533.73,1214.22 1534.32,1214.22 1534.91,1214.22 1535.49,1214.22 1536.08,1214.22 1536.67,1214.22 1537.25,1214.22 1537.84,1214.22 1538.43,1214.22 1539.01,1214.22 1539.6,1214.22 1540.19,1214.22 1540.77,1214.22 1541.36,1214.22 1541.94,1214.22 1542.53,1214.22 1543.12,1214.22 1543.7,1214.22 1544.29,1214.22 1544.88,1214.22 1545.46,1214.22 1546.05,1214.22 1546.64,1214.22 1547.22,1214.22 1547.81,1214.22 1548.4,1214.22 1548.98,1214.22 1549.57,1214.22 1550.15,1214.22 1550.74,1214.22 1551.33,1214.22 1551.91,1214.22 1552.5,1214.22 1553.09,1214.22 1553.67,1214.22 1554.26,1214.22 1554.85,1214.22 1555.43,1214.22 1556.02,1214.22 1556.6,1214.22 1557.19,1214.22 1557.78,1214.22 1558.36,1214.22 1558.95,1214.22 1559.54,1214.22 1560.12,1214.22 1560.71,1214.22 1561.3,1214.22 1561.88,1214.22 1562.47,1214.22 1563.06,1214.22 1563.64,1214.22 1564.23,1214.22 1564.81,1214.22 1565.4,1214.22 1565.99,1214.22 1566.57,1214.22 1567.16,1214.22 1567.75,1214.22 1568.33,1214.22 1568.92,1214.22 1569.51,1214.22 1570.09,1214.22 1570.68,1214.22 1571.27,1214.22 1571.85,1214.22 1572.44,1214.22 1573.02,1214.22 1573.61,1214.22 1574.2,1214.22 1574.78,1214.22 1575.37,1214.22 1575.96,1214.22 1576.54,1214.22 1577.13,1214.22 1577.72,1214.22 1578.3,1214.22 1578.89,1214.22 1579.47,1214.22 1580.06,1214.22 1580.65,1214.22 1581.23,1214.22 1581.82,1214.22 1582.41,1214.22 1582.99,1214.22 1583.58,1214.22 1584.17,1214.22 1584.75,1214.22 1585.34,1214.22 1585.93,1214.22 1586.51,1214.22 1587.1,1214.22 1587.68,1214.22 1588.27,1214.22 1588.86,1214.22 1589.44,1214.22 1590.03,1214.22 1590.62,1214.22 1591.2,1214.22 1591.79,1214.22 1592.38,1214.22 1592.96,1214.22 1593.55,1214.22 1594.14,1214.22 1594.72,1214.22 1595.31,1214.22 1595.89,1214.22 1596.48,1214.22 1597.07,1214.22 1597.65,1214.22 1598.24,1214.22 1598.83,1214.22 1599.41,1214.22 1600,1214.22 1600.59,1214.22 1601.17,1214.22 1601.76,1214.22 1602.34,1214.22 1602.93,1214.22 1603.52,1214.22 1604.1,1214.22 1604.69,1214.22 1605.28,1214.22 1605.86,1214.22 1606.45,1214.22 1607.04,1214.22 1607.62,1214.22 1608.21,1214.22 1608.8,1214.22 1609.38,1214.22 1609.97,1214.22 1610.55,1214.22 1611.14,1214.22 1611.73,1214.22 1612.31,1214.22 1612.9,1214.22 1613.49,1214.22 1614.07,1214.22 1614.66,1214.22 1615.25,1214.22 1615.83,1214.22 1616.42,1214.22 1617.01,1214.22 1617.59,1214.22 1618.18,1214.22 1618.76,1214.22 1619.35,1214.22 1619.94,1214.22 1620.52,1214.22 1621.11,1214.22 1621.7,1214.22 1622.28,1214.22 1622.87,1214.22 1623.46,1214.22 1624.04,1214.22 1624.63,1214.22 1625.22,1214.22 1625.8,1214.22 1626.39,1214.22 1626.97,1214.22 1627.56,1214.22 1628.15,1214.22 1628.73,1214.22 1629.32,1214.22 1629.91,1214.22 1630.49,1214.22 1631.08,1214.22 1631.67,1214.22 1632.25,1214.22 1632.84,1214.22 1633.42,1214.22 1634.01,1214.22 1634.6,1214.22 1635.18,1214.22 1635.77,1214.22 1636.36,1214.22 1636.94,1214.22 1637.53,1214.22 1638.12,1214.22 1638.7,1214.22 1639.29,1214.22 1639.88,1214.22 1640.46,1214.22 1641.05,1214.22 1641.63,1214.22 1642.22,1214.22 1642.81,1214.22 1643.39,1214.22 1643.98,1214.22 1644.57,1214.22 1645.15,1214.22 1645.74,1214.22 1646.33,1214.22 1646.91,1214.22 1647.5,1214.22 1648.09,1214.22 1648.67,1214.22 1649.26,1214.22 1649.84,1214.22 1650.43,1214.22 1651.02,1214.22 1651.6,1214.22 1652.19,1214.22 1652.78,1214.22 1653.36,1214.22 1653.95,1214.22 1654.54,1214.22 1655.12,1214.22 1655.71,1214.22 1656.29,1214.22 1656.88,1214.22 1657.47,1214.22 1658.05,1214.22 1658.64,1214.22 1659.23,1214.22 1659.81,1214.22 1660.4,1214.22 1660.99,1214.22 1661.57,1214.22 1662.16,1214.22 1662.75,1214.22 1663.33,1214.22 1663.92,1214.22 1664.5,1214.22 1665.09,1214.22 1665.68,1214.22 1666.26,1214.22 1666.85,1214.22 1667.44,1214.22 1668.02,1214.22 1668.61,1214.22 1669.2,1214.22 1669.78,1214.22 1670.37,1214.22 1670.96,1214.22 1671.54,1214.22 1672.13,1214.22 1672.71,1214.22 1673.3,1214.22 1673.89,1214.22 1674.47,1214.22 1675.06,1214.22 1675.65,1214.22 1676.23,1214.22 1676.82,1214.22 1677.41,1214.22 1677.99,1214.22 1678.58,1214.22 1679.17,1214.22 1679.75,1214.22 1680.34,1214.22 1680.92,1214.22 1681.51,1214.22 1682.1,1214.22 1682.68,1214.22 1683.27,1214.22 1683.86,1214.22 1684.44,1214.22 1685.03,1214.22 1685.62,1214.22 1686.2,1214.22 1686.79,1214.22 1687.37,1214.22 1687.96,1214.22 1688.55,1214.22 1689.13,1214.22 1689.72,1214.22 1690.31,1214.22 1690.89,1214.22 1691.48,1214.22 1692.07,1214.22 1692.65,1214.22 1693.24,1214.22 1693.83,1214.22 1694.41,1214.22 1695,1214.22 1695.58,1214.22 1696.17,1214.22 1696.76,1214.22 1697.34,1214.22 1697.93,1214.22 1698.52,1214.22 1699.1,1214.22 1699.69,1214.22 1700.28,1214.22 1700.86,1214.22 1701.45,1214.22 1702.04,1214.22 1702.62,1214.22 1703.21,1214.22 1703.79,1214.22 1704.38,1214.22 1704.97,1214.22 1705.55,1214.22 1706.14,1214.22 1706.73,1214.22 1707.31,1214.22 1707.9,1214.22 1708.49,1214.22 1709.07,1214.22 1709.66,1214.22 1710.24,1214.22 1710.83,1214.22 1711.42,1214.22 1712,1214.22 1712.59,1214.22 1713.18,1214.22 1713.76,1214.22 1714.35,1214.22 1714.94,1214.22 1715.52,1214.22 1716.11,1214.22 1716.7,1214.22 1717.28,1214.22 1717.87,1214.22 1718.45,1214.22 1719.04,1214.22 1719.63,1214.22 1720.21,1214.22 1720.8,1214.22 1721.39,1214.22 1721.97,1214.22 1722.56,1214.22 1723.15,1214.22 1723.73,1214.22 1724.32,1214.22 1724.91,1214.22 1725.49,1214.22 1726.08,1214.22 1726.66,1214.22 1727.25,1214.22 1727.84,1214.22 1728.42,1214.22 1729.01,1214.22 1729.6,1214.22 1730.18,1214.22 1730.77,1214.22 1731.36,1214.22 1731.94,1214.22 1732.53,1214.22 1733.11,1214.22 1733.7,1214.22 1734.29,1214.22 1734.87,1214.22 1735.46,1214.22 1736.05,1214.22 1736.63,1214.22 1737.22,1214.22 1737.81,1214.22 1738.39,1214.22 1738.98,1214.22 1739.57,1214.22 1740.15,1214.22 1740.74,1214.22 1741.32,1214.22 1741.91,1214.22 1742.5,1214.22 1743.08,1214.22 1743.67,1214.22 1744.26,1214.22 1744.84,1214.22 1745.43,1214.22 1746.02,1214.22 1746.6,1214.22 1747.19,1214.22 1747.78,1214.22 1748.36,1214.22 1748.95,1214.22 1749.53,1214.22 1750.12,1214.22 1750.71,1214.22 1751.29,1214.22 1751.88,1214.22 1752.47,1214.22 1753.05,1214.22 1753.64,1214.22 1754.23,1214.22 1754.81,1214.22 1755.4,1214.22 1755.99,1214.22 1756.57,1214.22 1757.16,1214.22 1757.74,1214.22 1758.33,1214.22 1758.92,1214.22 1759.5,1214.22 1760.09,1214.22 1760.68,1214.22 1761.26,1214.22 1761.85,1214.22 1762.44,1214.22 1763.02,1214.22 1763.61,1214.22 1764.19,1214.22 1764.78,1214.22 1765.37,1214.22 1765.95,1214.22 1766.54,1214.22 1767.13,1214.22 1767.71,1214.22 1768.3,1214.22 1768.89,1214.22 1769.47,1214.22 1770.06,1214.22 1770.65,1214.22 1771.23,1214.22 1771.82,1214.22 1772.4,1214.22 1772.99,1214.22 1773.58,1214.22 1774.16,1214.22 1774.75,1214.22 1775.34,1214.22 1775.92,1214.22 1776.51,1214.22 1777.1,1214.22 1777.68,1214.22 1778.27,1214.22 1778.86,1214.22 1779.44,1214.22 1780.03,1214.22 1780.61,1214.22 1781.2,1214.22 1781.79,1214.22 1782.37,1214.22 1782.96,1214.22 1783.55,1214.22 1784.13,1214.22 1784.72,1214.22 1785.31,1214.22 1785.89,1214.22 1786.48,1214.22 1787.06,1214.22 1787.65,1214.22 1788.24,1214.22 1788.82,1214.22 1789.41,1214.22 1790,1214.22 1790.58,1214.22 1791.17,1214.22 1791.76,1214.22 1792.34,1214.22 1792.93,1214.22 1793.52,1214.22 1794.1,1214.22 1794.69,1214.22 1795.27,1214.22 1795.86,1214.22 1796.45,1214.22 1797.03,1214.22 1797.62,1214.22 1798.21,1214.22 1798.79,1214.22 1799.38,1214.22 1799.97,1214.22 1800.55,1214.22 1801.14,1214.22 1801.73,1214.22 1802.31,1214.22 1802.9,1214.22 1803.48,1214.22 1804.07,1214.22 1804.66,1214.22 1805.24,1214.22 1805.83,1214.22 1806.42,1214.22 1807,1214.22 1807.59,1214.22 1808.18,1214.22 1808.76,1214.22 1809.35,1214.22 1809.94,1214.22 1810.52,1214.22 1811.11,1214.22 1811.69,1214.22 1812.28,1214.22 1812.87,1214.22 1813.45,1214.22 1814.04,1214.22 1814.63,1214.22 1815.21,1214.22 1815.8,1214.22 1816.39,1214.22 1816.97,1214.22 1817.56,1214.22 1818.14,1214.22 1818.73,1214.22 1819.32,1214.22 1819.9,1214.22 1820.49,1214.22 1821.08,1214.22 1821.66,1214.22 1822.25,1214.22 1822.84,1214.22 1823.42,1214.22 1824.01,1214.22 1824.6,1214.22 1825.18,1214.22 1825.77,1214.22 1826.35,1214.22 1826.94,1214.22 1827.53,1214.22 1828.11,1214.22 1828.7,1214.22 1829.29,1214.22 1829.87,1214.22 1830.46,1214.22 1831.05,1214.22 1831.63,1214.22 1832.22,1214.22 1832.81,1214.22 1833.39,1214.22 1833.98,1214.22 1834.56,1214.22 1835.15,1214.22 1835.74,1214.22 1836.32,1214.22 1836.91,1214.22 1837.5,1214.22 1838.08,1214.22 1838.67,1214.22 1839.26,1214.22 1839.84,1214.22 1840.43,1214.22 1841.01,1214.22 1841.6,1214.22 1842.19,1214.22 1842.77,1214.22 1843.36,1214.22 1843.95,1214.22 1844.53,1214.22 1845.12,1214.22 1845.71,1214.22 1846.29,1214.22 1846.88,1214.22 1847.47,1214.22 1848.05,1214.22 1848.64,1214.22 1849.22,1214.22 1849.81,1214.22 1850.4,1214.22 1850.98,1214.22 1851.57,1214.22 1852.16,1214.22 1852.74,1214.22 1853.33,1214.22 1853.92,1214.22 1854.5,1214.22 1855.09,1214.22 1855.68,1214.22 1856.26,1214.22 1856.85,1214.22 1857.43,1214.22 1858.02,1214.22 1858.61,1214.22 1859.19,1214.22 1859.78,1214.22 1860.37,1214.22 1860.95,1214.22 1861.54,1214.22 1862.13,1214.22 1862.71,1214.22 1863.3,1214.22 1863.88,1214.22 1864.47,1214.22 1865.06,1214.22 1865.64,1214.22 1866.23,1214.22 1866.82,1214.22 1867.4,1214.22 1867.99,1214.22 1868.58,1214.22 1869.16,1214.22 1869.75,1214.22 1870.34,1214.22 1870.92,1214.22 1871.51,1214.22 1872.09,1214.22 1872.68,1214.22 1873.27,1214.22 1873.85,1214.22 1874.44,1214.22 1875.03,1214.22 1875.61,1214.22 1876.2,1214.22 1876.79,1214.22 1877.37,1214.22 1877.96,1214.22 1878.55,1214.22 1879.13,1214.22 1879.72,1214.22 1880.3,1214.22 1880.89,1214.22 1881.48,1214.22 1882.06,1214.22 1882.65,1214.22 1883.24,1214.22 1883.82,1214.22 1884.41,1214.22 1885,1214.22 1885.58,1214.22 1886.17,1214.22 1886.76,1214.22 1887.34,1214.22 1887.93,1214.22 1888.51,1214.22 1889.1,1214.22 1889.69,1214.22 1890.27,1214.22 1890.86,1214.22 1891.45,1214.22 1892.03,1214.22 1892.62,1214.22 1893.21,1214.22 1893.79,1214.22 1894.38,1214.22 1894.96,1214.22 1895.55,1214.22 1896.14,1214.22 1896.72,1214.22 1897.31,1214.22 1897.9,1214.22 1898.48,1214.22 1899.07,1214.22 1899.66,1214.22 1900.24,1214.22 1900.83,1214.22 1901.42,1214.22 1902,1214.22 1902.59,1214.22 1903.17,1214.22 1903.76,1214.22 1904.35,1214.22 1904.93,1214.22 1905.52,1214.22 1906.11,1214.22 1906.69,1214.22 1907.28,1214.22 1907.87,1214.22 1908.45,1214.22 1909.04,1214.22 1909.63,1214.22 1910.21,1214.22 1910.8,1214.22 1911.38,1214.22 1911.97,1214.22 1912.56,1214.22 1913.14,1214.22 1913.73,1214.22 1914.32,1214.22 1914.9,1214.22 1915.49,1214.22 1916.08,1214.22 1916.66,1214.22 1917.25,1214.22 1917.83,1214.22 1918.42,1214.22 1919.01,1214.22 1919.59,1214.22 1920.18,1214.22 1920.77,1214.22 1921.35,1214.22 1921.94,1214.22 1922.53,1214.22 1923.11,1214.22 1923.7,1214.22 1924.29,1214.22 1924.87,1214.22 1925.46,1214.22 1926.04,1214.22 1926.63,1214.22 1927.22,1214.22 1927.8,1214.22 1928.39,1214.22 1928.98,1214.22 1929.56,1214.22 1930.15,1214.22 1930.74,1214.22 1931.32,1214.22 1931.91,1214.22 1932.5,1214.22 1933.08,1214.22 1933.67,1214.22 1934.25,1214.22 1934.84,1214.22 1935.43,1214.22 1936.01,1214.22 1936.6,1214.22 1937.19,1214.22 1937.77,1214.22 1938.36,1214.22 1938.95,1214.22 1939.53,1214.22 1940.12,1214.22 1940.71,1214.22 1941.29,1214.22 1941.88,1214.22 1942.46,1214.22 1943.05,1214.22 1943.64,1214.22 1944.22,1214.22 1944.81,1214.22 1945.4,1214.22 1945.98,1214.22 1946.57,1214.22 1947.16,1214.22 1947.74,1214.22 1948.33,1214.22 1948.91,1214.22 1949.5,1214.22 1950.09,1214.22 1950.67,1214.22 1951.26,1214.22 1951.85,1214.22 1952.43,1214.22 1953.02,1214.22 1953.61,1214.22 1954.19,1214.22 1954.78,1214.22 1955.37,1214.22 1955.95,1214.22 1956.54,1214.22 1957.12,1214.22 1957.71,1214.22 1958.3,1214.22 1958.88,1214.22 1959.47,1214.22 1960.06,1214.22 1960.64,1214.22 1961.23,1214.22 1961.82,1214.22 1962.4,1214.22 1962.99,1214.22 1963.58,1214.22 1964.16,1214.22 1964.75,1214.22 1965.33,1214.22 1965.92,1214.22 1966.51,1214.22 1967.09,1214.22 1967.68,1214.22 1968.27,1214.22 1968.85,1214.22 1969.44,1214.22 1970.03,1214.22 1970.61,1214.22 1971.2,1214.22 1971.78,1214.22 1972.37,1214.22 1972.96,1214.22 1973.54,1214.22 1974.13,1214.22 1974.72,1214.22 1975.3,1214.22 1975.89,1214.22 1976.48,1214.22 1977.06,1214.22 1977.65,1214.22 1978.24,1214.22 1978.82,1214.22 1979.41,1214.22 1979.99,1214.22 1980.58,1214.22 1981.17,1214.22 1981.75,1214.22 1982.34,1214.22 1982.93,1214.22 1983.51,1214.22 1984.1,1214.22 1984.69,1214.22 1985.27,1214.22 1985.86,1214.22 1986.45,1214.22 1987.03,1214.22 1987.62,1214.22 1988.2,1214.22 1988.79,1214.22 1989.38,1214.22 1989.96,1214.22 1990.55,1214.22 1991.14,1214.22 1991.72,1214.22 1992.31,1214.22 1992.9,1214.22 1993.48,1214.22 1994.07,1214.22 1994.65,1214.22 1995.24,1214.22 1995.83,1214.22 1996.41,1214.22 1997,1214.22 1997.59,1214.22 1998.17,1214.22 1998.76,1214.22 1999.35,1214.22 1999.93,1214.22 2000.52,1214.22 2001.11,1214.22 2001.69,1214.22 2002.28,1214.22 2002.86,1214.22 2003.45,1214.22 2004.04,1214.22 2004.62,1214.22 2005.21,1214.22 2005.8,1214.22 2006.38,1214.22 2006.97,1214.22 2007.56,1214.22 2008.14,1214.22 2008.73,1214.22 2009.32,1214.22 2009.9,1214.22 2010.49,1214.22 2011.07,1214.22 2011.66,1214.22 2012.25,1214.22 2012.83,1214.22 2013.42,1214.22 2014.01,1214.22 2014.59,1214.22 2015.18,1214.22 2015.77,1214.22 2016.35,1214.22 2016.94,1214.22 2017.53,1214.22 2018.11,1214.22 2018.7,1214.22 2019.28,1214.22 2019.87,1214.22 2020.46,1214.22 2021.04,1214.22 2021.63,1214.22 2022.22,1214.22 2022.8,1214.22 2023.39,1214.22 2023.98,1214.22 2024.56,1214.22 2025.15,1214.22 2025.73,1214.22 2026.32,1214.22 2026.91,1214.22 2027.49,1214.22 2028.08,1214.22 2028.67,1214.22 2029.25,1214.22 2029.84,1214.22 2030.43,1214.22 2031.01,1214.22 2031.6,1214.22 2032.19,1214.22 2032.77,1214.22 2033.36,1214.22 2033.94,1214.22 2034.53,1214.22 2035.12,1214.22 2035.7,1214.22 2036.29,1214.22 2036.88,1214.22 2037.46,1214.22 2038.05,1214.22 2038.64,1214.22 2039.22,1214.22 2039.81,1214.22 2040.4,1214.22 2040.98,1214.22 2041.57,1214.22 2042.15,1214.22 2042.74,1214.22 2043.33,1214.22 2043.91,1214.22 2044.5,1214.22 2045.09,1214.22 2045.67,1214.22 2046.26,1214.22 2046.85,1214.22 2047.43,1214.22 2048.02,1214.22 2048.6,1214.22 2049.19,1214.22 2049.78,1214.22 2050.36,1214.22 2050.95,1214.22 2051.54,1214.22 2052.12,1214.22 2052.71,1214.22 2053.3,1214.22 2053.88,1214.22 2054.47,1214.22 2055.06,1214.22 2055.64,1214.22 2056.23,1214.22 2056.81,1214.22 2057.4,1214.22 2057.99,1214.22 2058.57,1214.22 2059.16,1214.22 2059.75,1214.22 2060.33,1214.22 2060.92,1214.22 2061.51,1214.22 2062.09,1214.22 2062.68,1214.22 2063.27,1214.22 2063.85,1214.22 2064.44,1214.22 2065.02,1214.22 2065.61,1214.22 2066.2,1214.22 2066.78,1214.22 2067.37,1214.22 2067.96,1214.22 2068.54,1214.22 2069.13,1214.22 2069.72,1214.22 2070.3,1214.22 2070.89,1214.22 2071.48,1214.22 2072.06,1214.22 2072.65,1214.22 2073.23,1214.22 2073.82,1214.22 2074.41,1214.22 2074.99,1214.22 2075.58,1214.22 2076.17,1214.22 2076.75,1214.22 2077.34,1214.22 2077.93,1214.22 2078.51,1214.22 2079.1,1214.22 2079.68,1214.22 2080.27,1214.22 2080.86,1214.22 2081.44,1214.22 2082.03,1214.22 2082.62,1214.22 2083.2,1214.22 2083.79,1214.22 2084.38,1214.22 2084.96,1214.22 2085.55,1214.22 2086.14,1214.22 2086.72,1214.22 2087.31,1214.22 2087.89,1214.22 2088.48,1214.22 2089.07,1214.22 2089.65,1214.22 2090.24,1214.22 2090.83,1214.22 2091.41,1214.22 2092,1214.22 2092.59,1214.22 2093.17,1214.22 2093.76,1214.22 2094.35,1214.22 2094.93,1214.22 2095.52,1214.22 2096.1,1214.22 2096.69,1214.22 2097.28,1214.22 2097.86,1214.22 2098.45,1214.22 2099.04,1214.22 2099.62,1214.22 2100.21,1214.22 2100.8,1214.22 2101.38,1214.22 2101.97,1214.22 2102.55,1214.22 2103.14,1214.22 2103.73,1214.22 2104.31,1214.22 2104.9,1214.22 2105.49,1214.22 2106.07,1214.22 2106.66,1214.22 2107.25,1214.22 2107.83,1214.22 2108.42,1214.22 2109.01,1214.22 2109.59,1214.22 2110.18,1214.22 2110.76,1214.22 2111.35,1214.22 2111.94,1214.22 2112.52,1214.22 2113.11,1214.22 2113.7,1214.22 2114.28,1214.22 2114.87,1214.22 2115.46,1214.22 2116.04,1214.22 2116.63,1214.22 2117.22,1214.22 2117.8,1214.22 2118.39,1214.22 2118.97,1214.22 2119.56,1214.22 2120.15,1214.22 2120.73,1214.22 2121.32,1214.22 2121.91,1214.22 2122.49,1214.22 2123.08,1214.22 2123.67,1214.22 2124.25,1214.22 2124.84,1214.22 2125.42,1214.22 2126.01,1214.22 2126.6,1214.22 2127.18,1214.22 2127.77,1214.22 2128.36,1214.22 2128.94,1214.22 2129.53,1214.22 2130.12,1214.22 2130.7,1214.22 2131.29,1214.22 2131.88,1214.22 2132.46,1214.22 2133.05,1214.22 2133.63,1214.22 2134.22,1214.22 2134.81,1214.22 2135.39,1214.22 2135.98,1214.22 2136.57,1214.22 2137.15,1214.22 2137.74,1214.22 2138.33,1214.22 2138.91,1214.22 2139.5,1214.22 2140.09,1214.22 2140.67,1214.22 2141.26,1214.22 2141.84,1214.22 2142.43,1214.22 2143.02,1214.22 2143.6,1214.22 2144.19,1214.22 2144.78,1214.22 2145.36,1214.22 2145.95,1214.22 2146.54,1214.22 2147.12,1214.22 2147.71,1214.22 2148.3,1214.22 2148.88,1214.22 2149.47,1214.22 2150.05,1214.22 2150.64,1214.22 2151.23,1214.22 2151.81,1214.22 2152.4,1214.22 2152.99,1214.22 2153.57,1214.22 2154.16,1214.22 2154.75,1214.22 2155.33,1214.22 2155.92,1214.22 2156.5,1214.22 2157.09,1214.22 2157.68,1214.22 2158.26,1214.22 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.77,1197.48 1398.92,899.083 \"/>\n<polyline clip-path=\"url(#clip792)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.56 985.439,1197.48 2158.26,1197.48 2158.26,1230.56 985.439,1230.56 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip790)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip793\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip790)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip790)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip790)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip793)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-3961.91 163.232,-5061.48 163.792,-6070.19 164.351,-5727.06 164.91,-6659.97 165.469,-7516.01 166.029,-8226.05 166.588,-8933.7 167.147,-9573.13 167.706,-10148.8 168.266,-10649.7 168.825,-11110.8 169.384,-11519.7 169.943,-11879.8 170.503,-12194.3 171.062,-12452.6 171.621,-12019.4 172.18,-12239.3 172.74,-12413.2 173.299,-12014.7 173.858,-11180.6 174.417,-11293.9 174.977,-11391.7 175.536,-11463.5 176.095,-11148 176.655,-10858.1 177.214,-10283 177.773,-10301 178.332,-10027.6 178.892,-9761.69 179.451,-9742.69 180.01,-9700.7 180.569,-9659.93 181.129,-9201.09 181.688,-8981.79 182.247,-8922.08 182.806,-8533.52 183.366,-8482.86 183.925,-8273.77 184.484,-8203.08 185.043,-7987.89 185.603,-7777.58 186.162,-7578.51 186.721,-7275.56 187.28,-7201.44 187.84,-7117.49 188.399,-6938.92 188.958,-6760.24 189.517,-6494.91 190.077,-6413.46 190.636,-6239.11 191.195,-6081.43 191.754,-6002.17 192.314,-5835.03 192.873,-5734.41 193.432,-5579.13 193.991,-5492 194.551,-5326.08 195.11,-5229.38 195.669,-4952.74 196.228,-4863.62 196.788,-4665.36 197.347,-4527.82 197.906,-4434.22 198.465,-4247.25 199.025,-4156.72 199.584,-3975.69 200.143,-3802.36 200.702,-3720.88 201.262,-3471.08 201.821,-3232.53 202.38,-3124.04 202.939,-3054.48 203.499,-2952.25 204.058,-2850.41 204.617,-2784.25 205.176,-2686.68 205.736,-2619.39 206.295,-2555.43 206.854,-2453.94 207.413,-2322.79 207.973,-2194.44 208.532,-2070.7 209.091,-1951.11 209.65,-1831.71 210.21,-1777.79 210.769,-1696.22 211.328,-1530.45 211.887,-1370.9 212.447,-1273.07 213.006,-1204.56 213.565,-1134.1 214.124,-987.031 214.684,-897.768 215.243,-838.631 215.802,-805.992 216.361,-753.538 216.921,-675.411 217.48,-623.917 218.039,-598.337 218.598,-493.999 219.158,-401.723 219.717,-378.659 220.276,-329.518 220.835,-285.819 221.395,-261.387 221.954,-217.335 222.513,-174.362 223.072,-130.613 223.632,-108.714 224.191,-90.6109 224.75,17.1478 225.309,17.0409 225.869,54.4452 226.428,95.6003 226.987,111.637 227.546,167.983 228.106,186.291 228.665,222.975 229.224,298.95 229.783,314.009 230.343,368.123 230.902,383.095 231.461,417.368 232.02,423.186 232.58,435.655 233.139,465.03 233.698,472.872 234.257,484.8 234.817,532.858 235.376,577.101 235.935,604.2 236.494,626.754 237.054,651.26 237.613,712.476 238.172,715.486 238.731,753.993 239.291,775.193 239.85,753.26 240.409,829.62 240.968,866.197 241.528,916.049 242.087,1000.17 242.646,1040.92 243.205,1047.01 243.765,1055.89 244.324,1077.43 244.883,1063.38 245.442,1069.7 246.002,1057.3 246.561,1046.91 247.12,1069.62 247.679,1054.13 248.239,1042.1 248.798,1050.68 249.357,1040.85 249.916,1031.6 250.476,1023.63 251.035,1013.63 251.594,1022.36 252.153,1031.12 252.713,1006.76 253.272,1030.76 253.831,1024.96 254.39,1032.75 254.95,1059.66 255.509,1053.52 256.068,1079.1 256.627,1086.92 257.187,1128.86 257.746,1151.1 258.305,1118.28 258.864,1108.5 259.424,1095.76 259.983,1066.41 260.542,1089.49 261.101,1078.99 261.661,1104.03 262.22,1109.88 262.779,1121.08 263.338,1111.35 263.898,1120.03 264.457,1146.93 265.016,1117.23 265.575,1106.55 266.135,1061.56 266.694,1074.48 267.253,1119.61 267.812,1127.11 268.372,1129.11 268.931,1152.36 269.49,1107.72 270.049,1083 270.609,1075.23 271.168,1052.8 271.727,1080.56 272.286,1087.78 272.846,1077.78 273.405,1069.99 273.964,1028.63 274.523,1006.48 275.083,1050.14 275.642,1064.88 276.201,1060.21 276.76,1018.9 277.32,1012.29 277.879,974.215 278.438,972.63 278.997,950.328 279.557,998.184 280.116,992.416 280.675,1003.21 281.234,997.462 281.794,957.563 282.353,993.901 282.912,986.34 283.471,981.174 284.031,980.296 284.59,1010.9 285.149,1004.64 285.708,998.527 286.268,1009.85 286.827,1037.92 287.386,1046.97 287.945,1006.55 288.505,1051.66 289.064,1059.5 289.623,1139.07 290.182,1128.11 290.742,1149.41 291.301,1136.72 291.86,1140.46 292.419,1162.93 292.979,1161.52 293.538,1096.45 294.097,1099.81 294.656,1089.61 295.216,1044.67 295.775,1067.23 296.334,1073.8 296.893,1080.46 297.453,1118.62 298.012,1106.68 298.571,1061.95 299.13,1070.99 299.69,1059.79 300.249,1031.81 300.808,992.811 301.368,1018.61 301.927,1031.3 302.486,1043.74 303.045,1040.12 303.605,996.606 304.164,974.287 304.723,984.23 305.282,1014.39 305.842,990.409 306.401,1049.33 306.96,1026.77 307.519,1035.22 308.079,1041.95 308.638,999.675 309.197,944.537 309.756,955.387 310.316,901.803 310.875,919.094 311.434,932.047 311.993,928.89 312.553,909.039 313.112,943.164 313.671,925.924 314.23,905.745 314.79,920.089 315.349,932.903 315.908,928.288 316.467,942.304 317.027,925.765 317.586,935.782 318.145,930.272 318.704,930.39 319.264,960.493 319.823,956.16 320.382,954.173 320.941,983.336 321.501,960.927 322.06,955.996 322.619,953.461 323.178,966.039 323.738,977.151 324.297,973.965 324.856,998.736 325.415,961.217 325.975,975.454 326.534,970.343 327.093,964.913 327.652,957.035 328.212,952.183 328.771,963.12 329.33,975.476 329.889,972.123 330.449,983.917 331.008,975.803 331.567,983.05 332.126,990.861 332.686,1032.84 333.245,994.138 333.804,1020.28 334.363,1013.14 334.923,997.605 335.482,1006.3 336.041,1013.48 336.6,972.535 337.16,982.477 337.719,960.353 338.278,923.017 338.837,937.15 339.397,966.709 339.956,958.443 340.515,965.82 341.074,957.651 341.634,937.065 342.193,932.291 342.752,928.451 343.311,905.798 343.871,919.573 344.43,899.919 344.989,916.422 345.548,929.702 346.108,942.383 346.667,951.689 347.226,979.281 347.785,985.77 348.345,975.914 348.904,970.709 349.463,946.79 350.022,941.696 350.582,953.695 351.141,945.917 351.7,940.312 352.259,951.22 352.819,960.26 353.378,935.247 353.937,959.943 354.496,953.654 355.056,915.685 355.615,926.829 356.174,950.607 356.733,962.603 357.293,942.094 357.852,935.263 358.411,929.614 358.97,945.702 359.53,939.072 360.089,918.348 360.648,929.461 361.207,940.684 361.767,913.388 362.326,876.037 362.885,873.848 363.444,855.643 364.004,803.485 364.563,818.516 365.122,816.843 365.681,832.859 366.241,814.698 366.8,815.409 367.359,798.529 367.918,785.43 368.478,772.154 369.037,758.335 369.596,793.351 370.155,794.549 370.715,777.337 371.274,764.778 371.833,814.387 372.392,798.285 372.952,813.578 373.511,826.23 374.07,794.691 374.629,811.144 375.189,793.024 375.748,781.112 376.307,751.324 376.866,790.41 377.426,820.452 377.985,852.454 378.544,901.7 379.103,894.872 379.663,910.718 380.222,891.438 380.781,906.622 381.34,855.004 381.9,854.575 382.459,836.984 383.018,850.767 383.577,848.058 384.137,830.389 384.696,796.329 385.255,766.171 385.814,734.732 386.374,735.639 386.933,756.953 387.492,742.606 388.051,778.767 388.611,797.655 389.17,812.984 389.729,796.882 390.288,781.257 390.848,733.691 391.407,770.145 391.966,772.524 392.525,762.07 393.085,742.604 393.644,726.333 394.203,729.512 394.762,752.902 395.322,786.117 395.881,805.734 396.44,803.974 396.999,819.644 397.559,814.953 398.118,812.44 398.677,796.355 399.236,775.978 399.796,778.008 400.355,793.845 400.914,809.786 401.473,814.237 402.033,797.793 402.592,846.155 403.151,855.568 403.71,865.704 404.27,861.957 404.829,842.556 405.388,856.845 405.947,869.354 406.507,833.255 407.066,834.222 407.625,849.334 408.184,812.417 408.744,842.904 409.303,839.745 409.862,852.971 410.421,831.614 410.981,845.645 411.54,832.772 412.099,848.309 412.658,861.665 413.218,839.275 413.777,819.356 414.336,785.988 414.895,750.706 415.455,752.237 416.014,750.626 416.573,767.636 417.132,763.06 417.692,777.207 418.251,777.749 418.81,777.198 419.369,777.106 419.929,776.707 420.488,776.552 421.047,726.582 421.606,744.346 422.166,744.349 422.725,746.968 423.284,764.792 423.843,764.818 424.403,765.847 424.962,783.547 425.521,764.521 426.08,781.843 426.64,795.726 427.199,795.174 427.758,764.407 428.318,784.51 428.877,783.063 429.436,752.778 429.995,738.54 430.555,741.033 431.114,739.449 431.673,756.842 432.232,771.429 432.792,817.875 433.351,819.134 433.91,831.591 434.469,847.176 435.029,839.782 435.588,820.647 436.147,801.11 436.706,799.911 437.266,827.913 437.825,822.844 438.384,834.863 438.943,847.945 439.503,860.247 440.062,887.915 440.621,882.453 441.18,859.844 441.74,904.14 442.299,927.56 442.858,904.275 443.417,894.993 443.977,904.911 444.536,916.158 445.095,922.805 445.654,928.277 446.214,920.533 446.773,892.55 447.332,867.146 447.891,842.627 448.451,822.324 449.01,816.849 449.569,812.06 450.128,858.194 450.688,819.674 451.247,816.41 451.806,812.744 452.365,840.27 452.925,787.307 453.484,787.564 454.043,800.39 454.602,814.137 455.162,840.029 455.721,820.46 456.28,800.168 456.839,766.038 457.399,753.936 457.958,771.186 458.517,781.408 459.076,795.826 459.636,826.471 460.195,836.525 460.754,881.181 461.313,890.419 461.873,898.225 462.432,872.78 462.991,884.182 463.55,862.043 464.11,843.068 464.669,836.129 465.228,829.338 465.787,840.725 466.347,836.831 466.906,831.892 467.465,775.248 468.024,775.802 468.584,789.241 469.143,786.441 469.702,783.322 470.261,781.509 470.821,745.953 471.38,744.863 471.939,743.536 472.498,725.561 473.058,725.661 473.617,710.712 474.176,694.21 474.735,695.149 475.295,679.976 475.854,682.555 476.413,686.533 476.972,711.803 477.532,694.461 478.091,711.636 478.65,711.818 479.209,750.462 479.769,766.803 480.328,762.713 480.887,744.791 481.446,741.333 482.006,772.264 482.565,770.722 483.124,751.78 483.683,714.707 484.243,716.098 484.802,735.204 485.361,765.867 485.92,764.036 486.48,760.328 487.039,761.234 487.598,762.053 488.157,743.868 488.717,743.975 489.276,772.832 489.835,771.322 490.394,783.9 490.954,748.739 491.513,750.97 492.072,700.77 492.631,690.716 493.191,676.157 493.75,677.841 494.309,680.425 494.868,681.888 495.428,699.688 495.987,735.689 496.546,786.383 497.105,782.097 497.665,778.919 498.224,794.181 498.783,789.981 499.342,752.319 499.902,750.513 500.461,735.957 501.02,735.623 501.579,764.246 502.139,726.907 502.698,690.909 503.257,677.392 503.816,662.608 504.376,648.686 504.935,640.663 505.494,645.029 506.053,617.279 506.613,621.368 507.172,645.062 507.731,682.989 508.29,636.901 508.85,628.017 509.409,648.293 509.968,618.728 510.527,608.05 511.087,635.418 511.646,625.066 512.205,646.993 512.764,666.706 513.324,685.186 513.883,686.405 514.442,688.152 515.001,690.439 515.561,708.921 516.12,692.676 516.679,725.684 517.238,725.448 517.798,708.921 518.357,713.717 518.916,728.698 519.475,696.127 520.035,697.566 520.594,697.892 521.153,698.317 521.712,732.968 522.272,714.982 522.831,700.892 523.39,684.65 523.949,687.538 524.509,672.831 525.068,676.393 525.627,724.784 526.186,721.245 526.746,721.986 527.305,705.949 527.864,707.663 528.423,706.907 528.983,692.892 529.542,694.977 530.101,696.613 530.66,697.952 531.22,700.517 531.779,716.32 532.338,715.989 532.897,716.662 533.457,718.847 534.016,719.039 534.575,733.818 535.134,733.731 535.694,734.398 536.253,749.753 536.812,748.957 537.371,729.23 537.931,726.971 538.49,728.123 539.049,744.361 539.608,722.891 540.168,722.19 540.727,738.611 541.286,753.249 541.845,733.68 542.405,713.782 542.964,713.337 543.523,711.797 544.082,724.264 544.642,740.614 545.201,772.857 545.76,741.333 546.319,755.753 546.879,735.364 547.438,753.833 547.997,786.452 548.556,766.403 549.116,765.248 549.675,762.822 550.234,761.763 550.793,726.612 551.353,713.228 551.912,713.979 552.471,712.51 553.031,726.115 553.59,708.486 554.149,678.192 554.708,692.426 555.268,692.262 555.827,708.94 556.386,725.794 556.945,759.28 557.505,775.616 558.064,773.012 558.623,753.64 559.182,748.662 559.742,762.268 560.301,761.387 560.86,757.571 561.419,789.818 561.979,783.16 562.538,796.794 563.097,776.69 563.656,754.532 564.216,741.392 564.775,742.662 565.334,740.634 565.893,740.125 566.453,751.695 567.012,747.589 567.571,778.422 568.13,741.591 568.69,725.694 569.249,693.48 569.808,697.289 570.367,663.075 570.927,685.003 571.486,701.007 572.045,717.266 572.604,715.912 573.164,713.382 573.723,713.528 574.282,747.4 574.841,730.389 575.401,746.187 575.96,745.31 576.519,757.284 577.078,770.589 577.638,751.561 578.197,745.272 578.756,774.577 579.315,789.592 579.875,783.06 580.434,775.358 580.993,771.632 581.552,769.038 582.112,748.211 582.671,781.682 583.23,781.507 583.789,757.316 584.349,741.204 584.908,658.212 585.467,743.228 586.026,758.119 586.586,754.205 587.145,736.853 587.704,750.098 588.263,748.219 588.823,748.639 589.382,745.054 589.941,755.171 590.5,700.869 591.06,751.367 591.619,717.771 592.178,748.584 592.737,714.099 593.297,713.812 593.856,745.853 594.415,743.758 594.974,760.467 595.534,740.933 596.093,755.761 596.652,754.399 597.211,782.515 597.771,762.808 598.33,772.136 598.889,734.461 599.448,749.537 600.008,713.868 600.567,682.825 601.126,735.355 601.685,732.985 602.245,732.418 602.804,735.436 603.363,719.627 603.922,687.679 604.482,720.521 605.041,702.537 605.6,686.595 606.159,655.785 606.719,722.196 607.278,737.251 607.837,782.489 608.396,780.607 608.956,743.809 609.515,728.118 610.074,742.863 610.633,725.442 611.193,737.777 611.752,750.573 612.311,730.331 612.87,762.111 613.43,723.903 613.989,707.983 614.548,706.67 615.107,709.757 615.667,695.09 616.226,661.071 616.785,698.617 617.344,700.24 617.904,714.004 618.463,714.536 619.022,711.309 619.581,727.918 620.141,726.923 620.7,709.65 621.259,710.396 621.818,710.874 622.378,710.035 622.937,712.059 623.496,712.409 624.055,709.903 624.615,660.191 625.174,678.386 625.733,698.193 626.292,682.839 626.852,681.733 627.411,636.439 627.97,638.316 628.529,660.047 629.089,677.591 629.648,682.026 630.207,685.111 630.766,698.866 631.326,701.248 631.885,746.364 632.444,710.974 633.003,710.058 633.563,712.477 634.122,697.128 634.681,712.686 635.24,713.414 635.8,757.193 636.359,736.699 636.918,783.126 637.477,765.073 638.037,745.627 638.596,729.891 639.155,742.512 639.714,723.487 640.274,722.044 640.833,738.583 641.392,705.039 641.951,688.926 642.511,686.282 643.07,670.008 643.629,673.117 644.188,673.901 644.748,722.563 645.307,692.648 645.866,680.838 646.425,694.11 646.985,710.573 647.544,696.256 648.103,730.464 648.662,728.197 649.222,697.066 649.781,694.437 650.34,680.644 650.899,682.35 651.459,651.425 652.018,689.062 652.577,705.132 653.136,708.217 653.696,720.481 654.255,720.28 654.814,702.195 655.373,700.363 655.933,671.629 656.492,643.5 657.051,652.5 657.61,653.516 658.17,676.113 658.729,691.547 659.288,694.989 659.847,725.855 660.407,723.827 660.966,767.786 661.525,780.425 662.084,788.529 662.644,783.422 663.203,730.501 663.762,744.755 664.321,739.769 664.881,701.447 665.44,701.418 665.999,698.895 666.558,619.128 667.118,623.483 667.677,642.756 668.236,645.935 668.795,632.925 669.355,622.371 669.914,644.751 670.473,616.01 671.032,585.88 671.592,558.362 672.151,566.641 672.71,557.913 673.269,579.975 673.829,570.249 674.388,560.433 674.947,584.899 675.506,609.747 676.066,579.086 676.625,597.965 677.184,574.022 677.743,563.813 678.303,572.178 678.862,581.229 679.421,587.984 679.981,625.767 680.54,614.849 681.099,601.358 681.658,602.57 682.218,592.102 682.777,611.923 683.336,599.73 683.895,634.534 684.455,623.559 685.014,629.661 685.573,631.931 686.132,636.031 686.692,655.628 687.251,659.613 687.81,648.192 688.369,618.233 688.929,634.551 689.488,637.787 690.047,671.929 690.606,639.088 691.166,640.384 691.725,646.086 692.284,631.675 692.843,651.464 693.403,621.571 693.962,661.245 694.521,647.467 695.08,647.307 695.64,633.165 696.199,668.535 696.758,703.569 697.317,722.034 697.877,737.204 698.436,733.9 698.995,748.554 699.554,714.746 700.114,701.479 700.673,701.47 701.232,668.211 701.791,689.346 702.351,703.684 702.91,674.067 703.469,692.79 704.028,676.355 704.588,694.369 705.147,695.982 705.706,692.876 706.265,709.282 706.825,688.325 707.384,674.939 707.943,675.059 708.502,676.788 709.062,693.577 709.621,692.938 710.18,660.094 710.739,663.553 711.299,699.329 711.858,716.477 712.417,701.062 712.976,699.823 713.536,699.352 714.095,729.242 714.654,745.349 715.213,775.193 715.773,758.363 716.332,789.211 716.891,752.704 717.45,747.781 718.01,744.083 718.569,712.213 719.128,711.132 719.687,692.92 720.247,708.275 720.806,675.38 721.365,674.535 721.924,707.088 722.484,702.775 723.043,702.564 723.602,703.923 724.161,701.144 724.721,718.044 725.28,745.877 725.839,739.578 726.398,739.028 726.958,753.347 727.517,732.694 728.076,715.378 728.635,730.954 729.195,726.828 729.754,709.773 730.313,676.825 730.872,693.658 731.432,693.513 731.991,726.523 732.55,723.613 733.109,722.795 733.669,707.051 734.228,704.986 734.787,720.238 735.346,704.813 735.906,691.337 736.465,660.252 737.024,646.036 737.583,634.818 738.143,606.926 738.702,661.759 739.261,648.528 739.82,632.89 740.38,602.411 740.939,623.63 741.498,628.773 742.057,615.365 742.617,557.889 743.176,612.108 743.735,617.908 744.294,645.208 744.854,666.428 745.413,651.07 745.972,654.698 746.531,674.018 747.091,676.483 747.65,697.161 748.209,714.973 748.768,729.268 749.328,725.743 749.887,738.683 750.446,733.136 751.005,734.019 751.565,728.946 752.124,710.433 752.683,743.127 753.242,739.951 753.802,783.783 754.361,811.667 754.92,792.572 755.479,755.686 756.039,703.981 756.598,702.32 757.157,720.629 757.716,734.274 758.276,734.644 758.835,735.422 759.394,734.517 759.953,759.428 760.513,754.66 761.072,735.736 761.631,780.356 762.19,759.994 762.75,758.684 763.309,738.87 763.868,734.703 764.427,733.287 764.987,747.482 765.546,743.362 766.105,767.914 766.664,749.274 767.224,730.183 767.783,710.391 768.342,709.838 768.901,644.969 769.461,649.563 770.02,651.075 770.579,651.125 771.138,650.741 771.698,669.363 772.257,670.538 772.816,653.657 773.375,670.216 773.935,688.346 774.494,686.349 775.053,685.061 775.612,684.128 776.172,683.519 776.731,648.843 777.29,651.667 777.849,637.345 778.409,655.945 778.968,659.712 779.527,644.333 780.086,661.924 780.646,659.714 781.205,662.689 781.764,664.708 782.323,664.41 782.883,649.171 783.442,637.865 784.001,657.112 784.56,656.292 785.12,657.874 785.679,674.973 786.238,675.217 786.797,692.429 787.357,690.937 787.916,725.823 788.475,722.53 789.034,737.992 789.594,734.12 790.153,731.521 790.712,707.935 791.271,772.423 791.831,767.527 792.39,764.017 792.949,746.893 793.508,778.142 794.068,758.869 794.627,757.28 795.186,735.689 795.745,746.481 796.305,742.324 796.864,756.968 797.423,753.338 797.982,781.456 798.542,776.797 799.101,772.905 799.66,786.231 800.219,816.157 800.779,841.221 801.338,830.799 801.897,805.25 802.456,783.984 803.016,743.181 803.575,754.44 804.134,747.515 804.693,727.026 805.253,725.571 805.812,755.433 806.371,734.934 806.931,683.129 807.49,698.7 808.049,745.403 808.608,728.022 809.168,693.083 809.727,694.416 810.286,692.398 810.845,659.803 811.405,663.93 811.964,681.66 812.523,679.84 813.082,678.214 813.642,649.345 814.201,667.661 814.76,635.507 815.319,621.374 815.879,625.626 816.438,627.29 816.997,631.704 817.556,680.924 818.116,663.953 818.675,632.431 819.234,653.279 819.793,637.886 820.353,625.55 820.912,646.521 821.471,649.22 822.03,685.267 822.59,696.102 823.149,694.419 823.708,683.569 824.267,714.701 824.827,744.298 825.386,725.554 825.945,726.368 826.504,694.334 827.064,695.044 827.623,696.212 828.182,691.191 828.741,645.23 829.301,615.414 829.86,602.091 830.419,623.219 830.978,644.36 831.538,664.13 832.097,666.806 832.656,718.554 833.215,715.319 833.775,711.63 834.334,728.99 834.893,761.023 835.452,757.756 836.012,740.064 836.571,736.523 837.13,764.377 837.689,777.589 838.249,757.042 838.808,768.611 839.367,763.207 839.926,761.213 840.486,744.029 841.045,740.305 841.604,690.579 842.163,641.743 842.723,642.848 843.282,627.792 843.841,614.58 844.4,602.944 844.96,607.243 845.519,628.792 846.078,628.959 846.637,647.429 847.197,632.891 847.756,666.015 848.315,670.113 848.874,689.717 849.434,671.874 849.993,641.891 850.552,599.495 851.111,619.224 851.671,640.526 852.23,659.456 852.789,678.091 853.348,677.389 853.908,693.734 854.467,690.856 855.026,706.532 855.585,704.79 856.145,684.292 856.704,685.808 857.263,684.923 857.822,684.739 858.382,681.795 858.941,652.069 859.5,668.727 860.059,670.511 860.619,670.932 861.178,672.996 861.737,656.515 862.296,623.236 862.856,647.421 863.415,668.097 863.974,703.103 864.533,704.477 865.093,681.262 865.652,661.893 866.211,662.263 866.77,681.328 867.33,681.05 867.889,685.337 868.448,736.112 869.007,765.677 869.567,759.836 870.126,738.87 870.685,753.641 871.244,748.762 871.804,761.894 872.363,754.683 872.922,783.898 873.481,779.398 874.041,773.483 874.6,752.716 875.159,750.227 875.718,745.577 876.278,741.198 876.837,722.042 877.396,672.515 877.955,691.648 878.515,659.304 879.074,661.263 879.633,648.858 880.192,685.141 880.752,702.593 881.311,731.276 881.87,740.275 882.429,687.28 882.989,701.262 883.548,699.865 884.107,712.02 884.666,709.415 885.226,675.39 885.785,688.527 886.344,690.04 886.903,673.097 887.463,643.566 888.022,645.57 888.581,665.074 889.14,666.094 889.7,653.261 890.259,623.96 890.818,610.35 891.377,629.697 891.937,647.876 892.496,665.158 893.055,682.553 893.614,699.245 894.174,682.628 894.733,667.286 895.292,702.613 895.851,698.497 896.411,696.301 896.97,696.086 897.529,680.705 898.088,648.717 898.648,646.788 899.207,684.449 899.766,687.778 900.325,703.471 900.885,717.444 901.444,703.603 902.003,690.589 902.562,694.339 903.122,693.164 903.681,691.252 904.24,707.723 904.799,704.389 905.359,737.184 905.918,733.085 906.477,697.028 907.036,728.181 907.596,759.774 908.155,756.131 908.714,721.586 909.273,719.275 909.833,716.387 910.392,728.321 910.951,740.865 911.51,739.05 912.07,689.707 912.629,688.501 913.188,741.643 913.747,739.087 914.307,758.042 914.866,787.659 915.425,800.767 915.984,780.696 916.544,745.239 917.103,744.461 917.662,744.799 918.221,743.622 918.781,727.682 919.34,724.808 919.899,738.902 920.458,738.198 921.018,749.635 921.577,748.826 922.136,698.399 922.695,700.248 923.255,714.557 923.814,710.087 924.373,705.25 924.932,704.404 925.492,702.149 926.051,716.193 926.61,728.051 927.169,724.005 927.729,720.774 928.288,716.31 928.847,716.271 929.406,728.5 929.966,713.396 930.525,725.891 931.084,692.512 931.644,676.455 932.203,695.736 932.762,712.805 933.321,694.833 933.881,726.292 934.44,705.695 934.999,672.889 935.558,658.982 936.118,661.39 936.677,713.673 937.236,695.934 937.795,663.545 938.355,682.256 938.914,711.523 939.473,696.03 940.032,660.167 940.592,692.415 941.151,693.189 941.71,709.079 942.269,737.784 942.829,712.515 943.388,693.762 943.947,674.097 944.506,693.205 945.066,693.263 945.625,723.918 946.184,719.505 946.743,744.37 947.303,744.746 947.862,741.841 948.421,736.342 948.98,717.26 949.54,712.933 950.099,681.247 950.658,730.917 951.217,677.423 951.777,662.298 952.336,646.75 952.895,645.844 953.454,649.259 954.014,667.574 954.573,684.081 955.132,681.766 955.691,667.18 956.251,618.938 956.81,575.668 957.369,566.459 957.928,556.067 958.488,564.149 959.047,586.798 959.606,595.394 960.165,596.722 960.725,617.152 961.284,571.614 961.843,543.362 962.402,521.107 962.962,481.127 963.521,506.518 964.08,502.362 964.639,513.373 965.199,569.907 965.758,561.516 966.317,571.199 966.876,615.35 967.436,606.427 967.995,628.564 968.554,617.694 969.113,648.984 969.673,668.015 970.232,689.391 970.791,689.474 971.35,689.071 971.91,673.734 972.469,673.74 973.028,641.011 973.587,644.905 974.147,658.971 974.706,678.103 975.265,709.256 975.824,726.38 976.384,688.909 976.943,692.605 977.502,692.671 978.061,707.069 978.621,689.431 979.18,671.873 979.739,672.787 980.298,673.055 980.858,673.569 981.417,692.104 981.976,723.56 982.535,752.246 983.095,747.112 983.654,744.862 984.213,737.386 984.772,701.962 985.332,717.718 985.891,718.607 986.45,699.489 987.009,714.752 987.569,698.88 988.128,697.591 988.687,745.873 989.246,758.13 989.806,736.846 990.365,763.989 990.924,759.919 991.483,772.815 992.043,769.456 992.602,734.224 993.161,716.113 993.72,698.648 994.28,713.453 994.839,713.477 995.398,695.467 995.957,663.791 996.517,667.576 997.076,683.834 997.635,683.035 998.194,703.137 998.754,766.93 999.313,777.192 999.872,804.9 1000.43,798.961 1000.99,809.803 1001.55,805.047 1002.11,799.412 1002.67,792.818 1003.23,785.597 1003.79,782.493 1004.35,791.409 1004.91,769.544 1005.46,728.847 1006.02,724.16 1006.58,703.726 1007.14,648.921 1007.7,668.312 1008.26,654.107 1008.82,640.701 1009.38,657.837 1009.94,657.369 1010.5,677.061 1011.06,680.118 1011.62,681.782 1012.18,666.227 1012.73,671.25 1013.29,654.232 1013.85,654.492 1014.41,672.96 1014.97,637.492 1015.53,640.474 1016.09,624.86 1016.65,627.032 1017.21,632.058 1017.77,585.747 1018.33,572.781 1018.89,594.994 1019.45,618.663 1020.01,624.72 1020.56,612.176 1021.12,680.105 1021.68,649.831 1022.24,653.338 1022.8,653.512 1023.36,638.281 1023.92,639.795 1024.48,656.559 1025.04,658.732 1025.6,660.744 1026.16,680.61 1026.72,701.994 1027.28,715.444 1027.83,728.152 1028.39,724.735 1028.95,739.083 1029.51,704.623 1030.07,674.49 1030.63,674.415 1031.19,675.854 1031.75,646.55 1032.31,662.536 1032.87,683.755 1033.43,697.959 1033.99,697.211 1034.55,696.176 1035.1,742.162 1035.66,759 1036.22,738.497 1036.78,749.673 1037.34,746.552 1037.9,708.734 1038.46,692.373 1039.02,696.628 1039.58,695.789 1040.14,697.311 1040.7,696.751 1041.26,659.011 1041.82,676.131 1042.38,657.947 1042.93,640.944 1043.49,645.631 1044.05,680.14 1044.61,661.072 1045.17,660.015 1045.73,659.901 1046.29,657.387 1046.85,675.33 1047.41,674.601 1047.97,656.109 1048.53,673.317 1049.09,673.434 1049.65,720.527 1050.2,733.54 1050.76,763.845 1051.32,794.227 1051.88,806.087 1052.44,798.174 1053,773.316 1053.56,734.657 1054.12,687.839 1054.68,686.013 1055.24,668.005 1055.8,685.857 1056.36,653.711 1056.92,654.801 1057.48,624.691 1058.03,608.332 1058.59,577.582 1059.15,599.142 1059.71,635.864 1060.27,652.396 1060.83,668.68 1061.39,671.009 1061.95,654.578 1062.51,641.435 1063.07,645.538 1063.63,664.818 1064.19,663.291 1064.75,665.889 1065.3,656.337 1065.86,677.067 1066.42,690.063 1066.98,693.264 1067.54,663.685 1068.1,664.247 1068.66,662.146 1069.22,722.954 1069.78,752.709 1070.34,736.311 1070.9,753.087 1071.46,734.482 1072.02,735.209 1072.57,718.033 1073.13,698.087 1073.69,758.48 1074.25,752.284 1074.81,765.65 1075.37,761.703 1075.93,759.094 1076.49,719.099 1077.05,687.442 1077.61,673.453 1078.17,702.905 1078.73,667.696 1079.29,667.375 1079.85,669.724 1080.4,656.339 1080.96,690.491 1081.52,659.036 1082.08,659.465 1082.64,676.355 1083.2,642.483 1083.76,677.595 1084.32,675.42 1084.88,622.778 1085.44,611.756 1086,629.99 1086.56,633.33 1087.12,620.309 1087.67,626.992 1088.23,649.01 1088.79,648.124 1089.35,634.365 1089.91,651.959 1090.47,617.969 1091.03,619.934 1091.59,591.715 1092.15,612.867 1092.71,566.899 1093.27,590.801 1093.83,582.972 1094.39,624.92 1094.94,627.042 1095.5,634.531 1096.06,637.452 1096.62,592.292 1097.18,610.931 1097.74,598.597 1098.3,622.499 1098.86,620.376 1099.42,621.863 1099.98,638.737 1100.54,675.636 1101.1,674.404 1101.66,674.032 1102.22,674.048 1102.77,690.758 1103.33,709.056 1103.89,724.484 1104.45,736.088 1105.01,795.692 1105.57,755.759 1106.13,752.847 1106.69,732.868 1107.25,700.565 1107.81,717.186 1108.37,665.663 1108.93,649.904 1109.49,652.115 1110.04,705.201 1110.6,719.607 1111.16,735.45 1111.72,760.025 1112.28,773.588 1112.84,768.434 1113.4,764.357 1113.96,745.056 1114.52,691.718 1115.08,675.261 1115.64,658.436 1116.2,692.646 1116.76,723.838 1117.31,723.302 1117.87,686.975 1118.43,685.276 1118.99,698.747 1119.55,713.82 1120.11,678.804 1120.67,698.158 1121.23,697.003 1121.79,711.832 1122.35,693.148 1122.91,726.079 1123.47,726.859 1124.03,722.691 1124.59,724.161 1125.14,706.669 1125.7,703.328 1126.26,718.721 1126.82,715.859 1127.38,713.25 1127.94,729.436 1128.5,739.783 1129.06,703.446 1129.62,654.964 1130.18,640.451 1130.74,606.085 1131.3,577.891 1131.86,599.802 1132.41,653.613 1132.97,643.555 1133.53,663.174 1134.09,713.714 1134.65,681.257 1135.21,646.391 1135.77,646.885 1136.33,663.768 1136.89,667.926 1137.45,704.008 1138.01,720.732 1138.57,701.39 1139.13,703.27 1139.68,700.584 1140.24,685.125 1140.8,701.027 1141.36,650.342 1141.92,653.304 1142.48,643.02 1143.04,629.69 1143.6,597.917 1144.16,568.251 1144.72,556.15 1145.28,580.728 1145.84,580.866 1146.4,584.927 1146.96,589.326 1147.51,609.303 1148.07,614.082 1148.63,633.085 1149.19,631.947 1149.75,651.678 1150.31,672.908 1150.87,704.068 1151.43,701.649 1151.99,700.014 1152.55,698.515 1153.11,662.726 1153.67,677.964 1154.23,712.142 1154.78,695.077 1155.34,692.803 1155.9,690.27 1156.46,688.397 1157.02,690.53 1157.58,707.402 1158.14,659.845 1158.7,680.101 1159.26,666.149 1159.82,653.132 1160.38,652.088 1160.94,618.667 1161.5,622.634 1162.05,643.001 1162.61,647.064 1163.17,633.456 1163.73,619.268 1164.29,609.936 1164.85,616.485 1165.41,636.661 1165.97,668.628 1166.53,685.556 1167.09,699.958 1167.65,682.097 1168.21,682.223 1168.77,683.061 1169.33,683.614 1169.88,684.45 1170.44,654.276 1171,656.169 1171.56,690.249 1172.12,712.017 1172.68,712.506 1173.24,696.714 1173.8,663.05 1174.36,648.058 1174.92,638.08 1175.48,658.298 1176.04,662.386 1176.6,665.814 1177.15,648.793 1177.71,635.2 1178.27,637.991 1178.83,672.423 1179.39,675.393 1179.95,656.367 1180.51,609.608 1181.07,597.491 1181.63,599.83 1182.19,638.456 1182.75,641.737 1183.31,646.565 1183.87,645.833 1184.43,648.049 1184.98,615.165 1185.54,632.786 1186.1,620.265 1186.66,594.523 1187.22,600.664 1187.78,637.045 1188.34,673.904 1188.9,691.017 1189.46,705.437 1190.02,716.33 1190.58,716.63 1191.14,733.421 1191.7,731.142 1192.25,743.407 1192.81,725.208 1193.37,726.91 1193.93,743.046 1194.49,755.48 1195.05,784.047 1195.61,764.366 1196.17,745.712 1196.73,757.929 1197.29,720.845 1197.85,687.784 1198.41,722.111 1198.97,732.896 1199.52,713.922 1200.08,729.987 1200.64,709.24 1201.2,757.892 1201.76,754.15 1202.32,733.003 1202.88,727.047 1203.44,722.252 1204,733.93 1204.56,718.681 1205.12,718.56 1205.68,746.009 1206.24,745.924 1206.8,740.418 1207.35,722.277 1207.91,718.369 1208.47,715.759 1209.03,697.532 1209.59,727.257 1210.15,724.413 1210.71,722.317 1211.27,733.756 1211.83,715.199 1212.39,717.753 1212.95,717.415 1213.51,747.305 1214.07,759.907 1214.62,740.215 1215.18,754.928 1215.74,735.246 1216.3,719.518 1216.86,683.205 1217.42,686.237 1217.98,667.249 1218.54,636.513 1219.1,624.213 1219.66,643.481 1220.22,642.41 1220.78,640.164 1221.34,642.74 1221.89,662.274 1222.45,680.899 1223.01,695.577 1223.57,682.296 1224.13,694.965 1224.69,663.041 1225.25,644.691 1225.81,695.659 1226.37,694.767 1226.93,643.302 1227.49,661.223 1228.05,628.682 1228.61,646.788 1229.17,629.745 1229.72,666.111 1230.28,669.096 1230.84,639.221 1231.4,640.157 1231.96,657.864 1232.52,656.904 1233.08,694.782 1233.64,695.995 1234.2,677.953 1234.76,662.82 1235.32,663.753 1235.88,678.747 1236.44,678.744 1236.99,676.444 1237.55,661.452 1238.11,677.925 1238.67,662.51 1239.23,664.353 1239.79,665.271 1240.35,695.556 1240.91,645.686 1241.47,662.138 1242.03,681.029 1242.59,695.069 1243.15,695.024 1243.71,713.318 1244.26,710.252 1244.82,678.634 1245.38,678.258 1245.94,680.994 1246.5,691.945 1247.06,710.058 1247.62,693.204 1248.18,709.615 1248.74,729.589 1249.3,726.44 1249.86,756.973 1250.42,736.401 1250.98,731.891 1251.54,744.674 1252.09,709.7 1252.65,693.066 1253.21,677.512 1253.77,677.331 1254.33,677.912 1254.89,694.642 1255.45,677.574 1256.01,644.721 1256.57,634.56 1257.13,655.69 1257.69,640.713 1258.25,640.538 1258.81,694.167 1259.36,713.879 1259.92,730.471 1260.48,760.173 1261.04,726.884 1261.6,724.564 1262.16,725.506 1262.72,743.621 1263.28,739.886 1263.84,767.267 1264.4,777.588 1264.96,807.093 1265.52,784.629 1266.08,780.665 1266.63,758.549 1267.19,755.219 1267.75,748.47 1268.31,711.532 1268.87,757.41 1269.43,752.086 1269.99,765.33 1270.55,747.885 1271.11,731.335 1271.67,728.689 1272.23,707.472 1272.79,687.173 1273.35,681.874 1273.91,681.566 1274.46,663.742 1275.02,611.448 1275.58,597.588 1276.14,601.708 1276.7,621.564 1277.26,639.255 1277.82,673.856 1278.38,659.091 1278.94,646.648 1279.5,636.778 1280.06,656.338 1280.62,671.627 1281.18,639.137 1281.73,659.873 1282.29,682.114 1282.85,697.585 1283.41,682.613 1283.97,682.051 1284.53,666.777 1285.09,670.177 1285.65,654.61 1286.21,672.245 1286.77,722.452 1287.33,702.806 1287.89,667.129 1288.45,666.166 1289,667.942 1289.56,682.811 1290.12,683.585 1290.68,684.021 1291.24,714.345 1291.8,713.075 1292.36,694.332 1292.92,694.109 1293.48,695.314 1294.04,710.195 1294.6,707.538 1295.16,688.479 1295.72,721.99 1296.28,735.577 1296.83,729.88 1297.39,745.042 1297.95,754.974 1298.51,784.525 1299.07,749.231 1299.63,745.719 1300.19,711.341 1300.75,742.288 1301.31,690.224 1301.87,656.179 1302.43,637.886 1302.99,641.002 1303.55,642.388 1304.1,675.832 1304.66,694.102 1305.22,711.343 1305.78,721.744 1306.34,685.719 1306.9,719.509 1307.46,705.398 1308.02,723.094 1308.58,740.476 1309.14,739.615 1309.7,783.512 1310.26,794.214 1310.82,757.934 1311.38,784.125 1311.93,778.581 1312.49,789.139 1313.05,782.774 1313.61,779.955 1314.17,792.607 1314.73,805.972 1315.29,796.342 1315.85,791.859 1316.41,788.277 1316.97,783.678 1317.53,781.617 1318.09,805.56 1318.65,833.338 1319.2,777.201 1319.76,758.16 1320.32,705.654 1320.88,688.989 1321.44,754.435 1322,751.153 1322.56,714.42 1323.12,749.906 1323.68,783.467 1324.24,774.76 1324.8,758.105 1325.36,737.877 1325.92,751.709 1326.47,732.552 1327.03,728.054 1327.59,723.463 1328.15,722.709 1328.71,702.004 1329.27,700.249 1329.83,682.284 1330.39,650.646 1330.95,655.306 1331.51,639.476 1332.07,706.681 1332.63,691.896 1333.19,675.394 1333.75,708.694 1334.3,660.039 1334.86,631.264 1335.42,666.451 1335.98,683.277 1336.54,650.827 1337.1,671.297 1337.66,672.538 1338.22,688.969 1338.78,688.824 1339.34,725.072 1339.9,724.351 1340.46,675.021 1341.02,673.901 1341.57,645.01 1342.13,664.902 1342.69,684.567 1343.25,719.161 1343.81,719.822 1344.37,715.577 1344.93,716.44 1345.49,712.656 1346.05,743.128 1346.61,741.169 1347.17,722.806 1347.73,687.406 1348.29,689.554 1348.84,671.279 1349.4,655.925 1349.96,672.303 1350.52,672.167 1351.08,689.469 1351.64,705.818 1352.2,691.157 1352.76,689.149 1353.32,691.108 1353.88,694.532 1354.44,709.223 1355,709.015 1355.56,673.039 1356.12,610.109 1356.67,661.123 1357.23,664.91 1357.79,663.632 1358.35,645.45 1358.91,598.135 1359.47,602.913 1360.03,591.608 1360.59,581.352 1361.15,588.011 1361.71,575.665 1362.27,595.896 1362.83,582.21 1363.39,604.85 1363.94,592.32 1364.5,612.396 1365.06,618.339 1365.62,606.844 1366.18,611.497 1366.74,599.2 1367.3,605.102 1367.86,626.978 1368.42,613.051 1368.98,617.72 1369.54,623.724 1370.1,644.426 1370.66,662.892 1371.21,667.423 1371.77,702.873 1372.33,715.014 1372.89,712.808 1373.45,691.887 1374.01,671.831 1374.57,624.824 1375.13,624.579 1375.69,664.419 1376.25,648.321 1376.81,649.088 1377.37,670.932 1377.93,654.996 1378.49,691.717 1379.04,691.984 1379.6,658.703 1380.16,661.621 1380.72,663.389 1381.28,694.411 1381.84,695.444 1382.4,678.765 1382.96,678.902 1383.52,695.907 1384.08,694.622 1384.64,712.427 1385.2,730.012 1385.76,693.829 1386.31,694.291 1386.87,676.435 1387.43,660.263 1387.99,645.268 1388.55,664.108 1389.11,632.462 1389.67,617.114 1390.23,618.785 1390.79,588.934 1391.35,580.591 1391.91,601.199 1392.47,606.154 1393.03,608.898 1393.58,609.908 1394.14,632.424 1394.7,655.398 1395.26,656.435 1395.82,660.258 1396.38,696.588 1396.94,679.162 1397.5,660.994 1398.06,663.405 1398.62,677.591 1399.18,662.673 1399.74,663.354 1400.3,681.997 1400.86,700.27 1401.41,701.435 1401.97,717.464 1402.53,765.975 1403.09,744.224 1403.65,740.092 1404.21,735.085 1404.77,746.86 1405.33,693.753 1405.89,725.669 1406.45,738.701 1407.01,721.258 1407.57,702.617 1408.13,669.873 1408.68,656.885 1409.24,678.853 1409.8,682.365 1410.36,676.776 1410.92,679.477 1411.48,713.441 1412.04,741.876 1412.6,739.017 1413.16,704.26 1413.72,689.243 1414.28,703.434 1414.84,733.732 1415.4,749.428 1415.95,730.541 1416.51,715.818 1417.07,712.613 1417.63,682.624 1418.19,647.375 1418.75,612.211 1419.31,628.513 1419.87,612.291 1420.43,634.254 1420.99,622.175 1421.55,611.181 1422.11,585.401 1422.67,574.856 1423.23,612.55 1423.78,618.368 1424.34,620.881 1424.9,644.277 1425.46,626.901 1426.02,661.95 1426.58,695.59 1427.14,677.389 1427.7,678.402 1428.26,693.514 1428.82,681.648 1429.38,696.374 1429.94,710.156 1430.5,727.224 1431.05,724.477 1431.61,721.056 1432.17,700.601 1432.73,700.125 1433.29,683.695 1433.85,670.498 1434.41,671.911 1434.97,688.605 1435.53,670.342 1436.09,716.506 1436.65,747.482 1437.21,721.881 1437.77,738.052 1438.33,718.938 1438.88,736.049 1439.44,737.293 1440,718.518 1440.56,697.256 1441.12,680.162 1441.68,650.973 1442.24,651.572 1442.8,702.625 1443.36,706.654 1443.92,706.091 1444.48,721.63 1445.04,736.936 1445.6,733.66 1446.15,743.644 1446.71,752.819 1447.27,735.65 1447.83,714.547 1448.39,710.805 1448.95,660.177 1449.51,679.079 1450.07,678.951 1450.63,661.834 1451.19,663.931 1451.75,680.697 1452.31,678.286 1452.87,679.598 1453.42,679.587 1453.98,678.424 1454.54,677.702 1455.1,675.957 1455.66,656.275 1456.22,607.762 1456.78,627.571 1457.34,614.743 1457.9,619.001 1458.46,570.414 1459.02,560.287 1459.58,597.409 1460.14,598.051 1460.7,600.453 1461.25,620.58 1461.81,608.808 1462.37,611.048 1462.93,634.632 1463.49,653.636 1464.05,659.086 1464.61,643.683 1465.17,645.545 1465.73,663.218 1466.29,664.838 1466.85,683.723 1467.41,662.513 1467.97,678.49 1468.52,680.934 1469.08,680.335 1469.64,663.729 1470.2,679.153 1470.76,713.804 1471.32,711.513 1471.88,691.477 1472.44,641.714 1473,658.669 1473.56,675.529 1474.12,693.962 1474.68,700.583 1475.24,700.317 1475.79,694.721 1476.35,676.987 1476.91,676.903 1477.47,693.149 1478.03,688.388 1478.59,688.521 1479.15,686.69 1479.71,700.372 1480.27,651.307 1480.83,637.879 1481.39,640.873 1481.95,641.975 1482.51,660.443 1483.07,647.031 1483.62,663.018 1484.18,644.475 1484.74,662.497 1485.3,665.402 1485.86,666.657 1486.42,685.958 1486.98,685.969 1487.54,703.474 1488.1,705.752 1488.66,738.112 1489.22,734.751 1489.78,728.89 1490.34,744.696 1490.89,741.595 1491.45,738.524 1492.01,736.304 1492.57,731.997 1493.13,763.181 1493.69,808.585 1494.25,819.961 1494.81,794.014 1495.37,776.08 1495.93,770.491 1496.49,717.576 1497.05,717.106 1497.61,712.806 1498.16,676.583 1498.72,689.894 1499.28,706.846 1499.84,707.774 1500.4,704.277 1500.96,687.39 1501.52,690.486 1502.08,690.55 1502.64,675.461 1503.2,674.317 1503.76,707.267 1504.32,723.969 1504.88,735.483 1505.44,733.083 1505.99,730.369 1506.55,706.489 1507.11,704.884 1507.67,685.343 1508.23,683.557 1508.79,681.079 1509.35,682.48 1509.91,683.034 1510.47,684.251 1511.03,699.494 1511.59,677.88 1512.15,661.732 1512.71,647.922 1513.26,652.483 1513.82,652.389 1514.38,654.723 1514.94,660.726 1515.5,679.89 1516.06,697.193 1516.62,682.371 1517.18,683.057 1517.74,667.656 1518.3,653.255 1518.86,655.563 1519.42,658.547 1519.98,609.167 1520.53,596.306 1521.09,565.245 1521.65,554.012 1522.21,609.462 1522.77,643.502 1523.33,660.648 1523.89,665.788 1524.45,651.202 1525.01,656.957 1525.57,656.073 1526.13,706.417 1526.69,688.222 1527.25,686.357 1527.81,701.489 1528.36,666.794 1528.92,669.8 1529.48,699.756 1530.04,683.081 1530.6,687.208 1531.16,655.572 1531.72,689.566 1532.28,689.115 1532.84,652.601 1533.4,653.626 1533.96,671.813 1534.52,704.232 1535.08,704.674 1535.63,705.602 1536.19,722.238 1536.75,675.231 1537.31,658.332 1537.87,659.851 1538.43,645.388 1538.99,663.63 1539.55,696.399 1540.11,696.432 1540.67,711.61 1541.23,712.405 1541.79,708.938 1542.35,709.723 1542.9,708.897 1543.46,692.534 1544.02,672.103 1544.58,659.916 1545.14,659.533 1545.7,628.986 1546.26,596.76 1546.82,616.02 1547.38,666.407 1547.94,666.074 1548.5,668.644 1549.06,669.162 1549.62,685.733 1550.18,699.304 1550.73,729.797 1551.29,728.684 1551.85,710.581 1552.41,712.241 1552.97,695.646 1553.53,677.208 1554.09,694.821 1554.65,662.663 1555.21,679.04 1555.77,677.857 1556.33,661.009 1556.89,632.025 1557.45,669.48 1558,671.757 1558.56,626.215 1559.12,609.812 1559.68,631.499 1560.24,631.754 1560.8,651.739 1561.36,620.07 1561.92,618.423 1562.48,624.193 1563.04,608.392 1563.6,611.694 1564.16,613.383 1564.72,633.542 1565.28,621.57 1565.83,636.934 1566.39,622.384 1566.95,644.716 1567.51,695.022 1568.07,725.12 1568.63,722.166 1569.19,724.882 1569.75,723.07 1570.31,701.33 1570.87,684.917 1571.43,717.963 1571.99,712.548 1572.55,724.608 1573.1,737.711 1573.66,762.761 1574.22,760.863 1574.78,709.012 1575.34,703.045 1575.9,720.483 1576.46,733.622 1577.02,726.575 1577.58,773.717 1578.14,733.359 1578.7,749.502 1579.26,728.653 1579.82,709.071 1580.37,722.274 1580.93,721.438 1581.49,720.464 1582.05,720.062 1582.61,714.681 1583.17,699.707 1583.73,712.432 1584.29,712.935 1584.85,710.655 1585.41,692.64 1585.97,693.146 1586.53,694.438 1587.09,691.328 1587.65,689.209 1588.2,690.883 1588.76,706.911 1589.32,707.066 1589.88,694.135 1590.44,724.147 1591,738.953 1591.56,722.156 1592.12,717.709 1592.68,714.55 1593.24,729.309 1593.8,726.56 1594.36,741.719 1594.92,750.001 1595.47,776.573 1596.03,742.807 1596.59,724.035 1597.15,689.976 1597.71,671.599 1598.27,705.692 1598.83,736.843 1599.39,738.084 1599.95,737.734 1600.51,718.952 1601.07,719.734 1601.63,731.796 1602.19,731.58 1602.74,728.309 1603.3,711.276 1603.86,708.252 1604.42,706.094 1604.98,737.213 1605.54,684.694 1606.1,685.575 1606.66,701.881 1607.22,685.847 1607.78,685.38 1608.34,715.708 1608.9,716.09 1609.46,715.625 1610.02,727.219 1610.57,724.867 1611.13,720.592 1611.69,675.104 1612.25,692.437 1612.81,676.904 1613.37,658.769 1613.93,626.779 1614.49,614.792 1615.05,618.498 1615.61,604.355 1616.17,591.669 1616.73,594.297 1617.29,618.076 1617.84,589.244 1618.4,597.793 1618.96,568.132 1619.52,562.394 1620.08,570.076 1620.64,579.924 1621.2,602.437 1621.76,606.482 1622.32,607.35 1622.88,611.611 1623.44,615.381 1624,588.411 1624.56,606.757 1625.11,627.225 1625.67,649.806 1626.23,665.103 1626.79,669.683 1627.35,703.863 1627.91,720.057 1628.47,703.076 1629.03,719.084 1629.59,731.909 1630.15,730.699 1630.71,710.93 1631.27,738.497 1631.83,753.394 1632.39,716.398 1632.94,697.508 1633.5,697.021 1634.06,697.851 1634.62,730.491 1635.18,709.314 1635.74,691.985 1636.3,722.755 1636.86,700.11 1637.42,701.394 1637.98,681.968 1638.54,697.807 1639.1,680.161 1639.66,663.724 1640.21,651.645 1640.77,686.356 1641.33,687.538 1641.89,684.343 1642.45,633.836 1643.01,654.718 1643.57,661.208 1644.13,662.756 1644.69,648.636 1645.25,650.293 1645.81,669.094 1646.37,668.561 1646.93,685.423 1647.48,652.787 1648.04,635.979 1648.6,670.967 1649.16,642.852 1649.72,661.35 1650.28,627.821 1650.84,648.675 1651.4,663.404 1651.96,614.606 1652.52,621.304 1653.08,625.69 1653.64,644.03 1654.2,627.735 1654.76,618.859 1655.31,623.032 1655.87,625.903 1656.43,644.244 1656.99,660.31 1657.55,645.144 1658.11,646.696 1658.67,649.331 1659.23,650.695 1659.79,624.048 1660.35,623.875 1660.91,639.673 1661.47,641.523 1662.03,674.374 1662.58,708.491 1663.14,735.256 1663.7,733.704 1664.26,777.263 1664.82,787.747 1665.38,768.883 1665.94,763.856 1666.5,775.172 1667.06,722.171 1667.62,719.654 1668.18,734.036 1668.74,732.933 1669.3,669.331 1669.85,672.2 1670.41,675.698 1670.97,675.323 1671.53,645.572 1672.09,651.018 1672.65,668.931 1673.21,668.352 1673.77,670.435 1674.33,671.135 1674.89,717.334 1675.45,716.852 1676.01,729.356 1676.57,728.186 1677.13,757.826 1677.68,754.166 1678.24,714.37 1678.8,743.947 1679.36,772.42 1679.92,769.939 1680.48,796.409 1681.04,787.011 1681.6,764.475 1682.16,728.297 1682.72,741.392 1683.28,721.07 1683.84,720.369 1684.4,716.42 1684.95,747.65 1685.51,725.473 1686.07,707.579 1686.63,690.005 1687.19,721.303 1687.75,755.999 1688.31,785.264 1688.87,807.747 1689.43,806.685 1689.99,779.795 1690.55,808.31 1691.11,802.886 1691.67,816.152 1692.23,777.147 1692.78,724.542 1693.34,738.08 1693.9,734.128 1694.46,732.286 1695.02,743.1 1695.58,735.638 1696.14,713.693 1696.7,711.382 1697.26,707.061 1697.82,738.124 1698.38,735.115 1698.94,669.936 1699.5,655.422 1700.05,641.88 1700.61,611.413 1701.17,631.34 1701.73,648.596 1702.29,649.654 1702.85,651.777 1703.41,652.989 1703.97,688.678 1704.53,687.368 1705.09,667.289 1705.65,679.052 1706.21,643.634 1706.77,645.204 1707.32,659.187 1707.88,677.799 1708.44,692.053 1709,674.507 1709.56,671.738 1710.12,671.158 1710.68,702.567 1711.24,700.874 1711.8,748.906 1712.36,711.093 1712.92,742.898 1713.48,737.485 1714.04,718.816 1714.6,685.382 1715.15,669.285 1715.71,666.142 1716.27,666.898 1716.83,699.876 1717.39,699.943 1717.95,714.64 1718.51,714.056 1719.07,679.655 1719.63,694.994 1720.19,679.184 1720.75,659.253 1721.31,663.108 1721.87,696.128 1722.42,696.331 1722.98,712.174 1723.54,705.628 1724.1,720.586 1724.66,719.633 1725.22,684.675 1725.78,684.023 1726.34,698.492 1726.9,697.211 1727.46,681.533 1728.02,636.68 1728.58,640.149 1729.14,581.009 1729.69,574.955 1730.25,580.376 1730.81,637.497 1731.37,641.423 1731.93,661.626 1732.49,661.943 1733.05,642.225 1733.61,645.924 1734.17,618.821 1734.73,591.594 1735.29,610.611 1735.85,634.701 1736.41,636.189 1736.97,625.009 1737.52,609.77 1738.08,614.05 1738.64,584.342 1739.2,590.878 1739.76,594.281 1740.32,612.104 1740.88,599.242 1741.44,639.222 1742,660.679 1742.56,659.544 1743.12,660.281 1743.68,662.815 1744.24,629.482 1744.79,614.826 1745.35,668.157 1745.91,669.645 1746.47,685.479 1747.03,703.8 1747.59,703.025 1748.15,703.273 1748.71,717.833 1749.27,700.615 1749.83,699.291 1750.39,697.692 1750.95,715.502 1751.51,713.534 1752.06,731.726 1752.62,730.32 1753.18,745.183 1753.74,775.653 1754.3,740.537 1754.86,722.244 1755.42,703.805 1755.98,734.668 1756.54,734.923 1757.1,750.287 1757.66,715.048 1758.22,700.715 1758.78,751.263 1759.34,746.241 1759.89,740.85 1760.45,735.406 1761.01,718.023 1761.57,698.204 1762.13,697.82 1762.69,683.011 1763.25,682.166 1763.81,695.916 1764.37,663.741 1764.93,677.916 1765.49,677.613 1766.05,663 1766.61,631.668 1767.16,633.595 1767.72,653.861 1768.28,657.705 1768.84,658.592 1769.4,630.423 1769.96,646.568 1770.52,632.411 1771.08,633.404 1771.64,633.667 1772.2,656.875 1772.76,641.529 1773.32,626.783 1773.88,612.328 1774.43,620.152 1774.99,612.624 1775.55,620.974 1776.11,659.787 1776.67,631.363 1777.23,619.086 1777.79,620.124 1778.35,608.328 1778.91,612.431 1779.47,588.64 1780.03,595.862 1780.59,636.778 1781.15,651.941 1781.71,672.561 1782.26,642.837 1782.82,662.907 1783.38,631.506 1783.94,617.34 1784.5,624.412 1785.06,628.867 1785.62,650.317 1786.18,669.218 1786.74,701.369 1787.3,700.243 1787.86,713.355 1788.42,692.902 1788.98,691.415 1789.53,710.664 1790.09,709.582 1790.65,686.731 1791.21,670.298 1791.77,672.044 1792.33,655.967 1792.89,657.931 1793.45,657.475 1794.01,627.775 1794.57,597.497 1795.13,582.952 1795.69,554.2 1796.25,591.472 1796.8,594.707 1797.36,585.175 1797.92,575.874 1798.48,583.217 1799.04,619.296 1799.6,636.676 1800.16,653.997 1800.72,658.679 1801.28,690.701 1801.84,672.778 1802.4,673.452 1802.96,690.046 1803.52,690.427 1804.08,663.124 1804.63,677.884 1805.19,692.623 1805.75,692.631 1806.31,694.205 1806.87,710.795 1807.43,659.489 1807.99,679.095 1808.55,659.733 1809.11,644.646 1809.67,664.625 1810.23,686.662 1810.79,685.002 1811.35,684.602 1811.9,685.044 1812.46,687.57 1813.02,689.959 1813.58,708.808 1814.14,696.207 1814.7,665.901 1815.26,714.153 1815.82,728.063 1816.38,753.819 1816.94,766.401 1817.5,749.517 1818.06,748.313 1818.62,745.065 1819.18,743.402 1819.73,740.405 1820.29,752.934 1820.85,751.72 1821.41,762.703 1821.97,792.809 1822.53,771.321 1823.09,815.64 1823.65,790.577 1824.21,817.947 1824.77,810.298 1825.33,788.242 1825.89,797.905 1826.45,822.258 1827,829.268 1827.56,807.106 1828.12,817.989 1828.68,797.234 1829.24,791.164 1829.8,787.665 1830.36,815.097 1830.92,805.085 1831.48,799.547 1832.04,792.918 1832.6,787.849 1833.16,797.492 1833.72,760.946 1834.27,743.229 1834.83,721.713 1835.39,739.377 1835.95,700.212 1836.51,684.48 1837.07,664.649 1837.63,665.381 1838.19,682.301 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 691.258 L720.806 691.258 L721.365 691.258 L721.924 691.258 L722.484 691.258 L723.043 691.258 L723.602 691.258 L724.161 691.258 L724.721 691.258 L725.28 691.258 L725.839 691.258 L726.398 691.258 L726.958 691.258 L727.517 691.258 L728.076 691.258 L728.635 691.258 L729.195 691.258 L729.754 691.258 L730.313 691.258 L730.872 691.258 L731.432 691.258 L731.991 691.258 L732.55 691.258 L733.109 691.258 L733.669 691.258 L734.228 691.258 L734.787 691.258 L735.346 691.258 L735.906 691.258 L736.465 691.258 L737.024 691.258 L737.583 691.258 L738.143 691.258 L738.702 691.258 L739.261 691.258 L739.82 691.258 L740.38 691.258 L740.939 691.258 L741.498 691.258 L742.057 691.258 L742.617 691.258 L743.176 691.258 L743.735 691.258 L744.294 691.258 L744.854 691.258 L745.413 691.258 L745.972 691.258 L746.531 691.258 L747.091 691.258 L747.65 691.258 L748.209 691.258 L748.768 691.258 L749.328 691.258 L749.887 691.258 L750.446 691.258 L751.005 691.258 L751.565 691.258 L752.124 691.258 L752.683 691.258 L753.242 691.258 L753.802 691.258 L754.361 691.258 L754.92 691.258 L755.479 691.258 L756.039 691.258 L756.598 691.258 L757.157 691.258 L757.716 691.258 L758.276 691.258 L758.835 691.258 L759.394 691.258 L759.953 691.258 L760.513 691.258 L761.072 691.258 L761.631 691.258 L762.19 691.258 L762.75 691.258 L763.309 691.258 L763.868 691.258 L764.427 691.258 L764.987 691.258 L765.546 691.258 L766.105 691.258 L766.664 691.258 L767.224 691.258 L767.783 691.258 L768.342 691.258 L768.901 691.258 L769.461 691.258 L770.02 691.258 L770.579 691.258 L771.138 691.258 L771.698 691.258 L772.257 691.258 L772.816 691.258 L773.375 691.258 L773.935 691.258 L774.494 691.258 L775.053 691.258 L775.612 691.258 L776.172 691.258 L776.731 691.258 L777.29 691.258 L777.849 691.258 L778.409 691.258 L778.968 691.258 L779.527 691.258 L780.086 691.258 L780.646 691.258 L781.205 691.258 L781.764 691.258 L782.323 691.258 L782.883 691.258 L783.442 691.258 L784.001 691.258 L784.56 691.258 L785.12 691.258 L785.679 691.258 L786.238 691.258 L786.797 691.258 L787.357 691.258 L787.916 691.258 L788.475 691.258 L789.034 691.258 L789.594 691.258 L790.153 691.258 L790.712 691.258 L791.271 691.258 L791.831 691.258 L792.39 691.258 L792.949 691.258 L793.508 691.258 L794.068 691.258 L794.627 691.258 L795.186 691.258 L795.745 691.258 L796.305 691.258 L796.864 691.258 L797.423 691.258 L797.982 691.258 L798.542 691.258 L799.101 691.258 L799.66 691.258 L800.219 691.258 L800.779 691.258 L801.338 691.258 L801.897 691.258 L802.456 691.258 L803.016 691.258 L803.575 691.258 L804.134 691.258 L804.693 691.258 L805.253 691.258 L805.812 691.258 L806.371 691.258 L806.931 691.258 L807.49 691.258 L808.049 691.258 L808.608 691.258 L809.168 691.258 L809.727 691.258 L810.286 691.258 L810.845 691.258 L811.405 691.258 L811.964 691.258 L812.523 691.258 L813.082 691.258 L813.642 691.258 L814.201 691.258 L814.76 691.258 L815.319 691.258 L815.879 691.258 L816.438 691.258 L816.997 691.258 L817.556 691.258 L818.116 691.258 L818.675 691.258 L819.234 691.258 L819.793 691.258 L820.353 691.258 L820.912 691.258 L821.471 691.258 L822.03 691.258 L822.59 691.258 L823.149 691.258 L823.708 691.258 L824.267 691.258 L824.827 691.258 L825.386 691.258 L825.945 691.258 L826.504 691.258 L827.064 691.258 L827.623 691.258 L828.182 691.258 L828.741 691.258 L829.301 691.258 L829.86 691.258 L830.419 691.258 L830.978 691.258 L831.538 691.258 L832.097 691.258 L832.656 691.258 L833.215 691.258 L833.775 691.258 L834.334 691.258 L834.893 691.258 L835.452 691.258 L836.012 691.258 L836.571 691.258 L837.13 691.258 L837.689 691.258 L838.249 691.258 L838.808 691.258 L839.367 691.258 L839.926 691.258 L840.486 691.258 L841.045 691.258 L841.604 691.258 L842.163 691.258 L842.723 691.258 L843.282 691.258 L843.841 691.258 L844.4 691.258 L844.96 691.258 L845.519 691.258 L846.078 691.258 L846.637 691.258 L847.197 691.258 L847.756 691.258 L848.315 691.258 L848.874 691.258 L849.434 691.258 L849.993 691.258 L850.552 691.258 L851.111 691.258 L851.671 691.258 L852.23 691.258 L852.789 691.258 L853.348 691.258 L853.908 691.258 L854.467 691.258 L855.026 691.258 L855.585 691.258 L856.145 691.258 L856.704 691.258 L857.263 691.258 L857.822 691.258 L858.382 691.258 L858.941 691.258 L859.5 691.258 L860.059 691.258 L860.619 691.258 L861.178 691.258 L861.737 691.258 L862.296 691.258 L862.856 691.258 L863.415 691.258 L863.974 691.258 L864.533 691.258 L865.093 691.258 L865.652 691.258 L866.211 691.258 L866.77 691.258 L867.33 691.258 L867.889 691.258 L868.448 691.258 L869.007 691.258 L869.567 691.258 L870.126 691.258 L870.685 691.258 L871.244 691.258 L871.804 691.258 L872.363 691.258 L872.922 691.258 L873.481 691.258 L874.041 691.258 L874.6 691.258 L875.159 691.258 L875.718 691.258 L876.278 691.258 L876.837 691.258 L877.396 691.258 L877.955 691.258 L878.515 691.258 L879.074 691.258 L879.633 691.258 L880.192 691.258 L880.752 691.258 L881.311 691.258 L881.87 691.258 L882.429 691.258 L882.989 691.258 L883.548 691.258 L884.107 691.258 L884.666 691.258 L885.226 691.258 L885.785 691.258 L886.344 691.258 L886.903 691.258 L887.463 691.258 L888.022 691.258 L888.581 691.258 L889.14 691.258 L889.7 691.258 L890.259 691.258 L890.818 691.258 L891.377 691.258 L891.937 691.258 L892.496 691.258 L893.055 691.258 L893.614 691.258 L894.174 691.258 L894.733 691.258 L895.292 691.258 L895.851 691.258 L896.411 691.258 L896.97 691.258 L897.529 691.258 L898.088 691.258 L898.648 691.258 L899.207 691.258 L899.766 691.258 L900.325 691.258 L900.885 691.258 L901.444 691.258 L902.003 691.258 L902.562 691.258 L903.122 691.258 L903.681 691.258 L904.24 691.258 L904.799 691.258 L905.359 691.258 L905.918 691.258 L906.477 691.258 L907.036 691.258 L907.596 691.258 L908.155 691.258 L908.714 691.258 L909.273 691.258 L909.833 691.258 L910.392 691.258 L910.951 691.258 L911.51 691.258 L912.07 691.258 L912.629 691.258 L913.188 691.258 L913.747 691.258 L914.307 691.258 L914.866 691.258 L915.425 691.258 L915.984 691.258 L916.544 691.258 L917.103 691.258 L917.662 691.258 L918.221 691.258 L918.781 691.258 L919.34 691.258 L919.899 691.258 L920.458 691.258 L921.018 691.258 L921.577 691.258 L922.136 691.258 L922.695 691.258 L923.255 691.258 L923.814 691.258 L924.373 691.258 L924.932 691.258 L925.492 691.258 L926.051 691.258 L926.61 691.258 L927.169 691.258 L927.729 691.258 L928.288 691.258 L928.847 691.258 L929.406 691.258 L929.966 691.258 L930.525 691.258 L931.084 691.258 L931.644 691.258 L932.203 691.258 L932.762 691.258 L933.321 691.258 L933.881 691.258 L934.44 691.258 L934.999 691.258 L935.558 691.258 L936.118 691.258 L936.677 691.258 L937.236 691.258 L937.795 691.258 L938.355 691.258 L938.914 691.258 L939.473 691.258 L940.032 691.258 L940.592 691.258 L941.151 691.258 L941.71 691.258 L942.269 691.258 L942.829 691.258 L943.388 691.258 L943.947 691.258 L944.506 691.258 L945.066 691.258 L945.625 691.258 L946.184 691.258 L946.743 691.258 L947.303 691.258 L947.862 691.258 L948.421 691.258 L948.98 691.258 L949.54 691.258 L950.099 691.258 L950.658 691.258 L951.217 691.258 L951.777 691.258 L952.336 691.258 L952.895 691.258 L953.454 691.258 L954.014 691.258 L954.573 691.258 L955.132 691.258 L955.691 691.258 L956.251 691.258 L956.81 691.258 L957.369 691.258 L957.928 691.258 L958.488 691.258 L959.047 691.258 L959.606 691.258 L960.165 691.258 L960.725 691.258 L961.284 691.258 L961.843 691.258 L962.402 691.258 L962.962 691.258 L963.521 691.258 L964.08 691.258 L964.639 691.258 L965.199 691.258 L965.758 691.258 L966.317 691.258 L966.876 691.258 L967.436 691.258 L967.995 691.258 L968.554 691.258 L969.113 691.258 L969.673 691.258 L970.232 691.258 L970.791 691.258 L971.35 691.258 L971.91 691.258 L972.469 691.258 L973.028 691.258 L973.587 691.258 L974.147 691.258 L974.706 691.258 L975.265 691.258 L975.824 691.258 L976.384 691.258 L976.943 691.258 L977.502 691.258 L978.061 691.258 L978.621 691.258 L979.18 691.258 L979.739 691.258 L980.298 691.258 L980.858 691.258 L981.417 691.258 L981.976 691.258 L982.535 691.258 L983.095 691.258 L983.654 691.258 L984.213 691.258 L984.772 691.258 L985.332 691.258 L985.891 691.258 L986.45 691.258 L987.009 691.258 L987.569 691.258 L988.128 691.258 L988.687 691.258 L989.246 691.258 L989.806 691.258 L990.365 691.258 L990.924 691.258 L991.483 691.258 L992.043 691.258 L992.602 691.258 L993.161 691.258 L993.72 691.258 L994.28 691.258 L994.839 691.258 L995.398 691.258 L995.957 691.258 L996.517 691.258 L997.076 691.258 L997.635 691.258 L998.194 691.258 L998.754 691.258 L999.313 691.258 L999.872 691.258 L1000.43 691.258 L1000.99 691.258 L1001.55 691.258 L1002.11 691.258 L1002.67 691.258 L1003.23 691.258 L1003.79 691.258 L1004.35 691.258 L1004.91 691.258 L1005.46 691.258 L1006.02 691.258 L1006.58 691.258 L1007.14 691.258 L1007.7 691.258 L1008.26 691.258 L1008.82 691.258 L1009.38 691.258 L1009.94 691.258 L1010.5 691.258 L1011.06 691.258 L1011.62 691.258 L1012.18 691.258 L1012.73 691.258 L1013.29 691.258 L1013.85 691.258 L1014.41 691.258 L1014.97 691.258 L1015.53 691.258 L1016.09 691.258 L1016.65 691.258 L1017.21 691.258 L1017.77 691.258 L1018.33 691.258 L1018.89 691.258 L1019.45 691.258 L1020.01 691.258 L1020.56 691.258 L1021.12 691.258 L1021.68 691.258 L1022.24 691.258 L1022.8 691.258 L1023.36 691.258 L1023.92 691.258 L1024.48 691.258 L1025.04 691.258 L1025.6 691.258 L1026.16 691.258 L1026.72 691.258 L1027.28 691.258 L1027.83 691.258 L1028.39 691.258 L1028.95 691.258 L1029.51 691.258 L1030.07 691.258 L1030.63 691.258 L1031.19 691.258 L1031.75 691.258 L1032.31 691.258 L1032.87 691.258 L1033.43 691.258 L1033.99 691.258 L1034.55 691.258 L1035.1 691.258 L1035.66 691.258 L1036.22 691.258 L1036.78 691.258 L1037.34 691.258 L1037.9 691.258 L1038.46 691.258 L1039.02 691.258 L1039.58 691.258 L1040.14 691.258 L1040.7 691.258 L1041.26 691.258 L1041.82 691.258 L1042.38 691.258 L1042.93 691.258 L1043.49 691.258 L1044.05 691.258 L1044.61 691.258 L1045.17 691.258 L1045.73 691.258 L1046.29 691.258 L1046.85 691.258 L1047.41 691.258 L1047.97 691.258 L1048.53 691.258 L1049.09 691.258 L1049.65 691.258 L1050.2 691.258 L1050.76 691.258 L1051.32 691.258 L1051.88 691.258 L1052.44 691.258 L1053 691.258 L1053.56 691.258 L1054.12 691.258 L1054.68 691.258 L1055.24 691.258 L1055.8 691.258 L1056.36 691.258 L1056.92 691.258 L1057.48 691.258 L1058.03 691.258 L1058.59 691.258 L1059.15 691.258 L1059.71 691.258 L1060.27 691.258 L1060.83 691.258 L1061.39 691.258 L1061.95 691.258 L1062.51 691.258 L1063.07 691.258 L1063.63 691.258 L1064.19 691.258 L1064.75 691.258 L1065.3 691.258 L1065.86 691.258 L1066.42 691.258 L1066.98 691.258 L1067.54 691.258 L1068.1 691.258 L1068.66 691.258 L1069.22 691.258 L1069.78 691.258 L1070.34 691.258 L1070.9 691.258 L1071.46 691.258 L1072.02 691.258 L1072.57 691.258 L1073.13 691.258 L1073.69 691.258 L1074.25 691.258 L1074.81 691.258 L1075.37 691.258 L1075.93 691.258 L1076.49 691.258 L1077.05 691.258 L1077.61 691.258 L1078.17 691.258 L1078.73 691.258 L1079.29 691.258 L1079.85 691.258 L1080.4 691.258 L1080.96 691.258 L1081.52 691.258 L1082.08 691.258 L1082.64 691.258 L1083.2 691.258 L1083.76 691.258 L1084.32 691.258 L1084.88 691.258 L1085.44 691.258 L1086 691.258 L1086.56 691.258 L1087.12 691.258 L1087.67 691.258 L1088.23 691.258 L1088.79 691.258 L1089.35 691.258 L1089.91 691.258 L1090.47 691.258 L1091.03 691.258 L1091.59 691.258 L1092.15 691.258 L1092.71 691.258 L1093.27 691.258 L1093.83 691.258 L1094.39 691.258 L1094.94 691.258 L1095.5 691.258 L1096.06 691.258 L1096.62 691.258 L1097.18 691.258 L1097.74 691.258 L1098.3 691.258 L1098.86 691.258 L1099.42 691.258 L1099.98 691.258 L1100.54 691.258 L1101.1 691.258 L1101.66 691.258 L1102.22 691.258 L1102.77 691.258 L1103.33 691.258 L1103.89 691.258 L1104.45 691.258 L1105.01 691.258 L1105.57 691.258 L1106.13 691.258 L1106.69 691.258 L1107.25 691.258 L1107.81 691.258 L1108.37 691.258 L1108.93 691.258 L1109.49 691.258 L1110.04 691.258 L1110.6 691.258 L1111.16 691.258 L1111.72 691.258 L1112.28 691.258 L1112.84 691.258 L1113.4 691.258 L1113.96 691.258 L1114.52 691.258 L1115.08 691.258 L1115.64 691.258 L1116.2 691.258 L1116.76 691.258 L1117.31 691.258 L1117.87 691.258 L1118.43 691.258 L1118.99 691.258 L1119.55 691.258 L1120.11 691.258 L1120.67 691.258 L1121.23 691.258 L1121.79 691.258 L1122.35 691.258 L1122.91 691.258 L1123.47 691.258 L1124.03 691.258 L1124.59 691.258 L1125.14 691.258 L1125.7 691.258 L1126.26 691.258 L1126.82 691.258 L1127.38 691.258 L1127.94 691.258 L1128.5 691.258 L1129.06 691.258 L1129.62 691.258 L1130.18 691.258 L1130.74 691.258 L1131.3 691.258 L1131.86 691.258 L1132.41 691.258 L1132.97 691.258 L1133.53 691.258 L1134.09 691.258 L1134.65 691.258 L1135.21 691.258 L1135.77 691.258 L1136.33 691.258 L1136.89 691.258 L1137.45 691.258 L1138.01 691.258 L1138.57 691.258 L1139.13 691.258 L1139.68 691.258 L1140.24 691.258 L1140.8 691.258 L1141.36 691.258 L1141.92 691.258 L1142.48 691.258 L1143.04 691.258 L1143.6 691.258 L1144.16 691.258 L1144.72 691.258 L1145.28 691.258 L1145.84 691.258 L1146.4 691.258 L1146.96 691.258 L1147.51 691.258 L1148.07 691.258 L1148.63 691.258 L1149.19 691.258 L1149.75 691.258 L1150.31 691.258 L1150.87 691.258 L1151.43 691.258 L1151.99 691.258 L1152.55 691.258 L1153.11 691.258 L1153.67 691.258 L1154.23 691.258 L1154.78 691.258 L1155.34 691.258 L1155.9 691.258 L1156.46 691.258 L1157.02 691.258 L1157.58 691.258 L1158.14 691.258 L1158.7 691.258 L1159.26 691.258 L1159.82 691.258 L1160.38 691.258 L1160.94 691.258 L1161.5 691.258 L1162.05 691.258 L1162.61 691.258 L1163.17 691.258 L1163.73 691.258 L1164.29 691.258 L1164.85 691.258 L1165.41 691.258 L1165.97 691.258 L1166.53 691.258 L1167.09 691.258 L1167.65 691.258 L1168.21 691.258 L1168.77 691.258 L1169.33 691.258 L1169.88 691.258 L1170.44 691.258 L1171 691.258 L1171.56 691.258 L1172.12 691.258 L1172.68 691.258 L1173.24 691.258 L1173.8 691.258 L1174.36 691.258 L1174.92 691.258 L1175.48 691.258 L1176.04 691.258 L1176.6 691.258 L1177.15 691.258 L1177.71 691.258 L1178.27 691.258 L1178.83 691.258 L1179.39 691.258 L1179.95 691.258 L1180.51 691.258 L1181.07 691.258 L1181.63 691.258 L1182.19 691.258 L1182.75 691.258 L1183.31 691.258 L1183.87 691.258 L1184.43 691.258 L1184.98 691.258 L1185.54 691.258 L1186.1 691.258 L1186.66 691.258 L1187.22 691.258 L1187.78 691.258 L1188.34 691.258 L1188.9 691.258 L1189.46 691.258 L1190.02 691.258 L1190.58 691.258 L1191.14 691.258 L1191.7 691.258 L1192.25 691.258 L1192.81 691.258 L1193.37 691.258 L1193.93 691.258 L1194.49 691.258 L1195.05 691.258 L1195.61 691.258 L1196.17 691.258 L1196.73 691.258 L1197.29 691.258 L1197.85 691.258 L1198.41 691.258 L1198.97 691.258 L1199.52 691.258 L1200.08 691.258 L1200.64 691.258 L1201.2 691.258 L1201.76 691.258 L1202.32 691.258 L1202.88 691.258 L1203.44 691.258 L1204 691.258 L1204.56 691.258 L1205.12 691.258 L1205.68 691.258 L1206.24 691.258 L1206.8 691.258 L1207.35 691.258 L1207.91 691.258 L1208.47 691.258 L1209.03 691.258 L1209.59 691.258 L1210.15 691.258 L1210.71 691.258 L1211.27 691.258 L1211.83 691.258 L1212.39 691.258 L1212.95 691.258 L1213.51 691.258 L1214.07 691.258 L1214.62 691.258 L1215.18 691.258 L1215.74 691.258 L1216.3 691.258 L1216.86 691.258 L1217.42 691.258 L1217.98 691.258 L1218.54 691.258 L1219.1 691.258 L1219.66 691.258 L1220.22 691.258 L1220.78 691.258 L1221.34 691.258 L1221.89 691.258 L1222.45 691.258 L1223.01 691.258 L1223.57 691.258 L1224.13 691.258 L1224.69 691.258 L1225.25 691.258 L1225.81 691.258 L1226.37 691.258 L1226.93 691.258 L1227.49 691.258 L1228.05 691.258 L1228.61 691.258 L1229.17 691.258 L1229.72 691.258 L1230.28 691.258 L1230.84 691.258 L1231.4 691.258 L1231.96 691.258 L1232.52 691.258 L1233.08 691.258 L1233.64 691.258 L1234.2 691.258 L1234.76 691.258 L1235.32 691.258 L1235.88 691.258 L1236.44 691.258 L1236.99 691.258 L1237.55 691.258 L1238.11 691.258 L1238.67 691.258 L1239.23 691.258 L1239.79 691.258 L1240.35 691.258 L1240.91 691.258 L1241.47 691.258 L1242.03 691.258 L1242.59 691.258 L1243.15 691.258 L1243.71 691.258 L1244.26 691.258 L1244.82 691.258 L1245.38 691.258 L1245.94 691.258 L1246.5 691.258 L1247.06 691.258 L1247.62 691.258 L1248.18 691.258 L1248.74 691.258 L1249.3 691.258 L1249.86 691.258 L1250.42 691.258 L1250.98 691.258 L1251.54 691.258 L1252.09 691.258 L1252.65 691.258 L1253.21 691.258 L1253.77 691.258 L1254.33 691.258 L1254.89 691.258 L1255.45 691.258 L1256.01 691.258 L1256.57 691.258 L1257.13 691.258 L1257.69 691.258 L1258.25 691.258 L1258.81 691.258 L1259.36 691.258 L1259.92 691.258 L1260.48 691.258 L1261.04 691.258 L1261.6 691.258 L1262.16 691.258 L1262.72 691.258 L1263.28 691.258 L1263.84 691.258 L1264.4 691.258 L1264.96 691.258 L1265.52 691.258 L1266.08 691.258 L1266.63 691.258 L1267.19 691.258 L1267.75 691.258 L1268.31 691.258 L1268.87 691.258 L1269.43 691.258 L1269.99 691.258 L1270.55 691.258 L1271.11 691.258 L1271.67 691.258 L1272.23 691.258 L1272.79 691.258 L1273.35 691.258 L1273.91 691.258 L1274.46 691.258 L1275.02 691.258 L1275.58 691.258 L1276.14 691.258 L1276.7 691.258 L1277.26 691.258 L1277.82 691.258 L1278.38 691.258 L1278.94 691.258 L1279.5 691.258 L1280.06 691.258 L1280.62 691.258 L1281.18 691.258 L1281.73 691.258 L1282.29 691.258 L1282.85 691.258 L1283.41 691.258 L1283.97 691.258 L1284.53 691.258 L1285.09 691.258 L1285.65 691.258 L1286.21 691.258 L1286.77 691.258 L1287.33 691.258 L1287.89 691.258 L1288.45 691.258 L1289 691.258 L1289.56 691.258 L1290.12 691.258 L1290.68 691.258 L1291.24 691.258 L1291.8 691.258 L1292.36 691.258 L1292.92 691.258 L1293.48 691.258 L1294.04 691.258 L1294.6 691.258 L1295.16 691.258 L1295.72 691.258 L1296.28 691.258 L1296.83 691.258 L1297.39 691.258 L1297.95 691.258 L1298.51 691.258 L1299.07 691.258 L1299.63 691.258 L1300.19 691.258 L1300.75 691.258 L1301.31 691.258 L1301.87 691.258 L1302.43 691.258 L1302.99 691.258 L1303.55 691.258 L1304.1 691.258 L1304.66 691.258 L1305.22 691.258 L1305.78 691.258 L1306.34 691.258 L1306.9 691.258 L1307.46 691.258 L1308.02 691.258 L1308.58 691.258 L1309.14 691.258 L1309.7 691.258 L1310.26 691.258 L1310.82 691.258 L1311.38 691.258 L1311.93 691.258 L1312.49 691.258 L1313.05 691.258 L1313.61 691.258 L1314.17 691.258 L1314.73 691.258 L1315.29 691.258 L1315.85 691.258 L1316.41 691.258 L1316.97 691.258 L1317.53 691.258 L1318.09 691.258 L1318.65 691.258 L1319.2 691.258 L1319.76 691.258 L1320.32 691.258 L1320.88 691.258 L1321.44 691.258 L1322 691.258 L1322.56 691.258 L1323.12 691.258 L1323.68 691.258 L1324.24 691.258 L1324.8 691.258 L1325.36 691.258 L1325.92 691.258 L1326.47 691.258 L1327.03 691.258 L1327.59 691.258 L1328.15 691.258 L1328.71 691.258 L1329.27 691.258 L1329.83 691.258 L1330.39 691.258 L1330.95 691.258 L1331.51 691.258 L1332.07 691.258 L1332.63 691.258 L1333.19 691.258 L1333.75 691.258 L1334.3 691.258 L1334.86 691.258 L1335.42 691.258 L1335.98 691.258 L1336.54 691.258 L1337.1 691.258 L1337.66 691.258 L1338.22 691.258 L1338.78 691.258 L1339.34 691.258 L1339.9 691.258 L1340.46 691.258 L1341.02 691.258 L1341.57 691.258 L1342.13 691.258 L1342.69 691.258 L1343.25 691.258 L1343.81 691.258 L1344.37 691.258 L1344.93 691.258 L1345.49 691.258 L1346.05 691.258 L1346.61 691.258 L1347.17 691.258 L1347.73 691.258 L1348.29 691.258 L1348.84 691.258 L1349.4 691.258 L1349.96 691.258 L1350.52 691.258 L1351.08 691.258 L1351.64 691.258 L1352.2 691.258 L1352.76 691.258 L1353.32 691.258 L1353.88 691.258 L1354.44 691.258 L1355 691.258 L1355.56 691.258 L1356.12 691.258 L1356.67 691.258 L1357.23 691.258 L1357.79 691.258 L1358.35 691.258 L1358.91 691.258 L1359.47 691.258 L1360.03 691.258 L1360.59 691.258 L1361.15 691.258 L1361.71 691.258 L1362.27 691.258 L1362.83 691.258 L1363.39 691.258 L1363.94 691.258 L1364.5 691.258 L1365.06 691.258 L1365.62 691.258 L1366.18 691.258 L1366.74 691.258 L1367.3 691.258 L1367.86 691.258 L1368.42 691.258 L1368.98 691.258 L1369.54 691.258 L1370.1 691.258 L1370.66 691.258 L1371.21 691.258 L1371.77 691.258 L1372.33 691.258 L1372.89 691.258 L1373.45 691.258 L1374.01 691.258 L1374.57 691.258 L1375.13 691.258 L1375.69 691.258 L1376.25 691.258 L1376.81 691.258 L1377.37 691.258 L1377.93 691.258 L1378.49 691.258 L1379.04 691.258 L1379.6 691.258 L1380.16 691.258 L1380.72 691.258 L1381.28 691.258 L1381.84 691.258 L1382.4 691.258 L1382.96 691.258 L1383.52 691.258 L1384.08 691.258 L1384.64 691.258 L1385.2 691.258 L1385.76 691.258 L1386.31 691.258 L1386.87 691.258 L1387.43 691.258 L1387.99 691.258 L1388.55 691.258 L1389.11 691.258 L1389.67 691.258 L1390.23 691.258 L1390.79 691.258 L1391.35 691.258 L1391.91 691.258 L1392.47 691.258 L1393.03 691.258 L1393.58 691.258 L1394.14 691.258 L1394.7 691.258 L1395.26 691.258 L1395.82 691.258 L1396.38 691.258 L1396.94 691.258 L1397.5 691.258 L1398.06 691.258 L1398.62 691.258 L1399.18 691.258 L1399.74 691.258 L1400.3 691.258 L1400.86 691.258 L1401.41 691.258 L1401.97 691.258 L1402.53 691.258 L1403.09 691.258 L1403.65 691.258 L1404.21 691.258 L1404.77 691.258 L1405.33 691.258 L1405.89 691.258 L1406.45 691.258 L1407.01 691.258 L1407.57 691.258 L1408.13 691.258 L1408.68 691.258 L1409.24 691.258 L1409.8 691.258 L1410.36 691.258 L1410.92 691.258 L1411.48 691.258 L1412.04 691.258 L1412.6 691.258 L1413.16 691.258 L1413.72 691.258 L1414.28 691.258 L1414.84 691.258 L1415.4 691.258 L1415.95 691.258 L1416.51 691.258 L1417.07 691.258 L1417.63 691.258 L1418.19 691.258 L1418.75 691.258 L1419.31 691.258 L1419.87 691.258 L1420.43 691.258 L1420.99 691.258 L1421.55 691.258 L1422.11 691.258 L1422.67 691.258 L1423.23 691.258 L1423.78 691.258 L1424.34 691.258 L1424.9 691.258 L1425.46 691.258 L1426.02 691.258 L1426.58 691.258 L1427.14 691.258 L1427.7 691.258 L1428.26 691.258 L1428.82 691.258 L1429.38 691.258 L1429.94 691.258 L1430.5 691.258 L1431.05 691.258 L1431.61 691.258 L1432.17 691.258 L1432.73 691.258 L1433.29 691.258 L1433.85 691.258 L1434.41 691.258 L1434.97 691.258 L1435.53 691.258 L1436.09 691.258 L1436.65 691.258 L1437.21 691.258 L1437.77 691.258 L1438.33 691.258 L1438.88 691.258 L1439.44 691.258 L1440 691.258 L1440.56 691.258 L1441.12 691.258 L1441.68 691.258 L1442.24 691.258 L1442.8 691.258 L1443.36 691.258 L1443.92 691.258 L1444.48 691.258 L1445.04 691.258 L1445.6 691.258 L1446.15 691.258 L1446.71 691.258 L1447.27 691.258 L1447.83 691.258 L1448.39 691.258 L1448.95 691.258 L1449.51 691.258 L1450.07 691.258 L1450.63 691.258 L1451.19 691.258 L1451.75 691.258 L1452.31 691.258 L1452.87 691.258 L1453.42 691.258 L1453.98 691.258 L1454.54 691.258 L1455.1 691.258 L1455.66 691.258 L1456.22 691.258 L1456.78 691.258 L1457.34 691.258 L1457.9 691.258 L1458.46 691.258 L1459.02 691.258 L1459.58 691.258 L1460.14 691.258 L1460.7 691.258 L1461.25 691.258 L1461.81 691.258 L1462.37 691.258 L1462.93 691.258 L1463.49 691.258 L1464.05 691.258 L1464.61 691.258 L1465.17 691.258 L1465.73 691.258 L1466.29 691.258 L1466.85 691.258 L1467.41 691.258 L1467.97 691.258 L1468.52 691.258 L1469.08 691.258 L1469.64 691.258 L1470.2 691.258 L1470.76 691.258 L1471.32 691.258 L1471.88 691.258 L1472.44 691.258 L1473 691.258 L1473.56 691.258 L1474.12 691.258 L1474.68 691.258 L1475.24 691.258 L1475.79 691.258 L1476.35 691.258 L1476.91 691.258 L1477.47 691.258 L1478.03 691.258 L1478.59 691.258 L1479.15 691.258 L1479.71 691.258 L1480.27 691.258 L1480.83 691.258 L1481.39 691.258 L1481.95 691.258 L1482.51 691.258 L1483.07 691.258 L1483.62 691.258 L1484.18 691.258 L1484.74 691.258 L1485.3 691.258 L1485.86 691.258 L1486.42 691.258 L1486.98 691.258 L1487.54 691.258 L1488.1 691.258 L1488.66 691.258 L1489.22 691.258 L1489.78 691.258 L1490.34 691.258 L1490.89 691.258 L1491.45 691.258 L1492.01 691.258 L1492.57 691.258 L1493.13 691.258 L1493.69 691.258 L1494.25 691.258 L1494.81 691.258 L1495.37 691.258 L1495.93 691.258 L1496.49 691.258 L1497.05 691.258 L1497.61 691.258 L1498.16 691.258 L1498.72 691.258 L1499.28 691.258 L1499.84 691.258 L1500.4 691.258 L1500.96 691.258 L1501.52 691.258 L1502.08 691.258 L1502.64 691.258 L1503.2 691.258 L1503.76 691.258 L1504.32 691.258 L1504.88 691.258 L1505.44 691.258 L1505.99 691.258 L1506.55 691.258 L1507.11 691.258 L1507.67 691.258 L1508.23 691.258 L1508.79 691.258 L1509.35 691.258 L1509.91 691.258 L1510.47 691.258 L1511.03 691.258 L1511.59 691.258 L1512.15 691.258 L1512.71 691.258 L1513.26 691.258 L1513.82 691.258 L1514.38 691.258 L1514.94 691.258 L1515.5 691.258 L1516.06 691.258 L1516.62 691.258 L1517.18 691.258 L1517.74 691.258 L1518.3 691.258 L1518.86 691.258 L1519.42 691.258 L1519.98 691.258 L1520.53 691.258 L1521.09 691.258 L1521.65 691.258 L1522.21 691.258 L1522.77 691.258 L1523.33 691.258 L1523.89 691.258 L1524.45 691.258 L1525.01 691.258 L1525.57 691.258 L1526.13 691.258 L1526.69 691.258 L1527.25 691.258 L1527.81 691.258 L1528.36 691.258 L1528.92 691.258 L1529.48 691.258 L1530.04 691.258 L1530.6 691.258 L1531.16 691.258 L1531.72 691.258 L1532.28 691.258 L1532.84 691.258 L1533.4 691.258 L1533.96 691.258 L1534.52 691.258 L1535.08 691.258 L1535.63 691.258 L1536.19 691.258 L1536.75 691.258 L1537.31 691.258 L1537.87 691.258 L1538.43 691.258 L1538.99 691.258 L1539.55 691.258 L1540.11 691.258 L1540.67 691.258 L1541.23 691.258 L1541.79 691.258 L1542.35 691.258 L1542.9 691.258 L1543.46 691.258 L1544.02 691.258 L1544.58 691.258 L1545.14 691.258 L1545.7 691.258 L1546.26 691.258 L1546.82 691.258 L1547.38 691.258 L1547.94 691.258 L1548.5 691.258 L1549.06 691.258 L1549.62 691.258 L1550.18 691.258 L1550.73 691.258 L1551.29 691.258 L1551.85 691.258 L1552.41 691.258 L1552.97 691.258 L1553.53 691.258 L1554.09 691.258 L1554.65 691.258 L1555.21 691.258 L1555.77 691.258 L1556.33 691.258 L1556.89 691.258 L1557.45 691.258 L1558 691.258 L1558.56 691.258 L1559.12 691.258 L1559.68 691.258 L1560.24 691.258 L1560.8 691.258 L1561.36 691.258 L1561.92 691.258 L1562.48 691.258 L1563.04 691.258 L1563.6 691.258 L1564.16 691.258 L1564.72 691.258 L1565.28 691.258 L1565.83 691.258 L1566.39 691.258 L1566.95 691.258 L1567.51 691.258 L1568.07 691.258 L1568.63 691.258 L1569.19 691.258 L1569.75 691.258 L1570.31 691.258 L1570.87 691.258 L1571.43 691.258 L1571.99 691.258 L1572.55 691.258 L1573.1 691.258 L1573.66 691.258 L1574.22 691.258 L1574.78 691.258 L1575.34 691.258 L1575.9 691.258 L1576.46 691.258 L1577.02 691.258 L1577.58 691.258 L1578.14 691.258 L1578.7 691.258 L1579.26 691.258 L1579.82 691.258 L1580.37 691.258 L1580.93 691.258 L1581.49 691.258 L1582.05 691.258 L1582.61 691.258 L1583.17 691.258 L1583.73 691.258 L1584.29 691.258 L1584.85 691.258 L1585.41 691.258 L1585.97 691.258 L1586.53 691.258 L1587.09 691.258 L1587.65 691.258 L1588.2 691.258 L1588.76 691.258 L1589.32 691.258 L1589.88 691.258 L1590.44 691.258 L1591 691.258 L1591.56 691.258 L1592.12 691.258 L1592.68 691.258 L1593.24 691.258 L1593.8 691.258 L1594.36 691.258 L1594.92 691.258 L1595.47 691.258 L1596.03 691.258 L1596.59 691.258 L1597.15 691.258 L1597.71 691.258 L1598.27 691.258 L1598.83 691.258 L1599.39 691.258 L1599.95 691.258 L1600.51 691.258 L1601.07 691.258 L1601.63 691.258 L1602.19 691.258 L1602.74 691.258 L1603.3 691.258 L1603.86 691.258 L1604.42 691.258 L1604.98 691.258 L1605.54 691.258 L1606.1 691.258 L1606.66 691.258 L1607.22 691.258 L1607.78 691.258 L1608.34 691.258 L1608.9 691.258 L1609.46 691.258 L1610.02 691.258 L1610.57 691.258 L1611.13 691.258 L1611.69 691.258 L1612.25 691.258 L1612.81 691.258 L1613.37 691.258 L1613.93 691.258 L1614.49 691.258 L1615.05 691.258 L1615.61 691.258 L1616.17 691.258 L1616.73 691.258 L1617.29 691.258 L1617.84 691.258 L1618.4 691.258 L1618.96 691.258 L1619.52 691.258 L1620.08 691.258 L1620.64 691.258 L1621.2 691.258 L1621.76 691.258 L1622.32 691.258 L1622.88 691.258 L1623.44 691.258 L1624 691.258 L1624.56 691.258 L1625.11 691.258 L1625.67 691.258 L1626.23 691.258 L1626.79 691.258 L1627.35 691.258 L1627.91 691.258 L1628.47 691.258 L1629.03 691.258 L1629.59 691.258 L1630.15 691.258 L1630.71 691.258 L1631.27 691.258 L1631.83 691.258 L1632.39 691.258 L1632.94 691.258 L1633.5 691.258 L1634.06 691.258 L1634.62 691.258 L1635.18 691.258 L1635.74 691.258 L1636.3 691.258 L1636.86 691.258 L1637.42 691.258 L1637.98 691.258 L1638.54 691.258 L1639.1 691.258 L1639.66 691.258 L1640.21 691.258 L1640.77 691.258 L1641.33 691.258 L1641.89 691.258 L1642.45 691.258 L1643.01 691.258 L1643.57 691.258 L1644.13 691.258 L1644.69 691.258 L1645.25 691.258 L1645.81 691.258 L1646.37 691.258 L1646.93 691.258 L1647.48 691.258 L1648.04 691.258 L1648.6 691.258 L1649.16 691.258 L1649.72 691.258 L1650.28 691.258 L1650.84 691.258 L1651.4 691.258 L1651.96 691.258 L1652.52 691.258 L1653.08 691.258 L1653.64 691.258 L1654.2 691.258 L1654.76 691.258 L1655.31 691.258 L1655.87 691.258 L1656.43 691.258 L1656.99 691.258 L1657.55 691.258 L1658.11 691.258 L1658.67 691.258 L1659.23 691.258 L1659.79 691.258 L1660.35 691.258 L1660.91 691.258 L1661.47 691.258 L1662.03 691.258 L1662.58 691.258 L1663.14 691.258 L1663.7 691.258 L1664.26 691.258 L1664.82 691.258 L1665.38 691.258 L1665.94 691.258 L1666.5 691.258 L1667.06 691.258 L1667.62 691.258 L1668.18 691.258 L1668.74 691.258 L1669.3 691.258 L1669.85 691.258 L1670.41 691.258 L1670.97 691.258 L1671.53 691.258 L1672.09 691.258 L1672.65 691.258 L1673.21 691.258 L1673.77 691.258 L1674.33 691.258 L1674.89 691.258 L1675.45 691.258 L1676.01 691.258 L1676.57 691.258 L1677.13 691.258 L1677.68 691.258 L1678.24 691.258 L1678.8 691.258 L1679.36 691.258 L1679.92 691.258 L1680.48 691.258 L1681.04 691.258 L1681.6 691.258 L1682.16 691.258 L1682.72 691.258 L1683.28 691.258 L1683.84 691.258 L1684.4 691.258 L1684.95 691.258 L1685.51 691.258 L1686.07 691.258 L1686.63 691.258 L1687.19 691.258 L1687.75 691.258 L1688.31 691.258 L1688.87 691.258 L1689.43 691.258 L1689.99 691.258 L1690.55 691.258 L1691.11 691.258 L1691.67 691.258 L1692.23 691.258 L1692.78 691.258 L1693.34 691.258 L1693.9 691.258 L1694.46 691.258 L1695.02 691.258 L1695.58 691.258 L1696.14 691.258 L1696.7 691.258 L1697.26 691.258 L1697.82 691.258 L1698.38 691.258 L1698.94 691.258 L1699.5 691.258 L1700.05 691.258 L1700.61 691.258 L1701.17 691.258 L1701.73 691.258 L1702.29 691.258 L1702.85 691.258 L1703.41 691.258 L1703.97 691.258 L1704.53 691.258 L1705.09 691.258 L1705.65 691.258 L1706.21 691.258 L1706.77 691.258 L1707.32 691.258 L1707.88 691.258 L1708.44 691.258 L1709 691.258 L1709.56 691.258 L1710.12 691.258 L1710.68 691.258 L1711.24 691.258 L1711.8 691.258 L1712.36 691.258 L1712.92 691.258 L1713.48 691.258 L1714.04 691.258 L1714.6 691.258 L1715.15 691.258 L1715.71 691.258 L1716.27 691.258 L1716.83 691.258 L1717.39 691.258 L1717.95 691.258 L1718.51 691.258 L1719.07 691.258 L1719.63 691.258 L1720.19 691.258 L1720.75 691.258 L1721.31 691.258 L1721.87 691.258 L1722.42 691.258 L1722.98 691.258 L1723.54 691.258 L1724.1 691.258 L1724.66 691.258 L1725.22 691.258 L1725.78 691.258 L1726.34 691.258 L1726.9 691.258 L1727.46 691.258 L1728.02 691.258 L1728.58 691.258 L1729.14 691.258 L1729.69 691.258 L1730.25 691.258 L1730.81 691.258 L1731.37 691.258 L1731.93 691.258 L1732.49 691.258 L1733.05 691.258 L1733.61 691.258 L1734.17 691.258 L1734.73 691.258 L1735.29 691.258 L1735.85 691.258 L1736.41 691.258 L1736.97 691.258 L1737.52 691.258 L1738.08 691.258 L1738.64 691.258 L1739.2 691.258 L1739.76 691.258 L1740.32 691.258 L1740.88 691.258 L1741.44 691.258 L1742 691.258 L1742.56 691.258 L1743.12 691.258 L1743.68 691.258 L1744.24 691.258 L1744.79 691.258 L1745.35 691.258 L1745.91 691.258 L1746.47 691.258 L1747.03 691.258 L1747.59 691.258 L1748.15 691.258 L1748.71 691.258 L1749.27 691.258 L1749.83 691.258 L1750.39 691.258 L1750.95 691.258 L1751.51 691.258 L1752.06 691.258 L1752.62 691.258 L1753.18 691.258 L1753.74 691.258 L1754.3 691.258 L1754.86 691.258 L1755.42 691.258 L1755.98 691.258 L1756.54 691.258 L1757.1 691.258 L1757.66 691.258 L1758.22 691.258 L1758.78 691.258 L1759.34 691.258 L1759.89 691.258 L1760.45 691.258 L1761.01 691.258 L1761.57 691.258 L1762.13 691.258 L1762.69 691.258 L1763.25 691.258 L1763.81 691.258 L1764.37 691.258 L1764.93 691.258 L1765.49 691.258 L1766.05 691.258 L1766.61 691.258 L1767.16 691.258 L1767.72 691.258 L1768.28 691.258 L1768.84 691.258 L1769.4 691.258 L1769.96 691.258 L1770.52 691.258 L1771.08 691.258 L1771.64 691.258 L1772.2 691.258 L1772.76 691.258 L1773.32 691.258 L1773.88 691.258 L1774.43 691.258 L1774.99 691.258 L1775.55 691.258 L1776.11 691.258 L1776.67 691.258 L1777.23 691.258 L1777.79 691.258 L1778.35 691.258 L1778.91 691.258 L1779.47 691.258 L1780.03 691.258 L1780.59 691.258 L1781.15 691.258 L1781.71 691.258 L1782.26 691.258 L1782.82 691.258 L1783.38 691.258 L1783.94 691.258 L1784.5 691.258 L1785.06 691.258 L1785.62 691.258 L1786.18 691.258 L1786.74 691.258 L1787.3 691.258 L1787.86 691.258 L1788.42 691.258 L1788.98 691.258 L1789.53 691.258 L1790.09 691.258 L1790.65 691.258 L1791.21 691.258 L1791.77 691.258 L1792.33 691.258 L1792.89 691.258 L1793.45 691.258 L1794.01 691.258 L1794.57 691.258 L1795.13 691.258 L1795.69 691.258 L1796.25 691.258 L1796.8 691.258 L1797.36 691.258 L1797.92 691.258 L1798.48 691.258 L1799.04 691.258 L1799.6 691.258 L1800.16 691.258 L1800.72 691.258 L1801.28 691.258 L1801.84 691.258 L1802.4 691.258 L1802.96 691.258 L1803.52 691.258 L1804.08 691.258 L1804.63 691.258 L1805.19 691.258 L1805.75 691.258 L1806.31 691.258 L1806.87 691.258 L1807.43 691.258 L1807.99 691.258 L1808.55 691.258 L1809.11 691.258 L1809.67 691.258 L1810.23 691.258 L1810.79 691.258 L1811.35 691.258 L1811.9 691.258 L1812.46 691.258 L1813.02 691.258 L1813.58 691.258 L1814.14 691.258 L1814.7 691.258 L1815.26 691.258 L1815.82 691.258 L1816.38 691.258 L1816.94 691.258 L1817.5 691.258 L1818.06 691.258 L1818.62 691.258 L1819.18 691.258 L1819.73 691.258 L1820.29 691.258 L1820.85 691.258 L1821.41 691.258 L1821.97 691.258 L1822.53 691.258 L1823.09 691.258 L1823.65 691.258 L1824.21 691.258 L1824.77 691.258 L1825.33 691.258 L1825.89 691.258 L1826.45 691.258 L1827 691.258 L1827.56 691.258 L1828.12 691.258 L1828.68 691.258 L1829.24 691.258 L1829.8 691.258 L1830.36 691.258 L1830.92 691.258 L1831.48 691.258 L1832.04 691.258 L1832.6 691.258 L1833.16 691.258 L1833.72 691.258 L1834.27 691.258 L1834.83 691.258 L1835.39 691.258 L1835.95 691.258 L1836.51 691.258 L1837.07 691.258 L1837.63 691.258 L1838.19 691.258 L1838.19 684.132 L1837.63 684.132 L1837.07 684.132 L1836.51 684.132 L1835.95 684.132 L1835.39 684.132 L1834.83 684.132 L1834.27 684.132 L1833.72 684.132 L1833.16 684.132 L1832.6 684.132 L1832.04 684.132 L1831.48 684.132 L1830.92 684.132 L1830.36 684.132 L1829.8 684.132 L1829.24 684.132 L1828.68 684.132 L1828.12 684.132 L1827.56 684.132 L1827 684.132 L1826.45 684.132 L1825.89 684.132 L1825.33 684.132 L1824.77 684.132 L1824.21 684.132 L1823.65 684.132 L1823.09 684.132 L1822.53 684.132 L1821.97 684.132 L1821.41 684.132 L1820.85 684.132 L1820.29 684.132 L1819.73 684.132 L1819.18 684.132 L1818.62 684.132 L1818.06 684.132 L1817.5 684.132 L1816.94 684.132 L1816.38 684.132 L1815.82 684.132 L1815.26 684.132 L1814.7 684.132 L1814.14 684.132 L1813.58 684.132 L1813.02 684.132 L1812.46 684.132 L1811.9 684.132 L1811.35 684.132 L1810.79 684.132 L1810.23 684.132 L1809.67 684.132 L1809.11 684.132 L1808.55 684.132 L1807.99 684.132 L1807.43 684.132 L1806.87 684.132 L1806.31 684.132 L1805.75 684.132 L1805.19 684.132 L1804.63 684.132 L1804.08 684.132 L1803.52 684.132 L1802.96 684.132 L1802.4 684.132 L1801.84 684.132 L1801.28 684.132 L1800.72 684.132 L1800.16 684.132 L1799.6 684.132 L1799.04 684.132 L1798.48 684.132 L1797.92 684.132 L1797.36 684.132 L1796.8 684.132 L1796.25 684.132 L1795.69 684.132 L1795.13 684.132 L1794.57 684.132 L1794.01 684.132 L1793.45 684.132 L1792.89 684.132 L1792.33 684.132 L1791.77 684.132 L1791.21 684.132 L1790.65 684.132 L1790.09 684.132 L1789.53 684.132 L1788.98 684.132 L1788.42 684.132 L1787.86 684.132 L1787.3 684.132 L1786.74 684.132 L1786.18 684.132 L1785.62 684.132 L1785.06 684.132 L1784.5 684.132 L1783.94 684.132 L1783.38 684.132 L1782.82 684.132 L1782.26 684.132 L1781.71 684.132 L1781.15 684.132 L1780.59 684.132 L1780.03 684.132 L1779.47 684.132 L1778.91 684.132 L1778.35 684.132 L1777.79 684.132 L1777.23 684.132 L1776.67 684.132 L1776.11 684.132 L1775.55 684.132 L1774.99 684.132 L1774.43 684.132 L1773.88 684.132 L1773.32 684.132 L1772.76 684.132 L1772.2 684.132 L1771.64 684.132 L1771.08 684.132 L1770.52 684.132 L1769.96 684.132 L1769.4 684.132 L1768.84 684.132 L1768.28 684.132 L1767.72 684.132 L1767.16 684.132 L1766.61 684.132 L1766.05 684.132 L1765.49 684.132 L1764.93 684.132 L1764.37 684.132 L1763.81 684.132 L1763.25 684.132 L1762.69 684.132 L1762.13 684.132 L1761.57 684.132 L1761.01 684.132 L1760.45 684.132 L1759.89 684.132 L1759.34 684.132 L1758.78 684.132 L1758.22 684.132 L1757.66 684.132 L1757.1 684.132 L1756.54 684.132 L1755.98 684.132 L1755.42 684.132 L1754.86 684.132 L1754.3 684.132 L1753.74 684.132 L1753.18 684.132 L1752.62 684.132 L1752.06 684.132 L1751.51 684.132 L1750.95 684.132 L1750.39 684.132 L1749.83 684.132 L1749.27 684.132 L1748.71 684.132 L1748.15 684.132 L1747.59 684.132 L1747.03 684.132 L1746.47 684.132 L1745.91 684.132 L1745.35 684.132 L1744.79 684.132 L1744.24 684.132 L1743.68 684.132 L1743.12 684.132 L1742.56 684.132 L1742 684.132 L1741.44 684.132 L1740.88 684.132 L1740.32 684.132 L1739.76 684.132 L1739.2 684.132 L1738.64 684.132 L1738.08 684.132 L1737.52 684.132 L1736.97 684.132 L1736.41 684.132 L1735.85 684.132 L1735.29 684.132 L1734.73 684.132 L1734.17 684.132 L1733.61 684.132 L1733.05 684.132 L1732.49 684.132 L1731.93 684.132 L1731.37 684.132 L1730.81 684.132 L1730.25 684.132 L1729.69 684.132 L1729.14 684.132 L1728.58 684.132 L1728.02 684.132 L1727.46 684.132 L1726.9 684.132 L1726.34 684.132 L1725.78 684.132 L1725.22 684.132 L1724.66 684.132 L1724.1 684.132 L1723.54 684.132 L1722.98 684.132 L1722.42 684.132 L1721.87 684.132 L1721.31 684.132 L1720.75 684.132 L1720.19 684.132 L1719.63 684.132 L1719.07 684.132 L1718.51 684.132 L1717.95 684.132 L1717.39 684.132 L1716.83 684.132 L1716.27 684.132 L1715.71 684.132 L1715.15 684.132 L1714.6 684.132 L1714.04 684.132 L1713.48 684.132 L1712.92 684.132 L1712.36 684.132 L1711.8 684.132 L1711.24 684.132 L1710.68 684.132 L1710.12 684.132 L1709.56 684.132 L1709 684.132 L1708.44 684.132 L1707.88 684.132 L1707.32 684.132 L1706.77 684.132 L1706.21 684.132 L1705.65 684.132 L1705.09 684.132 L1704.53 684.132 L1703.97 684.132 L1703.41 684.132 L1702.85 684.132 L1702.29 684.132 L1701.73 684.132 L1701.17 684.132 L1700.61 684.132 L1700.05 684.132 L1699.5 684.132 L1698.94 684.132 L1698.38 684.132 L1697.82 684.132 L1697.26 684.132 L1696.7 684.132 L1696.14 684.132 L1695.58 684.132 L1695.02 684.132 L1694.46 684.132 L1693.9 684.132 L1693.34 684.132 L1692.78 684.132 L1692.23 684.132 L1691.67 684.132 L1691.11 684.132 L1690.55 684.132 L1689.99 684.132 L1689.43 684.132 L1688.87 684.132 L1688.31 684.132 L1687.75 684.132 L1687.19 684.132 L1686.63 684.132 L1686.07 684.132 L1685.51 684.132 L1684.95 684.132 L1684.4 684.132 L1683.84 684.132 L1683.28 684.132 L1682.72 684.132 L1682.16 684.132 L1681.6 684.132 L1681.04 684.132 L1680.48 684.132 L1679.92 684.132 L1679.36 684.132 L1678.8 684.132 L1678.24 684.132 L1677.68 684.132 L1677.13 684.132 L1676.57 684.132 L1676.01 684.132 L1675.45 684.132 L1674.89 684.132 L1674.33 684.132 L1673.77 684.132 L1673.21 684.132 L1672.65 684.132 L1672.09 684.132 L1671.53 684.132 L1670.97 684.132 L1670.41 684.132 L1669.85 684.132 L1669.3 684.132 L1668.74 684.132 L1668.18 684.132 L1667.62 684.132 L1667.06 684.132 L1666.5 684.132 L1665.94 684.132 L1665.38 684.132 L1664.82 684.132 L1664.26 684.132 L1663.7 684.132 L1663.14 684.132 L1662.58 684.132 L1662.03 684.132 L1661.47 684.132 L1660.91 684.132 L1660.35 684.132 L1659.79 684.132 L1659.23 684.132 L1658.67 684.132 L1658.11 684.132 L1657.55 684.132 L1656.99 684.132 L1656.43 684.132 L1655.87 684.132 L1655.31 684.132 L1654.76 684.132 L1654.2 684.132 L1653.64 684.132 L1653.08 684.132 L1652.52 684.132 L1651.96 684.132 L1651.4 684.132 L1650.84 684.132 L1650.28 684.132 L1649.72 684.132 L1649.16 684.132 L1648.6 684.132 L1648.04 684.132 L1647.48 684.132 L1646.93 684.132 L1646.37 684.132 L1645.81 684.132 L1645.25 684.132 L1644.69 684.132 L1644.13 684.132 L1643.57 684.132 L1643.01 684.132 L1642.45 684.132 L1641.89 684.132 L1641.33 684.132 L1640.77 684.132 L1640.21 684.132 L1639.66 684.132 L1639.1 684.132 L1638.54 684.132 L1637.98 684.132 L1637.42 684.132 L1636.86 684.132 L1636.3 684.132 L1635.74 684.132 L1635.18 684.132 L1634.62 684.132 L1634.06 684.132 L1633.5 684.132 L1632.94 684.132 L1632.39 684.132 L1631.83 684.132 L1631.27 684.132 L1630.71 684.132 L1630.15 684.132 L1629.59 684.132 L1629.03 684.132 L1628.47 684.132 L1627.91 684.132 L1627.35 684.132 L1626.79 684.132 L1626.23 684.132 L1625.67 684.132 L1625.11 684.132 L1624.56 684.132 L1624 684.132 L1623.44 684.132 L1622.88 684.132 L1622.32 684.132 L1621.76 684.132 L1621.2 684.132 L1620.64 684.132 L1620.08 684.132 L1619.52 684.132 L1618.96 684.132 L1618.4 684.132 L1617.84 684.132 L1617.29 684.132 L1616.73 684.132 L1616.17 684.132 L1615.61 684.132 L1615.05 684.132 L1614.49 684.132 L1613.93 684.132 L1613.37 684.132 L1612.81 684.132 L1612.25 684.132 L1611.69 684.132 L1611.13 684.132 L1610.57 684.132 L1610.02 684.132 L1609.46 684.132 L1608.9 684.132 L1608.34 684.132 L1607.78 684.132 L1607.22 684.132 L1606.66 684.132 L1606.1 684.132 L1605.54 684.132 L1604.98 684.132 L1604.42 684.132 L1603.86 684.132 L1603.3 684.132 L1602.74 684.132 L1602.19 684.132 L1601.63 684.132 L1601.07 684.132 L1600.51 684.132 L1599.95 684.132 L1599.39 684.132 L1598.83 684.132 L1598.27 684.132 L1597.71 684.132 L1597.15 684.132 L1596.59 684.132 L1596.03 684.132 L1595.47 684.132 L1594.92 684.132 L1594.36 684.132 L1593.8 684.132 L1593.24 684.132 L1592.68 684.132 L1592.12 684.132 L1591.56 684.132 L1591 684.132 L1590.44 684.132 L1589.88 684.132 L1589.32 684.132 L1588.76 684.132 L1588.2 684.132 L1587.65 684.132 L1587.09 684.132 L1586.53 684.132 L1585.97 684.132 L1585.41 684.132 L1584.85 684.132 L1584.29 684.132 L1583.73 684.132 L1583.17 684.132 L1582.61 684.132 L1582.05 684.132 L1581.49 684.132 L1580.93 684.132 L1580.37 684.132 L1579.82 684.132 L1579.26 684.132 L1578.7 684.132 L1578.14 684.132 L1577.58 684.132 L1577.02 684.132 L1576.46 684.132 L1575.9 684.132 L1575.34 684.132 L1574.78 684.132 L1574.22 684.132 L1573.66 684.132 L1573.1 684.132 L1572.55 684.132 L1571.99 684.132 L1571.43 684.132 L1570.87 684.132 L1570.31 684.132 L1569.75 684.132 L1569.19 684.132 L1568.63 684.132 L1568.07 684.132 L1567.51 684.132 L1566.95 684.132 L1566.39 684.132 L1565.83 684.132 L1565.28 684.132 L1564.72 684.132 L1564.16 684.132 L1563.6 684.132 L1563.04 684.132 L1562.48 684.132 L1561.92 684.132 L1561.36 684.132 L1560.8 684.132 L1560.24 684.132 L1559.68 684.132 L1559.12 684.132 L1558.56 684.132 L1558 684.132 L1557.45 684.132 L1556.89 684.132 L1556.33 684.132 L1555.77 684.132 L1555.21 684.132 L1554.65 684.132 L1554.09 684.132 L1553.53 684.132 L1552.97 684.132 L1552.41 684.132 L1551.85 684.132 L1551.29 684.132 L1550.73 684.132 L1550.18 684.132 L1549.62 684.132 L1549.06 684.132 L1548.5 684.132 L1547.94 684.132 L1547.38 684.132 L1546.82 684.132 L1546.26 684.132 L1545.7 684.132 L1545.14 684.132 L1544.58 684.132 L1544.02 684.132 L1543.46 684.132 L1542.9 684.132 L1542.35 684.132 L1541.79 684.132 L1541.23 684.132 L1540.67 684.132 L1540.11 684.132 L1539.55 684.132 L1538.99 684.132 L1538.43 684.132 L1537.87 684.132 L1537.31 684.132 L1536.75 684.132 L1536.19 684.132 L1535.63 684.132 L1535.08 684.132 L1534.52 684.132 L1533.96 684.132 L1533.4 684.132 L1532.84 684.132 L1532.28 684.132 L1531.72 684.132 L1531.16 684.132 L1530.6 684.132 L1530.04 684.132 L1529.48 684.132 L1528.92 684.132 L1528.36 684.132 L1527.81 684.132 L1527.25 684.132 L1526.69 684.132 L1526.13 684.132 L1525.57 684.132 L1525.01 684.132 L1524.45 684.132 L1523.89 684.132 L1523.33 684.132 L1522.77 684.132 L1522.21 684.132 L1521.65 684.132 L1521.09 684.132 L1520.53 684.132 L1519.98 684.132 L1519.42 684.132 L1518.86 684.132 L1518.3 684.132 L1517.74 684.132 L1517.18 684.132 L1516.62 684.132 L1516.06 684.132 L1515.5 684.132 L1514.94 684.132 L1514.38 684.132 L1513.82 684.132 L1513.26 684.132 L1512.71 684.132 L1512.15 684.132 L1511.59 684.132 L1511.03 684.132 L1510.47 684.132 L1509.91 684.132 L1509.35 684.132 L1508.79 684.132 L1508.23 684.132 L1507.67 684.132 L1507.11 684.132 L1506.55 684.132 L1505.99 684.132 L1505.44 684.132 L1504.88 684.132 L1504.32 684.132 L1503.76 684.132 L1503.2 684.132 L1502.64 684.132 L1502.08 684.132 L1501.52 684.132 L1500.96 684.132 L1500.4 684.132 L1499.84 684.132 L1499.28 684.132 L1498.72 684.132 L1498.16 684.132 L1497.61 684.132 L1497.05 684.132 L1496.49 684.132 L1495.93 684.132 L1495.37 684.132 L1494.81 684.132 L1494.25 684.132 L1493.69 684.132 L1493.13 684.132 L1492.57 684.132 L1492.01 684.132 L1491.45 684.132 L1490.89 684.132 L1490.34 684.132 L1489.78 684.132 L1489.22 684.132 L1488.66 684.132 L1488.1 684.132 L1487.54 684.132 L1486.98 684.132 L1486.42 684.132 L1485.86 684.132 L1485.3 684.132 L1484.74 684.132 L1484.18 684.132 L1483.62 684.132 L1483.07 684.132 L1482.51 684.132 L1481.95 684.132 L1481.39 684.132 L1480.83 684.132 L1480.27 684.132 L1479.71 684.132 L1479.15 684.132 L1478.59 684.132 L1478.03 684.132 L1477.47 684.132 L1476.91 684.132 L1476.35 684.132 L1475.79 684.132 L1475.24 684.132 L1474.68 684.132 L1474.12 684.132 L1473.56 684.132 L1473 684.132 L1472.44 684.132 L1471.88 684.132 L1471.32 684.132 L1470.76 684.132 L1470.2 684.132 L1469.64 684.132 L1469.08 684.132 L1468.52 684.132 L1467.97 684.132 L1467.41 684.132 L1466.85 684.132 L1466.29 684.132 L1465.73 684.132 L1465.17 684.132 L1464.61 684.132 L1464.05 684.132 L1463.49 684.132 L1462.93 684.132 L1462.37 684.132 L1461.81 684.132 L1461.25 684.132 L1460.7 684.132 L1460.14 684.132 L1459.58 684.132 L1459.02 684.132 L1458.46 684.132 L1457.9 684.132 L1457.34 684.132 L1456.78 684.132 L1456.22 684.132 L1455.66 684.132 L1455.1 684.132 L1454.54 684.132 L1453.98 684.132 L1453.42 684.132 L1452.87 684.132 L1452.31 684.132 L1451.75 684.132 L1451.19 684.132 L1450.63 684.132 L1450.07 684.132 L1449.51 684.132 L1448.95 684.132 L1448.39 684.132 L1447.83 684.132 L1447.27 684.132 L1446.71 684.132 L1446.15 684.132 L1445.6 684.132 L1445.04 684.132 L1444.48 684.132 L1443.92 684.132 L1443.36 684.132 L1442.8 684.132 L1442.24 684.132 L1441.68 684.132 L1441.12 684.132 L1440.56 684.132 L1440 684.132 L1439.44 684.132 L1438.88 684.132 L1438.33 684.132 L1437.77 684.132 L1437.21 684.132 L1436.65 684.132 L1436.09 684.132 L1435.53 684.132 L1434.97 684.132 L1434.41 684.132 L1433.85 684.132 L1433.29 684.132 L1432.73 684.132 L1432.17 684.132 L1431.61 684.132 L1431.05 684.132 L1430.5 684.132 L1429.94 684.132 L1429.38 684.132 L1428.82 684.132 L1428.26 684.132 L1427.7 684.132 L1427.14 684.132 L1426.58 684.132 L1426.02 684.132 L1425.46 684.132 L1424.9 684.132 L1424.34 684.132 L1423.78 684.132 L1423.23 684.132 L1422.67 684.132 L1422.11 684.132 L1421.55 684.132 L1420.99 684.132 L1420.43 684.132 L1419.87 684.132 L1419.31 684.132 L1418.75 684.132 L1418.19 684.132 L1417.63 684.132 L1417.07 684.132 L1416.51 684.132 L1415.95 684.132 L1415.4 684.132 L1414.84 684.132 L1414.28 684.132 L1413.72 684.132 L1413.16 684.132 L1412.6 684.132 L1412.04 684.132 L1411.48 684.132 L1410.92 684.132 L1410.36 684.132 L1409.8 684.132 L1409.24 684.132 L1408.68 684.132 L1408.13 684.132 L1407.57 684.132 L1407.01 684.132 L1406.45 684.132 L1405.89 684.132 L1405.33 684.132 L1404.77 684.132 L1404.21 684.132 L1403.65 684.132 L1403.09 684.132 L1402.53 684.132 L1401.97 684.132 L1401.41 684.132 L1400.86 684.132 L1400.3 684.132 L1399.74 684.132 L1399.18 684.132 L1398.62 684.132 L1398.06 684.132 L1397.5 684.132 L1396.94 684.132 L1396.38 684.132 L1395.82 684.132 L1395.26 684.132 L1394.7 684.132 L1394.14 684.132 L1393.58 684.132 L1393.03 684.132 L1392.47 684.132 L1391.91 684.132 L1391.35 684.132 L1390.79 684.132 L1390.23 684.132 L1389.67 684.132 L1389.11 684.132 L1388.55 684.132 L1387.99 684.132 L1387.43 684.132 L1386.87 684.132 L1386.31 684.132 L1385.76 684.132 L1385.2 684.132 L1384.64 684.132 L1384.08 684.132 L1383.52 684.132 L1382.96 684.132 L1382.4 684.132 L1381.84 684.132 L1381.28 684.132 L1380.72 684.132 L1380.16 684.132 L1379.6 684.132 L1379.04 684.132 L1378.49 684.132 L1377.93 684.132 L1377.37 684.132 L1376.81 684.132 L1376.25 684.132 L1375.69 684.132 L1375.13 684.132 L1374.57 684.132 L1374.01 684.132 L1373.45 684.132 L1372.89 684.132 L1372.33 684.132 L1371.77 684.132 L1371.21 684.132 L1370.66 684.132 L1370.1 684.132 L1369.54 684.132 L1368.98 684.132 L1368.42 684.132 L1367.86 684.132 L1367.3 684.132 L1366.74 684.132 L1366.18 684.132 L1365.62 684.132 L1365.06 684.132 L1364.5 684.132 L1363.94 684.132 L1363.39 684.132 L1362.83 684.132 L1362.27 684.132 L1361.71 684.132 L1361.15 684.132 L1360.59 684.132 L1360.03 684.132 L1359.47 684.132 L1358.91 684.132 L1358.35 684.132 L1357.79 684.132 L1357.23 684.132 L1356.67 684.132 L1356.12 684.132 L1355.56 684.132 L1355 684.132 L1354.44 684.132 L1353.88 684.132 L1353.32 684.132 L1352.76 684.132 L1352.2 684.132 L1351.64 684.132 L1351.08 684.132 L1350.52 684.132 L1349.96 684.132 L1349.4 684.132 L1348.84 684.132 L1348.29 684.132 L1347.73 684.132 L1347.17 684.132 L1346.61 684.132 L1346.05 684.132 L1345.49 684.132 L1344.93 684.132 L1344.37 684.132 L1343.81 684.132 L1343.25 684.132 L1342.69 684.132 L1342.13 684.132 L1341.57 684.132 L1341.02 684.132 L1340.46 684.132 L1339.9 684.132 L1339.34 684.132 L1338.78 684.132 L1338.22 684.132 L1337.66 684.132 L1337.1 684.132 L1336.54 684.132 L1335.98 684.132 L1335.42 684.132 L1334.86 684.132 L1334.3 684.132 L1333.75 684.132 L1333.19 684.132 L1332.63 684.132 L1332.07 684.132 L1331.51 684.132 L1330.95 684.132 L1330.39 684.132 L1329.83 684.132 L1329.27 684.132 L1328.71 684.132 L1328.15 684.132 L1327.59 684.132 L1327.03 684.132 L1326.47 684.132 L1325.92 684.132 L1325.36 684.132 L1324.8 684.132 L1324.24 684.132 L1323.68 684.132 L1323.12 684.132 L1322.56 684.132 L1322 684.132 L1321.44 684.132 L1320.88 684.132 L1320.32 684.132 L1319.76 684.132 L1319.2 684.132 L1318.65 684.132 L1318.09 684.132 L1317.53 684.132 L1316.97 684.132 L1316.41 684.132 L1315.85 684.132 L1315.29 684.132 L1314.73 684.132 L1314.17 684.132 L1313.61 684.132 L1313.05 684.132 L1312.49 684.132 L1311.93 684.132 L1311.38 684.132 L1310.82 684.132 L1310.26 684.132 L1309.7 684.132 L1309.14 684.132 L1308.58 684.132 L1308.02 684.132 L1307.46 684.132 L1306.9 684.132 L1306.34 684.132 L1305.78 684.132 L1305.22 684.132 L1304.66 684.132 L1304.1 684.132 L1303.55 684.132 L1302.99 684.132 L1302.43 684.132 L1301.87 684.132 L1301.31 684.132 L1300.75 684.132 L1300.19 684.132 L1299.63 684.132 L1299.07 684.132 L1298.51 684.132 L1297.95 684.132 L1297.39 684.132 L1296.83 684.132 L1296.28 684.132 L1295.72 684.132 L1295.16 684.132 L1294.6 684.132 L1294.04 684.132 L1293.48 684.132 L1292.92 684.132 L1292.36 684.132 L1291.8 684.132 L1291.24 684.132 L1290.68 684.132 L1290.12 684.132 L1289.56 684.132 L1289 684.132 L1288.45 684.132 L1287.89 684.132 L1287.33 684.132 L1286.77 684.132 L1286.21 684.132 L1285.65 684.132 L1285.09 684.132 L1284.53 684.132 L1283.97 684.132 L1283.41 684.132 L1282.85 684.132 L1282.29 684.132 L1281.73 684.132 L1281.18 684.132 L1280.62 684.132 L1280.06 684.132 L1279.5 684.132 L1278.94 684.132 L1278.38 684.132 L1277.82 684.132 L1277.26 684.132 L1276.7 684.132 L1276.14 684.132 L1275.58 684.132 L1275.02 684.132 L1274.46 684.132 L1273.91 684.132 L1273.35 684.132 L1272.79 684.132 L1272.23 684.132 L1271.67 684.132 L1271.11 684.132 L1270.55 684.132 L1269.99 684.132 L1269.43 684.132 L1268.87 684.132 L1268.31 684.132 L1267.75 684.132 L1267.19 684.132 L1266.63 684.132 L1266.08 684.132 L1265.52 684.132 L1264.96 684.132 L1264.4 684.132 L1263.84 684.132 L1263.28 684.132 L1262.72 684.132 L1262.16 684.132 L1261.6 684.132 L1261.04 684.132 L1260.48 684.132 L1259.92 684.132 L1259.36 684.132 L1258.81 684.132 L1258.25 684.132 L1257.69 684.132 L1257.13 684.132 L1256.57 684.132 L1256.01 684.132 L1255.45 684.132 L1254.89 684.132 L1254.33 684.132 L1253.77 684.132 L1253.21 684.132 L1252.65 684.132 L1252.09 684.132 L1251.54 684.132 L1250.98 684.132 L1250.42 684.132 L1249.86 684.132 L1249.3 684.132 L1248.74 684.132 L1248.18 684.132 L1247.62 684.132 L1247.06 684.132 L1246.5 684.132 L1245.94 684.132 L1245.38 684.132 L1244.82 684.132 L1244.26 684.132 L1243.71 684.132 L1243.15 684.132 L1242.59 684.132 L1242.03 684.132 L1241.47 684.132 L1240.91 684.132 L1240.35 684.132 L1239.79 684.132 L1239.23 684.132 L1238.67 684.132 L1238.11 684.132 L1237.55 684.132 L1236.99 684.132 L1236.44 684.132 L1235.88 684.132 L1235.32 684.132 L1234.76 684.132 L1234.2 684.132 L1233.64 684.132 L1233.08 684.132 L1232.52 684.132 L1231.96 684.132 L1231.4 684.132 L1230.84 684.132 L1230.28 684.132 L1229.72 684.132 L1229.17 684.132 L1228.61 684.132 L1228.05 684.132 L1227.49 684.132 L1226.93 684.132 L1226.37 684.132 L1225.81 684.132 L1225.25 684.132 L1224.69 684.132 L1224.13 684.132 L1223.57 684.132 L1223.01 684.132 L1222.45 684.132 L1221.89 684.132 L1221.34 684.132 L1220.78 684.132 L1220.22 684.132 L1219.66 684.132 L1219.1 684.132 L1218.54 684.132 L1217.98 684.132 L1217.42 684.132 L1216.86 684.132 L1216.3 684.132 L1215.74 684.132 L1215.18 684.132 L1214.62 684.132 L1214.07 684.132 L1213.51 684.132 L1212.95 684.132 L1212.39 684.132 L1211.83 684.132 L1211.27 684.132 L1210.71 684.132 L1210.15 684.132 L1209.59 684.132 L1209.03 684.132 L1208.47 684.132 L1207.91 684.132 L1207.35 684.132 L1206.8 684.132 L1206.24 684.132 L1205.68 684.132 L1205.12 684.132 L1204.56 684.132 L1204 684.132 L1203.44 684.132 L1202.88 684.132 L1202.32 684.132 L1201.76 684.132 L1201.2 684.132 L1200.64 684.132 L1200.08 684.132 L1199.52 684.132 L1198.97 684.132 L1198.41 684.132 L1197.85 684.132 L1197.29 684.132 L1196.73 684.132 L1196.17 684.132 L1195.61 684.132 L1195.05 684.132 L1194.49 684.132 L1193.93 684.132 L1193.37 684.132 L1192.81 684.132 L1192.25 684.132 L1191.7 684.132 L1191.14 684.132 L1190.58 684.132 L1190.02 684.132 L1189.46 684.132 L1188.9 684.132 L1188.34 684.132 L1187.78 684.132 L1187.22 684.132 L1186.66 684.132 L1186.1 684.132 L1185.54 684.132 L1184.98 684.132 L1184.43 684.132 L1183.87 684.132 L1183.31 684.132 L1182.75 684.132 L1182.19 684.132 L1181.63 684.132 L1181.07 684.132 L1180.51 684.132 L1179.95 684.132 L1179.39 684.132 L1178.83 684.132 L1178.27 684.132 L1177.71 684.132 L1177.15 684.132 L1176.6 684.132 L1176.04 684.132 L1175.48 684.132 L1174.92 684.132 L1174.36 684.132 L1173.8 684.132 L1173.24 684.132 L1172.68 684.132 L1172.12 684.132 L1171.56 684.132 L1171 684.132 L1170.44 684.132 L1169.88 684.132 L1169.33 684.132 L1168.77 684.132 L1168.21 684.132 L1167.65 684.132 L1167.09 684.132 L1166.53 684.132 L1165.97 684.132 L1165.41 684.132 L1164.85 684.132 L1164.29 684.132 L1163.73 684.132 L1163.17 684.132 L1162.61 684.132 L1162.05 684.132 L1161.5 684.132 L1160.94 684.132 L1160.38 684.132 L1159.82 684.132 L1159.26 684.132 L1158.7 684.132 L1158.14 684.132 L1157.58 684.132 L1157.02 684.132 L1156.46 684.132 L1155.9 684.132 L1155.34 684.132 L1154.78 684.132 L1154.23 684.132 L1153.67 684.132 L1153.11 684.132 L1152.55 684.132 L1151.99 684.132 L1151.43 684.132 L1150.87 684.132 L1150.31 684.132 L1149.75 684.132 L1149.19 684.132 L1148.63 684.132 L1148.07 684.132 L1147.51 684.132 L1146.96 684.132 L1146.4 684.132 L1145.84 684.132 L1145.28 684.132 L1144.72 684.132 L1144.16 684.132 L1143.6 684.132 L1143.04 684.132 L1142.48 684.132 L1141.92 684.132 L1141.36 684.132 L1140.8 684.132 L1140.24 684.132 L1139.68 684.132 L1139.13 684.132 L1138.57 684.132 L1138.01 684.132 L1137.45 684.132 L1136.89 684.132 L1136.33 684.132 L1135.77 684.132 L1135.21 684.132 L1134.65 684.132 L1134.09 684.132 L1133.53 684.132 L1132.97 684.132 L1132.41 684.132 L1131.86 684.132 L1131.3 684.132 L1130.74 684.132 L1130.18 684.132 L1129.62 684.132 L1129.06 684.132 L1128.5 684.132 L1127.94 684.132 L1127.38 684.132 L1126.82 684.132 L1126.26 684.132 L1125.7 684.132 L1125.14 684.132 L1124.59 684.132 L1124.03 684.132 L1123.47 684.132 L1122.91 684.132 L1122.35 684.132 L1121.79 684.132 L1121.23 684.132 L1120.67 684.132 L1120.11 684.132 L1119.55 684.132 L1118.99 684.132 L1118.43 684.132 L1117.87 684.132 L1117.31 684.132 L1116.76 684.132 L1116.2 684.132 L1115.64 684.132 L1115.08 684.132 L1114.52 684.132 L1113.96 684.132 L1113.4 684.132 L1112.84 684.132 L1112.28 684.132 L1111.72 684.132 L1111.16 684.132 L1110.6 684.132 L1110.04 684.132 L1109.49 684.132 L1108.93 684.132 L1108.37 684.132 L1107.81 684.132 L1107.25 684.132 L1106.69 684.132 L1106.13 684.132 L1105.57 684.132 L1105.01 684.132 L1104.45 684.132 L1103.89 684.132 L1103.33 684.132 L1102.77 684.132 L1102.22 684.132 L1101.66 684.132 L1101.1 684.132 L1100.54 684.132 L1099.98 684.132 L1099.42 684.132 L1098.86 684.132 L1098.3 684.132 L1097.74 684.132 L1097.18 684.132 L1096.62 684.132 L1096.06 684.132 L1095.5 684.132 L1094.94 684.132 L1094.39 684.132 L1093.83 684.132 L1093.27 684.132 L1092.71 684.132 L1092.15 684.132 L1091.59 684.132 L1091.03 684.132 L1090.47 684.132 L1089.91 684.132 L1089.35 684.132 L1088.79 684.132 L1088.23 684.132 L1087.67 684.132 L1087.12 684.132 L1086.56 684.132 L1086 684.132 L1085.44 684.132 L1084.88 684.132 L1084.32 684.132 L1083.76 684.132 L1083.2 684.132 L1082.64 684.132 L1082.08 684.132 L1081.52 684.132 L1080.96 684.132 L1080.4 684.132 L1079.85 684.132 L1079.29 684.132 L1078.73 684.132 L1078.17 684.132 L1077.61 684.132 L1077.05 684.132 L1076.49 684.132 L1075.93 684.132 L1075.37 684.132 L1074.81 684.132 L1074.25 684.132 L1073.69 684.132 L1073.13 684.132 L1072.57 684.132 L1072.02 684.132 L1071.46 684.132 L1070.9 684.132 L1070.34 684.132 L1069.78 684.132 L1069.22 684.132 L1068.66 684.132 L1068.1 684.132 L1067.54 684.132 L1066.98 684.132 L1066.42 684.132 L1065.86 684.132 L1065.3 684.132 L1064.75 684.132 L1064.19 684.132 L1063.63 684.132 L1063.07 684.132 L1062.51 684.132 L1061.95 684.132 L1061.39 684.132 L1060.83 684.132 L1060.27 684.132 L1059.71 684.132 L1059.15 684.132 L1058.59 684.132 L1058.03 684.132 L1057.48 684.132 L1056.92 684.132 L1056.36 684.132 L1055.8 684.132 L1055.24 684.132 L1054.68 684.132 L1054.12 684.132 L1053.56 684.132 L1053 684.132 L1052.44 684.132 L1051.88 684.132 L1051.32 684.132 L1050.76 684.132 L1050.2 684.132 L1049.65 684.132 L1049.09 684.132 L1048.53 684.132 L1047.97 684.132 L1047.41 684.132 L1046.85 684.132 L1046.29 684.132 L1045.73 684.132 L1045.17 684.132 L1044.61 684.132 L1044.05 684.132 L1043.49 684.132 L1042.93 684.132 L1042.38 684.132 L1041.82 684.132 L1041.26 684.132 L1040.7 684.132 L1040.14 684.132 L1039.58 684.132 L1039.02 684.132 L1038.46 684.132 L1037.9 684.132 L1037.34 684.132 L1036.78 684.132 L1036.22 684.132 L1035.66 684.132 L1035.1 684.132 L1034.55 684.132 L1033.99 684.132 L1033.43 684.132 L1032.87 684.132 L1032.31 684.132 L1031.75 684.132 L1031.19 684.132 L1030.63 684.132 L1030.07 684.132 L1029.51 684.132 L1028.95 684.132 L1028.39 684.132 L1027.83 684.132 L1027.28 684.132 L1026.72 684.132 L1026.16 684.132 L1025.6 684.132 L1025.04 684.132 L1024.48 684.132 L1023.92 684.132 L1023.36 684.132 L1022.8 684.132 L1022.24 684.132 L1021.68 684.132 L1021.12 684.132 L1020.56 684.132 L1020.01 684.132 L1019.45 684.132 L1018.89 684.132 L1018.33 684.132 L1017.77 684.132 L1017.21 684.132 L1016.65 684.132 L1016.09 684.132 L1015.53 684.132 L1014.97 684.132 L1014.41 684.132 L1013.85 684.132 L1013.29 684.132 L1012.73 684.132 L1012.18 684.132 L1011.62 684.132 L1011.06 684.132 L1010.5 684.132 L1009.94 684.132 L1009.38 684.132 L1008.82 684.132 L1008.26 684.132 L1007.7 684.132 L1007.14 684.132 L1006.58 684.132 L1006.02 684.132 L1005.46 684.132 L1004.91 684.132 L1004.35 684.132 L1003.79 684.132 L1003.23 684.132 L1002.67 684.132 L1002.11 684.132 L1001.55 684.132 L1000.99 684.132 L1000.43 684.132 L999.872 684.132 L999.313 684.132 L998.754 684.132 L998.194 684.132 L997.635 684.132 L997.076 684.132 L996.517 684.132 L995.957 684.132 L995.398 684.132 L994.839 684.132 L994.28 684.132 L993.72 684.132 L993.161 684.132 L992.602 684.132 L992.043 684.132 L991.483 684.132 L990.924 684.132 L990.365 684.132 L989.806 684.132 L989.246 684.132 L988.687 684.132 L988.128 684.132 L987.569 684.132 L987.009 684.132 L986.45 684.132 L985.891 684.132 L985.332 684.132 L984.772 684.132 L984.213 684.132 L983.654 684.132 L983.095 684.132 L982.535 684.132 L981.976 684.132 L981.417 684.132 L980.858 684.132 L980.298 684.132 L979.739 684.132 L979.18 684.132 L978.621 684.132 L978.061 684.132 L977.502 684.132 L976.943 684.132 L976.384 684.132 L975.824 684.132 L975.265 684.132 L974.706 684.132 L974.147 684.132 L973.587 684.132 L973.028 684.132 L972.469 684.132 L971.91 684.132 L971.35 684.132 L970.791 684.132 L970.232 684.132 L969.673 684.132 L969.113 684.132 L968.554 684.132 L967.995 684.132 L967.436 684.132 L966.876 684.132 L966.317 684.132 L965.758 684.132 L965.199 684.132 L964.639 684.132 L964.08 684.132 L963.521 684.132 L962.962 684.132 L962.402 684.132 L961.843 684.132 L961.284 684.132 L960.725 684.132 L960.165 684.132 L959.606 684.132 L959.047 684.132 L958.488 684.132 L957.928 684.132 L957.369 684.132 L956.81 684.132 L956.251 684.132 L955.691 684.132 L955.132 684.132 L954.573 684.132 L954.014 684.132 L953.454 684.132 L952.895 684.132 L952.336 684.132 L951.777 684.132 L951.217 684.132 L950.658 684.132 L950.099 684.132 L949.54 684.132 L948.98 684.132 L948.421 684.132 L947.862 684.132 L947.303 684.132 L946.743 684.132 L946.184 684.132 L945.625 684.132 L945.066 684.132 L944.506 684.132 L943.947 684.132 L943.388 684.132 L942.829 684.132 L942.269 684.132 L941.71 684.132 L941.151 684.132 L940.592 684.132 L940.032 684.132 L939.473 684.132 L938.914 684.132 L938.355 684.132 L937.795 684.132 L937.236 684.132 L936.677 684.132 L936.118 684.132 L935.558 684.132 L934.999 684.132 L934.44 684.132 L933.881 684.132 L933.321 684.132 L932.762 684.132 L932.203 684.132 L931.644 684.132 L931.084 684.132 L930.525 684.132 L929.966 684.132 L929.406 684.132 L928.847 684.132 L928.288 684.132 L927.729 684.132 L927.169 684.132 L926.61 684.132 L926.051 684.132 L925.492 684.132 L924.932 684.132 L924.373 684.132 L923.814 684.132 L923.255 684.132 L922.695 684.132 L922.136 684.132 L921.577 684.132 L921.018 684.132 L920.458 684.132 L919.899 684.132 L919.34 684.132 L918.781 684.132 L918.221 684.132 L917.662 684.132 L917.103 684.132 L916.544 684.132 L915.984 684.132 L915.425 684.132 L914.866 684.132 L914.307 684.132 L913.747 684.132 L913.188 684.132 L912.629 684.132 L912.07 684.132 L911.51 684.132 L910.951 684.132 L910.392 684.132 L909.833 684.132 L909.273 684.132 L908.714 684.132 L908.155 684.132 L907.596 684.132 L907.036 684.132 L906.477 684.132 L905.918 684.132 L905.359 684.132 L904.799 684.132 L904.24 684.132 L903.681 684.132 L903.122 684.132 L902.562 684.132 L902.003 684.132 L901.444 684.132 L900.885 684.132 L900.325 684.132 L899.766 684.132 L899.207 684.132 L898.648 684.132 L898.088 684.132 L897.529 684.132 L896.97 684.132 L896.411 684.132 L895.851 684.132 L895.292 684.132 L894.733 684.132 L894.174 684.132 L893.614 684.132 L893.055 684.132 L892.496 684.132 L891.937 684.132 L891.377 684.132 L890.818 684.132 L890.259 684.132 L889.7 684.132 L889.14 684.132 L888.581 684.132 L888.022 684.132 L887.463 684.132 L886.903 684.132 L886.344 684.132 L885.785 684.132 L885.226 684.132 L884.666 684.132 L884.107 684.132 L883.548 684.132 L882.989 684.132 L882.429 684.132 L881.87 684.132 L881.311 684.132 L880.752 684.132 L880.192 684.132 L879.633 684.132 L879.074 684.132 L878.515 684.132 L877.955 684.132 L877.396 684.132 L876.837 684.132 L876.278 684.132 L875.718 684.132 L875.159 684.132 L874.6 684.132 L874.041 684.132 L873.481 684.132 L872.922 684.132 L872.363 684.132 L871.804 684.132 L871.244 684.132 L870.685 684.132 L870.126 684.132 L869.567 684.132 L869.007 684.132 L868.448 684.132 L867.889 684.132 L867.33 684.132 L866.77 684.132 L866.211 684.132 L865.652 684.132 L865.093 684.132 L864.533 684.132 L863.974 684.132 L863.415 684.132 L862.856 684.132 L862.296 684.132 L861.737 684.132 L861.178 684.132 L860.619 684.132 L860.059 684.132 L859.5 684.132 L858.941 684.132 L858.382 684.132 L857.822 684.132 L857.263 684.132 L856.704 684.132 L856.145 684.132 L855.585 684.132 L855.026 684.132 L854.467 684.132 L853.908 684.132 L853.348 684.132 L852.789 684.132 L852.23 684.132 L851.671 684.132 L851.111 684.132 L850.552 684.132 L849.993 684.132 L849.434 684.132 L848.874 684.132 L848.315 684.132 L847.756 684.132 L847.197 684.132 L846.637 684.132 L846.078 684.132 L845.519 684.132 L844.96 684.132 L844.4 684.132 L843.841 684.132 L843.282 684.132 L842.723 684.132 L842.163 684.132 L841.604 684.132 L841.045 684.132 L840.486 684.132 L839.926 684.132 L839.367 684.132 L838.808 684.132 L838.249 684.132 L837.689 684.132 L837.13 684.132 L836.571 684.132 L836.012 684.132 L835.452 684.132 L834.893 684.132 L834.334 684.132 L833.775 684.132 L833.215 684.132 L832.656 684.132 L832.097 684.132 L831.538 684.132 L830.978 684.132 L830.419 684.132 L829.86 684.132 L829.301 684.132 L828.741 684.132 L828.182 684.132 L827.623 684.132 L827.064 684.132 L826.504 684.132 L825.945 684.132 L825.386 684.132 L824.827 684.132 L824.267 684.132 L823.708 684.132 L823.149 684.132 L822.59 684.132 L822.03 684.132 L821.471 684.132 L820.912 684.132 L820.353 684.132 L819.793 684.132 L819.234 684.132 L818.675 684.132 L818.116 684.132 L817.556 684.132 L816.997 684.132 L816.438 684.132 L815.879 684.132 L815.319 684.132 L814.76 684.132 L814.201 684.132 L813.642 684.132 L813.082 684.132 L812.523 684.132 L811.964 684.132 L811.405 684.132 L810.845 684.132 L810.286 684.132 L809.727 684.132 L809.168 684.132 L808.608 684.132 L808.049 684.132 L807.49 684.132 L806.931 684.132 L806.371 684.132 L805.812 684.132 L805.253 684.132 L804.693 684.132 L804.134 684.132 L803.575 684.132 L803.016 684.132 L802.456 684.132 L801.897 684.132 L801.338 684.132 L800.779 684.132 L800.219 684.132 L799.66 684.132 L799.101 684.132 L798.542 684.132 L797.982 684.132 L797.423 684.132 L796.864 684.132 L796.305 684.132 L795.745 684.132 L795.186 684.132 L794.627 684.132 L794.068 684.132 L793.508 684.132 L792.949 684.132 L792.39 684.132 L791.831 684.132 L791.271 684.132 L790.712 684.132 L790.153 684.132 L789.594 684.132 L789.034 684.132 L788.475 684.132 L787.916 684.132 L787.357 684.132 L786.797 684.132 L786.238 684.132 L785.679 684.132 L785.12 684.132 L784.56 684.132 L784.001 684.132 L783.442 684.132 L782.883 684.132 L782.323 684.132 L781.764 684.132 L781.205 684.132 L780.646 684.132 L780.086 684.132 L779.527 684.132 L778.968 684.132 L778.409 684.132 L777.849 684.132 L777.29 684.132 L776.731 684.132 L776.172 684.132 L775.612 684.132 L775.053 684.132 L774.494 684.132 L773.935 684.132 L773.375 684.132 L772.816 684.132 L772.257 684.132 L771.698 684.132 L771.138 684.132 L770.579 684.132 L770.02 684.132 L769.461 684.132 L768.901 684.132 L768.342 684.132 L767.783 684.132 L767.224 684.132 L766.664 684.132 L766.105 684.132 L765.546 684.132 L764.987 684.132 L764.427 684.132 L763.868 684.132 L763.309 684.132 L762.75 684.132 L762.19 684.132 L761.631 684.132 L761.072 684.132 L760.513 684.132 L759.953 684.132 L759.394 684.132 L758.835 684.132 L758.276 684.132 L757.716 684.132 L757.157 684.132 L756.598 684.132 L756.039 684.132 L755.479 684.132 L754.92 684.132 L754.361 684.132 L753.802 684.132 L753.242 684.132 L752.683 684.132 L752.124 684.132 L751.565 684.132 L751.005 684.132 L750.446 684.132 L749.887 684.132 L749.328 684.132 L748.768 684.132 L748.209 684.132 L747.65 684.132 L747.091 684.132 L746.531 684.132 L745.972 684.132 L745.413 684.132 L744.854 684.132 L744.294 684.132 L743.735 684.132 L743.176 684.132 L742.617 684.132 L742.057 684.132 L741.498 684.132 L740.939 684.132 L740.38 684.132 L739.82 684.132 L739.261 684.132 L738.702 684.132 L738.143 684.132 L737.583 684.132 L737.024 684.132 L736.465 684.132 L735.906 684.132 L735.346 684.132 L734.787 684.132 L734.228 684.132 L733.669 684.132 L733.109 684.132 L732.55 684.132 L731.991 684.132 L731.432 684.132 L730.872 684.132 L730.313 684.132 L729.754 684.132 L729.195 684.132 L728.635 684.132 L728.076 684.132 L727.517 684.132 L726.958 684.132 L726.398 684.132 L725.839 684.132 L725.28 684.132 L724.721 684.132 L724.161 684.132 L723.602 684.132 L723.043 684.132 L722.484 684.132 L721.924 684.132 L721.365 684.132 L720.806 684.132 L720.247 684.132  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.695 720.806,687.695 721.365,687.695 721.924,687.695 722.484,687.695 723.043,687.695 723.602,687.695 724.161,687.695 724.721,687.695 725.28,687.695 725.839,687.695 726.398,687.695 726.958,687.695 727.517,687.695 728.076,687.695 728.635,687.695 729.195,687.695 729.754,687.695 730.313,687.695 730.872,687.695 731.432,687.695 731.991,687.695 732.55,687.695 733.109,687.695 733.669,687.695 734.228,687.695 734.787,687.695 735.346,687.695 735.906,687.695 736.465,687.695 737.024,687.695 737.583,687.695 738.143,687.695 738.702,687.695 739.261,687.695 739.82,687.695 740.38,687.695 740.939,687.695 741.498,687.695 742.057,687.695 742.617,687.695 743.176,687.695 743.735,687.695 744.294,687.695 744.854,687.695 745.413,687.695 745.972,687.695 746.531,687.695 747.091,687.695 747.65,687.695 748.209,687.695 748.768,687.695 749.328,687.695 749.887,687.695 750.446,687.695 751.005,687.695 751.565,687.695 752.124,687.695 752.683,687.695 753.242,687.695 753.802,687.695 754.361,687.695 754.92,687.695 755.479,687.695 756.039,687.695 756.598,687.695 757.157,687.695 757.716,687.695 758.276,687.695 758.835,687.695 759.394,687.695 759.953,687.695 760.513,687.695 761.072,687.695 761.631,687.695 762.19,687.695 762.75,687.695 763.309,687.695 763.868,687.695 764.427,687.695 764.987,687.695 765.546,687.695 766.105,687.695 766.664,687.695 767.224,687.695 767.783,687.695 768.342,687.695 768.901,687.695 769.461,687.695 770.02,687.695 770.579,687.695 771.138,687.695 771.698,687.695 772.257,687.695 772.816,687.695 773.375,687.695 773.935,687.695 774.494,687.695 775.053,687.695 775.612,687.695 776.172,687.695 776.731,687.695 777.29,687.695 777.849,687.695 778.409,687.695 778.968,687.695 779.527,687.695 780.086,687.695 780.646,687.695 781.205,687.695 781.764,687.695 782.323,687.695 782.883,687.695 783.442,687.695 784.001,687.695 784.56,687.695 785.12,687.695 785.679,687.695 786.238,687.695 786.797,687.695 787.357,687.695 787.916,687.695 788.475,687.695 789.034,687.695 789.594,687.695 790.153,687.695 790.712,687.695 791.271,687.695 791.831,687.695 792.39,687.695 792.949,687.695 793.508,687.695 794.068,687.695 794.627,687.695 795.186,687.695 795.745,687.695 796.305,687.695 796.864,687.695 797.423,687.695 797.982,687.695 798.542,687.695 799.101,687.695 799.66,687.695 800.219,687.695 800.779,687.695 801.338,687.695 801.897,687.695 802.456,687.695 803.016,687.695 803.575,687.695 804.134,687.695 804.693,687.695 805.253,687.695 805.812,687.695 806.371,687.695 806.931,687.695 807.49,687.695 808.049,687.695 808.608,687.695 809.168,687.695 809.727,687.695 810.286,687.695 810.845,687.695 811.405,687.695 811.964,687.695 812.523,687.695 813.082,687.695 813.642,687.695 814.201,687.695 814.76,687.695 815.319,687.695 815.879,687.695 816.438,687.695 816.997,687.695 817.556,687.695 818.116,687.695 818.675,687.695 819.234,687.695 819.793,687.695 820.353,687.695 820.912,687.695 821.471,687.695 822.03,687.695 822.59,687.695 823.149,687.695 823.708,687.695 824.267,687.695 824.827,687.695 825.386,687.695 825.945,687.695 826.504,687.695 827.064,687.695 827.623,687.695 828.182,687.695 828.741,687.695 829.301,687.695 829.86,687.695 830.419,687.695 830.978,687.695 831.538,687.695 832.097,687.695 832.656,687.695 833.215,687.695 833.775,687.695 834.334,687.695 834.893,687.695 835.452,687.695 836.012,687.695 836.571,687.695 837.13,687.695 837.689,687.695 838.249,687.695 838.808,687.695 839.367,687.695 839.926,687.695 840.486,687.695 841.045,687.695 841.604,687.695 842.163,687.695 842.723,687.695 843.282,687.695 843.841,687.695 844.4,687.695 844.96,687.695 845.519,687.695 846.078,687.695 846.637,687.695 847.197,687.695 847.756,687.695 848.315,687.695 848.874,687.695 849.434,687.695 849.993,687.695 850.552,687.695 851.111,687.695 851.671,687.695 852.23,687.695 852.789,687.695 853.348,687.695 853.908,687.695 854.467,687.695 855.026,687.695 855.585,687.695 856.145,687.695 856.704,687.695 857.263,687.695 857.822,687.695 858.382,687.695 858.941,687.695 859.5,687.695 860.059,687.695 860.619,687.695 861.178,687.695 861.737,687.695 862.296,687.695 862.856,687.695 863.415,687.695 863.974,687.695 864.533,687.695 865.093,687.695 865.652,687.695 866.211,687.695 866.77,687.695 867.33,687.695 867.889,687.695 868.448,687.695 869.007,687.695 869.567,687.695 870.126,687.695 870.685,687.695 871.244,687.695 871.804,687.695 872.363,687.695 872.922,687.695 873.481,687.695 874.041,687.695 874.6,687.695 875.159,687.695 875.718,687.695 876.278,687.695 876.837,687.695 877.396,687.695 877.955,687.695 878.515,687.695 879.074,687.695 879.633,687.695 880.192,687.695 880.752,687.695 881.311,687.695 881.87,687.695 882.429,687.695 882.989,687.695 883.548,687.695 884.107,687.695 884.666,687.695 885.226,687.695 885.785,687.695 886.344,687.695 886.903,687.695 887.463,687.695 888.022,687.695 888.581,687.695 889.14,687.695 889.7,687.695 890.259,687.695 890.818,687.695 891.377,687.695 891.937,687.695 892.496,687.695 893.055,687.695 893.614,687.695 894.174,687.695 894.733,687.695 895.292,687.695 895.851,687.695 896.411,687.695 896.97,687.695 897.529,687.695 898.088,687.695 898.648,687.695 899.207,687.695 899.766,687.695 900.325,687.695 900.885,687.695 901.444,687.695 902.003,687.695 902.562,687.695 903.122,687.695 903.681,687.695 904.24,687.695 904.799,687.695 905.359,687.695 905.918,687.695 906.477,687.695 907.036,687.695 907.596,687.695 908.155,687.695 908.714,687.695 909.273,687.695 909.833,687.695 910.392,687.695 910.951,687.695 911.51,687.695 912.07,687.695 912.629,687.695 913.188,687.695 913.747,687.695 914.307,687.695 914.866,687.695 915.425,687.695 915.984,687.695 916.544,687.695 917.103,687.695 917.662,687.695 918.221,687.695 918.781,687.695 919.34,687.695 919.899,687.695 920.458,687.695 921.018,687.695 921.577,687.695 922.136,687.695 922.695,687.695 923.255,687.695 923.814,687.695 924.373,687.695 924.932,687.695 925.492,687.695 926.051,687.695 926.61,687.695 927.169,687.695 927.729,687.695 928.288,687.695 928.847,687.695 929.406,687.695 929.966,687.695 930.525,687.695 931.084,687.695 931.644,687.695 932.203,687.695 932.762,687.695 933.321,687.695 933.881,687.695 934.44,687.695 934.999,687.695 935.558,687.695 936.118,687.695 936.677,687.695 937.236,687.695 937.795,687.695 938.355,687.695 938.914,687.695 939.473,687.695 940.032,687.695 940.592,687.695 941.151,687.695 941.71,687.695 942.269,687.695 942.829,687.695 943.388,687.695 943.947,687.695 944.506,687.695 945.066,687.695 945.625,687.695 946.184,687.695 946.743,687.695 947.303,687.695 947.862,687.695 948.421,687.695 948.98,687.695 949.54,687.695 950.099,687.695 950.658,687.695 951.217,687.695 951.777,687.695 952.336,687.695 952.895,687.695 953.454,687.695 954.014,687.695 954.573,687.695 955.132,687.695 955.691,687.695 956.251,687.695 956.81,687.695 957.369,687.695 957.928,687.695 958.488,687.695 959.047,687.695 959.606,687.695 960.165,687.695 960.725,687.695 961.284,687.695 961.843,687.695 962.402,687.695 962.962,687.695 963.521,687.695 964.08,687.695 964.639,687.695 965.199,687.695 965.758,687.695 966.317,687.695 966.876,687.695 967.436,687.695 967.995,687.695 968.554,687.695 969.113,687.695 969.673,687.695 970.232,687.695 970.791,687.695 971.35,687.695 971.91,687.695 972.469,687.695 973.028,687.695 973.587,687.695 974.147,687.695 974.706,687.695 975.265,687.695 975.824,687.695 976.384,687.695 976.943,687.695 977.502,687.695 978.061,687.695 978.621,687.695 979.18,687.695 979.739,687.695 980.298,687.695 980.858,687.695 981.417,687.695 981.976,687.695 982.535,687.695 983.095,687.695 983.654,687.695 984.213,687.695 984.772,687.695 985.332,687.695 985.891,687.695 986.45,687.695 987.009,687.695 987.569,687.695 988.128,687.695 988.687,687.695 989.246,687.695 989.806,687.695 990.365,687.695 990.924,687.695 991.483,687.695 992.043,687.695 992.602,687.695 993.161,687.695 993.72,687.695 994.28,687.695 994.839,687.695 995.398,687.695 995.957,687.695 996.517,687.695 997.076,687.695 997.635,687.695 998.194,687.695 998.754,687.695 999.313,687.695 999.872,687.695 1000.43,687.695 1000.99,687.695 1001.55,687.695 1002.11,687.695 1002.67,687.695 1003.23,687.695 1003.79,687.695 1004.35,687.695 1004.91,687.695 1005.46,687.695 1006.02,687.695 1006.58,687.695 1007.14,687.695 1007.7,687.695 1008.26,687.695 1008.82,687.695 1009.38,687.695 1009.94,687.695 1010.5,687.695 1011.06,687.695 1011.62,687.695 1012.18,687.695 1012.73,687.695 1013.29,687.695 1013.85,687.695 1014.41,687.695 1014.97,687.695 1015.53,687.695 1016.09,687.695 1016.65,687.695 1017.21,687.695 1017.77,687.695 1018.33,687.695 1018.89,687.695 1019.45,687.695 1020.01,687.695 1020.56,687.695 1021.12,687.695 1021.68,687.695 1022.24,687.695 1022.8,687.695 1023.36,687.695 1023.92,687.695 1024.48,687.695 1025.04,687.695 1025.6,687.695 1026.16,687.695 1026.72,687.695 1027.28,687.695 1027.83,687.695 1028.39,687.695 1028.95,687.695 1029.51,687.695 1030.07,687.695 1030.63,687.695 1031.19,687.695 1031.75,687.695 1032.31,687.695 1032.87,687.695 1033.43,687.695 1033.99,687.695 1034.55,687.695 1035.1,687.695 1035.66,687.695 1036.22,687.695 1036.78,687.695 1037.34,687.695 1037.9,687.695 1038.46,687.695 1039.02,687.695 1039.58,687.695 1040.14,687.695 1040.7,687.695 1041.26,687.695 1041.82,687.695 1042.38,687.695 1042.93,687.695 1043.49,687.695 1044.05,687.695 1044.61,687.695 1045.17,687.695 1045.73,687.695 1046.29,687.695 1046.85,687.695 1047.41,687.695 1047.97,687.695 1048.53,687.695 1049.09,687.695 1049.65,687.695 1050.2,687.695 1050.76,687.695 1051.32,687.695 1051.88,687.695 1052.44,687.695 1053,687.695 1053.56,687.695 1054.12,687.695 1054.68,687.695 1055.24,687.695 1055.8,687.695 1056.36,687.695 1056.92,687.695 1057.48,687.695 1058.03,687.695 1058.59,687.695 1059.15,687.695 1059.71,687.695 1060.27,687.695 1060.83,687.695 1061.39,687.695 1061.95,687.695 1062.51,687.695 1063.07,687.695 1063.63,687.695 1064.19,687.695 1064.75,687.695 1065.3,687.695 1065.86,687.695 1066.42,687.695 1066.98,687.695 1067.54,687.695 1068.1,687.695 1068.66,687.695 1069.22,687.695 1069.78,687.695 1070.34,687.695 1070.9,687.695 1071.46,687.695 1072.02,687.695 1072.57,687.695 1073.13,687.695 1073.69,687.695 1074.25,687.695 1074.81,687.695 1075.37,687.695 1075.93,687.695 1076.49,687.695 1077.05,687.695 1077.61,687.695 1078.17,687.695 1078.73,687.695 1079.29,687.695 1079.85,687.695 1080.4,687.695 1080.96,687.695 1081.52,687.695 1082.08,687.695 1082.64,687.695 1083.2,687.695 1083.76,687.695 1084.32,687.695 1084.88,687.695 1085.44,687.695 1086,687.695 1086.56,687.695 1087.12,687.695 1087.67,687.695 1088.23,687.695 1088.79,687.695 1089.35,687.695 1089.91,687.695 1090.47,687.695 1091.03,687.695 1091.59,687.695 1092.15,687.695 1092.71,687.695 1093.27,687.695 1093.83,687.695 1094.39,687.695 1094.94,687.695 1095.5,687.695 1096.06,687.695 1096.62,687.695 1097.18,687.695 1097.74,687.695 1098.3,687.695 1098.86,687.695 1099.42,687.695 1099.98,687.695 1100.54,687.695 1101.1,687.695 1101.66,687.695 1102.22,687.695 1102.77,687.695 1103.33,687.695 1103.89,687.695 1104.45,687.695 1105.01,687.695 1105.57,687.695 1106.13,687.695 1106.69,687.695 1107.25,687.695 1107.81,687.695 1108.37,687.695 1108.93,687.695 1109.49,687.695 1110.04,687.695 1110.6,687.695 1111.16,687.695 1111.72,687.695 1112.28,687.695 1112.84,687.695 1113.4,687.695 1113.96,687.695 1114.52,687.695 1115.08,687.695 1115.64,687.695 1116.2,687.695 1116.76,687.695 1117.31,687.695 1117.87,687.695 1118.43,687.695 1118.99,687.695 1119.55,687.695 1120.11,687.695 1120.67,687.695 1121.23,687.695 1121.79,687.695 1122.35,687.695 1122.91,687.695 1123.47,687.695 1124.03,687.695 1124.59,687.695 1125.14,687.695 1125.7,687.695 1126.26,687.695 1126.82,687.695 1127.38,687.695 1127.94,687.695 1128.5,687.695 1129.06,687.695 1129.62,687.695 1130.18,687.695 1130.74,687.695 1131.3,687.695 1131.86,687.695 1132.41,687.695 1132.97,687.695 1133.53,687.695 1134.09,687.695 1134.65,687.695 1135.21,687.695 1135.77,687.695 1136.33,687.695 1136.89,687.695 1137.45,687.695 1138.01,687.695 1138.57,687.695 1139.13,687.695 1139.68,687.695 1140.24,687.695 1140.8,687.695 1141.36,687.695 1141.92,687.695 1142.48,687.695 1143.04,687.695 1143.6,687.695 1144.16,687.695 1144.72,687.695 1145.28,687.695 1145.84,687.695 1146.4,687.695 1146.96,687.695 1147.51,687.695 1148.07,687.695 1148.63,687.695 1149.19,687.695 1149.75,687.695 1150.31,687.695 1150.87,687.695 1151.43,687.695 1151.99,687.695 1152.55,687.695 1153.11,687.695 1153.67,687.695 1154.23,687.695 1154.78,687.695 1155.34,687.695 1155.9,687.695 1156.46,687.695 1157.02,687.695 1157.58,687.695 1158.14,687.695 1158.7,687.695 1159.26,687.695 1159.82,687.695 1160.38,687.695 1160.94,687.695 1161.5,687.695 1162.05,687.695 1162.61,687.695 1163.17,687.695 1163.73,687.695 1164.29,687.695 1164.85,687.695 1165.41,687.695 1165.97,687.695 1166.53,687.695 1167.09,687.695 1167.65,687.695 1168.21,687.695 1168.77,687.695 1169.33,687.695 1169.88,687.695 1170.44,687.695 1171,687.695 1171.56,687.695 1172.12,687.695 1172.68,687.695 1173.24,687.695 1173.8,687.695 1174.36,687.695 1174.92,687.695 1175.48,687.695 1176.04,687.695 1176.6,687.695 1177.15,687.695 1177.71,687.695 1178.27,687.695 1178.83,687.695 1179.39,687.695 1179.95,687.695 1180.51,687.695 1181.07,687.695 1181.63,687.695 1182.19,687.695 1182.75,687.695 1183.31,687.695 1183.87,687.695 1184.43,687.695 1184.98,687.695 1185.54,687.695 1186.1,687.695 1186.66,687.695 1187.22,687.695 1187.78,687.695 1188.34,687.695 1188.9,687.695 1189.46,687.695 1190.02,687.695 1190.58,687.695 1191.14,687.695 1191.7,687.695 1192.25,687.695 1192.81,687.695 1193.37,687.695 1193.93,687.695 1194.49,687.695 1195.05,687.695 1195.61,687.695 1196.17,687.695 1196.73,687.695 1197.29,687.695 1197.85,687.695 1198.41,687.695 1198.97,687.695 1199.52,687.695 1200.08,687.695 1200.64,687.695 1201.2,687.695 1201.76,687.695 1202.32,687.695 1202.88,687.695 1203.44,687.695 1204,687.695 1204.56,687.695 1205.12,687.695 1205.68,687.695 1206.24,687.695 1206.8,687.695 1207.35,687.695 1207.91,687.695 1208.47,687.695 1209.03,687.695 1209.59,687.695 1210.15,687.695 1210.71,687.695 1211.27,687.695 1211.83,687.695 1212.39,687.695 1212.95,687.695 1213.51,687.695 1214.07,687.695 1214.62,687.695 1215.18,687.695 1215.74,687.695 1216.3,687.695 1216.86,687.695 1217.42,687.695 1217.98,687.695 1218.54,687.695 1219.1,687.695 1219.66,687.695 1220.22,687.695 1220.78,687.695 1221.34,687.695 1221.89,687.695 1222.45,687.695 1223.01,687.695 1223.57,687.695 1224.13,687.695 1224.69,687.695 1225.25,687.695 1225.81,687.695 1226.37,687.695 1226.93,687.695 1227.49,687.695 1228.05,687.695 1228.61,687.695 1229.17,687.695 1229.72,687.695 1230.28,687.695 1230.84,687.695 1231.4,687.695 1231.96,687.695 1232.52,687.695 1233.08,687.695 1233.64,687.695 1234.2,687.695 1234.76,687.695 1235.32,687.695 1235.88,687.695 1236.44,687.695 1236.99,687.695 1237.55,687.695 1238.11,687.695 1238.67,687.695 1239.23,687.695 1239.79,687.695 1240.35,687.695 1240.91,687.695 1241.47,687.695 1242.03,687.695 1242.59,687.695 1243.15,687.695 1243.71,687.695 1244.26,687.695 1244.82,687.695 1245.38,687.695 1245.94,687.695 1246.5,687.695 1247.06,687.695 1247.62,687.695 1248.18,687.695 1248.74,687.695 1249.3,687.695 1249.86,687.695 1250.42,687.695 1250.98,687.695 1251.54,687.695 1252.09,687.695 1252.65,687.695 1253.21,687.695 1253.77,687.695 1254.33,687.695 1254.89,687.695 1255.45,687.695 1256.01,687.695 1256.57,687.695 1257.13,687.695 1257.69,687.695 1258.25,687.695 1258.81,687.695 1259.36,687.695 1259.92,687.695 1260.48,687.695 1261.04,687.695 1261.6,687.695 1262.16,687.695 1262.72,687.695 1263.28,687.695 1263.84,687.695 1264.4,687.695 1264.96,687.695 1265.52,687.695 1266.08,687.695 1266.63,687.695 1267.19,687.695 1267.75,687.695 1268.31,687.695 1268.87,687.695 1269.43,687.695 1269.99,687.695 1270.55,687.695 1271.11,687.695 1271.67,687.695 1272.23,687.695 1272.79,687.695 1273.35,687.695 1273.91,687.695 1274.46,687.695 1275.02,687.695 1275.58,687.695 1276.14,687.695 1276.7,687.695 1277.26,687.695 1277.82,687.695 1278.38,687.695 1278.94,687.695 1279.5,687.695 1280.06,687.695 1280.62,687.695 1281.18,687.695 1281.73,687.695 1282.29,687.695 1282.85,687.695 1283.41,687.695 1283.97,687.695 1284.53,687.695 1285.09,687.695 1285.65,687.695 1286.21,687.695 1286.77,687.695 1287.33,687.695 1287.89,687.695 1288.45,687.695 1289,687.695 1289.56,687.695 1290.12,687.695 1290.68,687.695 1291.24,687.695 1291.8,687.695 1292.36,687.695 1292.92,687.695 1293.48,687.695 1294.04,687.695 1294.6,687.695 1295.16,687.695 1295.72,687.695 1296.28,687.695 1296.83,687.695 1297.39,687.695 1297.95,687.695 1298.51,687.695 1299.07,687.695 1299.63,687.695 1300.19,687.695 1300.75,687.695 1301.31,687.695 1301.87,687.695 1302.43,687.695 1302.99,687.695 1303.55,687.695 1304.1,687.695 1304.66,687.695 1305.22,687.695 1305.78,687.695 1306.34,687.695 1306.9,687.695 1307.46,687.695 1308.02,687.695 1308.58,687.695 1309.14,687.695 1309.7,687.695 1310.26,687.695 1310.82,687.695 1311.38,687.695 1311.93,687.695 1312.49,687.695 1313.05,687.695 1313.61,687.695 1314.17,687.695 1314.73,687.695 1315.29,687.695 1315.85,687.695 1316.41,687.695 1316.97,687.695 1317.53,687.695 1318.09,687.695 1318.65,687.695 1319.2,687.695 1319.76,687.695 1320.32,687.695 1320.88,687.695 1321.44,687.695 1322,687.695 1322.56,687.695 1323.12,687.695 1323.68,687.695 1324.24,687.695 1324.8,687.695 1325.36,687.695 1325.92,687.695 1326.47,687.695 1327.03,687.695 1327.59,687.695 1328.15,687.695 1328.71,687.695 1329.27,687.695 1329.83,687.695 1330.39,687.695 1330.95,687.695 1331.51,687.695 1332.07,687.695 1332.63,687.695 1333.19,687.695 1333.75,687.695 1334.3,687.695 1334.86,687.695 1335.42,687.695 1335.98,687.695 1336.54,687.695 1337.1,687.695 1337.66,687.695 1338.22,687.695 1338.78,687.695 1339.34,687.695 1339.9,687.695 1340.46,687.695 1341.02,687.695 1341.57,687.695 1342.13,687.695 1342.69,687.695 1343.25,687.695 1343.81,687.695 1344.37,687.695 1344.93,687.695 1345.49,687.695 1346.05,687.695 1346.61,687.695 1347.17,687.695 1347.73,687.695 1348.29,687.695 1348.84,687.695 1349.4,687.695 1349.96,687.695 1350.52,687.695 1351.08,687.695 1351.64,687.695 1352.2,687.695 1352.76,687.695 1353.32,687.695 1353.88,687.695 1354.44,687.695 1355,687.695 1355.56,687.695 1356.12,687.695 1356.67,687.695 1357.23,687.695 1357.79,687.695 1358.35,687.695 1358.91,687.695 1359.47,687.695 1360.03,687.695 1360.59,687.695 1361.15,687.695 1361.71,687.695 1362.27,687.695 1362.83,687.695 1363.39,687.695 1363.94,687.695 1364.5,687.695 1365.06,687.695 1365.62,687.695 1366.18,687.695 1366.74,687.695 1367.3,687.695 1367.86,687.695 1368.42,687.695 1368.98,687.695 1369.54,687.695 1370.1,687.695 1370.66,687.695 1371.21,687.695 1371.77,687.695 1372.33,687.695 1372.89,687.695 1373.45,687.695 1374.01,687.695 1374.57,687.695 1375.13,687.695 1375.69,687.695 1376.25,687.695 1376.81,687.695 1377.37,687.695 1377.93,687.695 1378.49,687.695 1379.04,687.695 1379.6,687.695 1380.16,687.695 1380.72,687.695 1381.28,687.695 1381.84,687.695 1382.4,687.695 1382.96,687.695 1383.52,687.695 1384.08,687.695 1384.64,687.695 1385.2,687.695 1385.76,687.695 1386.31,687.695 1386.87,687.695 1387.43,687.695 1387.99,687.695 1388.55,687.695 1389.11,687.695 1389.67,687.695 1390.23,687.695 1390.79,687.695 1391.35,687.695 1391.91,687.695 1392.47,687.695 1393.03,687.695 1393.58,687.695 1394.14,687.695 1394.7,687.695 1395.26,687.695 1395.82,687.695 1396.38,687.695 1396.94,687.695 1397.5,687.695 1398.06,687.695 1398.62,687.695 1399.18,687.695 1399.74,687.695 1400.3,687.695 1400.86,687.695 1401.41,687.695 1401.97,687.695 1402.53,687.695 1403.09,687.695 1403.65,687.695 1404.21,687.695 1404.77,687.695 1405.33,687.695 1405.89,687.695 1406.45,687.695 1407.01,687.695 1407.57,687.695 1408.13,687.695 1408.68,687.695 1409.24,687.695 1409.8,687.695 1410.36,687.695 1410.92,687.695 1411.48,687.695 1412.04,687.695 1412.6,687.695 1413.16,687.695 1413.72,687.695 1414.28,687.695 1414.84,687.695 1415.4,687.695 1415.95,687.695 1416.51,687.695 1417.07,687.695 1417.63,687.695 1418.19,687.695 1418.75,687.695 1419.31,687.695 1419.87,687.695 1420.43,687.695 1420.99,687.695 1421.55,687.695 1422.11,687.695 1422.67,687.695 1423.23,687.695 1423.78,687.695 1424.34,687.695 1424.9,687.695 1425.46,687.695 1426.02,687.695 1426.58,687.695 1427.14,687.695 1427.7,687.695 1428.26,687.695 1428.82,687.695 1429.38,687.695 1429.94,687.695 1430.5,687.695 1431.05,687.695 1431.61,687.695 1432.17,687.695 1432.73,687.695 1433.29,687.695 1433.85,687.695 1434.41,687.695 1434.97,687.695 1435.53,687.695 1436.09,687.695 1436.65,687.695 1437.21,687.695 1437.77,687.695 1438.33,687.695 1438.88,687.695 1439.44,687.695 1440,687.695 1440.56,687.695 1441.12,687.695 1441.68,687.695 1442.24,687.695 1442.8,687.695 1443.36,687.695 1443.92,687.695 1444.48,687.695 1445.04,687.695 1445.6,687.695 1446.15,687.695 1446.71,687.695 1447.27,687.695 1447.83,687.695 1448.39,687.695 1448.95,687.695 1449.51,687.695 1450.07,687.695 1450.63,687.695 1451.19,687.695 1451.75,687.695 1452.31,687.695 1452.87,687.695 1453.42,687.695 1453.98,687.695 1454.54,687.695 1455.1,687.695 1455.66,687.695 1456.22,687.695 1456.78,687.695 1457.34,687.695 1457.9,687.695 1458.46,687.695 1459.02,687.695 1459.58,687.695 1460.14,687.695 1460.7,687.695 1461.25,687.695 1461.81,687.695 1462.37,687.695 1462.93,687.695 1463.49,687.695 1464.05,687.695 1464.61,687.695 1465.17,687.695 1465.73,687.695 1466.29,687.695 1466.85,687.695 1467.41,687.695 1467.97,687.695 1468.52,687.695 1469.08,687.695 1469.64,687.695 1470.2,687.695 1470.76,687.695 1471.32,687.695 1471.88,687.695 1472.44,687.695 1473,687.695 1473.56,687.695 1474.12,687.695 1474.68,687.695 1475.24,687.695 1475.79,687.695 1476.35,687.695 1476.91,687.695 1477.47,687.695 1478.03,687.695 1478.59,687.695 1479.15,687.695 1479.71,687.695 1480.27,687.695 1480.83,687.695 1481.39,687.695 1481.95,687.695 1482.51,687.695 1483.07,687.695 1483.62,687.695 1484.18,687.695 1484.74,687.695 1485.3,687.695 1485.86,687.695 1486.42,687.695 1486.98,687.695 1487.54,687.695 1488.1,687.695 1488.66,687.695 1489.22,687.695 1489.78,687.695 1490.34,687.695 1490.89,687.695 1491.45,687.695 1492.01,687.695 1492.57,687.695 1493.13,687.695 1493.69,687.695 1494.25,687.695 1494.81,687.695 1495.37,687.695 1495.93,687.695 1496.49,687.695 1497.05,687.695 1497.61,687.695 1498.16,687.695 1498.72,687.695 1499.28,687.695 1499.84,687.695 1500.4,687.695 1500.96,687.695 1501.52,687.695 1502.08,687.695 1502.64,687.695 1503.2,687.695 1503.76,687.695 1504.32,687.695 1504.88,687.695 1505.44,687.695 1505.99,687.695 1506.55,687.695 1507.11,687.695 1507.67,687.695 1508.23,687.695 1508.79,687.695 1509.35,687.695 1509.91,687.695 1510.47,687.695 1511.03,687.695 1511.59,687.695 1512.15,687.695 1512.71,687.695 1513.26,687.695 1513.82,687.695 1514.38,687.695 1514.94,687.695 1515.5,687.695 1516.06,687.695 1516.62,687.695 1517.18,687.695 1517.74,687.695 1518.3,687.695 1518.86,687.695 1519.42,687.695 1519.98,687.695 1520.53,687.695 1521.09,687.695 1521.65,687.695 1522.21,687.695 1522.77,687.695 1523.33,687.695 1523.89,687.695 1524.45,687.695 1525.01,687.695 1525.57,687.695 1526.13,687.695 1526.69,687.695 1527.25,687.695 1527.81,687.695 1528.36,687.695 1528.92,687.695 1529.48,687.695 1530.04,687.695 1530.6,687.695 1531.16,687.695 1531.72,687.695 1532.28,687.695 1532.84,687.695 1533.4,687.695 1533.96,687.695 1534.52,687.695 1535.08,687.695 1535.63,687.695 1536.19,687.695 1536.75,687.695 1537.31,687.695 1537.87,687.695 1538.43,687.695 1538.99,687.695 1539.55,687.695 1540.11,687.695 1540.67,687.695 1541.23,687.695 1541.79,687.695 1542.35,687.695 1542.9,687.695 1543.46,687.695 1544.02,687.695 1544.58,687.695 1545.14,687.695 1545.7,687.695 1546.26,687.695 1546.82,687.695 1547.38,687.695 1547.94,687.695 1548.5,687.695 1549.06,687.695 1549.62,687.695 1550.18,687.695 1550.73,687.695 1551.29,687.695 1551.85,687.695 1552.41,687.695 1552.97,687.695 1553.53,687.695 1554.09,687.695 1554.65,687.695 1555.21,687.695 1555.77,687.695 1556.33,687.695 1556.89,687.695 1557.45,687.695 1558,687.695 1558.56,687.695 1559.12,687.695 1559.68,687.695 1560.24,687.695 1560.8,687.695 1561.36,687.695 1561.92,687.695 1562.48,687.695 1563.04,687.695 1563.6,687.695 1564.16,687.695 1564.72,687.695 1565.28,687.695 1565.83,687.695 1566.39,687.695 1566.95,687.695 1567.51,687.695 1568.07,687.695 1568.63,687.695 1569.19,687.695 1569.75,687.695 1570.31,687.695 1570.87,687.695 1571.43,687.695 1571.99,687.695 1572.55,687.695 1573.1,687.695 1573.66,687.695 1574.22,687.695 1574.78,687.695 1575.34,687.695 1575.9,687.695 1576.46,687.695 1577.02,687.695 1577.58,687.695 1578.14,687.695 1578.7,687.695 1579.26,687.695 1579.82,687.695 1580.37,687.695 1580.93,687.695 1581.49,687.695 1582.05,687.695 1582.61,687.695 1583.17,687.695 1583.73,687.695 1584.29,687.695 1584.85,687.695 1585.41,687.695 1585.97,687.695 1586.53,687.695 1587.09,687.695 1587.65,687.695 1588.2,687.695 1588.76,687.695 1589.32,687.695 1589.88,687.695 1590.44,687.695 1591,687.695 1591.56,687.695 1592.12,687.695 1592.68,687.695 1593.24,687.695 1593.8,687.695 1594.36,687.695 1594.92,687.695 1595.47,687.695 1596.03,687.695 1596.59,687.695 1597.15,687.695 1597.71,687.695 1598.27,687.695 1598.83,687.695 1599.39,687.695 1599.95,687.695 1600.51,687.695 1601.07,687.695 1601.63,687.695 1602.19,687.695 1602.74,687.695 1603.3,687.695 1603.86,687.695 1604.42,687.695 1604.98,687.695 1605.54,687.695 1606.1,687.695 1606.66,687.695 1607.22,687.695 1607.78,687.695 1608.34,687.695 1608.9,687.695 1609.46,687.695 1610.02,687.695 1610.57,687.695 1611.13,687.695 1611.69,687.695 1612.25,687.695 1612.81,687.695 1613.37,687.695 1613.93,687.695 1614.49,687.695 1615.05,687.695 1615.61,687.695 1616.17,687.695 1616.73,687.695 1617.29,687.695 1617.84,687.695 1618.4,687.695 1618.96,687.695 1619.52,687.695 1620.08,687.695 1620.64,687.695 1621.2,687.695 1621.76,687.695 1622.32,687.695 1622.88,687.695 1623.44,687.695 1624,687.695 1624.56,687.695 1625.11,687.695 1625.67,687.695 1626.23,687.695 1626.79,687.695 1627.35,687.695 1627.91,687.695 1628.47,687.695 1629.03,687.695 1629.59,687.695 1630.15,687.695 1630.71,687.695 1631.27,687.695 1631.83,687.695 1632.39,687.695 1632.94,687.695 1633.5,687.695 1634.06,687.695 1634.62,687.695 1635.18,687.695 1635.74,687.695 1636.3,687.695 1636.86,687.695 1637.42,687.695 1637.98,687.695 1638.54,687.695 1639.1,687.695 1639.66,687.695 1640.21,687.695 1640.77,687.695 1641.33,687.695 1641.89,687.695 1642.45,687.695 1643.01,687.695 1643.57,687.695 1644.13,687.695 1644.69,687.695 1645.25,687.695 1645.81,687.695 1646.37,687.695 1646.93,687.695 1647.48,687.695 1648.04,687.695 1648.6,687.695 1649.16,687.695 1649.72,687.695 1650.28,687.695 1650.84,687.695 1651.4,687.695 1651.96,687.695 1652.52,687.695 1653.08,687.695 1653.64,687.695 1654.2,687.695 1654.76,687.695 1655.31,687.695 1655.87,687.695 1656.43,687.695 1656.99,687.695 1657.55,687.695 1658.11,687.695 1658.67,687.695 1659.23,687.695 1659.79,687.695 1660.35,687.695 1660.91,687.695 1661.47,687.695 1662.03,687.695 1662.58,687.695 1663.14,687.695 1663.7,687.695 1664.26,687.695 1664.82,687.695 1665.38,687.695 1665.94,687.695 1666.5,687.695 1667.06,687.695 1667.62,687.695 1668.18,687.695 1668.74,687.695 1669.3,687.695 1669.85,687.695 1670.41,687.695 1670.97,687.695 1671.53,687.695 1672.09,687.695 1672.65,687.695 1673.21,687.695 1673.77,687.695 1674.33,687.695 1674.89,687.695 1675.45,687.695 1676.01,687.695 1676.57,687.695 1677.13,687.695 1677.68,687.695 1678.24,687.695 1678.8,687.695 1679.36,687.695 1679.92,687.695 1680.48,687.695 1681.04,687.695 1681.6,687.695 1682.16,687.695 1682.72,687.695 1683.28,687.695 1683.84,687.695 1684.4,687.695 1684.95,687.695 1685.51,687.695 1686.07,687.695 1686.63,687.695 1687.19,687.695 1687.75,687.695 1688.31,687.695 1688.87,687.695 1689.43,687.695 1689.99,687.695 1690.55,687.695 1691.11,687.695 1691.67,687.695 1692.23,687.695 1692.78,687.695 1693.34,687.695 1693.9,687.695 1694.46,687.695 1695.02,687.695 1695.58,687.695 1696.14,687.695 1696.7,687.695 1697.26,687.695 1697.82,687.695 1698.38,687.695 1698.94,687.695 1699.5,687.695 1700.05,687.695 1700.61,687.695 1701.17,687.695 1701.73,687.695 1702.29,687.695 1702.85,687.695 1703.41,687.695 1703.97,687.695 1704.53,687.695 1705.09,687.695 1705.65,687.695 1706.21,687.695 1706.77,687.695 1707.32,687.695 1707.88,687.695 1708.44,687.695 1709,687.695 1709.56,687.695 1710.12,687.695 1710.68,687.695 1711.24,687.695 1711.8,687.695 1712.36,687.695 1712.92,687.695 1713.48,687.695 1714.04,687.695 1714.6,687.695 1715.15,687.695 1715.71,687.695 1716.27,687.695 1716.83,687.695 1717.39,687.695 1717.95,687.695 1718.51,687.695 1719.07,687.695 1719.63,687.695 1720.19,687.695 1720.75,687.695 1721.31,687.695 1721.87,687.695 1722.42,687.695 1722.98,687.695 1723.54,687.695 1724.1,687.695 1724.66,687.695 1725.22,687.695 1725.78,687.695 1726.34,687.695 1726.9,687.695 1727.46,687.695 1728.02,687.695 1728.58,687.695 1729.14,687.695 1729.69,687.695 1730.25,687.695 1730.81,687.695 1731.37,687.695 1731.93,687.695 1732.49,687.695 1733.05,687.695 1733.61,687.695 1734.17,687.695 1734.73,687.695 1735.29,687.695 1735.85,687.695 1736.41,687.695 1736.97,687.695 1737.52,687.695 1738.08,687.695 1738.64,687.695 1739.2,687.695 1739.76,687.695 1740.32,687.695 1740.88,687.695 1741.44,687.695 1742,687.695 1742.56,687.695 1743.12,687.695 1743.68,687.695 1744.24,687.695 1744.79,687.695 1745.35,687.695 1745.91,687.695 1746.47,687.695 1747.03,687.695 1747.59,687.695 1748.15,687.695 1748.71,687.695 1749.27,687.695 1749.83,687.695 1750.39,687.695 1750.95,687.695 1751.51,687.695 1752.06,687.695 1752.62,687.695 1753.18,687.695 1753.74,687.695 1754.3,687.695 1754.86,687.695 1755.42,687.695 1755.98,687.695 1756.54,687.695 1757.1,687.695 1757.66,687.695 1758.22,687.695 1758.78,687.695 1759.34,687.695 1759.89,687.695 1760.45,687.695 1761.01,687.695 1761.57,687.695 1762.13,687.695 1762.69,687.695 1763.25,687.695 1763.81,687.695 1764.37,687.695 1764.93,687.695 1765.49,687.695 1766.05,687.695 1766.61,687.695 1767.16,687.695 1767.72,687.695 1768.28,687.695 1768.84,687.695 1769.4,687.695 1769.96,687.695 1770.52,687.695 1771.08,687.695 1771.64,687.695 1772.2,687.695 1772.76,687.695 1773.32,687.695 1773.88,687.695 1774.43,687.695 1774.99,687.695 1775.55,687.695 1776.11,687.695 1776.67,687.695 1777.23,687.695 1777.79,687.695 1778.35,687.695 1778.91,687.695 1779.47,687.695 1780.03,687.695 1780.59,687.695 1781.15,687.695 1781.71,687.695 1782.26,687.695 1782.82,687.695 1783.38,687.695 1783.94,687.695 1784.5,687.695 1785.06,687.695 1785.62,687.695 1786.18,687.695 1786.74,687.695 1787.3,687.695 1787.86,687.695 1788.42,687.695 1788.98,687.695 1789.53,687.695 1790.09,687.695 1790.65,687.695 1791.21,687.695 1791.77,687.695 1792.33,687.695 1792.89,687.695 1793.45,687.695 1794.01,687.695 1794.57,687.695 1795.13,687.695 1795.69,687.695 1796.25,687.695 1796.8,687.695 1797.36,687.695 1797.92,687.695 1798.48,687.695 1799.04,687.695 1799.6,687.695 1800.16,687.695 1800.72,687.695 1801.28,687.695 1801.84,687.695 1802.4,687.695 1802.96,687.695 1803.52,687.695 1804.08,687.695 1804.63,687.695 1805.19,687.695 1805.75,687.695 1806.31,687.695 1806.87,687.695 1807.43,687.695 1807.99,687.695 1808.55,687.695 1809.11,687.695 1809.67,687.695 1810.23,687.695 1810.79,687.695 1811.35,687.695 1811.9,687.695 1812.46,687.695 1813.02,687.695 1813.58,687.695 1814.14,687.695 1814.7,687.695 1815.26,687.695 1815.82,687.695 1816.38,687.695 1816.94,687.695 1817.5,687.695 1818.06,687.695 1818.62,687.695 1819.18,687.695 1819.73,687.695 1820.29,687.695 1820.85,687.695 1821.41,687.695 1821.97,687.695 1822.53,687.695 1823.09,687.695 1823.65,687.695 1824.21,687.695 1824.77,687.695 1825.33,687.695 1825.89,687.695 1826.45,687.695 1827,687.695 1827.56,687.695 1828.12,687.695 1828.68,687.695 1829.24,687.695 1829.8,687.695 1830.36,687.695 1830.92,687.695 1831.48,687.695 1832.04,687.695 1832.6,687.695 1833.16,687.695 1833.72,687.695 1834.27,687.695 1834.83,687.695 1835.39,687.695 1835.95,687.695 1836.51,687.695 1837.07,687.695 1837.63,687.695 1838.19,687.695 \"/>\n<path clip-path=\"url(#clip793)\" d=\"M720.247 684.138 L720.806 684.138 L721.365 684.138 L721.924 684.138 L722.484 684.138 L723.043 684.138 L723.602 684.138 L724.161 684.138 L724.721 684.138 L725.28 684.138 L725.839 684.138 L726.398 684.138 L726.958 684.138 L727.517 684.138 L728.076 684.138 L728.635 684.138 L729.195 684.138 L729.754 684.138 L730.313 684.138 L730.872 684.138 L731.432 684.138 L731.991 684.138 L732.55 684.138 L733.109 684.138 L733.669 684.138 L734.228 684.138 L734.787 684.138 L735.346 684.138 L735.906 684.138 L736.465 684.138 L737.024 684.138 L737.583 684.138 L738.143 684.138 L738.702 684.138 L739.261 684.138 L739.82 684.138 L740.38 684.138 L740.939 684.138 L741.498 684.138 L742.057 684.138 L742.617 684.138 L743.176 684.138 L743.735 684.138 L744.294 684.138 L744.854 684.138 L745.413 684.138 L745.972 684.138 L746.531 684.138 L747.091 684.138 L747.65 684.138 L748.209 684.138 L748.768 684.138 L749.328 684.138 L749.887 684.138 L750.446 684.138 L751.005 684.138 L751.565 684.138 L752.124 684.138 L752.683 684.138 L753.242 684.138 L753.802 684.138 L754.361 684.138 L754.92 684.138 L755.479 684.138 L756.039 684.138 L756.598 684.138 L757.157 684.138 L757.716 684.138 L758.276 684.138 L758.835 684.138 L759.394 684.138 L759.953 684.138 L760.513 684.138 L761.072 684.138 L761.631 684.138 L762.19 684.138 L762.75 684.138 L763.309 684.138 L763.868 684.138 L764.427 684.138 L764.987 684.138 L765.546 684.138 L766.105 684.138 L766.664 684.138 L767.224 684.138 L767.783 684.138 L768.342 684.138 L768.901 684.138 L769.461 684.138 L770.02 684.138 L770.579 684.138 L771.138 684.138 L771.698 684.138 L772.257 684.138 L772.816 684.138 L773.375 684.138 L773.935 684.138 L774.494 684.138 L775.053 684.138 L775.612 684.138 L776.172 684.138 L776.731 684.138 L777.29 684.138 L777.849 684.138 L778.409 684.138 L778.968 684.138 L779.527 684.138 L780.086 684.138 L780.646 684.138 L781.205 684.138 L781.764 684.138 L782.323 684.138 L782.883 684.138 L783.442 684.138 L784.001 684.138 L784.56 684.138 L785.12 684.138 L785.679 684.138 L786.238 684.138 L786.797 684.138 L787.357 684.138 L787.916 684.138 L788.475 684.138 L789.034 684.138 L789.594 684.138 L790.153 684.138 L790.712 684.138 L791.271 684.138 L791.831 684.138 L792.39 684.138 L792.949 684.138 L793.508 684.138 L794.068 684.138 L794.627 684.138 L795.186 684.138 L795.745 684.138 L796.305 684.138 L796.864 684.138 L797.423 684.138 L797.982 684.138 L798.542 684.138 L799.101 684.138 L799.66 684.138 L800.219 684.138 L800.779 684.138 L801.338 684.138 L801.897 684.138 L802.456 684.138 L803.016 684.138 L803.575 684.138 L804.134 684.138 L804.693 684.138 L805.253 684.138 L805.812 684.138 L806.371 684.138 L806.931 684.138 L807.49 684.138 L808.049 684.138 L808.608 684.138 L809.168 684.138 L809.727 684.138 L810.286 684.138 L810.845 684.138 L811.405 684.138 L811.964 684.138 L812.523 684.138 L813.082 684.138 L813.642 684.138 L814.201 684.138 L814.76 684.138 L815.319 684.138 L815.879 684.138 L816.438 684.138 L816.997 684.138 L817.556 684.138 L818.116 684.138 L818.675 684.138 L819.234 684.138 L819.793 684.138 L820.353 684.138 L820.912 684.138 L821.471 684.138 L822.03 684.138 L822.59 684.138 L823.149 684.138 L823.708 684.138 L824.267 684.138 L824.827 684.138 L825.386 684.138 L825.945 684.138 L826.504 684.138 L827.064 684.138 L827.623 684.138 L828.182 684.138 L828.741 684.138 L829.301 684.138 L829.86 684.138 L830.419 684.138 L830.978 684.138 L831.538 684.138 L832.097 684.138 L832.656 684.138 L833.215 684.138 L833.775 684.138 L834.334 684.138 L834.893 684.138 L835.452 684.138 L836.012 684.138 L836.571 684.138 L837.13 684.138 L837.689 684.138 L838.249 684.138 L838.808 684.138 L839.367 684.138 L839.926 684.138 L840.486 684.138 L841.045 684.138 L841.604 684.138 L842.163 684.138 L842.723 684.138 L843.282 684.138 L843.841 684.138 L844.4 684.138 L844.96 684.138 L845.519 684.138 L846.078 684.138 L846.637 684.138 L847.197 684.138 L847.756 684.138 L848.315 684.138 L848.874 684.138 L849.434 684.138 L849.993 684.138 L850.552 684.138 L851.111 684.138 L851.671 684.138 L852.23 684.138 L852.789 684.138 L853.348 684.138 L853.908 684.138 L854.467 684.138 L855.026 684.138 L855.585 684.138 L856.145 684.138 L856.704 684.138 L857.263 684.138 L857.822 684.138 L858.382 684.138 L858.941 684.138 L859.5 684.138 L860.059 684.138 L860.619 684.138 L861.178 684.138 L861.737 684.138 L862.296 684.138 L862.856 684.138 L863.415 684.138 L863.974 684.138 L864.533 684.138 L865.093 684.138 L865.652 684.138 L866.211 684.138 L866.77 684.138 L867.33 684.138 L867.889 684.138 L868.448 684.138 L869.007 684.138 L869.567 684.138 L870.126 684.138 L870.685 684.138 L871.244 684.138 L871.804 684.138 L872.363 684.138 L872.922 684.138 L873.481 684.138 L874.041 684.138 L874.6 684.138 L875.159 684.138 L875.718 684.138 L876.278 684.138 L876.837 684.138 L877.396 684.138 L877.955 684.138 L878.515 684.138 L879.074 684.138 L879.633 684.138 L880.192 684.138 L880.752 684.138 L881.311 684.138 L881.87 684.138 L882.429 684.138 L882.989 684.138 L883.548 684.138 L884.107 684.138 L884.666 684.138 L885.226 684.138 L885.785 684.138 L886.344 684.138 L886.903 684.138 L887.463 684.138 L888.022 684.138 L888.581 684.138 L889.14 684.138 L889.7 684.138 L890.259 684.138 L890.818 684.138 L891.377 684.138 L891.937 684.138 L892.496 684.138 L893.055 684.138 L893.614 684.138 L894.174 684.138 L894.733 684.138 L895.292 684.138 L895.851 684.138 L896.411 684.138 L896.97 684.138 L897.529 684.138 L898.088 684.138 L898.648 684.138 L899.207 684.138 L899.766 684.138 L900.325 684.138 L900.885 684.138 L901.444 684.138 L902.003 684.138 L902.562 684.138 L903.122 684.138 L903.681 684.138 L904.24 684.138 L904.799 684.138 L905.359 684.138 L905.918 684.138 L906.477 684.138 L907.036 684.138 L907.596 684.138 L908.155 684.138 L908.714 684.138 L909.273 684.138 L909.833 684.138 L910.392 684.138 L910.951 684.138 L911.51 684.138 L912.07 684.138 L912.629 684.138 L913.188 684.138 L913.747 684.138 L914.307 684.138 L914.866 684.138 L915.425 684.138 L915.984 684.138 L916.544 684.138 L917.103 684.138 L917.662 684.138 L918.221 684.138 L918.781 684.138 L919.34 684.138 L919.899 684.138 L920.458 684.138 L921.018 684.138 L921.577 684.138 L922.136 684.138 L922.695 684.138 L923.255 684.138 L923.814 684.138 L924.373 684.138 L924.932 684.138 L925.492 684.138 L926.051 684.138 L926.61 684.138 L927.169 684.138 L927.729 684.138 L928.288 684.138 L928.847 684.138 L929.406 684.138 L929.966 684.138 L930.525 684.138 L931.084 684.138 L931.644 684.138 L932.203 684.138 L932.762 684.138 L933.321 684.138 L933.881 684.138 L934.44 684.138 L934.999 684.138 L935.558 684.138 L936.118 684.138 L936.677 684.138 L937.236 684.138 L937.795 684.138 L938.355 684.138 L938.914 684.138 L939.473 684.138 L940.032 684.138 L940.592 684.138 L941.151 684.138 L941.71 684.138 L942.269 684.138 L942.829 684.138 L943.388 684.138 L943.947 684.138 L944.506 684.138 L945.066 684.138 L945.625 684.138 L946.184 684.138 L946.743 684.138 L947.303 684.138 L947.862 684.138 L948.421 684.138 L948.98 684.138 L949.54 684.138 L950.099 684.138 L950.658 684.138 L951.217 684.138 L951.777 684.138 L952.336 684.138 L952.895 684.138 L953.454 684.138 L954.014 684.138 L954.573 684.138 L955.132 684.138 L955.691 684.138 L956.251 684.138 L956.81 684.138 L957.369 684.138 L957.928 684.138 L958.488 684.138 L959.047 684.138 L959.606 684.138 L960.165 684.138 L960.725 684.138 L961.284 684.138 L961.843 684.138 L962.402 684.138 L962.962 684.138 L963.521 684.138 L964.08 684.138 L964.639 684.138 L965.199 684.138 L965.758 684.138 L966.317 684.138 L966.876 684.138 L967.436 684.138 L967.995 684.138 L968.554 684.138 L969.113 684.138 L969.673 684.138 L970.232 684.138 L970.791 684.138 L971.35 684.138 L971.91 684.138 L972.469 684.138 L973.028 684.138 L973.587 684.138 L974.147 684.138 L974.706 684.138 L975.265 684.138 L975.824 684.138 L976.384 684.138 L976.943 684.138 L977.502 684.138 L978.061 684.138 L978.621 684.138 L979.18 684.138 L979.739 684.138 L980.298 684.138 L980.858 684.138 L981.417 684.138 L981.976 684.138 L982.535 684.138 L983.095 684.138 L983.654 684.138 L984.213 684.138 L984.772 684.138 L985.332 684.138 L985.891 684.138 L986.45 684.138 L987.009 684.138 L987.569 684.138 L988.128 684.138 L988.687 684.138 L989.246 684.138 L989.806 684.138 L990.365 684.138 L990.924 684.138 L991.483 684.138 L992.043 684.138 L992.602 684.138 L993.161 684.138 L993.72 684.138 L994.28 684.138 L994.839 684.138 L995.398 684.138 L995.957 684.138 L996.517 684.138 L997.076 684.138 L997.635 684.138 L998.194 684.138 L998.754 684.138 L999.313 684.138 L999.872 684.138 L1000.43 684.138 L1000.99 684.138 L1001.55 684.138 L1002.11 684.138 L1002.67 684.138 L1003.23 684.138 L1003.79 684.138 L1004.35 684.138 L1004.91 684.138 L1005.46 684.138 L1006.02 684.138 L1006.58 684.138 L1007.14 684.138 L1007.7 684.138 L1008.26 684.138 L1008.82 684.138 L1009.38 684.138 L1009.94 684.138 L1010.5 684.138 L1011.06 684.138 L1011.62 684.138 L1012.18 684.138 L1012.73 684.138 L1013.29 684.138 L1013.85 684.138 L1014.41 684.138 L1014.97 684.138 L1015.53 684.138 L1016.09 684.138 L1016.65 684.138 L1017.21 684.138 L1017.77 684.138 L1018.33 684.138 L1018.89 684.138 L1019.45 684.138 L1020.01 684.138 L1020.56 684.138 L1021.12 684.138 L1021.68 684.138 L1022.24 684.138 L1022.8 684.138 L1023.36 684.138 L1023.92 684.138 L1024.48 684.138 L1025.04 684.138 L1025.6 684.138 L1026.16 684.138 L1026.72 684.138 L1027.28 684.138 L1027.83 684.138 L1028.39 684.138 L1028.95 684.138 L1029.51 684.138 L1030.07 684.138 L1030.63 684.138 L1031.19 684.138 L1031.75 684.138 L1032.31 684.138 L1032.87 684.138 L1033.43 684.138 L1033.99 684.138 L1034.55 684.138 L1035.1 684.138 L1035.66 684.138 L1036.22 684.138 L1036.78 684.138 L1037.34 684.138 L1037.9 684.138 L1038.46 684.138 L1039.02 684.138 L1039.58 684.138 L1040.14 684.138 L1040.7 684.138 L1041.26 684.138 L1041.82 684.138 L1042.38 684.138 L1042.93 684.138 L1043.49 684.138 L1044.05 684.138 L1044.61 684.138 L1045.17 684.138 L1045.73 684.138 L1046.29 684.138 L1046.85 684.138 L1047.41 684.138 L1047.97 684.138 L1048.53 684.138 L1049.09 684.138 L1049.65 684.138 L1050.2 684.138 L1050.76 684.138 L1051.32 684.138 L1051.88 684.138 L1052.44 684.138 L1053 684.138 L1053.56 684.138 L1054.12 684.138 L1054.68 684.138 L1055.24 684.138 L1055.8 684.138 L1056.36 684.138 L1056.92 684.138 L1057.48 684.138 L1058.03 684.138 L1058.59 684.138 L1059.15 684.138 L1059.71 684.138 L1060.27 684.138 L1060.83 684.138 L1061.39 684.138 L1061.95 684.138 L1062.51 684.138 L1063.07 684.138 L1063.63 684.138 L1064.19 684.138 L1064.75 684.138 L1065.3 684.138 L1065.86 684.138 L1066.42 684.138 L1066.98 684.138 L1067.54 684.138 L1068.1 684.138 L1068.66 684.138 L1069.22 684.138 L1069.78 684.138 L1070.34 684.138 L1070.9 684.138 L1071.46 684.138 L1072.02 684.138 L1072.57 684.138 L1073.13 684.138 L1073.69 684.138 L1074.25 684.138 L1074.81 684.138 L1075.37 684.138 L1075.93 684.138 L1076.49 684.138 L1077.05 684.138 L1077.61 684.138 L1078.17 684.138 L1078.73 684.138 L1079.29 684.138 L1079.85 684.138 L1080.4 684.138 L1080.96 684.138 L1081.52 684.138 L1082.08 684.138 L1082.64 684.138 L1083.2 684.138 L1083.76 684.138 L1084.32 684.138 L1084.88 684.138 L1085.44 684.138 L1086 684.138 L1086.56 684.138 L1087.12 684.138 L1087.67 684.138 L1088.23 684.138 L1088.79 684.138 L1089.35 684.138 L1089.91 684.138 L1090.47 684.138 L1091.03 684.138 L1091.59 684.138 L1092.15 684.138 L1092.71 684.138 L1093.27 684.138 L1093.83 684.138 L1094.39 684.138 L1094.94 684.138 L1095.5 684.138 L1096.06 684.138 L1096.62 684.138 L1097.18 684.138 L1097.74 684.138 L1098.3 684.138 L1098.86 684.138 L1099.42 684.138 L1099.98 684.138 L1100.54 684.138 L1101.1 684.138 L1101.66 684.138 L1102.22 684.138 L1102.77 684.138 L1103.33 684.138 L1103.89 684.138 L1104.45 684.138 L1105.01 684.138 L1105.57 684.138 L1106.13 684.138 L1106.69 684.138 L1107.25 684.138 L1107.81 684.138 L1108.37 684.138 L1108.93 684.138 L1109.49 684.138 L1110.04 684.138 L1110.6 684.138 L1111.16 684.138 L1111.72 684.138 L1112.28 684.138 L1112.84 684.138 L1113.4 684.138 L1113.96 684.138 L1114.52 684.138 L1115.08 684.138 L1115.64 684.138 L1116.2 684.138 L1116.76 684.138 L1117.31 684.138 L1117.87 684.138 L1118.43 684.138 L1118.99 684.138 L1119.55 684.138 L1120.11 684.138 L1120.67 684.138 L1121.23 684.138 L1121.79 684.138 L1122.35 684.138 L1122.91 684.138 L1123.47 684.138 L1124.03 684.138 L1124.59 684.138 L1125.14 684.138 L1125.7 684.138 L1126.26 684.138 L1126.82 684.138 L1127.38 684.138 L1127.94 684.138 L1128.5 684.138 L1129.06 684.138 L1129.62 684.138 L1130.18 684.138 L1130.74 684.138 L1131.3 684.138 L1131.86 684.138 L1132.41 684.138 L1132.97 684.138 L1133.53 684.138 L1134.09 684.138 L1134.65 684.138 L1135.21 684.138 L1135.77 684.138 L1136.33 684.138 L1136.89 684.138 L1137.45 684.138 L1138.01 684.138 L1138.57 684.138 L1139.13 684.138 L1139.68 684.138 L1140.24 684.138 L1140.8 684.138 L1141.36 684.138 L1141.92 684.138 L1142.48 684.138 L1143.04 684.138 L1143.6 684.138 L1144.16 684.138 L1144.72 684.138 L1145.28 684.138 L1145.84 684.138 L1146.4 684.138 L1146.96 684.138 L1147.51 684.138 L1148.07 684.138 L1148.63 684.138 L1149.19 684.138 L1149.75 684.138 L1150.31 684.138 L1150.87 684.138 L1151.43 684.138 L1151.99 684.138 L1152.55 684.138 L1153.11 684.138 L1153.67 684.138 L1154.23 684.138 L1154.78 684.138 L1155.34 684.138 L1155.9 684.138 L1156.46 684.138 L1157.02 684.138 L1157.58 684.138 L1158.14 684.138 L1158.7 684.138 L1159.26 684.138 L1159.82 684.138 L1160.38 684.138 L1160.94 684.138 L1161.5 684.138 L1162.05 684.138 L1162.61 684.138 L1163.17 684.138 L1163.73 684.138 L1164.29 684.138 L1164.85 684.138 L1165.41 684.138 L1165.97 684.138 L1166.53 684.138 L1167.09 684.138 L1167.65 684.138 L1168.21 684.138 L1168.77 684.138 L1169.33 684.138 L1169.88 684.138 L1170.44 684.138 L1171 684.138 L1171.56 684.138 L1172.12 684.138 L1172.68 684.138 L1173.24 684.138 L1173.8 684.138 L1174.36 684.138 L1174.92 684.138 L1175.48 684.138 L1176.04 684.138 L1176.6 684.138 L1177.15 684.138 L1177.71 684.138 L1178.27 684.138 L1178.83 684.138 L1179.39 684.138 L1179.95 684.138 L1180.51 684.138 L1181.07 684.138 L1181.63 684.138 L1182.19 684.138 L1182.75 684.138 L1183.31 684.138 L1183.87 684.138 L1184.43 684.138 L1184.98 684.138 L1185.54 684.138 L1186.1 684.138 L1186.66 684.138 L1187.22 684.138 L1187.78 684.138 L1188.34 684.138 L1188.9 684.138 L1189.46 684.138 L1190.02 684.138 L1190.58 684.138 L1191.14 684.138 L1191.7 684.138 L1192.25 684.138 L1192.81 684.138 L1193.37 684.138 L1193.93 684.138 L1194.49 684.138 L1195.05 684.138 L1195.61 684.138 L1196.17 684.138 L1196.73 684.138 L1197.29 684.138 L1197.85 684.138 L1198.41 684.138 L1198.97 684.138 L1199.52 684.138 L1200.08 684.138 L1200.64 684.138 L1201.2 684.138 L1201.76 684.138 L1202.32 684.138 L1202.88 684.138 L1203.44 684.138 L1204 684.138 L1204.56 684.138 L1205.12 684.138 L1205.68 684.138 L1206.24 684.138 L1206.8 684.138 L1207.35 684.138 L1207.91 684.138 L1208.47 684.138 L1209.03 684.138 L1209.59 684.138 L1210.15 684.138 L1210.71 684.138 L1211.27 684.138 L1211.83 684.138 L1212.39 684.138 L1212.95 684.138 L1213.51 684.138 L1214.07 684.138 L1214.62 684.138 L1215.18 684.138 L1215.74 684.138 L1216.3 684.138 L1216.86 684.138 L1217.42 684.138 L1217.98 684.138 L1218.54 684.138 L1219.1 684.138 L1219.66 684.138 L1220.22 684.138 L1220.78 684.138 L1221.34 684.138 L1221.89 684.138 L1222.45 684.138 L1223.01 684.138 L1223.57 684.138 L1224.13 684.138 L1224.69 684.138 L1225.25 684.138 L1225.81 684.138 L1226.37 684.138 L1226.93 684.138 L1227.49 684.138 L1228.05 684.138 L1228.61 684.138 L1229.17 684.138 L1229.72 684.138 L1230.28 684.138 L1230.84 684.138 L1231.4 684.138 L1231.96 684.138 L1232.52 684.138 L1233.08 684.138 L1233.64 684.138 L1234.2 684.138 L1234.76 684.138 L1235.32 684.138 L1235.88 684.138 L1236.44 684.138 L1236.99 684.138 L1237.55 684.138 L1238.11 684.138 L1238.67 684.138 L1239.23 684.138 L1239.79 684.138 L1240.35 684.138 L1240.91 684.138 L1241.47 684.138 L1242.03 684.138 L1242.59 684.138 L1243.15 684.138 L1243.71 684.138 L1244.26 684.138 L1244.82 684.138 L1245.38 684.138 L1245.94 684.138 L1246.5 684.138 L1247.06 684.138 L1247.62 684.138 L1248.18 684.138 L1248.74 684.138 L1249.3 684.138 L1249.86 684.138 L1250.42 684.138 L1250.98 684.138 L1251.54 684.138 L1252.09 684.138 L1252.65 684.138 L1253.21 684.138 L1253.77 684.138 L1254.33 684.138 L1254.89 684.138 L1255.45 684.138 L1256.01 684.138 L1256.57 684.138 L1257.13 684.138 L1257.69 684.138 L1258.25 684.138 L1258.81 684.138 L1259.36 684.138 L1259.92 684.138 L1260.48 684.138 L1261.04 684.138 L1261.6 684.138 L1262.16 684.138 L1262.72 684.138 L1263.28 684.138 L1263.84 684.138 L1264.4 684.138 L1264.96 684.138 L1265.52 684.138 L1266.08 684.138 L1266.63 684.138 L1267.19 684.138 L1267.75 684.138 L1268.31 684.138 L1268.87 684.138 L1269.43 684.138 L1269.99 684.138 L1270.55 684.138 L1271.11 684.138 L1271.67 684.138 L1272.23 684.138 L1272.79 684.138 L1273.35 684.138 L1273.91 684.138 L1274.46 684.138 L1275.02 684.138 L1275.58 684.138 L1276.14 684.138 L1276.7 684.138 L1277.26 684.138 L1277.82 684.138 L1278.38 684.138 L1278.94 684.138 L1279.5 684.138 L1280.06 684.138 L1280.62 684.138 L1281.18 684.138 L1281.73 684.138 L1282.29 684.138 L1282.85 684.138 L1283.41 684.138 L1283.97 684.138 L1284.53 684.138 L1285.09 684.138 L1285.65 684.138 L1286.21 684.138 L1286.77 684.138 L1287.33 684.138 L1287.89 684.138 L1288.45 684.138 L1289 684.138 L1289.56 684.138 L1290.12 684.138 L1290.68 684.138 L1291.24 684.138 L1291.8 684.138 L1292.36 684.138 L1292.92 684.138 L1293.48 684.138 L1294.04 684.138 L1294.6 684.138 L1295.16 684.138 L1295.72 684.138 L1296.28 684.138 L1296.83 684.138 L1297.39 684.138 L1297.95 684.138 L1298.51 684.138 L1299.07 684.138 L1299.63 684.138 L1300.19 684.138 L1300.75 684.138 L1301.31 684.138 L1301.87 684.138 L1302.43 684.138 L1302.99 684.138 L1303.55 684.138 L1304.1 684.138 L1304.66 684.138 L1305.22 684.138 L1305.78 684.138 L1306.34 684.138 L1306.9 684.138 L1307.46 684.138 L1308.02 684.138 L1308.58 684.138 L1309.14 684.138 L1309.7 684.138 L1310.26 684.138 L1310.82 684.138 L1311.38 684.138 L1311.93 684.138 L1312.49 684.138 L1313.05 684.138 L1313.61 684.138 L1314.17 684.138 L1314.73 684.138 L1315.29 684.138 L1315.85 684.138 L1316.41 684.138 L1316.97 684.138 L1317.53 684.138 L1318.09 684.138 L1318.65 684.138 L1319.2 684.138 L1319.76 684.138 L1320.32 684.138 L1320.88 684.138 L1321.44 684.138 L1322 684.138 L1322.56 684.138 L1323.12 684.138 L1323.68 684.138 L1324.24 684.138 L1324.8 684.138 L1325.36 684.138 L1325.92 684.138 L1326.47 684.138 L1327.03 684.138 L1327.59 684.138 L1328.15 684.138 L1328.71 684.138 L1329.27 684.138 L1329.83 684.138 L1330.39 684.138 L1330.95 684.138 L1331.51 684.138 L1332.07 684.138 L1332.63 684.138 L1333.19 684.138 L1333.75 684.138 L1334.3 684.138 L1334.86 684.138 L1335.42 684.138 L1335.98 684.138 L1336.54 684.138 L1337.1 684.138 L1337.66 684.138 L1338.22 684.138 L1338.78 684.138 L1339.34 684.138 L1339.9 684.138 L1340.46 684.138 L1341.02 684.138 L1341.57 684.138 L1342.13 684.138 L1342.69 684.138 L1343.25 684.138 L1343.81 684.138 L1344.37 684.138 L1344.93 684.138 L1345.49 684.138 L1346.05 684.138 L1346.61 684.138 L1347.17 684.138 L1347.73 684.138 L1348.29 684.138 L1348.84 684.138 L1349.4 684.138 L1349.96 684.138 L1350.52 684.138 L1351.08 684.138 L1351.64 684.138 L1352.2 684.138 L1352.76 684.138 L1353.32 684.138 L1353.88 684.138 L1354.44 684.138 L1355 684.138 L1355.56 684.138 L1356.12 684.138 L1356.67 684.138 L1357.23 684.138 L1357.79 684.138 L1358.35 684.138 L1358.91 684.138 L1359.47 684.138 L1360.03 684.138 L1360.59 684.138 L1361.15 684.138 L1361.71 684.138 L1362.27 684.138 L1362.83 684.138 L1363.39 684.138 L1363.94 684.138 L1364.5 684.138 L1365.06 684.138 L1365.62 684.138 L1366.18 684.138 L1366.74 684.138 L1367.3 684.138 L1367.86 684.138 L1368.42 684.138 L1368.98 684.138 L1369.54 684.138 L1370.1 684.138 L1370.66 684.138 L1371.21 684.138 L1371.77 684.138 L1372.33 684.138 L1372.89 684.138 L1373.45 684.138 L1374.01 684.138 L1374.57 684.138 L1375.13 684.138 L1375.69 684.138 L1376.25 684.138 L1376.81 684.138 L1377.37 684.138 L1377.93 684.138 L1378.49 684.138 L1379.04 684.138 L1379.6 684.138 L1380.16 684.138 L1380.72 684.138 L1381.28 684.138 L1381.84 684.138 L1382.4 684.138 L1382.96 684.138 L1383.52 684.138 L1384.08 684.138 L1384.64 684.138 L1385.2 684.138 L1385.76 684.138 L1386.31 684.138 L1386.87 684.138 L1387.43 684.138 L1387.99 684.138 L1388.55 684.138 L1389.11 684.138 L1389.67 684.138 L1390.23 684.138 L1390.79 684.138 L1391.35 684.138 L1391.91 684.138 L1392.47 684.138 L1393.03 684.138 L1393.58 684.138 L1394.14 684.138 L1394.7 684.138 L1395.26 684.138 L1395.82 684.138 L1396.38 684.138 L1396.94 684.138 L1397.5 684.138 L1398.06 684.138 L1398.62 684.138 L1399.18 684.138 L1399.74 684.138 L1400.3 684.138 L1400.86 684.138 L1401.41 684.138 L1401.97 684.138 L1402.53 684.138 L1403.09 684.138 L1403.65 684.138 L1404.21 684.138 L1404.77 684.138 L1405.33 684.138 L1405.89 684.138 L1406.45 684.138 L1407.01 684.138 L1407.57 684.138 L1408.13 684.138 L1408.68 684.138 L1409.24 684.138 L1409.8 684.138 L1410.36 684.138 L1410.92 684.138 L1411.48 684.138 L1412.04 684.138 L1412.6 684.138 L1413.16 684.138 L1413.72 684.138 L1414.28 684.138 L1414.84 684.138 L1415.4 684.138 L1415.95 684.138 L1416.51 684.138 L1417.07 684.138 L1417.63 684.138 L1418.19 684.138 L1418.75 684.138 L1419.31 684.138 L1419.87 684.138 L1420.43 684.138 L1420.99 684.138 L1421.55 684.138 L1422.11 684.138 L1422.67 684.138 L1423.23 684.138 L1423.78 684.138 L1424.34 684.138 L1424.9 684.138 L1425.46 684.138 L1426.02 684.138 L1426.58 684.138 L1427.14 684.138 L1427.7 684.138 L1428.26 684.138 L1428.82 684.138 L1429.38 684.138 L1429.94 684.138 L1430.5 684.138 L1431.05 684.138 L1431.61 684.138 L1432.17 684.138 L1432.73 684.138 L1433.29 684.138 L1433.85 684.138 L1434.41 684.138 L1434.97 684.138 L1435.53 684.138 L1436.09 684.138 L1436.65 684.138 L1437.21 684.138 L1437.77 684.138 L1438.33 684.138 L1438.88 684.138 L1439.44 684.138 L1440 684.138 L1440.56 684.138 L1441.12 684.138 L1441.68 684.138 L1442.24 684.138 L1442.8 684.138 L1443.36 684.138 L1443.92 684.138 L1444.48 684.138 L1445.04 684.138 L1445.6 684.138 L1446.15 684.138 L1446.71 684.138 L1447.27 684.138 L1447.83 684.138 L1448.39 684.138 L1448.95 684.138 L1449.51 684.138 L1450.07 684.138 L1450.63 684.138 L1451.19 684.138 L1451.75 684.138 L1452.31 684.138 L1452.87 684.138 L1453.42 684.138 L1453.98 684.138 L1454.54 684.138 L1455.1 684.138 L1455.66 684.138 L1456.22 684.138 L1456.78 684.138 L1457.34 684.138 L1457.9 684.138 L1458.46 684.138 L1459.02 684.138 L1459.58 684.138 L1460.14 684.138 L1460.7 684.138 L1461.25 684.138 L1461.81 684.138 L1462.37 684.138 L1462.93 684.138 L1463.49 684.138 L1464.05 684.138 L1464.61 684.138 L1465.17 684.138 L1465.73 684.138 L1466.29 684.138 L1466.85 684.138 L1467.41 684.138 L1467.97 684.138 L1468.52 684.138 L1469.08 684.138 L1469.64 684.138 L1470.2 684.138 L1470.76 684.138 L1471.32 684.138 L1471.88 684.138 L1472.44 684.138 L1473 684.138 L1473.56 684.138 L1474.12 684.138 L1474.68 684.138 L1475.24 684.138 L1475.79 684.138 L1476.35 684.138 L1476.91 684.138 L1477.47 684.138 L1478.03 684.138 L1478.59 684.138 L1479.15 684.138 L1479.71 684.138 L1480.27 684.138 L1480.83 684.138 L1481.39 684.138 L1481.95 684.138 L1482.51 684.138 L1483.07 684.138 L1483.62 684.138 L1484.18 684.138 L1484.74 684.138 L1485.3 684.138 L1485.86 684.138 L1486.42 684.138 L1486.98 684.138 L1487.54 684.138 L1488.1 684.138 L1488.66 684.138 L1489.22 684.138 L1489.78 684.138 L1490.34 684.138 L1490.89 684.138 L1491.45 684.138 L1492.01 684.138 L1492.57 684.138 L1493.13 684.138 L1493.69 684.138 L1494.25 684.138 L1494.81 684.138 L1495.37 684.138 L1495.93 684.138 L1496.49 684.138 L1497.05 684.138 L1497.61 684.138 L1498.16 684.138 L1498.72 684.138 L1499.28 684.138 L1499.84 684.138 L1500.4 684.138 L1500.96 684.138 L1501.52 684.138 L1502.08 684.138 L1502.64 684.138 L1503.2 684.138 L1503.76 684.138 L1504.32 684.138 L1504.88 684.138 L1505.44 684.138 L1505.99 684.138 L1506.55 684.138 L1507.11 684.138 L1507.67 684.138 L1508.23 684.138 L1508.79 684.138 L1509.35 684.138 L1509.91 684.138 L1510.47 684.138 L1511.03 684.138 L1511.59 684.138 L1512.15 684.138 L1512.71 684.138 L1513.26 684.138 L1513.82 684.138 L1514.38 684.138 L1514.94 684.138 L1515.5 684.138 L1516.06 684.138 L1516.62 684.138 L1517.18 684.138 L1517.74 684.138 L1518.3 684.138 L1518.86 684.138 L1519.42 684.138 L1519.98 684.138 L1520.53 684.138 L1521.09 684.138 L1521.65 684.138 L1522.21 684.138 L1522.77 684.138 L1523.33 684.138 L1523.89 684.138 L1524.45 684.138 L1525.01 684.138 L1525.57 684.138 L1526.13 684.138 L1526.69 684.138 L1527.25 684.138 L1527.81 684.138 L1528.36 684.138 L1528.92 684.138 L1529.48 684.138 L1530.04 684.138 L1530.6 684.138 L1531.16 684.138 L1531.72 684.138 L1532.28 684.138 L1532.84 684.138 L1533.4 684.138 L1533.96 684.138 L1534.52 684.138 L1535.08 684.138 L1535.63 684.138 L1536.19 684.138 L1536.75 684.138 L1537.31 684.138 L1537.87 684.138 L1538.43 684.138 L1538.99 684.138 L1539.55 684.138 L1540.11 684.138 L1540.67 684.138 L1541.23 684.138 L1541.79 684.138 L1542.35 684.138 L1542.9 684.138 L1543.46 684.138 L1544.02 684.138 L1544.58 684.138 L1545.14 684.138 L1545.7 684.138 L1546.26 684.138 L1546.82 684.138 L1547.38 684.138 L1547.94 684.138 L1548.5 684.138 L1549.06 684.138 L1549.62 684.138 L1550.18 684.138 L1550.73 684.138 L1551.29 684.138 L1551.85 684.138 L1552.41 684.138 L1552.97 684.138 L1553.53 684.138 L1554.09 684.138 L1554.65 684.138 L1555.21 684.138 L1555.77 684.138 L1556.33 684.138 L1556.89 684.138 L1557.45 684.138 L1558 684.138 L1558.56 684.138 L1559.12 684.138 L1559.68 684.138 L1560.24 684.138 L1560.8 684.138 L1561.36 684.138 L1561.92 684.138 L1562.48 684.138 L1563.04 684.138 L1563.6 684.138 L1564.16 684.138 L1564.72 684.138 L1565.28 684.138 L1565.83 684.138 L1566.39 684.138 L1566.95 684.138 L1567.51 684.138 L1568.07 684.138 L1568.63 684.138 L1569.19 684.138 L1569.75 684.138 L1570.31 684.138 L1570.87 684.138 L1571.43 684.138 L1571.99 684.138 L1572.55 684.138 L1573.1 684.138 L1573.66 684.138 L1574.22 684.138 L1574.78 684.138 L1575.34 684.138 L1575.9 684.138 L1576.46 684.138 L1577.02 684.138 L1577.58 684.138 L1578.14 684.138 L1578.7 684.138 L1579.26 684.138 L1579.82 684.138 L1580.37 684.138 L1580.93 684.138 L1581.49 684.138 L1582.05 684.138 L1582.61 684.138 L1583.17 684.138 L1583.73 684.138 L1584.29 684.138 L1584.85 684.138 L1585.41 684.138 L1585.97 684.138 L1586.53 684.138 L1587.09 684.138 L1587.65 684.138 L1588.2 684.138 L1588.76 684.138 L1589.32 684.138 L1589.88 684.138 L1590.44 684.138 L1591 684.138 L1591.56 684.138 L1592.12 684.138 L1592.68 684.138 L1593.24 684.138 L1593.8 684.138 L1594.36 684.138 L1594.92 684.138 L1595.47 684.138 L1596.03 684.138 L1596.59 684.138 L1597.15 684.138 L1597.71 684.138 L1598.27 684.138 L1598.83 684.138 L1599.39 684.138 L1599.95 684.138 L1600.51 684.138 L1601.07 684.138 L1601.63 684.138 L1602.19 684.138 L1602.74 684.138 L1603.3 684.138 L1603.86 684.138 L1604.42 684.138 L1604.98 684.138 L1605.54 684.138 L1606.1 684.138 L1606.66 684.138 L1607.22 684.138 L1607.78 684.138 L1608.34 684.138 L1608.9 684.138 L1609.46 684.138 L1610.02 684.138 L1610.57 684.138 L1611.13 684.138 L1611.69 684.138 L1612.25 684.138 L1612.81 684.138 L1613.37 684.138 L1613.93 684.138 L1614.49 684.138 L1615.05 684.138 L1615.61 684.138 L1616.17 684.138 L1616.73 684.138 L1617.29 684.138 L1617.84 684.138 L1618.4 684.138 L1618.96 684.138 L1619.52 684.138 L1620.08 684.138 L1620.64 684.138 L1621.2 684.138 L1621.76 684.138 L1622.32 684.138 L1622.88 684.138 L1623.44 684.138 L1624 684.138 L1624.56 684.138 L1625.11 684.138 L1625.67 684.138 L1626.23 684.138 L1626.79 684.138 L1627.35 684.138 L1627.91 684.138 L1628.47 684.138 L1629.03 684.138 L1629.59 684.138 L1630.15 684.138 L1630.71 684.138 L1631.27 684.138 L1631.83 684.138 L1632.39 684.138 L1632.94 684.138 L1633.5 684.138 L1634.06 684.138 L1634.62 684.138 L1635.18 684.138 L1635.74 684.138 L1636.3 684.138 L1636.86 684.138 L1637.42 684.138 L1637.98 684.138 L1638.54 684.138 L1639.1 684.138 L1639.66 684.138 L1640.21 684.138 L1640.77 684.138 L1641.33 684.138 L1641.89 684.138 L1642.45 684.138 L1643.01 684.138 L1643.57 684.138 L1644.13 684.138 L1644.69 684.138 L1645.25 684.138 L1645.81 684.138 L1646.37 684.138 L1646.93 684.138 L1647.48 684.138 L1648.04 684.138 L1648.6 684.138 L1649.16 684.138 L1649.72 684.138 L1650.28 684.138 L1650.84 684.138 L1651.4 684.138 L1651.96 684.138 L1652.52 684.138 L1653.08 684.138 L1653.64 684.138 L1654.2 684.138 L1654.76 684.138 L1655.31 684.138 L1655.87 684.138 L1656.43 684.138 L1656.99 684.138 L1657.55 684.138 L1658.11 684.138 L1658.67 684.138 L1659.23 684.138 L1659.79 684.138 L1660.35 684.138 L1660.91 684.138 L1661.47 684.138 L1662.03 684.138 L1662.58 684.138 L1663.14 684.138 L1663.7 684.138 L1664.26 684.138 L1664.82 684.138 L1665.38 684.138 L1665.94 684.138 L1666.5 684.138 L1667.06 684.138 L1667.62 684.138 L1668.18 684.138 L1668.74 684.138 L1669.3 684.138 L1669.85 684.138 L1670.41 684.138 L1670.97 684.138 L1671.53 684.138 L1672.09 684.138 L1672.65 684.138 L1673.21 684.138 L1673.77 684.138 L1674.33 684.138 L1674.89 684.138 L1675.45 684.138 L1676.01 684.138 L1676.57 684.138 L1677.13 684.138 L1677.68 684.138 L1678.24 684.138 L1678.8 684.138 L1679.36 684.138 L1679.92 684.138 L1680.48 684.138 L1681.04 684.138 L1681.6 684.138 L1682.16 684.138 L1682.72 684.138 L1683.28 684.138 L1683.84 684.138 L1684.4 684.138 L1684.95 684.138 L1685.51 684.138 L1686.07 684.138 L1686.63 684.138 L1687.19 684.138 L1687.75 684.138 L1688.31 684.138 L1688.87 684.138 L1689.43 684.138 L1689.99 684.138 L1690.55 684.138 L1691.11 684.138 L1691.67 684.138 L1692.23 684.138 L1692.78 684.138 L1693.34 684.138 L1693.9 684.138 L1694.46 684.138 L1695.02 684.138 L1695.58 684.138 L1696.14 684.138 L1696.7 684.138 L1697.26 684.138 L1697.82 684.138 L1698.38 684.138 L1698.94 684.138 L1699.5 684.138 L1700.05 684.138 L1700.61 684.138 L1701.17 684.138 L1701.73 684.138 L1702.29 684.138 L1702.85 684.138 L1703.41 684.138 L1703.97 684.138 L1704.53 684.138 L1705.09 684.138 L1705.65 684.138 L1706.21 684.138 L1706.77 684.138 L1707.32 684.138 L1707.88 684.138 L1708.44 684.138 L1709 684.138 L1709.56 684.138 L1710.12 684.138 L1710.68 684.138 L1711.24 684.138 L1711.8 684.138 L1712.36 684.138 L1712.92 684.138 L1713.48 684.138 L1714.04 684.138 L1714.6 684.138 L1715.15 684.138 L1715.71 684.138 L1716.27 684.138 L1716.83 684.138 L1717.39 684.138 L1717.95 684.138 L1718.51 684.138 L1719.07 684.138 L1719.63 684.138 L1720.19 684.138 L1720.75 684.138 L1721.31 684.138 L1721.87 684.138 L1722.42 684.138 L1722.98 684.138 L1723.54 684.138 L1724.1 684.138 L1724.66 684.138 L1725.22 684.138 L1725.78 684.138 L1726.34 684.138 L1726.9 684.138 L1727.46 684.138 L1728.02 684.138 L1728.58 684.138 L1729.14 684.138 L1729.69 684.138 L1730.25 684.138 L1730.81 684.138 L1731.37 684.138 L1731.93 684.138 L1732.49 684.138 L1733.05 684.138 L1733.61 684.138 L1734.17 684.138 L1734.73 684.138 L1735.29 684.138 L1735.85 684.138 L1736.41 684.138 L1736.97 684.138 L1737.52 684.138 L1738.08 684.138 L1738.64 684.138 L1739.2 684.138 L1739.76 684.138 L1740.32 684.138 L1740.88 684.138 L1741.44 684.138 L1742 684.138 L1742.56 684.138 L1743.12 684.138 L1743.68 684.138 L1744.24 684.138 L1744.79 684.138 L1745.35 684.138 L1745.91 684.138 L1746.47 684.138 L1747.03 684.138 L1747.59 684.138 L1748.15 684.138 L1748.71 684.138 L1749.27 684.138 L1749.83 684.138 L1750.39 684.138 L1750.95 684.138 L1751.51 684.138 L1752.06 684.138 L1752.62 684.138 L1753.18 684.138 L1753.74 684.138 L1754.3 684.138 L1754.86 684.138 L1755.42 684.138 L1755.98 684.138 L1756.54 684.138 L1757.1 684.138 L1757.66 684.138 L1758.22 684.138 L1758.78 684.138 L1759.34 684.138 L1759.89 684.138 L1760.45 684.138 L1761.01 684.138 L1761.57 684.138 L1762.13 684.138 L1762.69 684.138 L1763.25 684.138 L1763.81 684.138 L1764.37 684.138 L1764.93 684.138 L1765.49 684.138 L1766.05 684.138 L1766.61 684.138 L1767.16 684.138 L1767.72 684.138 L1768.28 684.138 L1768.84 684.138 L1769.4 684.138 L1769.96 684.138 L1770.52 684.138 L1771.08 684.138 L1771.64 684.138 L1772.2 684.138 L1772.76 684.138 L1773.32 684.138 L1773.88 684.138 L1774.43 684.138 L1774.99 684.138 L1775.55 684.138 L1776.11 684.138 L1776.67 684.138 L1777.23 684.138 L1777.79 684.138 L1778.35 684.138 L1778.91 684.138 L1779.47 684.138 L1780.03 684.138 L1780.59 684.138 L1781.15 684.138 L1781.71 684.138 L1782.26 684.138 L1782.82 684.138 L1783.38 684.138 L1783.94 684.138 L1784.5 684.138 L1785.06 684.138 L1785.62 684.138 L1786.18 684.138 L1786.74 684.138 L1787.3 684.138 L1787.86 684.138 L1788.42 684.138 L1788.98 684.138 L1789.53 684.138 L1790.09 684.138 L1790.65 684.138 L1791.21 684.138 L1791.77 684.138 L1792.33 684.138 L1792.89 684.138 L1793.45 684.138 L1794.01 684.138 L1794.57 684.138 L1795.13 684.138 L1795.69 684.138 L1796.25 684.138 L1796.8 684.138 L1797.36 684.138 L1797.92 684.138 L1798.48 684.138 L1799.04 684.138 L1799.6 684.138 L1800.16 684.138 L1800.72 684.138 L1801.28 684.138 L1801.84 684.138 L1802.4 684.138 L1802.96 684.138 L1803.52 684.138 L1804.08 684.138 L1804.63 684.138 L1805.19 684.138 L1805.75 684.138 L1806.31 684.138 L1806.87 684.138 L1807.43 684.138 L1807.99 684.138 L1808.55 684.138 L1809.11 684.138 L1809.67 684.138 L1810.23 684.138 L1810.79 684.138 L1811.35 684.138 L1811.9 684.138 L1812.46 684.138 L1813.02 684.138 L1813.58 684.138 L1814.14 684.138 L1814.7 684.138 L1815.26 684.138 L1815.82 684.138 L1816.38 684.138 L1816.94 684.138 L1817.5 684.138 L1818.06 684.138 L1818.62 684.138 L1819.18 684.138 L1819.73 684.138 L1820.29 684.138 L1820.85 684.138 L1821.41 684.138 L1821.97 684.138 L1822.53 684.138 L1823.09 684.138 L1823.65 684.138 L1824.21 684.138 L1824.77 684.138 L1825.33 684.138 L1825.89 684.138 L1826.45 684.138 L1827 684.138 L1827.56 684.138 L1828.12 684.138 L1828.68 684.138 L1829.24 684.138 L1829.8 684.138 L1830.36 684.138 L1830.92 684.138 L1831.48 684.138 L1832.04 684.138 L1832.6 684.138 L1833.16 684.138 L1833.72 684.138 L1834.27 684.138 L1834.83 684.138 L1835.39 684.138 L1835.95 684.138 L1836.51 684.138 L1837.07 684.138 L1837.63 684.138 L1838.19 684.138 L1838.19 682.297 L1837.63 682.297 L1837.07 682.297 L1836.51 682.297 L1835.95 682.297 L1835.39 682.297 L1834.83 682.297 L1834.27 682.297 L1833.72 682.297 L1833.16 682.297 L1832.6 682.297 L1832.04 682.297 L1831.48 682.297 L1830.92 682.297 L1830.36 682.297 L1829.8 682.297 L1829.24 682.297 L1828.68 682.297 L1828.12 682.297 L1827.56 682.297 L1827 682.297 L1826.45 682.297 L1825.89 682.297 L1825.33 682.297 L1824.77 682.297 L1824.21 682.297 L1823.65 682.297 L1823.09 682.297 L1822.53 682.297 L1821.97 682.297 L1821.41 682.297 L1820.85 682.297 L1820.29 682.297 L1819.73 682.297 L1819.18 682.297 L1818.62 682.297 L1818.06 682.297 L1817.5 682.297 L1816.94 682.297 L1816.38 682.297 L1815.82 682.297 L1815.26 682.297 L1814.7 682.297 L1814.14 682.297 L1813.58 682.297 L1813.02 682.297 L1812.46 682.297 L1811.9 682.297 L1811.35 682.297 L1810.79 682.297 L1810.23 682.297 L1809.67 682.297 L1809.11 682.297 L1808.55 682.297 L1807.99 682.297 L1807.43 682.297 L1806.87 682.297 L1806.31 682.297 L1805.75 682.297 L1805.19 682.297 L1804.63 682.297 L1804.08 682.297 L1803.52 682.297 L1802.96 682.297 L1802.4 682.297 L1801.84 682.297 L1801.28 682.297 L1800.72 682.297 L1800.16 682.297 L1799.6 682.297 L1799.04 682.297 L1798.48 682.297 L1797.92 682.297 L1797.36 682.297 L1796.8 682.297 L1796.25 682.297 L1795.69 682.297 L1795.13 682.297 L1794.57 682.297 L1794.01 682.297 L1793.45 682.297 L1792.89 682.297 L1792.33 682.297 L1791.77 682.297 L1791.21 682.297 L1790.65 682.297 L1790.09 682.297 L1789.53 682.297 L1788.98 682.297 L1788.42 682.297 L1787.86 682.297 L1787.3 682.297 L1786.74 682.297 L1786.18 682.297 L1785.62 682.297 L1785.06 682.297 L1784.5 682.297 L1783.94 682.297 L1783.38 682.297 L1782.82 682.297 L1782.26 682.297 L1781.71 682.297 L1781.15 682.297 L1780.59 682.297 L1780.03 682.297 L1779.47 682.297 L1778.91 682.297 L1778.35 682.297 L1777.79 682.297 L1777.23 682.297 L1776.67 682.297 L1776.11 682.297 L1775.55 682.297 L1774.99 682.297 L1774.43 682.297 L1773.88 682.297 L1773.32 682.297 L1772.76 682.297 L1772.2 682.297 L1771.64 682.297 L1771.08 682.297 L1770.52 682.297 L1769.96 682.297 L1769.4 682.297 L1768.84 682.297 L1768.28 682.297 L1767.72 682.297 L1767.16 682.297 L1766.61 682.297 L1766.05 682.297 L1765.49 682.297 L1764.93 682.297 L1764.37 682.297 L1763.81 682.297 L1763.25 682.297 L1762.69 682.297 L1762.13 682.297 L1761.57 682.297 L1761.01 682.297 L1760.45 682.297 L1759.89 682.297 L1759.34 682.297 L1758.78 682.297 L1758.22 682.297 L1757.66 682.297 L1757.1 682.297 L1756.54 682.297 L1755.98 682.297 L1755.42 682.297 L1754.86 682.297 L1754.3 682.297 L1753.74 682.297 L1753.18 682.297 L1752.62 682.297 L1752.06 682.297 L1751.51 682.297 L1750.95 682.297 L1750.39 682.297 L1749.83 682.297 L1749.27 682.297 L1748.71 682.297 L1748.15 682.297 L1747.59 682.297 L1747.03 682.297 L1746.47 682.297 L1745.91 682.297 L1745.35 682.297 L1744.79 682.297 L1744.24 682.297 L1743.68 682.297 L1743.12 682.297 L1742.56 682.297 L1742 682.297 L1741.44 682.297 L1740.88 682.297 L1740.32 682.297 L1739.76 682.297 L1739.2 682.297 L1738.64 682.297 L1738.08 682.297 L1737.52 682.297 L1736.97 682.297 L1736.41 682.297 L1735.85 682.297 L1735.29 682.297 L1734.73 682.297 L1734.17 682.297 L1733.61 682.297 L1733.05 682.297 L1732.49 682.297 L1731.93 682.297 L1731.37 682.297 L1730.81 682.297 L1730.25 682.297 L1729.69 682.297 L1729.14 682.297 L1728.58 682.297 L1728.02 682.297 L1727.46 682.297 L1726.9 682.297 L1726.34 682.297 L1725.78 682.297 L1725.22 682.297 L1724.66 682.297 L1724.1 682.297 L1723.54 682.297 L1722.98 682.297 L1722.42 682.297 L1721.87 682.297 L1721.31 682.297 L1720.75 682.297 L1720.19 682.297 L1719.63 682.297 L1719.07 682.297 L1718.51 682.297 L1717.95 682.297 L1717.39 682.297 L1716.83 682.297 L1716.27 682.297 L1715.71 682.297 L1715.15 682.297 L1714.6 682.297 L1714.04 682.297 L1713.48 682.297 L1712.92 682.297 L1712.36 682.297 L1711.8 682.297 L1711.24 682.297 L1710.68 682.297 L1710.12 682.297 L1709.56 682.297 L1709 682.297 L1708.44 682.297 L1707.88 682.297 L1707.32 682.297 L1706.77 682.297 L1706.21 682.297 L1705.65 682.297 L1705.09 682.297 L1704.53 682.297 L1703.97 682.297 L1703.41 682.297 L1702.85 682.297 L1702.29 682.297 L1701.73 682.297 L1701.17 682.297 L1700.61 682.297 L1700.05 682.297 L1699.5 682.297 L1698.94 682.297 L1698.38 682.297 L1697.82 682.297 L1697.26 682.297 L1696.7 682.297 L1696.14 682.297 L1695.58 682.297 L1695.02 682.297 L1694.46 682.297 L1693.9 682.297 L1693.34 682.297 L1692.78 682.297 L1692.23 682.297 L1691.67 682.297 L1691.11 682.297 L1690.55 682.297 L1689.99 682.297 L1689.43 682.297 L1688.87 682.297 L1688.31 682.297 L1687.75 682.297 L1687.19 682.297 L1686.63 682.297 L1686.07 682.297 L1685.51 682.297 L1684.95 682.297 L1684.4 682.297 L1683.84 682.297 L1683.28 682.297 L1682.72 682.297 L1682.16 682.297 L1681.6 682.297 L1681.04 682.297 L1680.48 682.297 L1679.92 682.297 L1679.36 682.297 L1678.8 682.297 L1678.24 682.297 L1677.68 682.297 L1677.13 682.297 L1676.57 682.297 L1676.01 682.297 L1675.45 682.297 L1674.89 682.297 L1674.33 682.297 L1673.77 682.297 L1673.21 682.297 L1672.65 682.297 L1672.09 682.297 L1671.53 682.297 L1670.97 682.297 L1670.41 682.297 L1669.85 682.297 L1669.3 682.297 L1668.74 682.297 L1668.18 682.297 L1667.62 682.297 L1667.06 682.297 L1666.5 682.297 L1665.94 682.297 L1665.38 682.297 L1664.82 682.297 L1664.26 682.297 L1663.7 682.297 L1663.14 682.297 L1662.58 682.297 L1662.03 682.297 L1661.47 682.297 L1660.91 682.297 L1660.35 682.297 L1659.79 682.297 L1659.23 682.297 L1658.67 682.297 L1658.11 682.297 L1657.55 682.297 L1656.99 682.297 L1656.43 682.297 L1655.87 682.297 L1655.31 682.297 L1654.76 682.297 L1654.2 682.297 L1653.64 682.297 L1653.08 682.297 L1652.52 682.297 L1651.96 682.297 L1651.4 682.297 L1650.84 682.297 L1650.28 682.297 L1649.72 682.297 L1649.16 682.297 L1648.6 682.297 L1648.04 682.297 L1647.48 682.297 L1646.93 682.297 L1646.37 682.297 L1645.81 682.297 L1645.25 682.297 L1644.69 682.297 L1644.13 682.297 L1643.57 682.297 L1643.01 682.297 L1642.45 682.297 L1641.89 682.297 L1641.33 682.297 L1640.77 682.297 L1640.21 682.297 L1639.66 682.297 L1639.1 682.297 L1638.54 682.297 L1637.98 682.297 L1637.42 682.297 L1636.86 682.297 L1636.3 682.297 L1635.74 682.297 L1635.18 682.297 L1634.62 682.297 L1634.06 682.297 L1633.5 682.297 L1632.94 682.297 L1632.39 682.297 L1631.83 682.297 L1631.27 682.297 L1630.71 682.297 L1630.15 682.297 L1629.59 682.297 L1629.03 682.297 L1628.47 682.297 L1627.91 682.297 L1627.35 682.297 L1626.79 682.297 L1626.23 682.297 L1625.67 682.297 L1625.11 682.297 L1624.56 682.297 L1624 682.297 L1623.44 682.297 L1622.88 682.297 L1622.32 682.297 L1621.76 682.297 L1621.2 682.297 L1620.64 682.297 L1620.08 682.297 L1619.52 682.297 L1618.96 682.297 L1618.4 682.297 L1617.84 682.297 L1617.29 682.297 L1616.73 682.297 L1616.17 682.297 L1615.61 682.297 L1615.05 682.297 L1614.49 682.297 L1613.93 682.297 L1613.37 682.297 L1612.81 682.297 L1612.25 682.297 L1611.69 682.297 L1611.13 682.297 L1610.57 682.297 L1610.02 682.297 L1609.46 682.297 L1608.9 682.297 L1608.34 682.297 L1607.78 682.297 L1607.22 682.297 L1606.66 682.297 L1606.1 682.297 L1605.54 682.297 L1604.98 682.297 L1604.42 682.297 L1603.86 682.297 L1603.3 682.297 L1602.74 682.297 L1602.19 682.297 L1601.63 682.297 L1601.07 682.297 L1600.51 682.297 L1599.95 682.297 L1599.39 682.297 L1598.83 682.297 L1598.27 682.297 L1597.71 682.297 L1597.15 682.297 L1596.59 682.297 L1596.03 682.297 L1595.47 682.297 L1594.92 682.297 L1594.36 682.297 L1593.8 682.297 L1593.24 682.297 L1592.68 682.297 L1592.12 682.297 L1591.56 682.297 L1591 682.297 L1590.44 682.297 L1589.88 682.297 L1589.32 682.297 L1588.76 682.297 L1588.2 682.297 L1587.65 682.297 L1587.09 682.297 L1586.53 682.297 L1585.97 682.297 L1585.41 682.297 L1584.85 682.297 L1584.29 682.297 L1583.73 682.297 L1583.17 682.297 L1582.61 682.297 L1582.05 682.297 L1581.49 682.297 L1580.93 682.297 L1580.37 682.297 L1579.82 682.297 L1579.26 682.297 L1578.7 682.297 L1578.14 682.297 L1577.58 682.297 L1577.02 682.297 L1576.46 682.297 L1575.9 682.297 L1575.34 682.297 L1574.78 682.297 L1574.22 682.297 L1573.66 682.297 L1573.1 682.297 L1572.55 682.297 L1571.99 682.297 L1571.43 682.297 L1570.87 682.297 L1570.31 682.297 L1569.75 682.297 L1569.19 682.297 L1568.63 682.297 L1568.07 682.297 L1567.51 682.297 L1566.95 682.297 L1566.39 682.297 L1565.83 682.297 L1565.28 682.297 L1564.72 682.297 L1564.16 682.297 L1563.6 682.297 L1563.04 682.297 L1562.48 682.297 L1561.92 682.297 L1561.36 682.297 L1560.8 682.297 L1560.24 682.297 L1559.68 682.297 L1559.12 682.297 L1558.56 682.297 L1558 682.297 L1557.45 682.297 L1556.89 682.297 L1556.33 682.297 L1555.77 682.297 L1555.21 682.297 L1554.65 682.297 L1554.09 682.297 L1553.53 682.297 L1552.97 682.297 L1552.41 682.297 L1551.85 682.297 L1551.29 682.297 L1550.73 682.297 L1550.18 682.297 L1549.62 682.297 L1549.06 682.297 L1548.5 682.297 L1547.94 682.297 L1547.38 682.297 L1546.82 682.297 L1546.26 682.297 L1545.7 682.297 L1545.14 682.297 L1544.58 682.297 L1544.02 682.297 L1543.46 682.297 L1542.9 682.297 L1542.35 682.297 L1541.79 682.297 L1541.23 682.297 L1540.67 682.297 L1540.11 682.297 L1539.55 682.297 L1538.99 682.297 L1538.43 682.297 L1537.87 682.297 L1537.31 682.297 L1536.75 682.297 L1536.19 682.297 L1535.63 682.297 L1535.08 682.297 L1534.52 682.297 L1533.96 682.297 L1533.4 682.297 L1532.84 682.297 L1532.28 682.297 L1531.72 682.297 L1531.16 682.297 L1530.6 682.297 L1530.04 682.297 L1529.48 682.297 L1528.92 682.297 L1528.36 682.297 L1527.81 682.297 L1527.25 682.297 L1526.69 682.297 L1526.13 682.297 L1525.57 682.297 L1525.01 682.297 L1524.45 682.297 L1523.89 682.297 L1523.33 682.297 L1522.77 682.297 L1522.21 682.297 L1521.65 682.297 L1521.09 682.297 L1520.53 682.297 L1519.98 682.297 L1519.42 682.297 L1518.86 682.297 L1518.3 682.297 L1517.74 682.297 L1517.18 682.297 L1516.62 682.297 L1516.06 682.297 L1515.5 682.297 L1514.94 682.297 L1514.38 682.297 L1513.82 682.297 L1513.26 682.297 L1512.71 682.297 L1512.15 682.297 L1511.59 682.297 L1511.03 682.297 L1510.47 682.297 L1509.91 682.297 L1509.35 682.297 L1508.79 682.297 L1508.23 682.297 L1507.67 682.297 L1507.11 682.297 L1506.55 682.297 L1505.99 682.297 L1505.44 682.297 L1504.88 682.297 L1504.32 682.297 L1503.76 682.297 L1503.2 682.297 L1502.64 682.297 L1502.08 682.297 L1501.52 682.297 L1500.96 682.297 L1500.4 682.297 L1499.84 682.297 L1499.28 682.297 L1498.72 682.297 L1498.16 682.297 L1497.61 682.297 L1497.05 682.297 L1496.49 682.297 L1495.93 682.297 L1495.37 682.297 L1494.81 682.297 L1494.25 682.297 L1493.69 682.297 L1493.13 682.297 L1492.57 682.297 L1492.01 682.297 L1491.45 682.297 L1490.89 682.297 L1490.34 682.297 L1489.78 682.297 L1489.22 682.297 L1488.66 682.297 L1488.1 682.297 L1487.54 682.297 L1486.98 682.297 L1486.42 682.297 L1485.86 682.297 L1485.3 682.297 L1484.74 682.297 L1484.18 682.297 L1483.62 682.297 L1483.07 682.297 L1482.51 682.297 L1481.95 682.297 L1481.39 682.297 L1480.83 682.297 L1480.27 682.297 L1479.71 682.297 L1479.15 682.297 L1478.59 682.297 L1478.03 682.297 L1477.47 682.297 L1476.91 682.297 L1476.35 682.297 L1475.79 682.297 L1475.24 682.297 L1474.68 682.297 L1474.12 682.297 L1473.56 682.297 L1473 682.297 L1472.44 682.297 L1471.88 682.297 L1471.32 682.297 L1470.76 682.297 L1470.2 682.297 L1469.64 682.297 L1469.08 682.297 L1468.52 682.297 L1467.97 682.297 L1467.41 682.297 L1466.85 682.297 L1466.29 682.297 L1465.73 682.297 L1465.17 682.297 L1464.61 682.297 L1464.05 682.297 L1463.49 682.297 L1462.93 682.297 L1462.37 682.297 L1461.81 682.297 L1461.25 682.297 L1460.7 682.297 L1460.14 682.297 L1459.58 682.297 L1459.02 682.297 L1458.46 682.297 L1457.9 682.297 L1457.34 682.297 L1456.78 682.297 L1456.22 682.297 L1455.66 682.297 L1455.1 682.297 L1454.54 682.297 L1453.98 682.297 L1453.42 682.297 L1452.87 682.297 L1452.31 682.297 L1451.75 682.297 L1451.19 682.297 L1450.63 682.297 L1450.07 682.297 L1449.51 682.297 L1448.95 682.297 L1448.39 682.297 L1447.83 682.297 L1447.27 682.297 L1446.71 682.297 L1446.15 682.297 L1445.6 682.297 L1445.04 682.297 L1444.48 682.297 L1443.92 682.297 L1443.36 682.297 L1442.8 682.297 L1442.24 682.297 L1441.68 682.297 L1441.12 682.297 L1440.56 682.297 L1440 682.297 L1439.44 682.297 L1438.88 682.297 L1438.33 682.297 L1437.77 682.297 L1437.21 682.297 L1436.65 682.297 L1436.09 682.297 L1435.53 682.297 L1434.97 682.297 L1434.41 682.297 L1433.85 682.297 L1433.29 682.297 L1432.73 682.297 L1432.17 682.297 L1431.61 682.297 L1431.05 682.297 L1430.5 682.297 L1429.94 682.297 L1429.38 682.297 L1428.82 682.297 L1428.26 682.297 L1427.7 682.297 L1427.14 682.297 L1426.58 682.297 L1426.02 682.297 L1425.46 682.297 L1424.9 682.297 L1424.34 682.297 L1423.78 682.297 L1423.23 682.297 L1422.67 682.297 L1422.11 682.297 L1421.55 682.297 L1420.99 682.297 L1420.43 682.297 L1419.87 682.297 L1419.31 682.297 L1418.75 682.297 L1418.19 682.297 L1417.63 682.297 L1417.07 682.297 L1416.51 682.297 L1415.95 682.297 L1415.4 682.297 L1414.84 682.297 L1414.28 682.297 L1413.72 682.297 L1413.16 682.297 L1412.6 682.297 L1412.04 682.297 L1411.48 682.297 L1410.92 682.297 L1410.36 682.297 L1409.8 682.297 L1409.24 682.297 L1408.68 682.297 L1408.13 682.297 L1407.57 682.297 L1407.01 682.297 L1406.45 682.297 L1405.89 682.297 L1405.33 682.297 L1404.77 682.297 L1404.21 682.297 L1403.65 682.297 L1403.09 682.297 L1402.53 682.297 L1401.97 682.297 L1401.41 682.297 L1400.86 682.297 L1400.3 682.297 L1399.74 682.297 L1399.18 682.297 L1398.62 682.297 L1398.06 682.297 L1397.5 682.297 L1396.94 682.297 L1396.38 682.297 L1395.82 682.297 L1395.26 682.297 L1394.7 682.297 L1394.14 682.297 L1393.58 682.297 L1393.03 682.297 L1392.47 682.297 L1391.91 682.297 L1391.35 682.297 L1390.79 682.297 L1390.23 682.297 L1389.67 682.297 L1389.11 682.297 L1388.55 682.297 L1387.99 682.297 L1387.43 682.297 L1386.87 682.297 L1386.31 682.297 L1385.76 682.297 L1385.2 682.297 L1384.64 682.297 L1384.08 682.297 L1383.52 682.297 L1382.96 682.297 L1382.4 682.297 L1381.84 682.297 L1381.28 682.297 L1380.72 682.297 L1380.16 682.297 L1379.6 682.297 L1379.04 682.297 L1378.49 682.297 L1377.93 682.297 L1377.37 682.297 L1376.81 682.297 L1376.25 682.297 L1375.69 682.297 L1375.13 682.297 L1374.57 682.297 L1374.01 682.297 L1373.45 682.297 L1372.89 682.297 L1372.33 682.297 L1371.77 682.297 L1371.21 682.297 L1370.66 682.297 L1370.1 682.297 L1369.54 682.297 L1368.98 682.297 L1368.42 682.297 L1367.86 682.297 L1367.3 682.297 L1366.74 682.297 L1366.18 682.297 L1365.62 682.297 L1365.06 682.297 L1364.5 682.297 L1363.94 682.297 L1363.39 682.297 L1362.83 682.297 L1362.27 682.297 L1361.71 682.297 L1361.15 682.297 L1360.59 682.297 L1360.03 682.297 L1359.47 682.297 L1358.91 682.297 L1358.35 682.297 L1357.79 682.297 L1357.23 682.297 L1356.67 682.297 L1356.12 682.297 L1355.56 682.297 L1355 682.297 L1354.44 682.297 L1353.88 682.297 L1353.32 682.297 L1352.76 682.297 L1352.2 682.297 L1351.64 682.297 L1351.08 682.297 L1350.52 682.297 L1349.96 682.297 L1349.4 682.297 L1348.84 682.297 L1348.29 682.297 L1347.73 682.297 L1347.17 682.297 L1346.61 682.297 L1346.05 682.297 L1345.49 682.297 L1344.93 682.297 L1344.37 682.297 L1343.81 682.297 L1343.25 682.297 L1342.69 682.297 L1342.13 682.297 L1341.57 682.297 L1341.02 682.297 L1340.46 682.297 L1339.9 682.297 L1339.34 682.297 L1338.78 682.297 L1338.22 682.297 L1337.66 682.297 L1337.1 682.297 L1336.54 682.297 L1335.98 682.297 L1335.42 682.297 L1334.86 682.297 L1334.3 682.297 L1333.75 682.297 L1333.19 682.297 L1332.63 682.297 L1332.07 682.297 L1331.51 682.297 L1330.95 682.297 L1330.39 682.297 L1329.83 682.297 L1329.27 682.297 L1328.71 682.297 L1328.15 682.297 L1327.59 682.297 L1327.03 682.297 L1326.47 682.297 L1325.92 682.297 L1325.36 682.297 L1324.8 682.297 L1324.24 682.297 L1323.68 682.297 L1323.12 682.297 L1322.56 682.297 L1322 682.297 L1321.44 682.297 L1320.88 682.297 L1320.32 682.297 L1319.76 682.297 L1319.2 682.297 L1318.65 682.297 L1318.09 682.297 L1317.53 682.297 L1316.97 682.297 L1316.41 682.297 L1315.85 682.297 L1315.29 682.297 L1314.73 682.297 L1314.17 682.297 L1313.61 682.297 L1313.05 682.297 L1312.49 682.297 L1311.93 682.297 L1311.38 682.297 L1310.82 682.297 L1310.26 682.297 L1309.7 682.297 L1309.14 682.297 L1308.58 682.297 L1308.02 682.297 L1307.46 682.297 L1306.9 682.297 L1306.34 682.297 L1305.78 682.297 L1305.22 682.297 L1304.66 682.297 L1304.1 682.297 L1303.55 682.297 L1302.99 682.297 L1302.43 682.297 L1301.87 682.297 L1301.31 682.297 L1300.75 682.297 L1300.19 682.297 L1299.63 682.297 L1299.07 682.297 L1298.51 682.297 L1297.95 682.297 L1297.39 682.297 L1296.83 682.297 L1296.28 682.297 L1295.72 682.297 L1295.16 682.297 L1294.6 682.297 L1294.04 682.297 L1293.48 682.297 L1292.92 682.297 L1292.36 682.297 L1291.8 682.297 L1291.24 682.297 L1290.68 682.297 L1290.12 682.297 L1289.56 682.297 L1289 682.297 L1288.45 682.297 L1287.89 682.297 L1287.33 682.297 L1286.77 682.297 L1286.21 682.297 L1285.65 682.297 L1285.09 682.297 L1284.53 682.297 L1283.97 682.297 L1283.41 682.297 L1282.85 682.297 L1282.29 682.297 L1281.73 682.297 L1281.18 682.297 L1280.62 682.297 L1280.06 682.297 L1279.5 682.297 L1278.94 682.297 L1278.38 682.297 L1277.82 682.297 L1277.26 682.297 L1276.7 682.297 L1276.14 682.297 L1275.58 682.297 L1275.02 682.297 L1274.46 682.297 L1273.91 682.297 L1273.35 682.297 L1272.79 682.297 L1272.23 682.297 L1271.67 682.297 L1271.11 682.297 L1270.55 682.297 L1269.99 682.297 L1269.43 682.297 L1268.87 682.297 L1268.31 682.297 L1267.75 682.297 L1267.19 682.297 L1266.63 682.297 L1266.08 682.297 L1265.52 682.297 L1264.96 682.297 L1264.4 682.297 L1263.84 682.297 L1263.28 682.297 L1262.72 682.297 L1262.16 682.297 L1261.6 682.297 L1261.04 682.297 L1260.48 682.297 L1259.92 682.297 L1259.36 682.297 L1258.81 682.297 L1258.25 682.297 L1257.69 682.297 L1257.13 682.297 L1256.57 682.297 L1256.01 682.297 L1255.45 682.297 L1254.89 682.297 L1254.33 682.297 L1253.77 682.297 L1253.21 682.297 L1252.65 682.297 L1252.09 682.297 L1251.54 682.297 L1250.98 682.297 L1250.42 682.297 L1249.86 682.297 L1249.3 682.297 L1248.74 682.297 L1248.18 682.297 L1247.62 682.297 L1247.06 682.297 L1246.5 682.297 L1245.94 682.297 L1245.38 682.297 L1244.82 682.297 L1244.26 682.297 L1243.71 682.297 L1243.15 682.297 L1242.59 682.297 L1242.03 682.297 L1241.47 682.297 L1240.91 682.297 L1240.35 682.297 L1239.79 682.297 L1239.23 682.297 L1238.67 682.297 L1238.11 682.297 L1237.55 682.297 L1236.99 682.297 L1236.44 682.297 L1235.88 682.297 L1235.32 682.297 L1234.76 682.297 L1234.2 682.297 L1233.64 682.297 L1233.08 682.297 L1232.52 682.297 L1231.96 682.297 L1231.4 682.297 L1230.84 682.297 L1230.28 682.297 L1229.72 682.297 L1229.17 682.297 L1228.61 682.297 L1228.05 682.297 L1227.49 682.297 L1226.93 682.297 L1226.37 682.297 L1225.81 682.297 L1225.25 682.297 L1224.69 682.297 L1224.13 682.297 L1223.57 682.297 L1223.01 682.297 L1222.45 682.297 L1221.89 682.297 L1221.34 682.297 L1220.78 682.297 L1220.22 682.297 L1219.66 682.297 L1219.1 682.297 L1218.54 682.297 L1217.98 682.297 L1217.42 682.297 L1216.86 682.297 L1216.3 682.297 L1215.74 682.297 L1215.18 682.297 L1214.62 682.297 L1214.07 682.297 L1213.51 682.297 L1212.95 682.297 L1212.39 682.297 L1211.83 682.297 L1211.27 682.297 L1210.71 682.297 L1210.15 682.297 L1209.59 682.297 L1209.03 682.297 L1208.47 682.297 L1207.91 682.297 L1207.35 682.297 L1206.8 682.297 L1206.24 682.297 L1205.68 682.297 L1205.12 682.297 L1204.56 682.297 L1204 682.297 L1203.44 682.297 L1202.88 682.297 L1202.32 682.297 L1201.76 682.297 L1201.2 682.297 L1200.64 682.297 L1200.08 682.297 L1199.52 682.297 L1198.97 682.297 L1198.41 682.297 L1197.85 682.297 L1197.29 682.297 L1196.73 682.297 L1196.17 682.297 L1195.61 682.297 L1195.05 682.297 L1194.49 682.297 L1193.93 682.297 L1193.37 682.297 L1192.81 682.297 L1192.25 682.297 L1191.7 682.297 L1191.14 682.297 L1190.58 682.297 L1190.02 682.297 L1189.46 682.297 L1188.9 682.297 L1188.34 682.297 L1187.78 682.297 L1187.22 682.297 L1186.66 682.297 L1186.1 682.297 L1185.54 682.297 L1184.98 682.297 L1184.43 682.297 L1183.87 682.297 L1183.31 682.297 L1182.75 682.297 L1182.19 682.297 L1181.63 682.297 L1181.07 682.297 L1180.51 682.297 L1179.95 682.297 L1179.39 682.297 L1178.83 682.297 L1178.27 682.297 L1177.71 682.297 L1177.15 682.297 L1176.6 682.297 L1176.04 682.297 L1175.48 682.297 L1174.92 682.297 L1174.36 682.297 L1173.8 682.297 L1173.24 682.297 L1172.68 682.297 L1172.12 682.297 L1171.56 682.297 L1171 682.297 L1170.44 682.297 L1169.88 682.297 L1169.33 682.297 L1168.77 682.297 L1168.21 682.297 L1167.65 682.297 L1167.09 682.297 L1166.53 682.297 L1165.97 682.297 L1165.41 682.297 L1164.85 682.297 L1164.29 682.297 L1163.73 682.297 L1163.17 682.297 L1162.61 682.297 L1162.05 682.297 L1161.5 682.297 L1160.94 682.297 L1160.38 682.297 L1159.82 682.297 L1159.26 682.297 L1158.7 682.297 L1158.14 682.297 L1157.58 682.297 L1157.02 682.297 L1156.46 682.297 L1155.9 682.297 L1155.34 682.297 L1154.78 682.297 L1154.23 682.297 L1153.67 682.297 L1153.11 682.297 L1152.55 682.297 L1151.99 682.297 L1151.43 682.297 L1150.87 682.297 L1150.31 682.297 L1149.75 682.297 L1149.19 682.297 L1148.63 682.297 L1148.07 682.297 L1147.51 682.297 L1146.96 682.297 L1146.4 682.297 L1145.84 682.297 L1145.28 682.297 L1144.72 682.297 L1144.16 682.297 L1143.6 682.297 L1143.04 682.297 L1142.48 682.297 L1141.92 682.297 L1141.36 682.297 L1140.8 682.297 L1140.24 682.297 L1139.68 682.297 L1139.13 682.297 L1138.57 682.297 L1138.01 682.297 L1137.45 682.297 L1136.89 682.297 L1136.33 682.297 L1135.77 682.297 L1135.21 682.297 L1134.65 682.297 L1134.09 682.297 L1133.53 682.297 L1132.97 682.297 L1132.41 682.297 L1131.86 682.297 L1131.3 682.297 L1130.74 682.297 L1130.18 682.297 L1129.62 682.297 L1129.06 682.297 L1128.5 682.297 L1127.94 682.297 L1127.38 682.297 L1126.82 682.297 L1126.26 682.297 L1125.7 682.297 L1125.14 682.297 L1124.59 682.297 L1124.03 682.297 L1123.47 682.297 L1122.91 682.297 L1122.35 682.297 L1121.79 682.297 L1121.23 682.297 L1120.67 682.297 L1120.11 682.297 L1119.55 682.297 L1118.99 682.297 L1118.43 682.297 L1117.87 682.297 L1117.31 682.297 L1116.76 682.297 L1116.2 682.297 L1115.64 682.297 L1115.08 682.297 L1114.52 682.297 L1113.96 682.297 L1113.4 682.297 L1112.84 682.297 L1112.28 682.297 L1111.72 682.297 L1111.16 682.297 L1110.6 682.297 L1110.04 682.297 L1109.49 682.297 L1108.93 682.297 L1108.37 682.297 L1107.81 682.297 L1107.25 682.297 L1106.69 682.297 L1106.13 682.297 L1105.57 682.297 L1105.01 682.297 L1104.45 682.297 L1103.89 682.297 L1103.33 682.297 L1102.77 682.297 L1102.22 682.297 L1101.66 682.297 L1101.1 682.297 L1100.54 682.297 L1099.98 682.297 L1099.42 682.297 L1098.86 682.297 L1098.3 682.297 L1097.74 682.297 L1097.18 682.297 L1096.62 682.297 L1096.06 682.297 L1095.5 682.297 L1094.94 682.297 L1094.39 682.297 L1093.83 682.297 L1093.27 682.297 L1092.71 682.297 L1092.15 682.297 L1091.59 682.297 L1091.03 682.297 L1090.47 682.297 L1089.91 682.297 L1089.35 682.297 L1088.79 682.297 L1088.23 682.297 L1087.67 682.297 L1087.12 682.297 L1086.56 682.297 L1086 682.297 L1085.44 682.297 L1084.88 682.297 L1084.32 682.297 L1083.76 682.297 L1083.2 682.297 L1082.64 682.297 L1082.08 682.297 L1081.52 682.297 L1080.96 682.297 L1080.4 682.297 L1079.85 682.297 L1079.29 682.297 L1078.73 682.297 L1078.17 682.297 L1077.61 682.297 L1077.05 682.297 L1076.49 682.297 L1075.93 682.297 L1075.37 682.297 L1074.81 682.297 L1074.25 682.297 L1073.69 682.297 L1073.13 682.297 L1072.57 682.297 L1072.02 682.297 L1071.46 682.297 L1070.9 682.297 L1070.34 682.297 L1069.78 682.297 L1069.22 682.297 L1068.66 682.297 L1068.1 682.297 L1067.54 682.297 L1066.98 682.297 L1066.42 682.297 L1065.86 682.297 L1065.3 682.297 L1064.75 682.297 L1064.19 682.297 L1063.63 682.297 L1063.07 682.297 L1062.51 682.297 L1061.95 682.297 L1061.39 682.297 L1060.83 682.297 L1060.27 682.297 L1059.71 682.297 L1059.15 682.297 L1058.59 682.297 L1058.03 682.297 L1057.48 682.297 L1056.92 682.297 L1056.36 682.297 L1055.8 682.297 L1055.24 682.297 L1054.68 682.297 L1054.12 682.297 L1053.56 682.297 L1053 682.297 L1052.44 682.297 L1051.88 682.297 L1051.32 682.297 L1050.76 682.297 L1050.2 682.297 L1049.65 682.297 L1049.09 682.297 L1048.53 682.297 L1047.97 682.297 L1047.41 682.297 L1046.85 682.297 L1046.29 682.297 L1045.73 682.297 L1045.17 682.297 L1044.61 682.297 L1044.05 682.297 L1043.49 682.297 L1042.93 682.297 L1042.38 682.297 L1041.82 682.297 L1041.26 682.297 L1040.7 682.297 L1040.14 682.297 L1039.58 682.297 L1039.02 682.297 L1038.46 682.297 L1037.9 682.297 L1037.34 682.297 L1036.78 682.297 L1036.22 682.297 L1035.66 682.297 L1035.1 682.297 L1034.55 682.297 L1033.99 682.297 L1033.43 682.297 L1032.87 682.297 L1032.31 682.297 L1031.75 682.297 L1031.19 682.297 L1030.63 682.297 L1030.07 682.297 L1029.51 682.297 L1028.95 682.297 L1028.39 682.297 L1027.83 682.297 L1027.28 682.297 L1026.72 682.297 L1026.16 682.297 L1025.6 682.297 L1025.04 682.297 L1024.48 682.297 L1023.92 682.297 L1023.36 682.297 L1022.8 682.297 L1022.24 682.297 L1021.68 682.297 L1021.12 682.297 L1020.56 682.297 L1020.01 682.297 L1019.45 682.297 L1018.89 682.297 L1018.33 682.297 L1017.77 682.297 L1017.21 682.297 L1016.65 682.297 L1016.09 682.297 L1015.53 682.297 L1014.97 682.297 L1014.41 682.297 L1013.85 682.297 L1013.29 682.297 L1012.73 682.297 L1012.18 682.297 L1011.62 682.297 L1011.06 682.297 L1010.5 682.297 L1009.94 682.297 L1009.38 682.297 L1008.82 682.297 L1008.26 682.297 L1007.7 682.297 L1007.14 682.297 L1006.58 682.297 L1006.02 682.297 L1005.46 682.297 L1004.91 682.297 L1004.35 682.297 L1003.79 682.297 L1003.23 682.297 L1002.67 682.297 L1002.11 682.297 L1001.55 682.297 L1000.99 682.297 L1000.43 682.297 L999.872 682.297 L999.313 682.297 L998.754 682.297 L998.194 682.297 L997.635 682.297 L997.076 682.297 L996.517 682.297 L995.957 682.297 L995.398 682.297 L994.839 682.297 L994.28 682.297 L993.72 682.297 L993.161 682.297 L992.602 682.297 L992.043 682.297 L991.483 682.297 L990.924 682.297 L990.365 682.297 L989.806 682.297 L989.246 682.297 L988.687 682.297 L988.128 682.297 L987.569 682.297 L987.009 682.297 L986.45 682.297 L985.891 682.297 L985.332 682.297 L984.772 682.297 L984.213 682.297 L983.654 682.297 L983.095 682.297 L982.535 682.297 L981.976 682.297 L981.417 682.297 L980.858 682.297 L980.298 682.297 L979.739 682.297 L979.18 682.297 L978.621 682.297 L978.061 682.297 L977.502 682.297 L976.943 682.297 L976.384 682.297 L975.824 682.297 L975.265 682.297 L974.706 682.297 L974.147 682.297 L973.587 682.297 L973.028 682.297 L972.469 682.297 L971.91 682.297 L971.35 682.297 L970.791 682.297 L970.232 682.297 L969.673 682.297 L969.113 682.297 L968.554 682.297 L967.995 682.297 L967.436 682.297 L966.876 682.297 L966.317 682.297 L965.758 682.297 L965.199 682.297 L964.639 682.297 L964.08 682.297 L963.521 682.297 L962.962 682.297 L962.402 682.297 L961.843 682.297 L961.284 682.297 L960.725 682.297 L960.165 682.297 L959.606 682.297 L959.047 682.297 L958.488 682.297 L957.928 682.297 L957.369 682.297 L956.81 682.297 L956.251 682.297 L955.691 682.297 L955.132 682.297 L954.573 682.297 L954.014 682.297 L953.454 682.297 L952.895 682.297 L952.336 682.297 L951.777 682.297 L951.217 682.297 L950.658 682.297 L950.099 682.297 L949.54 682.297 L948.98 682.297 L948.421 682.297 L947.862 682.297 L947.303 682.297 L946.743 682.297 L946.184 682.297 L945.625 682.297 L945.066 682.297 L944.506 682.297 L943.947 682.297 L943.388 682.297 L942.829 682.297 L942.269 682.297 L941.71 682.297 L941.151 682.297 L940.592 682.297 L940.032 682.297 L939.473 682.297 L938.914 682.297 L938.355 682.297 L937.795 682.297 L937.236 682.297 L936.677 682.297 L936.118 682.297 L935.558 682.297 L934.999 682.297 L934.44 682.297 L933.881 682.297 L933.321 682.297 L932.762 682.297 L932.203 682.297 L931.644 682.297 L931.084 682.297 L930.525 682.297 L929.966 682.297 L929.406 682.297 L928.847 682.297 L928.288 682.297 L927.729 682.297 L927.169 682.297 L926.61 682.297 L926.051 682.297 L925.492 682.297 L924.932 682.297 L924.373 682.297 L923.814 682.297 L923.255 682.297 L922.695 682.297 L922.136 682.297 L921.577 682.297 L921.018 682.297 L920.458 682.297 L919.899 682.297 L919.34 682.297 L918.781 682.297 L918.221 682.297 L917.662 682.297 L917.103 682.297 L916.544 682.297 L915.984 682.297 L915.425 682.297 L914.866 682.297 L914.307 682.297 L913.747 682.297 L913.188 682.297 L912.629 682.297 L912.07 682.297 L911.51 682.297 L910.951 682.297 L910.392 682.297 L909.833 682.297 L909.273 682.297 L908.714 682.297 L908.155 682.297 L907.596 682.297 L907.036 682.297 L906.477 682.297 L905.918 682.297 L905.359 682.297 L904.799 682.297 L904.24 682.297 L903.681 682.297 L903.122 682.297 L902.562 682.297 L902.003 682.297 L901.444 682.297 L900.885 682.297 L900.325 682.297 L899.766 682.297 L899.207 682.297 L898.648 682.297 L898.088 682.297 L897.529 682.297 L896.97 682.297 L896.411 682.297 L895.851 682.297 L895.292 682.297 L894.733 682.297 L894.174 682.297 L893.614 682.297 L893.055 682.297 L892.496 682.297 L891.937 682.297 L891.377 682.297 L890.818 682.297 L890.259 682.297 L889.7 682.297 L889.14 682.297 L888.581 682.297 L888.022 682.297 L887.463 682.297 L886.903 682.297 L886.344 682.297 L885.785 682.297 L885.226 682.297 L884.666 682.297 L884.107 682.297 L883.548 682.297 L882.989 682.297 L882.429 682.297 L881.87 682.297 L881.311 682.297 L880.752 682.297 L880.192 682.297 L879.633 682.297 L879.074 682.297 L878.515 682.297 L877.955 682.297 L877.396 682.297 L876.837 682.297 L876.278 682.297 L875.718 682.297 L875.159 682.297 L874.6 682.297 L874.041 682.297 L873.481 682.297 L872.922 682.297 L872.363 682.297 L871.804 682.297 L871.244 682.297 L870.685 682.297 L870.126 682.297 L869.567 682.297 L869.007 682.297 L868.448 682.297 L867.889 682.297 L867.33 682.297 L866.77 682.297 L866.211 682.297 L865.652 682.297 L865.093 682.297 L864.533 682.297 L863.974 682.297 L863.415 682.297 L862.856 682.297 L862.296 682.297 L861.737 682.297 L861.178 682.297 L860.619 682.297 L860.059 682.297 L859.5 682.297 L858.941 682.297 L858.382 682.297 L857.822 682.297 L857.263 682.297 L856.704 682.297 L856.145 682.297 L855.585 682.297 L855.026 682.297 L854.467 682.297 L853.908 682.297 L853.348 682.297 L852.789 682.297 L852.23 682.297 L851.671 682.297 L851.111 682.297 L850.552 682.297 L849.993 682.297 L849.434 682.297 L848.874 682.297 L848.315 682.297 L847.756 682.297 L847.197 682.297 L846.637 682.297 L846.078 682.297 L845.519 682.297 L844.96 682.297 L844.4 682.297 L843.841 682.297 L843.282 682.297 L842.723 682.297 L842.163 682.297 L841.604 682.297 L841.045 682.297 L840.486 682.297 L839.926 682.297 L839.367 682.297 L838.808 682.297 L838.249 682.297 L837.689 682.297 L837.13 682.297 L836.571 682.297 L836.012 682.297 L835.452 682.297 L834.893 682.297 L834.334 682.297 L833.775 682.297 L833.215 682.297 L832.656 682.297 L832.097 682.297 L831.538 682.297 L830.978 682.297 L830.419 682.297 L829.86 682.297 L829.301 682.297 L828.741 682.297 L828.182 682.297 L827.623 682.297 L827.064 682.297 L826.504 682.297 L825.945 682.297 L825.386 682.297 L824.827 682.297 L824.267 682.297 L823.708 682.297 L823.149 682.297 L822.59 682.297 L822.03 682.297 L821.471 682.297 L820.912 682.297 L820.353 682.297 L819.793 682.297 L819.234 682.297 L818.675 682.297 L818.116 682.297 L817.556 682.297 L816.997 682.297 L816.438 682.297 L815.879 682.297 L815.319 682.297 L814.76 682.297 L814.201 682.297 L813.642 682.297 L813.082 682.297 L812.523 682.297 L811.964 682.297 L811.405 682.297 L810.845 682.297 L810.286 682.297 L809.727 682.297 L809.168 682.297 L808.608 682.297 L808.049 682.297 L807.49 682.297 L806.931 682.297 L806.371 682.297 L805.812 682.297 L805.253 682.297 L804.693 682.297 L804.134 682.297 L803.575 682.297 L803.016 682.297 L802.456 682.297 L801.897 682.297 L801.338 682.297 L800.779 682.297 L800.219 682.297 L799.66 682.297 L799.101 682.297 L798.542 682.297 L797.982 682.297 L797.423 682.297 L796.864 682.297 L796.305 682.297 L795.745 682.297 L795.186 682.297 L794.627 682.297 L794.068 682.297 L793.508 682.297 L792.949 682.297 L792.39 682.297 L791.831 682.297 L791.271 682.297 L790.712 682.297 L790.153 682.297 L789.594 682.297 L789.034 682.297 L788.475 682.297 L787.916 682.297 L787.357 682.297 L786.797 682.297 L786.238 682.297 L785.679 682.297 L785.12 682.297 L784.56 682.297 L784.001 682.297 L783.442 682.297 L782.883 682.297 L782.323 682.297 L781.764 682.297 L781.205 682.297 L780.646 682.297 L780.086 682.297 L779.527 682.297 L778.968 682.297 L778.409 682.297 L777.849 682.297 L777.29 682.297 L776.731 682.297 L776.172 682.297 L775.612 682.297 L775.053 682.297 L774.494 682.297 L773.935 682.297 L773.375 682.297 L772.816 682.297 L772.257 682.297 L771.698 682.297 L771.138 682.297 L770.579 682.297 L770.02 682.297 L769.461 682.297 L768.901 682.297 L768.342 682.297 L767.783 682.297 L767.224 682.297 L766.664 682.297 L766.105 682.297 L765.546 682.297 L764.987 682.297 L764.427 682.297 L763.868 682.297 L763.309 682.297 L762.75 682.297 L762.19 682.297 L761.631 682.297 L761.072 682.297 L760.513 682.297 L759.953 682.297 L759.394 682.297 L758.835 682.297 L758.276 682.297 L757.716 682.297 L757.157 682.297 L756.598 682.297 L756.039 682.297 L755.479 682.297 L754.92 682.297 L754.361 682.297 L753.802 682.297 L753.242 682.297 L752.683 682.297 L752.124 682.297 L751.565 682.297 L751.005 682.297 L750.446 682.297 L749.887 682.297 L749.328 682.297 L748.768 682.297 L748.209 682.297 L747.65 682.297 L747.091 682.297 L746.531 682.297 L745.972 682.297 L745.413 682.297 L744.854 682.297 L744.294 682.297 L743.735 682.297 L743.176 682.297 L742.617 682.297 L742.057 682.297 L741.498 682.297 L740.939 682.297 L740.38 682.297 L739.82 682.297 L739.261 682.297 L738.702 682.297 L738.143 682.297 L737.583 682.297 L737.024 682.297 L736.465 682.297 L735.906 682.297 L735.346 682.297 L734.787 682.297 L734.228 682.297 L733.669 682.297 L733.109 682.297 L732.55 682.297 L731.991 682.297 L731.432 682.297 L730.872 682.297 L730.313 682.297 L729.754 682.297 L729.195 682.297 L728.635 682.297 L728.076 682.297 L727.517 682.297 L726.958 682.297 L726.398 682.297 L725.839 682.297 L725.28 682.297 L724.721 682.297 L724.161 682.297 L723.602 682.297 L723.043 682.297 L722.484 682.297 L721.924 682.297 L721.365 682.297 L720.806 682.297 L720.247 682.297  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip793)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.214 720.806,683.214 721.365,683.214 721.924,683.214 722.484,683.214 723.043,683.214 723.602,683.214 724.161,683.214 724.721,683.214 725.28,683.214 725.839,683.214 726.398,683.214 726.958,683.214 727.517,683.214 728.076,683.214 728.635,683.214 729.195,683.214 729.754,683.214 730.313,683.214 730.872,683.214 731.432,683.214 731.991,683.214 732.55,683.214 733.109,683.214 733.669,683.214 734.228,683.214 734.787,683.214 735.346,683.214 735.906,683.214 736.465,683.214 737.024,683.214 737.583,683.214 738.143,683.214 738.702,683.214 739.261,683.214 739.82,683.214 740.38,683.214 740.939,683.214 741.498,683.214 742.057,683.214 742.617,683.214 743.176,683.214 743.735,683.214 744.294,683.214 744.854,683.214 745.413,683.214 745.972,683.214 746.531,683.214 747.091,683.214 747.65,683.214 748.209,683.214 748.768,683.214 749.328,683.214 749.887,683.214 750.446,683.214 751.005,683.214 751.565,683.214 752.124,683.214 752.683,683.214 753.242,683.214 753.802,683.214 754.361,683.214 754.92,683.214 755.479,683.214 756.039,683.214 756.598,683.214 757.157,683.214 757.716,683.214 758.276,683.214 758.835,683.214 759.394,683.214 759.953,683.214 760.513,683.214 761.072,683.214 761.631,683.214 762.19,683.214 762.75,683.214 763.309,683.214 763.868,683.214 764.427,683.214 764.987,683.214 765.546,683.214 766.105,683.214 766.664,683.214 767.224,683.214 767.783,683.214 768.342,683.214 768.901,683.214 769.461,683.214 770.02,683.214 770.579,683.214 771.138,683.214 771.698,683.214 772.257,683.214 772.816,683.214 773.375,683.214 773.935,683.214 774.494,683.214 775.053,683.214 775.612,683.214 776.172,683.214 776.731,683.214 777.29,683.214 777.849,683.214 778.409,683.214 778.968,683.214 779.527,683.214 780.086,683.214 780.646,683.214 781.205,683.214 781.764,683.214 782.323,683.214 782.883,683.214 783.442,683.214 784.001,683.214 784.56,683.214 785.12,683.214 785.679,683.214 786.238,683.214 786.797,683.214 787.357,683.214 787.916,683.214 788.475,683.214 789.034,683.214 789.594,683.214 790.153,683.214 790.712,683.214 791.271,683.214 791.831,683.214 792.39,683.214 792.949,683.214 793.508,683.214 794.068,683.214 794.627,683.214 795.186,683.214 795.745,683.214 796.305,683.214 796.864,683.214 797.423,683.214 797.982,683.214 798.542,683.214 799.101,683.214 799.66,683.214 800.219,683.214 800.779,683.214 801.338,683.214 801.897,683.214 802.456,683.214 803.016,683.214 803.575,683.214 804.134,683.214 804.693,683.214 805.253,683.214 805.812,683.214 806.371,683.214 806.931,683.214 807.49,683.214 808.049,683.214 808.608,683.214 809.168,683.214 809.727,683.214 810.286,683.214 810.845,683.214 811.405,683.214 811.964,683.214 812.523,683.214 813.082,683.214 813.642,683.214 814.201,683.214 814.76,683.214 815.319,683.214 815.879,683.214 816.438,683.214 816.997,683.214 817.556,683.214 818.116,683.214 818.675,683.214 819.234,683.214 819.793,683.214 820.353,683.214 820.912,683.214 821.471,683.214 822.03,683.214 822.59,683.214 823.149,683.214 823.708,683.214 824.267,683.214 824.827,683.214 825.386,683.214 825.945,683.214 826.504,683.214 827.064,683.214 827.623,683.214 828.182,683.214 828.741,683.214 829.301,683.214 829.86,683.214 830.419,683.214 830.978,683.214 831.538,683.214 832.097,683.214 832.656,683.214 833.215,683.214 833.775,683.214 834.334,683.214 834.893,683.214 835.452,683.214 836.012,683.214 836.571,683.214 837.13,683.214 837.689,683.214 838.249,683.214 838.808,683.214 839.367,683.214 839.926,683.214 840.486,683.214 841.045,683.214 841.604,683.214 842.163,683.214 842.723,683.214 843.282,683.214 843.841,683.214 844.4,683.214 844.96,683.214 845.519,683.214 846.078,683.214 846.637,683.214 847.197,683.214 847.756,683.214 848.315,683.214 848.874,683.214 849.434,683.214 849.993,683.214 850.552,683.214 851.111,683.214 851.671,683.214 852.23,683.214 852.789,683.214 853.348,683.214 853.908,683.214 854.467,683.214 855.026,683.214 855.585,683.214 856.145,683.214 856.704,683.214 857.263,683.214 857.822,683.214 858.382,683.214 858.941,683.214 859.5,683.214 860.059,683.214 860.619,683.214 861.178,683.214 861.737,683.214 862.296,683.214 862.856,683.214 863.415,683.214 863.974,683.214 864.533,683.214 865.093,683.214 865.652,683.214 866.211,683.214 866.77,683.214 867.33,683.214 867.889,683.214 868.448,683.214 869.007,683.214 869.567,683.214 870.126,683.214 870.685,683.214 871.244,683.214 871.804,683.214 872.363,683.214 872.922,683.214 873.481,683.214 874.041,683.214 874.6,683.214 875.159,683.214 875.718,683.214 876.278,683.214 876.837,683.214 877.396,683.214 877.955,683.214 878.515,683.214 879.074,683.214 879.633,683.214 880.192,683.214 880.752,683.214 881.311,683.214 881.87,683.214 882.429,683.214 882.989,683.214 883.548,683.214 884.107,683.214 884.666,683.214 885.226,683.214 885.785,683.214 886.344,683.214 886.903,683.214 887.463,683.214 888.022,683.214 888.581,683.214 889.14,683.214 889.7,683.214 890.259,683.214 890.818,683.214 891.377,683.214 891.937,683.214 892.496,683.214 893.055,683.214 893.614,683.214 894.174,683.214 894.733,683.214 895.292,683.214 895.851,683.214 896.411,683.214 896.97,683.214 897.529,683.214 898.088,683.214 898.648,683.214 899.207,683.214 899.766,683.214 900.325,683.214 900.885,683.214 901.444,683.214 902.003,683.214 902.562,683.214 903.122,683.214 903.681,683.214 904.24,683.214 904.799,683.214 905.359,683.214 905.918,683.214 906.477,683.214 907.036,683.214 907.596,683.214 908.155,683.214 908.714,683.214 909.273,683.214 909.833,683.214 910.392,683.214 910.951,683.214 911.51,683.214 912.07,683.214 912.629,683.214 913.188,683.214 913.747,683.214 914.307,683.214 914.866,683.214 915.425,683.214 915.984,683.214 916.544,683.214 917.103,683.214 917.662,683.214 918.221,683.214 918.781,683.214 919.34,683.214 919.899,683.214 920.458,683.214 921.018,683.214 921.577,683.214 922.136,683.214 922.695,683.214 923.255,683.214 923.814,683.214 924.373,683.214 924.932,683.214 925.492,683.214 926.051,683.214 926.61,683.214 927.169,683.214 927.729,683.214 928.288,683.214 928.847,683.214 929.406,683.214 929.966,683.214 930.525,683.214 931.084,683.214 931.644,683.214 932.203,683.214 932.762,683.214 933.321,683.214 933.881,683.214 934.44,683.214 934.999,683.214 935.558,683.214 936.118,683.214 936.677,683.214 937.236,683.214 937.795,683.214 938.355,683.214 938.914,683.214 939.473,683.214 940.032,683.214 940.592,683.214 941.151,683.214 941.71,683.214 942.269,683.214 942.829,683.214 943.388,683.214 943.947,683.214 944.506,683.214 945.066,683.214 945.625,683.214 946.184,683.214 946.743,683.214 947.303,683.214 947.862,683.214 948.421,683.214 948.98,683.214 949.54,683.214 950.099,683.214 950.658,683.214 951.217,683.214 951.777,683.214 952.336,683.214 952.895,683.214 953.454,683.214 954.014,683.214 954.573,683.214 955.132,683.214 955.691,683.214 956.251,683.214 956.81,683.214 957.369,683.214 957.928,683.214 958.488,683.214 959.047,683.214 959.606,683.214 960.165,683.214 960.725,683.214 961.284,683.214 961.843,683.214 962.402,683.214 962.962,683.214 963.521,683.214 964.08,683.214 964.639,683.214 965.199,683.214 965.758,683.214 966.317,683.214 966.876,683.214 967.436,683.214 967.995,683.214 968.554,683.214 969.113,683.214 969.673,683.214 970.232,683.214 970.791,683.214 971.35,683.214 971.91,683.214 972.469,683.214 973.028,683.214 973.587,683.214 974.147,683.214 974.706,683.214 975.265,683.214 975.824,683.214 976.384,683.214 976.943,683.214 977.502,683.214 978.061,683.214 978.621,683.214 979.18,683.214 979.739,683.214 980.298,683.214 980.858,683.214 981.417,683.214 981.976,683.214 982.535,683.214 983.095,683.214 983.654,683.214 984.213,683.214 984.772,683.214 985.332,683.214 985.891,683.214 986.45,683.214 987.009,683.214 987.569,683.214 988.128,683.214 988.687,683.214 989.246,683.214 989.806,683.214 990.365,683.214 990.924,683.214 991.483,683.214 992.043,683.214 992.602,683.214 993.161,683.214 993.72,683.214 994.28,683.214 994.839,683.214 995.398,683.214 995.957,683.214 996.517,683.214 997.076,683.214 997.635,683.214 998.194,683.214 998.754,683.214 999.313,683.214 999.872,683.214 1000.43,683.214 1000.99,683.214 1001.55,683.214 1002.11,683.214 1002.67,683.214 1003.23,683.214 1003.79,683.214 1004.35,683.214 1004.91,683.214 1005.46,683.214 1006.02,683.214 1006.58,683.214 1007.14,683.214 1007.7,683.214 1008.26,683.214 1008.82,683.214 1009.38,683.214 1009.94,683.214 1010.5,683.214 1011.06,683.214 1011.62,683.214 1012.18,683.214 1012.73,683.214 1013.29,683.214 1013.85,683.214 1014.41,683.214 1014.97,683.214 1015.53,683.214 1016.09,683.214 1016.65,683.214 1017.21,683.214 1017.77,683.214 1018.33,683.214 1018.89,683.214 1019.45,683.214 1020.01,683.214 1020.56,683.214 1021.12,683.214 1021.68,683.214 1022.24,683.214 1022.8,683.214 1023.36,683.214 1023.92,683.214 1024.48,683.214 1025.04,683.214 1025.6,683.214 1026.16,683.214 1026.72,683.214 1027.28,683.214 1027.83,683.214 1028.39,683.214 1028.95,683.214 1029.51,683.214 1030.07,683.214 1030.63,683.214 1031.19,683.214 1031.75,683.214 1032.31,683.214 1032.87,683.214 1033.43,683.214 1033.99,683.214 1034.55,683.214 1035.1,683.214 1035.66,683.214 1036.22,683.214 1036.78,683.214 1037.34,683.214 1037.9,683.214 1038.46,683.214 1039.02,683.214 1039.58,683.214 1040.14,683.214 1040.7,683.214 1041.26,683.214 1041.82,683.214 1042.38,683.214 1042.93,683.214 1043.49,683.214 1044.05,683.214 1044.61,683.214 1045.17,683.214 1045.73,683.214 1046.29,683.214 1046.85,683.214 1047.41,683.214 1047.97,683.214 1048.53,683.214 1049.09,683.214 1049.65,683.214 1050.2,683.214 1050.76,683.214 1051.32,683.214 1051.88,683.214 1052.44,683.214 1053,683.214 1053.56,683.214 1054.12,683.214 1054.68,683.214 1055.24,683.214 1055.8,683.214 1056.36,683.214 1056.92,683.214 1057.48,683.214 1058.03,683.214 1058.59,683.214 1059.15,683.214 1059.71,683.214 1060.27,683.214 1060.83,683.214 1061.39,683.214 1061.95,683.214 1062.51,683.214 1063.07,683.214 1063.63,683.214 1064.19,683.214 1064.75,683.214 1065.3,683.214 1065.86,683.214 1066.42,683.214 1066.98,683.214 1067.54,683.214 1068.1,683.214 1068.66,683.214 1069.22,683.214 1069.78,683.214 1070.34,683.214 1070.9,683.214 1071.46,683.214 1072.02,683.214 1072.57,683.214 1073.13,683.214 1073.69,683.214 1074.25,683.214 1074.81,683.214 1075.37,683.214 1075.93,683.214 1076.49,683.214 1077.05,683.214 1077.61,683.214 1078.17,683.214 1078.73,683.214 1079.29,683.214 1079.85,683.214 1080.4,683.214 1080.96,683.214 1081.52,683.214 1082.08,683.214 1082.64,683.214 1083.2,683.214 1083.76,683.214 1084.32,683.214 1084.88,683.214 1085.44,683.214 1086,683.214 1086.56,683.214 1087.12,683.214 1087.67,683.214 1088.23,683.214 1088.79,683.214 1089.35,683.214 1089.91,683.214 1090.47,683.214 1091.03,683.214 1091.59,683.214 1092.15,683.214 1092.71,683.214 1093.27,683.214 1093.83,683.214 1094.39,683.214 1094.94,683.214 1095.5,683.214 1096.06,683.214 1096.62,683.214 1097.18,683.214 1097.74,683.214 1098.3,683.214 1098.86,683.214 1099.42,683.214 1099.98,683.214 1100.54,683.214 1101.1,683.214 1101.66,683.214 1102.22,683.214 1102.77,683.214 1103.33,683.214 1103.89,683.214 1104.45,683.214 1105.01,683.214 1105.57,683.214 1106.13,683.214 1106.69,683.214 1107.25,683.214 1107.81,683.214 1108.37,683.214 1108.93,683.214 1109.49,683.214 1110.04,683.214 1110.6,683.214 1111.16,683.214 1111.72,683.214 1112.28,683.214 1112.84,683.214 1113.4,683.214 1113.96,683.214 1114.52,683.214 1115.08,683.214 1115.64,683.214 1116.2,683.214 1116.76,683.214 1117.31,683.214 1117.87,683.214 1118.43,683.214 1118.99,683.214 1119.55,683.214 1120.11,683.214 1120.67,683.214 1121.23,683.214 1121.79,683.214 1122.35,683.214 1122.91,683.214 1123.47,683.214 1124.03,683.214 1124.59,683.214 1125.14,683.214 1125.7,683.214 1126.26,683.214 1126.82,683.214 1127.38,683.214 1127.94,683.214 1128.5,683.214 1129.06,683.214 1129.62,683.214 1130.18,683.214 1130.74,683.214 1131.3,683.214 1131.86,683.214 1132.41,683.214 1132.97,683.214 1133.53,683.214 1134.09,683.214 1134.65,683.214 1135.21,683.214 1135.77,683.214 1136.33,683.214 1136.89,683.214 1137.45,683.214 1138.01,683.214 1138.57,683.214 1139.13,683.214 1139.68,683.214 1140.24,683.214 1140.8,683.214 1141.36,683.214 1141.92,683.214 1142.48,683.214 1143.04,683.214 1143.6,683.214 1144.16,683.214 1144.72,683.214 1145.28,683.214 1145.84,683.214 1146.4,683.214 1146.96,683.214 1147.51,683.214 1148.07,683.214 1148.63,683.214 1149.19,683.214 1149.75,683.214 1150.31,683.214 1150.87,683.214 1151.43,683.214 1151.99,683.214 1152.55,683.214 1153.11,683.214 1153.67,683.214 1154.23,683.214 1154.78,683.214 1155.34,683.214 1155.9,683.214 1156.46,683.214 1157.02,683.214 1157.58,683.214 1158.14,683.214 1158.7,683.214 1159.26,683.214 1159.82,683.214 1160.38,683.214 1160.94,683.214 1161.5,683.214 1162.05,683.214 1162.61,683.214 1163.17,683.214 1163.73,683.214 1164.29,683.214 1164.85,683.214 1165.41,683.214 1165.97,683.214 1166.53,683.214 1167.09,683.214 1167.65,683.214 1168.21,683.214 1168.77,683.214 1169.33,683.214 1169.88,683.214 1170.44,683.214 1171,683.214 1171.56,683.214 1172.12,683.214 1172.68,683.214 1173.24,683.214 1173.8,683.214 1174.36,683.214 1174.92,683.214 1175.48,683.214 1176.04,683.214 1176.6,683.214 1177.15,683.214 1177.71,683.214 1178.27,683.214 1178.83,683.214 1179.39,683.214 1179.95,683.214 1180.51,683.214 1181.07,683.214 1181.63,683.214 1182.19,683.214 1182.75,683.214 1183.31,683.214 1183.87,683.214 1184.43,683.214 1184.98,683.214 1185.54,683.214 1186.1,683.214 1186.66,683.214 1187.22,683.214 1187.78,683.214 1188.34,683.214 1188.9,683.214 1189.46,683.214 1190.02,683.214 1190.58,683.214 1191.14,683.214 1191.7,683.214 1192.25,683.214 1192.81,683.214 1193.37,683.214 1193.93,683.214 1194.49,683.214 1195.05,683.214 1195.61,683.214 1196.17,683.214 1196.73,683.214 1197.29,683.214 1197.85,683.214 1198.41,683.214 1198.97,683.214 1199.52,683.214 1200.08,683.214 1200.64,683.214 1201.2,683.214 1201.76,683.214 1202.32,683.214 1202.88,683.214 1203.44,683.214 1204,683.214 1204.56,683.214 1205.12,683.214 1205.68,683.214 1206.24,683.214 1206.8,683.214 1207.35,683.214 1207.91,683.214 1208.47,683.214 1209.03,683.214 1209.59,683.214 1210.15,683.214 1210.71,683.214 1211.27,683.214 1211.83,683.214 1212.39,683.214 1212.95,683.214 1213.51,683.214 1214.07,683.214 1214.62,683.214 1215.18,683.214 1215.74,683.214 1216.3,683.214 1216.86,683.214 1217.42,683.214 1217.98,683.214 1218.54,683.214 1219.1,683.214 1219.66,683.214 1220.22,683.214 1220.78,683.214 1221.34,683.214 1221.89,683.214 1222.45,683.214 1223.01,683.214 1223.57,683.214 1224.13,683.214 1224.69,683.214 1225.25,683.214 1225.81,683.214 1226.37,683.214 1226.93,683.214 1227.49,683.214 1228.05,683.214 1228.61,683.214 1229.17,683.214 1229.72,683.214 1230.28,683.214 1230.84,683.214 1231.4,683.214 1231.96,683.214 1232.52,683.214 1233.08,683.214 1233.64,683.214 1234.2,683.214 1234.76,683.214 1235.32,683.214 1235.88,683.214 1236.44,683.214 1236.99,683.214 1237.55,683.214 1238.11,683.214 1238.67,683.214 1239.23,683.214 1239.79,683.214 1240.35,683.214 1240.91,683.214 1241.47,683.214 1242.03,683.214 1242.59,683.214 1243.15,683.214 1243.71,683.214 1244.26,683.214 1244.82,683.214 1245.38,683.214 1245.94,683.214 1246.5,683.214 1247.06,683.214 1247.62,683.214 1248.18,683.214 1248.74,683.214 1249.3,683.214 1249.86,683.214 1250.42,683.214 1250.98,683.214 1251.54,683.214 1252.09,683.214 1252.65,683.214 1253.21,683.214 1253.77,683.214 1254.33,683.214 1254.89,683.214 1255.45,683.214 1256.01,683.214 1256.57,683.214 1257.13,683.214 1257.69,683.214 1258.25,683.214 1258.81,683.214 1259.36,683.214 1259.92,683.214 1260.48,683.214 1261.04,683.214 1261.6,683.214 1262.16,683.214 1262.72,683.214 1263.28,683.214 1263.84,683.214 1264.4,683.214 1264.96,683.214 1265.52,683.214 1266.08,683.214 1266.63,683.214 1267.19,683.214 1267.75,683.214 1268.31,683.214 1268.87,683.214 1269.43,683.214 1269.99,683.214 1270.55,683.214 1271.11,683.214 1271.67,683.214 1272.23,683.214 1272.79,683.214 1273.35,683.214 1273.91,683.214 1274.46,683.214 1275.02,683.214 1275.58,683.214 1276.14,683.214 1276.7,683.214 1277.26,683.214 1277.82,683.214 1278.38,683.214 1278.94,683.214 1279.5,683.214 1280.06,683.214 1280.62,683.214 1281.18,683.214 1281.73,683.214 1282.29,683.214 1282.85,683.214 1283.41,683.214 1283.97,683.214 1284.53,683.214 1285.09,683.214 1285.65,683.214 1286.21,683.214 1286.77,683.214 1287.33,683.214 1287.89,683.214 1288.45,683.214 1289,683.214 1289.56,683.214 1290.12,683.214 1290.68,683.214 1291.24,683.214 1291.8,683.214 1292.36,683.214 1292.92,683.214 1293.48,683.214 1294.04,683.214 1294.6,683.214 1295.16,683.214 1295.72,683.214 1296.28,683.214 1296.83,683.214 1297.39,683.214 1297.95,683.214 1298.51,683.214 1299.07,683.214 1299.63,683.214 1300.19,683.214 1300.75,683.214 1301.31,683.214 1301.87,683.214 1302.43,683.214 1302.99,683.214 1303.55,683.214 1304.1,683.214 1304.66,683.214 1305.22,683.214 1305.78,683.214 1306.34,683.214 1306.9,683.214 1307.46,683.214 1308.02,683.214 1308.58,683.214 1309.14,683.214 1309.7,683.214 1310.26,683.214 1310.82,683.214 1311.38,683.214 1311.93,683.214 1312.49,683.214 1313.05,683.214 1313.61,683.214 1314.17,683.214 1314.73,683.214 1315.29,683.214 1315.85,683.214 1316.41,683.214 1316.97,683.214 1317.53,683.214 1318.09,683.214 1318.65,683.214 1319.2,683.214 1319.76,683.214 1320.32,683.214 1320.88,683.214 1321.44,683.214 1322,683.214 1322.56,683.214 1323.12,683.214 1323.68,683.214 1324.24,683.214 1324.8,683.214 1325.36,683.214 1325.92,683.214 1326.47,683.214 1327.03,683.214 1327.59,683.214 1328.15,683.214 1328.71,683.214 1329.27,683.214 1329.83,683.214 1330.39,683.214 1330.95,683.214 1331.51,683.214 1332.07,683.214 1332.63,683.214 1333.19,683.214 1333.75,683.214 1334.3,683.214 1334.86,683.214 1335.42,683.214 1335.98,683.214 1336.54,683.214 1337.1,683.214 1337.66,683.214 1338.22,683.214 1338.78,683.214 1339.34,683.214 1339.9,683.214 1340.46,683.214 1341.02,683.214 1341.57,683.214 1342.13,683.214 1342.69,683.214 1343.25,683.214 1343.81,683.214 1344.37,683.214 1344.93,683.214 1345.49,683.214 1346.05,683.214 1346.61,683.214 1347.17,683.214 1347.73,683.214 1348.29,683.214 1348.84,683.214 1349.4,683.214 1349.96,683.214 1350.52,683.214 1351.08,683.214 1351.64,683.214 1352.2,683.214 1352.76,683.214 1353.32,683.214 1353.88,683.214 1354.44,683.214 1355,683.214 1355.56,683.214 1356.12,683.214 1356.67,683.214 1357.23,683.214 1357.79,683.214 1358.35,683.214 1358.91,683.214 1359.47,683.214 1360.03,683.214 1360.59,683.214 1361.15,683.214 1361.71,683.214 1362.27,683.214 1362.83,683.214 1363.39,683.214 1363.94,683.214 1364.5,683.214 1365.06,683.214 1365.62,683.214 1366.18,683.214 1366.74,683.214 1367.3,683.214 1367.86,683.214 1368.42,683.214 1368.98,683.214 1369.54,683.214 1370.1,683.214 1370.66,683.214 1371.21,683.214 1371.77,683.214 1372.33,683.214 1372.89,683.214 1373.45,683.214 1374.01,683.214 1374.57,683.214 1375.13,683.214 1375.69,683.214 1376.25,683.214 1376.81,683.214 1377.37,683.214 1377.93,683.214 1378.49,683.214 1379.04,683.214 1379.6,683.214 1380.16,683.214 1380.72,683.214 1381.28,683.214 1381.84,683.214 1382.4,683.214 1382.96,683.214 1383.52,683.214 1384.08,683.214 1384.64,683.214 1385.2,683.214 1385.76,683.214 1386.31,683.214 1386.87,683.214 1387.43,683.214 1387.99,683.214 1388.55,683.214 1389.11,683.214 1389.67,683.214 1390.23,683.214 1390.79,683.214 1391.35,683.214 1391.91,683.214 1392.47,683.214 1393.03,683.214 1393.58,683.214 1394.14,683.214 1394.7,683.214 1395.26,683.214 1395.82,683.214 1396.38,683.214 1396.94,683.214 1397.5,683.214 1398.06,683.214 1398.62,683.214 1399.18,683.214 1399.74,683.214 1400.3,683.214 1400.86,683.214 1401.41,683.214 1401.97,683.214 1402.53,683.214 1403.09,683.214 1403.65,683.214 1404.21,683.214 1404.77,683.214 1405.33,683.214 1405.89,683.214 1406.45,683.214 1407.01,683.214 1407.57,683.214 1408.13,683.214 1408.68,683.214 1409.24,683.214 1409.8,683.214 1410.36,683.214 1410.92,683.214 1411.48,683.214 1412.04,683.214 1412.6,683.214 1413.16,683.214 1413.72,683.214 1414.28,683.214 1414.84,683.214 1415.4,683.214 1415.95,683.214 1416.51,683.214 1417.07,683.214 1417.63,683.214 1418.19,683.214 1418.75,683.214 1419.31,683.214 1419.87,683.214 1420.43,683.214 1420.99,683.214 1421.55,683.214 1422.11,683.214 1422.67,683.214 1423.23,683.214 1423.78,683.214 1424.34,683.214 1424.9,683.214 1425.46,683.214 1426.02,683.214 1426.58,683.214 1427.14,683.214 1427.7,683.214 1428.26,683.214 1428.82,683.214 1429.38,683.214 1429.94,683.214 1430.5,683.214 1431.05,683.214 1431.61,683.214 1432.17,683.214 1432.73,683.214 1433.29,683.214 1433.85,683.214 1434.41,683.214 1434.97,683.214 1435.53,683.214 1436.09,683.214 1436.65,683.214 1437.21,683.214 1437.77,683.214 1438.33,683.214 1438.88,683.214 1439.44,683.214 1440,683.214 1440.56,683.214 1441.12,683.214 1441.68,683.214 1442.24,683.214 1442.8,683.214 1443.36,683.214 1443.92,683.214 1444.48,683.214 1445.04,683.214 1445.6,683.214 1446.15,683.214 1446.71,683.214 1447.27,683.214 1447.83,683.214 1448.39,683.214 1448.95,683.214 1449.51,683.214 1450.07,683.214 1450.63,683.214 1451.19,683.214 1451.75,683.214 1452.31,683.214 1452.87,683.214 1453.42,683.214 1453.98,683.214 1454.54,683.214 1455.1,683.214 1455.66,683.214 1456.22,683.214 1456.78,683.214 1457.34,683.214 1457.9,683.214 1458.46,683.214 1459.02,683.214 1459.58,683.214 1460.14,683.214 1460.7,683.214 1461.25,683.214 1461.81,683.214 1462.37,683.214 1462.93,683.214 1463.49,683.214 1464.05,683.214 1464.61,683.214 1465.17,683.214 1465.73,683.214 1466.29,683.214 1466.85,683.214 1467.41,683.214 1467.97,683.214 1468.52,683.214 1469.08,683.214 1469.64,683.214 1470.2,683.214 1470.76,683.214 1471.32,683.214 1471.88,683.214 1472.44,683.214 1473,683.214 1473.56,683.214 1474.12,683.214 1474.68,683.214 1475.24,683.214 1475.79,683.214 1476.35,683.214 1476.91,683.214 1477.47,683.214 1478.03,683.214 1478.59,683.214 1479.15,683.214 1479.71,683.214 1480.27,683.214 1480.83,683.214 1481.39,683.214 1481.95,683.214 1482.51,683.214 1483.07,683.214 1483.62,683.214 1484.18,683.214 1484.74,683.214 1485.3,683.214 1485.86,683.214 1486.42,683.214 1486.98,683.214 1487.54,683.214 1488.1,683.214 1488.66,683.214 1489.22,683.214 1489.78,683.214 1490.34,683.214 1490.89,683.214 1491.45,683.214 1492.01,683.214 1492.57,683.214 1493.13,683.214 1493.69,683.214 1494.25,683.214 1494.81,683.214 1495.37,683.214 1495.93,683.214 1496.49,683.214 1497.05,683.214 1497.61,683.214 1498.16,683.214 1498.72,683.214 1499.28,683.214 1499.84,683.214 1500.4,683.214 1500.96,683.214 1501.52,683.214 1502.08,683.214 1502.64,683.214 1503.2,683.214 1503.76,683.214 1504.32,683.214 1504.88,683.214 1505.44,683.214 1505.99,683.214 1506.55,683.214 1507.11,683.214 1507.67,683.214 1508.23,683.214 1508.79,683.214 1509.35,683.214 1509.91,683.214 1510.47,683.214 1511.03,683.214 1511.59,683.214 1512.15,683.214 1512.71,683.214 1513.26,683.214 1513.82,683.214 1514.38,683.214 1514.94,683.214 1515.5,683.214 1516.06,683.214 1516.62,683.214 1517.18,683.214 1517.74,683.214 1518.3,683.214 1518.86,683.214 1519.42,683.214 1519.98,683.214 1520.53,683.214 1521.09,683.214 1521.65,683.214 1522.21,683.214 1522.77,683.214 1523.33,683.214 1523.89,683.214 1524.45,683.214 1525.01,683.214 1525.57,683.214 1526.13,683.214 1526.69,683.214 1527.25,683.214 1527.81,683.214 1528.36,683.214 1528.92,683.214 1529.48,683.214 1530.04,683.214 1530.6,683.214 1531.16,683.214 1531.72,683.214 1532.28,683.214 1532.84,683.214 1533.4,683.214 1533.96,683.214 1534.52,683.214 1535.08,683.214 1535.63,683.214 1536.19,683.214 1536.75,683.214 1537.31,683.214 1537.87,683.214 1538.43,683.214 1538.99,683.214 1539.55,683.214 1540.11,683.214 1540.67,683.214 1541.23,683.214 1541.79,683.214 1542.35,683.214 1542.9,683.214 1543.46,683.214 1544.02,683.214 1544.58,683.214 1545.14,683.214 1545.7,683.214 1546.26,683.214 1546.82,683.214 1547.38,683.214 1547.94,683.214 1548.5,683.214 1549.06,683.214 1549.62,683.214 1550.18,683.214 1550.73,683.214 1551.29,683.214 1551.85,683.214 1552.41,683.214 1552.97,683.214 1553.53,683.214 1554.09,683.214 1554.65,683.214 1555.21,683.214 1555.77,683.214 1556.33,683.214 1556.89,683.214 1557.45,683.214 1558,683.214 1558.56,683.214 1559.12,683.214 1559.68,683.214 1560.24,683.214 1560.8,683.214 1561.36,683.214 1561.92,683.214 1562.48,683.214 1563.04,683.214 1563.6,683.214 1564.16,683.214 1564.72,683.214 1565.28,683.214 1565.83,683.214 1566.39,683.214 1566.95,683.214 1567.51,683.214 1568.07,683.214 1568.63,683.214 1569.19,683.214 1569.75,683.214 1570.31,683.214 1570.87,683.214 1571.43,683.214 1571.99,683.214 1572.55,683.214 1573.1,683.214 1573.66,683.214 1574.22,683.214 1574.78,683.214 1575.34,683.214 1575.9,683.214 1576.46,683.214 1577.02,683.214 1577.58,683.214 1578.14,683.214 1578.7,683.214 1579.26,683.214 1579.82,683.214 1580.37,683.214 1580.93,683.214 1581.49,683.214 1582.05,683.214 1582.61,683.214 1583.17,683.214 1583.73,683.214 1584.29,683.214 1584.85,683.214 1585.41,683.214 1585.97,683.214 1586.53,683.214 1587.09,683.214 1587.65,683.214 1588.2,683.214 1588.76,683.214 1589.32,683.214 1589.88,683.214 1590.44,683.214 1591,683.214 1591.56,683.214 1592.12,683.214 1592.68,683.214 1593.24,683.214 1593.8,683.214 1594.36,683.214 1594.92,683.214 1595.47,683.214 1596.03,683.214 1596.59,683.214 1597.15,683.214 1597.71,683.214 1598.27,683.214 1598.83,683.214 1599.39,683.214 1599.95,683.214 1600.51,683.214 1601.07,683.214 1601.63,683.214 1602.19,683.214 1602.74,683.214 1603.3,683.214 1603.86,683.214 1604.42,683.214 1604.98,683.214 1605.54,683.214 1606.1,683.214 1606.66,683.214 1607.22,683.214 1607.78,683.214 1608.34,683.214 1608.9,683.214 1609.46,683.214 1610.02,683.214 1610.57,683.214 1611.13,683.214 1611.69,683.214 1612.25,683.214 1612.81,683.214 1613.37,683.214 1613.93,683.214 1614.49,683.214 1615.05,683.214 1615.61,683.214 1616.17,683.214 1616.73,683.214 1617.29,683.214 1617.84,683.214 1618.4,683.214 1618.96,683.214 1619.52,683.214 1620.08,683.214 1620.64,683.214 1621.2,683.214 1621.76,683.214 1622.32,683.214 1622.88,683.214 1623.44,683.214 1624,683.214 1624.56,683.214 1625.11,683.214 1625.67,683.214 1626.23,683.214 1626.79,683.214 1627.35,683.214 1627.91,683.214 1628.47,683.214 1629.03,683.214 1629.59,683.214 1630.15,683.214 1630.71,683.214 1631.27,683.214 1631.83,683.214 1632.39,683.214 1632.94,683.214 1633.5,683.214 1634.06,683.214 1634.62,683.214 1635.18,683.214 1635.74,683.214 1636.3,683.214 1636.86,683.214 1637.42,683.214 1637.98,683.214 1638.54,683.214 1639.1,683.214 1639.66,683.214 1640.21,683.214 1640.77,683.214 1641.33,683.214 1641.89,683.214 1642.45,683.214 1643.01,683.214 1643.57,683.214 1644.13,683.214 1644.69,683.214 1645.25,683.214 1645.81,683.214 1646.37,683.214 1646.93,683.214 1647.48,683.214 1648.04,683.214 1648.6,683.214 1649.16,683.214 1649.72,683.214 1650.28,683.214 1650.84,683.214 1651.4,683.214 1651.96,683.214 1652.52,683.214 1653.08,683.214 1653.64,683.214 1654.2,683.214 1654.76,683.214 1655.31,683.214 1655.87,683.214 1656.43,683.214 1656.99,683.214 1657.55,683.214 1658.11,683.214 1658.67,683.214 1659.23,683.214 1659.79,683.214 1660.35,683.214 1660.91,683.214 1661.47,683.214 1662.03,683.214 1662.58,683.214 1663.14,683.214 1663.7,683.214 1664.26,683.214 1664.82,683.214 1665.38,683.214 1665.94,683.214 1666.5,683.214 1667.06,683.214 1667.62,683.214 1668.18,683.214 1668.74,683.214 1669.3,683.214 1669.85,683.214 1670.41,683.214 1670.97,683.214 1671.53,683.214 1672.09,683.214 1672.65,683.214 1673.21,683.214 1673.77,683.214 1674.33,683.214 1674.89,683.214 1675.45,683.214 1676.01,683.214 1676.57,683.214 1677.13,683.214 1677.68,683.214 1678.24,683.214 1678.8,683.214 1679.36,683.214 1679.92,683.214 1680.48,683.214 1681.04,683.214 1681.6,683.214 1682.16,683.214 1682.72,683.214 1683.28,683.214 1683.84,683.214 1684.4,683.214 1684.95,683.214 1685.51,683.214 1686.07,683.214 1686.63,683.214 1687.19,683.214 1687.75,683.214 1688.31,683.214 1688.87,683.214 1689.43,683.214 1689.99,683.214 1690.55,683.214 1691.11,683.214 1691.67,683.214 1692.23,683.214 1692.78,683.214 1693.34,683.214 1693.9,683.214 1694.46,683.214 1695.02,683.214 1695.58,683.214 1696.14,683.214 1696.7,683.214 1697.26,683.214 1697.82,683.214 1698.38,683.214 1698.94,683.214 1699.5,683.214 1700.05,683.214 1700.61,683.214 1701.17,683.214 1701.73,683.214 1702.29,683.214 1702.85,683.214 1703.41,683.214 1703.97,683.214 1704.53,683.214 1705.09,683.214 1705.65,683.214 1706.21,683.214 1706.77,683.214 1707.32,683.214 1707.88,683.214 1708.44,683.214 1709,683.214 1709.56,683.214 1710.12,683.214 1710.68,683.214 1711.24,683.214 1711.8,683.214 1712.36,683.214 1712.92,683.214 1713.48,683.214 1714.04,683.214 1714.6,683.214 1715.15,683.214 1715.71,683.214 1716.27,683.214 1716.83,683.214 1717.39,683.214 1717.95,683.214 1718.51,683.214 1719.07,683.214 1719.63,683.214 1720.19,683.214 1720.75,683.214 1721.31,683.214 1721.87,683.214 1722.42,683.214 1722.98,683.214 1723.54,683.214 1724.1,683.214 1724.66,683.214 1725.22,683.214 1725.78,683.214 1726.34,683.214 1726.9,683.214 1727.46,683.214 1728.02,683.214 1728.58,683.214 1729.14,683.214 1729.69,683.214 1730.25,683.214 1730.81,683.214 1731.37,683.214 1731.93,683.214 1732.49,683.214 1733.05,683.214 1733.61,683.214 1734.17,683.214 1734.73,683.214 1735.29,683.214 1735.85,683.214 1736.41,683.214 1736.97,683.214 1737.52,683.214 1738.08,683.214 1738.64,683.214 1739.2,683.214 1739.76,683.214 1740.32,683.214 1740.88,683.214 1741.44,683.214 1742,683.214 1742.56,683.214 1743.12,683.214 1743.68,683.214 1744.24,683.214 1744.79,683.214 1745.35,683.214 1745.91,683.214 1746.47,683.214 1747.03,683.214 1747.59,683.214 1748.15,683.214 1748.71,683.214 1749.27,683.214 1749.83,683.214 1750.39,683.214 1750.95,683.214 1751.51,683.214 1752.06,683.214 1752.62,683.214 1753.18,683.214 1753.74,683.214 1754.3,683.214 1754.86,683.214 1755.42,683.214 1755.98,683.214 1756.54,683.214 1757.1,683.214 1757.66,683.214 1758.22,683.214 1758.78,683.214 1759.34,683.214 1759.89,683.214 1760.45,683.214 1761.01,683.214 1761.57,683.214 1762.13,683.214 1762.69,683.214 1763.25,683.214 1763.81,683.214 1764.37,683.214 1764.93,683.214 1765.49,683.214 1766.05,683.214 1766.61,683.214 1767.16,683.214 1767.72,683.214 1768.28,683.214 1768.84,683.214 1769.4,683.214 1769.96,683.214 1770.52,683.214 1771.08,683.214 1771.64,683.214 1772.2,683.214 1772.76,683.214 1773.32,683.214 1773.88,683.214 1774.43,683.214 1774.99,683.214 1775.55,683.214 1776.11,683.214 1776.67,683.214 1777.23,683.214 1777.79,683.214 1778.35,683.214 1778.91,683.214 1779.47,683.214 1780.03,683.214 1780.59,683.214 1781.15,683.214 1781.71,683.214 1782.26,683.214 1782.82,683.214 1783.38,683.214 1783.94,683.214 1784.5,683.214 1785.06,683.214 1785.62,683.214 1786.18,683.214 1786.74,683.214 1787.3,683.214 1787.86,683.214 1788.42,683.214 1788.98,683.214 1789.53,683.214 1790.09,683.214 1790.65,683.214 1791.21,683.214 1791.77,683.214 1792.33,683.214 1792.89,683.214 1793.45,683.214 1794.01,683.214 1794.57,683.214 1795.13,683.214 1795.69,683.214 1796.25,683.214 1796.8,683.214 1797.36,683.214 1797.92,683.214 1798.48,683.214 1799.04,683.214 1799.6,683.214 1800.16,683.214 1800.72,683.214 1801.28,683.214 1801.84,683.214 1802.4,683.214 1802.96,683.214 1803.52,683.214 1804.08,683.214 1804.63,683.214 1805.19,683.214 1805.75,683.214 1806.31,683.214 1806.87,683.214 1807.43,683.214 1807.99,683.214 1808.55,683.214 1809.11,683.214 1809.67,683.214 1810.23,683.214 1810.79,683.214 1811.35,683.214 1811.9,683.214 1812.46,683.214 1813.02,683.214 1813.58,683.214 1814.14,683.214 1814.7,683.214 1815.26,683.214 1815.82,683.214 1816.38,683.214 1816.94,683.214 1817.5,683.214 1818.06,683.214 1818.62,683.214 1819.18,683.214 1819.73,683.214 1820.29,683.214 1820.85,683.214 1821.41,683.214 1821.97,683.214 1822.53,683.214 1823.09,683.214 1823.65,683.214 1824.21,683.214 1824.77,683.214 1825.33,683.214 1825.89,683.214 1826.45,683.214 1827,683.214 1827.56,683.214 1828.12,683.214 1828.68,683.214 1829.24,683.214 1829.8,683.214 1830.36,683.214 1830.92,683.214 1831.48,683.214 1832.04,683.214 1832.6,683.214 1833.16,683.214 1833.72,683.214 1834.27,683.214 1834.83,683.214 1835.39,683.214 1835.95,683.214 1836.51,683.214 1837.07,683.214 1837.63,683.214 1838.19,683.214 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.035775631908585 ± 0.017937547595494718\nProjected Energy: -4.013220727289051 ± (0.004649655766242766, 0.004620066304952708)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.480682</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4357e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.488e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.167e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.392e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.715e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.145e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133726\n -0.7590191922770835\n  0.13584182219621965\n  0.15789998694608798\n  0.8767114411781343\n  1.5305929970973349\n  1.583573261186741\n  3.0728703303258644\n  3.125672653951839\n  4.862107221562176\n  6.2606948503805935\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
