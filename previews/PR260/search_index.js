var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndœÑ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dœÑ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ¬± $(r.œÉ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ¬± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ¬± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ¬± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ¬± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ¬± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ¬± 0.13748856752861724\n   Replica 2: -3.974753826250174 ¬± 0.12466355058904417\n   Replica 3: -4.011054302602586 ¬± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1‚ü©\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1‚ü©\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0‚ü©\"=>-14.1421, fs\"|0 2 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 1 0 2‚ü©\"=>-14.1421, fs\"|1 2 0 1 1 1‚ü©\"=>-14.1421, fs\"|2 0 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 2 0 1‚ü©\"=>-14.1421, fs\"|1 1 2 0 1 1‚ü©\"=>-14.1421, fs\"|1 1 0 2 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 0 2 1‚ü©\"=>-14.1421, fs\"|1 0 2 1 1 1‚ü©\"=>-14.1421, fs\"|2 1 1 1 1 0‚ü©\"=>-14.1421, fs\"|0 1 1 1 1 2‚ü©\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.8 2211.02,1260.8 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.92 2211.02,1003.92 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.036 2211.02,747.036 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.151 2211.02,490.151 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.267 2211.02,233.267 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.8 423.181,1260.8 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.92 423.181,1003.92 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.036 423.181,747.036 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.151 423.181,490.151 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.267 423.181,233.267 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M356.339 1246.6 Q352.728 1246.6 350.899 1250.17 Q349.094 1253.71 349.094 1260.84 Q349.094 1267.95 350.899 1271.51 Q352.728 1275.05 356.339 1275.05 Q359.973 1275.05 361.779 1271.51 Q363.608 1267.95 363.608 1260.84 Q363.608 1253.71 361.779 1250.17 Q359.973 1246.6 356.339 1246.6 M356.339 1242.9 Q362.149 1242.9 365.205 1247.51 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.57 365.205 1274.17 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.17 Q344.395 1269.57 344.395 1260.84 Q344.395 1252.09 347.45 1247.51 Q350.529 1242.9 356.339 1242.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M290.043 1017.26 L306.363 1017.26 L306.363 1021.2 L284.418 1021.2 L284.418 1017.26 Q287.08 1014.51 291.664 1009.88 Q296.27 1005.23 297.451 1003.89 Q299.696 1001.36 300.576 999.626 Q301.478 997.867 301.478 996.177 Q301.478 993.422 299.534 991.686 Q297.613 989.95 294.511 989.95 Q292.312 989.95 289.858 990.714 Q287.427 991.478 284.65 993.029 L284.65 988.306 Q287.474 987.172 289.927 986.593 Q292.381 986.015 294.418 986.015 Q299.789 986.015 302.983 988.7 Q306.177 991.385 306.177 995.876 Q306.177 998.005 305.367 999.927 Q304.58 1001.82 302.474 1004.42 Q301.895 1005.09 298.793 1008.31 Q295.691 1011.5 290.043 1017.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 986.64 L334.58 986.64 L334.58 990.575 L320.506 990.575 L320.506 999.047 Q321.524 998.7 322.543 998.538 Q323.562 998.353 324.58 998.353 Q330.367 998.353 333.747 1001.52 Q337.126 1004.7 337.126 1010.11 Q337.126 1015.69 333.654 1018.79 Q330.182 1021.87 323.862 1021.87 Q321.687 1021.87 319.418 1021.5 Q317.173 1021.13 314.765 1020.39 L314.765 1015.69 Q316.849 1016.82 319.071 1017.38 Q321.293 1017.94 323.77 1017.94 Q327.774 1017.94 330.112 1015.83 Q332.45 1013.72 332.45 1010.11 Q332.45 1006.5 330.112 1004.39 Q327.774 1002.29 323.77 1002.29 Q321.895 1002.29 320.02 1002.7 Q318.168 1003.12 316.224 1004 L316.224 986.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 989.718 Q352.728 989.718 350.899 993.283 Q349.094 996.825 349.094 1003.95 Q349.094 1011.06 350.899 1014.63 Q352.728 1018.17 356.339 1018.17 Q359.973 1018.17 361.779 1014.63 Q363.608 1011.06 363.608 1003.95 Q363.608 996.825 361.779 993.283 Q359.973 989.718 356.339 989.718 M356.339 986.015 Q362.149 986.015 365.205 990.621 Q368.284 995.205 368.284 1003.95 Q368.284 1012.68 365.205 1017.29 Q362.149 1021.87 356.339 1021.87 Q350.529 1021.87 347.45 1017.29 Q344.395 1012.68 344.395 1003.95 Q344.395 995.205 347.45 990.621 Q350.529 986.015 356.339 986.015 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M286.062 729.756 L304.418 729.756 L304.418 733.691 L290.344 733.691 L290.344 742.163 Q291.363 741.816 292.381 741.654 Q293.4 741.468 294.418 741.468 Q300.205 741.468 303.585 744.64 Q306.964 747.811 306.964 753.228 Q306.964 758.806 303.492 761.908 Q300.02 764.987 293.701 764.987 Q291.525 764.987 289.256 764.616 Q287.011 764.246 284.603 763.505 L284.603 758.806 Q286.687 759.941 288.909 760.496 Q291.131 761.052 293.608 761.052 Q297.613 761.052 299.951 758.945 Q302.288 756.839 302.288 753.228 Q302.288 749.617 299.951 747.51 Q297.613 745.404 293.608 745.404 Q291.733 745.404 289.858 745.82 Q288.006 746.237 286.062 747.117 L286.062 729.756 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 732.834 Q322.566 732.834 320.737 736.399 Q318.932 739.941 318.932 747.07 Q318.932 754.177 320.737 757.741 Q322.566 761.283 326.177 761.283 Q329.811 761.283 331.617 757.741 Q333.446 754.177 333.446 747.07 Q333.446 739.941 331.617 736.399 Q329.811 732.834 326.177 732.834 M326.177 729.131 Q331.987 729.131 335.043 733.737 Q338.122 738.32 338.122 747.07 Q338.122 755.797 335.043 760.404 Q331.987 764.987 326.177 764.987 Q320.367 764.987 317.288 760.404 Q314.233 755.797 314.233 747.07 Q314.233 738.32 317.288 733.737 Q320.367 729.131 326.177 729.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 732.834 Q352.728 732.834 350.899 736.399 Q349.094 739.941 349.094 747.07 Q349.094 754.177 350.899 757.741 Q352.728 761.283 356.339 761.283 Q359.973 761.283 361.779 757.741 Q363.608 754.177 363.608 747.07 Q363.608 739.941 361.779 736.399 Q359.973 732.834 356.339 732.834 M356.339 729.131 Q362.149 729.131 365.205 733.737 Q368.284 738.32 368.284 747.07 Q368.284 755.797 365.205 760.404 Q362.149 764.987 356.339 764.987 Q350.529 764.987 347.45 760.404 Q344.395 755.797 344.395 747.07 Q344.395 738.32 347.45 733.737 Q350.529 729.131 356.339 729.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M284.835 472.871 L307.057 472.871 L307.057 474.862 L294.511 507.431 L289.627 507.431 L301.432 476.807 L284.835 476.807 L284.835 472.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M316.224 472.871 L334.58 472.871 L334.58 476.807 L320.506 476.807 L320.506 485.279 Q321.524 484.931 322.543 484.769 Q323.562 484.584 324.58 484.584 Q330.367 484.584 333.747 487.756 Q337.126 490.927 337.126 496.343 Q337.126 501.922 333.654 505.024 Q330.182 508.103 323.862 508.103 Q321.687 508.103 319.418 507.732 Q317.173 507.362 314.765 506.621 L314.765 501.922 Q316.849 503.056 319.071 503.612 Q321.293 504.167 323.77 504.167 Q327.774 504.167 330.112 502.061 Q332.45 499.955 332.45 496.343 Q332.45 492.732 330.112 490.626 Q327.774 488.519 323.77 488.519 Q321.895 488.519 320.02 488.936 Q318.168 489.353 316.224 490.232 L316.224 472.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 475.95 Q352.728 475.95 350.899 479.515 Q349.094 483.056 349.094 490.186 Q349.094 497.293 350.899 500.857 Q352.728 504.399 356.339 504.399 Q359.973 504.399 361.779 500.857 Q363.608 497.293 363.608 490.186 Q363.608 483.056 361.779 479.515 Q359.973 475.95 356.339 475.95 M356.339 472.246 Q362.149 472.246 365.205 476.853 Q368.284 481.436 368.284 490.186 Q368.284 498.913 365.205 503.519 Q362.149 508.103 356.339 508.103 Q350.529 508.103 347.45 503.519 Q344.395 498.913 344.395 490.186 Q344.395 481.436 347.45 476.853 Q350.529 472.246 356.339 472.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M256.664 246.612 L264.303 246.612 L264.303 220.246 L255.992 221.913 L255.992 217.654 L264.256 215.987 L268.932 215.987 L268.932 246.612 L276.571 246.612 L276.571 250.547 L256.664 250.547 L256.664 246.612 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M296.015 219.066 Q292.404 219.066 290.576 222.631 Q288.77 226.172 288.77 233.302 Q288.77 240.408 290.576 243.973 Q292.404 247.515 296.015 247.515 Q299.65 247.515 301.455 243.973 Q303.284 240.408 303.284 233.302 Q303.284 226.172 301.455 222.631 Q299.65 219.066 296.015 219.066 M296.015 215.362 Q301.826 215.362 304.881 219.969 Q307.96 224.552 307.96 233.302 Q307.96 242.029 304.881 246.635 Q301.826 251.218 296.015 251.218 Q290.205 251.218 287.127 246.635 Q284.071 242.029 284.071 233.302 Q284.071 224.552 287.127 219.969 Q290.205 215.362 296.015 215.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M326.177 219.066 Q322.566 219.066 320.737 222.631 Q318.932 226.172 318.932 233.302 Q318.932 240.408 320.737 243.973 Q322.566 247.515 326.177 247.515 Q329.811 247.515 331.617 243.973 Q333.446 240.408 333.446 233.302 Q333.446 226.172 331.617 222.631 Q329.811 219.066 326.177 219.066 M326.177 215.362 Q331.987 215.362 335.043 219.969 Q338.122 224.552 338.122 233.302 Q338.122 242.029 335.043 246.635 Q331.987 251.218 326.177 251.218 Q320.367 251.218 317.288 246.635 Q314.233 242.029 314.233 233.302 Q314.233 224.552 317.288 219.969 Q320.367 215.362 326.177 215.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M356.339 219.066 Q352.728 219.066 350.899 222.631 Q349.094 226.172 349.094 233.302 Q349.094 240.408 350.899 243.973 Q352.728 247.515 356.339 247.515 Q359.973 247.515 361.779 243.973 Q363.608 240.408 363.608 233.302 Q363.608 226.172 361.779 222.631 Q359.973 219.066 356.339 219.066 M356.339 215.362 Q362.149 215.362 365.205 219.969 Q368.284 224.552 368.284 233.302 Q368.284 242.029 365.205 246.635 Q362.149 251.218 356.339 251.218 Q350.529 251.218 347.45 246.635 Q344.395 242.029 344.395 233.302 Q344.395 224.552 347.45 219.969 Q350.529 215.362 356.339 215.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.267 4017.76,233.267 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1248.79 458.259,1248.47 458.828,1247.09 459.396,1246.69 459.964,1246.2 460.533,1244.63 461.101,1242.99 461.669,1241.33 462.238,1240.65 462.806,1238.87 463.375,1236.98 463.943,1236.12 464.511,1235.1 465.08,1232.98 465.648,1231.8 466.216,1230.47 466.785,1229.06 467.353,1226.47 467.921,1224.74 468.49,1222.92 469.058,1220.92 469.626,1218.83 470.195,1216.57 470.763,1213.14 471.331,1209.61 471.9,1204.89 472.468,1201.03 473.036,1197 473.605,1192.82 474.173,1189.57 474.741,1186.07 475.31,1182.31 475.878,1177.36 476.446,1173.28 477.015,1166.96 477.583,1161.47 478.152,1156.9 478.72,1152.02 479.288,1145.83 479.857,1137.37 480.425,1132 480.993,1126.46 481.562,1120.58 482.13,1113.51 482.698,1107.19 483.267,1098.58 483.835,1090.83 484.403,1083.88 484.972,1074.81 485.54,1066.63 486.108,1057.11 486.677,1047.37 487.245,1039.76 487.813,1027.74 488.382,1016.87 488.95,1008.99 489.518,999.992 490.087,991.822 490.655,982.453 491.224,972.969 491.792,962.387 492.36,952.746 492.929,944.152 493.497,935.477 494.065,924.487 494.634,912.555 495.202,902.545 495.77,893.478 496.339,884.554 496.907,872.499 497.475,861.274 498.044,850.061 498.612,840.885 499.18,827.653 499.749,817.628 500.317,807.545 500.885,796.493 501.454,786.564 502.022,776.764 502.59,767.814 503.159,757.81 503.727,748.079 504.295,737.302 504.864,727.528 505.432,718.985 506.001,708.43 506.569,698.71 507.137,689.173 507.706,678.717 508.274,668.353 508.842,657.375 509.411,646.3 509.979,637.711 510.547,627.107 511.116,618.577 511.684,609.23 512.252,601.11 512.821,592.946 513.389,585.05 513.957,576.182 514.526,569.621 515.094,561.996 515.662,553.34 516.231,547.039 516.799,540.754 517.367,535.541 517.936,529.259 518.504,519.963 519.072,511.73 519.641,503.845 520.209,498.287 520.778,491.761 521.346,487.429 521.914,480.859 522.483,474.656 523.051,466.343 523.619,458.002 524.188,449.165 524.756,444.432 525.324,439.189 525.893,433.709 526.461,429.406 527.029,424.296 527.598,420.381 528.166,414.246 528.734,407.433 529.303,404.056 529.871,398.381 530.439,395.085 531.008,391.822 531.576,389.568 532.144,384.155 532.713,380.847 533.281,376.858 533.85,370.779 534.418,366.85 534.986,364.307 535.555,358.47 536.123,357.086 536.691,352.558 537.26,349.151 537.828,346.049 538.396,346.031 538.965,342.702 539.533,339.489 540.101,336.454 540.67,333.591 541.238,330.864 541.806,328.009 542.375,324.125 542.943,321.483 543.511,321.136 544.08,317.646 544.648,312.322 545.216,309.1 545.785,306.97 546.353,304.019 546.921,303.298 547.49,301.566 548.058,297.476 548.627,295.792 549.195,295.22 549.763,292.535 550.332,292.133 550.9,293.498 551.468,292.997 552.037,293.447 552.605,292.694 553.173,292.217 553.742,290.291 554.31,289.641 554.878,289.018 555.447,287.228 556.015,285.421 556.583,284.735 557.152,284.016 557.72,283.468 558.288,281.853 558.857,281.159 559.425,279.255 559.993,277.591 560.562,278.14 561.13,277.456 561.698,276.885 562.267,275.089 562.835,276.661 563.404,276.659 563.972,274.563 564.54,273.882 565.109,273.049 565.677,271.436 566.245,269.823 566.814,266.395 567.382,267.048 567.95,266.532 568.519,263.117 569.087,260.8 569.655,257.575 570.224,256.774 570.792,257.166 571.36,258.4 571.929,258.323 572.497,256.292 573.065,256.502 573.634,256.581 574.202,256.558 574.77,257.627 575.339,256.738 575.907,257.027 576.476,255.766 577.044,254.65 577.612,256.967 578.181,254.927 578.749,253.931 579.317,250.974 579.886,250.962 580.454,250.158 581.022,249.31 581.591,249.672 582.159,251.086 582.727,252.269 583.296,251.441 583.864,251.456 584.432,252.386 585.001,253.531 585.569,254.535 586.137,253.227 586.706,251.067 587.274,250.127 587.842,250.136 588.411,249.198 588.979,249.363 589.547,251.617 590.116,251.55 590.684,251.486 591.253,250.32 591.821,250.036 592.389,252.185 592.958,247.926 593.526,247.753 594.094,247.627 594.663,244.505 595.231,244.98 595.799,245.271 596.368,245.61 596.936,246.084 597.504,247.038 598.073,249.921 598.641,248.854 599.209,246.513 599.778,245.461 600.346,244.457 600.914,243.402 601.483,240.45 602.051,240.864 602.619,242.338 603.188,238.608 603.756,238.24 604.325,236.675 604.893,236.277 605.461,237.879 606.03,237.56 606.598,236.208 607.166,235.948 607.735,235.581 608.303,237.32 608.871,236.835 609.44,239.459 610.008,239.772 610.576,239.349 611.145,241.98 611.713,243.095 612.281,242.467 612.85,241.752 613.418,240.959 613.986,242.071 614.555,242.386 615.123,241.424 615.691,241.585 616.26,238.897 616.828,237.281 617.396,235.945 617.965,235.756 618.533,236.477 619.102,236.902 619.67,237.516 620.238,236.986 620.807,240.641 621.375,240.041 621.943,239.378 622.512,236.695 623.08,239.403 623.648,239.789 624.217,238.941 624.785,238.394 625.353,240.915 625.922,242.127 626.49,242.344 627.058,244.289 627.627,245.456 628.195,247.227 628.763,246.121 629.332,246.032 629.9,244.781 630.468,243.446 631.037,242.646 631.605,244.879 632.173,241.871 632.742,244.132 633.31,243.957 633.879,245.219 634.447,242.881 635.015,242.897 635.584,244.794 636.152,243.492 636.72,243.538 637.289,243.189 637.857,241.068 638.425,242.15 638.994,240.078 639.562,241.418 640.13,240.304 640.699,238.669 641.267,238.913 641.835,240.187 642.404,241.188 642.972,240.237 643.54,238.325 644.109,239.402 644.677,240.39 645.245,241.413 645.814,240.244 646.382,238.345 646.951,239.565 647.519,239.711 648.087,240.69 648.656,240.442 649.224,239.408 649.792,239.608 650.361,238.814 650.929,238.748 651.497,239.693 652.066,239.802 652.634,238.986 653.202,237.198 653.771,236.191 654.339,235.491 654.907,235.742 655.476,236.378 656.044,236.61 656.612,237.941 657.181,239.006 657.749,240.967 658.317,240.687 658.886,240.646 659.454,238.571 660.022,236.595 660.591,238.067 661.159,234.992 661.728,235.154 662.296,237.398 662.864,237.718 663.433,238.834 664.001,239.871 664.569,239.745 665.138,239.656 665.706,237.41 666.274,237.271 666.843,236.476 667.411,234.738 667.979,238.108 668.548,240.271 669.116,239.174 669.684,240.112 670.253,238.787 670.821,239.963 671.389,240.853 671.958,241.737 672.526,239.307 673.094,239.383 673.663,241.334 674.231,241.335 674.799,240.218 675.368,239.059 675.936,240.208 676.505,242.104 677.073,242.907 677.641,242.485 678.21,242.363 678.778,243.088 679.346,242.719 679.915,241.098 680.483,240.827 681.051,239.473 681.62,239.126 682.188,241.062 682.756,242.905 683.325,241.403 683.893,241.078 684.461,240.751 685.03,238.219 685.598,238.159 686.166,237.927 686.735,236.627 687.303,237.633 687.871,237.502 688.44,238.262 689.008,236.077 689.577,234.018 690.145,234.199 690.713,233.302 691.282,233.518 691.85,232.69 692.418,232.8 692.987,233.057 693.555,233.25 694.123,233.164 694.692,233.426 695.26,234.828 695.828,235.888 696.397,234.788 696.965,234.036 697.533,235.133 698.102,235.134 698.67,236.089 699.238,238.24 699.807,235.807 700.375,235.835 700.943,233.704 701.512,232.9 702.08,234.025 702.648,234.116 703.217,237.452 703.785,237.232 704.354,236.288 704.922,236.094 705.49,237.13 706.059,236.995 706.627,236.96 707.195,234.793 707.764,233.709 708.332,233.785 708.9,233.953 709.469,235.246 710.037,235.523 710.605,234.517 711.174,234.508 711.742,236.706 712.31,234.66 712.879,234.749 713.447,238.09 714.015,237.784 714.584,237.637 715.152,236.391 715.72,236.602 716.289,235.676 716.857,237.789 717.425,235.617 717.994,237.39 718.562,238.284 719.131,238.114 719.699,238 720.267,235.557 720.836,234.433 721.404,236.545 721.972,235.4 722.541,234.322 723.109,233.473 723.677,232.632 724.246,232.845 724.814,234.208 725.382,234.603 725.951,233.75 726.519,234.83 727.087,235.915 727.656,237.922 728.224,237.647 728.792,238.525 729.361,238.381 729.929,239.354 730.497,235.863 731.066,234.836 731.634,236.724 732.203,237.769 732.771,236.645 733.339,236.637 733.908,235.669 734.476,235.846 735.044,236.716 735.613,237.615 736.181,235.428 736.749,234.612 737.318,235.693 737.886,236.516 738.454,235.279 739.023,233.262 739.591,234.365 740.159,233.42 740.728,236.677 741.296,237.443 741.864,238.297 742.433,238.997 743.001,238.618 743.569,236.345 744.138,232.099 744.706,231.184 745.274,228.56 745.843,228.976 746.411,229.682 746.98,230.055 747.548,232.594 748.116,230.861 748.685,232.007 749.253,235.163 749.821,235.102 750.39,235.148 750.958,233.919 751.526,231.882 752.095,231.065 752.663,231.492 753.231,231.702 753.8,231.752 754.368,233.131 754.936,233.119 755.505,233.345 756.073,233.392 756.641,232.453 757.21,232.69 757.778,230.776 758.346,231.931 758.915,233.369 759.483,232.391 760.052,230.601 760.62,233.084 761.188,233.092 761.757,234.125 762.325,234.252 762.893,235.191 763.462,237.351 764.03,236.326 764.598,237.06 765.167,234.687 765.735,235.743 766.303,237.727 766.872,235.508 767.44,235.585 768.008,240.925 768.577,240.562 769.145,238.752 769.713,238.534 770.282,239.294 770.85,239.822 771.418,239.349 771.987,237.871 772.555,236.314 773.123,235.18 773.692,234.769 774.26,233.772 774.829,233.534 775.397,232.862 775.965,231.726 776.534,230.784 777.102,230.175 777.67,230.417 778.239,228.42 778.807,226.503 779.375,228.075 779.944,228.43 780.512,227.59 781.08,228.182 781.649,228.624 782.217,229.184 782.785,230.716 783.354,231.055 783.922,231.46 784.49,232.811 785.059,233.908 785.627,234.103 786.195,234.281 786.764,235.401 787.332,234.43 787.9,236.866 788.469,238.96 789.037,239.662 789.606,240.108 790.174,238.916 790.742,236.777 791.311,237.677 791.879,236.523 792.447,237.267 793.016,235.127 793.584,237.249 794.152,236.149 794.721,236.746 795.289,236.559 795.857,239.456 796.426,239.019 796.994,238.802 797.562,237.598 798.131,237.319 798.699,237.105 799.267,236.804 799.836,234.456 800.404,232.452 800.972,235.448 801.541,235.42 802.109,236.425 802.678,236.241 803.246,236.219 803.814,238.047 804.383,239.623 804.951,239.037 805.519,237.599 806.088,235.367 806.656,237.504 807.224,239.339 807.793,238.823 808.361,238.199 808.929,237.955 809.498,237.63 810.066,239.445 810.634,236.127 811.203,235.848 811.771,234.667 812.339,230.685 812.908,230.967 813.476,231.809 814.044,230.789 814.613,231.063 815.181,233.154 815.749,234.134 816.318,233.044 816.886,234.928 817.455,236.877 818.023,236.656 818.591,234.19 819.16,233.142 819.728,233.11 820.296,227.986 820.865,228.547 821.433,227.838 822.001,229.209 822.57,229.735 823.138,232.158 823.706,231.383 824.275,229.469 824.843,229.736 825.411,231.198 825.98,231.402 826.548,232.507 827.116,234.58 827.685,234.762 828.253,235.953 828.821,235.802 829.39,235.418 829.958,236.419 830.526,236.238 831.095,236.271 831.663,235.797 832.232,234.626 832.8,234.535 833.368,234.67 833.937,232.813 834.505,233.014 835.073,233.911 835.642,235.135 836.21,235.099 836.778,235.976 837.347,235.897 837.915,235.863 838.483,234.75 839.052,234.642 839.62,234.574 840.188,236.655 840.757,236.477 841.325,236.336 841.893,237.175 842.462,238.854 843.03,238.177 843.598,237.64 844.167,236.054 844.735,235.819 845.304,231.576 845.872,233.758 846.44,233.762 847.009,233.673 847.577,233.653 848.145,232.55 848.714,232.717 849.282,234.765 849.85,235.56 850.419,235.398 850.987,234.112 851.555,235.091 852.124,234.761 852.692,232.619 853.26,231.639 853.829,230.734 854.397,230.844 854.965,231.841 855.534,228.962 856.102,230.249 856.67,229.658 857.239,230.815 857.807,228.958 858.375,229.15 858.944,231.488 859.512,231.665 860.081,232.667 860.649,231.874 861.217,232.069 861.786,232.341 862.354,232.555 862.922,231.6 863.491,231.873 864.059,230.97 864.627,229.207 865.196,228.378 865.764,226.972 866.332,227.496 866.901,228.815 867.469,230.082 868.037,228.375 868.606,226.836 869.174,227.612 869.742,227.036 870.311,228.533 870.879,231.026 871.447,230.365 872.016,232.809 872.584,231.026 873.152,231.284 873.721,233.396 874.289,232.437 874.858,233.78 875.426,231.936 875.994,231.223 876.563,231.583 877.131,230.839 877.699,229.991 878.268,230.551 878.836,232.115 879.404,228.166 879.973,226.536 880.541,227.172 881.109,228.909 881.678,230.568 882.246,231.141 882.814,230.149 883.383,231.551 883.951,230.715 884.519,231.937 885.088,230.16 885.656,228.442 886.224,230.258 886.793,229.752 887.361,230.26 887.93,229.843 888.498,230.193 889.066,232.001 889.635,232.219 890.203,230.252 890.771,231.591 891.34,232.013 891.908,231.357 892.476,233.732 893.045,234.077 893.613,233.158 894.181,232.217 894.75,230.402 895.318,231.905 895.886,233.407 896.455,233.955 897.023,234.202 897.591,234.401 898.16,234.504 898.728,234.818 899.296,234.951 899.865,235.006 900.433,237.312 901.001,236.384 901.57,236.197 902.138,237.115 902.707,241.353 903.275,240.179 903.843,239.97 904.412,238.918 904.98,240.781 905.548,240.435 906.117,239.957 906.685,238.654 907.253,238.574 907.822,238.079 908.39,236.986 908.958,239.741 909.527,238.435 910.095,239.236 910.663,237.957 911.232,238.572 911.8,238.403 912.368,239.134 912.937,235.544 913.505,234.362 914.073,236.372 914.642,235.182 915.21,234.274 915.779,235.244 916.347,235.099 916.915,236.236 917.484,236.997 918.052,236.806 918.62,238.736 919.189,240.535 919.757,239.065 920.325,239.635 920.894,236.917 921.462,236.731 922.03,237.455 922.599,237.003 923.167,237.864 923.735,238.37 924.304,237.864 924.872,236.616 925.44,236.641 926.009,236.262 926.577,233.105 927.145,232.889 927.714,232.014 928.282,231.971 928.85,232.217 929.419,231.169 929.987,231.514 930.556,230.532 931.124,227.76 931.692,224.884 932.261,226.655 932.829,229.12 933.397,230.543 933.966,229.96 934.534,229.327 935.102,231.643 935.671,228.758 936.239,230.112 936.807,230.473 937.376,229.594 937.944,232.902 938.512,232.096 939.081,233.402 939.649,234.584 940.217,234.539 940.786,233.39 941.354,232.345 941.922,233.301 942.491,233.463 943.059,235.582 943.627,236.673 944.196,235.312 944.764,236.222 945.333,233.048 945.901,235.201 946.469,236.003 947.038,235.843 947.606,238.935 948.174,238.425 948.743,238.141 949.311,237.732 949.879,236.284 950.448,236.057 951.016,235.837 951.584,237.958 952.153,237.503 952.721,237.138 953.289,235.578 953.858,236.369 954.426,234.97 954.994,232.812 955.563,233.95 956.131,230.752 956.699,228.743 957.268,228.089 957.836,229.539 958.405,228.749 958.973,228.286 959.541,227.445 960.11,228.968 960.678,229.25 961.246,231.391 961.815,230.544 962.383,229.713 962.951,230.998 963.52,231.133 964.088,231.7 964.656,233.888 965.225,231.971 965.793,231.129 966.361,231.371 966.93,231.495 967.498,231.692 968.066,232.082 968.635,233.462 969.203,232.62 969.771,232.757 970.34,233.741 970.908,235.943 971.476,235.809 972.045,236.786 972.613,235.654 973.182,237.621 973.75,237.414 974.318,240.09 974.887,238.611 975.455,236.12 976.023,233.687 976.592,232.674 977.16,235.757 977.728,235.784 978.297,235.566 978.865,238.772 979.433,238.442 980.002,237.063 980.57,235.806 981.138,236.596 981.707,236.266 982.275,238.254 982.843,237.169 983.412,236.927 983.98,235.804 984.548,235.533 985.117,235.31 985.685,233.162 986.253,233.232 986.822,233.182 987.39,230.29 987.959,231.314 988.527,230.533 989.095,230.797 989.664,229.89 990.232,229.048 990.8,228.361 991.369,228.489 991.937,229.037 992.505,230.554 993.074,231.64 993.642,229.819 994.21,229.291 994.779,229.579 995.347,230.819 995.915,227.801 996.484,228.277 997.052,227.71 997.62,227.224 998.189,227.82 998.757,228.343 999.325,228.661 999.894,229.192 1000.46,230.399 1001.03,231.816 1001.6,233.06 1002.17,233.198 1002.74,234.587 1003.3,235.635 1003.87,235.398 1004.44,235.439 1005.01,235.46 1005.58,236.354 1006.15,237.028 1006.71,236.919 1007.28,236.772 1007.85,236.69 1008.42,237.65 1008.99,237.563 1009.56,238.317 1010.12,235.118 1010.69,235.301 1011.26,232.15 1011.83,231.321 1012.4,232.686 1012.97,231.786 1013.53,231.841 1014.1,232.122 1014.67,231.428 1015.24,232.687 1015.81,232.671 1016.38,231.825 1016.94,230.983 1017.51,233.196 1018.08,233.354 1018.65,232.519 1019.22,229.688 1019.79,227.732 1020.35,229.073 1020.92,228.463 1021.49,228.027 1022.06,230.587 1022.63,231.879 1023.2,234.925 1023.76,232.786 1024.33,233.801 1024.9,232.815 1025.47,233.816 1026.04,232.95 1026.61,233.133 1027.17,233.176 1027.74,234.136 1028.31,235.093 1028.88,233.115 1029.45,237.214 1030.02,234.918 1030.58,235.046 1031.15,236.067 1031.72,236.972 1032.29,236.969 1032.86,236.742 1033.43,236.586 1033.99,237.514 1034.56,238.323 1035.13,242.061 1035.7,243.412 1036.27,240.688 1036.84,240.049 1037.4,239.692 1037.97,240.434 1038.54,237.822 1039.11,236.266 1039.68,235.947 1040.25,237.65 1040.81,238.442 1041.38,236.294 1041.95,236.867 1042.52,237.625 1043.09,237.183 1043.66,236 1044.22,236.857 1044.79,235.593 1045.36,234.306 1045.93,233.148 1046.5,233.985 1047.07,230.919 1047.63,233.199 1048.2,231.159 1048.77,231.457 1049.34,229.405 1049.91,228.457 1050.48,228.69 1051.05,228.032 1051.61,228.478 1052.18,230.814 1052.75,233.89 1053.32,234.868 1053.89,234.851 1054.46,234.874 1055.02,234.773 1055.59,235.709 1056.16,237.658 1056.73,237.224 1057.3,238.146 1057.87,237.84 1058.43,239.444 1059,238.77 1059.57,239.401 1060.14,237.01 1060.71,238.948 1061.28,239.479 1061.84,238.869 1062.41,241.318 1062.98,242.689 1063.55,242.88 1064.12,241.067 1064.69,238.197 1065.25,237.782 1065.82,236.598 1066.39,236.124 1066.96,234.586 1067.53,232.416 1068.1,231.082 1068.66,230.058 1069.23,230.112 1069.8,231.249 1070.37,230.05 1070.94,228.235 1071.51,227.372 1072.07,224.722 1072.64,226.354 1073.21,227.651 1073.78,229.157 1074.35,227.474 1074.92,228.715 1075.48,229.856 1076.05,231.136 1076.62,232.982 1077.19,233.774 1077.76,234.593 1078.33,232.555 1078.89,230.452 1079.46,230.728 1080.03,231.954 1080.6,232.957 1081.17,233.998 1081.74,231.857 1082.3,233.018 1082.87,233.913 1083.44,231.845 1084.01,231.707 1084.58,229.997 1085.15,229.038 1085.71,226.995 1086.28,227.169 1086.85,227.569 1087.42,228.076 1087.99,229.616 1088.56,229.716 1089.12,228.835 1089.69,227.451 1090.26,228.976 1090.83,229.064 1091.4,231.487 1091.97,231.724 1092.53,232.741 1093.1,231.667 1093.67,229.614 1094.24,229.921 1094.81,231.161 1095.38,230.28 1095.94,228.562 1096.51,226.811 1097.08,228.486 1097.65,227.113 1098.22,225.826 1098.79,225.507 1099.35,226.254 1099.92,229.073 1100.49,228.287 1101.06,231.923 1101.63,232.236 1102.2,232.542 1102.76,233.662 1103.33,233.332 1103.9,235.441 1104.47,235.569 1105.04,234.655 1105.61,235.78 1106.17,236.898 1106.74,236.673 1107.31,237.452 1107.88,239.501 1108.45,238.164 1109.02,234.986 1109.58,233.938 1110.15,234.051 1110.72,235.099 1111.29,234.958 1111.86,236.025 1112.43,237.004 1112.99,235.847 1113.56,234.705 1114.13,233.678 1114.7,232.757 1115.27,233.88 1115.84,235.951 1116.4,236.912 1116.97,234.823 1117.54,235.8 1118.11,233.802 1118.68,233.696 1119.25,232.73 1119.81,230.944 1120.38,229.856 1120.95,228.885 1121.52,229.544 1122.09,227.878 1122.66,230.354 1123.23,231.656 1123.79,231.769 1124.36,232.831 1124.93,234.101 1125.5,238.414 1126.07,237.121 1126.64,235.976 1127.2,237.977 1127.77,238.856 1128.34,239.399 1128.91,237.941 1129.48,237.873 1130.05,237.49 1130.61,236.317 1131.18,237.15 1131.75,237.907 1132.32,237.722 1132.89,238.28 1133.46,236.905 1134.02,238.558 1134.59,237.221 1135.16,236.981 1135.73,232.347 1136.3,231.458 1136.87,230.556 1137.43,231.694 1138,231.851 1138.57,231.955 1139.14,235.148 1139.71,234.937 1140.28,232.723 1140.84,231.561 1141.41,231.778 1141.98,233.1 1142.55,233.214 1143.12,231.974 1143.69,232.305 1144.25,232.549 1144.82,233.526 1145.39,233.673 1145.96,234.535 1146.53,236.366 1147.1,235.859 1147.66,235.708 1148.23,236.547 1148.8,233.3 1149.37,234.23 1149.94,232.043 1150.51,231.976 1151.07,231.109 1151.64,232.177 1152.21,231.128 1152.78,229.265 1153.35,228.494 1153.92,227.835 1154.48,229.518 1155.05,230.811 1155.62,232.009 1156.19,231.142 1156.76,230.097 1157.33,230.499 1157.89,229.681 1158.46,231.037 1159.03,229.28 1159.6,229.457 1160.17,230.657 1160.74,232.098 1161.3,232.31 1161.87,231.594 1162.44,232.57 1163.01,231.738 1163.58,232.846 1164.15,233.927 1164.71,233.952 1165.28,233.748 1165.85,232.81 1166.42,230.927 1166.99,231.049 1167.56,230.352 1168.12,231.46 1168.69,232.286 1169.26,234.554 1169.83,236.553 1170.4,235.273 1170.97,233.141 1171.53,232.217 1172.1,231.152 1172.67,231.255 1173.24,232.405 1173.81,230.672 1174.38,229.687 1174.94,230.286 1175.51,229.387 1176.08,230.649 1176.65,230.85 1177.22,232.166 1177.79,233.392 1178.35,233.768 1178.92,236.076 1179.49,234.887 1180.06,234.798 1180.63,234.759 1181.2,232.858 1181.76,233.127 1182.33,233.067 1182.9,236.09 1183.47,235.868 1184.04,235.774 1184.61,236.635 1185.17,237.583 1185.74,239.596 1186.31,239.168 1186.88,241.103 1187.45,240.655 1188.02,240.187 1188.58,238.57 1189.15,240.11 1189.72,240.877 1190.29,241.501 1190.86,239.76 1191.43,238.402 1192,237.979 1192.56,238.755 1193.13,239.347 1193.7,238.758 1194.27,238.343 1194.84,238.922 1195.41,240.592 1195.97,239.016 1196.54,241.682 1197.11,240.975 1197.68,241.11 1198.25,238.22 1198.82,235.802 1199.38,238.421 1199.95,234.804 1200.52,233.648 1201.09,231.266 1201.66,231.227 1202.23,230.136 1202.79,228.139 1203.36,226.309 1203.93,227.732 1204.5,225.989 1205.07,226.367 1205.64,226.619 1206.2,229.206 1206.77,229.449 1207.34,230.607 1207.91,232.54 1208.48,231.499 1209.05,234.581 1209.61,234.472 1210.18,235.38 1210.75,235.198 1211.32,235.045 1211.89,233.988 1212.46,234.919 1213.02,232.713 1213.59,232.648 1214.16,232.568 1214.73,232.766 1215.3,230.775 1215.87,230.635 1216.43,230.755 1217,231.759 1217.57,229.967 1218.14,232.023 1218.71,233.131 1219.28,233.17 1219.84,235.231 1220.41,234.203 1220.98,233.243 1221.55,232.962 1222.12,233.885 1222.69,233.829 1223.25,234.713 1223.82,234.651 1224.39,234.649 1224.96,234.483 1225.53,234.14 1226.1,232.961 1226.66,233.061 1227.23,232.918 1227.8,233.978 1228.37,233.74 1228.94,234.597 1229.51,234.33 1230.07,233.437 1230.64,233.598 1231.21,233.421 1231.78,235.311 1232.35,232.02 1232.92,230.016 1233.48,228.187 1234.05,226.267 1234.62,227.867 1235.19,229.051 1235.76,231.236 1236.33,230.498 1236.89,231.985 1237.46,231.918 1238.03,232.861 1238.6,232.944 1239.17,233.059 1239.74,234.173 1240.3,233.076 1240.87,232.03 1241.44,232.385 1242.01,229.489 1242.58,229.791 1243.15,229.975 1243.71,231.465 1244.28,230.755 1244.85,231.036 1245.42,231.263 1245.99,234.665 1246.56,236.484 1247.12,237.118 1247.69,235.583 1248.26,237.27 1248.83,235.875 1249.4,236.79 1249.97,238.641 1250.53,239.269 1251.1,238.788 1251.67,237.306 1252.24,235.931 1252.81,235.713 1253.38,234.408 1253.94,234.52 1254.51,235.44 1255.08,233.49 1255.65,232.337 1256.22,232.279 1256.79,232.288 1257.35,231.211 1257.92,229.31 1258.49,229.67 1259.06,228.902 1259.63,227.376 1260.2,226.801 1260.76,229.112 1261.33,229.279 1261.9,229.542 1262.47,229.829 1263.04,231.091 1263.61,229.18 1264.18,230.405 1264.74,230.638 1265.31,233.214 1265.88,234.139 1266.45,236.149 1267.02,237.911 1267.59,237.168 1268.15,236.834 1268.72,234.517 1269.29,234.253 1269.86,234.257 1270.43,235.128 1271,237.059 1271.56,236.733 1272.13,237.373 1272.7,237.045 1273.27,237.534 1273.84,236.159 1274.41,236.935 1274.97,237.679 1275.54,238.413 1276.11,237.974 1276.68,239.552 1277.25,238.136 1277.82,233.606 1278.38,234.79 1278.95,232.336 1279.52,232.285 1280.09,233.319 1280.66,233.394 1281.23,233.021 1281.79,233.94 1282.36,230.65 1282.93,229.847 1283.5,229.84 1284.07,229.875 1284.64,231.177 1285.2,229.181 1285.77,230.474 1286.34,229.519 1286.91,229.547 1287.48,230.758 1288.05,230.94 1288.61,230.955 1289.18,232.016 1289.75,231.205 1290.32,231.255 1290.89,231.269 1291.46,229.323 1292.02,229.782 1292.59,229.95 1293.16,231.117 1293.73,230.136 1294.3,228.364 1294.87,227.828 1295.43,228.294 1296,229.736 1296.57,229.194 1297.14,230.439 1297.71,229.677 1298.28,232.358 1298.84,233.599 1299.41,234.684 1299.98,234.774 1300.55,234.889 1301.12,233.767 1301.69,233.735 1302.25,233.793 1302.82,232.789 1303.39,231.886 1303.96,232.985 1304.53,236.981 1305.1,237.632 1305.66,236.425 1306.23,235.19 1306.8,235.105 1307.37,234.964 1307.94,234.842 1308.51,234.877 1309.07,234.949 1309.64,234.822 1310.21,234.522 1310.78,233.114 1311.35,233.361 1311.92,234.133 1312.48,234.977 1313.05,232.825 1313.62,234.85 1314.19,235.531 1314.76,233.388 1315.33,233.377 1315.89,230.971 1316.46,229.275 1317.03,228.435 1317.6,229.625 1318.17,231.047 1318.74,230.312 1319.3,228.498 1319.87,227.701 1320.44,227.217 1321.01,228.697 1321.58,229.151 1322.15,230.637 1322.71,229.88 1323.28,231.038 1323.85,231.95 1324.42,232.204 1324.99,232.341 1325.56,232.497 1326.12,233.729 1326.69,234.829 1327.26,233.819 1327.83,237.021 1328.4,237.964 1328.97,238.644 1329.53,237.164 1330.1,235.89 1330.67,236.807 1331.24,236.464 1331.81,234.216 1332.38,235.251 1332.94,235.336 1333.51,234.078 1334.08,232.772 1334.65,232.671 1335.22,232.877 1335.79,235.114 1336.36,236.892 1336.92,238.754 1337.49,238.394 1338.06,239.107 1338.63,237.985 1339.2,238.573 1339.77,237.178 1340.33,237.794 1340.9,237.614 1341.47,236.239 1342.04,235.806 1342.61,235.637 1343.18,233.448 1343.74,234.37 1344.31,234.334 1344.88,233.886 1345.45,231.63 1346.02,229.55 1346.59,230.752 1347.15,231.876 1347.72,228.931 1348.29,230.428 1348.86,228.452 1349.43,227.762 1350,228.252 1350.56,228.537 1351.13,227.991 1351.7,227.402 1352.27,226.112 1352.84,228.749 1353.41,230.218 1353.97,229.479 1354.54,229.092 1355.11,229.489 1355.68,227.716 1356.25,228.92 1356.82,229.107 1357.38,230.51 1357.95,229.709 1358.52,229.2 1359.09,230.468 1359.66,231.841 1360.23,232.206 1360.79,232.577 1361.36,232.681 1361.93,231.88 1362.5,232.087 1363.07,230.191 1363.64,230.303 1364.2,228.303 1364.77,228.521 1365.34,229.027 1365.91,230.546 1366.48,231.93 1367.05,233.971 1367.61,232.054 1368.18,234.292 1368.75,236.329 1369.32,236.109 1369.89,236.911 1370.46,234.898 1371.02,235.769 1371.59,237.021 1372.16,237.864 1372.73,238.758 1373.3,237.558 1373.87,236.393 1374.43,235.373 1375,235.188 1375.57,234.201 1376.14,233.26 1376.71,233.205 1377.28,236.208 1377.84,236.669 1378.41,238.711 1378.98,238.368 1379.55,236.93 1380.12,236.649 1380.69,235.38 1381.25,236.23 1381.82,237.22 1382.39,238.932 1382.96,236.407 1383.53,238.221 1384.1,238.999 1384.66,237.437 1385.23,236.922 1385.8,237.752 1386.37,237.393 1386.94,237.124 1387.51,236.796 1388.07,239.491 1388.64,239.116 1389.21,237.642 1389.78,235.219 1390.35,233.936 1390.92,236.02 1391.48,235.909 1392.05,237.738 1392.62,238.659 1393.19,240.274 1393.76,239.755 1394.33,239.241 1394.89,238.852 1395.46,236.028 1396.03,234.731 1396.6,233.458 1397.17,233.412 1397.74,233.35 1398.3,235.309 1398.87,235.038 1399.44,235.989 1400.01,236.763 1400.58,236.43 1401.15,237.16 1401.71,237.784 1402.28,238.347 1402.85,236.641 1403.42,238.291 1403.99,237.761 1404.56,236.112 1405.13,234.591 1405.69,233.267 1406.26,233.181 1406.83,232.938 1407.4,233.636 1407.97,233.651 1408.54,232.479 1409.1,232.284 1409.67,231.104 1410.24,231.04 1410.81,230.905 1411.38,229.902 1411.95,231.822 1412.51,231.694 1413.08,230.463 1413.65,229.618 1414.22,230.877 1414.79,228.877 1415.36,228.144 1415.92,226.224 1416.49,226.596 1417.06,226.839 1417.63,228.275 1418.2,228.394 1418.77,228.582 1419.33,230.581 1419.9,229.784 1420.47,228.839 1421.04,231.229 1421.61,230.383 1422.18,228.821 1422.74,227.853 1423.31,225.989 1423.88,225.496 1424.45,226.159 1425.02,226.768 1425.59,228.378 1426.15,229.021 1426.72,227.326 1427.29,227.764 1427.86,228.258 1428.43,227.516 1429,228.021 1429.56,227.436 1430.13,226.899 1430.7,229.528 1431.27,229.948 1431.84,229.22 1432.41,232.591 1432.97,230.881 1433.54,232.822 1434.11,233.6 1434.68,232.704 1435.25,232.814 1435.82,232.897 1436.38,233.074 1436.95,232.999 1437.52,232.266 1438.09,233.029 1438.66,233.202 1439.23,231.349 1439.79,233.645 1440.36,233.692 1440.93,230.634 1441.5,231.098 1442.07,232.299 1442.64,232.453 1443.2,233.491 1443.77,232.629 1444.34,232.851 1444.91,232.781 1445.48,231.973 1446.05,230.139 1446.61,229.691 1447.18,228.963 1447.75,225.396 1448.32,225.992 1448.89,228.845 1449.46,229.201 1450.02,229.721 1450.59,226.86 1451.16,227.619 1451.73,229.279 1452.3,229.805 1452.87,231.092 1453.43,231.372 1454,229.526 1454.57,234.13 1455.14,234.063 1455.71,234.275 1456.28,234.61 1456.84,233.494 1457.41,237.948 1457.98,238.615 1458.55,241.695 1459.12,241.293 1459.69,237.811 1460.25,237.506 1460.82,235.235 1461.39,236.059 1461.96,238.022 1462.53,239.022 1463.1,237.82 1463.66,237.784 1464.23,238.63 1464.8,237.181 1465.37,235.999 1465.94,239.814 1466.51,238.206 1467.07,238.955 1467.64,239.729 1468.21,239.742 1468.78,237.214 1469.35,238.051 1469.92,240.932 1470.48,239.74 1471.05,238.289 1471.62,239.097 1472.19,240.658 1472.76,239.034 1473.33,237.709 1473.89,235.417 1474.46,233.131 1475.03,234.016 1475.6,233.642 1476.17,232.564 1476.74,233.703 1477.31,234.763 1477.87,233.473 1478.44,234.355 1479.01,237.326 1479.58,237.173 1480.15,236.944 1480.72,235.762 1481.28,237.531 1481.85,238.105 1482.42,239.86 1482.99,238.336 1483.56,236.663 1484.13,237.26 1484.69,236.872 1485.26,237.535 1485.83,235.842 1486.4,236.773 1486.97,235.216 1487.54,236.293 1488.1,235.928 1488.67,233.373 1489.24,232.185 1489.81,231.155 1490.38,233.049 1490.95,231.842 1491.51,230.826 1492.08,230.768 1492.65,230.725 1493.22,230.775 1493.79,225.812 1494.36,226.223 1494.92,226.637 1495.49,227.092 1496.06,230.55 1496.63,230.562 1497.2,230.691 1497.77,231.908 1498.33,234.912 1498.9,235.613 1499.47,236.204 1500.04,236.991 1500.61,237.533 1501.18,236.941 1501.74,235.655 1502.31,234.209 1502.88,234.225 1503.45,234.958 1504.02,235.57 1504.59,234.37 1505.15,234.2 1505.72,232.949 1506.29,234.86 1506.86,234.723 1507.43,234.607 1508,232.175 1508.56,232.19 1509.13,234.163 1509.7,234.961 1510.27,234.657 1510.84,232.465 1511.41,232.744 1511.97,233.818 1512.54,231.431 1513.11,233.554 1513.68,231.464 1514.25,232.63 1514.82,229.467 1515.38,225.592 1515.95,226.956 1516.52,230.376 1517.09,229.452 1517.66,229.734 1518.23,230.032 1518.79,230.245 1519.36,229.584 1519.93,229.824 1520.5,230.01 1521.07,230.177 1521.64,232.458 1522.2,235.449 1522.77,233.301 1523.34,233.475 1523.91,234.646 1524.48,232.529 1525.05,234.423 1525.61,233.179 1526.18,232.995 1526.75,233.907 1527.32,231.926 1527.89,231.147 1528.46,229.133 1529.02,228.254 1529.59,227.669 1530.16,228.17 1530.73,227.441 1531.3,227.768 1531.87,228.225 1532.43,227.707 1533,226.131 1533.57,226.461 1534.14,228.014 1534.71,229.564 1535.28,228.788 1535.84,228.172 1536.41,228.637 1536.98,227.988 1537.55,228.544 1538.12,231.11 1538.69,231.246 1539.25,231.272 1539.82,231.538 1540.39,232.717 1540.96,234.931 1541.53,233.916 1542.1,236.078 1542.66,235.951 1543.23,235.476 1543.8,233.305 1544.37,234.476 1544.94,234.505 1545.51,234.298 1546.08,235.539 1546.64,235.393 1547.21,238.366 1547.78,238.894 1548.35,239.42 1548.92,238.767 1549.49,237.245 1550.05,237.958 1550.62,237.456 1551.19,236.909 1551.76,237.552 1552.33,238.3 1552.9,236.966 1553.46,236.854 1554.03,236.505 1554.6,236.227 1555.17,235.959 1555.74,236.76 1556.31,238.339 1556.87,237.883 1557.44,236.379 1558.01,234.028 1558.58,232.924 1559.15,228.801 1559.72,228.218 1560.28,231.686 1560.85,231.905 1561.42,230.341 1561.99,230.547 1562.56,231.898 1563.13,232.01 1563.69,230.08 1564.26,229.374 1564.83,229.922 1565.4,233.103 1565.97,235.127 1566.54,237.981 1567.1,237.498 1567.67,237.172 1568.24,236.983 1568.81,238.683 1569.38,238.484 1569.95,239.336 1570.51,238.76 1571.08,238.402 1571.65,238.018 1572.22,236.587 1572.79,237.236 1573.36,235.933 1573.92,235.772 1574.49,234.372 1575.06,232.117 1575.63,231.277 1576.2,231.57 1576.77,231.584 1577.33,234.815 1577.9,236.003 1578.47,231.662 1579.04,231.593 1579.61,231.585 1580.18,231.711 1580.74,231.6 1581.31,232.744 1581.88,234.854 1582.45,235.739 1583.02,234.576 1583.59,233.29 1584.15,233.926 1584.72,233.662 1585.29,234.295 1585.86,234.267 1586.43,234.157 1587,233.992 1587.56,233.884 1588.13,234.772 1588.7,234.407 1589.27,234.054 1589.84,231.935 1590.41,232.804 1590.97,235.126 1591.54,233.01 1592.11,233.997 1592.68,233.919 1593.25,233.762 1593.82,234.611 1594.38,237.431 1594.95,237.228 1595.52,234.872 1596.09,236.846 1596.66,234.635 1597.23,236.674 1597.79,237.214 1598.36,236.863 1598.93,237.432 1599.5,235.744 1600.07,234.267 1600.64,235.102 1601.2,235.893 1601.77,236.9 1602.34,237.483 1602.91,237.104 1603.48,233.871 1604.05,233.628 1604.61,231.372 1605.18,229.442 1605.75,229.782 1606.32,229.938 1606.89,231.055 1607.46,232.056 1608.02,234 1608.59,230.774 1609.16,231.889 1609.73,231.123 1610.3,233.089 1610.87,230.684 1611.43,229.612 1612,229.749 1612.57,229.019 1613.14,229.185 1613.71,229.426 1614.28,229.605 1614.84,229.022 1615.41,229.237 1615.98,231.332 1616.55,231.372 1617.12,231.622 1617.69,231.615 1618.26,232.687 1618.82,230.76 1619.39,229.966 1619.96,230.015 1620.53,231.033 1621.1,229.167 1621.67,228.375 1622.23,227.85 1622.8,228.366 1623.37,228.706 1623.94,226.926 1624.51,226.53 1625.08,227.976 1625.64,228.457 1626.21,229.885 1626.78,230.279 1627.35,230.752 1627.92,234.132 1628.49,232.982 1629.05,233.096 1629.62,233.031 1630.19,231.986 1630.76,232.086 1631.33,233.133 1631.9,231.216 1632.46,232.47 1633.03,231.405 1633.6,230.563 1634.17,229.832 1634.74,230.043 1635.31,230.44 1635.87,230.562 1636.44,228.733 1637.01,228.941 1637.58,231.028 1638.15,231.412 1638.72,232.74 1639.28,232.609 1639.85,232.628 1640.42,230.695 1640.99,231.985 1641.56,232.009 1642.13,230.308 1642.69,227.341 1643.26,230.974 1643.83,230.117 1644.4,229.308 1644.97,229.709 1645.54,228.621 1646.1,228.128 1646.67,228.562 1647.24,229.886 1647.81,229.155 1648.38,229.673 1648.95,229.109 1649.51,229.445 1650.08,229.931 1650.65,232.178 1651.22,232.106 1651.79,232.337 1652.36,230.517 1652.92,229.739 1653.49,232.08 1654.06,230.103 1654.63,232.597 1655.2,232.777 1655.77,235.188 1656.33,236.222 1656.9,236.286 1657.47,237.109 1658.04,239.801 1658.61,239.518 1659.18,238.097 1659.74,236.699 1660.31,234.77 1660.88,235.815 1661.45,236.889 1662.02,236.834 1662.59,237.853 1663.15,238.513 1663.72,241.297 1664.29,239.62 1664.86,237.316 1665.43,236.235 1666,237.037 1666.56,238.884 1667.13,238.421 1667.7,238.126 1668.27,238.847 1668.84,238.563 1669.41,238.338 1669.97,238.806 1670.54,238.525 1671.11,237.104 1671.68,235.941 1672.25,233.729 1672.82,233.666 1673.38,232.589 1673.95,231.543 1674.52,230.542 1675.09,232.786 1675.66,230.814 1676.23,229.13 1676.79,226.474 1677.36,227.888 1677.93,227.362 1678.5,227.193 1679.07,228.514 1679.64,226.868 1680.2,226.385 1680.77,227.183 1681.34,228.911 1681.91,231.337 1682.48,231.728 1683.05,229.913 1683.61,228.219 1684.18,230.851 1684.75,228.962 1685.32,229.179 1685.89,230.616 1686.46,229.851 1687.02,229.284 1687.59,228.577 1688.16,229.781 1688.73,231.123 1689.3,229.266 1689.87,228.67 1690.44,229.125 1691,229.638 1691.57,234.011 1692.14,234.94 1692.71,232.801 1693.28,231.873 1693.85,232.012 1694.41,231.422 1694.98,232.559 1695.55,232.816 1696.12,232.105 1696.69,233.254 1697.26,235.69 1697.82,235.772 1698.39,238.809 1698.96,236.471 1699.53,237.362 1700.1,238.393 1700.67,237.755 1701.23,236.525 1701.8,236.417 1702.37,238.499 1702.94,239.286 1703.51,239.046 1704.08,237.782 1704.64,237.474 1705.21,237.262 1705.78,237.929 1706.35,236.614 1706.92,236.4 1707.49,237.138 1708.05,236.937 1708.62,238.663 1709.19,237.142 1709.76,235.728 1710.33,235.597 1710.9,237.558 1711.46,236.37 1712.03,237.29 1712.6,238 1713.17,237.602 1713.74,235.066 1714.31,231.651 1714.87,231.563 1715.44,233.782 1716.01,232.727 1716.58,231.855 1717.15,233.168 1717.72,232.057 1718.28,234.415 1718.85,234.358 1719.42,235.679 1719.99,234.365 1720.56,234.369 1721.13,234.321 1721.69,234.346 1722.26,232.191 1722.83,234.307 1723.4,236.422 1723.97,236.125 1724.54,235.876 1725.1,235.557 1725.67,235.377 1726.24,234.234 1726.81,235.087 1727.38,235.01 1727.95,234.781 1728.51,232.378 1729.08,233.413 1729.65,234.611 1730.22,235.674 1730.79,236.491 1731.36,235.231 1731.92,234.878 1732.49,233.632 1733.06,232.442 1733.63,232.634 1734.2,234.813 1734.77,233.418 1735.33,234.527 1735.9,232.421 1736.47,233.296 1737.04,233.198 1737.61,233.043 1738.18,231.989 1738.74,234.132 1739.31,231.812 1739.88,233.037 1740.45,232.923 1741.02,230.933 1741.59,231.976 1742.15,233.066 1742.72,236.164 1743.29,236.979 1743.86,236.81 1744.43,236.568 1745,232.338 1745.56,233.51 1746.13,234.501 1746.7,233.586 1747.27,234.551 1747.84,235.557 1748.41,233.233 1748.97,235.562 1749.54,232.331 1750.11,233.301 1750.68,235.216 1751.25,234.912 1751.82,234.731 1752.38,235.622 1752.95,234.277 1753.52,234.171 1754.09,232.818 1754.66,231.596 1755.23,232.74 1755.79,234.903 1756.36,234.722 1756.93,235.76 1757.5,237.692 1758.07,238.263 1758.64,238.042 1759.21,236.606 1759.77,232.822 1760.34,233.808 1760.91,232.574 1761.48,232.581 1762.05,231.497 1762.62,231.732 1763.18,231.856 1763.75,235.15 1764.32,234.788 1764.89,232.322 1765.46,230.559 1766.03,230.584 1766.59,229.602 1767.16,229.958 1767.73,229.012 1768.3,229.367 1768.87,227.728 1769.44,231.189 1770,230.333 1770.57,231.39 1771.14,231.438 1771.71,230.472 1772.28,231.776 1772.85,230.757 1773.41,235.224 1773.98,233.096 1774.55,230.961 1775.12,230.014 1775.69,227.401 1776.26,231.164 1776.82,229.455 1777.39,230.574 1777.96,232.011 1778.53,232.2 1779.1,232.104 1779.67,233.086 1780.23,232.902 1780.8,232.953 1781.37,231.887 1781.94,232.818 1782.51,231.966 1783.08,230.952 1783.64,231.092 1784.21,230.432 1784.78,231.83 1785.35,233.302 1785.92,234.248 1786.49,233.046 1787.05,233.109 1787.62,235.309 1788.19,236.229 1788.76,233.856 1789.33,234.95 1789.9,232.977 1790.46,234.786 1791.03,233.847 1791.6,233.805 1792.17,230.742 1792.74,230.834 1793.31,230.82 1793.87,232.028 1794.44,232.054 1795.01,228.929 1795.58,230.237 1796.15,228.481 1796.72,232.213 1797.28,232.337 1797.85,233.503 1798.42,233.376 1798.99,232.531 1799.56,232.59 1800.13,233.323 1800.69,233.22 1801.26,233.365 1801.83,234.66 1802.4,234.75 1802.97,233.743 1803.54,232.716 1804.1,232.792 1804.67,232.852 1805.24,233.132 1805.81,231.063 1806.38,230.136 1806.95,229.232 1807.51,230.45 1808.08,232.761 1808.65,234.752 1809.22,234.65 1809.79,236.507 1810.36,234.35 1810.92,234.576 1811.49,234.461 1812.06,234.598 1812.63,235.586 1813.2,233.389 1813.77,233.532 1814.33,231.48 1814.9,229.482 1815.47,230.014 1816.04,232.549 1816.61,232.641 1817.18,232.887 1817.74,233.076 1818.31,233.191 1818.88,232.074 1819.45,233.396 1820.02,234.593 1820.59,234.392 1821.15,236.501 1821.72,236.377 1822.29,235.192 1822.86,233.91 1823.43,234.999 1824,233.068 1824.56,234.218 1825.13,235.192 1825.7,237.409 1826.27,236.046 1826.84,237.026 1827.41,236.65 1827.97,238.493 1828.54,238.031 1829.11,238.886 1829.68,239.199 1830.25,238.748 1830.82,238.272 1831.39,240.834 1831.95,239.135 1832.52,237.545 1833.09,238.105 1833.66,236.48 1834.23,235.267 1834.8,232.886 1835.36,232.818 1835.93,231.807 1836.5,232.958 1837.07,232.84 1837.64,233.718 1838.21,233.555 1838.77,233.642 1839.34,233.649 1839.91,234.667 1840.48,234.336 1841.05,234.241 1841.62,233.061 1842.18,232.959 1842.75,231.856 1843.32,231.628 1843.89,228.415 1844.46,228.844 1845.03,229.106 1845.59,232.372 1846.16,231.222 1846.73,232.428 1847.3,232.376 1847.87,232.403 1848.44,237.402 1849,238.11 1849.57,238.45 1850.14,238.009 1850.71,238.577 1851.28,237.923 1851.85,238.546 1852.41,236.954 1852.98,235.451 1853.55,237.233 1854.12,234.773 1854.69,233.437 1855.26,233.275 1855.82,233.273 1856.39,232.25 1856.96,229.268 1857.53,229.493 1858.1,230.737 1858.67,230.858 1859.23,231.918 1859.8,230.952 1860.37,233.273 1860.94,232.258 1861.51,233.258 1862.08,233.112 1862.64,233.069 1863.21,233.03 1863.78,232.969 1864.35,229.801 1864.92,227.934 1865.49,228.158 1866.05,228.448 1866.62,228.739 1867.19,228.853 1867.76,228.869 1868.33,231.107 1868.9,231.157 1869.46,230.064 1870.03,231.317 1870.6,230.418 1871.17,231.659 1871.74,233.948 1872.31,230.721 1872.87,229.91 1873.44,230.241 1874.01,229.625 1874.58,229.934 1875.15,230.197 1875.72,229.473 1876.28,229.661 1876.85,228.823 1877.42,229.384 1877.99,230.598 1878.56,229.862 1879.13,229.245 1879.69,226.455 1880.26,228.081 1880.83,229.515 1881.4,229.943 1881.97,229.244 1882.54,230.583 1883.1,231.969 1883.67,232.14 1884.24,233.389 1884.81,231.587 1885.38,232.836 1885.95,233.987 1886.51,233.071 1887.08,234.258 1887.65,232.23 1888.22,231.299 1888.79,231.456 1889.36,232.65 1889.92,230.697 1890.49,232.006 1891.06,231.742 1891.63,232.869 1892.2,231.783 1892.77,234.125 1893.33,235.066 1893.9,235.023 1894.47,235.934 1895.04,234.821 1895.61,235.846 1896.18,233.523 1896.74,234.606 1897.31,235.664 1897.88,236.732 1898.45,235.712 1899.02,229.56 1899.59,231.013 1900.16,232.345 1900.72,231.524 1901.29,232.695 1901.86,232.618 1902.43,230.845 1903,231.186 1903.57,231.195 1904.13,232.622 1904.7,235.045 1905.27,233.002 1905.84,234.267 1906.41,233.155 1906.98,234.966 1907.54,235.923 1908.11,236.838 1908.68,236.825 1909.25,234.404 1909.82,233.346 1910.39,234.326 1910.95,233.212 1911.52,231.339 1912.09,231.551 1912.66,232.701 1913.23,231.967 1913.8,233.972 1914.36,233.075 1914.93,231.136 1915.5,230.305 1916.07,231.526 1916.64,231.595 1917.21,229.552 1917.77,228.858 1918.34,229.619 1918.91,228.948 1919.48,227.234 1920.05,229.773 1920.62,231.343 1921.18,231.854 1921.75,231.867 1922.32,233.852 1922.89,233.986 1923.46,235.107 1924.03,235.053 1924.59,235.041 1925.16,234.897 1925.73,234.932 1926.3,236.922 1926.87,237.622 1927.44,237.519 1928,237.675 1928.57,235.349 1929.14,234.126 1929.71,231.972 1930.28,232.186 1930.85,234.524 1931.41,237.265 1931.98,238.118 1932.55,238.805 1933.12,239.399 1933.69,241.106 1934.26,240.374 1934.82,239.955 1935.39,239.47 1935.96,237.875 1936.53,237.598 1937.1,237.274 1937.67,236.937 1938.23,236.679 1938.8,236.522 1939.37,236.1 1939.94,236.88 1940.51,235.726 1941.08,235.36 1941.64,235.101 1942.21,233.873 1942.78,233.665 1943.35,235.823 1943.92,235.79 1944.49,234.68 1945.05,233.586 1945.62,231.401 1946.19,231.637 1946.76,233.748 1947.33,233.753 1947.9,234.512 1948.46,233.3 1949.03,231.184 1949.6,232.341 1950.17,235.609 1950.74,234.342 1951.31,236.414 1951.87,239.276 1952.44,236.656 1953.01,236.278 1953.58,235.981 1954.15,235.722 1954.72,235.396 1955.28,234.248 1955.85,231.944 1956.42,231.871 1956.99,231.87 1957.56,234.094 1958.13,233.868 1958.69,232.713 1959.26,233.861 1959.83,232.856 1960.4,232.794 1960.97,232.706 1961.54,233.525 1962.1,234.574 1962.67,236.596 1963.24,236.324 1963.81,236.993 1964.38,237.848 1964.95,235.462 1965.51,233.29 1966.08,234.304 1966.65,236.143 1967.22,238.006 1967.79,236.536 1968.36,237.176 1968.92,235.884 1969.49,234.624 1970.06,235.489 1970.63,235.427 1971.2,232.971 1971.77,234.088 1972.34,233.91 1972.9,233.856 1973.47,234.763 1974.04,235.739 1974.61,236.744 1975.18,235.314 1975.75,236.143 1976.31,235.751 1976.88,233.292 1977.45,234.094 1978.02,232.734 1978.59,233.681 1979.16,234.342 1979.72,235.133 1980.29,235.761 1980.86,234.348 1981.43,234.003 1982,233.939 1982.57,232.485 1983.13,234.599 1983.7,232.442 1984.27,232.41 1984.84,232.116 1985.41,231.998 1985.98,228.882 1986.54,227.05 1987.11,224.209 1987.68,223.847 1988.25,223.231 1988.82,223.679 1989.39,221.265 1989.95,221.108 1990.52,221.081 1991.09,219.895 1991.66,223.923 1992.23,223.349 1992.8,225.011 1993.36,225.451 1993.93,227.046 1994.5,226.276 1995.07,226.682 1995.64,228.239 1996.21,230.699 1996.77,230.976 1997.34,229.055 1997.91,228.531 1998.48,229.837 1999.05,229.089 1999.62,229.462 2000.18,229.539 2000.75,231.045 2001.32,234.267 2001.89,233.363 2002.46,233.397 2003.03,233.668 2003.59,231.831 2004.16,232.132 2004.73,232.388 2005.3,231.598 2005.87,232.642 2006.44,230.712 2007,230.054 2007.57,228.997 2008.14,229.39 2008.71,230.949 2009.28,234.254 2009.85,234.375 2010.41,235.34 2010.98,235.08 2011.55,234.87 2012.12,235.046 2012.69,235.116 2013.26,235.12 2013.82,233.859 2014.39,234.058 2014.96,235.119 2015.53,237.084 2016.1,235.969 2016.67,236.916 2017.23,237.749 2017.8,236.545 2018.37,238.654 2018.94,240.515 2019.51,242.211 2020.08,241.371 2020.64,240.748 2021.21,242.228 2021.78,240.577 2022.35,239.978 2022.92,239.634 2023.49,238.197 2024.05,238.907 2024.62,238.37 2025.19,236.931 2025.76,237.582 2026.33,237.235 2026.9,235.96 2027.46,237.61 2028.03,232.935 2028.6,232.81 2029.17,228.804 2029.74,230.153 2030.31,229.386 2030.87,230.955 2031.44,232.153 2032.01,232.958 2032.58,233.053 2033.15,229.743 2033.72,228.954 2034.28,230.515 2034.85,230.808 2035.42,229.906 2035.99,231.053 2036.56,232.234 2037.13,229.978 2037.69,230.269 2038.26,229.494 2038.83,230.74 2039.4,228.925 2039.97,230.283 2040.54,232.36 2041.11,234.635 2041.67,233.666 2042.24,233.834 2042.81,233.642 2043.38,233.526 2043.95,236.584 2044.52,239.597 2045.08,238.124 2045.65,238.87 2046.22,238.563 2046.79,235.847 2047.36,235.771 2047.93,234.657 2048.49,234.622 2049.06,235.788 2049.63,236.845 2050.2,236.668 2050.77,234.157 2051.34,232.998 2051.9,231.955 2052.47,232.952 2053.04,232.953 2053.61,232.816 2054.18,233.909 2054.75,234.908 2055.31,233.741 2055.88,235.648 2056.45,234.463 2057.02,234.233 2057.59,234.233 2058.16,232.943 2058.72,233.972 2059.29,232.759 2059.86,232.99 2060.43,233.977 2061,234.91 2061.57,234.585 2062.13,234.319 2062.7,232.114 2063.27,231.99 2063.84,233.252 2064.41,232.981 2064.98,233.989 2065.54,233.85 2066.11,234.657 2066.68,234.525 2067.25,235.194 2067.82,237.072 2068.39,237.972 2068.95,236.399 2069.52,235.019 2070.09,234.819 2070.66,232.722 2071.23,232.697 2071.8,232.666 2072.36,230.721 2072.93,231.03 2073.5,229.137 2074.07,229.155 2074.64,229.528 2075.21,228.774 2075.77,230.962 2076.34,233.105 2076.91,231.253 2077.48,230.401 2078.05,230.499 2078.62,229.856 2079.18,229.953 2079.75,231.216 2080.32,232.384 2080.89,231.238 2081.46,230.322 2082.03,229.49 2082.59,231.06 2083.16,232.036 2083.73,232.344 2084.3,233.374 2084.87,232.527 2085.44,232.76 2086,232.854 2086.57,234.022 2087.14,231.926 2087.71,231.952 2088.28,230.123 2088.85,228.182 2089.41,226.709 2089.98,228.315 2090.55,228.717 2091.12,230.126 2091.69,229.407 2092.26,230.889 2092.82,230.874 2093.39,230.193 2093.96,231.406 2094.53,231.408 2095.1,231.797 2095.67,234.125 2096.23,233.163 2096.8,236.32 2097.37,234.238 2097.94,235.075 2098.51,232.983 2099.08,236.272 2099.64,237.264 2100.21,240.154 2100.78,238.885 2101.35,238.709 2101.92,237.488 2102.49,239.369 2103.05,238.859 2103.62,238.474 2104.19,237.998 2104.76,236.534 2105.33,233.092 2105.9,232.071 2106.46,231.164 2107.03,232.305 2107.6,232.448 2108.17,231.19 2108.74,231.367 2109.31,230.261 2109.87,227.47 2110.44,227.931 2111.01,229.223 2111.58,228.599 2112.15,227.077 2112.72,227.69 2113.29,230.234 2113.85,231.64 2114.42,234.017 2114.99,231.814 2115.56,233.078 2116.13,234.3 2116.7,233.158 2117.26,231.044 2117.83,230.337 2118.4,229.734 2118.97,230.931 2119.54,231.157 2120.11,231.522 2120.67,228.667 2121.24,230.032 2121.81,230.7 2122.38,232.98 2122.95,231.963 2123.52,231.174 2124.08,231.569 2124.65,231.814 2125.22,230.853 2125.79,229.972 2126.36,232.25 2126.93,232.531 2127.49,231.638 2128.06,231.775 2128.63,231.761 2129.2,232.023 2129.77,233.217 2130.34,236.348 2130.9,235.42 2131.47,235.315 2132.04,235.362 2132.61,234.341 2133.18,237.681 2133.75,237.363 2134.31,239.386 2134.88,236.846 2135.45,236.723 2136.02,235.229 2136.59,234.927 2137.16,235.043 2137.72,234.874 2138.29,233.581 2138.86,232.606 2139.43,233.685 2140,235.7 2140.57,235.388 2141.13,234.238 2141.7,234.046 2142.27,234.125 2142.84,233.243 2143.41,234.203 2143.98,235.242 2144.54,237.267 2145.11,238.876 2145.68,238.538 2146.25,236.127 2146.82,235.101 2147.39,234.057 2147.95,235.281 2148.52,235.128 2149.09,235.012 2149.66,235.994 2150.23,238.893 2150.8,237.535 2151.36,237.188 2151.93,236.786 2152.5,237.399 2153.07,236.049 2153.64,233.619 2154.21,233.7 2154.77,234.606 2155.34,234.588 2155.91,234.411 2156.48,234.417 2157.05,233.376 2157.62,235.354 2158.18,234.959 2158.75,232.884 2159.32,233.997 2159.89,233.718 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ¬± 0.023\n  with uncertainty of ¬± 0.0020928560336772304\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01533 ¬± (0.00221469, 0.00223535) (MC)\n  95% confidence interval: [-4.01968, -4.01068]) (MC)\n  linear error propagation: -4.01535 ¬± 0.00224983\n  |Œ¥_y| = |0.00121021| (‚â§ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015327463146285, val_l = 0.004348818802085042, val_u = 0.004648223931179807)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip500\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip501\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip500)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip502\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1139.8 2211.02,1139.8 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,960.347 2211.02,960.347 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,780.898 2211.02,780.898 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,601.449 2211.02,601.449 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,422 2211.02,422 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,242.551 2211.02,242.551 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1139.8 365.751,1139.8 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,960.347 365.751,960.347 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,780.898 365.751,780.898 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,601.449 365.751,601.449 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,422 365.751,422 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,242.551 365.751,242.551 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M298.909 1125.59 Q295.298 1125.59 293.469 1129.16 Q291.664 1132.7 291.664 1139.83 Q291.664 1146.94 293.469 1150.5 Q295.298 1154.04 298.909 1154.04 Q302.543 1154.04 304.349 1150.5 Q306.177 1146.94 306.177 1139.83 Q306.177 1132.7 304.349 1129.16 Q302.543 1125.59 298.909 1125.59 M298.909 1121.89 Q304.719 1121.89 307.775 1126.5 Q310.853 1131.08 310.853 1139.83 Q310.853 1148.56 307.775 1153.16 Q304.719 1157.75 298.909 1157.75 Q293.099 1157.75 290.02 1153.16 Q286.964 1148.56 286.964 1139.83 Q286.964 1131.08 290.02 1126.5 Q293.099 1121.89 298.909 1121.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M259.557 973.692 L267.196 973.692 L267.196 947.326 L258.886 948.993 L258.886 944.733 L267.15 943.067 L271.826 943.067 L271.826 973.692 L279.465 973.692 L279.465 977.627 L259.557 977.627 L259.557 973.692 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 946.145 Q295.298 946.145 293.469 949.71 Q291.664 953.252 291.664 960.381 Q291.664 967.488 293.469 971.053 Q295.298 974.594 298.909 974.594 Q302.543 974.594 304.349 971.053 Q306.177 967.488 306.177 960.381 Q306.177 953.252 304.349 949.71 Q302.543 946.145 298.909 946.145 M298.909 942.442 Q304.719 942.442 307.775 947.048 Q310.853 951.631 310.853 960.381 Q310.853 969.108 307.775 973.715 Q304.719 978.298 298.909 978.298 Q293.099 978.298 290.02 973.715 Q286.964 969.108 286.964 960.381 Q286.964 951.631 290.02 947.048 Q293.099 942.442 298.909 942.442 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M262.775 794.243 L279.094 794.243 L279.094 798.178 L257.15 798.178 L257.15 794.243 Q259.812 791.488 264.395 786.858 Q269.002 782.206 270.182 780.863 Q272.428 778.34 273.307 776.604 Q274.21 774.845 274.21 773.155 Q274.21 770.4 272.266 768.664 Q270.344 766.928 267.242 766.928 Q265.043 766.928 262.59 767.692 Q260.159 768.456 257.381 770.007 L257.381 765.284 Q260.205 764.15 262.659 763.571 Q265.113 762.993 267.15 762.993 Q272.52 762.993 275.715 765.678 Q278.909 768.363 278.909 772.854 Q278.909 774.983 278.099 776.905 Q277.312 778.803 275.205 781.395 Q274.627 782.067 271.525 785.284 Q268.423 788.479 262.775 794.243 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 766.696 Q295.298 766.696 293.469 770.261 Q291.664 773.803 291.664 780.933 Q291.664 788.039 293.469 791.604 Q295.298 795.145 298.909 795.145 Q302.543 795.145 304.349 791.604 Q306.177 788.039 306.177 780.933 Q306.177 773.803 304.349 770.261 Q302.543 766.696 298.909 766.696 M298.909 762.993 Q304.719 762.993 307.775 767.599 Q310.853 772.183 310.853 780.933 Q310.853 789.659 307.775 794.266 Q304.719 798.849 298.909 798.849 Q293.099 798.849 290.02 794.266 Q286.964 789.659 286.964 780.933 Q286.964 772.183 290.02 767.599 Q293.099 762.993 298.909 762.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M272.914 600.095 Q276.27 600.812 278.145 603.081 Q280.043 605.349 280.043 608.683 Q280.043 613.798 276.525 616.599 Q273.006 619.4 266.525 619.4 Q264.349 619.4 262.034 618.96 Q259.742 618.544 257.289 617.687 L257.289 613.173 Q259.233 614.308 261.548 614.886 Q263.863 615.465 266.386 615.465 Q270.784 615.465 273.076 613.729 Q275.39 611.993 275.39 608.683 Q275.39 605.627 273.238 603.914 Q271.108 602.178 267.289 602.178 L263.261 602.178 L263.261 598.335 L267.474 598.335 Q270.923 598.335 272.752 596.97 Q274.58 595.581 274.58 592.988 Q274.58 590.326 272.682 588.914 Q270.807 587.479 267.289 587.479 Q265.367 587.479 263.168 587.896 Q260.969 588.312 258.33 589.192 L258.33 585.025 Q260.992 584.285 263.307 583.914 Q265.645 583.544 267.705 583.544 Q273.029 583.544 276.131 585.974 Q279.233 588.382 279.233 592.502 Q279.233 595.373 277.59 597.363 Q275.946 599.331 272.914 600.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 587.248 Q295.298 587.248 293.469 590.812 Q291.664 594.354 291.664 601.484 Q291.664 608.59 293.469 612.155 Q295.298 615.696 298.909 615.696 Q302.543 615.696 304.349 612.155 Q306.177 608.59 306.177 601.484 Q306.177 594.354 304.349 590.812 Q302.543 587.248 298.909 587.248 M298.909 583.544 Q304.719 583.544 307.775 588.15 Q310.853 592.734 310.853 601.484 Q310.853 610.21 307.775 614.817 Q304.719 619.4 298.909 619.4 Q293.099 619.4 290.02 614.817 Q286.964 610.21 286.964 601.484 Q286.964 592.734 290.02 588.15 Q293.099 583.544 298.909 583.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M271.594 408.794 L259.789 427.243 L271.594 427.243 L271.594 408.794 M270.367 404.72 L276.247 404.72 L276.247 427.243 L281.177 427.243 L281.177 431.132 L276.247 431.132 L276.247 439.28 L271.594 439.28 L271.594 431.132 L255.992 431.132 L255.992 426.618 L270.367 404.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 407.799 Q295.298 407.799 293.469 411.363 Q291.664 414.905 291.664 422.035 Q291.664 429.141 293.469 432.706 Q295.298 436.248 298.909 436.248 Q302.543 436.248 304.349 432.706 Q306.177 429.141 306.177 422.035 Q306.177 414.905 304.349 411.363 Q302.543 407.799 298.909 407.799 M298.909 404.095 Q304.719 404.095 307.775 408.701 Q310.853 413.285 310.853 422.035 Q310.853 430.761 307.775 435.368 Q304.719 439.951 298.909 439.951 Q293.099 439.951 290.02 435.368 Q286.964 430.761 286.964 422.035 Q286.964 413.285 290.02 408.701 Q293.099 404.095 298.909 404.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M258.793 225.271 L277.15 225.271 L277.15 229.206 L263.076 229.206 L263.076 237.678 Q264.094 237.331 265.113 237.169 Q266.131 236.984 267.15 236.984 Q272.937 236.984 276.316 240.155 Q279.696 243.326 279.696 248.743 Q279.696 254.322 276.224 257.424 Q272.752 260.502 266.432 260.502 Q264.256 260.502 261.988 260.132 Q259.742 259.762 257.335 259.021 L257.335 254.322 Q259.418 255.456 261.641 256.012 Q263.863 256.567 266.34 256.567 Q270.344 256.567 272.682 254.461 Q275.02 252.354 275.02 248.743 Q275.02 245.132 272.682 243.026 Q270.344 240.919 266.34 240.919 Q264.465 240.919 262.59 241.336 Q260.738 241.752 258.793 242.632 L258.793 225.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M298.909 228.35 Q295.298 228.35 293.469 231.915 Q291.664 235.456 291.664 242.586 Q291.664 249.692 293.469 253.257 Q295.298 256.799 298.909 256.799 Q302.543 256.799 304.349 253.257 Q306.177 249.692 306.177 242.586 Q306.177 235.456 304.349 231.915 Q302.543 228.35 298.909 228.35 M298.909 224.646 Q304.719 224.646 307.775 229.252 Q310.853 233.836 310.853 242.586 Q310.853 251.313 307.775 255.919 Q304.719 260.502 298.909 260.502 Q293.099 260.502 290.02 255.919 Q286.964 251.313 286.964 242.586 Q286.964 233.836 290.02 229.252 Q293.099 224.646 298.909 224.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip502)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1007.57 400.199,886.1 400.786,774.644 401.372,672.533 401.958,710.025 402.545,620.655 403.131,648.731 403.718,566.363 404.304,493.515 404.891,521.306 405.477,542.951 406.063,557.534 406.65,493.705 407.236,505.03 407.823,515.335 408.409,459.477 408.995,411.235 409.582,421.844 410.168,378.588 410.755,342.057 411.341,307.48 411.927,322.65 412.514,296.953 413.1,272.709 413.687,253.218 414.273,234.811 414.86,219.895 415.446,238.777 416.032,255.19 416.619,298.369 417.205,312.387 417.792,326.283 418.378,339.584 418.964,329.935 419.551,323.484 420.137,320.186 420.724,335.761 421.31,333.601 421.896,365.082 422.483,379.642 423.069,378.383 423.656,379.811 424.242,396.356 424.829,437.358 425.415,438.869 426.001,440.993 426.588,445.277 427.174,460.169 427.761,465.82 428.347,491.147 428.933,506.534 429.52,513.527 430.106,536.198 430.693,550.159 431.279,572.435 431.865,594.323 432.452,600.509 433.038,633.948 433.625,658.064 434.211,663.335 434.798,674.388 435.384,680.19 435.97,691.84 436.557,703.406 437.143,719.736 437.73,730.796 438.316,736.499 438.902,742.276 439.489,757.904 440.075,776.891 440.662,787.318 441.248,793.664 441.835,799.277 442.421,816.614 443.007,830.4 443.594,843.809 444.18,849.835 444.767,869.572 445.353,878.273 445.939,887.07 446.526,898.847 447.112,907.023 447.699,914.773 448.285,919.988 448.871,928.319 449.458,935.865 450.044,946.365 450.631,954.09 451.217,958.53 451.804,968.408 452.39,976.128 452.976,983.446 453.563,993.15 454.149,1002.67 454.736,1013.75 455.322,1025.1 455.908,1030.66 456.495,1041.01 457.081,1046.71 457.668,1054.37 458.254,1059.43 458.84,1064.72 459.427,1069.56 460.013,1076.62 460.6,1078.93 461.186,1083.61 461.773,1090.56 462.359,1092.83 462.945,1095.21 463.532,1095.56 464.118,1098.19 464.705,1106.92 465.291,1113.71 465.877,1119.97 466.464,1121.91 467.05,1125.82 467.637,1125.73 468.223,1129.95 468.809,1133.64 469.396,1141.35 469.982,1149.26 470.569,1158.2 471.155,1159.95 471.742,1162.72 472.328,1166.03 472.914,1167.4 473.501,1170.29 474.087,1171.22 474.674,1176.1 475.26,1182.27 475.846,1182.72 476.433,1187.17 477.019,1187.73 477.606,1188.32 478.192,1187.3 478.778,1191.63 479.365,1192.58 479.951,1194.76 480.538,1200.47 481.124,1202.79 481.711,1202.96 482.297,1208.54 482.883,1207.05 483.47,1210.69 484.056,1212.63 484.643,1214.16 485.229,1210.85 485.815,1212.84 486.402,1214.72 486.988,1216.4 487.575,1217.89 488.161,1219.24 488.748,1220.87 489.334,1224.17 489.92,1225.64 490.507,1223.6 491.093,1226.46 491.68,1232.25 492.266,1234.91 492.852,1235.99 493.439,1238.37 494.025,1237.43 494.612,1238.05 495.198,1242.3 495.784,1243.01 496.371,1242.07 496.957,1244.35 497.544,1243.26 498.13,1239.5 498.717,1238.52 499.303,1236.12 499.889,1235.53 500.476,1234.54 501.062,1235.75 501.649,1235.09 502.235,1234.41 502.821,1235.5 503.408,1236.67 503.994,1236.2 504.581,1235.81 505.167,1235.17 505.753,1236.15 506.34,1235.8 506.926,1237.27 507.513,1238.44 508.099,1236.35 508.686,1236.09 509.272,1235.68 509.858,1237.1 510.445,1233.57 511.031,1232.34 511.618,1234.21 512.204,1234.05 512.79,1234.13 513.377,1235.38 513.963,1236.68 514.55,1240.7 515.136,1238.79 515.722,1238.59 516.309,1242.67 516.895,1245.22 517.482,1249.15 518.068,1249.64 518.655,1248.4 519.241,1245.92 519.827,1245.32 520.414,1247.58 521,1246.62 521.587,1245.85 522.173,1245.22 522.759,1243.01 523.346,1243.61 523.932,1242.53 524.519,1243.7 525.105,1244.69 525.691,1240.71 526.278,1243.01 526.864,1243.85 527.451,1247.56 528.037,1247.07 528.624,1247.74 529.21,1248.49 529.796,1247.52 530.383,1245.01 530.969,1242.79 531.556,1243.45 532.142,1242.92 532.728,1241.06 533.315,1238.85 533.901,1236.82 534.488,1238.12 535.074,1240.7 535.661,1241.56 536.247,1241.07 536.833,1241.95 537.42,1241.26 538.006,1237.54 538.593,1237.12 539.179,1236.7 539.765,1237.88 540.352,1237.81 540.938,1234.22 541.525,1239.86 542.111,1239.7 542.697,1239.47 543.284,1243.57 543.87,1242.57 544.457,1241.82 545.043,1241 545.63,1239.96 546.216,1238.23 546.802,1233.67 547.389,1234.74 547.975,1237.69 548.562,1238.83 549.148,1239.94 549.734,1241.14 550.321,1245.1 550.907,1244.31 551.494,1241.98 552.08,1247.07 552.666,1247.45 553.253,1249.55 553.839,1250.02 554.426,1247.65 555.012,1247.98 555.599,1249.79 556.185,1250.08 556.771,1250.53 557.358,1247.98 557.944,1248.56 558.531,1244.7 559.117,1244.08 559.703,1244.5 560.29,1240.56 560.876,1238.71 561.463,1239.34 562.049,1240.1 562.635,1241.01 563.222,1239.19 563.808,1238.49 564.395,1239.62 564.981,1239.16 565.568,1242.78 566.154,1244.94 566.74,1246.74 567.327,1246.93 567.913,1245.83 568.5,1245.13 569.086,1244.15 569.672,1244.79 570.259,1239.45 570.845,1240.11 571.432,1240.87 572.018,1244.54 572.605,1240.56 573.191,1239.84 573.777,1240.87 574.364,1241.5 574.95,1237.74 575.537,1235.78 576.123,1235.22 576.709,1232.17 577.296,1230.18 577.882,1227.28 578.469,1228.48 579.055,1228.25 579.641,1229.69 580.228,1231.29 580.814,1232.16 581.401,1228.68 581.987,1232.68 582.574,1229.19 583.16,1229.14 583.746,1227.02 584.333,1230.05 584.919,1229.75 585.506,1226.75 586.092,1228.3 586.678,1227.95 587.265,1228.16 587.851,1230.93 588.438,1229.16 589.024,1231.89 589.61,1229.77 590.197,1231.14 590.783,1233.29 591.37,1232.79 591.956,1230.8 592.543,1229.17 593.129,1230.32 593.715,1232.86 594.302,1231.18 594.888,1229.59 595.475,1227.92 596.061,1229.37 596.647,1231.9 597.234,1230 597.82,1229.62 598.407,1228.03 598.993,1228.18 599.579,1229.46 600.166,1229 600.752,1229.96 601.339,1229.9 601.925,1228.4 602.512,1228.06 603.098,1229.05 603.684,1231.45 604.271,1232.78 604.857,1233.69 605.444,1233.27 606.03,1232.3 606.616,1231.88 607.203,1229.88 607.789,1228.22 608.376,1225.25 608.962,1225.44 609.548,1225.29 610.135,1228.05 610.721,1230.73 611.308,1228.53 611.894,1232.8 612.481,1232.52 613.067,1229.26 613.653,1228.68 614.24,1226.96 614.826,1225.32 615.413,1225.31 615.999,1225.26 616.585,1228.3 617.172,1228.38 617.758,1229.41 618.345,1231.8 618.931,1226.94 619.518,1223.7 620.104,1225.08 620.69,1223.57 621.277,1225.28 621.863,1223.44 622.45,1221.97 623.036,1220.49 623.622,1223.74 624.209,1223.46 624.795,1220.49 625.382,1220.26 625.968,1221.64 626.554,1223.11 627.141,1221.3 627.727,1218.38 628.314,1216.98 628.9,1217.31 629.487,1217.23 630.073,1215.93 630.659,1216.19 631.246,1218.25 631.832,1218.42 632.419,1220.15 633.005,1220.47 633.591,1217.53 634.178,1214.67 634.764,1216.55 635.351,1216.79 635.937,1217.04 636.523,1220.46 637.11,1220.41 637.696,1220.61 638.283,1222.34 638.869,1220.8 639.456,1220.87 640.042,1219.66 640.628,1222.65 641.215,1225.51 641.801,1225.23 642.388,1226.48 642.974,1226.17 643.56,1227.34 644.147,1227.2 644.733,1226.85 645.32,1226.58 645.906,1226.7 646.492,1226.33 647.079,1224.33 647.665,1222.77 648.252,1224.27 648.838,1225.3 649.425,1223.71 650.011,1223.66 650.597,1222.24 651.184,1219.09 651.77,1222.43 652.357,1222.32 652.943,1225.29 653.529,1226.42 654.116,1224.83 654.702,1224.68 655.289,1219.89 655.875,1220.08 656.462,1221.32 657.048,1221.52 657.634,1219.96 658.221,1220.04 658.807,1219.99 659.394,1222.98 659.98,1224.48 660.566,1224.36 661.153,1224.11 661.739,1222.24 662.326,1221.79 662.912,1223.17 663.498,1223.14 664.085,1219.97 664.671,1222.8 665.258,1222.63 665.844,1217.81 666.431,1218.12 667.017,1218.2 667.603,1219.86 668.19,1219.47 668.776,1220.7 669.363,1217.61 669.949,1220.59 670.535,1217.99 671.122,1216.6 671.708,1216.7 672.295,1216.72 672.881,1220.09 673.467,1221.63 674.054,1218.58 674.64,1220.12 675.227,1221.6 675.813,1222.78 676.4,1223.97 676.986,1223.69 677.572,1221.76 678.159,1221.17 678.745,1222.35 679.332,1220.79 679.918,1219.2 680.504,1216.25 681.091,1216.52 681.677,1215.14 682.264,1215.2 682.85,1213.66 683.436,1218.49 684.023,1219.88 684.609,1217.14 685.196,1215.55 685.782,1217.03 686.369,1216.95 686.955,1218.23 687.541,1217.92 688.128,1216.6 688.714,1215.22 689.301,1218.22 689.887,1219.33 690.473,1217.74 691.06,1216.5 691.646,1218.18 692.233,1221 692.819,1219.43 693.405,1220.74 693.992,1216.09 694.578,1214.9 695.165,1213.56 695.751,1212.41 696.338,1212.8 696.924,1215.9 697.51,1221.87 698.097,1223.2 698.683,1226.99 699.27,1226.53 699.856,1225.65 700.442,1225.22 701.029,1221.7 701.615,1224.18 702.202,1222.62 702.788,1218.15 703.375,1218.19 703.961,1218.07 704.547,1219.77 705.134,1222.66 705.72,1223.86 706.307,1223.31 706.893,1223.06 707.479,1223.03 708.066,1221.11 708.652,1221.13 709.239,1220.82 709.825,1220.75 710.411,1222.08 710.998,1221.77 711.584,1224.51 712.171,1222.93 712.757,1220.92 713.344,1222.31 713.93,1224.88 714.516,1221.42 715.103,1221.42 715.689,1219.95 716.276,1219.75 716.862,1218.38 717.448,1215.24 718.035,1216.59 718.621,1215.45 719.208,1218.74 719.794,1217.19 720.38,1214.28 720.967,1217.33 721.553,1217.16 722.14,1209.45 722.726,1209.75 723.313,1212.14 723.899,1212.3 724.485,1211.07 725.072,1210.14 725.658,1210.63 726.245,1212.58 726.831,1214.68 727.417,1216.21 728.004,1216.75 728.59,1218.13 729.177,1218.45 729.763,1219.4 730.349,1221.03 730.936,1222.41 731.522,1223.35 732.109,1223.09 732.695,1226.01 733.282,1228.86 733.868,1226.82 734.454,1226.46 735.041,1227.79 735.627,1227.1 736.214,1226.62 736.8,1225.95 737.386,1223.89 737.973,1223.48 738.559,1222.97 739.146,1221.09 739.732,1219.54 740.318,1219.25 740.905,1218.97 741.491,1217.34 742.078,1218.67 742.664,1215.16 743.251,1212.06 743.837,1210.89 744.423,1210.08 745.01,1211.59 745.596,1214.5 746.183,1213.11 746.769,1214.64 747.355,1213.48 747.942,1216.43 748.528,1213.34 749.115,1214.81 749.701,1213.87 750.288,1214.04 750.874,1209.8 751.46,1210.25 752.047,1210.4 752.633,1211.97 753.22,1212.25 753.806,1212.44 754.392,1212.77 754.979,1216.02 755.565,1218.84 756.152,1214.6 756.738,1214.57 757.324,1213.08 757.911,1213.25 758.497,1213.2 759.084,1210.5 759.67,1208.11 760.257,1208.77 760.843,1210.67 761.429,1213.74 762.016,1210.63 762.602,1207.88 763.189,1208.45 763.775,1209.19 764.361,1209.4 764.948,1209.73 765.534,1207.01 766.121,1211.59 766.707,1211.91 767.293,1213.52 767.88,1219.15 768.466,1218.82 769.053,1217.69 769.639,1219.18 770.226,1218.86 770.812,1215.95 771.398,1214.55 771.985,1216.08 772.571,1213.4 773.158,1210.57 773.744,1210.78 774.33,1214.21 774.917,1215.68 775.503,1215.73 776.09,1223.02 776.676,1222.37 777.262,1223.51 777.849,1221.71 778.435,1221.08 779.022,1217.73 779.608,1218.86 780.195,1221.64 780.781,1221.36 781.367,1219.38 781.954,1219.15 782.54,1217.63 783.127,1214.7 783.713,1214.4 784.299,1212.66 784.886,1212.8 785.472,1213.28 786.059,1211.79 786.645,1211.96 787.232,1211.83 787.818,1212.42 788.404,1214.02 788.991,1214.11 789.577,1213.89 790.164,1216.49 790.75,1216.22 791.336,1214.95 791.923,1213.18 792.509,1213.18 793.096,1211.88 793.682,1211.92 794.268,1211.89 794.855,1213.41 795.441,1213.52 796.028,1213.58 796.614,1210.57 797.201,1210.73 797.787,1210.84 798.373,1209.56 798.96,1207.04 799.546,1207.86 800.133,1208.49 800.719,1210.63 801.305,1210.89 801.892,1216.87 802.478,1213.81 803.065,1213.79 803.651,1213.9 804.237,1213.92 804.824,1215.48 805.41,1215.26 805.997,1212.36 806.583,1211.18 807.17,1211.35 807.756,1213.12 808.342,1211.7 808.929,1212.12 809.515,1215.14 810.102,1216.55 810.688,1217.88 811.274,1217.79 811.861,1216.44 812.447,1220.58 813.034,1218.87 813.62,1219.79 814.206,1218.25 814.793,1220.96 815.379,1220.8 815.966,1217.6 816.552,1217.39 817.139,1216.01 817.725,1217.16 818.311,1216.92 818.898,1216.56 819.484,1216.29 820.071,1217.67 820.657,1217.32 821.243,1218.65 821.83,1221.22 822.416,1222.5 823.003,1224.63 823.589,1224.07 824.175,1222.36 824.762,1220.68 825.348,1223.19 825.935,1225.51 826.521,1224.59 827.108,1225.56 827.694,1223.62 828.28,1220.21 828.867,1221.21 829.453,1217.81 830.04,1220.36 830.626,1220.06 831.212,1217.11 831.799,1218.47 832.385,1216.58 832.972,1219.19 833.558,1220.25 834.145,1219.79 834.731,1220.89 835.317,1222.17 835.904,1221.46 836.49,1219.31 837.077,1224.96 837.663,1227.41 838.249,1226.7 838.836,1224.4 839.422,1222.17 840.009,1221.43 840.595,1222.9 841.181,1220.99 841.768,1222.23 842.354,1220.56 842.941,1223.13 843.527,1225.65 844.114,1223.21 844.7,1224.01 845.286,1223.39 845.873,1224.06 846.459,1223.66 847.046,1221.18 847.632,1220.9 848.218,1223.73 848.805,1221.91 849.391,1221.35 849.978,1222.32 850.564,1218.99 851.15,1218.49 851.737,1219.78 852.323,1221.12 852.91,1223.73 853.496,1221.67 854.083,1219.57 854.669,1218.79 855.255,1218.42 855.842,1218.11 856.428,1217.93 857.015,1217.44 857.601,1217.21 858.187,1217.09 858.774,1213.74 859.36,1214.96 859.947,1215.14 860.533,1213.74 861.119,1207.56 861.706,1209.02 862.292,1209.12 862.879,1210.44 863.465,1207.61 864.052,1207.9 864.638,1208.38 865.224,1210.06 865.811,1210.03 866.397,1210.59 866.984,1212.02 867.57,1207.97 868.156,1209.66 868.743,1208.37 869.329,1210.03 869.916,1209.02 870.502,1209.11 871.089,1207.92 871.675,1212.89 872.261,1214.52 872.848,1211.61 873.434,1213.23 874.021,1214.47 874.607,1213.06 875.193,1213.21 875.78,1211.53 876.366,1210.36 876.953,1210.53 877.539,1207.67 878.125,1204.94 878.712,1206.84 879.298,1205.86 879.885,1209.58 880.471,1209.74 881.058,1208.61 881.644,1209.14 882.23,1207.8 882.817,1206.95 883.403,1207.53 883.99,1209.19 884.576,1209.06 885.162,1209.5 885.749,1213.92 886.335,1214.24 886.922,1215.49 887.508,1215.59 888.094,1215.28 888.681,1216.8 889.267,1216.36 889.854,1217.81 890.44,1221.82 891.027,1226.04 891.613,1223.77 892.199,1220.46 892.786,1218.56 893.372,1219.46 893.959,1220.45 894.545,1217.27 895.131,1221.41 895.718,1219.62 896.304,1219.19 896.891,1220.52 897.477,1215.92 898.063,1217.08 898.65,1215.25 899.236,1213.56 899.823,1213.59 900.409,1215.19 900.996,1216.67 901.582,1215.34 902.168,1215.11 902.755,1212.08 903.341,1210.45 903.928,1212.3 904.514,1210.95 905.1,1215.39 905.687,1212.33 906.273,1211.13 906.86,1211.28 907.446,1206.78 908.032,1207.35 908.619,1207.62 909.205,1208.07 909.792,1210.01 910.378,1210.25 910.965,1210.49 911.551,1207.38 912.137,1207.9 912.724,1208.31 913.31,1210.43 913.897,1209.23 914.483,1211.15 915.069,1214.18 915.656,1212.57 916.242,1217.1 916.829,1220.02 917.415,1221.08 918.002,1219.16 918.588,1220.39 919.174,1221.17 919.761,1222.5 920.347,1220.51 920.934,1220.22 921.52,1217.3 922.106,1218.55 922.693,1219.81 923.279,1218.08 923.866,1217.95 924.452,1217.21 925.038,1214.13 925.625,1216.85 926.211,1218.08 926.798,1217.8 927.384,1217.67 927.971,1217.44 928.557,1216.93 929.143,1215 929.73,1216.19 930.316,1216.02 930.903,1214.63 931.489,1211.47 932.075,1211.59 932.662,1210.12 933.248,1211.64 933.835,1208.76 934.421,1208.94 935.007,1204.99 935.594,1206.91 936.18,1210.33 936.767,1213.72 937.353,1215.15 937.94,1210.77 938.526,1210.66 939.112,1210.9 939.699,1206.25 940.285,1206.57 940.872,1208.4 941.458,1210.09 942.044,1208.89 942.631,1209.27 943.217,1206.34 943.804,1207.76 944.39,1207.99 944.976,1209.5 945.563,1209.81 946.149,1210.07 946.736,1213.07 947.322,1212.98 947.909,1213.05 948.495,1217.17 949.081,1215.79 949.668,1216.96 950.254,1216.66 950.841,1218.02 951.427,1219.31 952.013,1220.4 952.6,1220.35 953.186,1219.71 953.773,1217.67 954.359,1216.2 954.945,1218.84 955.532,1219.68 956.118,1219.39 956.705,1217.73 957.291,1222.08 957.878,1221.56 958.464,1222.5 959.05,1223.34 959.637,1222.67 960.223,1222.08 960.81,1221.77 961.396,1221.14 961.982,1219.54 962.569,1217.6 963.155,1215.87 963.742,1215.68 964.328,1213.7 964.915,1212.17 965.501,1212.44 966.087,1212.32 966.674,1212.23 967.26,1210.9 967.847,1209.84 968.433,1209.9 969.019,1210 969.606,1210.02 970.192,1208.55 970.779,1208.56 971.365,1207.36 971.951,1211.79 972.538,1211.48 973.124,1215.91 973.711,1217.12 974.297,1215.23 974.884,1216.53 975.47,1216.49 976.056,1216.13 976.643,1217.15 977.229,1215.41 977.816,1215.45 978.402,1216.67 978.988,1217.91 979.575,1214.82 980.161,1214.6 980.748,1215.79 981.334,1219.84 981.92,1222.71 982.507,1220.96 983.093,1221.95 983.68,1222.7 984.266,1219.21 984.853,1217.45 985.439,1213.14 986.025,1216.15 986.612,1214.71 987.198,1216.1 987.785,1214.69 988.371,1215.91 988.957,1215.66 989.544,1215.6 990.13,1214.23 990.717,1212.84 991.303,1215.61 991.889,1209.77 992.476,1212.94 993.062,1212.71 993.649,1211.2 994.235,1209.83 994.822,1209.73 995.408,1209.95 995.994,1210.08 996.581,1208.65 997.167,1207.38 997.754,1201.87 998.34,1199.68 998.926,1203.31 999.513,1204.02 1000.1,1204.34 1000.69,1203.1 1001.27,1206.64 1001.86,1208.74 1002.44,1209.11 1003.03,1206.6 1003.62,1205.35 1004.2,1208.27 1004.79,1207.37 1005.38,1206.19 1005.96,1206.7 1006.55,1208.28 1007.14,1206.98 1007.72,1208.68 1008.31,1210.45 1008.9,1212.08 1009.48,1210.89 1010.07,1215.23 1010.65,1212.05 1011.24,1214.96 1011.83,1214.59 1012.41,1217.56 1013,1219.01 1013.59,1218.82 1014.17,1219.88 1014.76,1219.39 1015.35,1216.21 1015.93,1211.9 1016.52,1210.48 1017.11,1210.46 1017.69,1210.39 1018.28,1210.48 1018.86,1209.11 1019.45,1206.25 1020.04,1206.75 1020.62,1205.32 1021.21,1205.62 1021.8,1203.19 1022.38,1203.99 1022.97,1202.93 1023.56,1206.18 1024.14,1203.3 1024.73,1202.38 1025.32,1203.08 1025.9,1199.41 1026.49,1197.21 1027.07,1196.68 1027.66,1199.01 1028.25,1202.91 1028.83,1203.36 1029.42,1204.93 1030.01,1205.52 1030.59,1207.63 1031.18,1210.69 1031.77,1212.61 1032.35,1214.13 1032.94,1214.14 1033.52,1212.61 1034.11,1214.37 1034.7,1217.04 1035.28,1218.4 1035.87,1222.32 1036.46,1220.24 1037.04,1218.6 1037.63,1216.62 1038.22,1219.12 1038.8,1217.52 1039.39,1216.03 1039.98,1214.31 1040.56,1211.74 1041.15,1210.62 1041.73,1209.44 1042.32,1212.3 1042.91,1215.32 1043.49,1215 1044.08,1213.33 1044.67,1211.94 1045.25,1210.46 1045.84,1213.49 1046.43,1211.88 1047.01,1210.61 1047.6,1213.54 1048.19,1213.77 1048.77,1216.25 1049.36,1217.7 1049.94,1220.72 1050.53,1220.64 1051.12,1220.25 1051.7,1219.69 1052.29,1217.65 1052.88,1217.61 1053.46,1218.96 1054.05,1221.04 1054.64,1219.04 1055.22,1219.04 1055.81,1215.71 1056.39,1215.42 1056.98,1214.02 1057.57,1215.56 1058.15,1218.52 1058.74,1218.19 1059.33,1216.52 1059.91,1217.83 1060.5,1220.35 1061.09,1222.97 1061.67,1220.77 1062.26,1222.85 1062.85,1224.85 1063.43,1225.51 1064.02,1224.66 1064.6,1220.86 1065.19,1222.1 1065.78,1217.07 1066.36,1216.66 1066.95,1216.25 1067.54,1214.68 1068.12,1215.14 1068.71,1212.13 1069.3,1211.88 1069.88,1213.12 1070.47,1211.48 1071.06,1209.81 1071.64,1210.03 1072.23,1208.82 1072.81,1205.77 1073.4,1207.51 1073.99,1211.92 1074.57,1213.36 1075.16,1213.18 1075.75,1211.67 1076.33,1211.82 1076.92,1210.25 1077.51,1208.77 1078.09,1210.32 1078.68,1211.88 1079.26,1213.3 1079.85,1214.6 1080.44,1213.02 1081.02,1210.04 1081.61,1208.6 1082.2,1211.48 1082.78,1210.04 1083.37,1212.82 1083.96,1212.96 1084.54,1214.32 1085.13,1216.88 1085.72,1218.49 1086.3,1219.96 1086.89,1219.15 1087.47,1221.61 1088.06,1218.25 1088.65,1216.48 1089.23,1216.37 1089.82,1214.9 1090.41,1213.1 1090.99,1206.91 1091.58,1208.62 1092.17,1210.15 1092.75,1207.21 1093.34,1205.82 1093.93,1204.88 1094.51,1206.8 1095.1,1206.77 1095.68,1207.18 1096.27,1208.74 1096.86,1207.47 1097.44,1206.28 1098.03,1206.41 1098.62,1205.49 1099.2,1207.31 1099.79,1204.85 1100.38,1206.61 1100.96,1206.84 1101.55,1213.35 1102.14,1214.64 1102.72,1215.98 1103.31,1214.43 1103.89,1214.25 1104.48,1214.15 1105.07,1209.63 1105.65,1209.88 1106.24,1212.99 1106.83,1214.66 1107.41,1214.4 1108,1212.56 1108.59,1212.4 1109.17,1214.17 1109.76,1213.73 1110.34,1213.41 1110.93,1212.04 1111.52,1211.82 1112.1,1210.58 1112.69,1207.93 1113.28,1208.57 1113.86,1208.71 1114.45,1207.45 1115.04,1211.99 1115.62,1210.66 1116.21,1213.75 1116.8,1213.88 1117.38,1215.15 1117.97,1213.69 1118.55,1215.21 1119.14,1217.92 1119.73,1219.13 1120.31,1220.19 1120.9,1217.96 1121.49,1216.22 1122.07,1214.59 1122.66,1215.86 1123.25,1217.4 1123.83,1216.92 1124.42,1218.16 1125.01,1216.33 1125.59,1218.89 1126.18,1218.75 1126.76,1217.15 1127.35,1215.18 1127.94,1214.91 1128.52,1215.95 1129.11,1214.61 1129.7,1215.81 1130.28,1214.28 1130.87,1212.75 1131.46,1212.69 1132.04,1212.97 1132.63,1214.29 1133.21,1216.98 1133.8,1216.87 1134.39,1217.93 1134.97,1216.43 1135.56,1215.31 1136.15,1212.1 1136.73,1209.21 1137.32,1210.95 1137.91,1213.93 1138.49,1215.25 1139.08,1216.8 1139.67,1216.71 1140.25,1215.13 1140.84,1217.62 1141.42,1219.09 1142.01,1218.34 1142.6,1219.7 1143.18,1218.02 1143.77,1217.8 1144.36,1216 1144.94,1214.28 1145.53,1213.74 1146.12,1210.44 1146.7,1212.05 1147.29,1212.14 1147.88,1212.15 1148.46,1214.82 1149.05,1214.45 1149.63,1214.54 1150.22,1210.23 1150.81,1210.47 1151.39,1210.53 1151.98,1209.23 1152.57,1207.78 1153.15,1204.77 1153.74,1205.21 1154.33,1202.27 1154.91,1202.69 1155.5,1203.16 1156.09,1205.28 1156.67,1202.92 1157.26,1201.63 1157.84,1200.52 1158.43,1202.79 1159.02,1204.55 1159.6,1205.01 1160.19,1203.77 1160.78,1202.77 1161.36,1203.44 1161.95,1203.88 1162.54,1202.91 1163.12,1200.36 1163.71,1202.41 1164.29,1198.43 1164.88,1199.21 1165.47,1198.8 1166.05,1202.72 1166.64,1206.04 1167.23,1202.22 1167.81,1207.25 1168.4,1208.86 1168.99,1212.24 1169.57,1212.35 1170.16,1213.96 1170.75,1216.88 1171.33,1219.61 1171.92,1217.79 1172.5,1220.41 1173.09,1220.08 1173.68,1219.92 1174.26,1216.43 1174.85,1216.2 1175.44,1214.67 1176.02,1211.99 1176.61,1213.49 1177.2,1209.15 1177.78,1209.27 1178.37,1207.94 1178.96,1208.14 1179.54,1208.3 1180.13,1209.76 1180.71,1208.41 1181.3,1211.51 1181.89,1211.62 1182.47,1211.75 1183.06,1211.49 1183.65,1214.34 1184.23,1214.61 1184.82,1214.51 1185.41,1213.15 1185.99,1215.74 1186.58,1212.91 1187.16,1211.37 1187.75,1211.31 1188.34,1208.38 1188.92,1209.79 1189.51,1211.13 1190.1,1211.53 1190.68,1210.22 1191.27,1210.29 1191.86,1209.01 1192.44,1209.06 1193.03,1209.02 1193.62,1209.22 1194.2,1209.68 1194.79,1211.33 1195.37,1211.2 1195.96,1211.41 1196.55,1209.91 1197.13,1210.23 1197.72,1208.99 1198.31,1209.33 1198.89,1210.58 1199.48,1210.35 1200.07,1210.59 1200.65,1207.89 1201.24,1212.52 1201.83,1215.41 1202.41,1218.09 1203,1220.95 1203.58,1218.88 1204.17,1217.35 1204.76,1214.37 1205.34,1215.47 1205.93,1213.43 1206.52,1213.57 1207.1,1212.26 1207.69,1212.15 1208.28,1212 1208.86,1210.42 1209.45,1211.96 1210.03,1213.45 1210.62,1212.98 1211.21,1217.12 1211.79,1216.8 1212.38,1216.63 1212.97,1214.61 1213.55,1215.67 1214.14,1215.34 1214.73,1215.08 1215.31,1210.29 1215.9,1207.65 1216.49,1206.65 1217.07,1208.74 1217.66,1206.26 1218.24,1208.15 1218.83,1206.77 1219.42,1204.02 1220,1202.97 1220.59,1203.49 1221.18,1205.46 1221.76,1207.31 1222.35,1207.55 1222.94,1209.34 1223.52,1209.15 1224.11,1207.8 1224.7,1210.52 1225.28,1212.16 1225.87,1212.27 1226.45,1212.28 1227.04,1213.84 1227.63,1216.6 1228.21,1216.2 1228.8,1217.39 1229.39,1219.67 1229.97,1220.65 1230.56,1217.56 1231.15,1217.44 1231.73,1217.17 1232.32,1216.87 1232.91,1215.17 1233.49,1217.95 1234.08,1216.32 1234.66,1216.07 1235.25,1212.48 1235.84,1211.16 1236.42,1208.27 1237.01,1205.67 1237.6,1206.6 1238.18,1206.97 1238.77,1210.18 1239.36,1210.52 1239.94,1210.49 1240.53,1209.21 1241.11,1206.4 1241.7,1206.76 1242.29,1205.75 1242.87,1206.11 1243.46,1205.3 1244.05,1207.15 1244.63,1205.96 1245.22,1204.79 1245.81,1203.62 1246.39,1204.1 1246.98,1201.71 1247.57,1203.56 1248.15,1209.9 1248.74,1208.2 1249.32,1211.65 1249.91,1211.75 1250.5,1210.31 1251.08,1210.2 1251.67,1210.73 1252.26,1209.42 1252.84,1214.09 1253.43,1215.3 1254.02,1215.41 1254.6,1215.45 1255.19,1213.7 1255.78,1216.59 1256.36,1214.87 1256.95,1216.3 1257.53,1216.37 1258.12,1214.75 1258.71,1214.56 1259.29,1214.61 1259.88,1213.16 1260.47,1214.35 1261.05,1214.34 1261.64,1214.37 1262.23,1217.19 1262.81,1216.65 1263.4,1216.51 1263.98,1214.94 1264.57,1216.4 1265.16,1219 1265.74,1219.9 1266.33,1219.39 1266.92,1217.48 1267.5,1218.35 1268.09,1216.69 1268.68,1217.86 1269.26,1214.14 1269.85,1212.4 1270.44,1210.84 1271.02,1210.68 1271.61,1210.47 1272.19,1212.03 1272.78,1212.06 1273.37,1211.96 1273.95,1213.38 1274.54,1214.68 1275.13,1213.15 1275.71,1207.45 1276.3,1206.42 1276.89,1208.02 1277.47,1209.7 1278.06,1209.77 1278.65,1209.92 1279.23,1210.04 1279.82,1209.95 1280.4,1209.8 1280.99,1209.94 1281.58,1210.32 1282.16,1212.29 1282.75,1211.95 1283.34,1210.84 1283.92,1209.61 1284.51,1212.63 1285.1,1209.76 1285.68,1208.74 1286.27,1211.74 1286.86,1211.75 1287.44,1215.17 1288.03,1217.64 1288.61,1218.95 1289.2,1217.39 1289.79,1215.47 1290.37,1216.58 1290.96,1219.24 1291.55,1220.5 1292.13,1221.34 1292.72,1219.41 1293.31,1218.9 1293.89,1216.9 1294.48,1218.05 1295.06,1216.5 1295.65,1215.26 1296.24,1214.94 1296.82,1214.77 1297.41,1214.58 1298,1212.84 1298.58,1211.26 1299.17,1212.66 1299.76,1208.07 1300.34,1206.62 1300.93,1205.51 1301.52,1207.48 1302.1,1209.19 1302.69,1207.81 1303.27,1208.2 1303.86,1211.32 1304.45,1209.81 1305.03,1209.64 1305.62,1211.37 1306.21,1213.21 1306.79,1213.37 1307.38,1213.1 1307.97,1209.92 1308.55,1207.32 1309.14,1204.56 1309.73,1204.92 1310.31,1203.75 1310.9,1205.2 1311.48,1204.22 1312.07,1206.07 1312.66,1205.08 1313.24,1205.21 1313.83,1207.06 1314.42,1207.59 1315,1207.76 1315.59,1210.82 1316.18,1209.5 1316.76,1209.52 1317.35,1210.13 1317.93,1213.32 1318.52,1216.33 1319.11,1214.72 1319.69,1213.19 1320.28,1217.42 1320.87,1215.41 1321.45,1218.3 1322.04,1219.41 1322.63,1218.87 1323.21,1218.6 1323.8,1219.51 1324.39,1220.49 1324.97,1222.48 1325.56,1218.95 1326.14,1216.99 1326.73,1218.12 1327.32,1218.78 1327.9,1218.33 1328.49,1220.95 1329.08,1219.4 1329.66,1219.25 1330.25,1217.38 1330.84,1218.59 1331.42,1219.41 1332.01,1217.72 1332.6,1215.85 1333.18,1215.37 1333.77,1214.87 1334.35,1214.74 1334.94,1215.9 1335.53,1215.64 1336.11,1218.37 1336.7,1218.3 1337.29,1221.22 1337.87,1221.05 1338.46,1220.47 1339.05,1218.43 1339.63,1216.53 1340.22,1213.66 1340.8,1216.37 1341.39,1213.22 1341.98,1210.28 1342.56,1210.51 1343.15,1209.29 1343.74,1212.06 1344.32,1210.77 1344.91,1208.91 1345.5,1207.6 1346.08,1206.19 1346.67,1207.75 1347.26,1209.3 1347.84,1210.67 1348.43,1210.88 1349.01,1212.23 1349.6,1213.55 1350.19,1213.62 1350.77,1209.34 1351.36,1208.6 1351.95,1205.58 1352.53,1205.92 1353.12,1207.84 1353.71,1208.14 1354.29,1209.85 1354.88,1208.58 1355.47,1207.08 1356.05,1204.52 1356.64,1207.97 1357.22,1205.29 1357.81,1204.04 1358.4,1206.11 1358.98,1206.73 1359.57,1205.44 1360.16,1205.83 1360.74,1206.1 1361.33,1206.46 1361.92,1202.51 1362.5,1202.87 1363.09,1204.82 1363.68,1208.16 1364.26,1209.93 1364.85,1206.94 1365.43,1207.02 1366.02,1204.33 1366.61,1202.89 1367.19,1200.42 1367.78,1200.97 1368.37,1201.52 1368.95,1201.91 1369.54,1205.8 1370.13,1207.57 1370.71,1209.35 1371.3,1209.41 1371.88,1209.49 1372.47,1206.7 1373.06,1207.03 1373.64,1205.62 1374.23,1204.43 1374.82,1204.81 1375.4,1203.68 1375.99,1202.68 1376.58,1201.75 1377.16,1204.05 1377.75,1201.59 1378.34,1202.21 1378.92,1204.44 1379.51,1206.53 1380.09,1208.38 1380.68,1208.51 1381.27,1208.86 1381.85,1207.87 1382.44,1207.84 1383.03,1209.5 1383.61,1209.8 1384.2,1211.5 1384.79,1211.66 1385.37,1211.91 1385.96,1213.4 1386.55,1210.76 1387.13,1210.99 1387.72,1212.78 1388.3,1214.06 1388.89,1212.37 1389.48,1215.28 1390.06,1216.44 1390.65,1219.3 1391.24,1218.97 1391.82,1218.82 1392.41,1216.96 1393,1216.93 1393.58,1216.8 1394.17,1214.09 1394.75,1215.3 1395.34,1216.74 1395.93,1213.47 1396.51,1214.73 1397.1,1217.02 1397.69,1218.52 1398.27,1221.31 1398.86,1222.21 1399.45,1221.49 1400.03,1220.83 1400.62,1218.73 1401.21,1217.95 1401.79,1220.47 1402.38,1220.02 1402.96,1219.47 1403.55,1220.66 1404.14,1220.11 1404.72,1221.08 1405.31,1222 1405.9,1218.45 1406.48,1217.96 1407.07,1219.09 1407.66,1214.41 1408.24,1216.86 1408.83,1214.16 1409.42,1213.07 1410,1214.34 1410.59,1214.19 1411.17,1214.09 1411.76,1213.85 1412.35,1213.96 1412.93,1215.01 1413.52,1213.95 1414.11,1213.71 1414.69,1216.35 1415.28,1213.14 1415.87,1213.06 1416.45,1217.4 1417.04,1216.81 1417.63,1215.17 1418.21,1214.97 1418.8,1213.52 1419.38,1214.74 1419.97,1214.44 1420.56,1214.55 1421.14,1215.72 1421.73,1218.36 1422.32,1219.08 1422.9,1220.22 1423.49,1225.39 1424.08,1224.77 1424.66,1220.93 1425.25,1220.54 1425.83,1219.92 1426.42,1224.08 1427.01,1223.18 1427.59,1220.98 1428.18,1220.35 1428.77,1218.61 1429.35,1218.28 1429.94,1220.95 1430.53,1214.5 1431.11,1214.58 1431.7,1214.25 1432.29,1213.74 1432.87,1215.3 1433.46,1208.93 1434.04,1207.84 1434.63,1203.27 1435.22,1203.62 1435.8,1208.38 1436.39,1208.69 1436.98,1211.82 1437.56,1210.59 1438.15,1207.7 1438.74,1206.14 1439.32,1207.7 1439.91,1207.62 1440.5,1206.28 1441.08,1208.21 1441.67,1209.79 1442.25,1204.25 1442.84,1206.37 1443.43,1205.16 1444.01,1203.89 1444.6,1203.69 1445.19,1207.13 1445.77,1205.82 1446.36,1201.56 1446.95,1203.05 1447.53,1204.95 1448.12,1203.65 1448.7,1201.25 1449.29,1203.37 1449.88,1205.11 1450.46,1208.26 1451.05,1211.46 1451.64,1210.2 1452.22,1210.72 1452.81,1212.24 1453.4,1210.64 1453.98,1209.11 1454.57,1210.91 1455.16,1209.65 1455.74,1205.37 1456.33,1205.48 1456.91,1205.7 1457.5,1207.28 1458.09,1204.69 1458.67,1203.74 1459.26,1201.09 1459.85,1203.09 1460.43,1205.34 1461.02,1204.4 1461.61,1204.84 1462.19,1203.79 1462.78,1206.09 1463.37,1204.69 1463.95,1206.81 1464.54,1205.22 1465.12,1205.66 1465.71,1209.23 1466.3,1210.92 1466.88,1212.41 1467.47,1209.78 1468.06,1211.5 1468.64,1212.99 1469.23,1213.14 1469.82,1213.27 1470.4,1213.27 1470.99,1220.38 1471.57,1220 1472.16,1219.61 1472.75,1219.15 1473.33,1214.42 1473.92,1214.48 1474.51,1214.37 1475.09,1212.71 1475.68,1208.47 1476.27,1207.42 1476.85,1206.51 1477.44,1205.3 1478.03,1204.42 1478.61,1205.15 1479.2,1206.89 1479.78,1208.88 1480.37,1208.83 1480.96,1207.76 1481.54,1206.84 1482.13,1208.49 1482.72,1208.7 1483.3,1210.46 1483.89,1207.74 1484.48,1207.89 1485.06,1208.02 1485.65,1211.45 1486.24,1211.45 1486.82,1208.67 1487.41,1207.51 1487.99,1207.9 1488.58,1210.98 1489.17,1210.61 1489.75,1209.09 1490.34,1212.48 1490.93,1209.5 1491.51,1212.47 1492.1,1210.86 1492.69,1215.38 1493.27,1220.98 1493.86,1219.26 1494.45,1214.58 1495.03,1215.98 1495.62,1215.68 1496.2,1215.36 1496.79,1215.14 1497.38,1216.17 1497.96,1215.93 1498.55,1215.76 1499.14,1215.61 1499.72,1212.46 1500.31,1208.21 1500.9,1211.22 1501.48,1210.97 1502.07,1209.29 1502.65,1212.27 1503.24,1209.59 1503.83,1211.33 1504.41,1211.6 1505,1210.31 1505.59,1213.11 1506.17,1214.26 1506.76,1217.18 1507.35,1218.54 1507.93,1219.51 1508.52,1218.95 1509.11,1220.13 1509.69,1219.83 1510.28,1219.33 1510.86,1220.21 1511.45,1222.6 1512.04,1222.33 1512.62,1220.32 1513.21,1218.26 1513.8,1219.47 1514.38,1220.47 1514.97,1219.95 1515.56,1221 1516.14,1220.36 1516.73,1216.85 1517.32,1216.71 1517.9,1216.73 1518.49,1216.41 1519.07,1214.78 1519.66,1211.64 1520.25,1213.04 1520.83,1209.93 1521.42,1210.04 1522.01,1210.64 1522.59,1213.68 1523.18,1212.01 1523.77,1211.93 1524.35,1212.19 1524.94,1210.39 1525.52,1210.54 1526.11,1206.22 1526.7,1205.33 1527.28,1204.41 1527.87,1205.18 1528.46,1207.2 1529.04,1206.07 1529.63,1206.66 1530.22,1207.32 1530.8,1206.3 1531.39,1205.11 1531.98,1206.88 1532.56,1206.94 1533.15,1207.33 1533.73,1207.64 1534.32,1207.94 1534.91,1206.72 1535.49,1204.36 1536.08,1204.87 1536.67,1206.9 1537.25,1210.17 1537.84,1211.72 1538.43,1217.59 1539.01,1218.54 1539.6,1213.76 1540.19,1213.49 1540.77,1215.75 1541.36,1215.54 1541.94,1213.69 1542.53,1213.57 1543.12,1216.35 1543.7,1217.44 1544.29,1216.77 1544.88,1212.34 1545.46,1209.46 1546.05,1205.33 1546.64,1205.89 1547.22,1206.23 1547.81,1206.4 1548.4,1203.86 1548.98,1203.99 1549.57,1202.62 1550.15,1203.28 1550.74,1203.64 1551.33,1204.04 1551.91,1205.96 1552.5,1204.94 1553.09,1206.69 1553.67,1206.85 1554.26,1208.77 1554.85,1211.96 1555.43,1213.18 1556.02,1212.82 1556.6,1212.85 1557.19,1208.29 1557.78,1206.55 1558.36,1212.67 1558.95,1212.81 1559.54,1212.87 1560.12,1212.74 1560.71,1212.94 1561.3,1211.35 1561.88,1208.36 1562.47,1207.05 1563.06,1208.64 1563.64,1210.44 1564.23,1209.53 1564.81,1209.89 1565.4,1208.98 1565.99,1208.99 1566.57,1209.12 1567.16,1209.33 1567.75,1209.46 1568.33,1208.18 1568.92,1208.66 1569.51,1209.13 1570.09,1212.13 1570.68,1210.93 1571.27,1207.63 1571.85,1210.59 1572.44,1209.19 1573.02,1209.28 1573.61,1209.49 1574.2,1208.27 1574.78,1204.2 1575.37,1204.37 1575.96,1207.63 1576.54,1204.76 1577.13,1207.82 1577.72,1204.87 1578.3,1204 1578.89,1204.39 1579.47,1203.48 1580.06,1205.78 1580.65,1207.81 1581.23,1206.6 1581.82,1205.41 1582.41,1203.9 1582.99,1202.97 1583.58,1203.39 1584.17,1207.9 1584.75,1208.23 1585.34,1211.43 1585.93,1214.23 1586.51,1213.85 1587.1,1213.73 1587.68,1212.23 1588.27,1210.87 1588.86,1208.13 1589.44,1212.71 1590.03,1211.19 1590.62,1212.32 1591.2,1209.58 1591.79,1213.01 1592.38,1214.6 1592.96,1214.51 1593.55,1215.64 1594.14,1215.53 1594.72,1215.3 1595.31,1215.15 1595.89,1216.08 1596.48,1215.9 1597.07,1213.03 1597.65,1213.03 1598.24,1212.73 1598.83,1212.78 1599.41,1211.3 1600,1214.06 1600.59,1215.26 1601.17,1215.28 1601.76,1213.92 1602.34,1216.64 1602.93,1217.87 1603.52,1218.76 1604.1,1218.18 1604.69,1217.83 1605.28,1220.48 1605.86,1221.22 1606.45,1219.36 1607.04,1218.82 1607.62,1216.93 1608.21,1216.46 1608.8,1215.88 1609.38,1211.13 1609.97,1212.75 1610.55,1212.59 1611.14,1212.69 1611.73,1214.19 1612.31,1214.08 1612.9,1212.62 1613.49,1215.35 1614.07,1213.63 1614.66,1215.16 1615.25,1216.41 1615.83,1217.53 1616.42,1217.32 1617.01,1216.85 1617.59,1216.75 1618.18,1219.43 1618.76,1219.26 1619.35,1216.41 1619.94,1215.93 1620.52,1214.09 1621.11,1214.29 1621.7,1214.29 1622.28,1217.05 1622.87,1215.29 1623.46,1215.29 1624.04,1217.75 1624.63,1222.04 1625.22,1217.05 1625.8,1218.33 1626.39,1219.57 1626.97,1219.11 1627.56,1220.75 1628.15,1221.58 1628.73,1221.11 1629.32,1219.36 1629.91,1220.49 1630.49,1219.87 1631.08,1220.77 1631.67,1220.41 1632.25,1219.83 1632.84,1216.72 1633.42,1216.86 1634.01,1216.56 1634.6,1219.18 1635.18,1220.36 1635.77,1217.13 1636.36,1219.97 1636.94,1216.51 1637.53,1216.28 1638.12,1212.85 1638.7,1211.32 1639.29,1211.15 1639.88,1209.88 1640.46,1205.92 1641.05,1206.14 1641.63,1208 1642.22,1209.87 1642.81,1212.53 1643.39,1211 1643.98,1209.39 1644.57,1209.37 1645.15,1207.81 1645.74,1206.74 1646.33,1202.59 1646.91,1204.78 1647.5,1207.9 1648.09,1209.33 1648.67,1208.1 1649.26,1205.35 1649.84,1205.86 1650.43,1206.14 1651.02,1204.97 1651.6,1205.22 1652.19,1205.39 1652.78,1204.58 1653.36,1204.83 1653.95,1206.71 1654.54,1208.27 1655.12,1211.35 1655.71,1211.43 1656.29,1212.95 1656.88,1214.46 1657.47,1215.93 1658.05,1212.81 1658.64,1215.63 1659.23,1218.09 1659.81,1221.97 1660.4,1220.16 1660.99,1221.06 1661.57,1221.46 1662.16,1219.76 1662.75,1222.22 1663.33,1223.08 1663.92,1222.14 1664.5,1219.86 1665.09,1216.54 1665.68,1216.04 1666.26,1218.66 1666.85,1221.16 1667.44,1217.56 1668.02,1220.31 1668.61,1220.12 1669.2,1218.2 1669.78,1219.36 1670.37,1220.26 1670.96,1221.37 1671.54,1219.79 1672.13,1217.98 1672.71,1220.68 1673.3,1221.64 1673.89,1221.12 1674.47,1220.51 1675.06,1214.39 1675.65,1213.04 1676.23,1216.05 1676.82,1217.38 1677.41,1217.22 1677.99,1218.09 1678.58,1216.53 1679.17,1216.18 1679.75,1217.21 1680.34,1215.6 1680.92,1212.13 1681.51,1211.94 1682.1,1207.53 1682.68,1210.72 1683.27,1209.36 1683.86,1207.76 1684.44,1208.53 1685.03,1210.17 1685.62,1210.23 1686.2,1207.16 1686.79,1205.89 1687.37,1206.07 1687.96,1207.71 1688.55,1208.03 1689.13,1208.21 1689.72,1207.15 1690.31,1208.9 1690.89,1209.11 1691.48,1207.97 1692.07,1208.15 1692.65,1205.57 1693.24,1207.6 1693.83,1209.51 1694.41,1209.63 1695,1206.76 1695.58,1208.34 1696.17,1206.94 1696.76,1205.81 1697.34,1206.25 1697.93,1209.75 1698.52,1214.57 1699.1,1214.74 1699.69,1211.62 1700.28,1213.11 1700.86,1214.37 1701.45,1212.54 1702.04,1214.12 1702.62,1210.8 1703.21,1210.85 1703.79,1208.93 1704.38,1210.74 1704.97,1210.7 1705.55,1210.74 1706.14,1210.68 1706.73,1213.72 1707.31,1210.73 1707.9,1207.68 1708.49,1208.02 1709.07,1208.29 1709.66,1208.68 1710.24,1208.87 1710.83,1210.44 1711.42,1209.2 1712,1209.26 1712.59,1209.53 1713.18,1212.92 1713.76,1211.47 1714.35,1209.76 1714.94,1208.2 1715.52,1206.97 1716.11,1208.67 1716.7,1209.12 1717.28,1210.86 1717.87,1212.54 1718.45,1212.29 1719.04,1209.2 1719.63,1211.15 1720.21,1209.56 1720.8,1212.53 1721.39,1211.31 1721.97,1211.45 1722.56,1211.67 1723.15,1213.18 1723.73,1210.16 1724.32,1213.44 1724.91,1211.73 1725.49,1211.9 1726.08,1214.75 1726.66,1213.33 1727.25,1211.81 1727.84,1207.4 1728.42,1206.15 1729.01,1206.29 1729.6,1206.53 1730.18,1212.48 1730.77,1210.83 1731.36,1209.41 1731.94,1210.68 1732.53,1209.3 1733.11,1207.83 1733.7,1211.08 1734.29,1207.76 1734.87,1212.3 1735.46,1210.94 1736.05,1208.21 1736.63,1208.59 1737.22,1208.8 1737.81,1207.49 1738.39,1209.34 1738.98,1209.47 1739.57,1211.37 1740.15,1213.12 1740.74,1211.54 1741.32,1208.47 1741.91,1208.68 1742.5,1207.16 1743.08,1204.33 1743.67,1203.39 1744.26,1203.56 1744.84,1205.49 1745.43,1210.79 1746.02,1209.4 1746.6,1211.14 1747.19,1211.15 1747.78,1212.71 1748.36,1212.43 1748.95,1212.3 1749.53,1207.64 1750.12,1208.1 1750.71,1211.58 1751.29,1214.11 1751.88,1214.15 1752.47,1215.62 1753.05,1215.22 1753.64,1216.65 1754.23,1216.27 1754.81,1218.7 1755.4,1213.94 1755.99,1215.22 1756.57,1213.8 1757.16,1213.78 1757.74,1215.2 1758.33,1213.43 1758.92,1214.92 1759.5,1208.62 1760.09,1211.6 1760.68,1214.65 1761.26,1216.06 1761.85,1219.86 1762.44,1214.68 1763.02,1217.17 1763.61,1215.68 1764.19,1213.71 1764.78,1213.48 1765.37,1213.65 1765.95,1212.28 1766.54,1212.55 1767.13,1212.49 1767.71,1214.01 1768.3,1212.73 1768.89,1213.95 1769.47,1215.43 1770.06,1215.29 1770.65,1216.29 1771.23,1214.39 1771.82,1212.33 1772.4,1210.98 1772.99,1212.66 1773.58,1212.58 1774.16,1209.45 1774.75,1208.08 1775.34,1211.38 1775.92,1209.8 1776.51,1212.57 1777.1,1210 1777.68,1211.3 1778.27,1211.34 1778.86,1215.69 1779.44,1215.63 1780.03,1215.71 1780.61,1214.06 1781.2,1214.06 1781.79,1218.53 1782.37,1216.8 1782.96,1219.38 1783.55,1214.21 1784.13,1214.06 1784.72,1212.42 1785.31,1212.6 1785.89,1213.8 1786.48,1213.74 1787.06,1212.71 1787.65,1212.86 1788.24,1212.65 1788.82,1210.8 1789.41,1210.63 1790,1212.03 1790.58,1213.48 1791.17,1213.39 1791.76,1213.31 1792.34,1212.93 1792.93,1215.88 1793.52,1217.25 1794.1,1218.63 1794.69,1217.01 1795.27,1213.8 1795.86,1210.97 1796.45,1211.08 1797.03,1208.39 1797.62,1211.38 1798.21,1211.02 1798.79,1211.15 1799.38,1210.92 1799.97,1209.48 1800.55,1212.55 1801.14,1212.34 1801.73,1215.25 1802.31,1218.14 1802.9,1217.49 1803.48,1213.98 1804.07,1213.87 1804.66,1213.53 1805.24,1213.27 1805.83,1213.12 1806.42,1214.71 1807,1212.86 1807.59,1211.15 1808.18,1211.4 1808.76,1208.36 1809.35,1208.44 1809.94,1210.05 1810.52,1211.82 1811.11,1210.25 1811.69,1212.96 1812.28,1211.32 1812.87,1209.91 1813.45,1206.68 1814.04,1208.52 1814.63,1207.04 1815.21,1207.47 1815.8,1204.74 1816.39,1205.25 1816.97,1203.9 1817.56,1203.29 1818.14,1203.77 1818.73,1204.3 1819.32,1200.48 1819.9,1202.71 1820.49,1204.82 1821.08,1203.9 1821.66,1206.09 1822.25,1207.73 1822.84,1211.07 1823.42,1211.18 1824.01,1212.63 1824.6,1211.03 1825.18,1211.21 1825.77,1209.97 1826.35,1210.19 1826.94,1210.06 1827.53,1210.04 1828.11,1208.58 1828.7,1209.01 1829.29,1209.12 1829.87,1210.77 1830.46,1210.92 1831.05,1212.5 1831.63,1212.86 1832.22,1217.47 1832.81,1217 1833.39,1216.75 1833.98,1212.23 1834.56,1213.89 1835.15,1212.23 1835.74,1212.33 1836.32,1212.31 1836.91,1205.2 1837.5,1204.07 1838.08,1203.45 1838.67,1203.94 1839.26,1202.99 1839.84,1203.78 1840.43,1202.76 1841.01,1204.88 1841.6,1206.93 1842.19,1204.32 1842.77,1207.73 1843.36,1209.59 1843.95,1209.82 1844.53,1209.82 1845.12,1211.28 1845.71,1215.54 1846.29,1215.33 1846.88,1213.67 1847.47,1213.57 1848.05,1212.13 1848.64,1213.54 1849.22,1210.3 1849.81,1211.75 1850.4,1210.35 1850.98,1210.56 1851.57,1210.63 1852.16,1210.69 1852.74,1210.78 1853.33,1215.3 1853.92,1218.04 1854.5,1217.87 1855.09,1217.6 1855.68,1217.33 1856.26,1217.29 1856.85,1217.39 1857.43,1214.33 1858.02,1214.32 1858.61,1215.93 1859.19,1214.24 1859.78,1215.58 1860.37,1213.89 1860.95,1210.67 1861.54,1215.25 1862.13,1216.47 1862.71,1216.1 1863.3,1217.06 1863.88,1216.72 1864.47,1216.44 1865.06,1217.55 1865.64,1217.39 1866.23,1218.68 1866.82,1218.01 1867.4,1216.39 1867.99,1217.51 1868.58,1218.49 1869.16,1222.55 1869.75,1220.44 1870.34,1218.55 1870.92,1218.05 1871.51,1219.13 1872.09,1217.34 1872.68,1215.44 1873.27,1215.24 1873.85,1213.49 1874.44,1216.05 1875.03,1214.32 1875.61,1212.69 1876.2,1213.98 1876.79,1212.29 1877.37,1215.15 1877.96,1216.51 1878.55,1216.34 1879.13,1214.69 1879.72,1217.49 1880.3,1215.7 1880.89,1216.11 1881.48,1214.55 1882.06,1216.1 1882.65,1212.81 1883.24,1211.44 1883.82,1211.45 1884.41,1210.1 1885,1211.62 1885.58,1210.11 1886.17,1213.35 1886.76,1211.8 1887.34,1210.25 1887.93,1208.66 1888.51,1210.02 1889.1,1218.71 1889.69,1216.75 1890.27,1214.92 1890.86,1216.11 1891.45,1214.5 1892.03,1214.62 1892.62,1217.16 1893.21,1216.74 1893.79,1216.79 1894.38,1214.82 1894.96,1211.38 1895.55,1214.24 1896.14,1212.45 1896.72,1214.01 1897.31,1211.43 1897.9,1210.01 1898.48,1208.63 1899.07,1208.55 1899.66,1211.91 1900.24,1213.38 1900.83,1211.98 1901.42,1213.54 1902,1216.21 1902.59,1215.96 1903.17,1214.37 1903.76,1215.44 1904.35,1212.61 1904.93,1213.87 1905.52,1216.64 1906.11,1217.88 1906.69,1216.23 1907.28,1216.18 1907.87,1219.13 1908.45,1220.22 1909.04,1219.26 1909.63,1220.31 1910.21,1222.86 1910.8,1219.43 1911.38,1217.3 1911.97,1216.62 1912.56,1216.64 1913.14,1213.85 1913.73,1213.65 1914.32,1212.03 1914.9,1212.05 1915.49,1212.02 1916.08,1212.18 1916.66,1212.08 1917.25,1209.19 1917.83,1208.09 1918.42,1208.11 1919.01,1207.77 1919.59,1210.97 1920.18,1212.66 1920.77,1215.71 1921.35,1215.44 1921.94,1212.13 1922.53,1208.18 1923.11,1206.85 1923.7,1205.73 1924.29,1204.72 1924.87,1202.1 1925.46,1202.93 1926.04,1203.34 1926.63,1203.84 1927.22,1205.95 1927.8,1206.22 1928.39,1206.57 1928.98,1206.93 1929.56,1207.2 1930.15,1207.33 1930.74,1207.84 1931.32,1206.65 1931.91,1208.2 1932.5,1208.65 1933.08,1208.96 1933.67,1210.66 1934.25,1210.94 1934.84,1207.85 1935.43,1207.83 1936.01,1209.34 1936.6,1210.86 1937.19,1213.96 1937.77,1213.68 1938.36,1210.72 1938.95,1210.7 1939.53,1209.6 1940.12,1211.3 1940.71,1214.31 1941.29,1212.72 1941.88,1208.09 1942.46,1209.83 1943.05,1206.84 1943.64,1202.65 1944.22,1206.24 1944.81,1206.68 1945.4,1207.02 1945.98,1207.32 1946.57,1207.71 1947.16,1209.29 1947.74,1212.55 1948.33,1212.69 1948.91,1212.73 1949.5,1209.6 1950.09,1209.9 1950.67,1211.53 1951.26,1209.91 1951.85,1211.32 1952.43,1211.42 1953.02,1211.56 1953.61,1210.41 1954.19,1208.91 1954.78,1205.98 1955.37,1206.28 1955.95,1205.24 1956.54,1203.91 1957.12,1207.19 1957.71,1210.23 1958.3,1208.78 1958.88,1206.13 1959.47,1203.38 1960.06,1205.35 1960.64,1204.35 1961.23,1206.08 1961.82,1207.81 1962.4,1206.54 1962.99,1206.56 1963.58,1210.01 1964.16,1208.42 1964.75,1208.65 1965.33,1208.71 1965.92,1207.4 1966.51,1205.97 1967.09,1204.46 1967.68,1206.41 1968.27,1205.17 1968.85,1205.65 1969.44,1209.08 1970.03,1207.94 1970.61,1209.85 1971.2,1208.52 1971.78,1207.57 1972.37,1206.41 1972.96,1205.46 1973.54,1207.4 1974.13,1207.87 1974.72,1207.94 1975.3,1209.99 1975.89,1207 1976.48,1210.04 1977.06,1210.11 1977.65,1210.55 1978.24,1210.75 1978.82,1215.21 1979.41,1217.93 1979.99,1222.12 1980.58,1222.89 1981.17,1224.02 1981.75,1223.66 1982.34,1227.34 1982.93,1227.89 1983.51,1228.27 1984.1,1230.27 1984.69,1224.97 1985.27,1226.04 1985.86,1223.97 1986.45,1223.57 1987.03,1221.53 1987.62,1222.8 1988.2,1222.42 1988.79,1220.39 1989.38,1217.04 1989.96,1216.72 1990.55,1219.51 1991.14,1220.37 1991.72,1218.65 1992.31,1219.81 1992.9,1219.4 1993.48,1219.39 1994.07,1217.36 1994.65,1212.83 1995.24,1214.09 1995.83,1214.04 1996.41,1213.65 1997,1216.26 1997.59,1215.87 1998.17,1215.53 1998.76,1216.68 1999.35,1215.24 1999.93,1218.01 2000.52,1219.01 2001.11,1220.6 2001.69,1220.17 2002.28,1218.06 2002.86,1213.42 2003.45,1213.22 2004.04,1211.81 2004.62,1212.12 2005.21,1212.37 2005.8,1212.07 2006.38,1211.92 2006.97,1211.87 2007.56,1213.61 2008.14,1213.31 2008.73,1211.78 2009.32,1208.92 2009.9,1210.41 2010.49,1208.98 2011.07,1207.68 2011.66,1209.28 2012.25,1206.17 2012.83,1203.35 2013.42,1200.71 2014.01,1201.67 2014.59,1202.33 2015.18,1200 2015.77,1202.12 2016.35,1202.77 2016.94,1203.08 2017.53,1204.96 2018.11,1203.8 2018.7,1204.41 2019.28,1206.33 2019.87,1205.3 2020.46,1205.67 2021.04,1207.38 2021.63,1204.95 2022.22,1211.5 2022.8,1211.69 2023.39,1217.4 2023.98,1215.61 2024.56,1216.78 2025.15,1214.66 2025.73,1213.02 2026.32,1211.91 2026.91,1211.78 2027.49,1216.5 2028.08,1217.72 2028.67,1215.62 2029.25,1215.28 2029.84,1216.63 2030.43,1215.09 2031.01,1213.47 2031.6,1216.71 2032.19,1216.39 2032.77,1217.57 2033.36,1215.91 2033.94,1218.56 2034.53,1216.75 2035.12,1213.88 2035.7,1210.66 2036.29,1212.01 2036.88,1211.75 2037.46,1212.01 2038.05,1212.17 2038.64,1207.79 2039.22,1203.39 2039.81,1205.32 2040.4,1204.12 2040.98,1204.4 2041.57,1208.14 2042.15,1208.17 2042.74,1209.69 2043.33,1209.7 2043.91,1208 2044.5,1206.42 2045.09,1206.57 2045.67,1210.06 2046.26,1211.69 2046.85,1213.18 2047.43,1211.8 2048.02,1211.81 2048.6,1212.01 2049.19,1210.47 2049.78,1209.02 2050.36,1210.64 2050.95,1207.91 2051.54,1209.53 2052.12,1209.83 2052.71,1209.8 2053.3,1211.61 2053.88,1210.16 2054.47,1211.86 2055.06,1211.55 2055.64,1210.15 2056.23,1208.8 2056.81,1209.22 2057.4,1209.56 2057.99,1212.67 2058.57,1212.88 2059.16,1211.12 2059.75,1211.51 2060.33,1210.08 2060.92,1210.25 2061.51,1209.09 2062.09,1209.24 2062.68,1208.25 2063.27,1205.51 2063.85,1204.11 2064.44,1206.23 2065.02,1208.12 2065.61,1208.35 2066.2,1211.3 2066.78,1211.35 2067.37,1211.41 2067.96,1214.19 2068.54,1213.83 2069.13,1216.58 2069.72,1216.67 2070.3,1216.25 2070.89,1217.43 2071.48,1214.45 2072.06,1211.46 2072.65,1214.1 2073.23,1215.37 2073.82,1215.31 2074.41,1216.3 2074.99,1216.26 2075.58,1214.55 2076.17,1212.95 2076.75,1214.61 2077.34,1215.96 2077.93,1217.23 2078.51,1215.1 2079.1,1213.78 2079.68,1213.37 2080.27,1211.93 2080.86,1213.13 2081.44,1212.82 2082.03,1212.7 2082.62,1211.05 2083.2,1214.01 2083.79,1214.01 2084.38,1216.65 2084.96,1219.49 2085.55,1221.72 2086.14,1219.63 2086.72,1219.2 2087.31,1217.32 2087.89,1218.43 2088.48,1216.44 2089.07,1216.52 2089.65,1217.56 2090.24,1215.92 2090.83,1215.97 2091.41,1215.47 2092,1212.19 2092.59,1213.54 2093.17,1209.04 2093.76,1211.92 2094.35,1210.7 2094.93,1213.64 2095.52,1208.95 2096.1,1207.45 2096.69,1203.2 2097.28,1204.82 2097.86,1204.92 2098.45,1206.51 2099.04,1203.7 2099.62,1204.26 2100.21,1204.65 2100.8,1205.19 2101.38,1207.15 2101.97,1211.97 2102.55,1213.43 2103.14,1214.76 2103.73,1213.19 2104.31,1213.02 2104.9,1214.83 2105.49,1214.63 2106.07,1216.26 2106.66,1220.3 2107.25,1219.81 2107.83,1218.13 2108.42,1219.13 2109.01,1221.41 2109.59,1220.72 2110.18,1217.26 2110.76,1215.35 2111.35,1212.01 2111.94,1215.13 2112.52,1213.37 2113.11,1211.63 2113.7,1213.23 2114.28,1216.24 2114.87,1217.31 2115.46,1218.25 2116.04,1216.64 2116.63,1216.39 2117.22,1215.93 2117.8,1220.03 2118.39,1218.22 2118.97,1217.36 2119.56,1214.19 2120.15,1215.65 2120.73,1216.81 2121.32,1216.3 2121.91,1216 2122.49,1217.41 2123.08,1218.73 2123.67,1215.58 2124.25,1215.21 2124.84,1216.5 2125.42,1216.35 2126.01,1216.41 2126.6,1216.08 2127.18,1214.42 2127.77,1209.95 2128.36,1211.19 2128.94,1211.28 2129.53,1211.15 2130.12,1212.55 2130.7,1207.75 2131.29,1208.08 2131.88,1205.07 2132.46,1208.53 2133.05,1208.61 2133.63,1210.65 2134.22,1211.02 2134.81,1210.81 2135.39,1211 2135.98,1212.8 2136.57,1214.18 2137.15,1212.66 2137.74,1209.78 2138.33,1210.15 2138.91,1211.74 2139.5,1211.98 2140.09,1211.85 2140.67,1213.08 2141.26,1211.71 2141.84,1210.21 2142.43,1207.26 2143.02,1204.84 2143.6,1205.17 2144.19,1208.47 2144.78,1209.86 2145.36,1211.29 2145.95,1209.52 2146.54,1209.69 2147.12,1209.8 2147.71,1208.35 2148.3,1204.13 2148.88,1205.91 2149.47,1206.29 2150.05,1206.75 2150.64,1205.78 2151.23,1207.59 2151.81,1210.98 2152.4,1210.86 2152.99,1209.55 2153.57,1209.54 2154.16,1209.76 2154.75,1209.72 2155.33,1211.17 2155.92,1208.34 2156.5,1208.85 2157.09,1211.76 2157.68,1210.19 2158.26,1210.56 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1212.46 L986.612 1212.46 L987.198 1212.46 L987.785 1212.46 L988.371 1212.46 L988.957 1212.46 L989.544 1212.46 L990.13 1212.46 L990.717 1212.46 L991.303 1212.46 L991.889 1212.46 L992.476 1212.46 L993.062 1212.46 L993.649 1212.46 L994.235 1212.46 L994.822 1212.46 L995.408 1212.46 L995.994 1212.46 L996.581 1212.46 L997.167 1212.46 L997.754 1212.46 L998.34 1212.46 L998.926 1212.46 L999.513 1212.46 L1000.1 1212.46 L1000.69 1212.46 L1001.27 1212.46 L1001.86 1212.46 L1002.44 1212.46 L1003.03 1212.46 L1003.62 1212.46 L1004.2 1212.46 L1004.79 1212.46 L1005.38 1212.46 L1005.96 1212.46 L1006.55 1212.46 L1007.14 1212.46 L1007.72 1212.46 L1008.31 1212.46 L1008.9 1212.46 L1009.48 1212.46 L1010.07 1212.46 L1010.65 1212.46 L1011.24 1212.46 L1011.83 1212.46 L1012.41 1212.46 L1013 1212.46 L1013.59 1212.46 L1014.17 1212.46 L1014.76 1212.46 L1015.35 1212.46 L1015.93 1212.46 L1016.52 1212.46 L1017.11 1212.46 L1017.69 1212.46 L1018.28 1212.46 L1018.86 1212.46 L1019.45 1212.46 L1020.04 1212.46 L1020.62 1212.46 L1021.21 1212.46 L1021.8 1212.46 L1022.38 1212.46 L1022.97 1212.46 L1023.56 1212.46 L1024.14 1212.46 L1024.73 1212.46 L1025.32 1212.46 L1025.9 1212.46 L1026.49 1212.46 L1027.07 1212.46 L1027.66 1212.46 L1028.25 1212.46 L1028.83 1212.46 L1029.42 1212.46 L1030.01 1212.46 L1030.59 1212.46 L1031.18 1212.46 L1031.77 1212.46 L1032.35 1212.46 L1032.94 1212.46 L1033.52 1212.46 L1034.11 1212.46 L1034.7 1212.46 L1035.28 1212.46 L1035.87 1212.46 L1036.46 1212.46 L1037.04 1212.46 L1037.63 1212.46 L1038.22 1212.46 L1038.8 1212.46 L1039.39 1212.46 L1039.98 1212.46 L1040.56 1212.46 L1041.15 1212.46 L1041.73 1212.46 L1042.32 1212.46 L1042.91 1212.46 L1043.49 1212.46 L1044.08 1212.46 L1044.67 1212.46 L1045.25 1212.46 L1045.84 1212.46 L1046.43 1212.46 L1047.01 1212.46 L1047.6 1212.46 L1048.19 1212.46 L1048.77 1212.46 L1049.36 1212.46 L1049.94 1212.46 L1050.53 1212.46 L1051.12 1212.46 L1051.7 1212.46 L1052.29 1212.46 L1052.88 1212.46 L1053.46 1212.46 L1054.05 1212.46 L1054.64 1212.46 L1055.22 1212.46 L1055.81 1212.46 L1056.39 1212.46 L1056.98 1212.46 L1057.57 1212.46 L1058.15 1212.46 L1058.74 1212.46 L1059.33 1212.46 L1059.91 1212.46 L1060.5 1212.46 L1061.09 1212.46 L1061.67 1212.46 L1062.26 1212.46 L1062.85 1212.46 L1063.43 1212.46 L1064.02 1212.46 L1064.6 1212.46 L1065.19 1212.46 L1065.78 1212.46 L1066.36 1212.46 L1066.95 1212.46 L1067.54 1212.46 L1068.12 1212.46 L1068.71 1212.46 L1069.3 1212.46 L1069.88 1212.46 L1070.47 1212.46 L1071.06 1212.46 L1071.64 1212.46 L1072.23 1212.46 L1072.81 1212.46 L1073.4 1212.46 L1073.99 1212.46 L1074.57 1212.46 L1075.16 1212.46 L1075.75 1212.46 L1076.33 1212.46 L1076.92 1212.46 L1077.51 1212.46 L1078.09 1212.46 L1078.68 1212.46 L1079.26 1212.46 L1079.85 1212.46 L1080.44 1212.46 L1081.02 1212.46 L1081.61 1212.46 L1082.2 1212.46 L1082.78 1212.46 L1083.37 1212.46 L1083.96 1212.46 L1084.54 1212.46 L1085.13 1212.46 L1085.72 1212.46 L1086.3 1212.46 L1086.89 1212.46 L1087.47 1212.46 L1088.06 1212.46 L1088.65 1212.46 L1089.23 1212.46 L1089.82 1212.46 L1090.41 1212.46 L1090.99 1212.46 L1091.58 1212.46 L1092.17 1212.46 L1092.75 1212.46 L1093.34 1212.46 L1093.93 1212.46 L1094.51 1212.46 L1095.1 1212.46 L1095.68 1212.46 L1096.27 1212.46 L1096.86 1212.46 L1097.44 1212.46 L1098.03 1212.46 L1098.62 1212.46 L1099.2 1212.46 L1099.79 1212.46 L1100.38 1212.46 L1100.96 1212.46 L1101.55 1212.46 L1102.14 1212.46 L1102.72 1212.46 L1103.31 1212.46 L1103.89 1212.46 L1104.48 1212.46 L1105.07 1212.46 L1105.65 1212.46 L1106.24 1212.46 L1106.83 1212.46 L1107.41 1212.46 L1108 1212.46 L1108.59 1212.46 L1109.17 1212.46 L1109.76 1212.46 L1110.34 1212.46 L1110.93 1212.46 L1111.52 1212.46 L1112.1 1212.46 L1112.69 1212.46 L1113.28 1212.46 L1113.86 1212.46 L1114.45 1212.46 L1115.04 1212.46 L1115.62 1212.46 L1116.21 1212.46 L1116.8 1212.46 L1117.38 1212.46 L1117.97 1212.46 L1118.55 1212.46 L1119.14 1212.46 L1119.73 1212.46 L1120.31 1212.46 L1120.9 1212.46 L1121.49 1212.46 L1122.07 1212.46 L1122.66 1212.46 L1123.25 1212.46 L1123.83 1212.46 L1124.42 1212.46 L1125.01 1212.46 L1125.59 1212.46 L1126.18 1212.46 L1126.76 1212.46 L1127.35 1212.46 L1127.94 1212.46 L1128.52 1212.46 L1129.11 1212.46 L1129.7 1212.46 L1130.28 1212.46 L1130.87 1212.46 L1131.46 1212.46 L1132.04 1212.46 L1132.63 1212.46 L1133.21 1212.46 L1133.8 1212.46 L1134.39 1212.46 L1134.97 1212.46 L1135.56 1212.46 L1136.15 1212.46 L1136.73 1212.46 L1137.32 1212.46 L1137.91 1212.46 L1138.49 1212.46 L1139.08 1212.46 L1139.67 1212.46 L1140.25 1212.46 L1140.84 1212.46 L1141.42 1212.46 L1142.01 1212.46 L1142.6 1212.46 L1143.18 1212.46 L1143.77 1212.46 L1144.36 1212.46 L1144.94 1212.46 L1145.53 1212.46 L1146.12 1212.46 L1146.7 1212.46 L1147.29 1212.46 L1147.88 1212.46 L1148.46 1212.46 L1149.05 1212.46 L1149.63 1212.46 L1150.22 1212.46 L1150.81 1212.46 L1151.39 1212.46 L1151.98 1212.46 L1152.57 1212.46 L1153.15 1212.46 L1153.74 1212.46 L1154.33 1212.46 L1154.91 1212.46 L1155.5 1212.46 L1156.09 1212.46 L1156.67 1212.46 L1157.26 1212.46 L1157.84 1212.46 L1158.43 1212.46 L1159.02 1212.46 L1159.6 1212.46 L1160.19 1212.46 L1160.78 1212.46 L1161.36 1212.46 L1161.95 1212.46 L1162.54 1212.46 L1163.12 1212.46 L1163.71 1212.46 L1164.29 1212.46 L1164.88 1212.46 L1165.47 1212.46 L1166.05 1212.46 L1166.64 1212.46 L1167.23 1212.46 L1167.81 1212.46 L1168.4 1212.46 L1168.99 1212.46 L1169.57 1212.46 L1170.16 1212.46 L1170.75 1212.46 L1171.33 1212.46 L1171.92 1212.46 L1172.5 1212.46 L1173.09 1212.46 L1173.68 1212.46 L1174.26 1212.46 L1174.85 1212.46 L1175.44 1212.46 L1176.02 1212.46 L1176.61 1212.46 L1177.2 1212.46 L1177.78 1212.46 L1178.37 1212.46 L1178.96 1212.46 L1179.54 1212.46 L1180.13 1212.46 L1180.71 1212.46 L1181.3 1212.46 L1181.89 1212.46 L1182.47 1212.46 L1183.06 1212.46 L1183.65 1212.46 L1184.23 1212.46 L1184.82 1212.46 L1185.41 1212.46 L1185.99 1212.46 L1186.58 1212.46 L1187.16 1212.46 L1187.75 1212.46 L1188.34 1212.46 L1188.92 1212.46 L1189.51 1212.46 L1190.1 1212.46 L1190.68 1212.46 L1191.27 1212.46 L1191.86 1212.46 L1192.44 1212.46 L1193.03 1212.46 L1193.62 1212.46 L1194.2 1212.46 L1194.79 1212.46 L1195.37 1212.46 L1195.96 1212.46 L1196.55 1212.46 L1197.13 1212.46 L1197.72 1212.46 L1198.31 1212.46 L1198.89 1212.46 L1199.48 1212.46 L1200.07 1212.46 L1200.65 1212.46 L1201.24 1212.46 L1201.83 1212.46 L1202.41 1212.46 L1203 1212.46 L1203.58 1212.46 L1204.17 1212.46 L1204.76 1212.46 L1205.34 1212.46 L1205.93 1212.46 L1206.52 1212.46 L1207.1 1212.46 L1207.69 1212.46 L1208.28 1212.46 L1208.86 1212.46 L1209.45 1212.46 L1210.03 1212.46 L1210.62 1212.46 L1211.21 1212.46 L1211.79 1212.46 L1212.38 1212.46 L1212.97 1212.46 L1213.55 1212.46 L1214.14 1212.46 L1214.73 1212.46 L1215.31 1212.46 L1215.9 1212.46 L1216.49 1212.46 L1217.07 1212.46 L1217.66 1212.46 L1218.24 1212.46 L1218.83 1212.46 L1219.42 1212.46 L1220 1212.46 L1220.59 1212.46 L1221.18 1212.46 L1221.76 1212.46 L1222.35 1212.46 L1222.94 1212.46 L1223.52 1212.46 L1224.11 1212.46 L1224.7 1212.46 L1225.28 1212.46 L1225.87 1212.46 L1226.45 1212.46 L1227.04 1212.46 L1227.63 1212.46 L1228.21 1212.46 L1228.8 1212.46 L1229.39 1212.46 L1229.97 1212.46 L1230.56 1212.46 L1231.15 1212.46 L1231.73 1212.46 L1232.32 1212.46 L1232.91 1212.46 L1233.49 1212.46 L1234.08 1212.46 L1234.66 1212.46 L1235.25 1212.46 L1235.84 1212.46 L1236.42 1212.46 L1237.01 1212.46 L1237.6 1212.46 L1238.18 1212.46 L1238.77 1212.46 L1239.36 1212.46 L1239.94 1212.46 L1240.53 1212.46 L1241.11 1212.46 L1241.7 1212.46 L1242.29 1212.46 L1242.87 1212.46 L1243.46 1212.46 L1244.05 1212.46 L1244.63 1212.46 L1245.22 1212.46 L1245.81 1212.46 L1246.39 1212.46 L1246.98 1212.46 L1247.57 1212.46 L1248.15 1212.46 L1248.74 1212.46 L1249.32 1212.46 L1249.91 1212.46 L1250.5 1212.46 L1251.08 1212.46 L1251.67 1212.46 L1252.26 1212.46 L1252.84 1212.46 L1253.43 1212.46 L1254.02 1212.46 L1254.6 1212.46 L1255.19 1212.46 L1255.78 1212.46 L1256.36 1212.46 L1256.95 1212.46 L1257.53 1212.46 L1258.12 1212.46 L1258.71 1212.46 L1259.29 1212.46 L1259.88 1212.46 L1260.47 1212.46 L1261.05 1212.46 L1261.64 1212.46 L1262.23 1212.46 L1262.81 1212.46 L1263.4 1212.46 L1263.98 1212.46 L1264.57 1212.46 L1265.16 1212.46 L1265.74 1212.46 L1266.33 1212.46 L1266.92 1212.46 L1267.5 1212.46 L1268.09 1212.46 L1268.68 1212.46 L1269.26 1212.46 L1269.85 1212.46 L1270.44 1212.46 L1271.02 1212.46 L1271.61 1212.46 L1272.19 1212.46 L1272.78 1212.46 L1273.37 1212.46 L1273.95 1212.46 L1274.54 1212.46 L1275.13 1212.46 L1275.71 1212.46 L1276.3 1212.46 L1276.89 1212.46 L1277.47 1212.46 L1278.06 1212.46 L1278.65 1212.46 L1279.23 1212.46 L1279.82 1212.46 L1280.4 1212.46 L1280.99 1212.46 L1281.58 1212.46 L1282.16 1212.46 L1282.75 1212.46 L1283.34 1212.46 L1283.92 1212.46 L1284.51 1212.46 L1285.1 1212.46 L1285.68 1212.46 L1286.27 1212.46 L1286.86 1212.46 L1287.44 1212.46 L1288.03 1212.46 L1288.61 1212.46 L1289.2 1212.46 L1289.79 1212.46 L1290.37 1212.46 L1290.96 1212.46 L1291.55 1212.46 L1292.13 1212.46 L1292.72 1212.46 L1293.31 1212.46 L1293.89 1212.46 L1294.48 1212.46 L1295.06 1212.46 L1295.65 1212.46 L1296.24 1212.46 L1296.82 1212.46 L1297.41 1212.46 L1298 1212.46 L1298.58 1212.46 L1299.17 1212.46 L1299.76 1212.46 L1300.34 1212.46 L1300.93 1212.46 L1301.52 1212.46 L1302.1 1212.46 L1302.69 1212.46 L1303.27 1212.46 L1303.86 1212.46 L1304.45 1212.46 L1305.03 1212.46 L1305.62 1212.46 L1306.21 1212.46 L1306.79 1212.46 L1307.38 1212.46 L1307.97 1212.46 L1308.55 1212.46 L1309.14 1212.46 L1309.73 1212.46 L1310.31 1212.46 L1310.9 1212.46 L1311.48 1212.46 L1312.07 1212.46 L1312.66 1212.46 L1313.24 1212.46 L1313.83 1212.46 L1314.42 1212.46 L1315 1212.46 L1315.59 1212.46 L1316.18 1212.46 L1316.76 1212.46 L1317.35 1212.46 L1317.93 1212.46 L1318.52 1212.46 L1319.11 1212.46 L1319.69 1212.46 L1320.28 1212.46 L1320.87 1212.46 L1321.45 1212.46 L1322.04 1212.46 L1322.63 1212.46 L1323.21 1212.46 L1323.8 1212.46 L1324.39 1212.46 L1324.97 1212.46 L1325.56 1212.46 L1326.14 1212.46 L1326.73 1212.46 L1327.32 1212.46 L1327.9 1212.46 L1328.49 1212.46 L1329.08 1212.46 L1329.66 1212.46 L1330.25 1212.46 L1330.84 1212.46 L1331.42 1212.46 L1332.01 1212.46 L1332.6 1212.46 L1333.18 1212.46 L1333.77 1212.46 L1334.35 1212.46 L1334.94 1212.46 L1335.53 1212.46 L1336.11 1212.46 L1336.7 1212.46 L1337.29 1212.46 L1337.87 1212.46 L1338.46 1212.46 L1339.05 1212.46 L1339.63 1212.46 L1340.22 1212.46 L1340.8 1212.46 L1341.39 1212.46 L1341.98 1212.46 L1342.56 1212.46 L1343.15 1212.46 L1343.74 1212.46 L1344.32 1212.46 L1344.91 1212.46 L1345.5 1212.46 L1346.08 1212.46 L1346.67 1212.46 L1347.26 1212.46 L1347.84 1212.46 L1348.43 1212.46 L1349.01 1212.46 L1349.6 1212.46 L1350.19 1212.46 L1350.77 1212.46 L1351.36 1212.46 L1351.95 1212.46 L1352.53 1212.46 L1353.12 1212.46 L1353.71 1212.46 L1354.29 1212.46 L1354.88 1212.46 L1355.47 1212.46 L1356.05 1212.46 L1356.64 1212.46 L1357.22 1212.46 L1357.81 1212.46 L1358.4 1212.46 L1358.98 1212.46 L1359.57 1212.46 L1360.16 1212.46 L1360.74 1212.46 L1361.33 1212.46 L1361.92 1212.46 L1362.5 1212.46 L1363.09 1212.46 L1363.68 1212.46 L1364.26 1212.46 L1364.85 1212.46 L1365.43 1212.46 L1366.02 1212.46 L1366.61 1212.46 L1367.19 1212.46 L1367.78 1212.46 L1368.37 1212.46 L1368.95 1212.46 L1369.54 1212.46 L1370.13 1212.46 L1370.71 1212.46 L1371.3 1212.46 L1371.88 1212.46 L1372.47 1212.46 L1373.06 1212.46 L1373.64 1212.46 L1374.23 1212.46 L1374.82 1212.46 L1375.4 1212.46 L1375.99 1212.46 L1376.58 1212.46 L1377.16 1212.46 L1377.75 1212.46 L1378.34 1212.46 L1378.92 1212.46 L1379.51 1212.46 L1380.09 1212.46 L1380.68 1212.46 L1381.27 1212.46 L1381.85 1212.46 L1382.44 1212.46 L1383.03 1212.46 L1383.61 1212.46 L1384.2 1212.46 L1384.79 1212.46 L1385.37 1212.46 L1385.96 1212.46 L1386.55 1212.46 L1387.13 1212.46 L1387.72 1212.46 L1388.3 1212.46 L1388.89 1212.46 L1389.48 1212.46 L1390.06 1212.46 L1390.65 1212.46 L1391.24 1212.46 L1391.82 1212.46 L1392.41 1212.46 L1393 1212.46 L1393.58 1212.46 L1394.17 1212.46 L1394.75 1212.46 L1395.34 1212.46 L1395.93 1212.46 L1396.51 1212.46 L1397.1 1212.46 L1397.69 1212.46 L1398.27 1212.46 L1398.86 1212.46 L1399.45 1212.46 L1400.03 1212.46 L1400.62 1212.46 L1401.21 1212.46 L1401.79 1212.46 L1402.38 1212.46 L1402.96 1212.46 L1403.55 1212.46 L1404.14 1212.46 L1404.72 1212.46 L1405.31 1212.46 L1405.9 1212.46 L1406.48 1212.46 L1407.07 1212.46 L1407.66 1212.46 L1408.24 1212.46 L1408.83 1212.46 L1409.42 1212.46 L1410 1212.46 L1410.59 1212.46 L1411.17 1212.46 L1411.76 1212.46 L1412.35 1212.46 L1412.93 1212.46 L1413.52 1212.46 L1414.11 1212.46 L1414.69 1212.46 L1415.28 1212.46 L1415.87 1212.46 L1416.45 1212.46 L1417.04 1212.46 L1417.63 1212.46 L1418.21 1212.46 L1418.8 1212.46 L1419.38 1212.46 L1419.97 1212.46 L1420.56 1212.46 L1421.14 1212.46 L1421.73 1212.46 L1422.32 1212.46 L1422.9 1212.46 L1423.49 1212.46 L1424.08 1212.46 L1424.66 1212.46 L1425.25 1212.46 L1425.83 1212.46 L1426.42 1212.46 L1427.01 1212.46 L1427.59 1212.46 L1428.18 1212.46 L1428.77 1212.46 L1429.35 1212.46 L1429.94 1212.46 L1430.53 1212.46 L1431.11 1212.46 L1431.7 1212.46 L1432.29 1212.46 L1432.87 1212.46 L1433.46 1212.46 L1434.04 1212.46 L1434.63 1212.46 L1435.22 1212.46 L1435.8 1212.46 L1436.39 1212.46 L1436.98 1212.46 L1437.56 1212.46 L1438.15 1212.46 L1438.74 1212.46 L1439.32 1212.46 L1439.91 1212.46 L1440.5 1212.46 L1441.08 1212.46 L1441.67 1212.46 L1442.25 1212.46 L1442.84 1212.46 L1443.43 1212.46 L1444.01 1212.46 L1444.6 1212.46 L1445.19 1212.46 L1445.77 1212.46 L1446.36 1212.46 L1446.95 1212.46 L1447.53 1212.46 L1448.12 1212.46 L1448.7 1212.46 L1449.29 1212.46 L1449.88 1212.46 L1450.46 1212.46 L1451.05 1212.46 L1451.64 1212.46 L1452.22 1212.46 L1452.81 1212.46 L1453.4 1212.46 L1453.98 1212.46 L1454.57 1212.46 L1455.16 1212.46 L1455.74 1212.46 L1456.33 1212.46 L1456.91 1212.46 L1457.5 1212.46 L1458.09 1212.46 L1458.67 1212.46 L1459.26 1212.46 L1459.85 1212.46 L1460.43 1212.46 L1461.02 1212.46 L1461.61 1212.46 L1462.19 1212.46 L1462.78 1212.46 L1463.37 1212.46 L1463.95 1212.46 L1464.54 1212.46 L1465.12 1212.46 L1465.71 1212.46 L1466.3 1212.46 L1466.88 1212.46 L1467.47 1212.46 L1468.06 1212.46 L1468.64 1212.46 L1469.23 1212.46 L1469.82 1212.46 L1470.4 1212.46 L1470.99 1212.46 L1471.57 1212.46 L1472.16 1212.46 L1472.75 1212.46 L1473.33 1212.46 L1473.92 1212.46 L1474.51 1212.46 L1475.09 1212.46 L1475.68 1212.46 L1476.27 1212.46 L1476.85 1212.46 L1477.44 1212.46 L1478.03 1212.46 L1478.61 1212.46 L1479.2 1212.46 L1479.78 1212.46 L1480.37 1212.46 L1480.96 1212.46 L1481.54 1212.46 L1482.13 1212.46 L1482.72 1212.46 L1483.3 1212.46 L1483.89 1212.46 L1484.48 1212.46 L1485.06 1212.46 L1485.65 1212.46 L1486.24 1212.46 L1486.82 1212.46 L1487.41 1212.46 L1487.99 1212.46 L1488.58 1212.46 L1489.17 1212.46 L1489.75 1212.46 L1490.34 1212.46 L1490.93 1212.46 L1491.51 1212.46 L1492.1 1212.46 L1492.69 1212.46 L1493.27 1212.46 L1493.86 1212.46 L1494.45 1212.46 L1495.03 1212.46 L1495.62 1212.46 L1496.2 1212.46 L1496.79 1212.46 L1497.38 1212.46 L1497.96 1212.46 L1498.55 1212.46 L1499.14 1212.46 L1499.72 1212.46 L1500.31 1212.46 L1500.9 1212.46 L1501.48 1212.46 L1502.07 1212.46 L1502.65 1212.46 L1503.24 1212.46 L1503.83 1212.46 L1504.41 1212.46 L1505 1212.46 L1505.59 1212.46 L1506.17 1212.46 L1506.76 1212.46 L1507.35 1212.46 L1507.93 1212.46 L1508.52 1212.46 L1509.11 1212.46 L1509.69 1212.46 L1510.28 1212.46 L1510.86 1212.46 L1511.45 1212.46 L1512.04 1212.46 L1512.62 1212.46 L1513.21 1212.46 L1513.8 1212.46 L1514.38 1212.46 L1514.97 1212.46 L1515.56 1212.46 L1516.14 1212.46 L1516.73 1212.46 L1517.32 1212.46 L1517.9 1212.46 L1518.49 1212.46 L1519.07 1212.46 L1519.66 1212.46 L1520.25 1212.46 L1520.83 1212.46 L1521.42 1212.46 L1522.01 1212.46 L1522.59 1212.46 L1523.18 1212.46 L1523.77 1212.46 L1524.35 1212.46 L1524.94 1212.46 L1525.52 1212.46 L1526.11 1212.46 L1526.7 1212.46 L1527.28 1212.46 L1527.87 1212.46 L1528.46 1212.46 L1529.04 1212.46 L1529.63 1212.46 L1530.22 1212.46 L1530.8 1212.46 L1531.39 1212.46 L1531.98 1212.46 L1532.56 1212.46 L1533.15 1212.46 L1533.73 1212.46 L1534.32 1212.46 L1534.91 1212.46 L1535.49 1212.46 L1536.08 1212.46 L1536.67 1212.46 L1537.25 1212.46 L1537.84 1212.46 L1538.43 1212.46 L1539.01 1212.46 L1539.6 1212.46 L1540.19 1212.46 L1540.77 1212.46 L1541.36 1212.46 L1541.94 1212.46 L1542.53 1212.46 L1543.12 1212.46 L1543.7 1212.46 L1544.29 1212.46 L1544.88 1212.46 L1545.46 1212.46 L1546.05 1212.46 L1546.64 1212.46 L1547.22 1212.46 L1547.81 1212.46 L1548.4 1212.46 L1548.98 1212.46 L1549.57 1212.46 L1550.15 1212.46 L1550.74 1212.46 L1551.33 1212.46 L1551.91 1212.46 L1552.5 1212.46 L1553.09 1212.46 L1553.67 1212.46 L1554.26 1212.46 L1554.85 1212.46 L1555.43 1212.46 L1556.02 1212.46 L1556.6 1212.46 L1557.19 1212.46 L1557.78 1212.46 L1558.36 1212.46 L1558.95 1212.46 L1559.54 1212.46 L1560.12 1212.46 L1560.71 1212.46 L1561.3 1212.46 L1561.88 1212.46 L1562.47 1212.46 L1563.06 1212.46 L1563.64 1212.46 L1564.23 1212.46 L1564.81 1212.46 L1565.4 1212.46 L1565.99 1212.46 L1566.57 1212.46 L1567.16 1212.46 L1567.75 1212.46 L1568.33 1212.46 L1568.92 1212.46 L1569.51 1212.46 L1570.09 1212.46 L1570.68 1212.46 L1571.27 1212.46 L1571.85 1212.46 L1572.44 1212.46 L1573.02 1212.46 L1573.61 1212.46 L1574.2 1212.46 L1574.78 1212.46 L1575.37 1212.46 L1575.96 1212.46 L1576.54 1212.46 L1577.13 1212.46 L1577.72 1212.46 L1578.3 1212.46 L1578.89 1212.46 L1579.47 1212.46 L1580.06 1212.46 L1580.65 1212.46 L1581.23 1212.46 L1581.82 1212.46 L1582.41 1212.46 L1582.99 1212.46 L1583.58 1212.46 L1584.17 1212.46 L1584.75 1212.46 L1585.34 1212.46 L1585.93 1212.46 L1586.51 1212.46 L1587.1 1212.46 L1587.68 1212.46 L1588.27 1212.46 L1588.86 1212.46 L1589.44 1212.46 L1590.03 1212.46 L1590.62 1212.46 L1591.2 1212.46 L1591.79 1212.46 L1592.38 1212.46 L1592.96 1212.46 L1593.55 1212.46 L1594.14 1212.46 L1594.72 1212.46 L1595.31 1212.46 L1595.89 1212.46 L1596.48 1212.46 L1597.07 1212.46 L1597.65 1212.46 L1598.24 1212.46 L1598.83 1212.46 L1599.41 1212.46 L1600 1212.46 L1600.59 1212.46 L1601.17 1212.46 L1601.76 1212.46 L1602.34 1212.46 L1602.93 1212.46 L1603.52 1212.46 L1604.1 1212.46 L1604.69 1212.46 L1605.28 1212.46 L1605.86 1212.46 L1606.45 1212.46 L1607.04 1212.46 L1607.62 1212.46 L1608.21 1212.46 L1608.8 1212.46 L1609.38 1212.46 L1609.97 1212.46 L1610.55 1212.46 L1611.14 1212.46 L1611.73 1212.46 L1612.31 1212.46 L1612.9 1212.46 L1613.49 1212.46 L1614.07 1212.46 L1614.66 1212.46 L1615.25 1212.46 L1615.83 1212.46 L1616.42 1212.46 L1617.01 1212.46 L1617.59 1212.46 L1618.18 1212.46 L1618.76 1212.46 L1619.35 1212.46 L1619.94 1212.46 L1620.52 1212.46 L1621.11 1212.46 L1621.7 1212.46 L1622.28 1212.46 L1622.87 1212.46 L1623.46 1212.46 L1624.04 1212.46 L1624.63 1212.46 L1625.22 1212.46 L1625.8 1212.46 L1626.39 1212.46 L1626.97 1212.46 L1627.56 1212.46 L1628.15 1212.46 L1628.73 1212.46 L1629.32 1212.46 L1629.91 1212.46 L1630.49 1212.46 L1631.08 1212.46 L1631.67 1212.46 L1632.25 1212.46 L1632.84 1212.46 L1633.42 1212.46 L1634.01 1212.46 L1634.6 1212.46 L1635.18 1212.46 L1635.77 1212.46 L1636.36 1212.46 L1636.94 1212.46 L1637.53 1212.46 L1638.12 1212.46 L1638.7 1212.46 L1639.29 1212.46 L1639.88 1212.46 L1640.46 1212.46 L1641.05 1212.46 L1641.63 1212.46 L1642.22 1212.46 L1642.81 1212.46 L1643.39 1212.46 L1643.98 1212.46 L1644.57 1212.46 L1645.15 1212.46 L1645.74 1212.46 L1646.33 1212.46 L1646.91 1212.46 L1647.5 1212.46 L1648.09 1212.46 L1648.67 1212.46 L1649.26 1212.46 L1649.84 1212.46 L1650.43 1212.46 L1651.02 1212.46 L1651.6 1212.46 L1652.19 1212.46 L1652.78 1212.46 L1653.36 1212.46 L1653.95 1212.46 L1654.54 1212.46 L1655.12 1212.46 L1655.71 1212.46 L1656.29 1212.46 L1656.88 1212.46 L1657.47 1212.46 L1658.05 1212.46 L1658.64 1212.46 L1659.23 1212.46 L1659.81 1212.46 L1660.4 1212.46 L1660.99 1212.46 L1661.57 1212.46 L1662.16 1212.46 L1662.75 1212.46 L1663.33 1212.46 L1663.92 1212.46 L1664.5 1212.46 L1665.09 1212.46 L1665.68 1212.46 L1666.26 1212.46 L1666.85 1212.46 L1667.44 1212.46 L1668.02 1212.46 L1668.61 1212.46 L1669.2 1212.46 L1669.78 1212.46 L1670.37 1212.46 L1670.96 1212.46 L1671.54 1212.46 L1672.13 1212.46 L1672.71 1212.46 L1673.3 1212.46 L1673.89 1212.46 L1674.47 1212.46 L1675.06 1212.46 L1675.65 1212.46 L1676.23 1212.46 L1676.82 1212.46 L1677.41 1212.46 L1677.99 1212.46 L1678.58 1212.46 L1679.17 1212.46 L1679.75 1212.46 L1680.34 1212.46 L1680.92 1212.46 L1681.51 1212.46 L1682.1 1212.46 L1682.68 1212.46 L1683.27 1212.46 L1683.86 1212.46 L1684.44 1212.46 L1685.03 1212.46 L1685.62 1212.46 L1686.2 1212.46 L1686.79 1212.46 L1687.37 1212.46 L1687.96 1212.46 L1688.55 1212.46 L1689.13 1212.46 L1689.72 1212.46 L1690.31 1212.46 L1690.89 1212.46 L1691.48 1212.46 L1692.07 1212.46 L1692.65 1212.46 L1693.24 1212.46 L1693.83 1212.46 L1694.41 1212.46 L1695 1212.46 L1695.58 1212.46 L1696.17 1212.46 L1696.76 1212.46 L1697.34 1212.46 L1697.93 1212.46 L1698.52 1212.46 L1699.1 1212.46 L1699.69 1212.46 L1700.28 1212.46 L1700.86 1212.46 L1701.45 1212.46 L1702.04 1212.46 L1702.62 1212.46 L1703.21 1212.46 L1703.79 1212.46 L1704.38 1212.46 L1704.97 1212.46 L1705.55 1212.46 L1706.14 1212.46 L1706.73 1212.46 L1707.31 1212.46 L1707.9 1212.46 L1708.49 1212.46 L1709.07 1212.46 L1709.66 1212.46 L1710.24 1212.46 L1710.83 1212.46 L1711.42 1212.46 L1712 1212.46 L1712.59 1212.46 L1713.18 1212.46 L1713.76 1212.46 L1714.35 1212.46 L1714.94 1212.46 L1715.52 1212.46 L1716.11 1212.46 L1716.7 1212.46 L1717.28 1212.46 L1717.87 1212.46 L1718.45 1212.46 L1719.04 1212.46 L1719.63 1212.46 L1720.21 1212.46 L1720.8 1212.46 L1721.39 1212.46 L1721.97 1212.46 L1722.56 1212.46 L1723.15 1212.46 L1723.73 1212.46 L1724.32 1212.46 L1724.91 1212.46 L1725.49 1212.46 L1726.08 1212.46 L1726.66 1212.46 L1727.25 1212.46 L1727.84 1212.46 L1728.42 1212.46 L1729.01 1212.46 L1729.6 1212.46 L1730.18 1212.46 L1730.77 1212.46 L1731.36 1212.46 L1731.94 1212.46 L1732.53 1212.46 L1733.11 1212.46 L1733.7 1212.46 L1734.29 1212.46 L1734.87 1212.46 L1735.46 1212.46 L1736.05 1212.46 L1736.63 1212.46 L1737.22 1212.46 L1737.81 1212.46 L1738.39 1212.46 L1738.98 1212.46 L1739.57 1212.46 L1740.15 1212.46 L1740.74 1212.46 L1741.32 1212.46 L1741.91 1212.46 L1742.5 1212.46 L1743.08 1212.46 L1743.67 1212.46 L1744.26 1212.46 L1744.84 1212.46 L1745.43 1212.46 L1746.02 1212.46 L1746.6 1212.46 L1747.19 1212.46 L1747.78 1212.46 L1748.36 1212.46 L1748.95 1212.46 L1749.53 1212.46 L1750.12 1212.46 L1750.71 1212.46 L1751.29 1212.46 L1751.88 1212.46 L1752.47 1212.46 L1753.05 1212.46 L1753.64 1212.46 L1754.23 1212.46 L1754.81 1212.46 L1755.4 1212.46 L1755.99 1212.46 L1756.57 1212.46 L1757.16 1212.46 L1757.74 1212.46 L1758.33 1212.46 L1758.92 1212.46 L1759.5 1212.46 L1760.09 1212.46 L1760.68 1212.46 L1761.26 1212.46 L1761.85 1212.46 L1762.44 1212.46 L1763.02 1212.46 L1763.61 1212.46 L1764.19 1212.46 L1764.78 1212.46 L1765.37 1212.46 L1765.95 1212.46 L1766.54 1212.46 L1767.13 1212.46 L1767.71 1212.46 L1768.3 1212.46 L1768.89 1212.46 L1769.47 1212.46 L1770.06 1212.46 L1770.65 1212.46 L1771.23 1212.46 L1771.82 1212.46 L1772.4 1212.46 L1772.99 1212.46 L1773.58 1212.46 L1774.16 1212.46 L1774.75 1212.46 L1775.34 1212.46 L1775.92 1212.46 L1776.51 1212.46 L1777.1 1212.46 L1777.68 1212.46 L1778.27 1212.46 L1778.86 1212.46 L1779.44 1212.46 L1780.03 1212.46 L1780.61 1212.46 L1781.2 1212.46 L1781.79 1212.46 L1782.37 1212.46 L1782.96 1212.46 L1783.55 1212.46 L1784.13 1212.46 L1784.72 1212.46 L1785.31 1212.46 L1785.89 1212.46 L1786.48 1212.46 L1787.06 1212.46 L1787.65 1212.46 L1788.24 1212.46 L1788.82 1212.46 L1789.41 1212.46 L1790 1212.46 L1790.58 1212.46 L1791.17 1212.46 L1791.76 1212.46 L1792.34 1212.46 L1792.93 1212.46 L1793.52 1212.46 L1794.1 1212.46 L1794.69 1212.46 L1795.27 1212.46 L1795.86 1212.46 L1796.45 1212.46 L1797.03 1212.46 L1797.62 1212.46 L1798.21 1212.46 L1798.79 1212.46 L1799.38 1212.46 L1799.97 1212.46 L1800.55 1212.46 L1801.14 1212.46 L1801.73 1212.46 L1802.31 1212.46 L1802.9 1212.46 L1803.48 1212.46 L1804.07 1212.46 L1804.66 1212.46 L1805.24 1212.46 L1805.83 1212.46 L1806.42 1212.46 L1807 1212.46 L1807.59 1212.46 L1808.18 1212.46 L1808.76 1212.46 L1809.35 1212.46 L1809.94 1212.46 L1810.52 1212.46 L1811.11 1212.46 L1811.69 1212.46 L1812.28 1212.46 L1812.87 1212.46 L1813.45 1212.46 L1814.04 1212.46 L1814.63 1212.46 L1815.21 1212.46 L1815.8 1212.46 L1816.39 1212.46 L1816.97 1212.46 L1817.56 1212.46 L1818.14 1212.46 L1818.73 1212.46 L1819.32 1212.46 L1819.9 1212.46 L1820.49 1212.46 L1821.08 1212.46 L1821.66 1212.46 L1822.25 1212.46 L1822.84 1212.46 L1823.42 1212.46 L1824.01 1212.46 L1824.6 1212.46 L1825.18 1212.46 L1825.77 1212.46 L1826.35 1212.46 L1826.94 1212.46 L1827.53 1212.46 L1828.11 1212.46 L1828.7 1212.46 L1829.29 1212.46 L1829.87 1212.46 L1830.46 1212.46 L1831.05 1212.46 L1831.63 1212.46 L1832.22 1212.46 L1832.81 1212.46 L1833.39 1212.46 L1833.98 1212.46 L1834.56 1212.46 L1835.15 1212.46 L1835.74 1212.46 L1836.32 1212.46 L1836.91 1212.46 L1837.5 1212.46 L1838.08 1212.46 L1838.67 1212.46 L1839.26 1212.46 L1839.84 1212.46 L1840.43 1212.46 L1841.01 1212.46 L1841.6 1212.46 L1842.19 1212.46 L1842.77 1212.46 L1843.36 1212.46 L1843.95 1212.46 L1844.53 1212.46 L1845.12 1212.46 L1845.71 1212.46 L1846.29 1212.46 L1846.88 1212.46 L1847.47 1212.46 L1848.05 1212.46 L1848.64 1212.46 L1849.22 1212.46 L1849.81 1212.46 L1850.4 1212.46 L1850.98 1212.46 L1851.57 1212.46 L1852.16 1212.46 L1852.74 1212.46 L1853.33 1212.46 L1853.92 1212.46 L1854.5 1212.46 L1855.09 1212.46 L1855.68 1212.46 L1856.26 1212.46 L1856.85 1212.46 L1857.43 1212.46 L1858.02 1212.46 L1858.61 1212.46 L1859.19 1212.46 L1859.78 1212.46 L1860.37 1212.46 L1860.95 1212.46 L1861.54 1212.46 L1862.13 1212.46 L1862.71 1212.46 L1863.3 1212.46 L1863.88 1212.46 L1864.47 1212.46 L1865.06 1212.46 L1865.64 1212.46 L1866.23 1212.46 L1866.82 1212.46 L1867.4 1212.46 L1867.99 1212.46 L1868.58 1212.46 L1869.16 1212.46 L1869.75 1212.46 L1870.34 1212.46 L1870.92 1212.46 L1871.51 1212.46 L1872.09 1212.46 L1872.68 1212.46 L1873.27 1212.46 L1873.85 1212.46 L1874.44 1212.46 L1875.03 1212.46 L1875.61 1212.46 L1876.2 1212.46 L1876.79 1212.46 L1877.37 1212.46 L1877.96 1212.46 L1878.55 1212.46 L1879.13 1212.46 L1879.72 1212.46 L1880.3 1212.46 L1880.89 1212.46 L1881.48 1212.46 L1882.06 1212.46 L1882.65 1212.46 L1883.24 1212.46 L1883.82 1212.46 L1884.41 1212.46 L1885 1212.46 L1885.58 1212.46 L1886.17 1212.46 L1886.76 1212.46 L1887.34 1212.46 L1887.93 1212.46 L1888.51 1212.46 L1889.1 1212.46 L1889.69 1212.46 L1890.27 1212.46 L1890.86 1212.46 L1891.45 1212.46 L1892.03 1212.46 L1892.62 1212.46 L1893.21 1212.46 L1893.79 1212.46 L1894.38 1212.46 L1894.96 1212.46 L1895.55 1212.46 L1896.14 1212.46 L1896.72 1212.46 L1897.31 1212.46 L1897.9 1212.46 L1898.48 1212.46 L1899.07 1212.46 L1899.66 1212.46 L1900.24 1212.46 L1900.83 1212.46 L1901.42 1212.46 L1902 1212.46 L1902.59 1212.46 L1903.17 1212.46 L1903.76 1212.46 L1904.35 1212.46 L1904.93 1212.46 L1905.52 1212.46 L1906.11 1212.46 L1906.69 1212.46 L1907.28 1212.46 L1907.87 1212.46 L1908.45 1212.46 L1909.04 1212.46 L1909.63 1212.46 L1910.21 1212.46 L1910.8 1212.46 L1911.38 1212.46 L1911.97 1212.46 L1912.56 1212.46 L1913.14 1212.46 L1913.73 1212.46 L1914.32 1212.46 L1914.9 1212.46 L1915.49 1212.46 L1916.08 1212.46 L1916.66 1212.46 L1917.25 1212.46 L1917.83 1212.46 L1918.42 1212.46 L1919.01 1212.46 L1919.59 1212.46 L1920.18 1212.46 L1920.77 1212.46 L1921.35 1212.46 L1921.94 1212.46 L1922.53 1212.46 L1923.11 1212.46 L1923.7 1212.46 L1924.29 1212.46 L1924.87 1212.46 L1925.46 1212.46 L1926.04 1212.46 L1926.63 1212.46 L1927.22 1212.46 L1927.8 1212.46 L1928.39 1212.46 L1928.98 1212.46 L1929.56 1212.46 L1930.15 1212.46 L1930.74 1212.46 L1931.32 1212.46 L1931.91 1212.46 L1932.5 1212.46 L1933.08 1212.46 L1933.67 1212.46 L1934.25 1212.46 L1934.84 1212.46 L1935.43 1212.46 L1936.01 1212.46 L1936.6 1212.46 L1937.19 1212.46 L1937.77 1212.46 L1938.36 1212.46 L1938.95 1212.46 L1939.53 1212.46 L1940.12 1212.46 L1940.71 1212.46 L1941.29 1212.46 L1941.88 1212.46 L1942.46 1212.46 L1943.05 1212.46 L1943.64 1212.46 L1944.22 1212.46 L1944.81 1212.46 L1945.4 1212.46 L1945.98 1212.46 L1946.57 1212.46 L1947.16 1212.46 L1947.74 1212.46 L1948.33 1212.46 L1948.91 1212.46 L1949.5 1212.46 L1950.09 1212.46 L1950.67 1212.46 L1951.26 1212.46 L1951.85 1212.46 L1952.43 1212.46 L1953.02 1212.46 L1953.61 1212.46 L1954.19 1212.46 L1954.78 1212.46 L1955.37 1212.46 L1955.95 1212.46 L1956.54 1212.46 L1957.12 1212.46 L1957.71 1212.46 L1958.3 1212.46 L1958.88 1212.46 L1959.47 1212.46 L1960.06 1212.46 L1960.64 1212.46 L1961.23 1212.46 L1961.82 1212.46 L1962.4 1212.46 L1962.99 1212.46 L1963.58 1212.46 L1964.16 1212.46 L1964.75 1212.46 L1965.33 1212.46 L1965.92 1212.46 L1966.51 1212.46 L1967.09 1212.46 L1967.68 1212.46 L1968.27 1212.46 L1968.85 1212.46 L1969.44 1212.46 L1970.03 1212.46 L1970.61 1212.46 L1971.2 1212.46 L1971.78 1212.46 L1972.37 1212.46 L1972.96 1212.46 L1973.54 1212.46 L1974.13 1212.46 L1974.72 1212.46 L1975.3 1212.46 L1975.89 1212.46 L1976.48 1212.46 L1977.06 1212.46 L1977.65 1212.46 L1978.24 1212.46 L1978.82 1212.46 L1979.41 1212.46 L1979.99 1212.46 L1980.58 1212.46 L1981.17 1212.46 L1981.75 1212.46 L1982.34 1212.46 L1982.93 1212.46 L1983.51 1212.46 L1984.1 1212.46 L1984.69 1212.46 L1985.27 1212.46 L1985.86 1212.46 L1986.45 1212.46 L1987.03 1212.46 L1987.62 1212.46 L1988.2 1212.46 L1988.79 1212.46 L1989.38 1212.46 L1989.96 1212.46 L1990.55 1212.46 L1991.14 1212.46 L1991.72 1212.46 L1992.31 1212.46 L1992.9 1212.46 L1993.48 1212.46 L1994.07 1212.46 L1994.65 1212.46 L1995.24 1212.46 L1995.83 1212.46 L1996.41 1212.46 L1997 1212.46 L1997.59 1212.46 L1998.17 1212.46 L1998.76 1212.46 L1999.35 1212.46 L1999.93 1212.46 L2000.52 1212.46 L2001.11 1212.46 L2001.69 1212.46 L2002.28 1212.46 L2002.86 1212.46 L2003.45 1212.46 L2004.04 1212.46 L2004.62 1212.46 L2005.21 1212.46 L2005.8 1212.46 L2006.38 1212.46 L2006.97 1212.46 L2007.56 1212.46 L2008.14 1212.46 L2008.73 1212.46 L2009.32 1212.46 L2009.9 1212.46 L2010.49 1212.46 L2011.07 1212.46 L2011.66 1212.46 L2012.25 1212.46 L2012.83 1212.46 L2013.42 1212.46 L2014.01 1212.46 L2014.59 1212.46 L2015.18 1212.46 L2015.77 1212.46 L2016.35 1212.46 L2016.94 1212.46 L2017.53 1212.46 L2018.11 1212.46 L2018.7 1212.46 L2019.28 1212.46 L2019.87 1212.46 L2020.46 1212.46 L2021.04 1212.46 L2021.63 1212.46 L2022.22 1212.46 L2022.8 1212.46 L2023.39 1212.46 L2023.98 1212.46 L2024.56 1212.46 L2025.15 1212.46 L2025.73 1212.46 L2026.32 1212.46 L2026.91 1212.46 L2027.49 1212.46 L2028.08 1212.46 L2028.67 1212.46 L2029.25 1212.46 L2029.84 1212.46 L2030.43 1212.46 L2031.01 1212.46 L2031.6 1212.46 L2032.19 1212.46 L2032.77 1212.46 L2033.36 1212.46 L2033.94 1212.46 L2034.53 1212.46 L2035.12 1212.46 L2035.7 1212.46 L2036.29 1212.46 L2036.88 1212.46 L2037.46 1212.46 L2038.05 1212.46 L2038.64 1212.46 L2039.22 1212.46 L2039.81 1212.46 L2040.4 1212.46 L2040.98 1212.46 L2041.57 1212.46 L2042.15 1212.46 L2042.74 1212.46 L2043.33 1212.46 L2043.91 1212.46 L2044.5 1212.46 L2045.09 1212.46 L2045.67 1212.46 L2046.26 1212.46 L2046.85 1212.46 L2047.43 1212.46 L2048.02 1212.46 L2048.6 1212.46 L2049.19 1212.46 L2049.78 1212.46 L2050.36 1212.46 L2050.95 1212.46 L2051.54 1212.46 L2052.12 1212.46 L2052.71 1212.46 L2053.3 1212.46 L2053.88 1212.46 L2054.47 1212.46 L2055.06 1212.46 L2055.64 1212.46 L2056.23 1212.46 L2056.81 1212.46 L2057.4 1212.46 L2057.99 1212.46 L2058.57 1212.46 L2059.16 1212.46 L2059.75 1212.46 L2060.33 1212.46 L2060.92 1212.46 L2061.51 1212.46 L2062.09 1212.46 L2062.68 1212.46 L2063.27 1212.46 L2063.85 1212.46 L2064.44 1212.46 L2065.02 1212.46 L2065.61 1212.46 L2066.2 1212.46 L2066.78 1212.46 L2067.37 1212.46 L2067.96 1212.46 L2068.54 1212.46 L2069.13 1212.46 L2069.72 1212.46 L2070.3 1212.46 L2070.89 1212.46 L2071.48 1212.46 L2072.06 1212.46 L2072.65 1212.46 L2073.23 1212.46 L2073.82 1212.46 L2074.41 1212.46 L2074.99 1212.46 L2075.58 1212.46 L2076.17 1212.46 L2076.75 1212.46 L2077.34 1212.46 L2077.93 1212.46 L2078.51 1212.46 L2079.1 1212.46 L2079.68 1212.46 L2080.27 1212.46 L2080.86 1212.46 L2081.44 1212.46 L2082.03 1212.46 L2082.62 1212.46 L2083.2 1212.46 L2083.79 1212.46 L2084.38 1212.46 L2084.96 1212.46 L2085.55 1212.46 L2086.14 1212.46 L2086.72 1212.46 L2087.31 1212.46 L2087.89 1212.46 L2088.48 1212.46 L2089.07 1212.46 L2089.65 1212.46 L2090.24 1212.46 L2090.83 1212.46 L2091.41 1212.46 L2092 1212.46 L2092.59 1212.46 L2093.17 1212.46 L2093.76 1212.46 L2094.35 1212.46 L2094.93 1212.46 L2095.52 1212.46 L2096.1 1212.46 L2096.69 1212.46 L2097.28 1212.46 L2097.86 1212.46 L2098.45 1212.46 L2099.04 1212.46 L2099.62 1212.46 L2100.21 1212.46 L2100.8 1212.46 L2101.38 1212.46 L2101.97 1212.46 L2102.55 1212.46 L2103.14 1212.46 L2103.73 1212.46 L2104.31 1212.46 L2104.9 1212.46 L2105.49 1212.46 L2106.07 1212.46 L2106.66 1212.46 L2107.25 1212.46 L2107.83 1212.46 L2108.42 1212.46 L2109.01 1212.46 L2109.59 1212.46 L2110.18 1212.46 L2110.76 1212.46 L2111.35 1212.46 L2111.94 1212.46 L2112.52 1212.46 L2113.11 1212.46 L2113.7 1212.46 L2114.28 1212.46 L2114.87 1212.46 L2115.46 1212.46 L2116.04 1212.46 L2116.63 1212.46 L2117.22 1212.46 L2117.8 1212.46 L2118.39 1212.46 L2118.97 1212.46 L2119.56 1212.46 L2120.15 1212.46 L2120.73 1212.46 L2121.32 1212.46 L2121.91 1212.46 L2122.49 1212.46 L2123.08 1212.46 L2123.67 1212.46 L2124.25 1212.46 L2124.84 1212.46 L2125.42 1212.46 L2126.01 1212.46 L2126.6 1212.46 L2127.18 1212.46 L2127.77 1212.46 L2128.36 1212.46 L2128.94 1212.46 L2129.53 1212.46 L2130.12 1212.46 L2130.7 1212.46 L2131.29 1212.46 L2131.88 1212.46 L2132.46 1212.46 L2133.05 1212.46 L2133.63 1212.46 L2134.22 1212.46 L2134.81 1212.46 L2135.39 1212.46 L2135.98 1212.46 L2136.57 1212.46 L2137.15 1212.46 L2137.74 1212.46 L2138.33 1212.46 L2138.91 1212.46 L2139.5 1212.46 L2140.09 1212.46 L2140.67 1212.46 L2141.26 1212.46 L2141.84 1212.46 L2142.43 1212.46 L2143.02 1212.46 L2143.6 1212.46 L2144.19 1212.46 L2144.78 1212.46 L2145.36 1212.46 L2145.95 1212.46 L2146.54 1212.46 L2147.12 1212.46 L2147.71 1212.46 L2148.3 1212.46 L2148.88 1212.46 L2149.47 1212.46 L2150.05 1212.46 L2150.64 1212.46 L2151.23 1212.46 L2151.81 1212.46 L2152.4 1212.46 L2152.99 1212.46 L2153.57 1212.46 L2154.16 1212.46 L2154.75 1212.46 L2155.33 1212.46 L2155.92 1212.46 L2156.5 1212.46 L2157.09 1212.46 L2157.68 1212.46 L2158.26 1212.46 L2158.26 1211.63 L2157.68 1211.63 L2157.09 1211.63 L2156.5 1211.63 L2155.92 1211.63 L2155.33 1211.63 L2154.75 1211.63 L2154.16 1211.63 L2153.57 1211.63 L2152.99 1211.63 L2152.4 1211.63 L2151.81 1211.63 L2151.23 1211.63 L2150.64 1211.63 L2150.05 1211.63 L2149.47 1211.63 L2148.88 1211.63 L2148.3 1211.63 L2147.71 1211.63 L2147.12 1211.63 L2146.54 1211.63 L2145.95 1211.63 L2145.36 1211.63 L2144.78 1211.63 L2144.19 1211.63 L2143.6 1211.63 L2143.02 1211.63 L2142.43 1211.63 L2141.84 1211.63 L2141.26 1211.63 L2140.67 1211.63 L2140.09 1211.63 L2139.5 1211.63 L2138.91 1211.63 L2138.33 1211.63 L2137.74 1211.63 L2137.15 1211.63 L2136.57 1211.63 L2135.98 1211.63 L2135.39 1211.63 L2134.81 1211.63 L2134.22 1211.63 L2133.63 1211.63 L2133.05 1211.63 L2132.46 1211.63 L2131.88 1211.63 L2131.29 1211.63 L2130.7 1211.63 L2130.12 1211.63 L2129.53 1211.63 L2128.94 1211.63 L2128.36 1211.63 L2127.77 1211.63 L2127.18 1211.63 L2126.6 1211.63 L2126.01 1211.63 L2125.42 1211.63 L2124.84 1211.63 L2124.25 1211.63 L2123.67 1211.63 L2123.08 1211.63 L2122.49 1211.63 L2121.91 1211.63 L2121.32 1211.63 L2120.73 1211.63 L2120.15 1211.63 L2119.56 1211.63 L2118.97 1211.63 L2118.39 1211.63 L2117.8 1211.63 L2117.22 1211.63 L2116.63 1211.63 L2116.04 1211.63 L2115.46 1211.63 L2114.87 1211.63 L2114.28 1211.63 L2113.7 1211.63 L2113.11 1211.63 L2112.52 1211.63 L2111.94 1211.63 L2111.35 1211.63 L2110.76 1211.63 L2110.18 1211.63 L2109.59 1211.63 L2109.01 1211.63 L2108.42 1211.63 L2107.83 1211.63 L2107.25 1211.63 L2106.66 1211.63 L2106.07 1211.63 L2105.49 1211.63 L2104.9 1211.63 L2104.31 1211.63 L2103.73 1211.63 L2103.14 1211.63 L2102.55 1211.63 L2101.97 1211.63 L2101.38 1211.63 L2100.8 1211.63 L2100.21 1211.63 L2099.62 1211.63 L2099.04 1211.63 L2098.45 1211.63 L2097.86 1211.63 L2097.28 1211.63 L2096.69 1211.63 L2096.1 1211.63 L2095.52 1211.63 L2094.93 1211.63 L2094.35 1211.63 L2093.76 1211.63 L2093.17 1211.63 L2092.59 1211.63 L2092 1211.63 L2091.41 1211.63 L2090.83 1211.63 L2090.24 1211.63 L2089.65 1211.63 L2089.07 1211.63 L2088.48 1211.63 L2087.89 1211.63 L2087.31 1211.63 L2086.72 1211.63 L2086.14 1211.63 L2085.55 1211.63 L2084.96 1211.63 L2084.38 1211.63 L2083.79 1211.63 L2083.2 1211.63 L2082.62 1211.63 L2082.03 1211.63 L2081.44 1211.63 L2080.86 1211.63 L2080.27 1211.63 L2079.68 1211.63 L2079.1 1211.63 L2078.51 1211.63 L2077.93 1211.63 L2077.34 1211.63 L2076.75 1211.63 L2076.17 1211.63 L2075.58 1211.63 L2074.99 1211.63 L2074.41 1211.63 L2073.82 1211.63 L2073.23 1211.63 L2072.65 1211.63 L2072.06 1211.63 L2071.48 1211.63 L2070.89 1211.63 L2070.3 1211.63 L2069.72 1211.63 L2069.13 1211.63 L2068.54 1211.63 L2067.96 1211.63 L2067.37 1211.63 L2066.78 1211.63 L2066.2 1211.63 L2065.61 1211.63 L2065.02 1211.63 L2064.44 1211.63 L2063.85 1211.63 L2063.27 1211.63 L2062.68 1211.63 L2062.09 1211.63 L2061.51 1211.63 L2060.92 1211.63 L2060.33 1211.63 L2059.75 1211.63 L2059.16 1211.63 L2058.57 1211.63 L2057.99 1211.63 L2057.4 1211.63 L2056.81 1211.63 L2056.23 1211.63 L2055.64 1211.63 L2055.06 1211.63 L2054.47 1211.63 L2053.88 1211.63 L2053.3 1211.63 L2052.71 1211.63 L2052.12 1211.63 L2051.54 1211.63 L2050.95 1211.63 L2050.36 1211.63 L2049.78 1211.63 L2049.19 1211.63 L2048.6 1211.63 L2048.02 1211.63 L2047.43 1211.63 L2046.85 1211.63 L2046.26 1211.63 L2045.67 1211.63 L2045.09 1211.63 L2044.5 1211.63 L2043.91 1211.63 L2043.33 1211.63 L2042.74 1211.63 L2042.15 1211.63 L2041.57 1211.63 L2040.98 1211.63 L2040.4 1211.63 L2039.81 1211.63 L2039.22 1211.63 L2038.64 1211.63 L2038.05 1211.63 L2037.46 1211.63 L2036.88 1211.63 L2036.29 1211.63 L2035.7 1211.63 L2035.12 1211.63 L2034.53 1211.63 L2033.94 1211.63 L2033.36 1211.63 L2032.77 1211.63 L2032.19 1211.63 L2031.6 1211.63 L2031.01 1211.63 L2030.43 1211.63 L2029.84 1211.63 L2029.25 1211.63 L2028.67 1211.63 L2028.08 1211.63 L2027.49 1211.63 L2026.91 1211.63 L2026.32 1211.63 L2025.73 1211.63 L2025.15 1211.63 L2024.56 1211.63 L2023.98 1211.63 L2023.39 1211.63 L2022.8 1211.63 L2022.22 1211.63 L2021.63 1211.63 L2021.04 1211.63 L2020.46 1211.63 L2019.87 1211.63 L2019.28 1211.63 L2018.7 1211.63 L2018.11 1211.63 L2017.53 1211.63 L2016.94 1211.63 L2016.35 1211.63 L2015.77 1211.63 L2015.18 1211.63 L2014.59 1211.63 L2014.01 1211.63 L2013.42 1211.63 L2012.83 1211.63 L2012.25 1211.63 L2011.66 1211.63 L2011.07 1211.63 L2010.49 1211.63 L2009.9 1211.63 L2009.32 1211.63 L2008.73 1211.63 L2008.14 1211.63 L2007.56 1211.63 L2006.97 1211.63 L2006.38 1211.63 L2005.8 1211.63 L2005.21 1211.63 L2004.62 1211.63 L2004.04 1211.63 L2003.45 1211.63 L2002.86 1211.63 L2002.28 1211.63 L2001.69 1211.63 L2001.11 1211.63 L2000.52 1211.63 L1999.93 1211.63 L1999.35 1211.63 L1998.76 1211.63 L1998.17 1211.63 L1997.59 1211.63 L1997 1211.63 L1996.41 1211.63 L1995.83 1211.63 L1995.24 1211.63 L1994.65 1211.63 L1994.07 1211.63 L1993.48 1211.63 L1992.9 1211.63 L1992.31 1211.63 L1991.72 1211.63 L1991.14 1211.63 L1990.55 1211.63 L1989.96 1211.63 L1989.38 1211.63 L1988.79 1211.63 L1988.2 1211.63 L1987.62 1211.63 L1987.03 1211.63 L1986.45 1211.63 L1985.86 1211.63 L1985.27 1211.63 L1984.69 1211.63 L1984.1 1211.63 L1983.51 1211.63 L1982.93 1211.63 L1982.34 1211.63 L1981.75 1211.63 L1981.17 1211.63 L1980.58 1211.63 L1979.99 1211.63 L1979.41 1211.63 L1978.82 1211.63 L1978.24 1211.63 L1977.65 1211.63 L1977.06 1211.63 L1976.48 1211.63 L1975.89 1211.63 L1975.3 1211.63 L1974.72 1211.63 L1974.13 1211.63 L1973.54 1211.63 L1972.96 1211.63 L1972.37 1211.63 L1971.78 1211.63 L1971.2 1211.63 L1970.61 1211.63 L1970.03 1211.63 L1969.44 1211.63 L1968.85 1211.63 L1968.27 1211.63 L1967.68 1211.63 L1967.09 1211.63 L1966.51 1211.63 L1965.92 1211.63 L1965.33 1211.63 L1964.75 1211.63 L1964.16 1211.63 L1963.58 1211.63 L1962.99 1211.63 L1962.4 1211.63 L1961.82 1211.63 L1961.23 1211.63 L1960.64 1211.63 L1960.06 1211.63 L1959.47 1211.63 L1958.88 1211.63 L1958.3 1211.63 L1957.71 1211.63 L1957.12 1211.63 L1956.54 1211.63 L1955.95 1211.63 L1955.37 1211.63 L1954.78 1211.63 L1954.19 1211.63 L1953.61 1211.63 L1953.02 1211.63 L1952.43 1211.63 L1951.85 1211.63 L1951.26 1211.63 L1950.67 1211.63 L1950.09 1211.63 L1949.5 1211.63 L1948.91 1211.63 L1948.33 1211.63 L1947.74 1211.63 L1947.16 1211.63 L1946.57 1211.63 L1945.98 1211.63 L1945.4 1211.63 L1944.81 1211.63 L1944.22 1211.63 L1943.64 1211.63 L1943.05 1211.63 L1942.46 1211.63 L1941.88 1211.63 L1941.29 1211.63 L1940.71 1211.63 L1940.12 1211.63 L1939.53 1211.63 L1938.95 1211.63 L1938.36 1211.63 L1937.77 1211.63 L1937.19 1211.63 L1936.6 1211.63 L1936.01 1211.63 L1935.43 1211.63 L1934.84 1211.63 L1934.25 1211.63 L1933.67 1211.63 L1933.08 1211.63 L1932.5 1211.63 L1931.91 1211.63 L1931.32 1211.63 L1930.74 1211.63 L1930.15 1211.63 L1929.56 1211.63 L1928.98 1211.63 L1928.39 1211.63 L1927.8 1211.63 L1927.22 1211.63 L1926.63 1211.63 L1926.04 1211.63 L1925.46 1211.63 L1924.87 1211.63 L1924.29 1211.63 L1923.7 1211.63 L1923.11 1211.63 L1922.53 1211.63 L1921.94 1211.63 L1921.35 1211.63 L1920.77 1211.63 L1920.18 1211.63 L1919.59 1211.63 L1919.01 1211.63 L1918.42 1211.63 L1917.83 1211.63 L1917.25 1211.63 L1916.66 1211.63 L1916.08 1211.63 L1915.49 1211.63 L1914.9 1211.63 L1914.32 1211.63 L1913.73 1211.63 L1913.14 1211.63 L1912.56 1211.63 L1911.97 1211.63 L1911.38 1211.63 L1910.8 1211.63 L1910.21 1211.63 L1909.63 1211.63 L1909.04 1211.63 L1908.45 1211.63 L1907.87 1211.63 L1907.28 1211.63 L1906.69 1211.63 L1906.11 1211.63 L1905.52 1211.63 L1904.93 1211.63 L1904.35 1211.63 L1903.76 1211.63 L1903.17 1211.63 L1902.59 1211.63 L1902 1211.63 L1901.42 1211.63 L1900.83 1211.63 L1900.24 1211.63 L1899.66 1211.63 L1899.07 1211.63 L1898.48 1211.63 L1897.9 1211.63 L1897.31 1211.63 L1896.72 1211.63 L1896.14 1211.63 L1895.55 1211.63 L1894.96 1211.63 L1894.38 1211.63 L1893.79 1211.63 L1893.21 1211.63 L1892.62 1211.63 L1892.03 1211.63 L1891.45 1211.63 L1890.86 1211.63 L1890.27 1211.63 L1889.69 1211.63 L1889.1 1211.63 L1888.51 1211.63 L1887.93 1211.63 L1887.34 1211.63 L1886.76 1211.63 L1886.17 1211.63 L1885.58 1211.63 L1885 1211.63 L1884.41 1211.63 L1883.82 1211.63 L1883.24 1211.63 L1882.65 1211.63 L1882.06 1211.63 L1881.48 1211.63 L1880.89 1211.63 L1880.3 1211.63 L1879.72 1211.63 L1879.13 1211.63 L1878.55 1211.63 L1877.96 1211.63 L1877.37 1211.63 L1876.79 1211.63 L1876.2 1211.63 L1875.61 1211.63 L1875.03 1211.63 L1874.44 1211.63 L1873.85 1211.63 L1873.27 1211.63 L1872.68 1211.63 L1872.09 1211.63 L1871.51 1211.63 L1870.92 1211.63 L1870.34 1211.63 L1869.75 1211.63 L1869.16 1211.63 L1868.58 1211.63 L1867.99 1211.63 L1867.4 1211.63 L1866.82 1211.63 L1866.23 1211.63 L1865.64 1211.63 L1865.06 1211.63 L1864.47 1211.63 L1863.88 1211.63 L1863.3 1211.63 L1862.71 1211.63 L1862.13 1211.63 L1861.54 1211.63 L1860.95 1211.63 L1860.37 1211.63 L1859.78 1211.63 L1859.19 1211.63 L1858.61 1211.63 L1858.02 1211.63 L1857.43 1211.63 L1856.85 1211.63 L1856.26 1211.63 L1855.68 1211.63 L1855.09 1211.63 L1854.5 1211.63 L1853.92 1211.63 L1853.33 1211.63 L1852.74 1211.63 L1852.16 1211.63 L1851.57 1211.63 L1850.98 1211.63 L1850.4 1211.63 L1849.81 1211.63 L1849.22 1211.63 L1848.64 1211.63 L1848.05 1211.63 L1847.47 1211.63 L1846.88 1211.63 L1846.29 1211.63 L1845.71 1211.63 L1845.12 1211.63 L1844.53 1211.63 L1843.95 1211.63 L1843.36 1211.63 L1842.77 1211.63 L1842.19 1211.63 L1841.6 1211.63 L1841.01 1211.63 L1840.43 1211.63 L1839.84 1211.63 L1839.26 1211.63 L1838.67 1211.63 L1838.08 1211.63 L1837.5 1211.63 L1836.91 1211.63 L1836.32 1211.63 L1835.74 1211.63 L1835.15 1211.63 L1834.56 1211.63 L1833.98 1211.63 L1833.39 1211.63 L1832.81 1211.63 L1832.22 1211.63 L1831.63 1211.63 L1831.05 1211.63 L1830.46 1211.63 L1829.87 1211.63 L1829.29 1211.63 L1828.7 1211.63 L1828.11 1211.63 L1827.53 1211.63 L1826.94 1211.63 L1826.35 1211.63 L1825.77 1211.63 L1825.18 1211.63 L1824.6 1211.63 L1824.01 1211.63 L1823.42 1211.63 L1822.84 1211.63 L1822.25 1211.63 L1821.66 1211.63 L1821.08 1211.63 L1820.49 1211.63 L1819.9 1211.63 L1819.32 1211.63 L1818.73 1211.63 L1818.14 1211.63 L1817.56 1211.63 L1816.97 1211.63 L1816.39 1211.63 L1815.8 1211.63 L1815.21 1211.63 L1814.63 1211.63 L1814.04 1211.63 L1813.45 1211.63 L1812.87 1211.63 L1812.28 1211.63 L1811.69 1211.63 L1811.11 1211.63 L1810.52 1211.63 L1809.94 1211.63 L1809.35 1211.63 L1808.76 1211.63 L1808.18 1211.63 L1807.59 1211.63 L1807 1211.63 L1806.42 1211.63 L1805.83 1211.63 L1805.24 1211.63 L1804.66 1211.63 L1804.07 1211.63 L1803.48 1211.63 L1802.9 1211.63 L1802.31 1211.63 L1801.73 1211.63 L1801.14 1211.63 L1800.55 1211.63 L1799.97 1211.63 L1799.38 1211.63 L1798.79 1211.63 L1798.21 1211.63 L1797.62 1211.63 L1797.03 1211.63 L1796.45 1211.63 L1795.86 1211.63 L1795.27 1211.63 L1794.69 1211.63 L1794.1 1211.63 L1793.52 1211.63 L1792.93 1211.63 L1792.34 1211.63 L1791.76 1211.63 L1791.17 1211.63 L1790.58 1211.63 L1790 1211.63 L1789.41 1211.63 L1788.82 1211.63 L1788.24 1211.63 L1787.65 1211.63 L1787.06 1211.63 L1786.48 1211.63 L1785.89 1211.63 L1785.31 1211.63 L1784.72 1211.63 L1784.13 1211.63 L1783.55 1211.63 L1782.96 1211.63 L1782.37 1211.63 L1781.79 1211.63 L1781.2 1211.63 L1780.61 1211.63 L1780.03 1211.63 L1779.44 1211.63 L1778.86 1211.63 L1778.27 1211.63 L1777.68 1211.63 L1777.1 1211.63 L1776.51 1211.63 L1775.92 1211.63 L1775.34 1211.63 L1774.75 1211.63 L1774.16 1211.63 L1773.58 1211.63 L1772.99 1211.63 L1772.4 1211.63 L1771.82 1211.63 L1771.23 1211.63 L1770.65 1211.63 L1770.06 1211.63 L1769.47 1211.63 L1768.89 1211.63 L1768.3 1211.63 L1767.71 1211.63 L1767.13 1211.63 L1766.54 1211.63 L1765.95 1211.63 L1765.37 1211.63 L1764.78 1211.63 L1764.19 1211.63 L1763.61 1211.63 L1763.02 1211.63 L1762.44 1211.63 L1761.85 1211.63 L1761.26 1211.63 L1760.68 1211.63 L1760.09 1211.63 L1759.5 1211.63 L1758.92 1211.63 L1758.33 1211.63 L1757.74 1211.63 L1757.16 1211.63 L1756.57 1211.63 L1755.99 1211.63 L1755.4 1211.63 L1754.81 1211.63 L1754.23 1211.63 L1753.64 1211.63 L1753.05 1211.63 L1752.47 1211.63 L1751.88 1211.63 L1751.29 1211.63 L1750.71 1211.63 L1750.12 1211.63 L1749.53 1211.63 L1748.95 1211.63 L1748.36 1211.63 L1747.78 1211.63 L1747.19 1211.63 L1746.6 1211.63 L1746.02 1211.63 L1745.43 1211.63 L1744.84 1211.63 L1744.26 1211.63 L1743.67 1211.63 L1743.08 1211.63 L1742.5 1211.63 L1741.91 1211.63 L1741.32 1211.63 L1740.74 1211.63 L1740.15 1211.63 L1739.57 1211.63 L1738.98 1211.63 L1738.39 1211.63 L1737.81 1211.63 L1737.22 1211.63 L1736.63 1211.63 L1736.05 1211.63 L1735.46 1211.63 L1734.87 1211.63 L1734.29 1211.63 L1733.7 1211.63 L1733.11 1211.63 L1732.53 1211.63 L1731.94 1211.63 L1731.36 1211.63 L1730.77 1211.63 L1730.18 1211.63 L1729.6 1211.63 L1729.01 1211.63 L1728.42 1211.63 L1727.84 1211.63 L1727.25 1211.63 L1726.66 1211.63 L1726.08 1211.63 L1725.49 1211.63 L1724.91 1211.63 L1724.32 1211.63 L1723.73 1211.63 L1723.15 1211.63 L1722.56 1211.63 L1721.97 1211.63 L1721.39 1211.63 L1720.8 1211.63 L1720.21 1211.63 L1719.63 1211.63 L1719.04 1211.63 L1718.45 1211.63 L1717.87 1211.63 L1717.28 1211.63 L1716.7 1211.63 L1716.11 1211.63 L1715.52 1211.63 L1714.94 1211.63 L1714.35 1211.63 L1713.76 1211.63 L1713.18 1211.63 L1712.59 1211.63 L1712 1211.63 L1711.42 1211.63 L1710.83 1211.63 L1710.24 1211.63 L1709.66 1211.63 L1709.07 1211.63 L1708.49 1211.63 L1707.9 1211.63 L1707.31 1211.63 L1706.73 1211.63 L1706.14 1211.63 L1705.55 1211.63 L1704.97 1211.63 L1704.38 1211.63 L1703.79 1211.63 L1703.21 1211.63 L1702.62 1211.63 L1702.04 1211.63 L1701.45 1211.63 L1700.86 1211.63 L1700.28 1211.63 L1699.69 1211.63 L1699.1 1211.63 L1698.52 1211.63 L1697.93 1211.63 L1697.34 1211.63 L1696.76 1211.63 L1696.17 1211.63 L1695.58 1211.63 L1695 1211.63 L1694.41 1211.63 L1693.83 1211.63 L1693.24 1211.63 L1692.65 1211.63 L1692.07 1211.63 L1691.48 1211.63 L1690.89 1211.63 L1690.31 1211.63 L1689.72 1211.63 L1689.13 1211.63 L1688.55 1211.63 L1687.96 1211.63 L1687.37 1211.63 L1686.79 1211.63 L1686.2 1211.63 L1685.62 1211.63 L1685.03 1211.63 L1684.44 1211.63 L1683.86 1211.63 L1683.27 1211.63 L1682.68 1211.63 L1682.1 1211.63 L1681.51 1211.63 L1680.92 1211.63 L1680.34 1211.63 L1679.75 1211.63 L1679.17 1211.63 L1678.58 1211.63 L1677.99 1211.63 L1677.41 1211.63 L1676.82 1211.63 L1676.23 1211.63 L1675.65 1211.63 L1675.06 1211.63 L1674.47 1211.63 L1673.89 1211.63 L1673.3 1211.63 L1672.71 1211.63 L1672.13 1211.63 L1671.54 1211.63 L1670.96 1211.63 L1670.37 1211.63 L1669.78 1211.63 L1669.2 1211.63 L1668.61 1211.63 L1668.02 1211.63 L1667.44 1211.63 L1666.85 1211.63 L1666.26 1211.63 L1665.68 1211.63 L1665.09 1211.63 L1664.5 1211.63 L1663.92 1211.63 L1663.33 1211.63 L1662.75 1211.63 L1662.16 1211.63 L1661.57 1211.63 L1660.99 1211.63 L1660.4 1211.63 L1659.81 1211.63 L1659.23 1211.63 L1658.64 1211.63 L1658.05 1211.63 L1657.47 1211.63 L1656.88 1211.63 L1656.29 1211.63 L1655.71 1211.63 L1655.12 1211.63 L1654.54 1211.63 L1653.95 1211.63 L1653.36 1211.63 L1652.78 1211.63 L1652.19 1211.63 L1651.6 1211.63 L1651.02 1211.63 L1650.43 1211.63 L1649.84 1211.63 L1649.26 1211.63 L1648.67 1211.63 L1648.09 1211.63 L1647.5 1211.63 L1646.91 1211.63 L1646.33 1211.63 L1645.74 1211.63 L1645.15 1211.63 L1644.57 1211.63 L1643.98 1211.63 L1643.39 1211.63 L1642.81 1211.63 L1642.22 1211.63 L1641.63 1211.63 L1641.05 1211.63 L1640.46 1211.63 L1639.88 1211.63 L1639.29 1211.63 L1638.7 1211.63 L1638.12 1211.63 L1637.53 1211.63 L1636.94 1211.63 L1636.36 1211.63 L1635.77 1211.63 L1635.18 1211.63 L1634.6 1211.63 L1634.01 1211.63 L1633.42 1211.63 L1632.84 1211.63 L1632.25 1211.63 L1631.67 1211.63 L1631.08 1211.63 L1630.49 1211.63 L1629.91 1211.63 L1629.32 1211.63 L1628.73 1211.63 L1628.15 1211.63 L1627.56 1211.63 L1626.97 1211.63 L1626.39 1211.63 L1625.8 1211.63 L1625.22 1211.63 L1624.63 1211.63 L1624.04 1211.63 L1623.46 1211.63 L1622.87 1211.63 L1622.28 1211.63 L1621.7 1211.63 L1621.11 1211.63 L1620.52 1211.63 L1619.94 1211.63 L1619.35 1211.63 L1618.76 1211.63 L1618.18 1211.63 L1617.59 1211.63 L1617.01 1211.63 L1616.42 1211.63 L1615.83 1211.63 L1615.25 1211.63 L1614.66 1211.63 L1614.07 1211.63 L1613.49 1211.63 L1612.9 1211.63 L1612.31 1211.63 L1611.73 1211.63 L1611.14 1211.63 L1610.55 1211.63 L1609.97 1211.63 L1609.38 1211.63 L1608.8 1211.63 L1608.21 1211.63 L1607.62 1211.63 L1607.04 1211.63 L1606.45 1211.63 L1605.86 1211.63 L1605.28 1211.63 L1604.69 1211.63 L1604.1 1211.63 L1603.52 1211.63 L1602.93 1211.63 L1602.34 1211.63 L1601.76 1211.63 L1601.17 1211.63 L1600.59 1211.63 L1600 1211.63 L1599.41 1211.63 L1598.83 1211.63 L1598.24 1211.63 L1597.65 1211.63 L1597.07 1211.63 L1596.48 1211.63 L1595.89 1211.63 L1595.31 1211.63 L1594.72 1211.63 L1594.14 1211.63 L1593.55 1211.63 L1592.96 1211.63 L1592.38 1211.63 L1591.79 1211.63 L1591.2 1211.63 L1590.62 1211.63 L1590.03 1211.63 L1589.44 1211.63 L1588.86 1211.63 L1588.27 1211.63 L1587.68 1211.63 L1587.1 1211.63 L1586.51 1211.63 L1585.93 1211.63 L1585.34 1211.63 L1584.75 1211.63 L1584.17 1211.63 L1583.58 1211.63 L1582.99 1211.63 L1582.41 1211.63 L1581.82 1211.63 L1581.23 1211.63 L1580.65 1211.63 L1580.06 1211.63 L1579.47 1211.63 L1578.89 1211.63 L1578.3 1211.63 L1577.72 1211.63 L1577.13 1211.63 L1576.54 1211.63 L1575.96 1211.63 L1575.37 1211.63 L1574.78 1211.63 L1574.2 1211.63 L1573.61 1211.63 L1573.02 1211.63 L1572.44 1211.63 L1571.85 1211.63 L1571.27 1211.63 L1570.68 1211.63 L1570.09 1211.63 L1569.51 1211.63 L1568.92 1211.63 L1568.33 1211.63 L1567.75 1211.63 L1567.16 1211.63 L1566.57 1211.63 L1565.99 1211.63 L1565.4 1211.63 L1564.81 1211.63 L1564.23 1211.63 L1563.64 1211.63 L1563.06 1211.63 L1562.47 1211.63 L1561.88 1211.63 L1561.3 1211.63 L1560.71 1211.63 L1560.12 1211.63 L1559.54 1211.63 L1558.95 1211.63 L1558.36 1211.63 L1557.78 1211.63 L1557.19 1211.63 L1556.6 1211.63 L1556.02 1211.63 L1555.43 1211.63 L1554.85 1211.63 L1554.26 1211.63 L1553.67 1211.63 L1553.09 1211.63 L1552.5 1211.63 L1551.91 1211.63 L1551.33 1211.63 L1550.74 1211.63 L1550.15 1211.63 L1549.57 1211.63 L1548.98 1211.63 L1548.4 1211.63 L1547.81 1211.63 L1547.22 1211.63 L1546.64 1211.63 L1546.05 1211.63 L1545.46 1211.63 L1544.88 1211.63 L1544.29 1211.63 L1543.7 1211.63 L1543.12 1211.63 L1542.53 1211.63 L1541.94 1211.63 L1541.36 1211.63 L1540.77 1211.63 L1540.19 1211.63 L1539.6 1211.63 L1539.01 1211.63 L1538.43 1211.63 L1537.84 1211.63 L1537.25 1211.63 L1536.67 1211.63 L1536.08 1211.63 L1535.49 1211.63 L1534.91 1211.63 L1534.32 1211.63 L1533.73 1211.63 L1533.15 1211.63 L1532.56 1211.63 L1531.98 1211.63 L1531.39 1211.63 L1530.8 1211.63 L1530.22 1211.63 L1529.63 1211.63 L1529.04 1211.63 L1528.46 1211.63 L1527.87 1211.63 L1527.28 1211.63 L1526.7 1211.63 L1526.11 1211.63 L1525.52 1211.63 L1524.94 1211.63 L1524.35 1211.63 L1523.77 1211.63 L1523.18 1211.63 L1522.59 1211.63 L1522.01 1211.63 L1521.42 1211.63 L1520.83 1211.63 L1520.25 1211.63 L1519.66 1211.63 L1519.07 1211.63 L1518.49 1211.63 L1517.9 1211.63 L1517.32 1211.63 L1516.73 1211.63 L1516.14 1211.63 L1515.56 1211.63 L1514.97 1211.63 L1514.38 1211.63 L1513.8 1211.63 L1513.21 1211.63 L1512.62 1211.63 L1512.04 1211.63 L1511.45 1211.63 L1510.86 1211.63 L1510.28 1211.63 L1509.69 1211.63 L1509.11 1211.63 L1508.52 1211.63 L1507.93 1211.63 L1507.35 1211.63 L1506.76 1211.63 L1506.17 1211.63 L1505.59 1211.63 L1505 1211.63 L1504.41 1211.63 L1503.83 1211.63 L1503.24 1211.63 L1502.65 1211.63 L1502.07 1211.63 L1501.48 1211.63 L1500.9 1211.63 L1500.31 1211.63 L1499.72 1211.63 L1499.14 1211.63 L1498.55 1211.63 L1497.96 1211.63 L1497.38 1211.63 L1496.79 1211.63 L1496.2 1211.63 L1495.62 1211.63 L1495.03 1211.63 L1494.45 1211.63 L1493.86 1211.63 L1493.27 1211.63 L1492.69 1211.63 L1492.1 1211.63 L1491.51 1211.63 L1490.93 1211.63 L1490.34 1211.63 L1489.75 1211.63 L1489.17 1211.63 L1488.58 1211.63 L1487.99 1211.63 L1487.41 1211.63 L1486.82 1211.63 L1486.24 1211.63 L1485.65 1211.63 L1485.06 1211.63 L1484.48 1211.63 L1483.89 1211.63 L1483.3 1211.63 L1482.72 1211.63 L1482.13 1211.63 L1481.54 1211.63 L1480.96 1211.63 L1480.37 1211.63 L1479.78 1211.63 L1479.2 1211.63 L1478.61 1211.63 L1478.03 1211.63 L1477.44 1211.63 L1476.85 1211.63 L1476.27 1211.63 L1475.68 1211.63 L1475.09 1211.63 L1474.51 1211.63 L1473.92 1211.63 L1473.33 1211.63 L1472.75 1211.63 L1472.16 1211.63 L1471.57 1211.63 L1470.99 1211.63 L1470.4 1211.63 L1469.82 1211.63 L1469.23 1211.63 L1468.64 1211.63 L1468.06 1211.63 L1467.47 1211.63 L1466.88 1211.63 L1466.3 1211.63 L1465.71 1211.63 L1465.12 1211.63 L1464.54 1211.63 L1463.95 1211.63 L1463.37 1211.63 L1462.78 1211.63 L1462.19 1211.63 L1461.61 1211.63 L1461.02 1211.63 L1460.43 1211.63 L1459.85 1211.63 L1459.26 1211.63 L1458.67 1211.63 L1458.09 1211.63 L1457.5 1211.63 L1456.91 1211.63 L1456.33 1211.63 L1455.74 1211.63 L1455.16 1211.63 L1454.57 1211.63 L1453.98 1211.63 L1453.4 1211.63 L1452.81 1211.63 L1452.22 1211.63 L1451.64 1211.63 L1451.05 1211.63 L1450.46 1211.63 L1449.88 1211.63 L1449.29 1211.63 L1448.7 1211.63 L1448.12 1211.63 L1447.53 1211.63 L1446.95 1211.63 L1446.36 1211.63 L1445.77 1211.63 L1445.19 1211.63 L1444.6 1211.63 L1444.01 1211.63 L1443.43 1211.63 L1442.84 1211.63 L1442.25 1211.63 L1441.67 1211.63 L1441.08 1211.63 L1440.5 1211.63 L1439.91 1211.63 L1439.32 1211.63 L1438.74 1211.63 L1438.15 1211.63 L1437.56 1211.63 L1436.98 1211.63 L1436.39 1211.63 L1435.8 1211.63 L1435.22 1211.63 L1434.63 1211.63 L1434.04 1211.63 L1433.46 1211.63 L1432.87 1211.63 L1432.29 1211.63 L1431.7 1211.63 L1431.11 1211.63 L1430.53 1211.63 L1429.94 1211.63 L1429.35 1211.63 L1428.77 1211.63 L1428.18 1211.63 L1427.59 1211.63 L1427.01 1211.63 L1426.42 1211.63 L1425.83 1211.63 L1425.25 1211.63 L1424.66 1211.63 L1424.08 1211.63 L1423.49 1211.63 L1422.9 1211.63 L1422.32 1211.63 L1421.73 1211.63 L1421.14 1211.63 L1420.56 1211.63 L1419.97 1211.63 L1419.38 1211.63 L1418.8 1211.63 L1418.21 1211.63 L1417.63 1211.63 L1417.04 1211.63 L1416.45 1211.63 L1415.87 1211.63 L1415.28 1211.63 L1414.69 1211.63 L1414.11 1211.63 L1413.52 1211.63 L1412.93 1211.63 L1412.35 1211.63 L1411.76 1211.63 L1411.17 1211.63 L1410.59 1211.63 L1410 1211.63 L1409.42 1211.63 L1408.83 1211.63 L1408.24 1211.63 L1407.66 1211.63 L1407.07 1211.63 L1406.48 1211.63 L1405.9 1211.63 L1405.31 1211.63 L1404.72 1211.63 L1404.14 1211.63 L1403.55 1211.63 L1402.96 1211.63 L1402.38 1211.63 L1401.79 1211.63 L1401.21 1211.63 L1400.62 1211.63 L1400.03 1211.63 L1399.45 1211.63 L1398.86 1211.63 L1398.27 1211.63 L1397.69 1211.63 L1397.1 1211.63 L1396.51 1211.63 L1395.93 1211.63 L1395.34 1211.63 L1394.75 1211.63 L1394.17 1211.63 L1393.58 1211.63 L1393 1211.63 L1392.41 1211.63 L1391.82 1211.63 L1391.24 1211.63 L1390.65 1211.63 L1390.06 1211.63 L1389.48 1211.63 L1388.89 1211.63 L1388.3 1211.63 L1387.72 1211.63 L1387.13 1211.63 L1386.55 1211.63 L1385.96 1211.63 L1385.37 1211.63 L1384.79 1211.63 L1384.2 1211.63 L1383.61 1211.63 L1383.03 1211.63 L1382.44 1211.63 L1381.85 1211.63 L1381.27 1211.63 L1380.68 1211.63 L1380.09 1211.63 L1379.51 1211.63 L1378.92 1211.63 L1378.34 1211.63 L1377.75 1211.63 L1377.16 1211.63 L1376.58 1211.63 L1375.99 1211.63 L1375.4 1211.63 L1374.82 1211.63 L1374.23 1211.63 L1373.64 1211.63 L1373.06 1211.63 L1372.47 1211.63 L1371.88 1211.63 L1371.3 1211.63 L1370.71 1211.63 L1370.13 1211.63 L1369.54 1211.63 L1368.95 1211.63 L1368.37 1211.63 L1367.78 1211.63 L1367.19 1211.63 L1366.61 1211.63 L1366.02 1211.63 L1365.43 1211.63 L1364.85 1211.63 L1364.26 1211.63 L1363.68 1211.63 L1363.09 1211.63 L1362.5 1211.63 L1361.92 1211.63 L1361.33 1211.63 L1360.74 1211.63 L1360.16 1211.63 L1359.57 1211.63 L1358.98 1211.63 L1358.4 1211.63 L1357.81 1211.63 L1357.22 1211.63 L1356.64 1211.63 L1356.05 1211.63 L1355.47 1211.63 L1354.88 1211.63 L1354.29 1211.63 L1353.71 1211.63 L1353.12 1211.63 L1352.53 1211.63 L1351.95 1211.63 L1351.36 1211.63 L1350.77 1211.63 L1350.19 1211.63 L1349.6 1211.63 L1349.01 1211.63 L1348.43 1211.63 L1347.84 1211.63 L1347.26 1211.63 L1346.67 1211.63 L1346.08 1211.63 L1345.5 1211.63 L1344.91 1211.63 L1344.32 1211.63 L1343.74 1211.63 L1343.15 1211.63 L1342.56 1211.63 L1341.98 1211.63 L1341.39 1211.63 L1340.8 1211.63 L1340.22 1211.63 L1339.63 1211.63 L1339.05 1211.63 L1338.46 1211.63 L1337.87 1211.63 L1337.29 1211.63 L1336.7 1211.63 L1336.11 1211.63 L1335.53 1211.63 L1334.94 1211.63 L1334.35 1211.63 L1333.77 1211.63 L1333.18 1211.63 L1332.6 1211.63 L1332.01 1211.63 L1331.42 1211.63 L1330.84 1211.63 L1330.25 1211.63 L1329.66 1211.63 L1329.08 1211.63 L1328.49 1211.63 L1327.9 1211.63 L1327.32 1211.63 L1326.73 1211.63 L1326.14 1211.63 L1325.56 1211.63 L1324.97 1211.63 L1324.39 1211.63 L1323.8 1211.63 L1323.21 1211.63 L1322.63 1211.63 L1322.04 1211.63 L1321.45 1211.63 L1320.87 1211.63 L1320.28 1211.63 L1319.69 1211.63 L1319.11 1211.63 L1318.52 1211.63 L1317.93 1211.63 L1317.35 1211.63 L1316.76 1211.63 L1316.18 1211.63 L1315.59 1211.63 L1315 1211.63 L1314.42 1211.63 L1313.83 1211.63 L1313.24 1211.63 L1312.66 1211.63 L1312.07 1211.63 L1311.48 1211.63 L1310.9 1211.63 L1310.31 1211.63 L1309.73 1211.63 L1309.14 1211.63 L1308.55 1211.63 L1307.97 1211.63 L1307.38 1211.63 L1306.79 1211.63 L1306.21 1211.63 L1305.62 1211.63 L1305.03 1211.63 L1304.45 1211.63 L1303.86 1211.63 L1303.27 1211.63 L1302.69 1211.63 L1302.1 1211.63 L1301.52 1211.63 L1300.93 1211.63 L1300.34 1211.63 L1299.76 1211.63 L1299.17 1211.63 L1298.58 1211.63 L1298 1211.63 L1297.41 1211.63 L1296.82 1211.63 L1296.24 1211.63 L1295.65 1211.63 L1295.06 1211.63 L1294.48 1211.63 L1293.89 1211.63 L1293.31 1211.63 L1292.72 1211.63 L1292.13 1211.63 L1291.55 1211.63 L1290.96 1211.63 L1290.37 1211.63 L1289.79 1211.63 L1289.2 1211.63 L1288.61 1211.63 L1288.03 1211.63 L1287.44 1211.63 L1286.86 1211.63 L1286.27 1211.63 L1285.68 1211.63 L1285.1 1211.63 L1284.51 1211.63 L1283.92 1211.63 L1283.34 1211.63 L1282.75 1211.63 L1282.16 1211.63 L1281.58 1211.63 L1280.99 1211.63 L1280.4 1211.63 L1279.82 1211.63 L1279.23 1211.63 L1278.65 1211.63 L1278.06 1211.63 L1277.47 1211.63 L1276.89 1211.63 L1276.3 1211.63 L1275.71 1211.63 L1275.13 1211.63 L1274.54 1211.63 L1273.95 1211.63 L1273.37 1211.63 L1272.78 1211.63 L1272.19 1211.63 L1271.61 1211.63 L1271.02 1211.63 L1270.44 1211.63 L1269.85 1211.63 L1269.26 1211.63 L1268.68 1211.63 L1268.09 1211.63 L1267.5 1211.63 L1266.92 1211.63 L1266.33 1211.63 L1265.74 1211.63 L1265.16 1211.63 L1264.57 1211.63 L1263.98 1211.63 L1263.4 1211.63 L1262.81 1211.63 L1262.23 1211.63 L1261.64 1211.63 L1261.05 1211.63 L1260.47 1211.63 L1259.88 1211.63 L1259.29 1211.63 L1258.71 1211.63 L1258.12 1211.63 L1257.53 1211.63 L1256.95 1211.63 L1256.36 1211.63 L1255.78 1211.63 L1255.19 1211.63 L1254.6 1211.63 L1254.02 1211.63 L1253.43 1211.63 L1252.84 1211.63 L1252.26 1211.63 L1251.67 1211.63 L1251.08 1211.63 L1250.5 1211.63 L1249.91 1211.63 L1249.32 1211.63 L1248.74 1211.63 L1248.15 1211.63 L1247.57 1211.63 L1246.98 1211.63 L1246.39 1211.63 L1245.81 1211.63 L1245.22 1211.63 L1244.63 1211.63 L1244.05 1211.63 L1243.46 1211.63 L1242.87 1211.63 L1242.29 1211.63 L1241.7 1211.63 L1241.11 1211.63 L1240.53 1211.63 L1239.94 1211.63 L1239.36 1211.63 L1238.77 1211.63 L1238.18 1211.63 L1237.6 1211.63 L1237.01 1211.63 L1236.42 1211.63 L1235.84 1211.63 L1235.25 1211.63 L1234.66 1211.63 L1234.08 1211.63 L1233.49 1211.63 L1232.91 1211.63 L1232.32 1211.63 L1231.73 1211.63 L1231.15 1211.63 L1230.56 1211.63 L1229.97 1211.63 L1229.39 1211.63 L1228.8 1211.63 L1228.21 1211.63 L1227.63 1211.63 L1227.04 1211.63 L1226.45 1211.63 L1225.87 1211.63 L1225.28 1211.63 L1224.7 1211.63 L1224.11 1211.63 L1223.52 1211.63 L1222.94 1211.63 L1222.35 1211.63 L1221.76 1211.63 L1221.18 1211.63 L1220.59 1211.63 L1220 1211.63 L1219.42 1211.63 L1218.83 1211.63 L1218.24 1211.63 L1217.66 1211.63 L1217.07 1211.63 L1216.49 1211.63 L1215.9 1211.63 L1215.31 1211.63 L1214.73 1211.63 L1214.14 1211.63 L1213.55 1211.63 L1212.97 1211.63 L1212.38 1211.63 L1211.79 1211.63 L1211.21 1211.63 L1210.62 1211.63 L1210.03 1211.63 L1209.45 1211.63 L1208.86 1211.63 L1208.28 1211.63 L1207.69 1211.63 L1207.1 1211.63 L1206.52 1211.63 L1205.93 1211.63 L1205.34 1211.63 L1204.76 1211.63 L1204.17 1211.63 L1203.58 1211.63 L1203 1211.63 L1202.41 1211.63 L1201.83 1211.63 L1201.24 1211.63 L1200.65 1211.63 L1200.07 1211.63 L1199.48 1211.63 L1198.89 1211.63 L1198.31 1211.63 L1197.72 1211.63 L1197.13 1211.63 L1196.55 1211.63 L1195.96 1211.63 L1195.37 1211.63 L1194.79 1211.63 L1194.2 1211.63 L1193.62 1211.63 L1193.03 1211.63 L1192.44 1211.63 L1191.86 1211.63 L1191.27 1211.63 L1190.68 1211.63 L1190.1 1211.63 L1189.51 1211.63 L1188.92 1211.63 L1188.34 1211.63 L1187.75 1211.63 L1187.16 1211.63 L1186.58 1211.63 L1185.99 1211.63 L1185.41 1211.63 L1184.82 1211.63 L1184.23 1211.63 L1183.65 1211.63 L1183.06 1211.63 L1182.47 1211.63 L1181.89 1211.63 L1181.3 1211.63 L1180.71 1211.63 L1180.13 1211.63 L1179.54 1211.63 L1178.96 1211.63 L1178.37 1211.63 L1177.78 1211.63 L1177.2 1211.63 L1176.61 1211.63 L1176.02 1211.63 L1175.44 1211.63 L1174.85 1211.63 L1174.26 1211.63 L1173.68 1211.63 L1173.09 1211.63 L1172.5 1211.63 L1171.92 1211.63 L1171.33 1211.63 L1170.75 1211.63 L1170.16 1211.63 L1169.57 1211.63 L1168.99 1211.63 L1168.4 1211.63 L1167.81 1211.63 L1167.23 1211.63 L1166.64 1211.63 L1166.05 1211.63 L1165.47 1211.63 L1164.88 1211.63 L1164.29 1211.63 L1163.71 1211.63 L1163.12 1211.63 L1162.54 1211.63 L1161.95 1211.63 L1161.36 1211.63 L1160.78 1211.63 L1160.19 1211.63 L1159.6 1211.63 L1159.02 1211.63 L1158.43 1211.63 L1157.84 1211.63 L1157.26 1211.63 L1156.67 1211.63 L1156.09 1211.63 L1155.5 1211.63 L1154.91 1211.63 L1154.33 1211.63 L1153.74 1211.63 L1153.15 1211.63 L1152.57 1211.63 L1151.98 1211.63 L1151.39 1211.63 L1150.81 1211.63 L1150.22 1211.63 L1149.63 1211.63 L1149.05 1211.63 L1148.46 1211.63 L1147.88 1211.63 L1147.29 1211.63 L1146.7 1211.63 L1146.12 1211.63 L1145.53 1211.63 L1144.94 1211.63 L1144.36 1211.63 L1143.77 1211.63 L1143.18 1211.63 L1142.6 1211.63 L1142.01 1211.63 L1141.42 1211.63 L1140.84 1211.63 L1140.25 1211.63 L1139.67 1211.63 L1139.08 1211.63 L1138.49 1211.63 L1137.91 1211.63 L1137.32 1211.63 L1136.73 1211.63 L1136.15 1211.63 L1135.56 1211.63 L1134.97 1211.63 L1134.39 1211.63 L1133.8 1211.63 L1133.21 1211.63 L1132.63 1211.63 L1132.04 1211.63 L1131.46 1211.63 L1130.87 1211.63 L1130.28 1211.63 L1129.7 1211.63 L1129.11 1211.63 L1128.52 1211.63 L1127.94 1211.63 L1127.35 1211.63 L1126.76 1211.63 L1126.18 1211.63 L1125.59 1211.63 L1125.01 1211.63 L1124.42 1211.63 L1123.83 1211.63 L1123.25 1211.63 L1122.66 1211.63 L1122.07 1211.63 L1121.49 1211.63 L1120.9 1211.63 L1120.31 1211.63 L1119.73 1211.63 L1119.14 1211.63 L1118.55 1211.63 L1117.97 1211.63 L1117.38 1211.63 L1116.8 1211.63 L1116.21 1211.63 L1115.62 1211.63 L1115.04 1211.63 L1114.45 1211.63 L1113.86 1211.63 L1113.28 1211.63 L1112.69 1211.63 L1112.1 1211.63 L1111.52 1211.63 L1110.93 1211.63 L1110.34 1211.63 L1109.76 1211.63 L1109.17 1211.63 L1108.59 1211.63 L1108 1211.63 L1107.41 1211.63 L1106.83 1211.63 L1106.24 1211.63 L1105.65 1211.63 L1105.07 1211.63 L1104.48 1211.63 L1103.89 1211.63 L1103.31 1211.63 L1102.72 1211.63 L1102.14 1211.63 L1101.55 1211.63 L1100.96 1211.63 L1100.38 1211.63 L1099.79 1211.63 L1099.2 1211.63 L1098.62 1211.63 L1098.03 1211.63 L1097.44 1211.63 L1096.86 1211.63 L1096.27 1211.63 L1095.68 1211.63 L1095.1 1211.63 L1094.51 1211.63 L1093.93 1211.63 L1093.34 1211.63 L1092.75 1211.63 L1092.17 1211.63 L1091.58 1211.63 L1090.99 1211.63 L1090.41 1211.63 L1089.82 1211.63 L1089.23 1211.63 L1088.65 1211.63 L1088.06 1211.63 L1087.47 1211.63 L1086.89 1211.63 L1086.3 1211.63 L1085.72 1211.63 L1085.13 1211.63 L1084.54 1211.63 L1083.96 1211.63 L1083.37 1211.63 L1082.78 1211.63 L1082.2 1211.63 L1081.61 1211.63 L1081.02 1211.63 L1080.44 1211.63 L1079.85 1211.63 L1079.26 1211.63 L1078.68 1211.63 L1078.09 1211.63 L1077.51 1211.63 L1076.92 1211.63 L1076.33 1211.63 L1075.75 1211.63 L1075.16 1211.63 L1074.57 1211.63 L1073.99 1211.63 L1073.4 1211.63 L1072.81 1211.63 L1072.23 1211.63 L1071.64 1211.63 L1071.06 1211.63 L1070.47 1211.63 L1069.88 1211.63 L1069.3 1211.63 L1068.71 1211.63 L1068.12 1211.63 L1067.54 1211.63 L1066.95 1211.63 L1066.36 1211.63 L1065.78 1211.63 L1065.19 1211.63 L1064.6 1211.63 L1064.02 1211.63 L1063.43 1211.63 L1062.85 1211.63 L1062.26 1211.63 L1061.67 1211.63 L1061.09 1211.63 L1060.5 1211.63 L1059.91 1211.63 L1059.33 1211.63 L1058.74 1211.63 L1058.15 1211.63 L1057.57 1211.63 L1056.98 1211.63 L1056.39 1211.63 L1055.81 1211.63 L1055.22 1211.63 L1054.64 1211.63 L1054.05 1211.63 L1053.46 1211.63 L1052.88 1211.63 L1052.29 1211.63 L1051.7 1211.63 L1051.12 1211.63 L1050.53 1211.63 L1049.94 1211.63 L1049.36 1211.63 L1048.77 1211.63 L1048.19 1211.63 L1047.6 1211.63 L1047.01 1211.63 L1046.43 1211.63 L1045.84 1211.63 L1045.25 1211.63 L1044.67 1211.63 L1044.08 1211.63 L1043.49 1211.63 L1042.91 1211.63 L1042.32 1211.63 L1041.73 1211.63 L1041.15 1211.63 L1040.56 1211.63 L1039.98 1211.63 L1039.39 1211.63 L1038.8 1211.63 L1038.22 1211.63 L1037.63 1211.63 L1037.04 1211.63 L1036.46 1211.63 L1035.87 1211.63 L1035.28 1211.63 L1034.7 1211.63 L1034.11 1211.63 L1033.52 1211.63 L1032.94 1211.63 L1032.35 1211.63 L1031.77 1211.63 L1031.18 1211.63 L1030.59 1211.63 L1030.01 1211.63 L1029.42 1211.63 L1028.83 1211.63 L1028.25 1211.63 L1027.66 1211.63 L1027.07 1211.63 L1026.49 1211.63 L1025.9 1211.63 L1025.32 1211.63 L1024.73 1211.63 L1024.14 1211.63 L1023.56 1211.63 L1022.97 1211.63 L1022.38 1211.63 L1021.8 1211.63 L1021.21 1211.63 L1020.62 1211.63 L1020.04 1211.63 L1019.45 1211.63 L1018.86 1211.63 L1018.28 1211.63 L1017.69 1211.63 L1017.11 1211.63 L1016.52 1211.63 L1015.93 1211.63 L1015.35 1211.63 L1014.76 1211.63 L1014.17 1211.63 L1013.59 1211.63 L1013 1211.63 L1012.41 1211.63 L1011.83 1211.63 L1011.24 1211.63 L1010.65 1211.63 L1010.07 1211.63 L1009.48 1211.63 L1008.9 1211.63 L1008.31 1211.63 L1007.72 1211.63 L1007.14 1211.63 L1006.55 1211.63 L1005.96 1211.63 L1005.38 1211.63 L1004.79 1211.63 L1004.2 1211.63 L1003.62 1211.63 L1003.03 1211.63 L1002.44 1211.63 L1001.86 1211.63 L1001.27 1211.63 L1000.69 1211.63 L1000.1 1211.63 L999.513 1211.63 L998.926 1211.63 L998.34 1211.63 L997.754 1211.63 L997.167 1211.63 L996.581 1211.63 L995.994 1211.63 L995.408 1211.63 L994.822 1211.63 L994.235 1211.63 L993.649 1211.63 L993.062 1211.63 L992.476 1211.63 L991.889 1211.63 L991.303 1211.63 L990.717 1211.63 L990.13 1211.63 L989.544 1211.63 L988.957 1211.63 L988.371 1211.63 L987.785 1211.63 L987.198 1211.63 L986.612 1211.63 L986.025 1211.63  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.05 986.612,1212.05 987.198,1212.05 987.785,1212.05 988.371,1212.05 988.957,1212.05 989.544,1212.05 990.13,1212.05 990.717,1212.05 991.303,1212.05 991.889,1212.05 992.476,1212.05 993.062,1212.05 993.649,1212.05 994.235,1212.05 994.822,1212.05 995.408,1212.05 995.994,1212.05 996.581,1212.05 997.167,1212.05 997.754,1212.05 998.34,1212.05 998.926,1212.05 999.513,1212.05 1000.1,1212.05 1000.69,1212.05 1001.27,1212.05 1001.86,1212.05 1002.44,1212.05 1003.03,1212.05 1003.62,1212.05 1004.2,1212.05 1004.79,1212.05 1005.38,1212.05 1005.96,1212.05 1006.55,1212.05 1007.14,1212.05 1007.72,1212.05 1008.31,1212.05 1008.9,1212.05 1009.48,1212.05 1010.07,1212.05 1010.65,1212.05 1011.24,1212.05 1011.83,1212.05 1012.41,1212.05 1013,1212.05 1013.59,1212.05 1014.17,1212.05 1014.76,1212.05 1015.35,1212.05 1015.93,1212.05 1016.52,1212.05 1017.11,1212.05 1017.69,1212.05 1018.28,1212.05 1018.86,1212.05 1019.45,1212.05 1020.04,1212.05 1020.62,1212.05 1021.21,1212.05 1021.8,1212.05 1022.38,1212.05 1022.97,1212.05 1023.56,1212.05 1024.14,1212.05 1024.73,1212.05 1025.32,1212.05 1025.9,1212.05 1026.49,1212.05 1027.07,1212.05 1027.66,1212.05 1028.25,1212.05 1028.83,1212.05 1029.42,1212.05 1030.01,1212.05 1030.59,1212.05 1031.18,1212.05 1031.77,1212.05 1032.35,1212.05 1032.94,1212.05 1033.52,1212.05 1034.11,1212.05 1034.7,1212.05 1035.28,1212.05 1035.87,1212.05 1036.46,1212.05 1037.04,1212.05 1037.63,1212.05 1038.22,1212.05 1038.8,1212.05 1039.39,1212.05 1039.98,1212.05 1040.56,1212.05 1041.15,1212.05 1041.73,1212.05 1042.32,1212.05 1042.91,1212.05 1043.49,1212.05 1044.08,1212.05 1044.67,1212.05 1045.25,1212.05 1045.84,1212.05 1046.43,1212.05 1047.01,1212.05 1047.6,1212.05 1048.19,1212.05 1048.77,1212.05 1049.36,1212.05 1049.94,1212.05 1050.53,1212.05 1051.12,1212.05 1051.7,1212.05 1052.29,1212.05 1052.88,1212.05 1053.46,1212.05 1054.05,1212.05 1054.64,1212.05 1055.22,1212.05 1055.81,1212.05 1056.39,1212.05 1056.98,1212.05 1057.57,1212.05 1058.15,1212.05 1058.74,1212.05 1059.33,1212.05 1059.91,1212.05 1060.5,1212.05 1061.09,1212.05 1061.67,1212.05 1062.26,1212.05 1062.85,1212.05 1063.43,1212.05 1064.02,1212.05 1064.6,1212.05 1065.19,1212.05 1065.78,1212.05 1066.36,1212.05 1066.95,1212.05 1067.54,1212.05 1068.12,1212.05 1068.71,1212.05 1069.3,1212.05 1069.88,1212.05 1070.47,1212.05 1071.06,1212.05 1071.64,1212.05 1072.23,1212.05 1072.81,1212.05 1073.4,1212.05 1073.99,1212.05 1074.57,1212.05 1075.16,1212.05 1075.75,1212.05 1076.33,1212.05 1076.92,1212.05 1077.51,1212.05 1078.09,1212.05 1078.68,1212.05 1079.26,1212.05 1079.85,1212.05 1080.44,1212.05 1081.02,1212.05 1081.61,1212.05 1082.2,1212.05 1082.78,1212.05 1083.37,1212.05 1083.96,1212.05 1084.54,1212.05 1085.13,1212.05 1085.72,1212.05 1086.3,1212.05 1086.89,1212.05 1087.47,1212.05 1088.06,1212.05 1088.65,1212.05 1089.23,1212.05 1089.82,1212.05 1090.41,1212.05 1090.99,1212.05 1091.58,1212.05 1092.17,1212.05 1092.75,1212.05 1093.34,1212.05 1093.93,1212.05 1094.51,1212.05 1095.1,1212.05 1095.68,1212.05 1096.27,1212.05 1096.86,1212.05 1097.44,1212.05 1098.03,1212.05 1098.62,1212.05 1099.2,1212.05 1099.79,1212.05 1100.38,1212.05 1100.96,1212.05 1101.55,1212.05 1102.14,1212.05 1102.72,1212.05 1103.31,1212.05 1103.89,1212.05 1104.48,1212.05 1105.07,1212.05 1105.65,1212.05 1106.24,1212.05 1106.83,1212.05 1107.41,1212.05 1108,1212.05 1108.59,1212.05 1109.17,1212.05 1109.76,1212.05 1110.34,1212.05 1110.93,1212.05 1111.52,1212.05 1112.1,1212.05 1112.69,1212.05 1113.28,1212.05 1113.86,1212.05 1114.45,1212.05 1115.04,1212.05 1115.62,1212.05 1116.21,1212.05 1116.8,1212.05 1117.38,1212.05 1117.97,1212.05 1118.55,1212.05 1119.14,1212.05 1119.73,1212.05 1120.31,1212.05 1120.9,1212.05 1121.49,1212.05 1122.07,1212.05 1122.66,1212.05 1123.25,1212.05 1123.83,1212.05 1124.42,1212.05 1125.01,1212.05 1125.59,1212.05 1126.18,1212.05 1126.76,1212.05 1127.35,1212.05 1127.94,1212.05 1128.52,1212.05 1129.11,1212.05 1129.7,1212.05 1130.28,1212.05 1130.87,1212.05 1131.46,1212.05 1132.04,1212.05 1132.63,1212.05 1133.21,1212.05 1133.8,1212.05 1134.39,1212.05 1134.97,1212.05 1135.56,1212.05 1136.15,1212.05 1136.73,1212.05 1137.32,1212.05 1137.91,1212.05 1138.49,1212.05 1139.08,1212.05 1139.67,1212.05 1140.25,1212.05 1140.84,1212.05 1141.42,1212.05 1142.01,1212.05 1142.6,1212.05 1143.18,1212.05 1143.77,1212.05 1144.36,1212.05 1144.94,1212.05 1145.53,1212.05 1146.12,1212.05 1146.7,1212.05 1147.29,1212.05 1147.88,1212.05 1148.46,1212.05 1149.05,1212.05 1149.63,1212.05 1150.22,1212.05 1150.81,1212.05 1151.39,1212.05 1151.98,1212.05 1152.57,1212.05 1153.15,1212.05 1153.74,1212.05 1154.33,1212.05 1154.91,1212.05 1155.5,1212.05 1156.09,1212.05 1156.67,1212.05 1157.26,1212.05 1157.84,1212.05 1158.43,1212.05 1159.02,1212.05 1159.6,1212.05 1160.19,1212.05 1160.78,1212.05 1161.36,1212.05 1161.95,1212.05 1162.54,1212.05 1163.12,1212.05 1163.71,1212.05 1164.29,1212.05 1164.88,1212.05 1165.47,1212.05 1166.05,1212.05 1166.64,1212.05 1167.23,1212.05 1167.81,1212.05 1168.4,1212.05 1168.99,1212.05 1169.57,1212.05 1170.16,1212.05 1170.75,1212.05 1171.33,1212.05 1171.92,1212.05 1172.5,1212.05 1173.09,1212.05 1173.68,1212.05 1174.26,1212.05 1174.85,1212.05 1175.44,1212.05 1176.02,1212.05 1176.61,1212.05 1177.2,1212.05 1177.78,1212.05 1178.37,1212.05 1178.96,1212.05 1179.54,1212.05 1180.13,1212.05 1180.71,1212.05 1181.3,1212.05 1181.89,1212.05 1182.47,1212.05 1183.06,1212.05 1183.65,1212.05 1184.23,1212.05 1184.82,1212.05 1185.41,1212.05 1185.99,1212.05 1186.58,1212.05 1187.16,1212.05 1187.75,1212.05 1188.34,1212.05 1188.92,1212.05 1189.51,1212.05 1190.1,1212.05 1190.68,1212.05 1191.27,1212.05 1191.86,1212.05 1192.44,1212.05 1193.03,1212.05 1193.62,1212.05 1194.2,1212.05 1194.79,1212.05 1195.37,1212.05 1195.96,1212.05 1196.55,1212.05 1197.13,1212.05 1197.72,1212.05 1198.31,1212.05 1198.89,1212.05 1199.48,1212.05 1200.07,1212.05 1200.65,1212.05 1201.24,1212.05 1201.83,1212.05 1202.41,1212.05 1203,1212.05 1203.58,1212.05 1204.17,1212.05 1204.76,1212.05 1205.34,1212.05 1205.93,1212.05 1206.52,1212.05 1207.1,1212.05 1207.69,1212.05 1208.28,1212.05 1208.86,1212.05 1209.45,1212.05 1210.03,1212.05 1210.62,1212.05 1211.21,1212.05 1211.79,1212.05 1212.38,1212.05 1212.97,1212.05 1213.55,1212.05 1214.14,1212.05 1214.73,1212.05 1215.31,1212.05 1215.9,1212.05 1216.49,1212.05 1217.07,1212.05 1217.66,1212.05 1218.24,1212.05 1218.83,1212.05 1219.42,1212.05 1220,1212.05 1220.59,1212.05 1221.18,1212.05 1221.76,1212.05 1222.35,1212.05 1222.94,1212.05 1223.52,1212.05 1224.11,1212.05 1224.7,1212.05 1225.28,1212.05 1225.87,1212.05 1226.45,1212.05 1227.04,1212.05 1227.63,1212.05 1228.21,1212.05 1228.8,1212.05 1229.39,1212.05 1229.97,1212.05 1230.56,1212.05 1231.15,1212.05 1231.73,1212.05 1232.32,1212.05 1232.91,1212.05 1233.49,1212.05 1234.08,1212.05 1234.66,1212.05 1235.25,1212.05 1235.84,1212.05 1236.42,1212.05 1237.01,1212.05 1237.6,1212.05 1238.18,1212.05 1238.77,1212.05 1239.36,1212.05 1239.94,1212.05 1240.53,1212.05 1241.11,1212.05 1241.7,1212.05 1242.29,1212.05 1242.87,1212.05 1243.46,1212.05 1244.05,1212.05 1244.63,1212.05 1245.22,1212.05 1245.81,1212.05 1246.39,1212.05 1246.98,1212.05 1247.57,1212.05 1248.15,1212.05 1248.74,1212.05 1249.32,1212.05 1249.91,1212.05 1250.5,1212.05 1251.08,1212.05 1251.67,1212.05 1252.26,1212.05 1252.84,1212.05 1253.43,1212.05 1254.02,1212.05 1254.6,1212.05 1255.19,1212.05 1255.78,1212.05 1256.36,1212.05 1256.95,1212.05 1257.53,1212.05 1258.12,1212.05 1258.71,1212.05 1259.29,1212.05 1259.88,1212.05 1260.47,1212.05 1261.05,1212.05 1261.64,1212.05 1262.23,1212.05 1262.81,1212.05 1263.4,1212.05 1263.98,1212.05 1264.57,1212.05 1265.16,1212.05 1265.74,1212.05 1266.33,1212.05 1266.92,1212.05 1267.5,1212.05 1268.09,1212.05 1268.68,1212.05 1269.26,1212.05 1269.85,1212.05 1270.44,1212.05 1271.02,1212.05 1271.61,1212.05 1272.19,1212.05 1272.78,1212.05 1273.37,1212.05 1273.95,1212.05 1274.54,1212.05 1275.13,1212.05 1275.71,1212.05 1276.3,1212.05 1276.89,1212.05 1277.47,1212.05 1278.06,1212.05 1278.65,1212.05 1279.23,1212.05 1279.82,1212.05 1280.4,1212.05 1280.99,1212.05 1281.58,1212.05 1282.16,1212.05 1282.75,1212.05 1283.34,1212.05 1283.92,1212.05 1284.51,1212.05 1285.1,1212.05 1285.68,1212.05 1286.27,1212.05 1286.86,1212.05 1287.44,1212.05 1288.03,1212.05 1288.61,1212.05 1289.2,1212.05 1289.79,1212.05 1290.37,1212.05 1290.96,1212.05 1291.55,1212.05 1292.13,1212.05 1292.72,1212.05 1293.31,1212.05 1293.89,1212.05 1294.48,1212.05 1295.06,1212.05 1295.65,1212.05 1296.24,1212.05 1296.82,1212.05 1297.41,1212.05 1298,1212.05 1298.58,1212.05 1299.17,1212.05 1299.76,1212.05 1300.34,1212.05 1300.93,1212.05 1301.52,1212.05 1302.1,1212.05 1302.69,1212.05 1303.27,1212.05 1303.86,1212.05 1304.45,1212.05 1305.03,1212.05 1305.62,1212.05 1306.21,1212.05 1306.79,1212.05 1307.38,1212.05 1307.97,1212.05 1308.55,1212.05 1309.14,1212.05 1309.73,1212.05 1310.31,1212.05 1310.9,1212.05 1311.48,1212.05 1312.07,1212.05 1312.66,1212.05 1313.24,1212.05 1313.83,1212.05 1314.42,1212.05 1315,1212.05 1315.59,1212.05 1316.18,1212.05 1316.76,1212.05 1317.35,1212.05 1317.93,1212.05 1318.52,1212.05 1319.11,1212.05 1319.69,1212.05 1320.28,1212.05 1320.87,1212.05 1321.45,1212.05 1322.04,1212.05 1322.63,1212.05 1323.21,1212.05 1323.8,1212.05 1324.39,1212.05 1324.97,1212.05 1325.56,1212.05 1326.14,1212.05 1326.73,1212.05 1327.32,1212.05 1327.9,1212.05 1328.49,1212.05 1329.08,1212.05 1329.66,1212.05 1330.25,1212.05 1330.84,1212.05 1331.42,1212.05 1332.01,1212.05 1332.6,1212.05 1333.18,1212.05 1333.77,1212.05 1334.35,1212.05 1334.94,1212.05 1335.53,1212.05 1336.11,1212.05 1336.7,1212.05 1337.29,1212.05 1337.87,1212.05 1338.46,1212.05 1339.05,1212.05 1339.63,1212.05 1340.22,1212.05 1340.8,1212.05 1341.39,1212.05 1341.98,1212.05 1342.56,1212.05 1343.15,1212.05 1343.74,1212.05 1344.32,1212.05 1344.91,1212.05 1345.5,1212.05 1346.08,1212.05 1346.67,1212.05 1347.26,1212.05 1347.84,1212.05 1348.43,1212.05 1349.01,1212.05 1349.6,1212.05 1350.19,1212.05 1350.77,1212.05 1351.36,1212.05 1351.95,1212.05 1352.53,1212.05 1353.12,1212.05 1353.71,1212.05 1354.29,1212.05 1354.88,1212.05 1355.47,1212.05 1356.05,1212.05 1356.64,1212.05 1357.22,1212.05 1357.81,1212.05 1358.4,1212.05 1358.98,1212.05 1359.57,1212.05 1360.16,1212.05 1360.74,1212.05 1361.33,1212.05 1361.92,1212.05 1362.5,1212.05 1363.09,1212.05 1363.68,1212.05 1364.26,1212.05 1364.85,1212.05 1365.43,1212.05 1366.02,1212.05 1366.61,1212.05 1367.19,1212.05 1367.78,1212.05 1368.37,1212.05 1368.95,1212.05 1369.54,1212.05 1370.13,1212.05 1370.71,1212.05 1371.3,1212.05 1371.88,1212.05 1372.47,1212.05 1373.06,1212.05 1373.64,1212.05 1374.23,1212.05 1374.82,1212.05 1375.4,1212.05 1375.99,1212.05 1376.58,1212.05 1377.16,1212.05 1377.75,1212.05 1378.34,1212.05 1378.92,1212.05 1379.51,1212.05 1380.09,1212.05 1380.68,1212.05 1381.27,1212.05 1381.85,1212.05 1382.44,1212.05 1383.03,1212.05 1383.61,1212.05 1384.2,1212.05 1384.79,1212.05 1385.37,1212.05 1385.96,1212.05 1386.55,1212.05 1387.13,1212.05 1387.72,1212.05 1388.3,1212.05 1388.89,1212.05 1389.48,1212.05 1390.06,1212.05 1390.65,1212.05 1391.24,1212.05 1391.82,1212.05 1392.41,1212.05 1393,1212.05 1393.58,1212.05 1394.17,1212.05 1394.75,1212.05 1395.34,1212.05 1395.93,1212.05 1396.51,1212.05 1397.1,1212.05 1397.69,1212.05 1398.27,1212.05 1398.86,1212.05 1399.45,1212.05 1400.03,1212.05 1400.62,1212.05 1401.21,1212.05 1401.79,1212.05 1402.38,1212.05 1402.96,1212.05 1403.55,1212.05 1404.14,1212.05 1404.72,1212.05 1405.31,1212.05 1405.9,1212.05 1406.48,1212.05 1407.07,1212.05 1407.66,1212.05 1408.24,1212.05 1408.83,1212.05 1409.42,1212.05 1410,1212.05 1410.59,1212.05 1411.17,1212.05 1411.76,1212.05 1412.35,1212.05 1412.93,1212.05 1413.52,1212.05 1414.11,1212.05 1414.69,1212.05 1415.28,1212.05 1415.87,1212.05 1416.45,1212.05 1417.04,1212.05 1417.63,1212.05 1418.21,1212.05 1418.8,1212.05 1419.38,1212.05 1419.97,1212.05 1420.56,1212.05 1421.14,1212.05 1421.73,1212.05 1422.32,1212.05 1422.9,1212.05 1423.49,1212.05 1424.08,1212.05 1424.66,1212.05 1425.25,1212.05 1425.83,1212.05 1426.42,1212.05 1427.01,1212.05 1427.59,1212.05 1428.18,1212.05 1428.77,1212.05 1429.35,1212.05 1429.94,1212.05 1430.53,1212.05 1431.11,1212.05 1431.7,1212.05 1432.29,1212.05 1432.87,1212.05 1433.46,1212.05 1434.04,1212.05 1434.63,1212.05 1435.22,1212.05 1435.8,1212.05 1436.39,1212.05 1436.98,1212.05 1437.56,1212.05 1438.15,1212.05 1438.74,1212.05 1439.32,1212.05 1439.91,1212.05 1440.5,1212.05 1441.08,1212.05 1441.67,1212.05 1442.25,1212.05 1442.84,1212.05 1443.43,1212.05 1444.01,1212.05 1444.6,1212.05 1445.19,1212.05 1445.77,1212.05 1446.36,1212.05 1446.95,1212.05 1447.53,1212.05 1448.12,1212.05 1448.7,1212.05 1449.29,1212.05 1449.88,1212.05 1450.46,1212.05 1451.05,1212.05 1451.64,1212.05 1452.22,1212.05 1452.81,1212.05 1453.4,1212.05 1453.98,1212.05 1454.57,1212.05 1455.16,1212.05 1455.74,1212.05 1456.33,1212.05 1456.91,1212.05 1457.5,1212.05 1458.09,1212.05 1458.67,1212.05 1459.26,1212.05 1459.85,1212.05 1460.43,1212.05 1461.02,1212.05 1461.61,1212.05 1462.19,1212.05 1462.78,1212.05 1463.37,1212.05 1463.95,1212.05 1464.54,1212.05 1465.12,1212.05 1465.71,1212.05 1466.3,1212.05 1466.88,1212.05 1467.47,1212.05 1468.06,1212.05 1468.64,1212.05 1469.23,1212.05 1469.82,1212.05 1470.4,1212.05 1470.99,1212.05 1471.57,1212.05 1472.16,1212.05 1472.75,1212.05 1473.33,1212.05 1473.92,1212.05 1474.51,1212.05 1475.09,1212.05 1475.68,1212.05 1476.27,1212.05 1476.85,1212.05 1477.44,1212.05 1478.03,1212.05 1478.61,1212.05 1479.2,1212.05 1479.78,1212.05 1480.37,1212.05 1480.96,1212.05 1481.54,1212.05 1482.13,1212.05 1482.72,1212.05 1483.3,1212.05 1483.89,1212.05 1484.48,1212.05 1485.06,1212.05 1485.65,1212.05 1486.24,1212.05 1486.82,1212.05 1487.41,1212.05 1487.99,1212.05 1488.58,1212.05 1489.17,1212.05 1489.75,1212.05 1490.34,1212.05 1490.93,1212.05 1491.51,1212.05 1492.1,1212.05 1492.69,1212.05 1493.27,1212.05 1493.86,1212.05 1494.45,1212.05 1495.03,1212.05 1495.62,1212.05 1496.2,1212.05 1496.79,1212.05 1497.38,1212.05 1497.96,1212.05 1498.55,1212.05 1499.14,1212.05 1499.72,1212.05 1500.31,1212.05 1500.9,1212.05 1501.48,1212.05 1502.07,1212.05 1502.65,1212.05 1503.24,1212.05 1503.83,1212.05 1504.41,1212.05 1505,1212.05 1505.59,1212.05 1506.17,1212.05 1506.76,1212.05 1507.35,1212.05 1507.93,1212.05 1508.52,1212.05 1509.11,1212.05 1509.69,1212.05 1510.28,1212.05 1510.86,1212.05 1511.45,1212.05 1512.04,1212.05 1512.62,1212.05 1513.21,1212.05 1513.8,1212.05 1514.38,1212.05 1514.97,1212.05 1515.56,1212.05 1516.14,1212.05 1516.73,1212.05 1517.32,1212.05 1517.9,1212.05 1518.49,1212.05 1519.07,1212.05 1519.66,1212.05 1520.25,1212.05 1520.83,1212.05 1521.42,1212.05 1522.01,1212.05 1522.59,1212.05 1523.18,1212.05 1523.77,1212.05 1524.35,1212.05 1524.94,1212.05 1525.52,1212.05 1526.11,1212.05 1526.7,1212.05 1527.28,1212.05 1527.87,1212.05 1528.46,1212.05 1529.04,1212.05 1529.63,1212.05 1530.22,1212.05 1530.8,1212.05 1531.39,1212.05 1531.98,1212.05 1532.56,1212.05 1533.15,1212.05 1533.73,1212.05 1534.32,1212.05 1534.91,1212.05 1535.49,1212.05 1536.08,1212.05 1536.67,1212.05 1537.25,1212.05 1537.84,1212.05 1538.43,1212.05 1539.01,1212.05 1539.6,1212.05 1540.19,1212.05 1540.77,1212.05 1541.36,1212.05 1541.94,1212.05 1542.53,1212.05 1543.12,1212.05 1543.7,1212.05 1544.29,1212.05 1544.88,1212.05 1545.46,1212.05 1546.05,1212.05 1546.64,1212.05 1547.22,1212.05 1547.81,1212.05 1548.4,1212.05 1548.98,1212.05 1549.57,1212.05 1550.15,1212.05 1550.74,1212.05 1551.33,1212.05 1551.91,1212.05 1552.5,1212.05 1553.09,1212.05 1553.67,1212.05 1554.26,1212.05 1554.85,1212.05 1555.43,1212.05 1556.02,1212.05 1556.6,1212.05 1557.19,1212.05 1557.78,1212.05 1558.36,1212.05 1558.95,1212.05 1559.54,1212.05 1560.12,1212.05 1560.71,1212.05 1561.3,1212.05 1561.88,1212.05 1562.47,1212.05 1563.06,1212.05 1563.64,1212.05 1564.23,1212.05 1564.81,1212.05 1565.4,1212.05 1565.99,1212.05 1566.57,1212.05 1567.16,1212.05 1567.75,1212.05 1568.33,1212.05 1568.92,1212.05 1569.51,1212.05 1570.09,1212.05 1570.68,1212.05 1571.27,1212.05 1571.85,1212.05 1572.44,1212.05 1573.02,1212.05 1573.61,1212.05 1574.2,1212.05 1574.78,1212.05 1575.37,1212.05 1575.96,1212.05 1576.54,1212.05 1577.13,1212.05 1577.72,1212.05 1578.3,1212.05 1578.89,1212.05 1579.47,1212.05 1580.06,1212.05 1580.65,1212.05 1581.23,1212.05 1581.82,1212.05 1582.41,1212.05 1582.99,1212.05 1583.58,1212.05 1584.17,1212.05 1584.75,1212.05 1585.34,1212.05 1585.93,1212.05 1586.51,1212.05 1587.1,1212.05 1587.68,1212.05 1588.27,1212.05 1588.86,1212.05 1589.44,1212.05 1590.03,1212.05 1590.62,1212.05 1591.2,1212.05 1591.79,1212.05 1592.38,1212.05 1592.96,1212.05 1593.55,1212.05 1594.14,1212.05 1594.72,1212.05 1595.31,1212.05 1595.89,1212.05 1596.48,1212.05 1597.07,1212.05 1597.65,1212.05 1598.24,1212.05 1598.83,1212.05 1599.41,1212.05 1600,1212.05 1600.59,1212.05 1601.17,1212.05 1601.76,1212.05 1602.34,1212.05 1602.93,1212.05 1603.52,1212.05 1604.1,1212.05 1604.69,1212.05 1605.28,1212.05 1605.86,1212.05 1606.45,1212.05 1607.04,1212.05 1607.62,1212.05 1608.21,1212.05 1608.8,1212.05 1609.38,1212.05 1609.97,1212.05 1610.55,1212.05 1611.14,1212.05 1611.73,1212.05 1612.31,1212.05 1612.9,1212.05 1613.49,1212.05 1614.07,1212.05 1614.66,1212.05 1615.25,1212.05 1615.83,1212.05 1616.42,1212.05 1617.01,1212.05 1617.59,1212.05 1618.18,1212.05 1618.76,1212.05 1619.35,1212.05 1619.94,1212.05 1620.52,1212.05 1621.11,1212.05 1621.7,1212.05 1622.28,1212.05 1622.87,1212.05 1623.46,1212.05 1624.04,1212.05 1624.63,1212.05 1625.22,1212.05 1625.8,1212.05 1626.39,1212.05 1626.97,1212.05 1627.56,1212.05 1628.15,1212.05 1628.73,1212.05 1629.32,1212.05 1629.91,1212.05 1630.49,1212.05 1631.08,1212.05 1631.67,1212.05 1632.25,1212.05 1632.84,1212.05 1633.42,1212.05 1634.01,1212.05 1634.6,1212.05 1635.18,1212.05 1635.77,1212.05 1636.36,1212.05 1636.94,1212.05 1637.53,1212.05 1638.12,1212.05 1638.7,1212.05 1639.29,1212.05 1639.88,1212.05 1640.46,1212.05 1641.05,1212.05 1641.63,1212.05 1642.22,1212.05 1642.81,1212.05 1643.39,1212.05 1643.98,1212.05 1644.57,1212.05 1645.15,1212.05 1645.74,1212.05 1646.33,1212.05 1646.91,1212.05 1647.5,1212.05 1648.09,1212.05 1648.67,1212.05 1649.26,1212.05 1649.84,1212.05 1650.43,1212.05 1651.02,1212.05 1651.6,1212.05 1652.19,1212.05 1652.78,1212.05 1653.36,1212.05 1653.95,1212.05 1654.54,1212.05 1655.12,1212.05 1655.71,1212.05 1656.29,1212.05 1656.88,1212.05 1657.47,1212.05 1658.05,1212.05 1658.64,1212.05 1659.23,1212.05 1659.81,1212.05 1660.4,1212.05 1660.99,1212.05 1661.57,1212.05 1662.16,1212.05 1662.75,1212.05 1663.33,1212.05 1663.92,1212.05 1664.5,1212.05 1665.09,1212.05 1665.68,1212.05 1666.26,1212.05 1666.85,1212.05 1667.44,1212.05 1668.02,1212.05 1668.61,1212.05 1669.2,1212.05 1669.78,1212.05 1670.37,1212.05 1670.96,1212.05 1671.54,1212.05 1672.13,1212.05 1672.71,1212.05 1673.3,1212.05 1673.89,1212.05 1674.47,1212.05 1675.06,1212.05 1675.65,1212.05 1676.23,1212.05 1676.82,1212.05 1677.41,1212.05 1677.99,1212.05 1678.58,1212.05 1679.17,1212.05 1679.75,1212.05 1680.34,1212.05 1680.92,1212.05 1681.51,1212.05 1682.1,1212.05 1682.68,1212.05 1683.27,1212.05 1683.86,1212.05 1684.44,1212.05 1685.03,1212.05 1685.62,1212.05 1686.2,1212.05 1686.79,1212.05 1687.37,1212.05 1687.96,1212.05 1688.55,1212.05 1689.13,1212.05 1689.72,1212.05 1690.31,1212.05 1690.89,1212.05 1691.48,1212.05 1692.07,1212.05 1692.65,1212.05 1693.24,1212.05 1693.83,1212.05 1694.41,1212.05 1695,1212.05 1695.58,1212.05 1696.17,1212.05 1696.76,1212.05 1697.34,1212.05 1697.93,1212.05 1698.52,1212.05 1699.1,1212.05 1699.69,1212.05 1700.28,1212.05 1700.86,1212.05 1701.45,1212.05 1702.04,1212.05 1702.62,1212.05 1703.21,1212.05 1703.79,1212.05 1704.38,1212.05 1704.97,1212.05 1705.55,1212.05 1706.14,1212.05 1706.73,1212.05 1707.31,1212.05 1707.9,1212.05 1708.49,1212.05 1709.07,1212.05 1709.66,1212.05 1710.24,1212.05 1710.83,1212.05 1711.42,1212.05 1712,1212.05 1712.59,1212.05 1713.18,1212.05 1713.76,1212.05 1714.35,1212.05 1714.94,1212.05 1715.52,1212.05 1716.11,1212.05 1716.7,1212.05 1717.28,1212.05 1717.87,1212.05 1718.45,1212.05 1719.04,1212.05 1719.63,1212.05 1720.21,1212.05 1720.8,1212.05 1721.39,1212.05 1721.97,1212.05 1722.56,1212.05 1723.15,1212.05 1723.73,1212.05 1724.32,1212.05 1724.91,1212.05 1725.49,1212.05 1726.08,1212.05 1726.66,1212.05 1727.25,1212.05 1727.84,1212.05 1728.42,1212.05 1729.01,1212.05 1729.6,1212.05 1730.18,1212.05 1730.77,1212.05 1731.36,1212.05 1731.94,1212.05 1732.53,1212.05 1733.11,1212.05 1733.7,1212.05 1734.29,1212.05 1734.87,1212.05 1735.46,1212.05 1736.05,1212.05 1736.63,1212.05 1737.22,1212.05 1737.81,1212.05 1738.39,1212.05 1738.98,1212.05 1739.57,1212.05 1740.15,1212.05 1740.74,1212.05 1741.32,1212.05 1741.91,1212.05 1742.5,1212.05 1743.08,1212.05 1743.67,1212.05 1744.26,1212.05 1744.84,1212.05 1745.43,1212.05 1746.02,1212.05 1746.6,1212.05 1747.19,1212.05 1747.78,1212.05 1748.36,1212.05 1748.95,1212.05 1749.53,1212.05 1750.12,1212.05 1750.71,1212.05 1751.29,1212.05 1751.88,1212.05 1752.47,1212.05 1753.05,1212.05 1753.64,1212.05 1754.23,1212.05 1754.81,1212.05 1755.4,1212.05 1755.99,1212.05 1756.57,1212.05 1757.16,1212.05 1757.74,1212.05 1758.33,1212.05 1758.92,1212.05 1759.5,1212.05 1760.09,1212.05 1760.68,1212.05 1761.26,1212.05 1761.85,1212.05 1762.44,1212.05 1763.02,1212.05 1763.61,1212.05 1764.19,1212.05 1764.78,1212.05 1765.37,1212.05 1765.95,1212.05 1766.54,1212.05 1767.13,1212.05 1767.71,1212.05 1768.3,1212.05 1768.89,1212.05 1769.47,1212.05 1770.06,1212.05 1770.65,1212.05 1771.23,1212.05 1771.82,1212.05 1772.4,1212.05 1772.99,1212.05 1773.58,1212.05 1774.16,1212.05 1774.75,1212.05 1775.34,1212.05 1775.92,1212.05 1776.51,1212.05 1777.1,1212.05 1777.68,1212.05 1778.27,1212.05 1778.86,1212.05 1779.44,1212.05 1780.03,1212.05 1780.61,1212.05 1781.2,1212.05 1781.79,1212.05 1782.37,1212.05 1782.96,1212.05 1783.55,1212.05 1784.13,1212.05 1784.72,1212.05 1785.31,1212.05 1785.89,1212.05 1786.48,1212.05 1787.06,1212.05 1787.65,1212.05 1788.24,1212.05 1788.82,1212.05 1789.41,1212.05 1790,1212.05 1790.58,1212.05 1791.17,1212.05 1791.76,1212.05 1792.34,1212.05 1792.93,1212.05 1793.52,1212.05 1794.1,1212.05 1794.69,1212.05 1795.27,1212.05 1795.86,1212.05 1796.45,1212.05 1797.03,1212.05 1797.62,1212.05 1798.21,1212.05 1798.79,1212.05 1799.38,1212.05 1799.97,1212.05 1800.55,1212.05 1801.14,1212.05 1801.73,1212.05 1802.31,1212.05 1802.9,1212.05 1803.48,1212.05 1804.07,1212.05 1804.66,1212.05 1805.24,1212.05 1805.83,1212.05 1806.42,1212.05 1807,1212.05 1807.59,1212.05 1808.18,1212.05 1808.76,1212.05 1809.35,1212.05 1809.94,1212.05 1810.52,1212.05 1811.11,1212.05 1811.69,1212.05 1812.28,1212.05 1812.87,1212.05 1813.45,1212.05 1814.04,1212.05 1814.63,1212.05 1815.21,1212.05 1815.8,1212.05 1816.39,1212.05 1816.97,1212.05 1817.56,1212.05 1818.14,1212.05 1818.73,1212.05 1819.32,1212.05 1819.9,1212.05 1820.49,1212.05 1821.08,1212.05 1821.66,1212.05 1822.25,1212.05 1822.84,1212.05 1823.42,1212.05 1824.01,1212.05 1824.6,1212.05 1825.18,1212.05 1825.77,1212.05 1826.35,1212.05 1826.94,1212.05 1827.53,1212.05 1828.11,1212.05 1828.7,1212.05 1829.29,1212.05 1829.87,1212.05 1830.46,1212.05 1831.05,1212.05 1831.63,1212.05 1832.22,1212.05 1832.81,1212.05 1833.39,1212.05 1833.98,1212.05 1834.56,1212.05 1835.15,1212.05 1835.74,1212.05 1836.32,1212.05 1836.91,1212.05 1837.5,1212.05 1838.08,1212.05 1838.67,1212.05 1839.26,1212.05 1839.84,1212.05 1840.43,1212.05 1841.01,1212.05 1841.6,1212.05 1842.19,1212.05 1842.77,1212.05 1843.36,1212.05 1843.95,1212.05 1844.53,1212.05 1845.12,1212.05 1845.71,1212.05 1846.29,1212.05 1846.88,1212.05 1847.47,1212.05 1848.05,1212.05 1848.64,1212.05 1849.22,1212.05 1849.81,1212.05 1850.4,1212.05 1850.98,1212.05 1851.57,1212.05 1852.16,1212.05 1852.74,1212.05 1853.33,1212.05 1853.92,1212.05 1854.5,1212.05 1855.09,1212.05 1855.68,1212.05 1856.26,1212.05 1856.85,1212.05 1857.43,1212.05 1858.02,1212.05 1858.61,1212.05 1859.19,1212.05 1859.78,1212.05 1860.37,1212.05 1860.95,1212.05 1861.54,1212.05 1862.13,1212.05 1862.71,1212.05 1863.3,1212.05 1863.88,1212.05 1864.47,1212.05 1865.06,1212.05 1865.64,1212.05 1866.23,1212.05 1866.82,1212.05 1867.4,1212.05 1867.99,1212.05 1868.58,1212.05 1869.16,1212.05 1869.75,1212.05 1870.34,1212.05 1870.92,1212.05 1871.51,1212.05 1872.09,1212.05 1872.68,1212.05 1873.27,1212.05 1873.85,1212.05 1874.44,1212.05 1875.03,1212.05 1875.61,1212.05 1876.2,1212.05 1876.79,1212.05 1877.37,1212.05 1877.96,1212.05 1878.55,1212.05 1879.13,1212.05 1879.72,1212.05 1880.3,1212.05 1880.89,1212.05 1881.48,1212.05 1882.06,1212.05 1882.65,1212.05 1883.24,1212.05 1883.82,1212.05 1884.41,1212.05 1885,1212.05 1885.58,1212.05 1886.17,1212.05 1886.76,1212.05 1887.34,1212.05 1887.93,1212.05 1888.51,1212.05 1889.1,1212.05 1889.69,1212.05 1890.27,1212.05 1890.86,1212.05 1891.45,1212.05 1892.03,1212.05 1892.62,1212.05 1893.21,1212.05 1893.79,1212.05 1894.38,1212.05 1894.96,1212.05 1895.55,1212.05 1896.14,1212.05 1896.72,1212.05 1897.31,1212.05 1897.9,1212.05 1898.48,1212.05 1899.07,1212.05 1899.66,1212.05 1900.24,1212.05 1900.83,1212.05 1901.42,1212.05 1902,1212.05 1902.59,1212.05 1903.17,1212.05 1903.76,1212.05 1904.35,1212.05 1904.93,1212.05 1905.52,1212.05 1906.11,1212.05 1906.69,1212.05 1907.28,1212.05 1907.87,1212.05 1908.45,1212.05 1909.04,1212.05 1909.63,1212.05 1910.21,1212.05 1910.8,1212.05 1911.38,1212.05 1911.97,1212.05 1912.56,1212.05 1913.14,1212.05 1913.73,1212.05 1914.32,1212.05 1914.9,1212.05 1915.49,1212.05 1916.08,1212.05 1916.66,1212.05 1917.25,1212.05 1917.83,1212.05 1918.42,1212.05 1919.01,1212.05 1919.59,1212.05 1920.18,1212.05 1920.77,1212.05 1921.35,1212.05 1921.94,1212.05 1922.53,1212.05 1923.11,1212.05 1923.7,1212.05 1924.29,1212.05 1924.87,1212.05 1925.46,1212.05 1926.04,1212.05 1926.63,1212.05 1927.22,1212.05 1927.8,1212.05 1928.39,1212.05 1928.98,1212.05 1929.56,1212.05 1930.15,1212.05 1930.74,1212.05 1931.32,1212.05 1931.91,1212.05 1932.5,1212.05 1933.08,1212.05 1933.67,1212.05 1934.25,1212.05 1934.84,1212.05 1935.43,1212.05 1936.01,1212.05 1936.6,1212.05 1937.19,1212.05 1937.77,1212.05 1938.36,1212.05 1938.95,1212.05 1939.53,1212.05 1940.12,1212.05 1940.71,1212.05 1941.29,1212.05 1941.88,1212.05 1942.46,1212.05 1943.05,1212.05 1943.64,1212.05 1944.22,1212.05 1944.81,1212.05 1945.4,1212.05 1945.98,1212.05 1946.57,1212.05 1947.16,1212.05 1947.74,1212.05 1948.33,1212.05 1948.91,1212.05 1949.5,1212.05 1950.09,1212.05 1950.67,1212.05 1951.26,1212.05 1951.85,1212.05 1952.43,1212.05 1953.02,1212.05 1953.61,1212.05 1954.19,1212.05 1954.78,1212.05 1955.37,1212.05 1955.95,1212.05 1956.54,1212.05 1957.12,1212.05 1957.71,1212.05 1958.3,1212.05 1958.88,1212.05 1959.47,1212.05 1960.06,1212.05 1960.64,1212.05 1961.23,1212.05 1961.82,1212.05 1962.4,1212.05 1962.99,1212.05 1963.58,1212.05 1964.16,1212.05 1964.75,1212.05 1965.33,1212.05 1965.92,1212.05 1966.51,1212.05 1967.09,1212.05 1967.68,1212.05 1968.27,1212.05 1968.85,1212.05 1969.44,1212.05 1970.03,1212.05 1970.61,1212.05 1971.2,1212.05 1971.78,1212.05 1972.37,1212.05 1972.96,1212.05 1973.54,1212.05 1974.13,1212.05 1974.72,1212.05 1975.3,1212.05 1975.89,1212.05 1976.48,1212.05 1977.06,1212.05 1977.65,1212.05 1978.24,1212.05 1978.82,1212.05 1979.41,1212.05 1979.99,1212.05 1980.58,1212.05 1981.17,1212.05 1981.75,1212.05 1982.34,1212.05 1982.93,1212.05 1983.51,1212.05 1984.1,1212.05 1984.69,1212.05 1985.27,1212.05 1985.86,1212.05 1986.45,1212.05 1987.03,1212.05 1987.62,1212.05 1988.2,1212.05 1988.79,1212.05 1989.38,1212.05 1989.96,1212.05 1990.55,1212.05 1991.14,1212.05 1991.72,1212.05 1992.31,1212.05 1992.9,1212.05 1993.48,1212.05 1994.07,1212.05 1994.65,1212.05 1995.24,1212.05 1995.83,1212.05 1996.41,1212.05 1997,1212.05 1997.59,1212.05 1998.17,1212.05 1998.76,1212.05 1999.35,1212.05 1999.93,1212.05 2000.52,1212.05 2001.11,1212.05 2001.69,1212.05 2002.28,1212.05 2002.86,1212.05 2003.45,1212.05 2004.04,1212.05 2004.62,1212.05 2005.21,1212.05 2005.8,1212.05 2006.38,1212.05 2006.97,1212.05 2007.56,1212.05 2008.14,1212.05 2008.73,1212.05 2009.32,1212.05 2009.9,1212.05 2010.49,1212.05 2011.07,1212.05 2011.66,1212.05 2012.25,1212.05 2012.83,1212.05 2013.42,1212.05 2014.01,1212.05 2014.59,1212.05 2015.18,1212.05 2015.77,1212.05 2016.35,1212.05 2016.94,1212.05 2017.53,1212.05 2018.11,1212.05 2018.7,1212.05 2019.28,1212.05 2019.87,1212.05 2020.46,1212.05 2021.04,1212.05 2021.63,1212.05 2022.22,1212.05 2022.8,1212.05 2023.39,1212.05 2023.98,1212.05 2024.56,1212.05 2025.15,1212.05 2025.73,1212.05 2026.32,1212.05 2026.91,1212.05 2027.49,1212.05 2028.08,1212.05 2028.67,1212.05 2029.25,1212.05 2029.84,1212.05 2030.43,1212.05 2031.01,1212.05 2031.6,1212.05 2032.19,1212.05 2032.77,1212.05 2033.36,1212.05 2033.94,1212.05 2034.53,1212.05 2035.12,1212.05 2035.7,1212.05 2036.29,1212.05 2036.88,1212.05 2037.46,1212.05 2038.05,1212.05 2038.64,1212.05 2039.22,1212.05 2039.81,1212.05 2040.4,1212.05 2040.98,1212.05 2041.57,1212.05 2042.15,1212.05 2042.74,1212.05 2043.33,1212.05 2043.91,1212.05 2044.5,1212.05 2045.09,1212.05 2045.67,1212.05 2046.26,1212.05 2046.85,1212.05 2047.43,1212.05 2048.02,1212.05 2048.6,1212.05 2049.19,1212.05 2049.78,1212.05 2050.36,1212.05 2050.95,1212.05 2051.54,1212.05 2052.12,1212.05 2052.71,1212.05 2053.3,1212.05 2053.88,1212.05 2054.47,1212.05 2055.06,1212.05 2055.64,1212.05 2056.23,1212.05 2056.81,1212.05 2057.4,1212.05 2057.99,1212.05 2058.57,1212.05 2059.16,1212.05 2059.75,1212.05 2060.33,1212.05 2060.92,1212.05 2061.51,1212.05 2062.09,1212.05 2062.68,1212.05 2063.27,1212.05 2063.85,1212.05 2064.44,1212.05 2065.02,1212.05 2065.61,1212.05 2066.2,1212.05 2066.78,1212.05 2067.37,1212.05 2067.96,1212.05 2068.54,1212.05 2069.13,1212.05 2069.72,1212.05 2070.3,1212.05 2070.89,1212.05 2071.48,1212.05 2072.06,1212.05 2072.65,1212.05 2073.23,1212.05 2073.82,1212.05 2074.41,1212.05 2074.99,1212.05 2075.58,1212.05 2076.17,1212.05 2076.75,1212.05 2077.34,1212.05 2077.93,1212.05 2078.51,1212.05 2079.1,1212.05 2079.68,1212.05 2080.27,1212.05 2080.86,1212.05 2081.44,1212.05 2082.03,1212.05 2082.62,1212.05 2083.2,1212.05 2083.79,1212.05 2084.38,1212.05 2084.96,1212.05 2085.55,1212.05 2086.14,1212.05 2086.72,1212.05 2087.31,1212.05 2087.89,1212.05 2088.48,1212.05 2089.07,1212.05 2089.65,1212.05 2090.24,1212.05 2090.83,1212.05 2091.41,1212.05 2092,1212.05 2092.59,1212.05 2093.17,1212.05 2093.76,1212.05 2094.35,1212.05 2094.93,1212.05 2095.52,1212.05 2096.1,1212.05 2096.69,1212.05 2097.28,1212.05 2097.86,1212.05 2098.45,1212.05 2099.04,1212.05 2099.62,1212.05 2100.21,1212.05 2100.8,1212.05 2101.38,1212.05 2101.97,1212.05 2102.55,1212.05 2103.14,1212.05 2103.73,1212.05 2104.31,1212.05 2104.9,1212.05 2105.49,1212.05 2106.07,1212.05 2106.66,1212.05 2107.25,1212.05 2107.83,1212.05 2108.42,1212.05 2109.01,1212.05 2109.59,1212.05 2110.18,1212.05 2110.76,1212.05 2111.35,1212.05 2111.94,1212.05 2112.52,1212.05 2113.11,1212.05 2113.7,1212.05 2114.28,1212.05 2114.87,1212.05 2115.46,1212.05 2116.04,1212.05 2116.63,1212.05 2117.22,1212.05 2117.8,1212.05 2118.39,1212.05 2118.97,1212.05 2119.56,1212.05 2120.15,1212.05 2120.73,1212.05 2121.32,1212.05 2121.91,1212.05 2122.49,1212.05 2123.08,1212.05 2123.67,1212.05 2124.25,1212.05 2124.84,1212.05 2125.42,1212.05 2126.01,1212.05 2126.6,1212.05 2127.18,1212.05 2127.77,1212.05 2128.36,1212.05 2128.94,1212.05 2129.53,1212.05 2130.12,1212.05 2130.7,1212.05 2131.29,1212.05 2131.88,1212.05 2132.46,1212.05 2133.05,1212.05 2133.63,1212.05 2134.22,1212.05 2134.81,1212.05 2135.39,1212.05 2135.98,1212.05 2136.57,1212.05 2137.15,1212.05 2137.74,1212.05 2138.33,1212.05 2138.91,1212.05 2139.5,1212.05 2140.09,1212.05 2140.67,1212.05 2141.26,1212.05 2141.84,1212.05 2142.43,1212.05 2143.02,1212.05 2143.6,1212.05 2144.19,1212.05 2144.78,1212.05 2145.36,1212.05 2145.95,1212.05 2146.54,1212.05 2147.12,1212.05 2147.71,1212.05 2148.3,1212.05 2148.88,1212.05 2149.47,1212.05 2150.05,1212.05 2150.64,1212.05 2151.23,1212.05 2151.81,1212.05 2152.4,1212.05 2152.99,1212.05 2153.57,1212.05 2154.16,1212.05 2154.75,1212.05 2155.33,1212.05 2155.92,1212.05 2156.5,1212.05 2157.09,1212.05 2157.68,1212.05 2158.26,1212.05 \"/>\n<path clip-path=\"url(#clip502)\" d=\"M986.025 1211.93 L986.612 1211.93 L987.198 1211.93 L987.785 1211.93 L988.371 1211.93 L988.957 1211.93 L989.544 1211.93 L990.13 1211.93 L990.717 1211.93 L991.303 1211.93 L991.889 1211.93 L992.476 1211.93 L993.062 1211.93 L993.649 1211.93 L994.235 1211.93 L994.822 1211.93 L995.408 1211.93 L995.994 1211.93 L996.581 1211.93 L997.167 1211.93 L997.754 1211.93 L998.34 1211.93 L998.926 1211.93 L999.513 1211.93 L1000.1 1211.93 L1000.69 1211.93 L1001.27 1211.93 L1001.86 1211.93 L1002.44 1211.93 L1003.03 1211.93 L1003.62 1211.93 L1004.2 1211.93 L1004.79 1211.93 L1005.38 1211.93 L1005.96 1211.93 L1006.55 1211.93 L1007.14 1211.93 L1007.72 1211.93 L1008.31 1211.93 L1008.9 1211.93 L1009.48 1211.93 L1010.07 1211.93 L1010.65 1211.93 L1011.24 1211.93 L1011.83 1211.93 L1012.41 1211.93 L1013 1211.93 L1013.59 1211.93 L1014.17 1211.93 L1014.76 1211.93 L1015.35 1211.93 L1015.93 1211.93 L1016.52 1211.93 L1017.11 1211.93 L1017.69 1211.93 L1018.28 1211.93 L1018.86 1211.93 L1019.45 1211.93 L1020.04 1211.93 L1020.62 1211.93 L1021.21 1211.93 L1021.8 1211.93 L1022.38 1211.93 L1022.97 1211.93 L1023.56 1211.93 L1024.14 1211.93 L1024.73 1211.93 L1025.32 1211.93 L1025.9 1211.93 L1026.49 1211.93 L1027.07 1211.93 L1027.66 1211.93 L1028.25 1211.93 L1028.83 1211.93 L1029.42 1211.93 L1030.01 1211.93 L1030.59 1211.93 L1031.18 1211.93 L1031.77 1211.93 L1032.35 1211.93 L1032.94 1211.93 L1033.52 1211.93 L1034.11 1211.93 L1034.7 1211.93 L1035.28 1211.93 L1035.87 1211.93 L1036.46 1211.93 L1037.04 1211.93 L1037.63 1211.93 L1038.22 1211.93 L1038.8 1211.93 L1039.39 1211.93 L1039.98 1211.93 L1040.56 1211.93 L1041.15 1211.93 L1041.73 1211.93 L1042.32 1211.93 L1042.91 1211.93 L1043.49 1211.93 L1044.08 1211.93 L1044.67 1211.93 L1045.25 1211.93 L1045.84 1211.93 L1046.43 1211.93 L1047.01 1211.93 L1047.6 1211.93 L1048.19 1211.93 L1048.77 1211.93 L1049.36 1211.93 L1049.94 1211.93 L1050.53 1211.93 L1051.12 1211.93 L1051.7 1211.93 L1052.29 1211.93 L1052.88 1211.93 L1053.46 1211.93 L1054.05 1211.93 L1054.64 1211.93 L1055.22 1211.93 L1055.81 1211.93 L1056.39 1211.93 L1056.98 1211.93 L1057.57 1211.93 L1058.15 1211.93 L1058.74 1211.93 L1059.33 1211.93 L1059.91 1211.93 L1060.5 1211.93 L1061.09 1211.93 L1061.67 1211.93 L1062.26 1211.93 L1062.85 1211.93 L1063.43 1211.93 L1064.02 1211.93 L1064.6 1211.93 L1065.19 1211.93 L1065.78 1211.93 L1066.36 1211.93 L1066.95 1211.93 L1067.54 1211.93 L1068.12 1211.93 L1068.71 1211.93 L1069.3 1211.93 L1069.88 1211.93 L1070.47 1211.93 L1071.06 1211.93 L1071.64 1211.93 L1072.23 1211.93 L1072.81 1211.93 L1073.4 1211.93 L1073.99 1211.93 L1074.57 1211.93 L1075.16 1211.93 L1075.75 1211.93 L1076.33 1211.93 L1076.92 1211.93 L1077.51 1211.93 L1078.09 1211.93 L1078.68 1211.93 L1079.26 1211.93 L1079.85 1211.93 L1080.44 1211.93 L1081.02 1211.93 L1081.61 1211.93 L1082.2 1211.93 L1082.78 1211.93 L1083.37 1211.93 L1083.96 1211.93 L1084.54 1211.93 L1085.13 1211.93 L1085.72 1211.93 L1086.3 1211.93 L1086.89 1211.93 L1087.47 1211.93 L1088.06 1211.93 L1088.65 1211.93 L1089.23 1211.93 L1089.82 1211.93 L1090.41 1211.93 L1090.99 1211.93 L1091.58 1211.93 L1092.17 1211.93 L1092.75 1211.93 L1093.34 1211.93 L1093.93 1211.93 L1094.51 1211.93 L1095.1 1211.93 L1095.68 1211.93 L1096.27 1211.93 L1096.86 1211.93 L1097.44 1211.93 L1098.03 1211.93 L1098.62 1211.93 L1099.2 1211.93 L1099.79 1211.93 L1100.38 1211.93 L1100.96 1211.93 L1101.55 1211.93 L1102.14 1211.93 L1102.72 1211.93 L1103.31 1211.93 L1103.89 1211.93 L1104.48 1211.93 L1105.07 1211.93 L1105.65 1211.93 L1106.24 1211.93 L1106.83 1211.93 L1107.41 1211.93 L1108 1211.93 L1108.59 1211.93 L1109.17 1211.93 L1109.76 1211.93 L1110.34 1211.93 L1110.93 1211.93 L1111.52 1211.93 L1112.1 1211.93 L1112.69 1211.93 L1113.28 1211.93 L1113.86 1211.93 L1114.45 1211.93 L1115.04 1211.93 L1115.62 1211.93 L1116.21 1211.93 L1116.8 1211.93 L1117.38 1211.93 L1117.97 1211.93 L1118.55 1211.93 L1119.14 1211.93 L1119.73 1211.93 L1120.31 1211.93 L1120.9 1211.93 L1121.49 1211.93 L1122.07 1211.93 L1122.66 1211.93 L1123.25 1211.93 L1123.83 1211.93 L1124.42 1211.93 L1125.01 1211.93 L1125.59 1211.93 L1126.18 1211.93 L1126.76 1211.93 L1127.35 1211.93 L1127.94 1211.93 L1128.52 1211.93 L1129.11 1211.93 L1129.7 1211.93 L1130.28 1211.93 L1130.87 1211.93 L1131.46 1211.93 L1132.04 1211.93 L1132.63 1211.93 L1133.21 1211.93 L1133.8 1211.93 L1134.39 1211.93 L1134.97 1211.93 L1135.56 1211.93 L1136.15 1211.93 L1136.73 1211.93 L1137.32 1211.93 L1137.91 1211.93 L1138.49 1211.93 L1139.08 1211.93 L1139.67 1211.93 L1140.25 1211.93 L1140.84 1211.93 L1141.42 1211.93 L1142.01 1211.93 L1142.6 1211.93 L1143.18 1211.93 L1143.77 1211.93 L1144.36 1211.93 L1144.94 1211.93 L1145.53 1211.93 L1146.12 1211.93 L1146.7 1211.93 L1147.29 1211.93 L1147.88 1211.93 L1148.46 1211.93 L1149.05 1211.93 L1149.63 1211.93 L1150.22 1211.93 L1150.81 1211.93 L1151.39 1211.93 L1151.98 1211.93 L1152.57 1211.93 L1153.15 1211.93 L1153.74 1211.93 L1154.33 1211.93 L1154.91 1211.93 L1155.5 1211.93 L1156.09 1211.93 L1156.67 1211.93 L1157.26 1211.93 L1157.84 1211.93 L1158.43 1211.93 L1159.02 1211.93 L1159.6 1211.93 L1160.19 1211.93 L1160.78 1211.93 L1161.36 1211.93 L1161.95 1211.93 L1162.54 1211.93 L1163.12 1211.93 L1163.71 1211.93 L1164.29 1211.93 L1164.88 1211.93 L1165.47 1211.93 L1166.05 1211.93 L1166.64 1211.93 L1167.23 1211.93 L1167.81 1211.93 L1168.4 1211.93 L1168.99 1211.93 L1169.57 1211.93 L1170.16 1211.93 L1170.75 1211.93 L1171.33 1211.93 L1171.92 1211.93 L1172.5 1211.93 L1173.09 1211.93 L1173.68 1211.93 L1174.26 1211.93 L1174.85 1211.93 L1175.44 1211.93 L1176.02 1211.93 L1176.61 1211.93 L1177.2 1211.93 L1177.78 1211.93 L1178.37 1211.93 L1178.96 1211.93 L1179.54 1211.93 L1180.13 1211.93 L1180.71 1211.93 L1181.3 1211.93 L1181.89 1211.93 L1182.47 1211.93 L1183.06 1211.93 L1183.65 1211.93 L1184.23 1211.93 L1184.82 1211.93 L1185.41 1211.93 L1185.99 1211.93 L1186.58 1211.93 L1187.16 1211.93 L1187.75 1211.93 L1188.34 1211.93 L1188.92 1211.93 L1189.51 1211.93 L1190.1 1211.93 L1190.68 1211.93 L1191.27 1211.93 L1191.86 1211.93 L1192.44 1211.93 L1193.03 1211.93 L1193.62 1211.93 L1194.2 1211.93 L1194.79 1211.93 L1195.37 1211.93 L1195.96 1211.93 L1196.55 1211.93 L1197.13 1211.93 L1197.72 1211.93 L1198.31 1211.93 L1198.89 1211.93 L1199.48 1211.93 L1200.07 1211.93 L1200.65 1211.93 L1201.24 1211.93 L1201.83 1211.93 L1202.41 1211.93 L1203 1211.93 L1203.58 1211.93 L1204.17 1211.93 L1204.76 1211.93 L1205.34 1211.93 L1205.93 1211.93 L1206.52 1211.93 L1207.1 1211.93 L1207.69 1211.93 L1208.28 1211.93 L1208.86 1211.93 L1209.45 1211.93 L1210.03 1211.93 L1210.62 1211.93 L1211.21 1211.93 L1211.79 1211.93 L1212.38 1211.93 L1212.97 1211.93 L1213.55 1211.93 L1214.14 1211.93 L1214.73 1211.93 L1215.31 1211.93 L1215.9 1211.93 L1216.49 1211.93 L1217.07 1211.93 L1217.66 1211.93 L1218.24 1211.93 L1218.83 1211.93 L1219.42 1211.93 L1220 1211.93 L1220.59 1211.93 L1221.18 1211.93 L1221.76 1211.93 L1222.35 1211.93 L1222.94 1211.93 L1223.52 1211.93 L1224.11 1211.93 L1224.7 1211.93 L1225.28 1211.93 L1225.87 1211.93 L1226.45 1211.93 L1227.04 1211.93 L1227.63 1211.93 L1228.21 1211.93 L1228.8 1211.93 L1229.39 1211.93 L1229.97 1211.93 L1230.56 1211.93 L1231.15 1211.93 L1231.73 1211.93 L1232.32 1211.93 L1232.91 1211.93 L1233.49 1211.93 L1234.08 1211.93 L1234.66 1211.93 L1235.25 1211.93 L1235.84 1211.93 L1236.42 1211.93 L1237.01 1211.93 L1237.6 1211.93 L1238.18 1211.93 L1238.77 1211.93 L1239.36 1211.93 L1239.94 1211.93 L1240.53 1211.93 L1241.11 1211.93 L1241.7 1211.93 L1242.29 1211.93 L1242.87 1211.93 L1243.46 1211.93 L1244.05 1211.93 L1244.63 1211.93 L1245.22 1211.93 L1245.81 1211.93 L1246.39 1211.93 L1246.98 1211.93 L1247.57 1211.93 L1248.15 1211.93 L1248.74 1211.93 L1249.32 1211.93 L1249.91 1211.93 L1250.5 1211.93 L1251.08 1211.93 L1251.67 1211.93 L1252.26 1211.93 L1252.84 1211.93 L1253.43 1211.93 L1254.02 1211.93 L1254.6 1211.93 L1255.19 1211.93 L1255.78 1211.93 L1256.36 1211.93 L1256.95 1211.93 L1257.53 1211.93 L1258.12 1211.93 L1258.71 1211.93 L1259.29 1211.93 L1259.88 1211.93 L1260.47 1211.93 L1261.05 1211.93 L1261.64 1211.93 L1262.23 1211.93 L1262.81 1211.93 L1263.4 1211.93 L1263.98 1211.93 L1264.57 1211.93 L1265.16 1211.93 L1265.74 1211.93 L1266.33 1211.93 L1266.92 1211.93 L1267.5 1211.93 L1268.09 1211.93 L1268.68 1211.93 L1269.26 1211.93 L1269.85 1211.93 L1270.44 1211.93 L1271.02 1211.93 L1271.61 1211.93 L1272.19 1211.93 L1272.78 1211.93 L1273.37 1211.93 L1273.95 1211.93 L1274.54 1211.93 L1275.13 1211.93 L1275.71 1211.93 L1276.3 1211.93 L1276.89 1211.93 L1277.47 1211.93 L1278.06 1211.93 L1278.65 1211.93 L1279.23 1211.93 L1279.82 1211.93 L1280.4 1211.93 L1280.99 1211.93 L1281.58 1211.93 L1282.16 1211.93 L1282.75 1211.93 L1283.34 1211.93 L1283.92 1211.93 L1284.51 1211.93 L1285.1 1211.93 L1285.68 1211.93 L1286.27 1211.93 L1286.86 1211.93 L1287.44 1211.93 L1288.03 1211.93 L1288.61 1211.93 L1289.2 1211.93 L1289.79 1211.93 L1290.37 1211.93 L1290.96 1211.93 L1291.55 1211.93 L1292.13 1211.93 L1292.72 1211.93 L1293.31 1211.93 L1293.89 1211.93 L1294.48 1211.93 L1295.06 1211.93 L1295.65 1211.93 L1296.24 1211.93 L1296.82 1211.93 L1297.41 1211.93 L1298 1211.93 L1298.58 1211.93 L1299.17 1211.93 L1299.76 1211.93 L1300.34 1211.93 L1300.93 1211.93 L1301.52 1211.93 L1302.1 1211.93 L1302.69 1211.93 L1303.27 1211.93 L1303.86 1211.93 L1304.45 1211.93 L1305.03 1211.93 L1305.62 1211.93 L1306.21 1211.93 L1306.79 1211.93 L1307.38 1211.93 L1307.97 1211.93 L1308.55 1211.93 L1309.14 1211.93 L1309.73 1211.93 L1310.31 1211.93 L1310.9 1211.93 L1311.48 1211.93 L1312.07 1211.93 L1312.66 1211.93 L1313.24 1211.93 L1313.83 1211.93 L1314.42 1211.93 L1315 1211.93 L1315.59 1211.93 L1316.18 1211.93 L1316.76 1211.93 L1317.35 1211.93 L1317.93 1211.93 L1318.52 1211.93 L1319.11 1211.93 L1319.69 1211.93 L1320.28 1211.93 L1320.87 1211.93 L1321.45 1211.93 L1322.04 1211.93 L1322.63 1211.93 L1323.21 1211.93 L1323.8 1211.93 L1324.39 1211.93 L1324.97 1211.93 L1325.56 1211.93 L1326.14 1211.93 L1326.73 1211.93 L1327.32 1211.93 L1327.9 1211.93 L1328.49 1211.93 L1329.08 1211.93 L1329.66 1211.93 L1330.25 1211.93 L1330.84 1211.93 L1331.42 1211.93 L1332.01 1211.93 L1332.6 1211.93 L1333.18 1211.93 L1333.77 1211.93 L1334.35 1211.93 L1334.94 1211.93 L1335.53 1211.93 L1336.11 1211.93 L1336.7 1211.93 L1337.29 1211.93 L1337.87 1211.93 L1338.46 1211.93 L1339.05 1211.93 L1339.63 1211.93 L1340.22 1211.93 L1340.8 1211.93 L1341.39 1211.93 L1341.98 1211.93 L1342.56 1211.93 L1343.15 1211.93 L1343.74 1211.93 L1344.32 1211.93 L1344.91 1211.93 L1345.5 1211.93 L1346.08 1211.93 L1346.67 1211.93 L1347.26 1211.93 L1347.84 1211.93 L1348.43 1211.93 L1349.01 1211.93 L1349.6 1211.93 L1350.19 1211.93 L1350.77 1211.93 L1351.36 1211.93 L1351.95 1211.93 L1352.53 1211.93 L1353.12 1211.93 L1353.71 1211.93 L1354.29 1211.93 L1354.88 1211.93 L1355.47 1211.93 L1356.05 1211.93 L1356.64 1211.93 L1357.22 1211.93 L1357.81 1211.93 L1358.4 1211.93 L1358.98 1211.93 L1359.57 1211.93 L1360.16 1211.93 L1360.74 1211.93 L1361.33 1211.93 L1361.92 1211.93 L1362.5 1211.93 L1363.09 1211.93 L1363.68 1211.93 L1364.26 1211.93 L1364.85 1211.93 L1365.43 1211.93 L1366.02 1211.93 L1366.61 1211.93 L1367.19 1211.93 L1367.78 1211.93 L1368.37 1211.93 L1368.95 1211.93 L1369.54 1211.93 L1370.13 1211.93 L1370.71 1211.93 L1371.3 1211.93 L1371.88 1211.93 L1372.47 1211.93 L1373.06 1211.93 L1373.64 1211.93 L1374.23 1211.93 L1374.82 1211.93 L1375.4 1211.93 L1375.99 1211.93 L1376.58 1211.93 L1377.16 1211.93 L1377.75 1211.93 L1378.34 1211.93 L1378.92 1211.93 L1379.51 1211.93 L1380.09 1211.93 L1380.68 1211.93 L1381.27 1211.93 L1381.85 1211.93 L1382.44 1211.93 L1383.03 1211.93 L1383.61 1211.93 L1384.2 1211.93 L1384.79 1211.93 L1385.37 1211.93 L1385.96 1211.93 L1386.55 1211.93 L1387.13 1211.93 L1387.72 1211.93 L1388.3 1211.93 L1388.89 1211.93 L1389.48 1211.93 L1390.06 1211.93 L1390.65 1211.93 L1391.24 1211.93 L1391.82 1211.93 L1392.41 1211.93 L1393 1211.93 L1393.58 1211.93 L1394.17 1211.93 L1394.75 1211.93 L1395.34 1211.93 L1395.93 1211.93 L1396.51 1211.93 L1397.1 1211.93 L1397.69 1211.93 L1398.27 1211.93 L1398.86 1211.93 L1399.45 1211.93 L1400.03 1211.93 L1400.62 1211.93 L1401.21 1211.93 L1401.79 1211.93 L1402.38 1211.93 L1402.96 1211.93 L1403.55 1211.93 L1404.14 1211.93 L1404.72 1211.93 L1405.31 1211.93 L1405.9 1211.93 L1406.48 1211.93 L1407.07 1211.93 L1407.66 1211.93 L1408.24 1211.93 L1408.83 1211.93 L1409.42 1211.93 L1410 1211.93 L1410.59 1211.93 L1411.17 1211.93 L1411.76 1211.93 L1412.35 1211.93 L1412.93 1211.93 L1413.52 1211.93 L1414.11 1211.93 L1414.69 1211.93 L1415.28 1211.93 L1415.87 1211.93 L1416.45 1211.93 L1417.04 1211.93 L1417.63 1211.93 L1418.21 1211.93 L1418.8 1211.93 L1419.38 1211.93 L1419.97 1211.93 L1420.56 1211.93 L1421.14 1211.93 L1421.73 1211.93 L1422.32 1211.93 L1422.9 1211.93 L1423.49 1211.93 L1424.08 1211.93 L1424.66 1211.93 L1425.25 1211.93 L1425.83 1211.93 L1426.42 1211.93 L1427.01 1211.93 L1427.59 1211.93 L1428.18 1211.93 L1428.77 1211.93 L1429.35 1211.93 L1429.94 1211.93 L1430.53 1211.93 L1431.11 1211.93 L1431.7 1211.93 L1432.29 1211.93 L1432.87 1211.93 L1433.46 1211.93 L1434.04 1211.93 L1434.63 1211.93 L1435.22 1211.93 L1435.8 1211.93 L1436.39 1211.93 L1436.98 1211.93 L1437.56 1211.93 L1438.15 1211.93 L1438.74 1211.93 L1439.32 1211.93 L1439.91 1211.93 L1440.5 1211.93 L1441.08 1211.93 L1441.67 1211.93 L1442.25 1211.93 L1442.84 1211.93 L1443.43 1211.93 L1444.01 1211.93 L1444.6 1211.93 L1445.19 1211.93 L1445.77 1211.93 L1446.36 1211.93 L1446.95 1211.93 L1447.53 1211.93 L1448.12 1211.93 L1448.7 1211.93 L1449.29 1211.93 L1449.88 1211.93 L1450.46 1211.93 L1451.05 1211.93 L1451.64 1211.93 L1452.22 1211.93 L1452.81 1211.93 L1453.4 1211.93 L1453.98 1211.93 L1454.57 1211.93 L1455.16 1211.93 L1455.74 1211.93 L1456.33 1211.93 L1456.91 1211.93 L1457.5 1211.93 L1458.09 1211.93 L1458.67 1211.93 L1459.26 1211.93 L1459.85 1211.93 L1460.43 1211.93 L1461.02 1211.93 L1461.61 1211.93 L1462.19 1211.93 L1462.78 1211.93 L1463.37 1211.93 L1463.95 1211.93 L1464.54 1211.93 L1465.12 1211.93 L1465.71 1211.93 L1466.3 1211.93 L1466.88 1211.93 L1467.47 1211.93 L1468.06 1211.93 L1468.64 1211.93 L1469.23 1211.93 L1469.82 1211.93 L1470.4 1211.93 L1470.99 1211.93 L1471.57 1211.93 L1472.16 1211.93 L1472.75 1211.93 L1473.33 1211.93 L1473.92 1211.93 L1474.51 1211.93 L1475.09 1211.93 L1475.68 1211.93 L1476.27 1211.93 L1476.85 1211.93 L1477.44 1211.93 L1478.03 1211.93 L1478.61 1211.93 L1479.2 1211.93 L1479.78 1211.93 L1480.37 1211.93 L1480.96 1211.93 L1481.54 1211.93 L1482.13 1211.93 L1482.72 1211.93 L1483.3 1211.93 L1483.89 1211.93 L1484.48 1211.93 L1485.06 1211.93 L1485.65 1211.93 L1486.24 1211.93 L1486.82 1211.93 L1487.41 1211.93 L1487.99 1211.93 L1488.58 1211.93 L1489.17 1211.93 L1489.75 1211.93 L1490.34 1211.93 L1490.93 1211.93 L1491.51 1211.93 L1492.1 1211.93 L1492.69 1211.93 L1493.27 1211.93 L1493.86 1211.93 L1494.45 1211.93 L1495.03 1211.93 L1495.62 1211.93 L1496.2 1211.93 L1496.79 1211.93 L1497.38 1211.93 L1497.96 1211.93 L1498.55 1211.93 L1499.14 1211.93 L1499.72 1211.93 L1500.31 1211.93 L1500.9 1211.93 L1501.48 1211.93 L1502.07 1211.93 L1502.65 1211.93 L1503.24 1211.93 L1503.83 1211.93 L1504.41 1211.93 L1505 1211.93 L1505.59 1211.93 L1506.17 1211.93 L1506.76 1211.93 L1507.35 1211.93 L1507.93 1211.93 L1508.52 1211.93 L1509.11 1211.93 L1509.69 1211.93 L1510.28 1211.93 L1510.86 1211.93 L1511.45 1211.93 L1512.04 1211.93 L1512.62 1211.93 L1513.21 1211.93 L1513.8 1211.93 L1514.38 1211.93 L1514.97 1211.93 L1515.56 1211.93 L1516.14 1211.93 L1516.73 1211.93 L1517.32 1211.93 L1517.9 1211.93 L1518.49 1211.93 L1519.07 1211.93 L1519.66 1211.93 L1520.25 1211.93 L1520.83 1211.93 L1521.42 1211.93 L1522.01 1211.93 L1522.59 1211.93 L1523.18 1211.93 L1523.77 1211.93 L1524.35 1211.93 L1524.94 1211.93 L1525.52 1211.93 L1526.11 1211.93 L1526.7 1211.93 L1527.28 1211.93 L1527.87 1211.93 L1528.46 1211.93 L1529.04 1211.93 L1529.63 1211.93 L1530.22 1211.93 L1530.8 1211.93 L1531.39 1211.93 L1531.98 1211.93 L1532.56 1211.93 L1533.15 1211.93 L1533.73 1211.93 L1534.32 1211.93 L1534.91 1211.93 L1535.49 1211.93 L1536.08 1211.93 L1536.67 1211.93 L1537.25 1211.93 L1537.84 1211.93 L1538.43 1211.93 L1539.01 1211.93 L1539.6 1211.93 L1540.19 1211.93 L1540.77 1211.93 L1541.36 1211.93 L1541.94 1211.93 L1542.53 1211.93 L1543.12 1211.93 L1543.7 1211.93 L1544.29 1211.93 L1544.88 1211.93 L1545.46 1211.93 L1546.05 1211.93 L1546.64 1211.93 L1547.22 1211.93 L1547.81 1211.93 L1548.4 1211.93 L1548.98 1211.93 L1549.57 1211.93 L1550.15 1211.93 L1550.74 1211.93 L1551.33 1211.93 L1551.91 1211.93 L1552.5 1211.93 L1553.09 1211.93 L1553.67 1211.93 L1554.26 1211.93 L1554.85 1211.93 L1555.43 1211.93 L1556.02 1211.93 L1556.6 1211.93 L1557.19 1211.93 L1557.78 1211.93 L1558.36 1211.93 L1558.95 1211.93 L1559.54 1211.93 L1560.12 1211.93 L1560.71 1211.93 L1561.3 1211.93 L1561.88 1211.93 L1562.47 1211.93 L1563.06 1211.93 L1563.64 1211.93 L1564.23 1211.93 L1564.81 1211.93 L1565.4 1211.93 L1565.99 1211.93 L1566.57 1211.93 L1567.16 1211.93 L1567.75 1211.93 L1568.33 1211.93 L1568.92 1211.93 L1569.51 1211.93 L1570.09 1211.93 L1570.68 1211.93 L1571.27 1211.93 L1571.85 1211.93 L1572.44 1211.93 L1573.02 1211.93 L1573.61 1211.93 L1574.2 1211.93 L1574.78 1211.93 L1575.37 1211.93 L1575.96 1211.93 L1576.54 1211.93 L1577.13 1211.93 L1577.72 1211.93 L1578.3 1211.93 L1578.89 1211.93 L1579.47 1211.93 L1580.06 1211.93 L1580.65 1211.93 L1581.23 1211.93 L1581.82 1211.93 L1582.41 1211.93 L1582.99 1211.93 L1583.58 1211.93 L1584.17 1211.93 L1584.75 1211.93 L1585.34 1211.93 L1585.93 1211.93 L1586.51 1211.93 L1587.1 1211.93 L1587.68 1211.93 L1588.27 1211.93 L1588.86 1211.93 L1589.44 1211.93 L1590.03 1211.93 L1590.62 1211.93 L1591.2 1211.93 L1591.79 1211.93 L1592.38 1211.93 L1592.96 1211.93 L1593.55 1211.93 L1594.14 1211.93 L1594.72 1211.93 L1595.31 1211.93 L1595.89 1211.93 L1596.48 1211.93 L1597.07 1211.93 L1597.65 1211.93 L1598.24 1211.93 L1598.83 1211.93 L1599.41 1211.93 L1600 1211.93 L1600.59 1211.93 L1601.17 1211.93 L1601.76 1211.93 L1602.34 1211.93 L1602.93 1211.93 L1603.52 1211.93 L1604.1 1211.93 L1604.69 1211.93 L1605.28 1211.93 L1605.86 1211.93 L1606.45 1211.93 L1607.04 1211.93 L1607.62 1211.93 L1608.21 1211.93 L1608.8 1211.93 L1609.38 1211.93 L1609.97 1211.93 L1610.55 1211.93 L1611.14 1211.93 L1611.73 1211.93 L1612.31 1211.93 L1612.9 1211.93 L1613.49 1211.93 L1614.07 1211.93 L1614.66 1211.93 L1615.25 1211.93 L1615.83 1211.93 L1616.42 1211.93 L1617.01 1211.93 L1617.59 1211.93 L1618.18 1211.93 L1618.76 1211.93 L1619.35 1211.93 L1619.94 1211.93 L1620.52 1211.93 L1621.11 1211.93 L1621.7 1211.93 L1622.28 1211.93 L1622.87 1211.93 L1623.46 1211.93 L1624.04 1211.93 L1624.63 1211.93 L1625.22 1211.93 L1625.8 1211.93 L1626.39 1211.93 L1626.97 1211.93 L1627.56 1211.93 L1628.15 1211.93 L1628.73 1211.93 L1629.32 1211.93 L1629.91 1211.93 L1630.49 1211.93 L1631.08 1211.93 L1631.67 1211.93 L1632.25 1211.93 L1632.84 1211.93 L1633.42 1211.93 L1634.01 1211.93 L1634.6 1211.93 L1635.18 1211.93 L1635.77 1211.93 L1636.36 1211.93 L1636.94 1211.93 L1637.53 1211.93 L1638.12 1211.93 L1638.7 1211.93 L1639.29 1211.93 L1639.88 1211.93 L1640.46 1211.93 L1641.05 1211.93 L1641.63 1211.93 L1642.22 1211.93 L1642.81 1211.93 L1643.39 1211.93 L1643.98 1211.93 L1644.57 1211.93 L1645.15 1211.93 L1645.74 1211.93 L1646.33 1211.93 L1646.91 1211.93 L1647.5 1211.93 L1648.09 1211.93 L1648.67 1211.93 L1649.26 1211.93 L1649.84 1211.93 L1650.43 1211.93 L1651.02 1211.93 L1651.6 1211.93 L1652.19 1211.93 L1652.78 1211.93 L1653.36 1211.93 L1653.95 1211.93 L1654.54 1211.93 L1655.12 1211.93 L1655.71 1211.93 L1656.29 1211.93 L1656.88 1211.93 L1657.47 1211.93 L1658.05 1211.93 L1658.64 1211.93 L1659.23 1211.93 L1659.81 1211.93 L1660.4 1211.93 L1660.99 1211.93 L1661.57 1211.93 L1662.16 1211.93 L1662.75 1211.93 L1663.33 1211.93 L1663.92 1211.93 L1664.5 1211.93 L1665.09 1211.93 L1665.68 1211.93 L1666.26 1211.93 L1666.85 1211.93 L1667.44 1211.93 L1668.02 1211.93 L1668.61 1211.93 L1669.2 1211.93 L1669.78 1211.93 L1670.37 1211.93 L1670.96 1211.93 L1671.54 1211.93 L1672.13 1211.93 L1672.71 1211.93 L1673.3 1211.93 L1673.89 1211.93 L1674.47 1211.93 L1675.06 1211.93 L1675.65 1211.93 L1676.23 1211.93 L1676.82 1211.93 L1677.41 1211.93 L1677.99 1211.93 L1678.58 1211.93 L1679.17 1211.93 L1679.75 1211.93 L1680.34 1211.93 L1680.92 1211.93 L1681.51 1211.93 L1682.1 1211.93 L1682.68 1211.93 L1683.27 1211.93 L1683.86 1211.93 L1684.44 1211.93 L1685.03 1211.93 L1685.62 1211.93 L1686.2 1211.93 L1686.79 1211.93 L1687.37 1211.93 L1687.96 1211.93 L1688.55 1211.93 L1689.13 1211.93 L1689.72 1211.93 L1690.31 1211.93 L1690.89 1211.93 L1691.48 1211.93 L1692.07 1211.93 L1692.65 1211.93 L1693.24 1211.93 L1693.83 1211.93 L1694.41 1211.93 L1695 1211.93 L1695.58 1211.93 L1696.17 1211.93 L1696.76 1211.93 L1697.34 1211.93 L1697.93 1211.93 L1698.52 1211.93 L1699.1 1211.93 L1699.69 1211.93 L1700.28 1211.93 L1700.86 1211.93 L1701.45 1211.93 L1702.04 1211.93 L1702.62 1211.93 L1703.21 1211.93 L1703.79 1211.93 L1704.38 1211.93 L1704.97 1211.93 L1705.55 1211.93 L1706.14 1211.93 L1706.73 1211.93 L1707.31 1211.93 L1707.9 1211.93 L1708.49 1211.93 L1709.07 1211.93 L1709.66 1211.93 L1710.24 1211.93 L1710.83 1211.93 L1711.42 1211.93 L1712 1211.93 L1712.59 1211.93 L1713.18 1211.93 L1713.76 1211.93 L1714.35 1211.93 L1714.94 1211.93 L1715.52 1211.93 L1716.11 1211.93 L1716.7 1211.93 L1717.28 1211.93 L1717.87 1211.93 L1718.45 1211.93 L1719.04 1211.93 L1719.63 1211.93 L1720.21 1211.93 L1720.8 1211.93 L1721.39 1211.93 L1721.97 1211.93 L1722.56 1211.93 L1723.15 1211.93 L1723.73 1211.93 L1724.32 1211.93 L1724.91 1211.93 L1725.49 1211.93 L1726.08 1211.93 L1726.66 1211.93 L1727.25 1211.93 L1727.84 1211.93 L1728.42 1211.93 L1729.01 1211.93 L1729.6 1211.93 L1730.18 1211.93 L1730.77 1211.93 L1731.36 1211.93 L1731.94 1211.93 L1732.53 1211.93 L1733.11 1211.93 L1733.7 1211.93 L1734.29 1211.93 L1734.87 1211.93 L1735.46 1211.93 L1736.05 1211.93 L1736.63 1211.93 L1737.22 1211.93 L1737.81 1211.93 L1738.39 1211.93 L1738.98 1211.93 L1739.57 1211.93 L1740.15 1211.93 L1740.74 1211.93 L1741.32 1211.93 L1741.91 1211.93 L1742.5 1211.93 L1743.08 1211.93 L1743.67 1211.93 L1744.26 1211.93 L1744.84 1211.93 L1745.43 1211.93 L1746.02 1211.93 L1746.6 1211.93 L1747.19 1211.93 L1747.78 1211.93 L1748.36 1211.93 L1748.95 1211.93 L1749.53 1211.93 L1750.12 1211.93 L1750.71 1211.93 L1751.29 1211.93 L1751.88 1211.93 L1752.47 1211.93 L1753.05 1211.93 L1753.64 1211.93 L1754.23 1211.93 L1754.81 1211.93 L1755.4 1211.93 L1755.99 1211.93 L1756.57 1211.93 L1757.16 1211.93 L1757.74 1211.93 L1758.33 1211.93 L1758.92 1211.93 L1759.5 1211.93 L1760.09 1211.93 L1760.68 1211.93 L1761.26 1211.93 L1761.85 1211.93 L1762.44 1211.93 L1763.02 1211.93 L1763.61 1211.93 L1764.19 1211.93 L1764.78 1211.93 L1765.37 1211.93 L1765.95 1211.93 L1766.54 1211.93 L1767.13 1211.93 L1767.71 1211.93 L1768.3 1211.93 L1768.89 1211.93 L1769.47 1211.93 L1770.06 1211.93 L1770.65 1211.93 L1771.23 1211.93 L1771.82 1211.93 L1772.4 1211.93 L1772.99 1211.93 L1773.58 1211.93 L1774.16 1211.93 L1774.75 1211.93 L1775.34 1211.93 L1775.92 1211.93 L1776.51 1211.93 L1777.1 1211.93 L1777.68 1211.93 L1778.27 1211.93 L1778.86 1211.93 L1779.44 1211.93 L1780.03 1211.93 L1780.61 1211.93 L1781.2 1211.93 L1781.79 1211.93 L1782.37 1211.93 L1782.96 1211.93 L1783.55 1211.93 L1784.13 1211.93 L1784.72 1211.93 L1785.31 1211.93 L1785.89 1211.93 L1786.48 1211.93 L1787.06 1211.93 L1787.65 1211.93 L1788.24 1211.93 L1788.82 1211.93 L1789.41 1211.93 L1790 1211.93 L1790.58 1211.93 L1791.17 1211.93 L1791.76 1211.93 L1792.34 1211.93 L1792.93 1211.93 L1793.52 1211.93 L1794.1 1211.93 L1794.69 1211.93 L1795.27 1211.93 L1795.86 1211.93 L1796.45 1211.93 L1797.03 1211.93 L1797.62 1211.93 L1798.21 1211.93 L1798.79 1211.93 L1799.38 1211.93 L1799.97 1211.93 L1800.55 1211.93 L1801.14 1211.93 L1801.73 1211.93 L1802.31 1211.93 L1802.9 1211.93 L1803.48 1211.93 L1804.07 1211.93 L1804.66 1211.93 L1805.24 1211.93 L1805.83 1211.93 L1806.42 1211.93 L1807 1211.93 L1807.59 1211.93 L1808.18 1211.93 L1808.76 1211.93 L1809.35 1211.93 L1809.94 1211.93 L1810.52 1211.93 L1811.11 1211.93 L1811.69 1211.93 L1812.28 1211.93 L1812.87 1211.93 L1813.45 1211.93 L1814.04 1211.93 L1814.63 1211.93 L1815.21 1211.93 L1815.8 1211.93 L1816.39 1211.93 L1816.97 1211.93 L1817.56 1211.93 L1818.14 1211.93 L1818.73 1211.93 L1819.32 1211.93 L1819.9 1211.93 L1820.49 1211.93 L1821.08 1211.93 L1821.66 1211.93 L1822.25 1211.93 L1822.84 1211.93 L1823.42 1211.93 L1824.01 1211.93 L1824.6 1211.93 L1825.18 1211.93 L1825.77 1211.93 L1826.35 1211.93 L1826.94 1211.93 L1827.53 1211.93 L1828.11 1211.93 L1828.7 1211.93 L1829.29 1211.93 L1829.87 1211.93 L1830.46 1211.93 L1831.05 1211.93 L1831.63 1211.93 L1832.22 1211.93 L1832.81 1211.93 L1833.39 1211.93 L1833.98 1211.93 L1834.56 1211.93 L1835.15 1211.93 L1835.74 1211.93 L1836.32 1211.93 L1836.91 1211.93 L1837.5 1211.93 L1838.08 1211.93 L1838.67 1211.93 L1839.26 1211.93 L1839.84 1211.93 L1840.43 1211.93 L1841.01 1211.93 L1841.6 1211.93 L1842.19 1211.93 L1842.77 1211.93 L1843.36 1211.93 L1843.95 1211.93 L1844.53 1211.93 L1845.12 1211.93 L1845.71 1211.93 L1846.29 1211.93 L1846.88 1211.93 L1847.47 1211.93 L1848.05 1211.93 L1848.64 1211.93 L1849.22 1211.93 L1849.81 1211.93 L1850.4 1211.93 L1850.98 1211.93 L1851.57 1211.93 L1852.16 1211.93 L1852.74 1211.93 L1853.33 1211.93 L1853.92 1211.93 L1854.5 1211.93 L1855.09 1211.93 L1855.68 1211.93 L1856.26 1211.93 L1856.85 1211.93 L1857.43 1211.93 L1858.02 1211.93 L1858.61 1211.93 L1859.19 1211.93 L1859.78 1211.93 L1860.37 1211.93 L1860.95 1211.93 L1861.54 1211.93 L1862.13 1211.93 L1862.71 1211.93 L1863.3 1211.93 L1863.88 1211.93 L1864.47 1211.93 L1865.06 1211.93 L1865.64 1211.93 L1866.23 1211.93 L1866.82 1211.93 L1867.4 1211.93 L1867.99 1211.93 L1868.58 1211.93 L1869.16 1211.93 L1869.75 1211.93 L1870.34 1211.93 L1870.92 1211.93 L1871.51 1211.93 L1872.09 1211.93 L1872.68 1211.93 L1873.27 1211.93 L1873.85 1211.93 L1874.44 1211.93 L1875.03 1211.93 L1875.61 1211.93 L1876.2 1211.93 L1876.79 1211.93 L1877.37 1211.93 L1877.96 1211.93 L1878.55 1211.93 L1879.13 1211.93 L1879.72 1211.93 L1880.3 1211.93 L1880.89 1211.93 L1881.48 1211.93 L1882.06 1211.93 L1882.65 1211.93 L1883.24 1211.93 L1883.82 1211.93 L1884.41 1211.93 L1885 1211.93 L1885.58 1211.93 L1886.17 1211.93 L1886.76 1211.93 L1887.34 1211.93 L1887.93 1211.93 L1888.51 1211.93 L1889.1 1211.93 L1889.69 1211.93 L1890.27 1211.93 L1890.86 1211.93 L1891.45 1211.93 L1892.03 1211.93 L1892.62 1211.93 L1893.21 1211.93 L1893.79 1211.93 L1894.38 1211.93 L1894.96 1211.93 L1895.55 1211.93 L1896.14 1211.93 L1896.72 1211.93 L1897.31 1211.93 L1897.9 1211.93 L1898.48 1211.93 L1899.07 1211.93 L1899.66 1211.93 L1900.24 1211.93 L1900.83 1211.93 L1901.42 1211.93 L1902 1211.93 L1902.59 1211.93 L1903.17 1211.93 L1903.76 1211.93 L1904.35 1211.93 L1904.93 1211.93 L1905.52 1211.93 L1906.11 1211.93 L1906.69 1211.93 L1907.28 1211.93 L1907.87 1211.93 L1908.45 1211.93 L1909.04 1211.93 L1909.63 1211.93 L1910.21 1211.93 L1910.8 1211.93 L1911.38 1211.93 L1911.97 1211.93 L1912.56 1211.93 L1913.14 1211.93 L1913.73 1211.93 L1914.32 1211.93 L1914.9 1211.93 L1915.49 1211.93 L1916.08 1211.93 L1916.66 1211.93 L1917.25 1211.93 L1917.83 1211.93 L1918.42 1211.93 L1919.01 1211.93 L1919.59 1211.93 L1920.18 1211.93 L1920.77 1211.93 L1921.35 1211.93 L1921.94 1211.93 L1922.53 1211.93 L1923.11 1211.93 L1923.7 1211.93 L1924.29 1211.93 L1924.87 1211.93 L1925.46 1211.93 L1926.04 1211.93 L1926.63 1211.93 L1927.22 1211.93 L1927.8 1211.93 L1928.39 1211.93 L1928.98 1211.93 L1929.56 1211.93 L1930.15 1211.93 L1930.74 1211.93 L1931.32 1211.93 L1931.91 1211.93 L1932.5 1211.93 L1933.08 1211.93 L1933.67 1211.93 L1934.25 1211.93 L1934.84 1211.93 L1935.43 1211.93 L1936.01 1211.93 L1936.6 1211.93 L1937.19 1211.93 L1937.77 1211.93 L1938.36 1211.93 L1938.95 1211.93 L1939.53 1211.93 L1940.12 1211.93 L1940.71 1211.93 L1941.29 1211.93 L1941.88 1211.93 L1942.46 1211.93 L1943.05 1211.93 L1943.64 1211.93 L1944.22 1211.93 L1944.81 1211.93 L1945.4 1211.93 L1945.98 1211.93 L1946.57 1211.93 L1947.16 1211.93 L1947.74 1211.93 L1948.33 1211.93 L1948.91 1211.93 L1949.5 1211.93 L1950.09 1211.93 L1950.67 1211.93 L1951.26 1211.93 L1951.85 1211.93 L1952.43 1211.93 L1953.02 1211.93 L1953.61 1211.93 L1954.19 1211.93 L1954.78 1211.93 L1955.37 1211.93 L1955.95 1211.93 L1956.54 1211.93 L1957.12 1211.93 L1957.71 1211.93 L1958.3 1211.93 L1958.88 1211.93 L1959.47 1211.93 L1960.06 1211.93 L1960.64 1211.93 L1961.23 1211.93 L1961.82 1211.93 L1962.4 1211.93 L1962.99 1211.93 L1963.58 1211.93 L1964.16 1211.93 L1964.75 1211.93 L1965.33 1211.93 L1965.92 1211.93 L1966.51 1211.93 L1967.09 1211.93 L1967.68 1211.93 L1968.27 1211.93 L1968.85 1211.93 L1969.44 1211.93 L1970.03 1211.93 L1970.61 1211.93 L1971.2 1211.93 L1971.78 1211.93 L1972.37 1211.93 L1972.96 1211.93 L1973.54 1211.93 L1974.13 1211.93 L1974.72 1211.93 L1975.3 1211.93 L1975.89 1211.93 L1976.48 1211.93 L1977.06 1211.93 L1977.65 1211.93 L1978.24 1211.93 L1978.82 1211.93 L1979.41 1211.93 L1979.99 1211.93 L1980.58 1211.93 L1981.17 1211.93 L1981.75 1211.93 L1982.34 1211.93 L1982.93 1211.93 L1983.51 1211.93 L1984.1 1211.93 L1984.69 1211.93 L1985.27 1211.93 L1985.86 1211.93 L1986.45 1211.93 L1987.03 1211.93 L1987.62 1211.93 L1988.2 1211.93 L1988.79 1211.93 L1989.38 1211.93 L1989.96 1211.93 L1990.55 1211.93 L1991.14 1211.93 L1991.72 1211.93 L1992.31 1211.93 L1992.9 1211.93 L1993.48 1211.93 L1994.07 1211.93 L1994.65 1211.93 L1995.24 1211.93 L1995.83 1211.93 L1996.41 1211.93 L1997 1211.93 L1997.59 1211.93 L1998.17 1211.93 L1998.76 1211.93 L1999.35 1211.93 L1999.93 1211.93 L2000.52 1211.93 L2001.11 1211.93 L2001.69 1211.93 L2002.28 1211.93 L2002.86 1211.93 L2003.45 1211.93 L2004.04 1211.93 L2004.62 1211.93 L2005.21 1211.93 L2005.8 1211.93 L2006.38 1211.93 L2006.97 1211.93 L2007.56 1211.93 L2008.14 1211.93 L2008.73 1211.93 L2009.32 1211.93 L2009.9 1211.93 L2010.49 1211.93 L2011.07 1211.93 L2011.66 1211.93 L2012.25 1211.93 L2012.83 1211.93 L2013.42 1211.93 L2014.01 1211.93 L2014.59 1211.93 L2015.18 1211.93 L2015.77 1211.93 L2016.35 1211.93 L2016.94 1211.93 L2017.53 1211.93 L2018.11 1211.93 L2018.7 1211.93 L2019.28 1211.93 L2019.87 1211.93 L2020.46 1211.93 L2021.04 1211.93 L2021.63 1211.93 L2022.22 1211.93 L2022.8 1211.93 L2023.39 1211.93 L2023.98 1211.93 L2024.56 1211.93 L2025.15 1211.93 L2025.73 1211.93 L2026.32 1211.93 L2026.91 1211.93 L2027.49 1211.93 L2028.08 1211.93 L2028.67 1211.93 L2029.25 1211.93 L2029.84 1211.93 L2030.43 1211.93 L2031.01 1211.93 L2031.6 1211.93 L2032.19 1211.93 L2032.77 1211.93 L2033.36 1211.93 L2033.94 1211.93 L2034.53 1211.93 L2035.12 1211.93 L2035.7 1211.93 L2036.29 1211.93 L2036.88 1211.93 L2037.46 1211.93 L2038.05 1211.93 L2038.64 1211.93 L2039.22 1211.93 L2039.81 1211.93 L2040.4 1211.93 L2040.98 1211.93 L2041.57 1211.93 L2042.15 1211.93 L2042.74 1211.93 L2043.33 1211.93 L2043.91 1211.93 L2044.5 1211.93 L2045.09 1211.93 L2045.67 1211.93 L2046.26 1211.93 L2046.85 1211.93 L2047.43 1211.93 L2048.02 1211.93 L2048.6 1211.93 L2049.19 1211.93 L2049.78 1211.93 L2050.36 1211.93 L2050.95 1211.93 L2051.54 1211.93 L2052.12 1211.93 L2052.71 1211.93 L2053.3 1211.93 L2053.88 1211.93 L2054.47 1211.93 L2055.06 1211.93 L2055.64 1211.93 L2056.23 1211.93 L2056.81 1211.93 L2057.4 1211.93 L2057.99 1211.93 L2058.57 1211.93 L2059.16 1211.93 L2059.75 1211.93 L2060.33 1211.93 L2060.92 1211.93 L2061.51 1211.93 L2062.09 1211.93 L2062.68 1211.93 L2063.27 1211.93 L2063.85 1211.93 L2064.44 1211.93 L2065.02 1211.93 L2065.61 1211.93 L2066.2 1211.93 L2066.78 1211.93 L2067.37 1211.93 L2067.96 1211.93 L2068.54 1211.93 L2069.13 1211.93 L2069.72 1211.93 L2070.3 1211.93 L2070.89 1211.93 L2071.48 1211.93 L2072.06 1211.93 L2072.65 1211.93 L2073.23 1211.93 L2073.82 1211.93 L2074.41 1211.93 L2074.99 1211.93 L2075.58 1211.93 L2076.17 1211.93 L2076.75 1211.93 L2077.34 1211.93 L2077.93 1211.93 L2078.51 1211.93 L2079.1 1211.93 L2079.68 1211.93 L2080.27 1211.93 L2080.86 1211.93 L2081.44 1211.93 L2082.03 1211.93 L2082.62 1211.93 L2083.2 1211.93 L2083.79 1211.93 L2084.38 1211.93 L2084.96 1211.93 L2085.55 1211.93 L2086.14 1211.93 L2086.72 1211.93 L2087.31 1211.93 L2087.89 1211.93 L2088.48 1211.93 L2089.07 1211.93 L2089.65 1211.93 L2090.24 1211.93 L2090.83 1211.93 L2091.41 1211.93 L2092 1211.93 L2092.59 1211.93 L2093.17 1211.93 L2093.76 1211.93 L2094.35 1211.93 L2094.93 1211.93 L2095.52 1211.93 L2096.1 1211.93 L2096.69 1211.93 L2097.28 1211.93 L2097.86 1211.93 L2098.45 1211.93 L2099.04 1211.93 L2099.62 1211.93 L2100.21 1211.93 L2100.8 1211.93 L2101.38 1211.93 L2101.97 1211.93 L2102.55 1211.93 L2103.14 1211.93 L2103.73 1211.93 L2104.31 1211.93 L2104.9 1211.93 L2105.49 1211.93 L2106.07 1211.93 L2106.66 1211.93 L2107.25 1211.93 L2107.83 1211.93 L2108.42 1211.93 L2109.01 1211.93 L2109.59 1211.93 L2110.18 1211.93 L2110.76 1211.93 L2111.35 1211.93 L2111.94 1211.93 L2112.52 1211.93 L2113.11 1211.93 L2113.7 1211.93 L2114.28 1211.93 L2114.87 1211.93 L2115.46 1211.93 L2116.04 1211.93 L2116.63 1211.93 L2117.22 1211.93 L2117.8 1211.93 L2118.39 1211.93 L2118.97 1211.93 L2119.56 1211.93 L2120.15 1211.93 L2120.73 1211.93 L2121.32 1211.93 L2121.91 1211.93 L2122.49 1211.93 L2123.08 1211.93 L2123.67 1211.93 L2124.25 1211.93 L2124.84 1211.93 L2125.42 1211.93 L2126.01 1211.93 L2126.6 1211.93 L2127.18 1211.93 L2127.77 1211.93 L2128.36 1211.93 L2128.94 1211.93 L2129.53 1211.93 L2130.12 1211.93 L2130.7 1211.93 L2131.29 1211.93 L2131.88 1211.93 L2132.46 1211.93 L2133.05 1211.93 L2133.63 1211.93 L2134.22 1211.93 L2134.81 1211.93 L2135.39 1211.93 L2135.98 1211.93 L2136.57 1211.93 L2137.15 1211.93 L2137.74 1211.93 L2138.33 1211.93 L2138.91 1211.93 L2139.5 1211.93 L2140.09 1211.93 L2140.67 1211.93 L2141.26 1211.93 L2141.84 1211.93 L2142.43 1211.93 L2143.02 1211.93 L2143.6 1211.93 L2144.19 1211.93 L2144.78 1211.93 L2145.36 1211.93 L2145.95 1211.93 L2146.54 1211.93 L2147.12 1211.93 L2147.71 1211.93 L2148.3 1211.93 L2148.88 1211.93 L2149.47 1211.93 L2150.05 1211.93 L2150.64 1211.93 L2151.23 1211.93 L2151.81 1211.93 L2152.4 1211.93 L2152.99 1211.93 L2153.57 1211.93 L2154.16 1211.93 L2154.75 1211.93 L2155.33 1211.93 L2155.92 1211.93 L2156.5 1211.93 L2157.09 1211.93 L2157.68 1211.93 L2158.26 1211.93 L2158.26 1211.77 L2157.68 1211.77 L2157.09 1211.77 L2156.5 1211.77 L2155.92 1211.77 L2155.33 1211.77 L2154.75 1211.77 L2154.16 1211.77 L2153.57 1211.77 L2152.99 1211.77 L2152.4 1211.77 L2151.81 1211.77 L2151.23 1211.77 L2150.64 1211.77 L2150.05 1211.77 L2149.47 1211.77 L2148.88 1211.77 L2148.3 1211.77 L2147.71 1211.77 L2147.12 1211.77 L2146.54 1211.77 L2145.95 1211.77 L2145.36 1211.77 L2144.78 1211.77 L2144.19 1211.77 L2143.6 1211.77 L2143.02 1211.77 L2142.43 1211.77 L2141.84 1211.77 L2141.26 1211.77 L2140.67 1211.77 L2140.09 1211.77 L2139.5 1211.77 L2138.91 1211.77 L2138.33 1211.77 L2137.74 1211.77 L2137.15 1211.77 L2136.57 1211.77 L2135.98 1211.77 L2135.39 1211.77 L2134.81 1211.77 L2134.22 1211.77 L2133.63 1211.77 L2133.05 1211.77 L2132.46 1211.77 L2131.88 1211.77 L2131.29 1211.77 L2130.7 1211.77 L2130.12 1211.77 L2129.53 1211.77 L2128.94 1211.77 L2128.36 1211.77 L2127.77 1211.77 L2127.18 1211.77 L2126.6 1211.77 L2126.01 1211.77 L2125.42 1211.77 L2124.84 1211.77 L2124.25 1211.77 L2123.67 1211.77 L2123.08 1211.77 L2122.49 1211.77 L2121.91 1211.77 L2121.32 1211.77 L2120.73 1211.77 L2120.15 1211.77 L2119.56 1211.77 L2118.97 1211.77 L2118.39 1211.77 L2117.8 1211.77 L2117.22 1211.77 L2116.63 1211.77 L2116.04 1211.77 L2115.46 1211.77 L2114.87 1211.77 L2114.28 1211.77 L2113.7 1211.77 L2113.11 1211.77 L2112.52 1211.77 L2111.94 1211.77 L2111.35 1211.77 L2110.76 1211.77 L2110.18 1211.77 L2109.59 1211.77 L2109.01 1211.77 L2108.42 1211.77 L2107.83 1211.77 L2107.25 1211.77 L2106.66 1211.77 L2106.07 1211.77 L2105.49 1211.77 L2104.9 1211.77 L2104.31 1211.77 L2103.73 1211.77 L2103.14 1211.77 L2102.55 1211.77 L2101.97 1211.77 L2101.38 1211.77 L2100.8 1211.77 L2100.21 1211.77 L2099.62 1211.77 L2099.04 1211.77 L2098.45 1211.77 L2097.86 1211.77 L2097.28 1211.77 L2096.69 1211.77 L2096.1 1211.77 L2095.52 1211.77 L2094.93 1211.77 L2094.35 1211.77 L2093.76 1211.77 L2093.17 1211.77 L2092.59 1211.77 L2092 1211.77 L2091.41 1211.77 L2090.83 1211.77 L2090.24 1211.77 L2089.65 1211.77 L2089.07 1211.77 L2088.48 1211.77 L2087.89 1211.77 L2087.31 1211.77 L2086.72 1211.77 L2086.14 1211.77 L2085.55 1211.77 L2084.96 1211.77 L2084.38 1211.77 L2083.79 1211.77 L2083.2 1211.77 L2082.62 1211.77 L2082.03 1211.77 L2081.44 1211.77 L2080.86 1211.77 L2080.27 1211.77 L2079.68 1211.77 L2079.1 1211.77 L2078.51 1211.77 L2077.93 1211.77 L2077.34 1211.77 L2076.75 1211.77 L2076.17 1211.77 L2075.58 1211.77 L2074.99 1211.77 L2074.41 1211.77 L2073.82 1211.77 L2073.23 1211.77 L2072.65 1211.77 L2072.06 1211.77 L2071.48 1211.77 L2070.89 1211.77 L2070.3 1211.77 L2069.72 1211.77 L2069.13 1211.77 L2068.54 1211.77 L2067.96 1211.77 L2067.37 1211.77 L2066.78 1211.77 L2066.2 1211.77 L2065.61 1211.77 L2065.02 1211.77 L2064.44 1211.77 L2063.85 1211.77 L2063.27 1211.77 L2062.68 1211.77 L2062.09 1211.77 L2061.51 1211.77 L2060.92 1211.77 L2060.33 1211.77 L2059.75 1211.77 L2059.16 1211.77 L2058.57 1211.77 L2057.99 1211.77 L2057.4 1211.77 L2056.81 1211.77 L2056.23 1211.77 L2055.64 1211.77 L2055.06 1211.77 L2054.47 1211.77 L2053.88 1211.77 L2053.3 1211.77 L2052.71 1211.77 L2052.12 1211.77 L2051.54 1211.77 L2050.95 1211.77 L2050.36 1211.77 L2049.78 1211.77 L2049.19 1211.77 L2048.6 1211.77 L2048.02 1211.77 L2047.43 1211.77 L2046.85 1211.77 L2046.26 1211.77 L2045.67 1211.77 L2045.09 1211.77 L2044.5 1211.77 L2043.91 1211.77 L2043.33 1211.77 L2042.74 1211.77 L2042.15 1211.77 L2041.57 1211.77 L2040.98 1211.77 L2040.4 1211.77 L2039.81 1211.77 L2039.22 1211.77 L2038.64 1211.77 L2038.05 1211.77 L2037.46 1211.77 L2036.88 1211.77 L2036.29 1211.77 L2035.7 1211.77 L2035.12 1211.77 L2034.53 1211.77 L2033.94 1211.77 L2033.36 1211.77 L2032.77 1211.77 L2032.19 1211.77 L2031.6 1211.77 L2031.01 1211.77 L2030.43 1211.77 L2029.84 1211.77 L2029.25 1211.77 L2028.67 1211.77 L2028.08 1211.77 L2027.49 1211.77 L2026.91 1211.77 L2026.32 1211.77 L2025.73 1211.77 L2025.15 1211.77 L2024.56 1211.77 L2023.98 1211.77 L2023.39 1211.77 L2022.8 1211.77 L2022.22 1211.77 L2021.63 1211.77 L2021.04 1211.77 L2020.46 1211.77 L2019.87 1211.77 L2019.28 1211.77 L2018.7 1211.77 L2018.11 1211.77 L2017.53 1211.77 L2016.94 1211.77 L2016.35 1211.77 L2015.77 1211.77 L2015.18 1211.77 L2014.59 1211.77 L2014.01 1211.77 L2013.42 1211.77 L2012.83 1211.77 L2012.25 1211.77 L2011.66 1211.77 L2011.07 1211.77 L2010.49 1211.77 L2009.9 1211.77 L2009.32 1211.77 L2008.73 1211.77 L2008.14 1211.77 L2007.56 1211.77 L2006.97 1211.77 L2006.38 1211.77 L2005.8 1211.77 L2005.21 1211.77 L2004.62 1211.77 L2004.04 1211.77 L2003.45 1211.77 L2002.86 1211.77 L2002.28 1211.77 L2001.69 1211.77 L2001.11 1211.77 L2000.52 1211.77 L1999.93 1211.77 L1999.35 1211.77 L1998.76 1211.77 L1998.17 1211.77 L1997.59 1211.77 L1997 1211.77 L1996.41 1211.77 L1995.83 1211.77 L1995.24 1211.77 L1994.65 1211.77 L1994.07 1211.77 L1993.48 1211.77 L1992.9 1211.77 L1992.31 1211.77 L1991.72 1211.77 L1991.14 1211.77 L1990.55 1211.77 L1989.96 1211.77 L1989.38 1211.77 L1988.79 1211.77 L1988.2 1211.77 L1987.62 1211.77 L1987.03 1211.77 L1986.45 1211.77 L1985.86 1211.77 L1985.27 1211.77 L1984.69 1211.77 L1984.1 1211.77 L1983.51 1211.77 L1982.93 1211.77 L1982.34 1211.77 L1981.75 1211.77 L1981.17 1211.77 L1980.58 1211.77 L1979.99 1211.77 L1979.41 1211.77 L1978.82 1211.77 L1978.24 1211.77 L1977.65 1211.77 L1977.06 1211.77 L1976.48 1211.77 L1975.89 1211.77 L1975.3 1211.77 L1974.72 1211.77 L1974.13 1211.77 L1973.54 1211.77 L1972.96 1211.77 L1972.37 1211.77 L1971.78 1211.77 L1971.2 1211.77 L1970.61 1211.77 L1970.03 1211.77 L1969.44 1211.77 L1968.85 1211.77 L1968.27 1211.77 L1967.68 1211.77 L1967.09 1211.77 L1966.51 1211.77 L1965.92 1211.77 L1965.33 1211.77 L1964.75 1211.77 L1964.16 1211.77 L1963.58 1211.77 L1962.99 1211.77 L1962.4 1211.77 L1961.82 1211.77 L1961.23 1211.77 L1960.64 1211.77 L1960.06 1211.77 L1959.47 1211.77 L1958.88 1211.77 L1958.3 1211.77 L1957.71 1211.77 L1957.12 1211.77 L1956.54 1211.77 L1955.95 1211.77 L1955.37 1211.77 L1954.78 1211.77 L1954.19 1211.77 L1953.61 1211.77 L1953.02 1211.77 L1952.43 1211.77 L1951.85 1211.77 L1951.26 1211.77 L1950.67 1211.77 L1950.09 1211.77 L1949.5 1211.77 L1948.91 1211.77 L1948.33 1211.77 L1947.74 1211.77 L1947.16 1211.77 L1946.57 1211.77 L1945.98 1211.77 L1945.4 1211.77 L1944.81 1211.77 L1944.22 1211.77 L1943.64 1211.77 L1943.05 1211.77 L1942.46 1211.77 L1941.88 1211.77 L1941.29 1211.77 L1940.71 1211.77 L1940.12 1211.77 L1939.53 1211.77 L1938.95 1211.77 L1938.36 1211.77 L1937.77 1211.77 L1937.19 1211.77 L1936.6 1211.77 L1936.01 1211.77 L1935.43 1211.77 L1934.84 1211.77 L1934.25 1211.77 L1933.67 1211.77 L1933.08 1211.77 L1932.5 1211.77 L1931.91 1211.77 L1931.32 1211.77 L1930.74 1211.77 L1930.15 1211.77 L1929.56 1211.77 L1928.98 1211.77 L1928.39 1211.77 L1927.8 1211.77 L1927.22 1211.77 L1926.63 1211.77 L1926.04 1211.77 L1925.46 1211.77 L1924.87 1211.77 L1924.29 1211.77 L1923.7 1211.77 L1923.11 1211.77 L1922.53 1211.77 L1921.94 1211.77 L1921.35 1211.77 L1920.77 1211.77 L1920.18 1211.77 L1919.59 1211.77 L1919.01 1211.77 L1918.42 1211.77 L1917.83 1211.77 L1917.25 1211.77 L1916.66 1211.77 L1916.08 1211.77 L1915.49 1211.77 L1914.9 1211.77 L1914.32 1211.77 L1913.73 1211.77 L1913.14 1211.77 L1912.56 1211.77 L1911.97 1211.77 L1911.38 1211.77 L1910.8 1211.77 L1910.21 1211.77 L1909.63 1211.77 L1909.04 1211.77 L1908.45 1211.77 L1907.87 1211.77 L1907.28 1211.77 L1906.69 1211.77 L1906.11 1211.77 L1905.52 1211.77 L1904.93 1211.77 L1904.35 1211.77 L1903.76 1211.77 L1903.17 1211.77 L1902.59 1211.77 L1902 1211.77 L1901.42 1211.77 L1900.83 1211.77 L1900.24 1211.77 L1899.66 1211.77 L1899.07 1211.77 L1898.48 1211.77 L1897.9 1211.77 L1897.31 1211.77 L1896.72 1211.77 L1896.14 1211.77 L1895.55 1211.77 L1894.96 1211.77 L1894.38 1211.77 L1893.79 1211.77 L1893.21 1211.77 L1892.62 1211.77 L1892.03 1211.77 L1891.45 1211.77 L1890.86 1211.77 L1890.27 1211.77 L1889.69 1211.77 L1889.1 1211.77 L1888.51 1211.77 L1887.93 1211.77 L1887.34 1211.77 L1886.76 1211.77 L1886.17 1211.77 L1885.58 1211.77 L1885 1211.77 L1884.41 1211.77 L1883.82 1211.77 L1883.24 1211.77 L1882.65 1211.77 L1882.06 1211.77 L1881.48 1211.77 L1880.89 1211.77 L1880.3 1211.77 L1879.72 1211.77 L1879.13 1211.77 L1878.55 1211.77 L1877.96 1211.77 L1877.37 1211.77 L1876.79 1211.77 L1876.2 1211.77 L1875.61 1211.77 L1875.03 1211.77 L1874.44 1211.77 L1873.85 1211.77 L1873.27 1211.77 L1872.68 1211.77 L1872.09 1211.77 L1871.51 1211.77 L1870.92 1211.77 L1870.34 1211.77 L1869.75 1211.77 L1869.16 1211.77 L1868.58 1211.77 L1867.99 1211.77 L1867.4 1211.77 L1866.82 1211.77 L1866.23 1211.77 L1865.64 1211.77 L1865.06 1211.77 L1864.47 1211.77 L1863.88 1211.77 L1863.3 1211.77 L1862.71 1211.77 L1862.13 1211.77 L1861.54 1211.77 L1860.95 1211.77 L1860.37 1211.77 L1859.78 1211.77 L1859.19 1211.77 L1858.61 1211.77 L1858.02 1211.77 L1857.43 1211.77 L1856.85 1211.77 L1856.26 1211.77 L1855.68 1211.77 L1855.09 1211.77 L1854.5 1211.77 L1853.92 1211.77 L1853.33 1211.77 L1852.74 1211.77 L1852.16 1211.77 L1851.57 1211.77 L1850.98 1211.77 L1850.4 1211.77 L1849.81 1211.77 L1849.22 1211.77 L1848.64 1211.77 L1848.05 1211.77 L1847.47 1211.77 L1846.88 1211.77 L1846.29 1211.77 L1845.71 1211.77 L1845.12 1211.77 L1844.53 1211.77 L1843.95 1211.77 L1843.36 1211.77 L1842.77 1211.77 L1842.19 1211.77 L1841.6 1211.77 L1841.01 1211.77 L1840.43 1211.77 L1839.84 1211.77 L1839.26 1211.77 L1838.67 1211.77 L1838.08 1211.77 L1837.5 1211.77 L1836.91 1211.77 L1836.32 1211.77 L1835.74 1211.77 L1835.15 1211.77 L1834.56 1211.77 L1833.98 1211.77 L1833.39 1211.77 L1832.81 1211.77 L1832.22 1211.77 L1831.63 1211.77 L1831.05 1211.77 L1830.46 1211.77 L1829.87 1211.77 L1829.29 1211.77 L1828.7 1211.77 L1828.11 1211.77 L1827.53 1211.77 L1826.94 1211.77 L1826.35 1211.77 L1825.77 1211.77 L1825.18 1211.77 L1824.6 1211.77 L1824.01 1211.77 L1823.42 1211.77 L1822.84 1211.77 L1822.25 1211.77 L1821.66 1211.77 L1821.08 1211.77 L1820.49 1211.77 L1819.9 1211.77 L1819.32 1211.77 L1818.73 1211.77 L1818.14 1211.77 L1817.56 1211.77 L1816.97 1211.77 L1816.39 1211.77 L1815.8 1211.77 L1815.21 1211.77 L1814.63 1211.77 L1814.04 1211.77 L1813.45 1211.77 L1812.87 1211.77 L1812.28 1211.77 L1811.69 1211.77 L1811.11 1211.77 L1810.52 1211.77 L1809.94 1211.77 L1809.35 1211.77 L1808.76 1211.77 L1808.18 1211.77 L1807.59 1211.77 L1807 1211.77 L1806.42 1211.77 L1805.83 1211.77 L1805.24 1211.77 L1804.66 1211.77 L1804.07 1211.77 L1803.48 1211.77 L1802.9 1211.77 L1802.31 1211.77 L1801.73 1211.77 L1801.14 1211.77 L1800.55 1211.77 L1799.97 1211.77 L1799.38 1211.77 L1798.79 1211.77 L1798.21 1211.77 L1797.62 1211.77 L1797.03 1211.77 L1796.45 1211.77 L1795.86 1211.77 L1795.27 1211.77 L1794.69 1211.77 L1794.1 1211.77 L1793.52 1211.77 L1792.93 1211.77 L1792.34 1211.77 L1791.76 1211.77 L1791.17 1211.77 L1790.58 1211.77 L1790 1211.77 L1789.41 1211.77 L1788.82 1211.77 L1788.24 1211.77 L1787.65 1211.77 L1787.06 1211.77 L1786.48 1211.77 L1785.89 1211.77 L1785.31 1211.77 L1784.72 1211.77 L1784.13 1211.77 L1783.55 1211.77 L1782.96 1211.77 L1782.37 1211.77 L1781.79 1211.77 L1781.2 1211.77 L1780.61 1211.77 L1780.03 1211.77 L1779.44 1211.77 L1778.86 1211.77 L1778.27 1211.77 L1777.68 1211.77 L1777.1 1211.77 L1776.51 1211.77 L1775.92 1211.77 L1775.34 1211.77 L1774.75 1211.77 L1774.16 1211.77 L1773.58 1211.77 L1772.99 1211.77 L1772.4 1211.77 L1771.82 1211.77 L1771.23 1211.77 L1770.65 1211.77 L1770.06 1211.77 L1769.47 1211.77 L1768.89 1211.77 L1768.3 1211.77 L1767.71 1211.77 L1767.13 1211.77 L1766.54 1211.77 L1765.95 1211.77 L1765.37 1211.77 L1764.78 1211.77 L1764.19 1211.77 L1763.61 1211.77 L1763.02 1211.77 L1762.44 1211.77 L1761.85 1211.77 L1761.26 1211.77 L1760.68 1211.77 L1760.09 1211.77 L1759.5 1211.77 L1758.92 1211.77 L1758.33 1211.77 L1757.74 1211.77 L1757.16 1211.77 L1756.57 1211.77 L1755.99 1211.77 L1755.4 1211.77 L1754.81 1211.77 L1754.23 1211.77 L1753.64 1211.77 L1753.05 1211.77 L1752.47 1211.77 L1751.88 1211.77 L1751.29 1211.77 L1750.71 1211.77 L1750.12 1211.77 L1749.53 1211.77 L1748.95 1211.77 L1748.36 1211.77 L1747.78 1211.77 L1747.19 1211.77 L1746.6 1211.77 L1746.02 1211.77 L1745.43 1211.77 L1744.84 1211.77 L1744.26 1211.77 L1743.67 1211.77 L1743.08 1211.77 L1742.5 1211.77 L1741.91 1211.77 L1741.32 1211.77 L1740.74 1211.77 L1740.15 1211.77 L1739.57 1211.77 L1738.98 1211.77 L1738.39 1211.77 L1737.81 1211.77 L1737.22 1211.77 L1736.63 1211.77 L1736.05 1211.77 L1735.46 1211.77 L1734.87 1211.77 L1734.29 1211.77 L1733.7 1211.77 L1733.11 1211.77 L1732.53 1211.77 L1731.94 1211.77 L1731.36 1211.77 L1730.77 1211.77 L1730.18 1211.77 L1729.6 1211.77 L1729.01 1211.77 L1728.42 1211.77 L1727.84 1211.77 L1727.25 1211.77 L1726.66 1211.77 L1726.08 1211.77 L1725.49 1211.77 L1724.91 1211.77 L1724.32 1211.77 L1723.73 1211.77 L1723.15 1211.77 L1722.56 1211.77 L1721.97 1211.77 L1721.39 1211.77 L1720.8 1211.77 L1720.21 1211.77 L1719.63 1211.77 L1719.04 1211.77 L1718.45 1211.77 L1717.87 1211.77 L1717.28 1211.77 L1716.7 1211.77 L1716.11 1211.77 L1715.52 1211.77 L1714.94 1211.77 L1714.35 1211.77 L1713.76 1211.77 L1713.18 1211.77 L1712.59 1211.77 L1712 1211.77 L1711.42 1211.77 L1710.83 1211.77 L1710.24 1211.77 L1709.66 1211.77 L1709.07 1211.77 L1708.49 1211.77 L1707.9 1211.77 L1707.31 1211.77 L1706.73 1211.77 L1706.14 1211.77 L1705.55 1211.77 L1704.97 1211.77 L1704.38 1211.77 L1703.79 1211.77 L1703.21 1211.77 L1702.62 1211.77 L1702.04 1211.77 L1701.45 1211.77 L1700.86 1211.77 L1700.28 1211.77 L1699.69 1211.77 L1699.1 1211.77 L1698.52 1211.77 L1697.93 1211.77 L1697.34 1211.77 L1696.76 1211.77 L1696.17 1211.77 L1695.58 1211.77 L1695 1211.77 L1694.41 1211.77 L1693.83 1211.77 L1693.24 1211.77 L1692.65 1211.77 L1692.07 1211.77 L1691.48 1211.77 L1690.89 1211.77 L1690.31 1211.77 L1689.72 1211.77 L1689.13 1211.77 L1688.55 1211.77 L1687.96 1211.77 L1687.37 1211.77 L1686.79 1211.77 L1686.2 1211.77 L1685.62 1211.77 L1685.03 1211.77 L1684.44 1211.77 L1683.86 1211.77 L1683.27 1211.77 L1682.68 1211.77 L1682.1 1211.77 L1681.51 1211.77 L1680.92 1211.77 L1680.34 1211.77 L1679.75 1211.77 L1679.17 1211.77 L1678.58 1211.77 L1677.99 1211.77 L1677.41 1211.77 L1676.82 1211.77 L1676.23 1211.77 L1675.65 1211.77 L1675.06 1211.77 L1674.47 1211.77 L1673.89 1211.77 L1673.3 1211.77 L1672.71 1211.77 L1672.13 1211.77 L1671.54 1211.77 L1670.96 1211.77 L1670.37 1211.77 L1669.78 1211.77 L1669.2 1211.77 L1668.61 1211.77 L1668.02 1211.77 L1667.44 1211.77 L1666.85 1211.77 L1666.26 1211.77 L1665.68 1211.77 L1665.09 1211.77 L1664.5 1211.77 L1663.92 1211.77 L1663.33 1211.77 L1662.75 1211.77 L1662.16 1211.77 L1661.57 1211.77 L1660.99 1211.77 L1660.4 1211.77 L1659.81 1211.77 L1659.23 1211.77 L1658.64 1211.77 L1658.05 1211.77 L1657.47 1211.77 L1656.88 1211.77 L1656.29 1211.77 L1655.71 1211.77 L1655.12 1211.77 L1654.54 1211.77 L1653.95 1211.77 L1653.36 1211.77 L1652.78 1211.77 L1652.19 1211.77 L1651.6 1211.77 L1651.02 1211.77 L1650.43 1211.77 L1649.84 1211.77 L1649.26 1211.77 L1648.67 1211.77 L1648.09 1211.77 L1647.5 1211.77 L1646.91 1211.77 L1646.33 1211.77 L1645.74 1211.77 L1645.15 1211.77 L1644.57 1211.77 L1643.98 1211.77 L1643.39 1211.77 L1642.81 1211.77 L1642.22 1211.77 L1641.63 1211.77 L1641.05 1211.77 L1640.46 1211.77 L1639.88 1211.77 L1639.29 1211.77 L1638.7 1211.77 L1638.12 1211.77 L1637.53 1211.77 L1636.94 1211.77 L1636.36 1211.77 L1635.77 1211.77 L1635.18 1211.77 L1634.6 1211.77 L1634.01 1211.77 L1633.42 1211.77 L1632.84 1211.77 L1632.25 1211.77 L1631.67 1211.77 L1631.08 1211.77 L1630.49 1211.77 L1629.91 1211.77 L1629.32 1211.77 L1628.73 1211.77 L1628.15 1211.77 L1627.56 1211.77 L1626.97 1211.77 L1626.39 1211.77 L1625.8 1211.77 L1625.22 1211.77 L1624.63 1211.77 L1624.04 1211.77 L1623.46 1211.77 L1622.87 1211.77 L1622.28 1211.77 L1621.7 1211.77 L1621.11 1211.77 L1620.52 1211.77 L1619.94 1211.77 L1619.35 1211.77 L1618.76 1211.77 L1618.18 1211.77 L1617.59 1211.77 L1617.01 1211.77 L1616.42 1211.77 L1615.83 1211.77 L1615.25 1211.77 L1614.66 1211.77 L1614.07 1211.77 L1613.49 1211.77 L1612.9 1211.77 L1612.31 1211.77 L1611.73 1211.77 L1611.14 1211.77 L1610.55 1211.77 L1609.97 1211.77 L1609.38 1211.77 L1608.8 1211.77 L1608.21 1211.77 L1607.62 1211.77 L1607.04 1211.77 L1606.45 1211.77 L1605.86 1211.77 L1605.28 1211.77 L1604.69 1211.77 L1604.1 1211.77 L1603.52 1211.77 L1602.93 1211.77 L1602.34 1211.77 L1601.76 1211.77 L1601.17 1211.77 L1600.59 1211.77 L1600 1211.77 L1599.41 1211.77 L1598.83 1211.77 L1598.24 1211.77 L1597.65 1211.77 L1597.07 1211.77 L1596.48 1211.77 L1595.89 1211.77 L1595.31 1211.77 L1594.72 1211.77 L1594.14 1211.77 L1593.55 1211.77 L1592.96 1211.77 L1592.38 1211.77 L1591.79 1211.77 L1591.2 1211.77 L1590.62 1211.77 L1590.03 1211.77 L1589.44 1211.77 L1588.86 1211.77 L1588.27 1211.77 L1587.68 1211.77 L1587.1 1211.77 L1586.51 1211.77 L1585.93 1211.77 L1585.34 1211.77 L1584.75 1211.77 L1584.17 1211.77 L1583.58 1211.77 L1582.99 1211.77 L1582.41 1211.77 L1581.82 1211.77 L1581.23 1211.77 L1580.65 1211.77 L1580.06 1211.77 L1579.47 1211.77 L1578.89 1211.77 L1578.3 1211.77 L1577.72 1211.77 L1577.13 1211.77 L1576.54 1211.77 L1575.96 1211.77 L1575.37 1211.77 L1574.78 1211.77 L1574.2 1211.77 L1573.61 1211.77 L1573.02 1211.77 L1572.44 1211.77 L1571.85 1211.77 L1571.27 1211.77 L1570.68 1211.77 L1570.09 1211.77 L1569.51 1211.77 L1568.92 1211.77 L1568.33 1211.77 L1567.75 1211.77 L1567.16 1211.77 L1566.57 1211.77 L1565.99 1211.77 L1565.4 1211.77 L1564.81 1211.77 L1564.23 1211.77 L1563.64 1211.77 L1563.06 1211.77 L1562.47 1211.77 L1561.88 1211.77 L1561.3 1211.77 L1560.71 1211.77 L1560.12 1211.77 L1559.54 1211.77 L1558.95 1211.77 L1558.36 1211.77 L1557.78 1211.77 L1557.19 1211.77 L1556.6 1211.77 L1556.02 1211.77 L1555.43 1211.77 L1554.85 1211.77 L1554.26 1211.77 L1553.67 1211.77 L1553.09 1211.77 L1552.5 1211.77 L1551.91 1211.77 L1551.33 1211.77 L1550.74 1211.77 L1550.15 1211.77 L1549.57 1211.77 L1548.98 1211.77 L1548.4 1211.77 L1547.81 1211.77 L1547.22 1211.77 L1546.64 1211.77 L1546.05 1211.77 L1545.46 1211.77 L1544.88 1211.77 L1544.29 1211.77 L1543.7 1211.77 L1543.12 1211.77 L1542.53 1211.77 L1541.94 1211.77 L1541.36 1211.77 L1540.77 1211.77 L1540.19 1211.77 L1539.6 1211.77 L1539.01 1211.77 L1538.43 1211.77 L1537.84 1211.77 L1537.25 1211.77 L1536.67 1211.77 L1536.08 1211.77 L1535.49 1211.77 L1534.91 1211.77 L1534.32 1211.77 L1533.73 1211.77 L1533.15 1211.77 L1532.56 1211.77 L1531.98 1211.77 L1531.39 1211.77 L1530.8 1211.77 L1530.22 1211.77 L1529.63 1211.77 L1529.04 1211.77 L1528.46 1211.77 L1527.87 1211.77 L1527.28 1211.77 L1526.7 1211.77 L1526.11 1211.77 L1525.52 1211.77 L1524.94 1211.77 L1524.35 1211.77 L1523.77 1211.77 L1523.18 1211.77 L1522.59 1211.77 L1522.01 1211.77 L1521.42 1211.77 L1520.83 1211.77 L1520.25 1211.77 L1519.66 1211.77 L1519.07 1211.77 L1518.49 1211.77 L1517.9 1211.77 L1517.32 1211.77 L1516.73 1211.77 L1516.14 1211.77 L1515.56 1211.77 L1514.97 1211.77 L1514.38 1211.77 L1513.8 1211.77 L1513.21 1211.77 L1512.62 1211.77 L1512.04 1211.77 L1511.45 1211.77 L1510.86 1211.77 L1510.28 1211.77 L1509.69 1211.77 L1509.11 1211.77 L1508.52 1211.77 L1507.93 1211.77 L1507.35 1211.77 L1506.76 1211.77 L1506.17 1211.77 L1505.59 1211.77 L1505 1211.77 L1504.41 1211.77 L1503.83 1211.77 L1503.24 1211.77 L1502.65 1211.77 L1502.07 1211.77 L1501.48 1211.77 L1500.9 1211.77 L1500.31 1211.77 L1499.72 1211.77 L1499.14 1211.77 L1498.55 1211.77 L1497.96 1211.77 L1497.38 1211.77 L1496.79 1211.77 L1496.2 1211.77 L1495.62 1211.77 L1495.03 1211.77 L1494.45 1211.77 L1493.86 1211.77 L1493.27 1211.77 L1492.69 1211.77 L1492.1 1211.77 L1491.51 1211.77 L1490.93 1211.77 L1490.34 1211.77 L1489.75 1211.77 L1489.17 1211.77 L1488.58 1211.77 L1487.99 1211.77 L1487.41 1211.77 L1486.82 1211.77 L1486.24 1211.77 L1485.65 1211.77 L1485.06 1211.77 L1484.48 1211.77 L1483.89 1211.77 L1483.3 1211.77 L1482.72 1211.77 L1482.13 1211.77 L1481.54 1211.77 L1480.96 1211.77 L1480.37 1211.77 L1479.78 1211.77 L1479.2 1211.77 L1478.61 1211.77 L1478.03 1211.77 L1477.44 1211.77 L1476.85 1211.77 L1476.27 1211.77 L1475.68 1211.77 L1475.09 1211.77 L1474.51 1211.77 L1473.92 1211.77 L1473.33 1211.77 L1472.75 1211.77 L1472.16 1211.77 L1471.57 1211.77 L1470.99 1211.77 L1470.4 1211.77 L1469.82 1211.77 L1469.23 1211.77 L1468.64 1211.77 L1468.06 1211.77 L1467.47 1211.77 L1466.88 1211.77 L1466.3 1211.77 L1465.71 1211.77 L1465.12 1211.77 L1464.54 1211.77 L1463.95 1211.77 L1463.37 1211.77 L1462.78 1211.77 L1462.19 1211.77 L1461.61 1211.77 L1461.02 1211.77 L1460.43 1211.77 L1459.85 1211.77 L1459.26 1211.77 L1458.67 1211.77 L1458.09 1211.77 L1457.5 1211.77 L1456.91 1211.77 L1456.33 1211.77 L1455.74 1211.77 L1455.16 1211.77 L1454.57 1211.77 L1453.98 1211.77 L1453.4 1211.77 L1452.81 1211.77 L1452.22 1211.77 L1451.64 1211.77 L1451.05 1211.77 L1450.46 1211.77 L1449.88 1211.77 L1449.29 1211.77 L1448.7 1211.77 L1448.12 1211.77 L1447.53 1211.77 L1446.95 1211.77 L1446.36 1211.77 L1445.77 1211.77 L1445.19 1211.77 L1444.6 1211.77 L1444.01 1211.77 L1443.43 1211.77 L1442.84 1211.77 L1442.25 1211.77 L1441.67 1211.77 L1441.08 1211.77 L1440.5 1211.77 L1439.91 1211.77 L1439.32 1211.77 L1438.74 1211.77 L1438.15 1211.77 L1437.56 1211.77 L1436.98 1211.77 L1436.39 1211.77 L1435.8 1211.77 L1435.22 1211.77 L1434.63 1211.77 L1434.04 1211.77 L1433.46 1211.77 L1432.87 1211.77 L1432.29 1211.77 L1431.7 1211.77 L1431.11 1211.77 L1430.53 1211.77 L1429.94 1211.77 L1429.35 1211.77 L1428.77 1211.77 L1428.18 1211.77 L1427.59 1211.77 L1427.01 1211.77 L1426.42 1211.77 L1425.83 1211.77 L1425.25 1211.77 L1424.66 1211.77 L1424.08 1211.77 L1423.49 1211.77 L1422.9 1211.77 L1422.32 1211.77 L1421.73 1211.77 L1421.14 1211.77 L1420.56 1211.77 L1419.97 1211.77 L1419.38 1211.77 L1418.8 1211.77 L1418.21 1211.77 L1417.63 1211.77 L1417.04 1211.77 L1416.45 1211.77 L1415.87 1211.77 L1415.28 1211.77 L1414.69 1211.77 L1414.11 1211.77 L1413.52 1211.77 L1412.93 1211.77 L1412.35 1211.77 L1411.76 1211.77 L1411.17 1211.77 L1410.59 1211.77 L1410 1211.77 L1409.42 1211.77 L1408.83 1211.77 L1408.24 1211.77 L1407.66 1211.77 L1407.07 1211.77 L1406.48 1211.77 L1405.9 1211.77 L1405.31 1211.77 L1404.72 1211.77 L1404.14 1211.77 L1403.55 1211.77 L1402.96 1211.77 L1402.38 1211.77 L1401.79 1211.77 L1401.21 1211.77 L1400.62 1211.77 L1400.03 1211.77 L1399.45 1211.77 L1398.86 1211.77 L1398.27 1211.77 L1397.69 1211.77 L1397.1 1211.77 L1396.51 1211.77 L1395.93 1211.77 L1395.34 1211.77 L1394.75 1211.77 L1394.17 1211.77 L1393.58 1211.77 L1393 1211.77 L1392.41 1211.77 L1391.82 1211.77 L1391.24 1211.77 L1390.65 1211.77 L1390.06 1211.77 L1389.48 1211.77 L1388.89 1211.77 L1388.3 1211.77 L1387.72 1211.77 L1387.13 1211.77 L1386.55 1211.77 L1385.96 1211.77 L1385.37 1211.77 L1384.79 1211.77 L1384.2 1211.77 L1383.61 1211.77 L1383.03 1211.77 L1382.44 1211.77 L1381.85 1211.77 L1381.27 1211.77 L1380.68 1211.77 L1380.09 1211.77 L1379.51 1211.77 L1378.92 1211.77 L1378.34 1211.77 L1377.75 1211.77 L1377.16 1211.77 L1376.58 1211.77 L1375.99 1211.77 L1375.4 1211.77 L1374.82 1211.77 L1374.23 1211.77 L1373.64 1211.77 L1373.06 1211.77 L1372.47 1211.77 L1371.88 1211.77 L1371.3 1211.77 L1370.71 1211.77 L1370.13 1211.77 L1369.54 1211.77 L1368.95 1211.77 L1368.37 1211.77 L1367.78 1211.77 L1367.19 1211.77 L1366.61 1211.77 L1366.02 1211.77 L1365.43 1211.77 L1364.85 1211.77 L1364.26 1211.77 L1363.68 1211.77 L1363.09 1211.77 L1362.5 1211.77 L1361.92 1211.77 L1361.33 1211.77 L1360.74 1211.77 L1360.16 1211.77 L1359.57 1211.77 L1358.98 1211.77 L1358.4 1211.77 L1357.81 1211.77 L1357.22 1211.77 L1356.64 1211.77 L1356.05 1211.77 L1355.47 1211.77 L1354.88 1211.77 L1354.29 1211.77 L1353.71 1211.77 L1353.12 1211.77 L1352.53 1211.77 L1351.95 1211.77 L1351.36 1211.77 L1350.77 1211.77 L1350.19 1211.77 L1349.6 1211.77 L1349.01 1211.77 L1348.43 1211.77 L1347.84 1211.77 L1347.26 1211.77 L1346.67 1211.77 L1346.08 1211.77 L1345.5 1211.77 L1344.91 1211.77 L1344.32 1211.77 L1343.74 1211.77 L1343.15 1211.77 L1342.56 1211.77 L1341.98 1211.77 L1341.39 1211.77 L1340.8 1211.77 L1340.22 1211.77 L1339.63 1211.77 L1339.05 1211.77 L1338.46 1211.77 L1337.87 1211.77 L1337.29 1211.77 L1336.7 1211.77 L1336.11 1211.77 L1335.53 1211.77 L1334.94 1211.77 L1334.35 1211.77 L1333.77 1211.77 L1333.18 1211.77 L1332.6 1211.77 L1332.01 1211.77 L1331.42 1211.77 L1330.84 1211.77 L1330.25 1211.77 L1329.66 1211.77 L1329.08 1211.77 L1328.49 1211.77 L1327.9 1211.77 L1327.32 1211.77 L1326.73 1211.77 L1326.14 1211.77 L1325.56 1211.77 L1324.97 1211.77 L1324.39 1211.77 L1323.8 1211.77 L1323.21 1211.77 L1322.63 1211.77 L1322.04 1211.77 L1321.45 1211.77 L1320.87 1211.77 L1320.28 1211.77 L1319.69 1211.77 L1319.11 1211.77 L1318.52 1211.77 L1317.93 1211.77 L1317.35 1211.77 L1316.76 1211.77 L1316.18 1211.77 L1315.59 1211.77 L1315 1211.77 L1314.42 1211.77 L1313.83 1211.77 L1313.24 1211.77 L1312.66 1211.77 L1312.07 1211.77 L1311.48 1211.77 L1310.9 1211.77 L1310.31 1211.77 L1309.73 1211.77 L1309.14 1211.77 L1308.55 1211.77 L1307.97 1211.77 L1307.38 1211.77 L1306.79 1211.77 L1306.21 1211.77 L1305.62 1211.77 L1305.03 1211.77 L1304.45 1211.77 L1303.86 1211.77 L1303.27 1211.77 L1302.69 1211.77 L1302.1 1211.77 L1301.52 1211.77 L1300.93 1211.77 L1300.34 1211.77 L1299.76 1211.77 L1299.17 1211.77 L1298.58 1211.77 L1298 1211.77 L1297.41 1211.77 L1296.82 1211.77 L1296.24 1211.77 L1295.65 1211.77 L1295.06 1211.77 L1294.48 1211.77 L1293.89 1211.77 L1293.31 1211.77 L1292.72 1211.77 L1292.13 1211.77 L1291.55 1211.77 L1290.96 1211.77 L1290.37 1211.77 L1289.79 1211.77 L1289.2 1211.77 L1288.61 1211.77 L1288.03 1211.77 L1287.44 1211.77 L1286.86 1211.77 L1286.27 1211.77 L1285.68 1211.77 L1285.1 1211.77 L1284.51 1211.77 L1283.92 1211.77 L1283.34 1211.77 L1282.75 1211.77 L1282.16 1211.77 L1281.58 1211.77 L1280.99 1211.77 L1280.4 1211.77 L1279.82 1211.77 L1279.23 1211.77 L1278.65 1211.77 L1278.06 1211.77 L1277.47 1211.77 L1276.89 1211.77 L1276.3 1211.77 L1275.71 1211.77 L1275.13 1211.77 L1274.54 1211.77 L1273.95 1211.77 L1273.37 1211.77 L1272.78 1211.77 L1272.19 1211.77 L1271.61 1211.77 L1271.02 1211.77 L1270.44 1211.77 L1269.85 1211.77 L1269.26 1211.77 L1268.68 1211.77 L1268.09 1211.77 L1267.5 1211.77 L1266.92 1211.77 L1266.33 1211.77 L1265.74 1211.77 L1265.16 1211.77 L1264.57 1211.77 L1263.98 1211.77 L1263.4 1211.77 L1262.81 1211.77 L1262.23 1211.77 L1261.64 1211.77 L1261.05 1211.77 L1260.47 1211.77 L1259.88 1211.77 L1259.29 1211.77 L1258.71 1211.77 L1258.12 1211.77 L1257.53 1211.77 L1256.95 1211.77 L1256.36 1211.77 L1255.78 1211.77 L1255.19 1211.77 L1254.6 1211.77 L1254.02 1211.77 L1253.43 1211.77 L1252.84 1211.77 L1252.26 1211.77 L1251.67 1211.77 L1251.08 1211.77 L1250.5 1211.77 L1249.91 1211.77 L1249.32 1211.77 L1248.74 1211.77 L1248.15 1211.77 L1247.57 1211.77 L1246.98 1211.77 L1246.39 1211.77 L1245.81 1211.77 L1245.22 1211.77 L1244.63 1211.77 L1244.05 1211.77 L1243.46 1211.77 L1242.87 1211.77 L1242.29 1211.77 L1241.7 1211.77 L1241.11 1211.77 L1240.53 1211.77 L1239.94 1211.77 L1239.36 1211.77 L1238.77 1211.77 L1238.18 1211.77 L1237.6 1211.77 L1237.01 1211.77 L1236.42 1211.77 L1235.84 1211.77 L1235.25 1211.77 L1234.66 1211.77 L1234.08 1211.77 L1233.49 1211.77 L1232.91 1211.77 L1232.32 1211.77 L1231.73 1211.77 L1231.15 1211.77 L1230.56 1211.77 L1229.97 1211.77 L1229.39 1211.77 L1228.8 1211.77 L1228.21 1211.77 L1227.63 1211.77 L1227.04 1211.77 L1226.45 1211.77 L1225.87 1211.77 L1225.28 1211.77 L1224.7 1211.77 L1224.11 1211.77 L1223.52 1211.77 L1222.94 1211.77 L1222.35 1211.77 L1221.76 1211.77 L1221.18 1211.77 L1220.59 1211.77 L1220 1211.77 L1219.42 1211.77 L1218.83 1211.77 L1218.24 1211.77 L1217.66 1211.77 L1217.07 1211.77 L1216.49 1211.77 L1215.9 1211.77 L1215.31 1211.77 L1214.73 1211.77 L1214.14 1211.77 L1213.55 1211.77 L1212.97 1211.77 L1212.38 1211.77 L1211.79 1211.77 L1211.21 1211.77 L1210.62 1211.77 L1210.03 1211.77 L1209.45 1211.77 L1208.86 1211.77 L1208.28 1211.77 L1207.69 1211.77 L1207.1 1211.77 L1206.52 1211.77 L1205.93 1211.77 L1205.34 1211.77 L1204.76 1211.77 L1204.17 1211.77 L1203.58 1211.77 L1203 1211.77 L1202.41 1211.77 L1201.83 1211.77 L1201.24 1211.77 L1200.65 1211.77 L1200.07 1211.77 L1199.48 1211.77 L1198.89 1211.77 L1198.31 1211.77 L1197.72 1211.77 L1197.13 1211.77 L1196.55 1211.77 L1195.96 1211.77 L1195.37 1211.77 L1194.79 1211.77 L1194.2 1211.77 L1193.62 1211.77 L1193.03 1211.77 L1192.44 1211.77 L1191.86 1211.77 L1191.27 1211.77 L1190.68 1211.77 L1190.1 1211.77 L1189.51 1211.77 L1188.92 1211.77 L1188.34 1211.77 L1187.75 1211.77 L1187.16 1211.77 L1186.58 1211.77 L1185.99 1211.77 L1185.41 1211.77 L1184.82 1211.77 L1184.23 1211.77 L1183.65 1211.77 L1183.06 1211.77 L1182.47 1211.77 L1181.89 1211.77 L1181.3 1211.77 L1180.71 1211.77 L1180.13 1211.77 L1179.54 1211.77 L1178.96 1211.77 L1178.37 1211.77 L1177.78 1211.77 L1177.2 1211.77 L1176.61 1211.77 L1176.02 1211.77 L1175.44 1211.77 L1174.85 1211.77 L1174.26 1211.77 L1173.68 1211.77 L1173.09 1211.77 L1172.5 1211.77 L1171.92 1211.77 L1171.33 1211.77 L1170.75 1211.77 L1170.16 1211.77 L1169.57 1211.77 L1168.99 1211.77 L1168.4 1211.77 L1167.81 1211.77 L1167.23 1211.77 L1166.64 1211.77 L1166.05 1211.77 L1165.47 1211.77 L1164.88 1211.77 L1164.29 1211.77 L1163.71 1211.77 L1163.12 1211.77 L1162.54 1211.77 L1161.95 1211.77 L1161.36 1211.77 L1160.78 1211.77 L1160.19 1211.77 L1159.6 1211.77 L1159.02 1211.77 L1158.43 1211.77 L1157.84 1211.77 L1157.26 1211.77 L1156.67 1211.77 L1156.09 1211.77 L1155.5 1211.77 L1154.91 1211.77 L1154.33 1211.77 L1153.74 1211.77 L1153.15 1211.77 L1152.57 1211.77 L1151.98 1211.77 L1151.39 1211.77 L1150.81 1211.77 L1150.22 1211.77 L1149.63 1211.77 L1149.05 1211.77 L1148.46 1211.77 L1147.88 1211.77 L1147.29 1211.77 L1146.7 1211.77 L1146.12 1211.77 L1145.53 1211.77 L1144.94 1211.77 L1144.36 1211.77 L1143.77 1211.77 L1143.18 1211.77 L1142.6 1211.77 L1142.01 1211.77 L1141.42 1211.77 L1140.84 1211.77 L1140.25 1211.77 L1139.67 1211.77 L1139.08 1211.77 L1138.49 1211.77 L1137.91 1211.77 L1137.32 1211.77 L1136.73 1211.77 L1136.15 1211.77 L1135.56 1211.77 L1134.97 1211.77 L1134.39 1211.77 L1133.8 1211.77 L1133.21 1211.77 L1132.63 1211.77 L1132.04 1211.77 L1131.46 1211.77 L1130.87 1211.77 L1130.28 1211.77 L1129.7 1211.77 L1129.11 1211.77 L1128.52 1211.77 L1127.94 1211.77 L1127.35 1211.77 L1126.76 1211.77 L1126.18 1211.77 L1125.59 1211.77 L1125.01 1211.77 L1124.42 1211.77 L1123.83 1211.77 L1123.25 1211.77 L1122.66 1211.77 L1122.07 1211.77 L1121.49 1211.77 L1120.9 1211.77 L1120.31 1211.77 L1119.73 1211.77 L1119.14 1211.77 L1118.55 1211.77 L1117.97 1211.77 L1117.38 1211.77 L1116.8 1211.77 L1116.21 1211.77 L1115.62 1211.77 L1115.04 1211.77 L1114.45 1211.77 L1113.86 1211.77 L1113.28 1211.77 L1112.69 1211.77 L1112.1 1211.77 L1111.52 1211.77 L1110.93 1211.77 L1110.34 1211.77 L1109.76 1211.77 L1109.17 1211.77 L1108.59 1211.77 L1108 1211.77 L1107.41 1211.77 L1106.83 1211.77 L1106.24 1211.77 L1105.65 1211.77 L1105.07 1211.77 L1104.48 1211.77 L1103.89 1211.77 L1103.31 1211.77 L1102.72 1211.77 L1102.14 1211.77 L1101.55 1211.77 L1100.96 1211.77 L1100.38 1211.77 L1099.79 1211.77 L1099.2 1211.77 L1098.62 1211.77 L1098.03 1211.77 L1097.44 1211.77 L1096.86 1211.77 L1096.27 1211.77 L1095.68 1211.77 L1095.1 1211.77 L1094.51 1211.77 L1093.93 1211.77 L1093.34 1211.77 L1092.75 1211.77 L1092.17 1211.77 L1091.58 1211.77 L1090.99 1211.77 L1090.41 1211.77 L1089.82 1211.77 L1089.23 1211.77 L1088.65 1211.77 L1088.06 1211.77 L1087.47 1211.77 L1086.89 1211.77 L1086.3 1211.77 L1085.72 1211.77 L1085.13 1211.77 L1084.54 1211.77 L1083.96 1211.77 L1083.37 1211.77 L1082.78 1211.77 L1082.2 1211.77 L1081.61 1211.77 L1081.02 1211.77 L1080.44 1211.77 L1079.85 1211.77 L1079.26 1211.77 L1078.68 1211.77 L1078.09 1211.77 L1077.51 1211.77 L1076.92 1211.77 L1076.33 1211.77 L1075.75 1211.77 L1075.16 1211.77 L1074.57 1211.77 L1073.99 1211.77 L1073.4 1211.77 L1072.81 1211.77 L1072.23 1211.77 L1071.64 1211.77 L1071.06 1211.77 L1070.47 1211.77 L1069.88 1211.77 L1069.3 1211.77 L1068.71 1211.77 L1068.12 1211.77 L1067.54 1211.77 L1066.95 1211.77 L1066.36 1211.77 L1065.78 1211.77 L1065.19 1211.77 L1064.6 1211.77 L1064.02 1211.77 L1063.43 1211.77 L1062.85 1211.77 L1062.26 1211.77 L1061.67 1211.77 L1061.09 1211.77 L1060.5 1211.77 L1059.91 1211.77 L1059.33 1211.77 L1058.74 1211.77 L1058.15 1211.77 L1057.57 1211.77 L1056.98 1211.77 L1056.39 1211.77 L1055.81 1211.77 L1055.22 1211.77 L1054.64 1211.77 L1054.05 1211.77 L1053.46 1211.77 L1052.88 1211.77 L1052.29 1211.77 L1051.7 1211.77 L1051.12 1211.77 L1050.53 1211.77 L1049.94 1211.77 L1049.36 1211.77 L1048.77 1211.77 L1048.19 1211.77 L1047.6 1211.77 L1047.01 1211.77 L1046.43 1211.77 L1045.84 1211.77 L1045.25 1211.77 L1044.67 1211.77 L1044.08 1211.77 L1043.49 1211.77 L1042.91 1211.77 L1042.32 1211.77 L1041.73 1211.77 L1041.15 1211.77 L1040.56 1211.77 L1039.98 1211.77 L1039.39 1211.77 L1038.8 1211.77 L1038.22 1211.77 L1037.63 1211.77 L1037.04 1211.77 L1036.46 1211.77 L1035.87 1211.77 L1035.28 1211.77 L1034.7 1211.77 L1034.11 1211.77 L1033.52 1211.77 L1032.94 1211.77 L1032.35 1211.77 L1031.77 1211.77 L1031.18 1211.77 L1030.59 1211.77 L1030.01 1211.77 L1029.42 1211.77 L1028.83 1211.77 L1028.25 1211.77 L1027.66 1211.77 L1027.07 1211.77 L1026.49 1211.77 L1025.9 1211.77 L1025.32 1211.77 L1024.73 1211.77 L1024.14 1211.77 L1023.56 1211.77 L1022.97 1211.77 L1022.38 1211.77 L1021.8 1211.77 L1021.21 1211.77 L1020.62 1211.77 L1020.04 1211.77 L1019.45 1211.77 L1018.86 1211.77 L1018.28 1211.77 L1017.69 1211.77 L1017.11 1211.77 L1016.52 1211.77 L1015.93 1211.77 L1015.35 1211.77 L1014.76 1211.77 L1014.17 1211.77 L1013.59 1211.77 L1013 1211.77 L1012.41 1211.77 L1011.83 1211.77 L1011.24 1211.77 L1010.65 1211.77 L1010.07 1211.77 L1009.48 1211.77 L1008.9 1211.77 L1008.31 1211.77 L1007.72 1211.77 L1007.14 1211.77 L1006.55 1211.77 L1005.96 1211.77 L1005.38 1211.77 L1004.79 1211.77 L1004.2 1211.77 L1003.62 1211.77 L1003.03 1211.77 L1002.44 1211.77 L1001.86 1211.77 L1001.27 1211.77 L1000.69 1211.77 L1000.1 1211.77 L999.513 1211.77 L998.926 1211.77 L998.34 1211.77 L997.754 1211.77 L997.167 1211.77 L996.581 1211.77 L995.994 1211.77 L995.408 1211.77 L994.822 1211.77 L994.235 1211.77 L993.649 1211.77 L993.062 1211.77 L992.476 1211.77 L991.889 1211.77 L991.303 1211.77 L990.717 1211.77 L990.13 1211.77 L989.544 1211.77 L988.957 1211.77 L988.371 1211.77 L987.785 1211.77 L987.198 1211.77 L986.612 1211.77 L986.025 1211.77  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.85 986.612,1211.85 987.198,1211.85 987.785,1211.85 988.371,1211.85 988.957,1211.85 989.544,1211.85 990.13,1211.85 990.717,1211.85 991.303,1211.85 991.889,1211.85 992.476,1211.85 993.062,1211.85 993.649,1211.85 994.235,1211.85 994.822,1211.85 995.408,1211.85 995.994,1211.85 996.581,1211.85 997.167,1211.85 997.754,1211.85 998.34,1211.85 998.926,1211.85 999.513,1211.85 1000.1,1211.85 1000.69,1211.85 1001.27,1211.85 1001.86,1211.85 1002.44,1211.85 1003.03,1211.85 1003.62,1211.85 1004.2,1211.85 1004.79,1211.85 1005.38,1211.85 1005.96,1211.85 1006.55,1211.85 1007.14,1211.85 1007.72,1211.85 1008.31,1211.85 1008.9,1211.85 1009.48,1211.85 1010.07,1211.85 1010.65,1211.85 1011.24,1211.85 1011.83,1211.85 1012.41,1211.85 1013,1211.85 1013.59,1211.85 1014.17,1211.85 1014.76,1211.85 1015.35,1211.85 1015.93,1211.85 1016.52,1211.85 1017.11,1211.85 1017.69,1211.85 1018.28,1211.85 1018.86,1211.85 1019.45,1211.85 1020.04,1211.85 1020.62,1211.85 1021.21,1211.85 1021.8,1211.85 1022.38,1211.85 1022.97,1211.85 1023.56,1211.85 1024.14,1211.85 1024.73,1211.85 1025.32,1211.85 1025.9,1211.85 1026.49,1211.85 1027.07,1211.85 1027.66,1211.85 1028.25,1211.85 1028.83,1211.85 1029.42,1211.85 1030.01,1211.85 1030.59,1211.85 1031.18,1211.85 1031.77,1211.85 1032.35,1211.85 1032.94,1211.85 1033.52,1211.85 1034.11,1211.85 1034.7,1211.85 1035.28,1211.85 1035.87,1211.85 1036.46,1211.85 1037.04,1211.85 1037.63,1211.85 1038.22,1211.85 1038.8,1211.85 1039.39,1211.85 1039.98,1211.85 1040.56,1211.85 1041.15,1211.85 1041.73,1211.85 1042.32,1211.85 1042.91,1211.85 1043.49,1211.85 1044.08,1211.85 1044.67,1211.85 1045.25,1211.85 1045.84,1211.85 1046.43,1211.85 1047.01,1211.85 1047.6,1211.85 1048.19,1211.85 1048.77,1211.85 1049.36,1211.85 1049.94,1211.85 1050.53,1211.85 1051.12,1211.85 1051.7,1211.85 1052.29,1211.85 1052.88,1211.85 1053.46,1211.85 1054.05,1211.85 1054.64,1211.85 1055.22,1211.85 1055.81,1211.85 1056.39,1211.85 1056.98,1211.85 1057.57,1211.85 1058.15,1211.85 1058.74,1211.85 1059.33,1211.85 1059.91,1211.85 1060.5,1211.85 1061.09,1211.85 1061.67,1211.85 1062.26,1211.85 1062.85,1211.85 1063.43,1211.85 1064.02,1211.85 1064.6,1211.85 1065.19,1211.85 1065.78,1211.85 1066.36,1211.85 1066.95,1211.85 1067.54,1211.85 1068.12,1211.85 1068.71,1211.85 1069.3,1211.85 1069.88,1211.85 1070.47,1211.85 1071.06,1211.85 1071.64,1211.85 1072.23,1211.85 1072.81,1211.85 1073.4,1211.85 1073.99,1211.85 1074.57,1211.85 1075.16,1211.85 1075.75,1211.85 1076.33,1211.85 1076.92,1211.85 1077.51,1211.85 1078.09,1211.85 1078.68,1211.85 1079.26,1211.85 1079.85,1211.85 1080.44,1211.85 1081.02,1211.85 1081.61,1211.85 1082.2,1211.85 1082.78,1211.85 1083.37,1211.85 1083.96,1211.85 1084.54,1211.85 1085.13,1211.85 1085.72,1211.85 1086.3,1211.85 1086.89,1211.85 1087.47,1211.85 1088.06,1211.85 1088.65,1211.85 1089.23,1211.85 1089.82,1211.85 1090.41,1211.85 1090.99,1211.85 1091.58,1211.85 1092.17,1211.85 1092.75,1211.85 1093.34,1211.85 1093.93,1211.85 1094.51,1211.85 1095.1,1211.85 1095.68,1211.85 1096.27,1211.85 1096.86,1211.85 1097.44,1211.85 1098.03,1211.85 1098.62,1211.85 1099.2,1211.85 1099.79,1211.85 1100.38,1211.85 1100.96,1211.85 1101.55,1211.85 1102.14,1211.85 1102.72,1211.85 1103.31,1211.85 1103.89,1211.85 1104.48,1211.85 1105.07,1211.85 1105.65,1211.85 1106.24,1211.85 1106.83,1211.85 1107.41,1211.85 1108,1211.85 1108.59,1211.85 1109.17,1211.85 1109.76,1211.85 1110.34,1211.85 1110.93,1211.85 1111.52,1211.85 1112.1,1211.85 1112.69,1211.85 1113.28,1211.85 1113.86,1211.85 1114.45,1211.85 1115.04,1211.85 1115.62,1211.85 1116.21,1211.85 1116.8,1211.85 1117.38,1211.85 1117.97,1211.85 1118.55,1211.85 1119.14,1211.85 1119.73,1211.85 1120.31,1211.85 1120.9,1211.85 1121.49,1211.85 1122.07,1211.85 1122.66,1211.85 1123.25,1211.85 1123.83,1211.85 1124.42,1211.85 1125.01,1211.85 1125.59,1211.85 1126.18,1211.85 1126.76,1211.85 1127.35,1211.85 1127.94,1211.85 1128.52,1211.85 1129.11,1211.85 1129.7,1211.85 1130.28,1211.85 1130.87,1211.85 1131.46,1211.85 1132.04,1211.85 1132.63,1211.85 1133.21,1211.85 1133.8,1211.85 1134.39,1211.85 1134.97,1211.85 1135.56,1211.85 1136.15,1211.85 1136.73,1211.85 1137.32,1211.85 1137.91,1211.85 1138.49,1211.85 1139.08,1211.85 1139.67,1211.85 1140.25,1211.85 1140.84,1211.85 1141.42,1211.85 1142.01,1211.85 1142.6,1211.85 1143.18,1211.85 1143.77,1211.85 1144.36,1211.85 1144.94,1211.85 1145.53,1211.85 1146.12,1211.85 1146.7,1211.85 1147.29,1211.85 1147.88,1211.85 1148.46,1211.85 1149.05,1211.85 1149.63,1211.85 1150.22,1211.85 1150.81,1211.85 1151.39,1211.85 1151.98,1211.85 1152.57,1211.85 1153.15,1211.85 1153.74,1211.85 1154.33,1211.85 1154.91,1211.85 1155.5,1211.85 1156.09,1211.85 1156.67,1211.85 1157.26,1211.85 1157.84,1211.85 1158.43,1211.85 1159.02,1211.85 1159.6,1211.85 1160.19,1211.85 1160.78,1211.85 1161.36,1211.85 1161.95,1211.85 1162.54,1211.85 1163.12,1211.85 1163.71,1211.85 1164.29,1211.85 1164.88,1211.85 1165.47,1211.85 1166.05,1211.85 1166.64,1211.85 1167.23,1211.85 1167.81,1211.85 1168.4,1211.85 1168.99,1211.85 1169.57,1211.85 1170.16,1211.85 1170.75,1211.85 1171.33,1211.85 1171.92,1211.85 1172.5,1211.85 1173.09,1211.85 1173.68,1211.85 1174.26,1211.85 1174.85,1211.85 1175.44,1211.85 1176.02,1211.85 1176.61,1211.85 1177.2,1211.85 1177.78,1211.85 1178.37,1211.85 1178.96,1211.85 1179.54,1211.85 1180.13,1211.85 1180.71,1211.85 1181.3,1211.85 1181.89,1211.85 1182.47,1211.85 1183.06,1211.85 1183.65,1211.85 1184.23,1211.85 1184.82,1211.85 1185.41,1211.85 1185.99,1211.85 1186.58,1211.85 1187.16,1211.85 1187.75,1211.85 1188.34,1211.85 1188.92,1211.85 1189.51,1211.85 1190.1,1211.85 1190.68,1211.85 1191.27,1211.85 1191.86,1211.85 1192.44,1211.85 1193.03,1211.85 1193.62,1211.85 1194.2,1211.85 1194.79,1211.85 1195.37,1211.85 1195.96,1211.85 1196.55,1211.85 1197.13,1211.85 1197.72,1211.85 1198.31,1211.85 1198.89,1211.85 1199.48,1211.85 1200.07,1211.85 1200.65,1211.85 1201.24,1211.85 1201.83,1211.85 1202.41,1211.85 1203,1211.85 1203.58,1211.85 1204.17,1211.85 1204.76,1211.85 1205.34,1211.85 1205.93,1211.85 1206.52,1211.85 1207.1,1211.85 1207.69,1211.85 1208.28,1211.85 1208.86,1211.85 1209.45,1211.85 1210.03,1211.85 1210.62,1211.85 1211.21,1211.85 1211.79,1211.85 1212.38,1211.85 1212.97,1211.85 1213.55,1211.85 1214.14,1211.85 1214.73,1211.85 1215.31,1211.85 1215.9,1211.85 1216.49,1211.85 1217.07,1211.85 1217.66,1211.85 1218.24,1211.85 1218.83,1211.85 1219.42,1211.85 1220,1211.85 1220.59,1211.85 1221.18,1211.85 1221.76,1211.85 1222.35,1211.85 1222.94,1211.85 1223.52,1211.85 1224.11,1211.85 1224.7,1211.85 1225.28,1211.85 1225.87,1211.85 1226.45,1211.85 1227.04,1211.85 1227.63,1211.85 1228.21,1211.85 1228.8,1211.85 1229.39,1211.85 1229.97,1211.85 1230.56,1211.85 1231.15,1211.85 1231.73,1211.85 1232.32,1211.85 1232.91,1211.85 1233.49,1211.85 1234.08,1211.85 1234.66,1211.85 1235.25,1211.85 1235.84,1211.85 1236.42,1211.85 1237.01,1211.85 1237.6,1211.85 1238.18,1211.85 1238.77,1211.85 1239.36,1211.85 1239.94,1211.85 1240.53,1211.85 1241.11,1211.85 1241.7,1211.85 1242.29,1211.85 1242.87,1211.85 1243.46,1211.85 1244.05,1211.85 1244.63,1211.85 1245.22,1211.85 1245.81,1211.85 1246.39,1211.85 1246.98,1211.85 1247.57,1211.85 1248.15,1211.85 1248.74,1211.85 1249.32,1211.85 1249.91,1211.85 1250.5,1211.85 1251.08,1211.85 1251.67,1211.85 1252.26,1211.85 1252.84,1211.85 1253.43,1211.85 1254.02,1211.85 1254.6,1211.85 1255.19,1211.85 1255.78,1211.85 1256.36,1211.85 1256.95,1211.85 1257.53,1211.85 1258.12,1211.85 1258.71,1211.85 1259.29,1211.85 1259.88,1211.85 1260.47,1211.85 1261.05,1211.85 1261.64,1211.85 1262.23,1211.85 1262.81,1211.85 1263.4,1211.85 1263.98,1211.85 1264.57,1211.85 1265.16,1211.85 1265.74,1211.85 1266.33,1211.85 1266.92,1211.85 1267.5,1211.85 1268.09,1211.85 1268.68,1211.85 1269.26,1211.85 1269.85,1211.85 1270.44,1211.85 1271.02,1211.85 1271.61,1211.85 1272.19,1211.85 1272.78,1211.85 1273.37,1211.85 1273.95,1211.85 1274.54,1211.85 1275.13,1211.85 1275.71,1211.85 1276.3,1211.85 1276.89,1211.85 1277.47,1211.85 1278.06,1211.85 1278.65,1211.85 1279.23,1211.85 1279.82,1211.85 1280.4,1211.85 1280.99,1211.85 1281.58,1211.85 1282.16,1211.85 1282.75,1211.85 1283.34,1211.85 1283.92,1211.85 1284.51,1211.85 1285.1,1211.85 1285.68,1211.85 1286.27,1211.85 1286.86,1211.85 1287.44,1211.85 1288.03,1211.85 1288.61,1211.85 1289.2,1211.85 1289.79,1211.85 1290.37,1211.85 1290.96,1211.85 1291.55,1211.85 1292.13,1211.85 1292.72,1211.85 1293.31,1211.85 1293.89,1211.85 1294.48,1211.85 1295.06,1211.85 1295.65,1211.85 1296.24,1211.85 1296.82,1211.85 1297.41,1211.85 1298,1211.85 1298.58,1211.85 1299.17,1211.85 1299.76,1211.85 1300.34,1211.85 1300.93,1211.85 1301.52,1211.85 1302.1,1211.85 1302.69,1211.85 1303.27,1211.85 1303.86,1211.85 1304.45,1211.85 1305.03,1211.85 1305.62,1211.85 1306.21,1211.85 1306.79,1211.85 1307.38,1211.85 1307.97,1211.85 1308.55,1211.85 1309.14,1211.85 1309.73,1211.85 1310.31,1211.85 1310.9,1211.85 1311.48,1211.85 1312.07,1211.85 1312.66,1211.85 1313.24,1211.85 1313.83,1211.85 1314.42,1211.85 1315,1211.85 1315.59,1211.85 1316.18,1211.85 1316.76,1211.85 1317.35,1211.85 1317.93,1211.85 1318.52,1211.85 1319.11,1211.85 1319.69,1211.85 1320.28,1211.85 1320.87,1211.85 1321.45,1211.85 1322.04,1211.85 1322.63,1211.85 1323.21,1211.85 1323.8,1211.85 1324.39,1211.85 1324.97,1211.85 1325.56,1211.85 1326.14,1211.85 1326.73,1211.85 1327.32,1211.85 1327.9,1211.85 1328.49,1211.85 1329.08,1211.85 1329.66,1211.85 1330.25,1211.85 1330.84,1211.85 1331.42,1211.85 1332.01,1211.85 1332.6,1211.85 1333.18,1211.85 1333.77,1211.85 1334.35,1211.85 1334.94,1211.85 1335.53,1211.85 1336.11,1211.85 1336.7,1211.85 1337.29,1211.85 1337.87,1211.85 1338.46,1211.85 1339.05,1211.85 1339.63,1211.85 1340.22,1211.85 1340.8,1211.85 1341.39,1211.85 1341.98,1211.85 1342.56,1211.85 1343.15,1211.85 1343.74,1211.85 1344.32,1211.85 1344.91,1211.85 1345.5,1211.85 1346.08,1211.85 1346.67,1211.85 1347.26,1211.85 1347.84,1211.85 1348.43,1211.85 1349.01,1211.85 1349.6,1211.85 1350.19,1211.85 1350.77,1211.85 1351.36,1211.85 1351.95,1211.85 1352.53,1211.85 1353.12,1211.85 1353.71,1211.85 1354.29,1211.85 1354.88,1211.85 1355.47,1211.85 1356.05,1211.85 1356.64,1211.85 1357.22,1211.85 1357.81,1211.85 1358.4,1211.85 1358.98,1211.85 1359.57,1211.85 1360.16,1211.85 1360.74,1211.85 1361.33,1211.85 1361.92,1211.85 1362.5,1211.85 1363.09,1211.85 1363.68,1211.85 1364.26,1211.85 1364.85,1211.85 1365.43,1211.85 1366.02,1211.85 1366.61,1211.85 1367.19,1211.85 1367.78,1211.85 1368.37,1211.85 1368.95,1211.85 1369.54,1211.85 1370.13,1211.85 1370.71,1211.85 1371.3,1211.85 1371.88,1211.85 1372.47,1211.85 1373.06,1211.85 1373.64,1211.85 1374.23,1211.85 1374.82,1211.85 1375.4,1211.85 1375.99,1211.85 1376.58,1211.85 1377.16,1211.85 1377.75,1211.85 1378.34,1211.85 1378.92,1211.85 1379.51,1211.85 1380.09,1211.85 1380.68,1211.85 1381.27,1211.85 1381.85,1211.85 1382.44,1211.85 1383.03,1211.85 1383.61,1211.85 1384.2,1211.85 1384.79,1211.85 1385.37,1211.85 1385.96,1211.85 1386.55,1211.85 1387.13,1211.85 1387.72,1211.85 1388.3,1211.85 1388.89,1211.85 1389.48,1211.85 1390.06,1211.85 1390.65,1211.85 1391.24,1211.85 1391.82,1211.85 1392.41,1211.85 1393,1211.85 1393.58,1211.85 1394.17,1211.85 1394.75,1211.85 1395.34,1211.85 1395.93,1211.85 1396.51,1211.85 1397.1,1211.85 1397.69,1211.85 1398.27,1211.85 1398.86,1211.85 1399.45,1211.85 1400.03,1211.85 1400.62,1211.85 1401.21,1211.85 1401.79,1211.85 1402.38,1211.85 1402.96,1211.85 1403.55,1211.85 1404.14,1211.85 1404.72,1211.85 1405.31,1211.85 1405.9,1211.85 1406.48,1211.85 1407.07,1211.85 1407.66,1211.85 1408.24,1211.85 1408.83,1211.85 1409.42,1211.85 1410,1211.85 1410.59,1211.85 1411.17,1211.85 1411.76,1211.85 1412.35,1211.85 1412.93,1211.85 1413.52,1211.85 1414.11,1211.85 1414.69,1211.85 1415.28,1211.85 1415.87,1211.85 1416.45,1211.85 1417.04,1211.85 1417.63,1211.85 1418.21,1211.85 1418.8,1211.85 1419.38,1211.85 1419.97,1211.85 1420.56,1211.85 1421.14,1211.85 1421.73,1211.85 1422.32,1211.85 1422.9,1211.85 1423.49,1211.85 1424.08,1211.85 1424.66,1211.85 1425.25,1211.85 1425.83,1211.85 1426.42,1211.85 1427.01,1211.85 1427.59,1211.85 1428.18,1211.85 1428.77,1211.85 1429.35,1211.85 1429.94,1211.85 1430.53,1211.85 1431.11,1211.85 1431.7,1211.85 1432.29,1211.85 1432.87,1211.85 1433.46,1211.85 1434.04,1211.85 1434.63,1211.85 1435.22,1211.85 1435.8,1211.85 1436.39,1211.85 1436.98,1211.85 1437.56,1211.85 1438.15,1211.85 1438.74,1211.85 1439.32,1211.85 1439.91,1211.85 1440.5,1211.85 1441.08,1211.85 1441.67,1211.85 1442.25,1211.85 1442.84,1211.85 1443.43,1211.85 1444.01,1211.85 1444.6,1211.85 1445.19,1211.85 1445.77,1211.85 1446.36,1211.85 1446.95,1211.85 1447.53,1211.85 1448.12,1211.85 1448.7,1211.85 1449.29,1211.85 1449.88,1211.85 1450.46,1211.85 1451.05,1211.85 1451.64,1211.85 1452.22,1211.85 1452.81,1211.85 1453.4,1211.85 1453.98,1211.85 1454.57,1211.85 1455.16,1211.85 1455.74,1211.85 1456.33,1211.85 1456.91,1211.85 1457.5,1211.85 1458.09,1211.85 1458.67,1211.85 1459.26,1211.85 1459.85,1211.85 1460.43,1211.85 1461.02,1211.85 1461.61,1211.85 1462.19,1211.85 1462.78,1211.85 1463.37,1211.85 1463.95,1211.85 1464.54,1211.85 1465.12,1211.85 1465.71,1211.85 1466.3,1211.85 1466.88,1211.85 1467.47,1211.85 1468.06,1211.85 1468.64,1211.85 1469.23,1211.85 1469.82,1211.85 1470.4,1211.85 1470.99,1211.85 1471.57,1211.85 1472.16,1211.85 1472.75,1211.85 1473.33,1211.85 1473.92,1211.85 1474.51,1211.85 1475.09,1211.85 1475.68,1211.85 1476.27,1211.85 1476.85,1211.85 1477.44,1211.85 1478.03,1211.85 1478.61,1211.85 1479.2,1211.85 1479.78,1211.85 1480.37,1211.85 1480.96,1211.85 1481.54,1211.85 1482.13,1211.85 1482.72,1211.85 1483.3,1211.85 1483.89,1211.85 1484.48,1211.85 1485.06,1211.85 1485.65,1211.85 1486.24,1211.85 1486.82,1211.85 1487.41,1211.85 1487.99,1211.85 1488.58,1211.85 1489.17,1211.85 1489.75,1211.85 1490.34,1211.85 1490.93,1211.85 1491.51,1211.85 1492.1,1211.85 1492.69,1211.85 1493.27,1211.85 1493.86,1211.85 1494.45,1211.85 1495.03,1211.85 1495.62,1211.85 1496.2,1211.85 1496.79,1211.85 1497.38,1211.85 1497.96,1211.85 1498.55,1211.85 1499.14,1211.85 1499.72,1211.85 1500.31,1211.85 1500.9,1211.85 1501.48,1211.85 1502.07,1211.85 1502.65,1211.85 1503.24,1211.85 1503.83,1211.85 1504.41,1211.85 1505,1211.85 1505.59,1211.85 1506.17,1211.85 1506.76,1211.85 1507.35,1211.85 1507.93,1211.85 1508.52,1211.85 1509.11,1211.85 1509.69,1211.85 1510.28,1211.85 1510.86,1211.85 1511.45,1211.85 1512.04,1211.85 1512.62,1211.85 1513.21,1211.85 1513.8,1211.85 1514.38,1211.85 1514.97,1211.85 1515.56,1211.85 1516.14,1211.85 1516.73,1211.85 1517.32,1211.85 1517.9,1211.85 1518.49,1211.85 1519.07,1211.85 1519.66,1211.85 1520.25,1211.85 1520.83,1211.85 1521.42,1211.85 1522.01,1211.85 1522.59,1211.85 1523.18,1211.85 1523.77,1211.85 1524.35,1211.85 1524.94,1211.85 1525.52,1211.85 1526.11,1211.85 1526.7,1211.85 1527.28,1211.85 1527.87,1211.85 1528.46,1211.85 1529.04,1211.85 1529.63,1211.85 1530.22,1211.85 1530.8,1211.85 1531.39,1211.85 1531.98,1211.85 1532.56,1211.85 1533.15,1211.85 1533.73,1211.85 1534.32,1211.85 1534.91,1211.85 1535.49,1211.85 1536.08,1211.85 1536.67,1211.85 1537.25,1211.85 1537.84,1211.85 1538.43,1211.85 1539.01,1211.85 1539.6,1211.85 1540.19,1211.85 1540.77,1211.85 1541.36,1211.85 1541.94,1211.85 1542.53,1211.85 1543.12,1211.85 1543.7,1211.85 1544.29,1211.85 1544.88,1211.85 1545.46,1211.85 1546.05,1211.85 1546.64,1211.85 1547.22,1211.85 1547.81,1211.85 1548.4,1211.85 1548.98,1211.85 1549.57,1211.85 1550.15,1211.85 1550.74,1211.85 1551.33,1211.85 1551.91,1211.85 1552.5,1211.85 1553.09,1211.85 1553.67,1211.85 1554.26,1211.85 1554.85,1211.85 1555.43,1211.85 1556.02,1211.85 1556.6,1211.85 1557.19,1211.85 1557.78,1211.85 1558.36,1211.85 1558.95,1211.85 1559.54,1211.85 1560.12,1211.85 1560.71,1211.85 1561.3,1211.85 1561.88,1211.85 1562.47,1211.85 1563.06,1211.85 1563.64,1211.85 1564.23,1211.85 1564.81,1211.85 1565.4,1211.85 1565.99,1211.85 1566.57,1211.85 1567.16,1211.85 1567.75,1211.85 1568.33,1211.85 1568.92,1211.85 1569.51,1211.85 1570.09,1211.85 1570.68,1211.85 1571.27,1211.85 1571.85,1211.85 1572.44,1211.85 1573.02,1211.85 1573.61,1211.85 1574.2,1211.85 1574.78,1211.85 1575.37,1211.85 1575.96,1211.85 1576.54,1211.85 1577.13,1211.85 1577.72,1211.85 1578.3,1211.85 1578.89,1211.85 1579.47,1211.85 1580.06,1211.85 1580.65,1211.85 1581.23,1211.85 1581.82,1211.85 1582.41,1211.85 1582.99,1211.85 1583.58,1211.85 1584.17,1211.85 1584.75,1211.85 1585.34,1211.85 1585.93,1211.85 1586.51,1211.85 1587.1,1211.85 1587.68,1211.85 1588.27,1211.85 1588.86,1211.85 1589.44,1211.85 1590.03,1211.85 1590.62,1211.85 1591.2,1211.85 1591.79,1211.85 1592.38,1211.85 1592.96,1211.85 1593.55,1211.85 1594.14,1211.85 1594.72,1211.85 1595.31,1211.85 1595.89,1211.85 1596.48,1211.85 1597.07,1211.85 1597.65,1211.85 1598.24,1211.85 1598.83,1211.85 1599.41,1211.85 1600,1211.85 1600.59,1211.85 1601.17,1211.85 1601.76,1211.85 1602.34,1211.85 1602.93,1211.85 1603.52,1211.85 1604.1,1211.85 1604.69,1211.85 1605.28,1211.85 1605.86,1211.85 1606.45,1211.85 1607.04,1211.85 1607.62,1211.85 1608.21,1211.85 1608.8,1211.85 1609.38,1211.85 1609.97,1211.85 1610.55,1211.85 1611.14,1211.85 1611.73,1211.85 1612.31,1211.85 1612.9,1211.85 1613.49,1211.85 1614.07,1211.85 1614.66,1211.85 1615.25,1211.85 1615.83,1211.85 1616.42,1211.85 1617.01,1211.85 1617.59,1211.85 1618.18,1211.85 1618.76,1211.85 1619.35,1211.85 1619.94,1211.85 1620.52,1211.85 1621.11,1211.85 1621.7,1211.85 1622.28,1211.85 1622.87,1211.85 1623.46,1211.85 1624.04,1211.85 1624.63,1211.85 1625.22,1211.85 1625.8,1211.85 1626.39,1211.85 1626.97,1211.85 1627.56,1211.85 1628.15,1211.85 1628.73,1211.85 1629.32,1211.85 1629.91,1211.85 1630.49,1211.85 1631.08,1211.85 1631.67,1211.85 1632.25,1211.85 1632.84,1211.85 1633.42,1211.85 1634.01,1211.85 1634.6,1211.85 1635.18,1211.85 1635.77,1211.85 1636.36,1211.85 1636.94,1211.85 1637.53,1211.85 1638.12,1211.85 1638.7,1211.85 1639.29,1211.85 1639.88,1211.85 1640.46,1211.85 1641.05,1211.85 1641.63,1211.85 1642.22,1211.85 1642.81,1211.85 1643.39,1211.85 1643.98,1211.85 1644.57,1211.85 1645.15,1211.85 1645.74,1211.85 1646.33,1211.85 1646.91,1211.85 1647.5,1211.85 1648.09,1211.85 1648.67,1211.85 1649.26,1211.85 1649.84,1211.85 1650.43,1211.85 1651.02,1211.85 1651.6,1211.85 1652.19,1211.85 1652.78,1211.85 1653.36,1211.85 1653.95,1211.85 1654.54,1211.85 1655.12,1211.85 1655.71,1211.85 1656.29,1211.85 1656.88,1211.85 1657.47,1211.85 1658.05,1211.85 1658.64,1211.85 1659.23,1211.85 1659.81,1211.85 1660.4,1211.85 1660.99,1211.85 1661.57,1211.85 1662.16,1211.85 1662.75,1211.85 1663.33,1211.85 1663.92,1211.85 1664.5,1211.85 1665.09,1211.85 1665.68,1211.85 1666.26,1211.85 1666.85,1211.85 1667.44,1211.85 1668.02,1211.85 1668.61,1211.85 1669.2,1211.85 1669.78,1211.85 1670.37,1211.85 1670.96,1211.85 1671.54,1211.85 1672.13,1211.85 1672.71,1211.85 1673.3,1211.85 1673.89,1211.85 1674.47,1211.85 1675.06,1211.85 1675.65,1211.85 1676.23,1211.85 1676.82,1211.85 1677.41,1211.85 1677.99,1211.85 1678.58,1211.85 1679.17,1211.85 1679.75,1211.85 1680.34,1211.85 1680.92,1211.85 1681.51,1211.85 1682.1,1211.85 1682.68,1211.85 1683.27,1211.85 1683.86,1211.85 1684.44,1211.85 1685.03,1211.85 1685.62,1211.85 1686.2,1211.85 1686.79,1211.85 1687.37,1211.85 1687.96,1211.85 1688.55,1211.85 1689.13,1211.85 1689.72,1211.85 1690.31,1211.85 1690.89,1211.85 1691.48,1211.85 1692.07,1211.85 1692.65,1211.85 1693.24,1211.85 1693.83,1211.85 1694.41,1211.85 1695,1211.85 1695.58,1211.85 1696.17,1211.85 1696.76,1211.85 1697.34,1211.85 1697.93,1211.85 1698.52,1211.85 1699.1,1211.85 1699.69,1211.85 1700.28,1211.85 1700.86,1211.85 1701.45,1211.85 1702.04,1211.85 1702.62,1211.85 1703.21,1211.85 1703.79,1211.85 1704.38,1211.85 1704.97,1211.85 1705.55,1211.85 1706.14,1211.85 1706.73,1211.85 1707.31,1211.85 1707.9,1211.85 1708.49,1211.85 1709.07,1211.85 1709.66,1211.85 1710.24,1211.85 1710.83,1211.85 1711.42,1211.85 1712,1211.85 1712.59,1211.85 1713.18,1211.85 1713.76,1211.85 1714.35,1211.85 1714.94,1211.85 1715.52,1211.85 1716.11,1211.85 1716.7,1211.85 1717.28,1211.85 1717.87,1211.85 1718.45,1211.85 1719.04,1211.85 1719.63,1211.85 1720.21,1211.85 1720.8,1211.85 1721.39,1211.85 1721.97,1211.85 1722.56,1211.85 1723.15,1211.85 1723.73,1211.85 1724.32,1211.85 1724.91,1211.85 1725.49,1211.85 1726.08,1211.85 1726.66,1211.85 1727.25,1211.85 1727.84,1211.85 1728.42,1211.85 1729.01,1211.85 1729.6,1211.85 1730.18,1211.85 1730.77,1211.85 1731.36,1211.85 1731.94,1211.85 1732.53,1211.85 1733.11,1211.85 1733.7,1211.85 1734.29,1211.85 1734.87,1211.85 1735.46,1211.85 1736.05,1211.85 1736.63,1211.85 1737.22,1211.85 1737.81,1211.85 1738.39,1211.85 1738.98,1211.85 1739.57,1211.85 1740.15,1211.85 1740.74,1211.85 1741.32,1211.85 1741.91,1211.85 1742.5,1211.85 1743.08,1211.85 1743.67,1211.85 1744.26,1211.85 1744.84,1211.85 1745.43,1211.85 1746.02,1211.85 1746.6,1211.85 1747.19,1211.85 1747.78,1211.85 1748.36,1211.85 1748.95,1211.85 1749.53,1211.85 1750.12,1211.85 1750.71,1211.85 1751.29,1211.85 1751.88,1211.85 1752.47,1211.85 1753.05,1211.85 1753.64,1211.85 1754.23,1211.85 1754.81,1211.85 1755.4,1211.85 1755.99,1211.85 1756.57,1211.85 1757.16,1211.85 1757.74,1211.85 1758.33,1211.85 1758.92,1211.85 1759.5,1211.85 1760.09,1211.85 1760.68,1211.85 1761.26,1211.85 1761.85,1211.85 1762.44,1211.85 1763.02,1211.85 1763.61,1211.85 1764.19,1211.85 1764.78,1211.85 1765.37,1211.85 1765.95,1211.85 1766.54,1211.85 1767.13,1211.85 1767.71,1211.85 1768.3,1211.85 1768.89,1211.85 1769.47,1211.85 1770.06,1211.85 1770.65,1211.85 1771.23,1211.85 1771.82,1211.85 1772.4,1211.85 1772.99,1211.85 1773.58,1211.85 1774.16,1211.85 1774.75,1211.85 1775.34,1211.85 1775.92,1211.85 1776.51,1211.85 1777.1,1211.85 1777.68,1211.85 1778.27,1211.85 1778.86,1211.85 1779.44,1211.85 1780.03,1211.85 1780.61,1211.85 1781.2,1211.85 1781.79,1211.85 1782.37,1211.85 1782.96,1211.85 1783.55,1211.85 1784.13,1211.85 1784.72,1211.85 1785.31,1211.85 1785.89,1211.85 1786.48,1211.85 1787.06,1211.85 1787.65,1211.85 1788.24,1211.85 1788.82,1211.85 1789.41,1211.85 1790,1211.85 1790.58,1211.85 1791.17,1211.85 1791.76,1211.85 1792.34,1211.85 1792.93,1211.85 1793.52,1211.85 1794.1,1211.85 1794.69,1211.85 1795.27,1211.85 1795.86,1211.85 1796.45,1211.85 1797.03,1211.85 1797.62,1211.85 1798.21,1211.85 1798.79,1211.85 1799.38,1211.85 1799.97,1211.85 1800.55,1211.85 1801.14,1211.85 1801.73,1211.85 1802.31,1211.85 1802.9,1211.85 1803.48,1211.85 1804.07,1211.85 1804.66,1211.85 1805.24,1211.85 1805.83,1211.85 1806.42,1211.85 1807,1211.85 1807.59,1211.85 1808.18,1211.85 1808.76,1211.85 1809.35,1211.85 1809.94,1211.85 1810.52,1211.85 1811.11,1211.85 1811.69,1211.85 1812.28,1211.85 1812.87,1211.85 1813.45,1211.85 1814.04,1211.85 1814.63,1211.85 1815.21,1211.85 1815.8,1211.85 1816.39,1211.85 1816.97,1211.85 1817.56,1211.85 1818.14,1211.85 1818.73,1211.85 1819.32,1211.85 1819.9,1211.85 1820.49,1211.85 1821.08,1211.85 1821.66,1211.85 1822.25,1211.85 1822.84,1211.85 1823.42,1211.85 1824.01,1211.85 1824.6,1211.85 1825.18,1211.85 1825.77,1211.85 1826.35,1211.85 1826.94,1211.85 1827.53,1211.85 1828.11,1211.85 1828.7,1211.85 1829.29,1211.85 1829.87,1211.85 1830.46,1211.85 1831.05,1211.85 1831.63,1211.85 1832.22,1211.85 1832.81,1211.85 1833.39,1211.85 1833.98,1211.85 1834.56,1211.85 1835.15,1211.85 1835.74,1211.85 1836.32,1211.85 1836.91,1211.85 1837.5,1211.85 1838.08,1211.85 1838.67,1211.85 1839.26,1211.85 1839.84,1211.85 1840.43,1211.85 1841.01,1211.85 1841.6,1211.85 1842.19,1211.85 1842.77,1211.85 1843.36,1211.85 1843.95,1211.85 1844.53,1211.85 1845.12,1211.85 1845.71,1211.85 1846.29,1211.85 1846.88,1211.85 1847.47,1211.85 1848.05,1211.85 1848.64,1211.85 1849.22,1211.85 1849.81,1211.85 1850.4,1211.85 1850.98,1211.85 1851.57,1211.85 1852.16,1211.85 1852.74,1211.85 1853.33,1211.85 1853.92,1211.85 1854.5,1211.85 1855.09,1211.85 1855.68,1211.85 1856.26,1211.85 1856.85,1211.85 1857.43,1211.85 1858.02,1211.85 1858.61,1211.85 1859.19,1211.85 1859.78,1211.85 1860.37,1211.85 1860.95,1211.85 1861.54,1211.85 1862.13,1211.85 1862.71,1211.85 1863.3,1211.85 1863.88,1211.85 1864.47,1211.85 1865.06,1211.85 1865.64,1211.85 1866.23,1211.85 1866.82,1211.85 1867.4,1211.85 1867.99,1211.85 1868.58,1211.85 1869.16,1211.85 1869.75,1211.85 1870.34,1211.85 1870.92,1211.85 1871.51,1211.85 1872.09,1211.85 1872.68,1211.85 1873.27,1211.85 1873.85,1211.85 1874.44,1211.85 1875.03,1211.85 1875.61,1211.85 1876.2,1211.85 1876.79,1211.85 1877.37,1211.85 1877.96,1211.85 1878.55,1211.85 1879.13,1211.85 1879.72,1211.85 1880.3,1211.85 1880.89,1211.85 1881.48,1211.85 1882.06,1211.85 1882.65,1211.85 1883.24,1211.85 1883.82,1211.85 1884.41,1211.85 1885,1211.85 1885.58,1211.85 1886.17,1211.85 1886.76,1211.85 1887.34,1211.85 1887.93,1211.85 1888.51,1211.85 1889.1,1211.85 1889.69,1211.85 1890.27,1211.85 1890.86,1211.85 1891.45,1211.85 1892.03,1211.85 1892.62,1211.85 1893.21,1211.85 1893.79,1211.85 1894.38,1211.85 1894.96,1211.85 1895.55,1211.85 1896.14,1211.85 1896.72,1211.85 1897.31,1211.85 1897.9,1211.85 1898.48,1211.85 1899.07,1211.85 1899.66,1211.85 1900.24,1211.85 1900.83,1211.85 1901.42,1211.85 1902,1211.85 1902.59,1211.85 1903.17,1211.85 1903.76,1211.85 1904.35,1211.85 1904.93,1211.85 1905.52,1211.85 1906.11,1211.85 1906.69,1211.85 1907.28,1211.85 1907.87,1211.85 1908.45,1211.85 1909.04,1211.85 1909.63,1211.85 1910.21,1211.85 1910.8,1211.85 1911.38,1211.85 1911.97,1211.85 1912.56,1211.85 1913.14,1211.85 1913.73,1211.85 1914.32,1211.85 1914.9,1211.85 1915.49,1211.85 1916.08,1211.85 1916.66,1211.85 1917.25,1211.85 1917.83,1211.85 1918.42,1211.85 1919.01,1211.85 1919.59,1211.85 1920.18,1211.85 1920.77,1211.85 1921.35,1211.85 1921.94,1211.85 1922.53,1211.85 1923.11,1211.85 1923.7,1211.85 1924.29,1211.85 1924.87,1211.85 1925.46,1211.85 1926.04,1211.85 1926.63,1211.85 1927.22,1211.85 1927.8,1211.85 1928.39,1211.85 1928.98,1211.85 1929.56,1211.85 1930.15,1211.85 1930.74,1211.85 1931.32,1211.85 1931.91,1211.85 1932.5,1211.85 1933.08,1211.85 1933.67,1211.85 1934.25,1211.85 1934.84,1211.85 1935.43,1211.85 1936.01,1211.85 1936.6,1211.85 1937.19,1211.85 1937.77,1211.85 1938.36,1211.85 1938.95,1211.85 1939.53,1211.85 1940.12,1211.85 1940.71,1211.85 1941.29,1211.85 1941.88,1211.85 1942.46,1211.85 1943.05,1211.85 1943.64,1211.85 1944.22,1211.85 1944.81,1211.85 1945.4,1211.85 1945.98,1211.85 1946.57,1211.85 1947.16,1211.85 1947.74,1211.85 1948.33,1211.85 1948.91,1211.85 1949.5,1211.85 1950.09,1211.85 1950.67,1211.85 1951.26,1211.85 1951.85,1211.85 1952.43,1211.85 1953.02,1211.85 1953.61,1211.85 1954.19,1211.85 1954.78,1211.85 1955.37,1211.85 1955.95,1211.85 1956.54,1211.85 1957.12,1211.85 1957.71,1211.85 1958.3,1211.85 1958.88,1211.85 1959.47,1211.85 1960.06,1211.85 1960.64,1211.85 1961.23,1211.85 1961.82,1211.85 1962.4,1211.85 1962.99,1211.85 1963.58,1211.85 1964.16,1211.85 1964.75,1211.85 1965.33,1211.85 1965.92,1211.85 1966.51,1211.85 1967.09,1211.85 1967.68,1211.85 1968.27,1211.85 1968.85,1211.85 1969.44,1211.85 1970.03,1211.85 1970.61,1211.85 1971.2,1211.85 1971.78,1211.85 1972.37,1211.85 1972.96,1211.85 1973.54,1211.85 1974.13,1211.85 1974.72,1211.85 1975.3,1211.85 1975.89,1211.85 1976.48,1211.85 1977.06,1211.85 1977.65,1211.85 1978.24,1211.85 1978.82,1211.85 1979.41,1211.85 1979.99,1211.85 1980.58,1211.85 1981.17,1211.85 1981.75,1211.85 1982.34,1211.85 1982.93,1211.85 1983.51,1211.85 1984.1,1211.85 1984.69,1211.85 1985.27,1211.85 1985.86,1211.85 1986.45,1211.85 1987.03,1211.85 1987.62,1211.85 1988.2,1211.85 1988.79,1211.85 1989.38,1211.85 1989.96,1211.85 1990.55,1211.85 1991.14,1211.85 1991.72,1211.85 1992.31,1211.85 1992.9,1211.85 1993.48,1211.85 1994.07,1211.85 1994.65,1211.85 1995.24,1211.85 1995.83,1211.85 1996.41,1211.85 1997,1211.85 1997.59,1211.85 1998.17,1211.85 1998.76,1211.85 1999.35,1211.85 1999.93,1211.85 2000.52,1211.85 2001.11,1211.85 2001.69,1211.85 2002.28,1211.85 2002.86,1211.85 2003.45,1211.85 2004.04,1211.85 2004.62,1211.85 2005.21,1211.85 2005.8,1211.85 2006.38,1211.85 2006.97,1211.85 2007.56,1211.85 2008.14,1211.85 2008.73,1211.85 2009.32,1211.85 2009.9,1211.85 2010.49,1211.85 2011.07,1211.85 2011.66,1211.85 2012.25,1211.85 2012.83,1211.85 2013.42,1211.85 2014.01,1211.85 2014.59,1211.85 2015.18,1211.85 2015.77,1211.85 2016.35,1211.85 2016.94,1211.85 2017.53,1211.85 2018.11,1211.85 2018.7,1211.85 2019.28,1211.85 2019.87,1211.85 2020.46,1211.85 2021.04,1211.85 2021.63,1211.85 2022.22,1211.85 2022.8,1211.85 2023.39,1211.85 2023.98,1211.85 2024.56,1211.85 2025.15,1211.85 2025.73,1211.85 2026.32,1211.85 2026.91,1211.85 2027.49,1211.85 2028.08,1211.85 2028.67,1211.85 2029.25,1211.85 2029.84,1211.85 2030.43,1211.85 2031.01,1211.85 2031.6,1211.85 2032.19,1211.85 2032.77,1211.85 2033.36,1211.85 2033.94,1211.85 2034.53,1211.85 2035.12,1211.85 2035.7,1211.85 2036.29,1211.85 2036.88,1211.85 2037.46,1211.85 2038.05,1211.85 2038.64,1211.85 2039.22,1211.85 2039.81,1211.85 2040.4,1211.85 2040.98,1211.85 2041.57,1211.85 2042.15,1211.85 2042.74,1211.85 2043.33,1211.85 2043.91,1211.85 2044.5,1211.85 2045.09,1211.85 2045.67,1211.85 2046.26,1211.85 2046.85,1211.85 2047.43,1211.85 2048.02,1211.85 2048.6,1211.85 2049.19,1211.85 2049.78,1211.85 2050.36,1211.85 2050.95,1211.85 2051.54,1211.85 2052.12,1211.85 2052.71,1211.85 2053.3,1211.85 2053.88,1211.85 2054.47,1211.85 2055.06,1211.85 2055.64,1211.85 2056.23,1211.85 2056.81,1211.85 2057.4,1211.85 2057.99,1211.85 2058.57,1211.85 2059.16,1211.85 2059.75,1211.85 2060.33,1211.85 2060.92,1211.85 2061.51,1211.85 2062.09,1211.85 2062.68,1211.85 2063.27,1211.85 2063.85,1211.85 2064.44,1211.85 2065.02,1211.85 2065.61,1211.85 2066.2,1211.85 2066.78,1211.85 2067.37,1211.85 2067.96,1211.85 2068.54,1211.85 2069.13,1211.85 2069.72,1211.85 2070.3,1211.85 2070.89,1211.85 2071.48,1211.85 2072.06,1211.85 2072.65,1211.85 2073.23,1211.85 2073.82,1211.85 2074.41,1211.85 2074.99,1211.85 2075.58,1211.85 2076.17,1211.85 2076.75,1211.85 2077.34,1211.85 2077.93,1211.85 2078.51,1211.85 2079.1,1211.85 2079.68,1211.85 2080.27,1211.85 2080.86,1211.85 2081.44,1211.85 2082.03,1211.85 2082.62,1211.85 2083.2,1211.85 2083.79,1211.85 2084.38,1211.85 2084.96,1211.85 2085.55,1211.85 2086.14,1211.85 2086.72,1211.85 2087.31,1211.85 2087.89,1211.85 2088.48,1211.85 2089.07,1211.85 2089.65,1211.85 2090.24,1211.85 2090.83,1211.85 2091.41,1211.85 2092,1211.85 2092.59,1211.85 2093.17,1211.85 2093.76,1211.85 2094.35,1211.85 2094.93,1211.85 2095.52,1211.85 2096.1,1211.85 2096.69,1211.85 2097.28,1211.85 2097.86,1211.85 2098.45,1211.85 2099.04,1211.85 2099.62,1211.85 2100.21,1211.85 2100.8,1211.85 2101.38,1211.85 2101.97,1211.85 2102.55,1211.85 2103.14,1211.85 2103.73,1211.85 2104.31,1211.85 2104.9,1211.85 2105.49,1211.85 2106.07,1211.85 2106.66,1211.85 2107.25,1211.85 2107.83,1211.85 2108.42,1211.85 2109.01,1211.85 2109.59,1211.85 2110.18,1211.85 2110.76,1211.85 2111.35,1211.85 2111.94,1211.85 2112.52,1211.85 2113.11,1211.85 2113.7,1211.85 2114.28,1211.85 2114.87,1211.85 2115.46,1211.85 2116.04,1211.85 2116.63,1211.85 2117.22,1211.85 2117.8,1211.85 2118.39,1211.85 2118.97,1211.85 2119.56,1211.85 2120.15,1211.85 2120.73,1211.85 2121.32,1211.85 2121.91,1211.85 2122.49,1211.85 2123.08,1211.85 2123.67,1211.85 2124.25,1211.85 2124.84,1211.85 2125.42,1211.85 2126.01,1211.85 2126.6,1211.85 2127.18,1211.85 2127.77,1211.85 2128.36,1211.85 2128.94,1211.85 2129.53,1211.85 2130.12,1211.85 2130.7,1211.85 2131.29,1211.85 2131.88,1211.85 2132.46,1211.85 2133.05,1211.85 2133.63,1211.85 2134.22,1211.85 2134.81,1211.85 2135.39,1211.85 2135.98,1211.85 2136.57,1211.85 2137.15,1211.85 2137.74,1211.85 2138.33,1211.85 2138.91,1211.85 2139.5,1211.85 2140.09,1211.85 2140.67,1211.85 2141.26,1211.85 2141.84,1211.85 2142.43,1211.85 2143.02,1211.85 2143.6,1211.85 2144.19,1211.85 2144.78,1211.85 2145.36,1211.85 2145.95,1211.85 2146.54,1211.85 2147.12,1211.85 2147.71,1211.85 2148.3,1211.85 2148.88,1211.85 2149.47,1211.85 2150.05,1211.85 2150.64,1211.85 2151.23,1211.85 2151.81,1211.85 2152.4,1211.85 2152.99,1211.85 2153.57,1211.85 2154.16,1211.85 2154.75,1211.85 2155.33,1211.85 2155.92,1211.85 2156.5,1211.85 2157.09,1211.85 2157.68,1211.85 2158.26,1211.85 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.96,1191.84 1399.47,899.083 \"/>\n<polyline clip-path=\"url(#clip502)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.31 985.439,1191.84 2158.26,1191.84 2158.26,1231.31 985.439,1231.31 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip500)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip503\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip500)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip500)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip500)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip503)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-4871.05 163.792,-5860.28 164.351,-5549.51 164.91,-6461.24 165.469,-7267.59 166.029,-6959.96 166.588,-6720.38 167.147,-6558.96 167.706,-7265.49 168.266,-7140.12 168.825,-7026.05 169.384,-7644.35 169.943,-8178.34 170.503,-8060.9 171.062,-8539.7 171.621,-8944.06 172.18,-9326.8 172.74,-9158.89 173.299,-9443.32 173.858,-9711.68 174.417,-9927.42 174.977,-10131.2 175.536,-10296.3 176.095,-10087.3 176.655,-9905.59 177.214,-9427.65 177.773,-9272.48 178.332,-9118.67 178.892,-8971.43 179.451,-9078.24 180.01,-9149.65 180.569,-9186.16 181.129,-9013.76 181.688,-9037.66 182.247,-8689.2 182.806,-8528.04 183.366,-8541.98 183.925,-8526.17 184.484,-8343.03 185.043,-7889.19 185.603,-7872.45 186.162,-7848.95 186.721,-7801.52 187.28,-7636.68 187.84,-7574.14 188.399,-7293.8 188.958,-7123.48 189.517,-7046.08 190.077,-6795.13 190.636,-6640.6 191.195,-6394.03 191.754,-6151.74 192.314,-6083.27 192.873,-5713.14 193.432,-5446.2 193.991,-5387.85 194.551,-5265.51 195.11,-5201.29 195.669,-5072.33 196.228,-4944.31 196.788,-4763.56 197.347,-4641.13 197.906,-4578 198.465,-4514.06 199.025,-4341.07 199.584,-4130.91 200.143,-4015.49 200.702,-3945.24 201.262,-3883.12 201.821,-3691.21 202.38,-3538.62 202.939,-3390.19 203.499,-3323.49 204.058,-3105.03 204.617,-3008.72 205.176,-2911.35 205.736,-2780.98 206.295,-2690.48 206.854,-2604.71 207.413,-2546.97 207.973,-2454.76 208.532,-2371.23 209.091,-2255.01 209.65,-2169.51 210.21,-2120.36 210.769,-2011.02 211.328,-1925.57 211.887,-1844.57 212.447,-1737.14 213.006,-1631.73 213.565,-1509.12 214.124,-1383.52 214.684,-1321.94 215.243,-1207.38 215.802,-1144.29 216.361,-1059.45 216.921,-1003.47 217.48,-944.955 218.039,-891.374 218.598,-813.249 219.158,-787.709 219.717,-735.903 220.276,-658.903 220.835,-633.796 221.395,-607.483 221.954,-603.583 222.513,-574.515 223.072,-477.821 223.632,-402.664 224.191,-333.39 224.75,-311.945 225.309,-268.629 225.869,-269.672 226.428,-222.863 226.987,-182.096 227.546,-96.7009 228.106,-9.16404 228.665,89.8274 229.224,109.102 229.783,139.766 230.343,176.422 230.902,191.573 231.461,223.566 232.02,233.883 232.58,287.888 233.139,356.245 233.698,361.223 234.257,410.472 234.817,416.614 235.376,423.14 235.935,411.859 236.494,459.802 237.054,470.381 237.613,494.417 238.172,557.668 238.731,583.401 239.291,585.183 239.85,647.008 240.409,630.553 240.968,670.747 241.528,692.22 242.087,709.247 242.646,672.611 243.205,694.552 243.765,715.397 244.324,734.016 244.883,750.508 245.442,765.452 246.002,783.428 246.561,820.024 247.12,836.261 247.679,813.719 248.239,845.397 248.798,909.408 249.357,938.918 249.916,950.8 250.476,977.206 251.035,966.737 251.594,973.6 252.153,1020.71 252.713,1028.51 253.272,1018.16 253.831,1043.41 254.39,1031.26 254.95,989.652 255.509,978.838 256.068,952.267 256.627,945.705 257.187,934.752 257.746,948.181 258.305,940.88 258.864,933.338 259.424,945.433 259.983,958.347 260.542,953.2 261.101,948.796 261.661,941.793 262.22,952.638 262.779,948.724 263.338,965.034 263.898,977.923 264.457,954.863 265.016,951.944 265.575,947.39 266.135,963.161 266.694,924.083 267.253,910.401 267.812,931.174 268.372,929.328 268.931,930.191 269.49,944.079 270.049,958.452 270.609,1002.92 271.168,981.858 271.727,979.642 272.286,1024.77 272.846,1052.99 273.405,1096.55 273.964,1101.87 274.523,1088.18 275.083,1060.77 275.642,1054.14 276.201,1079.1 276.76,1068.52 277.32,1059.96 277.879,1053.04 278.438,1028.49 278.997,1035.22 279.557,1023.21 280.116,1036.13 280.675,1047.09 281.234,1003.04 281.794,1028.52 282.353,1037.79 282.912,1078.87 283.471,1073.53 284.031,1080.92 284.59,1089.25 285.149,1078.44 285.708,1050.64 286.268,1026.08 286.827,1033.44 287.386,1027.53 287.945,1006.92 288.505,982.544 289.064,960.042 289.623,974.454 290.182,1002.93 290.742,1012.46 291.301,1007.05 291.86,1016.82 292.419,1009.21 292.979,968.036 293.538,963.387 294.097,958.716 294.656,971.745 295.216,970.98 295.775,931.256 296.334,993.636 296.893,991.849 297.453,989.34 298.012,1034.75 298.571,1023.67 299.13,1015.37 299.69,1006.24 300.249,994.825 300.808,975.59 301.368,925.136 301.927,937.051 302.486,969.646 303.045,982.319 303.605,994.552 304.164,1007.89 304.723,1051.7 305.282,1042.88 305.842,1017.08 306.401,1073.52 306.96,1077.7 307.519,1100.95 308.079,1106.18 308.638,1079.9 309.197,1083.52 309.756,1103.59 310.316,1106.79 310.875,1111.76 311.434,1083.52 311.993,1089.95 312.553,1047.26 313.112,1040.37 313.671,1045.06 314.23,1001.37 314.79,980.924 315.349,987.865 315.908,996.376 316.467,1006.35 317.027,986.279 317.586,978.536 318.145,991.006 318.704,985.913 319.264,1026.02 319.823,1049.88 320.382,1069.79 320.941,1071.95 321.501,1059.77 322.06,1052.04 322.619,1041.2 323.178,1048.28 323.738,989.158 324.297,996.402 324.856,1004.82 325.415,1045.45 325.975,1001.47 326.534,993.436 327.093,1004.87 327.652,1011.78 328.212,970.183 328.771,948.531 329.33,942.332 329.889,908.525 330.449,886.474 331.008,854.381 331.567,867.723 332.126,865.131 332.686,881.138 333.245,898.829 333.804,908.409 334.363,869.914 334.923,914.216 335.482,875.534 336.041,874.957 336.6,851.498 337.16,885.05 337.719,881.804 338.278,848.584 338.837,865.759 339.397,861.848 339.956,864.213 340.515,894.87 341.074,875.241 341.634,905.417 342.193,882.008 342.752,897.194 343.311,920.946 343.871,915.403 344.43,893.43 344.989,875.388 345.548,888.028 346.108,916.204 346.667,897.556 347.226,879.976 347.785,861.501 348.345,877.543 348.904,905.509 349.463,884.581 350.022,880.312 350.582,862.766 351.141,864.411 351.7,878.603 352.259,873.517 352.819,884.143 353.378,883.466 353.937,866.778 354.496,863.064 355.056,873.973 355.615,900.535 356.174,915.26 356.733,925.42 357.293,920.767 357.852,909.946 358.411,905.313 358.97,883.197 359.53,864.858 360.089,831.945 360.648,834.002 361.207,832.343 361.767,863 362.326,892.651 362.885,868.301 363.444,915.483 364.004,912.385 364.563,876.302 365.122,869.947 365.681,850.877 366.241,832.699 366.8,832.647 367.359,832.048 367.918,865.675 368.478,866.601 369.037,877.947 369.596,904.432 370.155,850.645 370.715,814.837 371.274,830.073 371.833,813.346 372.392,832.253 372.952,811.886 373.511,795.672 374.07,779.26 374.629,815.227 375.189,812.157 375.748,779.262 376.307,776.74 376.866,791.983 377.426,808.228 377.985,788.192 378.544,755.905 379.103,740.375 379.663,744.101 380.222,743.172 380.781,728.814 381.34,731.638 381.9,754.485 382.459,756.354 383.018,775.517 383.577,779.088 384.137,746.524 384.696,714.797 385.255,735.694 385.814,738.339 386.374,741.102 386.933,778.967 387.492,778.378 388.051,780.545 388.611,799.692 389.17,782.713 389.729,783.442 390.288,770.076 390.848,803.136 391.407,834.792 391.966,831.703 392.525,845.574 393.085,842.16 393.644,855.132 394.203,853.581 394.762,849.673 395.322,846.696 395.881,848.049 396.44,843.95 396.999,821.771 397.559,804.535 398.118,821.109 398.677,832.511 399.236,814.948 399.796,814.359 400.355,798.679 400.914,763.749 401.473,800.724 402.033,799.499 402.592,832.356 403.151,844.914 403.71,827.272 404.27,825.607 404.829,772.584 405.388,774.77 405.947,788.484 406.507,790.62 407.066,773.359 407.625,774.293 408.184,773.699 408.744,806.809 409.303,823.461 409.862,822.123 410.421,819.308 410.981,798.678 411.54,793.686 412.099,808.885 412.658,808.632 413.218,773.497 413.777,804.793 414.336,802.951 414.895,749.626 415.455,752.978 416.014,753.906 416.573,772.278 417.132,767.974 417.692,781.594 418.251,747.403 418.81,780.369 419.369,751.599 419.929,736.155 420.488,737.282 421.047,737.59 421.606,774.799 422.166,791.85 422.725,758.093 423.284,775.187 423.843,791.559 424.403,804.629 424.962,817.839 425.521,814.68 426.08,793.297 426.64,786.777 427.199,799.825 427.758,782.625 428.318,764.995 428.877,732.388 429.436,735.311 429.995,720.04 430.555,720.693 431.114,703.675 431.673,757.077 432.232,772.52 432.792,742.173 433.351,724.556 433.91,740.952 434.469,740.03 435.029,754.301 435.588,750.768 436.147,736.207 436.706,720.9 437.266,754.162 437.825,766.375 438.384,748.88 438.943,735.115 439.503,753.663 440.062,784.897 440.621,767.491 441.18,782.066 441.74,730.548 442.299,717.368 442.858,702.545 443.417,689.882 443.977,694.114 444.536,728.462 445.095,794.55 445.654,809.313 446.214,851.22 446.773,846.138 447.332,836.362 447.891,831.611 448.451,792.619 449.01,820.125 449.569,802.825 450.128,753.416 450.688,753.79 451.247,752.496 451.806,771.32 452.365,803.247 452.925,816.534 453.484,810.491 454.043,807.739 454.602,807.436 455.162,786.161 455.721,786.392 456.28,782.879 456.839,782.115 457.399,796.882 457.958,793.398 458.517,823.714 459.076,806.307 459.636,784.054 460.195,799.434 460.754,827.89 461.313,789.604 461.873,789.533 462.432,773.286 462.991,771.028 463.55,755.878 464.11,721.119 464.669,736.07 465.228,723.513 465.787,759.868 466.347,742.736 466.906,710.572 467.465,744.303 468.024,742.397 468.584,657.035 469.143,660.417 469.702,686.88 470.261,688.639 470.821,674.948 471.38,664.709 471.939,670.175 472.498,691.72 473.058,714.954 473.617,731.938 474.176,737.834 474.735,753.123 475.295,756.715 475.854,767.235 476.413,785.26 476.972,800.566 477.532,810.918 478.091,808.061 478.65,840.327 479.209,871.892 479.769,849.327 480.328,845.35 480.887,860.032 481.446,852.483 482.006,847.114 482.565,839.751 483.124,816.921 483.683,812.375 484.243,806.685 484.802,785.956 485.361,768.799 485.92,765.513 486.48,762.452 487.039,744.439 487.598,759.128 488.157,720.253 488.717,685.946 489.276,673.047 489.835,663.983 490.394,680.776 490.954,712.919 491.513,697.575 492.072,714.482 492.631,701.704 493.191,734.317 493.75,700.172 494.309,716.348 494.868,706.004 495.428,707.891 495.987,660.959 496.546,665.966 497.105,667.626 497.665,685.001 498.224,688.073 498.783,690.196 499.342,693.786 499.902,729.803 500.461,761.052 501.02,714.024 501.579,713.778 502.139,697.217 502.698,699.157 503.257,698.579 503.816,668.733 504.376,642.249 504.935,649.568 505.494,670.586 506.053,704.558 506.613,670.087 507.172,639.687 507.731,645.987 508.29,654.156 508.85,656.499 509.409,660.187 509.968,630.067 510.527,680.715 511.087,684.247 511.646,702.109 512.205,764.454 512.764,760.82 513.324,748.271 513.883,764.768 514.442,761.227 515.001,728.97 515.561,713.531 516.12,730.471 516.679,700.79 517.238,669.458 517.798,671.834 518.357,709.776 518.916,726.02 519.475,726.559 520.035,807.228 520.594,800.055 521.153,812.641 521.712,792.781 522.272,785.774 522.831,748.717 523.39,761.272 523.949,791.96 524.509,788.939 525.068,767.027 525.627,764.464 526.186,747.623 526.746,715.16 527.305,711.881 527.864,692.587 528.423,694.136 528.983,699.424 529.542,682.938 530.101,684.818 530.66,683.373 531.22,689.945 531.779,707.663 532.338,708.681 532.897,706.156 533.457,735.026 534.016,732.001 534.575,717.93 535.134,698.398 535.694,698.387 536.253,683.956 536.812,684.372 537.371,684.089 537.931,700.87 538.49,702.131 539.049,702.765 539.608,669.465 540.168,671.234 540.727,672.468 541.286,658.247 541.845,630.423 542.405,639.431 542.964,646.416 543.523,670.163 544.082,673.013 544.642,739.179 545.201,705.302 545.76,705.092 546.319,706.342 546.879,706.536 547.438,723.8 547.997,721.399 548.556,689.25 549.116,676.22 549.675,678.073 550.234,697.719 550.793,682.002 551.353,686.656 551.912,719.997 552.471,735.631 553.031,750.38 553.59,749.428 554.149,734.481 554.708,780.217 555.268,761.305 555.827,771.53 556.386,754.46 556.945,784.413 557.505,782.72 558.064,747.225 558.623,744.988 559.182,729.685 559.742,742.371 560.301,739.736 560.86,735.818 561.419,732.724 561.979,747.998 562.538,744.21 563.097,758.854 563.656,787.293 564.216,801.56 564.775,825.135 565.334,818.856 565.893,799.936 566.453,781.398 567.012,809.205 567.571,834.85 568.13,824.658 568.69,835.436 569.249,813.872 569.808,776.153 570.367,787.242 570.927,749.642 571.486,777.87 572.045,774.513 572.604,741.833 573.164,756.921 573.723,735.989 574.282,764.917 574.841,776.556 575.401,771.515 575.96,783.744 576.519,797.841 577.078,790.04 577.638,766.252 578.197,828.707 578.756,855.846 579.315,847.958 579.875,822.583 580.434,797.842 580.993,789.653 581.552,805.92 582.112,784.827 582.671,798.505 583.23,780.057 583.789,808.442 584.349,836.401 584.908,809.351 585.467,818.234 586.026,811.338 586.586,818.822 587.145,814.368 587.704,786.866 588.263,783.822 588.823,815.103 589.382,794.967 589.941,788.836 590.5,799.556 591.06,762.717 591.619,757.128 592.178,771.379 592.737,786.234 593.297,815.139 593.856,792.37 594.415,769.104 594.974,760.412 595.534,756.303 596.093,752.871 596.652,750.892 597.211,745.55 597.771,742.968 598.33,741.588 598.889,704.571 599.448,718.006 600.008,719.994 600.567,704.556 601.126,636.12 601.685,652.271 602.245,653.449 602.804,668.061 603.363,636.735 603.922,639.899 604.482,645.255 605.041,663.86 605.6,663.458 606.159,669.663 606.719,685.484 607.278,640.648 607.837,659.367 608.396,645.064 608.956,663.481 609.515,652.286 610.074,653.319 610.633,640.137 611.193,695.166 611.752,713.134 612.311,681.028 612.87,698.89 613.43,712.633 613.989,696.994 614.548,698.685 615.107,680.138 615.667,667.175 616.226,669.042 616.785,637.372 617.344,607.117 617.904,628.19 618.463,617.356 619.022,658.459 619.581,660.27 620.141,647.742 620.7,653.605 621.259,638.81 621.818,629.366 622.378,635.803 622.937,654.136 623.496,652.706 624.055,657.645 624.615,706.591 625.174,710.056 625.733,723.962 626.292,725.022 626.852,721.552 627.411,738.379 627.97,733.59 628.529,749.591 629.089,793.985 629.648,840.75 630.207,815.594 630.766,778.947 631.326,757.856 631.885,767.867 632.444,778.848 633.003,743.625 633.563,789.5 634.122,769.606 634.681,764.917 635.24,779.594 635.8,728.646 636.359,741.471 636.918,721.234 637.477,702.546 638.037,702.845 638.596,720.593 639.155,737.025 639.714,722.232 640.274,719.669 640.833,686.152 641.392,668.163 641.951,688.648 642.511,673.616 643.07,722.831 643.629,688.91 644.188,675.639 644.748,677.326 645.307,627.549 645.866,633.875 646.425,636.78 646.985,641.752 647.544,663.293 648.103,665.951 648.662,668.559 649.222,634.198 649.781,639.943 650.34,644.409 650.899,667.897 651.459,654.672 652.018,675.828 652.577,709.367 653.136,691.548 653.696,741.738 654.255,774.1 654.814,785.765 655.373,764.591 655.933,778.158 656.492,786.818 657.051,801.545 657.61,779.437 658.17,776.332 658.729,743.905 659.288,757.803 659.847,771.719 660.407,752.603 660.966,751.181 661.525,742.914 662.084,708.903 662.644,738.942 663.203,752.6 663.762,749.45 664.321,748.082 664.881,745.532 665.44,739.873 665.999,718.478 666.558,731.695 667.118,729.737 667.677,714.379 668.236,679.433 668.795,680.729 669.355,664.481 669.914,681.304 670.473,649.439 671.032,651.367 671.592,607.648 672.151,628.998 672.71,666.782 673.269,704.339 673.829,720.187 674.388,671.696 674.947,670.498 675.506,673.158 676.066,621.685 676.625,625.212 677.184,645.465 677.743,664.175 678.303,650.895 678.862,655.072 679.421,622.671 679.981,638.312 680.54,640.937 681.099,657.574 681.658,661.071 682.218,663.89 682.777,697.165 683.336,696.096 683.895,696.901 684.455,742.484 685.014,727.275 685.573,740.175 686.132,736.86 686.692,751.905 687.251,766.167 687.81,778.257 688.369,777.762 688.929,770.636 689.488,748.09 690.047,731.833 690.606,760.998 691.166,770.349 691.725,767.06 692.284,748.7 692.843,796.871 693.403,791.088 693.962,801.535 694.521,810.866 695.08,803.381 695.64,796.858 696.199,793.382 696.758,786.465 697.317,768.742 697.877,747.316 698.436,728.163 698.995,726.051 699.554,704.148 700.114,687.177 700.673,690.193 701.232,688.887 701.791,687.881 702.351,673.066 702.91,661.437 703.469,661.995 704.028,663.192 704.588,663.403 705.147,647.145 705.706,647.165 706.265,633.892 706.825,682.954 707.384,679.495 707.943,728.589 708.502,741.986 709.062,721.088 709.621,735.439 710.18,735.039 710.739,731.052 711.299,742.329 711.858,723.06 712.417,723.506 712.976,737.018 713.536,750.724 714.095,716.556 714.654,714.086 715.213,727.232 715.773,772.019 716.332,803.843 716.891,784.495 717.45,795.375 718.01,803.698 718.569,765.091 719.128,745.569 719.687,697.959 720.247,731.2 720.806,715.338 721.365,730.72 721.924,715.076 722.484,728.573 723.043,725.772 723.602,725.143 724.161,710.02 724.721,694.639 725.28,725.292 725.839,660.573 726.398,695.66 726.958,693.122 727.517,676.442 728.076,661.245 728.635,660.153 729.195,662.599 729.754,663.991 730.313,648.264 730.872,634.134 731.432,573.206 731.991,548.965 732.55,589.137 733.109,596.991 733.669,600.555 734.228,586.778 734.787,625.997 735.346,649.209 735.906,653.337 736.465,625.544 737.024,611.629 737.583,644.052 738.143,634.05 738.702,620.928 739.261,626.581 739.82,644.081 740.38,629.683 740.939,648.566 741.498,668.178 742.057,686.133 742.617,672.959 743.176,721.068 743.735,685.861 744.294,718.027 744.854,713.992 745.413,746.83 745.972,762.906 746.531,760.729 747.091,772.482 747.65,767.096 748.209,731.857 748.768,684.133 749.328,668.491 749.887,668.269 750.446,667.422 751.005,668.514 751.565,653.263 752.124,621.659 752.683,627.159 753.242,611.327 753.802,614.676 754.361,587.821 754.92,596.588 755.479,584.879 756.039,620.873 756.598,589.009 757.157,578.817 757.716,586.559 758.276,545.945 758.835,521.63 759.394,515.668 759.953,541.52 760.513,584.643 761.072,589.69 761.631,607.05 762.19,613.509 762.75,636.935 763.309,670.769 763.868,692.042 764.427,708.824 764.987,708.972 765.546,692.05 766.105,711.534 766.664,741.045 767.224,756.141 767.783,799.47 768.342,776.549 768.901,758.348 769.461,736.434 770.02,764.124 770.579,746.432 771.138,729.91 771.698,710.828 772.257,682.398 772.816,669.99 773.375,656.914 773.935,688.659 774.494,721.987 775.053,718.517 775.612,700 776.172,684.596 776.731,668.275 777.29,701.799 777.849,683.939 778.409,669.903 778.968,702.305 779.527,704.924 780.086,732.313 780.646,748.386 781.205,781.758 781.764,780.963 782.323,776.566 782.883,770.37 783.442,747.789 784.001,747.337 784.56,762.288 785.12,785.376 785.679,763.233 786.238,763.173 786.797,726.359 787.357,723.173 787.916,707.629 788.475,724.718 789.034,757.513 789.594,753.806 790.153,735.345 790.712,749.856 791.271,777.767 791.831,806.69 792.39,782.403 792.949,805.419 793.508,827.494 794.068,834.777 794.627,825.478 795.186,783.412 795.745,797.054 796.305,741.408 796.864,736.881 797.423,732.381 797.982,714.943 798.542,720.023 799.101,686.705 799.66,684.005 800.219,697.733 800.779,679.523 801.338,661.062 801.897,663.5 802.456,650.12 803.016,616.329 803.575,635.6 804.134,684.367 804.693,700.385 805.253,698.393 805.812,681.604 806.371,683.262 806.931,665.881 807.49,649.534 808.049,666.683 808.608,683.924 809.168,699.695 809.727,714.102 810.286,696.539 810.845,663.624 811.405,647.601 811.964,679.498 812.523,663.58 813.082,694.35 813.642,695.862 814.201,710.964 814.76,739.261 815.319,757.099 815.879,773.415 816.438,764.415 816.997,791.717 817.556,754.482 818.116,734.888 818.675,733.618 819.234,717.338 819.793,697.433 820.353,628.944 820.912,647.836 821.471,664.762 822.03,632.248 822.59,616.845 823.149,606.499 823.708,627.712 824.267,627.346 824.827,631.993 825.386,649.243 825.945,635.124 826.504,621.925 827.064,623.41 827.623,613.195 828.182,633.423 828.741,606.096 829.301,625.645 829.86,628.224 830.419,700.263 830.978,714.553 831.538,729.309 832.097,712.238 832.656,710.244 833.215,709.054 833.775,659.077 834.334,661.825 834.893,696.257 835.452,714.738 836.012,711.839 836.571,691.462 837.13,689.719 837.689,709.288 838.249,704.463 838.808,700.909 839.367,685.727 839.926,683.336 840.486,669.6 841.045,640.264 841.604,647.328 842.163,648.905 842.723,634.876 843.282,685.158 843.841,670.475 844.4,704.675 844.96,706.108 845.519,720.155 846.078,703.998 846.637,720.861 847.197,750.821 847.756,764.165 848.315,775.984 848.874,751.227 849.434,732.051 849.993,713.953 850.552,727.986 851.111,745.085 851.671,739.753 852.23,753.462 852.789,733.247 853.348,761.558 853.908,760.013 854.467,742.322 855.026,720.44 855.585,717.454 856.145,729.036 856.704,714.176 857.263,727.491 857.822,710.51 858.382,693.579 858.941,692.98 859.5,696.003 860.059,710.643 860.619,740.445 861.178,739.252 861.737,750.902 862.296,734.361 862.856,721.905 863.415,686.428 863.974,654.437 864.533,673.657 865.093,706.693 865.652,721.305 866.211,738.407 866.77,737.432 867.33,719.94 867.889,747.503 868.448,763.789 869.007,755.469 869.567,770.533 870.126,751.891 870.685,749.527 871.244,729.556 871.804,710.558 872.363,704.594 872.922,667.978 873.481,685.897 874.041,686.803 874.6,686.951 875.159,716.482 875.718,712.365 876.278,713.358 876.837,665.672 877.396,668.316 877.955,668.997 878.515,654.604 879.074,638.549 879.633,605.284 880.192,610.124 880.752,577.551 881.311,582.248 881.87,587.387 882.429,610.899 882.989,584.812 883.548,570.516 884.107,558.224 884.666,583.33 885.226,602.853 885.785,607.97 886.344,594.208 886.903,583.112 887.463,590.573 888.022,595.45 888.581,584.699 889.14,556.433 889.7,579.182 890.259,535.051 890.818,543.68 891.377,539.131 891.937,582.573 892.496,619.325 893.055,577.069 893.614,632.708 894.174,650.489 894.733,687.919 895.292,689.14 895.851,706.945 896.411,739.291 896.97,769.557 897.529,749.399 898.088,778.427 898.648,774.749 899.207,772.923 899.766,734.375 900.325,731.823 900.885,714.79 901.444,685.171 902.003,701.789 902.562,653.731 903.122,655.053 903.681,640.332 904.24,642.547 904.799,644.368 905.359,660.51 905.918,645.598 906.477,679.889 907.036,681.09 907.596,682.538 908.155,679.63 908.714,711.146 909.273,714.128 909.833,713.054 910.392,698.027 910.951,726.684 911.51,695.343 912.07,678.264 912.629,677.696 913.188,645.19 913.747,660.81 914.307,675.672 914.866,680.108 915.425,665.638 915.984,666.333 916.544,652.207 917.103,652.735 917.662,652.341 918.221,654.544 918.781,659.58 919.34,677.909 919.899,676.421 920.458,678.744 921.018,662.132 921.577,665.664 922.136,651.996 922.695,655.789 923.255,669.566 923.814,666.972 924.373,669.651 924.932,639.773 925.492,691.063 926.051,722.997 926.61,752.737 927.169,784.413 927.729,761.475 928.288,744.555 928.847,711.49 929.406,723.738 929.966,701.174 930.525,702.631 931.084,688.181 931.644,686.999 932.203,685.287 932.762,667.775 933.321,684.809 933.881,701.361 934.44,696.14 934.999,741.989 935.558,738.409 936.118,736.595 936.677,714.17 937.236,725.891 937.795,722.254 938.355,719.373 938.914,666.333 939.473,637.149 940.032,626.113 940.592,649.213 941.151,621.799 941.71,642.636 942.269,627.352 942.829,596.94 943.388,585.306 943.947,591.075 944.506,612.85 945.066,633.355 945.625,635.979 946.184,655.837 946.743,653.724 947.303,638.794 947.862,668.915 948.421,687.041 948.98,688.234 949.54,688.392 950.099,705.662 950.658,736.192 951.217,731.764 951.777,744.933 952.336,770.238 952.895,781.068 953.454,746.8 954.014,745.461 954.573,742.553 955.132,739.201 955.691,720.4 956.251,751.129 956.81,733.135 957.369,730.349 957.928,690.581 958.488,676.009 959.047,643.965 959.606,615.187 960.165,625.504 960.725,629.588 961.284,665.11 961.843,668.898 962.402,668.529 962.962,654.463 963.521,623.341 964.08,627.331 964.639,616.132 965.199,620.045 965.758,611.139 966.317,631.575 966.876,618.397 967.436,605.486 967.995,592.478 968.554,597.842 969.113,571.368 969.673,591.873 970.232,661.994 970.791,643.197 971.35,681.451 971.91,682.543 972.469,666.538 973.028,665.337 973.587,671.181 974.147,656.762 974.706,708.4 975.265,721.84 975.824,722.997 976.384,723.52 976.943,704.069 977.502,736.116 978.061,717.046 978.621,732.933 979.18,733.641 979.739,715.747 980.298,713.663 980.858,714.147 981.417,698.143 981.976,711.313 982.535,711.163 983.095,711.559 983.654,742.781 984.213,736.785 984.772,735.224 985.332,717.886 985.891,733.988 986.45,762.796 987.009,772.724 987.569,767.089 988.128,745.962 988.687,755.578 989.246,737.257 989.806,750.109 990.365,709.019 990.924,689.738 991.483,672.5 992.043,670.649 992.602,668.364 993.161,685.578 993.72,685.928 994.28,684.862 994.839,700.549 995.398,714.919 995.957,698.033 996.517,634.98 997.076,623.515 997.635,641.27 998.194,659.818 998.754,660.572 999.313,662.226 999.872,663.628 1000.43,662.593 1000.99,660.962 1001.55,662.448 1002.11,666.703 1002.67,688.526 1003.23,684.688 1003.79,672.474 1004.35,658.875 1004.91,692.305 1005.46,660.494 1006.02,649.241 1006.58,682.376 1007.14,682.519 1007.7,720.384 1008.26,747.767 1008.82,762.199 1009.38,744.99 1009.94,723.748 1010.5,735.996 1011.06,765.42 1011.62,779.395 1012.18,788.715 1012.73,767.35 1013.29,761.628 1013.85,739.535 1014.41,752.253 1014.97,735.086 1015.53,721.407 1016.09,717.814 1016.65,715.994 1017.21,713.813 1017.77,694.619 1018.33,677.116 1018.89,692.57 1019.45,641.798 1020.01,625.69 1020.56,613.459 1021.12,635.243 1021.68,654.192 1022.24,638.876 1022.8,643.204 1023.36,677.747 1023.92,661.103 1024.48,659.15 1025.04,678.37 1025.6,698.731 1026.16,700.473 1026.72,697.417 1027.28,662.225 1027.83,633.528 1028.39,602.908 1028.95,606.903 1029.51,594.012 1030.07,609.983 1030.63,599.201 1031.19,619.663 1031.75,608.697 1032.31,610.14 1032.87,630.564 1033.43,636.498 1033.99,638.377 1034.55,672.222 1035.1,657.602 1035.66,657.835 1036.22,664.58 1036.78,699.953 1037.34,733.178 1037.9,715.437 1038.46,698.516 1039.02,745.26 1039.58,723.08 1040.14,755.009 1040.7,767.325 1041.26,761.323 1041.82,758.4 1042.38,768.436 1042.93,779.293 1043.49,801.336 1044.05,762.174 1044.61,740.483 1045.17,753.042 1045.73,760.296 1046.29,755.341 1046.85,784.352 1047.41,767.163 1047.97,765.563 1048.53,744.789 1049.09,758.235 1049.65,767.344 1050.2,748.652 1050.76,727.914 1051.32,722.606 1051.88,717.076 1052.44,715.661 1053,728.463 1053.56,725.63 1054.12,755.83 1054.68,755.024 1055.24,787.369 1055.8,785.47 1056.36,778.999 1056.92,756.426 1057.48,735.473 1058.03,703.706 1058.59,733.712 1059.15,698.801 1059.71,666.279 1060.27,668.818 1060.83,655.243 1061.39,685.948 1061.95,671.67 1062.51,651.086 1063.07,636.576 1063.63,620.976 1064.19,638.295 1064.75,655.417 1065.3,670.577 1065.86,672.844 1066.42,687.843 1066.98,702.409 1067.54,703.275 1068.1,655.852 1068.66,647.651 1069.22,614.244 1069.78,617.989 1070.34,639.2 1070.9,642.511 1071.46,661.526 1072.02,647.429 1072.57,630.856 1073.13,602.499 1073.69,640.735 1074.25,611.034 1074.81,597.163 1075.37,620.146 1075.93,627.01 1076.49,612.722 1077.05,617.019 1077.61,620.013 1078.17,623.997 1078.73,580.204 1079.29,584.219 1079.85,605.775 1080.4,642.757 1080.96,662.418 1081.52,629.275 1082.08,630.188 1082.64,600.405 1083.2,584.42 1083.76,557.133 1084.32,563.196 1084.88,569.342 1085.44,573.656 1086,616.644 1086.56,636.289 1087.12,655.939 1087.67,656.612 1088.23,657.533 1088.79,626.585 1089.35,630.223 1089.91,614.647 1090.47,601.552 1091.03,605.744 1091.59,593.208 1092.15,582.129 1092.71,571.792 1093.27,597.244 1093.83,570.06 1094.39,576.909 1094.94,601.621 1095.5,624.784 1096.06,645.267 1096.62,646.616 1097.18,650.487 1097.74,639.573 1098.3,639.23 1098.86,657.591 1099.42,660.911 1099.98,679.788 1100.54,681.475 1101.1,684.281 1101.66,700.785 1102.22,671.612 1102.77,674.071 1103.33,693.938 1103.89,708.098 1104.45,689.415 1105.01,721.601 1105.57,734.46 1106.13,766.147 1106.69,762.494 1107.25,760.74 1107.81,740.191 1108.37,739.873 1108.93,738.421 1109.49,708.449 1110.04,721.815 1110.6,737.738 1111.16,701.525 1111.72,715.459 1112.28,740.906 1112.84,757.48 1113.4,788.36 1113.96,798.333 1114.52,790.346 1115.08,782.99 1115.64,759.742 1116.2,751.153 1116.76,779.066 1117.31,774.027 1117.87,767.971 1118.43,781.164 1118.99,775.014 1119.55,785.801 1120.11,796.019 1120.67,756.729 1121.23,751.276 1121.79,763.742 1122.35,711.931 1122.91,739.085 1123.47,709.241 1124.03,697.107 1124.59,711.138 1125.14,709.577 1125.7,708.415 1126.26,705.74 1126.82,706.969 1127.38,718.608 1127.94,706.895 1128.5,704.242 1129.06,733.468 1129.62,697.857 1130.18,697.013 1130.74,745.054 1131.3,738.571 1131.86,720.328 1132.41,718.201 1132.97,702.075 1133.53,715.611 1134.09,712.301 1134.65,713.542 1135.21,726.424 1135.77,755.69 1136.33,763.692 1136.89,776.246 1137.45,833.51 1138.01,826.604 1138.57,784.083 1139.13,779.86 1139.68,772.939 1140.24,818.954 1140.8,809.031 1141.36,784.706 1141.92,777.664 1142.48,758.492 1143.04,754.75 1143.6,784.378 1144.16,713.009 1144.72,713.805 1145.28,710.218 1145.84,704.605 1146.4,721.815 1146.96,651.313 1147.51,639.287 1148.07,588.713 1148.63,592.504 1149.19,645.26 1149.75,648.69 1150.31,683.303 1150.87,669.667 1151.43,637.723 1151.99,620.405 1152.55,637.676 1153.11,636.835 1153.67,622.026 1154.23,643.314 1154.78,660.804 1155.34,599.506 1155.9,622.98 1156.46,609.584 1157.02,595.527 1157.58,593.327 1158.14,631.396 1158.7,616.907 1159.26,569.707 1159.82,586.255 1160.38,607.275 1160.94,592.893 1161.5,566.301 1162.05,589.8 1162.61,609.009 1163.17,643.913 1163.73,679.327 1164.29,665.407 1164.85,671.088 1165.41,687.969 1165.97,670.215 1166.53,653.347 1167.09,673.25 1167.65,659.269 1168.21,611.944 1168.77,613.113 1169.33,615.529 1169.88,633.083 1170.44,604.329 1171,593.9 1171.56,564.564 1172.12,586.692 1172.68,611.62 1173.24,601.116 1173.8,606.026 1174.36,594.42 1174.92,619.879 1175.48,604.356 1176.04,627.898 1176.6,610.263 1177.15,615.105 1177.71,654.626 1178.27,673.327 1178.83,689.882 1179.39,660.693 1179.95,679.793 1180.51,696.219 1181.07,697.89 1181.63,699.336 1182.19,699.347 1182.75,778.024 1183.31,773.876 1183.87,769.561 1184.43,764.477 1184.98,712.068 1185.54,712.715 1186.1,711.522 1186.66,693.161 1187.22,646.194 1187.78,634.607 1188.34,624.532 1188.9,611.16 1189.46,601.429 1190.02,609.486 1190.58,628.693 1191.14,650.798 1191.7,650.242 1192.25,638.38 1192.81,628.184 1193.37,646.427 1193.93,648.761 1194.49,668.216 1195.05,638.162 1195.61,639.832 1196.17,641.209 1196.73,679.162 1197.29,679.254 1197.85,648.481 1198.41,635.598 1198.97,639.866 1199.52,674.027 1200.08,669.875 1200.64,653.106 1201.2,690.56 1201.76,657.669 1202.32,690.517 1202.88,672.703 1203.44,722.682 1204,784.648 1204.56,765.635 1205.12,713.881 1205.68,729.291 1206.24,726.044 1206.8,722.454 1207.35,720.099 1207.91,731.427 1208.47,728.797 1209.03,726.922 1209.59,725.303 1210.15,690.351 1210.71,643.381 1211.27,676.626 1211.83,673.88 1212.39,655.329 1212.95,688.31 1213.51,658.649 1214.07,677.918 1214.62,680.852 1215.18,666.557 1215.74,697.589 1216.3,710.275 1216.86,742.601 1217.42,757.685 1217.98,768.403 1218.54,762.271 1219.1,775.289 1219.66,771.945 1220.22,766.475 1220.78,776.151 1221.34,802.578 1221.89,799.603 1222.45,777.356 1223.01,754.63 1223.57,767.966 1224.13,779.027 1224.69,773.286 1225.25,784.91 1225.81,777.815 1226.37,738.926 1226.93,737.448 1227.49,737.664 1228.05,734.102 1228.61,716.05 1229.17,681.274 1229.72,696.794 1230.28,662.429 1230.84,663.563 1231.4,670.249 1231.96,703.848 1232.52,685.349 1233.08,684.526 1233.64,687.415 1234.2,667.481 1234.76,669.089 1235.32,621.359 1235.88,611.42 1236.44,601.32 1236.99,609.77 1237.55,632.182 1238.11,619.668 1238.67,626.157 1239.23,633.526 1239.79,622.216 1240.35,609.024 1240.91,628.603 1241.47,629.232 1242.03,633.644 1242.59,637.036 1243.15,640.362 1243.71,626.856 1244.26,600.757 1244.82,606.418 1245.38,628.804 1245.94,664.985 1246.5,682.171 1247.06,747.162 1247.62,757.691 1248.18,704.719 1248.74,701.756 1249.3,726.798 1249.86,724.466 1250.42,704.031 1250.98,702.698 1251.54,733.456 1252.09,745.545 1252.65,738.129 1253.21,689.08 1253.77,657.179 1254.33,611.438 1254.89,617.627 1255.45,621.477 1256.01,623.253 1256.57,595.163 1257.13,596.653 1257.69,581.508 1258.25,588.776 1258.81,592.746 1259.36,597.236 1259.92,618.42 1260.48,607.121 1261.04,626.507 1261.6,628.233 1262.16,649.578 1262.72,684.812 1263.28,698.398 1263.84,694.402 1264.4,694.697 1264.96,644.259 1265.52,624.998 1266.08,692.671 1266.63,694.243 1267.19,694.896 1267.75,693.429 1268.31,695.66 1268.87,678.147 1269.43,645.001 1269.99,630.531 1270.55,648.144 1271.11,668.029 1271.67,657.984 1272.23,661.947 1272.79,651.842 1273.35,651.957 1273.91,653.394 1274.46,655.714 1275.02,657.197 1275.58,642.992 1276.14,648.295 1276.7,653.515 1277.26,686.681 1277.82,673.397 1278.38,636.888 1278.94,669.711 1279.5,654.218 1280.06,655.236 1280.62,657.498 1281.18,643.955 1281.73,598.932 1282.29,600.848 1282.85,636.89 1283.41,605.185 1283.97,639.034 1284.53,606.371 1285.09,596.771 1285.65,601.091 1286.21,590.976 1286.77,616.39 1287.33,638.961 1287.89,625.466 1288.45,612.389 1289,595.647 1289.56,585.29 1290.12,589.984 1290.68,639.905 1291.24,643.556 1291.8,679.004 1292.36,709.948 1292.92,705.78 1293.48,704.4 1294.04,687.871 1294.6,672.783 1295.16,642.504 1295.72,693.11 1296.28,676.336 1296.83,688.815 1297.39,658.513 1297.95,696.451 1298.51,714.105 1299.07,713.075 1299.63,725.634 1300.19,724.344 1300.75,721.817 1301.31,720.189 1301.87,730.481 1302.43,728.408 1302.99,696.697 1303.55,696.665 1304.1,693.319 1304.66,693.941 1305.22,677.558 1305.78,708.088 1306.34,721.345 1306.9,721.6 1307.46,706.584 1308.02,736.617 1308.58,750.32 1309.14,760.083 1309.7,753.654 1310.26,749.829 1310.82,779.155 1311.38,787.327 1311.93,766.727 1312.49,760.806 1313.05,739.859 1313.61,734.7 1314.17,728.191 1314.73,675.685 1315.29,693.56 1315.85,691.862 1316.41,692.94 1316.97,709.479 1317.53,708.307 1318.09,692.156 1318.65,722.411 1319.2,703.285 1319.76,720.314 1320.32,734.144 1320.88,746.478 1321.44,744.215 1322,738.971 1322.56,737.923 1323.12,767.504 1323.68,765.643 1324.24,734.153 1324.8,728.807 1325.36,708.451 1325.92,710.681 1326.47,710.588 1327.03,741.222 1327.59,721.71 1328.15,721.736 1328.71,748.901 1329.27,796.411 1329.83,741.165 1330.39,755.349 1330.95,769.039 1331.51,763.96 1332.07,782.146 1332.63,791.321 1333.19,786.1 1333.75,766.742 1334.3,779.272 1334.86,772.4 1335.42,782.376 1335.98,778.389 1336.54,771.924 1337.1,737.589 1337.66,739.051 1338.22,735.77 1338.78,764.722 1339.34,777.805 1339.9,742.048 1340.46,773.54 1341.02,735.247 1341.57,732.619 1342.13,694.716 1342.69,677.77 1343.25,675.834 1343.81,661.876 1344.37,618.019 1344.93,620.478 1345.49,641.07 1346.05,661.725 1346.61,691.161 1347.17,674.179 1347.73,656.386 1348.29,656.138 1348.84,638.899 1349.4,627.016 1349.96,581.184 1350.52,605.34 1351.08,639.897 1351.64,655.743 1352.2,642.139 1352.76,611.699 1353.32,617.291 1353.88,620.383 1354.44,607.439 1355,610.22 1355.56,612.138 1356.12,603.143 1356.67,605.882 1357.23,626.767 1357.79,643.986 1358.35,678.105 1358.91,678.953 1359.47,695.812 1360.03,712.5 1360.59,728.789 1361.15,694.288 1361.71,725.498 1362.27,752.734 1362.83,795.683 1363.39,775.606 1363.94,785.522 1364.5,789.988 1365.06,771.141 1365.62,798.424 1366.18,807.966 1366.74,797.584 1367.3,772.336 1367.86,735.534 1368.42,729.978 1368.98,759.014 1369.54,786.652 1370.1,746.847 1370.66,777.301 1371.21,775.218 1371.77,753.877 1372.33,766.732 1372.89,776.704 1373.45,789.036 1374.01,771.567 1374.57,751.527 1375.13,781.398 1375.69,791.993 1376.25,786.267 1376.81,779.488 1377.37,711.728 1377.93,696.823 1378.49,730.07 1379.04,744.838 1379.6,743.074 1380.16,752.752 1380.72,735.405 1381.28,731.583 1381.84,742.926 1382.4,725.173 1382.96,686.7 1383.52,684.664 1384.08,635.795 1384.64,671.112 1385.2,656.016 1385.76,638.4 1386.31,646.923 1386.87,665.004 1387.43,665.711 1387.99,631.754 1388.55,617.656 1389.11,619.602 1389.67,637.849 1390.23,641.328 1390.79,643.382 1391.35,631.565 1391.91,650.943 1392.47,653.301 1393.03,640.642 1393.58,642.623 1394.14,614.147 1394.7,636.567 1395.26,657.744 1395.82,659.051 1396.38,627.308 1396.94,644.78 1397.5,629.262 1398.06,616.758 1398.62,621.592 1399.18,660.382 1399.74,713.702 1400.3,715.575 1400.86,681.121 1401.41,697.609 1401.97,711.509 1402.53,691.259 1403.09,708.796 1403.65,671.986 1404.21,672.522 1404.77,651.315 1405.33,671.33 1405.89,670.929 1406.45,671.342 1407.01,670.626 1407.57,704.281 1408.13,671.234 1408.68,637.478 1409.24,641.207 1409.8,644.264 1410.36,648.495 1410.92,650.634 1411.48,668.039 1412.04,654.256 1412.6,654.924 1413.16,657.993 1413.72,695.446 1414.28,679.391 1414.84,660.447 1415.4,643.228 1415.95,629.56 1416.51,648.486 1417.07,653.464 1417.63,672.629 1418.19,691.278 1418.75,688.513 1419.31,654.321 1419.87,675.859 1420.43,658.318 1420.99,691.145 1421.55,677.612 1422.11,679.151 1422.67,681.613 1423.23,698.301 1423.78,664.908 1424.34,701.212 1424.9,682.357 1425.46,684.222 1426.02,715.689 1426.58,699.987 1427.14,683.207 1427.7,634.336 1428.26,620.531 1428.82,622.066 1429.38,624.794 1429.94,690.58 1430.5,672.387 1431.05,656.661 1431.61,670.73 1432.17,655.395 1432.73,639.097 1433.29,675.093 1433.85,638.325 1434.41,688.614 1434.97,673.601 1435.53,643.363 1436.09,647.556 1436.65,649.902 1437.21,635.381 1437.77,655.9 1438.33,657.249 1438.88,678.324 1439.44,697.716 1440,680.209 1440.56,646.239 1441.12,648.586 1441.68,631.737 1442.24,600.385 1442.8,589.96 1443.36,591.913 1443.92,613.185 1444.48,671.911 1445.04,656.499 1445.6,675.799 1446.15,675.903 1446.71,693.195 1447.27,690.04 1447.83,688.563 1448.39,637.029 1448.95,642.152 1449.51,680.596 1450.07,708.658 1450.63,709.095 1451.19,725.358 1451.75,720.899 1452.31,736.785 1452.87,732.52 1453.42,759.468 1453.98,706.788 1454.54,720.889 1455.1,705.16 1455.66,704.994 1456.22,720.756 1456.78,701.095 1457.34,717.596 1457.9,647.932 1458.46,680.912 1459.02,714.608 1459.58,730.214 1460.14,772.254 1460.7,714.935 1461.25,742.468 1461.81,726.048 1462.37,704.255 1462.93,701.665 1463.49,703.513 1464.05,688.393 1464.61,691.352 1465.17,690.663 1465.73,707.553 1466.29,693.316 1466.85,706.885 1467.41,723.249 1467.97,721.758 1468.52,732.81 1469.08,711.693 1469.64,688.923 1470.2,673.986 1470.76,692.649 1471.32,691.724 1471.88,657.036 1472.44,641.856 1473,678.443 1473.56,660.984 1474.12,691.599 1474.68,663.142 1475.24,677.498 1475.79,677.987 1476.35,726.081 1476.91,725.422 1477.47,726.382 1478.03,708.123 1478.59,708.093 1479.15,757.625 1479.71,738.413 1480.27,766.935 1480.83,709.715 1481.39,708.095 1481.95,689.988 1482.51,691.919 1483.07,705.205 1483.62,704.507 1484.18,693.153 1484.74,694.767 1485.3,692.499 1485.86,672.02 1486.42,670.175 1486.98,685.604 1487.54,701.67 1488.1,700.642 1488.66,699.836 1489.22,695.554 1489.78,728.184 1490.34,743.454 1490.89,758.625 1491.45,740.734 1492.01,705.204 1492.57,673.935 1493.13,675.093 1493.69,645.3 1494.25,678.396 1494.81,674.495 1495.37,675.912 1495.93,673.372 1496.49,657.352 1497.05,691.33 1497.61,689.034 1498.16,721.29 1498.72,753.27 1499.28,746.087 1499.84,707.175 1500.4,705.953 1500.96,702.267 1501.52,699.397 1502.08,697.653 1502.64,715.277 1503.2,694.811 1503.76,675.866 1504.32,678.643 1504.88,644.954 1505.44,645.905 1505.99,663.677 1506.55,683.341 1507.11,665.942 1507.67,695.893 1508.23,677.796 1508.79,662.118 1509.35,626.458 1509.91,646.737 1510.47,630.377 1511.03,635.161 1511.59,604.919 1512.15,610.615 1512.71,595.59 1513.26,588.885 1513.82,594.188 1514.38,600.047 1514.94,557.821 1515.5,582.46 1516.06,605.841 1516.62,595.633 1517.18,619.878 1517.74,638.063 1518.3,675.027 1518.86,676.212 1519.42,692.286 1519.98,674.603 1520.53,676.56 1521.09,662.836 1521.65,665.267 1522.21,663.811 1522.77,663.588 1523.33,647.403 1523.89,652.19 1524.45,653.358 1525.01,671.677 1525.57,673.343 1526.13,690.833 1526.69,694.858 1527.25,745.886 1527.81,740.641 1528.36,737.902 1528.92,687.79 1529.48,706.185 1530.04,687.815 1530.6,688.898 1531.16,688.739 1531.72,610.038 1532.28,597.538 1532.84,590.636 1533.4,596.028 1533.96,585.546 1534.52,594.273 1535.08,582.961 1535.63,606.532 1536.19,629.168 1536.75,600.306 1537.31,637.977 1537.87,658.611 1538.43,661.11 1538.99,661.131 1539.55,677.271 1540.11,724.505 1540.67,722.205 1541.23,703.801 1541.79,702.687 1542.35,686.743 1542.9,702.356 1543.46,666.51 1544.02,682.516 1544.58,667.051 1545.14,669.357 1545.7,670.091 1546.26,670.77 1546.82,671.806 1547.38,721.779 1547.94,752.168 1548.5,750.302 1549.06,747.32 1549.62,744.238 1550.18,743.842 1550.73,744.954 1551.29,711.126 1551.85,711.008 1552.41,728.846 1552.97,710.127 1553.53,724.882 1554.09,706.216 1554.65,670.623 1555.21,721.273 1555.77,734.815 1556.33,730.643 1556.89,741.276 1557.45,737.533 1558,734.437 1558.56,746.767 1559.12,744.975 1559.68,759.261 1560.24,751.81 1560.8,733.93 1561.36,746.319 1561.92,757.08 1562.48,802.1 1563.04,778.696 1563.6,757.775 1564.16,752.211 1564.72,764.215 1565.28,744.402 1565.83,723.42 1566.39,721.116 1566.95,701.771 1567.51,730.147 1568.07,710.981 1568.63,692.958 1569.19,707.185 1569.75,688.512 1570.31,720.192 1570.87,735.188 1571.43,733.316 1571.99,715.063 1572.55,746.024 1573.1,726.204 1573.66,730.748 1574.22,713.467 1574.78,730.697 1575.34,694.219 1575.9,679.096 1576.46,679.212 1577.02,664.276 1577.58,681.039 1578.14,664.357 1578.7,700.255 1579.26,683.074 1579.82,665.945 1580.37,648.303 1580.93,663.37 1581.49,759.592 1582.05,737.888 1582.61,717.597 1583.17,730.818 1583.73,712.917 1584.29,714.305 1584.85,742.425 1585.41,737.803 1585.97,738.307 1586.53,716.472 1587.09,678.437 1587.65,710.13 1588.2,690.254 1588.76,707.492 1589.32,678.943 1589.88,663.289 1590.44,647.988 1591,647.084 1591.56,684.256 1592.12,700.603 1592.68,685.114 1593.24,702.36 1593.8,731.903 1594.36,729.153 1594.92,711.559 1595.47,723.314 1596.03,692.088 1596.59,706.028 1597.15,736.645 1597.71,750.364 1598.27,732.073 1598.83,731.525 1599.39,764.179 1599.95,776.235 1600.51,765.636 1601.07,777.303 1601.63,805.532 1602.19,767.541 1602.74,743.917 1603.3,736.454 1603.86,736.685 1604.42,705.823 1604.98,703.527 1605.54,685.6 1606.1,685.884 1606.66,685.516 1607.22,687.248 1607.78,686.2 1608.34,654.206 1608.9,641.993 1609.46,642.272 1610.02,638.478 1610.57,673.924 1611.13,692.591 1611.69,726.303 1612.25,723.325 1612.81,686.781 1613.37,643.043 1613.93,628.298 1614.49,615.894 1615.05,604.762 1615.61,575.736 1616.17,584.941 1616.73,589.388 1617.29,595.005 1617.84,618.375 1618.4,621.345 1618.96,625.133 1619.52,629.218 1620.08,632.168 1620.64,633.592 1621.2,639.266 1621.76,626.045 1622.32,643.186 1622.88,648.211 1623.44,651.652 1624,670.477 1624.56,673.569 1625.11,639.362 1625.67,639.095 1626.23,655.846 1626.79,672.68 1627.35,707.027 1627.91,703.896 1628.47,671.117 1629.03,670.884 1629.59,658.751 1630.15,677.496 1630.71,710.83 1631.27,693.248 1631.83,641.957 1632.39,661.239 1632.94,628.165 1633.5,581.847 1634.06,621.488 1634.62,626.419 1635.18,630.187 1635.74,633.44 1636.3,637.845 1636.86,655.312 1637.42,691.356 1637.98,692.904 1638.54,693.362 1639.1,658.719 1639.66,662.026 1640.21,680.068 1640.77,662.121 1641.33,677.794 1641.89,678.901 1642.45,680.44 1643.01,667.686 1643.57,651.049 1644.13,618.673 1644.69,621.958 1645.25,610.413 1645.81,595.723 1646.37,632.062 1646.93,665.677 1647.48,649.674 1648.04,620.283 1648.6,589.896 1649.16,611.7 1649.72,600.565 1650.28,619.802 1650.84,638.898 1651.4,624.81 1651.96,625.107 1652.52,663.214 1653.08,645.681 1653.64,648.237 1654.2,648.896 1654.76,634.389 1655.31,618.498 1655.87,601.839 1656.43,623.379 1656.99,609.64 1657.55,614.948 1658.11,653.007 1658.67,640.35 1659.23,661.543 1659.79,646.777 1660.35,636.213 1660.91,623.378 1661.47,612.873 1662.03,634.425 1662.58,639.541 1663.14,640.325 1663.7,663.059 1664.26,629.941 1664.82,663.566 1665.38,664.318 1665.94,669.222 1666.5,671.434 1667.06,720.843 1667.62,750.948 1668.18,797.339 1668.74,805.793 1669.3,818.32 1669.85,814.407 1670.41,855.048 1670.97,861.181 1671.53,865.348 1672.09,887.561 1672.65,828.828 1673.21,840.678 1673.77,817.741 1674.33,813.402 1674.89,790.817 1675.45,804.809 1676.01,800.603 1676.57,778.206 1677.13,741.098 1677.68,737.542 1678.24,768.452 1678.8,777.976 1679.36,758.914 1679.92,771.732 1680.48,767.157 1681.04,767.126 1681.6,744.596 1682.16,694.489 1682.72,708.438 1683.28,707.879 1683.84,703.554 1684.4,732.393 1684.95,728.097 1685.51,724.419 1686.07,737.134 1686.63,721.202 1687.19,751.795 1687.75,762.928 1688.31,780.534 1688.87,775.677 1689.43,752.357 1689.99,700.971 1690.55,698.761 1691.11,683.174 1691.67,686.637 1692.23,689.389 1692.78,686.119 1693.34,684.456 1693.9,683.824 1694.46,703.161 1695.02,699.841 1695.58,682.834 1696.14,651.186 1696.7,667.642 1697.26,651.827 1697.82,637.501 1698.38,655.173 1698.94,620.751 1699.5,589.545 1700.05,560.328 1700.61,570.919 1701.17,578.305 1701.73,552.444 1702.29,575.906 1702.85,583.155 1703.41,586.528 1703.97,607.353 1704.53,594.566 1705.09,601.327 1705.65,622.552 1706.21,611.106 1706.77,615.26 1707.32,634.2 1707.88,607.254 1708.44,679.797 1709,681.878 1709.56,745.045 1710.12,725.222 1710.68,738.247 1711.24,714.767 1711.8,696.624 1712.36,684.28 1712.92,682.868 1713.48,735.062 1714.04,748.55 1714.6,725.339 1715.15,721.575 1715.71,736.525 1716.27,719.519 1716.83,701.602 1717.39,737.434 1717.95,733.871 1718.51,746.977 1719.07,728.56 1719.63,757.869 1720.19,737.86 1720.75,706.084 1721.31,670.477 1721.87,685.346 1722.42,682.573 1722.98,685.421 1723.54,687.142 1724.1,638.735 1724.66,589.954 1725.22,611.355 1725.78,598.031 1726.34,601.158 1726.9,642.519 1727.46,642.919 1728.02,659.747 1728.58,659.874 1729.14,641.028 1729.69,623.52 1730.25,625.216 1730.81,663.856 1731.37,681.87 1731.93,698.395 1732.49,683.077 1733.05,683.163 1733.61,685.43 1734.17,668.311 1734.73,652.346 1735.29,670.26 1735.85,639.988 1736.41,657.982 1736.97,661.247 1737.52,660.947 1738.08,681.007 1738.64,664.87 1739.2,683.778 1739.76,680.295 1740.32,664.811 1740.88,649.863 1741.44,654.488 1742,658.279 1742.56,692.732 1743.12,695.043 1743.68,675.538 1744.24,679.825 1744.79,664.007 1745.35,665.971 1745.91,653.047 1746.47,654.714 1747.03,643.758 1747.59,613.449 1748.15,598.006 1748.71,621.468 1749.27,642.312 1749.83,644.928 1750.39,677.542 1750.95,678.102 1751.51,678.765 1752.06,709.583 1752.62,705.509 1753.18,735.974 1753.74,736.97 1754.3,732.377 1754.86,745.377 1755.42,712.359 1755.98,679.311 1756.54,708.548 1757.1,722.574 1757.66,721.915 1758.22,732.888 1758.78,732.409 1759.34,713.562 1759.89,695.803 1760.45,714.131 1761.01,729.163 1761.57,743.154 1762.13,719.63 1762.69,704.941 1763.25,700.474 1763.81,684.52 1764.37,697.834 1764.93,694.386 1765.49,693.064 1766.05,674.76 1766.61,707.588 1767.16,707.586 1767.72,736.785 1768.28,768.252 1768.84,792.922 1769.4,769.758 1769.96,764.973 1770.52,744.228 1771.08,756.514 1771.64,734.389 1772.2,735.357 1772.76,746.823 1773.32,728.68 1773.88,729.217 1774.43,723.663 1774.99,687.412 1775.55,702.331 1776.11,652.492 1776.67,684.45 1777.23,670.93 1777.79,703.399 1778.35,651.523 1778.91,634.906 1779.47,587.837 1780.03,605.841 1780.59,606.882 1781.15,624.543 1781.71,593.416 1782.26,599.613 1782.82,603.985 1783.38,609.915 1783.94,631.633 1784.5,684.989 1785.06,701.149 1785.62,715.792 1786.18,698.471 1786.74,696.526 1787.3,716.593 1787.86,714.45 1788.42,732.432 1788.98,777.202 1789.53,771.751 1790.09,753.117 1790.65,764.163 1791.21,789.488 1791.77,781.789 1792.33,743.547 1792.89,722.352 1793.45,685.375 1794.01,719.882 1794.57,700.401 1795.13,681.182 1795.69,698.892 1796.25,732.229 1796.8,744.036 1797.36,754.433 1797.92,736.682 1798.48,733.849 1799.04,728.755 1799.6,774.195 1800.16,754.157 1800.72,744.653 1801.28,709.536 1801.84,725.646 1802.4,738.48 1802.96,732.911 1803.52,729.579 1804.08,745.157 1804.63,759.752 1805.19,724.924 1805.75,720.809 1806.31,735.101 1806.87,733.44 1807.43,734.127 1807.99,730.464 1808.55,712.033 1809.11,662.588 1809.67,676.299 1810.23,677.29 1810.79,675.919 1811.35,691.406 1811.9,638.243 1812.46,641.91 1813.02,608.571 1813.58,646.922 1814.14,647.773 1814.7,670.323 1815.26,674.495 1815.82,672.138 1816.38,674.265 1816.94,694.181 1817.5,709.469 1818.06,692.648 1818.62,660.687 1819.18,664.866 1819.73,682.381 1820.29,685.11 1820.85,683.628 1821.41,697.281 1821.97,682.134 1822.53,665.432 1823.09,632.785 1823.65,606.042 1824.21,609.667 1824.77,646.216 1825.33,661.549 1825.89,677.472 1826.45,657.89 1827,659.693 1827.56,660.951 1828.12,644.886 1828.68,598.124 1829.24,617.893 1829.8,622.079 1830.36,627.223 1830.92,616.419 1831.48,636.511 1832.04,674.045 1832.6,672.65 1833.16,658.223 1833.72,658.083 1834.27,660.474 1834.83,660.019 1835.39,676.094 1835.95,644.832 1836.51,650.429 1837.07,682.648 1837.63,665.211 1838.19,669.394 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 690.425 L720.806 690.425 L721.365 690.425 L721.924 690.425 L722.484 690.425 L723.043 690.425 L723.602 690.425 L724.161 690.425 L724.721 690.425 L725.28 690.425 L725.839 690.425 L726.398 690.425 L726.958 690.425 L727.517 690.425 L728.076 690.425 L728.635 690.425 L729.195 690.425 L729.754 690.425 L730.313 690.425 L730.872 690.425 L731.432 690.425 L731.991 690.425 L732.55 690.425 L733.109 690.425 L733.669 690.425 L734.228 690.425 L734.787 690.425 L735.346 690.425 L735.906 690.425 L736.465 690.425 L737.024 690.425 L737.583 690.425 L738.143 690.425 L738.702 690.425 L739.261 690.425 L739.82 690.425 L740.38 690.425 L740.939 690.425 L741.498 690.425 L742.057 690.425 L742.617 690.425 L743.176 690.425 L743.735 690.425 L744.294 690.425 L744.854 690.425 L745.413 690.425 L745.972 690.425 L746.531 690.425 L747.091 690.425 L747.65 690.425 L748.209 690.425 L748.768 690.425 L749.328 690.425 L749.887 690.425 L750.446 690.425 L751.005 690.425 L751.565 690.425 L752.124 690.425 L752.683 690.425 L753.242 690.425 L753.802 690.425 L754.361 690.425 L754.92 690.425 L755.479 690.425 L756.039 690.425 L756.598 690.425 L757.157 690.425 L757.716 690.425 L758.276 690.425 L758.835 690.425 L759.394 690.425 L759.953 690.425 L760.513 690.425 L761.072 690.425 L761.631 690.425 L762.19 690.425 L762.75 690.425 L763.309 690.425 L763.868 690.425 L764.427 690.425 L764.987 690.425 L765.546 690.425 L766.105 690.425 L766.664 690.425 L767.224 690.425 L767.783 690.425 L768.342 690.425 L768.901 690.425 L769.461 690.425 L770.02 690.425 L770.579 690.425 L771.138 690.425 L771.698 690.425 L772.257 690.425 L772.816 690.425 L773.375 690.425 L773.935 690.425 L774.494 690.425 L775.053 690.425 L775.612 690.425 L776.172 690.425 L776.731 690.425 L777.29 690.425 L777.849 690.425 L778.409 690.425 L778.968 690.425 L779.527 690.425 L780.086 690.425 L780.646 690.425 L781.205 690.425 L781.764 690.425 L782.323 690.425 L782.883 690.425 L783.442 690.425 L784.001 690.425 L784.56 690.425 L785.12 690.425 L785.679 690.425 L786.238 690.425 L786.797 690.425 L787.357 690.425 L787.916 690.425 L788.475 690.425 L789.034 690.425 L789.594 690.425 L790.153 690.425 L790.712 690.425 L791.271 690.425 L791.831 690.425 L792.39 690.425 L792.949 690.425 L793.508 690.425 L794.068 690.425 L794.627 690.425 L795.186 690.425 L795.745 690.425 L796.305 690.425 L796.864 690.425 L797.423 690.425 L797.982 690.425 L798.542 690.425 L799.101 690.425 L799.66 690.425 L800.219 690.425 L800.779 690.425 L801.338 690.425 L801.897 690.425 L802.456 690.425 L803.016 690.425 L803.575 690.425 L804.134 690.425 L804.693 690.425 L805.253 690.425 L805.812 690.425 L806.371 690.425 L806.931 690.425 L807.49 690.425 L808.049 690.425 L808.608 690.425 L809.168 690.425 L809.727 690.425 L810.286 690.425 L810.845 690.425 L811.405 690.425 L811.964 690.425 L812.523 690.425 L813.082 690.425 L813.642 690.425 L814.201 690.425 L814.76 690.425 L815.319 690.425 L815.879 690.425 L816.438 690.425 L816.997 690.425 L817.556 690.425 L818.116 690.425 L818.675 690.425 L819.234 690.425 L819.793 690.425 L820.353 690.425 L820.912 690.425 L821.471 690.425 L822.03 690.425 L822.59 690.425 L823.149 690.425 L823.708 690.425 L824.267 690.425 L824.827 690.425 L825.386 690.425 L825.945 690.425 L826.504 690.425 L827.064 690.425 L827.623 690.425 L828.182 690.425 L828.741 690.425 L829.301 690.425 L829.86 690.425 L830.419 690.425 L830.978 690.425 L831.538 690.425 L832.097 690.425 L832.656 690.425 L833.215 690.425 L833.775 690.425 L834.334 690.425 L834.893 690.425 L835.452 690.425 L836.012 690.425 L836.571 690.425 L837.13 690.425 L837.689 690.425 L838.249 690.425 L838.808 690.425 L839.367 690.425 L839.926 690.425 L840.486 690.425 L841.045 690.425 L841.604 690.425 L842.163 690.425 L842.723 690.425 L843.282 690.425 L843.841 690.425 L844.4 690.425 L844.96 690.425 L845.519 690.425 L846.078 690.425 L846.637 690.425 L847.197 690.425 L847.756 690.425 L848.315 690.425 L848.874 690.425 L849.434 690.425 L849.993 690.425 L850.552 690.425 L851.111 690.425 L851.671 690.425 L852.23 690.425 L852.789 690.425 L853.348 690.425 L853.908 690.425 L854.467 690.425 L855.026 690.425 L855.585 690.425 L856.145 690.425 L856.704 690.425 L857.263 690.425 L857.822 690.425 L858.382 690.425 L858.941 690.425 L859.5 690.425 L860.059 690.425 L860.619 690.425 L861.178 690.425 L861.737 690.425 L862.296 690.425 L862.856 690.425 L863.415 690.425 L863.974 690.425 L864.533 690.425 L865.093 690.425 L865.652 690.425 L866.211 690.425 L866.77 690.425 L867.33 690.425 L867.889 690.425 L868.448 690.425 L869.007 690.425 L869.567 690.425 L870.126 690.425 L870.685 690.425 L871.244 690.425 L871.804 690.425 L872.363 690.425 L872.922 690.425 L873.481 690.425 L874.041 690.425 L874.6 690.425 L875.159 690.425 L875.718 690.425 L876.278 690.425 L876.837 690.425 L877.396 690.425 L877.955 690.425 L878.515 690.425 L879.074 690.425 L879.633 690.425 L880.192 690.425 L880.752 690.425 L881.311 690.425 L881.87 690.425 L882.429 690.425 L882.989 690.425 L883.548 690.425 L884.107 690.425 L884.666 690.425 L885.226 690.425 L885.785 690.425 L886.344 690.425 L886.903 690.425 L887.463 690.425 L888.022 690.425 L888.581 690.425 L889.14 690.425 L889.7 690.425 L890.259 690.425 L890.818 690.425 L891.377 690.425 L891.937 690.425 L892.496 690.425 L893.055 690.425 L893.614 690.425 L894.174 690.425 L894.733 690.425 L895.292 690.425 L895.851 690.425 L896.411 690.425 L896.97 690.425 L897.529 690.425 L898.088 690.425 L898.648 690.425 L899.207 690.425 L899.766 690.425 L900.325 690.425 L900.885 690.425 L901.444 690.425 L902.003 690.425 L902.562 690.425 L903.122 690.425 L903.681 690.425 L904.24 690.425 L904.799 690.425 L905.359 690.425 L905.918 690.425 L906.477 690.425 L907.036 690.425 L907.596 690.425 L908.155 690.425 L908.714 690.425 L909.273 690.425 L909.833 690.425 L910.392 690.425 L910.951 690.425 L911.51 690.425 L912.07 690.425 L912.629 690.425 L913.188 690.425 L913.747 690.425 L914.307 690.425 L914.866 690.425 L915.425 690.425 L915.984 690.425 L916.544 690.425 L917.103 690.425 L917.662 690.425 L918.221 690.425 L918.781 690.425 L919.34 690.425 L919.899 690.425 L920.458 690.425 L921.018 690.425 L921.577 690.425 L922.136 690.425 L922.695 690.425 L923.255 690.425 L923.814 690.425 L924.373 690.425 L924.932 690.425 L925.492 690.425 L926.051 690.425 L926.61 690.425 L927.169 690.425 L927.729 690.425 L928.288 690.425 L928.847 690.425 L929.406 690.425 L929.966 690.425 L930.525 690.425 L931.084 690.425 L931.644 690.425 L932.203 690.425 L932.762 690.425 L933.321 690.425 L933.881 690.425 L934.44 690.425 L934.999 690.425 L935.558 690.425 L936.118 690.425 L936.677 690.425 L937.236 690.425 L937.795 690.425 L938.355 690.425 L938.914 690.425 L939.473 690.425 L940.032 690.425 L940.592 690.425 L941.151 690.425 L941.71 690.425 L942.269 690.425 L942.829 690.425 L943.388 690.425 L943.947 690.425 L944.506 690.425 L945.066 690.425 L945.625 690.425 L946.184 690.425 L946.743 690.425 L947.303 690.425 L947.862 690.425 L948.421 690.425 L948.98 690.425 L949.54 690.425 L950.099 690.425 L950.658 690.425 L951.217 690.425 L951.777 690.425 L952.336 690.425 L952.895 690.425 L953.454 690.425 L954.014 690.425 L954.573 690.425 L955.132 690.425 L955.691 690.425 L956.251 690.425 L956.81 690.425 L957.369 690.425 L957.928 690.425 L958.488 690.425 L959.047 690.425 L959.606 690.425 L960.165 690.425 L960.725 690.425 L961.284 690.425 L961.843 690.425 L962.402 690.425 L962.962 690.425 L963.521 690.425 L964.08 690.425 L964.639 690.425 L965.199 690.425 L965.758 690.425 L966.317 690.425 L966.876 690.425 L967.436 690.425 L967.995 690.425 L968.554 690.425 L969.113 690.425 L969.673 690.425 L970.232 690.425 L970.791 690.425 L971.35 690.425 L971.91 690.425 L972.469 690.425 L973.028 690.425 L973.587 690.425 L974.147 690.425 L974.706 690.425 L975.265 690.425 L975.824 690.425 L976.384 690.425 L976.943 690.425 L977.502 690.425 L978.061 690.425 L978.621 690.425 L979.18 690.425 L979.739 690.425 L980.298 690.425 L980.858 690.425 L981.417 690.425 L981.976 690.425 L982.535 690.425 L983.095 690.425 L983.654 690.425 L984.213 690.425 L984.772 690.425 L985.332 690.425 L985.891 690.425 L986.45 690.425 L987.009 690.425 L987.569 690.425 L988.128 690.425 L988.687 690.425 L989.246 690.425 L989.806 690.425 L990.365 690.425 L990.924 690.425 L991.483 690.425 L992.043 690.425 L992.602 690.425 L993.161 690.425 L993.72 690.425 L994.28 690.425 L994.839 690.425 L995.398 690.425 L995.957 690.425 L996.517 690.425 L997.076 690.425 L997.635 690.425 L998.194 690.425 L998.754 690.425 L999.313 690.425 L999.872 690.425 L1000.43 690.425 L1000.99 690.425 L1001.55 690.425 L1002.11 690.425 L1002.67 690.425 L1003.23 690.425 L1003.79 690.425 L1004.35 690.425 L1004.91 690.425 L1005.46 690.425 L1006.02 690.425 L1006.58 690.425 L1007.14 690.425 L1007.7 690.425 L1008.26 690.425 L1008.82 690.425 L1009.38 690.425 L1009.94 690.425 L1010.5 690.425 L1011.06 690.425 L1011.62 690.425 L1012.18 690.425 L1012.73 690.425 L1013.29 690.425 L1013.85 690.425 L1014.41 690.425 L1014.97 690.425 L1015.53 690.425 L1016.09 690.425 L1016.65 690.425 L1017.21 690.425 L1017.77 690.425 L1018.33 690.425 L1018.89 690.425 L1019.45 690.425 L1020.01 690.425 L1020.56 690.425 L1021.12 690.425 L1021.68 690.425 L1022.24 690.425 L1022.8 690.425 L1023.36 690.425 L1023.92 690.425 L1024.48 690.425 L1025.04 690.425 L1025.6 690.425 L1026.16 690.425 L1026.72 690.425 L1027.28 690.425 L1027.83 690.425 L1028.39 690.425 L1028.95 690.425 L1029.51 690.425 L1030.07 690.425 L1030.63 690.425 L1031.19 690.425 L1031.75 690.425 L1032.31 690.425 L1032.87 690.425 L1033.43 690.425 L1033.99 690.425 L1034.55 690.425 L1035.1 690.425 L1035.66 690.425 L1036.22 690.425 L1036.78 690.425 L1037.34 690.425 L1037.9 690.425 L1038.46 690.425 L1039.02 690.425 L1039.58 690.425 L1040.14 690.425 L1040.7 690.425 L1041.26 690.425 L1041.82 690.425 L1042.38 690.425 L1042.93 690.425 L1043.49 690.425 L1044.05 690.425 L1044.61 690.425 L1045.17 690.425 L1045.73 690.425 L1046.29 690.425 L1046.85 690.425 L1047.41 690.425 L1047.97 690.425 L1048.53 690.425 L1049.09 690.425 L1049.65 690.425 L1050.2 690.425 L1050.76 690.425 L1051.32 690.425 L1051.88 690.425 L1052.44 690.425 L1053 690.425 L1053.56 690.425 L1054.12 690.425 L1054.68 690.425 L1055.24 690.425 L1055.8 690.425 L1056.36 690.425 L1056.92 690.425 L1057.48 690.425 L1058.03 690.425 L1058.59 690.425 L1059.15 690.425 L1059.71 690.425 L1060.27 690.425 L1060.83 690.425 L1061.39 690.425 L1061.95 690.425 L1062.51 690.425 L1063.07 690.425 L1063.63 690.425 L1064.19 690.425 L1064.75 690.425 L1065.3 690.425 L1065.86 690.425 L1066.42 690.425 L1066.98 690.425 L1067.54 690.425 L1068.1 690.425 L1068.66 690.425 L1069.22 690.425 L1069.78 690.425 L1070.34 690.425 L1070.9 690.425 L1071.46 690.425 L1072.02 690.425 L1072.57 690.425 L1073.13 690.425 L1073.69 690.425 L1074.25 690.425 L1074.81 690.425 L1075.37 690.425 L1075.93 690.425 L1076.49 690.425 L1077.05 690.425 L1077.61 690.425 L1078.17 690.425 L1078.73 690.425 L1079.29 690.425 L1079.85 690.425 L1080.4 690.425 L1080.96 690.425 L1081.52 690.425 L1082.08 690.425 L1082.64 690.425 L1083.2 690.425 L1083.76 690.425 L1084.32 690.425 L1084.88 690.425 L1085.44 690.425 L1086 690.425 L1086.56 690.425 L1087.12 690.425 L1087.67 690.425 L1088.23 690.425 L1088.79 690.425 L1089.35 690.425 L1089.91 690.425 L1090.47 690.425 L1091.03 690.425 L1091.59 690.425 L1092.15 690.425 L1092.71 690.425 L1093.27 690.425 L1093.83 690.425 L1094.39 690.425 L1094.94 690.425 L1095.5 690.425 L1096.06 690.425 L1096.62 690.425 L1097.18 690.425 L1097.74 690.425 L1098.3 690.425 L1098.86 690.425 L1099.42 690.425 L1099.98 690.425 L1100.54 690.425 L1101.1 690.425 L1101.66 690.425 L1102.22 690.425 L1102.77 690.425 L1103.33 690.425 L1103.89 690.425 L1104.45 690.425 L1105.01 690.425 L1105.57 690.425 L1106.13 690.425 L1106.69 690.425 L1107.25 690.425 L1107.81 690.425 L1108.37 690.425 L1108.93 690.425 L1109.49 690.425 L1110.04 690.425 L1110.6 690.425 L1111.16 690.425 L1111.72 690.425 L1112.28 690.425 L1112.84 690.425 L1113.4 690.425 L1113.96 690.425 L1114.52 690.425 L1115.08 690.425 L1115.64 690.425 L1116.2 690.425 L1116.76 690.425 L1117.31 690.425 L1117.87 690.425 L1118.43 690.425 L1118.99 690.425 L1119.55 690.425 L1120.11 690.425 L1120.67 690.425 L1121.23 690.425 L1121.79 690.425 L1122.35 690.425 L1122.91 690.425 L1123.47 690.425 L1124.03 690.425 L1124.59 690.425 L1125.14 690.425 L1125.7 690.425 L1126.26 690.425 L1126.82 690.425 L1127.38 690.425 L1127.94 690.425 L1128.5 690.425 L1129.06 690.425 L1129.62 690.425 L1130.18 690.425 L1130.74 690.425 L1131.3 690.425 L1131.86 690.425 L1132.41 690.425 L1132.97 690.425 L1133.53 690.425 L1134.09 690.425 L1134.65 690.425 L1135.21 690.425 L1135.77 690.425 L1136.33 690.425 L1136.89 690.425 L1137.45 690.425 L1138.01 690.425 L1138.57 690.425 L1139.13 690.425 L1139.68 690.425 L1140.24 690.425 L1140.8 690.425 L1141.36 690.425 L1141.92 690.425 L1142.48 690.425 L1143.04 690.425 L1143.6 690.425 L1144.16 690.425 L1144.72 690.425 L1145.28 690.425 L1145.84 690.425 L1146.4 690.425 L1146.96 690.425 L1147.51 690.425 L1148.07 690.425 L1148.63 690.425 L1149.19 690.425 L1149.75 690.425 L1150.31 690.425 L1150.87 690.425 L1151.43 690.425 L1151.99 690.425 L1152.55 690.425 L1153.11 690.425 L1153.67 690.425 L1154.23 690.425 L1154.78 690.425 L1155.34 690.425 L1155.9 690.425 L1156.46 690.425 L1157.02 690.425 L1157.58 690.425 L1158.14 690.425 L1158.7 690.425 L1159.26 690.425 L1159.82 690.425 L1160.38 690.425 L1160.94 690.425 L1161.5 690.425 L1162.05 690.425 L1162.61 690.425 L1163.17 690.425 L1163.73 690.425 L1164.29 690.425 L1164.85 690.425 L1165.41 690.425 L1165.97 690.425 L1166.53 690.425 L1167.09 690.425 L1167.65 690.425 L1168.21 690.425 L1168.77 690.425 L1169.33 690.425 L1169.88 690.425 L1170.44 690.425 L1171 690.425 L1171.56 690.425 L1172.12 690.425 L1172.68 690.425 L1173.24 690.425 L1173.8 690.425 L1174.36 690.425 L1174.92 690.425 L1175.48 690.425 L1176.04 690.425 L1176.6 690.425 L1177.15 690.425 L1177.71 690.425 L1178.27 690.425 L1178.83 690.425 L1179.39 690.425 L1179.95 690.425 L1180.51 690.425 L1181.07 690.425 L1181.63 690.425 L1182.19 690.425 L1182.75 690.425 L1183.31 690.425 L1183.87 690.425 L1184.43 690.425 L1184.98 690.425 L1185.54 690.425 L1186.1 690.425 L1186.66 690.425 L1187.22 690.425 L1187.78 690.425 L1188.34 690.425 L1188.9 690.425 L1189.46 690.425 L1190.02 690.425 L1190.58 690.425 L1191.14 690.425 L1191.7 690.425 L1192.25 690.425 L1192.81 690.425 L1193.37 690.425 L1193.93 690.425 L1194.49 690.425 L1195.05 690.425 L1195.61 690.425 L1196.17 690.425 L1196.73 690.425 L1197.29 690.425 L1197.85 690.425 L1198.41 690.425 L1198.97 690.425 L1199.52 690.425 L1200.08 690.425 L1200.64 690.425 L1201.2 690.425 L1201.76 690.425 L1202.32 690.425 L1202.88 690.425 L1203.44 690.425 L1204 690.425 L1204.56 690.425 L1205.12 690.425 L1205.68 690.425 L1206.24 690.425 L1206.8 690.425 L1207.35 690.425 L1207.91 690.425 L1208.47 690.425 L1209.03 690.425 L1209.59 690.425 L1210.15 690.425 L1210.71 690.425 L1211.27 690.425 L1211.83 690.425 L1212.39 690.425 L1212.95 690.425 L1213.51 690.425 L1214.07 690.425 L1214.62 690.425 L1215.18 690.425 L1215.74 690.425 L1216.3 690.425 L1216.86 690.425 L1217.42 690.425 L1217.98 690.425 L1218.54 690.425 L1219.1 690.425 L1219.66 690.425 L1220.22 690.425 L1220.78 690.425 L1221.34 690.425 L1221.89 690.425 L1222.45 690.425 L1223.01 690.425 L1223.57 690.425 L1224.13 690.425 L1224.69 690.425 L1225.25 690.425 L1225.81 690.425 L1226.37 690.425 L1226.93 690.425 L1227.49 690.425 L1228.05 690.425 L1228.61 690.425 L1229.17 690.425 L1229.72 690.425 L1230.28 690.425 L1230.84 690.425 L1231.4 690.425 L1231.96 690.425 L1232.52 690.425 L1233.08 690.425 L1233.64 690.425 L1234.2 690.425 L1234.76 690.425 L1235.32 690.425 L1235.88 690.425 L1236.44 690.425 L1236.99 690.425 L1237.55 690.425 L1238.11 690.425 L1238.67 690.425 L1239.23 690.425 L1239.79 690.425 L1240.35 690.425 L1240.91 690.425 L1241.47 690.425 L1242.03 690.425 L1242.59 690.425 L1243.15 690.425 L1243.71 690.425 L1244.26 690.425 L1244.82 690.425 L1245.38 690.425 L1245.94 690.425 L1246.5 690.425 L1247.06 690.425 L1247.62 690.425 L1248.18 690.425 L1248.74 690.425 L1249.3 690.425 L1249.86 690.425 L1250.42 690.425 L1250.98 690.425 L1251.54 690.425 L1252.09 690.425 L1252.65 690.425 L1253.21 690.425 L1253.77 690.425 L1254.33 690.425 L1254.89 690.425 L1255.45 690.425 L1256.01 690.425 L1256.57 690.425 L1257.13 690.425 L1257.69 690.425 L1258.25 690.425 L1258.81 690.425 L1259.36 690.425 L1259.92 690.425 L1260.48 690.425 L1261.04 690.425 L1261.6 690.425 L1262.16 690.425 L1262.72 690.425 L1263.28 690.425 L1263.84 690.425 L1264.4 690.425 L1264.96 690.425 L1265.52 690.425 L1266.08 690.425 L1266.63 690.425 L1267.19 690.425 L1267.75 690.425 L1268.31 690.425 L1268.87 690.425 L1269.43 690.425 L1269.99 690.425 L1270.55 690.425 L1271.11 690.425 L1271.67 690.425 L1272.23 690.425 L1272.79 690.425 L1273.35 690.425 L1273.91 690.425 L1274.46 690.425 L1275.02 690.425 L1275.58 690.425 L1276.14 690.425 L1276.7 690.425 L1277.26 690.425 L1277.82 690.425 L1278.38 690.425 L1278.94 690.425 L1279.5 690.425 L1280.06 690.425 L1280.62 690.425 L1281.18 690.425 L1281.73 690.425 L1282.29 690.425 L1282.85 690.425 L1283.41 690.425 L1283.97 690.425 L1284.53 690.425 L1285.09 690.425 L1285.65 690.425 L1286.21 690.425 L1286.77 690.425 L1287.33 690.425 L1287.89 690.425 L1288.45 690.425 L1289 690.425 L1289.56 690.425 L1290.12 690.425 L1290.68 690.425 L1291.24 690.425 L1291.8 690.425 L1292.36 690.425 L1292.92 690.425 L1293.48 690.425 L1294.04 690.425 L1294.6 690.425 L1295.16 690.425 L1295.72 690.425 L1296.28 690.425 L1296.83 690.425 L1297.39 690.425 L1297.95 690.425 L1298.51 690.425 L1299.07 690.425 L1299.63 690.425 L1300.19 690.425 L1300.75 690.425 L1301.31 690.425 L1301.87 690.425 L1302.43 690.425 L1302.99 690.425 L1303.55 690.425 L1304.1 690.425 L1304.66 690.425 L1305.22 690.425 L1305.78 690.425 L1306.34 690.425 L1306.9 690.425 L1307.46 690.425 L1308.02 690.425 L1308.58 690.425 L1309.14 690.425 L1309.7 690.425 L1310.26 690.425 L1310.82 690.425 L1311.38 690.425 L1311.93 690.425 L1312.49 690.425 L1313.05 690.425 L1313.61 690.425 L1314.17 690.425 L1314.73 690.425 L1315.29 690.425 L1315.85 690.425 L1316.41 690.425 L1316.97 690.425 L1317.53 690.425 L1318.09 690.425 L1318.65 690.425 L1319.2 690.425 L1319.76 690.425 L1320.32 690.425 L1320.88 690.425 L1321.44 690.425 L1322 690.425 L1322.56 690.425 L1323.12 690.425 L1323.68 690.425 L1324.24 690.425 L1324.8 690.425 L1325.36 690.425 L1325.92 690.425 L1326.47 690.425 L1327.03 690.425 L1327.59 690.425 L1328.15 690.425 L1328.71 690.425 L1329.27 690.425 L1329.83 690.425 L1330.39 690.425 L1330.95 690.425 L1331.51 690.425 L1332.07 690.425 L1332.63 690.425 L1333.19 690.425 L1333.75 690.425 L1334.3 690.425 L1334.86 690.425 L1335.42 690.425 L1335.98 690.425 L1336.54 690.425 L1337.1 690.425 L1337.66 690.425 L1338.22 690.425 L1338.78 690.425 L1339.34 690.425 L1339.9 690.425 L1340.46 690.425 L1341.02 690.425 L1341.57 690.425 L1342.13 690.425 L1342.69 690.425 L1343.25 690.425 L1343.81 690.425 L1344.37 690.425 L1344.93 690.425 L1345.49 690.425 L1346.05 690.425 L1346.61 690.425 L1347.17 690.425 L1347.73 690.425 L1348.29 690.425 L1348.84 690.425 L1349.4 690.425 L1349.96 690.425 L1350.52 690.425 L1351.08 690.425 L1351.64 690.425 L1352.2 690.425 L1352.76 690.425 L1353.32 690.425 L1353.88 690.425 L1354.44 690.425 L1355 690.425 L1355.56 690.425 L1356.12 690.425 L1356.67 690.425 L1357.23 690.425 L1357.79 690.425 L1358.35 690.425 L1358.91 690.425 L1359.47 690.425 L1360.03 690.425 L1360.59 690.425 L1361.15 690.425 L1361.71 690.425 L1362.27 690.425 L1362.83 690.425 L1363.39 690.425 L1363.94 690.425 L1364.5 690.425 L1365.06 690.425 L1365.62 690.425 L1366.18 690.425 L1366.74 690.425 L1367.3 690.425 L1367.86 690.425 L1368.42 690.425 L1368.98 690.425 L1369.54 690.425 L1370.1 690.425 L1370.66 690.425 L1371.21 690.425 L1371.77 690.425 L1372.33 690.425 L1372.89 690.425 L1373.45 690.425 L1374.01 690.425 L1374.57 690.425 L1375.13 690.425 L1375.69 690.425 L1376.25 690.425 L1376.81 690.425 L1377.37 690.425 L1377.93 690.425 L1378.49 690.425 L1379.04 690.425 L1379.6 690.425 L1380.16 690.425 L1380.72 690.425 L1381.28 690.425 L1381.84 690.425 L1382.4 690.425 L1382.96 690.425 L1383.52 690.425 L1384.08 690.425 L1384.64 690.425 L1385.2 690.425 L1385.76 690.425 L1386.31 690.425 L1386.87 690.425 L1387.43 690.425 L1387.99 690.425 L1388.55 690.425 L1389.11 690.425 L1389.67 690.425 L1390.23 690.425 L1390.79 690.425 L1391.35 690.425 L1391.91 690.425 L1392.47 690.425 L1393.03 690.425 L1393.58 690.425 L1394.14 690.425 L1394.7 690.425 L1395.26 690.425 L1395.82 690.425 L1396.38 690.425 L1396.94 690.425 L1397.5 690.425 L1398.06 690.425 L1398.62 690.425 L1399.18 690.425 L1399.74 690.425 L1400.3 690.425 L1400.86 690.425 L1401.41 690.425 L1401.97 690.425 L1402.53 690.425 L1403.09 690.425 L1403.65 690.425 L1404.21 690.425 L1404.77 690.425 L1405.33 690.425 L1405.89 690.425 L1406.45 690.425 L1407.01 690.425 L1407.57 690.425 L1408.13 690.425 L1408.68 690.425 L1409.24 690.425 L1409.8 690.425 L1410.36 690.425 L1410.92 690.425 L1411.48 690.425 L1412.04 690.425 L1412.6 690.425 L1413.16 690.425 L1413.72 690.425 L1414.28 690.425 L1414.84 690.425 L1415.4 690.425 L1415.95 690.425 L1416.51 690.425 L1417.07 690.425 L1417.63 690.425 L1418.19 690.425 L1418.75 690.425 L1419.31 690.425 L1419.87 690.425 L1420.43 690.425 L1420.99 690.425 L1421.55 690.425 L1422.11 690.425 L1422.67 690.425 L1423.23 690.425 L1423.78 690.425 L1424.34 690.425 L1424.9 690.425 L1425.46 690.425 L1426.02 690.425 L1426.58 690.425 L1427.14 690.425 L1427.7 690.425 L1428.26 690.425 L1428.82 690.425 L1429.38 690.425 L1429.94 690.425 L1430.5 690.425 L1431.05 690.425 L1431.61 690.425 L1432.17 690.425 L1432.73 690.425 L1433.29 690.425 L1433.85 690.425 L1434.41 690.425 L1434.97 690.425 L1435.53 690.425 L1436.09 690.425 L1436.65 690.425 L1437.21 690.425 L1437.77 690.425 L1438.33 690.425 L1438.88 690.425 L1439.44 690.425 L1440 690.425 L1440.56 690.425 L1441.12 690.425 L1441.68 690.425 L1442.24 690.425 L1442.8 690.425 L1443.36 690.425 L1443.92 690.425 L1444.48 690.425 L1445.04 690.425 L1445.6 690.425 L1446.15 690.425 L1446.71 690.425 L1447.27 690.425 L1447.83 690.425 L1448.39 690.425 L1448.95 690.425 L1449.51 690.425 L1450.07 690.425 L1450.63 690.425 L1451.19 690.425 L1451.75 690.425 L1452.31 690.425 L1452.87 690.425 L1453.42 690.425 L1453.98 690.425 L1454.54 690.425 L1455.1 690.425 L1455.66 690.425 L1456.22 690.425 L1456.78 690.425 L1457.34 690.425 L1457.9 690.425 L1458.46 690.425 L1459.02 690.425 L1459.58 690.425 L1460.14 690.425 L1460.7 690.425 L1461.25 690.425 L1461.81 690.425 L1462.37 690.425 L1462.93 690.425 L1463.49 690.425 L1464.05 690.425 L1464.61 690.425 L1465.17 690.425 L1465.73 690.425 L1466.29 690.425 L1466.85 690.425 L1467.41 690.425 L1467.97 690.425 L1468.52 690.425 L1469.08 690.425 L1469.64 690.425 L1470.2 690.425 L1470.76 690.425 L1471.32 690.425 L1471.88 690.425 L1472.44 690.425 L1473 690.425 L1473.56 690.425 L1474.12 690.425 L1474.68 690.425 L1475.24 690.425 L1475.79 690.425 L1476.35 690.425 L1476.91 690.425 L1477.47 690.425 L1478.03 690.425 L1478.59 690.425 L1479.15 690.425 L1479.71 690.425 L1480.27 690.425 L1480.83 690.425 L1481.39 690.425 L1481.95 690.425 L1482.51 690.425 L1483.07 690.425 L1483.62 690.425 L1484.18 690.425 L1484.74 690.425 L1485.3 690.425 L1485.86 690.425 L1486.42 690.425 L1486.98 690.425 L1487.54 690.425 L1488.1 690.425 L1488.66 690.425 L1489.22 690.425 L1489.78 690.425 L1490.34 690.425 L1490.89 690.425 L1491.45 690.425 L1492.01 690.425 L1492.57 690.425 L1493.13 690.425 L1493.69 690.425 L1494.25 690.425 L1494.81 690.425 L1495.37 690.425 L1495.93 690.425 L1496.49 690.425 L1497.05 690.425 L1497.61 690.425 L1498.16 690.425 L1498.72 690.425 L1499.28 690.425 L1499.84 690.425 L1500.4 690.425 L1500.96 690.425 L1501.52 690.425 L1502.08 690.425 L1502.64 690.425 L1503.2 690.425 L1503.76 690.425 L1504.32 690.425 L1504.88 690.425 L1505.44 690.425 L1505.99 690.425 L1506.55 690.425 L1507.11 690.425 L1507.67 690.425 L1508.23 690.425 L1508.79 690.425 L1509.35 690.425 L1509.91 690.425 L1510.47 690.425 L1511.03 690.425 L1511.59 690.425 L1512.15 690.425 L1512.71 690.425 L1513.26 690.425 L1513.82 690.425 L1514.38 690.425 L1514.94 690.425 L1515.5 690.425 L1516.06 690.425 L1516.62 690.425 L1517.18 690.425 L1517.74 690.425 L1518.3 690.425 L1518.86 690.425 L1519.42 690.425 L1519.98 690.425 L1520.53 690.425 L1521.09 690.425 L1521.65 690.425 L1522.21 690.425 L1522.77 690.425 L1523.33 690.425 L1523.89 690.425 L1524.45 690.425 L1525.01 690.425 L1525.57 690.425 L1526.13 690.425 L1526.69 690.425 L1527.25 690.425 L1527.81 690.425 L1528.36 690.425 L1528.92 690.425 L1529.48 690.425 L1530.04 690.425 L1530.6 690.425 L1531.16 690.425 L1531.72 690.425 L1532.28 690.425 L1532.84 690.425 L1533.4 690.425 L1533.96 690.425 L1534.52 690.425 L1535.08 690.425 L1535.63 690.425 L1536.19 690.425 L1536.75 690.425 L1537.31 690.425 L1537.87 690.425 L1538.43 690.425 L1538.99 690.425 L1539.55 690.425 L1540.11 690.425 L1540.67 690.425 L1541.23 690.425 L1541.79 690.425 L1542.35 690.425 L1542.9 690.425 L1543.46 690.425 L1544.02 690.425 L1544.58 690.425 L1545.14 690.425 L1545.7 690.425 L1546.26 690.425 L1546.82 690.425 L1547.38 690.425 L1547.94 690.425 L1548.5 690.425 L1549.06 690.425 L1549.62 690.425 L1550.18 690.425 L1550.73 690.425 L1551.29 690.425 L1551.85 690.425 L1552.41 690.425 L1552.97 690.425 L1553.53 690.425 L1554.09 690.425 L1554.65 690.425 L1555.21 690.425 L1555.77 690.425 L1556.33 690.425 L1556.89 690.425 L1557.45 690.425 L1558 690.425 L1558.56 690.425 L1559.12 690.425 L1559.68 690.425 L1560.24 690.425 L1560.8 690.425 L1561.36 690.425 L1561.92 690.425 L1562.48 690.425 L1563.04 690.425 L1563.6 690.425 L1564.16 690.425 L1564.72 690.425 L1565.28 690.425 L1565.83 690.425 L1566.39 690.425 L1566.95 690.425 L1567.51 690.425 L1568.07 690.425 L1568.63 690.425 L1569.19 690.425 L1569.75 690.425 L1570.31 690.425 L1570.87 690.425 L1571.43 690.425 L1571.99 690.425 L1572.55 690.425 L1573.1 690.425 L1573.66 690.425 L1574.22 690.425 L1574.78 690.425 L1575.34 690.425 L1575.9 690.425 L1576.46 690.425 L1577.02 690.425 L1577.58 690.425 L1578.14 690.425 L1578.7 690.425 L1579.26 690.425 L1579.82 690.425 L1580.37 690.425 L1580.93 690.425 L1581.49 690.425 L1582.05 690.425 L1582.61 690.425 L1583.17 690.425 L1583.73 690.425 L1584.29 690.425 L1584.85 690.425 L1585.41 690.425 L1585.97 690.425 L1586.53 690.425 L1587.09 690.425 L1587.65 690.425 L1588.2 690.425 L1588.76 690.425 L1589.32 690.425 L1589.88 690.425 L1590.44 690.425 L1591 690.425 L1591.56 690.425 L1592.12 690.425 L1592.68 690.425 L1593.24 690.425 L1593.8 690.425 L1594.36 690.425 L1594.92 690.425 L1595.47 690.425 L1596.03 690.425 L1596.59 690.425 L1597.15 690.425 L1597.71 690.425 L1598.27 690.425 L1598.83 690.425 L1599.39 690.425 L1599.95 690.425 L1600.51 690.425 L1601.07 690.425 L1601.63 690.425 L1602.19 690.425 L1602.74 690.425 L1603.3 690.425 L1603.86 690.425 L1604.42 690.425 L1604.98 690.425 L1605.54 690.425 L1606.1 690.425 L1606.66 690.425 L1607.22 690.425 L1607.78 690.425 L1608.34 690.425 L1608.9 690.425 L1609.46 690.425 L1610.02 690.425 L1610.57 690.425 L1611.13 690.425 L1611.69 690.425 L1612.25 690.425 L1612.81 690.425 L1613.37 690.425 L1613.93 690.425 L1614.49 690.425 L1615.05 690.425 L1615.61 690.425 L1616.17 690.425 L1616.73 690.425 L1617.29 690.425 L1617.84 690.425 L1618.4 690.425 L1618.96 690.425 L1619.52 690.425 L1620.08 690.425 L1620.64 690.425 L1621.2 690.425 L1621.76 690.425 L1622.32 690.425 L1622.88 690.425 L1623.44 690.425 L1624 690.425 L1624.56 690.425 L1625.11 690.425 L1625.67 690.425 L1626.23 690.425 L1626.79 690.425 L1627.35 690.425 L1627.91 690.425 L1628.47 690.425 L1629.03 690.425 L1629.59 690.425 L1630.15 690.425 L1630.71 690.425 L1631.27 690.425 L1631.83 690.425 L1632.39 690.425 L1632.94 690.425 L1633.5 690.425 L1634.06 690.425 L1634.62 690.425 L1635.18 690.425 L1635.74 690.425 L1636.3 690.425 L1636.86 690.425 L1637.42 690.425 L1637.98 690.425 L1638.54 690.425 L1639.1 690.425 L1639.66 690.425 L1640.21 690.425 L1640.77 690.425 L1641.33 690.425 L1641.89 690.425 L1642.45 690.425 L1643.01 690.425 L1643.57 690.425 L1644.13 690.425 L1644.69 690.425 L1645.25 690.425 L1645.81 690.425 L1646.37 690.425 L1646.93 690.425 L1647.48 690.425 L1648.04 690.425 L1648.6 690.425 L1649.16 690.425 L1649.72 690.425 L1650.28 690.425 L1650.84 690.425 L1651.4 690.425 L1651.96 690.425 L1652.52 690.425 L1653.08 690.425 L1653.64 690.425 L1654.2 690.425 L1654.76 690.425 L1655.31 690.425 L1655.87 690.425 L1656.43 690.425 L1656.99 690.425 L1657.55 690.425 L1658.11 690.425 L1658.67 690.425 L1659.23 690.425 L1659.79 690.425 L1660.35 690.425 L1660.91 690.425 L1661.47 690.425 L1662.03 690.425 L1662.58 690.425 L1663.14 690.425 L1663.7 690.425 L1664.26 690.425 L1664.82 690.425 L1665.38 690.425 L1665.94 690.425 L1666.5 690.425 L1667.06 690.425 L1667.62 690.425 L1668.18 690.425 L1668.74 690.425 L1669.3 690.425 L1669.85 690.425 L1670.41 690.425 L1670.97 690.425 L1671.53 690.425 L1672.09 690.425 L1672.65 690.425 L1673.21 690.425 L1673.77 690.425 L1674.33 690.425 L1674.89 690.425 L1675.45 690.425 L1676.01 690.425 L1676.57 690.425 L1677.13 690.425 L1677.68 690.425 L1678.24 690.425 L1678.8 690.425 L1679.36 690.425 L1679.92 690.425 L1680.48 690.425 L1681.04 690.425 L1681.6 690.425 L1682.16 690.425 L1682.72 690.425 L1683.28 690.425 L1683.84 690.425 L1684.4 690.425 L1684.95 690.425 L1685.51 690.425 L1686.07 690.425 L1686.63 690.425 L1687.19 690.425 L1687.75 690.425 L1688.31 690.425 L1688.87 690.425 L1689.43 690.425 L1689.99 690.425 L1690.55 690.425 L1691.11 690.425 L1691.67 690.425 L1692.23 690.425 L1692.78 690.425 L1693.34 690.425 L1693.9 690.425 L1694.46 690.425 L1695.02 690.425 L1695.58 690.425 L1696.14 690.425 L1696.7 690.425 L1697.26 690.425 L1697.82 690.425 L1698.38 690.425 L1698.94 690.425 L1699.5 690.425 L1700.05 690.425 L1700.61 690.425 L1701.17 690.425 L1701.73 690.425 L1702.29 690.425 L1702.85 690.425 L1703.41 690.425 L1703.97 690.425 L1704.53 690.425 L1705.09 690.425 L1705.65 690.425 L1706.21 690.425 L1706.77 690.425 L1707.32 690.425 L1707.88 690.425 L1708.44 690.425 L1709 690.425 L1709.56 690.425 L1710.12 690.425 L1710.68 690.425 L1711.24 690.425 L1711.8 690.425 L1712.36 690.425 L1712.92 690.425 L1713.48 690.425 L1714.04 690.425 L1714.6 690.425 L1715.15 690.425 L1715.71 690.425 L1716.27 690.425 L1716.83 690.425 L1717.39 690.425 L1717.95 690.425 L1718.51 690.425 L1719.07 690.425 L1719.63 690.425 L1720.19 690.425 L1720.75 690.425 L1721.31 690.425 L1721.87 690.425 L1722.42 690.425 L1722.98 690.425 L1723.54 690.425 L1724.1 690.425 L1724.66 690.425 L1725.22 690.425 L1725.78 690.425 L1726.34 690.425 L1726.9 690.425 L1727.46 690.425 L1728.02 690.425 L1728.58 690.425 L1729.14 690.425 L1729.69 690.425 L1730.25 690.425 L1730.81 690.425 L1731.37 690.425 L1731.93 690.425 L1732.49 690.425 L1733.05 690.425 L1733.61 690.425 L1734.17 690.425 L1734.73 690.425 L1735.29 690.425 L1735.85 690.425 L1736.41 690.425 L1736.97 690.425 L1737.52 690.425 L1738.08 690.425 L1738.64 690.425 L1739.2 690.425 L1739.76 690.425 L1740.32 690.425 L1740.88 690.425 L1741.44 690.425 L1742 690.425 L1742.56 690.425 L1743.12 690.425 L1743.68 690.425 L1744.24 690.425 L1744.79 690.425 L1745.35 690.425 L1745.91 690.425 L1746.47 690.425 L1747.03 690.425 L1747.59 690.425 L1748.15 690.425 L1748.71 690.425 L1749.27 690.425 L1749.83 690.425 L1750.39 690.425 L1750.95 690.425 L1751.51 690.425 L1752.06 690.425 L1752.62 690.425 L1753.18 690.425 L1753.74 690.425 L1754.3 690.425 L1754.86 690.425 L1755.42 690.425 L1755.98 690.425 L1756.54 690.425 L1757.1 690.425 L1757.66 690.425 L1758.22 690.425 L1758.78 690.425 L1759.34 690.425 L1759.89 690.425 L1760.45 690.425 L1761.01 690.425 L1761.57 690.425 L1762.13 690.425 L1762.69 690.425 L1763.25 690.425 L1763.81 690.425 L1764.37 690.425 L1764.93 690.425 L1765.49 690.425 L1766.05 690.425 L1766.61 690.425 L1767.16 690.425 L1767.72 690.425 L1768.28 690.425 L1768.84 690.425 L1769.4 690.425 L1769.96 690.425 L1770.52 690.425 L1771.08 690.425 L1771.64 690.425 L1772.2 690.425 L1772.76 690.425 L1773.32 690.425 L1773.88 690.425 L1774.43 690.425 L1774.99 690.425 L1775.55 690.425 L1776.11 690.425 L1776.67 690.425 L1777.23 690.425 L1777.79 690.425 L1778.35 690.425 L1778.91 690.425 L1779.47 690.425 L1780.03 690.425 L1780.59 690.425 L1781.15 690.425 L1781.71 690.425 L1782.26 690.425 L1782.82 690.425 L1783.38 690.425 L1783.94 690.425 L1784.5 690.425 L1785.06 690.425 L1785.62 690.425 L1786.18 690.425 L1786.74 690.425 L1787.3 690.425 L1787.86 690.425 L1788.42 690.425 L1788.98 690.425 L1789.53 690.425 L1790.09 690.425 L1790.65 690.425 L1791.21 690.425 L1791.77 690.425 L1792.33 690.425 L1792.89 690.425 L1793.45 690.425 L1794.01 690.425 L1794.57 690.425 L1795.13 690.425 L1795.69 690.425 L1796.25 690.425 L1796.8 690.425 L1797.36 690.425 L1797.92 690.425 L1798.48 690.425 L1799.04 690.425 L1799.6 690.425 L1800.16 690.425 L1800.72 690.425 L1801.28 690.425 L1801.84 690.425 L1802.4 690.425 L1802.96 690.425 L1803.52 690.425 L1804.08 690.425 L1804.63 690.425 L1805.19 690.425 L1805.75 690.425 L1806.31 690.425 L1806.87 690.425 L1807.43 690.425 L1807.99 690.425 L1808.55 690.425 L1809.11 690.425 L1809.67 690.425 L1810.23 690.425 L1810.79 690.425 L1811.35 690.425 L1811.9 690.425 L1812.46 690.425 L1813.02 690.425 L1813.58 690.425 L1814.14 690.425 L1814.7 690.425 L1815.26 690.425 L1815.82 690.425 L1816.38 690.425 L1816.94 690.425 L1817.5 690.425 L1818.06 690.425 L1818.62 690.425 L1819.18 690.425 L1819.73 690.425 L1820.29 690.425 L1820.85 690.425 L1821.41 690.425 L1821.97 690.425 L1822.53 690.425 L1823.09 690.425 L1823.65 690.425 L1824.21 690.425 L1824.77 690.425 L1825.33 690.425 L1825.89 690.425 L1826.45 690.425 L1827 690.425 L1827.56 690.425 L1828.12 690.425 L1828.68 690.425 L1829.24 690.425 L1829.8 690.425 L1830.36 690.425 L1830.92 690.425 L1831.48 690.425 L1832.04 690.425 L1832.6 690.425 L1833.16 690.425 L1833.72 690.425 L1834.27 690.425 L1834.83 690.425 L1835.39 690.425 L1835.95 690.425 L1836.51 690.425 L1837.07 690.425 L1837.63 690.425 L1838.19 690.425 L1838.19 681.241 L1837.63 681.241 L1837.07 681.241 L1836.51 681.241 L1835.95 681.241 L1835.39 681.241 L1834.83 681.241 L1834.27 681.241 L1833.72 681.241 L1833.16 681.241 L1832.6 681.241 L1832.04 681.241 L1831.48 681.241 L1830.92 681.241 L1830.36 681.241 L1829.8 681.241 L1829.24 681.241 L1828.68 681.241 L1828.12 681.241 L1827.56 681.241 L1827 681.241 L1826.45 681.241 L1825.89 681.241 L1825.33 681.241 L1824.77 681.241 L1824.21 681.241 L1823.65 681.241 L1823.09 681.241 L1822.53 681.241 L1821.97 681.241 L1821.41 681.241 L1820.85 681.241 L1820.29 681.241 L1819.73 681.241 L1819.18 681.241 L1818.62 681.241 L1818.06 681.241 L1817.5 681.241 L1816.94 681.241 L1816.38 681.241 L1815.82 681.241 L1815.26 681.241 L1814.7 681.241 L1814.14 681.241 L1813.58 681.241 L1813.02 681.241 L1812.46 681.241 L1811.9 681.241 L1811.35 681.241 L1810.79 681.241 L1810.23 681.241 L1809.67 681.241 L1809.11 681.241 L1808.55 681.241 L1807.99 681.241 L1807.43 681.241 L1806.87 681.241 L1806.31 681.241 L1805.75 681.241 L1805.19 681.241 L1804.63 681.241 L1804.08 681.241 L1803.52 681.241 L1802.96 681.241 L1802.4 681.241 L1801.84 681.241 L1801.28 681.241 L1800.72 681.241 L1800.16 681.241 L1799.6 681.241 L1799.04 681.241 L1798.48 681.241 L1797.92 681.241 L1797.36 681.241 L1796.8 681.241 L1796.25 681.241 L1795.69 681.241 L1795.13 681.241 L1794.57 681.241 L1794.01 681.241 L1793.45 681.241 L1792.89 681.241 L1792.33 681.241 L1791.77 681.241 L1791.21 681.241 L1790.65 681.241 L1790.09 681.241 L1789.53 681.241 L1788.98 681.241 L1788.42 681.241 L1787.86 681.241 L1787.3 681.241 L1786.74 681.241 L1786.18 681.241 L1785.62 681.241 L1785.06 681.241 L1784.5 681.241 L1783.94 681.241 L1783.38 681.241 L1782.82 681.241 L1782.26 681.241 L1781.71 681.241 L1781.15 681.241 L1780.59 681.241 L1780.03 681.241 L1779.47 681.241 L1778.91 681.241 L1778.35 681.241 L1777.79 681.241 L1777.23 681.241 L1776.67 681.241 L1776.11 681.241 L1775.55 681.241 L1774.99 681.241 L1774.43 681.241 L1773.88 681.241 L1773.32 681.241 L1772.76 681.241 L1772.2 681.241 L1771.64 681.241 L1771.08 681.241 L1770.52 681.241 L1769.96 681.241 L1769.4 681.241 L1768.84 681.241 L1768.28 681.241 L1767.72 681.241 L1767.16 681.241 L1766.61 681.241 L1766.05 681.241 L1765.49 681.241 L1764.93 681.241 L1764.37 681.241 L1763.81 681.241 L1763.25 681.241 L1762.69 681.241 L1762.13 681.241 L1761.57 681.241 L1761.01 681.241 L1760.45 681.241 L1759.89 681.241 L1759.34 681.241 L1758.78 681.241 L1758.22 681.241 L1757.66 681.241 L1757.1 681.241 L1756.54 681.241 L1755.98 681.241 L1755.42 681.241 L1754.86 681.241 L1754.3 681.241 L1753.74 681.241 L1753.18 681.241 L1752.62 681.241 L1752.06 681.241 L1751.51 681.241 L1750.95 681.241 L1750.39 681.241 L1749.83 681.241 L1749.27 681.241 L1748.71 681.241 L1748.15 681.241 L1747.59 681.241 L1747.03 681.241 L1746.47 681.241 L1745.91 681.241 L1745.35 681.241 L1744.79 681.241 L1744.24 681.241 L1743.68 681.241 L1743.12 681.241 L1742.56 681.241 L1742 681.241 L1741.44 681.241 L1740.88 681.241 L1740.32 681.241 L1739.76 681.241 L1739.2 681.241 L1738.64 681.241 L1738.08 681.241 L1737.52 681.241 L1736.97 681.241 L1736.41 681.241 L1735.85 681.241 L1735.29 681.241 L1734.73 681.241 L1734.17 681.241 L1733.61 681.241 L1733.05 681.241 L1732.49 681.241 L1731.93 681.241 L1731.37 681.241 L1730.81 681.241 L1730.25 681.241 L1729.69 681.241 L1729.14 681.241 L1728.58 681.241 L1728.02 681.241 L1727.46 681.241 L1726.9 681.241 L1726.34 681.241 L1725.78 681.241 L1725.22 681.241 L1724.66 681.241 L1724.1 681.241 L1723.54 681.241 L1722.98 681.241 L1722.42 681.241 L1721.87 681.241 L1721.31 681.241 L1720.75 681.241 L1720.19 681.241 L1719.63 681.241 L1719.07 681.241 L1718.51 681.241 L1717.95 681.241 L1717.39 681.241 L1716.83 681.241 L1716.27 681.241 L1715.71 681.241 L1715.15 681.241 L1714.6 681.241 L1714.04 681.241 L1713.48 681.241 L1712.92 681.241 L1712.36 681.241 L1711.8 681.241 L1711.24 681.241 L1710.68 681.241 L1710.12 681.241 L1709.56 681.241 L1709 681.241 L1708.44 681.241 L1707.88 681.241 L1707.32 681.241 L1706.77 681.241 L1706.21 681.241 L1705.65 681.241 L1705.09 681.241 L1704.53 681.241 L1703.97 681.241 L1703.41 681.241 L1702.85 681.241 L1702.29 681.241 L1701.73 681.241 L1701.17 681.241 L1700.61 681.241 L1700.05 681.241 L1699.5 681.241 L1698.94 681.241 L1698.38 681.241 L1697.82 681.241 L1697.26 681.241 L1696.7 681.241 L1696.14 681.241 L1695.58 681.241 L1695.02 681.241 L1694.46 681.241 L1693.9 681.241 L1693.34 681.241 L1692.78 681.241 L1692.23 681.241 L1691.67 681.241 L1691.11 681.241 L1690.55 681.241 L1689.99 681.241 L1689.43 681.241 L1688.87 681.241 L1688.31 681.241 L1687.75 681.241 L1687.19 681.241 L1686.63 681.241 L1686.07 681.241 L1685.51 681.241 L1684.95 681.241 L1684.4 681.241 L1683.84 681.241 L1683.28 681.241 L1682.72 681.241 L1682.16 681.241 L1681.6 681.241 L1681.04 681.241 L1680.48 681.241 L1679.92 681.241 L1679.36 681.241 L1678.8 681.241 L1678.24 681.241 L1677.68 681.241 L1677.13 681.241 L1676.57 681.241 L1676.01 681.241 L1675.45 681.241 L1674.89 681.241 L1674.33 681.241 L1673.77 681.241 L1673.21 681.241 L1672.65 681.241 L1672.09 681.241 L1671.53 681.241 L1670.97 681.241 L1670.41 681.241 L1669.85 681.241 L1669.3 681.241 L1668.74 681.241 L1668.18 681.241 L1667.62 681.241 L1667.06 681.241 L1666.5 681.241 L1665.94 681.241 L1665.38 681.241 L1664.82 681.241 L1664.26 681.241 L1663.7 681.241 L1663.14 681.241 L1662.58 681.241 L1662.03 681.241 L1661.47 681.241 L1660.91 681.241 L1660.35 681.241 L1659.79 681.241 L1659.23 681.241 L1658.67 681.241 L1658.11 681.241 L1657.55 681.241 L1656.99 681.241 L1656.43 681.241 L1655.87 681.241 L1655.31 681.241 L1654.76 681.241 L1654.2 681.241 L1653.64 681.241 L1653.08 681.241 L1652.52 681.241 L1651.96 681.241 L1651.4 681.241 L1650.84 681.241 L1650.28 681.241 L1649.72 681.241 L1649.16 681.241 L1648.6 681.241 L1648.04 681.241 L1647.48 681.241 L1646.93 681.241 L1646.37 681.241 L1645.81 681.241 L1645.25 681.241 L1644.69 681.241 L1644.13 681.241 L1643.57 681.241 L1643.01 681.241 L1642.45 681.241 L1641.89 681.241 L1641.33 681.241 L1640.77 681.241 L1640.21 681.241 L1639.66 681.241 L1639.1 681.241 L1638.54 681.241 L1637.98 681.241 L1637.42 681.241 L1636.86 681.241 L1636.3 681.241 L1635.74 681.241 L1635.18 681.241 L1634.62 681.241 L1634.06 681.241 L1633.5 681.241 L1632.94 681.241 L1632.39 681.241 L1631.83 681.241 L1631.27 681.241 L1630.71 681.241 L1630.15 681.241 L1629.59 681.241 L1629.03 681.241 L1628.47 681.241 L1627.91 681.241 L1627.35 681.241 L1626.79 681.241 L1626.23 681.241 L1625.67 681.241 L1625.11 681.241 L1624.56 681.241 L1624 681.241 L1623.44 681.241 L1622.88 681.241 L1622.32 681.241 L1621.76 681.241 L1621.2 681.241 L1620.64 681.241 L1620.08 681.241 L1619.52 681.241 L1618.96 681.241 L1618.4 681.241 L1617.84 681.241 L1617.29 681.241 L1616.73 681.241 L1616.17 681.241 L1615.61 681.241 L1615.05 681.241 L1614.49 681.241 L1613.93 681.241 L1613.37 681.241 L1612.81 681.241 L1612.25 681.241 L1611.69 681.241 L1611.13 681.241 L1610.57 681.241 L1610.02 681.241 L1609.46 681.241 L1608.9 681.241 L1608.34 681.241 L1607.78 681.241 L1607.22 681.241 L1606.66 681.241 L1606.1 681.241 L1605.54 681.241 L1604.98 681.241 L1604.42 681.241 L1603.86 681.241 L1603.3 681.241 L1602.74 681.241 L1602.19 681.241 L1601.63 681.241 L1601.07 681.241 L1600.51 681.241 L1599.95 681.241 L1599.39 681.241 L1598.83 681.241 L1598.27 681.241 L1597.71 681.241 L1597.15 681.241 L1596.59 681.241 L1596.03 681.241 L1595.47 681.241 L1594.92 681.241 L1594.36 681.241 L1593.8 681.241 L1593.24 681.241 L1592.68 681.241 L1592.12 681.241 L1591.56 681.241 L1591 681.241 L1590.44 681.241 L1589.88 681.241 L1589.32 681.241 L1588.76 681.241 L1588.2 681.241 L1587.65 681.241 L1587.09 681.241 L1586.53 681.241 L1585.97 681.241 L1585.41 681.241 L1584.85 681.241 L1584.29 681.241 L1583.73 681.241 L1583.17 681.241 L1582.61 681.241 L1582.05 681.241 L1581.49 681.241 L1580.93 681.241 L1580.37 681.241 L1579.82 681.241 L1579.26 681.241 L1578.7 681.241 L1578.14 681.241 L1577.58 681.241 L1577.02 681.241 L1576.46 681.241 L1575.9 681.241 L1575.34 681.241 L1574.78 681.241 L1574.22 681.241 L1573.66 681.241 L1573.1 681.241 L1572.55 681.241 L1571.99 681.241 L1571.43 681.241 L1570.87 681.241 L1570.31 681.241 L1569.75 681.241 L1569.19 681.241 L1568.63 681.241 L1568.07 681.241 L1567.51 681.241 L1566.95 681.241 L1566.39 681.241 L1565.83 681.241 L1565.28 681.241 L1564.72 681.241 L1564.16 681.241 L1563.6 681.241 L1563.04 681.241 L1562.48 681.241 L1561.92 681.241 L1561.36 681.241 L1560.8 681.241 L1560.24 681.241 L1559.68 681.241 L1559.12 681.241 L1558.56 681.241 L1558 681.241 L1557.45 681.241 L1556.89 681.241 L1556.33 681.241 L1555.77 681.241 L1555.21 681.241 L1554.65 681.241 L1554.09 681.241 L1553.53 681.241 L1552.97 681.241 L1552.41 681.241 L1551.85 681.241 L1551.29 681.241 L1550.73 681.241 L1550.18 681.241 L1549.62 681.241 L1549.06 681.241 L1548.5 681.241 L1547.94 681.241 L1547.38 681.241 L1546.82 681.241 L1546.26 681.241 L1545.7 681.241 L1545.14 681.241 L1544.58 681.241 L1544.02 681.241 L1543.46 681.241 L1542.9 681.241 L1542.35 681.241 L1541.79 681.241 L1541.23 681.241 L1540.67 681.241 L1540.11 681.241 L1539.55 681.241 L1538.99 681.241 L1538.43 681.241 L1537.87 681.241 L1537.31 681.241 L1536.75 681.241 L1536.19 681.241 L1535.63 681.241 L1535.08 681.241 L1534.52 681.241 L1533.96 681.241 L1533.4 681.241 L1532.84 681.241 L1532.28 681.241 L1531.72 681.241 L1531.16 681.241 L1530.6 681.241 L1530.04 681.241 L1529.48 681.241 L1528.92 681.241 L1528.36 681.241 L1527.81 681.241 L1527.25 681.241 L1526.69 681.241 L1526.13 681.241 L1525.57 681.241 L1525.01 681.241 L1524.45 681.241 L1523.89 681.241 L1523.33 681.241 L1522.77 681.241 L1522.21 681.241 L1521.65 681.241 L1521.09 681.241 L1520.53 681.241 L1519.98 681.241 L1519.42 681.241 L1518.86 681.241 L1518.3 681.241 L1517.74 681.241 L1517.18 681.241 L1516.62 681.241 L1516.06 681.241 L1515.5 681.241 L1514.94 681.241 L1514.38 681.241 L1513.82 681.241 L1513.26 681.241 L1512.71 681.241 L1512.15 681.241 L1511.59 681.241 L1511.03 681.241 L1510.47 681.241 L1509.91 681.241 L1509.35 681.241 L1508.79 681.241 L1508.23 681.241 L1507.67 681.241 L1507.11 681.241 L1506.55 681.241 L1505.99 681.241 L1505.44 681.241 L1504.88 681.241 L1504.32 681.241 L1503.76 681.241 L1503.2 681.241 L1502.64 681.241 L1502.08 681.241 L1501.52 681.241 L1500.96 681.241 L1500.4 681.241 L1499.84 681.241 L1499.28 681.241 L1498.72 681.241 L1498.16 681.241 L1497.61 681.241 L1497.05 681.241 L1496.49 681.241 L1495.93 681.241 L1495.37 681.241 L1494.81 681.241 L1494.25 681.241 L1493.69 681.241 L1493.13 681.241 L1492.57 681.241 L1492.01 681.241 L1491.45 681.241 L1490.89 681.241 L1490.34 681.241 L1489.78 681.241 L1489.22 681.241 L1488.66 681.241 L1488.1 681.241 L1487.54 681.241 L1486.98 681.241 L1486.42 681.241 L1485.86 681.241 L1485.3 681.241 L1484.74 681.241 L1484.18 681.241 L1483.62 681.241 L1483.07 681.241 L1482.51 681.241 L1481.95 681.241 L1481.39 681.241 L1480.83 681.241 L1480.27 681.241 L1479.71 681.241 L1479.15 681.241 L1478.59 681.241 L1478.03 681.241 L1477.47 681.241 L1476.91 681.241 L1476.35 681.241 L1475.79 681.241 L1475.24 681.241 L1474.68 681.241 L1474.12 681.241 L1473.56 681.241 L1473 681.241 L1472.44 681.241 L1471.88 681.241 L1471.32 681.241 L1470.76 681.241 L1470.2 681.241 L1469.64 681.241 L1469.08 681.241 L1468.52 681.241 L1467.97 681.241 L1467.41 681.241 L1466.85 681.241 L1466.29 681.241 L1465.73 681.241 L1465.17 681.241 L1464.61 681.241 L1464.05 681.241 L1463.49 681.241 L1462.93 681.241 L1462.37 681.241 L1461.81 681.241 L1461.25 681.241 L1460.7 681.241 L1460.14 681.241 L1459.58 681.241 L1459.02 681.241 L1458.46 681.241 L1457.9 681.241 L1457.34 681.241 L1456.78 681.241 L1456.22 681.241 L1455.66 681.241 L1455.1 681.241 L1454.54 681.241 L1453.98 681.241 L1453.42 681.241 L1452.87 681.241 L1452.31 681.241 L1451.75 681.241 L1451.19 681.241 L1450.63 681.241 L1450.07 681.241 L1449.51 681.241 L1448.95 681.241 L1448.39 681.241 L1447.83 681.241 L1447.27 681.241 L1446.71 681.241 L1446.15 681.241 L1445.6 681.241 L1445.04 681.241 L1444.48 681.241 L1443.92 681.241 L1443.36 681.241 L1442.8 681.241 L1442.24 681.241 L1441.68 681.241 L1441.12 681.241 L1440.56 681.241 L1440 681.241 L1439.44 681.241 L1438.88 681.241 L1438.33 681.241 L1437.77 681.241 L1437.21 681.241 L1436.65 681.241 L1436.09 681.241 L1435.53 681.241 L1434.97 681.241 L1434.41 681.241 L1433.85 681.241 L1433.29 681.241 L1432.73 681.241 L1432.17 681.241 L1431.61 681.241 L1431.05 681.241 L1430.5 681.241 L1429.94 681.241 L1429.38 681.241 L1428.82 681.241 L1428.26 681.241 L1427.7 681.241 L1427.14 681.241 L1426.58 681.241 L1426.02 681.241 L1425.46 681.241 L1424.9 681.241 L1424.34 681.241 L1423.78 681.241 L1423.23 681.241 L1422.67 681.241 L1422.11 681.241 L1421.55 681.241 L1420.99 681.241 L1420.43 681.241 L1419.87 681.241 L1419.31 681.241 L1418.75 681.241 L1418.19 681.241 L1417.63 681.241 L1417.07 681.241 L1416.51 681.241 L1415.95 681.241 L1415.4 681.241 L1414.84 681.241 L1414.28 681.241 L1413.72 681.241 L1413.16 681.241 L1412.6 681.241 L1412.04 681.241 L1411.48 681.241 L1410.92 681.241 L1410.36 681.241 L1409.8 681.241 L1409.24 681.241 L1408.68 681.241 L1408.13 681.241 L1407.57 681.241 L1407.01 681.241 L1406.45 681.241 L1405.89 681.241 L1405.33 681.241 L1404.77 681.241 L1404.21 681.241 L1403.65 681.241 L1403.09 681.241 L1402.53 681.241 L1401.97 681.241 L1401.41 681.241 L1400.86 681.241 L1400.3 681.241 L1399.74 681.241 L1399.18 681.241 L1398.62 681.241 L1398.06 681.241 L1397.5 681.241 L1396.94 681.241 L1396.38 681.241 L1395.82 681.241 L1395.26 681.241 L1394.7 681.241 L1394.14 681.241 L1393.58 681.241 L1393.03 681.241 L1392.47 681.241 L1391.91 681.241 L1391.35 681.241 L1390.79 681.241 L1390.23 681.241 L1389.67 681.241 L1389.11 681.241 L1388.55 681.241 L1387.99 681.241 L1387.43 681.241 L1386.87 681.241 L1386.31 681.241 L1385.76 681.241 L1385.2 681.241 L1384.64 681.241 L1384.08 681.241 L1383.52 681.241 L1382.96 681.241 L1382.4 681.241 L1381.84 681.241 L1381.28 681.241 L1380.72 681.241 L1380.16 681.241 L1379.6 681.241 L1379.04 681.241 L1378.49 681.241 L1377.93 681.241 L1377.37 681.241 L1376.81 681.241 L1376.25 681.241 L1375.69 681.241 L1375.13 681.241 L1374.57 681.241 L1374.01 681.241 L1373.45 681.241 L1372.89 681.241 L1372.33 681.241 L1371.77 681.241 L1371.21 681.241 L1370.66 681.241 L1370.1 681.241 L1369.54 681.241 L1368.98 681.241 L1368.42 681.241 L1367.86 681.241 L1367.3 681.241 L1366.74 681.241 L1366.18 681.241 L1365.62 681.241 L1365.06 681.241 L1364.5 681.241 L1363.94 681.241 L1363.39 681.241 L1362.83 681.241 L1362.27 681.241 L1361.71 681.241 L1361.15 681.241 L1360.59 681.241 L1360.03 681.241 L1359.47 681.241 L1358.91 681.241 L1358.35 681.241 L1357.79 681.241 L1357.23 681.241 L1356.67 681.241 L1356.12 681.241 L1355.56 681.241 L1355 681.241 L1354.44 681.241 L1353.88 681.241 L1353.32 681.241 L1352.76 681.241 L1352.2 681.241 L1351.64 681.241 L1351.08 681.241 L1350.52 681.241 L1349.96 681.241 L1349.4 681.241 L1348.84 681.241 L1348.29 681.241 L1347.73 681.241 L1347.17 681.241 L1346.61 681.241 L1346.05 681.241 L1345.49 681.241 L1344.93 681.241 L1344.37 681.241 L1343.81 681.241 L1343.25 681.241 L1342.69 681.241 L1342.13 681.241 L1341.57 681.241 L1341.02 681.241 L1340.46 681.241 L1339.9 681.241 L1339.34 681.241 L1338.78 681.241 L1338.22 681.241 L1337.66 681.241 L1337.1 681.241 L1336.54 681.241 L1335.98 681.241 L1335.42 681.241 L1334.86 681.241 L1334.3 681.241 L1333.75 681.241 L1333.19 681.241 L1332.63 681.241 L1332.07 681.241 L1331.51 681.241 L1330.95 681.241 L1330.39 681.241 L1329.83 681.241 L1329.27 681.241 L1328.71 681.241 L1328.15 681.241 L1327.59 681.241 L1327.03 681.241 L1326.47 681.241 L1325.92 681.241 L1325.36 681.241 L1324.8 681.241 L1324.24 681.241 L1323.68 681.241 L1323.12 681.241 L1322.56 681.241 L1322 681.241 L1321.44 681.241 L1320.88 681.241 L1320.32 681.241 L1319.76 681.241 L1319.2 681.241 L1318.65 681.241 L1318.09 681.241 L1317.53 681.241 L1316.97 681.241 L1316.41 681.241 L1315.85 681.241 L1315.29 681.241 L1314.73 681.241 L1314.17 681.241 L1313.61 681.241 L1313.05 681.241 L1312.49 681.241 L1311.93 681.241 L1311.38 681.241 L1310.82 681.241 L1310.26 681.241 L1309.7 681.241 L1309.14 681.241 L1308.58 681.241 L1308.02 681.241 L1307.46 681.241 L1306.9 681.241 L1306.34 681.241 L1305.78 681.241 L1305.22 681.241 L1304.66 681.241 L1304.1 681.241 L1303.55 681.241 L1302.99 681.241 L1302.43 681.241 L1301.87 681.241 L1301.31 681.241 L1300.75 681.241 L1300.19 681.241 L1299.63 681.241 L1299.07 681.241 L1298.51 681.241 L1297.95 681.241 L1297.39 681.241 L1296.83 681.241 L1296.28 681.241 L1295.72 681.241 L1295.16 681.241 L1294.6 681.241 L1294.04 681.241 L1293.48 681.241 L1292.92 681.241 L1292.36 681.241 L1291.8 681.241 L1291.24 681.241 L1290.68 681.241 L1290.12 681.241 L1289.56 681.241 L1289 681.241 L1288.45 681.241 L1287.89 681.241 L1287.33 681.241 L1286.77 681.241 L1286.21 681.241 L1285.65 681.241 L1285.09 681.241 L1284.53 681.241 L1283.97 681.241 L1283.41 681.241 L1282.85 681.241 L1282.29 681.241 L1281.73 681.241 L1281.18 681.241 L1280.62 681.241 L1280.06 681.241 L1279.5 681.241 L1278.94 681.241 L1278.38 681.241 L1277.82 681.241 L1277.26 681.241 L1276.7 681.241 L1276.14 681.241 L1275.58 681.241 L1275.02 681.241 L1274.46 681.241 L1273.91 681.241 L1273.35 681.241 L1272.79 681.241 L1272.23 681.241 L1271.67 681.241 L1271.11 681.241 L1270.55 681.241 L1269.99 681.241 L1269.43 681.241 L1268.87 681.241 L1268.31 681.241 L1267.75 681.241 L1267.19 681.241 L1266.63 681.241 L1266.08 681.241 L1265.52 681.241 L1264.96 681.241 L1264.4 681.241 L1263.84 681.241 L1263.28 681.241 L1262.72 681.241 L1262.16 681.241 L1261.6 681.241 L1261.04 681.241 L1260.48 681.241 L1259.92 681.241 L1259.36 681.241 L1258.81 681.241 L1258.25 681.241 L1257.69 681.241 L1257.13 681.241 L1256.57 681.241 L1256.01 681.241 L1255.45 681.241 L1254.89 681.241 L1254.33 681.241 L1253.77 681.241 L1253.21 681.241 L1252.65 681.241 L1252.09 681.241 L1251.54 681.241 L1250.98 681.241 L1250.42 681.241 L1249.86 681.241 L1249.3 681.241 L1248.74 681.241 L1248.18 681.241 L1247.62 681.241 L1247.06 681.241 L1246.5 681.241 L1245.94 681.241 L1245.38 681.241 L1244.82 681.241 L1244.26 681.241 L1243.71 681.241 L1243.15 681.241 L1242.59 681.241 L1242.03 681.241 L1241.47 681.241 L1240.91 681.241 L1240.35 681.241 L1239.79 681.241 L1239.23 681.241 L1238.67 681.241 L1238.11 681.241 L1237.55 681.241 L1236.99 681.241 L1236.44 681.241 L1235.88 681.241 L1235.32 681.241 L1234.76 681.241 L1234.2 681.241 L1233.64 681.241 L1233.08 681.241 L1232.52 681.241 L1231.96 681.241 L1231.4 681.241 L1230.84 681.241 L1230.28 681.241 L1229.72 681.241 L1229.17 681.241 L1228.61 681.241 L1228.05 681.241 L1227.49 681.241 L1226.93 681.241 L1226.37 681.241 L1225.81 681.241 L1225.25 681.241 L1224.69 681.241 L1224.13 681.241 L1223.57 681.241 L1223.01 681.241 L1222.45 681.241 L1221.89 681.241 L1221.34 681.241 L1220.78 681.241 L1220.22 681.241 L1219.66 681.241 L1219.1 681.241 L1218.54 681.241 L1217.98 681.241 L1217.42 681.241 L1216.86 681.241 L1216.3 681.241 L1215.74 681.241 L1215.18 681.241 L1214.62 681.241 L1214.07 681.241 L1213.51 681.241 L1212.95 681.241 L1212.39 681.241 L1211.83 681.241 L1211.27 681.241 L1210.71 681.241 L1210.15 681.241 L1209.59 681.241 L1209.03 681.241 L1208.47 681.241 L1207.91 681.241 L1207.35 681.241 L1206.8 681.241 L1206.24 681.241 L1205.68 681.241 L1205.12 681.241 L1204.56 681.241 L1204 681.241 L1203.44 681.241 L1202.88 681.241 L1202.32 681.241 L1201.76 681.241 L1201.2 681.241 L1200.64 681.241 L1200.08 681.241 L1199.52 681.241 L1198.97 681.241 L1198.41 681.241 L1197.85 681.241 L1197.29 681.241 L1196.73 681.241 L1196.17 681.241 L1195.61 681.241 L1195.05 681.241 L1194.49 681.241 L1193.93 681.241 L1193.37 681.241 L1192.81 681.241 L1192.25 681.241 L1191.7 681.241 L1191.14 681.241 L1190.58 681.241 L1190.02 681.241 L1189.46 681.241 L1188.9 681.241 L1188.34 681.241 L1187.78 681.241 L1187.22 681.241 L1186.66 681.241 L1186.1 681.241 L1185.54 681.241 L1184.98 681.241 L1184.43 681.241 L1183.87 681.241 L1183.31 681.241 L1182.75 681.241 L1182.19 681.241 L1181.63 681.241 L1181.07 681.241 L1180.51 681.241 L1179.95 681.241 L1179.39 681.241 L1178.83 681.241 L1178.27 681.241 L1177.71 681.241 L1177.15 681.241 L1176.6 681.241 L1176.04 681.241 L1175.48 681.241 L1174.92 681.241 L1174.36 681.241 L1173.8 681.241 L1173.24 681.241 L1172.68 681.241 L1172.12 681.241 L1171.56 681.241 L1171 681.241 L1170.44 681.241 L1169.88 681.241 L1169.33 681.241 L1168.77 681.241 L1168.21 681.241 L1167.65 681.241 L1167.09 681.241 L1166.53 681.241 L1165.97 681.241 L1165.41 681.241 L1164.85 681.241 L1164.29 681.241 L1163.73 681.241 L1163.17 681.241 L1162.61 681.241 L1162.05 681.241 L1161.5 681.241 L1160.94 681.241 L1160.38 681.241 L1159.82 681.241 L1159.26 681.241 L1158.7 681.241 L1158.14 681.241 L1157.58 681.241 L1157.02 681.241 L1156.46 681.241 L1155.9 681.241 L1155.34 681.241 L1154.78 681.241 L1154.23 681.241 L1153.67 681.241 L1153.11 681.241 L1152.55 681.241 L1151.99 681.241 L1151.43 681.241 L1150.87 681.241 L1150.31 681.241 L1149.75 681.241 L1149.19 681.241 L1148.63 681.241 L1148.07 681.241 L1147.51 681.241 L1146.96 681.241 L1146.4 681.241 L1145.84 681.241 L1145.28 681.241 L1144.72 681.241 L1144.16 681.241 L1143.6 681.241 L1143.04 681.241 L1142.48 681.241 L1141.92 681.241 L1141.36 681.241 L1140.8 681.241 L1140.24 681.241 L1139.68 681.241 L1139.13 681.241 L1138.57 681.241 L1138.01 681.241 L1137.45 681.241 L1136.89 681.241 L1136.33 681.241 L1135.77 681.241 L1135.21 681.241 L1134.65 681.241 L1134.09 681.241 L1133.53 681.241 L1132.97 681.241 L1132.41 681.241 L1131.86 681.241 L1131.3 681.241 L1130.74 681.241 L1130.18 681.241 L1129.62 681.241 L1129.06 681.241 L1128.5 681.241 L1127.94 681.241 L1127.38 681.241 L1126.82 681.241 L1126.26 681.241 L1125.7 681.241 L1125.14 681.241 L1124.59 681.241 L1124.03 681.241 L1123.47 681.241 L1122.91 681.241 L1122.35 681.241 L1121.79 681.241 L1121.23 681.241 L1120.67 681.241 L1120.11 681.241 L1119.55 681.241 L1118.99 681.241 L1118.43 681.241 L1117.87 681.241 L1117.31 681.241 L1116.76 681.241 L1116.2 681.241 L1115.64 681.241 L1115.08 681.241 L1114.52 681.241 L1113.96 681.241 L1113.4 681.241 L1112.84 681.241 L1112.28 681.241 L1111.72 681.241 L1111.16 681.241 L1110.6 681.241 L1110.04 681.241 L1109.49 681.241 L1108.93 681.241 L1108.37 681.241 L1107.81 681.241 L1107.25 681.241 L1106.69 681.241 L1106.13 681.241 L1105.57 681.241 L1105.01 681.241 L1104.45 681.241 L1103.89 681.241 L1103.33 681.241 L1102.77 681.241 L1102.22 681.241 L1101.66 681.241 L1101.1 681.241 L1100.54 681.241 L1099.98 681.241 L1099.42 681.241 L1098.86 681.241 L1098.3 681.241 L1097.74 681.241 L1097.18 681.241 L1096.62 681.241 L1096.06 681.241 L1095.5 681.241 L1094.94 681.241 L1094.39 681.241 L1093.83 681.241 L1093.27 681.241 L1092.71 681.241 L1092.15 681.241 L1091.59 681.241 L1091.03 681.241 L1090.47 681.241 L1089.91 681.241 L1089.35 681.241 L1088.79 681.241 L1088.23 681.241 L1087.67 681.241 L1087.12 681.241 L1086.56 681.241 L1086 681.241 L1085.44 681.241 L1084.88 681.241 L1084.32 681.241 L1083.76 681.241 L1083.2 681.241 L1082.64 681.241 L1082.08 681.241 L1081.52 681.241 L1080.96 681.241 L1080.4 681.241 L1079.85 681.241 L1079.29 681.241 L1078.73 681.241 L1078.17 681.241 L1077.61 681.241 L1077.05 681.241 L1076.49 681.241 L1075.93 681.241 L1075.37 681.241 L1074.81 681.241 L1074.25 681.241 L1073.69 681.241 L1073.13 681.241 L1072.57 681.241 L1072.02 681.241 L1071.46 681.241 L1070.9 681.241 L1070.34 681.241 L1069.78 681.241 L1069.22 681.241 L1068.66 681.241 L1068.1 681.241 L1067.54 681.241 L1066.98 681.241 L1066.42 681.241 L1065.86 681.241 L1065.3 681.241 L1064.75 681.241 L1064.19 681.241 L1063.63 681.241 L1063.07 681.241 L1062.51 681.241 L1061.95 681.241 L1061.39 681.241 L1060.83 681.241 L1060.27 681.241 L1059.71 681.241 L1059.15 681.241 L1058.59 681.241 L1058.03 681.241 L1057.48 681.241 L1056.92 681.241 L1056.36 681.241 L1055.8 681.241 L1055.24 681.241 L1054.68 681.241 L1054.12 681.241 L1053.56 681.241 L1053 681.241 L1052.44 681.241 L1051.88 681.241 L1051.32 681.241 L1050.76 681.241 L1050.2 681.241 L1049.65 681.241 L1049.09 681.241 L1048.53 681.241 L1047.97 681.241 L1047.41 681.241 L1046.85 681.241 L1046.29 681.241 L1045.73 681.241 L1045.17 681.241 L1044.61 681.241 L1044.05 681.241 L1043.49 681.241 L1042.93 681.241 L1042.38 681.241 L1041.82 681.241 L1041.26 681.241 L1040.7 681.241 L1040.14 681.241 L1039.58 681.241 L1039.02 681.241 L1038.46 681.241 L1037.9 681.241 L1037.34 681.241 L1036.78 681.241 L1036.22 681.241 L1035.66 681.241 L1035.1 681.241 L1034.55 681.241 L1033.99 681.241 L1033.43 681.241 L1032.87 681.241 L1032.31 681.241 L1031.75 681.241 L1031.19 681.241 L1030.63 681.241 L1030.07 681.241 L1029.51 681.241 L1028.95 681.241 L1028.39 681.241 L1027.83 681.241 L1027.28 681.241 L1026.72 681.241 L1026.16 681.241 L1025.6 681.241 L1025.04 681.241 L1024.48 681.241 L1023.92 681.241 L1023.36 681.241 L1022.8 681.241 L1022.24 681.241 L1021.68 681.241 L1021.12 681.241 L1020.56 681.241 L1020.01 681.241 L1019.45 681.241 L1018.89 681.241 L1018.33 681.241 L1017.77 681.241 L1017.21 681.241 L1016.65 681.241 L1016.09 681.241 L1015.53 681.241 L1014.97 681.241 L1014.41 681.241 L1013.85 681.241 L1013.29 681.241 L1012.73 681.241 L1012.18 681.241 L1011.62 681.241 L1011.06 681.241 L1010.5 681.241 L1009.94 681.241 L1009.38 681.241 L1008.82 681.241 L1008.26 681.241 L1007.7 681.241 L1007.14 681.241 L1006.58 681.241 L1006.02 681.241 L1005.46 681.241 L1004.91 681.241 L1004.35 681.241 L1003.79 681.241 L1003.23 681.241 L1002.67 681.241 L1002.11 681.241 L1001.55 681.241 L1000.99 681.241 L1000.43 681.241 L999.872 681.241 L999.313 681.241 L998.754 681.241 L998.194 681.241 L997.635 681.241 L997.076 681.241 L996.517 681.241 L995.957 681.241 L995.398 681.241 L994.839 681.241 L994.28 681.241 L993.72 681.241 L993.161 681.241 L992.602 681.241 L992.043 681.241 L991.483 681.241 L990.924 681.241 L990.365 681.241 L989.806 681.241 L989.246 681.241 L988.687 681.241 L988.128 681.241 L987.569 681.241 L987.009 681.241 L986.45 681.241 L985.891 681.241 L985.332 681.241 L984.772 681.241 L984.213 681.241 L983.654 681.241 L983.095 681.241 L982.535 681.241 L981.976 681.241 L981.417 681.241 L980.858 681.241 L980.298 681.241 L979.739 681.241 L979.18 681.241 L978.621 681.241 L978.061 681.241 L977.502 681.241 L976.943 681.241 L976.384 681.241 L975.824 681.241 L975.265 681.241 L974.706 681.241 L974.147 681.241 L973.587 681.241 L973.028 681.241 L972.469 681.241 L971.91 681.241 L971.35 681.241 L970.791 681.241 L970.232 681.241 L969.673 681.241 L969.113 681.241 L968.554 681.241 L967.995 681.241 L967.436 681.241 L966.876 681.241 L966.317 681.241 L965.758 681.241 L965.199 681.241 L964.639 681.241 L964.08 681.241 L963.521 681.241 L962.962 681.241 L962.402 681.241 L961.843 681.241 L961.284 681.241 L960.725 681.241 L960.165 681.241 L959.606 681.241 L959.047 681.241 L958.488 681.241 L957.928 681.241 L957.369 681.241 L956.81 681.241 L956.251 681.241 L955.691 681.241 L955.132 681.241 L954.573 681.241 L954.014 681.241 L953.454 681.241 L952.895 681.241 L952.336 681.241 L951.777 681.241 L951.217 681.241 L950.658 681.241 L950.099 681.241 L949.54 681.241 L948.98 681.241 L948.421 681.241 L947.862 681.241 L947.303 681.241 L946.743 681.241 L946.184 681.241 L945.625 681.241 L945.066 681.241 L944.506 681.241 L943.947 681.241 L943.388 681.241 L942.829 681.241 L942.269 681.241 L941.71 681.241 L941.151 681.241 L940.592 681.241 L940.032 681.241 L939.473 681.241 L938.914 681.241 L938.355 681.241 L937.795 681.241 L937.236 681.241 L936.677 681.241 L936.118 681.241 L935.558 681.241 L934.999 681.241 L934.44 681.241 L933.881 681.241 L933.321 681.241 L932.762 681.241 L932.203 681.241 L931.644 681.241 L931.084 681.241 L930.525 681.241 L929.966 681.241 L929.406 681.241 L928.847 681.241 L928.288 681.241 L927.729 681.241 L927.169 681.241 L926.61 681.241 L926.051 681.241 L925.492 681.241 L924.932 681.241 L924.373 681.241 L923.814 681.241 L923.255 681.241 L922.695 681.241 L922.136 681.241 L921.577 681.241 L921.018 681.241 L920.458 681.241 L919.899 681.241 L919.34 681.241 L918.781 681.241 L918.221 681.241 L917.662 681.241 L917.103 681.241 L916.544 681.241 L915.984 681.241 L915.425 681.241 L914.866 681.241 L914.307 681.241 L913.747 681.241 L913.188 681.241 L912.629 681.241 L912.07 681.241 L911.51 681.241 L910.951 681.241 L910.392 681.241 L909.833 681.241 L909.273 681.241 L908.714 681.241 L908.155 681.241 L907.596 681.241 L907.036 681.241 L906.477 681.241 L905.918 681.241 L905.359 681.241 L904.799 681.241 L904.24 681.241 L903.681 681.241 L903.122 681.241 L902.562 681.241 L902.003 681.241 L901.444 681.241 L900.885 681.241 L900.325 681.241 L899.766 681.241 L899.207 681.241 L898.648 681.241 L898.088 681.241 L897.529 681.241 L896.97 681.241 L896.411 681.241 L895.851 681.241 L895.292 681.241 L894.733 681.241 L894.174 681.241 L893.614 681.241 L893.055 681.241 L892.496 681.241 L891.937 681.241 L891.377 681.241 L890.818 681.241 L890.259 681.241 L889.7 681.241 L889.14 681.241 L888.581 681.241 L888.022 681.241 L887.463 681.241 L886.903 681.241 L886.344 681.241 L885.785 681.241 L885.226 681.241 L884.666 681.241 L884.107 681.241 L883.548 681.241 L882.989 681.241 L882.429 681.241 L881.87 681.241 L881.311 681.241 L880.752 681.241 L880.192 681.241 L879.633 681.241 L879.074 681.241 L878.515 681.241 L877.955 681.241 L877.396 681.241 L876.837 681.241 L876.278 681.241 L875.718 681.241 L875.159 681.241 L874.6 681.241 L874.041 681.241 L873.481 681.241 L872.922 681.241 L872.363 681.241 L871.804 681.241 L871.244 681.241 L870.685 681.241 L870.126 681.241 L869.567 681.241 L869.007 681.241 L868.448 681.241 L867.889 681.241 L867.33 681.241 L866.77 681.241 L866.211 681.241 L865.652 681.241 L865.093 681.241 L864.533 681.241 L863.974 681.241 L863.415 681.241 L862.856 681.241 L862.296 681.241 L861.737 681.241 L861.178 681.241 L860.619 681.241 L860.059 681.241 L859.5 681.241 L858.941 681.241 L858.382 681.241 L857.822 681.241 L857.263 681.241 L856.704 681.241 L856.145 681.241 L855.585 681.241 L855.026 681.241 L854.467 681.241 L853.908 681.241 L853.348 681.241 L852.789 681.241 L852.23 681.241 L851.671 681.241 L851.111 681.241 L850.552 681.241 L849.993 681.241 L849.434 681.241 L848.874 681.241 L848.315 681.241 L847.756 681.241 L847.197 681.241 L846.637 681.241 L846.078 681.241 L845.519 681.241 L844.96 681.241 L844.4 681.241 L843.841 681.241 L843.282 681.241 L842.723 681.241 L842.163 681.241 L841.604 681.241 L841.045 681.241 L840.486 681.241 L839.926 681.241 L839.367 681.241 L838.808 681.241 L838.249 681.241 L837.689 681.241 L837.13 681.241 L836.571 681.241 L836.012 681.241 L835.452 681.241 L834.893 681.241 L834.334 681.241 L833.775 681.241 L833.215 681.241 L832.656 681.241 L832.097 681.241 L831.538 681.241 L830.978 681.241 L830.419 681.241 L829.86 681.241 L829.301 681.241 L828.741 681.241 L828.182 681.241 L827.623 681.241 L827.064 681.241 L826.504 681.241 L825.945 681.241 L825.386 681.241 L824.827 681.241 L824.267 681.241 L823.708 681.241 L823.149 681.241 L822.59 681.241 L822.03 681.241 L821.471 681.241 L820.912 681.241 L820.353 681.241 L819.793 681.241 L819.234 681.241 L818.675 681.241 L818.116 681.241 L817.556 681.241 L816.997 681.241 L816.438 681.241 L815.879 681.241 L815.319 681.241 L814.76 681.241 L814.201 681.241 L813.642 681.241 L813.082 681.241 L812.523 681.241 L811.964 681.241 L811.405 681.241 L810.845 681.241 L810.286 681.241 L809.727 681.241 L809.168 681.241 L808.608 681.241 L808.049 681.241 L807.49 681.241 L806.931 681.241 L806.371 681.241 L805.812 681.241 L805.253 681.241 L804.693 681.241 L804.134 681.241 L803.575 681.241 L803.016 681.241 L802.456 681.241 L801.897 681.241 L801.338 681.241 L800.779 681.241 L800.219 681.241 L799.66 681.241 L799.101 681.241 L798.542 681.241 L797.982 681.241 L797.423 681.241 L796.864 681.241 L796.305 681.241 L795.745 681.241 L795.186 681.241 L794.627 681.241 L794.068 681.241 L793.508 681.241 L792.949 681.241 L792.39 681.241 L791.831 681.241 L791.271 681.241 L790.712 681.241 L790.153 681.241 L789.594 681.241 L789.034 681.241 L788.475 681.241 L787.916 681.241 L787.357 681.241 L786.797 681.241 L786.238 681.241 L785.679 681.241 L785.12 681.241 L784.56 681.241 L784.001 681.241 L783.442 681.241 L782.883 681.241 L782.323 681.241 L781.764 681.241 L781.205 681.241 L780.646 681.241 L780.086 681.241 L779.527 681.241 L778.968 681.241 L778.409 681.241 L777.849 681.241 L777.29 681.241 L776.731 681.241 L776.172 681.241 L775.612 681.241 L775.053 681.241 L774.494 681.241 L773.935 681.241 L773.375 681.241 L772.816 681.241 L772.257 681.241 L771.698 681.241 L771.138 681.241 L770.579 681.241 L770.02 681.241 L769.461 681.241 L768.901 681.241 L768.342 681.241 L767.783 681.241 L767.224 681.241 L766.664 681.241 L766.105 681.241 L765.546 681.241 L764.987 681.241 L764.427 681.241 L763.868 681.241 L763.309 681.241 L762.75 681.241 L762.19 681.241 L761.631 681.241 L761.072 681.241 L760.513 681.241 L759.953 681.241 L759.394 681.241 L758.835 681.241 L758.276 681.241 L757.716 681.241 L757.157 681.241 L756.598 681.241 L756.039 681.241 L755.479 681.241 L754.92 681.241 L754.361 681.241 L753.802 681.241 L753.242 681.241 L752.683 681.241 L752.124 681.241 L751.565 681.241 L751.005 681.241 L750.446 681.241 L749.887 681.241 L749.328 681.241 L748.768 681.241 L748.209 681.241 L747.65 681.241 L747.091 681.241 L746.531 681.241 L745.972 681.241 L745.413 681.241 L744.854 681.241 L744.294 681.241 L743.735 681.241 L743.176 681.241 L742.617 681.241 L742.057 681.241 L741.498 681.241 L740.939 681.241 L740.38 681.241 L739.82 681.241 L739.261 681.241 L738.702 681.241 L738.143 681.241 L737.583 681.241 L737.024 681.241 L736.465 681.241 L735.906 681.241 L735.346 681.241 L734.787 681.241 L734.228 681.241 L733.669 681.241 L733.109 681.241 L732.55 681.241 L731.991 681.241 L731.432 681.241 L730.872 681.241 L730.313 681.241 L729.754 681.241 L729.195 681.241 L728.635 681.241 L728.076 681.241 L727.517 681.241 L726.958 681.241 L726.398 681.241 L725.839 681.241 L725.28 681.241 L724.721 681.241 L724.161 681.241 L723.602 681.241 L723.043 681.241 L722.484 681.241 L721.924 681.241 L721.365 681.241 L720.806 681.241 L720.247 681.241  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.833 720.806,685.833 721.365,685.833 721.924,685.833 722.484,685.833 723.043,685.833 723.602,685.833 724.161,685.833 724.721,685.833 725.28,685.833 725.839,685.833 726.398,685.833 726.958,685.833 727.517,685.833 728.076,685.833 728.635,685.833 729.195,685.833 729.754,685.833 730.313,685.833 730.872,685.833 731.432,685.833 731.991,685.833 732.55,685.833 733.109,685.833 733.669,685.833 734.228,685.833 734.787,685.833 735.346,685.833 735.906,685.833 736.465,685.833 737.024,685.833 737.583,685.833 738.143,685.833 738.702,685.833 739.261,685.833 739.82,685.833 740.38,685.833 740.939,685.833 741.498,685.833 742.057,685.833 742.617,685.833 743.176,685.833 743.735,685.833 744.294,685.833 744.854,685.833 745.413,685.833 745.972,685.833 746.531,685.833 747.091,685.833 747.65,685.833 748.209,685.833 748.768,685.833 749.328,685.833 749.887,685.833 750.446,685.833 751.005,685.833 751.565,685.833 752.124,685.833 752.683,685.833 753.242,685.833 753.802,685.833 754.361,685.833 754.92,685.833 755.479,685.833 756.039,685.833 756.598,685.833 757.157,685.833 757.716,685.833 758.276,685.833 758.835,685.833 759.394,685.833 759.953,685.833 760.513,685.833 761.072,685.833 761.631,685.833 762.19,685.833 762.75,685.833 763.309,685.833 763.868,685.833 764.427,685.833 764.987,685.833 765.546,685.833 766.105,685.833 766.664,685.833 767.224,685.833 767.783,685.833 768.342,685.833 768.901,685.833 769.461,685.833 770.02,685.833 770.579,685.833 771.138,685.833 771.698,685.833 772.257,685.833 772.816,685.833 773.375,685.833 773.935,685.833 774.494,685.833 775.053,685.833 775.612,685.833 776.172,685.833 776.731,685.833 777.29,685.833 777.849,685.833 778.409,685.833 778.968,685.833 779.527,685.833 780.086,685.833 780.646,685.833 781.205,685.833 781.764,685.833 782.323,685.833 782.883,685.833 783.442,685.833 784.001,685.833 784.56,685.833 785.12,685.833 785.679,685.833 786.238,685.833 786.797,685.833 787.357,685.833 787.916,685.833 788.475,685.833 789.034,685.833 789.594,685.833 790.153,685.833 790.712,685.833 791.271,685.833 791.831,685.833 792.39,685.833 792.949,685.833 793.508,685.833 794.068,685.833 794.627,685.833 795.186,685.833 795.745,685.833 796.305,685.833 796.864,685.833 797.423,685.833 797.982,685.833 798.542,685.833 799.101,685.833 799.66,685.833 800.219,685.833 800.779,685.833 801.338,685.833 801.897,685.833 802.456,685.833 803.016,685.833 803.575,685.833 804.134,685.833 804.693,685.833 805.253,685.833 805.812,685.833 806.371,685.833 806.931,685.833 807.49,685.833 808.049,685.833 808.608,685.833 809.168,685.833 809.727,685.833 810.286,685.833 810.845,685.833 811.405,685.833 811.964,685.833 812.523,685.833 813.082,685.833 813.642,685.833 814.201,685.833 814.76,685.833 815.319,685.833 815.879,685.833 816.438,685.833 816.997,685.833 817.556,685.833 818.116,685.833 818.675,685.833 819.234,685.833 819.793,685.833 820.353,685.833 820.912,685.833 821.471,685.833 822.03,685.833 822.59,685.833 823.149,685.833 823.708,685.833 824.267,685.833 824.827,685.833 825.386,685.833 825.945,685.833 826.504,685.833 827.064,685.833 827.623,685.833 828.182,685.833 828.741,685.833 829.301,685.833 829.86,685.833 830.419,685.833 830.978,685.833 831.538,685.833 832.097,685.833 832.656,685.833 833.215,685.833 833.775,685.833 834.334,685.833 834.893,685.833 835.452,685.833 836.012,685.833 836.571,685.833 837.13,685.833 837.689,685.833 838.249,685.833 838.808,685.833 839.367,685.833 839.926,685.833 840.486,685.833 841.045,685.833 841.604,685.833 842.163,685.833 842.723,685.833 843.282,685.833 843.841,685.833 844.4,685.833 844.96,685.833 845.519,685.833 846.078,685.833 846.637,685.833 847.197,685.833 847.756,685.833 848.315,685.833 848.874,685.833 849.434,685.833 849.993,685.833 850.552,685.833 851.111,685.833 851.671,685.833 852.23,685.833 852.789,685.833 853.348,685.833 853.908,685.833 854.467,685.833 855.026,685.833 855.585,685.833 856.145,685.833 856.704,685.833 857.263,685.833 857.822,685.833 858.382,685.833 858.941,685.833 859.5,685.833 860.059,685.833 860.619,685.833 861.178,685.833 861.737,685.833 862.296,685.833 862.856,685.833 863.415,685.833 863.974,685.833 864.533,685.833 865.093,685.833 865.652,685.833 866.211,685.833 866.77,685.833 867.33,685.833 867.889,685.833 868.448,685.833 869.007,685.833 869.567,685.833 870.126,685.833 870.685,685.833 871.244,685.833 871.804,685.833 872.363,685.833 872.922,685.833 873.481,685.833 874.041,685.833 874.6,685.833 875.159,685.833 875.718,685.833 876.278,685.833 876.837,685.833 877.396,685.833 877.955,685.833 878.515,685.833 879.074,685.833 879.633,685.833 880.192,685.833 880.752,685.833 881.311,685.833 881.87,685.833 882.429,685.833 882.989,685.833 883.548,685.833 884.107,685.833 884.666,685.833 885.226,685.833 885.785,685.833 886.344,685.833 886.903,685.833 887.463,685.833 888.022,685.833 888.581,685.833 889.14,685.833 889.7,685.833 890.259,685.833 890.818,685.833 891.377,685.833 891.937,685.833 892.496,685.833 893.055,685.833 893.614,685.833 894.174,685.833 894.733,685.833 895.292,685.833 895.851,685.833 896.411,685.833 896.97,685.833 897.529,685.833 898.088,685.833 898.648,685.833 899.207,685.833 899.766,685.833 900.325,685.833 900.885,685.833 901.444,685.833 902.003,685.833 902.562,685.833 903.122,685.833 903.681,685.833 904.24,685.833 904.799,685.833 905.359,685.833 905.918,685.833 906.477,685.833 907.036,685.833 907.596,685.833 908.155,685.833 908.714,685.833 909.273,685.833 909.833,685.833 910.392,685.833 910.951,685.833 911.51,685.833 912.07,685.833 912.629,685.833 913.188,685.833 913.747,685.833 914.307,685.833 914.866,685.833 915.425,685.833 915.984,685.833 916.544,685.833 917.103,685.833 917.662,685.833 918.221,685.833 918.781,685.833 919.34,685.833 919.899,685.833 920.458,685.833 921.018,685.833 921.577,685.833 922.136,685.833 922.695,685.833 923.255,685.833 923.814,685.833 924.373,685.833 924.932,685.833 925.492,685.833 926.051,685.833 926.61,685.833 927.169,685.833 927.729,685.833 928.288,685.833 928.847,685.833 929.406,685.833 929.966,685.833 930.525,685.833 931.084,685.833 931.644,685.833 932.203,685.833 932.762,685.833 933.321,685.833 933.881,685.833 934.44,685.833 934.999,685.833 935.558,685.833 936.118,685.833 936.677,685.833 937.236,685.833 937.795,685.833 938.355,685.833 938.914,685.833 939.473,685.833 940.032,685.833 940.592,685.833 941.151,685.833 941.71,685.833 942.269,685.833 942.829,685.833 943.388,685.833 943.947,685.833 944.506,685.833 945.066,685.833 945.625,685.833 946.184,685.833 946.743,685.833 947.303,685.833 947.862,685.833 948.421,685.833 948.98,685.833 949.54,685.833 950.099,685.833 950.658,685.833 951.217,685.833 951.777,685.833 952.336,685.833 952.895,685.833 953.454,685.833 954.014,685.833 954.573,685.833 955.132,685.833 955.691,685.833 956.251,685.833 956.81,685.833 957.369,685.833 957.928,685.833 958.488,685.833 959.047,685.833 959.606,685.833 960.165,685.833 960.725,685.833 961.284,685.833 961.843,685.833 962.402,685.833 962.962,685.833 963.521,685.833 964.08,685.833 964.639,685.833 965.199,685.833 965.758,685.833 966.317,685.833 966.876,685.833 967.436,685.833 967.995,685.833 968.554,685.833 969.113,685.833 969.673,685.833 970.232,685.833 970.791,685.833 971.35,685.833 971.91,685.833 972.469,685.833 973.028,685.833 973.587,685.833 974.147,685.833 974.706,685.833 975.265,685.833 975.824,685.833 976.384,685.833 976.943,685.833 977.502,685.833 978.061,685.833 978.621,685.833 979.18,685.833 979.739,685.833 980.298,685.833 980.858,685.833 981.417,685.833 981.976,685.833 982.535,685.833 983.095,685.833 983.654,685.833 984.213,685.833 984.772,685.833 985.332,685.833 985.891,685.833 986.45,685.833 987.009,685.833 987.569,685.833 988.128,685.833 988.687,685.833 989.246,685.833 989.806,685.833 990.365,685.833 990.924,685.833 991.483,685.833 992.043,685.833 992.602,685.833 993.161,685.833 993.72,685.833 994.28,685.833 994.839,685.833 995.398,685.833 995.957,685.833 996.517,685.833 997.076,685.833 997.635,685.833 998.194,685.833 998.754,685.833 999.313,685.833 999.872,685.833 1000.43,685.833 1000.99,685.833 1001.55,685.833 1002.11,685.833 1002.67,685.833 1003.23,685.833 1003.79,685.833 1004.35,685.833 1004.91,685.833 1005.46,685.833 1006.02,685.833 1006.58,685.833 1007.14,685.833 1007.7,685.833 1008.26,685.833 1008.82,685.833 1009.38,685.833 1009.94,685.833 1010.5,685.833 1011.06,685.833 1011.62,685.833 1012.18,685.833 1012.73,685.833 1013.29,685.833 1013.85,685.833 1014.41,685.833 1014.97,685.833 1015.53,685.833 1016.09,685.833 1016.65,685.833 1017.21,685.833 1017.77,685.833 1018.33,685.833 1018.89,685.833 1019.45,685.833 1020.01,685.833 1020.56,685.833 1021.12,685.833 1021.68,685.833 1022.24,685.833 1022.8,685.833 1023.36,685.833 1023.92,685.833 1024.48,685.833 1025.04,685.833 1025.6,685.833 1026.16,685.833 1026.72,685.833 1027.28,685.833 1027.83,685.833 1028.39,685.833 1028.95,685.833 1029.51,685.833 1030.07,685.833 1030.63,685.833 1031.19,685.833 1031.75,685.833 1032.31,685.833 1032.87,685.833 1033.43,685.833 1033.99,685.833 1034.55,685.833 1035.1,685.833 1035.66,685.833 1036.22,685.833 1036.78,685.833 1037.34,685.833 1037.9,685.833 1038.46,685.833 1039.02,685.833 1039.58,685.833 1040.14,685.833 1040.7,685.833 1041.26,685.833 1041.82,685.833 1042.38,685.833 1042.93,685.833 1043.49,685.833 1044.05,685.833 1044.61,685.833 1045.17,685.833 1045.73,685.833 1046.29,685.833 1046.85,685.833 1047.41,685.833 1047.97,685.833 1048.53,685.833 1049.09,685.833 1049.65,685.833 1050.2,685.833 1050.76,685.833 1051.32,685.833 1051.88,685.833 1052.44,685.833 1053,685.833 1053.56,685.833 1054.12,685.833 1054.68,685.833 1055.24,685.833 1055.8,685.833 1056.36,685.833 1056.92,685.833 1057.48,685.833 1058.03,685.833 1058.59,685.833 1059.15,685.833 1059.71,685.833 1060.27,685.833 1060.83,685.833 1061.39,685.833 1061.95,685.833 1062.51,685.833 1063.07,685.833 1063.63,685.833 1064.19,685.833 1064.75,685.833 1065.3,685.833 1065.86,685.833 1066.42,685.833 1066.98,685.833 1067.54,685.833 1068.1,685.833 1068.66,685.833 1069.22,685.833 1069.78,685.833 1070.34,685.833 1070.9,685.833 1071.46,685.833 1072.02,685.833 1072.57,685.833 1073.13,685.833 1073.69,685.833 1074.25,685.833 1074.81,685.833 1075.37,685.833 1075.93,685.833 1076.49,685.833 1077.05,685.833 1077.61,685.833 1078.17,685.833 1078.73,685.833 1079.29,685.833 1079.85,685.833 1080.4,685.833 1080.96,685.833 1081.52,685.833 1082.08,685.833 1082.64,685.833 1083.2,685.833 1083.76,685.833 1084.32,685.833 1084.88,685.833 1085.44,685.833 1086,685.833 1086.56,685.833 1087.12,685.833 1087.67,685.833 1088.23,685.833 1088.79,685.833 1089.35,685.833 1089.91,685.833 1090.47,685.833 1091.03,685.833 1091.59,685.833 1092.15,685.833 1092.71,685.833 1093.27,685.833 1093.83,685.833 1094.39,685.833 1094.94,685.833 1095.5,685.833 1096.06,685.833 1096.62,685.833 1097.18,685.833 1097.74,685.833 1098.3,685.833 1098.86,685.833 1099.42,685.833 1099.98,685.833 1100.54,685.833 1101.1,685.833 1101.66,685.833 1102.22,685.833 1102.77,685.833 1103.33,685.833 1103.89,685.833 1104.45,685.833 1105.01,685.833 1105.57,685.833 1106.13,685.833 1106.69,685.833 1107.25,685.833 1107.81,685.833 1108.37,685.833 1108.93,685.833 1109.49,685.833 1110.04,685.833 1110.6,685.833 1111.16,685.833 1111.72,685.833 1112.28,685.833 1112.84,685.833 1113.4,685.833 1113.96,685.833 1114.52,685.833 1115.08,685.833 1115.64,685.833 1116.2,685.833 1116.76,685.833 1117.31,685.833 1117.87,685.833 1118.43,685.833 1118.99,685.833 1119.55,685.833 1120.11,685.833 1120.67,685.833 1121.23,685.833 1121.79,685.833 1122.35,685.833 1122.91,685.833 1123.47,685.833 1124.03,685.833 1124.59,685.833 1125.14,685.833 1125.7,685.833 1126.26,685.833 1126.82,685.833 1127.38,685.833 1127.94,685.833 1128.5,685.833 1129.06,685.833 1129.62,685.833 1130.18,685.833 1130.74,685.833 1131.3,685.833 1131.86,685.833 1132.41,685.833 1132.97,685.833 1133.53,685.833 1134.09,685.833 1134.65,685.833 1135.21,685.833 1135.77,685.833 1136.33,685.833 1136.89,685.833 1137.45,685.833 1138.01,685.833 1138.57,685.833 1139.13,685.833 1139.68,685.833 1140.24,685.833 1140.8,685.833 1141.36,685.833 1141.92,685.833 1142.48,685.833 1143.04,685.833 1143.6,685.833 1144.16,685.833 1144.72,685.833 1145.28,685.833 1145.84,685.833 1146.4,685.833 1146.96,685.833 1147.51,685.833 1148.07,685.833 1148.63,685.833 1149.19,685.833 1149.75,685.833 1150.31,685.833 1150.87,685.833 1151.43,685.833 1151.99,685.833 1152.55,685.833 1153.11,685.833 1153.67,685.833 1154.23,685.833 1154.78,685.833 1155.34,685.833 1155.9,685.833 1156.46,685.833 1157.02,685.833 1157.58,685.833 1158.14,685.833 1158.7,685.833 1159.26,685.833 1159.82,685.833 1160.38,685.833 1160.94,685.833 1161.5,685.833 1162.05,685.833 1162.61,685.833 1163.17,685.833 1163.73,685.833 1164.29,685.833 1164.85,685.833 1165.41,685.833 1165.97,685.833 1166.53,685.833 1167.09,685.833 1167.65,685.833 1168.21,685.833 1168.77,685.833 1169.33,685.833 1169.88,685.833 1170.44,685.833 1171,685.833 1171.56,685.833 1172.12,685.833 1172.68,685.833 1173.24,685.833 1173.8,685.833 1174.36,685.833 1174.92,685.833 1175.48,685.833 1176.04,685.833 1176.6,685.833 1177.15,685.833 1177.71,685.833 1178.27,685.833 1178.83,685.833 1179.39,685.833 1179.95,685.833 1180.51,685.833 1181.07,685.833 1181.63,685.833 1182.19,685.833 1182.75,685.833 1183.31,685.833 1183.87,685.833 1184.43,685.833 1184.98,685.833 1185.54,685.833 1186.1,685.833 1186.66,685.833 1187.22,685.833 1187.78,685.833 1188.34,685.833 1188.9,685.833 1189.46,685.833 1190.02,685.833 1190.58,685.833 1191.14,685.833 1191.7,685.833 1192.25,685.833 1192.81,685.833 1193.37,685.833 1193.93,685.833 1194.49,685.833 1195.05,685.833 1195.61,685.833 1196.17,685.833 1196.73,685.833 1197.29,685.833 1197.85,685.833 1198.41,685.833 1198.97,685.833 1199.52,685.833 1200.08,685.833 1200.64,685.833 1201.2,685.833 1201.76,685.833 1202.32,685.833 1202.88,685.833 1203.44,685.833 1204,685.833 1204.56,685.833 1205.12,685.833 1205.68,685.833 1206.24,685.833 1206.8,685.833 1207.35,685.833 1207.91,685.833 1208.47,685.833 1209.03,685.833 1209.59,685.833 1210.15,685.833 1210.71,685.833 1211.27,685.833 1211.83,685.833 1212.39,685.833 1212.95,685.833 1213.51,685.833 1214.07,685.833 1214.62,685.833 1215.18,685.833 1215.74,685.833 1216.3,685.833 1216.86,685.833 1217.42,685.833 1217.98,685.833 1218.54,685.833 1219.1,685.833 1219.66,685.833 1220.22,685.833 1220.78,685.833 1221.34,685.833 1221.89,685.833 1222.45,685.833 1223.01,685.833 1223.57,685.833 1224.13,685.833 1224.69,685.833 1225.25,685.833 1225.81,685.833 1226.37,685.833 1226.93,685.833 1227.49,685.833 1228.05,685.833 1228.61,685.833 1229.17,685.833 1229.72,685.833 1230.28,685.833 1230.84,685.833 1231.4,685.833 1231.96,685.833 1232.52,685.833 1233.08,685.833 1233.64,685.833 1234.2,685.833 1234.76,685.833 1235.32,685.833 1235.88,685.833 1236.44,685.833 1236.99,685.833 1237.55,685.833 1238.11,685.833 1238.67,685.833 1239.23,685.833 1239.79,685.833 1240.35,685.833 1240.91,685.833 1241.47,685.833 1242.03,685.833 1242.59,685.833 1243.15,685.833 1243.71,685.833 1244.26,685.833 1244.82,685.833 1245.38,685.833 1245.94,685.833 1246.5,685.833 1247.06,685.833 1247.62,685.833 1248.18,685.833 1248.74,685.833 1249.3,685.833 1249.86,685.833 1250.42,685.833 1250.98,685.833 1251.54,685.833 1252.09,685.833 1252.65,685.833 1253.21,685.833 1253.77,685.833 1254.33,685.833 1254.89,685.833 1255.45,685.833 1256.01,685.833 1256.57,685.833 1257.13,685.833 1257.69,685.833 1258.25,685.833 1258.81,685.833 1259.36,685.833 1259.92,685.833 1260.48,685.833 1261.04,685.833 1261.6,685.833 1262.16,685.833 1262.72,685.833 1263.28,685.833 1263.84,685.833 1264.4,685.833 1264.96,685.833 1265.52,685.833 1266.08,685.833 1266.63,685.833 1267.19,685.833 1267.75,685.833 1268.31,685.833 1268.87,685.833 1269.43,685.833 1269.99,685.833 1270.55,685.833 1271.11,685.833 1271.67,685.833 1272.23,685.833 1272.79,685.833 1273.35,685.833 1273.91,685.833 1274.46,685.833 1275.02,685.833 1275.58,685.833 1276.14,685.833 1276.7,685.833 1277.26,685.833 1277.82,685.833 1278.38,685.833 1278.94,685.833 1279.5,685.833 1280.06,685.833 1280.62,685.833 1281.18,685.833 1281.73,685.833 1282.29,685.833 1282.85,685.833 1283.41,685.833 1283.97,685.833 1284.53,685.833 1285.09,685.833 1285.65,685.833 1286.21,685.833 1286.77,685.833 1287.33,685.833 1287.89,685.833 1288.45,685.833 1289,685.833 1289.56,685.833 1290.12,685.833 1290.68,685.833 1291.24,685.833 1291.8,685.833 1292.36,685.833 1292.92,685.833 1293.48,685.833 1294.04,685.833 1294.6,685.833 1295.16,685.833 1295.72,685.833 1296.28,685.833 1296.83,685.833 1297.39,685.833 1297.95,685.833 1298.51,685.833 1299.07,685.833 1299.63,685.833 1300.19,685.833 1300.75,685.833 1301.31,685.833 1301.87,685.833 1302.43,685.833 1302.99,685.833 1303.55,685.833 1304.1,685.833 1304.66,685.833 1305.22,685.833 1305.78,685.833 1306.34,685.833 1306.9,685.833 1307.46,685.833 1308.02,685.833 1308.58,685.833 1309.14,685.833 1309.7,685.833 1310.26,685.833 1310.82,685.833 1311.38,685.833 1311.93,685.833 1312.49,685.833 1313.05,685.833 1313.61,685.833 1314.17,685.833 1314.73,685.833 1315.29,685.833 1315.85,685.833 1316.41,685.833 1316.97,685.833 1317.53,685.833 1318.09,685.833 1318.65,685.833 1319.2,685.833 1319.76,685.833 1320.32,685.833 1320.88,685.833 1321.44,685.833 1322,685.833 1322.56,685.833 1323.12,685.833 1323.68,685.833 1324.24,685.833 1324.8,685.833 1325.36,685.833 1325.92,685.833 1326.47,685.833 1327.03,685.833 1327.59,685.833 1328.15,685.833 1328.71,685.833 1329.27,685.833 1329.83,685.833 1330.39,685.833 1330.95,685.833 1331.51,685.833 1332.07,685.833 1332.63,685.833 1333.19,685.833 1333.75,685.833 1334.3,685.833 1334.86,685.833 1335.42,685.833 1335.98,685.833 1336.54,685.833 1337.1,685.833 1337.66,685.833 1338.22,685.833 1338.78,685.833 1339.34,685.833 1339.9,685.833 1340.46,685.833 1341.02,685.833 1341.57,685.833 1342.13,685.833 1342.69,685.833 1343.25,685.833 1343.81,685.833 1344.37,685.833 1344.93,685.833 1345.49,685.833 1346.05,685.833 1346.61,685.833 1347.17,685.833 1347.73,685.833 1348.29,685.833 1348.84,685.833 1349.4,685.833 1349.96,685.833 1350.52,685.833 1351.08,685.833 1351.64,685.833 1352.2,685.833 1352.76,685.833 1353.32,685.833 1353.88,685.833 1354.44,685.833 1355,685.833 1355.56,685.833 1356.12,685.833 1356.67,685.833 1357.23,685.833 1357.79,685.833 1358.35,685.833 1358.91,685.833 1359.47,685.833 1360.03,685.833 1360.59,685.833 1361.15,685.833 1361.71,685.833 1362.27,685.833 1362.83,685.833 1363.39,685.833 1363.94,685.833 1364.5,685.833 1365.06,685.833 1365.62,685.833 1366.18,685.833 1366.74,685.833 1367.3,685.833 1367.86,685.833 1368.42,685.833 1368.98,685.833 1369.54,685.833 1370.1,685.833 1370.66,685.833 1371.21,685.833 1371.77,685.833 1372.33,685.833 1372.89,685.833 1373.45,685.833 1374.01,685.833 1374.57,685.833 1375.13,685.833 1375.69,685.833 1376.25,685.833 1376.81,685.833 1377.37,685.833 1377.93,685.833 1378.49,685.833 1379.04,685.833 1379.6,685.833 1380.16,685.833 1380.72,685.833 1381.28,685.833 1381.84,685.833 1382.4,685.833 1382.96,685.833 1383.52,685.833 1384.08,685.833 1384.64,685.833 1385.2,685.833 1385.76,685.833 1386.31,685.833 1386.87,685.833 1387.43,685.833 1387.99,685.833 1388.55,685.833 1389.11,685.833 1389.67,685.833 1390.23,685.833 1390.79,685.833 1391.35,685.833 1391.91,685.833 1392.47,685.833 1393.03,685.833 1393.58,685.833 1394.14,685.833 1394.7,685.833 1395.26,685.833 1395.82,685.833 1396.38,685.833 1396.94,685.833 1397.5,685.833 1398.06,685.833 1398.62,685.833 1399.18,685.833 1399.74,685.833 1400.3,685.833 1400.86,685.833 1401.41,685.833 1401.97,685.833 1402.53,685.833 1403.09,685.833 1403.65,685.833 1404.21,685.833 1404.77,685.833 1405.33,685.833 1405.89,685.833 1406.45,685.833 1407.01,685.833 1407.57,685.833 1408.13,685.833 1408.68,685.833 1409.24,685.833 1409.8,685.833 1410.36,685.833 1410.92,685.833 1411.48,685.833 1412.04,685.833 1412.6,685.833 1413.16,685.833 1413.72,685.833 1414.28,685.833 1414.84,685.833 1415.4,685.833 1415.95,685.833 1416.51,685.833 1417.07,685.833 1417.63,685.833 1418.19,685.833 1418.75,685.833 1419.31,685.833 1419.87,685.833 1420.43,685.833 1420.99,685.833 1421.55,685.833 1422.11,685.833 1422.67,685.833 1423.23,685.833 1423.78,685.833 1424.34,685.833 1424.9,685.833 1425.46,685.833 1426.02,685.833 1426.58,685.833 1427.14,685.833 1427.7,685.833 1428.26,685.833 1428.82,685.833 1429.38,685.833 1429.94,685.833 1430.5,685.833 1431.05,685.833 1431.61,685.833 1432.17,685.833 1432.73,685.833 1433.29,685.833 1433.85,685.833 1434.41,685.833 1434.97,685.833 1435.53,685.833 1436.09,685.833 1436.65,685.833 1437.21,685.833 1437.77,685.833 1438.33,685.833 1438.88,685.833 1439.44,685.833 1440,685.833 1440.56,685.833 1441.12,685.833 1441.68,685.833 1442.24,685.833 1442.8,685.833 1443.36,685.833 1443.92,685.833 1444.48,685.833 1445.04,685.833 1445.6,685.833 1446.15,685.833 1446.71,685.833 1447.27,685.833 1447.83,685.833 1448.39,685.833 1448.95,685.833 1449.51,685.833 1450.07,685.833 1450.63,685.833 1451.19,685.833 1451.75,685.833 1452.31,685.833 1452.87,685.833 1453.42,685.833 1453.98,685.833 1454.54,685.833 1455.1,685.833 1455.66,685.833 1456.22,685.833 1456.78,685.833 1457.34,685.833 1457.9,685.833 1458.46,685.833 1459.02,685.833 1459.58,685.833 1460.14,685.833 1460.7,685.833 1461.25,685.833 1461.81,685.833 1462.37,685.833 1462.93,685.833 1463.49,685.833 1464.05,685.833 1464.61,685.833 1465.17,685.833 1465.73,685.833 1466.29,685.833 1466.85,685.833 1467.41,685.833 1467.97,685.833 1468.52,685.833 1469.08,685.833 1469.64,685.833 1470.2,685.833 1470.76,685.833 1471.32,685.833 1471.88,685.833 1472.44,685.833 1473,685.833 1473.56,685.833 1474.12,685.833 1474.68,685.833 1475.24,685.833 1475.79,685.833 1476.35,685.833 1476.91,685.833 1477.47,685.833 1478.03,685.833 1478.59,685.833 1479.15,685.833 1479.71,685.833 1480.27,685.833 1480.83,685.833 1481.39,685.833 1481.95,685.833 1482.51,685.833 1483.07,685.833 1483.62,685.833 1484.18,685.833 1484.74,685.833 1485.3,685.833 1485.86,685.833 1486.42,685.833 1486.98,685.833 1487.54,685.833 1488.1,685.833 1488.66,685.833 1489.22,685.833 1489.78,685.833 1490.34,685.833 1490.89,685.833 1491.45,685.833 1492.01,685.833 1492.57,685.833 1493.13,685.833 1493.69,685.833 1494.25,685.833 1494.81,685.833 1495.37,685.833 1495.93,685.833 1496.49,685.833 1497.05,685.833 1497.61,685.833 1498.16,685.833 1498.72,685.833 1499.28,685.833 1499.84,685.833 1500.4,685.833 1500.96,685.833 1501.52,685.833 1502.08,685.833 1502.64,685.833 1503.2,685.833 1503.76,685.833 1504.32,685.833 1504.88,685.833 1505.44,685.833 1505.99,685.833 1506.55,685.833 1507.11,685.833 1507.67,685.833 1508.23,685.833 1508.79,685.833 1509.35,685.833 1509.91,685.833 1510.47,685.833 1511.03,685.833 1511.59,685.833 1512.15,685.833 1512.71,685.833 1513.26,685.833 1513.82,685.833 1514.38,685.833 1514.94,685.833 1515.5,685.833 1516.06,685.833 1516.62,685.833 1517.18,685.833 1517.74,685.833 1518.3,685.833 1518.86,685.833 1519.42,685.833 1519.98,685.833 1520.53,685.833 1521.09,685.833 1521.65,685.833 1522.21,685.833 1522.77,685.833 1523.33,685.833 1523.89,685.833 1524.45,685.833 1525.01,685.833 1525.57,685.833 1526.13,685.833 1526.69,685.833 1527.25,685.833 1527.81,685.833 1528.36,685.833 1528.92,685.833 1529.48,685.833 1530.04,685.833 1530.6,685.833 1531.16,685.833 1531.72,685.833 1532.28,685.833 1532.84,685.833 1533.4,685.833 1533.96,685.833 1534.52,685.833 1535.08,685.833 1535.63,685.833 1536.19,685.833 1536.75,685.833 1537.31,685.833 1537.87,685.833 1538.43,685.833 1538.99,685.833 1539.55,685.833 1540.11,685.833 1540.67,685.833 1541.23,685.833 1541.79,685.833 1542.35,685.833 1542.9,685.833 1543.46,685.833 1544.02,685.833 1544.58,685.833 1545.14,685.833 1545.7,685.833 1546.26,685.833 1546.82,685.833 1547.38,685.833 1547.94,685.833 1548.5,685.833 1549.06,685.833 1549.62,685.833 1550.18,685.833 1550.73,685.833 1551.29,685.833 1551.85,685.833 1552.41,685.833 1552.97,685.833 1553.53,685.833 1554.09,685.833 1554.65,685.833 1555.21,685.833 1555.77,685.833 1556.33,685.833 1556.89,685.833 1557.45,685.833 1558,685.833 1558.56,685.833 1559.12,685.833 1559.68,685.833 1560.24,685.833 1560.8,685.833 1561.36,685.833 1561.92,685.833 1562.48,685.833 1563.04,685.833 1563.6,685.833 1564.16,685.833 1564.72,685.833 1565.28,685.833 1565.83,685.833 1566.39,685.833 1566.95,685.833 1567.51,685.833 1568.07,685.833 1568.63,685.833 1569.19,685.833 1569.75,685.833 1570.31,685.833 1570.87,685.833 1571.43,685.833 1571.99,685.833 1572.55,685.833 1573.1,685.833 1573.66,685.833 1574.22,685.833 1574.78,685.833 1575.34,685.833 1575.9,685.833 1576.46,685.833 1577.02,685.833 1577.58,685.833 1578.14,685.833 1578.7,685.833 1579.26,685.833 1579.82,685.833 1580.37,685.833 1580.93,685.833 1581.49,685.833 1582.05,685.833 1582.61,685.833 1583.17,685.833 1583.73,685.833 1584.29,685.833 1584.85,685.833 1585.41,685.833 1585.97,685.833 1586.53,685.833 1587.09,685.833 1587.65,685.833 1588.2,685.833 1588.76,685.833 1589.32,685.833 1589.88,685.833 1590.44,685.833 1591,685.833 1591.56,685.833 1592.12,685.833 1592.68,685.833 1593.24,685.833 1593.8,685.833 1594.36,685.833 1594.92,685.833 1595.47,685.833 1596.03,685.833 1596.59,685.833 1597.15,685.833 1597.71,685.833 1598.27,685.833 1598.83,685.833 1599.39,685.833 1599.95,685.833 1600.51,685.833 1601.07,685.833 1601.63,685.833 1602.19,685.833 1602.74,685.833 1603.3,685.833 1603.86,685.833 1604.42,685.833 1604.98,685.833 1605.54,685.833 1606.1,685.833 1606.66,685.833 1607.22,685.833 1607.78,685.833 1608.34,685.833 1608.9,685.833 1609.46,685.833 1610.02,685.833 1610.57,685.833 1611.13,685.833 1611.69,685.833 1612.25,685.833 1612.81,685.833 1613.37,685.833 1613.93,685.833 1614.49,685.833 1615.05,685.833 1615.61,685.833 1616.17,685.833 1616.73,685.833 1617.29,685.833 1617.84,685.833 1618.4,685.833 1618.96,685.833 1619.52,685.833 1620.08,685.833 1620.64,685.833 1621.2,685.833 1621.76,685.833 1622.32,685.833 1622.88,685.833 1623.44,685.833 1624,685.833 1624.56,685.833 1625.11,685.833 1625.67,685.833 1626.23,685.833 1626.79,685.833 1627.35,685.833 1627.91,685.833 1628.47,685.833 1629.03,685.833 1629.59,685.833 1630.15,685.833 1630.71,685.833 1631.27,685.833 1631.83,685.833 1632.39,685.833 1632.94,685.833 1633.5,685.833 1634.06,685.833 1634.62,685.833 1635.18,685.833 1635.74,685.833 1636.3,685.833 1636.86,685.833 1637.42,685.833 1637.98,685.833 1638.54,685.833 1639.1,685.833 1639.66,685.833 1640.21,685.833 1640.77,685.833 1641.33,685.833 1641.89,685.833 1642.45,685.833 1643.01,685.833 1643.57,685.833 1644.13,685.833 1644.69,685.833 1645.25,685.833 1645.81,685.833 1646.37,685.833 1646.93,685.833 1647.48,685.833 1648.04,685.833 1648.6,685.833 1649.16,685.833 1649.72,685.833 1650.28,685.833 1650.84,685.833 1651.4,685.833 1651.96,685.833 1652.52,685.833 1653.08,685.833 1653.64,685.833 1654.2,685.833 1654.76,685.833 1655.31,685.833 1655.87,685.833 1656.43,685.833 1656.99,685.833 1657.55,685.833 1658.11,685.833 1658.67,685.833 1659.23,685.833 1659.79,685.833 1660.35,685.833 1660.91,685.833 1661.47,685.833 1662.03,685.833 1662.58,685.833 1663.14,685.833 1663.7,685.833 1664.26,685.833 1664.82,685.833 1665.38,685.833 1665.94,685.833 1666.5,685.833 1667.06,685.833 1667.62,685.833 1668.18,685.833 1668.74,685.833 1669.3,685.833 1669.85,685.833 1670.41,685.833 1670.97,685.833 1671.53,685.833 1672.09,685.833 1672.65,685.833 1673.21,685.833 1673.77,685.833 1674.33,685.833 1674.89,685.833 1675.45,685.833 1676.01,685.833 1676.57,685.833 1677.13,685.833 1677.68,685.833 1678.24,685.833 1678.8,685.833 1679.36,685.833 1679.92,685.833 1680.48,685.833 1681.04,685.833 1681.6,685.833 1682.16,685.833 1682.72,685.833 1683.28,685.833 1683.84,685.833 1684.4,685.833 1684.95,685.833 1685.51,685.833 1686.07,685.833 1686.63,685.833 1687.19,685.833 1687.75,685.833 1688.31,685.833 1688.87,685.833 1689.43,685.833 1689.99,685.833 1690.55,685.833 1691.11,685.833 1691.67,685.833 1692.23,685.833 1692.78,685.833 1693.34,685.833 1693.9,685.833 1694.46,685.833 1695.02,685.833 1695.58,685.833 1696.14,685.833 1696.7,685.833 1697.26,685.833 1697.82,685.833 1698.38,685.833 1698.94,685.833 1699.5,685.833 1700.05,685.833 1700.61,685.833 1701.17,685.833 1701.73,685.833 1702.29,685.833 1702.85,685.833 1703.41,685.833 1703.97,685.833 1704.53,685.833 1705.09,685.833 1705.65,685.833 1706.21,685.833 1706.77,685.833 1707.32,685.833 1707.88,685.833 1708.44,685.833 1709,685.833 1709.56,685.833 1710.12,685.833 1710.68,685.833 1711.24,685.833 1711.8,685.833 1712.36,685.833 1712.92,685.833 1713.48,685.833 1714.04,685.833 1714.6,685.833 1715.15,685.833 1715.71,685.833 1716.27,685.833 1716.83,685.833 1717.39,685.833 1717.95,685.833 1718.51,685.833 1719.07,685.833 1719.63,685.833 1720.19,685.833 1720.75,685.833 1721.31,685.833 1721.87,685.833 1722.42,685.833 1722.98,685.833 1723.54,685.833 1724.1,685.833 1724.66,685.833 1725.22,685.833 1725.78,685.833 1726.34,685.833 1726.9,685.833 1727.46,685.833 1728.02,685.833 1728.58,685.833 1729.14,685.833 1729.69,685.833 1730.25,685.833 1730.81,685.833 1731.37,685.833 1731.93,685.833 1732.49,685.833 1733.05,685.833 1733.61,685.833 1734.17,685.833 1734.73,685.833 1735.29,685.833 1735.85,685.833 1736.41,685.833 1736.97,685.833 1737.52,685.833 1738.08,685.833 1738.64,685.833 1739.2,685.833 1739.76,685.833 1740.32,685.833 1740.88,685.833 1741.44,685.833 1742,685.833 1742.56,685.833 1743.12,685.833 1743.68,685.833 1744.24,685.833 1744.79,685.833 1745.35,685.833 1745.91,685.833 1746.47,685.833 1747.03,685.833 1747.59,685.833 1748.15,685.833 1748.71,685.833 1749.27,685.833 1749.83,685.833 1750.39,685.833 1750.95,685.833 1751.51,685.833 1752.06,685.833 1752.62,685.833 1753.18,685.833 1753.74,685.833 1754.3,685.833 1754.86,685.833 1755.42,685.833 1755.98,685.833 1756.54,685.833 1757.1,685.833 1757.66,685.833 1758.22,685.833 1758.78,685.833 1759.34,685.833 1759.89,685.833 1760.45,685.833 1761.01,685.833 1761.57,685.833 1762.13,685.833 1762.69,685.833 1763.25,685.833 1763.81,685.833 1764.37,685.833 1764.93,685.833 1765.49,685.833 1766.05,685.833 1766.61,685.833 1767.16,685.833 1767.72,685.833 1768.28,685.833 1768.84,685.833 1769.4,685.833 1769.96,685.833 1770.52,685.833 1771.08,685.833 1771.64,685.833 1772.2,685.833 1772.76,685.833 1773.32,685.833 1773.88,685.833 1774.43,685.833 1774.99,685.833 1775.55,685.833 1776.11,685.833 1776.67,685.833 1777.23,685.833 1777.79,685.833 1778.35,685.833 1778.91,685.833 1779.47,685.833 1780.03,685.833 1780.59,685.833 1781.15,685.833 1781.71,685.833 1782.26,685.833 1782.82,685.833 1783.38,685.833 1783.94,685.833 1784.5,685.833 1785.06,685.833 1785.62,685.833 1786.18,685.833 1786.74,685.833 1787.3,685.833 1787.86,685.833 1788.42,685.833 1788.98,685.833 1789.53,685.833 1790.09,685.833 1790.65,685.833 1791.21,685.833 1791.77,685.833 1792.33,685.833 1792.89,685.833 1793.45,685.833 1794.01,685.833 1794.57,685.833 1795.13,685.833 1795.69,685.833 1796.25,685.833 1796.8,685.833 1797.36,685.833 1797.92,685.833 1798.48,685.833 1799.04,685.833 1799.6,685.833 1800.16,685.833 1800.72,685.833 1801.28,685.833 1801.84,685.833 1802.4,685.833 1802.96,685.833 1803.52,685.833 1804.08,685.833 1804.63,685.833 1805.19,685.833 1805.75,685.833 1806.31,685.833 1806.87,685.833 1807.43,685.833 1807.99,685.833 1808.55,685.833 1809.11,685.833 1809.67,685.833 1810.23,685.833 1810.79,685.833 1811.35,685.833 1811.9,685.833 1812.46,685.833 1813.02,685.833 1813.58,685.833 1814.14,685.833 1814.7,685.833 1815.26,685.833 1815.82,685.833 1816.38,685.833 1816.94,685.833 1817.5,685.833 1818.06,685.833 1818.62,685.833 1819.18,685.833 1819.73,685.833 1820.29,685.833 1820.85,685.833 1821.41,685.833 1821.97,685.833 1822.53,685.833 1823.09,685.833 1823.65,685.833 1824.21,685.833 1824.77,685.833 1825.33,685.833 1825.89,685.833 1826.45,685.833 1827,685.833 1827.56,685.833 1828.12,685.833 1828.68,685.833 1829.24,685.833 1829.8,685.833 1830.36,685.833 1830.92,685.833 1831.48,685.833 1832.04,685.833 1832.6,685.833 1833.16,685.833 1833.72,685.833 1834.27,685.833 1834.83,685.833 1835.39,685.833 1835.95,685.833 1836.51,685.833 1837.07,685.833 1837.63,685.833 1838.19,685.833 \"/>\n<path clip-path=\"url(#clip503)\" d=\"M720.247 684.497 L720.806 684.497 L721.365 684.497 L721.924 684.497 L722.484 684.497 L723.043 684.497 L723.602 684.497 L724.161 684.497 L724.721 684.497 L725.28 684.497 L725.839 684.497 L726.398 684.497 L726.958 684.497 L727.517 684.497 L728.076 684.497 L728.635 684.497 L729.195 684.497 L729.754 684.497 L730.313 684.497 L730.872 684.497 L731.432 684.497 L731.991 684.497 L732.55 684.497 L733.109 684.497 L733.669 684.497 L734.228 684.497 L734.787 684.497 L735.346 684.497 L735.906 684.497 L736.465 684.497 L737.024 684.497 L737.583 684.497 L738.143 684.497 L738.702 684.497 L739.261 684.497 L739.82 684.497 L740.38 684.497 L740.939 684.497 L741.498 684.497 L742.057 684.497 L742.617 684.497 L743.176 684.497 L743.735 684.497 L744.294 684.497 L744.854 684.497 L745.413 684.497 L745.972 684.497 L746.531 684.497 L747.091 684.497 L747.65 684.497 L748.209 684.497 L748.768 684.497 L749.328 684.497 L749.887 684.497 L750.446 684.497 L751.005 684.497 L751.565 684.497 L752.124 684.497 L752.683 684.497 L753.242 684.497 L753.802 684.497 L754.361 684.497 L754.92 684.497 L755.479 684.497 L756.039 684.497 L756.598 684.497 L757.157 684.497 L757.716 684.497 L758.276 684.497 L758.835 684.497 L759.394 684.497 L759.953 684.497 L760.513 684.497 L761.072 684.497 L761.631 684.497 L762.19 684.497 L762.75 684.497 L763.309 684.497 L763.868 684.497 L764.427 684.497 L764.987 684.497 L765.546 684.497 L766.105 684.497 L766.664 684.497 L767.224 684.497 L767.783 684.497 L768.342 684.497 L768.901 684.497 L769.461 684.497 L770.02 684.497 L770.579 684.497 L771.138 684.497 L771.698 684.497 L772.257 684.497 L772.816 684.497 L773.375 684.497 L773.935 684.497 L774.494 684.497 L775.053 684.497 L775.612 684.497 L776.172 684.497 L776.731 684.497 L777.29 684.497 L777.849 684.497 L778.409 684.497 L778.968 684.497 L779.527 684.497 L780.086 684.497 L780.646 684.497 L781.205 684.497 L781.764 684.497 L782.323 684.497 L782.883 684.497 L783.442 684.497 L784.001 684.497 L784.56 684.497 L785.12 684.497 L785.679 684.497 L786.238 684.497 L786.797 684.497 L787.357 684.497 L787.916 684.497 L788.475 684.497 L789.034 684.497 L789.594 684.497 L790.153 684.497 L790.712 684.497 L791.271 684.497 L791.831 684.497 L792.39 684.497 L792.949 684.497 L793.508 684.497 L794.068 684.497 L794.627 684.497 L795.186 684.497 L795.745 684.497 L796.305 684.497 L796.864 684.497 L797.423 684.497 L797.982 684.497 L798.542 684.497 L799.101 684.497 L799.66 684.497 L800.219 684.497 L800.779 684.497 L801.338 684.497 L801.897 684.497 L802.456 684.497 L803.016 684.497 L803.575 684.497 L804.134 684.497 L804.693 684.497 L805.253 684.497 L805.812 684.497 L806.371 684.497 L806.931 684.497 L807.49 684.497 L808.049 684.497 L808.608 684.497 L809.168 684.497 L809.727 684.497 L810.286 684.497 L810.845 684.497 L811.405 684.497 L811.964 684.497 L812.523 684.497 L813.082 684.497 L813.642 684.497 L814.201 684.497 L814.76 684.497 L815.319 684.497 L815.879 684.497 L816.438 684.497 L816.997 684.497 L817.556 684.497 L818.116 684.497 L818.675 684.497 L819.234 684.497 L819.793 684.497 L820.353 684.497 L820.912 684.497 L821.471 684.497 L822.03 684.497 L822.59 684.497 L823.149 684.497 L823.708 684.497 L824.267 684.497 L824.827 684.497 L825.386 684.497 L825.945 684.497 L826.504 684.497 L827.064 684.497 L827.623 684.497 L828.182 684.497 L828.741 684.497 L829.301 684.497 L829.86 684.497 L830.419 684.497 L830.978 684.497 L831.538 684.497 L832.097 684.497 L832.656 684.497 L833.215 684.497 L833.775 684.497 L834.334 684.497 L834.893 684.497 L835.452 684.497 L836.012 684.497 L836.571 684.497 L837.13 684.497 L837.689 684.497 L838.249 684.497 L838.808 684.497 L839.367 684.497 L839.926 684.497 L840.486 684.497 L841.045 684.497 L841.604 684.497 L842.163 684.497 L842.723 684.497 L843.282 684.497 L843.841 684.497 L844.4 684.497 L844.96 684.497 L845.519 684.497 L846.078 684.497 L846.637 684.497 L847.197 684.497 L847.756 684.497 L848.315 684.497 L848.874 684.497 L849.434 684.497 L849.993 684.497 L850.552 684.497 L851.111 684.497 L851.671 684.497 L852.23 684.497 L852.789 684.497 L853.348 684.497 L853.908 684.497 L854.467 684.497 L855.026 684.497 L855.585 684.497 L856.145 684.497 L856.704 684.497 L857.263 684.497 L857.822 684.497 L858.382 684.497 L858.941 684.497 L859.5 684.497 L860.059 684.497 L860.619 684.497 L861.178 684.497 L861.737 684.497 L862.296 684.497 L862.856 684.497 L863.415 684.497 L863.974 684.497 L864.533 684.497 L865.093 684.497 L865.652 684.497 L866.211 684.497 L866.77 684.497 L867.33 684.497 L867.889 684.497 L868.448 684.497 L869.007 684.497 L869.567 684.497 L870.126 684.497 L870.685 684.497 L871.244 684.497 L871.804 684.497 L872.363 684.497 L872.922 684.497 L873.481 684.497 L874.041 684.497 L874.6 684.497 L875.159 684.497 L875.718 684.497 L876.278 684.497 L876.837 684.497 L877.396 684.497 L877.955 684.497 L878.515 684.497 L879.074 684.497 L879.633 684.497 L880.192 684.497 L880.752 684.497 L881.311 684.497 L881.87 684.497 L882.429 684.497 L882.989 684.497 L883.548 684.497 L884.107 684.497 L884.666 684.497 L885.226 684.497 L885.785 684.497 L886.344 684.497 L886.903 684.497 L887.463 684.497 L888.022 684.497 L888.581 684.497 L889.14 684.497 L889.7 684.497 L890.259 684.497 L890.818 684.497 L891.377 684.497 L891.937 684.497 L892.496 684.497 L893.055 684.497 L893.614 684.497 L894.174 684.497 L894.733 684.497 L895.292 684.497 L895.851 684.497 L896.411 684.497 L896.97 684.497 L897.529 684.497 L898.088 684.497 L898.648 684.497 L899.207 684.497 L899.766 684.497 L900.325 684.497 L900.885 684.497 L901.444 684.497 L902.003 684.497 L902.562 684.497 L903.122 684.497 L903.681 684.497 L904.24 684.497 L904.799 684.497 L905.359 684.497 L905.918 684.497 L906.477 684.497 L907.036 684.497 L907.596 684.497 L908.155 684.497 L908.714 684.497 L909.273 684.497 L909.833 684.497 L910.392 684.497 L910.951 684.497 L911.51 684.497 L912.07 684.497 L912.629 684.497 L913.188 684.497 L913.747 684.497 L914.307 684.497 L914.866 684.497 L915.425 684.497 L915.984 684.497 L916.544 684.497 L917.103 684.497 L917.662 684.497 L918.221 684.497 L918.781 684.497 L919.34 684.497 L919.899 684.497 L920.458 684.497 L921.018 684.497 L921.577 684.497 L922.136 684.497 L922.695 684.497 L923.255 684.497 L923.814 684.497 L924.373 684.497 L924.932 684.497 L925.492 684.497 L926.051 684.497 L926.61 684.497 L927.169 684.497 L927.729 684.497 L928.288 684.497 L928.847 684.497 L929.406 684.497 L929.966 684.497 L930.525 684.497 L931.084 684.497 L931.644 684.497 L932.203 684.497 L932.762 684.497 L933.321 684.497 L933.881 684.497 L934.44 684.497 L934.999 684.497 L935.558 684.497 L936.118 684.497 L936.677 684.497 L937.236 684.497 L937.795 684.497 L938.355 684.497 L938.914 684.497 L939.473 684.497 L940.032 684.497 L940.592 684.497 L941.151 684.497 L941.71 684.497 L942.269 684.497 L942.829 684.497 L943.388 684.497 L943.947 684.497 L944.506 684.497 L945.066 684.497 L945.625 684.497 L946.184 684.497 L946.743 684.497 L947.303 684.497 L947.862 684.497 L948.421 684.497 L948.98 684.497 L949.54 684.497 L950.099 684.497 L950.658 684.497 L951.217 684.497 L951.777 684.497 L952.336 684.497 L952.895 684.497 L953.454 684.497 L954.014 684.497 L954.573 684.497 L955.132 684.497 L955.691 684.497 L956.251 684.497 L956.81 684.497 L957.369 684.497 L957.928 684.497 L958.488 684.497 L959.047 684.497 L959.606 684.497 L960.165 684.497 L960.725 684.497 L961.284 684.497 L961.843 684.497 L962.402 684.497 L962.962 684.497 L963.521 684.497 L964.08 684.497 L964.639 684.497 L965.199 684.497 L965.758 684.497 L966.317 684.497 L966.876 684.497 L967.436 684.497 L967.995 684.497 L968.554 684.497 L969.113 684.497 L969.673 684.497 L970.232 684.497 L970.791 684.497 L971.35 684.497 L971.91 684.497 L972.469 684.497 L973.028 684.497 L973.587 684.497 L974.147 684.497 L974.706 684.497 L975.265 684.497 L975.824 684.497 L976.384 684.497 L976.943 684.497 L977.502 684.497 L978.061 684.497 L978.621 684.497 L979.18 684.497 L979.739 684.497 L980.298 684.497 L980.858 684.497 L981.417 684.497 L981.976 684.497 L982.535 684.497 L983.095 684.497 L983.654 684.497 L984.213 684.497 L984.772 684.497 L985.332 684.497 L985.891 684.497 L986.45 684.497 L987.009 684.497 L987.569 684.497 L988.128 684.497 L988.687 684.497 L989.246 684.497 L989.806 684.497 L990.365 684.497 L990.924 684.497 L991.483 684.497 L992.043 684.497 L992.602 684.497 L993.161 684.497 L993.72 684.497 L994.28 684.497 L994.839 684.497 L995.398 684.497 L995.957 684.497 L996.517 684.497 L997.076 684.497 L997.635 684.497 L998.194 684.497 L998.754 684.497 L999.313 684.497 L999.872 684.497 L1000.43 684.497 L1000.99 684.497 L1001.55 684.497 L1002.11 684.497 L1002.67 684.497 L1003.23 684.497 L1003.79 684.497 L1004.35 684.497 L1004.91 684.497 L1005.46 684.497 L1006.02 684.497 L1006.58 684.497 L1007.14 684.497 L1007.7 684.497 L1008.26 684.497 L1008.82 684.497 L1009.38 684.497 L1009.94 684.497 L1010.5 684.497 L1011.06 684.497 L1011.62 684.497 L1012.18 684.497 L1012.73 684.497 L1013.29 684.497 L1013.85 684.497 L1014.41 684.497 L1014.97 684.497 L1015.53 684.497 L1016.09 684.497 L1016.65 684.497 L1017.21 684.497 L1017.77 684.497 L1018.33 684.497 L1018.89 684.497 L1019.45 684.497 L1020.01 684.497 L1020.56 684.497 L1021.12 684.497 L1021.68 684.497 L1022.24 684.497 L1022.8 684.497 L1023.36 684.497 L1023.92 684.497 L1024.48 684.497 L1025.04 684.497 L1025.6 684.497 L1026.16 684.497 L1026.72 684.497 L1027.28 684.497 L1027.83 684.497 L1028.39 684.497 L1028.95 684.497 L1029.51 684.497 L1030.07 684.497 L1030.63 684.497 L1031.19 684.497 L1031.75 684.497 L1032.31 684.497 L1032.87 684.497 L1033.43 684.497 L1033.99 684.497 L1034.55 684.497 L1035.1 684.497 L1035.66 684.497 L1036.22 684.497 L1036.78 684.497 L1037.34 684.497 L1037.9 684.497 L1038.46 684.497 L1039.02 684.497 L1039.58 684.497 L1040.14 684.497 L1040.7 684.497 L1041.26 684.497 L1041.82 684.497 L1042.38 684.497 L1042.93 684.497 L1043.49 684.497 L1044.05 684.497 L1044.61 684.497 L1045.17 684.497 L1045.73 684.497 L1046.29 684.497 L1046.85 684.497 L1047.41 684.497 L1047.97 684.497 L1048.53 684.497 L1049.09 684.497 L1049.65 684.497 L1050.2 684.497 L1050.76 684.497 L1051.32 684.497 L1051.88 684.497 L1052.44 684.497 L1053 684.497 L1053.56 684.497 L1054.12 684.497 L1054.68 684.497 L1055.24 684.497 L1055.8 684.497 L1056.36 684.497 L1056.92 684.497 L1057.48 684.497 L1058.03 684.497 L1058.59 684.497 L1059.15 684.497 L1059.71 684.497 L1060.27 684.497 L1060.83 684.497 L1061.39 684.497 L1061.95 684.497 L1062.51 684.497 L1063.07 684.497 L1063.63 684.497 L1064.19 684.497 L1064.75 684.497 L1065.3 684.497 L1065.86 684.497 L1066.42 684.497 L1066.98 684.497 L1067.54 684.497 L1068.1 684.497 L1068.66 684.497 L1069.22 684.497 L1069.78 684.497 L1070.34 684.497 L1070.9 684.497 L1071.46 684.497 L1072.02 684.497 L1072.57 684.497 L1073.13 684.497 L1073.69 684.497 L1074.25 684.497 L1074.81 684.497 L1075.37 684.497 L1075.93 684.497 L1076.49 684.497 L1077.05 684.497 L1077.61 684.497 L1078.17 684.497 L1078.73 684.497 L1079.29 684.497 L1079.85 684.497 L1080.4 684.497 L1080.96 684.497 L1081.52 684.497 L1082.08 684.497 L1082.64 684.497 L1083.2 684.497 L1083.76 684.497 L1084.32 684.497 L1084.88 684.497 L1085.44 684.497 L1086 684.497 L1086.56 684.497 L1087.12 684.497 L1087.67 684.497 L1088.23 684.497 L1088.79 684.497 L1089.35 684.497 L1089.91 684.497 L1090.47 684.497 L1091.03 684.497 L1091.59 684.497 L1092.15 684.497 L1092.71 684.497 L1093.27 684.497 L1093.83 684.497 L1094.39 684.497 L1094.94 684.497 L1095.5 684.497 L1096.06 684.497 L1096.62 684.497 L1097.18 684.497 L1097.74 684.497 L1098.3 684.497 L1098.86 684.497 L1099.42 684.497 L1099.98 684.497 L1100.54 684.497 L1101.1 684.497 L1101.66 684.497 L1102.22 684.497 L1102.77 684.497 L1103.33 684.497 L1103.89 684.497 L1104.45 684.497 L1105.01 684.497 L1105.57 684.497 L1106.13 684.497 L1106.69 684.497 L1107.25 684.497 L1107.81 684.497 L1108.37 684.497 L1108.93 684.497 L1109.49 684.497 L1110.04 684.497 L1110.6 684.497 L1111.16 684.497 L1111.72 684.497 L1112.28 684.497 L1112.84 684.497 L1113.4 684.497 L1113.96 684.497 L1114.52 684.497 L1115.08 684.497 L1115.64 684.497 L1116.2 684.497 L1116.76 684.497 L1117.31 684.497 L1117.87 684.497 L1118.43 684.497 L1118.99 684.497 L1119.55 684.497 L1120.11 684.497 L1120.67 684.497 L1121.23 684.497 L1121.79 684.497 L1122.35 684.497 L1122.91 684.497 L1123.47 684.497 L1124.03 684.497 L1124.59 684.497 L1125.14 684.497 L1125.7 684.497 L1126.26 684.497 L1126.82 684.497 L1127.38 684.497 L1127.94 684.497 L1128.5 684.497 L1129.06 684.497 L1129.62 684.497 L1130.18 684.497 L1130.74 684.497 L1131.3 684.497 L1131.86 684.497 L1132.41 684.497 L1132.97 684.497 L1133.53 684.497 L1134.09 684.497 L1134.65 684.497 L1135.21 684.497 L1135.77 684.497 L1136.33 684.497 L1136.89 684.497 L1137.45 684.497 L1138.01 684.497 L1138.57 684.497 L1139.13 684.497 L1139.68 684.497 L1140.24 684.497 L1140.8 684.497 L1141.36 684.497 L1141.92 684.497 L1142.48 684.497 L1143.04 684.497 L1143.6 684.497 L1144.16 684.497 L1144.72 684.497 L1145.28 684.497 L1145.84 684.497 L1146.4 684.497 L1146.96 684.497 L1147.51 684.497 L1148.07 684.497 L1148.63 684.497 L1149.19 684.497 L1149.75 684.497 L1150.31 684.497 L1150.87 684.497 L1151.43 684.497 L1151.99 684.497 L1152.55 684.497 L1153.11 684.497 L1153.67 684.497 L1154.23 684.497 L1154.78 684.497 L1155.34 684.497 L1155.9 684.497 L1156.46 684.497 L1157.02 684.497 L1157.58 684.497 L1158.14 684.497 L1158.7 684.497 L1159.26 684.497 L1159.82 684.497 L1160.38 684.497 L1160.94 684.497 L1161.5 684.497 L1162.05 684.497 L1162.61 684.497 L1163.17 684.497 L1163.73 684.497 L1164.29 684.497 L1164.85 684.497 L1165.41 684.497 L1165.97 684.497 L1166.53 684.497 L1167.09 684.497 L1167.65 684.497 L1168.21 684.497 L1168.77 684.497 L1169.33 684.497 L1169.88 684.497 L1170.44 684.497 L1171 684.497 L1171.56 684.497 L1172.12 684.497 L1172.68 684.497 L1173.24 684.497 L1173.8 684.497 L1174.36 684.497 L1174.92 684.497 L1175.48 684.497 L1176.04 684.497 L1176.6 684.497 L1177.15 684.497 L1177.71 684.497 L1178.27 684.497 L1178.83 684.497 L1179.39 684.497 L1179.95 684.497 L1180.51 684.497 L1181.07 684.497 L1181.63 684.497 L1182.19 684.497 L1182.75 684.497 L1183.31 684.497 L1183.87 684.497 L1184.43 684.497 L1184.98 684.497 L1185.54 684.497 L1186.1 684.497 L1186.66 684.497 L1187.22 684.497 L1187.78 684.497 L1188.34 684.497 L1188.9 684.497 L1189.46 684.497 L1190.02 684.497 L1190.58 684.497 L1191.14 684.497 L1191.7 684.497 L1192.25 684.497 L1192.81 684.497 L1193.37 684.497 L1193.93 684.497 L1194.49 684.497 L1195.05 684.497 L1195.61 684.497 L1196.17 684.497 L1196.73 684.497 L1197.29 684.497 L1197.85 684.497 L1198.41 684.497 L1198.97 684.497 L1199.52 684.497 L1200.08 684.497 L1200.64 684.497 L1201.2 684.497 L1201.76 684.497 L1202.32 684.497 L1202.88 684.497 L1203.44 684.497 L1204 684.497 L1204.56 684.497 L1205.12 684.497 L1205.68 684.497 L1206.24 684.497 L1206.8 684.497 L1207.35 684.497 L1207.91 684.497 L1208.47 684.497 L1209.03 684.497 L1209.59 684.497 L1210.15 684.497 L1210.71 684.497 L1211.27 684.497 L1211.83 684.497 L1212.39 684.497 L1212.95 684.497 L1213.51 684.497 L1214.07 684.497 L1214.62 684.497 L1215.18 684.497 L1215.74 684.497 L1216.3 684.497 L1216.86 684.497 L1217.42 684.497 L1217.98 684.497 L1218.54 684.497 L1219.1 684.497 L1219.66 684.497 L1220.22 684.497 L1220.78 684.497 L1221.34 684.497 L1221.89 684.497 L1222.45 684.497 L1223.01 684.497 L1223.57 684.497 L1224.13 684.497 L1224.69 684.497 L1225.25 684.497 L1225.81 684.497 L1226.37 684.497 L1226.93 684.497 L1227.49 684.497 L1228.05 684.497 L1228.61 684.497 L1229.17 684.497 L1229.72 684.497 L1230.28 684.497 L1230.84 684.497 L1231.4 684.497 L1231.96 684.497 L1232.52 684.497 L1233.08 684.497 L1233.64 684.497 L1234.2 684.497 L1234.76 684.497 L1235.32 684.497 L1235.88 684.497 L1236.44 684.497 L1236.99 684.497 L1237.55 684.497 L1238.11 684.497 L1238.67 684.497 L1239.23 684.497 L1239.79 684.497 L1240.35 684.497 L1240.91 684.497 L1241.47 684.497 L1242.03 684.497 L1242.59 684.497 L1243.15 684.497 L1243.71 684.497 L1244.26 684.497 L1244.82 684.497 L1245.38 684.497 L1245.94 684.497 L1246.5 684.497 L1247.06 684.497 L1247.62 684.497 L1248.18 684.497 L1248.74 684.497 L1249.3 684.497 L1249.86 684.497 L1250.42 684.497 L1250.98 684.497 L1251.54 684.497 L1252.09 684.497 L1252.65 684.497 L1253.21 684.497 L1253.77 684.497 L1254.33 684.497 L1254.89 684.497 L1255.45 684.497 L1256.01 684.497 L1256.57 684.497 L1257.13 684.497 L1257.69 684.497 L1258.25 684.497 L1258.81 684.497 L1259.36 684.497 L1259.92 684.497 L1260.48 684.497 L1261.04 684.497 L1261.6 684.497 L1262.16 684.497 L1262.72 684.497 L1263.28 684.497 L1263.84 684.497 L1264.4 684.497 L1264.96 684.497 L1265.52 684.497 L1266.08 684.497 L1266.63 684.497 L1267.19 684.497 L1267.75 684.497 L1268.31 684.497 L1268.87 684.497 L1269.43 684.497 L1269.99 684.497 L1270.55 684.497 L1271.11 684.497 L1271.67 684.497 L1272.23 684.497 L1272.79 684.497 L1273.35 684.497 L1273.91 684.497 L1274.46 684.497 L1275.02 684.497 L1275.58 684.497 L1276.14 684.497 L1276.7 684.497 L1277.26 684.497 L1277.82 684.497 L1278.38 684.497 L1278.94 684.497 L1279.5 684.497 L1280.06 684.497 L1280.62 684.497 L1281.18 684.497 L1281.73 684.497 L1282.29 684.497 L1282.85 684.497 L1283.41 684.497 L1283.97 684.497 L1284.53 684.497 L1285.09 684.497 L1285.65 684.497 L1286.21 684.497 L1286.77 684.497 L1287.33 684.497 L1287.89 684.497 L1288.45 684.497 L1289 684.497 L1289.56 684.497 L1290.12 684.497 L1290.68 684.497 L1291.24 684.497 L1291.8 684.497 L1292.36 684.497 L1292.92 684.497 L1293.48 684.497 L1294.04 684.497 L1294.6 684.497 L1295.16 684.497 L1295.72 684.497 L1296.28 684.497 L1296.83 684.497 L1297.39 684.497 L1297.95 684.497 L1298.51 684.497 L1299.07 684.497 L1299.63 684.497 L1300.19 684.497 L1300.75 684.497 L1301.31 684.497 L1301.87 684.497 L1302.43 684.497 L1302.99 684.497 L1303.55 684.497 L1304.1 684.497 L1304.66 684.497 L1305.22 684.497 L1305.78 684.497 L1306.34 684.497 L1306.9 684.497 L1307.46 684.497 L1308.02 684.497 L1308.58 684.497 L1309.14 684.497 L1309.7 684.497 L1310.26 684.497 L1310.82 684.497 L1311.38 684.497 L1311.93 684.497 L1312.49 684.497 L1313.05 684.497 L1313.61 684.497 L1314.17 684.497 L1314.73 684.497 L1315.29 684.497 L1315.85 684.497 L1316.41 684.497 L1316.97 684.497 L1317.53 684.497 L1318.09 684.497 L1318.65 684.497 L1319.2 684.497 L1319.76 684.497 L1320.32 684.497 L1320.88 684.497 L1321.44 684.497 L1322 684.497 L1322.56 684.497 L1323.12 684.497 L1323.68 684.497 L1324.24 684.497 L1324.8 684.497 L1325.36 684.497 L1325.92 684.497 L1326.47 684.497 L1327.03 684.497 L1327.59 684.497 L1328.15 684.497 L1328.71 684.497 L1329.27 684.497 L1329.83 684.497 L1330.39 684.497 L1330.95 684.497 L1331.51 684.497 L1332.07 684.497 L1332.63 684.497 L1333.19 684.497 L1333.75 684.497 L1334.3 684.497 L1334.86 684.497 L1335.42 684.497 L1335.98 684.497 L1336.54 684.497 L1337.1 684.497 L1337.66 684.497 L1338.22 684.497 L1338.78 684.497 L1339.34 684.497 L1339.9 684.497 L1340.46 684.497 L1341.02 684.497 L1341.57 684.497 L1342.13 684.497 L1342.69 684.497 L1343.25 684.497 L1343.81 684.497 L1344.37 684.497 L1344.93 684.497 L1345.49 684.497 L1346.05 684.497 L1346.61 684.497 L1347.17 684.497 L1347.73 684.497 L1348.29 684.497 L1348.84 684.497 L1349.4 684.497 L1349.96 684.497 L1350.52 684.497 L1351.08 684.497 L1351.64 684.497 L1352.2 684.497 L1352.76 684.497 L1353.32 684.497 L1353.88 684.497 L1354.44 684.497 L1355 684.497 L1355.56 684.497 L1356.12 684.497 L1356.67 684.497 L1357.23 684.497 L1357.79 684.497 L1358.35 684.497 L1358.91 684.497 L1359.47 684.497 L1360.03 684.497 L1360.59 684.497 L1361.15 684.497 L1361.71 684.497 L1362.27 684.497 L1362.83 684.497 L1363.39 684.497 L1363.94 684.497 L1364.5 684.497 L1365.06 684.497 L1365.62 684.497 L1366.18 684.497 L1366.74 684.497 L1367.3 684.497 L1367.86 684.497 L1368.42 684.497 L1368.98 684.497 L1369.54 684.497 L1370.1 684.497 L1370.66 684.497 L1371.21 684.497 L1371.77 684.497 L1372.33 684.497 L1372.89 684.497 L1373.45 684.497 L1374.01 684.497 L1374.57 684.497 L1375.13 684.497 L1375.69 684.497 L1376.25 684.497 L1376.81 684.497 L1377.37 684.497 L1377.93 684.497 L1378.49 684.497 L1379.04 684.497 L1379.6 684.497 L1380.16 684.497 L1380.72 684.497 L1381.28 684.497 L1381.84 684.497 L1382.4 684.497 L1382.96 684.497 L1383.52 684.497 L1384.08 684.497 L1384.64 684.497 L1385.2 684.497 L1385.76 684.497 L1386.31 684.497 L1386.87 684.497 L1387.43 684.497 L1387.99 684.497 L1388.55 684.497 L1389.11 684.497 L1389.67 684.497 L1390.23 684.497 L1390.79 684.497 L1391.35 684.497 L1391.91 684.497 L1392.47 684.497 L1393.03 684.497 L1393.58 684.497 L1394.14 684.497 L1394.7 684.497 L1395.26 684.497 L1395.82 684.497 L1396.38 684.497 L1396.94 684.497 L1397.5 684.497 L1398.06 684.497 L1398.62 684.497 L1399.18 684.497 L1399.74 684.497 L1400.3 684.497 L1400.86 684.497 L1401.41 684.497 L1401.97 684.497 L1402.53 684.497 L1403.09 684.497 L1403.65 684.497 L1404.21 684.497 L1404.77 684.497 L1405.33 684.497 L1405.89 684.497 L1406.45 684.497 L1407.01 684.497 L1407.57 684.497 L1408.13 684.497 L1408.68 684.497 L1409.24 684.497 L1409.8 684.497 L1410.36 684.497 L1410.92 684.497 L1411.48 684.497 L1412.04 684.497 L1412.6 684.497 L1413.16 684.497 L1413.72 684.497 L1414.28 684.497 L1414.84 684.497 L1415.4 684.497 L1415.95 684.497 L1416.51 684.497 L1417.07 684.497 L1417.63 684.497 L1418.19 684.497 L1418.75 684.497 L1419.31 684.497 L1419.87 684.497 L1420.43 684.497 L1420.99 684.497 L1421.55 684.497 L1422.11 684.497 L1422.67 684.497 L1423.23 684.497 L1423.78 684.497 L1424.34 684.497 L1424.9 684.497 L1425.46 684.497 L1426.02 684.497 L1426.58 684.497 L1427.14 684.497 L1427.7 684.497 L1428.26 684.497 L1428.82 684.497 L1429.38 684.497 L1429.94 684.497 L1430.5 684.497 L1431.05 684.497 L1431.61 684.497 L1432.17 684.497 L1432.73 684.497 L1433.29 684.497 L1433.85 684.497 L1434.41 684.497 L1434.97 684.497 L1435.53 684.497 L1436.09 684.497 L1436.65 684.497 L1437.21 684.497 L1437.77 684.497 L1438.33 684.497 L1438.88 684.497 L1439.44 684.497 L1440 684.497 L1440.56 684.497 L1441.12 684.497 L1441.68 684.497 L1442.24 684.497 L1442.8 684.497 L1443.36 684.497 L1443.92 684.497 L1444.48 684.497 L1445.04 684.497 L1445.6 684.497 L1446.15 684.497 L1446.71 684.497 L1447.27 684.497 L1447.83 684.497 L1448.39 684.497 L1448.95 684.497 L1449.51 684.497 L1450.07 684.497 L1450.63 684.497 L1451.19 684.497 L1451.75 684.497 L1452.31 684.497 L1452.87 684.497 L1453.42 684.497 L1453.98 684.497 L1454.54 684.497 L1455.1 684.497 L1455.66 684.497 L1456.22 684.497 L1456.78 684.497 L1457.34 684.497 L1457.9 684.497 L1458.46 684.497 L1459.02 684.497 L1459.58 684.497 L1460.14 684.497 L1460.7 684.497 L1461.25 684.497 L1461.81 684.497 L1462.37 684.497 L1462.93 684.497 L1463.49 684.497 L1464.05 684.497 L1464.61 684.497 L1465.17 684.497 L1465.73 684.497 L1466.29 684.497 L1466.85 684.497 L1467.41 684.497 L1467.97 684.497 L1468.52 684.497 L1469.08 684.497 L1469.64 684.497 L1470.2 684.497 L1470.76 684.497 L1471.32 684.497 L1471.88 684.497 L1472.44 684.497 L1473 684.497 L1473.56 684.497 L1474.12 684.497 L1474.68 684.497 L1475.24 684.497 L1475.79 684.497 L1476.35 684.497 L1476.91 684.497 L1477.47 684.497 L1478.03 684.497 L1478.59 684.497 L1479.15 684.497 L1479.71 684.497 L1480.27 684.497 L1480.83 684.497 L1481.39 684.497 L1481.95 684.497 L1482.51 684.497 L1483.07 684.497 L1483.62 684.497 L1484.18 684.497 L1484.74 684.497 L1485.3 684.497 L1485.86 684.497 L1486.42 684.497 L1486.98 684.497 L1487.54 684.497 L1488.1 684.497 L1488.66 684.497 L1489.22 684.497 L1489.78 684.497 L1490.34 684.497 L1490.89 684.497 L1491.45 684.497 L1492.01 684.497 L1492.57 684.497 L1493.13 684.497 L1493.69 684.497 L1494.25 684.497 L1494.81 684.497 L1495.37 684.497 L1495.93 684.497 L1496.49 684.497 L1497.05 684.497 L1497.61 684.497 L1498.16 684.497 L1498.72 684.497 L1499.28 684.497 L1499.84 684.497 L1500.4 684.497 L1500.96 684.497 L1501.52 684.497 L1502.08 684.497 L1502.64 684.497 L1503.2 684.497 L1503.76 684.497 L1504.32 684.497 L1504.88 684.497 L1505.44 684.497 L1505.99 684.497 L1506.55 684.497 L1507.11 684.497 L1507.67 684.497 L1508.23 684.497 L1508.79 684.497 L1509.35 684.497 L1509.91 684.497 L1510.47 684.497 L1511.03 684.497 L1511.59 684.497 L1512.15 684.497 L1512.71 684.497 L1513.26 684.497 L1513.82 684.497 L1514.38 684.497 L1514.94 684.497 L1515.5 684.497 L1516.06 684.497 L1516.62 684.497 L1517.18 684.497 L1517.74 684.497 L1518.3 684.497 L1518.86 684.497 L1519.42 684.497 L1519.98 684.497 L1520.53 684.497 L1521.09 684.497 L1521.65 684.497 L1522.21 684.497 L1522.77 684.497 L1523.33 684.497 L1523.89 684.497 L1524.45 684.497 L1525.01 684.497 L1525.57 684.497 L1526.13 684.497 L1526.69 684.497 L1527.25 684.497 L1527.81 684.497 L1528.36 684.497 L1528.92 684.497 L1529.48 684.497 L1530.04 684.497 L1530.6 684.497 L1531.16 684.497 L1531.72 684.497 L1532.28 684.497 L1532.84 684.497 L1533.4 684.497 L1533.96 684.497 L1534.52 684.497 L1535.08 684.497 L1535.63 684.497 L1536.19 684.497 L1536.75 684.497 L1537.31 684.497 L1537.87 684.497 L1538.43 684.497 L1538.99 684.497 L1539.55 684.497 L1540.11 684.497 L1540.67 684.497 L1541.23 684.497 L1541.79 684.497 L1542.35 684.497 L1542.9 684.497 L1543.46 684.497 L1544.02 684.497 L1544.58 684.497 L1545.14 684.497 L1545.7 684.497 L1546.26 684.497 L1546.82 684.497 L1547.38 684.497 L1547.94 684.497 L1548.5 684.497 L1549.06 684.497 L1549.62 684.497 L1550.18 684.497 L1550.73 684.497 L1551.29 684.497 L1551.85 684.497 L1552.41 684.497 L1552.97 684.497 L1553.53 684.497 L1554.09 684.497 L1554.65 684.497 L1555.21 684.497 L1555.77 684.497 L1556.33 684.497 L1556.89 684.497 L1557.45 684.497 L1558 684.497 L1558.56 684.497 L1559.12 684.497 L1559.68 684.497 L1560.24 684.497 L1560.8 684.497 L1561.36 684.497 L1561.92 684.497 L1562.48 684.497 L1563.04 684.497 L1563.6 684.497 L1564.16 684.497 L1564.72 684.497 L1565.28 684.497 L1565.83 684.497 L1566.39 684.497 L1566.95 684.497 L1567.51 684.497 L1568.07 684.497 L1568.63 684.497 L1569.19 684.497 L1569.75 684.497 L1570.31 684.497 L1570.87 684.497 L1571.43 684.497 L1571.99 684.497 L1572.55 684.497 L1573.1 684.497 L1573.66 684.497 L1574.22 684.497 L1574.78 684.497 L1575.34 684.497 L1575.9 684.497 L1576.46 684.497 L1577.02 684.497 L1577.58 684.497 L1578.14 684.497 L1578.7 684.497 L1579.26 684.497 L1579.82 684.497 L1580.37 684.497 L1580.93 684.497 L1581.49 684.497 L1582.05 684.497 L1582.61 684.497 L1583.17 684.497 L1583.73 684.497 L1584.29 684.497 L1584.85 684.497 L1585.41 684.497 L1585.97 684.497 L1586.53 684.497 L1587.09 684.497 L1587.65 684.497 L1588.2 684.497 L1588.76 684.497 L1589.32 684.497 L1589.88 684.497 L1590.44 684.497 L1591 684.497 L1591.56 684.497 L1592.12 684.497 L1592.68 684.497 L1593.24 684.497 L1593.8 684.497 L1594.36 684.497 L1594.92 684.497 L1595.47 684.497 L1596.03 684.497 L1596.59 684.497 L1597.15 684.497 L1597.71 684.497 L1598.27 684.497 L1598.83 684.497 L1599.39 684.497 L1599.95 684.497 L1600.51 684.497 L1601.07 684.497 L1601.63 684.497 L1602.19 684.497 L1602.74 684.497 L1603.3 684.497 L1603.86 684.497 L1604.42 684.497 L1604.98 684.497 L1605.54 684.497 L1606.1 684.497 L1606.66 684.497 L1607.22 684.497 L1607.78 684.497 L1608.34 684.497 L1608.9 684.497 L1609.46 684.497 L1610.02 684.497 L1610.57 684.497 L1611.13 684.497 L1611.69 684.497 L1612.25 684.497 L1612.81 684.497 L1613.37 684.497 L1613.93 684.497 L1614.49 684.497 L1615.05 684.497 L1615.61 684.497 L1616.17 684.497 L1616.73 684.497 L1617.29 684.497 L1617.84 684.497 L1618.4 684.497 L1618.96 684.497 L1619.52 684.497 L1620.08 684.497 L1620.64 684.497 L1621.2 684.497 L1621.76 684.497 L1622.32 684.497 L1622.88 684.497 L1623.44 684.497 L1624 684.497 L1624.56 684.497 L1625.11 684.497 L1625.67 684.497 L1626.23 684.497 L1626.79 684.497 L1627.35 684.497 L1627.91 684.497 L1628.47 684.497 L1629.03 684.497 L1629.59 684.497 L1630.15 684.497 L1630.71 684.497 L1631.27 684.497 L1631.83 684.497 L1632.39 684.497 L1632.94 684.497 L1633.5 684.497 L1634.06 684.497 L1634.62 684.497 L1635.18 684.497 L1635.74 684.497 L1636.3 684.497 L1636.86 684.497 L1637.42 684.497 L1637.98 684.497 L1638.54 684.497 L1639.1 684.497 L1639.66 684.497 L1640.21 684.497 L1640.77 684.497 L1641.33 684.497 L1641.89 684.497 L1642.45 684.497 L1643.01 684.497 L1643.57 684.497 L1644.13 684.497 L1644.69 684.497 L1645.25 684.497 L1645.81 684.497 L1646.37 684.497 L1646.93 684.497 L1647.48 684.497 L1648.04 684.497 L1648.6 684.497 L1649.16 684.497 L1649.72 684.497 L1650.28 684.497 L1650.84 684.497 L1651.4 684.497 L1651.96 684.497 L1652.52 684.497 L1653.08 684.497 L1653.64 684.497 L1654.2 684.497 L1654.76 684.497 L1655.31 684.497 L1655.87 684.497 L1656.43 684.497 L1656.99 684.497 L1657.55 684.497 L1658.11 684.497 L1658.67 684.497 L1659.23 684.497 L1659.79 684.497 L1660.35 684.497 L1660.91 684.497 L1661.47 684.497 L1662.03 684.497 L1662.58 684.497 L1663.14 684.497 L1663.7 684.497 L1664.26 684.497 L1664.82 684.497 L1665.38 684.497 L1665.94 684.497 L1666.5 684.497 L1667.06 684.497 L1667.62 684.497 L1668.18 684.497 L1668.74 684.497 L1669.3 684.497 L1669.85 684.497 L1670.41 684.497 L1670.97 684.497 L1671.53 684.497 L1672.09 684.497 L1672.65 684.497 L1673.21 684.497 L1673.77 684.497 L1674.33 684.497 L1674.89 684.497 L1675.45 684.497 L1676.01 684.497 L1676.57 684.497 L1677.13 684.497 L1677.68 684.497 L1678.24 684.497 L1678.8 684.497 L1679.36 684.497 L1679.92 684.497 L1680.48 684.497 L1681.04 684.497 L1681.6 684.497 L1682.16 684.497 L1682.72 684.497 L1683.28 684.497 L1683.84 684.497 L1684.4 684.497 L1684.95 684.497 L1685.51 684.497 L1686.07 684.497 L1686.63 684.497 L1687.19 684.497 L1687.75 684.497 L1688.31 684.497 L1688.87 684.497 L1689.43 684.497 L1689.99 684.497 L1690.55 684.497 L1691.11 684.497 L1691.67 684.497 L1692.23 684.497 L1692.78 684.497 L1693.34 684.497 L1693.9 684.497 L1694.46 684.497 L1695.02 684.497 L1695.58 684.497 L1696.14 684.497 L1696.7 684.497 L1697.26 684.497 L1697.82 684.497 L1698.38 684.497 L1698.94 684.497 L1699.5 684.497 L1700.05 684.497 L1700.61 684.497 L1701.17 684.497 L1701.73 684.497 L1702.29 684.497 L1702.85 684.497 L1703.41 684.497 L1703.97 684.497 L1704.53 684.497 L1705.09 684.497 L1705.65 684.497 L1706.21 684.497 L1706.77 684.497 L1707.32 684.497 L1707.88 684.497 L1708.44 684.497 L1709 684.497 L1709.56 684.497 L1710.12 684.497 L1710.68 684.497 L1711.24 684.497 L1711.8 684.497 L1712.36 684.497 L1712.92 684.497 L1713.48 684.497 L1714.04 684.497 L1714.6 684.497 L1715.15 684.497 L1715.71 684.497 L1716.27 684.497 L1716.83 684.497 L1717.39 684.497 L1717.95 684.497 L1718.51 684.497 L1719.07 684.497 L1719.63 684.497 L1720.19 684.497 L1720.75 684.497 L1721.31 684.497 L1721.87 684.497 L1722.42 684.497 L1722.98 684.497 L1723.54 684.497 L1724.1 684.497 L1724.66 684.497 L1725.22 684.497 L1725.78 684.497 L1726.34 684.497 L1726.9 684.497 L1727.46 684.497 L1728.02 684.497 L1728.58 684.497 L1729.14 684.497 L1729.69 684.497 L1730.25 684.497 L1730.81 684.497 L1731.37 684.497 L1731.93 684.497 L1732.49 684.497 L1733.05 684.497 L1733.61 684.497 L1734.17 684.497 L1734.73 684.497 L1735.29 684.497 L1735.85 684.497 L1736.41 684.497 L1736.97 684.497 L1737.52 684.497 L1738.08 684.497 L1738.64 684.497 L1739.2 684.497 L1739.76 684.497 L1740.32 684.497 L1740.88 684.497 L1741.44 684.497 L1742 684.497 L1742.56 684.497 L1743.12 684.497 L1743.68 684.497 L1744.24 684.497 L1744.79 684.497 L1745.35 684.497 L1745.91 684.497 L1746.47 684.497 L1747.03 684.497 L1747.59 684.497 L1748.15 684.497 L1748.71 684.497 L1749.27 684.497 L1749.83 684.497 L1750.39 684.497 L1750.95 684.497 L1751.51 684.497 L1752.06 684.497 L1752.62 684.497 L1753.18 684.497 L1753.74 684.497 L1754.3 684.497 L1754.86 684.497 L1755.42 684.497 L1755.98 684.497 L1756.54 684.497 L1757.1 684.497 L1757.66 684.497 L1758.22 684.497 L1758.78 684.497 L1759.34 684.497 L1759.89 684.497 L1760.45 684.497 L1761.01 684.497 L1761.57 684.497 L1762.13 684.497 L1762.69 684.497 L1763.25 684.497 L1763.81 684.497 L1764.37 684.497 L1764.93 684.497 L1765.49 684.497 L1766.05 684.497 L1766.61 684.497 L1767.16 684.497 L1767.72 684.497 L1768.28 684.497 L1768.84 684.497 L1769.4 684.497 L1769.96 684.497 L1770.52 684.497 L1771.08 684.497 L1771.64 684.497 L1772.2 684.497 L1772.76 684.497 L1773.32 684.497 L1773.88 684.497 L1774.43 684.497 L1774.99 684.497 L1775.55 684.497 L1776.11 684.497 L1776.67 684.497 L1777.23 684.497 L1777.79 684.497 L1778.35 684.497 L1778.91 684.497 L1779.47 684.497 L1780.03 684.497 L1780.59 684.497 L1781.15 684.497 L1781.71 684.497 L1782.26 684.497 L1782.82 684.497 L1783.38 684.497 L1783.94 684.497 L1784.5 684.497 L1785.06 684.497 L1785.62 684.497 L1786.18 684.497 L1786.74 684.497 L1787.3 684.497 L1787.86 684.497 L1788.42 684.497 L1788.98 684.497 L1789.53 684.497 L1790.09 684.497 L1790.65 684.497 L1791.21 684.497 L1791.77 684.497 L1792.33 684.497 L1792.89 684.497 L1793.45 684.497 L1794.01 684.497 L1794.57 684.497 L1795.13 684.497 L1795.69 684.497 L1796.25 684.497 L1796.8 684.497 L1797.36 684.497 L1797.92 684.497 L1798.48 684.497 L1799.04 684.497 L1799.6 684.497 L1800.16 684.497 L1800.72 684.497 L1801.28 684.497 L1801.84 684.497 L1802.4 684.497 L1802.96 684.497 L1803.52 684.497 L1804.08 684.497 L1804.63 684.497 L1805.19 684.497 L1805.75 684.497 L1806.31 684.497 L1806.87 684.497 L1807.43 684.497 L1807.99 684.497 L1808.55 684.497 L1809.11 684.497 L1809.67 684.497 L1810.23 684.497 L1810.79 684.497 L1811.35 684.497 L1811.9 684.497 L1812.46 684.497 L1813.02 684.497 L1813.58 684.497 L1814.14 684.497 L1814.7 684.497 L1815.26 684.497 L1815.82 684.497 L1816.38 684.497 L1816.94 684.497 L1817.5 684.497 L1818.06 684.497 L1818.62 684.497 L1819.18 684.497 L1819.73 684.497 L1820.29 684.497 L1820.85 684.497 L1821.41 684.497 L1821.97 684.497 L1822.53 684.497 L1823.09 684.497 L1823.65 684.497 L1824.21 684.497 L1824.77 684.497 L1825.33 684.497 L1825.89 684.497 L1826.45 684.497 L1827 684.497 L1827.56 684.497 L1828.12 684.497 L1828.68 684.497 L1829.24 684.497 L1829.8 684.497 L1830.36 684.497 L1830.92 684.497 L1831.48 684.497 L1832.04 684.497 L1832.6 684.497 L1833.16 684.497 L1833.72 684.497 L1834.27 684.497 L1834.83 684.497 L1835.39 684.497 L1835.95 684.497 L1836.51 684.497 L1837.07 684.497 L1837.63 684.497 L1838.19 684.497 L1838.19 682.71 L1837.63 682.71 L1837.07 682.71 L1836.51 682.71 L1835.95 682.71 L1835.39 682.71 L1834.83 682.71 L1834.27 682.71 L1833.72 682.71 L1833.16 682.71 L1832.6 682.71 L1832.04 682.71 L1831.48 682.71 L1830.92 682.71 L1830.36 682.71 L1829.8 682.71 L1829.24 682.71 L1828.68 682.71 L1828.12 682.71 L1827.56 682.71 L1827 682.71 L1826.45 682.71 L1825.89 682.71 L1825.33 682.71 L1824.77 682.71 L1824.21 682.71 L1823.65 682.71 L1823.09 682.71 L1822.53 682.71 L1821.97 682.71 L1821.41 682.71 L1820.85 682.71 L1820.29 682.71 L1819.73 682.71 L1819.18 682.71 L1818.62 682.71 L1818.06 682.71 L1817.5 682.71 L1816.94 682.71 L1816.38 682.71 L1815.82 682.71 L1815.26 682.71 L1814.7 682.71 L1814.14 682.71 L1813.58 682.71 L1813.02 682.71 L1812.46 682.71 L1811.9 682.71 L1811.35 682.71 L1810.79 682.71 L1810.23 682.71 L1809.67 682.71 L1809.11 682.71 L1808.55 682.71 L1807.99 682.71 L1807.43 682.71 L1806.87 682.71 L1806.31 682.71 L1805.75 682.71 L1805.19 682.71 L1804.63 682.71 L1804.08 682.71 L1803.52 682.71 L1802.96 682.71 L1802.4 682.71 L1801.84 682.71 L1801.28 682.71 L1800.72 682.71 L1800.16 682.71 L1799.6 682.71 L1799.04 682.71 L1798.48 682.71 L1797.92 682.71 L1797.36 682.71 L1796.8 682.71 L1796.25 682.71 L1795.69 682.71 L1795.13 682.71 L1794.57 682.71 L1794.01 682.71 L1793.45 682.71 L1792.89 682.71 L1792.33 682.71 L1791.77 682.71 L1791.21 682.71 L1790.65 682.71 L1790.09 682.71 L1789.53 682.71 L1788.98 682.71 L1788.42 682.71 L1787.86 682.71 L1787.3 682.71 L1786.74 682.71 L1786.18 682.71 L1785.62 682.71 L1785.06 682.71 L1784.5 682.71 L1783.94 682.71 L1783.38 682.71 L1782.82 682.71 L1782.26 682.71 L1781.71 682.71 L1781.15 682.71 L1780.59 682.71 L1780.03 682.71 L1779.47 682.71 L1778.91 682.71 L1778.35 682.71 L1777.79 682.71 L1777.23 682.71 L1776.67 682.71 L1776.11 682.71 L1775.55 682.71 L1774.99 682.71 L1774.43 682.71 L1773.88 682.71 L1773.32 682.71 L1772.76 682.71 L1772.2 682.71 L1771.64 682.71 L1771.08 682.71 L1770.52 682.71 L1769.96 682.71 L1769.4 682.71 L1768.84 682.71 L1768.28 682.71 L1767.72 682.71 L1767.16 682.71 L1766.61 682.71 L1766.05 682.71 L1765.49 682.71 L1764.93 682.71 L1764.37 682.71 L1763.81 682.71 L1763.25 682.71 L1762.69 682.71 L1762.13 682.71 L1761.57 682.71 L1761.01 682.71 L1760.45 682.71 L1759.89 682.71 L1759.34 682.71 L1758.78 682.71 L1758.22 682.71 L1757.66 682.71 L1757.1 682.71 L1756.54 682.71 L1755.98 682.71 L1755.42 682.71 L1754.86 682.71 L1754.3 682.71 L1753.74 682.71 L1753.18 682.71 L1752.62 682.71 L1752.06 682.71 L1751.51 682.71 L1750.95 682.71 L1750.39 682.71 L1749.83 682.71 L1749.27 682.71 L1748.71 682.71 L1748.15 682.71 L1747.59 682.71 L1747.03 682.71 L1746.47 682.71 L1745.91 682.71 L1745.35 682.71 L1744.79 682.71 L1744.24 682.71 L1743.68 682.71 L1743.12 682.71 L1742.56 682.71 L1742 682.71 L1741.44 682.71 L1740.88 682.71 L1740.32 682.71 L1739.76 682.71 L1739.2 682.71 L1738.64 682.71 L1738.08 682.71 L1737.52 682.71 L1736.97 682.71 L1736.41 682.71 L1735.85 682.71 L1735.29 682.71 L1734.73 682.71 L1734.17 682.71 L1733.61 682.71 L1733.05 682.71 L1732.49 682.71 L1731.93 682.71 L1731.37 682.71 L1730.81 682.71 L1730.25 682.71 L1729.69 682.71 L1729.14 682.71 L1728.58 682.71 L1728.02 682.71 L1727.46 682.71 L1726.9 682.71 L1726.34 682.71 L1725.78 682.71 L1725.22 682.71 L1724.66 682.71 L1724.1 682.71 L1723.54 682.71 L1722.98 682.71 L1722.42 682.71 L1721.87 682.71 L1721.31 682.71 L1720.75 682.71 L1720.19 682.71 L1719.63 682.71 L1719.07 682.71 L1718.51 682.71 L1717.95 682.71 L1717.39 682.71 L1716.83 682.71 L1716.27 682.71 L1715.71 682.71 L1715.15 682.71 L1714.6 682.71 L1714.04 682.71 L1713.48 682.71 L1712.92 682.71 L1712.36 682.71 L1711.8 682.71 L1711.24 682.71 L1710.68 682.71 L1710.12 682.71 L1709.56 682.71 L1709 682.71 L1708.44 682.71 L1707.88 682.71 L1707.32 682.71 L1706.77 682.71 L1706.21 682.71 L1705.65 682.71 L1705.09 682.71 L1704.53 682.71 L1703.97 682.71 L1703.41 682.71 L1702.85 682.71 L1702.29 682.71 L1701.73 682.71 L1701.17 682.71 L1700.61 682.71 L1700.05 682.71 L1699.5 682.71 L1698.94 682.71 L1698.38 682.71 L1697.82 682.71 L1697.26 682.71 L1696.7 682.71 L1696.14 682.71 L1695.58 682.71 L1695.02 682.71 L1694.46 682.71 L1693.9 682.71 L1693.34 682.71 L1692.78 682.71 L1692.23 682.71 L1691.67 682.71 L1691.11 682.71 L1690.55 682.71 L1689.99 682.71 L1689.43 682.71 L1688.87 682.71 L1688.31 682.71 L1687.75 682.71 L1687.19 682.71 L1686.63 682.71 L1686.07 682.71 L1685.51 682.71 L1684.95 682.71 L1684.4 682.71 L1683.84 682.71 L1683.28 682.71 L1682.72 682.71 L1682.16 682.71 L1681.6 682.71 L1681.04 682.71 L1680.48 682.71 L1679.92 682.71 L1679.36 682.71 L1678.8 682.71 L1678.24 682.71 L1677.68 682.71 L1677.13 682.71 L1676.57 682.71 L1676.01 682.71 L1675.45 682.71 L1674.89 682.71 L1674.33 682.71 L1673.77 682.71 L1673.21 682.71 L1672.65 682.71 L1672.09 682.71 L1671.53 682.71 L1670.97 682.71 L1670.41 682.71 L1669.85 682.71 L1669.3 682.71 L1668.74 682.71 L1668.18 682.71 L1667.62 682.71 L1667.06 682.71 L1666.5 682.71 L1665.94 682.71 L1665.38 682.71 L1664.82 682.71 L1664.26 682.71 L1663.7 682.71 L1663.14 682.71 L1662.58 682.71 L1662.03 682.71 L1661.47 682.71 L1660.91 682.71 L1660.35 682.71 L1659.79 682.71 L1659.23 682.71 L1658.67 682.71 L1658.11 682.71 L1657.55 682.71 L1656.99 682.71 L1656.43 682.71 L1655.87 682.71 L1655.31 682.71 L1654.76 682.71 L1654.2 682.71 L1653.64 682.71 L1653.08 682.71 L1652.52 682.71 L1651.96 682.71 L1651.4 682.71 L1650.84 682.71 L1650.28 682.71 L1649.72 682.71 L1649.16 682.71 L1648.6 682.71 L1648.04 682.71 L1647.48 682.71 L1646.93 682.71 L1646.37 682.71 L1645.81 682.71 L1645.25 682.71 L1644.69 682.71 L1644.13 682.71 L1643.57 682.71 L1643.01 682.71 L1642.45 682.71 L1641.89 682.71 L1641.33 682.71 L1640.77 682.71 L1640.21 682.71 L1639.66 682.71 L1639.1 682.71 L1638.54 682.71 L1637.98 682.71 L1637.42 682.71 L1636.86 682.71 L1636.3 682.71 L1635.74 682.71 L1635.18 682.71 L1634.62 682.71 L1634.06 682.71 L1633.5 682.71 L1632.94 682.71 L1632.39 682.71 L1631.83 682.71 L1631.27 682.71 L1630.71 682.71 L1630.15 682.71 L1629.59 682.71 L1629.03 682.71 L1628.47 682.71 L1627.91 682.71 L1627.35 682.71 L1626.79 682.71 L1626.23 682.71 L1625.67 682.71 L1625.11 682.71 L1624.56 682.71 L1624 682.71 L1623.44 682.71 L1622.88 682.71 L1622.32 682.71 L1621.76 682.71 L1621.2 682.71 L1620.64 682.71 L1620.08 682.71 L1619.52 682.71 L1618.96 682.71 L1618.4 682.71 L1617.84 682.71 L1617.29 682.71 L1616.73 682.71 L1616.17 682.71 L1615.61 682.71 L1615.05 682.71 L1614.49 682.71 L1613.93 682.71 L1613.37 682.71 L1612.81 682.71 L1612.25 682.71 L1611.69 682.71 L1611.13 682.71 L1610.57 682.71 L1610.02 682.71 L1609.46 682.71 L1608.9 682.71 L1608.34 682.71 L1607.78 682.71 L1607.22 682.71 L1606.66 682.71 L1606.1 682.71 L1605.54 682.71 L1604.98 682.71 L1604.42 682.71 L1603.86 682.71 L1603.3 682.71 L1602.74 682.71 L1602.19 682.71 L1601.63 682.71 L1601.07 682.71 L1600.51 682.71 L1599.95 682.71 L1599.39 682.71 L1598.83 682.71 L1598.27 682.71 L1597.71 682.71 L1597.15 682.71 L1596.59 682.71 L1596.03 682.71 L1595.47 682.71 L1594.92 682.71 L1594.36 682.71 L1593.8 682.71 L1593.24 682.71 L1592.68 682.71 L1592.12 682.71 L1591.56 682.71 L1591 682.71 L1590.44 682.71 L1589.88 682.71 L1589.32 682.71 L1588.76 682.71 L1588.2 682.71 L1587.65 682.71 L1587.09 682.71 L1586.53 682.71 L1585.97 682.71 L1585.41 682.71 L1584.85 682.71 L1584.29 682.71 L1583.73 682.71 L1583.17 682.71 L1582.61 682.71 L1582.05 682.71 L1581.49 682.71 L1580.93 682.71 L1580.37 682.71 L1579.82 682.71 L1579.26 682.71 L1578.7 682.71 L1578.14 682.71 L1577.58 682.71 L1577.02 682.71 L1576.46 682.71 L1575.9 682.71 L1575.34 682.71 L1574.78 682.71 L1574.22 682.71 L1573.66 682.71 L1573.1 682.71 L1572.55 682.71 L1571.99 682.71 L1571.43 682.71 L1570.87 682.71 L1570.31 682.71 L1569.75 682.71 L1569.19 682.71 L1568.63 682.71 L1568.07 682.71 L1567.51 682.71 L1566.95 682.71 L1566.39 682.71 L1565.83 682.71 L1565.28 682.71 L1564.72 682.71 L1564.16 682.71 L1563.6 682.71 L1563.04 682.71 L1562.48 682.71 L1561.92 682.71 L1561.36 682.71 L1560.8 682.71 L1560.24 682.71 L1559.68 682.71 L1559.12 682.71 L1558.56 682.71 L1558 682.71 L1557.45 682.71 L1556.89 682.71 L1556.33 682.71 L1555.77 682.71 L1555.21 682.71 L1554.65 682.71 L1554.09 682.71 L1553.53 682.71 L1552.97 682.71 L1552.41 682.71 L1551.85 682.71 L1551.29 682.71 L1550.73 682.71 L1550.18 682.71 L1549.62 682.71 L1549.06 682.71 L1548.5 682.71 L1547.94 682.71 L1547.38 682.71 L1546.82 682.71 L1546.26 682.71 L1545.7 682.71 L1545.14 682.71 L1544.58 682.71 L1544.02 682.71 L1543.46 682.71 L1542.9 682.71 L1542.35 682.71 L1541.79 682.71 L1541.23 682.71 L1540.67 682.71 L1540.11 682.71 L1539.55 682.71 L1538.99 682.71 L1538.43 682.71 L1537.87 682.71 L1537.31 682.71 L1536.75 682.71 L1536.19 682.71 L1535.63 682.71 L1535.08 682.71 L1534.52 682.71 L1533.96 682.71 L1533.4 682.71 L1532.84 682.71 L1532.28 682.71 L1531.72 682.71 L1531.16 682.71 L1530.6 682.71 L1530.04 682.71 L1529.48 682.71 L1528.92 682.71 L1528.36 682.71 L1527.81 682.71 L1527.25 682.71 L1526.69 682.71 L1526.13 682.71 L1525.57 682.71 L1525.01 682.71 L1524.45 682.71 L1523.89 682.71 L1523.33 682.71 L1522.77 682.71 L1522.21 682.71 L1521.65 682.71 L1521.09 682.71 L1520.53 682.71 L1519.98 682.71 L1519.42 682.71 L1518.86 682.71 L1518.3 682.71 L1517.74 682.71 L1517.18 682.71 L1516.62 682.71 L1516.06 682.71 L1515.5 682.71 L1514.94 682.71 L1514.38 682.71 L1513.82 682.71 L1513.26 682.71 L1512.71 682.71 L1512.15 682.71 L1511.59 682.71 L1511.03 682.71 L1510.47 682.71 L1509.91 682.71 L1509.35 682.71 L1508.79 682.71 L1508.23 682.71 L1507.67 682.71 L1507.11 682.71 L1506.55 682.71 L1505.99 682.71 L1505.44 682.71 L1504.88 682.71 L1504.32 682.71 L1503.76 682.71 L1503.2 682.71 L1502.64 682.71 L1502.08 682.71 L1501.52 682.71 L1500.96 682.71 L1500.4 682.71 L1499.84 682.71 L1499.28 682.71 L1498.72 682.71 L1498.16 682.71 L1497.61 682.71 L1497.05 682.71 L1496.49 682.71 L1495.93 682.71 L1495.37 682.71 L1494.81 682.71 L1494.25 682.71 L1493.69 682.71 L1493.13 682.71 L1492.57 682.71 L1492.01 682.71 L1491.45 682.71 L1490.89 682.71 L1490.34 682.71 L1489.78 682.71 L1489.22 682.71 L1488.66 682.71 L1488.1 682.71 L1487.54 682.71 L1486.98 682.71 L1486.42 682.71 L1485.86 682.71 L1485.3 682.71 L1484.74 682.71 L1484.18 682.71 L1483.62 682.71 L1483.07 682.71 L1482.51 682.71 L1481.95 682.71 L1481.39 682.71 L1480.83 682.71 L1480.27 682.71 L1479.71 682.71 L1479.15 682.71 L1478.59 682.71 L1478.03 682.71 L1477.47 682.71 L1476.91 682.71 L1476.35 682.71 L1475.79 682.71 L1475.24 682.71 L1474.68 682.71 L1474.12 682.71 L1473.56 682.71 L1473 682.71 L1472.44 682.71 L1471.88 682.71 L1471.32 682.71 L1470.76 682.71 L1470.2 682.71 L1469.64 682.71 L1469.08 682.71 L1468.52 682.71 L1467.97 682.71 L1467.41 682.71 L1466.85 682.71 L1466.29 682.71 L1465.73 682.71 L1465.17 682.71 L1464.61 682.71 L1464.05 682.71 L1463.49 682.71 L1462.93 682.71 L1462.37 682.71 L1461.81 682.71 L1461.25 682.71 L1460.7 682.71 L1460.14 682.71 L1459.58 682.71 L1459.02 682.71 L1458.46 682.71 L1457.9 682.71 L1457.34 682.71 L1456.78 682.71 L1456.22 682.71 L1455.66 682.71 L1455.1 682.71 L1454.54 682.71 L1453.98 682.71 L1453.42 682.71 L1452.87 682.71 L1452.31 682.71 L1451.75 682.71 L1451.19 682.71 L1450.63 682.71 L1450.07 682.71 L1449.51 682.71 L1448.95 682.71 L1448.39 682.71 L1447.83 682.71 L1447.27 682.71 L1446.71 682.71 L1446.15 682.71 L1445.6 682.71 L1445.04 682.71 L1444.48 682.71 L1443.92 682.71 L1443.36 682.71 L1442.8 682.71 L1442.24 682.71 L1441.68 682.71 L1441.12 682.71 L1440.56 682.71 L1440 682.71 L1439.44 682.71 L1438.88 682.71 L1438.33 682.71 L1437.77 682.71 L1437.21 682.71 L1436.65 682.71 L1436.09 682.71 L1435.53 682.71 L1434.97 682.71 L1434.41 682.71 L1433.85 682.71 L1433.29 682.71 L1432.73 682.71 L1432.17 682.71 L1431.61 682.71 L1431.05 682.71 L1430.5 682.71 L1429.94 682.71 L1429.38 682.71 L1428.82 682.71 L1428.26 682.71 L1427.7 682.71 L1427.14 682.71 L1426.58 682.71 L1426.02 682.71 L1425.46 682.71 L1424.9 682.71 L1424.34 682.71 L1423.78 682.71 L1423.23 682.71 L1422.67 682.71 L1422.11 682.71 L1421.55 682.71 L1420.99 682.71 L1420.43 682.71 L1419.87 682.71 L1419.31 682.71 L1418.75 682.71 L1418.19 682.71 L1417.63 682.71 L1417.07 682.71 L1416.51 682.71 L1415.95 682.71 L1415.4 682.71 L1414.84 682.71 L1414.28 682.71 L1413.72 682.71 L1413.16 682.71 L1412.6 682.71 L1412.04 682.71 L1411.48 682.71 L1410.92 682.71 L1410.36 682.71 L1409.8 682.71 L1409.24 682.71 L1408.68 682.71 L1408.13 682.71 L1407.57 682.71 L1407.01 682.71 L1406.45 682.71 L1405.89 682.71 L1405.33 682.71 L1404.77 682.71 L1404.21 682.71 L1403.65 682.71 L1403.09 682.71 L1402.53 682.71 L1401.97 682.71 L1401.41 682.71 L1400.86 682.71 L1400.3 682.71 L1399.74 682.71 L1399.18 682.71 L1398.62 682.71 L1398.06 682.71 L1397.5 682.71 L1396.94 682.71 L1396.38 682.71 L1395.82 682.71 L1395.26 682.71 L1394.7 682.71 L1394.14 682.71 L1393.58 682.71 L1393.03 682.71 L1392.47 682.71 L1391.91 682.71 L1391.35 682.71 L1390.79 682.71 L1390.23 682.71 L1389.67 682.71 L1389.11 682.71 L1388.55 682.71 L1387.99 682.71 L1387.43 682.71 L1386.87 682.71 L1386.31 682.71 L1385.76 682.71 L1385.2 682.71 L1384.64 682.71 L1384.08 682.71 L1383.52 682.71 L1382.96 682.71 L1382.4 682.71 L1381.84 682.71 L1381.28 682.71 L1380.72 682.71 L1380.16 682.71 L1379.6 682.71 L1379.04 682.71 L1378.49 682.71 L1377.93 682.71 L1377.37 682.71 L1376.81 682.71 L1376.25 682.71 L1375.69 682.71 L1375.13 682.71 L1374.57 682.71 L1374.01 682.71 L1373.45 682.71 L1372.89 682.71 L1372.33 682.71 L1371.77 682.71 L1371.21 682.71 L1370.66 682.71 L1370.1 682.71 L1369.54 682.71 L1368.98 682.71 L1368.42 682.71 L1367.86 682.71 L1367.3 682.71 L1366.74 682.71 L1366.18 682.71 L1365.62 682.71 L1365.06 682.71 L1364.5 682.71 L1363.94 682.71 L1363.39 682.71 L1362.83 682.71 L1362.27 682.71 L1361.71 682.71 L1361.15 682.71 L1360.59 682.71 L1360.03 682.71 L1359.47 682.71 L1358.91 682.71 L1358.35 682.71 L1357.79 682.71 L1357.23 682.71 L1356.67 682.71 L1356.12 682.71 L1355.56 682.71 L1355 682.71 L1354.44 682.71 L1353.88 682.71 L1353.32 682.71 L1352.76 682.71 L1352.2 682.71 L1351.64 682.71 L1351.08 682.71 L1350.52 682.71 L1349.96 682.71 L1349.4 682.71 L1348.84 682.71 L1348.29 682.71 L1347.73 682.71 L1347.17 682.71 L1346.61 682.71 L1346.05 682.71 L1345.49 682.71 L1344.93 682.71 L1344.37 682.71 L1343.81 682.71 L1343.25 682.71 L1342.69 682.71 L1342.13 682.71 L1341.57 682.71 L1341.02 682.71 L1340.46 682.71 L1339.9 682.71 L1339.34 682.71 L1338.78 682.71 L1338.22 682.71 L1337.66 682.71 L1337.1 682.71 L1336.54 682.71 L1335.98 682.71 L1335.42 682.71 L1334.86 682.71 L1334.3 682.71 L1333.75 682.71 L1333.19 682.71 L1332.63 682.71 L1332.07 682.71 L1331.51 682.71 L1330.95 682.71 L1330.39 682.71 L1329.83 682.71 L1329.27 682.71 L1328.71 682.71 L1328.15 682.71 L1327.59 682.71 L1327.03 682.71 L1326.47 682.71 L1325.92 682.71 L1325.36 682.71 L1324.8 682.71 L1324.24 682.71 L1323.68 682.71 L1323.12 682.71 L1322.56 682.71 L1322 682.71 L1321.44 682.71 L1320.88 682.71 L1320.32 682.71 L1319.76 682.71 L1319.2 682.71 L1318.65 682.71 L1318.09 682.71 L1317.53 682.71 L1316.97 682.71 L1316.41 682.71 L1315.85 682.71 L1315.29 682.71 L1314.73 682.71 L1314.17 682.71 L1313.61 682.71 L1313.05 682.71 L1312.49 682.71 L1311.93 682.71 L1311.38 682.71 L1310.82 682.71 L1310.26 682.71 L1309.7 682.71 L1309.14 682.71 L1308.58 682.71 L1308.02 682.71 L1307.46 682.71 L1306.9 682.71 L1306.34 682.71 L1305.78 682.71 L1305.22 682.71 L1304.66 682.71 L1304.1 682.71 L1303.55 682.71 L1302.99 682.71 L1302.43 682.71 L1301.87 682.71 L1301.31 682.71 L1300.75 682.71 L1300.19 682.71 L1299.63 682.71 L1299.07 682.71 L1298.51 682.71 L1297.95 682.71 L1297.39 682.71 L1296.83 682.71 L1296.28 682.71 L1295.72 682.71 L1295.16 682.71 L1294.6 682.71 L1294.04 682.71 L1293.48 682.71 L1292.92 682.71 L1292.36 682.71 L1291.8 682.71 L1291.24 682.71 L1290.68 682.71 L1290.12 682.71 L1289.56 682.71 L1289 682.71 L1288.45 682.71 L1287.89 682.71 L1287.33 682.71 L1286.77 682.71 L1286.21 682.71 L1285.65 682.71 L1285.09 682.71 L1284.53 682.71 L1283.97 682.71 L1283.41 682.71 L1282.85 682.71 L1282.29 682.71 L1281.73 682.71 L1281.18 682.71 L1280.62 682.71 L1280.06 682.71 L1279.5 682.71 L1278.94 682.71 L1278.38 682.71 L1277.82 682.71 L1277.26 682.71 L1276.7 682.71 L1276.14 682.71 L1275.58 682.71 L1275.02 682.71 L1274.46 682.71 L1273.91 682.71 L1273.35 682.71 L1272.79 682.71 L1272.23 682.71 L1271.67 682.71 L1271.11 682.71 L1270.55 682.71 L1269.99 682.71 L1269.43 682.71 L1268.87 682.71 L1268.31 682.71 L1267.75 682.71 L1267.19 682.71 L1266.63 682.71 L1266.08 682.71 L1265.52 682.71 L1264.96 682.71 L1264.4 682.71 L1263.84 682.71 L1263.28 682.71 L1262.72 682.71 L1262.16 682.71 L1261.6 682.71 L1261.04 682.71 L1260.48 682.71 L1259.92 682.71 L1259.36 682.71 L1258.81 682.71 L1258.25 682.71 L1257.69 682.71 L1257.13 682.71 L1256.57 682.71 L1256.01 682.71 L1255.45 682.71 L1254.89 682.71 L1254.33 682.71 L1253.77 682.71 L1253.21 682.71 L1252.65 682.71 L1252.09 682.71 L1251.54 682.71 L1250.98 682.71 L1250.42 682.71 L1249.86 682.71 L1249.3 682.71 L1248.74 682.71 L1248.18 682.71 L1247.62 682.71 L1247.06 682.71 L1246.5 682.71 L1245.94 682.71 L1245.38 682.71 L1244.82 682.71 L1244.26 682.71 L1243.71 682.71 L1243.15 682.71 L1242.59 682.71 L1242.03 682.71 L1241.47 682.71 L1240.91 682.71 L1240.35 682.71 L1239.79 682.71 L1239.23 682.71 L1238.67 682.71 L1238.11 682.71 L1237.55 682.71 L1236.99 682.71 L1236.44 682.71 L1235.88 682.71 L1235.32 682.71 L1234.76 682.71 L1234.2 682.71 L1233.64 682.71 L1233.08 682.71 L1232.52 682.71 L1231.96 682.71 L1231.4 682.71 L1230.84 682.71 L1230.28 682.71 L1229.72 682.71 L1229.17 682.71 L1228.61 682.71 L1228.05 682.71 L1227.49 682.71 L1226.93 682.71 L1226.37 682.71 L1225.81 682.71 L1225.25 682.71 L1224.69 682.71 L1224.13 682.71 L1223.57 682.71 L1223.01 682.71 L1222.45 682.71 L1221.89 682.71 L1221.34 682.71 L1220.78 682.71 L1220.22 682.71 L1219.66 682.71 L1219.1 682.71 L1218.54 682.71 L1217.98 682.71 L1217.42 682.71 L1216.86 682.71 L1216.3 682.71 L1215.74 682.71 L1215.18 682.71 L1214.62 682.71 L1214.07 682.71 L1213.51 682.71 L1212.95 682.71 L1212.39 682.71 L1211.83 682.71 L1211.27 682.71 L1210.71 682.71 L1210.15 682.71 L1209.59 682.71 L1209.03 682.71 L1208.47 682.71 L1207.91 682.71 L1207.35 682.71 L1206.8 682.71 L1206.24 682.71 L1205.68 682.71 L1205.12 682.71 L1204.56 682.71 L1204 682.71 L1203.44 682.71 L1202.88 682.71 L1202.32 682.71 L1201.76 682.71 L1201.2 682.71 L1200.64 682.71 L1200.08 682.71 L1199.52 682.71 L1198.97 682.71 L1198.41 682.71 L1197.85 682.71 L1197.29 682.71 L1196.73 682.71 L1196.17 682.71 L1195.61 682.71 L1195.05 682.71 L1194.49 682.71 L1193.93 682.71 L1193.37 682.71 L1192.81 682.71 L1192.25 682.71 L1191.7 682.71 L1191.14 682.71 L1190.58 682.71 L1190.02 682.71 L1189.46 682.71 L1188.9 682.71 L1188.34 682.71 L1187.78 682.71 L1187.22 682.71 L1186.66 682.71 L1186.1 682.71 L1185.54 682.71 L1184.98 682.71 L1184.43 682.71 L1183.87 682.71 L1183.31 682.71 L1182.75 682.71 L1182.19 682.71 L1181.63 682.71 L1181.07 682.71 L1180.51 682.71 L1179.95 682.71 L1179.39 682.71 L1178.83 682.71 L1178.27 682.71 L1177.71 682.71 L1177.15 682.71 L1176.6 682.71 L1176.04 682.71 L1175.48 682.71 L1174.92 682.71 L1174.36 682.71 L1173.8 682.71 L1173.24 682.71 L1172.68 682.71 L1172.12 682.71 L1171.56 682.71 L1171 682.71 L1170.44 682.71 L1169.88 682.71 L1169.33 682.71 L1168.77 682.71 L1168.21 682.71 L1167.65 682.71 L1167.09 682.71 L1166.53 682.71 L1165.97 682.71 L1165.41 682.71 L1164.85 682.71 L1164.29 682.71 L1163.73 682.71 L1163.17 682.71 L1162.61 682.71 L1162.05 682.71 L1161.5 682.71 L1160.94 682.71 L1160.38 682.71 L1159.82 682.71 L1159.26 682.71 L1158.7 682.71 L1158.14 682.71 L1157.58 682.71 L1157.02 682.71 L1156.46 682.71 L1155.9 682.71 L1155.34 682.71 L1154.78 682.71 L1154.23 682.71 L1153.67 682.71 L1153.11 682.71 L1152.55 682.71 L1151.99 682.71 L1151.43 682.71 L1150.87 682.71 L1150.31 682.71 L1149.75 682.71 L1149.19 682.71 L1148.63 682.71 L1148.07 682.71 L1147.51 682.71 L1146.96 682.71 L1146.4 682.71 L1145.84 682.71 L1145.28 682.71 L1144.72 682.71 L1144.16 682.71 L1143.6 682.71 L1143.04 682.71 L1142.48 682.71 L1141.92 682.71 L1141.36 682.71 L1140.8 682.71 L1140.24 682.71 L1139.68 682.71 L1139.13 682.71 L1138.57 682.71 L1138.01 682.71 L1137.45 682.71 L1136.89 682.71 L1136.33 682.71 L1135.77 682.71 L1135.21 682.71 L1134.65 682.71 L1134.09 682.71 L1133.53 682.71 L1132.97 682.71 L1132.41 682.71 L1131.86 682.71 L1131.3 682.71 L1130.74 682.71 L1130.18 682.71 L1129.62 682.71 L1129.06 682.71 L1128.5 682.71 L1127.94 682.71 L1127.38 682.71 L1126.82 682.71 L1126.26 682.71 L1125.7 682.71 L1125.14 682.71 L1124.59 682.71 L1124.03 682.71 L1123.47 682.71 L1122.91 682.71 L1122.35 682.71 L1121.79 682.71 L1121.23 682.71 L1120.67 682.71 L1120.11 682.71 L1119.55 682.71 L1118.99 682.71 L1118.43 682.71 L1117.87 682.71 L1117.31 682.71 L1116.76 682.71 L1116.2 682.71 L1115.64 682.71 L1115.08 682.71 L1114.52 682.71 L1113.96 682.71 L1113.4 682.71 L1112.84 682.71 L1112.28 682.71 L1111.72 682.71 L1111.16 682.71 L1110.6 682.71 L1110.04 682.71 L1109.49 682.71 L1108.93 682.71 L1108.37 682.71 L1107.81 682.71 L1107.25 682.71 L1106.69 682.71 L1106.13 682.71 L1105.57 682.71 L1105.01 682.71 L1104.45 682.71 L1103.89 682.71 L1103.33 682.71 L1102.77 682.71 L1102.22 682.71 L1101.66 682.71 L1101.1 682.71 L1100.54 682.71 L1099.98 682.71 L1099.42 682.71 L1098.86 682.71 L1098.3 682.71 L1097.74 682.71 L1097.18 682.71 L1096.62 682.71 L1096.06 682.71 L1095.5 682.71 L1094.94 682.71 L1094.39 682.71 L1093.83 682.71 L1093.27 682.71 L1092.71 682.71 L1092.15 682.71 L1091.59 682.71 L1091.03 682.71 L1090.47 682.71 L1089.91 682.71 L1089.35 682.71 L1088.79 682.71 L1088.23 682.71 L1087.67 682.71 L1087.12 682.71 L1086.56 682.71 L1086 682.71 L1085.44 682.71 L1084.88 682.71 L1084.32 682.71 L1083.76 682.71 L1083.2 682.71 L1082.64 682.71 L1082.08 682.71 L1081.52 682.71 L1080.96 682.71 L1080.4 682.71 L1079.85 682.71 L1079.29 682.71 L1078.73 682.71 L1078.17 682.71 L1077.61 682.71 L1077.05 682.71 L1076.49 682.71 L1075.93 682.71 L1075.37 682.71 L1074.81 682.71 L1074.25 682.71 L1073.69 682.71 L1073.13 682.71 L1072.57 682.71 L1072.02 682.71 L1071.46 682.71 L1070.9 682.71 L1070.34 682.71 L1069.78 682.71 L1069.22 682.71 L1068.66 682.71 L1068.1 682.71 L1067.54 682.71 L1066.98 682.71 L1066.42 682.71 L1065.86 682.71 L1065.3 682.71 L1064.75 682.71 L1064.19 682.71 L1063.63 682.71 L1063.07 682.71 L1062.51 682.71 L1061.95 682.71 L1061.39 682.71 L1060.83 682.71 L1060.27 682.71 L1059.71 682.71 L1059.15 682.71 L1058.59 682.71 L1058.03 682.71 L1057.48 682.71 L1056.92 682.71 L1056.36 682.71 L1055.8 682.71 L1055.24 682.71 L1054.68 682.71 L1054.12 682.71 L1053.56 682.71 L1053 682.71 L1052.44 682.71 L1051.88 682.71 L1051.32 682.71 L1050.76 682.71 L1050.2 682.71 L1049.65 682.71 L1049.09 682.71 L1048.53 682.71 L1047.97 682.71 L1047.41 682.71 L1046.85 682.71 L1046.29 682.71 L1045.73 682.71 L1045.17 682.71 L1044.61 682.71 L1044.05 682.71 L1043.49 682.71 L1042.93 682.71 L1042.38 682.71 L1041.82 682.71 L1041.26 682.71 L1040.7 682.71 L1040.14 682.71 L1039.58 682.71 L1039.02 682.71 L1038.46 682.71 L1037.9 682.71 L1037.34 682.71 L1036.78 682.71 L1036.22 682.71 L1035.66 682.71 L1035.1 682.71 L1034.55 682.71 L1033.99 682.71 L1033.43 682.71 L1032.87 682.71 L1032.31 682.71 L1031.75 682.71 L1031.19 682.71 L1030.63 682.71 L1030.07 682.71 L1029.51 682.71 L1028.95 682.71 L1028.39 682.71 L1027.83 682.71 L1027.28 682.71 L1026.72 682.71 L1026.16 682.71 L1025.6 682.71 L1025.04 682.71 L1024.48 682.71 L1023.92 682.71 L1023.36 682.71 L1022.8 682.71 L1022.24 682.71 L1021.68 682.71 L1021.12 682.71 L1020.56 682.71 L1020.01 682.71 L1019.45 682.71 L1018.89 682.71 L1018.33 682.71 L1017.77 682.71 L1017.21 682.71 L1016.65 682.71 L1016.09 682.71 L1015.53 682.71 L1014.97 682.71 L1014.41 682.71 L1013.85 682.71 L1013.29 682.71 L1012.73 682.71 L1012.18 682.71 L1011.62 682.71 L1011.06 682.71 L1010.5 682.71 L1009.94 682.71 L1009.38 682.71 L1008.82 682.71 L1008.26 682.71 L1007.7 682.71 L1007.14 682.71 L1006.58 682.71 L1006.02 682.71 L1005.46 682.71 L1004.91 682.71 L1004.35 682.71 L1003.79 682.71 L1003.23 682.71 L1002.67 682.71 L1002.11 682.71 L1001.55 682.71 L1000.99 682.71 L1000.43 682.71 L999.872 682.71 L999.313 682.71 L998.754 682.71 L998.194 682.71 L997.635 682.71 L997.076 682.71 L996.517 682.71 L995.957 682.71 L995.398 682.71 L994.839 682.71 L994.28 682.71 L993.72 682.71 L993.161 682.71 L992.602 682.71 L992.043 682.71 L991.483 682.71 L990.924 682.71 L990.365 682.71 L989.806 682.71 L989.246 682.71 L988.687 682.71 L988.128 682.71 L987.569 682.71 L987.009 682.71 L986.45 682.71 L985.891 682.71 L985.332 682.71 L984.772 682.71 L984.213 682.71 L983.654 682.71 L983.095 682.71 L982.535 682.71 L981.976 682.71 L981.417 682.71 L980.858 682.71 L980.298 682.71 L979.739 682.71 L979.18 682.71 L978.621 682.71 L978.061 682.71 L977.502 682.71 L976.943 682.71 L976.384 682.71 L975.824 682.71 L975.265 682.71 L974.706 682.71 L974.147 682.71 L973.587 682.71 L973.028 682.71 L972.469 682.71 L971.91 682.71 L971.35 682.71 L970.791 682.71 L970.232 682.71 L969.673 682.71 L969.113 682.71 L968.554 682.71 L967.995 682.71 L967.436 682.71 L966.876 682.71 L966.317 682.71 L965.758 682.71 L965.199 682.71 L964.639 682.71 L964.08 682.71 L963.521 682.71 L962.962 682.71 L962.402 682.71 L961.843 682.71 L961.284 682.71 L960.725 682.71 L960.165 682.71 L959.606 682.71 L959.047 682.71 L958.488 682.71 L957.928 682.71 L957.369 682.71 L956.81 682.71 L956.251 682.71 L955.691 682.71 L955.132 682.71 L954.573 682.71 L954.014 682.71 L953.454 682.71 L952.895 682.71 L952.336 682.71 L951.777 682.71 L951.217 682.71 L950.658 682.71 L950.099 682.71 L949.54 682.71 L948.98 682.71 L948.421 682.71 L947.862 682.71 L947.303 682.71 L946.743 682.71 L946.184 682.71 L945.625 682.71 L945.066 682.71 L944.506 682.71 L943.947 682.71 L943.388 682.71 L942.829 682.71 L942.269 682.71 L941.71 682.71 L941.151 682.71 L940.592 682.71 L940.032 682.71 L939.473 682.71 L938.914 682.71 L938.355 682.71 L937.795 682.71 L937.236 682.71 L936.677 682.71 L936.118 682.71 L935.558 682.71 L934.999 682.71 L934.44 682.71 L933.881 682.71 L933.321 682.71 L932.762 682.71 L932.203 682.71 L931.644 682.71 L931.084 682.71 L930.525 682.71 L929.966 682.71 L929.406 682.71 L928.847 682.71 L928.288 682.71 L927.729 682.71 L927.169 682.71 L926.61 682.71 L926.051 682.71 L925.492 682.71 L924.932 682.71 L924.373 682.71 L923.814 682.71 L923.255 682.71 L922.695 682.71 L922.136 682.71 L921.577 682.71 L921.018 682.71 L920.458 682.71 L919.899 682.71 L919.34 682.71 L918.781 682.71 L918.221 682.71 L917.662 682.71 L917.103 682.71 L916.544 682.71 L915.984 682.71 L915.425 682.71 L914.866 682.71 L914.307 682.71 L913.747 682.71 L913.188 682.71 L912.629 682.71 L912.07 682.71 L911.51 682.71 L910.951 682.71 L910.392 682.71 L909.833 682.71 L909.273 682.71 L908.714 682.71 L908.155 682.71 L907.596 682.71 L907.036 682.71 L906.477 682.71 L905.918 682.71 L905.359 682.71 L904.799 682.71 L904.24 682.71 L903.681 682.71 L903.122 682.71 L902.562 682.71 L902.003 682.71 L901.444 682.71 L900.885 682.71 L900.325 682.71 L899.766 682.71 L899.207 682.71 L898.648 682.71 L898.088 682.71 L897.529 682.71 L896.97 682.71 L896.411 682.71 L895.851 682.71 L895.292 682.71 L894.733 682.71 L894.174 682.71 L893.614 682.71 L893.055 682.71 L892.496 682.71 L891.937 682.71 L891.377 682.71 L890.818 682.71 L890.259 682.71 L889.7 682.71 L889.14 682.71 L888.581 682.71 L888.022 682.71 L887.463 682.71 L886.903 682.71 L886.344 682.71 L885.785 682.71 L885.226 682.71 L884.666 682.71 L884.107 682.71 L883.548 682.71 L882.989 682.71 L882.429 682.71 L881.87 682.71 L881.311 682.71 L880.752 682.71 L880.192 682.71 L879.633 682.71 L879.074 682.71 L878.515 682.71 L877.955 682.71 L877.396 682.71 L876.837 682.71 L876.278 682.71 L875.718 682.71 L875.159 682.71 L874.6 682.71 L874.041 682.71 L873.481 682.71 L872.922 682.71 L872.363 682.71 L871.804 682.71 L871.244 682.71 L870.685 682.71 L870.126 682.71 L869.567 682.71 L869.007 682.71 L868.448 682.71 L867.889 682.71 L867.33 682.71 L866.77 682.71 L866.211 682.71 L865.652 682.71 L865.093 682.71 L864.533 682.71 L863.974 682.71 L863.415 682.71 L862.856 682.71 L862.296 682.71 L861.737 682.71 L861.178 682.71 L860.619 682.71 L860.059 682.71 L859.5 682.71 L858.941 682.71 L858.382 682.71 L857.822 682.71 L857.263 682.71 L856.704 682.71 L856.145 682.71 L855.585 682.71 L855.026 682.71 L854.467 682.71 L853.908 682.71 L853.348 682.71 L852.789 682.71 L852.23 682.71 L851.671 682.71 L851.111 682.71 L850.552 682.71 L849.993 682.71 L849.434 682.71 L848.874 682.71 L848.315 682.71 L847.756 682.71 L847.197 682.71 L846.637 682.71 L846.078 682.71 L845.519 682.71 L844.96 682.71 L844.4 682.71 L843.841 682.71 L843.282 682.71 L842.723 682.71 L842.163 682.71 L841.604 682.71 L841.045 682.71 L840.486 682.71 L839.926 682.71 L839.367 682.71 L838.808 682.71 L838.249 682.71 L837.689 682.71 L837.13 682.71 L836.571 682.71 L836.012 682.71 L835.452 682.71 L834.893 682.71 L834.334 682.71 L833.775 682.71 L833.215 682.71 L832.656 682.71 L832.097 682.71 L831.538 682.71 L830.978 682.71 L830.419 682.71 L829.86 682.71 L829.301 682.71 L828.741 682.71 L828.182 682.71 L827.623 682.71 L827.064 682.71 L826.504 682.71 L825.945 682.71 L825.386 682.71 L824.827 682.71 L824.267 682.71 L823.708 682.71 L823.149 682.71 L822.59 682.71 L822.03 682.71 L821.471 682.71 L820.912 682.71 L820.353 682.71 L819.793 682.71 L819.234 682.71 L818.675 682.71 L818.116 682.71 L817.556 682.71 L816.997 682.71 L816.438 682.71 L815.879 682.71 L815.319 682.71 L814.76 682.71 L814.201 682.71 L813.642 682.71 L813.082 682.71 L812.523 682.71 L811.964 682.71 L811.405 682.71 L810.845 682.71 L810.286 682.71 L809.727 682.71 L809.168 682.71 L808.608 682.71 L808.049 682.71 L807.49 682.71 L806.931 682.71 L806.371 682.71 L805.812 682.71 L805.253 682.71 L804.693 682.71 L804.134 682.71 L803.575 682.71 L803.016 682.71 L802.456 682.71 L801.897 682.71 L801.338 682.71 L800.779 682.71 L800.219 682.71 L799.66 682.71 L799.101 682.71 L798.542 682.71 L797.982 682.71 L797.423 682.71 L796.864 682.71 L796.305 682.71 L795.745 682.71 L795.186 682.71 L794.627 682.71 L794.068 682.71 L793.508 682.71 L792.949 682.71 L792.39 682.71 L791.831 682.71 L791.271 682.71 L790.712 682.71 L790.153 682.71 L789.594 682.71 L789.034 682.71 L788.475 682.71 L787.916 682.71 L787.357 682.71 L786.797 682.71 L786.238 682.71 L785.679 682.71 L785.12 682.71 L784.56 682.71 L784.001 682.71 L783.442 682.71 L782.883 682.71 L782.323 682.71 L781.764 682.71 L781.205 682.71 L780.646 682.71 L780.086 682.71 L779.527 682.71 L778.968 682.71 L778.409 682.71 L777.849 682.71 L777.29 682.71 L776.731 682.71 L776.172 682.71 L775.612 682.71 L775.053 682.71 L774.494 682.71 L773.935 682.71 L773.375 682.71 L772.816 682.71 L772.257 682.71 L771.698 682.71 L771.138 682.71 L770.579 682.71 L770.02 682.71 L769.461 682.71 L768.901 682.71 L768.342 682.71 L767.783 682.71 L767.224 682.71 L766.664 682.71 L766.105 682.71 L765.546 682.71 L764.987 682.71 L764.427 682.71 L763.868 682.71 L763.309 682.71 L762.75 682.71 L762.19 682.71 L761.631 682.71 L761.072 682.71 L760.513 682.71 L759.953 682.71 L759.394 682.71 L758.835 682.71 L758.276 682.71 L757.716 682.71 L757.157 682.71 L756.598 682.71 L756.039 682.71 L755.479 682.71 L754.92 682.71 L754.361 682.71 L753.802 682.71 L753.242 682.71 L752.683 682.71 L752.124 682.71 L751.565 682.71 L751.005 682.71 L750.446 682.71 L749.887 682.71 L749.328 682.71 L748.768 682.71 L748.209 682.71 L747.65 682.71 L747.091 682.71 L746.531 682.71 L745.972 682.71 L745.413 682.71 L744.854 682.71 L744.294 682.71 L743.735 682.71 L743.176 682.71 L742.617 682.71 L742.057 682.71 L741.498 682.71 L740.939 682.71 L740.38 682.71 L739.82 682.71 L739.261 682.71 L738.702 682.71 L738.143 682.71 L737.583 682.71 L737.024 682.71 L736.465 682.71 L735.906 682.71 L735.346 682.71 L734.787 682.71 L734.228 682.71 L733.669 682.71 L733.109 682.71 L732.55 682.71 L731.991 682.71 L731.432 682.71 L730.872 682.71 L730.313 682.71 L729.754 682.71 L729.195 682.71 L728.635 682.71 L728.076 682.71 L727.517 682.71 L726.958 682.71 L726.398 682.71 L725.839 682.71 L725.28 682.71 L724.721 682.71 L724.161 682.71 L723.602 682.71 L723.043 682.71 L722.484 682.71 L721.924 682.71 L721.365 682.71 L720.806 682.71 L720.247 682.71  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip503)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.633 720.806,683.633 721.365,683.633 721.924,683.633 722.484,683.633 723.043,683.633 723.602,683.633 724.161,683.633 724.721,683.633 725.28,683.633 725.839,683.633 726.398,683.633 726.958,683.633 727.517,683.633 728.076,683.633 728.635,683.633 729.195,683.633 729.754,683.633 730.313,683.633 730.872,683.633 731.432,683.633 731.991,683.633 732.55,683.633 733.109,683.633 733.669,683.633 734.228,683.633 734.787,683.633 735.346,683.633 735.906,683.633 736.465,683.633 737.024,683.633 737.583,683.633 738.143,683.633 738.702,683.633 739.261,683.633 739.82,683.633 740.38,683.633 740.939,683.633 741.498,683.633 742.057,683.633 742.617,683.633 743.176,683.633 743.735,683.633 744.294,683.633 744.854,683.633 745.413,683.633 745.972,683.633 746.531,683.633 747.091,683.633 747.65,683.633 748.209,683.633 748.768,683.633 749.328,683.633 749.887,683.633 750.446,683.633 751.005,683.633 751.565,683.633 752.124,683.633 752.683,683.633 753.242,683.633 753.802,683.633 754.361,683.633 754.92,683.633 755.479,683.633 756.039,683.633 756.598,683.633 757.157,683.633 757.716,683.633 758.276,683.633 758.835,683.633 759.394,683.633 759.953,683.633 760.513,683.633 761.072,683.633 761.631,683.633 762.19,683.633 762.75,683.633 763.309,683.633 763.868,683.633 764.427,683.633 764.987,683.633 765.546,683.633 766.105,683.633 766.664,683.633 767.224,683.633 767.783,683.633 768.342,683.633 768.901,683.633 769.461,683.633 770.02,683.633 770.579,683.633 771.138,683.633 771.698,683.633 772.257,683.633 772.816,683.633 773.375,683.633 773.935,683.633 774.494,683.633 775.053,683.633 775.612,683.633 776.172,683.633 776.731,683.633 777.29,683.633 777.849,683.633 778.409,683.633 778.968,683.633 779.527,683.633 780.086,683.633 780.646,683.633 781.205,683.633 781.764,683.633 782.323,683.633 782.883,683.633 783.442,683.633 784.001,683.633 784.56,683.633 785.12,683.633 785.679,683.633 786.238,683.633 786.797,683.633 787.357,683.633 787.916,683.633 788.475,683.633 789.034,683.633 789.594,683.633 790.153,683.633 790.712,683.633 791.271,683.633 791.831,683.633 792.39,683.633 792.949,683.633 793.508,683.633 794.068,683.633 794.627,683.633 795.186,683.633 795.745,683.633 796.305,683.633 796.864,683.633 797.423,683.633 797.982,683.633 798.542,683.633 799.101,683.633 799.66,683.633 800.219,683.633 800.779,683.633 801.338,683.633 801.897,683.633 802.456,683.633 803.016,683.633 803.575,683.633 804.134,683.633 804.693,683.633 805.253,683.633 805.812,683.633 806.371,683.633 806.931,683.633 807.49,683.633 808.049,683.633 808.608,683.633 809.168,683.633 809.727,683.633 810.286,683.633 810.845,683.633 811.405,683.633 811.964,683.633 812.523,683.633 813.082,683.633 813.642,683.633 814.201,683.633 814.76,683.633 815.319,683.633 815.879,683.633 816.438,683.633 816.997,683.633 817.556,683.633 818.116,683.633 818.675,683.633 819.234,683.633 819.793,683.633 820.353,683.633 820.912,683.633 821.471,683.633 822.03,683.633 822.59,683.633 823.149,683.633 823.708,683.633 824.267,683.633 824.827,683.633 825.386,683.633 825.945,683.633 826.504,683.633 827.064,683.633 827.623,683.633 828.182,683.633 828.741,683.633 829.301,683.633 829.86,683.633 830.419,683.633 830.978,683.633 831.538,683.633 832.097,683.633 832.656,683.633 833.215,683.633 833.775,683.633 834.334,683.633 834.893,683.633 835.452,683.633 836.012,683.633 836.571,683.633 837.13,683.633 837.689,683.633 838.249,683.633 838.808,683.633 839.367,683.633 839.926,683.633 840.486,683.633 841.045,683.633 841.604,683.633 842.163,683.633 842.723,683.633 843.282,683.633 843.841,683.633 844.4,683.633 844.96,683.633 845.519,683.633 846.078,683.633 846.637,683.633 847.197,683.633 847.756,683.633 848.315,683.633 848.874,683.633 849.434,683.633 849.993,683.633 850.552,683.633 851.111,683.633 851.671,683.633 852.23,683.633 852.789,683.633 853.348,683.633 853.908,683.633 854.467,683.633 855.026,683.633 855.585,683.633 856.145,683.633 856.704,683.633 857.263,683.633 857.822,683.633 858.382,683.633 858.941,683.633 859.5,683.633 860.059,683.633 860.619,683.633 861.178,683.633 861.737,683.633 862.296,683.633 862.856,683.633 863.415,683.633 863.974,683.633 864.533,683.633 865.093,683.633 865.652,683.633 866.211,683.633 866.77,683.633 867.33,683.633 867.889,683.633 868.448,683.633 869.007,683.633 869.567,683.633 870.126,683.633 870.685,683.633 871.244,683.633 871.804,683.633 872.363,683.633 872.922,683.633 873.481,683.633 874.041,683.633 874.6,683.633 875.159,683.633 875.718,683.633 876.278,683.633 876.837,683.633 877.396,683.633 877.955,683.633 878.515,683.633 879.074,683.633 879.633,683.633 880.192,683.633 880.752,683.633 881.311,683.633 881.87,683.633 882.429,683.633 882.989,683.633 883.548,683.633 884.107,683.633 884.666,683.633 885.226,683.633 885.785,683.633 886.344,683.633 886.903,683.633 887.463,683.633 888.022,683.633 888.581,683.633 889.14,683.633 889.7,683.633 890.259,683.633 890.818,683.633 891.377,683.633 891.937,683.633 892.496,683.633 893.055,683.633 893.614,683.633 894.174,683.633 894.733,683.633 895.292,683.633 895.851,683.633 896.411,683.633 896.97,683.633 897.529,683.633 898.088,683.633 898.648,683.633 899.207,683.633 899.766,683.633 900.325,683.633 900.885,683.633 901.444,683.633 902.003,683.633 902.562,683.633 903.122,683.633 903.681,683.633 904.24,683.633 904.799,683.633 905.359,683.633 905.918,683.633 906.477,683.633 907.036,683.633 907.596,683.633 908.155,683.633 908.714,683.633 909.273,683.633 909.833,683.633 910.392,683.633 910.951,683.633 911.51,683.633 912.07,683.633 912.629,683.633 913.188,683.633 913.747,683.633 914.307,683.633 914.866,683.633 915.425,683.633 915.984,683.633 916.544,683.633 917.103,683.633 917.662,683.633 918.221,683.633 918.781,683.633 919.34,683.633 919.899,683.633 920.458,683.633 921.018,683.633 921.577,683.633 922.136,683.633 922.695,683.633 923.255,683.633 923.814,683.633 924.373,683.633 924.932,683.633 925.492,683.633 926.051,683.633 926.61,683.633 927.169,683.633 927.729,683.633 928.288,683.633 928.847,683.633 929.406,683.633 929.966,683.633 930.525,683.633 931.084,683.633 931.644,683.633 932.203,683.633 932.762,683.633 933.321,683.633 933.881,683.633 934.44,683.633 934.999,683.633 935.558,683.633 936.118,683.633 936.677,683.633 937.236,683.633 937.795,683.633 938.355,683.633 938.914,683.633 939.473,683.633 940.032,683.633 940.592,683.633 941.151,683.633 941.71,683.633 942.269,683.633 942.829,683.633 943.388,683.633 943.947,683.633 944.506,683.633 945.066,683.633 945.625,683.633 946.184,683.633 946.743,683.633 947.303,683.633 947.862,683.633 948.421,683.633 948.98,683.633 949.54,683.633 950.099,683.633 950.658,683.633 951.217,683.633 951.777,683.633 952.336,683.633 952.895,683.633 953.454,683.633 954.014,683.633 954.573,683.633 955.132,683.633 955.691,683.633 956.251,683.633 956.81,683.633 957.369,683.633 957.928,683.633 958.488,683.633 959.047,683.633 959.606,683.633 960.165,683.633 960.725,683.633 961.284,683.633 961.843,683.633 962.402,683.633 962.962,683.633 963.521,683.633 964.08,683.633 964.639,683.633 965.199,683.633 965.758,683.633 966.317,683.633 966.876,683.633 967.436,683.633 967.995,683.633 968.554,683.633 969.113,683.633 969.673,683.633 970.232,683.633 970.791,683.633 971.35,683.633 971.91,683.633 972.469,683.633 973.028,683.633 973.587,683.633 974.147,683.633 974.706,683.633 975.265,683.633 975.824,683.633 976.384,683.633 976.943,683.633 977.502,683.633 978.061,683.633 978.621,683.633 979.18,683.633 979.739,683.633 980.298,683.633 980.858,683.633 981.417,683.633 981.976,683.633 982.535,683.633 983.095,683.633 983.654,683.633 984.213,683.633 984.772,683.633 985.332,683.633 985.891,683.633 986.45,683.633 987.009,683.633 987.569,683.633 988.128,683.633 988.687,683.633 989.246,683.633 989.806,683.633 990.365,683.633 990.924,683.633 991.483,683.633 992.043,683.633 992.602,683.633 993.161,683.633 993.72,683.633 994.28,683.633 994.839,683.633 995.398,683.633 995.957,683.633 996.517,683.633 997.076,683.633 997.635,683.633 998.194,683.633 998.754,683.633 999.313,683.633 999.872,683.633 1000.43,683.633 1000.99,683.633 1001.55,683.633 1002.11,683.633 1002.67,683.633 1003.23,683.633 1003.79,683.633 1004.35,683.633 1004.91,683.633 1005.46,683.633 1006.02,683.633 1006.58,683.633 1007.14,683.633 1007.7,683.633 1008.26,683.633 1008.82,683.633 1009.38,683.633 1009.94,683.633 1010.5,683.633 1011.06,683.633 1011.62,683.633 1012.18,683.633 1012.73,683.633 1013.29,683.633 1013.85,683.633 1014.41,683.633 1014.97,683.633 1015.53,683.633 1016.09,683.633 1016.65,683.633 1017.21,683.633 1017.77,683.633 1018.33,683.633 1018.89,683.633 1019.45,683.633 1020.01,683.633 1020.56,683.633 1021.12,683.633 1021.68,683.633 1022.24,683.633 1022.8,683.633 1023.36,683.633 1023.92,683.633 1024.48,683.633 1025.04,683.633 1025.6,683.633 1026.16,683.633 1026.72,683.633 1027.28,683.633 1027.83,683.633 1028.39,683.633 1028.95,683.633 1029.51,683.633 1030.07,683.633 1030.63,683.633 1031.19,683.633 1031.75,683.633 1032.31,683.633 1032.87,683.633 1033.43,683.633 1033.99,683.633 1034.55,683.633 1035.1,683.633 1035.66,683.633 1036.22,683.633 1036.78,683.633 1037.34,683.633 1037.9,683.633 1038.46,683.633 1039.02,683.633 1039.58,683.633 1040.14,683.633 1040.7,683.633 1041.26,683.633 1041.82,683.633 1042.38,683.633 1042.93,683.633 1043.49,683.633 1044.05,683.633 1044.61,683.633 1045.17,683.633 1045.73,683.633 1046.29,683.633 1046.85,683.633 1047.41,683.633 1047.97,683.633 1048.53,683.633 1049.09,683.633 1049.65,683.633 1050.2,683.633 1050.76,683.633 1051.32,683.633 1051.88,683.633 1052.44,683.633 1053,683.633 1053.56,683.633 1054.12,683.633 1054.68,683.633 1055.24,683.633 1055.8,683.633 1056.36,683.633 1056.92,683.633 1057.48,683.633 1058.03,683.633 1058.59,683.633 1059.15,683.633 1059.71,683.633 1060.27,683.633 1060.83,683.633 1061.39,683.633 1061.95,683.633 1062.51,683.633 1063.07,683.633 1063.63,683.633 1064.19,683.633 1064.75,683.633 1065.3,683.633 1065.86,683.633 1066.42,683.633 1066.98,683.633 1067.54,683.633 1068.1,683.633 1068.66,683.633 1069.22,683.633 1069.78,683.633 1070.34,683.633 1070.9,683.633 1071.46,683.633 1072.02,683.633 1072.57,683.633 1073.13,683.633 1073.69,683.633 1074.25,683.633 1074.81,683.633 1075.37,683.633 1075.93,683.633 1076.49,683.633 1077.05,683.633 1077.61,683.633 1078.17,683.633 1078.73,683.633 1079.29,683.633 1079.85,683.633 1080.4,683.633 1080.96,683.633 1081.52,683.633 1082.08,683.633 1082.64,683.633 1083.2,683.633 1083.76,683.633 1084.32,683.633 1084.88,683.633 1085.44,683.633 1086,683.633 1086.56,683.633 1087.12,683.633 1087.67,683.633 1088.23,683.633 1088.79,683.633 1089.35,683.633 1089.91,683.633 1090.47,683.633 1091.03,683.633 1091.59,683.633 1092.15,683.633 1092.71,683.633 1093.27,683.633 1093.83,683.633 1094.39,683.633 1094.94,683.633 1095.5,683.633 1096.06,683.633 1096.62,683.633 1097.18,683.633 1097.74,683.633 1098.3,683.633 1098.86,683.633 1099.42,683.633 1099.98,683.633 1100.54,683.633 1101.1,683.633 1101.66,683.633 1102.22,683.633 1102.77,683.633 1103.33,683.633 1103.89,683.633 1104.45,683.633 1105.01,683.633 1105.57,683.633 1106.13,683.633 1106.69,683.633 1107.25,683.633 1107.81,683.633 1108.37,683.633 1108.93,683.633 1109.49,683.633 1110.04,683.633 1110.6,683.633 1111.16,683.633 1111.72,683.633 1112.28,683.633 1112.84,683.633 1113.4,683.633 1113.96,683.633 1114.52,683.633 1115.08,683.633 1115.64,683.633 1116.2,683.633 1116.76,683.633 1117.31,683.633 1117.87,683.633 1118.43,683.633 1118.99,683.633 1119.55,683.633 1120.11,683.633 1120.67,683.633 1121.23,683.633 1121.79,683.633 1122.35,683.633 1122.91,683.633 1123.47,683.633 1124.03,683.633 1124.59,683.633 1125.14,683.633 1125.7,683.633 1126.26,683.633 1126.82,683.633 1127.38,683.633 1127.94,683.633 1128.5,683.633 1129.06,683.633 1129.62,683.633 1130.18,683.633 1130.74,683.633 1131.3,683.633 1131.86,683.633 1132.41,683.633 1132.97,683.633 1133.53,683.633 1134.09,683.633 1134.65,683.633 1135.21,683.633 1135.77,683.633 1136.33,683.633 1136.89,683.633 1137.45,683.633 1138.01,683.633 1138.57,683.633 1139.13,683.633 1139.68,683.633 1140.24,683.633 1140.8,683.633 1141.36,683.633 1141.92,683.633 1142.48,683.633 1143.04,683.633 1143.6,683.633 1144.16,683.633 1144.72,683.633 1145.28,683.633 1145.84,683.633 1146.4,683.633 1146.96,683.633 1147.51,683.633 1148.07,683.633 1148.63,683.633 1149.19,683.633 1149.75,683.633 1150.31,683.633 1150.87,683.633 1151.43,683.633 1151.99,683.633 1152.55,683.633 1153.11,683.633 1153.67,683.633 1154.23,683.633 1154.78,683.633 1155.34,683.633 1155.9,683.633 1156.46,683.633 1157.02,683.633 1157.58,683.633 1158.14,683.633 1158.7,683.633 1159.26,683.633 1159.82,683.633 1160.38,683.633 1160.94,683.633 1161.5,683.633 1162.05,683.633 1162.61,683.633 1163.17,683.633 1163.73,683.633 1164.29,683.633 1164.85,683.633 1165.41,683.633 1165.97,683.633 1166.53,683.633 1167.09,683.633 1167.65,683.633 1168.21,683.633 1168.77,683.633 1169.33,683.633 1169.88,683.633 1170.44,683.633 1171,683.633 1171.56,683.633 1172.12,683.633 1172.68,683.633 1173.24,683.633 1173.8,683.633 1174.36,683.633 1174.92,683.633 1175.48,683.633 1176.04,683.633 1176.6,683.633 1177.15,683.633 1177.71,683.633 1178.27,683.633 1178.83,683.633 1179.39,683.633 1179.95,683.633 1180.51,683.633 1181.07,683.633 1181.63,683.633 1182.19,683.633 1182.75,683.633 1183.31,683.633 1183.87,683.633 1184.43,683.633 1184.98,683.633 1185.54,683.633 1186.1,683.633 1186.66,683.633 1187.22,683.633 1187.78,683.633 1188.34,683.633 1188.9,683.633 1189.46,683.633 1190.02,683.633 1190.58,683.633 1191.14,683.633 1191.7,683.633 1192.25,683.633 1192.81,683.633 1193.37,683.633 1193.93,683.633 1194.49,683.633 1195.05,683.633 1195.61,683.633 1196.17,683.633 1196.73,683.633 1197.29,683.633 1197.85,683.633 1198.41,683.633 1198.97,683.633 1199.52,683.633 1200.08,683.633 1200.64,683.633 1201.2,683.633 1201.76,683.633 1202.32,683.633 1202.88,683.633 1203.44,683.633 1204,683.633 1204.56,683.633 1205.12,683.633 1205.68,683.633 1206.24,683.633 1206.8,683.633 1207.35,683.633 1207.91,683.633 1208.47,683.633 1209.03,683.633 1209.59,683.633 1210.15,683.633 1210.71,683.633 1211.27,683.633 1211.83,683.633 1212.39,683.633 1212.95,683.633 1213.51,683.633 1214.07,683.633 1214.62,683.633 1215.18,683.633 1215.74,683.633 1216.3,683.633 1216.86,683.633 1217.42,683.633 1217.98,683.633 1218.54,683.633 1219.1,683.633 1219.66,683.633 1220.22,683.633 1220.78,683.633 1221.34,683.633 1221.89,683.633 1222.45,683.633 1223.01,683.633 1223.57,683.633 1224.13,683.633 1224.69,683.633 1225.25,683.633 1225.81,683.633 1226.37,683.633 1226.93,683.633 1227.49,683.633 1228.05,683.633 1228.61,683.633 1229.17,683.633 1229.72,683.633 1230.28,683.633 1230.84,683.633 1231.4,683.633 1231.96,683.633 1232.52,683.633 1233.08,683.633 1233.64,683.633 1234.2,683.633 1234.76,683.633 1235.32,683.633 1235.88,683.633 1236.44,683.633 1236.99,683.633 1237.55,683.633 1238.11,683.633 1238.67,683.633 1239.23,683.633 1239.79,683.633 1240.35,683.633 1240.91,683.633 1241.47,683.633 1242.03,683.633 1242.59,683.633 1243.15,683.633 1243.71,683.633 1244.26,683.633 1244.82,683.633 1245.38,683.633 1245.94,683.633 1246.5,683.633 1247.06,683.633 1247.62,683.633 1248.18,683.633 1248.74,683.633 1249.3,683.633 1249.86,683.633 1250.42,683.633 1250.98,683.633 1251.54,683.633 1252.09,683.633 1252.65,683.633 1253.21,683.633 1253.77,683.633 1254.33,683.633 1254.89,683.633 1255.45,683.633 1256.01,683.633 1256.57,683.633 1257.13,683.633 1257.69,683.633 1258.25,683.633 1258.81,683.633 1259.36,683.633 1259.92,683.633 1260.48,683.633 1261.04,683.633 1261.6,683.633 1262.16,683.633 1262.72,683.633 1263.28,683.633 1263.84,683.633 1264.4,683.633 1264.96,683.633 1265.52,683.633 1266.08,683.633 1266.63,683.633 1267.19,683.633 1267.75,683.633 1268.31,683.633 1268.87,683.633 1269.43,683.633 1269.99,683.633 1270.55,683.633 1271.11,683.633 1271.67,683.633 1272.23,683.633 1272.79,683.633 1273.35,683.633 1273.91,683.633 1274.46,683.633 1275.02,683.633 1275.58,683.633 1276.14,683.633 1276.7,683.633 1277.26,683.633 1277.82,683.633 1278.38,683.633 1278.94,683.633 1279.5,683.633 1280.06,683.633 1280.62,683.633 1281.18,683.633 1281.73,683.633 1282.29,683.633 1282.85,683.633 1283.41,683.633 1283.97,683.633 1284.53,683.633 1285.09,683.633 1285.65,683.633 1286.21,683.633 1286.77,683.633 1287.33,683.633 1287.89,683.633 1288.45,683.633 1289,683.633 1289.56,683.633 1290.12,683.633 1290.68,683.633 1291.24,683.633 1291.8,683.633 1292.36,683.633 1292.92,683.633 1293.48,683.633 1294.04,683.633 1294.6,683.633 1295.16,683.633 1295.72,683.633 1296.28,683.633 1296.83,683.633 1297.39,683.633 1297.95,683.633 1298.51,683.633 1299.07,683.633 1299.63,683.633 1300.19,683.633 1300.75,683.633 1301.31,683.633 1301.87,683.633 1302.43,683.633 1302.99,683.633 1303.55,683.633 1304.1,683.633 1304.66,683.633 1305.22,683.633 1305.78,683.633 1306.34,683.633 1306.9,683.633 1307.46,683.633 1308.02,683.633 1308.58,683.633 1309.14,683.633 1309.7,683.633 1310.26,683.633 1310.82,683.633 1311.38,683.633 1311.93,683.633 1312.49,683.633 1313.05,683.633 1313.61,683.633 1314.17,683.633 1314.73,683.633 1315.29,683.633 1315.85,683.633 1316.41,683.633 1316.97,683.633 1317.53,683.633 1318.09,683.633 1318.65,683.633 1319.2,683.633 1319.76,683.633 1320.32,683.633 1320.88,683.633 1321.44,683.633 1322,683.633 1322.56,683.633 1323.12,683.633 1323.68,683.633 1324.24,683.633 1324.8,683.633 1325.36,683.633 1325.92,683.633 1326.47,683.633 1327.03,683.633 1327.59,683.633 1328.15,683.633 1328.71,683.633 1329.27,683.633 1329.83,683.633 1330.39,683.633 1330.95,683.633 1331.51,683.633 1332.07,683.633 1332.63,683.633 1333.19,683.633 1333.75,683.633 1334.3,683.633 1334.86,683.633 1335.42,683.633 1335.98,683.633 1336.54,683.633 1337.1,683.633 1337.66,683.633 1338.22,683.633 1338.78,683.633 1339.34,683.633 1339.9,683.633 1340.46,683.633 1341.02,683.633 1341.57,683.633 1342.13,683.633 1342.69,683.633 1343.25,683.633 1343.81,683.633 1344.37,683.633 1344.93,683.633 1345.49,683.633 1346.05,683.633 1346.61,683.633 1347.17,683.633 1347.73,683.633 1348.29,683.633 1348.84,683.633 1349.4,683.633 1349.96,683.633 1350.52,683.633 1351.08,683.633 1351.64,683.633 1352.2,683.633 1352.76,683.633 1353.32,683.633 1353.88,683.633 1354.44,683.633 1355,683.633 1355.56,683.633 1356.12,683.633 1356.67,683.633 1357.23,683.633 1357.79,683.633 1358.35,683.633 1358.91,683.633 1359.47,683.633 1360.03,683.633 1360.59,683.633 1361.15,683.633 1361.71,683.633 1362.27,683.633 1362.83,683.633 1363.39,683.633 1363.94,683.633 1364.5,683.633 1365.06,683.633 1365.62,683.633 1366.18,683.633 1366.74,683.633 1367.3,683.633 1367.86,683.633 1368.42,683.633 1368.98,683.633 1369.54,683.633 1370.1,683.633 1370.66,683.633 1371.21,683.633 1371.77,683.633 1372.33,683.633 1372.89,683.633 1373.45,683.633 1374.01,683.633 1374.57,683.633 1375.13,683.633 1375.69,683.633 1376.25,683.633 1376.81,683.633 1377.37,683.633 1377.93,683.633 1378.49,683.633 1379.04,683.633 1379.6,683.633 1380.16,683.633 1380.72,683.633 1381.28,683.633 1381.84,683.633 1382.4,683.633 1382.96,683.633 1383.52,683.633 1384.08,683.633 1384.64,683.633 1385.2,683.633 1385.76,683.633 1386.31,683.633 1386.87,683.633 1387.43,683.633 1387.99,683.633 1388.55,683.633 1389.11,683.633 1389.67,683.633 1390.23,683.633 1390.79,683.633 1391.35,683.633 1391.91,683.633 1392.47,683.633 1393.03,683.633 1393.58,683.633 1394.14,683.633 1394.7,683.633 1395.26,683.633 1395.82,683.633 1396.38,683.633 1396.94,683.633 1397.5,683.633 1398.06,683.633 1398.62,683.633 1399.18,683.633 1399.74,683.633 1400.3,683.633 1400.86,683.633 1401.41,683.633 1401.97,683.633 1402.53,683.633 1403.09,683.633 1403.65,683.633 1404.21,683.633 1404.77,683.633 1405.33,683.633 1405.89,683.633 1406.45,683.633 1407.01,683.633 1407.57,683.633 1408.13,683.633 1408.68,683.633 1409.24,683.633 1409.8,683.633 1410.36,683.633 1410.92,683.633 1411.48,683.633 1412.04,683.633 1412.6,683.633 1413.16,683.633 1413.72,683.633 1414.28,683.633 1414.84,683.633 1415.4,683.633 1415.95,683.633 1416.51,683.633 1417.07,683.633 1417.63,683.633 1418.19,683.633 1418.75,683.633 1419.31,683.633 1419.87,683.633 1420.43,683.633 1420.99,683.633 1421.55,683.633 1422.11,683.633 1422.67,683.633 1423.23,683.633 1423.78,683.633 1424.34,683.633 1424.9,683.633 1425.46,683.633 1426.02,683.633 1426.58,683.633 1427.14,683.633 1427.7,683.633 1428.26,683.633 1428.82,683.633 1429.38,683.633 1429.94,683.633 1430.5,683.633 1431.05,683.633 1431.61,683.633 1432.17,683.633 1432.73,683.633 1433.29,683.633 1433.85,683.633 1434.41,683.633 1434.97,683.633 1435.53,683.633 1436.09,683.633 1436.65,683.633 1437.21,683.633 1437.77,683.633 1438.33,683.633 1438.88,683.633 1439.44,683.633 1440,683.633 1440.56,683.633 1441.12,683.633 1441.68,683.633 1442.24,683.633 1442.8,683.633 1443.36,683.633 1443.92,683.633 1444.48,683.633 1445.04,683.633 1445.6,683.633 1446.15,683.633 1446.71,683.633 1447.27,683.633 1447.83,683.633 1448.39,683.633 1448.95,683.633 1449.51,683.633 1450.07,683.633 1450.63,683.633 1451.19,683.633 1451.75,683.633 1452.31,683.633 1452.87,683.633 1453.42,683.633 1453.98,683.633 1454.54,683.633 1455.1,683.633 1455.66,683.633 1456.22,683.633 1456.78,683.633 1457.34,683.633 1457.9,683.633 1458.46,683.633 1459.02,683.633 1459.58,683.633 1460.14,683.633 1460.7,683.633 1461.25,683.633 1461.81,683.633 1462.37,683.633 1462.93,683.633 1463.49,683.633 1464.05,683.633 1464.61,683.633 1465.17,683.633 1465.73,683.633 1466.29,683.633 1466.85,683.633 1467.41,683.633 1467.97,683.633 1468.52,683.633 1469.08,683.633 1469.64,683.633 1470.2,683.633 1470.76,683.633 1471.32,683.633 1471.88,683.633 1472.44,683.633 1473,683.633 1473.56,683.633 1474.12,683.633 1474.68,683.633 1475.24,683.633 1475.79,683.633 1476.35,683.633 1476.91,683.633 1477.47,683.633 1478.03,683.633 1478.59,683.633 1479.15,683.633 1479.71,683.633 1480.27,683.633 1480.83,683.633 1481.39,683.633 1481.95,683.633 1482.51,683.633 1483.07,683.633 1483.62,683.633 1484.18,683.633 1484.74,683.633 1485.3,683.633 1485.86,683.633 1486.42,683.633 1486.98,683.633 1487.54,683.633 1488.1,683.633 1488.66,683.633 1489.22,683.633 1489.78,683.633 1490.34,683.633 1490.89,683.633 1491.45,683.633 1492.01,683.633 1492.57,683.633 1493.13,683.633 1493.69,683.633 1494.25,683.633 1494.81,683.633 1495.37,683.633 1495.93,683.633 1496.49,683.633 1497.05,683.633 1497.61,683.633 1498.16,683.633 1498.72,683.633 1499.28,683.633 1499.84,683.633 1500.4,683.633 1500.96,683.633 1501.52,683.633 1502.08,683.633 1502.64,683.633 1503.2,683.633 1503.76,683.633 1504.32,683.633 1504.88,683.633 1505.44,683.633 1505.99,683.633 1506.55,683.633 1507.11,683.633 1507.67,683.633 1508.23,683.633 1508.79,683.633 1509.35,683.633 1509.91,683.633 1510.47,683.633 1511.03,683.633 1511.59,683.633 1512.15,683.633 1512.71,683.633 1513.26,683.633 1513.82,683.633 1514.38,683.633 1514.94,683.633 1515.5,683.633 1516.06,683.633 1516.62,683.633 1517.18,683.633 1517.74,683.633 1518.3,683.633 1518.86,683.633 1519.42,683.633 1519.98,683.633 1520.53,683.633 1521.09,683.633 1521.65,683.633 1522.21,683.633 1522.77,683.633 1523.33,683.633 1523.89,683.633 1524.45,683.633 1525.01,683.633 1525.57,683.633 1526.13,683.633 1526.69,683.633 1527.25,683.633 1527.81,683.633 1528.36,683.633 1528.92,683.633 1529.48,683.633 1530.04,683.633 1530.6,683.633 1531.16,683.633 1531.72,683.633 1532.28,683.633 1532.84,683.633 1533.4,683.633 1533.96,683.633 1534.52,683.633 1535.08,683.633 1535.63,683.633 1536.19,683.633 1536.75,683.633 1537.31,683.633 1537.87,683.633 1538.43,683.633 1538.99,683.633 1539.55,683.633 1540.11,683.633 1540.67,683.633 1541.23,683.633 1541.79,683.633 1542.35,683.633 1542.9,683.633 1543.46,683.633 1544.02,683.633 1544.58,683.633 1545.14,683.633 1545.7,683.633 1546.26,683.633 1546.82,683.633 1547.38,683.633 1547.94,683.633 1548.5,683.633 1549.06,683.633 1549.62,683.633 1550.18,683.633 1550.73,683.633 1551.29,683.633 1551.85,683.633 1552.41,683.633 1552.97,683.633 1553.53,683.633 1554.09,683.633 1554.65,683.633 1555.21,683.633 1555.77,683.633 1556.33,683.633 1556.89,683.633 1557.45,683.633 1558,683.633 1558.56,683.633 1559.12,683.633 1559.68,683.633 1560.24,683.633 1560.8,683.633 1561.36,683.633 1561.92,683.633 1562.48,683.633 1563.04,683.633 1563.6,683.633 1564.16,683.633 1564.72,683.633 1565.28,683.633 1565.83,683.633 1566.39,683.633 1566.95,683.633 1567.51,683.633 1568.07,683.633 1568.63,683.633 1569.19,683.633 1569.75,683.633 1570.31,683.633 1570.87,683.633 1571.43,683.633 1571.99,683.633 1572.55,683.633 1573.1,683.633 1573.66,683.633 1574.22,683.633 1574.78,683.633 1575.34,683.633 1575.9,683.633 1576.46,683.633 1577.02,683.633 1577.58,683.633 1578.14,683.633 1578.7,683.633 1579.26,683.633 1579.82,683.633 1580.37,683.633 1580.93,683.633 1581.49,683.633 1582.05,683.633 1582.61,683.633 1583.17,683.633 1583.73,683.633 1584.29,683.633 1584.85,683.633 1585.41,683.633 1585.97,683.633 1586.53,683.633 1587.09,683.633 1587.65,683.633 1588.2,683.633 1588.76,683.633 1589.32,683.633 1589.88,683.633 1590.44,683.633 1591,683.633 1591.56,683.633 1592.12,683.633 1592.68,683.633 1593.24,683.633 1593.8,683.633 1594.36,683.633 1594.92,683.633 1595.47,683.633 1596.03,683.633 1596.59,683.633 1597.15,683.633 1597.71,683.633 1598.27,683.633 1598.83,683.633 1599.39,683.633 1599.95,683.633 1600.51,683.633 1601.07,683.633 1601.63,683.633 1602.19,683.633 1602.74,683.633 1603.3,683.633 1603.86,683.633 1604.42,683.633 1604.98,683.633 1605.54,683.633 1606.1,683.633 1606.66,683.633 1607.22,683.633 1607.78,683.633 1608.34,683.633 1608.9,683.633 1609.46,683.633 1610.02,683.633 1610.57,683.633 1611.13,683.633 1611.69,683.633 1612.25,683.633 1612.81,683.633 1613.37,683.633 1613.93,683.633 1614.49,683.633 1615.05,683.633 1615.61,683.633 1616.17,683.633 1616.73,683.633 1617.29,683.633 1617.84,683.633 1618.4,683.633 1618.96,683.633 1619.52,683.633 1620.08,683.633 1620.64,683.633 1621.2,683.633 1621.76,683.633 1622.32,683.633 1622.88,683.633 1623.44,683.633 1624,683.633 1624.56,683.633 1625.11,683.633 1625.67,683.633 1626.23,683.633 1626.79,683.633 1627.35,683.633 1627.91,683.633 1628.47,683.633 1629.03,683.633 1629.59,683.633 1630.15,683.633 1630.71,683.633 1631.27,683.633 1631.83,683.633 1632.39,683.633 1632.94,683.633 1633.5,683.633 1634.06,683.633 1634.62,683.633 1635.18,683.633 1635.74,683.633 1636.3,683.633 1636.86,683.633 1637.42,683.633 1637.98,683.633 1638.54,683.633 1639.1,683.633 1639.66,683.633 1640.21,683.633 1640.77,683.633 1641.33,683.633 1641.89,683.633 1642.45,683.633 1643.01,683.633 1643.57,683.633 1644.13,683.633 1644.69,683.633 1645.25,683.633 1645.81,683.633 1646.37,683.633 1646.93,683.633 1647.48,683.633 1648.04,683.633 1648.6,683.633 1649.16,683.633 1649.72,683.633 1650.28,683.633 1650.84,683.633 1651.4,683.633 1651.96,683.633 1652.52,683.633 1653.08,683.633 1653.64,683.633 1654.2,683.633 1654.76,683.633 1655.31,683.633 1655.87,683.633 1656.43,683.633 1656.99,683.633 1657.55,683.633 1658.11,683.633 1658.67,683.633 1659.23,683.633 1659.79,683.633 1660.35,683.633 1660.91,683.633 1661.47,683.633 1662.03,683.633 1662.58,683.633 1663.14,683.633 1663.7,683.633 1664.26,683.633 1664.82,683.633 1665.38,683.633 1665.94,683.633 1666.5,683.633 1667.06,683.633 1667.62,683.633 1668.18,683.633 1668.74,683.633 1669.3,683.633 1669.85,683.633 1670.41,683.633 1670.97,683.633 1671.53,683.633 1672.09,683.633 1672.65,683.633 1673.21,683.633 1673.77,683.633 1674.33,683.633 1674.89,683.633 1675.45,683.633 1676.01,683.633 1676.57,683.633 1677.13,683.633 1677.68,683.633 1678.24,683.633 1678.8,683.633 1679.36,683.633 1679.92,683.633 1680.48,683.633 1681.04,683.633 1681.6,683.633 1682.16,683.633 1682.72,683.633 1683.28,683.633 1683.84,683.633 1684.4,683.633 1684.95,683.633 1685.51,683.633 1686.07,683.633 1686.63,683.633 1687.19,683.633 1687.75,683.633 1688.31,683.633 1688.87,683.633 1689.43,683.633 1689.99,683.633 1690.55,683.633 1691.11,683.633 1691.67,683.633 1692.23,683.633 1692.78,683.633 1693.34,683.633 1693.9,683.633 1694.46,683.633 1695.02,683.633 1695.58,683.633 1696.14,683.633 1696.7,683.633 1697.26,683.633 1697.82,683.633 1698.38,683.633 1698.94,683.633 1699.5,683.633 1700.05,683.633 1700.61,683.633 1701.17,683.633 1701.73,683.633 1702.29,683.633 1702.85,683.633 1703.41,683.633 1703.97,683.633 1704.53,683.633 1705.09,683.633 1705.65,683.633 1706.21,683.633 1706.77,683.633 1707.32,683.633 1707.88,683.633 1708.44,683.633 1709,683.633 1709.56,683.633 1710.12,683.633 1710.68,683.633 1711.24,683.633 1711.8,683.633 1712.36,683.633 1712.92,683.633 1713.48,683.633 1714.04,683.633 1714.6,683.633 1715.15,683.633 1715.71,683.633 1716.27,683.633 1716.83,683.633 1717.39,683.633 1717.95,683.633 1718.51,683.633 1719.07,683.633 1719.63,683.633 1720.19,683.633 1720.75,683.633 1721.31,683.633 1721.87,683.633 1722.42,683.633 1722.98,683.633 1723.54,683.633 1724.1,683.633 1724.66,683.633 1725.22,683.633 1725.78,683.633 1726.34,683.633 1726.9,683.633 1727.46,683.633 1728.02,683.633 1728.58,683.633 1729.14,683.633 1729.69,683.633 1730.25,683.633 1730.81,683.633 1731.37,683.633 1731.93,683.633 1732.49,683.633 1733.05,683.633 1733.61,683.633 1734.17,683.633 1734.73,683.633 1735.29,683.633 1735.85,683.633 1736.41,683.633 1736.97,683.633 1737.52,683.633 1738.08,683.633 1738.64,683.633 1739.2,683.633 1739.76,683.633 1740.32,683.633 1740.88,683.633 1741.44,683.633 1742,683.633 1742.56,683.633 1743.12,683.633 1743.68,683.633 1744.24,683.633 1744.79,683.633 1745.35,683.633 1745.91,683.633 1746.47,683.633 1747.03,683.633 1747.59,683.633 1748.15,683.633 1748.71,683.633 1749.27,683.633 1749.83,683.633 1750.39,683.633 1750.95,683.633 1751.51,683.633 1752.06,683.633 1752.62,683.633 1753.18,683.633 1753.74,683.633 1754.3,683.633 1754.86,683.633 1755.42,683.633 1755.98,683.633 1756.54,683.633 1757.1,683.633 1757.66,683.633 1758.22,683.633 1758.78,683.633 1759.34,683.633 1759.89,683.633 1760.45,683.633 1761.01,683.633 1761.57,683.633 1762.13,683.633 1762.69,683.633 1763.25,683.633 1763.81,683.633 1764.37,683.633 1764.93,683.633 1765.49,683.633 1766.05,683.633 1766.61,683.633 1767.16,683.633 1767.72,683.633 1768.28,683.633 1768.84,683.633 1769.4,683.633 1769.96,683.633 1770.52,683.633 1771.08,683.633 1771.64,683.633 1772.2,683.633 1772.76,683.633 1773.32,683.633 1773.88,683.633 1774.43,683.633 1774.99,683.633 1775.55,683.633 1776.11,683.633 1776.67,683.633 1777.23,683.633 1777.79,683.633 1778.35,683.633 1778.91,683.633 1779.47,683.633 1780.03,683.633 1780.59,683.633 1781.15,683.633 1781.71,683.633 1782.26,683.633 1782.82,683.633 1783.38,683.633 1783.94,683.633 1784.5,683.633 1785.06,683.633 1785.62,683.633 1786.18,683.633 1786.74,683.633 1787.3,683.633 1787.86,683.633 1788.42,683.633 1788.98,683.633 1789.53,683.633 1790.09,683.633 1790.65,683.633 1791.21,683.633 1791.77,683.633 1792.33,683.633 1792.89,683.633 1793.45,683.633 1794.01,683.633 1794.57,683.633 1795.13,683.633 1795.69,683.633 1796.25,683.633 1796.8,683.633 1797.36,683.633 1797.92,683.633 1798.48,683.633 1799.04,683.633 1799.6,683.633 1800.16,683.633 1800.72,683.633 1801.28,683.633 1801.84,683.633 1802.4,683.633 1802.96,683.633 1803.52,683.633 1804.08,683.633 1804.63,683.633 1805.19,683.633 1805.75,683.633 1806.31,683.633 1806.87,683.633 1807.43,683.633 1807.99,683.633 1808.55,683.633 1809.11,683.633 1809.67,683.633 1810.23,683.633 1810.79,683.633 1811.35,683.633 1811.9,683.633 1812.46,683.633 1813.02,683.633 1813.58,683.633 1814.14,683.633 1814.7,683.633 1815.26,683.633 1815.82,683.633 1816.38,683.633 1816.94,683.633 1817.5,683.633 1818.06,683.633 1818.62,683.633 1819.18,683.633 1819.73,683.633 1820.29,683.633 1820.85,683.633 1821.41,683.633 1821.97,683.633 1822.53,683.633 1823.09,683.633 1823.65,683.633 1824.21,683.633 1824.77,683.633 1825.33,683.633 1825.89,683.633 1826.45,683.633 1827,683.633 1827.56,683.633 1828.12,683.633 1828.68,683.633 1829.24,683.633 1829.8,683.633 1830.36,683.633 1830.92,683.633 1831.48,683.633 1832.04,683.633 1832.6,683.633 1833.16,683.633 1833.72,683.633 1834.27,683.633 1834.83,683.633 1835.39,683.633 1835.95,683.633 1836.51,683.633 1837.07,683.633 1837.63,683.633 1838.19,683.633 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ¬± $(se.err)\n    Projected Energy: $(v.val) ¬± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.026403053384381 ¬± 0.02311635044896363\nProjected Energy: -4.015327463146285 ¬± (0.004348818802085042, 0.004648223931179807)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; Œ± = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-Œ±.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ¬± 0.0029\n  with uncertainty of ¬± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13√ó6 DataFrame\n Row ‚îÇ blocks  mean      std_err      std_err_err  p_cov       mj\n     ‚îÇ Int64   Float64   Float64      Float64      Float64     Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 ‚îÇ   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 ‚îÇ   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 ‚îÇ   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 ‚îÇ    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 ‚îÇ    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 ‚îÇ    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 ‚îÇ     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 ‚îÇ     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 ‚îÇ     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 ‚îÇ      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 ‚îÇ      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 ‚îÇ      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ästd err vs blocking steps‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n               ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n    0.00423501 ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ m test\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ std err\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°†‚¢∫‚†í‚†í‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ü‚£Ä‚†§‚°ó‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ß‚†§‚†î‚°ó‚†ä‚†â‚°è‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚¢£‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚°á‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£¶‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n   -0.00012335 ‚îÇ‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚îÇ\n               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n               ‚†Ä0.64‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äk‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä13.36‚†Ä\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; Œ± = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; Œ±=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.œÉ_f using x_by_y_linear. The standard error estimate r.œÉ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.Œ¥_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ¬± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*œÉ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3√ó3 DataFrame\n Row ‚îÇ res      res_l    res_u\n     ‚îÇ Float64  Float64  Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282\n   2 ‚îÇ    13.0  1.7282   1.7282\n   3 ‚îÇ    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dœÑ=df.dœÑ[end], skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ‚â• 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dœÑ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dœÑln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dœÑ=df.dœÑ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |œà‚ü© and |œï‚ü© is defined as\n\nF(œàœï) = fracœàœï^2œàœàœïœï \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v‚ãÖv == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ‚â• 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:¬±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ¬± 0.029\n  with uncertainty of ¬± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; Œ± = 0.01) -> k\nmtest(table::NamedTuple; Œ± = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-Œ± after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, œÉ_f, Œ¥_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nœÉ_f::T: std from linear propagation\nŒ¥_y::T: coefficient of variation for denominator (‚â§ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, Œº, œÉ)\nparticles(samples, Œº::AbstractVector, Œ£::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, œÉ_f, Œ¥_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nœÉ_f standard deviation of f from linear error propagation (normal approximation)\nŒ¥_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(Œº_x,Œº_y,œÉ_x,œÉ_y,œÅ) -> f, œÉ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013).\n\nœÉ_f = sqrtfracœÉ_xŒº_y^2 + fracŒº_x œÉ_yŒº_y^2^2 - frac2 œÅ Œº_xŒº_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3√ó7 DataFrame\n Row ‚îÇ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     ‚îÇ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 ‚îÇ    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 ‚îÇ    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1√ó9 DataFrame\n Row ‚îÇ val       val_l      val_u      val_f     val_œÉ_f    val_Œ¥_y    val_k  val_blocks  val_success\n     ‚îÇ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dœÑ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7√ó6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS‚Ä¶</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple‚Ä¶</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.451832</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4868e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.798e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.446e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.302e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.645e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.885e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ‚â† basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10√ó10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10√ó10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nŒîE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ŒîE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0‚ü©\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0‚ü©\"\n fs\"|0 1 2 1 0‚ü©\"\n fs\"|1 0 2 0 1‚ü©\"\n fs\"|1 0 1 2 0‚ü©\"\n fs\"|0 0 1 1 2‚ü©\"\n fs\"|0 2 1 0 1‚ü©\"\n fs\"|2 1 1 0 0‚ü©\"\n fs\"|0 2 0 2 0‚ü©\"\n fs\"|1 1 0 1 1‚ü©\"\n fs\"|2 0 0 0 2‚ü©\"\n fs\"|0 0 0 3 1‚ü©\"\n fs\"|3 0 0 1 0‚ü©\"\n fs\"|0 1 0 0 3‚ü©\"\n fs\"|1 3 0 0 0‚ü©\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ‚âà all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0‚ü©\" => -0.0214153\n  fs\"|2 0 0 0 2‚ü©\" => -0.00237613\n  fs\"|0 0 4 0 0‚ü©\" => -0.980348\n  fs\"|0 0 0 3 1‚ü©\" => 0.00363555\n  fs\"|2 1 1 0 0‚ü©\" => -0.0119687\n  fs\"|1 0 2 0 1‚ü©\" => 0.0768085\n  fs\"|1 3 0 0 0‚ü©\" => 0.00363555\n  fs\"|0 1 2 1 0‚ü©\" => 0.177701\n  fs\"|0 0 1 1 2‚ü©\" => -0.0119687\n  fs\"|3 0 0 1 0‚ü©\" => 0.00195478\n  fs\"|0 2 0 2 0‚ü©\" => -0.0138439\n  fs\"|1 1 0 1 1‚ü©\" => -0.00234782\n  fs\"|0 1 0 0 3‚ü©\" => 0.00195478\n  fs\"|0 2 1 0 1‚ü©\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i œµ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential œµ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleœÉ t_œÉ a^_iœÉ a_jœÉ +\n  frac12sum_iœÉ u_œÉœÉ n_iœÉ (n_iœÉ - 1) +\n  sum_iœÉœÑu_œÉœÑ n_iœÉ n_iœÑ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iœÉd v_œÉd x_di^2 n_iœÉ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C √ó D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, Œ∑, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, Œ∑, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i œµ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi œµ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nŒ∑s = (): a tuple of aspect ratios for the remaining dimensions (Œ∑_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/Œ∑_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kœÉk^2 n_kœÉ \n    quad + sum_pqkœÉœÉ T_pqk a^_p-kœÉ a^_q+kœÉ a_qœÉ a_pœÉ \n    quad + sum_pqskkœÉœÉ Q_kka^_p-kœÉ a^_q+kœÉ a^_s+k-kœÉ\n                                       a_sœÉ a_qœÉ a_pœÉ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + œâN - v Œ£‚Çñ(a‚Çñ^ + a‚Çñ)\n\nwhere p is the total momentum, p_f = Œ£_k k a‚Çñ^ a‚Çñ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2œÄl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons œâ.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0‚ü©{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M√∑2, M√∑2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M√∑2, M√∑2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address Œ± is replaced by frac12(Œ±  Œ±) for even and odd parity, respectively, where Œ±ÃÑ == reverse(Œ±).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1‚ü©\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ‚âà eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ‚âà eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ‚â§ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0‚ü©{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ‚â§ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, œÉ=1, œÑ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_œÉœÑ(d) = frac1M _i n_œÉi (n_œÑi+d - Œ¥_0dŒ¥_œÉœÑ)\n\nFor multicomponent addresses, œÉ and œÑ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s b^_p  b_q a_r Œ¥_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s a^_p  a_q a_r Œ¥_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ‚â§ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ‚â§ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iœÉ = hat a^_iœÉ hat a_iœÉ\n\nwhere i is the mode and œÉ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0‚ü©\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0‚ü©\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x‚ãÖ(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1‚ü©\", -3.0)\n (fs\"|2 2 2‚ü©\", -2.449489742783178)\n (fs\"|3 1 2‚ü©\", -2.0)\n (fs\"|4 1 1‚ü©\", -2.8284271247461903)\n (fs\"|4 2 0‚ü©\", -2.0)\n (fs\"|3 3 0‚ü©\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ‚Ä¶.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb‚ãÖ(1:7) == onr(b)‚ãÖ(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w‚ãÖop(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ‚ãÖ A ‚ãÖ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1‚ü©\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ‚âà values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3√ó3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2√ó2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1‚ü©\" => -0.57735   fs\"|0 1 0‚ü©\" => -0.57735   fs\"|1 0 0‚ü©\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nŒ±mathrmnaddrrangle\n\nReturns the new address naddr and the factor Œ±. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0‚ü©\" => 1\n\njulia> fs\"|0 1 2 0‚ü©\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3‚ü©‚äó|0 1 0‚ü©\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üë‚ü©\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0‚ü©{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0‚ü©{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ‚â§ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Œ£_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) √∑ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ‚â§ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|‚ãÖ‚Üë‚Üë‚Üë‚ãÖ‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üì‚ü©\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3‚ü©{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n‚Üí (nadd, Œ±)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3‚ü©{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, Œ± = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dœÑ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ after projecting onto projector.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracPŒ®^(n+1)PŒ®^(n)right)-fracŒædœÑlnleft(fracPŒ®^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4, Œ± = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracŒædœÑlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-Œ±)*walkernumber() + Œ±*UniformProjector()‚ãÖœà computed with walkernumber() and UniformProjector(). When Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)-fracŒædœÑlnleft(fracŒ®_1^n+1Œ®_1^texttargetright)\n\nWhen Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08, Œæ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, Œ∂ = 0.08,   Œæ = Œ∂^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dœÑ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\nùêì = 1 + dœÑ(S - ùêá)\n\nwhere ùêá is the hamiltonian and S is the shift.\n\nùêì represents the first order expansion of the exponential evolution operator of the imaginary-time Schr√∂dinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nŒ∂ = 0.08: Damping parameter for the shift update.\nŒæ = Œ∂^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, Œ∂, Œæ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dœÑ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(‚ãÖ,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dœÑ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndœÑ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3‚ü©\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nœÑ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, Œ∂ = 0.08, Œæ = Œ∂^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ‚âà num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0, fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5\n  fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dœÑ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dœÑ","text":"update_dœÑ(s<:TimeStepStrategy, dœÑ, tnorm) -> new dœÑ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    targetwalkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schr√∂dinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Bl√∂te PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schr√∂dinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija ƒåufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. ƒåufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelm√ºller, D. Huber, M. ƒåufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/œÄ^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => -1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -2.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 3.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 3.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()‚ãÖv == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\nExtended Help\n\nA matrix-vector product is performed by the applying the following sequence of functions.\n\nSpawns are performed from each segment in the vector independently. The spawns from the p-th segment are collected in the p-th column of the working memory. (perform_spawns!)\nThe local segments are summed row-wise to the main (first) column. (collect_local!)\nThe remote segements are communicated using MPI and added to the main column. (synchronize_remote!)\nThe data is compressed copied to the next vector (move_and_compress!)\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is nrows.\n\nUsed in the AllToAll communication strategy.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
