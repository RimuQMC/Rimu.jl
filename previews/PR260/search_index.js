var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip670\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip671\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip672\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1262.84 2211.02,1262.84 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.88 2211.02,1004.88 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.916 2211.02,746.916 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.955 2211.02,488.955 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.994 2211.02,230.994 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1262.84 423.181,1262.84 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.88 423.181,1004.88 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.916 423.181,746.916 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.955 423.181,488.955 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.994 423.181,230.994 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M356.339 1248.64 Q352.728 1248.64 350.899 1252.2 Q349.094 1255.74 349.094 1262.87 Q349.094 1269.98 350.899 1273.54 Q352.728 1277.08 356.339 1277.08 Q359.973 1277.08 361.779 1273.54 Q363.608 1269.98 363.608 1262.87 Q363.608 1255.74 361.779 1252.2 Q359.973 1248.64 356.339 1248.64 M356.339 1244.93 Q362.149 1244.93 365.205 1249.54 Q368.284 1254.12 368.284 1262.87 Q368.284 1271.6 365.205 1276.2 Q362.149 1280.79 356.339 1280.79 Q350.529 1280.79 347.45 1276.2 Q344.395 1271.6 344.395 1262.87 Q344.395 1254.12 347.45 1249.54 Q350.529 1244.93 356.339 1244.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M290.043 1018.22 L306.363 1018.22 L306.363 1022.16 L284.418 1022.16 L284.418 1018.22 Q287.08 1015.47 291.664 1010.84 Q296.27 1006.18 297.451 1004.84 Q299.696 1002.32 300.576 1000.58 Q301.478 998.823 301.478 997.133 Q301.478 994.379 299.534 992.642 Q297.613 990.906 294.511 990.906 Q292.312 990.906 289.858 991.67 Q287.427 992.434 284.65 993.985 L284.65 989.263 Q287.474 988.129 289.927 987.55 Q292.381 986.971 294.418 986.971 Q299.789 986.971 302.983 989.656 Q306.177 992.341 306.177 996.832 Q306.177 998.962 305.367 1000.88 Q304.58 1002.78 302.474 1005.37 Q301.895 1006.05 298.793 1009.26 Q295.691 1012.46 290.043 1018.22 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 987.596 L334.58 987.596 L334.58 991.531 L320.506 991.531 L320.506 1000 Q321.524 999.656 322.543 999.494 Q323.562 999.309 324.58 999.309 Q330.367 999.309 333.747 1002.48 Q337.126 1005.65 337.126 1011.07 Q337.126 1016.65 333.654 1019.75 Q330.182 1022.83 323.862 1022.83 Q321.687 1022.83 319.418 1022.46 Q317.173 1022.09 314.765 1021.35 L314.765 1016.65 Q316.849 1017.78 319.071 1018.34 Q321.293 1018.89 323.77 1018.89 Q327.774 1018.89 330.112 1016.79 Q332.45 1014.68 332.45 1011.07 Q332.45 1007.46 330.112 1005.35 Q327.774 1003.24 323.77 1003.24 Q321.895 1003.24 320.02 1003.66 Q318.168 1004.08 316.224 1004.96 L316.224 987.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 990.675 Q352.728 990.675 350.899 994.24 Q349.094 997.781 349.094 1004.91 Q349.094 1012.02 350.899 1015.58 Q352.728 1019.12 356.339 1019.12 Q359.973 1019.12 361.779 1015.58 Q363.608 1012.02 363.608 1004.91 Q363.608 997.781 361.779 994.24 Q359.973 990.675 356.339 990.675 M356.339 986.971 Q362.149 986.971 365.205 991.578 Q368.284 996.161 368.284 1004.91 Q368.284 1013.64 365.205 1018.24 Q362.149 1022.83 356.339 1022.83 Q350.529 1022.83 347.45 1018.24 Q344.395 1013.64 344.395 1004.91 Q344.395 996.161 347.45 991.578 Q350.529 986.971 356.339 986.971 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M286.062 729.636 L304.418 729.636 L304.418 733.571 L290.344 733.571 L290.344 742.043 Q291.363 741.696 292.381 741.534 Q293.4 741.348 294.418 741.348 Q300.205 741.348 303.585 744.52 Q306.964 747.691 306.964 753.108 Q306.964 758.686 303.492 761.788 Q300.02 764.867 293.701 764.867 Q291.525 764.867 289.256 764.496 Q287.011 764.126 284.603 763.385 L284.603 758.686 Q286.687 759.821 288.909 760.376 Q291.131 760.932 293.608 760.932 Q297.613 760.932 299.951 758.825 Q302.288 756.719 302.288 753.108 Q302.288 749.497 299.951 747.39 Q297.613 745.284 293.608 745.284 Q291.733 745.284 289.858 745.7 Q288.006 746.117 286.062 746.997 L286.062 729.636 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 732.714 Q322.566 732.714 320.737 736.279 Q318.932 739.821 318.932 746.95 Q318.932 754.057 320.737 757.621 Q322.566 761.163 326.177 761.163 Q329.811 761.163 331.617 757.621 Q333.446 754.057 333.446 746.95 Q333.446 739.821 331.617 736.279 Q329.811 732.714 326.177 732.714 M326.177 729.011 Q331.987 729.011 335.043 733.617 Q338.122 738.2 338.122 746.95 Q338.122 755.677 335.043 760.284 Q331.987 764.867 326.177 764.867 Q320.367 764.867 317.288 760.284 Q314.233 755.677 314.233 746.95 Q314.233 738.2 317.288 733.617 Q320.367 729.011 326.177 729.011 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 732.714 Q352.728 732.714 350.899 736.279 Q349.094 739.821 349.094 746.95 Q349.094 754.057 350.899 757.621 Q352.728 761.163 356.339 761.163 Q359.973 761.163 361.779 757.621 Q363.608 754.057 363.608 746.95 Q363.608 739.821 361.779 736.279 Q359.973 732.714 356.339 732.714 M356.339 729.011 Q362.149 729.011 365.205 733.617 Q368.284 738.2 368.284 746.95 Q368.284 755.677 365.205 760.284 Q362.149 764.867 356.339 764.867 Q350.529 764.867 347.45 760.284 Q344.395 755.677 344.395 746.95 Q344.395 738.2 347.45 733.617 Q350.529 729.011 356.339 729.011 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M284.835 471.675 L307.057 471.675 L307.057 473.666 L294.511 506.235 L289.627 506.235 L301.432 475.61 L284.835 475.61 L284.835 471.675 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M316.224 471.675 L334.58 471.675 L334.58 475.61 L320.506 475.61 L320.506 484.082 Q321.524 483.735 322.543 483.573 Q323.562 483.388 324.58 483.388 Q330.367 483.388 333.747 486.559 Q337.126 489.73 337.126 495.147 Q337.126 500.726 333.654 503.828 Q330.182 506.906 323.862 506.906 Q321.687 506.906 319.418 506.536 Q317.173 506.165 314.765 505.425 L314.765 500.726 Q316.849 501.86 319.071 502.415 Q321.293 502.971 323.77 502.971 Q327.774 502.971 330.112 500.865 Q332.45 498.758 332.45 495.147 Q332.45 491.536 330.112 489.429 Q327.774 487.323 323.77 487.323 Q321.895 487.323 320.02 487.74 Q318.168 488.156 316.224 489.036 L316.224 471.675 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 474.754 Q352.728 474.754 350.899 478.318 Q349.094 481.86 349.094 488.99 Q349.094 496.096 350.899 499.661 Q352.728 503.203 356.339 503.203 Q359.973 503.203 361.779 499.661 Q363.608 496.096 363.608 488.99 Q363.608 481.86 361.779 478.318 Q359.973 474.754 356.339 474.754 M356.339 471.05 Q362.149 471.05 365.205 475.656 Q368.284 480.24 368.284 488.99 Q368.284 497.716 365.205 502.323 Q362.149 506.906 356.339 506.906 Q350.529 506.906 347.45 502.323 Q344.395 497.716 344.395 488.99 Q344.395 480.24 347.45 475.656 Q350.529 471.05 356.339 471.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M256.664 244.339 L264.303 244.339 L264.303 217.974 L255.992 219.64 L255.992 215.381 L264.256 213.714 L268.932 213.714 L268.932 244.339 L276.571 244.339 L276.571 248.274 L256.664 248.274 L256.664 244.339 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M296.015 216.793 Q292.404 216.793 290.576 220.358 Q288.77 223.899 288.77 231.029 Q288.77 238.135 290.576 241.7 Q292.404 245.242 296.015 245.242 Q299.65 245.242 301.455 241.7 Q303.284 238.135 303.284 231.029 Q303.284 223.899 301.455 220.358 Q299.65 216.793 296.015 216.793 M296.015 213.089 Q301.826 213.089 304.881 217.696 Q307.96 222.279 307.96 231.029 Q307.96 239.756 304.881 244.362 Q301.826 248.946 296.015 248.946 Q290.205 248.946 287.127 244.362 Q284.071 239.756 284.071 231.029 Q284.071 222.279 287.127 217.696 Q290.205 213.089 296.015 213.089 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M326.177 216.793 Q322.566 216.793 320.737 220.358 Q318.932 223.899 318.932 231.029 Q318.932 238.135 320.737 241.7 Q322.566 245.242 326.177 245.242 Q329.811 245.242 331.617 241.7 Q333.446 238.135 333.446 231.029 Q333.446 223.899 331.617 220.358 Q329.811 216.793 326.177 216.793 M326.177 213.089 Q331.987 213.089 335.043 217.696 Q338.122 222.279 338.122 231.029 Q338.122 239.756 335.043 244.362 Q331.987 248.946 326.177 248.946 Q320.367 248.946 317.288 244.362 Q314.233 239.756 314.233 231.029 Q314.233 222.279 317.288 217.696 Q320.367 213.089 326.177 213.089 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M356.339 216.793 Q352.728 216.793 350.899 220.358 Q349.094 223.899 349.094 231.029 Q349.094 238.135 350.899 241.7 Q352.728 245.242 356.339 245.242 Q359.973 245.242 361.779 241.7 Q363.608 238.135 363.608 231.029 Q363.608 223.899 361.779 220.358 Q359.973 216.793 356.339 216.793 M356.339 213.089 Q362.149 213.089 365.205 217.696 Q368.284 222.279 368.284 231.029 Q368.284 239.756 365.205 244.362 Q362.149 248.946 356.339 248.946 Q350.529 248.946 347.45 244.362 Q344.395 239.756 344.395 231.029 Q344.395 222.279 347.45 217.696 Q350.529 213.089 356.339 213.089 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.994 4017.76,230.994 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.45 455.986,1250.53 456.554,1248.45 457.123,1248.47 457.691,1248.36 458.259,1248.24 458.828,1248.01 459.396,1247.66 459.964,1247.25 460.533,1246.72 461.101,1245.13 461.669,1244.52 462.238,1243.8 462.806,1243.03 463.375,1242.17 463.943,1241.21 464.511,1239.07 465.08,1236.9 465.648,1234.62 466.216,1233.24 466.785,1231.82 467.353,1230.26 467.921,1228.57 468.49,1224.67 469.058,1222.76 469.626,1219.6 470.195,1216.35 470.763,1212.94 471.331,1210.45 471.9,1207.79 472.468,1204.97 473.036,1201.98 473.605,1196.7 474.173,1193.33 474.741,1189.75 475.31,1185.94 475.878,1181.97 476.446,1176.66 477.015,1171.22 477.583,1166.69 478.152,1162 478.72,1156.02 479.288,1149.77 479.857,1144.38 480.425,1136.68 480.993,1129.79 481.562,1122.79 482.13,1112.6 482.698,1104.39 483.267,1092.92 483.835,1084.45 484.403,1075.95 484.972,1068.29 485.54,1061.53 486.108,1052.57 486.677,1045.43 487.245,1037.03 487.813,1028.8 488.382,1020.12 488.95,1008.25 489.518,1000.52 490.087,990.411 490.655,979.279 491.224,968.292 491.792,958.307 492.36,950.447 492.929,941.353 493.497,932.133 494.065,922.843 494.634,912.505 495.202,904.15 495.77,894.569 496.339,885.105 496.907,872.441 497.475,862.859 498.044,853.238 498.612,843.568 499.18,833.725 499.749,822.813 500.317,814.065 500.885,804.302 501.454,794.377 502.022,783.546 502.59,772.67 503.159,764.01 503.727,754.273 504.295,743.446 504.864,733.798 505.432,722.12 506.001,712.548 506.569,704.036 507.137,692.483 507.706,683.352 508.274,673.193 508.842,665.243 509.411,655.306 509.979,647.382 510.547,637.546 511.116,628.929 511.684,618.392 512.252,610.798 512.821,603.511 513.389,594.054 513.957,584.953 514.526,573.813 515.094,565.058 515.662,556.222 516.231,549.839 516.799,543.505 517.367,536.273 517.936,529.145 518.504,520.998 519.072,514.089 519.641,507.418 520.209,497.724 520.778,491.247 521.346,485.097 521.914,480.716 522.483,473.479 523.051,467.501 523.619,462.813 524.188,454.955 524.756,449.461 525.324,443.876 525.893,438.654 526.461,432.297 527.029,425.166 527.598,421.243 528.166,419.403 528.734,411.361 529.303,407.791 529.871,405.257 530.439,401.604 531.008,394.924 531.576,391.612 532.144,383.274 532.713,380.387 533.281,374.443 533.85,370.729 534.418,366.143 534.986,364.694 535.555,360.195 536.123,356.97 536.691,353.689 537.26,349.67 537.828,345.666 538.396,342.726 538.965,338.897 539.533,336.263 540.101,336.943 540.67,333.986 541.238,331.302 541.806,329.44 542.375,327.828 542.943,325.141 543.511,322.481 544.08,321.324 544.648,318.764 545.216,316.131 545.785,313.709 546.353,312.398 546.921,310.002 547.49,307.864 548.058,307.8 548.627,304.38 549.195,303.321 549.763,302.043 550.332,297.756 550.9,295.645 551.468,294.777 552.037,292.925 552.605,291.19 553.173,289.53 553.742,287.86 554.31,287.301 554.878,287.589 555.447,285.904 556.015,283.441 556.583,284.119 557.152,286.45 557.72,284.299 558.288,284.522 558.857,281.567 559.425,278.859 559.993,277.277 560.562,278.749 561.13,275.988 561.698,277.366 562.267,276.523 562.835,276.775 563.404,272.764 563.972,272.311 564.54,272.512 565.109,270.908 565.677,269.047 566.245,268.553 566.814,268.896 567.382,267.354 567.95,266.922 568.519,265.337 569.087,264.073 569.655,263.6 570.224,263.384 570.792,265.884 571.36,265.108 571.929,262.46 572.497,261.879 573.065,263.356 573.634,262.71 574.202,259.94 574.77,258.43 575.339,258.182 575.907,255.826 576.476,255.669 577.044,255.425 577.612,254.228 578.181,254.244 578.749,250.768 579.317,251.962 579.886,249.961 580.454,248.854 581.022,247.889 581.591,247.219 582.159,247.335 582.727,246.62 583.296,247.776 583.864,248.737 584.432,248.547 585.001,246.412 585.569,247.709 586.137,247.647 586.706,245.527 587.274,243.61 587.842,246.02 588.411,247.929 588.979,246.749 589.547,246.527 590.116,243.375 590.684,243.395 591.253,244.574 591.821,244.734 592.389,244.84 592.958,242.957 593.526,243.224 594.094,243.308 594.663,243.499 595.231,244.476 595.799,242.544 596.368,242.729 596.936,241.994 597.504,243.378 598.073,242.675 598.641,241.696 599.209,239.801 599.778,241.193 600.346,241.544 600.914,239.394 601.483,240.874 602.051,238.912 602.619,240.191 603.188,241.405 603.756,240.385 604.325,242.76 604.893,245.014 605.461,243.674 606.03,245.862 606.598,244.66 607.166,242.533 607.735,241.448 608.303,241.41 608.871,241.537 609.44,240.422 610.008,240.471 610.576,239.48 611.145,240.584 611.713,242.714 612.281,242.554 612.85,241.643 613.418,238.685 613.986,238.844 614.555,239.683 615.123,241.935 615.691,242.869 616.26,242.63 616.828,242.532 617.396,242.436 617.965,242.47 618.533,241.581 619.102,241.532 619.67,241.393 620.238,241.18 620.807,243.003 621.375,241.705 621.943,241.492 622.512,241.358 623.08,238.967 623.648,237.996 624.217,235.013 624.785,236.249 625.353,236.348 625.922,236.481 626.49,234.728 627.058,236.225 627.627,233.307 628.195,232.521 628.763,234.147 629.332,235.598 629.9,235.79 630.468,236.074 631.037,236.372 631.605,234.314 632.173,234.703 632.742,235.033 633.31,235.32 633.879,234.585 634.447,234.816 635.015,233.994 635.584,234.278 636.152,234.328 636.72,233.489 637.289,233.834 637.857,230.878 638.425,231.333 638.994,230.86 639.562,231.335 640.13,231.779 640.699,231.209 641.267,231.543 641.835,235.044 642.404,237.469 642.972,239.685 643.54,240.419 644.109,240.102 644.677,242.954 645.245,241.851 645.814,241.616 646.382,241.222 646.951,240.15 647.519,242.99 648.087,241.367 648.656,236.757 649.224,237.828 649.792,236.689 650.361,237.692 650.929,238.901 651.497,237.711 652.066,237.625 652.634,235.522 653.202,237.647 653.771,237.618 654.339,238.433 654.907,239.279 655.476,239.087 656.044,236.969 656.612,235.756 657.181,234.748 657.749,235.07 658.317,234.835 658.886,234.874 659.454,233.961 660.022,235.974 660.591,237.003 661.159,234.826 661.728,233.942 662.296,234.131 662.864,234.412 663.433,234.618 664.001,233.669 664.569,233.786 665.138,233.918 665.706,233.096 666.274,234.382 666.843,235.526 667.411,234.587 667.979,234.725 668.548,233.934 669.116,233.065 669.684,233.32 670.253,234.7 670.821,236.878 671.389,236.634 671.958,235.665 672.526,234.505 673.094,235.656 673.663,237.384 674.231,236.225 674.799,234.128 675.368,234.087 675.936,235.289 676.505,234.355 677.073,235.306 677.641,235.296 678.21,235.228 678.778,234.145 679.346,234.196 679.915,233.351 680.483,231.447 681.051,234.629 681.62,234.623 682.188,234.397 682.756,234.428 683.325,235.707 683.893,233.377 684.461,233.568 685.03,232.308 685.598,232.524 686.166,230.687 686.735,230.891 687.303,231.252 687.871,232.653 688.44,232.905 689.008,233.129 689.577,233.303 690.145,231.491 690.713,232.633 691.282,233.608 691.85,231.606 692.418,231.89 692.987,233.195 693.555,233.451 694.123,233.507 694.692,235.704 695.26,235.581 695.828,235.411 696.397,236.236 696.965,238.166 697.533,237.895 698.102,237.485 698.67,236.35 699.238,235.085 699.807,234.827 700.375,236.949 700.943,237.833 701.512,236.612 702.08,234.115 702.648,235.051 703.217,236.279 703.785,234.109 704.354,234.181 704.922,233.975 705.49,233.898 706.059,233.884 706.627,233.755 707.195,234.917 707.764,232.615 708.332,232.647 708.9,232.663 709.469,230.868 710.037,231.023 710.605,234.287 711.174,232.964 711.742,233.05 712.31,229.934 712.879,230.056 713.447,230.462 714.015,229.559 714.584,228.717 715.152,230.108 715.72,229.294 716.289,228.428 716.857,230.024 717.425,229.301 717.994,227.4 718.562,229.968 719.131,228.145 719.699,228.535 720.267,230.134 720.836,230.512 721.404,228.702 721.972,229.12 722.541,228.382 723.109,228.503 723.677,228.856 724.246,230.26 724.814,231.453 725.382,232.797 725.951,233.923 726.519,234.86 727.087,237.101 727.656,235.957 728.224,235.032 728.792,234.205 729.361,232.292 729.929,232.46 730.497,232.625 731.066,233.778 731.634,234.932 732.203,234.889 732.771,237.883 733.339,237.622 733.908,237.438 734.476,236.206 735.044,236.782 735.613,236.583 736.181,239.61 736.749,239.261 737.318,235.623 737.886,235.343 738.454,233.974 739.023,234.918 739.591,233.797 740.159,232.698 740.728,228.638 741.296,228.075 741.864,229.452 742.433,230.767 743.001,230.047 743.569,231.391 744.138,232.582 744.706,231.662 745.274,229.811 745.843,228.958 746.411,227.082 746.98,227.364 747.548,229.741 748.116,229.965 748.685,230.307 749.253,232.532 749.821,233.617 750.39,230.582 750.958,231.737 751.526,232.905 752.095,231.681 752.663,231.658 753.231,233.698 753.8,234.715 754.368,233.705 754.936,235.666 755.505,236.698 756.073,235.545 756.641,235.419 757.21,234.167 757.778,233.232 758.346,235.206 758.915,233.932 759.483,234.931 760.052,234.88 760.62,233.369 761.188,233.145 761.757,233.092 762.325,232.094 762.893,233.189 763.462,233.115 764.03,230.95 764.598,233.317 765.167,234.337 765.735,231.219 766.303,233.33 766.872,233.194 767.44,236.015 768.008,237.965 768.577,236.494 769.145,236.116 769.713,232.646 770.282,230.595 770.85,230.644 771.418,232.863 771.987,234.804 772.555,234.647 773.123,233.618 773.692,233.701 774.26,234.676 774.829,234.495 775.397,234.435 775.965,233.244 776.534,237.501 777.102,239.084 777.67,237.415 778.239,237.079 778.807,236.675 779.375,235.313 779.944,234.077 780.512,234.763 781.08,234.443 781.649,235.081 782.217,233.689 782.785,234.615 783.354,234.381 783.922,231.207 784.49,229.233 785.059,229.289 785.627,229.569 786.195,228.526 786.764,228.558 787.332,227.506 787.9,227.872 788.469,226.114 789.037,226.428 789.606,225.602 790.174,224.867 790.742,224.547 791.311,224.006 791.879,224.381 792.447,225.981 793.016,228.48 793.584,227.797 794.152,230.183 794.721,229.161 795.289,231.486 795.857,231.56 796.426,231.545 796.994,230.703 797.562,232.046 798.131,234.328 798.699,235.114 799.267,235.881 799.836,235.715 800.404,235.479 800.972,235.051 801.541,232.904 802.109,233.729 802.678,235.557 803.246,233.323 803.814,234.192 804.383,233.994 804.951,233.677 805.519,232.445 806.088,232.466 806.656,232.464 807.224,231.328 807.793,232.552 808.361,233.521 808.929,231.4 809.498,232.328 810.066,233.265 810.634,233.235 811.203,235.267 811.771,236.171 812.339,236.822 812.908,235.319 813.476,235.06 814.044,233.9 814.613,234.869 815.181,233.588 815.749,231.449 816.318,231.451 816.886,230.466 817.455,231.515 818.023,230.452 818.591,230.46 819.16,230.498 819.728,230.618 820.296,229.731 820.865,229.692 821.433,228.952 822.001,227.038 822.57,228.474 823.138,230.686 823.706,230.777 824.275,229.781 824.843,227.739 825.411,228.839 825.98,231.14 826.548,231.024 827.116,232.055 827.685,231.188 828.253,231.19 828.821,232.176 829.39,232.031 829.958,232.061 830.526,231.75 831.095,231.697 831.663,230.515 832.232,227.651 832.8,228.093 833.368,229.348 833.937,230.609 834.505,231.642 835.073,231.787 835.642,231.812 836.21,233.768 836.778,231.438 837.347,232.3 837.915,231.087 838.483,230.115 839.052,230.193 839.62,229.151 840.188,229.408 840.757,231.415 841.325,229.461 841.893,227.623 842.462,229.011 843.03,229.033 843.598,228.184 844.167,229.61 844.735,230.844 845.304,229.953 845.872,229.14 846.44,231.315 847.009,231.39 847.577,229.486 848.145,229.487 848.714,229.801 849.282,230.135 849.85,229.343 850.419,228.565 850.987,228.713 851.555,227.92 852.124,228.105 852.692,228.535 853.26,230.864 853.829,230.942 854.397,231.019 854.965,231.175 855.534,230.918 856.102,232.236 856.67,233.481 857.239,232.379 857.807,234.599 858.375,234.568 858.944,234.383 859.512,234.317 860.081,232.15 860.649,233.185 861.217,233.006 861.786,231.801 862.354,230.782 862.922,232.097 863.491,232.182 864.059,232.206 864.627,232.294 865.196,231.203 865.764,230.307 866.332,230.78 866.901,228.934 867.469,230.237 868.037,229.569 868.606,228.95 869.174,227.948 869.742,229.085 870.311,230.507 870.879,230.721 871.447,234.897 872.016,235.62 872.584,234.33 873.152,233.106 873.721,230.855 874.289,229.769 874.858,227.94 875.426,230.345 875.994,229.526 876.563,229.861 877.131,228.997 877.699,229.26 878.268,230.601 878.836,230.76 879.404,230.872 879.973,229.852 880.541,230.02 881.109,232.112 881.678,233.012 882.246,233.141 882.814,233.221 883.383,233.031 883.951,231.999 884.519,230.91 885.088,230.121 885.656,230.214 886.224,229.346 886.793,229.44 887.361,229.495 887.93,230.495 888.498,230.772 889.066,230.954 889.635,230.208 890.203,231.241 890.771,231.339 891.34,233.407 891.908,234.429 892.476,233.503 893.045,235.516 893.613,234.165 894.181,234.062 894.75,233.887 895.318,233.739 895.886,234.544 896.455,236.441 897.023,236.122 897.591,235.937 898.16,235.474 898.728,234.154 899.296,232.923 899.865,231.876 900.433,231.087 901.001,231.362 901.57,230.388 902.138,228.287 902.707,228.38 903.275,228.433 903.843,227.574 904.412,224.8 904.98,225.481 905.548,226.901 906.117,226.35 906.685,228.754 907.253,227.859 907.822,229.257 908.39,230.339 908.958,232.562 909.527,231.39 910.095,230.424 910.663,231.735 911.232,233.819 911.8,235.994 912.368,236.946 912.937,235.554 913.505,235.261 914.073,237.138 914.642,238.921 915.21,237.576 915.779,237.131 916.347,235.91 916.915,233.567 917.484,232.308 918.052,233.296 918.62,233.376 919.189,233.301 919.757,234.007 920.325,230.792 920.894,231.955 921.462,233.955 922.03,234.94 922.599,234.745 923.167,235.359 923.735,235.069 924.304,233.848 924.872,231.795 925.44,234.694 926.009,234.497 926.577,230.96 927.145,230.085 927.714,232.268 928.282,234.094 928.85,233.712 929.419,234.548 929.987,234.513 930.556,232.077 931.124,228.945 931.692,229.943 932.261,230.052 932.829,228.915 933.397,230.977 933.966,230.162 934.534,233.3 935.102,232.103 935.671,233.147 936.239,230.882 936.807,231.069 937.376,231.269 937.944,231.071 938.512,230.883 939.081,228.747 939.649,228.766 940.217,227.884 940.786,228.024 941.354,228.222 941.922,227.417 942.491,226.466 943.059,226.87 943.627,225.918 944.196,229.662 944.764,229.778 945.333,230.063 945.901,231.438 946.469,230.67 947.038,229.677 947.606,229.739 948.174,229.796 948.743,230.985 949.311,228.203 949.879,229.388 950.448,231.597 951.016,230.591 951.584,232.51 952.153,231.407 952.721,231.206 953.289,229.041 953.858,229.234 954.426,228.34 954.994,228.72 955.563,229.041 956.131,230.18 956.699,229.404 957.268,229.695 957.836,227.64 958.405,233.187 958.973,233.102 959.541,231.914 960.11,231.914 960.678,230.729 961.246,232.002 961.815,230.785 962.383,231.761 962.951,231.641 963.52,231.726 964.088,230.657 964.656,230.589 965.225,230.733 965.793,229.802 966.361,233.096 966.93,233.982 967.498,235.676 968.066,236.643 968.635,235.433 969.203,235.094 969.771,233.805 970.34,233.672 970.908,234.425 971.476,234.164 972.045,233.863 972.613,233.504 973.182,233.385 973.75,234.109 974.318,234.843 974.887,234.658 975.455,235.43 976.023,237.083 976.592,237.868 977.16,238.179 977.728,238.578 978.297,236.885 978.865,235.456 979.433,235.1 980.002,233.815 980.57,233.591 981.138,231.381 981.707,232.388 982.275,232.203 982.843,231.118 983.412,232.189 983.98,232.936 984.548,229.634 985.117,229.467 985.685,229.415 986.253,228.646 986.822,229.773 987.39,226.587 987.959,226.786 988.527,228.976 989.095,231.278 989.664,230.289 990.232,231.524 990.8,231.401 991.369,230.185 991.937,231.26 992.505,233.163 993.074,233.067 993.642,231.774 994.21,233.502 994.779,233.34 995.347,232.94 995.915,232.617 996.484,237.318 997.052,236.77 997.62,236.095 998.189,237.493 998.757,235.986 999.325,232.51 999.894,232.242 1000.46,233.065 1001.03,232.576 1001.6,231.328 1002.17,230.975 1002.74,229.185 1003.3,227.083 1003.87,227.299 1004.44,226.399 1005.01,224.584 1005.58,224.963 1006.15,224.244 1006.71,223.676 1007.28,224.14 1007.85,224.809 1008.42,224.096 1008.99,223.536 1009.56,225.22 1010.12,226.423 1010.69,224.733 1011.26,223.135 1011.83,223.732 1012.4,224.456 1012.97,225.045 1013.53,225.54 1014.1,225.716 1014.67,227.212 1015.24,225.617 1015.81,225.007 1016.38,228.426 1016.94,228.633 1017.51,227.904 1018.08,228.296 1018.65,226.531 1019.22,224.9 1019.79,227.66 1020.35,229.091 1020.92,229.506 1021.49,228.835 1022.06,228.874 1022.63,228.947 1023.2,226.947 1023.76,226.279 1024.33,225.626 1024.9,226.252 1025.47,225.641 1026.04,226.142 1026.61,226.617 1027.17,227.217 1027.74,228.686 1028.31,231.1 1028.88,230.121 1029.45,233.518 1030.02,231.397 1030.58,230.512 1031.15,229.7 1031.72,229.102 1032.29,229.295 1032.86,229.533 1033.43,231.912 1033.99,228.826 1034.56,231.175 1035.13,231.281 1035.7,231.438 1036.27,232.752 1036.84,231.581 1037.4,233.679 1037.97,232.605 1038.54,231.8 1039.11,233.064 1039.68,232.878 1040.25,232.722 1040.81,230.724 1041.38,232.004 1041.95,232.205 1042.52,231.962 1043.09,232.194 1043.66,234.309 1044.22,235.198 1044.79,234.955 1045.36,234.946 1045.93,234.937 1046.5,236.958 1047.07,238.637 1047.63,238.327 1048.2,239.001 1048.77,237.583 1049.34,238.01 1049.91,237.585 1050.48,236.147 1051.05,236.748 1051.61,235.43 1052.18,235.137 1052.75,234.906 1053.32,235.738 1053.89,234.443 1054.46,234.258 1055.02,234.976 1055.59,236.603 1056.16,235.076 1056.73,236.794 1057.3,235.102 1057.87,234.913 1058.43,233.83 1059,230.661 1059.57,230.721 1060.14,231.563 1060.71,231.467 1061.28,231.426 1061.84,231.291 1062.41,231.355 1062.98,231.358 1063.55,232.456 1064.12,232.423 1064.69,233.371 1065.25,237.235 1065.82,237.693 1066.39,236.024 1066.96,235.54 1067.53,235.037 1068.1,233.675 1068.66,233.408 1069.23,232.083 1069.8,231.922 1070.37,232.823 1070.94,231.532 1071.51,231.404 1072.07,231.085 1072.64,228.666 1073.21,229.734 1073.78,229.758 1074.35,229.742 1074.92,229.874 1075.48,229.69 1076.05,230.824 1076.62,227.721 1077.19,227.983 1077.76,229.14 1078.33,228.923 1078.89,229.107 1079.46,229.364 1080.03,228.587 1080.6,229.85 1081.17,230.951 1081.74,230.091 1082.3,228.088 1082.87,227.092 1083.44,227.356 1084.01,228.487 1084.58,229.607 1085.15,229.483 1085.71,228.539 1086.28,227.835 1086.85,229.109 1087.42,229.425 1087.99,230.455 1088.56,230.456 1089.12,232.499 1089.69,232.259 1090.26,230.995 1090.83,230.811 1091.4,230.872 1091.97,231.84 1092.53,230.682 1093.1,230.766 1093.67,233.911 1094.24,232.609 1094.81,233.377 1095.38,233.117 1095.94,234.084 1096.51,233.734 1097.08,234.476 1097.65,232.169 1098.22,233.005 1098.79,233.841 1099.35,232.45 1099.92,233.366 1100.49,231.182 1101.06,233.053 1101.63,235.881 1102.2,233.339 1102.76,231.938 1103.33,230.942 1103.9,231.876 1104.47,230.608 1105.04,230.657 1105.61,231.873 1106.17,231.72 1106.74,231.621 1107.31,232.772 1107.88,230.691 1108.45,232.838 1109.02,229.57 1109.58,229.579 1110.15,229.715 1110.72,229.624 1111.29,231.532 1111.86,229.35 1112.43,227.526 1112.99,227.583 1113.56,228.73 1114.13,227.993 1114.7,229.934 1115.27,230.965 1115.84,231.784 1116.4,234.783 1116.97,234.684 1117.54,235.276 1118.11,233.956 1118.68,232.648 1119.25,232.389 1119.81,232.229 1120.38,231.013 1120.95,230.869 1121.52,229.82 1122.09,229.798 1122.66,229.066 1123.23,229.062 1123.79,229.184 1124.36,229.282 1124.93,228.417 1125.5,226.354 1126.07,226.616 1126.64,228.903 1127.2,226.99 1127.77,228.507 1128.34,227.597 1128.91,228.689 1129.48,224.916 1130.05,225.398 1130.61,227.665 1131.18,228.988 1131.75,231.174 1132.32,231.192 1132.89,230.412 1133.46,230.405 1134.02,230.483 1134.59,229.189 1135.16,232.293 1135.73,232.183 1136.3,230.266 1136.87,228.074 1137.43,228.521 1138,226.331 1138.57,225.693 1139.14,226.029 1139.71,228.594 1140.28,228.592 1140.84,228.669 1141.41,230.159 1141.98,230.06 1142.55,229.041 1143.12,229.316 1143.69,229.582 1144.25,227.799 1144.82,227.087 1145.39,226.339 1145.96,225.793 1146.53,225.114 1147.1,225.652 1147.66,226.136 1148.23,227.423 1148.8,225.035 1149.37,227.536 1149.94,227.949 1150.51,229.331 1151.07,229.444 1151.64,230.661 1152.21,230.011 1152.78,230.461 1153.35,230.766 1153.92,231.83 1154.48,232.12 1155.05,232.211 1155.62,230.3 1156.19,229.747 1156.76,228.954 1157.33,229.295 1157.89,228.474 1158.46,230.742 1159.03,230.73 1159.6,231.85 1160.17,229.802 1160.74,230.137 1161.3,231.512 1161.87,232.655 1162.44,234.737 1163.01,235.705 1163.58,235.486 1164.15,233.011 1164.71,232.129 1165.28,231.153 1165.85,230.3 1166.42,231.451 1166.99,231.512 1167.56,234.682 1168.12,236.692 1168.69,235.414 1169.26,236.379 1169.83,233.125 1170.4,232.879 1170.97,234.022 1171.53,236.084 1172.1,235.869 1172.67,235.812 1173.24,234.388 1173.81,232.283 1174.38,228.966 1174.94,232.376 1175.51,233.259 1176.08,233.924 1176.65,235.871 1177.22,233.685 1177.79,231.532 1178.35,232.571 1178.92,231.506 1179.49,233.491 1180.06,233.324 1180.63,234.241 1181.2,234.139 1181.76,234.042 1182.33,233.771 1182.9,234.43 1183.47,231.096 1184.04,228.92 1184.61,228.852 1185.17,230.001 1185.74,231.033 1186.31,231.085 1186.88,230.036 1187.45,233.096 1188.02,236.068 1188.58,235.671 1189.15,234.208 1189.72,233.873 1190.29,233.435 1190.86,234.329 1191.43,234.08 1192,234.89 1192.56,234.523 1193.13,234.25 1193.7,233.921 1194.27,231.581 1194.84,232.672 1195.41,230.447 1195.97,233.497 1196.54,232.14 1197.11,234.02 1197.68,235.694 1198.25,234.427 1198.82,233.944 1199.38,232.799 1199.95,231.457 1200.52,231.401 1201.09,232.359 1201.66,232.266 1202.23,234.139 1202.79,234.041 1203.36,231.823 1203.93,230.57 1204.5,229.487 1205.07,226.593 1205.64,226.866 1206.2,227.079 1206.77,226.277 1207.34,226.52 1207.91,228.857 1208.48,229.111 1209.05,230.199 1209.61,230.156 1210.18,232.245 1210.75,231.119 1211.32,230.981 1211.89,230.982 1212.46,230.936 1213.02,231.727 1213.59,231.743 1214.16,230.761 1214.73,229.764 1215.3,228.825 1215.87,227.979 1216.43,226.136 1217,226.483 1217.57,229.951 1218.14,228.134 1218.71,224.309 1219.28,225.797 1219.84,226.185 1220.41,226.617 1220.98,228.169 1221.55,229.782 1222.12,226.985 1222.69,226.364 1223.25,225.832 1223.82,226.252 1224.39,227.642 1224.96,225.99 1225.53,227.423 1226.1,229.032 1226.66,228.105 1227.23,229.359 1227.8,231.614 1228.37,233.668 1228.94,232.501 1229.51,231.319 1230.07,230.326 1230.64,231.561 1231.21,227.741 1231.78,231.091 1232.35,228.353 1232.92,229.997 1233.48,232.685 1234.05,231.805 1234.62,232.827 1235.19,232.505 1235.76,235.616 1236.33,236.425 1236.89,235.973 1237.46,235.468 1238.03,235.144 1238.6,234.003 1239.17,233.854 1239.74,234.631 1240.3,234.314 1240.87,237.222 1241.44,237.83 1242.01,235.369 1242.58,233.987 1243.15,233.981 1243.71,231.774 1244.28,232.699 1244.85,231.427 1245.42,232.506 1245.99,232.702 1246.56,231.625 1247.12,230.564 1247.69,233.715 1248.26,232.632 1248.83,233.513 1249.4,236.438 1249.97,235.098 1250.53,233.854 1251.1,232.428 1251.67,233.348 1252.24,231.114 1252.81,234.215 1253.38,231.88 1253.94,229.506 1254.51,229.563 1255.08,229.795 1255.65,230.915 1256.22,229.912 1256.79,232.035 1257.35,229.817 1257.92,228.69 1258.49,228.726 1259.06,227.878 1259.63,226.911 1260.2,228.228 1260.76,229.32 1261.33,228.308 1261.9,228.409 1262.47,226.644 1263.04,228.682 1263.61,227.756 1264.18,227.056 1264.74,228.311 1265.31,226.277 1265.88,226.783 1266.45,227.02 1267.02,229.381 1267.59,226.399 1268.15,226.62 1268.72,227.989 1269.29,228.255 1269.86,227.5 1270.43,228.027 1271,230.356 1271.56,231.357 1272.13,230.253 1272.7,232.334 1273.27,233.297 1273.84,233.313 1274.41,233.102 1274.97,235.109 1275.54,235.128 1276.11,234.993 1276.68,236.765 1277.25,237.219 1277.82,235.862 1278.38,232.342 1278.95,233.403 1279.52,232.251 1280.09,232.15 1280.66,230.871 1281.23,229.875 1281.79,229.972 1282.36,229.974 1282.93,231.965 1283.5,234.983 1284.07,232.503 1284.64,232.177 1285.2,234.03 1285.77,233.866 1286.34,233.705 1286.91,234.598 1287.48,232.999 1288.05,231.889 1288.61,230.991 1289.18,234.082 1289.75,233.824 1290.32,233.193 1290.89,232.968 1291.46,232.816 1292.02,231.682 1292.59,230.273 1293.16,230.273 1293.73,229.3 1294.3,229.5 1294.87,232.734 1295.43,232.476 1296,233.401 1296.57,234.323 1297.14,238.165 1297.71,238.529 1298.28,240.054 1298.84,241.179 1299.41,240.543 1299.98,239.825 1300.55,239.223 1301.12,236.6 1301.69,232.789 1302.25,230.423 1302.82,230.266 1303.39,230.217 1303.96,230.083 1304.53,229.838 1305.1,229.62 1305.66,229.536 1306.23,228.596 1306.8,229.675 1307.37,229.735 1307.94,229.78 1308.51,231.847 1309.07,231.766 1309.64,231.524 1310.21,231.344 1310.78,230.989 1311.35,228.759 1311.92,227.829 1312.48,226.946 1313.05,226.003 1313.62,224.153 1314.19,223.212 1314.76,227.78 1315.33,227.824 1315.89,228.19 1316.46,229.219 1317.03,229.207 1317.6,225.344 1318.17,225.954 1318.74,226.255 1319.3,228.673 1319.87,230.792 1320.44,229.837 1321.01,229.755 1321.58,230.713 1322.15,230.832 1322.71,230.77 1323.28,231.94 1323.85,231.898 1324.42,230.871 1324.99,231.922 1325.56,235.819 1326.12,234.236 1326.69,231.762 1327.26,231.426 1327.83,231.048 1328.4,229.926 1328.97,229.872 1329.53,227.105 1330.1,227.444 1330.67,230.814 1331.24,229.878 1331.81,229.987 1332.38,229.106 1332.94,231.376 1333.51,229.227 1334.08,230.379 1334.65,230.436 1335.22,230.331 1335.79,229.362 1336.36,227.427 1336.92,222.493 1337.49,221.988 1338.06,222.745 1338.63,222.444 1339.2,224.106 1339.77,223.956 1340.33,223.697 1340.9,224.018 1341.47,225.46 1342.04,225.779 1342.61,226.219 1343.18,226.671 1343.74,228.102 1344.31,227.255 1344.88,226.831 1345.45,228.353 1346.02,229.545 1346.59,229.709 1347.15,229.935 1347.72,229.936 1348.29,230.104 1348.86,232.348 1349.43,231.296 1350,231.303 1350.56,230.43 1351.13,231.445 1351.7,232.31 1352.27,233.381 1352.84,235.261 1353.41,235.214 1353.97,237.178 1354.54,238.724 1355.11,238.2 1355.68,235.676 1356.25,234.533 1356.82,234.307 1357.38,233.199 1357.95,233.948 1358.52,233.653 1359.09,234.479 1359.66,234.179 1360.23,232.056 1360.79,231.82 1361.36,232.734 1361.93,232.681 1362.5,231.629 1363.07,231.482 1363.64,230.66 1364.2,228.92 1364.77,229.356 1365.34,228.658 1365.91,229.768 1366.48,229.777 1367.05,229.891 1367.61,228.029 1368.18,227.28 1368.75,227.63 1369.32,230.039 1369.89,233.104 1370.46,232.979 1371.02,230.798 1371.59,229.75 1372.16,227.635 1372.73,226.914 1373.3,229.351 1373.87,230.74 1374.43,230.82 1375,231.857 1375.57,228.832 1376.14,227.858 1376.71,229.278 1377.28,231.531 1377.84,231.349 1378.41,230.277 1378.98,231.513 1379.55,233.663 1380.12,233.831 1380.69,232.67 1381.25,234.771 1381.82,232.48 1382.39,232.38 1382.96,232.297 1383.53,232.233 1384.1,232.041 1384.66,231.97 1385.23,231.12 1385.8,230.335 1386.37,229.066 1386.94,232.081 1387.51,230.85 1388.07,230.884 1388.64,230.832 1389.21,232.807 1389.78,232.611 1390.35,232.667 1390.92,233.58 1391.48,234.452 1392.05,236.336 1392.62,235.978 1393.19,235.667 1393.76,234.157 1394.33,234.874 1394.89,234.585 1395.46,234.056 1396.03,233.852 1396.6,232.763 1397.17,230.538 1397.74,230.481 1398.3,231.278 1398.87,231.535 1399.44,233.732 1400.01,233.453 1400.58,232.294 1401.15,234.467 1401.71,234.421 1402.28,232.039 1402.85,232.819 1403.42,232.419 1403.99,233.498 1404.56,234.338 1405.13,234.163 1405.69,235.063 1406.26,234.781 1406.83,236.483 1407.4,233.909 1407.97,234.411 1408.54,234.208 1409.1,230.516 1409.67,227.376 1410.24,227.284 1410.81,226.531 1411.38,227.626 1411.95,227.707 1412.51,227.923 1413.08,226.863 1413.65,227.105 1414.22,226.197 1414.79,226.603 1415.36,222.695 1415.92,221.163 1416.49,220.736 1417.06,221.161 1417.63,219.895 1418.2,220.815 1418.77,220.372 1419.33,222.144 1419.9,222.634 1420.47,225.186 1421.04,228.827 1421.61,231.238 1422.18,231.425 1422.74,231.437 1423.31,230.39 1423.88,229.572 1424.45,228.632 1425.02,228.868 1425.59,229.931 1426.15,230.201 1426.72,230.101 1427.29,230.049 1427.86,229.175 1428.43,231.493 1429,230.452 1429.56,231.582 1430.13,232.768 1430.7,230.714 1431.27,229.765 1431.84,224.881 1432.41,224.425 1432.97,226.103 1433.54,227.752 1434.11,230.199 1434.68,232.55 1435.25,234.66 1435.82,234.352 1436.38,236.14 1436.95,235.757 1437.52,235.511 1438.09,234.991 1438.66,236.844 1439.23,237.324 1439.79,237.009 1440.36,235.546 1440.93,241.38 1441.5,239.481 1442.07,239.903 1442.64,241.54 1443.2,241.915 1443.77,240.122 1444.34,236.414 1444.91,233.866 1445.48,232.484 1446.05,233.442 1446.61,233.133 1447.18,234.068 1447.75,234.027 1448.32,233.793 1448.89,233.427 1449.46,232.012 1450.02,230.683 1450.59,231.509 1451.16,230.637 1451.73,231.69 1452.3,231.399 1452.87,229.53 1453.43,229.558 1454,229.684 1454.57,226.653 1455.14,227.01 1455.71,228.367 1456.28,230.716 1456.84,232.879 1457.41,232.663 1457.98,232.473 1458.55,234.233 1459.12,232.064 1459.69,232.934 1460.25,233.889 1460.82,233.444 1461.39,232.227 1461.96,231.913 1462.53,231.669 1463.1,230.763 1463.66,229.76 1464.23,227.677 1464.8,227.894 1465.37,229.215 1465.94,230.233 1466.51,230.173 1467.07,232.299 1467.64,233.383 1468.21,233.206 1468.78,230.935 1469.35,230.701 1469.92,227.42 1470.48,226.722 1471.05,226.864 1471.62,226.186 1472.19,227.547 1472.76,227.829 1473.33,230.082 1473.89,228.04 1474.46,228.179 1475.03,229.389 1475.6,228.367 1476.17,229.767 1476.74,228.875 1477.31,230.133 1477.87,231.342 1478.44,229.269 1479.01,229.602 1479.58,229.517 1480.15,229.584 1480.72,230.645 1481.28,230.39 1481.85,230.58 1482.42,232.721 1482.99,230.469 1483.56,230.578 1484.13,231.77 1484.69,230.576 1485.26,227.457 1485.83,226.74 1486.4,228.929 1486.97,230.198 1487.54,230.302 1488.1,227.297 1488.67,226.685 1489.24,228.033 1489.81,227.162 1490.38,226.795 1490.95,226.31 1491.51,227.606 1492.08,228.042 1492.65,228.283 1493.22,229.464 1493.79,229.703 1494.36,231.019 1494.92,230.247 1495.49,226.116 1496.06,229.662 1496.63,230.8 1497.2,230.737 1497.77,230.705 1498.33,229.669 1498.9,230.795 1499.47,230.943 1500.04,230.804 1500.61,230.807 1501.18,231.969 1501.74,231.924 1502.31,233.005 1502.88,232.733 1503.45,232.516 1504.02,230.436 1504.59,230.456 1505.15,229.718 1505.72,228.018 1506.29,227.377 1506.86,228.846 1507.43,230.224 1508,232.613 1508.56,231.614 1509.13,234.73 1509.7,236.574 1510.27,235.008 1510.84,233.728 1511.41,234.765 1511.97,233.742 1512.54,233.769 1513.11,232.726 1513.68,232.649 1514.25,230.562 1514.82,231.661 1515.38,230.775 1515.95,229.767 1516.52,227.901 1517.09,230.263 1517.66,231.355 1518.23,230.471 1518.79,228.51 1519.36,229.635 1519.93,229.676 1520.5,229.801 1521.07,231.852 1521.64,230.588 1522.2,229.438 1522.77,230.775 1523.34,231.987 1523.91,233.423 1524.48,235.378 1525.05,234.133 1525.61,231.912 1526.18,233.078 1526.75,229.897 1527.32,230.206 1527.89,230.545 1528.46,230.38 1529.02,230.44 1529.59,232.621 1530.16,232.577 1530.73,233.46 1531.3,232.283 1531.87,234.51 1532.43,235.214 1533,236.045 1533.57,235.92 1534.14,236.636 1534.71,233.948 1535.28,233.773 1535.84,233.697 1536.41,234.393 1536.98,234.131 1537.55,231.806 1538.12,230.67 1538.69,230.673 1539.25,230.607 1539.82,232.898 1540.39,232.763 1540.96,234.765 1541.53,235.453 1542.1,234.956 1542.66,234.51 1543.23,234.17 1543.8,236.008 1544.37,235.514 1544.94,234.243 1545.51,233.912 1546.08,234.817 1546.64,234.526 1547.21,233.144 1547.78,232.862 1548.35,232.635 1548.92,231.417 1549.49,232.286 1550.05,229.78 1550.62,228.739 1551.19,231.795 1551.76,233.875 1552.33,234.654 1552.9,233.449 1553.46,232.12 1554.03,233.084 1554.6,231.834 1555.17,230.968 1555.74,231.896 1556.31,230.959 1556.87,231.929 1557.44,232.929 1558.01,232.54 1558.58,233.68 1559.15,234.349 1559.72,232.904 1560.28,229.68 1560.85,226.623 1561.42,225.558 1561.99,226.842 1562.56,228.993 1563.13,230.123 1563.69,229.006 1564.26,228.115 1564.83,227.454 1565.4,227.694 1565.97,228.892 1566.54,229.161 1567.1,229.073 1567.67,227.932 1568.24,228.967 1568.81,227.992 1569.38,229.286 1569.95,228.487 1570.51,229.605 1571.08,230.731 1571.65,233.672 1572.22,233.315 1572.79,232.994 1573.36,232.964 1573.92,230.572 1574.49,228.367 1575.06,227.684 1575.63,230.049 1576.2,229.963 1576.77,228.899 1577.33,229.097 1577.9,225.989 1578.47,225.301 1579.04,225.664 1579.61,224.106 1580.18,224.665 1580.74,227.222 1581.31,227.507 1581.88,227.632 1582.45,226.97 1583.02,226.459 1583.59,226.804 1584.15,231.098 1584.72,230.263 1585.29,230.517 1585.86,232.679 1586.43,231.684 1587,231.659 1587.56,231.585 1588.13,231.469 1588.7,232.461 1589.27,232.479 1589.84,231.342 1590.41,231.11 1590.97,230.001 1591.54,232.97 1592.11,232.997 1592.68,232.707 1593.25,232.656 1593.82,232.619 1594.38,233.289 1594.95,230.14 1595.52,232.413 1596.09,233.17 1596.66,232.045 1597.23,232.083 1597.79,232.936 1598.36,232.753 1598.93,231.671 1599.5,233.812 1600.07,232.45 1600.64,233.36 1601.2,232.997 1601.77,232.678 1602.34,228.415 1602.91,225.425 1603.48,223.646 1604.05,223.184 1604.61,222.771 1605.18,224.306 1605.75,225.9 1606.32,227.253 1606.89,227.338 1607.46,226.553 1608.02,226.886 1608.59,229.088 1609.16,230.307 1609.73,232.491 1610.3,233.391 1610.87,233.29 1611.43,234.202 1612,234.176 1612.57,234.211 1613.14,231.811 1613.71,231.69 1614.28,231.633 1614.84,231.414 1615.41,232.541 1615.98,232.431 1616.55,228.375 1617.12,227.537 1617.69,229.02 1618.26,228.243 1618.82,226.38 1619.39,228.848 1619.96,227.001 1620.53,228.325 1621.1,229.717 1621.67,229.929 1622.23,231.217 1622.8,231.119 1623.37,231.325 1623.94,231.178 1624.51,229.086 1625.08,228.19 1625.64,229.292 1626.21,228.593 1626.78,226.671 1627.35,227.189 1627.92,227.64 1628.49,226.937 1629.05,229.306 1629.62,230.399 1630.19,227.486 1630.76,230.827 1631.33,232.055 1631.9,233.055 1632.46,233.791 1633.03,234.518 1633.6,237.43 1634.17,235.008 1634.74,235.946 1635.31,236.897 1635.87,237.917 1636.44,237.426 1637.01,235.962 1637.58,232.306 1638.15,237.498 1638.72,235.075 1639.28,232.853 1639.85,229.611 1640.42,230.798 1640.99,230.774 1641.56,230.944 1642.13,230.921 1642.69,232.061 1643.26,229.739 1643.83,230.933 1644.4,231.739 1644.97,231.859 1645.54,232.204 1646.1,233.266 1646.67,233.286 1647.24,234.26 1647.81,237.266 1648.38,238.064 1648.95,236.513 1649.51,237.049 1650.08,237.412 1650.65,238.039 1651.22,237.184 1651.79,234.729 1652.36,233.445 1652.92,232.231 1653.49,230.887 1654.06,230.745 1654.63,229.611 1655.2,230.581 1655.77,231.54 1656.33,229.527 1656.9,227.629 1657.47,227.745 1658.04,227.015 1658.61,229.334 1659.18,229.448 1659.74,230.54 1660.31,232.554 1660.88,231.345 1661.45,229.186 1662.02,230.389 1662.59,230.404 1663.15,229.567 1663.72,228.67 1664.29,231.023 1664.86,229.794 1665.43,230.65 1666,229.455 1666.56,229.475 1667.13,229.594 1667.7,228.728 1668.27,228.97 1668.84,228.361 1669.41,231.615 1669.97,230.317 1670.54,230.394 1671.11,233.508 1671.68,234.099 1672.25,233.798 1672.82,233.623 1673.38,235.508 1673.95,234.974 1674.52,234.501 1675.09,233.001 1675.66,232.725 1676.23,229.584 1676.79,229.451 1677.36,232.628 1677.93,234.174 1678.5,234.133 1679.07,234.032 1679.64,233.844 1680.2,232.674 1680.77,234.416 1681.34,234.283 1681.91,236.168 1682.48,235.696 1683.05,235.39 1683.61,236.051 1684.18,235.478 1684.75,235.015 1685.32,235.484 1685.89,236.225 1686.46,234.631 1687.02,233.343 1687.59,233.992 1688.16,232.682 1688.73,232.195 1689.3,231.935 1689.87,232.721 1690.44,232.457 1691,230.207 1691.57,231.319 1692.14,230.238 1692.71,231.067 1693.28,230.091 1693.85,229.768 1694.41,230.956 1694.98,229.875 1695.55,230.085 1696.12,230.038 1696.69,230.222 1697.26,229.137 1697.82,224.87 1698.39,227.275 1698.96,225.616 1699.53,225.861 1700.1,227.189 1700.67,223.155 1701.23,222.512 1701.8,222.981 1702.37,223.372 1702.94,224.823 1703.51,225.409 1704.08,227.864 1704.64,228.056 1705.21,225.051 1705.78,226.661 1706.35,229.055 1706.92,230.218 1707.49,230.152 1708.05,230.266 1708.62,231.484 1709.19,231.319 1709.76,230.384 1710.33,228.251 1710.9,228.271 1711.46,226.563 1712.03,226.849 1712.6,229.328 1713.17,230.462 1713.74,231.592 1714.31,231.683 1714.87,231.845 1715.44,231.936 1716.01,230.916 1716.58,231.025 1717.15,229.95 1717.72,227.036 1718.28,226.954 1718.85,229.32 1719.42,229.431 1719.99,229.733 1720.56,228.711 1721.13,229.781 1721.69,230.983 1722.26,230.018 1722.83,230.074 1723.4,232.061 1723.97,232.064 1724.54,231.053 1725.1,232.181 1725.67,233.419 1726.24,231.093 1726.81,232.046 1727.38,232.087 1727.95,230.123 1728.51,228.235 1729.08,230.421 1729.65,229.358 1730.22,228.446 1730.79,225.467 1731.36,223.99 1731.92,224.627 1732.49,225.19 1733.06,228.907 1733.63,230.03 1734.2,232.156 1734.77,230.142 1735.33,230.254 1735.9,229.311 1736.47,230.488 1737.04,229.636 1737.61,229.709 1738.18,229.682 1738.74,228.672 1739.31,228.975 1739.88,228.059 1740.45,230.525 1741.02,231.688 1741.59,230.8 1742.15,230.882 1742.72,231.049 1743.29,231.094 1743.86,233.202 1744.43,233.182 1745,234.305 1745.56,236.997 1746.13,234.43 1746.7,234.129 1747.27,231.777 1747.84,230.561 1748.41,231.571 1748.97,231.591 1749.54,231.785 1750.11,233.776 1750.68,233.762 1751.25,231.622 1751.82,232.614 1752.38,234.751 1752.95,234.376 1753.52,233.231 1754.09,234.044 1754.66,232.873 1755.23,234.876 1755.79,233.473 1756.36,232.34 1756.93,232.314 1757.5,232.443 1758.07,232.31 1758.64,233.321 1759.21,235.013 1759.77,234.618 1760.34,234.143 1760.91,232.583 1761.48,232.414 1762.05,232.211 1762.62,231.031 1763.18,229.985 1763.75,231.091 1764.32,233.846 1764.89,234.837 1765.46,234.263 1766.03,232.954 1766.59,231.728 1767.16,231.828 1767.73,232.77 1768.3,231.675 1768.87,229.597 1769.44,229.826 1770,229.027 1770.57,228.856 1771.14,227.948 1771.71,228.186 1772.28,230.585 1772.85,230.578 1773.41,231.529 1773.98,230.581 1774.55,230.517 1775.12,230.52 1775.69,227.302 1776.26,225.436 1776.82,225.853 1777.39,226.346 1777.96,227.718 1778.53,228.8 1779.1,229.874 1779.67,230.836 1780.23,231.907 1780.8,231.801 1781.37,229.981 1781.94,230.141 1782.51,232.436 1783.08,232.471 1783.64,232.299 1784.21,233.273 1784.78,234.24 1785.35,234.097 1785.92,232.933 1786.49,231.882 1787.05,231.889 1787.62,234.111 1788.19,232.934 1788.76,233.823 1789.33,232.594 1789.9,232.636 1790.46,232.543 1791.03,233.569 1791.6,234.098 1792.17,233.856 1792.74,233.738 1793.31,233.46 1793.87,233.391 1794.44,233.02 1795.01,231.739 1795.58,230.784 1796.15,230.79 1796.72,231.997 1797.28,231.882 1797.85,231.728 1798.42,233.847 1798.99,233.691 1799.56,231.44 1800.13,232.367 1800.69,232.307 1801.26,232.286 1801.83,234.335 1802.4,231.074 1802.97,231.767 1803.54,233.821 1804.1,232.421 1804.67,233.28 1805.24,234.981 1805.81,232.424 1806.38,232.185 1806.95,231.994 1807.51,230.47 1808.08,230.511 1808.65,229.459 1809.22,227.485 1809.79,227.455 1810.36,229.699 1810.92,227.709 1811.49,227.916 1812.06,230.05 1812.63,231.027 1813.2,232.936 1813.77,233.928 1814.33,233.645 1814.9,232.226 1815.47,232.035 1816.04,233.942 1816.61,232.542 1817.18,229.356 1817.74,227.561 1818.31,227.939 1818.88,227.101 1819.45,228.581 1820.02,229.689 1820.59,229.886 1821.15,230.023 1821.72,231.214 1822.29,233.394 1822.86,232.231 1823.43,227.923 1824,227.039 1824.56,227.239 1825.13,226.355 1825.7,226.709 1826.27,225.894 1826.84,225.044 1827.41,225.53 1827.97,225.772 1828.54,226.29 1829.11,225.5 1829.68,226.061 1830.25,227.534 1830.82,225.649 1831.39,227.187 1831.95,226.362 1832.52,226.784 1833.09,230.164 1833.66,231.426 1834.23,231.453 1834.8,231.552 1835.36,232.751 1835.93,230.596 1836.5,232.672 1837.07,233.448 1837.64,234.242 1838.21,231.853 1838.77,229.85 1839.34,232.954 1839.91,232.675 1840.48,232.539 1841.05,234.463 1841.62,234.075 1842.18,233.867 1842.75,231.729 1843.32,230.687 1843.89,229.629 1844.46,228.669 1845.03,229.099 1845.59,226.199 1846.16,225.365 1846.73,226.791 1847.3,226.099 1847.87,229.333 1848.44,228.713 1849,229.669 1849.57,228.399 1850.14,228.825 1850.71,228.108 1851.28,228.349 1851.85,228.475 1852.41,228.621 1852.98,226.896 1853.55,226.173 1854.12,224.759 1854.69,223.389 1855.26,224.032 1855.82,224.519 1856.39,225.954 1856.96,228.7 1857.53,229.9 1858.1,228.005 1858.67,227.286 1859.23,228.731 1859.8,229.167 1860.37,225.161 1860.94,224.695 1861.51,224.281 1862.08,224.93 1862.64,224.585 1863.21,227.296 1863.78,227.905 1864.35,226.273 1864.92,227.84 1865.49,228.237 1866.05,228.588 1866.62,231.149 1867.19,229.08 1867.76,230.305 1868.33,230.532 1868.9,233.893 1869.46,234.015 1870.03,234.038 1870.6,235.881 1871.17,235.61 1871.74,236.283 1872.31,236.229 1872.87,238.064 1873.44,239.888 1874.01,239.351 1874.58,241.007 1875.15,241.417 1875.72,240.747 1876.28,241.072 1876.85,241.658 1877.42,240.857 1877.99,241.231 1878.56,241.59 1879.13,239.671 1879.69,236.994 1880.26,238.486 1880.83,237.122 1881.4,236.581 1881.97,235.154 1882.54,232.643 1883.1,233.49 1883.67,233.261 1884.24,232.99 1884.81,232.859 1885.38,230.569 1885.95,229.686 1886.51,230.71 1887.08,230.627 1887.65,229.499 1888.22,231.527 1888.79,231.552 1889.36,231.527 1889.92,231.628 1890.49,233.529 1891.06,233.476 1891.63,234.237 1892.2,233.834 1892.77,231.572 1893.33,230.299 1893.9,230.342 1894.47,232.48 1895.04,233.469 1895.61,233.352 1896.18,233.247 1896.74,231.163 1897.31,229.171 1897.88,229.151 1898.45,230.35 1899.02,232.334 1899.59,231.145 1900.16,230.764 1900.72,230.775 1901.29,230.658 1901.86,229.829 1902.43,229.792 1903,230.987 1903.57,232.709 1904.13,232.435 1904.7,231.418 1905.27,233.664 1905.84,233.325 1906.41,232.996 1906.98,233.535 1907.54,233.221 1908.11,230.717 1908.68,230.693 1909.25,226.834 1909.82,226.904 1910.39,228.058 1910.95,228.193 1911.52,227.349 1912.09,228.721 1912.66,229.788 1913.23,234.019 1913.8,235.814 1914.36,236.363 1914.93,235.982 1915.5,234.39 1916.07,233.208 1916.64,230.78 1917.21,229.762 1917.77,229.929 1918.34,230.892 1918.91,231.887 1919.48,229.651 1920.05,228.633 1920.62,231.76 1921.18,232.566 1921.75,230.342 1922.32,229.199 1922.89,228.321 1923.46,228.748 1924.03,225.601 1924.59,225.928 1925.16,229.356 1925.73,227.421 1926.3,228.488 1926.87,227.566 1927.44,228.836 1928,227.662 1928.57,228.991 1929.14,228.129 1929.71,229.309 1930.28,228.475 1930.85,229.934 1931.41,229.056 1931.98,228.32 1932.55,226.485 1933.12,228.912 1933.69,230.008 1934.26,229.039 1934.82,230.318 1935.39,231.397 1935.96,231.355 1936.53,230.419 1937.1,229.562 1937.67,228.568 1938.23,229.047 1938.8,228.132 1939.37,228.473 1939.94,226.57 1940.51,226.951 1941.08,227.112 1941.64,226.578 1942.21,226.916 1942.78,228.414 1943.35,229.613 1943.92,230.02 1944.49,229.116 1945.05,229.275 1945.62,228.396 1946.19,227.444 1946.76,229.935 1947.33,229.304 1947.9,231.518 1948.46,230.46 1949.03,231.408 1949.6,232.432 1950.17,233.329 1950.74,232.006 1951.31,232.103 1951.87,235.404 1952.44,234.893 1953.01,234.711 1953.58,233.397 1954.15,234.201 1954.72,232.794 1955.28,232.68 1955.85,234.524 1956.42,234.238 1956.99,235.995 1957.56,235.608 1958.13,234.32 1958.69,233.308 1959.26,233.392 1959.83,233.268 1960.4,233.446 1960.97,234.546 1961.54,233.074 1962.1,232.982 1962.67,229.797 1963.24,231.013 1963.81,229.704 1964.38,231.789 1964.95,231.473 1965.51,234.439 1966.08,234.376 1966.65,234.049 1967.22,232.951 1967.79,232.855 1968.36,233.636 1968.92,235.323 1969.49,234.852 1970.06,235.729 1970.63,237.181 1971.2,235.695 1971.77,236.508 1972.34,233.862 1972.9,233.582 1973.47,234.266 1974.04,233.024 1974.61,233.791 1975.18,234.713 1975.75,234.348 1976.31,232.096 1976.88,231.14 1977.45,231.073 1978.02,232.205 1978.59,229.978 1979.16,231.017 1979.72,230.844 1980.29,229.674 1980.86,229.805 1981.43,228.939 1982,227.974 1982.57,228.186 1983.13,227.017 1983.7,228.302 1984.27,228.398 1984.84,228.638 1985.41,227.723 1985.98,230.161 1986.54,228.002 1987.11,229.349 1987.68,230.479 1988.25,230.38 1988.82,228.351 1989.39,228.41 1989.95,228.456 1990.52,227.482 1991.09,226.862 1991.66,227.022 1992.23,229.303 1992.8,230.394 1993.36,230.329 1993.93,230.342 1994.5,232.396 1995.07,233.262 1995.64,234.158 1996.21,233.763 1996.77,233.671 1997.34,233.631 1997.91,235.418 1998.48,232.987 1999.05,230.587 1999.62,230.575 2000.18,228.362 2000.75,229.36 2001.32,228.377 2001.89,228.522 2002.46,225.555 2003.03,227.969 2003.59,228.111 2004.16,227.284 2004.73,228.489 2005.3,231.787 2005.87,228.551 2006.44,228.005 2007,232.47 2007.57,232.324 2008.14,233.447 2008.71,233.266 2009.28,233.167 2009.85,234.955 2010.41,235.649 2010.98,235.205 2011.55,234.887 2012.12,234.735 2012.69,234.348 2013.26,234.164 2013.82,233.729 2014.39,231.403 2014.96,231.487 2015.53,231.283 2016.1,231.006 2016.67,230.91 2017.23,230.834 2017.8,227.599 2018.37,228.64 2018.94,226.677 2019.51,226.96 2020.08,228.314 2020.64,228.426 2021.21,228.559 2021.78,228.639 2022.35,227.839 2022.92,227.08 2023.49,227.303 2024.05,222.7 2024.62,224.449 2025.19,226.073 2025.76,227.533 2026.33,225.705 2026.9,225.052 2027.46,225.425 2028.03,224.556 2028.6,225.95 2029.17,226.472 2029.74,225.596 2030.31,225.095 2030.87,227.551 2031.44,228.753 2032.01,229.879 2032.58,231.982 2033.15,233.1 2033.72,233.123 2034.28,232.955 2034.85,233.165 2035.42,230.982 2035.99,229.887 2036.56,232.216 2037.13,232.022 2037.69,231.231 2038.26,232.455 2038.83,234.338 2039.4,233.152 2039.97,231.104 2040.54,232.147 2041.11,228.112 2041.67,230.496 2042.24,231.597 2042.81,232.579 2043.38,233.694 2043.95,235.549 2044.52,239.401 2045.08,238.85 2045.65,237.538 2046.22,236.985 2046.79,236.749 2047.36,237.582 2047.93,238.041 2048.49,237.507 2049.06,238.998 2049.63,238.194 2050.2,237.748 2050.77,237.252 2051.34,235.587 2051.9,235.013 2052.47,233.657 2053.04,233.134 2053.61,232.894 2054.18,233.876 2054.75,233.808 2055.31,234.363 2055.88,234.003 2056.45,231.8 2057.02,231.602 2057.59,231.775 2058.16,233.893 2058.72,234.749 2059.29,235.556 2059.86,235.936 2060.43,235.451 2061,237.105 2061.57,235.602 2062.13,234.236 2062.7,233.873 2063.27,232.461 2063.84,231.063 2064.41,231.09 2064.98,231.151 2065.54,230.023 2066.11,229.963 2066.68,231.035 2067.25,231.74 2067.82,230.594 2068.39,229.742 2068.95,229.813 2069.52,229.592 2070.09,230.683 2070.66,227.546 2071.23,226.697 2071.8,225.867 2072.36,226.333 2072.93,224.628 2073.5,225.873 2074.07,225.168 2074.64,225.443 2075.21,226.812 2075.77,226.096 2076.34,227.202 2076.91,227.441 2077.48,227.844 2078.05,227.893 2078.62,227.028 2079.18,227.468 2079.75,226.849 2080.32,226.084 2080.89,224.349 2081.46,223.62 2082.03,221.813 2082.59,222.29 2083.16,224.925 2083.73,227.218 2084.3,229.693 2084.87,228.661 2085.44,228.552 2086,225.793 2086.57,225.153 2087.14,226.674 2087.71,225.768 2088.28,225.401 2088.85,224.775 2089.41,224.289 2089.98,223.031 2090.55,224.618 2091.12,227.07 2091.69,226.384 2092.26,228.108 2092.82,227.485 2093.39,228.851 2093.96,228.989 2094.53,229.308 2095.1,227.475 2095.67,227.787 2096.23,224.668 2096.8,224.327 2097.37,226.089 2097.94,228.706 2098.51,232.093 2099.08,230.179 2099.64,229.407 2100.21,228.378 2100.78,226.741 2101.35,227.069 2101.92,229.494 2102.49,229.607 2103.05,229.813 2103.62,230.16 2104.19,231.252 2104.76,232.545 2105.33,231.641 2105.9,232.662 2106.46,229.877 2107.03,230.756 2107.6,230.914 2108.17,233.309 2108.74,237.337 2109.31,237.006 2109.87,237.754 2110.44,234.419 2111.01,232.275 2111.58,233.327 2112.15,232.189 2112.72,232.376 2113.29,231.234 2113.85,231.22 2114.42,232.472 2114.99,235.317 2115.56,234.185 2116.13,237.199 2116.7,238.999 2117.26,240.572 2117.83,239.902 2118.4,239.215 2118.97,238.822 2119.54,235.045 2120.11,235.728 2120.67,233.488 2121.24,233.072 2121.81,233.101 2122.38,231.826 2122.95,232.555 2123.52,234.54 2124.08,232.481 2124.65,229.5 2125.22,229.813 2125.79,229.986 2126.36,232.155 2126.93,232.068 2127.49,229.942 2128.06,231.08 2128.63,233.143 2129.2,233.076 2129.77,232.969 2130.34,233.912 2130.9,234.842 2131.47,234.52 2132.04,235.196 2132.61,234.46 2133.18,234.432 2133.75,234.986 2134.31,234.569 2134.88,234.522 2135.45,233.435 2136.02,234.148 2136.59,233.945 2137.16,232.587 2137.72,231.381 2138.29,231.439 2138.86,231.194 2139.43,231.083 2140,231.159 2140.57,231.128 2141.13,230.992 2141.7,233.07 2142.27,232.003 2142.84,228.863 2143.41,226.89 2143.98,227.06 2144.54,228.33 2145.11,228.469 2145.68,229.777 2146.25,227.718 2146.82,229.059 2147.39,229.406 2147.95,231.604 2148.52,234.688 2149.09,234.223 2149.66,235.078 2150.23,234.84 2150.8,235.548 2151.36,234.11 2151.93,232.965 2152.5,231.865 2153.07,230.936 2153.64,231.939 2154.21,231.713 2154.77,230.441 2155.34,230.427 2155.91,229.306 2156.48,229.336 2157.05,232.482 2157.62,234.284 2158.18,234.07 2158.75,233.66 2159.32,233.556 2159.89,234.128 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.021\n  with uncertainty of ± 0.001926871888258733\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0153 ± (0.0034886, 0.00384937) (MC)\n  95% confidence interval: [-4.0226, -4.00814]) (MC)\n  linear error propagation: -4.01563 ± 0.00365273\n  |δ_y| = |0.00201975| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015301941822934, val_l = 0.007298146212933787, val_u = 0.007164408897129881)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip700\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip701\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip700)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip702\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1116.95 2211.02,1116.95 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,939.071 2211.02,939.071 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,761.189 2211.02,761.189 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,583.307 2211.02,583.307 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,405.424 2211.02,405.424 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,227.542 2211.02,227.542 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1116.95 365.751,1116.95 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,939.071 365.751,939.071 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,761.189 365.751,761.189 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,583.307 365.751,583.307 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,405.424 365.751,405.424 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,227.542 365.751,227.542 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M298.909 1102.75 Q295.298 1102.75 293.469 1106.32 Q291.664 1109.86 291.664 1116.99 Q291.664 1124.09 293.469 1127.66 Q295.298 1131.2 298.909 1131.2 Q302.543 1131.2 304.349 1127.66 Q306.177 1124.09 306.177 1116.99 Q306.177 1109.86 304.349 1106.32 Q302.543 1102.75 298.909 1102.75 M298.909 1099.05 Q304.719 1099.05 307.775 1103.66 Q310.853 1108.24 310.853 1116.99 Q310.853 1125.72 307.775 1130.32 Q304.719 1134.91 298.909 1134.91 Q293.099 1134.91 290.02 1130.32 Q286.964 1125.72 286.964 1116.99 Q286.964 1108.24 290.02 1103.66 Q293.099 1099.05 298.909 1099.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M259.557 952.416 L267.196 952.416 L267.196 926.051 L258.886 927.717 L258.886 923.458 L267.15 921.791 L271.826 921.791 L271.826 952.416 L279.465 952.416 L279.465 956.351 L259.557 956.351 L259.557 952.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 924.87 Q295.298 924.87 293.469 928.435 Q291.664 931.977 291.664 939.106 Q291.664 946.213 293.469 949.777 Q295.298 953.319 298.909 953.319 Q302.543 953.319 304.349 949.777 Q306.177 946.213 306.177 939.106 Q306.177 931.977 304.349 928.435 Q302.543 924.87 298.909 924.87 M298.909 921.166 Q304.719 921.166 307.775 925.773 Q310.853 930.356 310.853 939.106 Q310.853 947.833 307.775 952.439 Q304.719 957.023 298.909 957.023 Q293.099 957.023 290.02 952.439 Q286.964 947.833 286.964 939.106 Q286.964 930.356 290.02 925.773 Q293.099 921.166 298.909 921.166 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M262.775 774.534 L279.094 774.534 L279.094 778.469 L257.15 778.469 L257.15 774.534 Q259.812 771.779 264.395 767.15 Q269.002 762.497 270.182 761.154 Q272.428 758.631 273.307 756.895 Q274.21 755.136 274.21 753.446 Q274.21 750.691 272.266 748.955 Q270.344 747.219 267.242 747.219 Q265.043 747.219 262.59 747.983 Q260.159 748.747 257.381 750.298 L257.381 745.576 Q260.205 744.441 262.659 743.863 Q265.113 743.284 267.15 743.284 Q272.52 743.284 275.715 745.969 Q278.909 748.654 278.909 753.145 Q278.909 755.275 278.099 757.196 Q277.312 759.094 275.205 761.687 Q274.627 762.358 271.525 765.576 Q268.423 768.77 262.775 774.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 746.988 Q295.298 746.988 293.469 750.553 Q291.664 754.094 291.664 761.224 Q291.664 768.33 293.469 771.895 Q295.298 775.437 298.909 775.437 Q302.543 775.437 304.349 771.895 Q306.177 768.33 306.177 761.224 Q306.177 754.094 304.349 750.553 Q302.543 746.988 298.909 746.988 M298.909 743.284 Q304.719 743.284 307.775 747.891 Q310.853 752.474 310.853 761.224 Q310.853 769.951 307.775 774.557 Q304.719 779.14 298.909 779.14 Q293.099 779.14 290.02 774.557 Q286.964 769.951 286.964 761.224 Q286.964 752.474 290.02 747.891 Q293.099 743.284 298.909 743.284 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M272.914 581.953 Q276.27 582.67 278.145 584.939 Q280.043 587.207 280.043 590.54 Q280.043 595.656 276.525 598.457 Q273.006 601.258 266.525 601.258 Q264.349 601.258 262.034 600.818 Q259.742 600.402 257.289 599.545 L257.289 595.031 Q259.233 596.165 261.548 596.744 Q263.863 597.323 266.386 597.323 Q270.784 597.323 273.076 595.587 Q275.39 593.851 275.39 590.54 Q275.39 587.485 273.238 585.772 Q271.108 584.036 267.289 584.036 L263.261 584.036 L263.261 580.193 L267.474 580.193 Q270.923 580.193 272.752 578.828 Q274.58 577.439 274.58 574.846 Q274.58 572.184 272.682 570.772 Q270.807 569.337 267.289 569.337 Q265.367 569.337 263.168 569.754 Q260.969 570.17 258.33 571.05 L258.33 566.883 Q260.992 566.142 263.307 565.772 Q265.645 565.402 267.705 565.402 Q273.029 565.402 276.131 567.832 Q279.233 570.24 279.233 574.36 Q279.233 577.23 277.59 579.221 Q275.946 581.189 272.914 581.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 569.105 Q295.298 569.105 293.469 572.67 Q291.664 576.212 291.664 583.341 Q291.664 590.448 293.469 594.013 Q295.298 597.554 298.909 597.554 Q302.543 597.554 304.349 594.013 Q306.177 590.448 306.177 583.341 Q306.177 576.212 304.349 572.67 Q302.543 569.105 298.909 569.105 M298.909 565.402 Q304.719 565.402 307.775 570.008 Q310.853 574.591 310.853 583.341 Q310.853 592.068 307.775 596.675 Q304.719 601.258 298.909 601.258 Q293.099 601.258 290.02 596.675 Q286.964 592.068 286.964 583.341 Q286.964 574.591 290.02 570.008 Q293.099 565.402 298.909 565.402 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M271.594 392.218 L259.789 410.667 L271.594 410.667 L271.594 392.218 M270.367 388.144 L276.247 388.144 L276.247 410.667 L281.177 410.667 L281.177 414.556 L276.247 414.556 L276.247 422.704 L271.594 422.704 L271.594 414.556 L255.992 414.556 L255.992 410.042 L270.367 388.144 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 391.223 Q295.298 391.223 293.469 394.788 Q291.664 398.329 291.664 405.459 Q291.664 412.566 293.469 416.13 Q295.298 419.672 298.909 419.672 Q302.543 419.672 304.349 416.13 Q306.177 412.566 306.177 405.459 Q306.177 398.329 304.349 394.788 Q302.543 391.223 298.909 391.223 M298.909 387.519 Q304.719 387.519 307.775 392.126 Q310.853 396.709 310.853 405.459 Q310.853 414.186 307.775 418.792 Q304.719 423.376 298.909 423.376 Q293.099 423.376 290.02 418.792 Q286.964 414.186 286.964 405.459 Q286.964 396.709 290.02 392.126 Q293.099 387.519 298.909 387.519 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M258.793 210.262 L277.15 210.262 L277.15 214.197 L263.076 214.197 L263.076 222.669 Q264.094 222.322 265.113 222.16 Q266.131 221.975 267.15 221.975 Q272.937 221.975 276.316 225.146 Q279.696 228.317 279.696 233.734 Q279.696 239.313 276.224 242.415 Q272.752 245.493 266.432 245.493 Q264.256 245.493 261.988 245.123 Q259.742 244.753 257.335 244.012 L257.335 239.313 Q259.418 240.447 261.641 241.003 Q263.863 241.558 266.34 241.558 Q270.344 241.558 272.682 239.452 Q275.02 237.345 275.02 233.734 Q275.02 230.123 272.682 228.017 Q270.344 225.91 266.34 225.91 Q264.465 225.91 262.59 226.327 Q260.738 226.743 258.793 227.623 L258.793 210.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M298.909 213.341 Q295.298 213.341 293.469 216.905 Q291.664 220.447 291.664 227.577 Q291.664 234.683 293.469 238.248 Q295.298 241.79 298.909 241.79 Q302.543 241.79 304.349 238.248 Q306.177 234.683 306.177 227.577 Q306.177 220.447 304.349 216.905 Q302.543 213.341 298.909 213.341 M298.909 209.637 Q304.719 209.637 307.775 214.243 Q310.853 218.827 310.853 227.577 Q310.853 236.304 307.775 240.91 Q304.719 245.493 298.909 245.493 Q293.099 245.493 290.02 240.91 Q286.964 236.304 286.964 227.577 Q286.964 218.827 290.02 214.243 Q293.099 209.637 298.909 209.637 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip702)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1250.53 400.199,1115.96 400.786,1216.29 401.372,1093.07 401.958,982.463 402.545,872.898 403.131,774.672 403.718,687.334 404.304,605.867 404.891,535.007 405.477,552.992 406.063,486.825 406.65,428.127 407.236,371.918 407.823,321.22 408.409,275.676 408.995,302.705 409.582,322.229 410.168,339.883 410.755,306.606 411.341,273.357 411.927,244.992 412.514,219.895 413.1,279.647 413.687,256.634 414.273,274.351 414.86,289.237 415.446,303.672 416.032,288.241 416.619,275.295 417.205,264.4 417.792,255.441 418.378,295.739 418.964,289.692 419.551,285.735 420.137,284.156 420.724,283.455 421.31,303.204 421.896,321.488 422.483,322.598 423.069,324.201 423.656,341.632 424.242,359.634 424.829,364.304 425.415,394.089 426.001,411.4 426.588,427.562 427.174,472.701 427.761,495.072 428.347,543.148 428.933,562.459 429.52,580.029 430.106,589.726 430.693,591.818 431.279,608.499 431.865,611.732 432.452,622.449 433.038,631.168 433.625,641.783 434.211,669.896 434.798,673.511 435.384,689.391 435.97,709.621 436.557,728.038 437.143,740.75 437.73,743.007 438.316,750.652 438.902,758.506 439.489,766.333 440.075,778.214 440.662,781.68 441.248,789.871 441.835,797.376 442.421,816.643 443.007,824.176 443.594,831.704 444.18,839.277 444.767,847.328 445.353,858.809 445.939,863.124 446.526,870.667 447.112,878.666 447.699,889.369 448.285,900.117 448.871,904.352 449.458,911.724 450.044,922.166 450.631,929.343 451.217,942.024 451.804,949.102 452.39,953.49 452.976,965.738 453.563,971.92 454.149,980.725 454.736,984.237 455.322,992.631 455.908,996.365 456.495,1004.67 457.081,1010.28 457.668,1020.35 458.254,1023.95 458.84,1027.02 459.427,1034.95 460.013,1042.22 460.6,1053.93 461.186,1060.76 461.773,1067.89 462.359,1070.17 462.945,1072.49 463.532,1076.74 464.118,1080.93 464.705,1087.25 465.291,1091.31 465.877,1095.06 466.464,1104.69 467.05,1108.42 467.637,1111.67 468.223,1111.78 468.809,1117.26 469.396,1120.59 469.982,1121.71 470.569,1128.65 471.155,1131.53 471.742,1134.69 472.328,1137.34 472.914,1142.1 473.501,1148.33 474.087,1149.18 474.674,1146.55 475.26,1154.58 475.846,1155.19 476.433,1154.13 477.019,1155.04 477.606,1161.11 478.192,1161.71 478.778,1170.72 479.365,1170.94 479.951,1176.23 480.538,1178.02 481.124,1181.33 481.711,1179.67 482.297,1182.98 482.883,1184.35 483.47,1185.89 484.056,1188.69 484.643,1191.56 485.229,1192.85 485.815,1195.62 486.402,1196.61 486.988,1192.48 487.575,1194.02 488.161,1195.22 488.748,1195.21 489.334,1194.86 489.92,1196.22 490.507,1197.61 491.093,1196.75 491.68,1198.08 492.266,1199.6 492.852,1200.86 493.439,1200.48 494.025,1201.8 494.612,1202.78 495.198,1200.68 495.784,1203.66 496.371,1203.17 496.957,1203.03 497.544,1207.46 498.13,1208.73 498.717,1208.19 499.303,1209.15 499.889,1209.98 500.476,1210.75 501.062,1211.57 501.649,1210.79 502.235,1208.77 502.821,1209.67 503.408,1211.76 503.994,1209.28 504.581,1204.31 505.167,1205.93 505.753,1204.09 506.34,1206.95 506.926,1209.52 507.513,1210.5 508.099,1207.03 508.686,1209.74 509.272,1206.45 509.858,1206.38 510.445,1204.72 511.031,1209.33 511.618,1208.81 512.204,1207.36 512.79,1208.54 513.377,1210.13 513.963,1209.79 514.55,1208.23 515.136,1209.42 515.722,1209.02 516.309,1210.32 516.895,1211.2 517.482,1210.96 518.068,1210.36 518.655,1205.81 519.241,1205.96 519.827,1208.86 520.414,1208.82 521,1205.81 521.587,1205.84 522.173,1208.97 522.759,1210.34 523.346,1209.93 523.932,1212.57 524.519,1212.1 525.105,1211.77 525.691,1212.81 526.278,1212.14 526.864,1216.48 527.451,1214.22 528.037,1216.5 528.624,1217.56 529.21,1218.45 529.796,1218.93 530.383,1218.32 530.969,1218.88 531.556,1216.8 532.142,1214.96 532.728,1214.73 533.315,1217.3 533.901,1215.02 534.488,1214.64 535.074,1217.2 535.661,1219.53 536.247,1215.75 536.833,1212.6 537.42,1213.82 538.006,1213.7 538.593,1217.76 539.179,1217.39 539.765,1215.36 540.352,1214.76 540.938,1214.23 541.525,1216.52 542.111,1215.81 542.697,1215.35 543.284,1214.74 543.87,1213 544.457,1215.38 545.043,1214.79 545.63,1215.51 546.216,1213.24 546.802,1213.9 547.389,1214.97 547.975,1217.36 548.562,1215.14 549.148,1214.36 549.734,1217.12 550.321,1214.79 550.907,1217.29 551.494,1215.26 552.08,1213.28 552.666,1214.44 553.253,1210.81 553.839,1207.27 554.426,1208.79 555.012,1205.32 555.599,1206.62 556.185,1209.27 556.771,1210.49 557.358,1210.26 557.944,1209.79 558.531,1211.08 559.117,1210.75 559.703,1211.89 560.29,1210.09 560.876,1206.8 561.463,1206.7 562.049,1207.67 562.635,1211.58 563.222,1211.14 563.808,1209.73 564.395,1206.29 564.981,1204.66 565.568,1204.67 566.154,1204.49 566.74,1204.3 567.327,1203.94 567.913,1204.89 568.5,1204.66 569.086,1204.57 569.672,1204.58 570.259,1201.71 570.845,1203.22 571.432,1203.22 572.018,1203.12 572.605,1206.23 573.191,1207.39 573.777,1211.41 574.364,1209.55 574.95,1209.27 575.537,1208.93 576.123,1211.26 576.709,1209.04 577.296,1213.01 577.882,1214.06 578.469,1211.72 579.055,1209.59 579.641,1209.19 580.228,1208.65 580.814,1208.09 581.401,1210.85 581.987,1210.21 582.574,1209.64 583.16,1209.13 583.746,1210.04 584.333,1209.62 584.919,1210.67 585.506,1210.19 586.092,1210.03 586.678,1211.12 587.265,1210.56 587.851,1214.65 588.438,1214.01 589.024,1214.67 589.61,1214 590.197,1213.37 590.783,1214.15 591.37,1213.67 591.956,1208.72 592.543,1205.18 593.129,1201.86 593.715,1200.58 594.302,1200.77 594.888,1196.46 595.475,1197.7 596.061,1197.73 596.647,1198 597.234,1199.24 597.82,1194.95 598.407,1196.92 598.993,1203.17 599.579,1201.5 600.166,1202.92 600.752,1201.34 601.339,1199.44 601.925,1200.91 602.512,1200.85 603.098,1203.64 603.684,1200.51 604.271,1200.36 604.857,1199.03 605.444,1197.62 606.03,1197.66 606.616,1200.44 607.203,1201.99 607.789,1203.28 608.376,1202.72 608.962,1202.94 609.548,1202.78 610.135,1203.96 610.721,1201.04 611.308,1199.45 611.894,1202.36 612.481,1203.5 613.067,1203.15 613.653,1202.67 614.24,1202.28 614.826,1203.52 615.413,1203.28 615.999,1203.02 616.585,1204.1 617.172,1202.22 617.758,1200.52 618.345,1201.72 618.931,1201.42 619.518,1202.44 620.104,1203.58 620.69,1203.16 621.277,1201.15 621.863,1197.97 622.45,1198.15 623.036,1199.37 623.622,1200.88 624.209,1199.15 624.795,1196.58 625.382,1198.04 625.968,1200.86 626.554,1200.83 627.141,1199.05 627.727,1200.25 628.314,1198.82 628.9,1198.71 629.487,1198.69 630.073,1200.1 630.659,1199.94 631.246,1201.04 631.832,1203.66 632.419,1199.16 633.005,1199.07 633.591,1199.29 634.178,1199.15 634.764,1197.25 635.351,1200.41 635.937,1200.07 636.523,1201.78 637.11,1201.44 637.696,1203.98 638.283,1203.7 638.869,1203.2 639.456,1201.22 640.042,1200.82 640.628,1200.45 641.215,1200.15 641.801,1202.63 642.388,1201.01 642.974,1199.59 643.56,1202.34 644.147,1201.92 644.733,1200.06 645.32,1199.64 645.906,1199.49 646.492,1196.32 647.079,1196.37 647.665,1196.48 648.252,1195.19 648.838,1192.32 649.425,1192.5 650.011,1192.89 650.597,1194.32 651.184,1195.96 651.77,1196.21 652.357,1193.1 652.943,1191.69 653.529,1193.22 654.116,1196.6 654.702,1195.19 655.289,1193.34 655.875,1196.26 656.462,1196.07 657.048,1196.27 657.634,1196.3 658.221,1196.24 658.807,1196.34 659.394,1194.63 659.98,1197.77 660.566,1197.68 661.153,1197.61 661.739,1200.09 662.326,1199.87 662.912,1195.27 663.498,1197.05 664.085,1196.87 664.671,1201.2 665.258,1201.06 665.844,1200.51 666.431,1201.8 667.017,1203.02 667.603,1201.13 668.19,1202.3 668.776,1203.56 669.363,1201.39 669.949,1202.43 670.535,1205.15 671.122,1201.64 671.708,1204.23 672.295,1203.76 672.881,1201.58 673.467,1201.07 674.054,1203.63 674.64,1203.11 675.227,1204.19 675.813,1204.1 676.4,1203.67 676.986,1201.76 677.572,1200.1 678.159,1198.19 678.745,1196.56 679.332,1195.15 679.918,1191.88 680.504,1193.33 681.091,1194.5 681.677,1195.55 682.264,1198.16 682.85,1197.89 683.436,1197.62 684.023,1195.94 684.609,1194.24 685.196,1194.19 685.782,1189.85 686.369,1190.03 686.955,1190.11 687.541,1191.67 688.128,1190.71 688.714,1190.83 689.301,1186.39 689.887,1186.65 690.473,1191.57 691.06,1191.84 691.646,1193.65 692.233,1192.23 692.819,1193.71 693.405,1195.18 693.992,1200.84 694.578,1201.7 695.165,1199.84 695.751,1198.04 696.338,1199.06 696.924,1197.19 697.51,1195.5 698.097,1196.76 698.683,1199.34 699.27,1200.57 699.856,1203.26 700.442,1202.97 701.029,1199.74 701.615,1199.46 702.202,1199 702.788,1195.89 703.375,1194.32 703.961,1198.52 704.547,1196.91 705.134,1195.24 705.72,1196.91 706.307,1196.93 706.893,1194.03 707.479,1192.52 708.066,1193.85 708.652,1191 709.239,1189.41 709.825,1190.89 710.411,1190.94 710.998,1192.58 711.584,1193.82 712.171,1190.97 712.757,1192.65 713.344,1191.16 713.93,1191.12 714.516,1193.15 715.103,1193.4 715.689,1193.41 716.276,1194.76 716.862,1193.19 717.448,1193.23 718.035,1196.22 718.621,1192.89 719.208,1191.39 719.794,1195.69 720.38,1192.71 720.967,1192.84 721.553,1188.79 722.14,1185.89 722.726,1187.78 723.313,1188.17 723.899,1192.92 724.485,1195.76 725.072,1195.71 725.658,1192.59 726.245,1189.8 726.831,1189.92 727.417,1191.27 728.004,1191.08 728.59,1189.63 729.177,1189.78 729.763,1189.77 730.349,1191.36 730.936,1185.28 731.522,1182.86 732.109,1185 732.695,1185.3 733.282,1185.7 733.868,1187.47 734.454,1189.09 735.041,1188.04 735.627,1188.39 736.214,1187.39 736.8,1189.24 737.386,1187.86 737.973,1188.09 738.559,1192.47 739.146,1195.24 739.732,1195.21 740.318,1194.86 740.905,1196.37 741.491,1196.39 742.078,1197.93 742.664,1197.51 743.251,1200.07 743.837,1199.76 744.423,1201.04 745.01,1202.22 745.596,1202.83 746.183,1203.77 746.769,1203.44 747.355,1201.38 747.942,1198.01 748.528,1199.04 749.115,1195.78 749.701,1197.24 750.288,1194.02 750.874,1193.9 751.46,1193.91 752.047,1195.08 752.633,1193.2 753.22,1189.95 753.806,1188.75 754.392,1187.55 754.979,1187.65 755.565,1187.85 756.152,1188.33 756.738,1191.25 757.324,1190.03 757.911,1187.38 758.497,1190.4 759.084,1189.11 759.67,1189.31 760.257,1189.67 760.843,1191.33 761.429,1191.26 762.016,1191.22 762.602,1192.78 763.189,1191.05 763.775,1189.64 764.361,1192.56 764.948,1191.24 765.534,1189.89 766.121,1189.86 766.707,1186.94 767.293,1185.54 767.88,1184.48 768.466,1186.44 769.053,1186.69 769.639,1188.21 770.226,1186.76 770.812,1188.46 771.398,1191.41 771.985,1191.39 772.571,1192.76 773.158,1191.3 773.744,1192.78 774.33,1192.79 774.917,1192.75 775.503,1192.59 776.09,1193.85 776.676,1193.94 777.262,1195.02 777.849,1197.76 778.435,1195.85 779.022,1192.81 779.608,1192.69 780.195,1194.1 780.781,1197 781.367,1195.55 781.954,1192.37 782.54,1192.53 783.127,1191.08 783.713,1192.27 784.299,1192.26 784.886,1190.87 785.472,1191.04 786.059,1190.97 786.645,1191.38 787.232,1191.43 787.818,1193.08 788.404,1197.11 788.991,1196.58 789.577,1194.9 790.164,1193.17 790.75,1191.73 791.336,1191.51 791.923,1191.45 792.509,1188.67 793.096,1191.88 793.682,1190.65 794.268,1192.32 794.855,1193.69 795.441,1193.6 796.028,1195.09 796.614,1194.78 797.201,1192 797.787,1194.74 798.373,1197.36 798.96,1195.5 799.546,1195.53 800.133,1196.77 800.719,1194.85 801.305,1193.15 801.892,1194.41 802.478,1195.58 803.065,1192.57 803.651,1192.46 804.237,1195.13 804.824,1195.17 805.41,1194.77 805.997,1194.33 806.583,1195.47 807.17,1196.6 807.756,1196.46 808.342,1197.64 808.929,1197.46 809.515,1196.94 810.102,1193.74 810.688,1193.63 811.274,1193.52 811.861,1193.3 812.447,1193.66 813.034,1191.81 813.62,1190.02 814.206,1191.5 814.793,1188.33 815.379,1188.28 815.966,1188.44 816.552,1188.44 817.139,1191.4 817.725,1189.91 818.311,1190.1 818.898,1191.75 819.484,1193.16 820.071,1191.31 820.657,1191.16 821.243,1191.1 821.83,1190.94 822.416,1192.44 823.003,1193.69 823.589,1193.05 824.175,1195.65 824.762,1193.87 825.348,1194.83 825.935,1195.74 826.521,1197.2 827.108,1195.69 827.694,1193.75 828.28,1193.46 828.867,1187.58 829.453,1186.45 830.04,1188.15 830.626,1189.78 831.212,1192.89 831.799,1194.42 832.385,1197.02 832.972,1193.73 833.558,1194.9 834.145,1194.47 834.731,1195.71 835.317,1195.4 835.904,1193.56 836.49,1193.35 837.077,1193.2 837.663,1194.64 838.249,1194.43 838.836,1191.52 839.422,1190.22 840.009,1189.98 840.595,1189.81 841.181,1190.01 841.768,1191.41 842.354,1192.92 842.941,1194.03 843.527,1193.92 844.114,1195.16 844.7,1195.08 845.286,1195.04 845.873,1193.68 846.459,1193.3 847.046,1193.05 847.632,1194.1 848.218,1192.67 848.805,1192.53 849.391,1189.6 849.978,1188.09 850.564,1189.31 851.15,1186.4 851.737,1188.18 852.323,1188.24 852.91,1188.4 853.496,1188.53 854.083,1187.32 854.669,1184.54 855.255,1184.84 855.842,1184.96 856.428,1185.48 857.015,1187.22 857.601,1188.86 858.187,1190.28 858.774,1191.37 859.36,1190.98 859.947,1192.34 860.533,1195.31 861.119,1195.25 861.706,1195.25 862.292,1196.53 862.879,1200.5 863.465,1199.72 864.052,1197.89 864.638,1198.77 865.224,1195.53 865.811,1196.85 866.397,1194.97 866.984,1193.5 867.57,1190.39 868.156,1191.99 868.743,1193.34 869.329,1191.51 869.916,1188.56 870.502,1185.41 871.089,1183.92 871.675,1185.73 872.261,1186.01 872.848,1183.24 873.434,1180.55 874.021,1182.23 874.607,1182.68 875.193,1184.24 875.78,1187.41 876.366,1189.11 876.953,1187.68 877.539,1187.51 878.125,1187.55 878.712,1186.49 879.298,1190.93 879.885,1189.3 880.471,1186.46 881.058,1184.99 881.644,1185.15 882.23,1184.18 882.817,1184.47 883.403,1186.08 883.99,1188.89 884.576,1184.79 885.162,1184.96 885.749,1189.85 886.335,1191.08 886.922,1188.03 887.508,1185.43 888.094,1185.88 888.681,1184.62 889.267,1184.57 889.854,1187.91 890.44,1192.29 891.027,1190.94 891.613,1190.82 892.199,1192.44 892.786,1189.6 893.372,1190.75 893.959,1186.35 894.545,1187.97 895.131,1186.47 895.718,1189.6 896.304,1189.34 896.891,1189.06 897.477,1189.33 898.063,1189.59 898.65,1192.6 899.236,1192.63 899.823,1193.93 900.409,1193.82 900.996,1193.62 901.582,1194.83 902.168,1196.26 902.755,1195.82 903.341,1197.27 903.928,1192.15 904.514,1192.03 905.1,1191.66 905.687,1189.75 906.273,1190.82 906.86,1192.23 907.446,1192.18 908.032,1192.13 908.619,1190.49 909.205,1194.4 909.792,1192.81 910.378,1189.75 910.965,1191.15 911.551,1188.46 912.137,1189.97 912.724,1190.24 913.31,1193.28 913.897,1193.06 914.483,1194.37 915.069,1193.91 915.656,1193.52 916.242,1191.97 916.829,1193.09 917.415,1192.72 918.002,1195.64 918.588,1187.93 919.174,1187.99 919.761,1189.61 920.347,1189.58 920.934,1191.23 921.52,1189.44 922.106,1191.13 922.693,1189.76 923.279,1189.91 923.866,1189.77 924.452,1191.25 925.038,1191.36 925.625,1191.17 926.211,1192.48 926.798,1187.88 927.384,1186.57 927.971,1184.1 928.557,1182.6 929.143,1184.15 929.73,1184.51 930.316,1186.22 930.903,1186.33 931.489,1185.19 932.075,1185.47 932.662,1185.8 933.248,1186.23 933.835,1186.33 934.421,1185.24 935.007,1184.12 935.594,1184.27 936.18,1183.08 936.767,1180.62 937.353,1179.34 937.94,1178.71 938.526,1177.95 939.112,1180.13 939.699,1181.99 940.285,1182.37 940.872,1184.07 941.458,1184.31 942.044,1187.35 942.631,1185.92 943.217,1186.14 943.804,1187.64 944.39,1186.13 944.976,1185.04 945.563,1189.63 946.149,1189.91 946.736,1190.02 947.322,1191.14 947.909,1189.63 948.495,1194.13 949.081,1193.97 949.668,1191.02 950.254,1187.84 950.841,1189.22 951.427,1187.5 952.013,1187.66 952.6,1189.36 953.186,1187.87 953.773,1185.18 954.359,1185.26 954.945,1187.02 955.532,1184.57 956.118,1184.73 956.705,1185.23 957.291,1185.63 957.878,1178.94 958.464,1179.54 959.05,1180.34 959.637,1178.22 960.223,1180.17 960.81,1184.94 961.396,1185.27 961.982,1184.08 962.569,1184.71 963.155,1186.43 963.742,1186.91 964.328,1189.43 964.915,1192.43 965.501,1192.23 966.087,1193.6 966.674,1196.26 967.26,1195.91 967.847,1197.08 968.433,1198.06 969.019,1197.61 969.606,1196.87 970.192,1198.03 970.779,1199 971.365,1196.85 971.951,1195.33 972.538,1197.82 973.124,1200.23 973.711,1199.61 974.297,1198.8 974.884,1198.15 975.47,1197.62 976.056,1197.53 976.643,1195.58 977.229,1197.92 977.816,1198.92 978.402,1194.29 978.988,1194.07 979.575,1195.16 980.161,1194.69 980.748,1197.24 981.334,1199.65 981.92,1195.95 982.507,1194.04 983.093,1193.51 983.68,1194.49 984.266,1194.49 984.853,1194.45 985.439,1197.31 986.025,1198.36 986.612,1199.4 987.198,1198.67 987.785,1199.66 988.371,1199.11 988.957,1198.57 989.544,1197.85 990.13,1195.9 990.717,1192.57 991.303,1193.94 991.889,1189.18 992.476,1192.1 993.062,1193.33 993.649,1194.49 994.235,1195.37 994.822,1195.15 995.408,1194.86 995.994,1191.55 996.581,1195.87 997.167,1192.63 997.754,1192.47 998.34,1192.24 998.926,1190.38 999.513,1191.98 1000.1,1189.01 1000.69,1190.45 1001.27,1191.54 1001.86,1189.73 1002.44,1189.94 1003.03,1190.11 1003.62,1192.87 1004.2,1191.08 1004.79,1190.77 1005.38,1191.08 1005.96,1190.72 1006.55,1187.71 1007.14,1186.36 1007.72,1186.59 1008.31,1186.49 1008.9,1186.39 1009.48,1183.43 1010.07,1180.89 1010.65,1181.11 1011.24,1179.96 1011.83,1181.74 1012.41,1180.96 1013,1181.36 1013.59,1183.22 1014.17,1182.22 1014.76,1183.93 1015.35,1184.22 1015.93,1184.43 1016.52,1183.15 1017.11,1184.84 1017.69,1185.01 1018.28,1183.91 1018.86,1181.5 1019.45,1183.5 1020.04,1180.96 1020.62,1183.19 1021.21,1183.34 1021.8,1184.76 1022.38,1189.15 1022.97,1189.07 1023.56,1187.9 1024.14,1188.02 1024.73,1188.06 1025.32,1188.24 1025.9,1188.14 1026.49,1188.13 1027.07,1186.57 1027.66,1186.58 1028.25,1185.2 1028.83,1179.68 1029.42,1178.86 1030.01,1181.03 1030.59,1181.58 1031.18,1182.16 1031.77,1183.97 1032.35,1184.27 1032.94,1186.08 1033.52,1186.27 1034.11,1184.98 1034.7,1186.75 1035.28,1186.91 1035.87,1187.35 1036.46,1190.74 1037.04,1189.31 1037.63,1189.31 1038.22,1189.37 1038.8,1189.22 1039.39,1189.51 1039.98,1187.95 1040.56,1192.31 1041.15,1192.03 1041.73,1190.49 1042.32,1190.85 1042.91,1190.65 1043.49,1190.34 1044.08,1191.47 1044.67,1189.77 1045.25,1188.25 1045.84,1189.46 1046.43,1192.3 1047.01,1193.77 1047.6,1193.51 1048.19,1192.02 1048.77,1190.52 1049.36,1190.73 1049.94,1192.1 1050.53,1193.16 1051.12,1191.46 1051.7,1191.06 1052.29,1189.66 1052.88,1189.67 1053.46,1186.81 1054.05,1187.11 1054.64,1188.85 1055.22,1189.11 1055.81,1189.03 1056.39,1187.67 1056.98,1189.28 1057.57,1189.17 1058.15,1184.75 1058.74,1186.5 1059.33,1185.37 1059.91,1185.67 1060.5,1184.25 1061.09,1184.66 1061.67,1183.54 1062.26,1186.69 1062.85,1185.48 1063.43,1184.25 1064.02,1186.13 1064.6,1184.8 1065.19,1187.81 1065.78,1185.17 1066.36,1181.12 1066.95,1184.58 1067.54,1186.48 1068.12,1187.86 1068.71,1186.55 1069.3,1188.31 1069.88,1188.25 1070.47,1186.55 1071.06,1186.74 1071.64,1186.86 1072.23,1185.22 1072.81,1188.1 1073.4,1185.09 1073.99,1189.63 1074.57,1189.66 1075.16,1189.51 1075.75,1189.67 1076.33,1187.03 1076.92,1190.08 1077.51,1192.68 1078.09,1192.7 1078.68,1191.18 1079.26,1192.28 1079.85,1189.64 1080.44,1188.22 1081.02,1187.07 1081.61,1182.82 1082.2,1182.85 1082.78,1181.91 1083.37,1183.66 1083.96,1185.42 1084.54,1185.74 1085.13,1185.93 1085.72,1187.6 1086.3,1187.81 1086.89,1189.28 1087.47,1189.35 1088.06,1190.41 1088.65,1190.47 1089.23,1190.35 1089.82,1190.26 1090.41,1191.52 1090.99,1194.49 1091.58,1194.25 1092.17,1191.16 1092.75,1193.9 1093.34,1191.88 1093.93,1193.23 1094.51,1191.79 1095.1,1197.14 1095.68,1196.63 1096.27,1193.61 1096.86,1191.85 1097.44,1188.83 1098.03,1188.8 1098.62,1189.89 1099.2,1189.92 1099.79,1189.82 1100.38,1191.66 1100.96,1187.34 1101.55,1187.46 1102.14,1190.13 1102.72,1193.22 1103.31,1192.68 1103.89,1195.81 1104.48,1196.84 1105.07,1196.51 1105.65,1193.05 1106.24,1193.12 1106.83,1193.08 1107.41,1191.05 1108,1191.21 1108.59,1192.67 1109.17,1192.34 1109.76,1192.01 1110.34,1194.55 1110.93,1195.64 1111.52,1196.79 1112.1,1197.69 1112.69,1198.78 1113.28,1198.19 1113.86,1197.66 1114.45,1195.99 1115.04,1199.43 1115.62,1196.09 1116.21,1195.61 1116.8,1193.75 1117.38,1193.64 1117.97,1191.97 1118.55,1192.9 1119.14,1192.29 1119.73,1191.87 1120.31,1190.38 1120.9,1189.95 1121.49,1189.79 1122.07,1192.45 1122.66,1193.24 1123.25,1194.39 1123.83,1193.97 1124.42,1195.17 1125.01,1192.05 1125.59,1192.08 1126.18,1190.51 1126.76,1193.37 1127.35,1192.93 1127.94,1191.02 1128.52,1189.39 1129.11,1186.41 1129.7,1184.94 1130.28,1185.12 1130.87,1188.49 1131.46,1189.67 1132.04,1191.02 1132.63,1192.21 1133.21,1190.61 1133.8,1190.52 1134.39,1186.03 1134.97,1183.09 1135.56,1184.74 1136.15,1183.25 1136.73,1187.7 1137.32,1187.99 1137.91,1186.32 1138.49,1183.33 1139.08,1183.49 1139.67,1183.43 1140.25,1185.31 1140.84,1188.19 1141.42,1192.82 1142.01,1188.08 1142.6,1186.79 1143.18,1185.79 1143.77,1182.96 1144.36,1185.91 1144.94,1188.87 1145.53,1187.4 1146.12,1188.85 1146.7,1186.04 1147.29,1186.21 1147.88,1184.85 1148.46,1184.9 1149.05,1184.96 1149.63,1185.25 1150.22,1184.25 1150.81,1188.85 1151.39,1191.91 1151.98,1192.06 1152.57,1190.5 1153.15,1189.08 1153.74,1189.01 1154.33,1190.48 1154.91,1186.2 1155.5,1181.94 1156.09,1182.36 1156.67,1184.3 1157.26,1184.68 1157.84,1185.22 1158.43,1183.9 1159.02,1184.15 1159.6,1182.93 1160.19,1183.34 1160.78,1183.62 1161.36,1184 1161.95,1187.21 1162.54,1185.66 1163.12,1188.75 1163.71,1184.47 1164.29,1186.31 1164.88,1183.63 1165.47,1181.18 1166.05,1182.84 1166.64,1183.43 1167.23,1184.96 1167.81,1186.8 1168.4,1186.87 1168.99,1185.51 1169.57,1185.6 1170.16,1182.92 1170.75,1182.98 1171.33,1186.02 1171.92,1187.76 1172.5,1189.29 1173.09,1193.39 1173.68,1193.13 1174.26,1192.95 1174.85,1194.18 1175.44,1193.97 1176.02,1190.81 1176.61,1190.52 1177.2,1189.04 1177.78,1189.12 1178.37,1186.21 1178.96,1187.76 1179.54,1187.95 1180.13,1187.95 1180.71,1188.01 1181.3,1186.9 1181.89,1186.86 1182.47,1188.22 1183.06,1189.63 1183.65,1190.98 1184.23,1192.22 1184.82,1194.89 1185.41,1194.54 1185.99,1189.8 1186.58,1192.38 1187.16,1197.81 1187.75,1195.91 1188.34,1195.51 1188.92,1195.04 1189.51,1192.99 1190.1,1190.8 1190.68,1194.76 1191.27,1195.74 1191.86,1196.61 1192.44,1196.16 1193.03,1194.35 1193.62,1196.75 1194.2,1194.88 1194.79,1192.72 1195.37,1194.08 1195.96,1192.4 1196.55,1189.27 1197.13,1186.36 1197.72,1187.93 1198.31,1189.56 1198.89,1190.94 1199.48,1189.23 1200.07,1194.58 1200.65,1189.96 1201.24,1193.8 1201.83,1191.57 1202.41,1187.81 1203,1189.01 1203.58,1187.55 1204.17,1187.95 1204.76,1183.52 1205.34,1182.25 1205.93,1182.73 1206.52,1183.31 1207.1,1183.64 1207.69,1185.14 1208.28,1185.27 1208.86,1184.09 1209.45,1184.44 1210.03,1180.24 1210.62,1179.2 1211.21,1182.5 1211.79,1184.33 1212.38,1184.25 1212.97,1187.28 1213.55,1185.96 1214.14,1187.7 1214.73,1186.17 1215.31,1185.85 1215.9,1187.32 1216.49,1188.8 1217.07,1184.37 1217.66,1185.82 1218.24,1184.54 1218.83,1180.33 1219.42,1182.08 1220,1183.72 1220.59,1185.65 1221.18,1184.31 1221.76,1187.4 1222.35,1183.02 1222.94,1186.23 1223.52,1189.54 1224.11,1189.5 1224.7,1189.21 1225.28,1187.67 1225.87,1189.09 1226.45,1186.13 1227.04,1189.22 1227.63,1190.84 1228.21,1190.85 1228.8,1192.1 1229.39,1193.54 1229.97,1191.81 1230.56,1190.35 1231.15,1191.82 1231.73,1191.75 1232.32,1194.3 1232.91,1191.56 1233.49,1192.92 1234.08,1193.99 1234.66,1192.34 1235.25,1195.27 1235.84,1194.69 1236.42,1194.47 1237.01,1191.27 1237.6,1195.49 1238.18,1195.31 1238.77,1193.51 1239.36,1193.22 1239.94,1194.36 1240.53,1193.71 1241.11,1190.52 1241.7,1189.13 1242.29,1190.68 1242.87,1187.77 1243.46,1186.38 1244.05,1186.29 1244.63,1186.52 1245.22,1183.63 1245.81,1183.49 1246.39,1183.57 1246.98,1180.95 1247.57,1180.15 1248.15,1181.9 1248.74,1186.73 1249.32,1185.2 1249.91,1186.76 1250.5,1186.86 1251.08,1188.63 1251.67,1190.03 1252.26,1189.93 1252.84,1189.95 1253.43,1187.18 1254.02,1182.9 1254.6,1186.29 1255.19,1186.7 1255.78,1184.06 1256.36,1184.21 1256.95,1184.36 1257.53,1183.02 1258.12,1185.18 1258.71,1186.68 1259.29,1187.92 1259.88,1183.57 1260.47,1183.85 1261.05,1184.66 1261.64,1184.92 1262.23,1185.07 1262.81,1186.62 1263.4,1188.58 1263.98,1188.61 1264.57,1189.99 1265.16,1189.76 1265.74,1185.25 1266.33,1185.56 1266.92,1184.22 1267.5,1182.85 1268.09,1177.33 1268.68,1176.61 1269.26,1174.24 1269.85,1172.39 1270.44,1173.02 1271.02,1173.77 1271.61,1174.38 1272.19,1177.87 1272.78,1183.09 1273.37,1186.37 1273.95,1186.61 1274.54,1186.7 1275.13,1186.91 1275.71,1187.28 1276.3,1187.62 1276.89,1187.77 1277.47,1189.13 1278.06,1187.68 1278.65,1187.63 1279.23,1187.61 1279.82,1184.73 1280.4,1184.82 1280.99,1185.14 1281.58,1185.38 1282.16,1185.87 1282.75,1189 1283.34,1190.37 1283.92,1191.7 1284.51,1193.13 1285.1,1195.85 1285.68,1197.35 1286.27,1191.18 1286.86,1191.2 1287.44,1190.78 1288.03,1189.41 1288.61,1189.48 1289.2,1194.94 1289.79,1194.24 1290.37,1193.96 1290.96,1190.7 1291.55,1187.79 1292.13,1189.13 1292.72,1189.28 1293.31,1187.97 1293.89,1187.81 1294.48,1187.9 1295.06,1186.26 1295.65,1186.29 1296.24,1187.71 1296.82,1186.24 1297.41,1180.72 1298,1182.82 1298.58,1186.22 1299.17,1186.67 1299.76,1187.19 1300.34,1188.76 1300.93,1188.87 1301.52,1192.78 1302.1,1192.41 1302.69,1187.78 1303.27,1189.1 1303.86,1188.98 1304.45,1190.24 1305.03,1187.11 1305.62,1190.12 1306.21,1188.55 1306.79,1188.48 1307.38,1188.65 1307.97,1190.03 1308.55,1192.79 1309.14,1199.78 1309.73,1200.72 1310.31,1199.91 1310.9,1200.56 1311.48,1198.47 1312.07,1198.87 1312.66,1199.43 1313.24,1199.18 1313.83,1197.36 1314.42,1197.06 1315,1196.59 1315.59,1196.09 1316.18,1194.2 1316.76,1195.47 1317.35,1196.17 1317.93,1194.15 1318.52,1192.55 1319.11,1192.36 1319.69,1192.07 1320.28,1192.1 1320.87,1191.89 1321.45,1188.76 1322.04,1190.2 1322.63,1190.19 1323.21,1191.41 1323.8,1189.99 1324.39,1188.76 1324.97,1187.22 1325.56,1184.5 1326.14,1184.45 1326.73,1181.55 1327.32,1179.19 1327.9,1179.72 1328.49,1183.09 1329.08,1184.58 1329.66,1184.8 1330.25,1186.27 1330.84,1185.15 1331.42,1185.49 1332.01,1184.25 1332.6,1184.58 1333.18,1187.48 1333.77,1187.78 1334.35,1186.47 1334.94,1186.5 1335.53,1187.94 1336.11,1188.12 1336.7,1189.27 1337.29,1191.72 1337.87,1191.17 1338.46,1192.19 1339.05,1190.7 1339.63,1190.72 1340.22,1190.59 1340.8,1193.24 1341.39,1194.37 1341.98,1193.98 1342.56,1190.69 1343.15,1186.4 1343.74,1186.52 1344.32,1189.54 1344.91,1191.02 1345.5,1194.02 1346.08,1195.12 1346.67,1191.82 1347.26,1189.91 1347.84,1189.8 1348.43,1188.35 1349.01,1192.58 1349.6,1194 1350.19,1192.1 1350.77,1188.98 1351.36,1189.22 1351.95,1190.72 1352.53,1189 1353.12,1185.95 1353.71,1185.64 1354.29,1187.2 1354.88,1184.19 1355.47,1187.32 1356.05,1187.42 1356.64,1187.5 1357.22,1187.55 1357.81,1187.79 1358.4,1187.86 1358.98,1189.03 1359.57,1190.13 1360.16,1191.93 1360.74,1187.74 1361.33,1189.45 1361.92,1189.4 1362.5,1189.48 1363.09,1186.7 1363.68,1186.93 1364.26,1186.8 1364.85,1185.47 1365.43,1184.17 1366.02,1181.41 1366.61,1181.77 1367.19,1182.07 1367.78,1184.08 1368.37,1182.98 1368.95,1183.28 1369.54,1183.93 1370.13,1184.13 1370.71,1185.58 1371.3,1188.67 1371.88,1188.76 1372.47,1187.65 1373.06,1187.28 1373.64,1184.17 1374.23,1184.49 1374.82,1186.06 1375.4,1182.96 1375.99,1182.93 1376.58,1186.19 1377.16,1185.06 1377.75,1185.57 1378.34,1184.01 1378.92,1182.76 1379.51,1182.91 1380.09,1181.56 1380.68,1181.84 1381.27,1179.33 1381.85,1182.82 1382.44,1182.03 1383.03,1182.22 1383.61,1187.33 1384.2,1191.75 1384.79,1191.98 1385.37,1193.14 1385.96,1191.73 1386.55,1191.71 1387.13,1191.5 1387.72,1193.07 1388.3,1192.84 1388.89,1194.22 1389.48,1193.78 1390.06,1199.37 1390.65,1201.73 1391.24,1202.6 1391.82,1202.29 1392.41,1204.32 1393,1203.34 1393.58,1204.24 1394.17,1202.06 1394.75,1201.62 1395.34,1198.28 1395.93,1193.34 1396.51,1190.01 1397.1,1189.74 1397.69,1189.72 1398.27,1191.17 1398.86,1192.34 1399.45,1193.7 1400.03,1193.43 1400.62,1192 1401.21,1191.65 1401.79,1191.81 1402.38,1191.91 1402.96,1193.16 1403.55,1189.96 1404.14,1191.41 1404.72,1189.83 1405.31,1188.15 1405.9,1190.99 1406.48,1192.33 1407.07,1199.21 1407.66,1200.01 1408.24,1197.85 1408.83,1195.67 1409.42,1192.32 1410,1189.04 1410.59,1186.02 1411.17,1186.35 1411.76,1183.73 1412.35,1184.13 1412.93,1184.35 1413.52,1184.96 1414.11,1182.23 1414.69,1181.39 1415.28,1181.66 1415.87,1183.56 1416.45,1175.17 1417.04,1177.58 1417.63,1176.74 1418.21,1174.17 1418.8,1173.35 1419.38,1175.59 1419.97,1180.59 1420.56,1184.04 1421.14,1185.91 1421.73,1184.52 1422.32,1184.89 1422.9,1183.51 1423.49,1183.48 1424.08,1183.73 1424.66,1184.17 1425.25,1186.09 1425.83,1187.94 1426.42,1186.78 1427.01,1187.99 1427.59,1186.52 1428.18,1186.91 1428.77,1189.53 1429.35,1189.53 1429.94,1189.39 1430.53,1193.68 1431.11,1193.3 1431.7,1191.51 1432.29,1188.28 1432.87,1185.24 1433.46,1185.5 1434.04,1185.72 1434.63,1183.2 1435.22,1186.16 1435.8,1184.91 1436.39,1183.51 1436.98,1184.05 1437.56,1185.7 1438.15,1186.11 1438.74,1186.43 1439.32,1187.68 1439.91,1189.1 1440.5,1192.06 1441.08,1191.85 1441.67,1190.08 1442.25,1188.7 1442.84,1188.8 1443.43,1185.83 1444.01,1184.27 1444.6,1184.45 1445.19,1187.59 1445.77,1187.92 1446.36,1192.54 1446.95,1193.61 1447.53,1193.53 1448.12,1194.59 1448.7,1192.82 1449.29,1192.52 1449.88,1189.44 1450.46,1192.33 1451.05,1192.22 1451.64,1190.6 1452.22,1192.08 1452.81,1190.19 1453.4,1191.47 1453.98,1189.76 1454.57,1188.09 1455.16,1190.99 1455.74,1190.57 1456.33,1190.73 1456.91,1190.68 1457.5,1189.22 1458.09,1189.59 1458.67,1189.34 1459.26,1186.34 1459.85,1189.46 1460.43,1189.32 1461.02,1187.66 1461.61,1189.32 1462.19,1193.71 1462.78,1194.81 1463.37,1191.86 1463.95,1190.13 1464.54,1190.01 1465.12,1194.24 1465.71,1195.2 1466.3,1193.43 1466.88,1194.73 1467.47,1195.35 1468.06,1196.15 1468.64,1194.46 1469.23,1193.94 1469.82,1193.69 1470.4,1192.1 1470.99,1191.81 1471.57,1190 1472.16,1191.08 1472.75,1196.9 1473.33,1192.06 1473.92,1190.49 1474.51,1190.59 1475.09,1190.64 1475.68,1192.1 1476.27,1190.56 1476.85,1190.36 1477.44,1190.55 1478.03,1190.55 1478.61,1188.92 1479.2,1188.96 1479.78,1187.41 1480.37,1187.74 1480.96,1188 1481.54,1190.88 1482.13,1190.87 1482.72,1191.92 1483.3,1194.34 1483.89,1195.32 1484.48,1193.36 1485.06,1191.49 1485.65,1188.15 1486.24,1189.51 1486.82,1185.1 1487.41,1182.39 1487.99,1184.45 1488.58,1186.14 1489.17,1184.6 1489.75,1185.94 1490.34,1185.83 1490.93,1187.22 1491.51,1187.29 1492.1,1190.18 1492.69,1188.64 1493.27,1189.87 1493.86,1191.29 1494.45,1193.95 1495.03,1190.72 1495.62,1189.2 1496.2,1190.43 1496.79,1193.2 1497.38,1191.69 1497.96,1191.67 1498.55,1191.53 1499.14,1188.68 1499.72,1190.44 1500.31,1192.06 1500.9,1190.23 1501.48,1188.53 1502.07,1186.48 1502.65,1183.65 1503.24,1185.29 1503.83,1188.33 1504.41,1186.66 1505,1191.08 1505.59,1190.68 1506.17,1190.22 1506.76,1190.47 1507.35,1190.4 1507.93,1187.35 1508.52,1187.36 1509.11,1186.07 1509.69,1187.66 1510.28,1184.49 1510.86,1183.4 1511.45,1182.11 1512.04,1182.14 1512.62,1181 1513.21,1184.64 1513.8,1184.8 1514.38,1184.83 1514.97,1183.77 1515.56,1184.05 1516.14,1187.24 1516.73,1188.82 1517.32,1188.82 1517.9,1188.92 1518.49,1185.71 1519.07,1185.85 1519.66,1182.97 1520.25,1181.9 1520.83,1182.48 1521.42,1183 1522.01,1183.38 1522.59,1180.7 1523.18,1181.26 1523.77,1182.93 1524.35,1183.3 1524.94,1181.95 1525.52,1182.25 1526.11,1184.1 1526.7,1184.44 1527.28,1184.71 1527.87,1186.38 1528.46,1185.14 1529.04,1188.63 1529.63,1190.13 1530.22,1185.9 1530.8,1182.94 1531.39,1181.76 1531.98,1183.36 1532.56,1185.17 1533.15,1183.78 1533.73,1185.48 1534.32,1186.68 1534.91,1185.37 1535.49,1186.67 1536.08,1185.3 1536.67,1183.87 1537.25,1184.36 1537.84,1182.71 1538.43,1181.69 1539.01,1183.64 1539.6,1188.12 1540.19,1192.45 1540.77,1194.06 1541.36,1192.41 1541.94,1189.51 1542.53,1187.98 1543.12,1189.57 1543.7,1190.87 1544.29,1191.88 1544.88,1191.64 1545.46,1190.05 1546.05,1189.73 1546.64,1189.9 1547.22,1191.56 1547.81,1190.19 1548.4,1191.62 1548.98,1189.88 1549.57,1191.05 1550.15,1189.55 1550.74,1188.01 1551.33,1183.87 1551.91,1184.3 1552.5,1184.69 1553.09,1184.68 1553.67,1187.99 1554.26,1191.1 1554.85,1192.13 1555.43,1188.9 1556.02,1189.05 1556.6,1190.57 1557.19,1190.35 1557.78,1194.76 1558.36,1195.86 1558.95,1195.51 1559.54,1197.83 1560.12,1197.24 1560.71,1193.84 1561.3,1193.54 1561.88,1193.46 1562.47,1194.48 1563.06,1195.31 1563.64,1194.95 1564.23,1189.04 1564.81,1190.21 1565.4,1189.87 1565.99,1186.84 1566.57,1188.2 1567.16,1188.21 1567.75,1188.3 1568.33,1188.45 1568.92,1187.04 1569.51,1186.97 1570.09,1188.53 1570.68,1188.85 1571.27,1190.4 1571.85,1186.25 1572.44,1186.16 1573.02,1186.51 1573.61,1186.54 1574.2,1186.54 1574.78,1185.55 1575.37,1189.92 1575.96,1186.75 1576.54,1185.64 1577.13,1187.17 1577.72,1187.08 1578.3,1185.85 1578.89,1186.06 1579.47,1187.53 1580.06,1184.5 1580.65,1186.34 1581.23,1185.02 1581.82,1185.46 1582.41,1185.86 1582.99,1191.81 1583.58,1196.07 1584.17,1198.71 1584.75,1199.55 1585.34,1200.34 1585.93,1198.43 1586.51,1196.38 1587.1,1194.62 1587.68,1194.61 1588.27,1195.81 1588.86,1195.47 1589.44,1192.49 1590.03,1190.83 1590.62,1187.78 1591.2,1186.47 1591.79,1186.54 1592.38,1185.19 1592.96,1185.14 1593.55,1185 1594.14,1188.3 1594.72,1188.44 1595.31,1188.51 1595.89,1188.8 1596.48,1187.2 1597.07,1187.31 1597.65,1192.97 1598.24,1194.22 1598.83,1192.23 1599.41,1193.38 1600,1196.07 1600.59,1192.73 1601.17,1195.38 1601.76,1193.64 1602.34,1191.76 1602.93,1191.49 1603.52,1189.71 1604.1,1189.84 1604.69,1189.55 1605.28,1189.75 1605.86,1192.68 1606.45,1193.99 1607.04,1192.52 1607.62,1193.55 1608.21,1196.31 1608.8,1195.71 1609.38,1195.18 1609.97,1196.26 1610.55,1193.04 1611.14,1191.56 1611.73,1195.66 1612.31,1191.07 1612.9,1189.34 1613.49,1187.9 1614.07,1186.81 1614.66,1185.71 1615.25,1181.49 1615.83,1184.74 1616.42,1183.3 1617.01,1181.82 1617.59,1180.21 1618.18,1180.72 1618.76,1182.61 1619.35,1187.63 1619.94,1180.27 1620.52,1183.51 1621.11,1186.53 1621.7,1191.04 1622.28,1189.41 1622.87,1189.45 1623.46,1189.22 1624.04,1189.25 1624.63,1187.65 1625.22,1190.89 1625.8,1189.24 1626.39,1188.11 1626.97,1187.92 1627.56,1187.41 1628.15,1185.88 1628.73,1185.79 1629.32,1184.35 1629.91,1180.02 1630.49,1178.71 1631.08,1180.71 1631.67,1179.8 1632.25,1179.12 1632.84,1178.05 1633.42,1179.07 1634.01,1182.37 1634.6,1184.08 1635.18,1185.72 1635.77,1187.58 1636.36,1187.78 1636.94,1189.38 1637.53,1188.06 1638.12,1186.72 1638.7,1189.53 1639.29,1192.24 1639.88,1192.17 1640.46,1193.28 1641.05,1190.14 1641.63,1190.02 1642.22,1188.53 1642.81,1185.71 1643.39,1187.37 1643.98,1190.39 1644.57,1188.75 1645.15,1188.75 1645.74,1189.94 1646.33,1191.24 1646.91,1188 1647.5,1189.72 1648.09,1188.55 1648.67,1190.24 1649.26,1190.26 1649.84,1190.13 1650.43,1191.39 1651.02,1191.11 1651.6,1192.02 1652.19,1187.52 1652.78,1189.33 1653.36,1189.24 1653.95,1184.87 1654.54,1183.97 1655.12,1184.31 1655.71,1184.48 1656.29,1181.74 1656.88,1182.37 1657.47,1182.93 1658.05,1184.95 1658.64,1185.28 1659.23,1189.65 1659.81,1189.88 1660.4,1185.45 1660.99,1183.23 1661.57,1183.2 1662.16,1183.25 1662.75,1183.43 1663.33,1185 1663.92,1182.5 1664.5,1182.6 1665.09,1179.84 1665.68,1180.37 1666.26,1180.67 1666.85,1179.61 1667.44,1180.28 1668.02,1180.81 1668.61,1180.04 1669.2,1178.87 1669.78,1180.98 1670.37,1182.69 1670.96,1181.71 1671.54,1183.48 1672.13,1184.12 1672.71,1184.45 1673.3,1183.31 1673.89,1183.64 1674.47,1186.76 1675.06,1185.22 1675.65,1186.73 1676.23,1185.59 1676.82,1186.96 1677.41,1187.44 1677.99,1185.8 1678.58,1187.32 1679.17,1187.06 1679.75,1187.15 1680.34,1186.92 1680.92,1188.46 1681.51,1194.49 1682.1,1191.3 1682.68,1193.72 1683.27,1193.53 1683.86,1191.81 1684.44,1197.55 1685.03,1198.67 1685.62,1198.25 1686.2,1197.92 1686.79,1196.1 1687.37,1195.45 1687.96,1192.17 1688.55,1191.98 1689.13,1196.27 1689.72,1194.18 1690.31,1190.95 1690.89,1189.37 1691.48,1189.48 1692.07,1189.34 1692.65,1187.65 1693.24,1187.87 1693.83,1189.17 1694.41,1192.19 1695,1192.23 1695.58,1194.7 1696.17,1194.43 1696.76,1191.06 1697.34,1189.51 1697.93,1187.94 1698.52,1187.79 1699.1,1187.55 1699.69,1187.4 1700.28,1188.81 1700.86,1188.65 1701.45,1190.16 1702.04,1194.28 1702.62,1194.51 1703.21,1191.3 1703.79,1191.19 1704.38,1190.81 1704.97,1192.28 1705.55,1190.84 1706.14,1189.18 1706.73,1190.54 1707.31,1190.49 1707.9,1187.72 1708.49,1187.68 1709.07,1189.08 1709.66,1187.49 1710.24,1185.71 1710.83,1188.92 1711.42,1187.58 1712,1187.49 1712.59,1190.22 1713.18,1192.9 1713.76,1189.9 1714.35,1191.41 1714.94,1192.74 1715.52,1196.98 1716.11,1199.2 1716.7,1198.5 1717.28,1197.89 1717.87,1192.84 1718.45,1191.32 1719.04,1188.36 1719.63,1191.16 1720.21,1191.02 1720.8,1192.37 1721.39,1190.76 1721.97,1191.97 1722.56,1191.91 1723.15,1191.98 1723.73,1193.43 1724.32,1193.07 1724.91,1194.41 1725.49,1191.03 1726.08,1189.41 1726.66,1190.64 1727.25,1190.53 1727.84,1190.3 1728.42,1190.23 1729.01,1187.26 1729.6,1187.23 1730.18,1185.58 1730.77,1181.69 1731.36,1185.15 1731.94,1185.48 1732.53,1188.71 1733.11,1190.4 1733.7,1188.99 1734.29,1188.94 1734.87,1188.65 1735.46,1185.83 1736.05,1185.77 1736.63,1188.71 1737.22,1187.3 1737.81,1184.24 1738.39,1184.66 1738.98,1186.18 1739.57,1184.98 1740.15,1186.54 1740.74,1183.67 1741.32,1185.54 1741.91,1187.07 1742.5,1187.07 1743.08,1186.85 1743.67,1186.99 1744.26,1185.53 1744.84,1183.08 1745.43,1183.53 1746.02,1184.1 1746.6,1186.21 1747.19,1186.41 1747.78,1186.65 1748.36,1188.28 1748.95,1189.75 1749.53,1188.22 1750.12,1184.34 1750.71,1182.86 1751.29,1183.57 1751.88,1185.32 1752.47,1186.99 1753.05,1186.83 1753.64,1185.48 1754.23,1186.98 1754.81,1189.88 1755.4,1189.6 1755.99,1190.75 1756.57,1191.04 1757.16,1192.38 1757.74,1192.13 1758.33,1188.84 1758.92,1188.86 1759.5,1187.53 1760.09,1188.85 1760.68,1188.95 1761.26,1188.96 1761.85,1193.49 1762.44,1196.21 1763.02,1195.77 1763.61,1195.23 1764.19,1193.43 1764.78,1192 1765.37,1190.56 1765.95,1189.23 1766.54,1187.73 1767.13,1187.86 1767.71,1190.39 1768.3,1190.2 1768.89,1186.99 1769.47,1186.9 1770.06,1187.1 1770.65,1185.69 1771.23,1184.27 1771.82,1184.38 1772.4,1185.93 1772.99,1187.36 1773.58,1187.33 1774.16,1184.17 1774.75,1185.74 1775.34,1184.44 1775.92,1186.09 1776.51,1185.99 1777.1,1186.07 1777.68,1184.59 1778.27,1183.77 1778.86,1184.02 1779.44,1184.11 1780.03,1184.43 1780.61,1184.46 1781.2,1184.91 1781.79,1186.66 1782.37,1187.99 1782.96,1187.98 1783.55,1186.29 1784.13,1186.42 1784.72,1186.62 1785.31,1183.61 1785.89,1183.75 1786.48,1186.85 1787.06,1185.53 1787.65,1185.58 1788.24,1185.57 1788.82,1182.65 1789.41,1187.15 1790,1186.17 1790.58,1183.26 1791.17,1185.15 1791.76,1183.9 1792.34,1181.44 1792.93,1184.93 1793.52,1185.23 1794.1,1185.47 1794.69,1187.58 1795.27,1187.54 1795.86,1189.03 1796.45,1191.85 1797.03,1191.98 1797.62,1188.93 1798.21,1191.76 1798.79,1191.56 1799.38,1188.65 1799.97,1187.3 1800.55,1184.61 1801.14,1183.16 1801.73,1183.48 1802.31,1185.4 1802.9,1185.64 1803.48,1182.92 1804.07,1184.82 1804.66,1189.26 1805.24,1191.82 1805.83,1191.38 1806.42,1192.64 1807,1190.67 1807.59,1189.18 1808.18,1188.94 1808.76,1188.78 1809.35,1187.13 1809.94,1184.06 1810.52,1185.63 1811.11,1191.65 1811.69,1192.97 1812.28,1192.8 1812.87,1194.14 1813.45,1193.78 1814.04,1195.04 1814.63,1196.37 1815.21,1195.85 1815.8,1195.66 1816.39,1195.08 1816.97,1196.31 1817.56,1195.68 1818.14,1193.75 1818.73,1196.49 1819.32,1194.48 1819.9,1195.74 1820.49,1195.28 1821.08,1190.65 1821.66,1188.9 1822.25,1188.85 1822.84,1188.7 1823.42,1186.99 1824.01,1189.98 1824.6,1187.07 1825.18,1185.93 1825.77,1184.74 1826.35,1188.02 1826.94,1190.81 1827.53,1186.47 1828.11,1186.81 1828.7,1186.96 1829.29,1184.2 1829.87,1184.65 1830.46,1184.86 1831.05,1187.8 1831.63,1189.24 1832.22,1190.74 1832.81,1192.12 1833.39,1191.58 1833.98,1195.7 1834.56,1197 1835.15,1195.16 1835.74,1196.24 1836.32,1191.84 1836.91,1192.76 1837.5,1191.48 1838.08,1193.3 1838.67,1192.77 1839.26,1193.84 1839.84,1193.58 1840.43,1193.48 1841.01,1193.34 1841.6,1195.83 1842.19,1196.95 1842.77,1199.06 1843.36,1201.15 1843.95,1200.46 1844.53,1199.97 1845.12,1198.14 1845.71,1194.43 1846.29,1192.81 1846.88,1195.5 1847.47,1196.59 1848.05,1194.67 1848.64,1194.12 1849.22,1199.78 1849.81,1200.59 1850.4,1201.34 1850.98,1200.62 1851.57,1201.27 1852.16,1197.65 1852.74,1196.9 1853.33,1199.27 1853.92,1197.21 1854.5,1196.74 1855.09,1196.32 1855.68,1192.79 1856.26,1195.69 1856.85,1194.02 1857.43,1193.72 1858.02,1189 1858.61,1188.75 1859.19,1188.63 1859.78,1185.95 1860.37,1186.19 1860.95,1185.12 1861.54,1185.05 1862.13,1182.3 1862.71,1179.52 1863.3,1180.04 1863.88,1177.46 1864.47,1176.6 1865.06,1177.26 1865.64,1176.53 1866.23,1175.42 1866.82,1176.26 1867.4,1175.45 1867.99,1174.66 1868.58,1177.09 1869.16,1180.64 1869.75,1178.36 1870.34,1180.09 1870.92,1180.68 1871.51,1182.55 1872.09,1185.97 1872.68,1184.73 1873.27,1184.99 1873.85,1185.31 1874.44,1185.44 1875.03,1188.61 1875.61,1189.86 1876.2,1188.46 1876.79,1188.58 1877.37,1190.18 1877.96,1187.37 1878.55,1187.32 1879.13,1187.34 1879.72,1187.18 1880.3,1184.49 1880.89,1184.49 1881.48,1183.35 1882.06,1183.83 1882.65,1186.94 1883.24,1188.71 1883.82,1188.67 1884.41,1185.68 1885,1184.24 1885.58,1184.34 1886.17,1184.42 1886.76,1187.3 1887.34,1190.09 1887.93,1190.17 1888.51,1188.54 1889.1,1185.76 1889.69,1187.4 1890.27,1187.93 1890.86,1187.92 1891.45,1188.09 1892.03,1189.27 1892.62,1189.35 1893.21,1187.7 1893.79,1185.28 1894.38,1185.62 1894.96,1187.01 1895.55,1183.83 1896.14,1184.24 1896.72,1184.64 1897.31,1183.82 1897.9,1184.2 1898.48,1187.66 1899.07,1187.7 1899.66,1193.13 1900.24,1193.14 1900.83,1191.64 1901.42,1191.53 1902,1192.79 1902.59,1190.97 1903.17,1189.53 1903.76,1183.61 1904.35,1180.99 1904.93,1180.08 1905.52,1180.47 1906.11,1182.58 1906.69,1184.15 1907.28,1187.51 1907.87,1188.95 1908.45,1188.75 1909.04,1187.42 1909.63,1186.03 1910.21,1189.15 1910.8,1190.61 1911.38,1186.28 1911.97,1185.13 1912.56,1188.21 1913.14,1189.84 1913.73,1191.12 1914.32,1190.59 1914.9,1195.06 1915.49,1194.75 1916.08,1190.09 1916.66,1192.85 1917.25,1191.45 1917.83,1192.81 1918.42,1191.13 1919.01,1192.83 1919.59,1191.06 1920.18,1192.32 1920.77,1190.75 1921.35,1191.96 1921.94,1189.98 1922.53,1191.25 1923.11,1192.33 1923.7,1194.98 1924.29,1191.7 1924.87,1190.22 1925.46,1191.61 1926.04,1189.86 1926.63,1188.36 1927.22,1188.41 1927.8,1189.72 1928.39,1190.94 1928.98,1192.37 1929.56,1191.77 1930.15,1193.11 1930.74,1192.71 1931.32,1195.44 1931.91,1195.03 1932.5,1194.92 1933.08,1195.77 1933.67,1195.42 1934.25,1193.43 1934.84,1191.82 1935.43,1191.29 1936.01,1192.58 1936.6,1192.41 1937.19,1193.69 1937.77,1195.1 1938.36,1191.7 1938.95,1192.62 1939.53,1189.55 1940.12,1191.03 1940.71,1189.71 1941.29,1188.25 1941.88,1186.95 1942.46,1188.75 1943.05,1188.58 1943.64,1183.9 1944.22,1184.5 1944.81,1184.65 1945.4,1186.4 1945.98,1185.2 1946.57,1187.09 1947.16,1187.2 1947.74,1184.56 1948.33,1184.86 1948.91,1182.29 1949.5,1182.7 1950.09,1184.39 1950.67,1185.73 1951.26,1185.55 1951.85,1185.65 1952.43,1185.34 1953.02,1183.72 1953.61,1185.7 1954.19,1185.77 1954.78,1190.2 1955.37,1188.52 1955.95,1190.36 1956.54,1187.46 1957.12,1187.89 1957.71,1183.69 1958.3,1183.69 1958.88,1184.06 1959.47,1185.52 1960.06,1185.6 1960.64,1184.45 1961.23,1181.99 1961.82,1182.54 1962.4,1181.19 1962.99,1179.01 1963.58,1180.94 1964.16,1179.66 1964.75,1183.25 1965.33,1183.56 1965.92,1182.53 1966.51,1184.19 1967.09,1183.05 1967.68,1181.67 1968.27,1182.08 1968.85,1185.17 1969.44,1186.48 1970.03,1186.57 1970.61,1184.98 1971.2,1188.07 1971.78,1186.64 1972.37,1186.89 1972.96,1188.53 1973.54,1188.39 1974.13,1189.64 1974.72,1191.05 1975.3,1190.83 1975.89,1192.55 1976.48,1190.86 1977.06,1190.8 1977.65,1190.53 1978.24,1191.88 1978.82,1188.55 1979.41,1191.6 1979.99,1189.79 1980.58,1188.25 1981.17,1188.4 1981.75,1191.27 1982.34,1191.26 1982.93,1191.27 1983.51,1192.7 1984.1,1193.67 1984.69,1193.56 1985.27,1190.47 1985.86,1188.98 1986.45,1189.09 1987.03,1189.09 1987.62,1186.22 1988.2,1184.96 1988.79,1183.63 1989.38,1184.1 1989.96,1184.15 1990.55,1184.14 1991.14,1181.54 1991.72,1184.85 1992.31,1188.17 1992.9,1188.2 1993.48,1191.32 1994.07,1189.99 1994.65,1191.42 1995.24,1191.29 1995.83,1195.51 1996.41,1192.28 1997,1192.16 1997.59,1193.4 1998.17,1191.81 1998.76,1187.25 1999.35,1191.78 1999.93,1192.61 2000.52,1186.42 2001.11,1186.58 2001.69,1184.96 2002.28,1185.15 2002.86,1185.23 2003.45,1182.64 2004.04,1181.55 2004.62,1182.05 2005.21,1182.38 2005.8,1182.49 2006.38,1182.93 2006.97,1183.1 2007.56,1183.63 2008.14,1186.83 2008.73,1186.7 2009.32,1186.97 2009.9,1187.35 2010.49,1187.49 2011.07,1187.6 2011.66,1192.15 2012.25,1190.78 2012.83,1193.6 2013.42,1193.32 2014.01,1191.53 2014.59,1191.45 2015.18,1191.33 2015.77,1191.29 2016.35,1192.47 2016.94,1193.62 2017.53,1193.42 2018.11,1199.96 2018.7,1197.74 2019.28,1195.65 2019.87,1193.74 2020.46,1196.4 2021.04,1197.46 2021.63,1197.1 2022.22,1198.47 2022.8,1196.69 2023.39,1196.1 2023.98,1197.45 2024.56,1198.3 2025.15,1195.03 2025.73,1193.43 2026.32,1191.91 2026.91,1188.99 2027.49,1187.38 2028.08,1187.29 2028.67,1187.47 2029.25,1187.12 2029.84,1190.14 2030.43,1191.68 2031.01,1188.43 2031.6,1188.67 2032.19,1189.75 2032.77,1188.02 2033.36,1185.33 2033.94,1186.91 2034.53,1189.74 2035.12,1188.26 2035.7,1193.9 2036.29,1190.63 2036.88,1189.1 2037.46,1187.7 2038.05,1186.08 2038.64,1183.39 2039.22,1177.81 2039.81,1178.36 2040.4,1180 2040.98,1180.6 2041.57,1180.77 2042.15,1179.43 2042.74,1178.6 2043.33,1179.16 2043.91,1176.87 2044.5,1177.79 2045.09,1178.22 2045.67,1178.74 2046.26,1180.92 2046.85,1181.6 2047.43,1183.4 2048.02,1184.07 2048.6,1184.35 2049.19,1182.91 2049.78,1182.93 2050.36,1182.06 2050.95,1182.48 2051.54,1185.5 2052.12,1185.76 2052.71,1185.5 2053.3,1182.49 2053.88,1181.2 2054.47,1179.96 2055.06,1179.3 2055.64,1179.84 2056.23,1177.38 2056.81,1179.34 2057.4,1181.14 2057.99,1181.56 2058.57,1183.47 2059.16,1185.4 2059.75,1185.36 2060.33,1185.27 2060.92,1186.86 2061.51,1186.97 2062.09,1185.49 2062.68,1184.49 2063.27,1186.09 2063.85,1187.29 2064.44,1187.23 2065.02,1187.57 2065.61,1186.08 2066.2,1190.49 2066.78,1191.78 2067.37,1193.06 2067.96,1192.54 2068.54,1195.06 2069.13,1193.49 2069.72,1194.62 2070.3,1194.4 2070.89,1192.63 2071.48,1193.75 2072.06,1192.33 2072.65,1192.1 2073.23,1191.64 2073.82,1191.66 2074.41,1192.95 2074.99,1192.45 2075.58,1193.41 2076.17,1194.6 2076.75,1197.16 2077.34,1198.36 2077.93,1201.08 2078.51,1200.67 2079.1,1197.23 2079.68,1194.19 2080.27,1190.82 2080.86,1192.3 2081.44,1192.52 2082.03,1196.45 2082.62,1197.49 2083.2,1195.52 2083.79,1196.91 2084.38,1197.57 2084.96,1198.6 2085.55,1199.45 2086.14,1201.39 2086.72,1199.39 2087.31,1196.13 2087.89,1197.2 2088.48,1194.91 2089.07,1195.87 2089.65,1194.05 2090.24,1193.91 2090.83,1193.52 2091.41,1196.14 2092,1195.8 2092.59,1200.25 2093.17,1200.9 2093.76,1198.62 2094.35,1195.09 2094.93,1190.39 2095.52,1193.05 2096.1,1194.16 2096.69,1195.65 2097.28,1198.02 2097.86,1197.67 2098.45,1194.38 2099.04,1194.26 2099.62,1194.01 2100.21,1193.55 2100.8,1192.04 2101.38,1190.21 2101.97,1191.45 2102.55,1189.99 2103.14,1193.86 2103.73,1192.66 2104.31,1192.44 2104.9,1189.07 2105.49,1183.32 2106.07,1183.61 2106.66,1182.39 2107.25,1186.91 2107.83,1189.84 2108.42,1188.32 2109.01,1189.86 2109.59,1189.57 2110.18,1191.14 2110.76,1191.15 2111.35,1189.38 2111.94,1185.33 2112.52,1186.8 2113.11,1182.46 2113.7,1179.74 2114.28,1177.28 2114.87,1177.97 2115.46,1178.69 2116.04,1179.03 2116.63,1184.15 2117.22,1183.08 2117.8,1186.11 2118.39,1186.62 2118.97,1186.53 2119.56,1188.26 2120.15,1187.21 2120.73,1184.37 2121.32,1187.18 2121.91,1191.33 2122.49,1190.93 2123.08,1190.72 2123.67,1187.7 2124.25,1187.79 2124.84,1190.75 2125.42,1189.18 2126.01,1186.27 2126.6,1186.31 2127.18,1186.4 2127.77,1185.01 2128.36,1183.62 2128.94,1183.97 2129.53,1182.92 2130.12,1183.84 2130.7,1183.78 2131.29,1182.91 2131.88,1183.39 2132.46,1183.35 2133.05,1184.79 2133.63,1183.72 2134.22,1183.91 2134.81,1185.75 2135.39,1187.4 2135.98,1187.31 2136.57,1187.64 2137.15,1187.79 2137.74,1187.68 2138.33,1187.72 2138.91,1187.91 2139.5,1184.99 2140.09,1186.43 2140.67,1190.82 2141.26,1193.64 2141.84,1193.52 2142.43,1191.85 2143.02,1191.72 2143.6,1189.96 2144.19,1192.88 2144.78,1191.09 2145.36,1190.66 2145.95,1187.61 2146.54,1183.24 2147.12,1183.8 2147.71,1182.5 2148.3,1182.73 2148.88,1181.62 2149.47,1183.52 2150.05,1185.05 2150.64,1186.55 2151.23,1187.83 2151.81,1186.42 2152.4,1186.71 2152.99,1188.48 2153.57,1188.52 2154.16,1190.11 2154.75,1190.11 2155.33,1185.73 2155.92,1183.15 2156.5,1183.36 2157.09,1183.86 2157.68,1183.93 2158.26,1183.05 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1189.02 L986.612 1189.02 L987.198 1189.02 L987.785 1189.02 L988.371 1189.02 L988.957 1189.02 L989.544 1189.02 L990.13 1189.02 L990.717 1189.02 L991.303 1189.02 L991.889 1189.02 L992.476 1189.02 L993.062 1189.02 L993.649 1189.02 L994.235 1189.02 L994.822 1189.02 L995.408 1189.02 L995.994 1189.02 L996.581 1189.02 L997.167 1189.02 L997.754 1189.02 L998.34 1189.02 L998.926 1189.02 L999.513 1189.02 L1000.1 1189.02 L1000.69 1189.02 L1001.27 1189.02 L1001.86 1189.02 L1002.44 1189.02 L1003.03 1189.02 L1003.62 1189.02 L1004.2 1189.02 L1004.79 1189.02 L1005.38 1189.02 L1005.96 1189.02 L1006.55 1189.02 L1007.14 1189.02 L1007.72 1189.02 L1008.31 1189.02 L1008.9 1189.02 L1009.48 1189.02 L1010.07 1189.02 L1010.65 1189.02 L1011.24 1189.02 L1011.83 1189.02 L1012.41 1189.02 L1013 1189.02 L1013.59 1189.02 L1014.17 1189.02 L1014.76 1189.02 L1015.35 1189.02 L1015.93 1189.02 L1016.52 1189.02 L1017.11 1189.02 L1017.69 1189.02 L1018.28 1189.02 L1018.86 1189.02 L1019.45 1189.02 L1020.04 1189.02 L1020.62 1189.02 L1021.21 1189.02 L1021.8 1189.02 L1022.38 1189.02 L1022.97 1189.02 L1023.56 1189.02 L1024.14 1189.02 L1024.73 1189.02 L1025.32 1189.02 L1025.9 1189.02 L1026.49 1189.02 L1027.07 1189.02 L1027.66 1189.02 L1028.25 1189.02 L1028.83 1189.02 L1029.42 1189.02 L1030.01 1189.02 L1030.59 1189.02 L1031.18 1189.02 L1031.77 1189.02 L1032.35 1189.02 L1032.94 1189.02 L1033.52 1189.02 L1034.11 1189.02 L1034.7 1189.02 L1035.28 1189.02 L1035.87 1189.02 L1036.46 1189.02 L1037.04 1189.02 L1037.63 1189.02 L1038.22 1189.02 L1038.8 1189.02 L1039.39 1189.02 L1039.98 1189.02 L1040.56 1189.02 L1041.15 1189.02 L1041.73 1189.02 L1042.32 1189.02 L1042.91 1189.02 L1043.49 1189.02 L1044.08 1189.02 L1044.67 1189.02 L1045.25 1189.02 L1045.84 1189.02 L1046.43 1189.02 L1047.01 1189.02 L1047.6 1189.02 L1048.19 1189.02 L1048.77 1189.02 L1049.36 1189.02 L1049.94 1189.02 L1050.53 1189.02 L1051.12 1189.02 L1051.7 1189.02 L1052.29 1189.02 L1052.88 1189.02 L1053.46 1189.02 L1054.05 1189.02 L1054.64 1189.02 L1055.22 1189.02 L1055.81 1189.02 L1056.39 1189.02 L1056.98 1189.02 L1057.57 1189.02 L1058.15 1189.02 L1058.74 1189.02 L1059.33 1189.02 L1059.91 1189.02 L1060.5 1189.02 L1061.09 1189.02 L1061.67 1189.02 L1062.26 1189.02 L1062.85 1189.02 L1063.43 1189.02 L1064.02 1189.02 L1064.6 1189.02 L1065.19 1189.02 L1065.78 1189.02 L1066.36 1189.02 L1066.95 1189.02 L1067.54 1189.02 L1068.12 1189.02 L1068.71 1189.02 L1069.3 1189.02 L1069.88 1189.02 L1070.47 1189.02 L1071.06 1189.02 L1071.64 1189.02 L1072.23 1189.02 L1072.81 1189.02 L1073.4 1189.02 L1073.99 1189.02 L1074.57 1189.02 L1075.16 1189.02 L1075.75 1189.02 L1076.33 1189.02 L1076.92 1189.02 L1077.51 1189.02 L1078.09 1189.02 L1078.68 1189.02 L1079.26 1189.02 L1079.85 1189.02 L1080.44 1189.02 L1081.02 1189.02 L1081.61 1189.02 L1082.2 1189.02 L1082.78 1189.02 L1083.37 1189.02 L1083.96 1189.02 L1084.54 1189.02 L1085.13 1189.02 L1085.72 1189.02 L1086.3 1189.02 L1086.89 1189.02 L1087.47 1189.02 L1088.06 1189.02 L1088.65 1189.02 L1089.23 1189.02 L1089.82 1189.02 L1090.41 1189.02 L1090.99 1189.02 L1091.58 1189.02 L1092.17 1189.02 L1092.75 1189.02 L1093.34 1189.02 L1093.93 1189.02 L1094.51 1189.02 L1095.1 1189.02 L1095.68 1189.02 L1096.27 1189.02 L1096.86 1189.02 L1097.44 1189.02 L1098.03 1189.02 L1098.62 1189.02 L1099.2 1189.02 L1099.79 1189.02 L1100.38 1189.02 L1100.96 1189.02 L1101.55 1189.02 L1102.14 1189.02 L1102.72 1189.02 L1103.31 1189.02 L1103.89 1189.02 L1104.48 1189.02 L1105.07 1189.02 L1105.65 1189.02 L1106.24 1189.02 L1106.83 1189.02 L1107.41 1189.02 L1108 1189.02 L1108.59 1189.02 L1109.17 1189.02 L1109.76 1189.02 L1110.34 1189.02 L1110.93 1189.02 L1111.52 1189.02 L1112.1 1189.02 L1112.69 1189.02 L1113.28 1189.02 L1113.86 1189.02 L1114.45 1189.02 L1115.04 1189.02 L1115.62 1189.02 L1116.21 1189.02 L1116.8 1189.02 L1117.38 1189.02 L1117.97 1189.02 L1118.55 1189.02 L1119.14 1189.02 L1119.73 1189.02 L1120.31 1189.02 L1120.9 1189.02 L1121.49 1189.02 L1122.07 1189.02 L1122.66 1189.02 L1123.25 1189.02 L1123.83 1189.02 L1124.42 1189.02 L1125.01 1189.02 L1125.59 1189.02 L1126.18 1189.02 L1126.76 1189.02 L1127.35 1189.02 L1127.94 1189.02 L1128.52 1189.02 L1129.11 1189.02 L1129.7 1189.02 L1130.28 1189.02 L1130.87 1189.02 L1131.46 1189.02 L1132.04 1189.02 L1132.63 1189.02 L1133.21 1189.02 L1133.8 1189.02 L1134.39 1189.02 L1134.97 1189.02 L1135.56 1189.02 L1136.15 1189.02 L1136.73 1189.02 L1137.32 1189.02 L1137.91 1189.02 L1138.49 1189.02 L1139.08 1189.02 L1139.67 1189.02 L1140.25 1189.02 L1140.84 1189.02 L1141.42 1189.02 L1142.01 1189.02 L1142.6 1189.02 L1143.18 1189.02 L1143.77 1189.02 L1144.36 1189.02 L1144.94 1189.02 L1145.53 1189.02 L1146.12 1189.02 L1146.7 1189.02 L1147.29 1189.02 L1147.88 1189.02 L1148.46 1189.02 L1149.05 1189.02 L1149.63 1189.02 L1150.22 1189.02 L1150.81 1189.02 L1151.39 1189.02 L1151.98 1189.02 L1152.57 1189.02 L1153.15 1189.02 L1153.74 1189.02 L1154.33 1189.02 L1154.91 1189.02 L1155.5 1189.02 L1156.09 1189.02 L1156.67 1189.02 L1157.26 1189.02 L1157.84 1189.02 L1158.43 1189.02 L1159.02 1189.02 L1159.6 1189.02 L1160.19 1189.02 L1160.78 1189.02 L1161.36 1189.02 L1161.95 1189.02 L1162.54 1189.02 L1163.12 1189.02 L1163.71 1189.02 L1164.29 1189.02 L1164.88 1189.02 L1165.47 1189.02 L1166.05 1189.02 L1166.64 1189.02 L1167.23 1189.02 L1167.81 1189.02 L1168.4 1189.02 L1168.99 1189.02 L1169.57 1189.02 L1170.16 1189.02 L1170.75 1189.02 L1171.33 1189.02 L1171.92 1189.02 L1172.5 1189.02 L1173.09 1189.02 L1173.68 1189.02 L1174.26 1189.02 L1174.85 1189.02 L1175.44 1189.02 L1176.02 1189.02 L1176.61 1189.02 L1177.2 1189.02 L1177.78 1189.02 L1178.37 1189.02 L1178.96 1189.02 L1179.54 1189.02 L1180.13 1189.02 L1180.71 1189.02 L1181.3 1189.02 L1181.89 1189.02 L1182.47 1189.02 L1183.06 1189.02 L1183.65 1189.02 L1184.23 1189.02 L1184.82 1189.02 L1185.41 1189.02 L1185.99 1189.02 L1186.58 1189.02 L1187.16 1189.02 L1187.75 1189.02 L1188.34 1189.02 L1188.92 1189.02 L1189.51 1189.02 L1190.1 1189.02 L1190.68 1189.02 L1191.27 1189.02 L1191.86 1189.02 L1192.44 1189.02 L1193.03 1189.02 L1193.62 1189.02 L1194.2 1189.02 L1194.79 1189.02 L1195.37 1189.02 L1195.96 1189.02 L1196.55 1189.02 L1197.13 1189.02 L1197.72 1189.02 L1198.31 1189.02 L1198.89 1189.02 L1199.48 1189.02 L1200.07 1189.02 L1200.65 1189.02 L1201.24 1189.02 L1201.83 1189.02 L1202.41 1189.02 L1203 1189.02 L1203.58 1189.02 L1204.17 1189.02 L1204.76 1189.02 L1205.34 1189.02 L1205.93 1189.02 L1206.52 1189.02 L1207.1 1189.02 L1207.69 1189.02 L1208.28 1189.02 L1208.86 1189.02 L1209.45 1189.02 L1210.03 1189.02 L1210.62 1189.02 L1211.21 1189.02 L1211.79 1189.02 L1212.38 1189.02 L1212.97 1189.02 L1213.55 1189.02 L1214.14 1189.02 L1214.73 1189.02 L1215.31 1189.02 L1215.9 1189.02 L1216.49 1189.02 L1217.07 1189.02 L1217.66 1189.02 L1218.24 1189.02 L1218.83 1189.02 L1219.42 1189.02 L1220 1189.02 L1220.59 1189.02 L1221.18 1189.02 L1221.76 1189.02 L1222.35 1189.02 L1222.94 1189.02 L1223.52 1189.02 L1224.11 1189.02 L1224.7 1189.02 L1225.28 1189.02 L1225.87 1189.02 L1226.45 1189.02 L1227.04 1189.02 L1227.63 1189.02 L1228.21 1189.02 L1228.8 1189.02 L1229.39 1189.02 L1229.97 1189.02 L1230.56 1189.02 L1231.15 1189.02 L1231.73 1189.02 L1232.32 1189.02 L1232.91 1189.02 L1233.49 1189.02 L1234.08 1189.02 L1234.66 1189.02 L1235.25 1189.02 L1235.84 1189.02 L1236.42 1189.02 L1237.01 1189.02 L1237.6 1189.02 L1238.18 1189.02 L1238.77 1189.02 L1239.36 1189.02 L1239.94 1189.02 L1240.53 1189.02 L1241.11 1189.02 L1241.7 1189.02 L1242.29 1189.02 L1242.87 1189.02 L1243.46 1189.02 L1244.05 1189.02 L1244.63 1189.02 L1245.22 1189.02 L1245.81 1189.02 L1246.39 1189.02 L1246.98 1189.02 L1247.57 1189.02 L1248.15 1189.02 L1248.74 1189.02 L1249.32 1189.02 L1249.91 1189.02 L1250.5 1189.02 L1251.08 1189.02 L1251.67 1189.02 L1252.26 1189.02 L1252.84 1189.02 L1253.43 1189.02 L1254.02 1189.02 L1254.6 1189.02 L1255.19 1189.02 L1255.78 1189.02 L1256.36 1189.02 L1256.95 1189.02 L1257.53 1189.02 L1258.12 1189.02 L1258.71 1189.02 L1259.29 1189.02 L1259.88 1189.02 L1260.47 1189.02 L1261.05 1189.02 L1261.64 1189.02 L1262.23 1189.02 L1262.81 1189.02 L1263.4 1189.02 L1263.98 1189.02 L1264.57 1189.02 L1265.16 1189.02 L1265.74 1189.02 L1266.33 1189.02 L1266.92 1189.02 L1267.5 1189.02 L1268.09 1189.02 L1268.68 1189.02 L1269.26 1189.02 L1269.85 1189.02 L1270.44 1189.02 L1271.02 1189.02 L1271.61 1189.02 L1272.19 1189.02 L1272.78 1189.02 L1273.37 1189.02 L1273.95 1189.02 L1274.54 1189.02 L1275.13 1189.02 L1275.71 1189.02 L1276.3 1189.02 L1276.89 1189.02 L1277.47 1189.02 L1278.06 1189.02 L1278.65 1189.02 L1279.23 1189.02 L1279.82 1189.02 L1280.4 1189.02 L1280.99 1189.02 L1281.58 1189.02 L1282.16 1189.02 L1282.75 1189.02 L1283.34 1189.02 L1283.92 1189.02 L1284.51 1189.02 L1285.1 1189.02 L1285.68 1189.02 L1286.27 1189.02 L1286.86 1189.02 L1287.44 1189.02 L1288.03 1189.02 L1288.61 1189.02 L1289.2 1189.02 L1289.79 1189.02 L1290.37 1189.02 L1290.96 1189.02 L1291.55 1189.02 L1292.13 1189.02 L1292.72 1189.02 L1293.31 1189.02 L1293.89 1189.02 L1294.48 1189.02 L1295.06 1189.02 L1295.65 1189.02 L1296.24 1189.02 L1296.82 1189.02 L1297.41 1189.02 L1298 1189.02 L1298.58 1189.02 L1299.17 1189.02 L1299.76 1189.02 L1300.34 1189.02 L1300.93 1189.02 L1301.52 1189.02 L1302.1 1189.02 L1302.69 1189.02 L1303.27 1189.02 L1303.86 1189.02 L1304.45 1189.02 L1305.03 1189.02 L1305.62 1189.02 L1306.21 1189.02 L1306.79 1189.02 L1307.38 1189.02 L1307.97 1189.02 L1308.55 1189.02 L1309.14 1189.02 L1309.73 1189.02 L1310.31 1189.02 L1310.9 1189.02 L1311.48 1189.02 L1312.07 1189.02 L1312.66 1189.02 L1313.24 1189.02 L1313.83 1189.02 L1314.42 1189.02 L1315 1189.02 L1315.59 1189.02 L1316.18 1189.02 L1316.76 1189.02 L1317.35 1189.02 L1317.93 1189.02 L1318.52 1189.02 L1319.11 1189.02 L1319.69 1189.02 L1320.28 1189.02 L1320.87 1189.02 L1321.45 1189.02 L1322.04 1189.02 L1322.63 1189.02 L1323.21 1189.02 L1323.8 1189.02 L1324.39 1189.02 L1324.97 1189.02 L1325.56 1189.02 L1326.14 1189.02 L1326.73 1189.02 L1327.32 1189.02 L1327.9 1189.02 L1328.49 1189.02 L1329.08 1189.02 L1329.66 1189.02 L1330.25 1189.02 L1330.84 1189.02 L1331.42 1189.02 L1332.01 1189.02 L1332.6 1189.02 L1333.18 1189.02 L1333.77 1189.02 L1334.35 1189.02 L1334.94 1189.02 L1335.53 1189.02 L1336.11 1189.02 L1336.7 1189.02 L1337.29 1189.02 L1337.87 1189.02 L1338.46 1189.02 L1339.05 1189.02 L1339.63 1189.02 L1340.22 1189.02 L1340.8 1189.02 L1341.39 1189.02 L1341.98 1189.02 L1342.56 1189.02 L1343.15 1189.02 L1343.74 1189.02 L1344.32 1189.02 L1344.91 1189.02 L1345.5 1189.02 L1346.08 1189.02 L1346.67 1189.02 L1347.26 1189.02 L1347.84 1189.02 L1348.43 1189.02 L1349.01 1189.02 L1349.6 1189.02 L1350.19 1189.02 L1350.77 1189.02 L1351.36 1189.02 L1351.95 1189.02 L1352.53 1189.02 L1353.12 1189.02 L1353.71 1189.02 L1354.29 1189.02 L1354.88 1189.02 L1355.47 1189.02 L1356.05 1189.02 L1356.64 1189.02 L1357.22 1189.02 L1357.81 1189.02 L1358.4 1189.02 L1358.98 1189.02 L1359.57 1189.02 L1360.16 1189.02 L1360.74 1189.02 L1361.33 1189.02 L1361.92 1189.02 L1362.5 1189.02 L1363.09 1189.02 L1363.68 1189.02 L1364.26 1189.02 L1364.85 1189.02 L1365.43 1189.02 L1366.02 1189.02 L1366.61 1189.02 L1367.19 1189.02 L1367.78 1189.02 L1368.37 1189.02 L1368.95 1189.02 L1369.54 1189.02 L1370.13 1189.02 L1370.71 1189.02 L1371.3 1189.02 L1371.88 1189.02 L1372.47 1189.02 L1373.06 1189.02 L1373.64 1189.02 L1374.23 1189.02 L1374.82 1189.02 L1375.4 1189.02 L1375.99 1189.02 L1376.58 1189.02 L1377.16 1189.02 L1377.75 1189.02 L1378.34 1189.02 L1378.92 1189.02 L1379.51 1189.02 L1380.09 1189.02 L1380.68 1189.02 L1381.27 1189.02 L1381.85 1189.02 L1382.44 1189.02 L1383.03 1189.02 L1383.61 1189.02 L1384.2 1189.02 L1384.79 1189.02 L1385.37 1189.02 L1385.96 1189.02 L1386.55 1189.02 L1387.13 1189.02 L1387.72 1189.02 L1388.3 1189.02 L1388.89 1189.02 L1389.48 1189.02 L1390.06 1189.02 L1390.65 1189.02 L1391.24 1189.02 L1391.82 1189.02 L1392.41 1189.02 L1393 1189.02 L1393.58 1189.02 L1394.17 1189.02 L1394.75 1189.02 L1395.34 1189.02 L1395.93 1189.02 L1396.51 1189.02 L1397.1 1189.02 L1397.69 1189.02 L1398.27 1189.02 L1398.86 1189.02 L1399.45 1189.02 L1400.03 1189.02 L1400.62 1189.02 L1401.21 1189.02 L1401.79 1189.02 L1402.38 1189.02 L1402.96 1189.02 L1403.55 1189.02 L1404.14 1189.02 L1404.72 1189.02 L1405.31 1189.02 L1405.9 1189.02 L1406.48 1189.02 L1407.07 1189.02 L1407.66 1189.02 L1408.24 1189.02 L1408.83 1189.02 L1409.42 1189.02 L1410 1189.02 L1410.59 1189.02 L1411.17 1189.02 L1411.76 1189.02 L1412.35 1189.02 L1412.93 1189.02 L1413.52 1189.02 L1414.11 1189.02 L1414.69 1189.02 L1415.28 1189.02 L1415.87 1189.02 L1416.45 1189.02 L1417.04 1189.02 L1417.63 1189.02 L1418.21 1189.02 L1418.8 1189.02 L1419.38 1189.02 L1419.97 1189.02 L1420.56 1189.02 L1421.14 1189.02 L1421.73 1189.02 L1422.32 1189.02 L1422.9 1189.02 L1423.49 1189.02 L1424.08 1189.02 L1424.66 1189.02 L1425.25 1189.02 L1425.83 1189.02 L1426.42 1189.02 L1427.01 1189.02 L1427.59 1189.02 L1428.18 1189.02 L1428.77 1189.02 L1429.35 1189.02 L1429.94 1189.02 L1430.53 1189.02 L1431.11 1189.02 L1431.7 1189.02 L1432.29 1189.02 L1432.87 1189.02 L1433.46 1189.02 L1434.04 1189.02 L1434.63 1189.02 L1435.22 1189.02 L1435.8 1189.02 L1436.39 1189.02 L1436.98 1189.02 L1437.56 1189.02 L1438.15 1189.02 L1438.74 1189.02 L1439.32 1189.02 L1439.91 1189.02 L1440.5 1189.02 L1441.08 1189.02 L1441.67 1189.02 L1442.25 1189.02 L1442.84 1189.02 L1443.43 1189.02 L1444.01 1189.02 L1444.6 1189.02 L1445.19 1189.02 L1445.77 1189.02 L1446.36 1189.02 L1446.95 1189.02 L1447.53 1189.02 L1448.12 1189.02 L1448.7 1189.02 L1449.29 1189.02 L1449.88 1189.02 L1450.46 1189.02 L1451.05 1189.02 L1451.64 1189.02 L1452.22 1189.02 L1452.81 1189.02 L1453.4 1189.02 L1453.98 1189.02 L1454.57 1189.02 L1455.16 1189.02 L1455.74 1189.02 L1456.33 1189.02 L1456.91 1189.02 L1457.5 1189.02 L1458.09 1189.02 L1458.67 1189.02 L1459.26 1189.02 L1459.85 1189.02 L1460.43 1189.02 L1461.02 1189.02 L1461.61 1189.02 L1462.19 1189.02 L1462.78 1189.02 L1463.37 1189.02 L1463.95 1189.02 L1464.54 1189.02 L1465.12 1189.02 L1465.71 1189.02 L1466.3 1189.02 L1466.88 1189.02 L1467.47 1189.02 L1468.06 1189.02 L1468.64 1189.02 L1469.23 1189.02 L1469.82 1189.02 L1470.4 1189.02 L1470.99 1189.02 L1471.57 1189.02 L1472.16 1189.02 L1472.75 1189.02 L1473.33 1189.02 L1473.92 1189.02 L1474.51 1189.02 L1475.09 1189.02 L1475.68 1189.02 L1476.27 1189.02 L1476.85 1189.02 L1477.44 1189.02 L1478.03 1189.02 L1478.61 1189.02 L1479.2 1189.02 L1479.78 1189.02 L1480.37 1189.02 L1480.96 1189.02 L1481.54 1189.02 L1482.13 1189.02 L1482.72 1189.02 L1483.3 1189.02 L1483.89 1189.02 L1484.48 1189.02 L1485.06 1189.02 L1485.65 1189.02 L1486.24 1189.02 L1486.82 1189.02 L1487.41 1189.02 L1487.99 1189.02 L1488.58 1189.02 L1489.17 1189.02 L1489.75 1189.02 L1490.34 1189.02 L1490.93 1189.02 L1491.51 1189.02 L1492.1 1189.02 L1492.69 1189.02 L1493.27 1189.02 L1493.86 1189.02 L1494.45 1189.02 L1495.03 1189.02 L1495.62 1189.02 L1496.2 1189.02 L1496.79 1189.02 L1497.38 1189.02 L1497.96 1189.02 L1498.55 1189.02 L1499.14 1189.02 L1499.72 1189.02 L1500.31 1189.02 L1500.9 1189.02 L1501.48 1189.02 L1502.07 1189.02 L1502.65 1189.02 L1503.24 1189.02 L1503.83 1189.02 L1504.41 1189.02 L1505 1189.02 L1505.59 1189.02 L1506.17 1189.02 L1506.76 1189.02 L1507.35 1189.02 L1507.93 1189.02 L1508.52 1189.02 L1509.11 1189.02 L1509.69 1189.02 L1510.28 1189.02 L1510.86 1189.02 L1511.45 1189.02 L1512.04 1189.02 L1512.62 1189.02 L1513.21 1189.02 L1513.8 1189.02 L1514.38 1189.02 L1514.97 1189.02 L1515.56 1189.02 L1516.14 1189.02 L1516.73 1189.02 L1517.32 1189.02 L1517.9 1189.02 L1518.49 1189.02 L1519.07 1189.02 L1519.66 1189.02 L1520.25 1189.02 L1520.83 1189.02 L1521.42 1189.02 L1522.01 1189.02 L1522.59 1189.02 L1523.18 1189.02 L1523.77 1189.02 L1524.35 1189.02 L1524.94 1189.02 L1525.52 1189.02 L1526.11 1189.02 L1526.7 1189.02 L1527.28 1189.02 L1527.87 1189.02 L1528.46 1189.02 L1529.04 1189.02 L1529.63 1189.02 L1530.22 1189.02 L1530.8 1189.02 L1531.39 1189.02 L1531.98 1189.02 L1532.56 1189.02 L1533.15 1189.02 L1533.73 1189.02 L1534.32 1189.02 L1534.91 1189.02 L1535.49 1189.02 L1536.08 1189.02 L1536.67 1189.02 L1537.25 1189.02 L1537.84 1189.02 L1538.43 1189.02 L1539.01 1189.02 L1539.6 1189.02 L1540.19 1189.02 L1540.77 1189.02 L1541.36 1189.02 L1541.94 1189.02 L1542.53 1189.02 L1543.12 1189.02 L1543.7 1189.02 L1544.29 1189.02 L1544.88 1189.02 L1545.46 1189.02 L1546.05 1189.02 L1546.64 1189.02 L1547.22 1189.02 L1547.81 1189.02 L1548.4 1189.02 L1548.98 1189.02 L1549.57 1189.02 L1550.15 1189.02 L1550.74 1189.02 L1551.33 1189.02 L1551.91 1189.02 L1552.5 1189.02 L1553.09 1189.02 L1553.67 1189.02 L1554.26 1189.02 L1554.85 1189.02 L1555.43 1189.02 L1556.02 1189.02 L1556.6 1189.02 L1557.19 1189.02 L1557.78 1189.02 L1558.36 1189.02 L1558.95 1189.02 L1559.54 1189.02 L1560.12 1189.02 L1560.71 1189.02 L1561.3 1189.02 L1561.88 1189.02 L1562.47 1189.02 L1563.06 1189.02 L1563.64 1189.02 L1564.23 1189.02 L1564.81 1189.02 L1565.4 1189.02 L1565.99 1189.02 L1566.57 1189.02 L1567.16 1189.02 L1567.75 1189.02 L1568.33 1189.02 L1568.92 1189.02 L1569.51 1189.02 L1570.09 1189.02 L1570.68 1189.02 L1571.27 1189.02 L1571.85 1189.02 L1572.44 1189.02 L1573.02 1189.02 L1573.61 1189.02 L1574.2 1189.02 L1574.78 1189.02 L1575.37 1189.02 L1575.96 1189.02 L1576.54 1189.02 L1577.13 1189.02 L1577.72 1189.02 L1578.3 1189.02 L1578.89 1189.02 L1579.47 1189.02 L1580.06 1189.02 L1580.65 1189.02 L1581.23 1189.02 L1581.82 1189.02 L1582.41 1189.02 L1582.99 1189.02 L1583.58 1189.02 L1584.17 1189.02 L1584.75 1189.02 L1585.34 1189.02 L1585.93 1189.02 L1586.51 1189.02 L1587.1 1189.02 L1587.68 1189.02 L1588.27 1189.02 L1588.86 1189.02 L1589.44 1189.02 L1590.03 1189.02 L1590.62 1189.02 L1591.2 1189.02 L1591.79 1189.02 L1592.38 1189.02 L1592.96 1189.02 L1593.55 1189.02 L1594.14 1189.02 L1594.72 1189.02 L1595.31 1189.02 L1595.89 1189.02 L1596.48 1189.02 L1597.07 1189.02 L1597.65 1189.02 L1598.24 1189.02 L1598.83 1189.02 L1599.41 1189.02 L1600 1189.02 L1600.59 1189.02 L1601.17 1189.02 L1601.76 1189.02 L1602.34 1189.02 L1602.93 1189.02 L1603.52 1189.02 L1604.1 1189.02 L1604.69 1189.02 L1605.28 1189.02 L1605.86 1189.02 L1606.45 1189.02 L1607.04 1189.02 L1607.62 1189.02 L1608.21 1189.02 L1608.8 1189.02 L1609.38 1189.02 L1609.97 1189.02 L1610.55 1189.02 L1611.14 1189.02 L1611.73 1189.02 L1612.31 1189.02 L1612.9 1189.02 L1613.49 1189.02 L1614.07 1189.02 L1614.66 1189.02 L1615.25 1189.02 L1615.83 1189.02 L1616.42 1189.02 L1617.01 1189.02 L1617.59 1189.02 L1618.18 1189.02 L1618.76 1189.02 L1619.35 1189.02 L1619.94 1189.02 L1620.52 1189.02 L1621.11 1189.02 L1621.7 1189.02 L1622.28 1189.02 L1622.87 1189.02 L1623.46 1189.02 L1624.04 1189.02 L1624.63 1189.02 L1625.22 1189.02 L1625.8 1189.02 L1626.39 1189.02 L1626.97 1189.02 L1627.56 1189.02 L1628.15 1189.02 L1628.73 1189.02 L1629.32 1189.02 L1629.91 1189.02 L1630.49 1189.02 L1631.08 1189.02 L1631.67 1189.02 L1632.25 1189.02 L1632.84 1189.02 L1633.42 1189.02 L1634.01 1189.02 L1634.6 1189.02 L1635.18 1189.02 L1635.77 1189.02 L1636.36 1189.02 L1636.94 1189.02 L1637.53 1189.02 L1638.12 1189.02 L1638.7 1189.02 L1639.29 1189.02 L1639.88 1189.02 L1640.46 1189.02 L1641.05 1189.02 L1641.63 1189.02 L1642.22 1189.02 L1642.81 1189.02 L1643.39 1189.02 L1643.98 1189.02 L1644.57 1189.02 L1645.15 1189.02 L1645.74 1189.02 L1646.33 1189.02 L1646.91 1189.02 L1647.5 1189.02 L1648.09 1189.02 L1648.67 1189.02 L1649.26 1189.02 L1649.84 1189.02 L1650.43 1189.02 L1651.02 1189.02 L1651.6 1189.02 L1652.19 1189.02 L1652.78 1189.02 L1653.36 1189.02 L1653.95 1189.02 L1654.54 1189.02 L1655.12 1189.02 L1655.71 1189.02 L1656.29 1189.02 L1656.88 1189.02 L1657.47 1189.02 L1658.05 1189.02 L1658.64 1189.02 L1659.23 1189.02 L1659.81 1189.02 L1660.4 1189.02 L1660.99 1189.02 L1661.57 1189.02 L1662.16 1189.02 L1662.75 1189.02 L1663.33 1189.02 L1663.92 1189.02 L1664.5 1189.02 L1665.09 1189.02 L1665.68 1189.02 L1666.26 1189.02 L1666.85 1189.02 L1667.44 1189.02 L1668.02 1189.02 L1668.61 1189.02 L1669.2 1189.02 L1669.78 1189.02 L1670.37 1189.02 L1670.96 1189.02 L1671.54 1189.02 L1672.13 1189.02 L1672.71 1189.02 L1673.3 1189.02 L1673.89 1189.02 L1674.47 1189.02 L1675.06 1189.02 L1675.65 1189.02 L1676.23 1189.02 L1676.82 1189.02 L1677.41 1189.02 L1677.99 1189.02 L1678.58 1189.02 L1679.17 1189.02 L1679.75 1189.02 L1680.34 1189.02 L1680.92 1189.02 L1681.51 1189.02 L1682.1 1189.02 L1682.68 1189.02 L1683.27 1189.02 L1683.86 1189.02 L1684.44 1189.02 L1685.03 1189.02 L1685.62 1189.02 L1686.2 1189.02 L1686.79 1189.02 L1687.37 1189.02 L1687.96 1189.02 L1688.55 1189.02 L1689.13 1189.02 L1689.72 1189.02 L1690.31 1189.02 L1690.89 1189.02 L1691.48 1189.02 L1692.07 1189.02 L1692.65 1189.02 L1693.24 1189.02 L1693.83 1189.02 L1694.41 1189.02 L1695 1189.02 L1695.58 1189.02 L1696.17 1189.02 L1696.76 1189.02 L1697.34 1189.02 L1697.93 1189.02 L1698.52 1189.02 L1699.1 1189.02 L1699.69 1189.02 L1700.28 1189.02 L1700.86 1189.02 L1701.45 1189.02 L1702.04 1189.02 L1702.62 1189.02 L1703.21 1189.02 L1703.79 1189.02 L1704.38 1189.02 L1704.97 1189.02 L1705.55 1189.02 L1706.14 1189.02 L1706.73 1189.02 L1707.31 1189.02 L1707.9 1189.02 L1708.49 1189.02 L1709.07 1189.02 L1709.66 1189.02 L1710.24 1189.02 L1710.83 1189.02 L1711.42 1189.02 L1712 1189.02 L1712.59 1189.02 L1713.18 1189.02 L1713.76 1189.02 L1714.35 1189.02 L1714.94 1189.02 L1715.52 1189.02 L1716.11 1189.02 L1716.7 1189.02 L1717.28 1189.02 L1717.87 1189.02 L1718.45 1189.02 L1719.04 1189.02 L1719.63 1189.02 L1720.21 1189.02 L1720.8 1189.02 L1721.39 1189.02 L1721.97 1189.02 L1722.56 1189.02 L1723.15 1189.02 L1723.73 1189.02 L1724.32 1189.02 L1724.91 1189.02 L1725.49 1189.02 L1726.08 1189.02 L1726.66 1189.02 L1727.25 1189.02 L1727.84 1189.02 L1728.42 1189.02 L1729.01 1189.02 L1729.6 1189.02 L1730.18 1189.02 L1730.77 1189.02 L1731.36 1189.02 L1731.94 1189.02 L1732.53 1189.02 L1733.11 1189.02 L1733.7 1189.02 L1734.29 1189.02 L1734.87 1189.02 L1735.46 1189.02 L1736.05 1189.02 L1736.63 1189.02 L1737.22 1189.02 L1737.81 1189.02 L1738.39 1189.02 L1738.98 1189.02 L1739.57 1189.02 L1740.15 1189.02 L1740.74 1189.02 L1741.32 1189.02 L1741.91 1189.02 L1742.5 1189.02 L1743.08 1189.02 L1743.67 1189.02 L1744.26 1189.02 L1744.84 1189.02 L1745.43 1189.02 L1746.02 1189.02 L1746.6 1189.02 L1747.19 1189.02 L1747.78 1189.02 L1748.36 1189.02 L1748.95 1189.02 L1749.53 1189.02 L1750.12 1189.02 L1750.71 1189.02 L1751.29 1189.02 L1751.88 1189.02 L1752.47 1189.02 L1753.05 1189.02 L1753.64 1189.02 L1754.23 1189.02 L1754.81 1189.02 L1755.4 1189.02 L1755.99 1189.02 L1756.57 1189.02 L1757.16 1189.02 L1757.74 1189.02 L1758.33 1189.02 L1758.92 1189.02 L1759.5 1189.02 L1760.09 1189.02 L1760.68 1189.02 L1761.26 1189.02 L1761.85 1189.02 L1762.44 1189.02 L1763.02 1189.02 L1763.61 1189.02 L1764.19 1189.02 L1764.78 1189.02 L1765.37 1189.02 L1765.95 1189.02 L1766.54 1189.02 L1767.13 1189.02 L1767.71 1189.02 L1768.3 1189.02 L1768.89 1189.02 L1769.47 1189.02 L1770.06 1189.02 L1770.65 1189.02 L1771.23 1189.02 L1771.82 1189.02 L1772.4 1189.02 L1772.99 1189.02 L1773.58 1189.02 L1774.16 1189.02 L1774.75 1189.02 L1775.34 1189.02 L1775.92 1189.02 L1776.51 1189.02 L1777.1 1189.02 L1777.68 1189.02 L1778.27 1189.02 L1778.86 1189.02 L1779.44 1189.02 L1780.03 1189.02 L1780.61 1189.02 L1781.2 1189.02 L1781.79 1189.02 L1782.37 1189.02 L1782.96 1189.02 L1783.55 1189.02 L1784.13 1189.02 L1784.72 1189.02 L1785.31 1189.02 L1785.89 1189.02 L1786.48 1189.02 L1787.06 1189.02 L1787.65 1189.02 L1788.24 1189.02 L1788.82 1189.02 L1789.41 1189.02 L1790 1189.02 L1790.58 1189.02 L1791.17 1189.02 L1791.76 1189.02 L1792.34 1189.02 L1792.93 1189.02 L1793.52 1189.02 L1794.1 1189.02 L1794.69 1189.02 L1795.27 1189.02 L1795.86 1189.02 L1796.45 1189.02 L1797.03 1189.02 L1797.62 1189.02 L1798.21 1189.02 L1798.79 1189.02 L1799.38 1189.02 L1799.97 1189.02 L1800.55 1189.02 L1801.14 1189.02 L1801.73 1189.02 L1802.31 1189.02 L1802.9 1189.02 L1803.48 1189.02 L1804.07 1189.02 L1804.66 1189.02 L1805.24 1189.02 L1805.83 1189.02 L1806.42 1189.02 L1807 1189.02 L1807.59 1189.02 L1808.18 1189.02 L1808.76 1189.02 L1809.35 1189.02 L1809.94 1189.02 L1810.52 1189.02 L1811.11 1189.02 L1811.69 1189.02 L1812.28 1189.02 L1812.87 1189.02 L1813.45 1189.02 L1814.04 1189.02 L1814.63 1189.02 L1815.21 1189.02 L1815.8 1189.02 L1816.39 1189.02 L1816.97 1189.02 L1817.56 1189.02 L1818.14 1189.02 L1818.73 1189.02 L1819.32 1189.02 L1819.9 1189.02 L1820.49 1189.02 L1821.08 1189.02 L1821.66 1189.02 L1822.25 1189.02 L1822.84 1189.02 L1823.42 1189.02 L1824.01 1189.02 L1824.6 1189.02 L1825.18 1189.02 L1825.77 1189.02 L1826.35 1189.02 L1826.94 1189.02 L1827.53 1189.02 L1828.11 1189.02 L1828.7 1189.02 L1829.29 1189.02 L1829.87 1189.02 L1830.46 1189.02 L1831.05 1189.02 L1831.63 1189.02 L1832.22 1189.02 L1832.81 1189.02 L1833.39 1189.02 L1833.98 1189.02 L1834.56 1189.02 L1835.15 1189.02 L1835.74 1189.02 L1836.32 1189.02 L1836.91 1189.02 L1837.5 1189.02 L1838.08 1189.02 L1838.67 1189.02 L1839.26 1189.02 L1839.84 1189.02 L1840.43 1189.02 L1841.01 1189.02 L1841.6 1189.02 L1842.19 1189.02 L1842.77 1189.02 L1843.36 1189.02 L1843.95 1189.02 L1844.53 1189.02 L1845.12 1189.02 L1845.71 1189.02 L1846.29 1189.02 L1846.88 1189.02 L1847.47 1189.02 L1848.05 1189.02 L1848.64 1189.02 L1849.22 1189.02 L1849.81 1189.02 L1850.4 1189.02 L1850.98 1189.02 L1851.57 1189.02 L1852.16 1189.02 L1852.74 1189.02 L1853.33 1189.02 L1853.92 1189.02 L1854.5 1189.02 L1855.09 1189.02 L1855.68 1189.02 L1856.26 1189.02 L1856.85 1189.02 L1857.43 1189.02 L1858.02 1189.02 L1858.61 1189.02 L1859.19 1189.02 L1859.78 1189.02 L1860.37 1189.02 L1860.95 1189.02 L1861.54 1189.02 L1862.13 1189.02 L1862.71 1189.02 L1863.3 1189.02 L1863.88 1189.02 L1864.47 1189.02 L1865.06 1189.02 L1865.64 1189.02 L1866.23 1189.02 L1866.82 1189.02 L1867.4 1189.02 L1867.99 1189.02 L1868.58 1189.02 L1869.16 1189.02 L1869.75 1189.02 L1870.34 1189.02 L1870.92 1189.02 L1871.51 1189.02 L1872.09 1189.02 L1872.68 1189.02 L1873.27 1189.02 L1873.85 1189.02 L1874.44 1189.02 L1875.03 1189.02 L1875.61 1189.02 L1876.2 1189.02 L1876.79 1189.02 L1877.37 1189.02 L1877.96 1189.02 L1878.55 1189.02 L1879.13 1189.02 L1879.72 1189.02 L1880.3 1189.02 L1880.89 1189.02 L1881.48 1189.02 L1882.06 1189.02 L1882.65 1189.02 L1883.24 1189.02 L1883.82 1189.02 L1884.41 1189.02 L1885 1189.02 L1885.58 1189.02 L1886.17 1189.02 L1886.76 1189.02 L1887.34 1189.02 L1887.93 1189.02 L1888.51 1189.02 L1889.1 1189.02 L1889.69 1189.02 L1890.27 1189.02 L1890.86 1189.02 L1891.45 1189.02 L1892.03 1189.02 L1892.62 1189.02 L1893.21 1189.02 L1893.79 1189.02 L1894.38 1189.02 L1894.96 1189.02 L1895.55 1189.02 L1896.14 1189.02 L1896.72 1189.02 L1897.31 1189.02 L1897.9 1189.02 L1898.48 1189.02 L1899.07 1189.02 L1899.66 1189.02 L1900.24 1189.02 L1900.83 1189.02 L1901.42 1189.02 L1902 1189.02 L1902.59 1189.02 L1903.17 1189.02 L1903.76 1189.02 L1904.35 1189.02 L1904.93 1189.02 L1905.52 1189.02 L1906.11 1189.02 L1906.69 1189.02 L1907.28 1189.02 L1907.87 1189.02 L1908.45 1189.02 L1909.04 1189.02 L1909.63 1189.02 L1910.21 1189.02 L1910.8 1189.02 L1911.38 1189.02 L1911.97 1189.02 L1912.56 1189.02 L1913.14 1189.02 L1913.73 1189.02 L1914.32 1189.02 L1914.9 1189.02 L1915.49 1189.02 L1916.08 1189.02 L1916.66 1189.02 L1917.25 1189.02 L1917.83 1189.02 L1918.42 1189.02 L1919.01 1189.02 L1919.59 1189.02 L1920.18 1189.02 L1920.77 1189.02 L1921.35 1189.02 L1921.94 1189.02 L1922.53 1189.02 L1923.11 1189.02 L1923.7 1189.02 L1924.29 1189.02 L1924.87 1189.02 L1925.46 1189.02 L1926.04 1189.02 L1926.63 1189.02 L1927.22 1189.02 L1927.8 1189.02 L1928.39 1189.02 L1928.98 1189.02 L1929.56 1189.02 L1930.15 1189.02 L1930.74 1189.02 L1931.32 1189.02 L1931.91 1189.02 L1932.5 1189.02 L1933.08 1189.02 L1933.67 1189.02 L1934.25 1189.02 L1934.84 1189.02 L1935.43 1189.02 L1936.01 1189.02 L1936.6 1189.02 L1937.19 1189.02 L1937.77 1189.02 L1938.36 1189.02 L1938.95 1189.02 L1939.53 1189.02 L1940.12 1189.02 L1940.71 1189.02 L1941.29 1189.02 L1941.88 1189.02 L1942.46 1189.02 L1943.05 1189.02 L1943.64 1189.02 L1944.22 1189.02 L1944.81 1189.02 L1945.4 1189.02 L1945.98 1189.02 L1946.57 1189.02 L1947.16 1189.02 L1947.74 1189.02 L1948.33 1189.02 L1948.91 1189.02 L1949.5 1189.02 L1950.09 1189.02 L1950.67 1189.02 L1951.26 1189.02 L1951.85 1189.02 L1952.43 1189.02 L1953.02 1189.02 L1953.61 1189.02 L1954.19 1189.02 L1954.78 1189.02 L1955.37 1189.02 L1955.95 1189.02 L1956.54 1189.02 L1957.12 1189.02 L1957.71 1189.02 L1958.3 1189.02 L1958.88 1189.02 L1959.47 1189.02 L1960.06 1189.02 L1960.64 1189.02 L1961.23 1189.02 L1961.82 1189.02 L1962.4 1189.02 L1962.99 1189.02 L1963.58 1189.02 L1964.16 1189.02 L1964.75 1189.02 L1965.33 1189.02 L1965.92 1189.02 L1966.51 1189.02 L1967.09 1189.02 L1967.68 1189.02 L1968.27 1189.02 L1968.85 1189.02 L1969.44 1189.02 L1970.03 1189.02 L1970.61 1189.02 L1971.2 1189.02 L1971.78 1189.02 L1972.37 1189.02 L1972.96 1189.02 L1973.54 1189.02 L1974.13 1189.02 L1974.72 1189.02 L1975.3 1189.02 L1975.89 1189.02 L1976.48 1189.02 L1977.06 1189.02 L1977.65 1189.02 L1978.24 1189.02 L1978.82 1189.02 L1979.41 1189.02 L1979.99 1189.02 L1980.58 1189.02 L1981.17 1189.02 L1981.75 1189.02 L1982.34 1189.02 L1982.93 1189.02 L1983.51 1189.02 L1984.1 1189.02 L1984.69 1189.02 L1985.27 1189.02 L1985.86 1189.02 L1986.45 1189.02 L1987.03 1189.02 L1987.62 1189.02 L1988.2 1189.02 L1988.79 1189.02 L1989.38 1189.02 L1989.96 1189.02 L1990.55 1189.02 L1991.14 1189.02 L1991.72 1189.02 L1992.31 1189.02 L1992.9 1189.02 L1993.48 1189.02 L1994.07 1189.02 L1994.65 1189.02 L1995.24 1189.02 L1995.83 1189.02 L1996.41 1189.02 L1997 1189.02 L1997.59 1189.02 L1998.17 1189.02 L1998.76 1189.02 L1999.35 1189.02 L1999.93 1189.02 L2000.52 1189.02 L2001.11 1189.02 L2001.69 1189.02 L2002.28 1189.02 L2002.86 1189.02 L2003.45 1189.02 L2004.04 1189.02 L2004.62 1189.02 L2005.21 1189.02 L2005.8 1189.02 L2006.38 1189.02 L2006.97 1189.02 L2007.56 1189.02 L2008.14 1189.02 L2008.73 1189.02 L2009.32 1189.02 L2009.9 1189.02 L2010.49 1189.02 L2011.07 1189.02 L2011.66 1189.02 L2012.25 1189.02 L2012.83 1189.02 L2013.42 1189.02 L2014.01 1189.02 L2014.59 1189.02 L2015.18 1189.02 L2015.77 1189.02 L2016.35 1189.02 L2016.94 1189.02 L2017.53 1189.02 L2018.11 1189.02 L2018.7 1189.02 L2019.28 1189.02 L2019.87 1189.02 L2020.46 1189.02 L2021.04 1189.02 L2021.63 1189.02 L2022.22 1189.02 L2022.8 1189.02 L2023.39 1189.02 L2023.98 1189.02 L2024.56 1189.02 L2025.15 1189.02 L2025.73 1189.02 L2026.32 1189.02 L2026.91 1189.02 L2027.49 1189.02 L2028.08 1189.02 L2028.67 1189.02 L2029.25 1189.02 L2029.84 1189.02 L2030.43 1189.02 L2031.01 1189.02 L2031.6 1189.02 L2032.19 1189.02 L2032.77 1189.02 L2033.36 1189.02 L2033.94 1189.02 L2034.53 1189.02 L2035.12 1189.02 L2035.7 1189.02 L2036.29 1189.02 L2036.88 1189.02 L2037.46 1189.02 L2038.05 1189.02 L2038.64 1189.02 L2039.22 1189.02 L2039.81 1189.02 L2040.4 1189.02 L2040.98 1189.02 L2041.57 1189.02 L2042.15 1189.02 L2042.74 1189.02 L2043.33 1189.02 L2043.91 1189.02 L2044.5 1189.02 L2045.09 1189.02 L2045.67 1189.02 L2046.26 1189.02 L2046.85 1189.02 L2047.43 1189.02 L2048.02 1189.02 L2048.6 1189.02 L2049.19 1189.02 L2049.78 1189.02 L2050.36 1189.02 L2050.95 1189.02 L2051.54 1189.02 L2052.12 1189.02 L2052.71 1189.02 L2053.3 1189.02 L2053.88 1189.02 L2054.47 1189.02 L2055.06 1189.02 L2055.64 1189.02 L2056.23 1189.02 L2056.81 1189.02 L2057.4 1189.02 L2057.99 1189.02 L2058.57 1189.02 L2059.16 1189.02 L2059.75 1189.02 L2060.33 1189.02 L2060.92 1189.02 L2061.51 1189.02 L2062.09 1189.02 L2062.68 1189.02 L2063.27 1189.02 L2063.85 1189.02 L2064.44 1189.02 L2065.02 1189.02 L2065.61 1189.02 L2066.2 1189.02 L2066.78 1189.02 L2067.37 1189.02 L2067.96 1189.02 L2068.54 1189.02 L2069.13 1189.02 L2069.72 1189.02 L2070.3 1189.02 L2070.89 1189.02 L2071.48 1189.02 L2072.06 1189.02 L2072.65 1189.02 L2073.23 1189.02 L2073.82 1189.02 L2074.41 1189.02 L2074.99 1189.02 L2075.58 1189.02 L2076.17 1189.02 L2076.75 1189.02 L2077.34 1189.02 L2077.93 1189.02 L2078.51 1189.02 L2079.1 1189.02 L2079.68 1189.02 L2080.27 1189.02 L2080.86 1189.02 L2081.44 1189.02 L2082.03 1189.02 L2082.62 1189.02 L2083.2 1189.02 L2083.79 1189.02 L2084.38 1189.02 L2084.96 1189.02 L2085.55 1189.02 L2086.14 1189.02 L2086.72 1189.02 L2087.31 1189.02 L2087.89 1189.02 L2088.48 1189.02 L2089.07 1189.02 L2089.65 1189.02 L2090.24 1189.02 L2090.83 1189.02 L2091.41 1189.02 L2092 1189.02 L2092.59 1189.02 L2093.17 1189.02 L2093.76 1189.02 L2094.35 1189.02 L2094.93 1189.02 L2095.52 1189.02 L2096.1 1189.02 L2096.69 1189.02 L2097.28 1189.02 L2097.86 1189.02 L2098.45 1189.02 L2099.04 1189.02 L2099.62 1189.02 L2100.21 1189.02 L2100.8 1189.02 L2101.38 1189.02 L2101.97 1189.02 L2102.55 1189.02 L2103.14 1189.02 L2103.73 1189.02 L2104.31 1189.02 L2104.9 1189.02 L2105.49 1189.02 L2106.07 1189.02 L2106.66 1189.02 L2107.25 1189.02 L2107.83 1189.02 L2108.42 1189.02 L2109.01 1189.02 L2109.59 1189.02 L2110.18 1189.02 L2110.76 1189.02 L2111.35 1189.02 L2111.94 1189.02 L2112.52 1189.02 L2113.11 1189.02 L2113.7 1189.02 L2114.28 1189.02 L2114.87 1189.02 L2115.46 1189.02 L2116.04 1189.02 L2116.63 1189.02 L2117.22 1189.02 L2117.8 1189.02 L2118.39 1189.02 L2118.97 1189.02 L2119.56 1189.02 L2120.15 1189.02 L2120.73 1189.02 L2121.32 1189.02 L2121.91 1189.02 L2122.49 1189.02 L2123.08 1189.02 L2123.67 1189.02 L2124.25 1189.02 L2124.84 1189.02 L2125.42 1189.02 L2126.01 1189.02 L2126.6 1189.02 L2127.18 1189.02 L2127.77 1189.02 L2128.36 1189.02 L2128.94 1189.02 L2129.53 1189.02 L2130.12 1189.02 L2130.7 1189.02 L2131.29 1189.02 L2131.88 1189.02 L2132.46 1189.02 L2133.05 1189.02 L2133.63 1189.02 L2134.22 1189.02 L2134.81 1189.02 L2135.39 1189.02 L2135.98 1189.02 L2136.57 1189.02 L2137.15 1189.02 L2137.74 1189.02 L2138.33 1189.02 L2138.91 1189.02 L2139.5 1189.02 L2140.09 1189.02 L2140.67 1189.02 L2141.26 1189.02 L2141.84 1189.02 L2142.43 1189.02 L2143.02 1189.02 L2143.6 1189.02 L2144.19 1189.02 L2144.78 1189.02 L2145.36 1189.02 L2145.95 1189.02 L2146.54 1189.02 L2147.12 1189.02 L2147.71 1189.02 L2148.3 1189.02 L2148.88 1189.02 L2149.47 1189.02 L2150.05 1189.02 L2150.64 1189.02 L2151.23 1189.02 L2151.81 1189.02 L2152.4 1189.02 L2152.99 1189.02 L2153.57 1189.02 L2154.16 1189.02 L2154.75 1189.02 L2155.33 1189.02 L2155.92 1189.02 L2156.5 1189.02 L2157.09 1189.02 L2157.68 1189.02 L2158.26 1189.02 L2158.26 1188.26 L2157.68 1188.26 L2157.09 1188.26 L2156.5 1188.26 L2155.92 1188.26 L2155.33 1188.26 L2154.75 1188.26 L2154.16 1188.26 L2153.57 1188.26 L2152.99 1188.26 L2152.4 1188.26 L2151.81 1188.26 L2151.23 1188.26 L2150.64 1188.26 L2150.05 1188.26 L2149.47 1188.26 L2148.88 1188.26 L2148.3 1188.26 L2147.71 1188.26 L2147.12 1188.26 L2146.54 1188.26 L2145.95 1188.26 L2145.36 1188.26 L2144.78 1188.26 L2144.19 1188.26 L2143.6 1188.26 L2143.02 1188.26 L2142.43 1188.26 L2141.84 1188.26 L2141.26 1188.26 L2140.67 1188.26 L2140.09 1188.26 L2139.5 1188.26 L2138.91 1188.26 L2138.33 1188.26 L2137.74 1188.26 L2137.15 1188.26 L2136.57 1188.26 L2135.98 1188.26 L2135.39 1188.26 L2134.81 1188.26 L2134.22 1188.26 L2133.63 1188.26 L2133.05 1188.26 L2132.46 1188.26 L2131.88 1188.26 L2131.29 1188.26 L2130.7 1188.26 L2130.12 1188.26 L2129.53 1188.26 L2128.94 1188.26 L2128.36 1188.26 L2127.77 1188.26 L2127.18 1188.26 L2126.6 1188.26 L2126.01 1188.26 L2125.42 1188.26 L2124.84 1188.26 L2124.25 1188.26 L2123.67 1188.26 L2123.08 1188.26 L2122.49 1188.26 L2121.91 1188.26 L2121.32 1188.26 L2120.73 1188.26 L2120.15 1188.26 L2119.56 1188.26 L2118.97 1188.26 L2118.39 1188.26 L2117.8 1188.26 L2117.22 1188.26 L2116.63 1188.26 L2116.04 1188.26 L2115.46 1188.26 L2114.87 1188.26 L2114.28 1188.26 L2113.7 1188.26 L2113.11 1188.26 L2112.52 1188.26 L2111.94 1188.26 L2111.35 1188.26 L2110.76 1188.26 L2110.18 1188.26 L2109.59 1188.26 L2109.01 1188.26 L2108.42 1188.26 L2107.83 1188.26 L2107.25 1188.26 L2106.66 1188.26 L2106.07 1188.26 L2105.49 1188.26 L2104.9 1188.26 L2104.31 1188.26 L2103.73 1188.26 L2103.14 1188.26 L2102.55 1188.26 L2101.97 1188.26 L2101.38 1188.26 L2100.8 1188.26 L2100.21 1188.26 L2099.62 1188.26 L2099.04 1188.26 L2098.45 1188.26 L2097.86 1188.26 L2097.28 1188.26 L2096.69 1188.26 L2096.1 1188.26 L2095.52 1188.26 L2094.93 1188.26 L2094.35 1188.26 L2093.76 1188.26 L2093.17 1188.26 L2092.59 1188.26 L2092 1188.26 L2091.41 1188.26 L2090.83 1188.26 L2090.24 1188.26 L2089.65 1188.26 L2089.07 1188.26 L2088.48 1188.26 L2087.89 1188.26 L2087.31 1188.26 L2086.72 1188.26 L2086.14 1188.26 L2085.55 1188.26 L2084.96 1188.26 L2084.38 1188.26 L2083.79 1188.26 L2083.2 1188.26 L2082.62 1188.26 L2082.03 1188.26 L2081.44 1188.26 L2080.86 1188.26 L2080.27 1188.26 L2079.68 1188.26 L2079.1 1188.26 L2078.51 1188.26 L2077.93 1188.26 L2077.34 1188.26 L2076.75 1188.26 L2076.17 1188.26 L2075.58 1188.26 L2074.99 1188.26 L2074.41 1188.26 L2073.82 1188.26 L2073.23 1188.26 L2072.65 1188.26 L2072.06 1188.26 L2071.48 1188.26 L2070.89 1188.26 L2070.3 1188.26 L2069.72 1188.26 L2069.13 1188.26 L2068.54 1188.26 L2067.96 1188.26 L2067.37 1188.26 L2066.78 1188.26 L2066.2 1188.26 L2065.61 1188.26 L2065.02 1188.26 L2064.44 1188.26 L2063.85 1188.26 L2063.27 1188.26 L2062.68 1188.26 L2062.09 1188.26 L2061.51 1188.26 L2060.92 1188.26 L2060.33 1188.26 L2059.75 1188.26 L2059.16 1188.26 L2058.57 1188.26 L2057.99 1188.26 L2057.4 1188.26 L2056.81 1188.26 L2056.23 1188.26 L2055.64 1188.26 L2055.06 1188.26 L2054.47 1188.26 L2053.88 1188.26 L2053.3 1188.26 L2052.71 1188.26 L2052.12 1188.26 L2051.54 1188.26 L2050.95 1188.26 L2050.36 1188.26 L2049.78 1188.26 L2049.19 1188.26 L2048.6 1188.26 L2048.02 1188.26 L2047.43 1188.26 L2046.85 1188.26 L2046.26 1188.26 L2045.67 1188.26 L2045.09 1188.26 L2044.5 1188.26 L2043.91 1188.26 L2043.33 1188.26 L2042.74 1188.26 L2042.15 1188.26 L2041.57 1188.26 L2040.98 1188.26 L2040.4 1188.26 L2039.81 1188.26 L2039.22 1188.26 L2038.64 1188.26 L2038.05 1188.26 L2037.46 1188.26 L2036.88 1188.26 L2036.29 1188.26 L2035.7 1188.26 L2035.12 1188.26 L2034.53 1188.26 L2033.94 1188.26 L2033.36 1188.26 L2032.77 1188.26 L2032.19 1188.26 L2031.6 1188.26 L2031.01 1188.26 L2030.43 1188.26 L2029.84 1188.26 L2029.25 1188.26 L2028.67 1188.26 L2028.08 1188.26 L2027.49 1188.26 L2026.91 1188.26 L2026.32 1188.26 L2025.73 1188.26 L2025.15 1188.26 L2024.56 1188.26 L2023.98 1188.26 L2023.39 1188.26 L2022.8 1188.26 L2022.22 1188.26 L2021.63 1188.26 L2021.04 1188.26 L2020.46 1188.26 L2019.87 1188.26 L2019.28 1188.26 L2018.7 1188.26 L2018.11 1188.26 L2017.53 1188.26 L2016.94 1188.26 L2016.35 1188.26 L2015.77 1188.26 L2015.18 1188.26 L2014.59 1188.26 L2014.01 1188.26 L2013.42 1188.26 L2012.83 1188.26 L2012.25 1188.26 L2011.66 1188.26 L2011.07 1188.26 L2010.49 1188.26 L2009.9 1188.26 L2009.32 1188.26 L2008.73 1188.26 L2008.14 1188.26 L2007.56 1188.26 L2006.97 1188.26 L2006.38 1188.26 L2005.8 1188.26 L2005.21 1188.26 L2004.62 1188.26 L2004.04 1188.26 L2003.45 1188.26 L2002.86 1188.26 L2002.28 1188.26 L2001.69 1188.26 L2001.11 1188.26 L2000.52 1188.26 L1999.93 1188.26 L1999.35 1188.26 L1998.76 1188.26 L1998.17 1188.26 L1997.59 1188.26 L1997 1188.26 L1996.41 1188.26 L1995.83 1188.26 L1995.24 1188.26 L1994.65 1188.26 L1994.07 1188.26 L1993.48 1188.26 L1992.9 1188.26 L1992.31 1188.26 L1991.72 1188.26 L1991.14 1188.26 L1990.55 1188.26 L1989.96 1188.26 L1989.38 1188.26 L1988.79 1188.26 L1988.2 1188.26 L1987.62 1188.26 L1987.03 1188.26 L1986.45 1188.26 L1985.86 1188.26 L1985.27 1188.26 L1984.69 1188.26 L1984.1 1188.26 L1983.51 1188.26 L1982.93 1188.26 L1982.34 1188.26 L1981.75 1188.26 L1981.17 1188.26 L1980.58 1188.26 L1979.99 1188.26 L1979.41 1188.26 L1978.82 1188.26 L1978.24 1188.26 L1977.65 1188.26 L1977.06 1188.26 L1976.48 1188.26 L1975.89 1188.26 L1975.3 1188.26 L1974.72 1188.26 L1974.13 1188.26 L1973.54 1188.26 L1972.96 1188.26 L1972.37 1188.26 L1971.78 1188.26 L1971.2 1188.26 L1970.61 1188.26 L1970.03 1188.26 L1969.44 1188.26 L1968.85 1188.26 L1968.27 1188.26 L1967.68 1188.26 L1967.09 1188.26 L1966.51 1188.26 L1965.92 1188.26 L1965.33 1188.26 L1964.75 1188.26 L1964.16 1188.26 L1963.58 1188.26 L1962.99 1188.26 L1962.4 1188.26 L1961.82 1188.26 L1961.23 1188.26 L1960.64 1188.26 L1960.06 1188.26 L1959.47 1188.26 L1958.88 1188.26 L1958.3 1188.26 L1957.71 1188.26 L1957.12 1188.26 L1956.54 1188.26 L1955.95 1188.26 L1955.37 1188.26 L1954.78 1188.26 L1954.19 1188.26 L1953.61 1188.26 L1953.02 1188.26 L1952.43 1188.26 L1951.85 1188.26 L1951.26 1188.26 L1950.67 1188.26 L1950.09 1188.26 L1949.5 1188.26 L1948.91 1188.26 L1948.33 1188.26 L1947.74 1188.26 L1947.16 1188.26 L1946.57 1188.26 L1945.98 1188.26 L1945.4 1188.26 L1944.81 1188.26 L1944.22 1188.26 L1943.64 1188.26 L1943.05 1188.26 L1942.46 1188.26 L1941.88 1188.26 L1941.29 1188.26 L1940.71 1188.26 L1940.12 1188.26 L1939.53 1188.26 L1938.95 1188.26 L1938.36 1188.26 L1937.77 1188.26 L1937.19 1188.26 L1936.6 1188.26 L1936.01 1188.26 L1935.43 1188.26 L1934.84 1188.26 L1934.25 1188.26 L1933.67 1188.26 L1933.08 1188.26 L1932.5 1188.26 L1931.91 1188.26 L1931.32 1188.26 L1930.74 1188.26 L1930.15 1188.26 L1929.56 1188.26 L1928.98 1188.26 L1928.39 1188.26 L1927.8 1188.26 L1927.22 1188.26 L1926.63 1188.26 L1926.04 1188.26 L1925.46 1188.26 L1924.87 1188.26 L1924.29 1188.26 L1923.7 1188.26 L1923.11 1188.26 L1922.53 1188.26 L1921.94 1188.26 L1921.35 1188.26 L1920.77 1188.26 L1920.18 1188.26 L1919.59 1188.26 L1919.01 1188.26 L1918.42 1188.26 L1917.83 1188.26 L1917.25 1188.26 L1916.66 1188.26 L1916.08 1188.26 L1915.49 1188.26 L1914.9 1188.26 L1914.32 1188.26 L1913.73 1188.26 L1913.14 1188.26 L1912.56 1188.26 L1911.97 1188.26 L1911.38 1188.26 L1910.8 1188.26 L1910.21 1188.26 L1909.63 1188.26 L1909.04 1188.26 L1908.45 1188.26 L1907.87 1188.26 L1907.28 1188.26 L1906.69 1188.26 L1906.11 1188.26 L1905.52 1188.26 L1904.93 1188.26 L1904.35 1188.26 L1903.76 1188.26 L1903.17 1188.26 L1902.59 1188.26 L1902 1188.26 L1901.42 1188.26 L1900.83 1188.26 L1900.24 1188.26 L1899.66 1188.26 L1899.07 1188.26 L1898.48 1188.26 L1897.9 1188.26 L1897.31 1188.26 L1896.72 1188.26 L1896.14 1188.26 L1895.55 1188.26 L1894.96 1188.26 L1894.38 1188.26 L1893.79 1188.26 L1893.21 1188.26 L1892.62 1188.26 L1892.03 1188.26 L1891.45 1188.26 L1890.86 1188.26 L1890.27 1188.26 L1889.69 1188.26 L1889.1 1188.26 L1888.51 1188.26 L1887.93 1188.26 L1887.34 1188.26 L1886.76 1188.26 L1886.17 1188.26 L1885.58 1188.26 L1885 1188.26 L1884.41 1188.26 L1883.82 1188.26 L1883.24 1188.26 L1882.65 1188.26 L1882.06 1188.26 L1881.48 1188.26 L1880.89 1188.26 L1880.3 1188.26 L1879.72 1188.26 L1879.13 1188.26 L1878.55 1188.26 L1877.96 1188.26 L1877.37 1188.26 L1876.79 1188.26 L1876.2 1188.26 L1875.61 1188.26 L1875.03 1188.26 L1874.44 1188.26 L1873.85 1188.26 L1873.27 1188.26 L1872.68 1188.26 L1872.09 1188.26 L1871.51 1188.26 L1870.92 1188.26 L1870.34 1188.26 L1869.75 1188.26 L1869.16 1188.26 L1868.58 1188.26 L1867.99 1188.26 L1867.4 1188.26 L1866.82 1188.26 L1866.23 1188.26 L1865.64 1188.26 L1865.06 1188.26 L1864.47 1188.26 L1863.88 1188.26 L1863.3 1188.26 L1862.71 1188.26 L1862.13 1188.26 L1861.54 1188.26 L1860.95 1188.26 L1860.37 1188.26 L1859.78 1188.26 L1859.19 1188.26 L1858.61 1188.26 L1858.02 1188.26 L1857.43 1188.26 L1856.85 1188.26 L1856.26 1188.26 L1855.68 1188.26 L1855.09 1188.26 L1854.5 1188.26 L1853.92 1188.26 L1853.33 1188.26 L1852.74 1188.26 L1852.16 1188.26 L1851.57 1188.26 L1850.98 1188.26 L1850.4 1188.26 L1849.81 1188.26 L1849.22 1188.26 L1848.64 1188.26 L1848.05 1188.26 L1847.47 1188.26 L1846.88 1188.26 L1846.29 1188.26 L1845.71 1188.26 L1845.12 1188.26 L1844.53 1188.26 L1843.95 1188.26 L1843.36 1188.26 L1842.77 1188.26 L1842.19 1188.26 L1841.6 1188.26 L1841.01 1188.26 L1840.43 1188.26 L1839.84 1188.26 L1839.26 1188.26 L1838.67 1188.26 L1838.08 1188.26 L1837.5 1188.26 L1836.91 1188.26 L1836.32 1188.26 L1835.74 1188.26 L1835.15 1188.26 L1834.56 1188.26 L1833.98 1188.26 L1833.39 1188.26 L1832.81 1188.26 L1832.22 1188.26 L1831.63 1188.26 L1831.05 1188.26 L1830.46 1188.26 L1829.87 1188.26 L1829.29 1188.26 L1828.7 1188.26 L1828.11 1188.26 L1827.53 1188.26 L1826.94 1188.26 L1826.35 1188.26 L1825.77 1188.26 L1825.18 1188.26 L1824.6 1188.26 L1824.01 1188.26 L1823.42 1188.26 L1822.84 1188.26 L1822.25 1188.26 L1821.66 1188.26 L1821.08 1188.26 L1820.49 1188.26 L1819.9 1188.26 L1819.32 1188.26 L1818.73 1188.26 L1818.14 1188.26 L1817.56 1188.26 L1816.97 1188.26 L1816.39 1188.26 L1815.8 1188.26 L1815.21 1188.26 L1814.63 1188.26 L1814.04 1188.26 L1813.45 1188.26 L1812.87 1188.26 L1812.28 1188.26 L1811.69 1188.26 L1811.11 1188.26 L1810.52 1188.26 L1809.94 1188.26 L1809.35 1188.26 L1808.76 1188.26 L1808.18 1188.26 L1807.59 1188.26 L1807 1188.26 L1806.42 1188.26 L1805.83 1188.26 L1805.24 1188.26 L1804.66 1188.26 L1804.07 1188.26 L1803.48 1188.26 L1802.9 1188.26 L1802.31 1188.26 L1801.73 1188.26 L1801.14 1188.26 L1800.55 1188.26 L1799.97 1188.26 L1799.38 1188.26 L1798.79 1188.26 L1798.21 1188.26 L1797.62 1188.26 L1797.03 1188.26 L1796.45 1188.26 L1795.86 1188.26 L1795.27 1188.26 L1794.69 1188.26 L1794.1 1188.26 L1793.52 1188.26 L1792.93 1188.26 L1792.34 1188.26 L1791.76 1188.26 L1791.17 1188.26 L1790.58 1188.26 L1790 1188.26 L1789.41 1188.26 L1788.82 1188.26 L1788.24 1188.26 L1787.65 1188.26 L1787.06 1188.26 L1786.48 1188.26 L1785.89 1188.26 L1785.31 1188.26 L1784.72 1188.26 L1784.13 1188.26 L1783.55 1188.26 L1782.96 1188.26 L1782.37 1188.26 L1781.79 1188.26 L1781.2 1188.26 L1780.61 1188.26 L1780.03 1188.26 L1779.44 1188.26 L1778.86 1188.26 L1778.27 1188.26 L1777.68 1188.26 L1777.1 1188.26 L1776.51 1188.26 L1775.92 1188.26 L1775.34 1188.26 L1774.75 1188.26 L1774.16 1188.26 L1773.58 1188.26 L1772.99 1188.26 L1772.4 1188.26 L1771.82 1188.26 L1771.23 1188.26 L1770.65 1188.26 L1770.06 1188.26 L1769.47 1188.26 L1768.89 1188.26 L1768.3 1188.26 L1767.71 1188.26 L1767.13 1188.26 L1766.54 1188.26 L1765.95 1188.26 L1765.37 1188.26 L1764.78 1188.26 L1764.19 1188.26 L1763.61 1188.26 L1763.02 1188.26 L1762.44 1188.26 L1761.85 1188.26 L1761.26 1188.26 L1760.68 1188.26 L1760.09 1188.26 L1759.5 1188.26 L1758.92 1188.26 L1758.33 1188.26 L1757.74 1188.26 L1757.16 1188.26 L1756.57 1188.26 L1755.99 1188.26 L1755.4 1188.26 L1754.81 1188.26 L1754.23 1188.26 L1753.64 1188.26 L1753.05 1188.26 L1752.47 1188.26 L1751.88 1188.26 L1751.29 1188.26 L1750.71 1188.26 L1750.12 1188.26 L1749.53 1188.26 L1748.95 1188.26 L1748.36 1188.26 L1747.78 1188.26 L1747.19 1188.26 L1746.6 1188.26 L1746.02 1188.26 L1745.43 1188.26 L1744.84 1188.26 L1744.26 1188.26 L1743.67 1188.26 L1743.08 1188.26 L1742.5 1188.26 L1741.91 1188.26 L1741.32 1188.26 L1740.74 1188.26 L1740.15 1188.26 L1739.57 1188.26 L1738.98 1188.26 L1738.39 1188.26 L1737.81 1188.26 L1737.22 1188.26 L1736.63 1188.26 L1736.05 1188.26 L1735.46 1188.26 L1734.87 1188.26 L1734.29 1188.26 L1733.7 1188.26 L1733.11 1188.26 L1732.53 1188.26 L1731.94 1188.26 L1731.36 1188.26 L1730.77 1188.26 L1730.18 1188.26 L1729.6 1188.26 L1729.01 1188.26 L1728.42 1188.26 L1727.84 1188.26 L1727.25 1188.26 L1726.66 1188.26 L1726.08 1188.26 L1725.49 1188.26 L1724.91 1188.26 L1724.32 1188.26 L1723.73 1188.26 L1723.15 1188.26 L1722.56 1188.26 L1721.97 1188.26 L1721.39 1188.26 L1720.8 1188.26 L1720.21 1188.26 L1719.63 1188.26 L1719.04 1188.26 L1718.45 1188.26 L1717.87 1188.26 L1717.28 1188.26 L1716.7 1188.26 L1716.11 1188.26 L1715.52 1188.26 L1714.94 1188.26 L1714.35 1188.26 L1713.76 1188.26 L1713.18 1188.26 L1712.59 1188.26 L1712 1188.26 L1711.42 1188.26 L1710.83 1188.26 L1710.24 1188.26 L1709.66 1188.26 L1709.07 1188.26 L1708.49 1188.26 L1707.9 1188.26 L1707.31 1188.26 L1706.73 1188.26 L1706.14 1188.26 L1705.55 1188.26 L1704.97 1188.26 L1704.38 1188.26 L1703.79 1188.26 L1703.21 1188.26 L1702.62 1188.26 L1702.04 1188.26 L1701.45 1188.26 L1700.86 1188.26 L1700.28 1188.26 L1699.69 1188.26 L1699.1 1188.26 L1698.52 1188.26 L1697.93 1188.26 L1697.34 1188.26 L1696.76 1188.26 L1696.17 1188.26 L1695.58 1188.26 L1695 1188.26 L1694.41 1188.26 L1693.83 1188.26 L1693.24 1188.26 L1692.65 1188.26 L1692.07 1188.26 L1691.48 1188.26 L1690.89 1188.26 L1690.31 1188.26 L1689.72 1188.26 L1689.13 1188.26 L1688.55 1188.26 L1687.96 1188.26 L1687.37 1188.26 L1686.79 1188.26 L1686.2 1188.26 L1685.62 1188.26 L1685.03 1188.26 L1684.44 1188.26 L1683.86 1188.26 L1683.27 1188.26 L1682.68 1188.26 L1682.1 1188.26 L1681.51 1188.26 L1680.92 1188.26 L1680.34 1188.26 L1679.75 1188.26 L1679.17 1188.26 L1678.58 1188.26 L1677.99 1188.26 L1677.41 1188.26 L1676.82 1188.26 L1676.23 1188.26 L1675.65 1188.26 L1675.06 1188.26 L1674.47 1188.26 L1673.89 1188.26 L1673.3 1188.26 L1672.71 1188.26 L1672.13 1188.26 L1671.54 1188.26 L1670.96 1188.26 L1670.37 1188.26 L1669.78 1188.26 L1669.2 1188.26 L1668.61 1188.26 L1668.02 1188.26 L1667.44 1188.26 L1666.85 1188.26 L1666.26 1188.26 L1665.68 1188.26 L1665.09 1188.26 L1664.5 1188.26 L1663.92 1188.26 L1663.33 1188.26 L1662.75 1188.26 L1662.16 1188.26 L1661.57 1188.26 L1660.99 1188.26 L1660.4 1188.26 L1659.81 1188.26 L1659.23 1188.26 L1658.64 1188.26 L1658.05 1188.26 L1657.47 1188.26 L1656.88 1188.26 L1656.29 1188.26 L1655.71 1188.26 L1655.12 1188.26 L1654.54 1188.26 L1653.95 1188.26 L1653.36 1188.26 L1652.78 1188.26 L1652.19 1188.26 L1651.6 1188.26 L1651.02 1188.26 L1650.43 1188.26 L1649.84 1188.26 L1649.26 1188.26 L1648.67 1188.26 L1648.09 1188.26 L1647.5 1188.26 L1646.91 1188.26 L1646.33 1188.26 L1645.74 1188.26 L1645.15 1188.26 L1644.57 1188.26 L1643.98 1188.26 L1643.39 1188.26 L1642.81 1188.26 L1642.22 1188.26 L1641.63 1188.26 L1641.05 1188.26 L1640.46 1188.26 L1639.88 1188.26 L1639.29 1188.26 L1638.7 1188.26 L1638.12 1188.26 L1637.53 1188.26 L1636.94 1188.26 L1636.36 1188.26 L1635.77 1188.26 L1635.18 1188.26 L1634.6 1188.26 L1634.01 1188.26 L1633.42 1188.26 L1632.84 1188.26 L1632.25 1188.26 L1631.67 1188.26 L1631.08 1188.26 L1630.49 1188.26 L1629.91 1188.26 L1629.32 1188.26 L1628.73 1188.26 L1628.15 1188.26 L1627.56 1188.26 L1626.97 1188.26 L1626.39 1188.26 L1625.8 1188.26 L1625.22 1188.26 L1624.63 1188.26 L1624.04 1188.26 L1623.46 1188.26 L1622.87 1188.26 L1622.28 1188.26 L1621.7 1188.26 L1621.11 1188.26 L1620.52 1188.26 L1619.94 1188.26 L1619.35 1188.26 L1618.76 1188.26 L1618.18 1188.26 L1617.59 1188.26 L1617.01 1188.26 L1616.42 1188.26 L1615.83 1188.26 L1615.25 1188.26 L1614.66 1188.26 L1614.07 1188.26 L1613.49 1188.26 L1612.9 1188.26 L1612.31 1188.26 L1611.73 1188.26 L1611.14 1188.26 L1610.55 1188.26 L1609.97 1188.26 L1609.38 1188.26 L1608.8 1188.26 L1608.21 1188.26 L1607.62 1188.26 L1607.04 1188.26 L1606.45 1188.26 L1605.86 1188.26 L1605.28 1188.26 L1604.69 1188.26 L1604.1 1188.26 L1603.52 1188.26 L1602.93 1188.26 L1602.34 1188.26 L1601.76 1188.26 L1601.17 1188.26 L1600.59 1188.26 L1600 1188.26 L1599.41 1188.26 L1598.83 1188.26 L1598.24 1188.26 L1597.65 1188.26 L1597.07 1188.26 L1596.48 1188.26 L1595.89 1188.26 L1595.31 1188.26 L1594.72 1188.26 L1594.14 1188.26 L1593.55 1188.26 L1592.96 1188.26 L1592.38 1188.26 L1591.79 1188.26 L1591.2 1188.26 L1590.62 1188.26 L1590.03 1188.26 L1589.44 1188.26 L1588.86 1188.26 L1588.27 1188.26 L1587.68 1188.26 L1587.1 1188.26 L1586.51 1188.26 L1585.93 1188.26 L1585.34 1188.26 L1584.75 1188.26 L1584.17 1188.26 L1583.58 1188.26 L1582.99 1188.26 L1582.41 1188.26 L1581.82 1188.26 L1581.23 1188.26 L1580.65 1188.26 L1580.06 1188.26 L1579.47 1188.26 L1578.89 1188.26 L1578.3 1188.26 L1577.72 1188.26 L1577.13 1188.26 L1576.54 1188.26 L1575.96 1188.26 L1575.37 1188.26 L1574.78 1188.26 L1574.2 1188.26 L1573.61 1188.26 L1573.02 1188.26 L1572.44 1188.26 L1571.85 1188.26 L1571.27 1188.26 L1570.68 1188.26 L1570.09 1188.26 L1569.51 1188.26 L1568.92 1188.26 L1568.33 1188.26 L1567.75 1188.26 L1567.16 1188.26 L1566.57 1188.26 L1565.99 1188.26 L1565.4 1188.26 L1564.81 1188.26 L1564.23 1188.26 L1563.64 1188.26 L1563.06 1188.26 L1562.47 1188.26 L1561.88 1188.26 L1561.3 1188.26 L1560.71 1188.26 L1560.12 1188.26 L1559.54 1188.26 L1558.95 1188.26 L1558.36 1188.26 L1557.78 1188.26 L1557.19 1188.26 L1556.6 1188.26 L1556.02 1188.26 L1555.43 1188.26 L1554.85 1188.26 L1554.26 1188.26 L1553.67 1188.26 L1553.09 1188.26 L1552.5 1188.26 L1551.91 1188.26 L1551.33 1188.26 L1550.74 1188.26 L1550.15 1188.26 L1549.57 1188.26 L1548.98 1188.26 L1548.4 1188.26 L1547.81 1188.26 L1547.22 1188.26 L1546.64 1188.26 L1546.05 1188.26 L1545.46 1188.26 L1544.88 1188.26 L1544.29 1188.26 L1543.7 1188.26 L1543.12 1188.26 L1542.53 1188.26 L1541.94 1188.26 L1541.36 1188.26 L1540.77 1188.26 L1540.19 1188.26 L1539.6 1188.26 L1539.01 1188.26 L1538.43 1188.26 L1537.84 1188.26 L1537.25 1188.26 L1536.67 1188.26 L1536.08 1188.26 L1535.49 1188.26 L1534.91 1188.26 L1534.32 1188.26 L1533.73 1188.26 L1533.15 1188.26 L1532.56 1188.26 L1531.98 1188.26 L1531.39 1188.26 L1530.8 1188.26 L1530.22 1188.26 L1529.63 1188.26 L1529.04 1188.26 L1528.46 1188.26 L1527.87 1188.26 L1527.28 1188.26 L1526.7 1188.26 L1526.11 1188.26 L1525.52 1188.26 L1524.94 1188.26 L1524.35 1188.26 L1523.77 1188.26 L1523.18 1188.26 L1522.59 1188.26 L1522.01 1188.26 L1521.42 1188.26 L1520.83 1188.26 L1520.25 1188.26 L1519.66 1188.26 L1519.07 1188.26 L1518.49 1188.26 L1517.9 1188.26 L1517.32 1188.26 L1516.73 1188.26 L1516.14 1188.26 L1515.56 1188.26 L1514.97 1188.26 L1514.38 1188.26 L1513.8 1188.26 L1513.21 1188.26 L1512.62 1188.26 L1512.04 1188.26 L1511.45 1188.26 L1510.86 1188.26 L1510.28 1188.26 L1509.69 1188.26 L1509.11 1188.26 L1508.52 1188.26 L1507.93 1188.26 L1507.35 1188.26 L1506.76 1188.26 L1506.17 1188.26 L1505.59 1188.26 L1505 1188.26 L1504.41 1188.26 L1503.83 1188.26 L1503.24 1188.26 L1502.65 1188.26 L1502.07 1188.26 L1501.48 1188.26 L1500.9 1188.26 L1500.31 1188.26 L1499.72 1188.26 L1499.14 1188.26 L1498.55 1188.26 L1497.96 1188.26 L1497.38 1188.26 L1496.79 1188.26 L1496.2 1188.26 L1495.62 1188.26 L1495.03 1188.26 L1494.45 1188.26 L1493.86 1188.26 L1493.27 1188.26 L1492.69 1188.26 L1492.1 1188.26 L1491.51 1188.26 L1490.93 1188.26 L1490.34 1188.26 L1489.75 1188.26 L1489.17 1188.26 L1488.58 1188.26 L1487.99 1188.26 L1487.41 1188.26 L1486.82 1188.26 L1486.24 1188.26 L1485.65 1188.26 L1485.06 1188.26 L1484.48 1188.26 L1483.89 1188.26 L1483.3 1188.26 L1482.72 1188.26 L1482.13 1188.26 L1481.54 1188.26 L1480.96 1188.26 L1480.37 1188.26 L1479.78 1188.26 L1479.2 1188.26 L1478.61 1188.26 L1478.03 1188.26 L1477.44 1188.26 L1476.85 1188.26 L1476.27 1188.26 L1475.68 1188.26 L1475.09 1188.26 L1474.51 1188.26 L1473.92 1188.26 L1473.33 1188.26 L1472.75 1188.26 L1472.16 1188.26 L1471.57 1188.26 L1470.99 1188.26 L1470.4 1188.26 L1469.82 1188.26 L1469.23 1188.26 L1468.64 1188.26 L1468.06 1188.26 L1467.47 1188.26 L1466.88 1188.26 L1466.3 1188.26 L1465.71 1188.26 L1465.12 1188.26 L1464.54 1188.26 L1463.95 1188.26 L1463.37 1188.26 L1462.78 1188.26 L1462.19 1188.26 L1461.61 1188.26 L1461.02 1188.26 L1460.43 1188.26 L1459.85 1188.26 L1459.26 1188.26 L1458.67 1188.26 L1458.09 1188.26 L1457.5 1188.26 L1456.91 1188.26 L1456.33 1188.26 L1455.74 1188.26 L1455.16 1188.26 L1454.57 1188.26 L1453.98 1188.26 L1453.4 1188.26 L1452.81 1188.26 L1452.22 1188.26 L1451.64 1188.26 L1451.05 1188.26 L1450.46 1188.26 L1449.88 1188.26 L1449.29 1188.26 L1448.7 1188.26 L1448.12 1188.26 L1447.53 1188.26 L1446.95 1188.26 L1446.36 1188.26 L1445.77 1188.26 L1445.19 1188.26 L1444.6 1188.26 L1444.01 1188.26 L1443.43 1188.26 L1442.84 1188.26 L1442.25 1188.26 L1441.67 1188.26 L1441.08 1188.26 L1440.5 1188.26 L1439.91 1188.26 L1439.32 1188.26 L1438.74 1188.26 L1438.15 1188.26 L1437.56 1188.26 L1436.98 1188.26 L1436.39 1188.26 L1435.8 1188.26 L1435.22 1188.26 L1434.63 1188.26 L1434.04 1188.26 L1433.46 1188.26 L1432.87 1188.26 L1432.29 1188.26 L1431.7 1188.26 L1431.11 1188.26 L1430.53 1188.26 L1429.94 1188.26 L1429.35 1188.26 L1428.77 1188.26 L1428.18 1188.26 L1427.59 1188.26 L1427.01 1188.26 L1426.42 1188.26 L1425.83 1188.26 L1425.25 1188.26 L1424.66 1188.26 L1424.08 1188.26 L1423.49 1188.26 L1422.9 1188.26 L1422.32 1188.26 L1421.73 1188.26 L1421.14 1188.26 L1420.56 1188.26 L1419.97 1188.26 L1419.38 1188.26 L1418.8 1188.26 L1418.21 1188.26 L1417.63 1188.26 L1417.04 1188.26 L1416.45 1188.26 L1415.87 1188.26 L1415.28 1188.26 L1414.69 1188.26 L1414.11 1188.26 L1413.52 1188.26 L1412.93 1188.26 L1412.35 1188.26 L1411.76 1188.26 L1411.17 1188.26 L1410.59 1188.26 L1410 1188.26 L1409.42 1188.26 L1408.83 1188.26 L1408.24 1188.26 L1407.66 1188.26 L1407.07 1188.26 L1406.48 1188.26 L1405.9 1188.26 L1405.31 1188.26 L1404.72 1188.26 L1404.14 1188.26 L1403.55 1188.26 L1402.96 1188.26 L1402.38 1188.26 L1401.79 1188.26 L1401.21 1188.26 L1400.62 1188.26 L1400.03 1188.26 L1399.45 1188.26 L1398.86 1188.26 L1398.27 1188.26 L1397.69 1188.26 L1397.1 1188.26 L1396.51 1188.26 L1395.93 1188.26 L1395.34 1188.26 L1394.75 1188.26 L1394.17 1188.26 L1393.58 1188.26 L1393 1188.26 L1392.41 1188.26 L1391.82 1188.26 L1391.24 1188.26 L1390.65 1188.26 L1390.06 1188.26 L1389.48 1188.26 L1388.89 1188.26 L1388.3 1188.26 L1387.72 1188.26 L1387.13 1188.26 L1386.55 1188.26 L1385.96 1188.26 L1385.37 1188.26 L1384.79 1188.26 L1384.2 1188.26 L1383.61 1188.26 L1383.03 1188.26 L1382.44 1188.26 L1381.85 1188.26 L1381.27 1188.26 L1380.68 1188.26 L1380.09 1188.26 L1379.51 1188.26 L1378.92 1188.26 L1378.34 1188.26 L1377.75 1188.26 L1377.16 1188.26 L1376.58 1188.26 L1375.99 1188.26 L1375.4 1188.26 L1374.82 1188.26 L1374.23 1188.26 L1373.64 1188.26 L1373.06 1188.26 L1372.47 1188.26 L1371.88 1188.26 L1371.3 1188.26 L1370.71 1188.26 L1370.13 1188.26 L1369.54 1188.26 L1368.95 1188.26 L1368.37 1188.26 L1367.78 1188.26 L1367.19 1188.26 L1366.61 1188.26 L1366.02 1188.26 L1365.43 1188.26 L1364.85 1188.26 L1364.26 1188.26 L1363.68 1188.26 L1363.09 1188.26 L1362.5 1188.26 L1361.92 1188.26 L1361.33 1188.26 L1360.74 1188.26 L1360.16 1188.26 L1359.57 1188.26 L1358.98 1188.26 L1358.4 1188.26 L1357.81 1188.26 L1357.22 1188.26 L1356.64 1188.26 L1356.05 1188.26 L1355.47 1188.26 L1354.88 1188.26 L1354.29 1188.26 L1353.71 1188.26 L1353.12 1188.26 L1352.53 1188.26 L1351.95 1188.26 L1351.36 1188.26 L1350.77 1188.26 L1350.19 1188.26 L1349.6 1188.26 L1349.01 1188.26 L1348.43 1188.26 L1347.84 1188.26 L1347.26 1188.26 L1346.67 1188.26 L1346.08 1188.26 L1345.5 1188.26 L1344.91 1188.26 L1344.32 1188.26 L1343.74 1188.26 L1343.15 1188.26 L1342.56 1188.26 L1341.98 1188.26 L1341.39 1188.26 L1340.8 1188.26 L1340.22 1188.26 L1339.63 1188.26 L1339.05 1188.26 L1338.46 1188.26 L1337.87 1188.26 L1337.29 1188.26 L1336.7 1188.26 L1336.11 1188.26 L1335.53 1188.26 L1334.94 1188.26 L1334.35 1188.26 L1333.77 1188.26 L1333.18 1188.26 L1332.6 1188.26 L1332.01 1188.26 L1331.42 1188.26 L1330.84 1188.26 L1330.25 1188.26 L1329.66 1188.26 L1329.08 1188.26 L1328.49 1188.26 L1327.9 1188.26 L1327.32 1188.26 L1326.73 1188.26 L1326.14 1188.26 L1325.56 1188.26 L1324.97 1188.26 L1324.39 1188.26 L1323.8 1188.26 L1323.21 1188.26 L1322.63 1188.26 L1322.04 1188.26 L1321.45 1188.26 L1320.87 1188.26 L1320.28 1188.26 L1319.69 1188.26 L1319.11 1188.26 L1318.52 1188.26 L1317.93 1188.26 L1317.35 1188.26 L1316.76 1188.26 L1316.18 1188.26 L1315.59 1188.26 L1315 1188.26 L1314.42 1188.26 L1313.83 1188.26 L1313.24 1188.26 L1312.66 1188.26 L1312.07 1188.26 L1311.48 1188.26 L1310.9 1188.26 L1310.31 1188.26 L1309.73 1188.26 L1309.14 1188.26 L1308.55 1188.26 L1307.97 1188.26 L1307.38 1188.26 L1306.79 1188.26 L1306.21 1188.26 L1305.62 1188.26 L1305.03 1188.26 L1304.45 1188.26 L1303.86 1188.26 L1303.27 1188.26 L1302.69 1188.26 L1302.1 1188.26 L1301.52 1188.26 L1300.93 1188.26 L1300.34 1188.26 L1299.76 1188.26 L1299.17 1188.26 L1298.58 1188.26 L1298 1188.26 L1297.41 1188.26 L1296.82 1188.26 L1296.24 1188.26 L1295.65 1188.26 L1295.06 1188.26 L1294.48 1188.26 L1293.89 1188.26 L1293.31 1188.26 L1292.72 1188.26 L1292.13 1188.26 L1291.55 1188.26 L1290.96 1188.26 L1290.37 1188.26 L1289.79 1188.26 L1289.2 1188.26 L1288.61 1188.26 L1288.03 1188.26 L1287.44 1188.26 L1286.86 1188.26 L1286.27 1188.26 L1285.68 1188.26 L1285.1 1188.26 L1284.51 1188.26 L1283.92 1188.26 L1283.34 1188.26 L1282.75 1188.26 L1282.16 1188.26 L1281.58 1188.26 L1280.99 1188.26 L1280.4 1188.26 L1279.82 1188.26 L1279.23 1188.26 L1278.65 1188.26 L1278.06 1188.26 L1277.47 1188.26 L1276.89 1188.26 L1276.3 1188.26 L1275.71 1188.26 L1275.13 1188.26 L1274.54 1188.26 L1273.95 1188.26 L1273.37 1188.26 L1272.78 1188.26 L1272.19 1188.26 L1271.61 1188.26 L1271.02 1188.26 L1270.44 1188.26 L1269.85 1188.26 L1269.26 1188.26 L1268.68 1188.26 L1268.09 1188.26 L1267.5 1188.26 L1266.92 1188.26 L1266.33 1188.26 L1265.74 1188.26 L1265.16 1188.26 L1264.57 1188.26 L1263.98 1188.26 L1263.4 1188.26 L1262.81 1188.26 L1262.23 1188.26 L1261.64 1188.26 L1261.05 1188.26 L1260.47 1188.26 L1259.88 1188.26 L1259.29 1188.26 L1258.71 1188.26 L1258.12 1188.26 L1257.53 1188.26 L1256.95 1188.26 L1256.36 1188.26 L1255.78 1188.26 L1255.19 1188.26 L1254.6 1188.26 L1254.02 1188.26 L1253.43 1188.26 L1252.84 1188.26 L1252.26 1188.26 L1251.67 1188.26 L1251.08 1188.26 L1250.5 1188.26 L1249.91 1188.26 L1249.32 1188.26 L1248.74 1188.26 L1248.15 1188.26 L1247.57 1188.26 L1246.98 1188.26 L1246.39 1188.26 L1245.81 1188.26 L1245.22 1188.26 L1244.63 1188.26 L1244.05 1188.26 L1243.46 1188.26 L1242.87 1188.26 L1242.29 1188.26 L1241.7 1188.26 L1241.11 1188.26 L1240.53 1188.26 L1239.94 1188.26 L1239.36 1188.26 L1238.77 1188.26 L1238.18 1188.26 L1237.6 1188.26 L1237.01 1188.26 L1236.42 1188.26 L1235.84 1188.26 L1235.25 1188.26 L1234.66 1188.26 L1234.08 1188.26 L1233.49 1188.26 L1232.91 1188.26 L1232.32 1188.26 L1231.73 1188.26 L1231.15 1188.26 L1230.56 1188.26 L1229.97 1188.26 L1229.39 1188.26 L1228.8 1188.26 L1228.21 1188.26 L1227.63 1188.26 L1227.04 1188.26 L1226.45 1188.26 L1225.87 1188.26 L1225.28 1188.26 L1224.7 1188.26 L1224.11 1188.26 L1223.52 1188.26 L1222.94 1188.26 L1222.35 1188.26 L1221.76 1188.26 L1221.18 1188.26 L1220.59 1188.26 L1220 1188.26 L1219.42 1188.26 L1218.83 1188.26 L1218.24 1188.26 L1217.66 1188.26 L1217.07 1188.26 L1216.49 1188.26 L1215.9 1188.26 L1215.31 1188.26 L1214.73 1188.26 L1214.14 1188.26 L1213.55 1188.26 L1212.97 1188.26 L1212.38 1188.26 L1211.79 1188.26 L1211.21 1188.26 L1210.62 1188.26 L1210.03 1188.26 L1209.45 1188.26 L1208.86 1188.26 L1208.28 1188.26 L1207.69 1188.26 L1207.1 1188.26 L1206.52 1188.26 L1205.93 1188.26 L1205.34 1188.26 L1204.76 1188.26 L1204.17 1188.26 L1203.58 1188.26 L1203 1188.26 L1202.41 1188.26 L1201.83 1188.26 L1201.24 1188.26 L1200.65 1188.26 L1200.07 1188.26 L1199.48 1188.26 L1198.89 1188.26 L1198.31 1188.26 L1197.72 1188.26 L1197.13 1188.26 L1196.55 1188.26 L1195.96 1188.26 L1195.37 1188.26 L1194.79 1188.26 L1194.2 1188.26 L1193.62 1188.26 L1193.03 1188.26 L1192.44 1188.26 L1191.86 1188.26 L1191.27 1188.26 L1190.68 1188.26 L1190.1 1188.26 L1189.51 1188.26 L1188.92 1188.26 L1188.34 1188.26 L1187.75 1188.26 L1187.16 1188.26 L1186.58 1188.26 L1185.99 1188.26 L1185.41 1188.26 L1184.82 1188.26 L1184.23 1188.26 L1183.65 1188.26 L1183.06 1188.26 L1182.47 1188.26 L1181.89 1188.26 L1181.3 1188.26 L1180.71 1188.26 L1180.13 1188.26 L1179.54 1188.26 L1178.96 1188.26 L1178.37 1188.26 L1177.78 1188.26 L1177.2 1188.26 L1176.61 1188.26 L1176.02 1188.26 L1175.44 1188.26 L1174.85 1188.26 L1174.26 1188.26 L1173.68 1188.26 L1173.09 1188.26 L1172.5 1188.26 L1171.92 1188.26 L1171.33 1188.26 L1170.75 1188.26 L1170.16 1188.26 L1169.57 1188.26 L1168.99 1188.26 L1168.4 1188.26 L1167.81 1188.26 L1167.23 1188.26 L1166.64 1188.26 L1166.05 1188.26 L1165.47 1188.26 L1164.88 1188.26 L1164.29 1188.26 L1163.71 1188.26 L1163.12 1188.26 L1162.54 1188.26 L1161.95 1188.26 L1161.36 1188.26 L1160.78 1188.26 L1160.19 1188.26 L1159.6 1188.26 L1159.02 1188.26 L1158.43 1188.26 L1157.84 1188.26 L1157.26 1188.26 L1156.67 1188.26 L1156.09 1188.26 L1155.5 1188.26 L1154.91 1188.26 L1154.33 1188.26 L1153.74 1188.26 L1153.15 1188.26 L1152.57 1188.26 L1151.98 1188.26 L1151.39 1188.26 L1150.81 1188.26 L1150.22 1188.26 L1149.63 1188.26 L1149.05 1188.26 L1148.46 1188.26 L1147.88 1188.26 L1147.29 1188.26 L1146.7 1188.26 L1146.12 1188.26 L1145.53 1188.26 L1144.94 1188.26 L1144.36 1188.26 L1143.77 1188.26 L1143.18 1188.26 L1142.6 1188.26 L1142.01 1188.26 L1141.42 1188.26 L1140.84 1188.26 L1140.25 1188.26 L1139.67 1188.26 L1139.08 1188.26 L1138.49 1188.26 L1137.91 1188.26 L1137.32 1188.26 L1136.73 1188.26 L1136.15 1188.26 L1135.56 1188.26 L1134.97 1188.26 L1134.39 1188.26 L1133.8 1188.26 L1133.21 1188.26 L1132.63 1188.26 L1132.04 1188.26 L1131.46 1188.26 L1130.87 1188.26 L1130.28 1188.26 L1129.7 1188.26 L1129.11 1188.26 L1128.52 1188.26 L1127.94 1188.26 L1127.35 1188.26 L1126.76 1188.26 L1126.18 1188.26 L1125.59 1188.26 L1125.01 1188.26 L1124.42 1188.26 L1123.83 1188.26 L1123.25 1188.26 L1122.66 1188.26 L1122.07 1188.26 L1121.49 1188.26 L1120.9 1188.26 L1120.31 1188.26 L1119.73 1188.26 L1119.14 1188.26 L1118.55 1188.26 L1117.97 1188.26 L1117.38 1188.26 L1116.8 1188.26 L1116.21 1188.26 L1115.62 1188.26 L1115.04 1188.26 L1114.45 1188.26 L1113.86 1188.26 L1113.28 1188.26 L1112.69 1188.26 L1112.1 1188.26 L1111.52 1188.26 L1110.93 1188.26 L1110.34 1188.26 L1109.76 1188.26 L1109.17 1188.26 L1108.59 1188.26 L1108 1188.26 L1107.41 1188.26 L1106.83 1188.26 L1106.24 1188.26 L1105.65 1188.26 L1105.07 1188.26 L1104.48 1188.26 L1103.89 1188.26 L1103.31 1188.26 L1102.72 1188.26 L1102.14 1188.26 L1101.55 1188.26 L1100.96 1188.26 L1100.38 1188.26 L1099.79 1188.26 L1099.2 1188.26 L1098.62 1188.26 L1098.03 1188.26 L1097.44 1188.26 L1096.86 1188.26 L1096.27 1188.26 L1095.68 1188.26 L1095.1 1188.26 L1094.51 1188.26 L1093.93 1188.26 L1093.34 1188.26 L1092.75 1188.26 L1092.17 1188.26 L1091.58 1188.26 L1090.99 1188.26 L1090.41 1188.26 L1089.82 1188.26 L1089.23 1188.26 L1088.65 1188.26 L1088.06 1188.26 L1087.47 1188.26 L1086.89 1188.26 L1086.3 1188.26 L1085.72 1188.26 L1085.13 1188.26 L1084.54 1188.26 L1083.96 1188.26 L1083.37 1188.26 L1082.78 1188.26 L1082.2 1188.26 L1081.61 1188.26 L1081.02 1188.26 L1080.44 1188.26 L1079.85 1188.26 L1079.26 1188.26 L1078.68 1188.26 L1078.09 1188.26 L1077.51 1188.26 L1076.92 1188.26 L1076.33 1188.26 L1075.75 1188.26 L1075.16 1188.26 L1074.57 1188.26 L1073.99 1188.26 L1073.4 1188.26 L1072.81 1188.26 L1072.23 1188.26 L1071.64 1188.26 L1071.06 1188.26 L1070.47 1188.26 L1069.88 1188.26 L1069.3 1188.26 L1068.71 1188.26 L1068.12 1188.26 L1067.54 1188.26 L1066.95 1188.26 L1066.36 1188.26 L1065.78 1188.26 L1065.19 1188.26 L1064.6 1188.26 L1064.02 1188.26 L1063.43 1188.26 L1062.85 1188.26 L1062.26 1188.26 L1061.67 1188.26 L1061.09 1188.26 L1060.5 1188.26 L1059.91 1188.26 L1059.33 1188.26 L1058.74 1188.26 L1058.15 1188.26 L1057.57 1188.26 L1056.98 1188.26 L1056.39 1188.26 L1055.81 1188.26 L1055.22 1188.26 L1054.64 1188.26 L1054.05 1188.26 L1053.46 1188.26 L1052.88 1188.26 L1052.29 1188.26 L1051.7 1188.26 L1051.12 1188.26 L1050.53 1188.26 L1049.94 1188.26 L1049.36 1188.26 L1048.77 1188.26 L1048.19 1188.26 L1047.6 1188.26 L1047.01 1188.26 L1046.43 1188.26 L1045.84 1188.26 L1045.25 1188.26 L1044.67 1188.26 L1044.08 1188.26 L1043.49 1188.26 L1042.91 1188.26 L1042.32 1188.26 L1041.73 1188.26 L1041.15 1188.26 L1040.56 1188.26 L1039.98 1188.26 L1039.39 1188.26 L1038.8 1188.26 L1038.22 1188.26 L1037.63 1188.26 L1037.04 1188.26 L1036.46 1188.26 L1035.87 1188.26 L1035.28 1188.26 L1034.7 1188.26 L1034.11 1188.26 L1033.52 1188.26 L1032.94 1188.26 L1032.35 1188.26 L1031.77 1188.26 L1031.18 1188.26 L1030.59 1188.26 L1030.01 1188.26 L1029.42 1188.26 L1028.83 1188.26 L1028.25 1188.26 L1027.66 1188.26 L1027.07 1188.26 L1026.49 1188.26 L1025.9 1188.26 L1025.32 1188.26 L1024.73 1188.26 L1024.14 1188.26 L1023.56 1188.26 L1022.97 1188.26 L1022.38 1188.26 L1021.8 1188.26 L1021.21 1188.26 L1020.62 1188.26 L1020.04 1188.26 L1019.45 1188.26 L1018.86 1188.26 L1018.28 1188.26 L1017.69 1188.26 L1017.11 1188.26 L1016.52 1188.26 L1015.93 1188.26 L1015.35 1188.26 L1014.76 1188.26 L1014.17 1188.26 L1013.59 1188.26 L1013 1188.26 L1012.41 1188.26 L1011.83 1188.26 L1011.24 1188.26 L1010.65 1188.26 L1010.07 1188.26 L1009.48 1188.26 L1008.9 1188.26 L1008.31 1188.26 L1007.72 1188.26 L1007.14 1188.26 L1006.55 1188.26 L1005.96 1188.26 L1005.38 1188.26 L1004.79 1188.26 L1004.2 1188.26 L1003.62 1188.26 L1003.03 1188.26 L1002.44 1188.26 L1001.86 1188.26 L1001.27 1188.26 L1000.69 1188.26 L1000.1 1188.26 L999.513 1188.26 L998.926 1188.26 L998.34 1188.26 L997.754 1188.26 L997.167 1188.26 L996.581 1188.26 L995.994 1188.26 L995.408 1188.26 L994.822 1188.26 L994.235 1188.26 L993.649 1188.26 L993.062 1188.26 L992.476 1188.26 L991.889 1188.26 L991.303 1188.26 L990.717 1188.26 L990.13 1188.26 L989.544 1188.26 L988.957 1188.26 L988.371 1188.26 L987.785 1188.26 L987.198 1188.26 L986.612 1188.26 L986.025 1188.26  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1188.64 986.612,1188.64 987.198,1188.64 987.785,1188.64 988.371,1188.64 988.957,1188.64 989.544,1188.64 990.13,1188.64 990.717,1188.64 991.303,1188.64 991.889,1188.64 992.476,1188.64 993.062,1188.64 993.649,1188.64 994.235,1188.64 994.822,1188.64 995.408,1188.64 995.994,1188.64 996.581,1188.64 997.167,1188.64 997.754,1188.64 998.34,1188.64 998.926,1188.64 999.513,1188.64 1000.1,1188.64 1000.69,1188.64 1001.27,1188.64 1001.86,1188.64 1002.44,1188.64 1003.03,1188.64 1003.62,1188.64 1004.2,1188.64 1004.79,1188.64 1005.38,1188.64 1005.96,1188.64 1006.55,1188.64 1007.14,1188.64 1007.72,1188.64 1008.31,1188.64 1008.9,1188.64 1009.48,1188.64 1010.07,1188.64 1010.65,1188.64 1011.24,1188.64 1011.83,1188.64 1012.41,1188.64 1013,1188.64 1013.59,1188.64 1014.17,1188.64 1014.76,1188.64 1015.35,1188.64 1015.93,1188.64 1016.52,1188.64 1017.11,1188.64 1017.69,1188.64 1018.28,1188.64 1018.86,1188.64 1019.45,1188.64 1020.04,1188.64 1020.62,1188.64 1021.21,1188.64 1021.8,1188.64 1022.38,1188.64 1022.97,1188.64 1023.56,1188.64 1024.14,1188.64 1024.73,1188.64 1025.32,1188.64 1025.9,1188.64 1026.49,1188.64 1027.07,1188.64 1027.66,1188.64 1028.25,1188.64 1028.83,1188.64 1029.42,1188.64 1030.01,1188.64 1030.59,1188.64 1031.18,1188.64 1031.77,1188.64 1032.35,1188.64 1032.94,1188.64 1033.52,1188.64 1034.11,1188.64 1034.7,1188.64 1035.28,1188.64 1035.87,1188.64 1036.46,1188.64 1037.04,1188.64 1037.63,1188.64 1038.22,1188.64 1038.8,1188.64 1039.39,1188.64 1039.98,1188.64 1040.56,1188.64 1041.15,1188.64 1041.73,1188.64 1042.32,1188.64 1042.91,1188.64 1043.49,1188.64 1044.08,1188.64 1044.67,1188.64 1045.25,1188.64 1045.84,1188.64 1046.43,1188.64 1047.01,1188.64 1047.6,1188.64 1048.19,1188.64 1048.77,1188.64 1049.36,1188.64 1049.94,1188.64 1050.53,1188.64 1051.12,1188.64 1051.7,1188.64 1052.29,1188.64 1052.88,1188.64 1053.46,1188.64 1054.05,1188.64 1054.64,1188.64 1055.22,1188.64 1055.81,1188.64 1056.39,1188.64 1056.98,1188.64 1057.57,1188.64 1058.15,1188.64 1058.74,1188.64 1059.33,1188.64 1059.91,1188.64 1060.5,1188.64 1061.09,1188.64 1061.67,1188.64 1062.26,1188.64 1062.85,1188.64 1063.43,1188.64 1064.02,1188.64 1064.6,1188.64 1065.19,1188.64 1065.78,1188.64 1066.36,1188.64 1066.95,1188.64 1067.54,1188.64 1068.12,1188.64 1068.71,1188.64 1069.3,1188.64 1069.88,1188.64 1070.47,1188.64 1071.06,1188.64 1071.64,1188.64 1072.23,1188.64 1072.81,1188.64 1073.4,1188.64 1073.99,1188.64 1074.57,1188.64 1075.16,1188.64 1075.75,1188.64 1076.33,1188.64 1076.92,1188.64 1077.51,1188.64 1078.09,1188.64 1078.68,1188.64 1079.26,1188.64 1079.85,1188.64 1080.44,1188.64 1081.02,1188.64 1081.61,1188.64 1082.2,1188.64 1082.78,1188.64 1083.37,1188.64 1083.96,1188.64 1084.54,1188.64 1085.13,1188.64 1085.72,1188.64 1086.3,1188.64 1086.89,1188.64 1087.47,1188.64 1088.06,1188.64 1088.65,1188.64 1089.23,1188.64 1089.82,1188.64 1090.41,1188.64 1090.99,1188.64 1091.58,1188.64 1092.17,1188.64 1092.75,1188.64 1093.34,1188.64 1093.93,1188.64 1094.51,1188.64 1095.1,1188.64 1095.68,1188.64 1096.27,1188.64 1096.86,1188.64 1097.44,1188.64 1098.03,1188.64 1098.62,1188.64 1099.2,1188.64 1099.79,1188.64 1100.38,1188.64 1100.96,1188.64 1101.55,1188.64 1102.14,1188.64 1102.72,1188.64 1103.31,1188.64 1103.89,1188.64 1104.48,1188.64 1105.07,1188.64 1105.65,1188.64 1106.24,1188.64 1106.83,1188.64 1107.41,1188.64 1108,1188.64 1108.59,1188.64 1109.17,1188.64 1109.76,1188.64 1110.34,1188.64 1110.93,1188.64 1111.52,1188.64 1112.1,1188.64 1112.69,1188.64 1113.28,1188.64 1113.86,1188.64 1114.45,1188.64 1115.04,1188.64 1115.62,1188.64 1116.21,1188.64 1116.8,1188.64 1117.38,1188.64 1117.97,1188.64 1118.55,1188.64 1119.14,1188.64 1119.73,1188.64 1120.31,1188.64 1120.9,1188.64 1121.49,1188.64 1122.07,1188.64 1122.66,1188.64 1123.25,1188.64 1123.83,1188.64 1124.42,1188.64 1125.01,1188.64 1125.59,1188.64 1126.18,1188.64 1126.76,1188.64 1127.35,1188.64 1127.94,1188.64 1128.52,1188.64 1129.11,1188.64 1129.7,1188.64 1130.28,1188.64 1130.87,1188.64 1131.46,1188.64 1132.04,1188.64 1132.63,1188.64 1133.21,1188.64 1133.8,1188.64 1134.39,1188.64 1134.97,1188.64 1135.56,1188.64 1136.15,1188.64 1136.73,1188.64 1137.32,1188.64 1137.91,1188.64 1138.49,1188.64 1139.08,1188.64 1139.67,1188.64 1140.25,1188.64 1140.84,1188.64 1141.42,1188.64 1142.01,1188.64 1142.6,1188.64 1143.18,1188.64 1143.77,1188.64 1144.36,1188.64 1144.94,1188.64 1145.53,1188.64 1146.12,1188.64 1146.7,1188.64 1147.29,1188.64 1147.88,1188.64 1148.46,1188.64 1149.05,1188.64 1149.63,1188.64 1150.22,1188.64 1150.81,1188.64 1151.39,1188.64 1151.98,1188.64 1152.57,1188.64 1153.15,1188.64 1153.74,1188.64 1154.33,1188.64 1154.91,1188.64 1155.5,1188.64 1156.09,1188.64 1156.67,1188.64 1157.26,1188.64 1157.84,1188.64 1158.43,1188.64 1159.02,1188.64 1159.6,1188.64 1160.19,1188.64 1160.78,1188.64 1161.36,1188.64 1161.95,1188.64 1162.54,1188.64 1163.12,1188.64 1163.71,1188.64 1164.29,1188.64 1164.88,1188.64 1165.47,1188.64 1166.05,1188.64 1166.64,1188.64 1167.23,1188.64 1167.81,1188.64 1168.4,1188.64 1168.99,1188.64 1169.57,1188.64 1170.16,1188.64 1170.75,1188.64 1171.33,1188.64 1171.92,1188.64 1172.5,1188.64 1173.09,1188.64 1173.68,1188.64 1174.26,1188.64 1174.85,1188.64 1175.44,1188.64 1176.02,1188.64 1176.61,1188.64 1177.2,1188.64 1177.78,1188.64 1178.37,1188.64 1178.96,1188.64 1179.54,1188.64 1180.13,1188.64 1180.71,1188.64 1181.3,1188.64 1181.89,1188.64 1182.47,1188.64 1183.06,1188.64 1183.65,1188.64 1184.23,1188.64 1184.82,1188.64 1185.41,1188.64 1185.99,1188.64 1186.58,1188.64 1187.16,1188.64 1187.75,1188.64 1188.34,1188.64 1188.92,1188.64 1189.51,1188.64 1190.1,1188.64 1190.68,1188.64 1191.27,1188.64 1191.86,1188.64 1192.44,1188.64 1193.03,1188.64 1193.62,1188.64 1194.2,1188.64 1194.79,1188.64 1195.37,1188.64 1195.96,1188.64 1196.55,1188.64 1197.13,1188.64 1197.72,1188.64 1198.31,1188.64 1198.89,1188.64 1199.48,1188.64 1200.07,1188.64 1200.65,1188.64 1201.24,1188.64 1201.83,1188.64 1202.41,1188.64 1203,1188.64 1203.58,1188.64 1204.17,1188.64 1204.76,1188.64 1205.34,1188.64 1205.93,1188.64 1206.52,1188.64 1207.1,1188.64 1207.69,1188.64 1208.28,1188.64 1208.86,1188.64 1209.45,1188.64 1210.03,1188.64 1210.62,1188.64 1211.21,1188.64 1211.79,1188.64 1212.38,1188.64 1212.97,1188.64 1213.55,1188.64 1214.14,1188.64 1214.73,1188.64 1215.31,1188.64 1215.9,1188.64 1216.49,1188.64 1217.07,1188.64 1217.66,1188.64 1218.24,1188.64 1218.83,1188.64 1219.42,1188.64 1220,1188.64 1220.59,1188.64 1221.18,1188.64 1221.76,1188.64 1222.35,1188.64 1222.94,1188.64 1223.52,1188.64 1224.11,1188.64 1224.7,1188.64 1225.28,1188.64 1225.87,1188.64 1226.45,1188.64 1227.04,1188.64 1227.63,1188.64 1228.21,1188.64 1228.8,1188.64 1229.39,1188.64 1229.97,1188.64 1230.56,1188.64 1231.15,1188.64 1231.73,1188.64 1232.32,1188.64 1232.91,1188.64 1233.49,1188.64 1234.08,1188.64 1234.66,1188.64 1235.25,1188.64 1235.84,1188.64 1236.42,1188.64 1237.01,1188.64 1237.6,1188.64 1238.18,1188.64 1238.77,1188.64 1239.36,1188.64 1239.94,1188.64 1240.53,1188.64 1241.11,1188.64 1241.7,1188.64 1242.29,1188.64 1242.87,1188.64 1243.46,1188.64 1244.05,1188.64 1244.63,1188.64 1245.22,1188.64 1245.81,1188.64 1246.39,1188.64 1246.98,1188.64 1247.57,1188.64 1248.15,1188.64 1248.74,1188.64 1249.32,1188.64 1249.91,1188.64 1250.5,1188.64 1251.08,1188.64 1251.67,1188.64 1252.26,1188.64 1252.84,1188.64 1253.43,1188.64 1254.02,1188.64 1254.6,1188.64 1255.19,1188.64 1255.78,1188.64 1256.36,1188.64 1256.95,1188.64 1257.53,1188.64 1258.12,1188.64 1258.71,1188.64 1259.29,1188.64 1259.88,1188.64 1260.47,1188.64 1261.05,1188.64 1261.64,1188.64 1262.23,1188.64 1262.81,1188.64 1263.4,1188.64 1263.98,1188.64 1264.57,1188.64 1265.16,1188.64 1265.74,1188.64 1266.33,1188.64 1266.92,1188.64 1267.5,1188.64 1268.09,1188.64 1268.68,1188.64 1269.26,1188.64 1269.85,1188.64 1270.44,1188.64 1271.02,1188.64 1271.61,1188.64 1272.19,1188.64 1272.78,1188.64 1273.37,1188.64 1273.95,1188.64 1274.54,1188.64 1275.13,1188.64 1275.71,1188.64 1276.3,1188.64 1276.89,1188.64 1277.47,1188.64 1278.06,1188.64 1278.65,1188.64 1279.23,1188.64 1279.82,1188.64 1280.4,1188.64 1280.99,1188.64 1281.58,1188.64 1282.16,1188.64 1282.75,1188.64 1283.34,1188.64 1283.92,1188.64 1284.51,1188.64 1285.1,1188.64 1285.68,1188.64 1286.27,1188.64 1286.86,1188.64 1287.44,1188.64 1288.03,1188.64 1288.61,1188.64 1289.2,1188.64 1289.79,1188.64 1290.37,1188.64 1290.96,1188.64 1291.55,1188.64 1292.13,1188.64 1292.72,1188.64 1293.31,1188.64 1293.89,1188.64 1294.48,1188.64 1295.06,1188.64 1295.65,1188.64 1296.24,1188.64 1296.82,1188.64 1297.41,1188.64 1298,1188.64 1298.58,1188.64 1299.17,1188.64 1299.76,1188.64 1300.34,1188.64 1300.93,1188.64 1301.52,1188.64 1302.1,1188.64 1302.69,1188.64 1303.27,1188.64 1303.86,1188.64 1304.45,1188.64 1305.03,1188.64 1305.62,1188.64 1306.21,1188.64 1306.79,1188.64 1307.38,1188.64 1307.97,1188.64 1308.55,1188.64 1309.14,1188.64 1309.73,1188.64 1310.31,1188.64 1310.9,1188.64 1311.48,1188.64 1312.07,1188.64 1312.66,1188.64 1313.24,1188.64 1313.83,1188.64 1314.42,1188.64 1315,1188.64 1315.59,1188.64 1316.18,1188.64 1316.76,1188.64 1317.35,1188.64 1317.93,1188.64 1318.52,1188.64 1319.11,1188.64 1319.69,1188.64 1320.28,1188.64 1320.87,1188.64 1321.45,1188.64 1322.04,1188.64 1322.63,1188.64 1323.21,1188.64 1323.8,1188.64 1324.39,1188.64 1324.97,1188.64 1325.56,1188.64 1326.14,1188.64 1326.73,1188.64 1327.32,1188.64 1327.9,1188.64 1328.49,1188.64 1329.08,1188.64 1329.66,1188.64 1330.25,1188.64 1330.84,1188.64 1331.42,1188.64 1332.01,1188.64 1332.6,1188.64 1333.18,1188.64 1333.77,1188.64 1334.35,1188.64 1334.94,1188.64 1335.53,1188.64 1336.11,1188.64 1336.7,1188.64 1337.29,1188.64 1337.87,1188.64 1338.46,1188.64 1339.05,1188.64 1339.63,1188.64 1340.22,1188.64 1340.8,1188.64 1341.39,1188.64 1341.98,1188.64 1342.56,1188.64 1343.15,1188.64 1343.74,1188.64 1344.32,1188.64 1344.91,1188.64 1345.5,1188.64 1346.08,1188.64 1346.67,1188.64 1347.26,1188.64 1347.84,1188.64 1348.43,1188.64 1349.01,1188.64 1349.6,1188.64 1350.19,1188.64 1350.77,1188.64 1351.36,1188.64 1351.95,1188.64 1352.53,1188.64 1353.12,1188.64 1353.71,1188.64 1354.29,1188.64 1354.88,1188.64 1355.47,1188.64 1356.05,1188.64 1356.64,1188.64 1357.22,1188.64 1357.81,1188.64 1358.4,1188.64 1358.98,1188.64 1359.57,1188.64 1360.16,1188.64 1360.74,1188.64 1361.33,1188.64 1361.92,1188.64 1362.5,1188.64 1363.09,1188.64 1363.68,1188.64 1364.26,1188.64 1364.85,1188.64 1365.43,1188.64 1366.02,1188.64 1366.61,1188.64 1367.19,1188.64 1367.78,1188.64 1368.37,1188.64 1368.95,1188.64 1369.54,1188.64 1370.13,1188.64 1370.71,1188.64 1371.3,1188.64 1371.88,1188.64 1372.47,1188.64 1373.06,1188.64 1373.64,1188.64 1374.23,1188.64 1374.82,1188.64 1375.4,1188.64 1375.99,1188.64 1376.58,1188.64 1377.16,1188.64 1377.75,1188.64 1378.34,1188.64 1378.92,1188.64 1379.51,1188.64 1380.09,1188.64 1380.68,1188.64 1381.27,1188.64 1381.85,1188.64 1382.44,1188.64 1383.03,1188.64 1383.61,1188.64 1384.2,1188.64 1384.79,1188.64 1385.37,1188.64 1385.96,1188.64 1386.55,1188.64 1387.13,1188.64 1387.72,1188.64 1388.3,1188.64 1388.89,1188.64 1389.48,1188.64 1390.06,1188.64 1390.65,1188.64 1391.24,1188.64 1391.82,1188.64 1392.41,1188.64 1393,1188.64 1393.58,1188.64 1394.17,1188.64 1394.75,1188.64 1395.34,1188.64 1395.93,1188.64 1396.51,1188.64 1397.1,1188.64 1397.69,1188.64 1398.27,1188.64 1398.86,1188.64 1399.45,1188.64 1400.03,1188.64 1400.62,1188.64 1401.21,1188.64 1401.79,1188.64 1402.38,1188.64 1402.96,1188.64 1403.55,1188.64 1404.14,1188.64 1404.72,1188.64 1405.31,1188.64 1405.9,1188.64 1406.48,1188.64 1407.07,1188.64 1407.66,1188.64 1408.24,1188.64 1408.83,1188.64 1409.42,1188.64 1410,1188.64 1410.59,1188.64 1411.17,1188.64 1411.76,1188.64 1412.35,1188.64 1412.93,1188.64 1413.52,1188.64 1414.11,1188.64 1414.69,1188.64 1415.28,1188.64 1415.87,1188.64 1416.45,1188.64 1417.04,1188.64 1417.63,1188.64 1418.21,1188.64 1418.8,1188.64 1419.38,1188.64 1419.97,1188.64 1420.56,1188.64 1421.14,1188.64 1421.73,1188.64 1422.32,1188.64 1422.9,1188.64 1423.49,1188.64 1424.08,1188.64 1424.66,1188.64 1425.25,1188.64 1425.83,1188.64 1426.42,1188.64 1427.01,1188.64 1427.59,1188.64 1428.18,1188.64 1428.77,1188.64 1429.35,1188.64 1429.94,1188.64 1430.53,1188.64 1431.11,1188.64 1431.7,1188.64 1432.29,1188.64 1432.87,1188.64 1433.46,1188.64 1434.04,1188.64 1434.63,1188.64 1435.22,1188.64 1435.8,1188.64 1436.39,1188.64 1436.98,1188.64 1437.56,1188.64 1438.15,1188.64 1438.74,1188.64 1439.32,1188.64 1439.91,1188.64 1440.5,1188.64 1441.08,1188.64 1441.67,1188.64 1442.25,1188.64 1442.84,1188.64 1443.43,1188.64 1444.01,1188.64 1444.6,1188.64 1445.19,1188.64 1445.77,1188.64 1446.36,1188.64 1446.95,1188.64 1447.53,1188.64 1448.12,1188.64 1448.7,1188.64 1449.29,1188.64 1449.88,1188.64 1450.46,1188.64 1451.05,1188.64 1451.64,1188.64 1452.22,1188.64 1452.81,1188.64 1453.4,1188.64 1453.98,1188.64 1454.57,1188.64 1455.16,1188.64 1455.74,1188.64 1456.33,1188.64 1456.91,1188.64 1457.5,1188.64 1458.09,1188.64 1458.67,1188.64 1459.26,1188.64 1459.85,1188.64 1460.43,1188.64 1461.02,1188.64 1461.61,1188.64 1462.19,1188.64 1462.78,1188.64 1463.37,1188.64 1463.95,1188.64 1464.54,1188.64 1465.12,1188.64 1465.71,1188.64 1466.3,1188.64 1466.88,1188.64 1467.47,1188.64 1468.06,1188.64 1468.64,1188.64 1469.23,1188.64 1469.82,1188.64 1470.4,1188.64 1470.99,1188.64 1471.57,1188.64 1472.16,1188.64 1472.75,1188.64 1473.33,1188.64 1473.92,1188.64 1474.51,1188.64 1475.09,1188.64 1475.68,1188.64 1476.27,1188.64 1476.85,1188.64 1477.44,1188.64 1478.03,1188.64 1478.61,1188.64 1479.2,1188.64 1479.78,1188.64 1480.37,1188.64 1480.96,1188.64 1481.54,1188.64 1482.13,1188.64 1482.72,1188.64 1483.3,1188.64 1483.89,1188.64 1484.48,1188.64 1485.06,1188.64 1485.65,1188.64 1486.24,1188.64 1486.82,1188.64 1487.41,1188.64 1487.99,1188.64 1488.58,1188.64 1489.17,1188.64 1489.75,1188.64 1490.34,1188.64 1490.93,1188.64 1491.51,1188.64 1492.1,1188.64 1492.69,1188.64 1493.27,1188.64 1493.86,1188.64 1494.45,1188.64 1495.03,1188.64 1495.62,1188.64 1496.2,1188.64 1496.79,1188.64 1497.38,1188.64 1497.96,1188.64 1498.55,1188.64 1499.14,1188.64 1499.72,1188.64 1500.31,1188.64 1500.9,1188.64 1501.48,1188.64 1502.07,1188.64 1502.65,1188.64 1503.24,1188.64 1503.83,1188.64 1504.41,1188.64 1505,1188.64 1505.59,1188.64 1506.17,1188.64 1506.76,1188.64 1507.35,1188.64 1507.93,1188.64 1508.52,1188.64 1509.11,1188.64 1509.69,1188.64 1510.28,1188.64 1510.86,1188.64 1511.45,1188.64 1512.04,1188.64 1512.62,1188.64 1513.21,1188.64 1513.8,1188.64 1514.38,1188.64 1514.97,1188.64 1515.56,1188.64 1516.14,1188.64 1516.73,1188.64 1517.32,1188.64 1517.9,1188.64 1518.49,1188.64 1519.07,1188.64 1519.66,1188.64 1520.25,1188.64 1520.83,1188.64 1521.42,1188.64 1522.01,1188.64 1522.59,1188.64 1523.18,1188.64 1523.77,1188.64 1524.35,1188.64 1524.94,1188.64 1525.52,1188.64 1526.11,1188.64 1526.7,1188.64 1527.28,1188.64 1527.87,1188.64 1528.46,1188.64 1529.04,1188.64 1529.63,1188.64 1530.22,1188.64 1530.8,1188.64 1531.39,1188.64 1531.98,1188.64 1532.56,1188.64 1533.15,1188.64 1533.73,1188.64 1534.32,1188.64 1534.91,1188.64 1535.49,1188.64 1536.08,1188.64 1536.67,1188.64 1537.25,1188.64 1537.84,1188.64 1538.43,1188.64 1539.01,1188.64 1539.6,1188.64 1540.19,1188.64 1540.77,1188.64 1541.36,1188.64 1541.94,1188.64 1542.53,1188.64 1543.12,1188.64 1543.7,1188.64 1544.29,1188.64 1544.88,1188.64 1545.46,1188.64 1546.05,1188.64 1546.64,1188.64 1547.22,1188.64 1547.81,1188.64 1548.4,1188.64 1548.98,1188.64 1549.57,1188.64 1550.15,1188.64 1550.74,1188.64 1551.33,1188.64 1551.91,1188.64 1552.5,1188.64 1553.09,1188.64 1553.67,1188.64 1554.26,1188.64 1554.85,1188.64 1555.43,1188.64 1556.02,1188.64 1556.6,1188.64 1557.19,1188.64 1557.78,1188.64 1558.36,1188.64 1558.95,1188.64 1559.54,1188.64 1560.12,1188.64 1560.71,1188.64 1561.3,1188.64 1561.88,1188.64 1562.47,1188.64 1563.06,1188.64 1563.64,1188.64 1564.23,1188.64 1564.81,1188.64 1565.4,1188.64 1565.99,1188.64 1566.57,1188.64 1567.16,1188.64 1567.75,1188.64 1568.33,1188.64 1568.92,1188.64 1569.51,1188.64 1570.09,1188.64 1570.68,1188.64 1571.27,1188.64 1571.85,1188.64 1572.44,1188.64 1573.02,1188.64 1573.61,1188.64 1574.2,1188.64 1574.78,1188.64 1575.37,1188.64 1575.96,1188.64 1576.54,1188.64 1577.13,1188.64 1577.72,1188.64 1578.3,1188.64 1578.89,1188.64 1579.47,1188.64 1580.06,1188.64 1580.65,1188.64 1581.23,1188.64 1581.82,1188.64 1582.41,1188.64 1582.99,1188.64 1583.58,1188.64 1584.17,1188.64 1584.75,1188.64 1585.34,1188.64 1585.93,1188.64 1586.51,1188.64 1587.1,1188.64 1587.68,1188.64 1588.27,1188.64 1588.86,1188.64 1589.44,1188.64 1590.03,1188.64 1590.62,1188.64 1591.2,1188.64 1591.79,1188.64 1592.38,1188.64 1592.96,1188.64 1593.55,1188.64 1594.14,1188.64 1594.72,1188.64 1595.31,1188.64 1595.89,1188.64 1596.48,1188.64 1597.07,1188.64 1597.65,1188.64 1598.24,1188.64 1598.83,1188.64 1599.41,1188.64 1600,1188.64 1600.59,1188.64 1601.17,1188.64 1601.76,1188.64 1602.34,1188.64 1602.93,1188.64 1603.52,1188.64 1604.1,1188.64 1604.69,1188.64 1605.28,1188.64 1605.86,1188.64 1606.45,1188.64 1607.04,1188.64 1607.62,1188.64 1608.21,1188.64 1608.8,1188.64 1609.38,1188.64 1609.97,1188.64 1610.55,1188.64 1611.14,1188.64 1611.73,1188.64 1612.31,1188.64 1612.9,1188.64 1613.49,1188.64 1614.07,1188.64 1614.66,1188.64 1615.25,1188.64 1615.83,1188.64 1616.42,1188.64 1617.01,1188.64 1617.59,1188.64 1618.18,1188.64 1618.76,1188.64 1619.35,1188.64 1619.94,1188.64 1620.52,1188.64 1621.11,1188.64 1621.7,1188.64 1622.28,1188.64 1622.87,1188.64 1623.46,1188.64 1624.04,1188.64 1624.63,1188.64 1625.22,1188.64 1625.8,1188.64 1626.39,1188.64 1626.97,1188.64 1627.56,1188.64 1628.15,1188.64 1628.73,1188.64 1629.32,1188.64 1629.91,1188.64 1630.49,1188.64 1631.08,1188.64 1631.67,1188.64 1632.25,1188.64 1632.84,1188.64 1633.42,1188.64 1634.01,1188.64 1634.6,1188.64 1635.18,1188.64 1635.77,1188.64 1636.36,1188.64 1636.94,1188.64 1637.53,1188.64 1638.12,1188.64 1638.7,1188.64 1639.29,1188.64 1639.88,1188.64 1640.46,1188.64 1641.05,1188.64 1641.63,1188.64 1642.22,1188.64 1642.81,1188.64 1643.39,1188.64 1643.98,1188.64 1644.57,1188.64 1645.15,1188.64 1645.74,1188.64 1646.33,1188.64 1646.91,1188.64 1647.5,1188.64 1648.09,1188.64 1648.67,1188.64 1649.26,1188.64 1649.84,1188.64 1650.43,1188.64 1651.02,1188.64 1651.6,1188.64 1652.19,1188.64 1652.78,1188.64 1653.36,1188.64 1653.95,1188.64 1654.54,1188.64 1655.12,1188.64 1655.71,1188.64 1656.29,1188.64 1656.88,1188.64 1657.47,1188.64 1658.05,1188.64 1658.64,1188.64 1659.23,1188.64 1659.81,1188.64 1660.4,1188.64 1660.99,1188.64 1661.57,1188.64 1662.16,1188.64 1662.75,1188.64 1663.33,1188.64 1663.92,1188.64 1664.5,1188.64 1665.09,1188.64 1665.68,1188.64 1666.26,1188.64 1666.85,1188.64 1667.44,1188.64 1668.02,1188.64 1668.61,1188.64 1669.2,1188.64 1669.78,1188.64 1670.37,1188.64 1670.96,1188.64 1671.54,1188.64 1672.13,1188.64 1672.71,1188.64 1673.3,1188.64 1673.89,1188.64 1674.47,1188.64 1675.06,1188.64 1675.65,1188.64 1676.23,1188.64 1676.82,1188.64 1677.41,1188.64 1677.99,1188.64 1678.58,1188.64 1679.17,1188.64 1679.75,1188.64 1680.34,1188.64 1680.92,1188.64 1681.51,1188.64 1682.1,1188.64 1682.68,1188.64 1683.27,1188.64 1683.86,1188.64 1684.44,1188.64 1685.03,1188.64 1685.62,1188.64 1686.2,1188.64 1686.79,1188.64 1687.37,1188.64 1687.96,1188.64 1688.55,1188.64 1689.13,1188.64 1689.72,1188.64 1690.31,1188.64 1690.89,1188.64 1691.48,1188.64 1692.07,1188.64 1692.65,1188.64 1693.24,1188.64 1693.83,1188.64 1694.41,1188.64 1695,1188.64 1695.58,1188.64 1696.17,1188.64 1696.76,1188.64 1697.34,1188.64 1697.93,1188.64 1698.52,1188.64 1699.1,1188.64 1699.69,1188.64 1700.28,1188.64 1700.86,1188.64 1701.45,1188.64 1702.04,1188.64 1702.62,1188.64 1703.21,1188.64 1703.79,1188.64 1704.38,1188.64 1704.97,1188.64 1705.55,1188.64 1706.14,1188.64 1706.73,1188.64 1707.31,1188.64 1707.9,1188.64 1708.49,1188.64 1709.07,1188.64 1709.66,1188.64 1710.24,1188.64 1710.83,1188.64 1711.42,1188.64 1712,1188.64 1712.59,1188.64 1713.18,1188.64 1713.76,1188.64 1714.35,1188.64 1714.94,1188.64 1715.52,1188.64 1716.11,1188.64 1716.7,1188.64 1717.28,1188.64 1717.87,1188.64 1718.45,1188.64 1719.04,1188.64 1719.63,1188.64 1720.21,1188.64 1720.8,1188.64 1721.39,1188.64 1721.97,1188.64 1722.56,1188.64 1723.15,1188.64 1723.73,1188.64 1724.32,1188.64 1724.91,1188.64 1725.49,1188.64 1726.08,1188.64 1726.66,1188.64 1727.25,1188.64 1727.84,1188.64 1728.42,1188.64 1729.01,1188.64 1729.6,1188.64 1730.18,1188.64 1730.77,1188.64 1731.36,1188.64 1731.94,1188.64 1732.53,1188.64 1733.11,1188.64 1733.7,1188.64 1734.29,1188.64 1734.87,1188.64 1735.46,1188.64 1736.05,1188.64 1736.63,1188.64 1737.22,1188.64 1737.81,1188.64 1738.39,1188.64 1738.98,1188.64 1739.57,1188.64 1740.15,1188.64 1740.74,1188.64 1741.32,1188.64 1741.91,1188.64 1742.5,1188.64 1743.08,1188.64 1743.67,1188.64 1744.26,1188.64 1744.84,1188.64 1745.43,1188.64 1746.02,1188.64 1746.6,1188.64 1747.19,1188.64 1747.78,1188.64 1748.36,1188.64 1748.95,1188.64 1749.53,1188.64 1750.12,1188.64 1750.71,1188.64 1751.29,1188.64 1751.88,1188.64 1752.47,1188.64 1753.05,1188.64 1753.64,1188.64 1754.23,1188.64 1754.81,1188.64 1755.4,1188.64 1755.99,1188.64 1756.57,1188.64 1757.16,1188.64 1757.74,1188.64 1758.33,1188.64 1758.92,1188.64 1759.5,1188.64 1760.09,1188.64 1760.68,1188.64 1761.26,1188.64 1761.85,1188.64 1762.44,1188.64 1763.02,1188.64 1763.61,1188.64 1764.19,1188.64 1764.78,1188.64 1765.37,1188.64 1765.95,1188.64 1766.54,1188.64 1767.13,1188.64 1767.71,1188.64 1768.3,1188.64 1768.89,1188.64 1769.47,1188.64 1770.06,1188.64 1770.65,1188.64 1771.23,1188.64 1771.82,1188.64 1772.4,1188.64 1772.99,1188.64 1773.58,1188.64 1774.16,1188.64 1774.75,1188.64 1775.34,1188.64 1775.92,1188.64 1776.51,1188.64 1777.1,1188.64 1777.68,1188.64 1778.27,1188.64 1778.86,1188.64 1779.44,1188.64 1780.03,1188.64 1780.61,1188.64 1781.2,1188.64 1781.79,1188.64 1782.37,1188.64 1782.96,1188.64 1783.55,1188.64 1784.13,1188.64 1784.72,1188.64 1785.31,1188.64 1785.89,1188.64 1786.48,1188.64 1787.06,1188.64 1787.65,1188.64 1788.24,1188.64 1788.82,1188.64 1789.41,1188.64 1790,1188.64 1790.58,1188.64 1791.17,1188.64 1791.76,1188.64 1792.34,1188.64 1792.93,1188.64 1793.52,1188.64 1794.1,1188.64 1794.69,1188.64 1795.27,1188.64 1795.86,1188.64 1796.45,1188.64 1797.03,1188.64 1797.62,1188.64 1798.21,1188.64 1798.79,1188.64 1799.38,1188.64 1799.97,1188.64 1800.55,1188.64 1801.14,1188.64 1801.73,1188.64 1802.31,1188.64 1802.9,1188.64 1803.48,1188.64 1804.07,1188.64 1804.66,1188.64 1805.24,1188.64 1805.83,1188.64 1806.42,1188.64 1807,1188.64 1807.59,1188.64 1808.18,1188.64 1808.76,1188.64 1809.35,1188.64 1809.94,1188.64 1810.52,1188.64 1811.11,1188.64 1811.69,1188.64 1812.28,1188.64 1812.87,1188.64 1813.45,1188.64 1814.04,1188.64 1814.63,1188.64 1815.21,1188.64 1815.8,1188.64 1816.39,1188.64 1816.97,1188.64 1817.56,1188.64 1818.14,1188.64 1818.73,1188.64 1819.32,1188.64 1819.9,1188.64 1820.49,1188.64 1821.08,1188.64 1821.66,1188.64 1822.25,1188.64 1822.84,1188.64 1823.42,1188.64 1824.01,1188.64 1824.6,1188.64 1825.18,1188.64 1825.77,1188.64 1826.35,1188.64 1826.94,1188.64 1827.53,1188.64 1828.11,1188.64 1828.7,1188.64 1829.29,1188.64 1829.87,1188.64 1830.46,1188.64 1831.05,1188.64 1831.63,1188.64 1832.22,1188.64 1832.81,1188.64 1833.39,1188.64 1833.98,1188.64 1834.56,1188.64 1835.15,1188.64 1835.74,1188.64 1836.32,1188.64 1836.91,1188.64 1837.5,1188.64 1838.08,1188.64 1838.67,1188.64 1839.26,1188.64 1839.84,1188.64 1840.43,1188.64 1841.01,1188.64 1841.6,1188.64 1842.19,1188.64 1842.77,1188.64 1843.36,1188.64 1843.95,1188.64 1844.53,1188.64 1845.12,1188.64 1845.71,1188.64 1846.29,1188.64 1846.88,1188.64 1847.47,1188.64 1848.05,1188.64 1848.64,1188.64 1849.22,1188.64 1849.81,1188.64 1850.4,1188.64 1850.98,1188.64 1851.57,1188.64 1852.16,1188.64 1852.74,1188.64 1853.33,1188.64 1853.92,1188.64 1854.5,1188.64 1855.09,1188.64 1855.68,1188.64 1856.26,1188.64 1856.85,1188.64 1857.43,1188.64 1858.02,1188.64 1858.61,1188.64 1859.19,1188.64 1859.78,1188.64 1860.37,1188.64 1860.95,1188.64 1861.54,1188.64 1862.13,1188.64 1862.71,1188.64 1863.3,1188.64 1863.88,1188.64 1864.47,1188.64 1865.06,1188.64 1865.64,1188.64 1866.23,1188.64 1866.82,1188.64 1867.4,1188.64 1867.99,1188.64 1868.58,1188.64 1869.16,1188.64 1869.75,1188.64 1870.34,1188.64 1870.92,1188.64 1871.51,1188.64 1872.09,1188.64 1872.68,1188.64 1873.27,1188.64 1873.85,1188.64 1874.44,1188.64 1875.03,1188.64 1875.61,1188.64 1876.2,1188.64 1876.79,1188.64 1877.37,1188.64 1877.96,1188.64 1878.55,1188.64 1879.13,1188.64 1879.72,1188.64 1880.3,1188.64 1880.89,1188.64 1881.48,1188.64 1882.06,1188.64 1882.65,1188.64 1883.24,1188.64 1883.82,1188.64 1884.41,1188.64 1885,1188.64 1885.58,1188.64 1886.17,1188.64 1886.76,1188.64 1887.34,1188.64 1887.93,1188.64 1888.51,1188.64 1889.1,1188.64 1889.69,1188.64 1890.27,1188.64 1890.86,1188.64 1891.45,1188.64 1892.03,1188.64 1892.62,1188.64 1893.21,1188.64 1893.79,1188.64 1894.38,1188.64 1894.96,1188.64 1895.55,1188.64 1896.14,1188.64 1896.72,1188.64 1897.31,1188.64 1897.9,1188.64 1898.48,1188.64 1899.07,1188.64 1899.66,1188.64 1900.24,1188.64 1900.83,1188.64 1901.42,1188.64 1902,1188.64 1902.59,1188.64 1903.17,1188.64 1903.76,1188.64 1904.35,1188.64 1904.93,1188.64 1905.52,1188.64 1906.11,1188.64 1906.69,1188.64 1907.28,1188.64 1907.87,1188.64 1908.45,1188.64 1909.04,1188.64 1909.63,1188.64 1910.21,1188.64 1910.8,1188.64 1911.38,1188.64 1911.97,1188.64 1912.56,1188.64 1913.14,1188.64 1913.73,1188.64 1914.32,1188.64 1914.9,1188.64 1915.49,1188.64 1916.08,1188.64 1916.66,1188.64 1917.25,1188.64 1917.83,1188.64 1918.42,1188.64 1919.01,1188.64 1919.59,1188.64 1920.18,1188.64 1920.77,1188.64 1921.35,1188.64 1921.94,1188.64 1922.53,1188.64 1923.11,1188.64 1923.7,1188.64 1924.29,1188.64 1924.87,1188.64 1925.46,1188.64 1926.04,1188.64 1926.63,1188.64 1927.22,1188.64 1927.8,1188.64 1928.39,1188.64 1928.98,1188.64 1929.56,1188.64 1930.15,1188.64 1930.74,1188.64 1931.32,1188.64 1931.91,1188.64 1932.5,1188.64 1933.08,1188.64 1933.67,1188.64 1934.25,1188.64 1934.84,1188.64 1935.43,1188.64 1936.01,1188.64 1936.6,1188.64 1937.19,1188.64 1937.77,1188.64 1938.36,1188.64 1938.95,1188.64 1939.53,1188.64 1940.12,1188.64 1940.71,1188.64 1941.29,1188.64 1941.88,1188.64 1942.46,1188.64 1943.05,1188.64 1943.64,1188.64 1944.22,1188.64 1944.81,1188.64 1945.4,1188.64 1945.98,1188.64 1946.57,1188.64 1947.16,1188.64 1947.74,1188.64 1948.33,1188.64 1948.91,1188.64 1949.5,1188.64 1950.09,1188.64 1950.67,1188.64 1951.26,1188.64 1951.85,1188.64 1952.43,1188.64 1953.02,1188.64 1953.61,1188.64 1954.19,1188.64 1954.78,1188.64 1955.37,1188.64 1955.95,1188.64 1956.54,1188.64 1957.12,1188.64 1957.71,1188.64 1958.3,1188.64 1958.88,1188.64 1959.47,1188.64 1960.06,1188.64 1960.64,1188.64 1961.23,1188.64 1961.82,1188.64 1962.4,1188.64 1962.99,1188.64 1963.58,1188.64 1964.16,1188.64 1964.75,1188.64 1965.33,1188.64 1965.92,1188.64 1966.51,1188.64 1967.09,1188.64 1967.68,1188.64 1968.27,1188.64 1968.85,1188.64 1969.44,1188.64 1970.03,1188.64 1970.61,1188.64 1971.2,1188.64 1971.78,1188.64 1972.37,1188.64 1972.96,1188.64 1973.54,1188.64 1974.13,1188.64 1974.72,1188.64 1975.3,1188.64 1975.89,1188.64 1976.48,1188.64 1977.06,1188.64 1977.65,1188.64 1978.24,1188.64 1978.82,1188.64 1979.41,1188.64 1979.99,1188.64 1980.58,1188.64 1981.17,1188.64 1981.75,1188.64 1982.34,1188.64 1982.93,1188.64 1983.51,1188.64 1984.1,1188.64 1984.69,1188.64 1985.27,1188.64 1985.86,1188.64 1986.45,1188.64 1987.03,1188.64 1987.62,1188.64 1988.2,1188.64 1988.79,1188.64 1989.38,1188.64 1989.96,1188.64 1990.55,1188.64 1991.14,1188.64 1991.72,1188.64 1992.31,1188.64 1992.9,1188.64 1993.48,1188.64 1994.07,1188.64 1994.65,1188.64 1995.24,1188.64 1995.83,1188.64 1996.41,1188.64 1997,1188.64 1997.59,1188.64 1998.17,1188.64 1998.76,1188.64 1999.35,1188.64 1999.93,1188.64 2000.52,1188.64 2001.11,1188.64 2001.69,1188.64 2002.28,1188.64 2002.86,1188.64 2003.45,1188.64 2004.04,1188.64 2004.62,1188.64 2005.21,1188.64 2005.8,1188.64 2006.38,1188.64 2006.97,1188.64 2007.56,1188.64 2008.14,1188.64 2008.73,1188.64 2009.32,1188.64 2009.9,1188.64 2010.49,1188.64 2011.07,1188.64 2011.66,1188.64 2012.25,1188.64 2012.83,1188.64 2013.42,1188.64 2014.01,1188.64 2014.59,1188.64 2015.18,1188.64 2015.77,1188.64 2016.35,1188.64 2016.94,1188.64 2017.53,1188.64 2018.11,1188.64 2018.7,1188.64 2019.28,1188.64 2019.87,1188.64 2020.46,1188.64 2021.04,1188.64 2021.63,1188.64 2022.22,1188.64 2022.8,1188.64 2023.39,1188.64 2023.98,1188.64 2024.56,1188.64 2025.15,1188.64 2025.73,1188.64 2026.32,1188.64 2026.91,1188.64 2027.49,1188.64 2028.08,1188.64 2028.67,1188.64 2029.25,1188.64 2029.84,1188.64 2030.43,1188.64 2031.01,1188.64 2031.6,1188.64 2032.19,1188.64 2032.77,1188.64 2033.36,1188.64 2033.94,1188.64 2034.53,1188.64 2035.12,1188.64 2035.7,1188.64 2036.29,1188.64 2036.88,1188.64 2037.46,1188.64 2038.05,1188.64 2038.64,1188.64 2039.22,1188.64 2039.81,1188.64 2040.4,1188.64 2040.98,1188.64 2041.57,1188.64 2042.15,1188.64 2042.74,1188.64 2043.33,1188.64 2043.91,1188.64 2044.5,1188.64 2045.09,1188.64 2045.67,1188.64 2046.26,1188.64 2046.85,1188.64 2047.43,1188.64 2048.02,1188.64 2048.6,1188.64 2049.19,1188.64 2049.78,1188.64 2050.36,1188.64 2050.95,1188.64 2051.54,1188.64 2052.12,1188.64 2052.71,1188.64 2053.3,1188.64 2053.88,1188.64 2054.47,1188.64 2055.06,1188.64 2055.64,1188.64 2056.23,1188.64 2056.81,1188.64 2057.4,1188.64 2057.99,1188.64 2058.57,1188.64 2059.16,1188.64 2059.75,1188.64 2060.33,1188.64 2060.92,1188.64 2061.51,1188.64 2062.09,1188.64 2062.68,1188.64 2063.27,1188.64 2063.85,1188.64 2064.44,1188.64 2065.02,1188.64 2065.61,1188.64 2066.2,1188.64 2066.78,1188.64 2067.37,1188.64 2067.96,1188.64 2068.54,1188.64 2069.13,1188.64 2069.72,1188.64 2070.3,1188.64 2070.89,1188.64 2071.48,1188.64 2072.06,1188.64 2072.65,1188.64 2073.23,1188.64 2073.82,1188.64 2074.41,1188.64 2074.99,1188.64 2075.58,1188.64 2076.17,1188.64 2076.75,1188.64 2077.34,1188.64 2077.93,1188.64 2078.51,1188.64 2079.1,1188.64 2079.68,1188.64 2080.27,1188.64 2080.86,1188.64 2081.44,1188.64 2082.03,1188.64 2082.62,1188.64 2083.2,1188.64 2083.79,1188.64 2084.38,1188.64 2084.96,1188.64 2085.55,1188.64 2086.14,1188.64 2086.72,1188.64 2087.31,1188.64 2087.89,1188.64 2088.48,1188.64 2089.07,1188.64 2089.65,1188.64 2090.24,1188.64 2090.83,1188.64 2091.41,1188.64 2092,1188.64 2092.59,1188.64 2093.17,1188.64 2093.76,1188.64 2094.35,1188.64 2094.93,1188.64 2095.52,1188.64 2096.1,1188.64 2096.69,1188.64 2097.28,1188.64 2097.86,1188.64 2098.45,1188.64 2099.04,1188.64 2099.62,1188.64 2100.21,1188.64 2100.8,1188.64 2101.38,1188.64 2101.97,1188.64 2102.55,1188.64 2103.14,1188.64 2103.73,1188.64 2104.31,1188.64 2104.9,1188.64 2105.49,1188.64 2106.07,1188.64 2106.66,1188.64 2107.25,1188.64 2107.83,1188.64 2108.42,1188.64 2109.01,1188.64 2109.59,1188.64 2110.18,1188.64 2110.76,1188.64 2111.35,1188.64 2111.94,1188.64 2112.52,1188.64 2113.11,1188.64 2113.7,1188.64 2114.28,1188.64 2114.87,1188.64 2115.46,1188.64 2116.04,1188.64 2116.63,1188.64 2117.22,1188.64 2117.8,1188.64 2118.39,1188.64 2118.97,1188.64 2119.56,1188.64 2120.15,1188.64 2120.73,1188.64 2121.32,1188.64 2121.91,1188.64 2122.49,1188.64 2123.08,1188.64 2123.67,1188.64 2124.25,1188.64 2124.84,1188.64 2125.42,1188.64 2126.01,1188.64 2126.6,1188.64 2127.18,1188.64 2127.77,1188.64 2128.36,1188.64 2128.94,1188.64 2129.53,1188.64 2130.12,1188.64 2130.7,1188.64 2131.29,1188.64 2131.88,1188.64 2132.46,1188.64 2133.05,1188.64 2133.63,1188.64 2134.22,1188.64 2134.81,1188.64 2135.39,1188.64 2135.98,1188.64 2136.57,1188.64 2137.15,1188.64 2137.74,1188.64 2138.33,1188.64 2138.91,1188.64 2139.5,1188.64 2140.09,1188.64 2140.67,1188.64 2141.26,1188.64 2141.84,1188.64 2142.43,1188.64 2143.02,1188.64 2143.6,1188.64 2144.19,1188.64 2144.78,1188.64 2145.36,1188.64 2145.95,1188.64 2146.54,1188.64 2147.12,1188.64 2147.71,1188.64 2148.3,1188.64 2148.88,1188.64 2149.47,1188.64 2150.05,1188.64 2150.64,1188.64 2151.23,1188.64 2151.81,1188.64 2152.4,1188.64 2152.99,1188.64 2153.57,1188.64 2154.16,1188.64 2154.75,1188.64 2155.33,1188.64 2155.92,1188.64 2156.5,1188.64 2157.09,1188.64 2157.68,1188.64 2158.26,1188.64 \"/>\n<path clip-path=\"url(#clip702)\" d=\"M986.025 1188.51 L986.612 1188.51 L987.198 1188.51 L987.785 1188.51 L988.371 1188.51 L988.957 1188.51 L989.544 1188.51 L990.13 1188.51 L990.717 1188.51 L991.303 1188.51 L991.889 1188.51 L992.476 1188.51 L993.062 1188.51 L993.649 1188.51 L994.235 1188.51 L994.822 1188.51 L995.408 1188.51 L995.994 1188.51 L996.581 1188.51 L997.167 1188.51 L997.754 1188.51 L998.34 1188.51 L998.926 1188.51 L999.513 1188.51 L1000.1 1188.51 L1000.69 1188.51 L1001.27 1188.51 L1001.86 1188.51 L1002.44 1188.51 L1003.03 1188.51 L1003.62 1188.51 L1004.2 1188.51 L1004.79 1188.51 L1005.38 1188.51 L1005.96 1188.51 L1006.55 1188.51 L1007.14 1188.51 L1007.72 1188.51 L1008.31 1188.51 L1008.9 1188.51 L1009.48 1188.51 L1010.07 1188.51 L1010.65 1188.51 L1011.24 1188.51 L1011.83 1188.51 L1012.41 1188.51 L1013 1188.51 L1013.59 1188.51 L1014.17 1188.51 L1014.76 1188.51 L1015.35 1188.51 L1015.93 1188.51 L1016.52 1188.51 L1017.11 1188.51 L1017.69 1188.51 L1018.28 1188.51 L1018.86 1188.51 L1019.45 1188.51 L1020.04 1188.51 L1020.62 1188.51 L1021.21 1188.51 L1021.8 1188.51 L1022.38 1188.51 L1022.97 1188.51 L1023.56 1188.51 L1024.14 1188.51 L1024.73 1188.51 L1025.32 1188.51 L1025.9 1188.51 L1026.49 1188.51 L1027.07 1188.51 L1027.66 1188.51 L1028.25 1188.51 L1028.83 1188.51 L1029.42 1188.51 L1030.01 1188.51 L1030.59 1188.51 L1031.18 1188.51 L1031.77 1188.51 L1032.35 1188.51 L1032.94 1188.51 L1033.52 1188.51 L1034.11 1188.51 L1034.7 1188.51 L1035.28 1188.51 L1035.87 1188.51 L1036.46 1188.51 L1037.04 1188.51 L1037.63 1188.51 L1038.22 1188.51 L1038.8 1188.51 L1039.39 1188.51 L1039.98 1188.51 L1040.56 1188.51 L1041.15 1188.51 L1041.73 1188.51 L1042.32 1188.51 L1042.91 1188.51 L1043.49 1188.51 L1044.08 1188.51 L1044.67 1188.51 L1045.25 1188.51 L1045.84 1188.51 L1046.43 1188.51 L1047.01 1188.51 L1047.6 1188.51 L1048.19 1188.51 L1048.77 1188.51 L1049.36 1188.51 L1049.94 1188.51 L1050.53 1188.51 L1051.12 1188.51 L1051.7 1188.51 L1052.29 1188.51 L1052.88 1188.51 L1053.46 1188.51 L1054.05 1188.51 L1054.64 1188.51 L1055.22 1188.51 L1055.81 1188.51 L1056.39 1188.51 L1056.98 1188.51 L1057.57 1188.51 L1058.15 1188.51 L1058.74 1188.51 L1059.33 1188.51 L1059.91 1188.51 L1060.5 1188.51 L1061.09 1188.51 L1061.67 1188.51 L1062.26 1188.51 L1062.85 1188.51 L1063.43 1188.51 L1064.02 1188.51 L1064.6 1188.51 L1065.19 1188.51 L1065.78 1188.51 L1066.36 1188.51 L1066.95 1188.51 L1067.54 1188.51 L1068.12 1188.51 L1068.71 1188.51 L1069.3 1188.51 L1069.88 1188.51 L1070.47 1188.51 L1071.06 1188.51 L1071.64 1188.51 L1072.23 1188.51 L1072.81 1188.51 L1073.4 1188.51 L1073.99 1188.51 L1074.57 1188.51 L1075.16 1188.51 L1075.75 1188.51 L1076.33 1188.51 L1076.92 1188.51 L1077.51 1188.51 L1078.09 1188.51 L1078.68 1188.51 L1079.26 1188.51 L1079.85 1188.51 L1080.44 1188.51 L1081.02 1188.51 L1081.61 1188.51 L1082.2 1188.51 L1082.78 1188.51 L1083.37 1188.51 L1083.96 1188.51 L1084.54 1188.51 L1085.13 1188.51 L1085.72 1188.51 L1086.3 1188.51 L1086.89 1188.51 L1087.47 1188.51 L1088.06 1188.51 L1088.65 1188.51 L1089.23 1188.51 L1089.82 1188.51 L1090.41 1188.51 L1090.99 1188.51 L1091.58 1188.51 L1092.17 1188.51 L1092.75 1188.51 L1093.34 1188.51 L1093.93 1188.51 L1094.51 1188.51 L1095.1 1188.51 L1095.68 1188.51 L1096.27 1188.51 L1096.86 1188.51 L1097.44 1188.51 L1098.03 1188.51 L1098.62 1188.51 L1099.2 1188.51 L1099.79 1188.51 L1100.38 1188.51 L1100.96 1188.51 L1101.55 1188.51 L1102.14 1188.51 L1102.72 1188.51 L1103.31 1188.51 L1103.89 1188.51 L1104.48 1188.51 L1105.07 1188.51 L1105.65 1188.51 L1106.24 1188.51 L1106.83 1188.51 L1107.41 1188.51 L1108 1188.51 L1108.59 1188.51 L1109.17 1188.51 L1109.76 1188.51 L1110.34 1188.51 L1110.93 1188.51 L1111.52 1188.51 L1112.1 1188.51 L1112.69 1188.51 L1113.28 1188.51 L1113.86 1188.51 L1114.45 1188.51 L1115.04 1188.51 L1115.62 1188.51 L1116.21 1188.51 L1116.8 1188.51 L1117.38 1188.51 L1117.97 1188.51 L1118.55 1188.51 L1119.14 1188.51 L1119.73 1188.51 L1120.31 1188.51 L1120.9 1188.51 L1121.49 1188.51 L1122.07 1188.51 L1122.66 1188.51 L1123.25 1188.51 L1123.83 1188.51 L1124.42 1188.51 L1125.01 1188.51 L1125.59 1188.51 L1126.18 1188.51 L1126.76 1188.51 L1127.35 1188.51 L1127.94 1188.51 L1128.52 1188.51 L1129.11 1188.51 L1129.7 1188.51 L1130.28 1188.51 L1130.87 1188.51 L1131.46 1188.51 L1132.04 1188.51 L1132.63 1188.51 L1133.21 1188.51 L1133.8 1188.51 L1134.39 1188.51 L1134.97 1188.51 L1135.56 1188.51 L1136.15 1188.51 L1136.73 1188.51 L1137.32 1188.51 L1137.91 1188.51 L1138.49 1188.51 L1139.08 1188.51 L1139.67 1188.51 L1140.25 1188.51 L1140.84 1188.51 L1141.42 1188.51 L1142.01 1188.51 L1142.6 1188.51 L1143.18 1188.51 L1143.77 1188.51 L1144.36 1188.51 L1144.94 1188.51 L1145.53 1188.51 L1146.12 1188.51 L1146.7 1188.51 L1147.29 1188.51 L1147.88 1188.51 L1148.46 1188.51 L1149.05 1188.51 L1149.63 1188.51 L1150.22 1188.51 L1150.81 1188.51 L1151.39 1188.51 L1151.98 1188.51 L1152.57 1188.51 L1153.15 1188.51 L1153.74 1188.51 L1154.33 1188.51 L1154.91 1188.51 L1155.5 1188.51 L1156.09 1188.51 L1156.67 1188.51 L1157.26 1188.51 L1157.84 1188.51 L1158.43 1188.51 L1159.02 1188.51 L1159.6 1188.51 L1160.19 1188.51 L1160.78 1188.51 L1161.36 1188.51 L1161.95 1188.51 L1162.54 1188.51 L1163.12 1188.51 L1163.71 1188.51 L1164.29 1188.51 L1164.88 1188.51 L1165.47 1188.51 L1166.05 1188.51 L1166.64 1188.51 L1167.23 1188.51 L1167.81 1188.51 L1168.4 1188.51 L1168.99 1188.51 L1169.57 1188.51 L1170.16 1188.51 L1170.75 1188.51 L1171.33 1188.51 L1171.92 1188.51 L1172.5 1188.51 L1173.09 1188.51 L1173.68 1188.51 L1174.26 1188.51 L1174.85 1188.51 L1175.44 1188.51 L1176.02 1188.51 L1176.61 1188.51 L1177.2 1188.51 L1177.78 1188.51 L1178.37 1188.51 L1178.96 1188.51 L1179.54 1188.51 L1180.13 1188.51 L1180.71 1188.51 L1181.3 1188.51 L1181.89 1188.51 L1182.47 1188.51 L1183.06 1188.51 L1183.65 1188.51 L1184.23 1188.51 L1184.82 1188.51 L1185.41 1188.51 L1185.99 1188.51 L1186.58 1188.51 L1187.16 1188.51 L1187.75 1188.51 L1188.34 1188.51 L1188.92 1188.51 L1189.51 1188.51 L1190.1 1188.51 L1190.68 1188.51 L1191.27 1188.51 L1191.86 1188.51 L1192.44 1188.51 L1193.03 1188.51 L1193.62 1188.51 L1194.2 1188.51 L1194.79 1188.51 L1195.37 1188.51 L1195.96 1188.51 L1196.55 1188.51 L1197.13 1188.51 L1197.72 1188.51 L1198.31 1188.51 L1198.89 1188.51 L1199.48 1188.51 L1200.07 1188.51 L1200.65 1188.51 L1201.24 1188.51 L1201.83 1188.51 L1202.41 1188.51 L1203 1188.51 L1203.58 1188.51 L1204.17 1188.51 L1204.76 1188.51 L1205.34 1188.51 L1205.93 1188.51 L1206.52 1188.51 L1207.1 1188.51 L1207.69 1188.51 L1208.28 1188.51 L1208.86 1188.51 L1209.45 1188.51 L1210.03 1188.51 L1210.62 1188.51 L1211.21 1188.51 L1211.79 1188.51 L1212.38 1188.51 L1212.97 1188.51 L1213.55 1188.51 L1214.14 1188.51 L1214.73 1188.51 L1215.31 1188.51 L1215.9 1188.51 L1216.49 1188.51 L1217.07 1188.51 L1217.66 1188.51 L1218.24 1188.51 L1218.83 1188.51 L1219.42 1188.51 L1220 1188.51 L1220.59 1188.51 L1221.18 1188.51 L1221.76 1188.51 L1222.35 1188.51 L1222.94 1188.51 L1223.52 1188.51 L1224.11 1188.51 L1224.7 1188.51 L1225.28 1188.51 L1225.87 1188.51 L1226.45 1188.51 L1227.04 1188.51 L1227.63 1188.51 L1228.21 1188.51 L1228.8 1188.51 L1229.39 1188.51 L1229.97 1188.51 L1230.56 1188.51 L1231.15 1188.51 L1231.73 1188.51 L1232.32 1188.51 L1232.91 1188.51 L1233.49 1188.51 L1234.08 1188.51 L1234.66 1188.51 L1235.25 1188.51 L1235.84 1188.51 L1236.42 1188.51 L1237.01 1188.51 L1237.6 1188.51 L1238.18 1188.51 L1238.77 1188.51 L1239.36 1188.51 L1239.94 1188.51 L1240.53 1188.51 L1241.11 1188.51 L1241.7 1188.51 L1242.29 1188.51 L1242.87 1188.51 L1243.46 1188.51 L1244.05 1188.51 L1244.63 1188.51 L1245.22 1188.51 L1245.81 1188.51 L1246.39 1188.51 L1246.98 1188.51 L1247.57 1188.51 L1248.15 1188.51 L1248.74 1188.51 L1249.32 1188.51 L1249.91 1188.51 L1250.5 1188.51 L1251.08 1188.51 L1251.67 1188.51 L1252.26 1188.51 L1252.84 1188.51 L1253.43 1188.51 L1254.02 1188.51 L1254.6 1188.51 L1255.19 1188.51 L1255.78 1188.51 L1256.36 1188.51 L1256.95 1188.51 L1257.53 1188.51 L1258.12 1188.51 L1258.71 1188.51 L1259.29 1188.51 L1259.88 1188.51 L1260.47 1188.51 L1261.05 1188.51 L1261.64 1188.51 L1262.23 1188.51 L1262.81 1188.51 L1263.4 1188.51 L1263.98 1188.51 L1264.57 1188.51 L1265.16 1188.51 L1265.74 1188.51 L1266.33 1188.51 L1266.92 1188.51 L1267.5 1188.51 L1268.09 1188.51 L1268.68 1188.51 L1269.26 1188.51 L1269.85 1188.51 L1270.44 1188.51 L1271.02 1188.51 L1271.61 1188.51 L1272.19 1188.51 L1272.78 1188.51 L1273.37 1188.51 L1273.95 1188.51 L1274.54 1188.51 L1275.13 1188.51 L1275.71 1188.51 L1276.3 1188.51 L1276.89 1188.51 L1277.47 1188.51 L1278.06 1188.51 L1278.65 1188.51 L1279.23 1188.51 L1279.82 1188.51 L1280.4 1188.51 L1280.99 1188.51 L1281.58 1188.51 L1282.16 1188.51 L1282.75 1188.51 L1283.34 1188.51 L1283.92 1188.51 L1284.51 1188.51 L1285.1 1188.51 L1285.68 1188.51 L1286.27 1188.51 L1286.86 1188.51 L1287.44 1188.51 L1288.03 1188.51 L1288.61 1188.51 L1289.2 1188.51 L1289.79 1188.51 L1290.37 1188.51 L1290.96 1188.51 L1291.55 1188.51 L1292.13 1188.51 L1292.72 1188.51 L1293.31 1188.51 L1293.89 1188.51 L1294.48 1188.51 L1295.06 1188.51 L1295.65 1188.51 L1296.24 1188.51 L1296.82 1188.51 L1297.41 1188.51 L1298 1188.51 L1298.58 1188.51 L1299.17 1188.51 L1299.76 1188.51 L1300.34 1188.51 L1300.93 1188.51 L1301.52 1188.51 L1302.1 1188.51 L1302.69 1188.51 L1303.27 1188.51 L1303.86 1188.51 L1304.45 1188.51 L1305.03 1188.51 L1305.62 1188.51 L1306.21 1188.51 L1306.79 1188.51 L1307.38 1188.51 L1307.97 1188.51 L1308.55 1188.51 L1309.14 1188.51 L1309.73 1188.51 L1310.31 1188.51 L1310.9 1188.51 L1311.48 1188.51 L1312.07 1188.51 L1312.66 1188.51 L1313.24 1188.51 L1313.83 1188.51 L1314.42 1188.51 L1315 1188.51 L1315.59 1188.51 L1316.18 1188.51 L1316.76 1188.51 L1317.35 1188.51 L1317.93 1188.51 L1318.52 1188.51 L1319.11 1188.51 L1319.69 1188.51 L1320.28 1188.51 L1320.87 1188.51 L1321.45 1188.51 L1322.04 1188.51 L1322.63 1188.51 L1323.21 1188.51 L1323.8 1188.51 L1324.39 1188.51 L1324.97 1188.51 L1325.56 1188.51 L1326.14 1188.51 L1326.73 1188.51 L1327.32 1188.51 L1327.9 1188.51 L1328.49 1188.51 L1329.08 1188.51 L1329.66 1188.51 L1330.25 1188.51 L1330.84 1188.51 L1331.42 1188.51 L1332.01 1188.51 L1332.6 1188.51 L1333.18 1188.51 L1333.77 1188.51 L1334.35 1188.51 L1334.94 1188.51 L1335.53 1188.51 L1336.11 1188.51 L1336.7 1188.51 L1337.29 1188.51 L1337.87 1188.51 L1338.46 1188.51 L1339.05 1188.51 L1339.63 1188.51 L1340.22 1188.51 L1340.8 1188.51 L1341.39 1188.51 L1341.98 1188.51 L1342.56 1188.51 L1343.15 1188.51 L1343.74 1188.51 L1344.32 1188.51 L1344.91 1188.51 L1345.5 1188.51 L1346.08 1188.51 L1346.67 1188.51 L1347.26 1188.51 L1347.84 1188.51 L1348.43 1188.51 L1349.01 1188.51 L1349.6 1188.51 L1350.19 1188.51 L1350.77 1188.51 L1351.36 1188.51 L1351.95 1188.51 L1352.53 1188.51 L1353.12 1188.51 L1353.71 1188.51 L1354.29 1188.51 L1354.88 1188.51 L1355.47 1188.51 L1356.05 1188.51 L1356.64 1188.51 L1357.22 1188.51 L1357.81 1188.51 L1358.4 1188.51 L1358.98 1188.51 L1359.57 1188.51 L1360.16 1188.51 L1360.74 1188.51 L1361.33 1188.51 L1361.92 1188.51 L1362.5 1188.51 L1363.09 1188.51 L1363.68 1188.51 L1364.26 1188.51 L1364.85 1188.51 L1365.43 1188.51 L1366.02 1188.51 L1366.61 1188.51 L1367.19 1188.51 L1367.78 1188.51 L1368.37 1188.51 L1368.95 1188.51 L1369.54 1188.51 L1370.13 1188.51 L1370.71 1188.51 L1371.3 1188.51 L1371.88 1188.51 L1372.47 1188.51 L1373.06 1188.51 L1373.64 1188.51 L1374.23 1188.51 L1374.82 1188.51 L1375.4 1188.51 L1375.99 1188.51 L1376.58 1188.51 L1377.16 1188.51 L1377.75 1188.51 L1378.34 1188.51 L1378.92 1188.51 L1379.51 1188.51 L1380.09 1188.51 L1380.68 1188.51 L1381.27 1188.51 L1381.85 1188.51 L1382.44 1188.51 L1383.03 1188.51 L1383.61 1188.51 L1384.2 1188.51 L1384.79 1188.51 L1385.37 1188.51 L1385.96 1188.51 L1386.55 1188.51 L1387.13 1188.51 L1387.72 1188.51 L1388.3 1188.51 L1388.89 1188.51 L1389.48 1188.51 L1390.06 1188.51 L1390.65 1188.51 L1391.24 1188.51 L1391.82 1188.51 L1392.41 1188.51 L1393 1188.51 L1393.58 1188.51 L1394.17 1188.51 L1394.75 1188.51 L1395.34 1188.51 L1395.93 1188.51 L1396.51 1188.51 L1397.1 1188.51 L1397.69 1188.51 L1398.27 1188.51 L1398.86 1188.51 L1399.45 1188.51 L1400.03 1188.51 L1400.62 1188.51 L1401.21 1188.51 L1401.79 1188.51 L1402.38 1188.51 L1402.96 1188.51 L1403.55 1188.51 L1404.14 1188.51 L1404.72 1188.51 L1405.31 1188.51 L1405.9 1188.51 L1406.48 1188.51 L1407.07 1188.51 L1407.66 1188.51 L1408.24 1188.51 L1408.83 1188.51 L1409.42 1188.51 L1410 1188.51 L1410.59 1188.51 L1411.17 1188.51 L1411.76 1188.51 L1412.35 1188.51 L1412.93 1188.51 L1413.52 1188.51 L1414.11 1188.51 L1414.69 1188.51 L1415.28 1188.51 L1415.87 1188.51 L1416.45 1188.51 L1417.04 1188.51 L1417.63 1188.51 L1418.21 1188.51 L1418.8 1188.51 L1419.38 1188.51 L1419.97 1188.51 L1420.56 1188.51 L1421.14 1188.51 L1421.73 1188.51 L1422.32 1188.51 L1422.9 1188.51 L1423.49 1188.51 L1424.08 1188.51 L1424.66 1188.51 L1425.25 1188.51 L1425.83 1188.51 L1426.42 1188.51 L1427.01 1188.51 L1427.59 1188.51 L1428.18 1188.51 L1428.77 1188.51 L1429.35 1188.51 L1429.94 1188.51 L1430.53 1188.51 L1431.11 1188.51 L1431.7 1188.51 L1432.29 1188.51 L1432.87 1188.51 L1433.46 1188.51 L1434.04 1188.51 L1434.63 1188.51 L1435.22 1188.51 L1435.8 1188.51 L1436.39 1188.51 L1436.98 1188.51 L1437.56 1188.51 L1438.15 1188.51 L1438.74 1188.51 L1439.32 1188.51 L1439.91 1188.51 L1440.5 1188.51 L1441.08 1188.51 L1441.67 1188.51 L1442.25 1188.51 L1442.84 1188.51 L1443.43 1188.51 L1444.01 1188.51 L1444.6 1188.51 L1445.19 1188.51 L1445.77 1188.51 L1446.36 1188.51 L1446.95 1188.51 L1447.53 1188.51 L1448.12 1188.51 L1448.7 1188.51 L1449.29 1188.51 L1449.88 1188.51 L1450.46 1188.51 L1451.05 1188.51 L1451.64 1188.51 L1452.22 1188.51 L1452.81 1188.51 L1453.4 1188.51 L1453.98 1188.51 L1454.57 1188.51 L1455.16 1188.51 L1455.74 1188.51 L1456.33 1188.51 L1456.91 1188.51 L1457.5 1188.51 L1458.09 1188.51 L1458.67 1188.51 L1459.26 1188.51 L1459.85 1188.51 L1460.43 1188.51 L1461.02 1188.51 L1461.61 1188.51 L1462.19 1188.51 L1462.78 1188.51 L1463.37 1188.51 L1463.95 1188.51 L1464.54 1188.51 L1465.12 1188.51 L1465.71 1188.51 L1466.3 1188.51 L1466.88 1188.51 L1467.47 1188.51 L1468.06 1188.51 L1468.64 1188.51 L1469.23 1188.51 L1469.82 1188.51 L1470.4 1188.51 L1470.99 1188.51 L1471.57 1188.51 L1472.16 1188.51 L1472.75 1188.51 L1473.33 1188.51 L1473.92 1188.51 L1474.51 1188.51 L1475.09 1188.51 L1475.68 1188.51 L1476.27 1188.51 L1476.85 1188.51 L1477.44 1188.51 L1478.03 1188.51 L1478.61 1188.51 L1479.2 1188.51 L1479.78 1188.51 L1480.37 1188.51 L1480.96 1188.51 L1481.54 1188.51 L1482.13 1188.51 L1482.72 1188.51 L1483.3 1188.51 L1483.89 1188.51 L1484.48 1188.51 L1485.06 1188.51 L1485.65 1188.51 L1486.24 1188.51 L1486.82 1188.51 L1487.41 1188.51 L1487.99 1188.51 L1488.58 1188.51 L1489.17 1188.51 L1489.75 1188.51 L1490.34 1188.51 L1490.93 1188.51 L1491.51 1188.51 L1492.1 1188.51 L1492.69 1188.51 L1493.27 1188.51 L1493.86 1188.51 L1494.45 1188.51 L1495.03 1188.51 L1495.62 1188.51 L1496.2 1188.51 L1496.79 1188.51 L1497.38 1188.51 L1497.96 1188.51 L1498.55 1188.51 L1499.14 1188.51 L1499.72 1188.51 L1500.31 1188.51 L1500.9 1188.51 L1501.48 1188.51 L1502.07 1188.51 L1502.65 1188.51 L1503.24 1188.51 L1503.83 1188.51 L1504.41 1188.51 L1505 1188.51 L1505.59 1188.51 L1506.17 1188.51 L1506.76 1188.51 L1507.35 1188.51 L1507.93 1188.51 L1508.52 1188.51 L1509.11 1188.51 L1509.69 1188.51 L1510.28 1188.51 L1510.86 1188.51 L1511.45 1188.51 L1512.04 1188.51 L1512.62 1188.51 L1513.21 1188.51 L1513.8 1188.51 L1514.38 1188.51 L1514.97 1188.51 L1515.56 1188.51 L1516.14 1188.51 L1516.73 1188.51 L1517.32 1188.51 L1517.9 1188.51 L1518.49 1188.51 L1519.07 1188.51 L1519.66 1188.51 L1520.25 1188.51 L1520.83 1188.51 L1521.42 1188.51 L1522.01 1188.51 L1522.59 1188.51 L1523.18 1188.51 L1523.77 1188.51 L1524.35 1188.51 L1524.94 1188.51 L1525.52 1188.51 L1526.11 1188.51 L1526.7 1188.51 L1527.28 1188.51 L1527.87 1188.51 L1528.46 1188.51 L1529.04 1188.51 L1529.63 1188.51 L1530.22 1188.51 L1530.8 1188.51 L1531.39 1188.51 L1531.98 1188.51 L1532.56 1188.51 L1533.15 1188.51 L1533.73 1188.51 L1534.32 1188.51 L1534.91 1188.51 L1535.49 1188.51 L1536.08 1188.51 L1536.67 1188.51 L1537.25 1188.51 L1537.84 1188.51 L1538.43 1188.51 L1539.01 1188.51 L1539.6 1188.51 L1540.19 1188.51 L1540.77 1188.51 L1541.36 1188.51 L1541.94 1188.51 L1542.53 1188.51 L1543.12 1188.51 L1543.7 1188.51 L1544.29 1188.51 L1544.88 1188.51 L1545.46 1188.51 L1546.05 1188.51 L1546.64 1188.51 L1547.22 1188.51 L1547.81 1188.51 L1548.4 1188.51 L1548.98 1188.51 L1549.57 1188.51 L1550.15 1188.51 L1550.74 1188.51 L1551.33 1188.51 L1551.91 1188.51 L1552.5 1188.51 L1553.09 1188.51 L1553.67 1188.51 L1554.26 1188.51 L1554.85 1188.51 L1555.43 1188.51 L1556.02 1188.51 L1556.6 1188.51 L1557.19 1188.51 L1557.78 1188.51 L1558.36 1188.51 L1558.95 1188.51 L1559.54 1188.51 L1560.12 1188.51 L1560.71 1188.51 L1561.3 1188.51 L1561.88 1188.51 L1562.47 1188.51 L1563.06 1188.51 L1563.64 1188.51 L1564.23 1188.51 L1564.81 1188.51 L1565.4 1188.51 L1565.99 1188.51 L1566.57 1188.51 L1567.16 1188.51 L1567.75 1188.51 L1568.33 1188.51 L1568.92 1188.51 L1569.51 1188.51 L1570.09 1188.51 L1570.68 1188.51 L1571.27 1188.51 L1571.85 1188.51 L1572.44 1188.51 L1573.02 1188.51 L1573.61 1188.51 L1574.2 1188.51 L1574.78 1188.51 L1575.37 1188.51 L1575.96 1188.51 L1576.54 1188.51 L1577.13 1188.51 L1577.72 1188.51 L1578.3 1188.51 L1578.89 1188.51 L1579.47 1188.51 L1580.06 1188.51 L1580.65 1188.51 L1581.23 1188.51 L1581.82 1188.51 L1582.41 1188.51 L1582.99 1188.51 L1583.58 1188.51 L1584.17 1188.51 L1584.75 1188.51 L1585.34 1188.51 L1585.93 1188.51 L1586.51 1188.51 L1587.1 1188.51 L1587.68 1188.51 L1588.27 1188.51 L1588.86 1188.51 L1589.44 1188.51 L1590.03 1188.51 L1590.62 1188.51 L1591.2 1188.51 L1591.79 1188.51 L1592.38 1188.51 L1592.96 1188.51 L1593.55 1188.51 L1594.14 1188.51 L1594.72 1188.51 L1595.31 1188.51 L1595.89 1188.51 L1596.48 1188.51 L1597.07 1188.51 L1597.65 1188.51 L1598.24 1188.51 L1598.83 1188.51 L1599.41 1188.51 L1600 1188.51 L1600.59 1188.51 L1601.17 1188.51 L1601.76 1188.51 L1602.34 1188.51 L1602.93 1188.51 L1603.52 1188.51 L1604.1 1188.51 L1604.69 1188.51 L1605.28 1188.51 L1605.86 1188.51 L1606.45 1188.51 L1607.04 1188.51 L1607.62 1188.51 L1608.21 1188.51 L1608.8 1188.51 L1609.38 1188.51 L1609.97 1188.51 L1610.55 1188.51 L1611.14 1188.51 L1611.73 1188.51 L1612.31 1188.51 L1612.9 1188.51 L1613.49 1188.51 L1614.07 1188.51 L1614.66 1188.51 L1615.25 1188.51 L1615.83 1188.51 L1616.42 1188.51 L1617.01 1188.51 L1617.59 1188.51 L1618.18 1188.51 L1618.76 1188.51 L1619.35 1188.51 L1619.94 1188.51 L1620.52 1188.51 L1621.11 1188.51 L1621.7 1188.51 L1622.28 1188.51 L1622.87 1188.51 L1623.46 1188.51 L1624.04 1188.51 L1624.63 1188.51 L1625.22 1188.51 L1625.8 1188.51 L1626.39 1188.51 L1626.97 1188.51 L1627.56 1188.51 L1628.15 1188.51 L1628.73 1188.51 L1629.32 1188.51 L1629.91 1188.51 L1630.49 1188.51 L1631.08 1188.51 L1631.67 1188.51 L1632.25 1188.51 L1632.84 1188.51 L1633.42 1188.51 L1634.01 1188.51 L1634.6 1188.51 L1635.18 1188.51 L1635.77 1188.51 L1636.36 1188.51 L1636.94 1188.51 L1637.53 1188.51 L1638.12 1188.51 L1638.7 1188.51 L1639.29 1188.51 L1639.88 1188.51 L1640.46 1188.51 L1641.05 1188.51 L1641.63 1188.51 L1642.22 1188.51 L1642.81 1188.51 L1643.39 1188.51 L1643.98 1188.51 L1644.57 1188.51 L1645.15 1188.51 L1645.74 1188.51 L1646.33 1188.51 L1646.91 1188.51 L1647.5 1188.51 L1648.09 1188.51 L1648.67 1188.51 L1649.26 1188.51 L1649.84 1188.51 L1650.43 1188.51 L1651.02 1188.51 L1651.6 1188.51 L1652.19 1188.51 L1652.78 1188.51 L1653.36 1188.51 L1653.95 1188.51 L1654.54 1188.51 L1655.12 1188.51 L1655.71 1188.51 L1656.29 1188.51 L1656.88 1188.51 L1657.47 1188.51 L1658.05 1188.51 L1658.64 1188.51 L1659.23 1188.51 L1659.81 1188.51 L1660.4 1188.51 L1660.99 1188.51 L1661.57 1188.51 L1662.16 1188.51 L1662.75 1188.51 L1663.33 1188.51 L1663.92 1188.51 L1664.5 1188.51 L1665.09 1188.51 L1665.68 1188.51 L1666.26 1188.51 L1666.85 1188.51 L1667.44 1188.51 L1668.02 1188.51 L1668.61 1188.51 L1669.2 1188.51 L1669.78 1188.51 L1670.37 1188.51 L1670.96 1188.51 L1671.54 1188.51 L1672.13 1188.51 L1672.71 1188.51 L1673.3 1188.51 L1673.89 1188.51 L1674.47 1188.51 L1675.06 1188.51 L1675.65 1188.51 L1676.23 1188.51 L1676.82 1188.51 L1677.41 1188.51 L1677.99 1188.51 L1678.58 1188.51 L1679.17 1188.51 L1679.75 1188.51 L1680.34 1188.51 L1680.92 1188.51 L1681.51 1188.51 L1682.1 1188.51 L1682.68 1188.51 L1683.27 1188.51 L1683.86 1188.51 L1684.44 1188.51 L1685.03 1188.51 L1685.62 1188.51 L1686.2 1188.51 L1686.79 1188.51 L1687.37 1188.51 L1687.96 1188.51 L1688.55 1188.51 L1689.13 1188.51 L1689.72 1188.51 L1690.31 1188.51 L1690.89 1188.51 L1691.48 1188.51 L1692.07 1188.51 L1692.65 1188.51 L1693.24 1188.51 L1693.83 1188.51 L1694.41 1188.51 L1695 1188.51 L1695.58 1188.51 L1696.17 1188.51 L1696.76 1188.51 L1697.34 1188.51 L1697.93 1188.51 L1698.52 1188.51 L1699.1 1188.51 L1699.69 1188.51 L1700.28 1188.51 L1700.86 1188.51 L1701.45 1188.51 L1702.04 1188.51 L1702.62 1188.51 L1703.21 1188.51 L1703.79 1188.51 L1704.38 1188.51 L1704.97 1188.51 L1705.55 1188.51 L1706.14 1188.51 L1706.73 1188.51 L1707.31 1188.51 L1707.9 1188.51 L1708.49 1188.51 L1709.07 1188.51 L1709.66 1188.51 L1710.24 1188.51 L1710.83 1188.51 L1711.42 1188.51 L1712 1188.51 L1712.59 1188.51 L1713.18 1188.51 L1713.76 1188.51 L1714.35 1188.51 L1714.94 1188.51 L1715.52 1188.51 L1716.11 1188.51 L1716.7 1188.51 L1717.28 1188.51 L1717.87 1188.51 L1718.45 1188.51 L1719.04 1188.51 L1719.63 1188.51 L1720.21 1188.51 L1720.8 1188.51 L1721.39 1188.51 L1721.97 1188.51 L1722.56 1188.51 L1723.15 1188.51 L1723.73 1188.51 L1724.32 1188.51 L1724.91 1188.51 L1725.49 1188.51 L1726.08 1188.51 L1726.66 1188.51 L1727.25 1188.51 L1727.84 1188.51 L1728.42 1188.51 L1729.01 1188.51 L1729.6 1188.51 L1730.18 1188.51 L1730.77 1188.51 L1731.36 1188.51 L1731.94 1188.51 L1732.53 1188.51 L1733.11 1188.51 L1733.7 1188.51 L1734.29 1188.51 L1734.87 1188.51 L1735.46 1188.51 L1736.05 1188.51 L1736.63 1188.51 L1737.22 1188.51 L1737.81 1188.51 L1738.39 1188.51 L1738.98 1188.51 L1739.57 1188.51 L1740.15 1188.51 L1740.74 1188.51 L1741.32 1188.51 L1741.91 1188.51 L1742.5 1188.51 L1743.08 1188.51 L1743.67 1188.51 L1744.26 1188.51 L1744.84 1188.51 L1745.43 1188.51 L1746.02 1188.51 L1746.6 1188.51 L1747.19 1188.51 L1747.78 1188.51 L1748.36 1188.51 L1748.95 1188.51 L1749.53 1188.51 L1750.12 1188.51 L1750.71 1188.51 L1751.29 1188.51 L1751.88 1188.51 L1752.47 1188.51 L1753.05 1188.51 L1753.64 1188.51 L1754.23 1188.51 L1754.81 1188.51 L1755.4 1188.51 L1755.99 1188.51 L1756.57 1188.51 L1757.16 1188.51 L1757.74 1188.51 L1758.33 1188.51 L1758.92 1188.51 L1759.5 1188.51 L1760.09 1188.51 L1760.68 1188.51 L1761.26 1188.51 L1761.85 1188.51 L1762.44 1188.51 L1763.02 1188.51 L1763.61 1188.51 L1764.19 1188.51 L1764.78 1188.51 L1765.37 1188.51 L1765.95 1188.51 L1766.54 1188.51 L1767.13 1188.51 L1767.71 1188.51 L1768.3 1188.51 L1768.89 1188.51 L1769.47 1188.51 L1770.06 1188.51 L1770.65 1188.51 L1771.23 1188.51 L1771.82 1188.51 L1772.4 1188.51 L1772.99 1188.51 L1773.58 1188.51 L1774.16 1188.51 L1774.75 1188.51 L1775.34 1188.51 L1775.92 1188.51 L1776.51 1188.51 L1777.1 1188.51 L1777.68 1188.51 L1778.27 1188.51 L1778.86 1188.51 L1779.44 1188.51 L1780.03 1188.51 L1780.61 1188.51 L1781.2 1188.51 L1781.79 1188.51 L1782.37 1188.51 L1782.96 1188.51 L1783.55 1188.51 L1784.13 1188.51 L1784.72 1188.51 L1785.31 1188.51 L1785.89 1188.51 L1786.48 1188.51 L1787.06 1188.51 L1787.65 1188.51 L1788.24 1188.51 L1788.82 1188.51 L1789.41 1188.51 L1790 1188.51 L1790.58 1188.51 L1791.17 1188.51 L1791.76 1188.51 L1792.34 1188.51 L1792.93 1188.51 L1793.52 1188.51 L1794.1 1188.51 L1794.69 1188.51 L1795.27 1188.51 L1795.86 1188.51 L1796.45 1188.51 L1797.03 1188.51 L1797.62 1188.51 L1798.21 1188.51 L1798.79 1188.51 L1799.38 1188.51 L1799.97 1188.51 L1800.55 1188.51 L1801.14 1188.51 L1801.73 1188.51 L1802.31 1188.51 L1802.9 1188.51 L1803.48 1188.51 L1804.07 1188.51 L1804.66 1188.51 L1805.24 1188.51 L1805.83 1188.51 L1806.42 1188.51 L1807 1188.51 L1807.59 1188.51 L1808.18 1188.51 L1808.76 1188.51 L1809.35 1188.51 L1809.94 1188.51 L1810.52 1188.51 L1811.11 1188.51 L1811.69 1188.51 L1812.28 1188.51 L1812.87 1188.51 L1813.45 1188.51 L1814.04 1188.51 L1814.63 1188.51 L1815.21 1188.51 L1815.8 1188.51 L1816.39 1188.51 L1816.97 1188.51 L1817.56 1188.51 L1818.14 1188.51 L1818.73 1188.51 L1819.32 1188.51 L1819.9 1188.51 L1820.49 1188.51 L1821.08 1188.51 L1821.66 1188.51 L1822.25 1188.51 L1822.84 1188.51 L1823.42 1188.51 L1824.01 1188.51 L1824.6 1188.51 L1825.18 1188.51 L1825.77 1188.51 L1826.35 1188.51 L1826.94 1188.51 L1827.53 1188.51 L1828.11 1188.51 L1828.7 1188.51 L1829.29 1188.51 L1829.87 1188.51 L1830.46 1188.51 L1831.05 1188.51 L1831.63 1188.51 L1832.22 1188.51 L1832.81 1188.51 L1833.39 1188.51 L1833.98 1188.51 L1834.56 1188.51 L1835.15 1188.51 L1835.74 1188.51 L1836.32 1188.51 L1836.91 1188.51 L1837.5 1188.51 L1838.08 1188.51 L1838.67 1188.51 L1839.26 1188.51 L1839.84 1188.51 L1840.43 1188.51 L1841.01 1188.51 L1841.6 1188.51 L1842.19 1188.51 L1842.77 1188.51 L1843.36 1188.51 L1843.95 1188.51 L1844.53 1188.51 L1845.12 1188.51 L1845.71 1188.51 L1846.29 1188.51 L1846.88 1188.51 L1847.47 1188.51 L1848.05 1188.51 L1848.64 1188.51 L1849.22 1188.51 L1849.81 1188.51 L1850.4 1188.51 L1850.98 1188.51 L1851.57 1188.51 L1852.16 1188.51 L1852.74 1188.51 L1853.33 1188.51 L1853.92 1188.51 L1854.5 1188.51 L1855.09 1188.51 L1855.68 1188.51 L1856.26 1188.51 L1856.85 1188.51 L1857.43 1188.51 L1858.02 1188.51 L1858.61 1188.51 L1859.19 1188.51 L1859.78 1188.51 L1860.37 1188.51 L1860.95 1188.51 L1861.54 1188.51 L1862.13 1188.51 L1862.71 1188.51 L1863.3 1188.51 L1863.88 1188.51 L1864.47 1188.51 L1865.06 1188.51 L1865.64 1188.51 L1866.23 1188.51 L1866.82 1188.51 L1867.4 1188.51 L1867.99 1188.51 L1868.58 1188.51 L1869.16 1188.51 L1869.75 1188.51 L1870.34 1188.51 L1870.92 1188.51 L1871.51 1188.51 L1872.09 1188.51 L1872.68 1188.51 L1873.27 1188.51 L1873.85 1188.51 L1874.44 1188.51 L1875.03 1188.51 L1875.61 1188.51 L1876.2 1188.51 L1876.79 1188.51 L1877.37 1188.51 L1877.96 1188.51 L1878.55 1188.51 L1879.13 1188.51 L1879.72 1188.51 L1880.3 1188.51 L1880.89 1188.51 L1881.48 1188.51 L1882.06 1188.51 L1882.65 1188.51 L1883.24 1188.51 L1883.82 1188.51 L1884.41 1188.51 L1885 1188.51 L1885.58 1188.51 L1886.17 1188.51 L1886.76 1188.51 L1887.34 1188.51 L1887.93 1188.51 L1888.51 1188.51 L1889.1 1188.51 L1889.69 1188.51 L1890.27 1188.51 L1890.86 1188.51 L1891.45 1188.51 L1892.03 1188.51 L1892.62 1188.51 L1893.21 1188.51 L1893.79 1188.51 L1894.38 1188.51 L1894.96 1188.51 L1895.55 1188.51 L1896.14 1188.51 L1896.72 1188.51 L1897.31 1188.51 L1897.9 1188.51 L1898.48 1188.51 L1899.07 1188.51 L1899.66 1188.51 L1900.24 1188.51 L1900.83 1188.51 L1901.42 1188.51 L1902 1188.51 L1902.59 1188.51 L1903.17 1188.51 L1903.76 1188.51 L1904.35 1188.51 L1904.93 1188.51 L1905.52 1188.51 L1906.11 1188.51 L1906.69 1188.51 L1907.28 1188.51 L1907.87 1188.51 L1908.45 1188.51 L1909.04 1188.51 L1909.63 1188.51 L1910.21 1188.51 L1910.8 1188.51 L1911.38 1188.51 L1911.97 1188.51 L1912.56 1188.51 L1913.14 1188.51 L1913.73 1188.51 L1914.32 1188.51 L1914.9 1188.51 L1915.49 1188.51 L1916.08 1188.51 L1916.66 1188.51 L1917.25 1188.51 L1917.83 1188.51 L1918.42 1188.51 L1919.01 1188.51 L1919.59 1188.51 L1920.18 1188.51 L1920.77 1188.51 L1921.35 1188.51 L1921.94 1188.51 L1922.53 1188.51 L1923.11 1188.51 L1923.7 1188.51 L1924.29 1188.51 L1924.87 1188.51 L1925.46 1188.51 L1926.04 1188.51 L1926.63 1188.51 L1927.22 1188.51 L1927.8 1188.51 L1928.39 1188.51 L1928.98 1188.51 L1929.56 1188.51 L1930.15 1188.51 L1930.74 1188.51 L1931.32 1188.51 L1931.91 1188.51 L1932.5 1188.51 L1933.08 1188.51 L1933.67 1188.51 L1934.25 1188.51 L1934.84 1188.51 L1935.43 1188.51 L1936.01 1188.51 L1936.6 1188.51 L1937.19 1188.51 L1937.77 1188.51 L1938.36 1188.51 L1938.95 1188.51 L1939.53 1188.51 L1940.12 1188.51 L1940.71 1188.51 L1941.29 1188.51 L1941.88 1188.51 L1942.46 1188.51 L1943.05 1188.51 L1943.64 1188.51 L1944.22 1188.51 L1944.81 1188.51 L1945.4 1188.51 L1945.98 1188.51 L1946.57 1188.51 L1947.16 1188.51 L1947.74 1188.51 L1948.33 1188.51 L1948.91 1188.51 L1949.5 1188.51 L1950.09 1188.51 L1950.67 1188.51 L1951.26 1188.51 L1951.85 1188.51 L1952.43 1188.51 L1953.02 1188.51 L1953.61 1188.51 L1954.19 1188.51 L1954.78 1188.51 L1955.37 1188.51 L1955.95 1188.51 L1956.54 1188.51 L1957.12 1188.51 L1957.71 1188.51 L1958.3 1188.51 L1958.88 1188.51 L1959.47 1188.51 L1960.06 1188.51 L1960.64 1188.51 L1961.23 1188.51 L1961.82 1188.51 L1962.4 1188.51 L1962.99 1188.51 L1963.58 1188.51 L1964.16 1188.51 L1964.75 1188.51 L1965.33 1188.51 L1965.92 1188.51 L1966.51 1188.51 L1967.09 1188.51 L1967.68 1188.51 L1968.27 1188.51 L1968.85 1188.51 L1969.44 1188.51 L1970.03 1188.51 L1970.61 1188.51 L1971.2 1188.51 L1971.78 1188.51 L1972.37 1188.51 L1972.96 1188.51 L1973.54 1188.51 L1974.13 1188.51 L1974.72 1188.51 L1975.3 1188.51 L1975.89 1188.51 L1976.48 1188.51 L1977.06 1188.51 L1977.65 1188.51 L1978.24 1188.51 L1978.82 1188.51 L1979.41 1188.51 L1979.99 1188.51 L1980.58 1188.51 L1981.17 1188.51 L1981.75 1188.51 L1982.34 1188.51 L1982.93 1188.51 L1983.51 1188.51 L1984.1 1188.51 L1984.69 1188.51 L1985.27 1188.51 L1985.86 1188.51 L1986.45 1188.51 L1987.03 1188.51 L1987.62 1188.51 L1988.2 1188.51 L1988.79 1188.51 L1989.38 1188.51 L1989.96 1188.51 L1990.55 1188.51 L1991.14 1188.51 L1991.72 1188.51 L1992.31 1188.51 L1992.9 1188.51 L1993.48 1188.51 L1994.07 1188.51 L1994.65 1188.51 L1995.24 1188.51 L1995.83 1188.51 L1996.41 1188.51 L1997 1188.51 L1997.59 1188.51 L1998.17 1188.51 L1998.76 1188.51 L1999.35 1188.51 L1999.93 1188.51 L2000.52 1188.51 L2001.11 1188.51 L2001.69 1188.51 L2002.28 1188.51 L2002.86 1188.51 L2003.45 1188.51 L2004.04 1188.51 L2004.62 1188.51 L2005.21 1188.51 L2005.8 1188.51 L2006.38 1188.51 L2006.97 1188.51 L2007.56 1188.51 L2008.14 1188.51 L2008.73 1188.51 L2009.32 1188.51 L2009.9 1188.51 L2010.49 1188.51 L2011.07 1188.51 L2011.66 1188.51 L2012.25 1188.51 L2012.83 1188.51 L2013.42 1188.51 L2014.01 1188.51 L2014.59 1188.51 L2015.18 1188.51 L2015.77 1188.51 L2016.35 1188.51 L2016.94 1188.51 L2017.53 1188.51 L2018.11 1188.51 L2018.7 1188.51 L2019.28 1188.51 L2019.87 1188.51 L2020.46 1188.51 L2021.04 1188.51 L2021.63 1188.51 L2022.22 1188.51 L2022.8 1188.51 L2023.39 1188.51 L2023.98 1188.51 L2024.56 1188.51 L2025.15 1188.51 L2025.73 1188.51 L2026.32 1188.51 L2026.91 1188.51 L2027.49 1188.51 L2028.08 1188.51 L2028.67 1188.51 L2029.25 1188.51 L2029.84 1188.51 L2030.43 1188.51 L2031.01 1188.51 L2031.6 1188.51 L2032.19 1188.51 L2032.77 1188.51 L2033.36 1188.51 L2033.94 1188.51 L2034.53 1188.51 L2035.12 1188.51 L2035.7 1188.51 L2036.29 1188.51 L2036.88 1188.51 L2037.46 1188.51 L2038.05 1188.51 L2038.64 1188.51 L2039.22 1188.51 L2039.81 1188.51 L2040.4 1188.51 L2040.98 1188.51 L2041.57 1188.51 L2042.15 1188.51 L2042.74 1188.51 L2043.33 1188.51 L2043.91 1188.51 L2044.5 1188.51 L2045.09 1188.51 L2045.67 1188.51 L2046.26 1188.51 L2046.85 1188.51 L2047.43 1188.51 L2048.02 1188.51 L2048.6 1188.51 L2049.19 1188.51 L2049.78 1188.51 L2050.36 1188.51 L2050.95 1188.51 L2051.54 1188.51 L2052.12 1188.51 L2052.71 1188.51 L2053.3 1188.51 L2053.88 1188.51 L2054.47 1188.51 L2055.06 1188.51 L2055.64 1188.51 L2056.23 1188.51 L2056.81 1188.51 L2057.4 1188.51 L2057.99 1188.51 L2058.57 1188.51 L2059.16 1188.51 L2059.75 1188.51 L2060.33 1188.51 L2060.92 1188.51 L2061.51 1188.51 L2062.09 1188.51 L2062.68 1188.51 L2063.27 1188.51 L2063.85 1188.51 L2064.44 1188.51 L2065.02 1188.51 L2065.61 1188.51 L2066.2 1188.51 L2066.78 1188.51 L2067.37 1188.51 L2067.96 1188.51 L2068.54 1188.51 L2069.13 1188.51 L2069.72 1188.51 L2070.3 1188.51 L2070.89 1188.51 L2071.48 1188.51 L2072.06 1188.51 L2072.65 1188.51 L2073.23 1188.51 L2073.82 1188.51 L2074.41 1188.51 L2074.99 1188.51 L2075.58 1188.51 L2076.17 1188.51 L2076.75 1188.51 L2077.34 1188.51 L2077.93 1188.51 L2078.51 1188.51 L2079.1 1188.51 L2079.68 1188.51 L2080.27 1188.51 L2080.86 1188.51 L2081.44 1188.51 L2082.03 1188.51 L2082.62 1188.51 L2083.2 1188.51 L2083.79 1188.51 L2084.38 1188.51 L2084.96 1188.51 L2085.55 1188.51 L2086.14 1188.51 L2086.72 1188.51 L2087.31 1188.51 L2087.89 1188.51 L2088.48 1188.51 L2089.07 1188.51 L2089.65 1188.51 L2090.24 1188.51 L2090.83 1188.51 L2091.41 1188.51 L2092 1188.51 L2092.59 1188.51 L2093.17 1188.51 L2093.76 1188.51 L2094.35 1188.51 L2094.93 1188.51 L2095.52 1188.51 L2096.1 1188.51 L2096.69 1188.51 L2097.28 1188.51 L2097.86 1188.51 L2098.45 1188.51 L2099.04 1188.51 L2099.62 1188.51 L2100.21 1188.51 L2100.8 1188.51 L2101.38 1188.51 L2101.97 1188.51 L2102.55 1188.51 L2103.14 1188.51 L2103.73 1188.51 L2104.31 1188.51 L2104.9 1188.51 L2105.49 1188.51 L2106.07 1188.51 L2106.66 1188.51 L2107.25 1188.51 L2107.83 1188.51 L2108.42 1188.51 L2109.01 1188.51 L2109.59 1188.51 L2110.18 1188.51 L2110.76 1188.51 L2111.35 1188.51 L2111.94 1188.51 L2112.52 1188.51 L2113.11 1188.51 L2113.7 1188.51 L2114.28 1188.51 L2114.87 1188.51 L2115.46 1188.51 L2116.04 1188.51 L2116.63 1188.51 L2117.22 1188.51 L2117.8 1188.51 L2118.39 1188.51 L2118.97 1188.51 L2119.56 1188.51 L2120.15 1188.51 L2120.73 1188.51 L2121.32 1188.51 L2121.91 1188.51 L2122.49 1188.51 L2123.08 1188.51 L2123.67 1188.51 L2124.25 1188.51 L2124.84 1188.51 L2125.42 1188.51 L2126.01 1188.51 L2126.6 1188.51 L2127.18 1188.51 L2127.77 1188.51 L2128.36 1188.51 L2128.94 1188.51 L2129.53 1188.51 L2130.12 1188.51 L2130.7 1188.51 L2131.29 1188.51 L2131.88 1188.51 L2132.46 1188.51 L2133.05 1188.51 L2133.63 1188.51 L2134.22 1188.51 L2134.81 1188.51 L2135.39 1188.51 L2135.98 1188.51 L2136.57 1188.51 L2137.15 1188.51 L2137.74 1188.51 L2138.33 1188.51 L2138.91 1188.51 L2139.5 1188.51 L2140.09 1188.51 L2140.67 1188.51 L2141.26 1188.51 L2141.84 1188.51 L2142.43 1188.51 L2143.02 1188.51 L2143.6 1188.51 L2144.19 1188.51 L2144.78 1188.51 L2145.36 1188.51 L2145.95 1188.51 L2146.54 1188.51 L2147.12 1188.51 L2147.71 1188.51 L2148.3 1188.51 L2148.88 1188.51 L2149.47 1188.51 L2150.05 1188.51 L2150.64 1188.51 L2151.23 1188.51 L2151.81 1188.51 L2152.4 1188.51 L2152.99 1188.51 L2153.57 1188.51 L2154.16 1188.51 L2154.75 1188.51 L2155.33 1188.51 L2155.92 1188.51 L2156.5 1188.51 L2157.09 1188.51 L2157.68 1188.51 L2158.26 1188.51 L2158.26 1188.25 L2157.68 1188.25 L2157.09 1188.25 L2156.5 1188.25 L2155.92 1188.25 L2155.33 1188.25 L2154.75 1188.25 L2154.16 1188.25 L2153.57 1188.25 L2152.99 1188.25 L2152.4 1188.25 L2151.81 1188.25 L2151.23 1188.25 L2150.64 1188.25 L2150.05 1188.25 L2149.47 1188.25 L2148.88 1188.25 L2148.3 1188.25 L2147.71 1188.25 L2147.12 1188.25 L2146.54 1188.25 L2145.95 1188.25 L2145.36 1188.25 L2144.78 1188.25 L2144.19 1188.25 L2143.6 1188.25 L2143.02 1188.25 L2142.43 1188.25 L2141.84 1188.25 L2141.26 1188.25 L2140.67 1188.25 L2140.09 1188.25 L2139.5 1188.25 L2138.91 1188.25 L2138.33 1188.25 L2137.74 1188.25 L2137.15 1188.25 L2136.57 1188.25 L2135.98 1188.25 L2135.39 1188.25 L2134.81 1188.25 L2134.22 1188.25 L2133.63 1188.25 L2133.05 1188.25 L2132.46 1188.25 L2131.88 1188.25 L2131.29 1188.25 L2130.7 1188.25 L2130.12 1188.25 L2129.53 1188.25 L2128.94 1188.25 L2128.36 1188.25 L2127.77 1188.25 L2127.18 1188.25 L2126.6 1188.25 L2126.01 1188.25 L2125.42 1188.25 L2124.84 1188.25 L2124.25 1188.25 L2123.67 1188.25 L2123.08 1188.25 L2122.49 1188.25 L2121.91 1188.25 L2121.32 1188.25 L2120.73 1188.25 L2120.15 1188.25 L2119.56 1188.25 L2118.97 1188.25 L2118.39 1188.25 L2117.8 1188.25 L2117.22 1188.25 L2116.63 1188.25 L2116.04 1188.25 L2115.46 1188.25 L2114.87 1188.25 L2114.28 1188.25 L2113.7 1188.25 L2113.11 1188.25 L2112.52 1188.25 L2111.94 1188.25 L2111.35 1188.25 L2110.76 1188.25 L2110.18 1188.25 L2109.59 1188.25 L2109.01 1188.25 L2108.42 1188.25 L2107.83 1188.25 L2107.25 1188.25 L2106.66 1188.25 L2106.07 1188.25 L2105.49 1188.25 L2104.9 1188.25 L2104.31 1188.25 L2103.73 1188.25 L2103.14 1188.25 L2102.55 1188.25 L2101.97 1188.25 L2101.38 1188.25 L2100.8 1188.25 L2100.21 1188.25 L2099.62 1188.25 L2099.04 1188.25 L2098.45 1188.25 L2097.86 1188.25 L2097.28 1188.25 L2096.69 1188.25 L2096.1 1188.25 L2095.52 1188.25 L2094.93 1188.25 L2094.35 1188.25 L2093.76 1188.25 L2093.17 1188.25 L2092.59 1188.25 L2092 1188.25 L2091.41 1188.25 L2090.83 1188.25 L2090.24 1188.25 L2089.65 1188.25 L2089.07 1188.25 L2088.48 1188.25 L2087.89 1188.25 L2087.31 1188.25 L2086.72 1188.25 L2086.14 1188.25 L2085.55 1188.25 L2084.96 1188.25 L2084.38 1188.25 L2083.79 1188.25 L2083.2 1188.25 L2082.62 1188.25 L2082.03 1188.25 L2081.44 1188.25 L2080.86 1188.25 L2080.27 1188.25 L2079.68 1188.25 L2079.1 1188.25 L2078.51 1188.25 L2077.93 1188.25 L2077.34 1188.25 L2076.75 1188.25 L2076.17 1188.25 L2075.58 1188.25 L2074.99 1188.25 L2074.41 1188.25 L2073.82 1188.25 L2073.23 1188.25 L2072.65 1188.25 L2072.06 1188.25 L2071.48 1188.25 L2070.89 1188.25 L2070.3 1188.25 L2069.72 1188.25 L2069.13 1188.25 L2068.54 1188.25 L2067.96 1188.25 L2067.37 1188.25 L2066.78 1188.25 L2066.2 1188.25 L2065.61 1188.25 L2065.02 1188.25 L2064.44 1188.25 L2063.85 1188.25 L2063.27 1188.25 L2062.68 1188.25 L2062.09 1188.25 L2061.51 1188.25 L2060.92 1188.25 L2060.33 1188.25 L2059.75 1188.25 L2059.16 1188.25 L2058.57 1188.25 L2057.99 1188.25 L2057.4 1188.25 L2056.81 1188.25 L2056.23 1188.25 L2055.64 1188.25 L2055.06 1188.25 L2054.47 1188.25 L2053.88 1188.25 L2053.3 1188.25 L2052.71 1188.25 L2052.12 1188.25 L2051.54 1188.25 L2050.95 1188.25 L2050.36 1188.25 L2049.78 1188.25 L2049.19 1188.25 L2048.6 1188.25 L2048.02 1188.25 L2047.43 1188.25 L2046.85 1188.25 L2046.26 1188.25 L2045.67 1188.25 L2045.09 1188.25 L2044.5 1188.25 L2043.91 1188.25 L2043.33 1188.25 L2042.74 1188.25 L2042.15 1188.25 L2041.57 1188.25 L2040.98 1188.25 L2040.4 1188.25 L2039.81 1188.25 L2039.22 1188.25 L2038.64 1188.25 L2038.05 1188.25 L2037.46 1188.25 L2036.88 1188.25 L2036.29 1188.25 L2035.7 1188.25 L2035.12 1188.25 L2034.53 1188.25 L2033.94 1188.25 L2033.36 1188.25 L2032.77 1188.25 L2032.19 1188.25 L2031.6 1188.25 L2031.01 1188.25 L2030.43 1188.25 L2029.84 1188.25 L2029.25 1188.25 L2028.67 1188.25 L2028.08 1188.25 L2027.49 1188.25 L2026.91 1188.25 L2026.32 1188.25 L2025.73 1188.25 L2025.15 1188.25 L2024.56 1188.25 L2023.98 1188.25 L2023.39 1188.25 L2022.8 1188.25 L2022.22 1188.25 L2021.63 1188.25 L2021.04 1188.25 L2020.46 1188.25 L2019.87 1188.25 L2019.28 1188.25 L2018.7 1188.25 L2018.11 1188.25 L2017.53 1188.25 L2016.94 1188.25 L2016.35 1188.25 L2015.77 1188.25 L2015.18 1188.25 L2014.59 1188.25 L2014.01 1188.25 L2013.42 1188.25 L2012.83 1188.25 L2012.25 1188.25 L2011.66 1188.25 L2011.07 1188.25 L2010.49 1188.25 L2009.9 1188.25 L2009.32 1188.25 L2008.73 1188.25 L2008.14 1188.25 L2007.56 1188.25 L2006.97 1188.25 L2006.38 1188.25 L2005.8 1188.25 L2005.21 1188.25 L2004.62 1188.25 L2004.04 1188.25 L2003.45 1188.25 L2002.86 1188.25 L2002.28 1188.25 L2001.69 1188.25 L2001.11 1188.25 L2000.52 1188.25 L1999.93 1188.25 L1999.35 1188.25 L1998.76 1188.25 L1998.17 1188.25 L1997.59 1188.25 L1997 1188.25 L1996.41 1188.25 L1995.83 1188.25 L1995.24 1188.25 L1994.65 1188.25 L1994.07 1188.25 L1993.48 1188.25 L1992.9 1188.25 L1992.31 1188.25 L1991.72 1188.25 L1991.14 1188.25 L1990.55 1188.25 L1989.96 1188.25 L1989.38 1188.25 L1988.79 1188.25 L1988.2 1188.25 L1987.62 1188.25 L1987.03 1188.25 L1986.45 1188.25 L1985.86 1188.25 L1985.27 1188.25 L1984.69 1188.25 L1984.1 1188.25 L1983.51 1188.25 L1982.93 1188.25 L1982.34 1188.25 L1981.75 1188.25 L1981.17 1188.25 L1980.58 1188.25 L1979.99 1188.25 L1979.41 1188.25 L1978.82 1188.25 L1978.24 1188.25 L1977.65 1188.25 L1977.06 1188.25 L1976.48 1188.25 L1975.89 1188.25 L1975.3 1188.25 L1974.72 1188.25 L1974.13 1188.25 L1973.54 1188.25 L1972.96 1188.25 L1972.37 1188.25 L1971.78 1188.25 L1971.2 1188.25 L1970.61 1188.25 L1970.03 1188.25 L1969.44 1188.25 L1968.85 1188.25 L1968.27 1188.25 L1967.68 1188.25 L1967.09 1188.25 L1966.51 1188.25 L1965.92 1188.25 L1965.33 1188.25 L1964.75 1188.25 L1964.16 1188.25 L1963.58 1188.25 L1962.99 1188.25 L1962.4 1188.25 L1961.82 1188.25 L1961.23 1188.25 L1960.64 1188.25 L1960.06 1188.25 L1959.47 1188.25 L1958.88 1188.25 L1958.3 1188.25 L1957.71 1188.25 L1957.12 1188.25 L1956.54 1188.25 L1955.95 1188.25 L1955.37 1188.25 L1954.78 1188.25 L1954.19 1188.25 L1953.61 1188.25 L1953.02 1188.25 L1952.43 1188.25 L1951.85 1188.25 L1951.26 1188.25 L1950.67 1188.25 L1950.09 1188.25 L1949.5 1188.25 L1948.91 1188.25 L1948.33 1188.25 L1947.74 1188.25 L1947.16 1188.25 L1946.57 1188.25 L1945.98 1188.25 L1945.4 1188.25 L1944.81 1188.25 L1944.22 1188.25 L1943.64 1188.25 L1943.05 1188.25 L1942.46 1188.25 L1941.88 1188.25 L1941.29 1188.25 L1940.71 1188.25 L1940.12 1188.25 L1939.53 1188.25 L1938.95 1188.25 L1938.36 1188.25 L1937.77 1188.25 L1937.19 1188.25 L1936.6 1188.25 L1936.01 1188.25 L1935.43 1188.25 L1934.84 1188.25 L1934.25 1188.25 L1933.67 1188.25 L1933.08 1188.25 L1932.5 1188.25 L1931.91 1188.25 L1931.32 1188.25 L1930.74 1188.25 L1930.15 1188.25 L1929.56 1188.25 L1928.98 1188.25 L1928.39 1188.25 L1927.8 1188.25 L1927.22 1188.25 L1926.63 1188.25 L1926.04 1188.25 L1925.46 1188.25 L1924.87 1188.25 L1924.29 1188.25 L1923.7 1188.25 L1923.11 1188.25 L1922.53 1188.25 L1921.94 1188.25 L1921.35 1188.25 L1920.77 1188.25 L1920.18 1188.25 L1919.59 1188.25 L1919.01 1188.25 L1918.42 1188.25 L1917.83 1188.25 L1917.25 1188.25 L1916.66 1188.25 L1916.08 1188.25 L1915.49 1188.25 L1914.9 1188.25 L1914.32 1188.25 L1913.73 1188.25 L1913.14 1188.25 L1912.56 1188.25 L1911.97 1188.25 L1911.38 1188.25 L1910.8 1188.25 L1910.21 1188.25 L1909.63 1188.25 L1909.04 1188.25 L1908.45 1188.25 L1907.87 1188.25 L1907.28 1188.25 L1906.69 1188.25 L1906.11 1188.25 L1905.52 1188.25 L1904.93 1188.25 L1904.35 1188.25 L1903.76 1188.25 L1903.17 1188.25 L1902.59 1188.25 L1902 1188.25 L1901.42 1188.25 L1900.83 1188.25 L1900.24 1188.25 L1899.66 1188.25 L1899.07 1188.25 L1898.48 1188.25 L1897.9 1188.25 L1897.31 1188.25 L1896.72 1188.25 L1896.14 1188.25 L1895.55 1188.25 L1894.96 1188.25 L1894.38 1188.25 L1893.79 1188.25 L1893.21 1188.25 L1892.62 1188.25 L1892.03 1188.25 L1891.45 1188.25 L1890.86 1188.25 L1890.27 1188.25 L1889.69 1188.25 L1889.1 1188.25 L1888.51 1188.25 L1887.93 1188.25 L1887.34 1188.25 L1886.76 1188.25 L1886.17 1188.25 L1885.58 1188.25 L1885 1188.25 L1884.41 1188.25 L1883.82 1188.25 L1883.24 1188.25 L1882.65 1188.25 L1882.06 1188.25 L1881.48 1188.25 L1880.89 1188.25 L1880.3 1188.25 L1879.72 1188.25 L1879.13 1188.25 L1878.55 1188.25 L1877.96 1188.25 L1877.37 1188.25 L1876.79 1188.25 L1876.2 1188.25 L1875.61 1188.25 L1875.03 1188.25 L1874.44 1188.25 L1873.85 1188.25 L1873.27 1188.25 L1872.68 1188.25 L1872.09 1188.25 L1871.51 1188.25 L1870.92 1188.25 L1870.34 1188.25 L1869.75 1188.25 L1869.16 1188.25 L1868.58 1188.25 L1867.99 1188.25 L1867.4 1188.25 L1866.82 1188.25 L1866.23 1188.25 L1865.64 1188.25 L1865.06 1188.25 L1864.47 1188.25 L1863.88 1188.25 L1863.3 1188.25 L1862.71 1188.25 L1862.13 1188.25 L1861.54 1188.25 L1860.95 1188.25 L1860.37 1188.25 L1859.78 1188.25 L1859.19 1188.25 L1858.61 1188.25 L1858.02 1188.25 L1857.43 1188.25 L1856.85 1188.25 L1856.26 1188.25 L1855.68 1188.25 L1855.09 1188.25 L1854.5 1188.25 L1853.92 1188.25 L1853.33 1188.25 L1852.74 1188.25 L1852.16 1188.25 L1851.57 1188.25 L1850.98 1188.25 L1850.4 1188.25 L1849.81 1188.25 L1849.22 1188.25 L1848.64 1188.25 L1848.05 1188.25 L1847.47 1188.25 L1846.88 1188.25 L1846.29 1188.25 L1845.71 1188.25 L1845.12 1188.25 L1844.53 1188.25 L1843.95 1188.25 L1843.36 1188.25 L1842.77 1188.25 L1842.19 1188.25 L1841.6 1188.25 L1841.01 1188.25 L1840.43 1188.25 L1839.84 1188.25 L1839.26 1188.25 L1838.67 1188.25 L1838.08 1188.25 L1837.5 1188.25 L1836.91 1188.25 L1836.32 1188.25 L1835.74 1188.25 L1835.15 1188.25 L1834.56 1188.25 L1833.98 1188.25 L1833.39 1188.25 L1832.81 1188.25 L1832.22 1188.25 L1831.63 1188.25 L1831.05 1188.25 L1830.46 1188.25 L1829.87 1188.25 L1829.29 1188.25 L1828.7 1188.25 L1828.11 1188.25 L1827.53 1188.25 L1826.94 1188.25 L1826.35 1188.25 L1825.77 1188.25 L1825.18 1188.25 L1824.6 1188.25 L1824.01 1188.25 L1823.42 1188.25 L1822.84 1188.25 L1822.25 1188.25 L1821.66 1188.25 L1821.08 1188.25 L1820.49 1188.25 L1819.9 1188.25 L1819.32 1188.25 L1818.73 1188.25 L1818.14 1188.25 L1817.56 1188.25 L1816.97 1188.25 L1816.39 1188.25 L1815.8 1188.25 L1815.21 1188.25 L1814.63 1188.25 L1814.04 1188.25 L1813.45 1188.25 L1812.87 1188.25 L1812.28 1188.25 L1811.69 1188.25 L1811.11 1188.25 L1810.52 1188.25 L1809.94 1188.25 L1809.35 1188.25 L1808.76 1188.25 L1808.18 1188.25 L1807.59 1188.25 L1807 1188.25 L1806.42 1188.25 L1805.83 1188.25 L1805.24 1188.25 L1804.66 1188.25 L1804.07 1188.25 L1803.48 1188.25 L1802.9 1188.25 L1802.31 1188.25 L1801.73 1188.25 L1801.14 1188.25 L1800.55 1188.25 L1799.97 1188.25 L1799.38 1188.25 L1798.79 1188.25 L1798.21 1188.25 L1797.62 1188.25 L1797.03 1188.25 L1796.45 1188.25 L1795.86 1188.25 L1795.27 1188.25 L1794.69 1188.25 L1794.1 1188.25 L1793.52 1188.25 L1792.93 1188.25 L1792.34 1188.25 L1791.76 1188.25 L1791.17 1188.25 L1790.58 1188.25 L1790 1188.25 L1789.41 1188.25 L1788.82 1188.25 L1788.24 1188.25 L1787.65 1188.25 L1787.06 1188.25 L1786.48 1188.25 L1785.89 1188.25 L1785.31 1188.25 L1784.72 1188.25 L1784.13 1188.25 L1783.55 1188.25 L1782.96 1188.25 L1782.37 1188.25 L1781.79 1188.25 L1781.2 1188.25 L1780.61 1188.25 L1780.03 1188.25 L1779.44 1188.25 L1778.86 1188.25 L1778.27 1188.25 L1777.68 1188.25 L1777.1 1188.25 L1776.51 1188.25 L1775.92 1188.25 L1775.34 1188.25 L1774.75 1188.25 L1774.16 1188.25 L1773.58 1188.25 L1772.99 1188.25 L1772.4 1188.25 L1771.82 1188.25 L1771.23 1188.25 L1770.65 1188.25 L1770.06 1188.25 L1769.47 1188.25 L1768.89 1188.25 L1768.3 1188.25 L1767.71 1188.25 L1767.13 1188.25 L1766.54 1188.25 L1765.95 1188.25 L1765.37 1188.25 L1764.78 1188.25 L1764.19 1188.25 L1763.61 1188.25 L1763.02 1188.25 L1762.44 1188.25 L1761.85 1188.25 L1761.26 1188.25 L1760.68 1188.25 L1760.09 1188.25 L1759.5 1188.25 L1758.92 1188.25 L1758.33 1188.25 L1757.74 1188.25 L1757.16 1188.25 L1756.57 1188.25 L1755.99 1188.25 L1755.4 1188.25 L1754.81 1188.25 L1754.23 1188.25 L1753.64 1188.25 L1753.05 1188.25 L1752.47 1188.25 L1751.88 1188.25 L1751.29 1188.25 L1750.71 1188.25 L1750.12 1188.25 L1749.53 1188.25 L1748.95 1188.25 L1748.36 1188.25 L1747.78 1188.25 L1747.19 1188.25 L1746.6 1188.25 L1746.02 1188.25 L1745.43 1188.25 L1744.84 1188.25 L1744.26 1188.25 L1743.67 1188.25 L1743.08 1188.25 L1742.5 1188.25 L1741.91 1188.25 L1741.32 1188.25 L1740.74 1188.25 L1740.15 1188.25 L1739.57 1188.25 L1738.98 1188.25 L1738.39 1188.25 L1737.81 1188.25 L1737.22 1188.25 L1736.63 1188.25 L1736.05 1188.25 L1735.46 1188.25 L1734.87 1188.25 L1734.29 1188.25 L1733.7 1188.25 L1733.11 1188.25 L1732.53 1188.25 L1731.94 1188.25 L1731.36 1188.25 L1730.77 1188.25 L1730.18 1188.25 L1729.6 1188.25 L1729.01 1188.25 L1728.42 1188.25 L1727.84 1188.25 L1727.25 1188.25 L1726.66 1188.25 L1726.08 1188.25 L1725.49 1188.25 L1724.91 1188.25 L1724.32 1188.25 L1723.73 1188.25 L1723.15 1188.25 L1722.56 1188.25 L1721.97 1188.25 L1721.39 1188.25 L1720.8 1188.25 L1720.21 1188.25 L1719.63 1188.25 L1719.04 1188.25 L1718.45 1188.25 L1717.87 1188.25 L1717.28 1188.25 L1716.7 1188.25 L1716.11 1188.25 L1715.52 1188.25 L1714.94 1188.25 L1714.35 1188.25 L1713.76 1188.25 L1713.18 1188.25 L1712.59 1188.25 L1712 1188.25 L1711.42 1188.25 L1710.83 1188.25 L1710.24 1188.25 L1709.66 1188.25 L1709.07 1188.25 L1708.49 1188.25 L1707.9 1188.25 L1707.31 1188.25 L1706.73 1188.25 L1706.14 1188.25 L1705.55 1188.25 L1704.97 1188.25 L1704.38 1188.25 L1703.79 1188.25 L1703.21 1188.25 L1702.62 1188.25 L1702.04 1188.25 L1701.45 1188.25 L1700.86 1188.25 L1700.28 1188.25 L1699.69 1188.25 L1699.1 1188.25 L1698.52 1188.25 L1697.93 1188.25 L1697.34 1188.25 L1696.76 1188.25 L1696.17 1188.25 L1695.58 1188.25 L1695 1188.25 L1694.41 1188.25 L1693.83 1188.25 L1693.24 1188.25 L1692.65 1188.25 L1692.07 1188.25 L1691.48 1188.25 L1690.89 1188.25 L1690.31 1188.25 L1689.72 1188.25 L1689.13 1188.25 L1688.55 1188.25 L1687.96 1188.25 L1687.37 1188.25 L1686.79 1188.25 L1686.2 1188.25 L1685.62 1188.25 L1685.03 1188.25 L1684.44 1188.25 L1683.86 1188.25 L1683.27 1188.25 L1682.68 1188.25 L1682.1 1188.25 L1681.51 1188.25 L1680.92 1188.25 L1680.34 1188.25 L1679.75 1188.25 L1679.17 1188.25 L1678.58 1188.25 L1677.99 1188.25 L1677.41 1188.25 L1676.82 1188.25 L1676.23 1188.25 L1675.65 1188.25 L1675.06 1188.25 L1674.47 1188.25 L1673.89 1188.25 L1673.3 1188.25 L1672.71 1188.25 L1672.13 1188.25 L1671.54 1188.25 L1670.96 1188.25 L1670.37 1188.25 L1669.78 1188.25 L1669.2 1188.25 L1668.61 1188.25 L1668.02 1188.25 L1667.44 1188.25 L1666.85 1188.25 L1666.26 1188.25 L1665.68 1188.25 L1665.09 1188.25 L1664.5 1188.25 L1663.92 1188.25 L1663.33 1188.25 L1662.75 1188.25 L1662.16 1188.25 L1661.57 1188.25 L1660.99 1188.25 L1660.4 1188.25 L1659.81 1188.25 L1659.23 1188.25 L1658.64 1188.25 L1658.05 1188.25 L1657.47 1188.25 L1656.88 1188.25 L1656.29 1188.25 L1655.71 1188.25 L1655.12 1188.25 L1654.54 1188.25 L1653.95 1188.25 L1653.36 1188.25 L1652.78 1188.25 L1652.19 1188.25 L1651.6 1188.25 L1651.02 1188.25 L1650.43 1188.25 L1649.84 1188.25 L1649.26 1188.25 L1648.67 1188.25 L1648.09 1188.25 L1647.5 1188.25 L1646.91 1188.25 L1646.33 1188.25 L1645.74 1188.25 L1645.15 1188.25 L1644.57 1188.25 L1643.98 1188.25 L1643.39 1188.25 L1642.81 1188.25 L1642.22 1188.25 L1641.63 1188.25 L1641.05 1188.25 L1640.46 1188.25 L1639.88 1188.25 L1639.29 1188.25 L1638.7 1188.25 L1638.12 1188.25 L1637.53 1188.25 L1636.94 1188.25 L1636.36 1188.25 L1635.77 1188.25 L1635.18 1188.25 L1634.6 1188.25 L1634.01 1188.25 L1633.42 1188.25 L1632.84 1188.25 L1632.25 1188.25 L1631.67 1188.25 L1631.08 1188.25 L1630.49 1188.25 L1629.91 1188.25 L1629.32 1188.25 L1628.73 1188.25 L1628.15 1188.25 L1627.56 1188.25 L1626.97 1188.25 L1626.39 1188.25 L1625.8 1188.25 L1625.22 1188.25 L1624.63 1188.25 L1624.04 1188.25 L1623.46 1188.25 L1622.87 1188.25 L1622.28 1188.25 L1621.7 1188.25 L1621.11 1188.25 L1620.52 1188.25 L1619.94 1188.25 L1619.35 1188.25 L1618.76 1188.25 L1618.18 1188.25 L1617.59 1188.25 L1617.01 1188.25 L1616.42 1188.25 L1615.83 1188.25 L1615.25 1188.25 L1614.66 1188.25 L1614.07 1188.25 L1613.49 1188.25 L1612.9 1188.25 L1612.31 1188.25 L1611.73 1188.25 L1611.14 1188.25 L1610.55 1188.25 L1609.97 1188.25 L1609.38 1188.25 L1608.8 1188.25 L1608.21 1188.25 L1607.62 1188.25 L1607.04 1188.25 L1606.45 1188.25 L1605.86 1188.25 L1605.28 1188.25 L1604.69 1188.25 L1604.1 1188.25 L1603.52 1188.25 L1602.93 1188.25 L1602.34 1188.25 L1601.76 1188.25 L1601.17 1188.25 L1600.59 1188.25 L1600 1188.25 L1599.41 1188.25 L1598.83 1188.25 L1598.24 1188.25 L1597.65 1188.25 L1597.07 1188.25 L1596.48 1188.25 L1595.89 1188.25 L1595.31 1188.25 L1594.72 1188.25 L1594.14 1188.25 L1593.55 1188.25 L1592.96 1188.25 L1592.38 1188.25 L1591.79 1188.25 L1591.2 1188.25 L1590.62 1188.25 L1590.03 1188.25 L1589.44 1188.25 L1588.86 1188.25 L1588.27 1188.25 L1587.68 1188.25 L1587.1 1188.25 L1586.51 1188.25 L1585.93 1188.25 L1585.34 1188.25 L1584.75 1188.25 L1584.17 1188.25 L1583.58 1188.25 L1582.99 1188.25 L1582.41 1188.25 L1581.82 1188.25 L1581.23 1188.25 L1580.65 1188.25 L1580.06 1188.25 L1579.47 1188.25 L1578.89 1188.25 L1578.3 1188.25 L1577.72 1188.25 L1577.13 1188.25 L1576.54 1188.25 L1575.96 1188.25 L1575.37 1188.25 L1574.78 1188.25 L1574.2 1188.25 L1573.61 1188.25 L1573.02 1188.25 L1572.44 1188.25 L1571.85 1188.25 L1571.27 1188.25 L1570.68 1188.25 L1570.09 1188.25 L1569.51 1188.25 L1568.92 1188.25 L1568.33 1188.25 L1567.75 1188.25 L1567.16 1188.25 L1566.57 1188.25 L1565.99 1188.25 L1565.4 1188.25 L1564.81 1188.25 L1564.23 1188.25 L1563.64 1188.25 L1563.06 1188.25 L1562.47 1188.25 L1561.88 1188.25 L1561.3 1188.25 L1560.71 1188.25 L1560.12 1188.25 L1559.54 1188.25 L1558.95 1188.25 L1558.36 1188.25 L1557.78 1188.25 L1557.19 1188.25 L1556.6 1188.25 L1556.02 1188.25 L1555.43 1188.25 L1554.85 1188.25 L1554.26 1188.25 L1553.67 1188.25 L1553.09 1188.25 L1552.5 1188.25 L1551.91 1188.25 L1551.33 1188.25 L1550.74 1188.25 L1550.15 1188.25 L1549.57 1188.25 L1548.98 1188.25 L1548.4 1188.25 L1547.81 1188.25 L1547.22 1188.25 L1546.64 1188.25 L1546.05 1188.25 L1545.46 1188.25 L1544.88 1188.25 L1544.29 1188.25 L1543.7 1188.25 L1543.12 1188.25 L1542.53 1188.25 L1541.94 1188.25 L1541.36 1188.25 L1540.77 1188.25 L1540.19 1188.25 L1539.6 1188.25 L1539.01 1188.25 L1538.43 1188.25 L1537.84 1188.25 L1537.25 1188.25 L1536.67 1188.25 L1536.08 1188.25 L1535.49 1188.25 L1534.91 1188.25 L1534.32 1188.25 L1533.73 1188.25 L1533.15 1188.25 L1532.56 1188.25 L1531.98 1188.25 L1531.39 1188.25 L1530.8 1188.25 L1530.22 1188.25 L1529.63 1188.25 L1529.04 1188.25 L1528.46 1188.25 L1527.87 1188.25 L1527.28 1188.25 L1526.7 1188.25 L1526.11 1188.25 L1525.52 1188.25 L1524.94 1188.25 L1524.35 1188.25 L1523.77 1188.25 L1523.18 1188.25 L1522.59 1188.25 L1522.01 1188.25 L1521.42 1188.25 L1520.83 1188.25 L1520.25 1188.25 L1519.66 1188.25 L1519.07 1188.25 L1518.49 1188.25 L1517.9 1188.25 L1517.32 1188.25 L1516.73 1188.25 L1516.14 1188.25 L1515.56 1188.25 L1514.97 1188.25 L1514.38 1188.25 L1513.8 1188.25 L1513.21 1188.25 L1512.62 1188.25 L1512.04 1188.25 L1511.45 1188.25 L1510.86 1188.25 L1510.28 1188.25 L1509.69 1188.25 L1509.11 1188.25 L1508.52 1188.25 L1507.93 1188.25 L1507.35 1188.25 L1506.76 1188.25 L1506.17 1188.25 L1505.59 1188.25 L1505 1188.25 L1504.41 1188.25 L1503.83 1188.25 L1503.24 1188.25 L1502.65 1188.25 L1502.07 1188.25 L1501.48 1188.25 L1500.9 1188.25 L1500.31 1188.25 L1499.72 1188.25 L1499.14 1188.25 L1498.55 1188.25 L1497.96 1188.25 L1497.38 1188.25 L1496.79 1188.25 L1496.2 1188.25 L1495.62 1188.25 L1495.03 1188.25 L1494.45 1188.25 L1493.86 1188.25 L1493.27 1188.25 L1492.69 1188.25 L1492.1 1188.25 L1491.51 1188.25 L1490.93 1188.25 L1490.34 1188.25 L1489.75 1188.25 L1489.17 1188.25 L1488.58 1188.25 L1487.99 1188.25 L1487.41 1188.25 L1486.82 1188.25 L1486.24 1188.25 L1485.65 1188.25 L1485.06 1188.25 L1484.48 1188.25 L1483.89 1188.25 L1483.3 1188.25 L1482.72 1188.25 L1482.13 1188.25 L1481.54 1188.25 L1480.96 1188.25 L1480.37 1188.25 L1479.78 1188.25 L1479.2 1188.25 L1478.61 1188.25 L1478.03 1188.25 L1477.44 1188.25 L1476.85 1188.25 L1476.27 1188.25 L1475.68 1188.25 L1475.09 1188.25 L1474.51 1188.25 L1473.92 1188.25 L1473.33 1188.25 L1472.75 1188.25 L1472.16 1188.25 L1471.57 1188.25 L1470.99 1188.25 L1470.4 1188.25 L1469.82 1188.25 L1469.23 1188.25 L1468.64 1188.25 L1468.06 1188.25 L1467.47 1188.25 L1466.88 1188.25 L1466.3 1188.25 L1465.71 1188.25 L1465.12 1188.25 L1464.54 1188.25 L1463.95 1188.25 L1463.37 1188.25 L1462.78 1188.25 L1462.19 1188.25 L1461.61 1188.25 L1461.02 1188.25 L1460.43 1188.25 L1459.85 1188.25 L1459.26 1188.25 L1458.67 1188.25 L1458.09 1188.25 L1457.5 1188.25 L1456.91 1188.25 L1456.33 1188.25 L1455.74 1188.25 L1455.16 1188.25 L1454.57 1188.25 L1453.98 1188.25 L1453.4 1188.25 L1452.81 1188.25 L1452.22 1188.25 L1451.64 1188.25 L1451.05 1188.25 L1450.46 1188.25 L1449.88 1188.25 L1449.29 1188.25 L1448.7 1188.25 L1448.12 1188.25 L1447.53 1188.25 L1446.95 1188.25 L1446.36 1188.25 L1445.77 1188.25 L1445.19 1188.25 L1444.6 1188.25 L1444.01 1188.25 L1443.43 1188.25 L1442.84 1188.25 L1442.25 1188.25 L1441.67 1188.25 L1441.08 1188.25 L1440.5 1188.25 L1439.91 1188.25 L1439.32 1188.25 L1438.74 1188.25 L1438.15 1188.25 L1437.56 1188.25 L1436.98 1188.25 L1436.39 1188.25 L1435.8 1188.25 L1435.22 1188.25 L1434.63 1188.25 L1434.04 1188.25 L1433.46 1188.25 L1432.87 1188.25 L1432.29 1188.25 L1431.7 1188.25 L1431.11 1188.25 L1430.53 1188.25 L1429.94 1188.25 L1429.35 1188.25 L1428.77 1188.25 L1428.18 1188.25 L1427.59 1188.25 L1427.01 1188.25 L1426.42 1188.25 L1425.83 1188.25 L1425.25 1188.25 L1424.66 1188.25 L1424.08 1188.25 L1423.49 1188.25 L1422.9 1188.25 L1422.32 1188.25 L1421.73 1188.25 L1421.14 1188.25 L1420.56 1188.25 L1419.97 1188.25 L1419.38 1188.25 L1418.8 1188.25 L1418.21 1188.25 L1417.63 1188.25 L1417.04 1188.25 L1416.45 1188.25 L1415.87 1188.25 L1415.28 1188.25 L1414.69 1188.25 L1414.11 1188.25 L1413.52 1188.25 L1412.93 1188.25 L1412.35 1188.25 L1411.76 1188.25 L1411.17 1188.25 L1410.59 1188.25 L1410 1188.25 L1409.42 1188.25 L1408.83 1188.25 L1408.24 1188.25 L1407.66 1188.25 L1407.07 1188.25 L1406.48 1188.25 L1405.9 1188.25 L1405.31 1188.25 L1404.72 1188.25 L1404.14 1188.25 L1403.55 1188.25 L1402.96 1188.25 L1402.38 1188.25 L1401.79 1188.25 L1401.21 1188.25 L1400.62 1188.25 L1400.03 1188.25 L1399.45 1188.25 L1398.86 1188.25 L1398.27 1188.25 L1397.69 1188.25 L1397.1 1188.25 L1396.51 1188.25 L1395.93 1188.25 L1395.34 1188.25 L1394.75 1188.25 L1394.17 1188.25 L1393.58 1188.25 L1393 1188.25 L1392.41 1188.25 L1391.82 1188.25 L1391.24 1188.25 L1390.65 1188.25 L1390.06 1188.25 L1389.48 1188.25 L1388.89 1188.25 L1388.3 1188.25 L1387.72 1188.25 L1387.13 1188.25 L1386.55 1188.25 L1385.96 1188.25 L1385.37 1188.25 L1384.79 1188.25 L1384.2 1188.25 L1383.61 1188.25 L1383.03 1188.25 L1382.44 1188.25 L1381.85 1188.25 L1381.27 1188.25 L1380.68 1188.25 L1380.09 1188.25 L1379.51 1188.25 L1378.92 1188.25 L1378.34 1188.25 L1377.75 1188.25 L1377.16 1188.25 L1376.58 1188.25 L1375.99 1188.25 L1375.4 1188.25 L1374.82 1188.25 L1374.23 1188.25 L1373.64 1188.25 L1373.06 1188.25 L1372.47 1188.25 L1371.88 1188.25 L1371.3 1188.25 L1370.71 1188.25 L1370.13 1188.25 L1369.54 1188.25 L1368.95 1188.25 L1368.37 1188.25 L1367.78 1188.25 L1367.19 1188.25 L1366.61 1188.25 L1366.02 1188.25 L1365.43 1188.25 L1364.85 1188.25 L1364.26 1188.25 L1363.68 1188.25 L1363.09 1188.25 L1362.5 1188.25 L1361.92 1188.25 L1361.33 1188.25 L1360.74 1188.25 L1360.16 1188.25 L1359.57 1188.25 L1358.98 1188.25 L1358.4 1188.25 L1357.81 1188.25 L1357.22 1188.25 L1356.64 1188.25 L1356.05 1188.25 L1355.47 1188.25 L1354.88 1188.25 L1354.29 1188.25 L1353.71 1188.25 L1353.12 1188.25 L1352.53 1188.25 L1351.95 1188.25 L1351.36 1188.25 L1350.77 1188.25 L1350.19 1188.25 L1349.6 1188.25 L1349.01 1188.25 L1348.43 1188.25 L1347.84 1188.25 L1347.26 1188.25 L1346.67 1188.25 L1346.08 1188.25 L1345.5 1188.25 L1344.91 1188.25 L1344.32 1188.25 L1343.74 1188.25 L1343.15 1188.25 L1342.56 1188.25 L1341.98 1188.25 L1341.39 1188.25 L1340.8 1188.25 L1340.22 1188.25 L1339.63 1188.25 L1339.05 1188.25 L1338.46 1188.25 L1337.87 1188.25 L1337.29 1188.25 L1336.7 1188.25 L1336.11 1188.25 L1335.53 1188.25 L1334.94 1188.25 L1334.35 1188.25 L1333.77 1188.25 L1333.18 1188.25 L1332.6 1188.25 L1332.01 1188.25 L1331.42 1188.25 L1330.84 1188.25 L1330.25 1188.25 L1329.66 1188.25 L1329.08 1188.25 L1328.49 1188.25 L1327.9 1188.25 L1327.32 1188.25 L1326.73 1188.25 L1326.14 1188.25 L1325.56 1188.25 L1324.97 1188.25 L1324.39 1188.25 L1323.8 1188.25 L1323.21 1188.25 L1322.63 1188.25 L1322.04 1188.25 L1321.45 1188.25 L1320.87 1188.25 L1320.28 1188.25 L1319.69 1188.25 L1319.11 1188.25 L1318.52 1188.25 L1317.93 1188.25 L1317.35 1188.25 L1316.76 1188.25 L1316.18 1188.25 L1315.59 1188.25 L1315 1188.25 L1314.42 1188.25 L1313.83 1188.25 L1313.24 1188.25 L1312.66 1188.25 L1312.07 1188.25 L1311.48 1188.25 L1310.9 1188.25 L1310.31 1188.25 L1309.73 1188.25 L1309.14 1188.25 L1308.55 1188.25 L1307.97 1188.25 L1307.38 1188.25 L1306.79 1188.25 L1306.21 1188.25 L1305.62 1188.25 L1305.03 1188.25 L1304.45 1188.25 L1303.86 1188.25 L1303.27 1188.25 L1302.69 1188.25 L1302.1 1188.25 L1301.52 1188.25 L1300.93 1188.25 L1300.34 1188.25 L1299.76 1188.25 L1299.17 1188.25 L1298.58 1188.25 L1298 1188.25 L1297.41 1188.25 L1296.82 1188.25 L1296.24 1188.25 L1295.65 1188.25 L1295.06 1188.25 L1294.48 1188.25 L1293.89 1188.25 L1293.31 1188.25 L1292.72 1188.25 L1292.13 1188.25 L1291.55 1188.25 L1290.96 1188.25 L1290.37 1188.25 L1289.79 1188.25 L1289.2 1188.25 L1288.61 1188.25 L1288.03 1188.25 L1287.44 1188.25 L1286.86 1188.25 L1286.27 1188.25 L1285.68 1188.25 L1285.1 1188.25 L1284.51 1188.25 L1283.92 1188.25 L1283.34 1188.25 L1282.75 1188.25 L1282.16 1188.25 L1281.58 1188.25 L1280.99 1188.25 L1280.4 1188.25 L1279.82 1188.25 L1279.23 1188.25 L1278.65 1188.25 L1278.06 1188.25 L1277.47 1188.25 L1276.89 1188.25 L1276.3 1188.25 L1275.71 1188.25 L1275.13 1188.25 L1274.54 1188.25 L1273.95 1188.25 L1273.37 1188.25 L1272.78 1188.25 L1272.19 1188.25 L1271.61 1188.25 L1271.02 1188.25 L1270.44 1188.25 L1269.85 1188.25 L1269.26 1188.25 L1268.68 1188.25 L1268.09 1188.25 L1267.5 1188.25 L1266.92 1188.25 L1266.33 1188.25 L1265.74 1188.25 L1265.16 1188.25 L1264.57 1188.25 L1263.98 1188.25 L1263.4 1188.25 L1262.81 1188.25 L1262.23 1188.25 L1261.64 1188.25 L1261.05 1188.25 L1260.47 1188.25 L1259.88 1188.25 L1259.29 1188.25 L1258.71 1188.25 L1258.12 1188.25 L1257.53 1188.25 L1256.95 1188.25 L1256.36 1188.25 L1255.78 1188.25 L1255.19 1188.25 L1254.6 1188.25 L1254.02 1188.25 L1253.43 1188.25 L1252.84 1188.25 L1252.26 1188.25 L1251.67 1188.25 L1251.08 1188.25 L1250.5 1188.25 L1249.91 1188.25 L1249.32 1188.25 L1248.74 1188.25 L1248.15 1188.25 L1247.57 1188.25 L1246.98 1188.25 L1246.39 1188.25 L1245.81 1188.25 L1245.22 1188.25 L1244.63 1188.25 L1244.05 1188.25 L1243.46 1188.25 L1242.87 1188.25 L1242.29 1188.25 L1241.7 1188.25 L1241.11 1188.25 L1240.53 1188.25 L1239.94 1188.25 L1239.36 1188.25 L1238.77 1188.25 L1238.18 1188.25 L1237.6 1188.25 L1237.01 1188.25 L1236.42 1188.25 L1235.84 1188.25 L1235.25 1188.25 L1234.66 1188.25 L1234.08 1188.25 L1233.49 1188.25 L1232.91 1188.25 L1232.32 1188.25 L1231.73 1188.25 L1231.15 1188.25 L1230.56 1188.25 L1229.97 1188.25 L1229.39 1188.25 L1228.8 1188.25 L1228.21 1188.25 L1227.63 1188.25 L1227.04 1188.25 L1226.45 1188.25 L1225.87 1188.25 L1225.28 1188.25 L1224.7 1188.25 L1224.11 1188.25 L1223.52 1188.25 L1222.94 1188.25 L1222.35 1188.25 L1221.76 1188.25 L1221.18 1188.25 L1220.59 1188.25 L1220 1188.25 L1219.42 1188.25 L1218.83 1188.25 L1218.24 1188.25 L1217.66 1188.25 L1217.07 1188.25 L1216.49 1188.25 L1215.9 1188.25 L1215.31 1188.25 L1214.73 1188.25 L1214.14 1188.25 L1213.55 1188.25 L1212.97 1188.25 L1212.38 1188.25 L1211.79 1188.25 L1211.21 1188.25 L1210.62 1188.25 L1210.03 1188.25 L1209.45 1188.25 L1208.86 1188.25 L1208.28 1188.25 L1207.69 1188.25 L1207.1 1188.25 L1206.52 1188.25 L1205.93 1188.25 L1205.34 1188.25 L1204.76 1188.25 L1204.17 1188.25 L1203.58 1188.25 L1203 1188.25 L1202.41 1188.25 L1201.83 1188.25 L1201.24 1188.25 L1200.65 1188.25 L1200.07 1188.25 L1199.48 1188.25 L1198.89 1188.25 L1198.31 1188.25 L1197.72 1188.25 L1197.13 1188.25 L1196.55 1188.25 L1195.96 1188.25 L1195.37 1188.25 L1194.79 1188.25 L1194.2 1188.25 L1193.62 1188.25 L1193.03 1188.25 L1192.44 1188.25 L1191.86 1188.25 L1191.27 1188.25 L1190.68 1188.25 L1190.1 1188.25 L1189.51 1188.25 L1188.92 1188.25 L1188.34 1188.25 L1187.75 1188.25 L1187.16 1188.25 L1186.58 1188.25 L1185.99 1188.25 L1185.41 1188.25 L1184.82 1188.25 L1184.23 1188.25 L1183.65 1188.25 L1183.06 1188.25 L1182.47 1188.25 L1181.89 1188.25 L1181.3 1188.25 L1180.71 1188.25 L1180.13 1188.25 L1179.54 1188.25 L1178.96 1188.25 L1178.37 1188.25 L1177.78 1188.25 L1177.2 1188.25 L1176.61 1188.25 L1176.02 1188.25 L1175.44 1188.25 L1174.85 1188.25 L1174.26 1188.25 L1173.68 1188.25 L1173.09 1188.25 L1172.5 1188.25 L1171.92 1188.25 L1171.33 1188.25 L1170.75 1188.25 L1170.16 1188.25 L1169.57 1188.25 L1168.99 1188.25 L1168.4 1188.25 L1167.81 1188.25 L1167.23 1188.25 L1166.64 1188.25 L1166.05 1188.25 L1165.47 1188.25 L1164.88 1188.25 L1164.29 1188.25 L1163.71 1188.25 L1163.12 1188.25 L1162.54 1188.25 L1161.95 1188.25 L1161.36 1188.25 L1160.78 1188.25 L1160.19 1188.25 L1159.6 1188.25 L1159.02 1188.25 L1158.43 1188.25 L1157.84 1188.25 L1157.26 1188.25 L1156.67 1188.25 L1156.09 1188.25 L1155.5 1188.25 L1154.91 1188.25 L1154.33 1188.25 L1153.74 1188.25 L1153.15 1188.25 L1152.57 1188.25 L1151.98 1188.25 L1151.39 1188.25 L1150.81 1188.25 L1150.22 1188.25 L1149.63 1188.25 L1149.05 1188.25 L1148.46 1188.25 L1147.88 1188.25 L1147.29 1188.25 L1146.7 1188.25 L1146.12 1188.25 L1145.53 1188.25 L1144.94 1188.25 L1144.36 1188.25 L1143.77 1188.25 L1143.18 1188.25 L1142.6 1188.25 L1142.01 1188.25 L1141.42 1188.25 L1140.84 1188.25 L1140.25 1188.25 L1139.67 1188.25 L1139.08 1188.25 L1138.49 1188.25 L1137.91 1188.25 L1137.32 1188.25 L1136.73 1188.25 L1136.15 1188.25 L1135.56 1188.25 L1134.97 1188.25 L1134.39 1188.25 L1133.8 1188.25 L1133.21 1188.25 L1132.63 1188.25 L1132.04 1188.25 L1131.46 1188.25 L1130.87 1188.25 L1130.28 1188.25 L1129.7 1188.25 L1129.11 1188.25 L1128.52 1188.25 L1127.94 1188.25 L1127.35 1188.25 L1126.76 1188.25 L1126.18 1188.25 L1125.59 1188.25 L1125.01 1188.25 L1124.42 1188.25 L1123.83 1188.25 L1123.25 1188.25 L1122.66 1188.25 L1122.07 1188.25 L1121.49 1188.25 L1120.9 1188.25 L1120.31 1188.25 L1119.73 1188.25 L1119.14 1188.25 L1118.55 1188.25 L1117.97 1188.25 L1117.38 1188.25 L1116.8 1188.25 L1116.21 1188.25 L1115.62 1188.25 L1115.04 1188.25 L1114.45 1188.25 L1113.86 1188.25 L1113.28 1188.25 L1112.69 1188.25 L1112.1 1188.25 L1111.52 1188.25 L1110.93 1188.25 L1110.34 1188.25 L1109.76 1188.25 L1109.17 1188.25 L1108.59 1188.25 L1108 1188.25 L1107.41 1188.25 L1106.83 1188.25 L1106.24 1188.25 L1105.65 1188.25 L1105.07 1188.25 L1104.48 1188.25 L1103.89 1188.25 L1103.31 1188.25 L1102.72 1188.25 L1102.14 1188.25 L1101.55 1188.25 L1100.96 1188.25 L1100.38 1188.25 L1099.79 1188.25 L1099.2 1188.25 L1098.62 1188.25 L1098.03 1188.25 L1097.44 1188.25 L1096.86 1188.25 L1096.27 1188.25 L1095.68 1188.25 L1095.1 1188.25 L1094.51 1188.25 L1093.93 1188.25 L1093.34 1188.25 L1092.75 1188.25 L1092.17 1188.25 L1091.58 1188.25 L1090.99 1188.25 L1090.41 1188.25 L1089.82 1188.25 L1089.23 1188.25 L1088.65 1188.25 L1088.06 1188.25 L1087.47 1188.25 L1086.89 1188.25 L1086.3 1188.25 L1085.72 1188.25 L1085.13 1188.25 L1084.54 1188.25 L1083.96 1188.25 L1083.37 1188.25 L1082.78 1188.25 L1082.2 1188.25 L1081.61 1188.25 L1081.02 1188.25 L1080.44 1188.25 L1079.85 1188.25 L1079.26 1188.25 L1078.68 1188.25 L1078.09 1188.25 L1077.51 1188.25 L1076.92 1188.25 L1076.33 1188.25 L1075.75 1188.25 L1075.16 1188.25 L1074.57 1188.25 L1073.99 1188.25 L1073.4 1188.25 L1072.81 1188.25 L1072.23 1188.25 L1071.64 1188.25 L1071.06 1188.25 L1070.47 1188.25 L1069.88 1188.25 L1069.3 1188.25 L1068.71 1188.25 L1068.12 1188.25 L1067.54 1188.25 L1066.95 1188.25 L1066.36 1188.25 L1065.78 1188.25 L1065.19 1188.25 L1064.6 1188.25 L1064.02 1188.25 L1063.43 1188.25 L1062.85 1188.25 L1062.26 1188.25 L1061.67 1188.25 L1061.09 1188.25 L1060.5 1188.25 L1059.91 1188.25 L1059.33 1188.25 L1058.74 1188.25 L1058.15 1188.25 L1057.57 1188.25 L1056.98 1188.25 L1056.39 1188.25 L1055.81 1188.25 L1055.22 1188.25 L1054.64 1188.25 L1054.05 1188.25 L1053.46 1188.25 L1052.88 1188.25 L1052.29 1188.25 L1051.7 1188.25 L1051.12 1188.25 L1050.53 1188.25 L1049.94 1188.25 L1049.36 1188.25 L1048.77 1188.25 L1048.19 1188.25 L1047.6 1188.25 L1047.01 1188.25 L1046.43 1188.25 L1045.84 1188.25 L1045.25 1188.25 L1044.67 1188.25 L1044.08 1188.25 L1043.49 1188.25 L1042.91 1188.25 L1042.32 1188.25 L1041.73 1188.25 L1041.15 1188.25 L1040.56 1188.25 L1039.98 1188.25 L1039.39 1188.25 L1038.8 1188.25 L1038.22 1188.25 L1037.63 1188.25 L1037.04 1188.25 L1036.46 1188.25 L1035.87 1188.25 L1035.28 1188.25 L1034.7 1188.25 L1034.11 1188.25 L1033.52 1188.25 L1032.94 1188.25 L1032.35 1188.25 L1031.77 1188.25 L1031.18 1188.25 L1030.59 1188.25 L1030.01 1188.25 L1029.42 1188.25 L1028.83 1188.25 L1028.25 1188.25 L1027.66 1188.25 L1027.07 1188.25 L1026.49 1188.25 L1025.9 1188.25 L1025.32 1188.25 L1024.73 1188.25 L1024.14 1188.25 L1023.56 1188.25 L1022.97 1188.25 L1022.38 1188.25 L1021.8 1188.25 L1021.21 1188.25 L1020.62 1188.25 L1020.04 1188.25 L1019.45 1188.25 L1018.86 1188.25 L1018.28 1188.25 L1017.69 1188.25 L1017.11 1188.25 L1016.52 1188.25 L1015.93 1188.25 L1015.35 1188.25 L1014.76 1188.25 L1014.17 1188.25 L1013.59 1188.25 L1013 1188.25 L1012.41 1188.25 L1011.83 1188.25 L1011.24 1188.25 L1010.65 1188.25 L1010.07 1188.25 L1009.48 1188.25 L1008.9 1188.25 L1008.31 1188.25 L1007.72 1188.25 L1007.14 1188.25 L1006.55 1188.25 L1005.96 1188.25 L1005.38 1188.25 L1004.79 1188.25 L1004.2 1188.25 L1003.62 1188.25 L1003.03 1188.25 L1002.44 1188.25 L1001.86 1188.25 L1001.27 1188.25 L1000.69 1188.25 L1000.1 1188.25 L999.513 1188.25 L998.926 1188.25 L998.34 1188.25 L997.754 1188.25 L997.167 1188.25 L996.581 1188.25 L995.994 1188.25 L995.408 1188.25 L994.822 1188.25 L994.235 1188.25 L993.649 1188.25 L993.062 1188.25 L992.476 1188.25 L991.889 1188.25 L991.303 1188.25 L990.717 1188.25 L990.13 1188.25 L989.544 1188.25 L988.957 1188.25 L988.371 1188.25 L987.785 1188.25 L987.198 1188.25 L986.612 1188.25 L986.025 1188.25  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1188.38 986.612,1188.38 987.198,1188.38 987.785,1188.38 988.371,1188.38 988.957,1188.38 989.544,1188.38 990.13,1188.38 990.717,1188.38 991.303,1188.38 991.889,1188.38 992.476,1188.38 993.062,1188.38 993.649,1188.38 994.235,1188.38 994.822,1188.38 995.408,1188.38 995.994,1188.38 996.581,1188.38 997.167,1188.38 997.754,1188.38 998.34,1188.38 998.926,1188.38 999.513,1188.38 1000.1,1188.38 1000.69,1188.38 1001.27,1188.38 1001.86,1188.38 1002.44,1188.38 1003.03,1188.38 1003.62,1188.38 1004.2,1188.38 1004.79,1188.38 1005.38,1188.38 1005.96,1188.38 1006.55,1188.38 1007.14,1188.38 1007.72,1188.38 1008.31,1188.38 1008.9,1188.38 1009.48,1188.38 1010.07,1188.38 1010.65,1188.38 1011.24,1188.38 1011.83,1188.38 1012.41,1188.38 1013,1188.38 1013.59,1188.38 1014.17,1188.38 1014.76,1188.38 1015.35,1188.38 1015.93,1188.38 1016.52,1188.38 1017.11,1188.38 1017.69,1188.38 1018.28,1188.38 1018.86,1188.38 1019.45,1188.38 1020.04,1188.38 1020.62,1188.38 1021.21,1188.38 1021.8,1188.38 1022.38,1188.38 1022.97,1188.38 1023.56,1188.38 1024.14,1188.38 1024.73,1188.38 1025.32,1188.38 1025.9,1188.38 1026.49,1188.38 1027.07,1188.38 1027.66,1188.38 1028.25,1188.38 1028.83,1188.38 1029.42,1188.38 1030.01,1188.38 1030.59,1188.38 1031.18,1188.38 1031.77,1188.38 1032.35,1188.38 1032.94,1188.38 1033.52,1188.38 1034.11,1188.38 1034.7,1188.38 1035.28,1188.38 1035.87,1188.38 1036.46,1188.38 1037.04,1188.38 1037.63,1188.38 1038.22,1188.38 1038.8,1188.38 1039.39,1188.38 1039.98,1188.38 1040.56,1188.38 1041.15,1188.38 1041.73,1188.38 1042.32,1188.38 1042.91,1188.38 1043.49,1188.38 1044.08,1188.38 1044.67,1188.38 1045.25,1188.38 1045.84,1188.38 1046.43,1188.38 1047.01,1188.38 1047.6,1188.38 1048.19,1188.38 1048.77,1188.38 1049.36,1188.38 1049.94,1188.38 1050.53,1188.38 1051.12,1188.38 1051.7,1188.38 1052.29,1188.38 1052.88,1188.38 1053.46,1188.38 1054.05,1188.38 1054.64,1188.38 1055.22,1188.38 1055.81,1188.38 1056.39,1188.38 1056.98,1188.38 1057.57,1188.38 1058.15,1188.38 1058.74,1188.38 1059.33,1188.38 1059.91,1188.38 1060.5,1188.38 1061.09,1188.38 1061.67,1188.38 1062.26,1188.38 1062.85,1188.38 1063.43,1188.38 1064.02,1188.38 1064.6,1188.38 1065.19,1188.38 1065.78,1188.38 1066.36,1188.38 1066.95,1188.38 1067.54,1188.38 1068.12,1188.38 1068.71,1188.38 1069.3,1188.38 1069.88,1188.38 1070.47,1188.38 1071.06,1188.38 1071.64,1188.38 1072.23,1188.38 1072.81,1188.38 1073.4,1188.38 1073.99,1188.38 1074.57,1188.38 1075.16,1188.38 1075.75,1188.38 1076.33,1188.38 1076.92,1188.38 1077.51,1188.38 1078.09,1188.38 1078.68,1188.38 1079.26,1188.38 1079.85,1188.38 1080.44,1188.38 1081.02,1188.38 1081.61,1188.38 1082.2,1188.38 1082.78,1188.38 1083.37,1188.38 1083.96,1188.38 1084.54,1188.38 1085.13,1188.38 1085.72,1188.38 1086.3,1188.38 1086.89,1188.38 1087.47,1188.38 1088.06,1188.38 1088.65,1188.38 1089.23,1188.38 1089.82,1188.38 1090.41,1188.38 1090.99,1188.38 1091.58,1188.38 1092.17,1188.38 1092.75,1188.38 1093.34,1188.38 1093.93,1188.38 1094.51,1188.38 1095.1,1188.38 1095.68,1188.38 1096.27,1188.38 1096.86,1188.38 1097.44,1188.38 1098.03,1188.38 1098.62,1188.38 1099.2,1188.38 1099.79,1188.38 1100.38,1188.38 1100.96,1188.38 1101.55,1188.38 1102.14,1188.38 1102.72,1188.38 1103.31,1188.38 1103.89,1188.38 1104.48,1188.38 1105.07,1188.38 1105.65,1188.38 1106.24,1188.38 1106.83,1188.38 1107.41,1188.38 1108,1188.38 1108.59,1188.38 1109.17,1188.38 1109.76,1188.38 1110.34,1188.38 1110.93,1188.38 1111.52,1188.38 1112.1,1188.38 1112.69,1188.38 1113.28,1188.38 1113.86,1188.38 1114.45,1188.38 1115.04,1188.38 1115.62,1188.38 1116.21,1188.38 1116.8,1188.38 1117.38,1188.38 1117.97,1188.38 1118.55,1188.38 1119.14,1188.38 1119.73,1188.38 1120.31,1188.38 1120.9,1188.38 1121.49,1188.38 1122.07,1188.38 1122.66,1188.38 1123.25,1188.38 1123.83,1188.38 1124.42,1188.38 1125.01,1188.38 1125.59,1188.38 1126.18,1188.38 1126.76,1188.38 1127.35,1188.38 1127.94,1188.38 1128.52,1188.38 1129.11,1188.38 1129.7,1188.38 1130.28,1188.38 1130.87,1188.38 1131.46,1188.38 1132.04,1188.38 1132.63,1188.38 1133.21,1188.38 1133.8,1188.38 1134.39,1188.38 1134.97,1188.38 1135.56,1188.38 1136.15,1188.38 1136.73,1188.38 1137.32,1188.38 1137.91,1188.38 1138.49,1188.38 1139.08,1188.38 1139.67,1188.38 1140.25,1188.38 1140.84,1188.38 1141.42,1188.38 1142.01,1188.38 1142.6,1188.38 1143.18,1188.38 1143.77,1188.38 1144.36,1188.38 1144.94,1188.38 1145.53,1188.38 1146.12,1188.38 1146.7,1188.38 1147.29,1188.38 1147.88,1188.38 1148.46,1188.38 1149.05,1188.38 1149.63,1188.38 1150.22,1188.38 1150.81,1188.38 1151.39,1188.38 1151.98,1188.38 1152.57,1188.38 1153.15,1188.38 1153.74,1188.38 1154.33,1188.38 1154.91,1188.38 1155.5,1188.38 1156.09,1188.38 1156.67,1188.38 1157.26,1188.38 1157.84,1188.38 1158.43,1188.38 1159.02,1188.38 1159.6,1188.38 1160.19,1188.38 1160.78,1188.38 1161.36,1188.38 1161.95,1188.38 1162.54,1188.38 1163.12,1188.38 1163.71,1188.38 1164.29,1188.38 1164.88,1188.38 1165.47,1188.38 1166.05,1188.38 1166.64,1188.38 1167.23,1188.38 1167.81,1188.38 1168.4,1188.38 1168.99,1188.38 1169.57,1188.38 1170.16,1188.38 1170.75,1188.38 1171.33,1188.38 1171.92,1188.38 1172.5,1188.38 1173.09,1188.38 1173.68,1188.38 1174.26,1188.38 1174.85,1188.38 1175.44,1188.38 1176.02,1188.38 1176.61,1188.38 1177.2,1188.38 1177.78,1188.38 1178.37,1188.38 1178.96,1188.38 1179.54,1188.38 1180.13,1188.38 1180.71,1188.38 1181.3,1188.38 1181.89,1188.38 1182.47,1188.38 1183.06,1188.38 1183.65,1188.38 1184.23,1188.38 1184.82,1188.38 1185.41,1188.38 1185.99,1188.38 1186.58,1188.38 1187.16,1188.38 1187.75,1188.38 1188.34,1188.38 1188.92,1188.38 1189.51,1188.38 1190.1,1188.38 1190.68,1188.38 1191.27,1188.38 1191.86,1188.38 1192.44,1188.38 1193.03,1188.38 1193.62,1188.38 1194.2,1188.38 1194.79,1188.38 1195.37,1188.38 1195.96,1188.38 1196.55,1188.38 1197.13,1188.38 1197.72,1188.38 1198.31,1188.38 1198.89,1188.38 1199.48,1188.38 1200.07,1188.38 1200.65,1188.38 1201.24,1188.38 1201.83,1188.38 1202.41,1188.38 1203,1188.38 1203.58,1188.38 1204.17,1188.38 1204.76,1188.38 1205.34,1188.38 1205.93,1188.38 1206.52,1188.38 1207.1,1188.38 1207.69,1188.38 1208.28,1188.38 1208.86,1188.38 1209.45,1188.38 1210.03,1188.38 1210.62,1188.38 1211.21,1188.38 1211.79,1188.38 1212.38,1188.38 1212.97,1188.38 1213.55,1188.38 1214.14,1188.38 1214.73,1188.38 1215.31,1188.38 1215.9,1188.38 1216.49,1188.38 1217.07,1188.38 1217.66,1188.38 1218.24,1188.38 1218.83,1188.38 1219.42,1188.38 1220,1188.38 1220.59,1188.38 1221.18,1188.38 1221.76,1188.38 1222.35,1188.38 1222.94,1188.38 1223.52,1188.38 1224.11,1188.38 1224.7,1188.38 1225.28,1188.38 1225.87,1188.38 1226.45,1188.38 1227.04,1188.38 1227.63,1188.38 1228.21,1188.38 1228.8,1188.38 1229.39,1188.38 1229.97,1188.38 1230.56,1188.38 1231.15,1188.38 1231.73,1188.38 1232.32,1188.38 1232.91,1188.38 1233.49,1188.38 1234.08,1188.38 1234.66,1188.38 1235.25,1188.38 1235.84,1188.38 1236.42,1188.38 1237.01,1188.38 1237.6,1188.38 1238.18,1188.38 1238.77,1188.38 1239.36,1188.38 1239.94,1188.38 1240.53,1188.38 1241.11,1188.38 1241.7,1188.38 1242.29,1188.38 1242.87,1188.38 1243.46,1188.38 1244.05,1188.38 1244.63,1188.38 1245.22,1188.38 1245.81,1188.38 1246.39,1188.38 1246.98,1188.38 1247.57,1188.38 1248.15,1188.38 1248.74,1188.38 1249.32,1188.38 1249.91,1188.38 1250.5,1188.38 1251.08,1188.38 1251.67,1188.38 1252.26,1188.38 1252.84,1188.38 1253.43,1188.38 1254.02,1188.38 1254.6,1188.38 1255.19,1188.38 1255.78,1188.38 1256.36,1188.38 1256.95,1188.38 1257.53,1188.38 1258.12,1188.38 1258.71,1188.38 1259.29,1188.38 1259.88,1188.38 1260.47,1188.38 1261.05,1188.38 1261.64,1188.38 1262.23,1188.38 1262.81,1188.38 1263.4,1188.38 1263.98,1188.38 1264.57,1188.38 1265.16,1188.38 1265.74,1188.38 1266.33,1188.38 1266.92,1188.38 1267.5,1188.38 1268.09,1188.38 1268.68,1188.38 1269.26,1188.38 1269.85,1188.38 1270.44,1188.38 1271.02,1188.38 1271.61,1188.38 1272.19,1188.38 1272.78,1188.38 1273.37,1188.38 1273.95,1188.38 1274.54,1188.38 1275.13,1188.38 1275.71,1188.38 1276.3,1188.38 1276.89,1188.38 1277.47,1188.38 1278.06,1188.38 1278.65,1188.38 1279.23,1188.38 1279.82,1188.38 1280.4,1188.38 1280.99,1188.38 1281.58,1188.38 1282.16,1188.38 1282.75,1188.38 1283.34,1188.38 1283.92,1188.38 1284.51,1188.38 1285.1,1188.38 1285.68,1188.38 1286.27,1188.38 1286.86,1188.38 1287.44,1188.38 1288.03,1188.38 1288.61,1188.38 1289.2,1188.38 1289.79,1188.38 1290.37,1188.38 1290.96,1188.38 1291.55,1188.38 1292.13,1188.38 1292.72,1188.38 1293.31,1188.38 1293.89,1188.38 1294.48,1188.38 1295.06,1188.38 1295.65,1188.38 1296.24,1188.38 1296.82,1188.38 1297.41,1188.38 1298,1188.38 1298.58,1188.38 1299.17,1188.38 1299.76,1188.38 1300.34,1188.38 1300.93,1188.38 1301.52,1188.38 1302.1,1188.38 1302.69,1188.38 1303.27,1188.38 1303.86,1188.38 1304.45,1188.38 1305.03,1188.38 1305.62,1188.38 1306.21,1188.38 1306.79,1188.38 1307.38,1188.38 1307.97,1188.38 1308.55,1188.38 1309.14,1188.38 1309.73,1188.38 1310.31,1188.38 1310.9,1188.38 1311.48,1188.38 1312.07,1188.38 1312.66,1188.38 1313.24,1188.38 1313.83,1188.38 1314.42,1188.38 1315,1188.38 1315.59,1188.38 1316.18,1188.38 1316.76,1188.38 1317.35,1188.38 1317.93,1188.38 1318.52,1188.38 1319.11,1188.38 1319.69,1188.38 1320.28,1188.38 1320.87,1188.38 1321.45,1188.38 1322.04,1188.38 1322.63,1188.38 1323.21,1188.38 1323.8,1188.38 1324.39,1188.38 1324.97,1188.38 1325.56,1188.38 1326.14,1188.38 1326.73,1188.38 1327.32,1188.38 1327.9,1188.38 1328.49,1188.38 1329.08,1188.38 1329.66,1188.38 1330.25,1188.38 1330.84,1188.38 1331.42,1188.38 1332.01,1188.38 1332.6,1188.38 1333.18,1188.38 1333.77,1188.38 1334.35,1188.38 1334.94,1188.38 1335.53,1188.38 1336.11,1188.38 1336.7,1188.38 1337.29,1188.38 1337.87,1188.38 1338.46,1188.38 1339.05,1188.38 1339.63,1188.38 1340.22,1188.38 1340.8,1188.38 1341.39,1188.38 1341.98,1188.38 1342.56,1188.38 1343.15,1188.38 1343.74,1188.38 1344.32,1188.38 1344.91,1188.38 1345.5,1188.38 1346.08,1188.38 1346.67,1188.38 1347.26,1188.38 1347.84,1188.38 1348.43,1188.38 1349.01,1188.38 1349.6,1188.38 1350.19,1188.38 1350.77,1188.38 1351.36,1188.38 1351.95,1188.38 1352.53,1188.38 1353.12,1188.38 1353.71,1188.38 1354.29,1188.38 1354.88,1188.38 1355.47,1188.38 1356.05,1188.38 1356.64,1188.38 1357.22,1188.38 1357.81,1188.38 1358.4,1188.38 1358.98,1188.38 1359.57,1188.38 1360.16,1188.38 1360.74,1188.38 1361.33,1188.38 1361.92,1188.38 1362.5,1188.38 1363.09,1188.38 1363.68,1188.38 1364.26,1188.38 1364.85,1188.38 1365.43,1188.38 1366.02,1188.38 1366.61,1188.38 1367.19,1188.38 1367.78,1188.38 1368.37,1188.38 1368.95,1188.38 1369.54,1188.38 1370.13,1188.38 1370.71,1188.38 1371.3,1188.38 1371.88,1188.38 1372.47,1188.38 1373.06,1188.38 1373.64,1188.38 1374.23,1188.38 1374.82,1188.38 1375.4,1188.38 1375.99,1188.38 1376.58,1188.38 1377.16,1188.38 1377.75,1188.38 1378.34,1188.38 1378.92,1188.38 1379.51,1188.38 1380.09,1188.38 1380.68,1188.38 1381.27,1188.38 1381.85,1188.38 1382.44,1188.38 1383.03,1188.38 1383.61,1188.38 1384.2,1188.38 1384.79,1188.38 1385.37,1188.38 1385.96,1188.38 1386.55,1188.38 1387.13,1188.38 1387.72,1188.38 1388.3,1188.38 1388.89,1188.38 1389.48,1188.38 1390.06,1188.38 1390.65,1188.38 1391.24,1188.38 1391.82,1188.38 1392.41,1188.38 1393,1188.38 1393.58,1188.38 1394.17,1188.38 1394.75,1188.38 1395.34,1188.38 1395.93,1188.38 1396.51,1188.38 1397.1,1188.38 1397.69,1188.38 1398.27,1188.38 1398.86,1188.38 1399.45,1188.38 1400.03,1188.38 1400.62,1188.38 1401.21,1188.38 1401.79,1188.38 1402.38,1188.38 1402.96,1188.38 1403.55,1188.38 1404.14,1188.38 1404.72,1188.38 1405.31,1188.38 1405.9,1188.38 1406.48,1188.38 1407.07,1188.38 1407.66,1188.38 1408.24,1188.38 1408.83,1188.38 1409.42,1188.38 1410,1188.38 1410.59,1188.38 1411.17,1188.38 1411.76,1188.38 1412.35,1188.38 1412.93,1188.38 1413.52,1188.38 1414.11,1188.38 1414.69,1188.38 1415.28,1188.38 1415.87,1188.38 1416.45,1188.38 1417.04,1188.38 1417.63,1188.38 1418.21,1188.38 1418.8,1188.38 1419.38,1188.38 1419.97,1188.38 1420.56,1188.38 1421.14,1188.38 1421.73,1188.38 1422.32,1188.38 1422.9,1188.38 1423.49,1188.38 1424.08,1188.38 1424.66,1188.38 1425.25,1188.38 1425.83,1188.38 1426.42,1188.38 1427.01,1188.38 1427.59,1188.38 1428.18,1188.38 1428.77,1188.38 1429.35,1188.38 1429.94,1188.38 1430.53,1188.38 1431.11,1188.38 1431.7,1188.38 1432.29,1188.38 1432.87,1188.38 1433.46,1188.38 1434.04,1188.38 1434.63,1188.38 1435.22,1188.38 1435.8,1188.38 1436.39,1188.38 1436.98,1188.38 1437.56,1188.38 1438.15,1188.38 1438.74,1188.38 1439.32,1188.38 1439.91,1188.38 1440.5,1188.38 1441.08,1188.38 1441.67,1188.38 1442.25,1188.38 1442.84,1188.38 1443.43,1188.38 1444.01,1188.38 1444.6,1188.38 1445.19,1188.38 1445.77,1188.38 1446.36,1188.38 1446.95,1188.38 1447.53,1188.38 1448.12,1188.38 1448.7,1188.38 1449.29,1188.38 1449.88,1188.38 1450.46,1188.38 1451.05,1188.38 1451.64,1188.38 1452.22,1188.38 1452.81,1188.38 1453.4,1188.38 1453.98,1188.38 1454.57,1188.38 1455.16,1188.38 1455.74,1188.38 1456.33,1188.38 1456.91,1188.38 1457.5,1188.38 1458.09,1188.38 1458.67,1188.38 1459.26,1188.38 1459.85,1188.38 1460.43,1188.38 1461.02,1188.38 1461.61,1188.38 1462.19,1188.38 1462.78,1188.38 1463.37,1188.38 1463.95,1188.38 1464.54,1188.38 1465.12,1188.38 1465.71,1188.38 1466.3,1188.38 1466.88,1188.38 1467.47,1188.38 1468.06,1188.38 1468.64,1188.38 1469.23,1188.38 1469.82,1188.38 1470.4,1188.38 1470.99,1188.38 1471.57,1188.38 1472.16,1188.38 1472.75,1188.38 1473.33,1188.38 1473.92,1188.38 1474.51,1188.38 1475.09,1188.38 1475.68,1188.38 1476.27,1188.38 1476.85,1188.38 1477.44,1188.38 1478.03,1188.38 1478.61,1188.38 1479.2,1188.38 1479.78,1188.38 1480.37,1188.38 1480.96,1188.38 1481.54,1188.38 1482.13,1188.38 1482.72,1188.38 1483.3,1188.38 1483.89,1188.38 1484.48,1188.38 1485.06,1188.38 1485.65,1188.38 1486.24,1188.38 1486.82,1188.38 1487.41,1188.38 1487.99,1188.38 1488.58,1188.38 1489.17,1188.38 1489.75,1188.38 1490.34,1188.38 1490.93,1188.38 1491.51,1188.38 1492.1,1188.38 1492.69,1188.38 1493.27,1188.38 1493.86,1188.38 1494.45,1188.38 1495.03,1188.38 1495.62,1188.38 1496.2,1188.38 1496.79,1188.38 1497.38,1188.38 1497.96,1188.38 1498.55,1188.38 1499.14,1188.38 1499.72,1188.38 1500.31,1188.38 1500.9,1188.38 1501.48,1188.38 1502.07,1188.38 1502.65,1188.38 1503.24,1188.38 1503.83,1188.38 1504.41,1188.38 1505,1188.38 1505.59,1188.38 1506.17,1188.38 1506.76,1188.38 1507.35,1188.38 1507.93,1188.38 1508.52,1188.38 1509.11,1188.38 1509.69,1188.38 1510.28,1188.38 1510.86,1188.38 1511.45,1188.38 1512.04,1188.38 1512.62,1188.38 1513.21,1188.38 1513.8,1188.38 1514.38,1188.38 1514.97,1188.38 1515.56,1188.38 1516.14,1188.38 1516.73,1188.38 1517.32,1188.38 1517.9,1188.38 1518.49,1188.38 1519.07,1188.38 1519.66,1188.38 1520.25,1188.38 1520.83,1188.38 1521.42,1188.38 1522.01,1188.38 1522.59,1188.38 1523.18,1188.38 1523.77,1188.38 1524.35,1188.38 1524.94,1188.38 1525.52,1188.38 1526.11,1188.38 1526.7,1188.38 1527.28,1188.38 1527.87,1188.38 1528.46,1188.38 1529.04,1188.38 1529.63,1188.38 1530.22,1188.38 1530.8,1188.38 1531.39,1188.38 1531.98,1188.38 1532.56,1188.38 1533.15,1188.38 1533.73,1188.38 1534.32,1188.38 1534.91,1188.38 1535.49,1188.38 1536.08,1188.38 1536.67,1188.38 1537.25,1188.38 1537.84,1188.38 1538.43,1188.38 1539.01,1188.38 1539.6,1188.38 1540.19,1188.38 1540.77,1188.38 1541.36,1188.38 1541.94,1188.38 1542.53,1188.38 1543.12,1188.38 1543.7,1188.38 1544.29,1188.38 1544.88,1188.38 1545.46,1188.38 1546.05,1188.38 1546.64,1188.38 1547.22,1188.38 1547.81,1188.38 1548.4,1188.38 1548.98,1188.38 1549.57,1188.38 1550.15,1188.38 1550.74,1188.38 1551.33,1188.38 1551.91,1188.38 1552.5,1188.38 1553.09,1188.38 1553.67,1188.38 1554.26,1188.38 1554.85,1188.38 1555.43,1188.38 1556.02,1188.38 1556.6,1188.38 1557.19,1188.38 1557.78,1188.38 1558.36,1188.38 1558.95,1188.38 1559.54,1188.38 1560.12,1188.38 1560.71,1188.38 1561.3,1188.38 1561.88,1188.38 1562.47,1188.38 1563.06,1188.38 1563.64,1188.38 1564.23,1188.38 1564.81,1188.38 1565.4,1188.38 1565.99,1188.38 1566.57,1188.38 1567.16,1188.38 1567.75,1188.38 1568.33,1188.38 1568.92,1188.38 1569.51,1188.38 1570.09,1188.38 1570.68,1188.38 1571.27,1188.38 1571.85,1188.38 1572.44,1188.38 1573.02,1188.38 1573.61,1188.38 1574.2,1188.38 1574.78,1188.38 1575.37,1188.38 1575.96,1188.38 1576.54,1188.38 1577.13,1188.38 1577.72,1188.38 1578.3,1188.38 1578.89,1188.38 1579.47,1188.38 1580.06,1188.38 1580.65,1188.38 1581.23,1188.38 1581.82,1188.38 1582.41,1188.38 1582.99,1188.38 1583.58,1188.38 1584.17,1188.38 1584.75,1188.38 1585.34,1188.38 1585.93,1188.38 1586.51,1188.38 1587.1,1188.38 1587.68,1188.38 1588.27,1188.38 1588.86,1188.38 1589.44,1188.38 1590.03,1188.38 1590.62,1188.38 1591.2,1188.38 1591.79,1188.38 1592.38,1188.38 1592.96,1188.38 1593.55,1188.38 1594.14,1188.38 1594.72,1188.38 1595.31,1188.38 1595.89,1188.38 1596.48,1188.38 1597.07,1188.38 1597.65,1188.38 1598.24,1188.38 1598.83,1188.38 1599.41,1188.38 1600,1188.38 1600.59,1188.38 1601.17,1188.38 1601.76,1188.38 1602.34,1188.38 1602.93,1188.38 1603.52,1188.38 1604.1,1188.38 1604.69,1188.38 1605.28,1188.38 1605.86,1188.38 1606.45,1188.38 1607.04,1188.38 1607.62,1188.38 1608.21,1188.38 1608.8,1188.38 1609.38,1188.38 1609.97,1188.38 1610.55,1188.38 1611.14,1188.38 1611.73,1188.38 1612.31,1188.38 1612.9,1188.38 1613.49,1188.38 1614.07,1188.38 1614.66,1188.38 1615.25,1188.38 1615.83,1188.38 1616.42,1188.38 1617.01,1188.38 1617.59,1188.38 1618.18,1188.38 1618.76,1188.38 1619.35,1188.38 1619.94,1188.38 1620.52,1188.38 1621.11,1188.38 1621.7,1188.38 1622.28,1188.38 1622.87,1188.38 1623.46,1188.38 1624.04,1188.38 1624.63,1188.38 1625.22,1188.38 1625.8,1188.38 1626.39,1188.38 1626.97,1188.38 1627.56,1188.38 1628.15,1188.38 1628.73,1188.38 1629.32,1188.38 1629.91,1188.38 1630.49,1188.38 1631.08,1188.38 1631.67,1188.38 1632.25,1188.38 1632.84,1188.38 1633.42,1188.38 1634.01,1188.38 1634.6,1188.38 1635.18,1188.38 1635.77,1188.38 1636.36,1188.38 1636.94,1188.38 1637.53,1188.38 1638.12,1188.38 1638.7,1188.38 1639.29,1188.38 1639.88,1188.38 1640.46,1188.38 1641.05,1188.38 1641.63,1188.38 1642.22,1188.38 1642.81,1188.38 1643.39,1188.38 1643.98,1188.38 1644.57,1188.38 1645.15,1188.38 1645.74,1188.38 1646.33,1188.38 1646.91,1188.38 1647.5,1188.38 1648.09,1188.38 1648.67,1188.38 1649.26,1188.38 1649.84,1188.38 1650.43,1188.38 1651.02,1188.38 1651.6,1188.38 1652.19,1188.38 1652.78,1188.38 1653.36,1188.38 1653.95,1188.38 1654.54,1188.38 1655.12,1188.38 1655.71,1188.38 1656.29,1188.38 1656.88,1188.38 1657.47,1188.38 1658.05,1188.38 1658.64,1188.38 1659.23,1188.38 1659.81,1188.38 1660.4,1188.38 1660.99,1188.38 1661.57,1188.38 1662.16,1188.38 1662.75,1188.38 1663.33,1188.38 1663.92,1188.38 1664.5,1188.38 1665.09,1188.38 1665.68,1188.38 1666.26,1188.38 1666.85,1188.38 1667.44,1188.38 1668.02,1188.38 1668.61,1188.38 1669.2,1188.38 1669.78,1188.38 1670.37,1188.38 1670.96,1188.38 1671.54,1188.38 1672.13,1188.38 1672.71,1188.38 1673.3,1188.38 1673.89,1188.38 1674.47,1188.38 1675.06,1188.38 1675.65,1188.38 1676.23,1188.38 1676.82,1188.38 1677.41,1188.38 1677.99,1188.38 1678.58,1188.38 1679.17,1188.38 1679.75,1188.38 1680.34,1188.38 1680.92,1188.38 1681.51,1188.38 1682.1,1188.38 1682.68,1188.38 1683.27,1188.38 1683.86,1188.38 1684.44,1188.38 1685.03,1188.38 1685.62,1188.38 1686.2,1188.38 1686.79,1188.38 1687.37,1188.38 1687.96,1188.38 1688.55,1188.38 1689.13,1188.38 1689.72,1188.38 1690.31,1188.38 1690.89,1188.38 1691.48,1188.38 1692.07,1188.38 1692.65,1188.38 1693.24,1188.38 1693.83,1188.38 1694.41,1188.38 1695,1188.38 1695.58,1188.38 1696.17,1188.38 1696.76,1188.38 1697.34,1188.38 1697.93,1188.38 1698.52,1188.38 1699.1,1188.38 1699.69,1188.38 1700.28,1188.38 1700.86,1188.38 1701.45,1188.38 1702.04,1188.38 1702.62,1188.38 1703.21,1188.38 1703.79,1188.38 1704.38,1188.38 1704.97,1188.38 1705.55,1188.38 1706.14,1188.38 1706.73,1188.38 1707.31,1188.38 1707.9,1188.38 1708.49,1188.38 1709.07,1188.38 1709.66,1188.38 1710.24,1188.38 1710.83,1188.38 1711.42,1188.38 1712,1188.38 1712.59,1188.38 1713.18,1188.38 1713.76,1188.38 1714.35,1188.38 1714.94,1188.38 1715.52,1188.38 1716.11,1188.38 1716.7,1188.38 1717.28,1188.38 1717.87,1188.38 1718.45,1188.38 1719.04,1188.38 1719.63,1188.38 1720.21,1188.38 1720.8,1188.38 1721.39,1188.38 1721.97,1188.38 1722.56,1188.38 1723.15,1188.38 1723.73,1188.38 1724.32,1188.38 1724.91,1188.38 1725.49,1188.38 1726.08,1188.38 1726.66,1188.38 1727.25,1188.38 1727.84,1188.38 1728.42,1188.38 1729.01,1188.38 1729.6,1188.38 1730.18,1188.38 1730.77,1188.38 1731.36,1188.38 1731.94,1188.38 1732.53,1188.38 1733.11,1188.38 1733.7,1188.38 1734.29,1188.38 1734.87,1188.38 1735.46,1188.38 1736.05,1188.38 1736.63,1188.38 1737.22,1188.38 1737.81,1188.38 1738.39,1188.38 1738.98,1188.38 1739.57,1188.38 1740.15,1188.38 1740.74,1188.38 1741.32,1188.38 1741.91,1188.38 1742.5,1188.38 1743.08,1188.38 1743.67,1188.38 1744.26,1188.38 1744.84,1188.38 1745.43,1188.38 1746.02,1188.38 1746.6,1188.38 1747.19,1188.38 1747.78,1188.38 1748.36,1188.38 1748.95,1188.38 1749.53,1188.38 1750.12,1188.38 1750.71,1188.38 1751.29,1188.38 1751.88,1188.38 1752.47,1188.38 1753.05,1188.38 1753.64,1188.38 1754.23,1188.38 1754.81,1188.38 1755.4,1188.38 1755.99,1188.38 1756.57,1188.38 1757.16,1188.38 1757.74,1188.38 1758.33,1188.38 1758.92,1188.38 1759.5,1188.38 1760.09,1188.38 1760.68,1188.38 1761.26,1188.38 1761.85,1188.38 1762.44,1188.38 1763.02,1188.38 1763.61,1188.38 1764.19,1188.38 1764.78,1188.38 1765.37,1188.38 1765.95,1188.38 1766.54,1188.38 1767.13,1188.38 1767.71,1188.38 1768.3,1188.38 1768.89,1188.38 1769.47,1188.38 1770.06,1188.38 1770.65,1188.38 1771.23,1188.38 1771.82,1188.38 1772.4,1188.38 1772.99,1188.38 1773.58,1188.38 1774.16,1188.38 1774.75,1188.38 1775.34,1188.38 1775.92,1188.38 1776.51,1188.38 1777.1,1188.38 1777.68,1188.38 1778.27,1188.38 1778.86,1188.38 1779.44,1188.38 1780.03,1188.38 1780.61,1188.38 1781.2,1188.38 1781.79,1188.38 1782.37,1188.38 1782.96,1188.38 1783.55,1188.38 1784.13,1188.38 1784.72,1188.38 1785.31,1188.38 1785.89,1188.38 1786.48,1188.38 1787.06,1188.38 1787.65,1188.38 1788.24,1188.38 1788.82,1188.38 1789.41,1188.38 1790,1188.38 1790.58,1188.38 1791.17,1188.38 1791.76,1188.38 1792.34,1188.38 1792.93,1188.38 1793.52,1188.38 1794.1,1188.38 1794.69,1188.38 1795.27,1188.38 1795.86,1188.38 1796.45,1188.38 1797.03,1188.38 1797.62,1188.38 1798.21,1188.38 1798.79,1188.38 1799.38,1188.38 1799.97,1188.38 1800.55,1188.38 1801.14,1188.38 1801.73,1188.38 1802.31,1188.38 1802.9,1188.38 1803.48,1188.38 1804.07,1188.38 1804.66,1188.38 1805.24,1188.38 1805.83,1188.38 1806.42,1188.38 1807,1188.38 1807.59,1188.38 1808.18,1188.38 1808.76,1188.38 1809.35,1188.38 1809.94,1188.38 1810.52,1188.38 1811.11,1188.38 1811.69,1188.38 1812.28,1188.38 1812.87,1188.38 1813.45,1188.38 1814.04,1188.38 1814.63,1188.38 1815.21,1188.38 1815.8,1188.38 1816.39,1188.38 1816.97,1188.38 1817.56,1188.38 1818.14,1188.38 1818.73,1188.38 1819.32,1188.38 1819.9,1188.38 1820.49,1188.38 1821.08,1188.38 1821.66,1188.38 1822.25,1188.38 1822.84,1188.38 1823.42,1188.38 1824.01,1188.38 1824.6,1188.38 1825.18,1188.38 1825.77,1188.38 1826.35,1188.38 1826.94,1188.38 1827.53,1188.38 1828.11,1188.38 1828.7,1188.38 1829.29,1188.38 1829.87,1188.38 1830.46,1188.38 1831.05,1188.38 1831.63,1188.38 1832.22,1188.38 1832.81,1188.38 1833.39,1188.38 1833.98,1188.38 1834.56,1188.38 1835.15,1188.38 1835.74,1188.38 1836.32,1188.38 1836.91,1188.38 1837.5,1188.38 1838.08,1188.38 1838.67,1188.38 1839.26,1188.38 1839.84,1188.38 1840.43,1188.38 1841.01,1188.38 1841.6,1188.38 1842.19,1188.38 1842.77,1188.38 1843.36,1188.38 1843.95,1188.38 1844.53,1188.38 1845.12,1188.38 1845.71,1188.38 1846.29,1188.38 1846.88,1188.38 1847.47,1188.38 1848.05,1188.38 1848.64,1188.38 1849.22,1188.38 1849.81,1188.38 1850.4,1188.38 1850.98,1188.38 1851.57,1188.38 1852.16,1188.38 1852.74,1188.38 1853.33,1188.38 1853.92,1188.38 1854.5,1188.38 1855.09,1188.38 1855.68,1188.38 1856.26,1188.38 1856.85,1188.38 1857.43,1188.38 1858.02,1188.38 1858.61,1188.38 1859.19,1188.38 1859.78,1188.38 1860.37,1188.38 1860.95,1188.38 1861.54,1188.38 1862.13,1188.38 1862.71,1188.38 1863.3,1188.38 1863.88,1188.38 1864.47,1188.38 1865.06,1188.38 1865.64,1188.38 1866.23,1188.38 1866.82,1188.38 1867.4,1188.38 1867.99,1188.38 1868.58,1188.38 1869.16,1188.38 1869.75,1188.38 1870.34,1188.38 1870.92,1188.38 1871.51,1188.38 1872.09,1188.38 1872.68,1188.38 1873.27,1188.38 1873.85,1188.38 1874.44,1188.38 1875.03,1188.38 1875.61,1188.38 1876.2,1188.38 1876.79,1188.38 1877.37,1188.38 1877.96,1188.38 1878.55,1188.38 1879.13,1188.38 1879.72,1188.38 1880.3,1188.38 1880.89,1188.38 1881.48,1188.38 1882.06,1188.38 1882.65,1188.38 1883.24,1188.38 1883.82,1188.38 1884.41,1188.38 1885,1188.38 1885.58,1188.38 1886.17,1188.38 1886.76,1188.38 1887.34,1188.38 1887.93,1188.38 1888.51,1188.38 1889.1,1188.38 1889.69,1188.38 1890.27,1188.38 1890.86,1188.38 1891.45,1188.38 1892.03,1188.38 1892.62,1188.38 1893.21,1188.38 1893.79,1188.38 1894.38,1188.38 1894.96,1188.38 1895.55,1188.38 1896.14,1188.38 1896.72,1188.38 1897.31,1188.38 1897.9,1188.38 1898.48,1188.38 1899.07,1188.38 1899.66,1188.38 1900.24,1188.38 1900.83,1188.38 1901.42,1188.38 1902,1188.38 1902.59,1188.38 1903.17,1188.38 1903.76,1188.38 1904.35,1188.38 1904.93,1188.38 1905.52,1188.38 1906.11,1188.38 1906.69,1188.38 1907.28,1188.38 1907.87,1188.38 1908.45,1188.38 1909.04,1188.38 1909.63,1188.38 1910.21,1188.38 1910.8,1188.38 1911.38,1188.38 1911.97,1188.38 1912.56,1188.38 1913.14,1188.38 1913.73,1188.38 1914.32,1188.38 1914.9,1188.38 1915.49,1188.38 1916.08,1188.38 1916.66,1188.38 1917.25,1188.38 1917.83,1188.38 1918.42,1188.38 1919.01,1188.38 1919.59,1188.38 1920.18,1188.38 1920.77,1188.38 1921.35,1188.38 1921.94,1188.38 1922.53,1188.38 1923.11,1188.38 1923.7,1188.38 1924.29,1188.38 1924.87,1188.38 1925.46,1188.38 1926.04,1188.38 1926.63,1188.38 1927.22,1188.38 1927.8,1188.38 1928.39,1188.38 1928.98,1188.38 1929.56,1188.38 1930.15,1188.38 1930.74,1188.38 1931.32,1188.38 1931.91,1188.38 1932.5,1188.38 1933.08,1188.38 1933.67,1188.38 1934.25,1188.38 1934.84,1188.38 1935.43,1188.38 1936.01,1188.38 1936.6,1188.38 1937.19,1188.38 1937.77,1188.38 1938.36,1188.38 1938.95,1188.38 1939.53,1188.38 1940.12,1188.38 1940.71,1188.38 1941.29,1188.38 1941.88,1188.38 1942.46,1188.38 1943.05,1188.38 1943.64,1188.38 1944.22,1188.38 1944.81,1188.38 1945.4,1188.38 1945.98,1188.38 1946.57,1188.38 1947.16,1188.38 1947.74,1188.38 1948.33,1188.38 1948.91,1188.38 1949.5,1188.38 1950.09,1188.38 1950.67,1188.38 1951.26,1188.38 1951.85,1188.38 1952.43,1188.38 1953.02,1188.38 1953.61,1188.38 1954.19,1188.38 1954.78,1188.38 1955.37,1188.38 1955.95,1188.38 1956.54,1188.38 1957.12,1188.38 1957.71,1188.38 1958.3,1188.38 1958.88,1188.38 1959.47,1188.38 1960.06,1188.38 1960.64,1188.38 1961.23,1188.38 1961.82,1188.38 1962.4,1188.38 1962.99,1188.38 1963.58,1188.38 1964.16,1188.38 1964.75,1188.38 1965.33,1188.38 1965.92,1188.38 1966.51,1188.38 1967.09,1188.38 1967.68,1188.38 1968.27,1188.38 1968.85,1188.38 1969.44,1188.38 1970.03,1188.38 1970.61,1188.38 1971.2,1188.38 1971.78,1188.38 1972.37,1188.38 1972.96,1188.38 1973.54,1188.38 1974.13,1188.38 1974.72,1188.38 1975.3,1188.38 1975.89,1188.38 1976.48,1188.38 1977.06,1188.38 1977.65,1188.38 1978.24,1188.38 1978.82,1188.38 1979.41,1188.38 1979.99,1188.38 1980.58,1188.38 1981.17,1188.38 1981.75,1188.38 1982.34,1188.38 1982.93,1188.38 1983.51,1188.38 1984.1,1188.38 1984.69,1188.38 1985.27,1188.38 1985.86,1188.38 1986.45,1188.38 1987.03,1188.38 1987.62,1188.38 1988.2,1188.38 1988.79,1188.38 1989.38,1188.38 1989.96,1188.38 1990.55,1188.38 1991.14,1188.38 1991.72,1188.38 1992.31,1188.38 1992.9,1188.38 1993.48,1188.38 1994.07,1188.38 1994.65,1188.38 1995.24,1188.38 1995.83,1188.38 1996.41,1188.38 1997,1188.38 1997.59,1188.38 1998.17,1188.38 1998.76,1188.38 1999.35,1188.38 1999.93,1188.38 2000.52,1188.38 2001.11,1188.38 2001.69,1188.38 2002.28,1188.38 2002.86,1188.38 2003.45,1188.38 2004.04,1188.38 2004.62,1188.38 2005.21,1188.38 2005.8,1188.38 2006.38,1188.38 2006.97,1188.38 2007.56,1188.38 2008.14,1188.38 2008.73,1188.38 2009.32,1188.38 2009.9,1188.38 2010.49,1188.38 2011.07,1188.38 2011.66,1188.38 2012.25,1188.38 2012.83,1188.38 2013.42,1188.38 2014.01,1188.38 2014.59,1188.38 2015.18,1188.38 2015.77,1188.38 2016.35,1188.38 2016.94,1188.38 2017.53,1188.38 2018.11,1188.38 2018.7,1188.38 2019.28,1188.38 2019.87,1188.38 2020.46,1188.38 2021.04,1188.38 2021.63,1188.38 2022.22,1188.38 2022.8,1188.38 2023.39,1188.38 2023.98,1188.38 2024.56,1188.38 2025.15,1188.38 2025.73,1188.38 2026.32,1188.38 2026.91,1188.38 2027.49,1188.38 2028.08,1188.38 2028.67,1188.38 2029.25,1188.38 2029.84,1188.38 2030.43,1188.38 2031.01,1188.38 2031.6,1188.38 2032.19,1188.38 2032.77,1188.38 2033.36,1188.38 2033.94,1188.38 2034.53,1188.38 2035.12,1188.38 2035.7,1188.38 2036.29,1188.38 2036.88,1188.38 2037.46,1188.38 2038.05,1188.38 2038.64,1188.38 2039.22,1188.38 2039.81,1188.38 2040.4,1188.38 2040.98,1188.38 2041.57,1188.38 2042.15,1188.38 2042.74,1188.38 2043.33,1188.38 2043.91,1188.38 2044.5,1188.38 2045.09,1188.38 2045.67,1188.38 2046.26,1188.38 2046.85,1188.38 2047.43,1188.38 2048.02,1188.38 2048.6,1188.38 2049.19,1188.38 2049.78,1188.38 2050.36,1188.38 2050.95,1188.38 2051.54,1188.38 2052.12,1188.38 2052.71,1188.38 2053.3,1188.38 2053.88,1188.38 2054.47,1188.38 2055.06,1188.38 2055.64,1188.38 2056.23,1188.38 2056.81,1188.38 2057.4,1188.38 2057.99,1188.38 2058.57,1188.38 2059.16,1188.38 2059.75,1188.38 2060.33,1188.38 2060.92,1188.38 2061.51,1188.38 2062.09,1188.38 2062.68,1188.38 2063.27,1188.38 2063.85,1188.38 2064.44,1188.38 2065.02,1188.38 2065.61,1188.38 2066.2,1188.38 2066.78,1188.38 2067.37,1188.38 2067.96,1188.38 2068.54,1188.38 2069.13,1188.38 2069.72,1188.38 2070.3,1188.38 2070.89,1188.38 2071.48,1188.38 2072.06,1188.38 2072.65,1188.38 2073.23,1188.38 2073.82,1188.38 2074.41,1188.38 2074.99,1188.38 2075.58,1188.38 2076.17,1188.38 2076.75,1188.38 2077.34,1188.38 2077.93,1188.38 2078.51,1188.38 2079.1,1188.38 2079.68,1188.38 2080.27,1188.38 2080.86,1188.38 2081.44,1188.38 2082.03,1188.38 2082.62,1188.38 2083.2,1188.38 2083.79,1188.38 2084.38,1188.38 2084.96,1188.38 2085.55,1188.38 2086.14,1188.38 2086.72,1188.38 2087.31,1188.38 2087.89,1188.38 2088.48,1188.38 2089.07,1188.38 2089.65,1188.38 2090.24,1188.38 2090.83,1188.38 2091.41,1188.38 2092,1188.38 2092.59,1188.38 2093.17,1188.38 2093.76,1188.38 2094.35,1188.38 2094.93,1188.38 2095.52,1188.38 2096.1,1188.38 2096.69,1188.38 2097.28,1188.38 2097.86,1188.38 2098.45,1188.38 2099.04,1188.38 2099.62,1188.38 2100.21,1188.38 2100.8,1188.38 2101.38,1188.38 2101.97,1188.38 2102.55,1188.38 2103.14,1188.38 2103.73,1188.38 2104.31,1188.38 2104.9,1188.38 2105.49,1188.38 2106.07,1188.38 2106.66,1188.38 2107.25,1188.38 2107.83,1188.38 2108.42,1188.38 2109.01,1188.38 2109.59,1188.38 2110.18,1188.38 2110.76,1188.38 2111.35,1188.38 2111.94,1188.38 2112.52,1188.38 2113.11,1188.38 2113.7,1188.38 2114.28,1188.38 2114.87,1188.38 2115.46,1188.38 2116.04,1188.38 2116.63,1188.38 2117.22,1188.38 2117.8,1188.38 2118.39,1188.38 2118.97,1188.38 2119.56,1188.38 2120.15,1188.38 2120.73,1188.38 2121.32,1188.38 2121.91,1188.38 2122.49,1188.38 2123.08,1188.38 2123.67,1188.38 2124.25,1188.38 2124.84,1188.38 2125.42,1188.38 2126.01,1188.38 2126.6,1188.38 2127.18,1188.38 2127.77,1188.38 2128.36,1188.38 2128.94,1188.38 2129.53,1188.38 2130.12,1188.38 2130.7,1188.38 2131.29,1188.38 2131.88,1188.38 2132.46,1188.38 2133.05,1188.38 2133.63,1188.38 2134.22,1188.38 2134.81,1188.38 2135.39,1188.38 2135.98,1188.38 2136.57,1188.38 2137.15,1188.38 2137.74,1188.38 2138.33,1188.38 2138.91,1188.38 2139.5,1188.38 2140.09,1188.38 2140.67,1188.38 2141.26,1188.38 2141.84,1188.38 2142.43,1188.38 2143.02,1188.38 2143.6,1188.38 2144.19,1188.38 2144.78,1188.38 2145.36,1188.38 2145.95,1188.38 2146.54,1188.38 2147.12,1188.38 2147.71,1188.38 2148.3,1188.38 2148.88,1188.38 2149.47,1188.38 2150.05,1188.38 2150.64,1188.38 2151.23,1188.38 2151.81,1188.38 2152.4,1188.38 2152.99,1188.38 2153.57,1188.38 2154.16,1188.38 2154.75,1188.38 2155.33,1188.38 2155.92,1188.38 2156.5,1188.38 2157.09,1188.38 2157.68,1188.38 2158.26,1188.38 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.56,1168.54 1405.04,899.083 \"/>\n<polyline clip-path=\"url(#clip702)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1207.67 985.439,1168.54 2158.26,1168.54 2158.26,1207.67 985.439,1207.67 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip700)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip703\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip700)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip700)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip700)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip703)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,1377.62 161.555,-125.047 162.114,995.32 162.673,-380.679 163.232,-1615.72 163.792,-2839.17 164.351,-3936 164.91,-4911.26 165.469,-5820.95 166.029,-6612.21 166.588,-6411.38 167.147,-7150.23 167.706,-7805.67 168.266,-8433.33 168.825,-8999.45 169.384,-9508 169.943,-9206.19 170.503,-8988.18 171.062,-8791.04 171.621,-9162.63 172.18,-9533.9 172.74,-9850.64 173.299,-10130.9 173.858,-9463.66 174.417,-9720.64 174.977,-9522.8 175.536,-9356.58 176.095,-9195.39 176.655,-9367.7 177.214,-9512.26 177.773,-9633.92 178.332,-9733.96 178.892,-9283.98 179.451,-9351.5 180.01,-9395.68 180.569,-9413.31 181.129,-9421.14 181.688,-9200.62 182.247,-8996.45 182.806,-8984.05 183.366,-8966.15 183.925,-8771.52 184.484,-8570.49 185.043,-8518.35 185.603,-8185.76 186.162,-7992.46 186.721,-7811.98 187.28,-7307.94 187.84,-7058.13 188.399,-6521.3 188.958,-6305.66 189.517,-6109.47 190.077,-6001.18 190.636,-5977.83 191.195,-5791.56 191.754,-5755.46 192.314,-5635.79 192.873,-5538.43 193.432,-5419.9 193.991,-5105.98 194.551,-5065.61 195.11,-4888.29 195.669,-4662.39 196.228,-4456.74 196.788,-4314.79 197.347,-4289.59 197.906,-4204.22 198.465,-4116.52 199.025,-4029.12 199.584,-3896.45 200.143,-3857.74 200.702,-3766.29 201.262,-3682.47 201.821,-3467.33 202.38,-3383.22 202.939,-3299.16 203.499,-3214.6 204.058,-3124.69 204.617,-2996.5 205.176,-2948.31 205.736,-2864.08 206.295,-2774.77 206.854,-2655.25 207.413,-2535.23 207.973,-2487.94 208.532,-2405.62 209.091,-2289.02 209.65,-2208.88 210.21,-2067.28 210.769,-1988.24 211.328,-1939.24 211.887,-1802.47 212.447,-1733.45 213.006,-1635.12 213.565,-1595.91 214.124,-1502.17 214.684,-1460.48 215.243,-1367.73 215.802,-1305.07 216.361,-1192.71 216.921,-1152.41 217.48,-1118.16 218.039,-1029.67 218.598,-948.408 219.158,-817.736 219.717,-741.425 220.276,-661.78 220.835,-636.357 221.395,-610.48 221.954,-562.988 222.513,-516.245 223.072,-445.626 223.632,-400.249 224.191,-358.387 224.75,-250.824 225.309,-209.238 225.869,-172.943 226.428,-171.732 226.987,-110.504 227.546,-73.361 228.106,-60.8463 228.665,16.7159 229.224,48.8101 229.783,84.0954 230.343,113.694 230.902,166.804 231.461,236.416 232.02,245.886 232.58,216.509 233.139,306.25 233.698,312.999 234.257,301.234 234.817,311.338 235.376,379.132 235.935,385.871 236.494,486.489 237.054,488.857 237.613,547.958 238.172,568.003 238.731,604.87 239.291,586.427 239.85,623.301 240.409,638.59 240.968,655.821 241.528,687.068 242.087,719.154 242.646,733.599 243.205,764.47 243.765,775.514 244.324,729.425 244.883,746.674 245.442,760.01 246.002,759.874 246.561,755.983 247.12,771.173 247.679,786.676 248.239,777.109 248.798,791.999 249.357,808.895 249.916,822.942 250.476,818.746 251.035,833.451 251.594,844.46 252.153,820.934 252.713,854.288 253.272,848.742 253.831,847.216 254.39,896.713 254.95,910.874 255.509,904.847 256.068,915.544 256.627,924.844 257.187,933.403 257.746,942.637 258.305,933.911 258.864,911.289 259.424,921.336 259.983,944.762 260.542,916.964 261.101,861.526 261.661,879.633 262.22,859.074 262.779,891.025 263.338,919.725 263.898,930.672 264.457,891.853 265.016,922.205 265.575,885.391 266.135,884.636 266.694,866.152 267.253,917.525 267.812,911.804 268.372,895.541 268.931,908.711 269.49,926.56 270.049,922.67 270.609,905.288 271.168,918.533 271.727,914.16 272.286,928.67 272.846,938.435 273.405,935.764 273.964,929.063 274.523,878.319 275.083,880.001 275.642,912.283 276.201,911.854 276.76,878.26 277.32,878.609 277.879,913.517 278.438,928.847 278.997,924.294 279.557,953.761 280.116,948.558 280.675,944.795 281.234,956.42 281.794,948.923 282.353,997.446 282.912,972.161 283.471,997.695 284.031,1009.49 284.59,1019.36 285.149,1024.81 285.708,1017.93 286.268,1024.26 286.827,1000.96 287.386,980.395 287.945,977.93 288.505,1006.55 289.064,981.069 289.623,976.869 290.182,1005.51 290.742,1031.52 291.301,989.248 291.86,954.119 292.419,967.695 292.979,966.343 293.538,1011.71 294.097,1007.57 294.656,984.962 295.216,978.201 295.775,972.254 296.334,997.911 296.893,989.964 297.453,984.84 298.012,977.984 298.571,958.576 299.13,985.109 299.69,978.596 300.249,986.634 300.808,961.235 301.368,968.581 301.927,980.51 302.486,1007.24 303.045,982.445 303.605,973.725 304.164,1004.55 304.723,978.492 305.282,1006.51 305.842,983.805 306.401,961.72 306.96,974.676 307.519,934.063 308.079,894.576 308.638,911.555 309.197,872.79 309.756,887.325 310.316,916.908 310.875,930.558 311.434,927.921 311.993,922.689 312.553,937.106 313.112,933.419 313.671,946.184 314.23,926.064 314.79,889.289 315.349,888.195 315.908,899.087 316.467,942.672 317.027,937.784 317.586,922.066 318.145,883.665 318.704,865.433 319.264,865.562 319.823,863.514 320.382,861.457 320.941,857.383 321.501,867.947 322.06,865.443 322.619,864.376 323.178,864.547 323.738,832.439 324.297,849.341 324.856,849.4 325.415,848.284 325.975,882.971 326.534,895.871 327.093,940.814 327.652,920.067 328.212,916.89 328.771,913.131 329.33,939.102 329.889,914.328 330.449,958.717 331.008,970.37 331.567,944.296 332.126,920.456 332.686,915.999 333.245,910.03 333.804,903.769 334.363,934.565 334.923,927.418 335.482,921.06 336.041,915.296 336.6,925.546 337.16,920.803 337.719,932.577 338.278,927.173 338.837,925.37 339.397,937.559 339.956,931.361 340.515,976.971 341.074,969.858 341.634,977.185 342.193,969.775 342.752,962.679 343.311,971.403 343.871,966.09 344.43,910.796 344.989,871.261 345.548,834.201 346.108,819.871 346.667,821.981 347.226,773.909 347.785,787.714 348.345,788.092 348.904,791.052 349.463,804.879 350.022,756.982 350.582,779.036 351.141,848.811 351.7,830.097 352.259,845.989 352.819,828.39 353.378,807.19 353.937,823.563 354.496,822.859 355.056,854.019 355.615,819.055 356.174,817.457 356.733,802.52 357.293,786.839 357.852,787.319 358.411,818.308 358.97,835.618 359.53,850.042 360.089,843.81 360.648,846.259 361.207,844.458 361.767,857.656 362.326,824.985 362.885,807.199 363.444,839.713 364.004,852.457 364.563,848.569 365.122,843.174 365.681,838.875 366.241,852.706 366.8,850.036 367.359,847.107 367.918,859.15 368.478,838.239 369.037,819.16 369.596,832.565 370.155,829.283 370.715,840.591 371.274,853.376 371.833,848.713 372.392,826.265 372.952,790.752 373.511,792.784 374.07,806.347 374.629,823.195 375.189,803.959 375.748,775.224 376.307,791.562 376.866,823.028 377.426,822.708 377.985,802.803 378.544,816.199 379.103,800.173 379.663,798.99 380.222,798.733 380.781,814.508 381.34,812.725 381.9,825.047 382.459,854.281 383.018,804.053 383.577,803.021 384.137,805.469 384.696,803.922 385.255,782.697 385.814,817.967 386.374,814.221 386.933,833.265 387.492,829.466 388.051,857.861 388.611,854.758 389.17,849.107 389.729,827.005 390.288,822.53 390.848,818.421 391.407,815.016 391.966,842.813 392.525,824.702 393.085,808.853 393.644,839.545 394.203,834.88 394.762,814.077 395.322,809.369 395.881,807.735 396.44,772.322 396.999,772.818 397.559,774.082 398.118,759.687 398.677,727.581 399.236,729.651 399.796,733.998 400.355,749.926 400.914,768.237 401.473,771.03 402.033,736.367 402.592,720.554 403.151,737.739 403.71,775.389 404.27,759.67 404.829,739.034 405.388,771.64 405.947,769.544 406.507,771.797 407.066,772.099 407.625,771.416 408.184,772.568 408.744,753.403 409.303,788.441 409.862,787.44 410.421,786.688 410.981,814.378 411.54,811.992 412.099,760.626 412.658,780.449 413.218,778.484 413.777,826.825 414.336,825.231 414.895,819.143 415.455,833.49 416.014,847.122 416.573,826.007 417.132,839.05 417.692,853.152 418.251,828.92 418.81,840.556 419.369,870.855 419.929,831.726 420.488,860.613 421.047,855.388 421.606,831.063 422.166,825.393 422.725,853.937 423.284,848.091 423.843,860.227 424.403,859.146 424.962,854.373 425.521,833.011 426.08,814.492 426.64,793.228 427.199,774.931 427.758,759.262 428.318,722.707 428.877,738.88 429.436,751.946 429.995,763.73 430.555,792.852 431.114,789.821 431.673,786.764 432.232,768.114 432.792,749.076 433.351,748.528 433.91,700.054 434.469,702.06 435.029,702.911 435.588,720.381 436.147,709.676 436.706,711.037 437.266,661.429 437.825,664.294 438.384,719.237 438.943,722.236 439.503,742.468 440.062,726.676 440.621,743.129 441.18,759.566 441.74,822.801 442.299,832.334 442.858,811.66 443.417,791.497 443.977,802.861 444.536,782.054 445.095,763.195 445.654,777.179 446.214,806.049 446.773,819.782 447.332,849.789 447.891,846.59 448.451,810.448 449.01,807.321 449.569,802.273 450.128,767.514 450.688,749.972 451.247,796.878 451.806,778.87 452.365,760.26 452.925,778.919 453.484,779.076 454.043,746.767 454.602,729.914 455.162,744.688 455.721,712.926 456.28,695.195 456.839,711.639 457.399,712.225 457.958,730.591 458.517,744.341 459.076,712.547 459.636,731.324 460.195,714.678 460.754,714.265 461.313,736.867 461.873,739.671 462.432,739.831 462.991,754.898 463.55,737.329 464.11,737.811 464.669,771.201 465.228,733.997 465.787,717.219 466.347,765.25 466.906,731.981 467.465,733.396 468.024,688.241 468.584,655.885 469.143,676.987 469.702,681.248 470.261,734.353 470.821,766.078 471.38,765.441 471.939,730.66 472.498,699.517 473.058,700.813 473.617,715.902 474.176,713.786 474.735,697.59 475.295,699.303 475.854,699.166 476.413,716.863 476.972,649.023 477.532,621.966 478.091,645.862 478.65,649.2 479.209,653.697 479.769,673.438 480.328,691.591 480.887,679.827 481.446,683.707 482.006,672.59 482.565,693.267 483.124,677.843 483.683,680.421 484.243,729.321 484.802,760.228 485.361,759.895 485.92,756.025 486.48,772.821 487.039,773.072 487.598,790.303 488.157,785.642 488.717,814.121 489.276,810.699 489.835,825.019 490.394,838.164 490.954,845.033 491.513,855.463 492.072,851.754 492.631,828.798 493.191,791.22 493.75,802.692 494.309,766.264 494.868,782.553 495.428,746.623 495.987,745.306 496.546,745.368 497.105,758.417 497.665,737.407 498.224,701.168 498.783,687.75 499.342,674.366 499.902,675.479 500.461,677.752 501.02,683.11 501.579,715.69 502.139,702.108 502.698,672.442 503.257,706.249 503.816,691.84 504.376,693.979 504.935,698.053 505.494,716.606 506.053,715.833 506.613,715.408 507.172,732.813 507.731,713.477 508.29,697.745 508.85,730.323 509.409,715.614 509.968,700.449 510.527,700.22 511.087,667.51 511.646,651.927 512.205,640.053 512.764,661.976 513.324,664.731 513.883,681.753 514.442,665.585 515.001,684.586 515.561,717.435 516.12,717.258 516.679,732.585 517.238,716.275 517.798,732.807 518.357,732.844 518.916,732.42 519.475,730.684 520.035,744.732 520.594,745.724 521.153,757.734 521.712,788.347 522.272,767.066 522.831,733.153 523.39,731.816 523.949,747.508 524.509,779.888 525.068,763.655 525.627,728.222 526.186,729.999 526.746,713.786 527.305,727.08 527.864,726.995 528.423,711.436 528.983,713.346 529.542,712.552 530.101,717.114 530.66,717.723 531.22,736.074 531.779,781.127 532.338,775.229 532.897,756.446 533.457,737.172 534.016,721.062 534.575,718.577 535.134,717.935 535.694,686.904 536.253,722.716 536.812,709.017 537.371,727.681 537.931,742.92 538.49,741.971 539.049,758.568 539.608,755.096 540.168,724.085 540.727,754.633 541.286,783.909 541.845,763.192 542.405,763.453 542.964,777.364 543.523,755.882 544.082,736.936 544.642,750.97 545.201,764.04 545.76,730.476 546.319,729.197 546.879,758.967 547.438,759.414 547.997,754.958 548.556,750.085 549.116,762.77 549.675,775.47 550.234,773.908 550.793,787.021 551.353,785.073 551.912,779.22 552.471,743.447 553.031,742.265 553.59,741.064 554.149,738.615 554.708,742.596 555.268,721.903 555.827,701.93 556.386,718.497 556.945,683.123 557.505,682.494 558.064,684.306 558.623,684.303 559.182,717.386 559.742,700.754 560.301,702.887 560.86,721.219 561.419,736.981 561.979,716.386 562.538,714.71 563.097,713.964 563.656,712.208 564.216,728.965 564.775,742.969 565.334,735.749 565.893,764.787 566.453,744.977 567.012,755.688 567.571,765.843 568.13,782.172 568.69,765.294 569.249,743.563 569.808,740.357 570.367,674.732 570.927,662.119 571.486,681.036 572.045,699.284 572.604,734.026 573.164,751.112 573.723,780.157 574.282,743.393 574.841,756.442 575.401,751.64 575.96,765.538 576.519,762.024 577.078,741.524 577.638,739.15 578.197,737.459 578.756,753.501 579.315,751.214 579.875,718.652 580.434,704.16 580.993,701.501 581.552,699.575 582.112,701.882 582.671,717.489 583.23,734.29 583.789,746.707 584.349,745.513 584.908,759.373 585.467,758.412 586.026,758.026 586.586,742.794 587.145,738.605 587.704,735.802 588.263,747.53 588.823,731.561 589.382,729.934 589.941,697.308 590.5,680.454 591.06,693.982 591.619,661.492 592.178,681.394 592.737,682.038 593.297,683.85 593.856,685.29 594.415,671.753 594.974,640.739 595.534,644.094 596.093,645.432 596.652,651.207 597.211,670.635 597.771,689.047 598.33,704.911 598.889,717.039 599.448,712.698 600.008,727.88 600.567,761.01 601.126,760.399 601.685,760.366 602.245,774.609 602.804,819.029 603.363,810.291 603.922,789.796 604.482,799.67 605.041,763.458 605.6,778.172 606.159,757.222 606.719,740.785 607.278,706.047 607.837,724 608.396,739.052 608.956,718.634 609.515,685.604 610.074,650.446 610.633,633.868 611.193,653.999 611.752,657.215 612.311,626.268 612.87,596.173 613.43,614.995 613.989,619.997 614.548,637.381 615.107,672.797 615.667,691.825 616.226,675.862 616.785,673.903 617.344,674.352 617.904,662.518 618.463,712.156 619.022,693.952 619.581,662.17 620.141,645.743 620.7,647.589 621.259,636.748 621.818,639.978 622.378,657.961 622.937,689.389 623.496,643.51 624.055,645.466 624.615,700.038 625.174,713.792 625.733,679.773 626.292,650.645 626.852,655.702 627.411,641.688 627.97,641.146 628.529,678.414 629.089,727.253 629.648,712.223 630.207,710.835 630.766,728.971 631.326,697.252 631.885,710.055 632.444,660.972 633.003,679.109 633.563,662.33 634.122,697.285 634.681,694.382 635.24,691.221 635.8,694.24 636.359,697.173 636.918,730.727 637.477,731.113 638.037,745.624 638.596,744.382 639.155,742.203 639.714,755.66 640.274,771.63 640.833,766.707 641.392,782.863 641.951,725.792 642.511,724.391 643.07,720.286 643.629,698.977 644.188,710.907 644.748,726.596 645.307,726.023 645.866,725.51 646.425,707.227 646.985,750.868 647.544,733.151 648.103,698.954 648.662,714.572 649.222,684.535 649.781,701.409 650.34,704.451 650.899,738.361 651.459,735.941 652.018,750.486 652.577,745.356 653.136,741.019 653.696,723.756 654.255,736.186 654.814,732.099 655.373,764.706 655.933,678.657 656.492,679.329 657.051,697.364 657.61,697.071 658.17,715.413 658.729,695.489 659.288,714.306 659.847,699.029 660.407,700.687 660.966,699.154 661.525,715.714 662.084,716.891 662.644,714.759 663.203,729.45 663.762,678.043 664.321,663.446 664.881,635.816 665.44,619.115 665.999,636.459 666.558,640.444 667.118,659.497 667.677,660.722 668.236,648.027 668.795,651.092 669.355,654.852 669.914,659.615 670.473,660.713 671.032,648.575 671.592,636.054 672.151,637.783 672.71,624.472 673.269,597.012 673.829,582.723 674.388,575.673 674.947,567.133 675.506,591.564 676.066,612.31 676.625,616.536 677.184,635.528 677.743,638.189 678.303,672.153 678.862,656.203 679.421,658.673 679.981,675.358 680.54,658.496 681.099,646.362 681.658,697.647 682.218,700.691 682.777,701.984 683.336,714.515 683.895,697.575 684.455,747.859 685.014,746.104 685.573,713.09 686.132,677.587 686.692,693.03 687.251,673.857 687.81,675.617 688.369,694.597 688.929,677.956 689.488,647.944 690.047,648.791 690.606,668.485 691.166,641.07 691.725,642.835 692.284,648.412 692.843,652.893 693.403,578.273 693.962,584.967 694.521,593.855 695.08,570.195 695.64,591.987 696.199,645.217 696.758,648.963 697.317,635.641 697.877,642.693 698.436,661.822 698.995,667.261 699.554,695.368 700.114,728.844 700.673,726.667 701.232,741.886 701.791,771.657 702.351,767.709 702.91,780.786 703.469,791.717 704.028,786.721 704.588,778.396 705.147,791.414 705.706,802.276 706.265,778.275 706.825,761.254 707.384,789.062 707.943,815.919 708.502,809.011 709.062,799.94 709.621,792.754 710.18,786.857 710.739,785.78 711.299,764.008 711.858,790.113 712.417,801.287 712.976,749.651 713.536,747.193 714.095,759.346 714.654,754.154 715.213,782.612 715.773,809.475 716.332,768.178 716.891,746.791 717.45,740.873 718.01,751.846 718.569,751.897 719.128,751.412 719.687,783.364 720.247,795.048 720.806,806.704 721.365,798.581 721.924,809.584 722.484,803.401 723.043,797.458 723.602,789.409 724.161,767.571 724.721,730.408 725.28,745.738 725.839,692.604 726.398,725.2 726.958,738.97 727.517,751.862 728.076,761.646 728.635,759.196 729.195,755.982 729.754,719.079 730.313,767.243 730.872,731.048 731.432,729.326 731.991,726.772 732.55,705.961 733.109,723.839 733.669,690.652 734.228,706.725 734.787,718.895 735.346,698.761 735.906,701.058 736.465,702.93 737.024,733.794 737.583,713.768 738.143,710.301 738.702,713.741 739.261,709.805 739.82,676.128 740.38,661.099 740.939,663.626 741.498,662.55 742.057,661.467 742.617,628.357 743.176,599.959 743.735,602.516 744.294,589.569 744.854,609.528 745.413,600.74 745.972,605.291 746.531,625.983 747.091,614.89 747.65,633.931 748.209,637.184 748.768,639.537 749.328,625.21 749.887,644.164 750.446,646.024 751.005,633.693 751.565,606.788 752.124,629.154 752.683,600.783 753.242,625.696 753.802,627.408 754.361,643.27 754.92,692.236 755.479,691.396 756.039,678.243 756.598,679.581 757.157,680.089 757.716,682.076 758.276,680.979 758.835,680.816 759.394,663.433 759.953,663.507 760.513,648.154 761.072,586.473 761.631,577.3 762.19,601.597 762.75,607.68 763.309,614.219 763.868,634.425 764.427,637.799 764.987,657.912 765.546,660.1 766.105,645.647 766.664,665.389 767.224,667.234 767.783,672.111 768.342,710.044 768.901,694.021 769.461,694.025 770.02,694.661 770.579,692.971 771.138,696.204 771.698,678.807 772.257,727.516 772.816,724.431 773.375,707.224 773.935,711.187 774.494,708.943 775.053,705.502 775.612,718.174 776.172,699.11 776.731,682.179 777.29,695.696 777.849,727.387 778.409,743.873 778.968,740.932 779.527,724.339 780.086,707.554 780.646,709.923 781.205,725.188 781.764,736.976 782.323,717.985 782.883,713.608 783.442,697.93 784.001,698.084 784.56,666.129 785.12,669.446 785.679,688.918 786.238,691.808 786.797,690.907 787.357,675.747 787.916,693.678 788.475,692.452 789.034,643.054 789.594,662.659 790.153,650.06 790.712,653.428 791.271,637.545 791.831,642.11 792.39,629.561 792.949,664.81 793.508,651.298 794.068,637.521 794.627,658.53 795.186,643.67 795.745,677.285 796.305,647.811 796.864,602.602 797.423,641.167 797.982,662.478 798.542,677.841 799.101,663.189 799.66,682.836 800.219,682.19 800.779,663.187 801.338,665.322 801.897,666.646 802.456,648.35 803.016,680.514 803.575,646.854 804.134,697.63 804.693,697.928 805.253,696.242 805.812,698.05 806.371,668.518 806.931,702.616 807.49,731.699 808.049,731.876 808.608,714.955 809.168,727.198 809.727,697.695 810.286,681.835 810.845,668.966 811.405,621.513 811.964,621.909 812.523,611.436 813.082,630.913 813.642,650.592 814.201,654.167 814.76,656.245 815.319,674.985 815.879,677.236 816.438,693.737 816.997,694.441 817.556,706.293 818.116,706.953 818.675,705.634 819.234,704.65 819.793,718.745 820.353,751.833 820.912,749.161 821.471,714.687 822.03,745.293 822.59,722.777 823.149,737.782 823.708,721.724 824.267,781.462 824.827,775.804 825.386,742.062 825.945,722.354 826.504,688.664 827.064,688.334 827.623,700.517 828.182,700.802 828.741,699.772 829.301,720.233 829.86,672.035 830.419,673.368 830.978,703.126 831.538,737.716 832.097,731.607 832.656,766.654 833.215,778.053 833.775,774.442 834.334,735.818 834.893,736.579 835.452,736.112 836.012,713.458 836.571,715.276 837.13,731.541 837.689,727.83 838.249,724.18 838.808,752.557 839.367,764.679 839.926,777.582 840.486,787.559 841.045,799.756 841.604,793.167 842.163,787.232 842.723,768.596 843.282,807.039 843.841,769.755 844.4,764.36 844.96,743.636 845.519,742.363 846.078,723.741 846.637,734.061 847.197,727.301 847.756,722.664 848.315,706.015 848.874,701.197 849.434,699.418 849.993,729.077 850.552,737.963 851.111,750.789 851.671,746.066 852.23,759.469 852.789,724.658 853.348,724.921 853.908,707.416 854.467,739.315 855.026,734.422 855.585,713.096 856.145,694.96 856.704,661.662 857.263,645.229 857.822,647.234 858.382,684.851 858.941,698.096 859.5,713.092 860.059,726.445 860.619,708.581 861.178,707.481 861.737,657.427 862.296,624.561 862.856,642.976 863.415,626.388 863.974,676.02 864.533,679.24 865.093,660.665 865.652,627.208 866.211,629.032 866.77,628.422 867.33,649.39 867.889,681.483 868.448,733.181 869.007,680.256 869.567,665.929 870.126,654.758 870.685,623.153 871.244,656.111 871.804,689.164 872.363,672.653 872.922,688.921 873.481,657.531 874.041,659.394 874.6,644.228 875.159,644.831 875.718,645.398 876.278,648.72 876.837,637.485 877.396,688.879 877.955,723.007 878.515,724.701 879.074,707.348 879.633,691.439 880.192,690.62 880.752,707.067 881.311,659.264 881.87,611.768 882.429,616.461 882.989,638.091 883.548,642.373 884.107,648.391 884.666,633.559 885.226,636.453 885.785,622.734 886.344,627.314 886.903,630.531 887.463,634.71 888.022,670.615 888.581,653.289 889.14,687.737 889.7,639.953 890.259,660.54 890.818,630.592 891.377,603.257 891.937,621.792 892.496,628.347 893.055,645.46 893.614,666.005 894.174,666.744 894.733,651.564 895.292,652.597 895.851,622.727 896.411,623.291 896.97,657.256 897.529,676.696 898.088,693.822 898.648,739.621 899.207,736.7 899.766,734.639 900.325,748.39 900.885,746.031 901.444,710.807 902.003,707.483 902.562,691.003 903.122,691.922 903.681,659.36 904.24,676.677 904.799,678.808 905.359,678.788 905.918,679.509 906.477,667.11 907.036,666.629 907.596,681.828 908.155,697.554 908.714,712.648 909.273,726.574 909.833,756.339 910.392,752.407 910.951,699.46 911.51,728.28 912.07,788.96 912.629,767.77 913.188,763.307 913.747,758.031 914.307,735.076 914.866,710.667 915.425,754.853 915.984,765.809 916.544,775.54 917.103,770.567 917.662,750.278 918.221,777.145 918.781,756.268 919.34,732.159 919.899,747.295 920.458,728.522 921.018,693.627 921.577,661.118 922.136,678.656 922.695,696.784 923.255,712.281 923.814,693.079 924.373,752.837 924.932,701.295 925.492,744.217 926.051,719.255 926.61,677.324 927.169,690.651 927.729,674.32 928.288,678.826 928.847,629.345 929.406,615.143 929.966,620.6 930.525,627.031 931.084,630.766 931.644,647.468 932.203,648.884 932.762,635.764 933.321,639.639 933.881,592.715 934.44,581.185 934.999,617.937 935.558,638.371 936.118,637.551 936.677,671.354 937.236,656.575 937.795,676.054 938.355,658.953 938.914,655.394 939.473,671.808 940.032,688.278 940.592,638.858 941.151,655.073 941.71,640.709 942.269,593.798 942.829,613.271 943.388,631.611 943.947,653.179 944.506,638.249 945.066,672.664 945.625,623.833 946.184,659.596 946.743,696.595 947.303,696.164 947.862,692.959 948.421,675.743 948.98,691.519 949.54,658.515 950.099,693.023 950.658,711.056 951.217,711.202 951.777,725.188 952.336,741.288 952.895,721.914 953.454,705.648 954.014,722.033 954.573,721.281 955.132,749.697 955.691,719.131 956.251,734.342 956.81,746.305 957.369,727.855 957.928,760.524 958.488,754.053 959.047,751.645 959.606,715.876 960.165,763.083 960.725,761.035 961.284,740.945 961.843,737.7 962.402,750.376 962.962,743.191 963.521,707.582 964.08,692.06 964.639,709.293 965.199,676.828 965.758,661.252 966.317,660.295 966.876,662.906 967.436,630.621 967.995,629.052 968.554,629.91 969.113,600.71 969.673,591.753 970.232,611.255 970.791,665.213 971.35,648.108 971.91,665.497 972.469,666.692 973.028,686.442 973.587,702.114 974.147,700.932 974.706,701.217 975.265,670.255 975.824,622.43 976.384,660.264 976.943,664.923 977.502,635.39 978.061,637.044 978.621,638.698 979.18,623.789 979.739,647.863 980.298,664.712 980.858,678.544 981.417,629.912 981.976,633.021 982.535,642.088 983.095,644.956 983.654,646.735 984.213,664.011 984.772,685.929 985.332,686.157 985.891,701.648 986.45,699.03 987.009,648.681 987.569,652.196 988.128,637.182 988.687,621.927 989.246,560.243 989.806,552.261 990.365,525.784 990.924,505.135 991.483,512.08 992.043,520.504 992.602,527.31 993.161,566.245 993.72,624.584 994.28,661.226 994.839,663.861 995.398,664.852 995.957,667.194 996.517,671.317 997.076,675.107 997.635,676.834 998.194,692.024 998.754,675.849 999.313,675.31 999.872,674.998 1000.43,642.898 1000.99,643.922 1001.55,647.479 1002.11,650.149 1002.67,655.609 1003.23,690.605 1003.79,705.868 1004.35,720.668 1004.91,736.655 1005.46,767.08 1006.02,783.857 1006.58,714.877 1007.14,715.174 1007.7,710.423 1008.26,695.145 1008.82,695.893 1009.38,756.893 1009.94,749.101 1010.5,745.944 1011.06,709.55 1011.62,677.02 1012.18,692.069 1012.73,693.707 1013.29,679.061 1013.85,677.274 1014.41,678.297 1014.97,659.977 1015.53,660.348 1016.09,676.208 1016.65,659.733 1017.21,598.063 1017.77,621.539 1018.33,659.481 1018.89,664.516 1019.45,670.33 1020.01,687.921 1020.56,689.102 1021.12,732.81 1021.68,728.688 1022.24,676.948 1022.8,691.688 1023.36,690.327 1023.92,704.461 1024.48,669.408 1025.04,703.028 1025.6,685.492 1026.16,684.78 1026.72,686.602 1027.28,702.023 1027.83,732.842 1028.39,810.984 1028.95,821.456 1029.51,812.426 1030.07,819.651 1030.63,796.364 1031.19,800.809 1031.75,807.02 1032.31,804.254 1032.87,783.874 1033.43,780.593 1033.99,775.319 1034.55,769.713 1035.1,748.646 1035.66,762.799 1036.22,770.583 1036.78,748.032 1037.34,730.157 1037.9,728.028 1038.46,724.882 1039.02,725.181 1039.58,722.88 1040.14,687.888 1040.7,704.009 1041.26,703.807 1041.82,717.427 1042.38,701.666 1042.93,687.916 1043.49,670.667 1044.05,640.301 1044.61,639.719 1045.17,607.422 1045.73,581.049 1046.29,586.963 1046.85,624.612 1047.41,641.193 1047.97,643.649 1048.53,660.083 1049.09,647.607 1049.65,651.341 1050.2,637.507 1050.76,641.173 1051.32,673.593 1051.88,676.981 1052.44,662.355 1053,662.658 1053.56,678.673 1054.12,680.786 1054.68,693.549 1055.24,720.96 1055.8,714.756 1056.36,726.213 1056.92,709.523 1057.48,709.749 1058.03,708.342 1058.59,737.865 1059.15,750.517 1059.71,746.167 1060.27,709.445 1060.83,661.565 1061.39,662.889 1061.95,696.568 1062.51,713.076 1063.07,746.601 1063.63,758.918 1064.19,721.998 1064.75,700.705 1065.3,699.531 1065.86,683.297 1066.42,730.506 1066.98,746.442 1067.54,725.151 1068.1,690.307 1068.66,693.007 1069.22,709.721 1069.78,690.539 1070.34,656.552 1070.9,653.087 1071.46,670.479 1072.02,636.871 1072.57,671.798 1073.13,672.912 1073.69,673.787 1074.25,674.398 1074.81,677.023 1075.37,677.815 1075.93,690.878 1076.49,703.162 1077.05,723.279 1077.61,676.536 1078.17,695.546 1078.73,695.062 1079.29,695.911 1079.85,664.9 1080.4,667.431 1080.96,666.045 1081.52,651.172 1082.08,636.638 1082.64,605.847 1083.2,609.839 1083.76,613.21 1084.32,635.587 1084.88,623.306 1085.44,626.659 1086,633.894 1086.56,636.164 1087.12,652.422 1087.67,686.855 1088.23,687.895 1088.79,675.536 1089.35,671.399 1089.91,636.666 1090.47,640.219 1091.03,657.702 1091.59,623.09 1092.15,622.741 1092.71,659.181 1093.27,646.583 1093.83,652.314 1094.39,634.898 1094.94,620.891 1095.5,622.613 1096.06,607.451 1096.62,610.641 1097.18,582.617 1097.74,621.52 1098.3,612.712 1098.86,614.869 1099.42,671.942 1099.98,721.309 1100.54,723.865 1101.1,736.793 1101.66,721.025 1102.22,720.788 1102.77,718.428 1103.33,735.961 1103.89,733.438 1104.45,748.842 1105.01,743.962 1105.57,806.324 1106.13,832.736 1106.69,842.383 1107.25,838.917 1107.81,861.613 1108.37,850.722 1108.93,860.722 1109.49,836.399 1110.04,831.492 1110.6,794.233 1111.16,739.053 1111.72,701.875 1112.28,698.867 1112.84,698.549 1113.4,714.848 1113.96,727.869 1114.52,743.048 1115.08,740.078 1115.64,724.059 1116.2,720.149 1116.76,721.964 1117.31,723.053 1117.87,737.054 1118.43,701.228 1118.99,717.43 1119.55,699.843 1120.11,681.018 1120.67,712.746 1121.23,727.74 1121.79,804.555 1122.35,813.56 1122.91,789.364 1123.47,765.066 1124.03,727.69 1124.59,691.003 1125.14,657.287 1125.7,661.014 1126.26,631.769 1126.82,636.236 1127.38,638.638 1127.94,645.452 1128.5,614.972 1129.06,605.587 1129.62,608.6 1130.18,629.846 1130.74,536.131 1131.3,563.018 1131.86,553.713 1132.41,525 1132.97,515.785 1133.53,540.837 1134.09,596.669 1134.65,635.177 1135.21,656.054 1135.77,640.519 1136.33,644.634 1136.89,629.24 1137.45,628.946 1138.01,631.691 1138.57,636.591 1139.13,658.107 1139.68,678.682 1140.24,665.791 1140.8,679.336 1141.36,662.902 1141.92,667.257 1142.48,696.48 1143.04,696.497 1143.6,694.954 1144.16,742.842 1144.72,738.597 1145.28,718.571 1145.84,682.529 1146.4,648.607 1146.96,651.427 1147.51,653.904 1148.07,625.745 1148.63,658.889 1149.19,644.86 1149.75,629.232 1150.31,635.345 1150.87,653.737 1151.43,658.298 1151.99,661.861 1152.55,675.878 1153.11,691.698 1153.67,724.722 1154.23,722.349 1154.78,702.6 1155.34,687.171 1155.9,688.352 1156.46,655.206 1157.02,637.738 1157.58,639.787 1158.14,674.822 1158.7,678.508 1159.26,730.04 1159.82,742.065 1160.38,741.152 1160.94,753.026 1161.5,733.221 1162.05,729.859 1162.61,695.513 1163.17,727.801 1163.73,726.537 1164.29,708.444 1164.85,724.961 1165.41,703.805 1165.97,718.174 1166.53,699.093 1167.09,680.372 1167.65,712.812 1168.21,708.12 1168.77,709.877 1169.33,709.291 1169.88,693.06 1170.44,697.173 1171,694.386 1171.56,660.857 1172.12,695.712 1172.68,694.166 1173.24,675.571 1173.8,694.092 1174.36,743.119 1174.92,755.425 1175.48,722.454 1176.04,703.179 1176.6,701.803 1177.15,749.11 1177.71,759.82 1178.27,740.057 1178.83,754.603 1179.39,761.521 1179.95,770.401 1180.51,751.563 1181.07,745.764 1181.63,742.902 1182.19,725.221 1182.75,721.941 1183.31,701.689 1183.87,713.793 1184.43,778.749 1184.98,724.714 1185.54,707.255 1186.1,708.311 1186.66,708.881 1187.22,725.23 1187.78,707.963 1188.34,705.703 1188.9,707.913 1189.46,707.916 1190.02,689.71 1190.58,690.116 1191.14,672.828 1191.7,676.488 1192.25,679.365 1192.81,711.586 1193.37,711.442 1193.93,723.193 1194.49,750.232 1195.05,761.188 1195.61,739.287 1196.17,718.33 1196.73,681.023 1197.29,696.232 1197.85,646.997 1198.41,616.744 1198.97,639.738 1199.52,658.679 1200.08,641.483 1200.64,656.444 1201.2,655.168 1201.76,670.734 1202.32,671.415 1202.88,703.708 1203.44,686.568 1204,700.288 1204.56,716.176 1205.12,745.803 1205.68,709.731 1206.24,692.805 1206.8,706.576 1207.35,737.491 1207.91,720.624 1208.47,720.391 1209.03,718.84 1209.59,686.991 1210.15,706.592 1210.71,724.763 1211.27,704.251 1211.83,685.282 1212.39,662.377 1212.95,630.82 1213.51,649.092 1214.07,683.087 1214.62,664.462 1215.18,713.804 1215.74,709.294 1216.3,704.223 1216.86,706.942 1217.42,706.199 1217.98,672.092 1218.54,672.272 1219.1,657.887 1219.66,675.647 1220.22,640.196 1220.78,628.002 1221.34,613.593 1221.89,614.002 1222.45,601.177 1223.01,641.833 1223.57,643.683 1224.13,644.015 1224.69,632.218 1225.25,635.31 1225.81,670.92 1226.37,688.525 1226.93,688.579 1227.49,689.719 1228.05,653.816 1228.61,655.351 1229.17,623.28 1229.72,611.273 1230.28,617.731 1230.84,623.536 1231.4,627.81 1231.96,597.846 1232.52,604.089 1233.08,622.73 1233.64,626.955 1234.2,611.796 1234.76,615.193 1235.32,635.881 1235.88,639.655 1236.44,642.648 1236.99,661.289 1237.55,647.504 1238.11,686.463 1238.67,703.159 1239.23,655.892 1239.79,622.91 1240.35,609.741 1240.91,627.61 1241.47,647.752 1242.03,632.253 1242.59,651.269 1243.15,664.62 1243.71,650.04 1244.26,664.494 1244.82,649.256 1245.38,633.243 1245.94,638.762 1246.5,620.345 1247.06,608.966 1247.62,630.691 1248.18,680.757 1248.74,729.049 1249.3,747.053 1249.86,728.65 1250.42,696.239 1250.98,679.122 1251.54,696.914 1252.09,711.479 1252.65,722.72 1253.21,720.056 1253.77,702.3 1254.33,698.731 1254.89,700.667 1255.45,719.142 1256.01,703.873 1256.57,719.77 1257.13,700.407 1257.69,713.462 1258.25,696.705 1258.81,679.461 1259.36,633.289 1259.92,638.08 1260.48,642.427 1261.04,642.278 1261.6,679.268 1262.16,713.995 1262.72,725.488 1263.28,689.435 1263.84,691.082 1264.4,708.089 1264.96,705.632 1265.52,754.861 1266.08,767.161 1266.63,763.227 1267.19,789.193 1267.75,782.595 1268.31,744.572 1268.87,741.266 1269.43,740.381 1269.99,751.78 1270.55,761.008 1271.11,757.001 1271.67,690.972 1272.23,704.056 1272.79,700.288 1273.35,666.463 1273.91,681.585 1274.46,681.773 1275.02,682.717 1275.58,684.37 1276.14,668.624 1276.7,667.888 1277.26,685.299 1277.82,688.839 1278.38,706.224 1278.94,659.863 1279.5,658.832 1280.06,662.784 1280.62,663.048 1281.18,663.127 1281.73,652.077 1282.29,700.874 1282.85,665.424 1283.41,653.074 1283.97,670.099 1284.53,669.176 1285.09,655.421 1285.65,657.706 1286.21,674.18 1286.77,640.287 1287.33,660.856 1287.89,646.081 1288.45,651.066 1289,655.472 1289.56,721.887 1290.12,769.455 1290.68,798.943 1291.24,808.4 1291.8,817.235 1292.36,795.823 1292.92,772.973 1293.48,753.373 1294.04,753.193 1294.6,766.606 1295.16,762.766 1295.72,729.532 1296.28,711.003 1296.83,676.895 1297.39,662.257 1297.95,663.116 1298.51,648.05 1299.07,647.46 1299.63,645.937 1300.19,682.711 1300.75,684.363 1301.31,685.042 1301.87,688.283 1302.43,670.433 1302.99,671.692 1303.55,734.925 1304.1,748.853 1304.66,726.677 1305.22,739.469 1305.78,769.478 1306.34,732.257 1306.9,761.845 1307.46,742.338 1308.02,721.334 1308.58,718.4 1309.14,698.51 1309.7,699.983 1310.26,696.705 1310.82,698.909 1311.38,731.684 1311.93,746.324 1312.49,729.9 1313.05,741.385 1313.61,772.215 1314.17,765.436 1314.73,759.549 1315.29,771.594 1315.85,735.73 1316.41,719.097 1316.97,764.939 1317.53,713.643 1318.09,694.395 1318.65,678.335 1319.2,666.105 1319.76,653.795 1320.32,606.74 1320.88,642.984 1321.44,626.951 1322,610.412 1322.56,592.454 1323.12,598.088 1323.68,619.218 1324.24,675.298 1324.8,593.028 1325.36,629.269 1325.92,663.01 1326.47,713.376 1327.03,695.179 1327.59,695.613 1328.15,693.015 1328.71,693.384 1329.27,675.487 1329.83,711.641 1330.39,693.279 1330.95,680.631 1331.51,678.519 1332.07,672.823 1332.63,655.747 1333.19,654.725 1333.75,638.68 1334.3,590.24 1334.86,575.672 1335.42,598.007 1335.98,587.839 1336.54,580.229 1337.1,568.339 1337.66,579.679 1338.22,616.504 1338.78,635.589 1339.34,653.935 1339.9,674.673 1340.46,676.934 1341.02,694.819 1341.57,680.023 1342.13,665.074 1342.69,696.515 1343.25,726.72 1343.81,725.93 1344.37,738.365 1344.93,703.261 1345.49,701.972 1346.05,685.317 1346.61,653.796 1347.17,672.324 1347.73,706.11 1348.29,687.79 1348.84,687.753 1349.4,701.069 1349.96,715.563 1350.52,679.361 1351.08,698.651 1351.64,685.583 1352.2,704.441 1352.76,704.599 1353.32,703.198 1353.88,717.208 1354.44,714.116 1355,724.284 1355.56,674.025 1356.12,694.219 1356.67,693.228 1357.23,644.442 1357.79,634.363 1358.35,638.152 1358.91,640.047 1359.47,609.516 1360.03,616.54 1360.59,622.769 1361.15,645.317 1361.71,649.047 1362.27,697.856 1362.83,700.372 1363.39,650.939 1363.94,626.096 1364.5,625.772 1365.06,626.389 1365.62,628.417 1366.18,645.95 1366.74,618.008 1367.3,619.047 1367.86,588.298 1368.42,594.153 1368.98,597.531 1369.54,585.747 1370.1,593.219 1370.66,599.145 1371.21,590.503 1371.77,577.423 1372.33,600.955 1372.89,620.122 1373.45,609.169 1374.01,628.88 1374.57,636.021 1375.13,639.737 1375.69,627.075 1376.25,630.705 1376.81,665.602 1377.37,648.388 1377.93,665.264 1378.49,652.482 1379.04,667.786 1379.6,673.13 1380.16,654.855 1380.72,671.845 1381.28,668.88 1381.84,669.901 1382.4,667.307 1382.96,684.575 1383.52,751.913 1384.08,716.2 1384.64,743.278 1385.2,741.108 1385.76,721.905 1386.31,786.091 1386.87,798.518 1387.43,793.812 1387.99,790.171 1388.55,769.866 1389.11,762.615 1389.67,725.93 1390.23,723.884 1390.79,771.788 1391.35,748.457 1391.91,712.293 1392.47,694.644 1393.03,695.919 1393.58,694.384 1394.14,675.483 1394.7,677.92 1395.26,692.507 1395.82,726.14 1396.38,726.684 1396.94,754.259 1397.5,751.148 1398.06,713.583 1398.62,696.296 1399.18,678.712 1399.74,677.103 1400.3,674.349 1400.86,672.652 1401.41,688.39 1401.97,686.693 1402.53,703.566 1403.09,749.551 1403.65,752.06 1404.21,716.229 1404.77,715.003 1405.33,710.744 1405.89,727.162 1406.45,711.086 1407.01,692.587 1407.57,707.742 1408.13,707.172 1408.68,676.239 1409.24,675.858 1409.8,691.418 1410.36,673.674 1410.92,653.831 1411.48,689.667 1412.04,674.654 1412.6,673.679 1413.16,704.193 1413.72,734.077 1414.28,700.635 1414.84,717.496 1415.4,732.293 1415.95,779.694 1416.51,804.448 1417.07,796.66 1417.63,789.823 1418.19,733.437 1418.75,716.476 1419.31,683.361 1419.87,714.651 1420.43,713.161 1420.99,728.183 1421.55,710.231 1422.11,723.753 1422.67,723.023 1423.23,723.845 1423.78,740.086 1424.34,736.045 1424.9,751.022 1425.46,713.258 1426.02,695.134 1426.58,708.871 1427.14,707.639 1427.7,705.056 1428.26,704.335 1428.82,671.156 1429.38,670.781 1429.94,652.429 1430.5,608.921 1431.05,647.583 1431.61,651.267 1432.17,687.315 1432.73,706.167 1433.29,690.437 1433.85,689.943 1434.41,686.708 1434.97,655.148 1435.53,654.505 1436.09,687.328 1436.65,671.53 1437.21,637.367 1437.77,642.121 1438.33,659.119 1438.88,645.622 1439.44,663.121 1440,630.998 1440.56,651.898 1441.12,668.971 1441.68,668.962 1442.24,666.522 1442.8,668.163 1443.36,651.851 1443.92,624.483 1444.48,629.466 1445.04,635.835 1445.6,659.416 1446.15,661.598 1446.71,664.35 1447.27,682.515 1447.83,698.934 1448.39,681.88 1448.95,638.51 1449.51,622.008 1450.07,629.877 1450.63,649.473 1451.19,668.15 1451.75,666.358 1452.31,651.287 1452.87,667.956 1453.42,700.388 1453.98,697.212 1454.54,710.105 1455.1,713.396 1455.66,728.281 1456.22,725.485 1456.78,688.726 1457.34,688.962 1457.9,674.152 1458.46,688.888 1459.02,690.007 1459.58,690.114 1460.14,740.709 1460.7,771.024 1461.25,766.204 1461.81,760.088 1462.37,740.041 1462.93,724.105 1463.49,707.928 1464.05,693.17 1464.61,676.394 1465.17,677.783 1465.73,706.109 1466.29,703.912 1466.85,668.122 1467.41,667.119 1467.97,669.379 1468.52,653.647 1469.08,637.706 1469.64,638.972 1470.2,656.333 1470.76,672.276 1471.32,671.894 1471.88,636.635 1472.44,654.208 1473,639.615 1473.56,658.087 1474.12,656.938 1474.68,657.895 1475.24,641.266 1475.79,632.138 1476.35,635.004 1476.91,635.973 1477.47,639.499 1478.03,639.838 1478.59,644.937 1479.15,664.456 1479.71,679.231 1480.27,679.201 1480.83,660.298 1481.39,661.792 1481.95,663.94 1482.51,630.375 1483.07,631.946 1483.62,666.53 1484.18,651.827 1484.74,652.343 1485.3,652.27 1485.86,619.62 1486.42,669.89 1486.98,658.973 1487.54,626.419 1488.1,647.585 1488.66,633.618 1489.22,606.127 1489.78,645.163 1490.34,648.472 1490.89,651.121 1491.45,674.745 1492.01,674.268 1492.57,690.93 1493.13,722.337 1493.69,723.874 1494.25,689.81 1494.81,721.39 1495.37,719.156 1495.93,686.655 1496.49,671.594 1497.05,641.583 1497.61,625.362 1498.16,628.91 1498.72,650.418 1499.28,653.054 1499.84,622.719 1500.4,643.841 1500.96,693.414 1501.52,722.049 1502.08,717.177 1502.64,731.245 1503.2,709.261 1503.76,692.622 1504.32,689.932 1504.88,688.134 1505.44,669.725 1505.99,635.377 1506.55,652.934 1507.11,720.16 1507.67,734.94 1508.23,733.029 1508.79,748.009 1509.35,743.897 1509.91,757.962 1510.47,772.815 1511.03,767.052 1511.59,764.952 1512.15,758.456 1512.71,772.239 1513.26,765.162 1513.82,743.63 1514.38,774.186 1514.94,751.775 1515.5,765.845 1516.06,760.682 1516.62,709.006 1517.18,689.433 1517.74,688.877 1518.3,687.186 1518.86,668.153 1519.42,701.496 1519.98,668.99 1520.53,656.252 1521.09,642.996 1521.65,679.586 1522.21,710.783 1522.77,662.363 1523.33,666.152 1523.89,667.761 1524.45,636.987 1525.01,642.042 1525.57,644.362 1526.13,677.124 1526.69,693.269 1527.25,709.96 1527.81,725.441 1528.36,719.422 1528.92,765.405 1529.48,779.915 1530.04,759.34 1530.6,771.459 1531.16,722.323 1531.72,732.565 1532.28,718.274 1532.84,738.583 1533.4,732.704 1533.96,744.612 1534.52,741.723 1535.08,740.563 1535.63,739.052 1536.19,766.797 1536.75,779.354 1537.31,802.935 1537.87,826.221 1538.43,818.535 1538.99,813.066 1539.55,792.644 1540.11,751.209 1540.67,733.092 1541.23,763.137 1541.79,775.323 1542.35,753.832 1542.9,747.692 1543.46,810.944 1544.02,820.005 1544.58,828.403 1545.14,820.337 1545.7,827.585 1546.26,787.173 1546.82,778.778 1547.38,805.263 1547.94,782.194 1548.5,776.954 1549.06,772.299 1549.62,732.847 1550.18,765.271 1550.73,746.641 1551.29,743.304 1551.85,690.588 1552.41,687.764 1552.97,686.479 1553.53,656.464 1554.09,659.24 1554.65,647.198 1555.21,646.405 1555.77,615.794 1556.33,584.738 1556.89,590.492 1557.45,561.666 1558,552.055 1558.56,559.456 1559.12,551.294 1559.68,538.876 1560.24,548.273 1560.8,539.292 1561.36,530.429 1561.92,557.57 1562.48,597.245 1563.04,571.806 1563.6,591.048 1564.16,597.703 1564.72,618.499 1565.28,656.774 1565.83,642.938 1566.39,645.765 1566.95,649.339 1567.51,650.788 1568.07,686.207 1568.63,700.192 1569.19,684.53 1569.75,685.916 1570.31,703.733 1570.87,672.348 1571.43,671.794 1571.99,672.02 1572.55,670.263 1573.1,640.159 1573.66,640.217 1574.22,627.467 1574.78,632.807 1575.34,667.528 1575.9,687.34 1576.46,686.876 1577.02,653.489 1577.58,637.459 1578.14,638.541 1578.7,639.464 1579.26,671.547 1579.82,702.762 1580.37,703.626 1580.93,685.383 1581.49,654.405 1582.05,672.685 1582.61,678.621 1583.17,678.531 1583.73,680.429 1584.29,693.552 1584.85,694.491 1585.41,676.101 1585.97,649.026 1586.53,652.802 1587.09,668.354 1587.65,632.888 1588.2,637.406 1588.76,641.857 1589.32,632.76 1589.88,636.929 1590.44,675.599 1591,676.07 1591.56,736.647 1592.12,736.826 1592.68,720.02 1593.24,718.807 1593.8,732.887 1594.36,712.525 1594.92,696.489 1595.47,630.335 1596.03,601.109 1596.59,590.945 1597.15,595.3 1597.71,618.87 1598.27,636.449 1598.83,673.938 1599.39,689.989 1599.95,687.748 1600.51,672.959 1601.07,657.355 1601.63,692.185 1602.19,708.567 1602.74,660.205 1603.3,647.3 1603.86,681.769 1604.42,699.896 1604.98,714.213 1605.54,708.345 1606.1,758.28 1606.66,754.825 1607.22,702.723 1607.78,733.533 1608.34,717.923 1608.9,733.142 1609.46,714.293 1610.02,733.346 1610.57,713.559 1611.13,727.68 1611.69,710.074 1612.25,723.661 1612.81,701.562 1613.37,715.662 1613.93,727.785 1614.49,757.34 1615.05,720.719 1615.61,704.175 1616.17,719.669 1616.73,700.215 1617.29,683.466 1617.84,684.005 1618.4,698.596 1618.96,712.225 1619.52,728.246 1620.08,721.479 1620.64,736.427 1621.2,731.954 1621.76,762.522 1622.32,757.926 1622.88,756.659 1623.44,766.205 1624,762.272 1624.56,740.07 1625.11,722.058 1625.67,716.106 1626.23,730.577 1626.79,728.664 1627.35,742.982 1627.91,758.682 1628.47,720.741 1629.03,730.957 1629.59,696.726 1630.15,713.183 1630.71,698.457 1631.27,682.228 1631.83,667.672 1632.39,687.758 1632.94,685.92 1633.5,633.597 1634.06,640.296 1634.62,641.962 1635.18,661.521 1635.74,648.104 1636.3,669.282 1636.86,670.517 1637.42,640.959 1637.98,644.37 1638.54,615.664 1639.1,620.226 1639.66,639.116 1640.21,654.03 1640.77,651.989 1641.33,653.203 1641.89,649.701 1642.45,631.615 1643.01,653.712 1643.57,654.505 1644.13,703.95 1644.69,685.227 1645.25,705.771 1645.81,673.423 1646.37,678.145 1646.93,631.313 1647.48,631.247 1648.04,635.354 1648.6,651.7 1649.16,652.62 1649.72,639.737 1650.28,612.335 1650.84,618.429 1651.4,603.408 1651.96,579.018 1652.52,600.577 1653.08,586.289 1653.64,626.315 1654.2,629.847 1654.76,618.277 1655.31,636.823 1655.87,624.125 1656.43,608.728 1656.99,613.338 1657.55,647.754 1658.11,662.439 1658.67,663.447 1659.23,645.629 1659.79,680.233 1660.35,664.24 1660.91,666.952 1661.47,685.357 1662.03,683.71 1662.58,697.665 1663.14,713.409 1663.7,711.022 1664.26,730.184 1664.82,711.289 1665.38,710.622 1665.94,707.655 1666.5,722.71 1667.06,685.492 1667.62,719.607 1668.18,699.419 1668.74,682.189 1669.3,683.908 1669.85,715.908 1670.41,715.795 1670.97,715.875 1671.53,731.912 1672.09,742.7 1672.65,741.458 1673.21,706.953 1673.77,690.349 1674.33,691.556 1674.89,691.56 1675.45,659.474 1676.01,645.424 1676.57,630.611 1677.13,635.861 1677.68,636.461 1678.24,636.262 1678.8,607.278 1679.36,644.221 1679.92,681.334 1680.48,681.649 1681.04,716.483 1681.6,701.649 1682.16,717.559 1682.72,716.09 1683.28,763.284 1683.84,727.186 1684.4,725.904 1684.95,739.741 1685.51,721.996 1686.07,671.013 1686.63,721.564 1687.19,730.859 1687.75,661.702 1688.31,663.532 1688.87,645.457 1689.43,647.548 1689.99,648.416 1690.55,619.567 1691.11,607.405 1691.67,612.973 1692.23,616.682 1692.78,617.879 1693.34,622.816 1693.9,624.696 1694.46,630.568 1695.02,666.314 1695.58,664.86 1696.14,667.914 1696.7,672.177 1697.26,673.695 1697.82,674.903 1698.38,725.686 1698.94,710.423 1699.5,741.887 1700.05,738.787 1700.61,718.816 1701.17,717.89 1701.73,716.603 1702.29,716.089 1702.85,729.349 1703.41,742.2 1703.97,739.914 1704.53,812.933 1705.09,788.212 1705.65,764.841 1706.21,743.523 1706.77,773.179 1707.32,785.001 1707.88,780.993 1708.44,796.287 1709,776.479 1709.56,769.877 1710.12,784.962 1710.68,794.437 1711.24,757.854 1711.8,740.073 1712.36,723.105 1712.92,690.412 1713.48,672.521 1714.04,671.515 1714.6,673.495 1715.15,669.586 1715.71,703.251 1716.27,720.447 1716.83,684.193 1717.39,686.875 1717.95,698.988 1718.51,679.671 1719.07,649.573 1719.63,667.22 1720.19,698.771 1720.75,682.338 1721.31,745.309 1721.87,708.811 1722.42,691.672 1722.98,676.034 1723.54,657.998 1724.1,627.928 1724.66,565.633 1725.22,571.753 1725.78,590.074 1726.34,596.796 1726.9,598.683 1727.46,583.735 1728.02,574.437 1728.58,580.708 1729.14,555.105 1729.69,565.35 1730.25,570.191 1730.81,575.942 1731.37,600.297 1731.93,607.927 1732.49,628.067 1733.05,635.474 1733.61,638.592 1734.17,622.549 1734.73,622.734 1735.29,613.12 1735.85,617.758 1736.41,651.497 1736.97,654.355 1737.52,651.444 1738.08,617.877 1738.64,603.489 1739.2,589.617 1739.76,582.2 1740.32,588.327 1740.88,560.836 1741.44,582.681 1742,602.796 1742.56,607.528 1743.12,628.856 1743.68,650.384 1744.24,649.936 1744.79,648.954 1745.35,666.616 1745.91,667.853 1746.47,651.336 1747.03,640.251 1747.59,658.023 1748.15,671.525 1748.71,670.801 1749.27,674.627 1749.83,657.939 1750.39,707.222 1750.95,721.569 1751.51,735.866 1752.06,730.147 1752.62,758.227 1753.18,740.736 1753.74,753.322 1754.3,750.821 1754.86,731.111 1755.42,743.598 1755.98,727.797 1756.54,725.226 1757.1,720.009 1757.66,720.211 1758.22,734.715 1758.78,729.034 1759.34,739.817 1759.89,753.05 1760.45,781.664 1761.01,795.076 1761.57,825.502 1762.13,820.882 1762.69,782.464 1763.25,748.476 1763.81,710.858 1764.37,727.442 1764.93,729.864 1765.49,773.79 1766.05,785.396 1766.61,763.404 1767.16,778.898 1767.72,786.237 1768.28,797.742 1768.84,807.228 1769.4,828.913 1769.96,806.595 1770.52,770.234 1771.08,782.176 1771.64,756.608 1772.2,767.249 1772.76,746.928 1773.32,745.424 1773.88,741.039 1774.43,770.279 1774.99,766.471 1775.55,816.232 1776.11,823.491 1776.67,798.026 1777.23,758.569 1777.79,706.101 1778.35,735.83 1778.91,748.181 1779.47,764.8 1780.03,791.235 1780.59,787.411 1781.15,750.625 1781.71,749.327 1782.26,746.509 1782.82,741.426 1783.38,724.54 1783.94,704.127 1784.5,717.869 1785.06,701.612 1785.62,744.86 1786.18,731.399 1786.74,729 1787.3,691.356 1787.86,627.111 1788.42,630.386 1788.98,616.698 1789.53,667.259 1790.09,699.949 1790.65,683.01 1791.21,700.202 1791.77,696.88 1792.33,714.407 1792.89,714.551 1793.45,694.81 1794.01,649.533 1794.57,666.046 1795.13,617.506 1795.69,587.113 1796.25,559.726 1796.8,567.369 1797.36,575.493 1797.92,579.18 1798.48,636.439 1799.04,624.408 1799.6,658.259 1800.16,664.04 1800.72,662.937 1801.28,682.349 1801.84,670.622 1802.4,638.887 1802.96,670.211 1803.52,716.584 1804.08,712.128 1804.63,709.777 1805.19,676.021 1805.75,677.036 1806.31,710.099 1806.87,692.557 1807.43,660.077 1807.99,660.474 1808.55,661.512 1809.11,646.057 1809.67,630.505 1810.23,634.391 1810.79,622.647 1811.35,632.951 1811.9,632.322 1812.46,622.537 1813.02,627.882 1813.58,627.504 1814.14,643.55 1814.7,631.571 1815.26,633.782 1815.82,654.255 1816.38,672.737 1816.94,671.704 1817.5,675.408 1818.06,677.094 1818.62,675.878 1819.18,676.309 1819.73,678.4 1820.29,645.738 1820.85,661.884 1821.41,710.865 1821.97,742.419 1822.53,741.015 1823.09,722.347 1823.65,720.981 1824.21,701.25 1824.77,733.904 1825.33,713.894 1825.89,709.049 1826.45,675.03 1827,626.288 1827.56,632.482 1828.12,618.013 1828.68,620.497 1829.24,608.156 1829.8,629.424 1830.36,646.484 1830.92,663.178 1831.48,677.505 1832.04,661.771 1832.6,665.026 1833.16,684.789 1833.72,685.184 1834.27,702.95 1834.83,702.985 1835.39,654.092 1835.95,625.266 1836.51,627.616 1837.07,633.12 1837.63,633.934 1838.19,624.142 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 690.778 L720.806 690.778 L721.365 690.778 L721.924 690.778 L722.484 690.778 L723.043 690.778 L723.602 690.778 L724.161 690.778 L724.721 690.778 L725.28 690.778 L725.839 690.778 L726.398 690.778 L726.958 690.778 L727.517 690.778 L728.076 690.778 L728.635 690.778 L729.195 690.778 L729.754 690.778 L730.313 690.778 L730.872 690.778 L731.432 690.778 L731.991 690.778 L732.55 690.778 L733.109 690.778 L733.669 690.778 L734.228 690.778 L734.787 690.778 L735.346 690.778 L735.906 690.778 L736.465 690.778 L737.024 690.778 L737.583 690.778 L738.143 690.778 L738.702 690.778 L739.261 690.778 L739.82 690.778 L740.38 690.778 L740.939 690.778 L741.498 690.778 L742.057 690.778 L742.617 690.778 L743.176 690.778 L743.735 690.778 L744.294 690.778 L744.854 690.778 L745.413 690.778 L745.972 690.778 L746.531 690.778 L747.091 690.778 L747.65 690.778 L748.209 690.778 L748.768 690.778 L749.328 690.778 L749.887 690.778 L750.446 690.778 L751.005 690.778 L751.565 690.778 L752.124 690.778 L752.683 690.778 L753.242 690.778 L753.802 690.778 L754.361 690.778 L754.92 690.778 L755.479 690.778 L756.039 690.778 L756.598 690.778 L757.157 690.778 L757.716 690.778 L758.276 690.778 L758.835 690.778 L759.394 690.778 L759.953 690.778 L760.513 690.778 L761.072 690.778 L761.631 690.778 L762.19 690.778 L762.75 690.778 L763.309 690.778 L763.868 690.778 L764.427 690.778 L764.987 690.778 L765.546 690.778 L766.105 690.778 L766.664 690.778 L767.224 690.778 L767.783 690.778 L768.342 690.778 L768.901 690.778 L769.461 690.778 L770.02 690.778 L770.579 690.778 L771.138 690.778 L771.698 690.778 L772.257 690.778 L772.816 690.778 L773.375 690.778 L773.935 690.778 L774.494 690.778 L775.053 690.778 L775.612 690.778 L776.172 690.778 L776.731 690.778 L777.29 690.778 L777.849 690.778 L778.409 690.778 L778.968 690.778 L779.527 690.778 L780.086 690.778 L780.646 690.778 L781.205 690.778 L781.764 690.778 L782.323 690.778 L782.883 690.778 L783.442 690.778 L784.001 690.778 L784.56 690.778 L785.12 690.778 L785.679 690.778 L786.238 690.778 L786.797 690.778 L787.357 690.778 L787.916 690.778 L788.475 690.778 L789.034 690.778 L789.594 690.778 L790.153 690.778 L790.712 690.778 L791.271 690.778 L791.831 690.778 L792.39 690.778 L792.949 690.778 L793.508 690.778 L794.068 690.778 L794.627 690.778 L795.186 690.778 L795.745 690.778 L796.305 690.778 L796.864 690.778 L797.423 690.778 L797.982 690.778 L798.542 690.778 L799.101 690.778 L799.66 690.778 L800.219 690.778 L800.779 690.778 L801.338 690.778 L801.897 690.778 L802.456 690.778 L803.016 690.778 L803.575 690.778 L804.134 690.778 L804.693 690.778 L805.253 690.778 L805.812 690.778 L806.371 690.778 L806.931 690.778 L807.49 690.778 L808.049 690.778 L808.608 690.778 L809.168 690.778 L809.727 690.778 L810.286 690.778 L810.845 690.778 L811.405 690.778 L811.964 690.778 L812.523 690.778 L813.082 690.778 L813.642 690.778 L814.201 690.778 L814.76 690.778 L815.319 690.778 L815.879 690.778 L816.438 690.778 L816.997 690.778 L817.556 690.778 L818.116 690.778 L818.675 690.778 L819.234 690.778 L819.793 690.778 L820.353 690.778 L820.912 690.778 L821.471 690.778 L822.03 690.778 L822.59 690.778 L823.149 690.778 L823.708 690.778 L824.267 690.778 L824.827 690.778 L825.386 690.778 L825.945 690.778 L826.504 690.778 L827.064 690.778 L827.623 690.778 L828.182 690.778 L828.741 690.778 L829.301 690.778 L829.86 690.778 L830.419 690.778 L830.978 690.778 L831.538 690.778 L832.097 690.778 L832.656 690.778 L833.215 690.778 L833.775 690.778 L834.334 690.778 L834.893 690.778 L835.452 690.778 L836.012 690.778 L836.571 690.778 L837.13 690.778 L837.689 690.778 L838.249 690.778 L838.808 690.778 L839.367 690.778 L839.926 690.778 L840.486 690.778 L841.045 690.778 L841.604 690.778 L842.163 690.778 L842.723 690.778 L843.282 690.778 L843.841 690.778 L844.4 690.778 L844.96 690.778 L845.519 690.778 L846.078 690.778 L846.637 690.778 L847.197 690.778 L847.756 690.778 L848.315 690.778 L848.874 690.778 L849.434 690.778 L849.993 690.778 L850.552 690.778 L851.111 690.778 L851.671 690.778 L852.23 690.778 L852.789 690.778 L853.348 690.778 L853.908 690.778 L854.467 690.778 L855.026 690.778 L855.585 690.778 L856.145 690.778 L856.704 690.778 L857.263 690.778 L857.822 690.778 L858.382 690.778 L858.941 690.778 L859.5 690.778 L860.059 690.778 L860.619 690.778 L861.178 690.778 L861.737 690.778 L862.296 690.778 L862.856 690.778 L863.415 690.778 L863.974 690.778 L864.533 690.778 L865.093 690.778 L865.652 690.778 L866.211 690.778 L866.77 690.778 L867.33 690.778 L867.889 690.778 L868.448 690.778 L869.007 690.778 L869.567 690.778 L870.126 690.778 L870.685 690.778 L871.244 690.778 L871.804 690.778 L872.363 690.778 L872.922 690.778 L873.481 690.778 L874.041 690.778 L874.6 690.778 L875.159 690.778 L875.718 690.778 L876.278 690.778 L876.837 690.778 L877.396 690.778 L877.955 690.778 L878.515 690.778 L879.074 690.778 L879.633 690.778 L880.192 690.778 L880.752 690.778 L881.311 690.778 L881.87 690.778 L882.429 690.778 L882.989 690.778 L883.548 690.778 L884.107 690.778 L884.666 690.778 L885.226 690.778 L885.785 690.778 L886.344 690.778 L886.903 690.778 L887.463 690.778 L888.022 690.778 L888.581 690.778 L889.14 690.778 L889.7 690.778 L890.259 690.778 L890.818 690.778 L891.377 690.778 L891.937 690.778 L892.496 690.778 L893.055 690.778 L893.614 690.778 L894.174 690.778 L894.733 690.778 L895.292 690.778 L895.851 690.778 L896.411 690.778 L896.97 690.778 L897.529 690.778 L898.088 690.778 L898.648 690.778 L899.207 690.778 L899.766 690.778 L900.325 690.778 L900.885 690.778 L901.444 690.778 L902.003 690.778 L902.562 690.778 L903.122 690.778 L903.681 690.778 L904.24 690.778 L904.799 690.778 L905.359 690.778 L905.918 690.778 L906.477 690.778 L907.036 690.778 L907.596 690.778 L908.155 690.778 L908.714 690.778 L909.273 690.778 L909.833 690.778 L910.392 690.778 L910.951 690.778 L911.51 690.778 L912.07 690.778 L912.629 690.778 L913.188 690.778 L913.747 690.778 L914.307 690.778 L914.866 690.778 L915.425 690.778 L915.984 690.778 L916.544 690.778 L917.103 690.778 L917.662 690.778 L918.221 690.778 L918.781 690.778 L919.34 690.778 L919.899 690.778 L920.458 690.778 L921.018 690.778 L921.577 690.778 L922.136 690.778 L922.695 690.778 L923.255 690.778 L923.814 690.778 L924.373 690.778 L924.932 690.778 L925.492 690.778 L926.051 690.778 L926.61 690.778 L927.169 690.778 L927.729 690.778 L928.288 690.778 L928.847 690.778 L929.406 690.778 L929.966 690.778 L930.525 690.778 L931.084 690.778 L931.644 690.778 L932.203 690.778 L932.762 690.778 L933.321 690.778 L933.881 690.778 L934.44 690.778 L934.999 690.778 L935.558 690.778 L936.118 690.778 L936.677 690.778 L937.236 690.778 L937.795 690.778 L938.355 690.778 L938.914 690.778 L939.473 690.778 L940.032 690.778 L940.592 690.778 L941.151 690.778 L941.71 690.778 L942.269 690.778 L942.829 690.778 L943.388 690.778 L943.947 690.778 L944.506 690.778 L945.066 690.778 L945.625 690.778 L946.184 690.778 L946.743 690.778 L947.303 690.778 L947.862 690.778 L948.421 690.778 L948.98 690.778 L949.54 690.778 L950.099 690.778 L950.658 690.778 L951.217 690.778 L951.777 690.778 L952.336 690.778 L952.895 690.778 L953.454 690.778 L954.014 690.778 L954.573 690.778 L955.132 690.778 L955.691 690.778 L956.251 690.778 L956.81 690.778 L957.369 690.778 L957.928 690.778 L958.488 690.778 L959.047 690.778 L959.606 690.778 L960.165 690.778 L960.725 690.778 L961.284 690.778 L961.843 690.778 L962.402 690.778 L962.962 690.778 L963.521 690.778 L964.08 690.778 L964.639 690.778 L965.199 690.778 L965.758 690.778 L966.317 690.778 L966.876 690.778 L967.436 690.778 L967.995 690.778 L968.554 690.778 L969.113 690.778 L969.673 690.778 L970.232 690.778 L970.791 690.778 L971.35 690.778 L971.91 690.778 L972.469 690.778 L973.028 690.778 L973.587 690.778 L974.147 690.778 L974.706 690.778 L975.265 690.778 L975.824 690.778 L976.384 690.778 L976.943 690.778 L977.502 690.778 L978.061 690.778 L978.621 690.778 L979.18 690.778 L979.739 690.778 L980.298 690.778 L980.858 690.778 L981.417 690.778 L981.976 690.778 L982.535 690.778 L983.095 690.778 L983.654 690.778 L984.213 690.778 L984.772 690.778 L985.332 690.778 L985.891 690.778 L986.45 690.778 L987.009 690.778 L987.569 690.778 L988.128 690.778 L988.687 690.778 L989.246 690.778 L989.806 690.778 L990.365 690.778 L990.924 690.778 L991.483 690.778 L992.043 690.778 L992.602 690.778 L993.161 690.778 L993.72 690.778 L994.28 690.778 L994.839 690.778 L995.398 690.778 L995.957 690.778 L996.517 690.778 L997.076 690.778 L997.635 690.778 L998.194 690.778 L998.754 690.778 L999.313 690.778 L999.872 690.778 L1000.43 690.778 L1000.99 690.778 L1001.55 690.778 L1002.11 690.778 L1002.67 690.778 L1003.23 690.778 L1003.79 690.778 L1004.35 690.778 L1004.91 690.778 L1005.46 690.778 L1006.02 690.778 L1006.58 690.778 L1007.14 690.778 L1007.7 690.778 L1008.26 690.778 L1008.82 690.778 L1009.38 690.778 L1009.94 690.778 L1010.5 690.778 L1011.06 690.778 L1011.62 690.778 L1012.18 690.778 L1012.73 690.778 L1013.29 690.778 L1013.85 690.778 L1014.41 690.778 L1014.97 690.778 L1015.53 690.778 L1016.09 690.778 L1016.65 690.778 L1017.21 690.778 L1017.77 690.778 L1018.33 690.778 L1018.89 690.778 L1019.45 690.778 L1020.01 690.778 L1020.56 690.778 L1021.12 690.778 L1021.68 690.778 L1022.24 690.778 L1022.8 690.778 L1023.36 690.778 L1023.92 690.778 L1024.48 690.778 L1025.04 690.778 L1025.6 690.778 L1026.16 690.778 L1026.72 690.778 L1027.28 690.778 L1027.83 690.778 L1028.39 690.778 L1028.95 690.778 L1029.51 690.778 L1030.07 690.778 L1030.63 690.778 L1031.19 690.778 L1031.75 690.778 L1032.31 690.778 L1032.87 690.778 L1033.43 690.778 L1033.99 690.778 L1034.55 690.778 L1035.1 690.778 L1035.66 690.778 L1036.22 690.778 L1036.78 690.778 L1037.34 690.778 L1037.9 690.778 L1038.46 690.778 L1039.02 690.778 L1039.58 690.778 L1040.14 690.778 L1040.7 690.778 L1041.26 690.778 L1041.82 690.778 L1042.38 690.778 L1042.93 690.778 L1043.49 690.778 L1044.05 690.778 L1044.61 690.778 L1045.17 690.778 L1045.73 690.778 L1046.29 690.778 L1046.85 690.778 L1047.41 690.778 L1047.97 690.778 L1048.53 690.778 L1049.09 690.778 L1049.65 690.778 L1050.2 690.778 L1050.76 690.778 L1051.32 690.778 L1051.88 690.778 L1052.44 690.778 L1053 690.778 L1053.56 690.778 L1054.12 690.778 L1054.68 690.778 L1055.24 690.778 L1055.8 690.778 L1056.36 690.778 L1056.92 690.778 L1057.48 690.778 L1058.03 690.778 L1058.59 690.778 L1059.15 690.778 L1059.71 690.778 L1060.27 690.778 L1060.83 690.778 L1061.39 690.778 L1061.95 690.778 L1062.51 690.778 L1063.07 690.778 L1063.63 690.778 L1064.19 690.778 L1064.75 690.778 L1065.3 690.778 L1065.86 690.778 L1066.42 690.778 L1066.98 690.778 L1067.54 690.778 L1068.1 690.778 L1068.66 690.778 L1069.22 690.778 L1069.78 690.778 L1070.34 690.778 L1070.9 690.778 L1071.46 690.778 L1072.02 690.778 L1072.57 690.778 L1073.13 690.778 L1073.69 690.778 L1074.25 690.778 L1074.81 690.778 L1075.37 690.778 L1075.93 690.778 L1076.49 690.778 L1077.05 690.778 L1077.61 690.778 L1078.17 690.778 L1078.73 690.778 L1079.29 690.778 L1079.85 690.778 L1080.4 690.778 L1080.96 690.778 L1081.52 690.778 L1082.08 690.778 L1082.64 690.778 L1083.2 690.778 L1083.76 690.778 L1084.32 690.778 L1084.88 690.778 L1085.44 690.778 L1086 690.778 L1086.56 690.778 L1087.12 690.778 L1087.67 690.778 L1088.23 690.778 L1088.79 690.778 L1089.35 690.778 L1089.91 690.778 L1090.47 690.778 L1091.03 690.778 L1091.59 690.778 L1092.15 690.778 L1092.71 690.778 L1093.27 690.778 L1093.83 690.778 L1094.39 690.778 L1094.94 690.778 L1095.5 690.778 L1096.06 690.778 L1096.62 690.778 L1097.18 690.778 L1097.74 690.778 L1098.3 690.778 L1098.86 690.778 L1099.42 690.778 L1099.98 690.778 L1100.54 690.778 L1101.1 690.778 L1101.66 690.778 L1102.22 690.778 L1102.77 690.778 L1103.33 690.778 L1103.89 690.778 L1104.45 690.778 L1105.01 690.778 L1105.57 690.778 L1106.13 690.778 L1106.69 690.778 L1107.25 690.778 L1107.81 690.778 L1108.37 690.778 L1108.93 690.778 L1109.49 690.778 L1110.04 690.778 L1110.6 690.778 L1111.16 690.778 L1111.72 690.778 L1112.28 690.778 L1112.84 690.778 L1113.4 690.778 L1113.96 690.778 L1114.52 690.778 L1115.08 690.778 L1115.64 690.778 L1116.2 690.778 L1116.76 690.778 L1117.31 690.778 L1117.87 690.778 L1118.43 690.778 L1118.99 690.778 L1119.55 690.778 L1120.11 690.778 L1120.67 690.778 L1121.23 690.778 L1121.79 690.778 L1122.35 690.778 L1122.91 690.778 L1123.47 690.778 L1124.03 690.778 L1124.59 690.778 L1125.14 690.778 L1125.7 690.778 L1126.26 690.778 L1126.82 690.778 L1127.38 690.778 L1127.94 690.778 L1128.5 690.778 L1129.06 690.778 L1129.62 690.778 L1130.18 690.778 L1130.74 690.778 L1131.3 690.778 L1131.86 690.778 L1132.41 690.778 L1132.97 690.778 L1133.53 690.778 L1134.09 690.778 L1134.65 690.778 L1135.21 690.778 L1135.77 690.778 L1136.33 690.778 L1136.89 690.778 L1137.45 690.778 L1138.01 690.778 L1138.57 690.778 L1139.13 690.778 L1139.68 690.778 L1140.24 690.778 L1140.8 690.778 L1141.36 690.778 L1141.92 690.778 L1142.48 690.778 L1143.04 690.778 L1143.6 690.778 L1144.16 690.778 L1144.72 690.778 L1145.28 690.778 L1145.84 690.778 L1146.4 690.778 L1146.96 690.778 L1147.51 690.778 L1148.07 690.778 L1148.63 690.778 L1149.19 690.778 L1149.75 690.778 L1150.31 690.778 L1150.87 690.778 L1151.43 690.778 L1151.99 690.778 L1152.55 690.778 L1153.11 690.778 L1153.67 690.778 L1154.23 690.778 L1154.78 690.778 L1155.34 690.778 L1155.9 690.778 L1156.46 690.778 L1157.02 690.778 L1157.58 690.778 L1158.14 690.778 L1158.7 690.778 L1159.26 690.778 L1159.82 690.778 L1160.38 690.778 L1160.94 690.778 L1161.5 690.778 L1162.05 690.778 L1162.61 690.778 L1163.17 690.778 L1163.73 690.778 L1164.29 690.778 L1164.85 690.778 L1165.41 690.778 L1165.97 690.778 L1166.53 690.778 L1167.09 690.778 L1167.65 690.778 L1168.21 690.778 L1168.77 690.778 L1169.33 690.778 L1169.88 690.778 L1170.44 690.778 L1171 690.778 L1171.56 690.778 L1172.12 690.778 L1172.68 690.778 L1173.24 690.778 L1173.8 690.778 L1174.36 690.778 L1174.92 690.778 L1175.48 690.778 L1176.04 690.778 L1176.6 690.778 L1177.15 690.778 L1177.71 690.778 L1178.27 690.778 L1178.83 690.778 L1179.39 690.778 L1179.95 690.778 L1180.51 690.778 L1181.07 690.778 L1181.63 690.778 L1182.19 690.778 L1182.75 690.778 L1183.31 690.778 L1183.87 690.778 L1184.43 690.778 L1184.98 690.778 L1185.54 690.778 L1186.1 690.778 L1186.66 690.778 L1187.22 690.778 L1187.78 690.778 L1188.34 690.778 L1188.9 690.778 L1189.46 690.778 L1190.02 690.778 L1190.58 690.778 L1191.14 690.778 L1191.7 690.778 L1192.25 690.778 L1192.81 690.778 L1193.37 690.778 L1193.93 690.778 L1194.49 690.778 L1195.05 690.778 L1195.61 690.778 L1196.17 690.778 L1196.73 690.778 L1197.29 690.778 L1197.85 690.778 L1198.41 690.778 L1198.97 690.778 L1199.52 690.778 L1200.08 690.778 L1200.64 690.778 L1201.2 690.778 L1201.76 690.778 L1202.32 690.778 L1202.88 690.778 L1203.44 690.778 L1204 690.778 L1204.56 690.778 L1205.12 690.778 L1205.68 690.778 L1206.24 690.778 L1206.8 690.778 L1207.35 690.778 L1207.91 690.778 L1208.47 690.778 L1209.03 690.778 L1209.59 690.778 L1210.15 690.778 L1210.71 690.778 L1211.27 690.778 L1211.83 690.778 L1212.39 690.778 L1212.95 690.778 L1213.51 690.778 L1214.07 690.778 L1214.62 690.778 L1215.18 690.778 L1215.74 690.778 L1216.3 690.778 L1216.86 690.778 L1217.42 690.778 L1217.98 690.778 L1218.54 690.778 L1219.1 690.778 L1219.66 690.778 L1220.22 690.778 L1220.78 690.778 L1221.34 690.778 L1221.89 690.778 L1222.45 690.778 L1223.01 690.778 L1223.57 690.778 L1224.13 690.778 L1224.69 690.778 L1225.25 690.778 L1225.81 690.778 L1226.37 690.778 L1226.93 690.778 L1227.49 690.778 L1228.05 690.778 L1228.61 690.778 L1229.17 690.778 L1229.72 690.778 L1230.28 690.778 L1230.84 690.778 L1231.4 690.778 L1231.96 690.778 L1232.52 690.778 L1233.08 690.778 L1233.64 690.778 L1234.2 690.778 L1234.76 690.778 L1235.32 690.778 L1235.88 690.778 L1236.44 690.778 L1236.99 690.778 L1237.55 690.778 L1238.11 690.778 L1238.67 690.778 L1239.23 690.778 L1239.79 690.778 L1240.35 690.778 L1240.91 690.778 L1241.47 690.778 L1242.03 690.778 L1242.59 690.778 L1243.15 690.778 L1243.71 690.778 L1244.26 690.778 L1244.82 690.778 L1245.38 690.778 L1245.94 690.778 L1246.5 690.778 L1247.06 690.778 L1247.62 690.778 L1248.18 690.778 L1248.74 690.778 L1249.3 690.778 L1249.86 690.778 L1250.42 690.778 L1250.98 690.778 L1251.54 690.778 L1252.09 690.778 L1252.65 690.778 L1253.21 690.778 L1253.77 690.778 L1254.33 690.778 L1254.89 690.778 L1255.45 690.778 L1256.01 690.778 L1256.57 690.778 L1257.13 690.778 L1257.69 690.778 L1258.25 690.778 L1258.81 690.778 L1259.36 690.778 L1259.92 690.778 L1260.48 690.778 L1261.04 690.778 L1261.6 690.778 L1262.16 690.778 L1262.72 690.778 L1263.28 690.778 L1263.84 690.778 L1264.4 690.778 L1264.96 690.778 L1265.52 690.778 L1266.08 690.778 L1266.63 690.778 L1267.19 690.778 L1267.75 690.778 L1268.31 690.778 L1268.87 690.778 L1269.43 690.778 L1269.99 690.778 L1270.55 690.778 L1271.11 690.778 L1271.67 690.778 L1272.23 690.778 L1272.79 690.778 L1273.35 690.778 L1273.91 690.778 L1274.46 690.778 L1275.02 690.778 L1275.58 690.778 L1276.14 690.778 L1276.7 690.778 L1277.26 690.778 L1277.82 690.778 L1278.38 690.778 L1278.94 690.778 L1279.5 690.778 L1280.06 690.778 L1280.62 690.778 L1281.18 690.778 L1281.73 690.778 L1282.29 690.778 L1282.85 690.778 L1283.41 690.778 L1283.97 690.778 L1284.53 690.778 L1285.09 690.778 L1285.65 690.778 L1286.21 690.778 L1286.77 690.778 L1287.33 690.778 L1287.89 690.778 L1288.45 690.778 L1289 690.778 L1289.56 690.778 L1290.12 690.778 L1290.68 690.778 L1291.24 690.778 L1291.8 690.778 L1292.36 690.778 L1292.92 690.778 L1293.48 690.778 L1294.04 690.778 L1294.6 690.778 L1295.16 690.778 L1295.72 690.778 L1296.28 690.778 L1296.83 690.778 L1297.39 690.778 L1297.95 690.778 L1298.51 690.778 L1299.07 690.778 L1299.63 690.778 L1300.19 690.778 L1300.75 690.778 L1301.31 690.778 L1301.87 690.778 L1302.43 690.778 L1302.99 690.778 L1303.55 690.778 L1304.1 690.778 L1304.66 690.778 L1305.22 690.778 L1305.78 690.778 L1306.34 690.778 L1306.9 690.778 L1307.46 690.778 L1308.02 690.778 L1308.58 690.778 L1309.14 690.778 L1309.7 690.778 L1310.26 690.778 L1310.82 690.778 L1311.38 690.778 L1311.93 690.778 L1312.49 690.778 L1313.05 690.778 L1313.61 690.778 L1314.17 690.778 L1314.73 690.778 L1315.29 690.778 L1315.85 690.778 L1316.41 690.778 L1316.97 690.778 L1317.53 690.778 L1318.09 690.778 L1318.65 690.778 L1319.2 690.778 L1319.76 690.778 L1320.32 690.778 L1320.88 690.778 L1321.44 690.778 L1322 690.778 L1322.56 690.778 L1323.12 690.778 L1323.68 690.778 L1324.24 690.778 L1324.8 690.778 L1325.36 690.778 L1325.92 690.778 L1326.47 690.778 L1327.03 690.778 L1327.59 690.778 L1328.15 690.778 L1328.71 690.778 L1329.27 690.778 L1329.83 690.778 L1330.39 690.778 L1330.95 690.778 L1331.51 690.778 L1332.07 690.778 L1332.63 690.778 L1333.19 690.778 L1333.75 690.778 L1334.3 690.778 L1334.86 690.778 L1335.42 690.778 L1335.98 690.778 L1336.54 690.778 L1337.1 690.778 L1337.66 690.778 L1338.22 690.778 L1338.78 690.778 L1339.34 690.778 L1339.9 690.778 L1340.46 690.778 L1341.02 690.778 L1341.57 690.778 L1342.13 690.778 L1342.69 690.778 L1343.25 690.778 L1343.81 690.778 L1344.37 690.778 L1344.93 690.778 L1345.49 690.778 L1346.05 690.778 L1346.61 690.778 L1347.17 690.778 L1347.73 690.778 L1348.29 690.778 L1348.84 690.778 L1349.4 690.778 L1349.96 690.778 L1350.52 690.778 L1351.08 690.778 L1351.64 690.778 L1352.2 690.778 L1352.76 690.778 L1353.32 690.778 L1353.88 690.778 L1354.44 690.778 L1355 690.778 L1355.56 690.778 L1356.12 690.778 L1356.67 690.778 L1357.23 690.778 L1357.79 690.778 L1358.35 690.778 L1358.91 690.778 L1359.47 690.778 L1360.03 690.778 L1360.59 690.778 L1361.15 690.778 L1361.71 690.778 L1362.27 690.778 L1362.83 690.778 L1363.39 690.778 L1363.94 690.778 L1364.5 690.778 L1365.06 690.778 L1365.62 690.778 L1366.18 690.778 L1366.74 690.778 L1367.3 690.778 L1367.86 690.778 L1368.42 690.778 L1368.98 690.778 L1369.54 690.778 L1370.1 690.778 L1370.66 690.778 L1371.21 690.778 L1371.77 690.778 L1372.33 690.778 L1372.89 690.778 L1373.45 690.778 L1374.01 690.778 L1374.57 690.778 L1375.13 690.778 L1375.69 690.778 L1376.25 690.778 L1376.81 690.778 L1377.37 690.778 L1377.93 690.778 L1378.49 690.778 L1379.04 690.778 L1379.6 690.778 L1380.16 690.778 L1380.72 690.778 L1381.28 690.778 L1381.84 690.778 L1382.4 690.778 L1382.96 690.778 L1383.52 690.778 L1384.08 690.778 L1384.64 690.778 L1385.2 690.778 L1385.76 690.778 L1386.31 690.778 L1386.87 690.778 L1387.43 690.778 L1387.99 690.778 L1388.55 690.778 L1389.11 690.778 L1389.67 690.778 L1390.23 690.778 L1390.79 690.778 L1391.35 690.778 L1391.91 690.778 L1392.47 690.778 L1393.03 690.778 L1393.58 690.778 L1394.14 690.778 L1394.7 690.778 L1395.26 690.778 L1395.82 690.778 L1396.38 690.778 L1396.94 690.778 L1397.5 690.778 L1398.06 690.778 L1398.62 690.778 L1399.18 690.778 L1399.74 690.778 L1400.3 690.778 L1400.86 690.778 L1401.41 690.778 L1401.97 690.778 L1402.53 690.778 L1403.09 690.778 L1403.65 690.778 L1404.21 690.778 L1404.77 690.778 L1405.33 690.778 L1405.89 690.778 L1406.45 690.778 L1407.01 690.778 L1407.57 690.778 L1408.13 690.778 L1408.68 690.778 L1409.24 690.778 L1409.8 690.778 L1410.36 690.778 L1410.92 690.778 L1411.48 690.778 L1412.04 690.778 L1412.6 690.778 L1413.16 690.778 L1413.72 690.778 L1414.28 690.778 L1414.84 690.778 L1415.4 690.778 L1415.95 690.778 L1416.51 690.778 L1417.07 690.778 L1417.63 690.778 L1418.19 690.778 L1418.75 690.778 L1419.31 690.778 L1419.87 690.778 L1420.43 690.778 L1420.99 690.778 L1421.55 690.778 L1422.11 690.778 L1422.67 690.778 L1423.23 690.778 L1423.78 690.778 L1424.34 690.778 L1424.9 690.778 L1425.46 690.778 L1426.02 690.778 L1426.58 690.778 L1427.14 690.778 L1427.7 690.778 L1428.26 690.778 L1428.82 690.778 L1429.38 690.778 L1429.94 690.778 L1430.5 690.778 L1431.05 690.778 L1431.61 690.778 L1432.17 690.778 L1432.73 690.778 L1433.29 690.778 L1433.85 690.778 L1434.41 690.778 L1434.97 690.778 L1435.53 690.778 L1436.09 690.778 L1436.65 690.778 L1437.21 690.778 L1437.77 690.778 L1438.33 690.778 L1438.88 690.778 L1439.44 690.778 L1440 690.778 L1440.56 690.778 L1441.12 690.778 L1441.68 690.778 L1442.24 690.778 L1442.8 690.778 L1443.36 690.778 L1443.92 690.778 L1444.48 690.778 L1445.04 690.778 L1445.6 690.778 L1446.15 690.778 L1446.71 690.778 L1447.27 690.778 L1447.83 690.778 L1448.39 690.778 L1448.95 690.778 L1449.51 690.778 L1450.07 690.778 L1450.63 690.778 L1451.19 690.778 L1451.75 690.778 L1452.31 690.778 L1452.87 690.778 L1453.42 690.778 L1453.98 690.778 L1454.54 690.778 L1455.1 690.778 L1455.66 690.778 L1456.22 690.778 L1456.78 690.778 L1457.34 690.778 L1457.9 690.778 L1458.46 690.778 L1459.02 690.778 L1459.58 690.778 L1460.14 690.778 L1460.7 690.778 L1461.25 690.778 L1461.81 690.778 L1462.37 690.778 L1462.93 690.778 L1463.49 690.778 L1464.05 690.778 L1464.61 690.778 L1465.17 690.778 L1465.73 690.778 L1466.29 690.778 L1466.85 690.778 L1467.41 690.778 L1467.97 690.778 L1468.52 690.778 L1469.08 690.778 L1469.64 690.778 L1470.2 690.778 L1470.76 690.778 L1471.32 690.778 L1471.88 690.778 L1472.44 690.778 L1473 690.778 L1473.56 690.778 L1474.12 690.778 L1474.68 690.778 L1475.24 690.778 L1475.79 690.778 L1476.35 690.778 L1476.91 690.778 L1477.47 690.778 L1478.03 690.778 L1478.59 690.778 L1479.15 690.778 L1479.71 690.778 L1480.27 690.778 L1480.83 690.778 L1481.39 690.778 L1481.95 690.778 L1482.51 690.778 L1483.07 690.778 L1483.62 690.778 L1484.18 690.778 L1484.74 690.778 L1485.3 690.778 L1485.86 690.778 L1486.42 690.778 L1486.98 690.778 L1487.54 690.778 L1488.1 690.778 L1488.66 690.778 L1489.22 690.778 L1489.78 690.778 L1490.34 690.778 L1490.89 690.778 L1491.45 690.778 L1492.01 690.778 L1492.57 690.778 L1493.13 690.778 L1493.69 690.778 L1494.25 690.778 L1494.81 690.778 L1495.37 690.778 L1495.93 690.778 L1496.49 690.778 L1497.05 690.778 L1497.61 690.778 L1498.16 690.778 L1498.72 690.778 L1499.28 690.778 L1499.84 690.778 L1500.4 690.778 L1500.96 690.778 L1501.52 690.778 L1502.08 690.778 L1502.64 690.778 L1503.2 690.778 L1503.76 690.778 L1504.32 690.778 L1504.88 690.778 L1505.44 690.778 L1505.99 690.778 L1506.55 690.778 L1507.11 690.778 L1507.67 690.778 L1508.23 690.778 L1508.79 690.778 L1509.35 690.778 L1509.91 690.778 L1510.47 690.778 L1511.03 690.778 L1511.59 690.778 L1512.15 690.778 L1512.71 690.778 L1513.26 690.778 L1513.82 690.778 L1514.38 690.778 L1514.94 690.778 L1515.5 690.778 L1516.06 690.778 L1516.62 690.778 L1517.18 690.778 L1517.74 690.778 L1518.3 690.778 L1518.86 690.778 L1519.42 690.778 L1519.98 690.778 L1520.53 690.778 L1521.09 690.778 L1521.65 690.778 L1522.21 690.778 L1522.77 690.778 L1523.33 690.778 L1523.89 690.778 L1524.45 690.778 L1525.01 690.778 L1525.57 690.778 L1526.13 690.778 L1526.69 690.778 L1527.25 690.778 L1527.81 690.778 L1528.36 690.778 L1528.92 690.778 L1529.48 690.778 L1530.04 690.778 L1530.6 690.778 L1531.16 690.778 L1531.72 690.778 L1532.28 690.778 L1532.84 690.778 L1533.4 690.778 L1533.96 690.778 L1534.52 690.778 L1535.08 690.778 L1535.63 690.778 L1536.19 690.778 L1536.75 690.778 L1537.31 690.778 L1537.87 690.778 L1538.43 690.778 L1538.99 690.778 L1539.55 690.778 L1540.11 690.778 L1540.67 690.778 L1541.23 690.778 L1541.79 690.778 L1542.35 690.778 L1542.9 690.778 L1543.46 690.778 L1544.02 690.778 L1544.58 690.778 L1545.14 690.778 L1545.7 690.778 L1546.26 690.778 L1546.82 690.778 L1547.38 690.778 L1547.94 690.778 L1548.5 690.778 L1549.06 690.778 L1549.62 690.778 L1550.18 690.778 L1550.73 690.778 L1551.29 690.778 L1551.85 690.778 L1552.41 690.778 L1552.97 690.778 L1553.53 690.778 L1554.09 690.778 L1554.65 690.778 L1555.21 690.778 L1555.77 690.778 L1556.33 690.778 L1556.89 690.778 L1557.45 690.778 L1558 690.778 L1558.56 690.778 L1559.12 690.778 L1559.68 690.778 L1560.24 690.778 L1560.8 690.778 L1561.36 690.778 L1561.92 690.778 L1562.48 690.778 L1563.04 690.778 L1563.6 690.778 L1564.16 690.778 L1564.72 690.778 L1565.28 690.778 L1565.83 690.778 L1566.39 690.778 L1566.95 690.778 L1567.51 690.778 L1568.07 690.778 L1568.63 690.778 L1569.19 690.778 L1569.75 690.778 L1570.31 690.778 L1570.87 690.778 L1571.43 690.778 L1571.99 690.778 L1572.55 690.778 L1573.1 690.778 L1573.66 690.778 L1574.22 690.778 L1574.78 690.778 L1575.34 690.778 L1575.9 690.778 L1576.46 690.778 L1577.02 690.778 L1577.58 690.778 L1578.14 690.778 L1578.7 690.778 L1579.26 690.778 L1579.82 690.778 L1580.37 690.778 L1580.93 690.778 L1581.49 690.778 L1582.05 690.778 L1582.61 690.778 L1583.17 690.778 L1583.73 690.778 L1584.29 690.778 L1584.85 690.778 L1585.41 690.778 L1585.97 690.778 L1586.53 690.778 L1587.09 690.778 L1587.65 690.778 L1588.2 690.778 L1588.76 690.778 L1589.32 690.778 L1589.88 690.778 L1590.44 690.778 L1591 690.778 L1591.56 690.778 L1592.12 690.778 L1592.68 690.778 L1593.24 690.778 L1593.8 690.778 L1594.36 690.778 L1594.92 690.778 L1595.47 690.778 L1596.03 690.778 L1596.59 690.778 L1597.15 690.778 L1597.71 690.778 L1598.27 690.778 L1598.83 690.778 L1599.39 690.778 L1599.95 690.778 L1600.51 690.778 L1601.07 690.778 L1601.63 690.778 L1602.19 690.778 L1602.74 690.778 L1603.3 690.778 L1603.86 690.778 L1604.42 690.778 L1604.98 690.778 L1605.54 690.778 L1606.1 690.778 L1606.66 690.778 L1607.22 690.778 L1607.78 690.778 L1608.34 690.778 L1608.9 690.778 L1609.46 690.778 L1610.02 690.778 L1610.57 690.778 L1611.13 690.778 L1611.69 690.778 L1612.25 690.778 L1612.81 690.778 L1613.37 690.778 L1613.93 690.778 L1614.49 690.778 L1615.05 690.778 L1615.61 690.778 L1616.17 690.778 L1616.73 690.778 L1617.29 690.778 L1617.84 690.778 L1618.4 690.778 L1618.96 690.778 L1619.52 690.778 L1620.08 690.778 L1620.64 690.778 L1621.2 690.778 L1621.76 690.778 L1622.32 690.778 L1622.88 690.778 L1623.44 690.778 L1624 690.778 L1624.56 690.778 L1625.11 690.778 L1625.67 690.778 L1626.23 690.778 L1626.79 690.778 L1627.35 690.778 L1627.91 690.778 L1628.47 690.778 L1629.03 690.778 L1629.59 690.778 L1630.15 690.778 L1630.71 690.778 L1631.27 690.778 L1631.83 690.778 L1632.39 690.778 L1632.94 690.778 L1633.5 690.778 L1634.06 690.778 L1634.62 690.778 L1635.18 690.778 L1635.74 690.778 L1636.3 690.778 L1636.86 690.778 L1637.42 690.778 L1637.98 690.778 L1638.54 690.778 L1639.1 690.778 L1639.66 690.778 L1640.21 690.778 L1640.77 690.778 L1641.33 690.778 L1641.89 690.778 L1642.45 690.778 L1643.01 690.778 L1643.57 690.778 L1644.13 690.778 L1644.69 690.778 L1645.25 690.778 L1645.81 690.778 L1646.37 690.778 L1646.93 690.778 L1647.48 690.778 L1648.04 690.778 L1648.6 690.778 L1649.16 690.778 L1649.72 690.778 L1650.28 690.778 L1650.84 690.778 L1651.4 690.778 L1651.96 690.778 L1652.52 690.778 L1653.08 690.778 L1653.64 690.778 L1654.2 690.778 L1654.76 690.778 L1655.31 690.778 L1655.87 690.778 L1656.43 690.778 L1656.99 690.778 L1657.55 690.778 L1658.11 690.778 L1658.67 690.778 L1659.23 690.778 L1659.79 690.778 L1660.35 690.778 L1660.91 690.778 L1661.47 690.778 L1662.03 690.778 L1662.58 690.778 L1663.14 690.778 L1663.7 690.778 L1664.26 690.778 L1664.82 690.778 L1665.38 690.778 L1665.94 690.778 L1666.5 690.778 L1667.06 690.778 L1667.62 690.778 L1668.18 690.778 L1668.74 690.778 L1669.3 690.778 L1669.85 690.778 L1670.41 690.778 L1670.97 690.778 L1671.53 690.778 L1672.09 690.778 L1672.65 690.778 L1673.21 690.778 L1673.77 690.778 L1674.33 690.778 L1674.89 690.778 L1675.45 690.778 L1676.01 690.778 L1676.57 690.778 L1677.13 690.778 L1677.68 690.778 L1678.24 690.778 L1678.8 690.778 L1679.36 690.778 L1679.92 690.778 L1680.48 690.778 L1681.04 690.778 L1681.6 690.778 L1682.16 690.778 L1682.72 690.778 L1683.28 690.778 L1683.84 690.778 L1684.4 690.778 L1684.95 690.778 L1685.51 690.778 L1686.07 690.778 L1686.63 690.778 L1687.19 690.778 L1687.75 690.778 L1688.31 690.778 L1688.87 690.778 L1689.43 690.778 L1689.99 690.778 L1690.55 690.778 L1691.11 690.778 L1691.67 690.778 L1692.23 690.778 L1692.78 690.778 L1693.34 690.778 L1693.9 690.778 L1694.46 690.778 L1695.02 690.778 L1695.58 690.778 L1696.14 690.778 L1696.7 690.778 L1697.26 690.778 L1697.82 690.778 L1698.38 690.778 L1698.94 690.778 L1699.5 690.778 L1700.05 690.778 L1700.61 690.778 L1701.17 690.778 L1701.73 690.778 L1702.29 690.778 L1702.85 690.778 L1703.41 690.778 L1703.97 690.778 L1704.53 690.778 L1705.09 690.778 L1705.65 690.778 L1706.21 690.778 L1706.77 690.778 L1707.32 690.778 L1707.88 690.778 L1708.44 690.778 L1709 690.778 L1709.56 690.778 L1710.12 690.778 L1710.68 690.778 L1711.24 690.778 L1711.8 690.778 L1712.36 690.778 L1712.92 690.778 L1713.48 690.778 L1714.04 690.778 L1714.6 690.778 L1715.15 690.778 L1715.71 690.778 L1716.27 690.778 L1716.83 690.778 L1717.39 690.778 L1717.95 690.778 L1718.51 690.778 L1719.07 690.778 L1719.63 690.778 L1720.19 690.778 L1720.75 690.778 L1721.31 690.778 L1721.87 690.778 L1722.42 690.778 L1722.98 690.778 L1723.54 690.778 L1724.1 690.778 L1724.66 690.778 L1725.22 690.778 L1725.78 690.778 L1726.34 690.778 L1726.9 690.778 L1727.46 690.778 L1728.02 690.778 L1728.58 690.778 L1729.14 690.778 L1729.69 690.778 L1730.25 690.778 L1730.81 690.778 L1731.37 690.778 L1731.93 690.778 L1732.49 690.778 L1733.05 690.778 L1733.61 690.778 L1734.17 690.778 L1734.73 690.778 L1735.29 690.778 L1735.85 690.778 L1736.41 690.778 L1736.97 690.778 L1737.52 690.778 L1738.08 690.778 L1738.64 690.778 L1739.2 690.778 L1739.76 690.778 L1740.32 690.778 L1740.88 690.778 L1741.44 690.778 L1742 690.778 L1742.56 690.778 L1743.12 690.778 L1743.68 690.778 L1744.24 690.778 L1744.79 690.778 L1745.35 690.778 L1745.91 690.778 L1746.47 690.778 L1747.03 690.778 L1747.59 690.778 L1748.15 690.778 L1748.71 690.778 L1749.27 690.778 L1749.83 690.778 L1750.39 690.778 L1750.95 690.778 L1751.51 690.778 L1752.06 690.778 L1752.62 690.778 L1753.18 690.778 L1753.74 690.778 L1754.3 690.778 L1754.86 690.778 L1755.42 690.778 L1755.98 690.778 L1756.54 690.778 L1757.1 690.778 L1757.66 690.778 L1758.22 690.778 L1758.78 690.778 L1759.34 690.778 L1759.89 690.778 L1760.45 690.778 L1761.01 690.778 L1761.57 690.778 L1762.13 690.778 L1762.69 690.778 L1763.25 690.778 L1763.81 690.778 L1764.37 690.778 L1764.93 690.778 L1765.49 690.778 L1766.05 690.778 L1766.61 690.778 L1767.16 690.778 L1767.72 690.778 L1768.28 690.778 L1768.84 690.778 L1769.4 690.778 L1769.96 690.778 L1770.52 690.778 L1771.08 690.778 L1771.64 690.778 L1772.2 690.778 L1772.76 690.778 L1773.32 690.778 L1773.88 690.778 L1774.43 690.778 L1774.99 690.778 L1775.55 690.778 L1776.11 690.778 L1776.67 690.778 L1777.23 690.778 L1777.79 690.778 L1778.35 690.778 L1778.91 690.778 L1779.47 690.778 L1780.03 690.778 L1780.59 690.778 L1781.15 690.778 L1781.71 690.778 L1782.26 690.778 L1782.82 690.778 L1783.38 690.778 L1783.94 690.778 L1784.5 690.778 L1785.06 690.778 L1785.62 690.778 L1786.18 690.778 L1786.74 690.778 L1787.3 690.778 L1787.86 690.778 L1788.42 690.778 L1788.98 690.778 L1789.53 690.778 L1790.09 690.778 L1790.65 690.778 L1791.21 690.778 L1791.77 690.778 L1792.33 690.778 L1792.89 690.778 L1793.45 690.778 L1794.01 690.778 L1794.57 690.778 L1795.13 690.778 L1795.69 690.778 L1796.25 690.778 L1796.8 690.778 L1797.36 690.778 L1797.92 690.778 L1798.48 690.778 L1799.04 690.778 L1799.6 690.778 L1800.16 690.778 L1800.72 690.778 L1801.28 690.778 L1801.84 690.778 L1802.4 690.778 L1802.96 690.778 L1803.52 690.778 L1804.08 690.778 L1804.63 690.778 L1805.19 690.778 L1805.75 690.778 L1806.31 690.778 L1806.87 690.778 L1807.43 690.778 L1807.99 690.778 L1808.55 690.778 L1809.11 690.778 L1809.67 690.778 L1810.23 690.778 L1810.79 690.778 L1811.35 690.778 L1811.9 690.778 L1812.46 690.778 L1813.02 690.778 L1813.58 690.778 L1814.14 690.778 L1814.7 690.778 L1815.26 690.778 L1815.82 690.778 L1816.38 690.778 L1816.94 690.778 L1817.5 690.778 L1818.06 690.778 L1818.62 690.778 L1819.18 690.778 L1819.73 690.778 L1820.29 690.778 L1820.85 690.778 L1821.41 690.778 L1821.97 690.778 L1822.53 690.778 L1823.09 690.778 L1823.65 690.778 L1824.21 690.778 L1824.77 690.778 L1825.33 690.778 L1825.89 690.778 L1826.45 690.778 L1827 690.778 L1827.56 690.778 L1828.12 690.778 L1828.68 690.778 L1829.24 690.778 L1829.8 690.778 L1830.36 690.778 L1830.92 690.778 L1831.48 690.778 L1832.04 690.778 L1832.6 690.778 L1833.16 690.778 L1833.72 690.778 L1834.27 690.778 L1834.83 690.778 L1835.39 690.778 L1835.95 690.778 L1836.51 690.778 L1837.07 690.778 L1837.63 690.778 L1838.19 690.778 L1838.19 682.323 L1837.63 682.323 L1837.07 682.323 L1836.51 682.323 L1835.95 682.323 L1835.39 682.323 L1834.83 682.323 L1834.27 682.323 L1833.72 682.323 L1833.16 682.323 L1832.6 682.323 L1832.04 682.323 L1831.48 682.323 L1830.92 682.323 L1830.36 682.323 L1829.8 682.323 L1829.24 682.323 L1828.68 682.323 L1828.12 682.323 L1827.56 682.323 L1827 682.323 L1826.45 682.323 L1825.89 682.323 L1825.33 682.323 L1824.77 682.323 L1824.21 682.323 L1823.65 682.323 L1823.09 682.323 L1822.53 682.323 L1821.97 682.323 L1821.41 682.323 L1820.85 682.323 L1820.29 682.323 L1819.73 682.323 L1819.18 682.323 L1818.62 682.323 L1818.06 682.323 L1817.5 682.323 L1816.94 682.323 L1816.38 682.323 L1815.82 682.323 L1815.26 682.323 L1814.7 682.323 L1814.14 682.323 L1813.58 682.323 L1813.02 682.323 L1812.46 682.323 L1811.9 682.323 L1811.35 682.323 L1810.79 682.323 L1810.23 682.323 L1809.67 682.323 L1809.11 682.323 L1808.55 682.323 L1807.99 682.323 L1807.43 682.323 L1806.87 682.323 L1806.31 682.323 L1805.75 682.323 L1805.19 682.323 L1804.63 682.323 L1804.08 682.323 L1803.52 682.323 L1802.96 682.323 L1802.4 682.323 L1801.84 682.323 L1801.28 682.323 L1800.72 682.323 L1800.16 682.323 L1799.6 682.323 L1799.04 682.323 L1798.48 682.323 L1797.92 682.323 L1797.36 682.323 L1796.8 682.323 L1796.25 682.323 L1795.69 682.323 L1795.13 682.323 L1794.57 682.323 L1794.01 682.323 L1793.45 682.323 L1792.89 682.323 L1792.33 682.323 L1791.77 682.323 L1791.21 682.323 L1790.65 682.323 L1790.09 682.323 L1789.53 682.323 L1788.98 682.323 L1788.42 682.323 L1787.86 682.323 L1787.3 682.323 L1786.74 682.323 L1786.18 682.323 L1785.62 682.323 L1785.06 682.323 L1784.5 682.323 L1783.94 682.323 L1783.38 682.323 L1782.82 682.323 L1782.26 682.323 L1781.71 682.323 L1781.15 682.323 L1780.59 682.323 L1780.03 682.323 L1779.47 682.323 L1778.91 682.323 L1778.35 682.323 L1777.79 682.323 L1777.23 682.323 L1776.67 682.323 L1776.11 682.323 L1775.55 682.323 L1774.99 682.323 L1774.43 682.323 L1773.88 682.323 L1773.32 682.323 L1772.76 682.323 L1772.2 682.323 L1771.64 682.323 L1771.08 682.323 L1770.52 682.323 L1769.96 682.323 L1769.4 682.323 L1768.84 682.323 L1768.28 682.323 L1767.72 682.323 L1767.16 682.323 L1766.61 682.323 L1766.05 682.323 L1765.49 682.323 L1764.93 682.323 L1764.37 682.323 L1763.81 682.323 L1763.25 682.323 L1762.69 682.323 L1762.13 682.323 L1761.57 682.323 L1761.01 682.323 L1760.45 682.323 L1759.89 682.323 L1759.34 682.323 L1758.78 682.323 L1758.22 682.323 L1757.66 682.323 L1757.1 682.323 L1756.54 682.323 L1755.98 682.323 L1755.42 682.323 L1754.86 682.323 L1754.3 682.323 L1753.74 682.323 L1753.18 682.323 L1752.62 682.323 L1752.06 682.323 L1751.51 682.323 L1750.95 682.323 L1750.39 682.323 L1749.83 682.323 L1749.27 682.323 L1748.71 682.323 L1748.15 682.323 L1747.59 682.323 L1747.03 682.323 L1746.47 682.323 L1745.91 682.323 L1745.35 682.323 L1744.79 682.323 L1744.24 682.323 L1743.68 682.323 L1743.12 682.323 L1742.56 682.323 L1742 682.323 L1741.44 682.323 L1740.88 682.323 L1740.32 682.323 L1739.76 682.323 L1739.2 682.323 L1738.64 682.323 L1738.08 682.323 L1737.52 682.323 L1736.97 682.323 L1736.41 682.323 L1735.85 682.323 L1735.29 682.323 L1734.73 682.323 L1734.17 682.323 L1733.61 682.323 L1733.05 682.323 L1732.49 682.323 L1731.93 682.323 L1731.37 682.323 L1730.81 682.323 L1730.25 682.323 L1729.69 682.323 L1729.14 682.323 L1728.58 682.323 L1728.02 682.323 L1727.46 682.323 L1726.9 682.323 L1726.34 682.323 L1725.78 682.323 L1725.22 682.323 L1724.66 682.323 L1724.1 682.323 L1723.54 682.323 L1722.98 682.323 L1722.42 682.323 L1721.87 682.323 L1721.31 682.323 L1720.75 682.323 L1720.19 682.323 L1719.63 682.323 L1719.07 682.323 L1718.51 682.323 L1717.95 682.323 L1717.39 682.323 L1716.83 682.323 L1716.27 682.323 L1715.71 682.323 L1715.15 682.323 L1714.6 682.323 L1714.04 682.323 L1713.48 682.323 L1712.92 682.323 L1712.36 682.323 L1711.8 682.323 L1711.24 682.323 L1710.68 682.323 L1710.12 682.323 L1709.56 682.323 L1709 682.323 L1708.44 682.323 L1707.88 682.323 L1707.32 682.323 L1706.77 682.323 L1706.21 682.323 L1705.65 682.323 L1705.09 682.323 L1704.53 682.323 L1703.97 682.323 L1703.41 682.323 L1702.85 682.323 L1702.29 682.323 L1701.73 682.323 L1701.17 682.323 L1700.61 682.323 L1700.05 682.323 L1699.5 682.323 L1698.94 682.323 L1698.38 682.323 L1697.82 682.323 L1697.26 682.323 L1696.7 682.323 L1696.14 682.323 L1695.58 682.323 L1695.02 682.323 L1694.46 682.323 L1693.9 682.323 L1693.34 682.323 L1692.78 682.323 L1692.23 682.323 L1691.67 682.323 L1691.11 682.323 L1690.55 682.323 L1689.99 682.323 L1689.43 682.323 L1688.87 682.323 L1688.31 682.323 L1687.75 682.323 L1687.19 682.323 L1686.63 682.323 L1686.07 682.323 L1685.51 682.323 L1684.95 682.323 L1684.4 682.323 L1683.84 682.323 L1683.28 682.323 L1682.72 682.323 L1682.16 682.323 L1681.6 682.323 L1681.04 682.323 L1680.48 682.323 L1679.92 682.323 L1679.36 682.323 L1678.8 682.323 L1678.24 682.323 L1677.68 682.323 L1677.13 682.323 L1676.57 682.323 L1676.01 682.323 L1675.45 682.323 L1674.89 682.323 L1674.33 682.323 L1673.77 682.323 L1673.21 682.323 L1672.65 682.323 L1672.09 682.323 L1671.53 682.323 L1670.97 682.323 L1670.41 682.323 L1669.85 682.323 L1669.3 682.323 L1668.74 682.323 L1668.18 682.323 L1667.62 682.323 L1667.06 682.323 L1666.5 682.323 L1665.94 682.323 L1665.38 682.323 L1664.82 682.323 L1664.26 682.323 L1663.7 682.323 L1663.14 682.323 L1662.58 682.323 L1662.03 682.323 L1661.47 682.323 L1660.91 682.323 L1660.35 682.323 L1659.79 682.323 L1659.23 682.323 L1658.67 682.323 L1658.11 682.323 L1657.55 682.323 L1656.99 682.323 L1656.43 682.323 L1655.87 682.323 L1655.31 682.323 L1654.76 682.323 L1654.2 682.323 L1653.64 682.323 L1653.08 682.323 L1652.52 682.323 L1651.96 682.323 L1651.4 682.323 L1650.84 682.323 L1650.28 682.323 L1649.72 682.323 L1649.16 682.323 L1648.6 682.323 L1648.04 682.323 L1647.48 682.323 L1646.93 682.323 L1646.37 682.323 L1645.81 682.323 L1645.25 682.323 L1644.69 682.323 L1644.13 682.323 L1643.57 682.323 L1643.01 682.323 L1642.45 682.323 L1641.89 682.323 L1641.33 682.323 L1640.77 682.323 L1640.21 682.323 L1639.66 682.323 L1639.1 682.323 L1638.54 682.323 L1637.98 682.323 L1637.42 682.323 L1636.86 682.323 L1636.3 682.323 L1635.74 682.323 L1635.18 682.323 L1634.62 682.323 L1634.06 682.323 L1633.5 682.323 L1632.94 682.323 L1632.39 682.323 L1631.83 682.323 L1631.27 682.323 L1630.71 682.323 L1630.15 682.323 L1629.59 682.323 L1629.03 682.323 L1628.47 682.323 L1627.91 682.323 L1627.35 682.323 L1626.79 682.323 L1626.23 682.323 L1625.67 682.323 L1625.11 682.323 L1624.56 682.323 L1624 682.323 L1623.44 682.323 L1622.88 682.323 L1622.32 682.323 L1621.76 682.323 L1621.2 682.323 L1620.64 682.323 L1620.08 682.323 L1619.52 682.323 L1618.96 682.323 L1618.4 682.323 L1617.84 682.323 L1617.29 682.323 L1616.73 682.323 L1616.17 682.323 L1615.61 682.323 L1615.05 682.323 L1614.49 682.323 L1613.93 682.323 L1613.37 682.323 L1612.81 682.323 L1612.25 682.323 L1611.69 682.323 L1611.13 682.323 L1610.57 682.323 L1610.02 682.323 L1609.46 682.323 L1608.9 682.323 L1608.34 682.323 L1607.78 682.323 L1607.22 682.323 L1606.66 682.323 L1606.1 682.323 L1605.54 682.323 L1604.98 682.323 L1604.42 682.323 L1603.86 682.323 L1603.3 682.323 L1602.74 682.323 L1602.19 682.323 L1601.63 682.323 L1601.07 682.323 L1600.51 682.323 L1599.95 682.323 L1599.39 682.323 L1598.83 682.323 L1598.27 682.323 L1597.71 682.323 L1597.15 682.323 L1596.59 682.323 L1596.03 682.323 L1595.47 682.323 L1594.92 682.323 L1594.36 682.323 L1593.8 682.323 L1593.24 682.323 L1592.68 682.323 L1592.12 682.323 L1591.56 682.323 L1591 682.323 L1590.44 682.323 L1589.88 682.323 L1589.32 682.323 L1588.76 682.323 L1588.2 682.323 L1587.65 682.323 L1587.09 682.323 L1586.53 682.323 L1585.97 682.323 L1585.41 682.323 L1584.85 682.323 L1584.29 682.323 L1583.73 682.323 L1583.17 682.323 L1582.61 682.323 L1582.05 682.323 L1581.49 682.323 L1580.93 682.323 L1580.37 682.323 L1579.82 682.323 L1579.26 682.323 L1578.7 682.323 L1578.14 682.323 L1577.58 682.323 L1577.02 682.323 L1576.46 682.323 L1575.9 682.323 L1575.34 682.323 L1574.78 682.323 L1574.22 682.323 L1573.66 682.323 L1573.1 682.323 L1572.55 682.323 L1571.99 682.323 L1571.43 682.323 L1570.87 682.323 L1570.31 682.323 L1569.75 682.323 L1569.19 682.323 L1568.63 682.323 L1568.07 682.323 L1567.51 682.323 L1566.95 682.323 L1566.39 682.323 L1565.83 682.323 L1565.28 682.323 L1564.72 682.323 L1564.16 682.323 L1563.6 682.323 L1563.04 682.323 L1562.48 682.323 L1561.92 682.323 L1561.36 682.323 L1560.8 682.323 L1560.24 682.323 L1559.68 682.323 L1559.12 682.323 L1558.56 682.323 L1558 682.323 L1557.45 682.323 L1556.89 682.323 L1556.33 682.323 L1555.77 682.323 L1555.21 682.323 L1554.65 682.323 L1554.09 682.323 L1553.53 682.323 L1552.97 682.323 L1552.41 682.323 L1551.85 682.323 L1551.29 682.323 L1550.73 682.323 L1550.18 682.323 L1549.62 682.323 L1549.06 682.323 L1548.5 682.323 L1547.94 682.323 L1547.38 682.323 L1546.82 682.323 L1546.26 682.323 L1545.7 682.323 L1545.14 682.323 L1544.58 682.323 L1544.02 682.323 L1543.46 682.323 L1542.9 682.323 L1542.35 682.323 L1541.79 682.323 L1541.23 682.323 L1540.67 682.323 L1540.11 682.323 L1539.55 682.323 L1538.99 682.323 L1538.43 682.323 L1537.87 682.323 L1537.31 682.323 L1536.75 682.323 L1536.19 682.323 L1535.63 682.323 L1535.08 682.323 L1534.52 682.323 L1533.96 682.323 L1533.4 682.323 L1532.84 682.323 L1532.28 682.323 L1531.72 682.323 L1531.16 682.323 L1530.6 682.323 L1530.04 682.323 L1529.48 682.323 L1528.92 682.323 L1528.36 682.323 L1527.81 682.323 L1527.25 682.323 L1526.69 682.323 L1526.13 682.323 L1525.57 682.323 L1525.01 682.323 L1524.45 682.323 L1523.89 682.323 L1523.33 682.323 L1522.77 682.323 L1522.21 682.323 L1521.65 682.323 L1521.09 682.323 L1520.53 682.323 L1519.98 682.323 L1519.42 682.323 L1518.86 682.323 L1518.3 682.323 L1517.74 682.323 L1517.18 682.323 L1516.62 682.323 L1516.06 682.323 L1515.5 682.323 L1514.94 682.323 L1514.38 682.323 L1513.82 682.323 L1513.26 682.323 L1512.71 682.323 L1512.15 682.323 L1511.59 682.323 L1511.03 682.323 L1510.47 682.323 L1509.91 682.323 L1509.35 682.323 L1508.79 682.323 L1508.23 682.323 L1507.67 682.323 L1507.11 682.323 L1506.55 682.323 L1505.99 682.323 L1505.44 682.323 L1504.88 682.323 L1504.32 682.323 L1503.76 682.323 L1503.2 682.323 L1502.64 682.323 L1502.08 682.323 L1501.52 682.323 L1500.96 682.323 L1500.4 682.323 L1499.84 682.323 L1499.28 682.323 L1498.72 682.323 L1498.16 682.323 L1497.61 682.323 L1497.05 682.323 L1496.49 682.323 L1495.93 682.323 L1495.37 682.323 L1494.81 682.323 L1494.25 682.323 L1493.69 682.323 L1493.13 682.323 L1492.57 682.323 L1492.01 682.323 L1491.45 682.323 L1490.89 682.323 L1490.34 682.323 L1489.78 682.323 L1489.22 682.323 L1488.66 682.323 L1488.1 682.323 L1487.54 682.323 L1486.98 682.323 L1486.42 682.323 L1485.86 682.323 L1485.3 682.323 L1484.74 682.323 L1484.18 682.323 L1483.62 682.323 L1483.07 682.323 L1482.51 682.323 L1481.95 682.323 L1481.39 682.323 L1480.83 682.323 L1480.27 682.323 L1479.71 682.323 L1479.15 682.323 L1478.59 682.323 L1478.03 682.323 L1477.47 682.323 L1476.91 682.323 L1476.35 682.323 L1475.79 682.323 L1475.24 682.323 L1474.68 682.323 L1474.12 682.323 L1473.56 682.323 L1473 682.323 L1472.44 682.323 L1471.88 682.323 L1471.32 682.323 L1470.76 682.323 L1470.2 682.323 L1469.64 682.323 L1469.08 682.323 L1468.52 682.323 L1467.97 682.323 L1467.41 682.323 L1466.85 682.323 L1466.29 682.323 L1465.73 682.323 L1465.17 682.323 L1464.61 682.323 L1464.05 682.323 L1463.49 682.323 L1462.93 682.323 L1462.37 682.323 L1461.81 682.323 L1461.25 682.323 L1460.7 682.323 L1460.14 682.323 L1459.58 682.323 L1459.02 682.323 L1458.46 682.323 L1457.9 682.323 L1457.34 682.323 L1456.78 682.323 L1456.22 682.323 L1455.66 682.323 L1455.1 682.323 L1454.54 682.323 L1453.98 682.323 L1453.42 682.323 L1452.87 682.323 L1452.31 682.323 L1451.75 682.323 L1451.19 682.323 L1450.63 682.323 L1450.07 682.323 L1449.51 682.323 L1448.95 682.323 L1448.39 682.323 L1447.83 682.323 L1447.27 682.323 L1446.71 682.323 L1446.15 682.323 L1445.6 682.323 L1445.04 682.323 L1444.48 682.323 L1443.92 682.323 L1443.36 682.323 L1442.8 682.323 L1442.24 682.323 L1441.68 682.323 L1441.12 682.323 L1440.56 682.323 L1440 682.323 L1439.44 682.323 L1438.88 682.323 L1438.33 682.323 L1437.77 682.323 L1437.21 682.323 L1436.65 682.323 L1436.09 682.323 L1435.53 682.323 L1434.97 682.323 L1434.41 682.323 L1433.85 682.323 L1433.29 682.323 L1432.73 682.323 L1432.17 682.323 L1431.61 682.323 L1431.05 682.323 L1430.5 682.323 L1429.94 682.323 L1429.38 682.323 L1428.82 682.323 L1428.26 682.323 L1427.7 682.323 L1427.14 682.323 L1426.58 682.323 L1426.02 682.323 L1425.46 682.323 L1424.9 682.323 L1424.34 682.323 L1423.78 682.323 L1423.23 682.323 L1422.67 682.323 L1422.11 682.323 L1421.55 682.323 L1420.99 682.323 L1420.43 682.323 L1419.87 682.323 L1419.31 682.323 L1418.75 682.323 L1418.19 682.323 L1417.63 682.323 L1417.07 682.323 L1416.51 682.323 L1415.95 682.323 L1415.4 682.323 L1414.84 682.323 L1414.28 682.323 L1413.72 682.323 L1413.16 682.323 L1412.6 682.323 L1412.04 682.323 L1411.48 682.323 L1410.92 682.323 L1410.36 682.323 L1409.8 682.323 L1409.24 682.323 L1408.68 682.323 L1408.13 682.323 L1407.57 682.323 L1407.01 682.323 L1406.45 682.323 L1405.89 682.323 L1405.33 682.323 L1404.77 682.323 L1404.21 682.323 L1403.65 682.323 L1403.09 682.323 L1402.53 682.323 L1401.97 682.323 L1401.41 682.323 L1400.86 682.323 L1400.3 682.323 L1399.74 682.323 L1399.18 682.323 L1398.62 682.323 L1398.06 682.323 L1397.5 682.323 L1396.94 682.323 L1396.38 682.323 L1395.82 682.323 L1395.26 682.323 L1394.7 682.323 L1394.14 682.323 L1393.58 682.323 L1393.03 682.323 L1392.47 682.323 L1391.91 682.323 L1391.35 682.323 L1390.79 682.323 L1390.23 682.323 L1389.67 682.323 L1389.11 682.323 L1388.55 682.323 L1387.99 682.323 L1387.43 682.323 L1386.87 682.323 L1386.31 682.323 L1385.76 682.323 L1385.2 682.323 L1384.64 682.323 L1384.08 682.323 L1383.52 682.323 L1382.96 682.323 L1382.4 682.323 L1381.84 682.323 L1381.28 682.323 L1380.72 682.323 L1380.16 682.323 L1379.6 682.323 L1379.04 682.323 L1378.49 682.323 L1377.93 682.323 L1377.37 682.323 L1376.81 682.323 L1376.25 682.323 L1375.69 682.323 L1375.13 682.323 L1374.57 682.323 L1374.01 682.323 L1373.45 682.323 L1372.89 682.323 L1372.33 682.323 L1371.77 682.323 L1371.21 682.323 L1370.66 682.323 L1370.1 682.323 L1369.54 682.323 L1368.98 682.323 L1368.42 682.323 L1367.86 682.323 L1367.3 682.323 L1366.74 682.323 L1366.18 682.323 L1365.62 682.323 L1365.06 682.323 L1364.5 682.323 L1363.94 682.323 L1363.39 682.323 L1362.83 682.323 L1362.27 682.323 L1361.71 682.323 L1361.15 682.323 L1360.59 682.323 L1360.03 682.323 L1359.47 682.323 L1358.91 682.323 L1358.35 682.323 L1357.79 682.323 L1357.23 682.323 L1356.67 682.323 L1356.12 682.323 L1355.56 682.323 L1355 682.323 L1354.44 682.323 L1353.88 682.323 L1353.32 682.323 L1352.76 682.323 L1352.2 682.323 L1351.64 682.323 L1351.08 682.323 L1350.52 682.323 L1349.96 682.323 L1349.4 682.323 L1348.84 682.323 L1348.29 682.323 L1347.73 682.323 L1347.17 682.323 L1346.61 682.323 L1346.05 682.323 L1345.49 682.323 L1344.93 682.323 L1344.37 682.323 L1343.81 682.323 L1343.25 682.323 L1342.69 682.323 L1342.13 682.323 L1341.57 682.323 L1341.02 682.323 L1340.46 682.323 L1339.9 682.323 L1339.34 682.323 L1338.78 682.323 L1338.22 682.323 L1337.66 682.323 L1337.1 682.323 L1336.54 682.323 L1335.98 682.323 L1335.42 682.323 L1334.86 682.323 L1334.3 682.323 L1333.75 682.323 L1333.19 682.323 L1332.63 682.323 L1332.07 682.323 L1331.51 682.323 L1330.95 682.323 L1330.39 682.323 L1329.83 682.323 L1329.27 682.323 L1328.71 682.323 L1328.15 682.323 L1327.59 682.323 L1327.03 682.323 L1326.47 682.323 L1325.92 682.323 L1325.36 682.323 L1324.8 682.323 L1324.24 682.323 L1323.68 682.323 L1323.12 682.323 L1322.56 682.323 L1322 682.323 L1321.44 682.323 L1320.88 682.323 L1320.32 682.323 L1319.76 682.323 L1319.2 682.323 L1318.65 682.323 L1318.09 682.323 L1317.53 682.323 L1316.97 682.323 L1316.41 682.323 L1315.85 682.323 L1315.29 682.323 L1314.73 682.323 L1314.17 682.323 L1313.61 682.323 L1313.05 682.323 L1312.49 682.323 L1311.93 682.323 L1311.38 682.323 L1310.82 682.323 L1310.26 682.323 L1309.7 682.323 L1309.14 682.323 L1308.58 682.323 L1308.02 682.323 L1307.46 682.323 L1306.9 682.323 L1306.34 682.323 L1305.78 682.323 L1305.22 682.323 L1304.66 682.323 L1304.1 682.323 L1303.55 682.323 L1302.99 682.323 L1302.43 682.323 L1301.87 682.323 L1301.31 682.323 L1300.75 682.323 L1300.19 682.323 L1299.63 682.323 L1299.07 682.323 L1298.51 682.323 L1297.95 682.323 L1297.39 682.323 L1296.83 682.323 L1296.28 682.323 L1295.72 682.323 L1295.16 682.323 L1294.6 682.323 L1294.04 682.323 L1293.48 682.323 L1292.92 682.323 L1292.36 682.323 L1291.8 682.323 L1291.24 682.323 L1290.68 682.323 L1290.12 682.323 L1289.56 682.323 L1289 682.323 L1288.45 682.323 L1287.89 682.323 L1287.33 682.323 L1286.77 682.323 L1286.21 682.323 L1285.65 682.323 L1285.09 682.323 L1284.53 682.323 L1283.97 682.323 L1283.41 682.323 L1282.85 682.323 L1282.29 682.323 L1281.73 682.323 L1281.18 682.323 L1280.62 682.323 L1280.06 682.323 L1279.5 682.323 L1278.94 682.323 L1278.38 682.323 L1277.82 682.323 L1277.26 682.323 L1276.7 682.323 L1276.14 682.323 L1275.58 682.323 L1275.02 682.323 L1274.46 682.323 L1273.91 682.323 L1273.35 682.323 L1272.79 682.323 L1272.23 682.323 L1271.67 682.323 L1271.11 682.323 L1270.55 682.323 L1269.99 682.323 L1269.43 682.323 L1268.87 682.323 L1268.31 682.323 L1267.75 682.323 L1267.19 682.323 L1266.63 682.323 L1266.08 682.323 L1265.52 682.323 L1264.96 682.323 L1264.4 682.323 L1263.84 682.323 L1263.28 682.323 L1262.72 682.323 L1262.16 682.323 L1261.6 682.323 L1261.04 682.323 L1260.48 682.323 L1259.92 682.323 L1259.36 682.323 L1258.81 682.323 L1258.25 682.323 L1257.69 682.323 L1257.13 682.323 L1256.57 682.323 L1256.01 682.323 L1255.45 682.323 L1254.89 682.323 L1254.33 682.323 L1253.77 682.323 L1253.21 682.323 L1252.65 682.323 L1252.09 682.323 L1251.54 682.323 L1250.98 682.323 L1250.42 682.323 L1249.86 682.323 L1249.3 682.323 L1248.74 682.323 L1248.18 682.323 L1247.62 682.323 L1247.06 682.323 L1246.5 682.323 L1245.94 682.323 L1245.38 682.323 L1244.82 682.323 L1244.26 682.323 L1243.71 682.323 L1243.15 682.323 L1242.59 682.323 L1242.03 682.323 L1241.47 682.323 L1240.91 682.323 L1240.35 682.323 L1239.79 682.323 L1239.23 682.323 L1238.67 682.323 L1238.11 682.323 L1237.55 682.323 L1236.99 682.323 L1236.44 682.323 L1235.88 682.323 L1235.32 682.323 L1234.76 682.323 L1234.2 682.323 L1233.64 682.323 L1233.08 682.323 L1232.52 682.323 L1231.96 682.323 L1231.4 682.323 L1230.84 682.323 L1230.28 682.323 L1229.72 682.323 L1229.17 682.323 L1228.61 682.323 L1228.05 682.323 L1227.49 682.323 L1226.93 682.323 L1226.37 682.323 L1225.81 682.323 L1225.25 682.323 L1224.69 682.323 L1224.13 682.323 L1223.57 682.323 L1223.01 682.323 L1222.45 682.323 L1221.89 682.323 L1221.34 682.323 L1220.78 682.323 L1220.22 682.323 L1219.66 682.323 L1219.1 682.323 L1218.54 682.323 L1217.98 682.323 L1217.42 682.323 L1216.86 682.323 L1216.3 682.323 L1215.74 682.323 L1215.18 682.323 L1214.62 682.323 L1214.07 682.323 L1213.51 682.323 L1212.95 682.323 L1212.39 682.323 L1211.83 682.323 L1211.27 682.323 L1210.71 682.323 L1210.15 682.323 L1209.59 682.323 L1209.03 682.323 L1208.47 682.323 L1207.91 682.323 L1207.35 682.323 L1206.8 682.323 L1206.24 682.323 L1205.68 682.323 L1205.12 682.323 L1204.56 682.323 L1204 682.323 L1203.44 682.323 L1202.88 682.323 L1202.32 682.323 L1201.76 682.323 L1201.2 682.323 L1200.64 682.323 L1200.08 682.323 L1199.52 682.323 L1198.97 682.323 L1198.41 682.323 L1197.85 682.323 L1197.29 682.323 L1196.73 682.323 L1196.17 682.323 L1195.61 682.323 L1195.05 682.323 L1194.49 682.323 L1193.93 682.323 L1193.37 682.323 L1192.81 682.323 L1192.25 682.323 L1191.7 682.323 L1191.14 682.323 L1190.58 682.323 L1190.02 682.323 L1189.46 682.323 L1188.9 682.323 L1188.34 682.323 L1187.78 682.323 L1187.22 682.323 L1186.66 682.323 L1186.1 682.323 L1185.54 682.323 L1184.98 682.323 L1184.43 682.323 L1183.87 682.323 L1183.31 682.323 L1182.75 682.323 L1182.19 682.323 L1181.63 682.323 L1181.07 682.323 L1180.51 682.323 L1179.95 682.323 L1179.39 682.323 L1178.83 682.323 L1178.27 682.323 L1177.71 682.323 L1177.15 682.323 L1176.6 682.323 L1176.04 682.323 L1175.48 682.323 L1174.92 682.323 L1174.36 682.323 L1173.8 682.323 L1173.24 682.323 L1172.68 682.323 L1172.12 682.323 L1171.56 682.323 L1171 682.323 L1170.44 682.323 L1169.88 682.323 L1169.33 682.323 L1168.77 682.323 L1168.21 682.323 L1167.65 682.323 L1167.09 682.323 L1166.53 682.323 L1165.97 682.323 L1165.41 682.323 L1164.85 682.323 L1164.29 682.323 L1163.73 682.323 L1163.17 682.323 L1162.61 682.323 L1162.05 682.323 L1161.5 682.323 L1160.94 682.323 L1160.38 682.323 L1159.82 682.323 L1159.26 682.323 L1158.7 682.323 L1158.14 682.323 L1157.58 682.323 L1157.02 682.323 L1156.46 682.323 L1155.9 682.323 L1155.34 682.323 L1154.78 682.323 L1154.23 682.323 L1153.67 682.323 L1153.11 682.323 L1152.55 682.323 L1151.99 682.323 L1151.43 682.323 L1150.87 682.323 L1150.31 682.323 L1149.75 682.323 L1149.19 682.323 L1148.63 682.323 L1148.07 682.323 L1147.51 682.323 L1146.96 682.323 L1146.4 682.323 L1145.84 682.323 L1145.28 682.323 L1144.72 682.323 L1144.16 682.323 L1143.6 682.323 L1143.04 682.323 L1142.48 682.323 L1141.92 682.323 L1141.36 682.323 L1140.8 682.323 L1140.24 682.323 L1139.68 682.323 L1139.13 682.323 L1138.57 682.323 L1138.01 682.323 L1137.45 682.323 L1136.89 682.323 L1136.33 682.323 L1135.77 682.323 L1135.21 682.323 L1134.65 682.323 L1134.09 682.323 L1133.53 682.323 L1132.97 682.323 L1132.41 682.323 L1131.86 682.323 L1131.3 682.323 L1130.74 682.323 L1130.18 682.323 L1129.62 682.323 L1129.06 682.323 L1128.5 682.323 L1127.94 682.323 L1127.38 682.323 L1126.82 682.323 L1126.26 682.323 L1125.7 682.323 L1125.14 682.323 L1124.59 682.323 L1124.03 682.323 L1123.47 682.323 L1122.91 682.323 L1122.35 682.323 L1121.79 682.323 L1121.23 682.323 L1120.67 682.323 L1120.11 682.323 L1119.55 682.323 L1118.99 682.323 L1118.43 682.323 L1117.87 682.323 L1117.31 682.323 L1116.76 682.323 L1116.2 682.323 L1115.64 682.323 L1115.08 682.323 L1114.52 682.323 L1113.96 682.323 L1113.4 682.323 L1112.84 682.323 L1112.28 682.323 L1111.72 682.323 L1111.16 682.323 L1110.6 682.323 L1110.04 682.323 L1109.49 682.323 L1108.93 682.323 L1108.37 682.323 L1107.81 682.323 L1107.25 682.323 L1106.69 682.323 L1106.13 682.323 L1105.57 682.323 L1105.01 682.323 L1104.45 682.323 L1103.89 682.323 L1103.33 682.323 L1102.77 682.323 L1102.22 682.323 L1101.66 682.323 L1101.1 682.323 L1100.54 682.323 L1099.98 682.323 L1099.42 682.323 L1098.86 682.323 L1098.3 682.323 L1097.74 682.323 L1097.18 682.323 L1096.62 682.323 L1096.06 682.323 L1095.5 682.323 L1094.94 682.323 L1094.39 682.323 L1093.83 682.323 L1093.27 682.323 L1092.71 682.323 L1092.15 682.323 L1091.59 682.323 L1091.03 682.323 L1090.47 682.323 L1089.91 682.323 L1089.35 682.323 L1088.79 682.323 L1088.23 682.323 L1087.67 682.323 L1087.12 682.323 L1086.56 682.323 L1086 682.323 L1085.44 682.323 L1084.88 682.323 L1084.32 682.323 L1083.76 682.323 L1083.2 682.323 L1082.64 682.323 L1082.08 682.323 L1081.52 682.323 L1080.96 682.323 L1080.4 682.323 L1079.85 682.323 L1079.29 682.323 L1078.73 682.323 L1078.17 682.323 L1077.61 682.323 L1077.05 682.323 L1076.49 682.323 L1075.93 682.323 L1075.37 682.323 L1074.81 682.323 L1074.25 682.323 L1073.69 682.323 L1073.13 682.323 L1072.57 682.323 L1072.02 682.323 L1071.46 682.323 L1070.9 682.323 L1070.34 682.323 L1069.78 682.323 L1069.22 682.323 L1068.66 682.323 L1068.1 682.323 L1067.54 682.323 L1066.98 682.323 L1066.42 682.323 L1065.86 682.323 L1065.3 682.323 L1064.75 682.323 L1064.19 682.323 L1063.63 682.323 L1063.07 682.323 L1062.51 682.323 L1061.95 682.323 L1061.39 682.323 L1060.83 682.323 L1060.27 682.323 L1059.71 682.323 L1059.15 682.323 L1058.59 682.323 L1058.03 682.323 L1057.48 682.323 L1056.92 682.323 L1056.36 682.323 L1055.8 682.323 L1055.24 682.323 L1054.68 682.323 L1054.12 682.323 L1053.56 682.323 L1053 682.323 L1052.44 682.323 L1051.88 682.323 L1051.32 682.323 L1050.76 682.323 L1050.2 682.323 L1049.65 682.323 L1049.09 682.323 L1048.53 682.323 L1047.97 682.323 L1047.41 682.323 L1046.85 682.323 L1046.29 682.323 L1045.73 682.323 L1045.17 682.323 L1044.61 682.323 L1044.05 682.323 L1043.49 682.323 L1042.93 682.323 L1042.38 682.323 L1041.82 682.323 L1041.26 682.323 L1040.7 682.323 L1040.14 682.323 L1039.58 682.323 L1039.02 682.323 L1038.46 682.323 L1037.9 682.323 L1037.34 682.323 L1036.78 682.323 L1036.22 682.323 L1035.66 682.323 L1035.1 682.323 L1034.55 682.323 L1033.99 682.323 L1033.43 682.323 L1032.87 682.323 L1032.31 682.323 L1031.75 682.323 L1031.19 682.323 L1030.63 682.323 L1030.07 682.323 L1029.51 682.323 L1028.95 682.323 L1028.39 682.323 L1027.83 682.323 L1027.28 682.323 L1026.72 682.323 L1026.16 682.323 L1025.6 682.323 L1025.04 682.323 L1024.48 682.323 L1023.92 682.323 L1023.36 682.323 L1022.8 682.323 L1022.24 682.323 L1021.68 682.323 L1021.12 682.323 L1020.56 682.323 L1020.01 682.323 L1019.45 682.323 L1018.89 682.323 L1018.33 682.323 L1017.77 682.323 L1017.21 682.323 L1016.65 682.323 L1016.09 682.323 L1015.53 682.323 L1014.97 682.323 L1014.41 682.323 L1013.85 682.323 L1013.29 682.323 L1012.73 682.323 L1012.18 682.323 L1011.62 682.323 L1011.06 682.323 L1010.5 682.323 L1009.94 682.323 L1009.38 682.323 L1008.82 682.323 L1008.26 682.323 L1007.7 682.323 L1007.14 682.323 L1006.58 682.323 L1006.02 682.323 L1005.46 682.323 L1004.91 682.323 L1004.35 682.323 L1003.79 682.323 L1003.23 682.323 L1002.67 682.323 L1002.11 682.323 L1001.55 682.323 L1000.99 682.323 L1000.43 682.323 L999.872 682.323 L999.313 682.323 L998.754 682.323 L998.194 682.323 L997.635 682.323 L997.076 682.323 L996.517 682.323 L995.957 682.323 L995.398 682.323 L994.839 682.323 L994.28 682.323 L993.72 682.323 L993.161 682.323 L992.602 682.323 L992.043 682.323 L991.483 682.323 L990.924 682.323 L990.365 682.323 L989.806 682.323 L989.246 682.323 L988.687 682.323 L988.128 682.323 L987.569 682.323 L987.009 682.323 L986.45 682.323 L985.891 682.323 L985.332 682.323 L984.772 682.323 L984.213 682.323 L983.654 682.323 L983.095 682.323 L982.535 682.323 L981.976 682.323 L981.417 682.323 L980.858 682.323 L980.298 682.323 L979.739 682.323 L979.18 682.323 L978.621 682.323 L978.061 682.323 L977.502 682.323 L976.943 682.323 L976.384 682.323 L975.824 682.323 L975.265 682.323 L974.706 682.323 L974.147 682.323 L973.587 682.323 L973.028 682.323 L972.469 682.323 L971.91 682.323 L971.35 682.323 L970.791 682.323 L970.232 682.323 L969.673 682.323 L969.113 682.323 L968.554 682.323 L967.995 682.323 L967.436 682.323 L966.876 682.323 L966.317 682.323 L965.758 682.323 L965.199 682.323 L964.639 682.323 L964.08 682.323 L963.521 682.323 L962.962 682.323 L962.402 682.323 L961.843 682.323 L961.284 682.323 L960.725 682.323 L960.165 682.323 L959.606 682.323 L959.047 682.323 L958.488 682.323 L957.928 682.323 L957.369 682.323 L956.81 682.323 L956.251 682.323 L955.691 682.323 L955.132 682.323 L954.573 682.323 L954.014 682.323 L953.454 682.323 L952.895 682.323 L952.336 682.323 L951.777 682.323 L951.217 682.323 L950.658 682.323 L950.099 682.323 L949.54 682.323 L948.98 682.323 L948.421 682.323 L947.862 682.323 L947.303 682.323 L946.743 682.323 L946.184 682.323 L945.625 682.323 L945.066 682.323 L944.506 682.323 L943.947 682.323 L943.388 682.323 L942.829 682.323 L942.269 682.323 L941.71 682.323 L941.151 682.323 L940.592 682.323 L940.032 682.323 L939.473 682.323 L938.914 682.323 L938.355 682.323 L937.795 682.323 L937.236 682.323 L936.677 682.323 L936.118 682.323 L935.558 682.323 L934.999 682.323 L934.44 682.323 L933.881 682.323 L933.321 682.323 L932.762 682.323 L932.203 682.323 L931.644 682.323 L931.084 682.323 L930.525 682.323 L929.966 682.323 L929.406 682.323 L928.847 682.323 L928.288 682.323 L927.729 682.323 L927.169 682.323 L926.61 682.323 L926.051 682.323 L925.492 682.323 L924.932 682.323 L924.373 682.323 L923.814 682.323 L923.255 682.323 L922.695 682.323 L922.136 682.323 L921.577 682.323 L921.018 682.323 L920.458 682.323 L919.899 682.323 L919.34 682.323 L918.781 682.323 L918.221 682.323 L917.662 682.323 L917.103 682.323 L916.544 682.323 L915.984 682.323 L915.425 682.323 L914.866 682.323 L914.307 682.323 L913.747 682.323 L913.188 682.323 L912.629 682.323 L912.07 682.323 L911.51 682.323 L910.951 682.323 L910.392 682.323 L909.833 682.323 L909.273 682.323 L908.714 682.323 L908.155 682.323 L907.596 682.323 L907.036 682.323 L906.477 682.323 L905.918 682.323 L905.359 682.323 L904.799 682.323 L904.24 682.323 L903.681 682.323 L903.122 682.323 L902.562 682.323 L902.003 682.323 L901.444 682.323 L900.885 682.323 L900.325 682.323 L899.766 682.323 L899.207 682.323 L898.648 682.323 L898.088 682.323 L897.529 682.323 L896.97 682.323 L896.411 682.323 L895.851 682.323 L895.292 682.323 L894.733 682.323 L894.174 682.323 L893.614 682.323 L893.055 682.323 L892.496 682.323 L891.937 682.323 L891.377 682.323 L890.818 682.323 L890.259 682.323 L889.7 682.323 L889.14 682.323 L888.581 682.323 L888.022 682.323 L887.463 682.323 L886.903 682.323 L886.344 682.323 L885.785 682.323 L885.226 682.323 L884.666 682.323 L884.107 682.323 L883.548 682.323 L882.989 682.323 L882.429 682.323 L881.87 682.323 L881.311 682.323 L880.752 682.323 L880.192 682.323 L879.633 682.323 L879.074 682.323 L878.515 682.323 L877.955 682.323 L877.396 682.323 L876.837 682.323 L876.278 682.323 L875.718 682.323 L875.159 682.323 L874.6 682.323 L874.041 682.323 L873.481 682.323 L872.922 682.323 L872.363 682.323 L871.804 682.323 L871.244 682.323 L870.685 682.323 L870.126 682.323 L869.567 682.323 L869.007 682.323 L868.448 682.323 L867.889 682.323 L867.33 682.323 L866.77 682.323 L866.211 682.323 L865.652 682.323 L865.093 682.323 L864.533 682.323 L863.974 682.323 L863.415 682.323 L862.856 682.323 L862.296 682.323 L861.737 682.323 L861.178 682.323 L860.619 682.323 L860.059 682.323 L859.5 682.323 L858.941 682.323 L858.382 682.323 L857.822 682.323 L857.263 682.323 L856.704 682.323 L856.145 682.323 L855.585 682.323 L855.026 682.323 L854.467 682.323 L853.908 682.323 L853.348 682.323 L852.789 682.323 L852.23 682.323 L851.671 682.323 L851.111 682.323 L850.552 682.323 L849.993 682.323 L849.434 682.323 L848.874 682.323 L848.315 682.323 L847.756 682.323 L847.197 682.323 L846.637 682.323 L846.078 682.323 L845.519 682.323 L844.96 682.323 L844.4 682.323 L843.841 682.323 L843.282 682.323 L842.723 682.323 L842.163 682.323 L841.604 682.323 L841.045 682.323 L840.486 682.323 L839.926 682.323 L839.367 682.323 L838.808 682.323 L838.249 682.323 L837.689 682.323 L837.13 682.323 L836.571 682.323 L836.012 682.323 L835.452 682.323 L834.893 682.323 L834.334 682.323 L833.775 682.323 L833.215 682.323 L832.656 682.323 L832.097 682.323 L831.538 682.323 L830.978 682.323 L830.419 682.323 L829.86 682.323 L829.301 682.323 L828.741 682.323 L828.182 682.323 L827.623 682.323 L827.064 682.323 L826.504 682.323 L825.945 682.323 L825.386 682.323 L824.827 682.323 L824.267 682.323 L823.708 682.323 L823.149 682.323 L822.59 682.323 L822.03 682.323 L821.471 682.323 L820.912 682.323 L820.353 682.323 L819.793 682.323 L819.234 682.323 L818.675 682.323 L818.116 682.323 L817.556 682.323 L816.997 682.323 L816.438 682.323 L815.879 682.323 L815.319 682.323 L814.76 682.323 L814.201 682.323 L813.642 682.323 L813.082 682.323 L812.523 682.323 L811.964 682.323 L811.405 682.323 L810.845 682.323 L810.286 682.323 L809.727 682.323 L809.168 682.323 L808.608 682.323 L808.049 682.323 L807.49 682.323 L806.931 682.323 L806.371 682.323 L805.812 682.323 L805.253 682.323 L804.693 682.323 L804.134 682.323 L803.575 682.323 L803.016 682.323 L802.456 682.323 L801.897 682.323 L801.338 682.323 L800.779 682.323 L800.219 682.323 L799.66 682.323 L799.101 682.323 L798.542 682.323 L797.982 682.323 L797.423 682.323 L796.864 682.323 L796.305 682.323 L795.745 682.323 L795.186 682.323 L794.627 682.323 L794.068 682.323 L793.508 682.323 L792.949 682.323 L792.39 682.323 L791.831 682.323 L791.271 682.323 L790.712 682.323 L790.153 682.323 L789.594 682.323 L789.034 682.323 L788.475 682.323 L787.916 682.323 L787.357 682.323 L786.797 682.323 L786.238 682.323 L785.679 682.323 L785.12 682.323 L784.56 682.323 L784.001 682.323 L783.442 682.323 L782.883 682.323 L782.323 682.323 L781.764 682.323 L781.205 682.323 L780.646 682.323 L780.086 682.323 L779.527 682.323 L778.968 682.323 L778.409 682.323 L777.849 682.323 L777.29 682.323 L776.731 682.323 L776.172 682.323 L775.612 682.323 L775.053 682.323 L774.494 682.323 L773.935 682.323 L773.375 682.323 L772.816 682.323 L772.257 682.323 L771.698 682.323 L771.138 682.323 L770.579 682.323 L770.02 682.323 L769.461 682.323 L768.901 682.323 L768.342 682.323 L767.783 682.323 L767.224 682.323 L766.664 682.323 L766.105 682.323 L765.546 682.323 L764.987 682.323 L764.427 682.323 L763.868 682.323 L763.309 682.323 L762.75 682.323 L762.19 682.323 L761.631 682.323 L761.072 682.323 L760.513 682.323 L759.953 682.323 L759.394 682.323 L758.835 682.323 L758.276 682.323 L757.716 682.323 L757.157 682.323 L756.598 682.323 L756.039 682.323 L755.479 682.323 L754.92 682.323 L754.361 682.323 L753.802 682.323 L753.242 682.323 L752.683 682.323 L752.124 682.323 L751.565 682.323 L751.005 682.323 L750.446 682.323 L749.887 682.323 L749.328 682.323 L748.768 682.323 L748.209 682.323 L747.65 682.323 L747.091 682.323 L746.531 682.323 L745.972 682.323 L745.413 682.323 L744.854 682.323 L744.294 682.323 L743.735 682.323 L743.176 682.323 L742.617 682.323 L742.057 682.323 L741.498 682.323 L740.939 682.323 L740.38 682.323 L739.82 682.323 L739.261 682.323 L738.702 682.323 L738.143 682.323 L737.583 682.323 L737.024 682.323 L736.465 682.323 L735.906 682.323 L735.346 682.323 L734.787 682.323 L734.228 682.323 L733.669 682.323 L733.109 682.323 L732.55 682.323 L731.991 682.323 L731.432 682.323 L730.872 682.323 L730.313 682.323 L729.754 682.323 L729.195 682.323 L728.635 682.323 L728.076 682.323 L727.517 682.323 L726.958 682.323 L726.398 682.323 L725.839 682.323 L725.28 682.323 L724.721 682.323 L724.161 682.323 L723.602 682.323 L723.043 682.323 L722.484 682.323 L721.924 682.323 L721.365 682.323 L720.806 682.323 L720.247 682.323  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.551 720.806,686.551 721.365,686.551 721.924,686.551 722.484,686.551 723.043,686.551 723.602,686.551 724.161,686.551 724.721,686.551 725.28,686.551 725.839,686.551 726.398,686.551 726.958,686.551 727.517,686.551 728.076,686.551 728.635,686.551 729.195,686.551 729.754,686.551 730.313,686.551 730.872,686.551 731.432,686.551 731.991,686.551 732.55,686.551 733.109,686.551 733.669,686.551 734.228,686.551 734.787,686.551 735.346,686.551 735.906,686.551 736.465,686.551 737.024,686.551 737.583,686.551 738.143,686.551 738.702,686.551 739.261,686.551 739.82,686.551 740.38,686.551 740.939,686.551 741.498,686.551 742.057,686.551 742.617,686.551 743.176,686.551 743.735,686.551 744.294,686.551 744.854,686.551 745.413,686.551 745.972,686.551 746.531,686.551 747.091,686.551 747.65,686.551 748.209,686.551 748.768,686.551 749.328,686.551 749.887,686.551 750.446,686.551 751.005,686.551 751.565,686.551 752.124,686.551 752.683,686.551 753.242,686.551 753.802,686.551 754.361,686.551 754.92,686.551 755.479,686.551 756.039,686.551 756.598,686.551 757.157,686.551 757.716,686.551 758.276,686.551 758.835,686.551 759.394,686.551 759.953,686.551 760.513,686.551 761.072,686.551 761.631,686.551 762.19,686.551 762.75,686.551 763.309,686.551 763.868,686.551 764.427,686.551 764.987,686.551 765.546,686.551 766.105,686.551 766.664,686.551 767.224,686.551 767.783,686.551 768.342,686.551 768.901,686.551 769.461,686.551 770.02,686.551 770.579,686.551 771.138,686.551 771.698,686.551 772.257,686.551 772.816,686.551 773.375,686.551 773.935,686.551 774.494,686.551 775.053,686.551 775.612,686.551 776.172,686.551 776.731,686.551 777.29,686.551 777.849,686.551 778.409,686.551 778.968,686.551 779.527,686.551 780.086,686.551 780.646,686.551 781.205,686.551 781.764,686.551 782.323,686.551 782.883,686.551 783.442,686.551 784.001,686.551 784.56,686.551 785.12,686.551 785.679,686.551 786.238,686.551 786.797,686.551 787.357,686.551 787.916,686.551 788.475,686.551 789.034,686.551 789.594,686.551 790.153,686.551 790.712,686.551 791.271,686.551 791.831,686.551 792.39,686.551 792.949,686.551 793.508,686.551 794.068,686.551 794.627,686.551 795.186,686.551 795.745,686.551 796.305,686.551 796.864,686.551 797.423,686.551 797.982,686.551 798.542,686.551 799.101,686.551 799.66,686.551 800.219,686.551 800.779,686.551 801.338,686.551 801.897,686.551 802.456,686.551 803.016,686.551 803.575,686.551 804.134,686.551 804.693,686.551 805.253,686.551 805.812,686.551 806.371,686.551 806.931,686.551 807.49,686.551 808.049,686.551 808.608,686.551 809.168,686.551 809.727,686.551 810.286,686.551 810.845,686.551 811.405,686.551 811.964,686.551 812.523,686.551 813.082,686.551 813.642,686.551 814.201,686.551 814.76,686.551 815.319,686.551 815.879,686.551 816.438,686.551 816.997,686.551 817.556,686.551 818.116,686.551 818.675,686.551 819.234,686.551 819.793,686.551 820.353,686.551 820.912,686.551 821.471,686.551 822.03,686.551 822.59,686.551 823.149,686.551 823.708,686.551 824.267,686.551 824.827,686.551 825.386,686.551 825.945,686.551 826.504,686.551 827.064,686.551 827.623,686.551 828.182,686.551 828.741,686.551 829.301,686.551 829.86,686.551 830.419,686.551 830.978,686.551 831.538,686.551 832.097,686.551 832.656,686.551 833.215,686.551 833.775,686.551 834.334,686.551 834.893,686.551 835.452,686.551 836.012,686.551 836.571,686.551 837.13,686.551 837.689,686.551 838.249,686.551 838.808,686.551 839.367,686.551 839.926,686.551 840.486,686.551 841.045,686.551 841.604,686.551 842.163,686.551 842.723,686.551 843.282,686.551 843.841,686.551 844.4,686.551 844.96,686.551 845.519,686.551 846.078,686.551 846.637,686.551 847.197,686.551 847.756,686.551 848.315,686.551 848.874,686.551 849.434,686.551 849.993,686.551 850.552,686.551 851.111,686.551 851.671,686.551 852.23,686.551 852.789,686.551 853.348,686.551 853.908,686.551 854.467,686.551 855.026,686.551 855.585,686.551 856.145,686.551 856.704,686.551 857.263,686.551 857.822,686.551 858.382,686.551 858.941,686.551 859.5,686.551 860.059,686.551 860.619,686.551 861.178,686.551 861.737,686.551 862.296,686.551 862.856,686.551 863.415,686.551 863.974,686.551 864.533,686.551 865.093,686.551 865.652,686.551 866.211,686.551 866.77,686.551 867.33,686.551 867.889,686.551 868.448,686.551 869.007,686.551 869.567,686.551 870.126,686.551 870.685,686.551 871.244,686.551 871.804,686.551 872.363,686.551 872.922,686.551 873.481,686.551 874.041,686.551 874.6,686.551 875.159,686.551 875.718,686.551 876.278,686.551 876.837,686.551 877.396,686.551 877.955,686.551 878.515,686.551 879.074,686.551 879.633,686.551 880.192,686.551 880.752,686.551 881.311,686.551 881.87,686.551 882.429,686.551 882.989,686.551 883.548,686.551 884.107,686.551 884.666,686.551 885.226,686.551 885.785,686.551 886.344,686.551 886.903,686.551 887.463,686.551 888.022,686.551 888.581,686.551 889.14,686.551 889.7,686.551 890.259,686.551 890.818,686.551 891.377,686.551 891.937,686.551 892.496,686.551 893.055,686.551 893.614,686.551 894.174,686.551 894.733,686.551 895.292,686.551 895.851,686.551 896.411,686.551 896.97,686.551 897.529,686.551 898.088,686.551 898.648,686.551 899.207,686.551 899.766,686.551 900.325,686.551 900.885,686.551 901.444,686.551 902.003,686.551 902.562,686.551 903.122,686.551 903.681,686.551 904.24,686.551 904.799,686.551 905.359,686.551 905.918,686.551 906.477,686.551 907.036,686.551 907.596,686.551 908.155,686.551 908.714,686.551 909.273,686.551 909.833,686.551 910.392,686.551 910.951,686.551 911.51,686.551 912.07,686.551 912.629,686.551 913.188,686.551 913.747,686.551 914.307,686.551 914.866,686.551 915.425,686.551 915.984,686.551 916.544,686.551 917.103,686.551 917.662,686.551 918.221,686.551 918.781,686.551 919.34,686.551 919.899,686.551 920.458,686.551 921.018,686.551 921.577,686.551 922.136,686.551 922.695,686.551 923.255,686.551 923.814,686.551 924.373,686.551 924.932,686.551 925.492,686.551 926.051,686.551 926.61,686.551 927.169,686.551 927.729,686.551 928.288,686.551 928.847,686.551 929.406,686.551 929.966,686.551 930.525,686.551 931.084,686.551 931.644,686.551 932.203,686.551 932.762,686.551 933.321,686.551 933.881,686.551 934.44,686.551 934.999,686.551 935.558,686.551 936.118,686.551 936.677,686.551 937.236,686.551 937.795,686.551 938.355,686.551 938.914,686.551 939.473,686.551 940.032,686.551 940.592,686.551 941.151,686.551 941.71,686.551 942.269,686.551 942.829,686.551 943.388,686.551 943.947,686.551 944.506,686.551 945.066,686.551 945.625,686.551 946.184,686.551 946.743,686.551 947.303,686.551 947.862,686.551 948.421,686.551 948.98,686.551 949.54,686.551 950.099,686.551 950.658,686.551 951.217,686.551 951.777,686.551 952.336,686.551 952.895,686.551 953.454,686.551 954.014,686.551 954.573,686.551 955.132,686.551 955.691,686.551 956.251,686.551 956.81,686.551 957.369,686.551 957.928,686.551 958.488,686.551 959.047,686.551 959.606,686.551 960.165,686.551 960.725,686.551 961.284,686.551 961.843,686.551 962.402,686.551 962.962,686.551 963.521,686.551 964.08,686.551 964.639,686.551 965.199,686.551 965.758,686.551 966.317,686.551 966.876,686.551 967.436,686.551 967.995,686.551 968.554,686.551 969.113,686.551 969.673,686.551 970.232,686.551 970.791,686.551 971.35,686.551 971.91,686.551 972.469,686.551 973.028,686.551 973.587,686.551 974.147,686.551 974.706,686.551 975.265,686.551 975.824,686.551 976.384,686.551 976.943,686.551 977.502,686.551 978.061,686.551 978.621,686.551 979.18,686.551 979.739,686.551 980.298,686.551 980.858,686.551 981.417,686.551 981.976,686.551 982.535,686.551 983.095,686.551 983.654,686.551 984.213,686.551 984.772,686.551 985.332,686.551 985.891,686.551 986.45,686.551 987.009,686.551 987.569,686.551 988.128,686.551 988.687,686.551 989.246,686.551 989.806,686.551 990.365,686.551 990.924,686.551 991.483,686.551 992.043,686.551 992.602,686.551 993.161,686.551 993.72,686.551 994.28,686.551 994.839,686.551 995.398,686.551 995.957,686.551 996.517,686.551 997.076,686.551 997.635,686.551 998.194,686.551 998.754,686.551 999.313,686.551 999.872,686.551 1000.43,686.551 1000.99,686.551 1001.55,686.551 1002.11,686.551 1002.67,686.551 1003.23,686.551 1003.79,686.551 1004.35,686.551 1004.91,686.551 1005.46,686.551 1006.02,686.551 1006.58,686.551 1007.14,686.551 1007.7,686.551 1008.26,686.551 1008.82,686.551 1009.38,686.551 1009.94,686.551 1010.5,686.551 1011.06,686.551 1011.62,686.551 1012.18,686.551 1012.73,686.551 1013.29,686.551 1013.85,686.551 1014.41,686.551 1014.97,686.551 1015.53,686.551 1016.09,686.551 1016.65,686.551 1017.21,686.551 1017.77,686.551 1018.33,686.551 1018.89,686.551 1019.45,686.551 1020.01,686.551 1020.56,686.551 1021.12,686.551 1021.68,686.551 1022.24,686.551 1022.8,686.551 1023.36,686.551 1023.92,686.551 1024.48,686.551 1025.04,686.551 1025.6,686.551 1026.16,686.551 1026.72,686.551 1027.28,686.551 1027.83,686.551 1028.39,686.551 1028.95,686.551 1029.51,686.551 1030.07,686.551 1030.63,686.551 1031.19,686.551 1031.75,686.551 1032.31,686.551 1032.87,686.551 1033.43,686.551 1033.99,686.551 1034.55,686.551 1035.1,686.551 1035.66,686.551 1036.22,686.551 1036.78,686.551 1037.34,686.551 1037.9,686.551 1038.46,686.551 1039.02,686.551 1039.58,686.551 1040.14,686.551 1040.7,686.551 1041.26,686.551 1041.82,686.551 1042.38,686.551 1042.93,686.551 1043.49,686.551 1044.05,686.551 1044.61,686.551 1045.17,686.551 1045.73,686.551 1046.29,686.551 1046.85,686.551 1047.41,686.551 1047.97,686.551 1048.53,686.551 1049.09,686.551 1049.65,686.551 1050.2,686.551 1050.76,686.551 1051.32,686.551 1051.88,686.551 1052.44,686.551 1053,686.551 1053.56,686.551 1054.12,686.551 1054.68,686.551 1055.24,686.551 1055.8,686.551 1056.36,686.551 1056.92,686.551 1057.48,686.551 1058.03,686.551 1058.59,686.551 1059.15,686.551 1059.71,686.551 1060.27,686.551 1060.83,686.551 1061.39,686.551 1061.95,686.551 1062.51,686.551 1063.07,686.551 1063.63,686.551 1064.19,686.551 1064.75,686.551 1065.3,686.551 1065.86,686.551 1066.42,686.551 1066.98,686.551 1067.54,686.551 1068.1,686.551 1068.66,686.551 1069.22,686.551 1069.78,686.551 1070.34,686.551 1070.9,686.551 1071.46,686.551 1072.02,686.551 1072.57,686.551 1073.13,686.551 1073.69,686.551 1074.25,686.551 1074.81,686.551 1075.37,686.551 1075.93,686.551 1076.49,686.551 1077.05,686.551 1077.61,686.551 1078.17,686.551 1078.73,686.551 1079.29,686.551 1079.85,686.551 1080.4,686.551 1080.96,686.551 1081.52,686.551 1082.08,686.551 1082.64,686.551 1083.2,686.551 1083.76,686.551 1084.32,686.551 1084.88,686.551 1085.44,686.551 1086,686.551 1086.56,686.551 1087.12,686.551 1087.67,686.551 1088.23,686.551 1088.79,686.551 1089.35,686.551 1089.91,686.551 1090.47,686.551 1091.03,686.551 1091.59,686.551 1092.15,686.551 1092.71,686.551 1093.27,686.551 1093.83,686.551 1094.39,686.551 1094.94,686.551 1095.5,686.551 1096.06,686.551 1096.62,686.551 1097.18,686.551 1097.74,686.551 1098.3,686.551 1098.86,686.551 1099.42,686.551 1099.98,686.551 1100.54,686.551 1101.1,686.551 1101.66,686.551 1102.22,686.551 1102.77,686.551 1103.33,686.551 1103.89,686.551 1104.45,686.551 1105.01,686.551 1105.57,686.551 1106.13,686.551 1106.69,686.551 1107.25,686.551 1107.81,686.551 1108.37,686.551 1108.93,686.551 1109.49,686.551 1110.04,686.551 1110.6,686.551 1111.16,686.551 1111.72,686.551 1112.28,686.551 1112.84,686.551 1113.4,686.551 1113.96,686.551 1114.52,686.551 1115.08,686.551 1115.64,686.551 1116.2,686.551 1116.76,686.551 1117.31,686.551 1117.87,686.551 1118.43,686.551 1118.99,686.551 1119.55,686.551 1120.11,686.551 1120.67,686.551 1121.23,686.551 1121.79,686.551 1122.35,686.551 1122.91,686.551 1123.47,686.551 1124.03,686.551 1124.59,686.551 1125.14,686.551 1125.7,686.551 1126.26,686.551 1126.82,686.551 1127.38,686.551 1127.94,686.551 1128.5,686.551 1129.06,686.551 1129.62,686.551 1130.18,686.551 1130.74,686.551 1131.3,686.551 1131.86,686.551 1132.41,686.551 1132.97,686.551 1133.53,686.551 1134.09,686.551 1134.65,686.551 1135.21,686.551 1135.77,686.551 1136.33,686.551 1136.89,686.551 1137.45,686.551 1138.01,686.551 1138.57,686.551 1139.13,686.551 1139.68,686.551 1140.24,686.551 1140.8,686.551 1141.36,686.551 1141.92,686.551 1142.48,686.551 1143.04,686.551 1143.6,686.551 1144.16,686.551 1144.72,686.551 1145.28,686.551 1145.84,686.551 1146.4,686.551 1146.96,686.551 1147.51,686.551 1148.07,686.551 1148.63,686.551 1149.19,686.551 1149.75,686.551 1150.31,686.551 1150.87,686.551 1151.43,686.551 1151.99,686.551 1152.55,686.551 1153.11,686.551 1153.67,686.551 1154.23,686.551 1154.78,686.551 1155.34,686.551 1155.9,686.551 1156.46,686.551 1157.02,686.551 1157.58,686.551 1158.14,686.551 1158.7,686.551 1159.26,686.551 1159.82,686.551 1160.38,686.551 1160.94,686.551 1161.5,686.551 1162.05,686.551 1162.61,686.551 1163.17,686.551 1163.73,686.551 1164.29,686.551 1164.85,686.551 1165.41,686.551 1165.97,686.551 1166.53,686.551 1167.09,686.551 1167.65,686.551 1168.21,686.551 1168.77,686.551 1169.33,686.551 1169.88,686.551 1170.44,686.551 1171,686.551 1171.56,686.551 1172.12,686.551 1172.68,686.551 1173.24,686.551 1173.8,686.551 1174.36,686.551 1174.92,686.551 1175.48,686.551 1176.04,686.551 1176.6,686.551 1177.15,686.551 1177.71,686.551 1178.27,686.551 1178.83,686.551 1179.39,686.551 1179.95,686.551 1180.51,686.551 1181.07,686.551 1181.63,686.551 1182.19,686.551 1182.75,686.551 1183.31,686.551 1183.87,686.551 1184.43,686.551 1184.98,686.551 1185.54,686.551 1186.1,686.551 1186.66,686.551 1187.22,686.551 1187.78,686.551 1188.34,686.551 1188.9,686.551 1189.46,686.551 1190.02,686.551 1190.58,686.551 1191.14,686.551 1191.7,686.551 1192.25,686.551 1192.81,686.551 1193.37,686.551 1193.93,686.551 1194.49,686.551 1195.05,686.551 1195.61,686.551 1196.17,686.551 1196.73,686.551 1197.29,686.551 1197.85,686.551 1198.41,686.551 1198.97,686.551 1199.52,686.551 1200.08,686.551 1200.64,686.551 1201.2,686.551 1201.76,686.551 1202.32,686.551 1202.88,686.551 1203.44,686.551 1204,686.551 1204.56,686.551 1205.12,686.551 1205.68,686.551 1206.24,686.551 1206.8,686.551 1207.35,686.551 1207.91,686.551 1208.47,686.551 1209.03,686.551 1209.59,686.551 1210.15,686.551 1210.71,686.551 1211.27,686.551 1211.83,686.551 1212.39,686.551 1212.95,686.551 1213.51,686.551 1214.07,686.551 1214.62,686.551 1215.18,686.551 1215.74,686.551 1216.3,686.551 1216.86,686.551 1217.42,686.551 1217.98,686.551 1218.54,686.551 1219.1,686.551 1219.66,686.551 1220.22,686.551 1220.78,686.551 1221.34,686.551 1221.89,686.551 1222.45,686.551 1223.01,686.551 1223.57,686.551 1224.13,686.551 1224.69,686.551 1225.25,686.551 1225.81,686.551 1226.37,686.551 1226.93,686.551 1227.49,686.551 1228.05,686.551 1228.61,686.551 1229.17,686.551 1229.72,686.551 1230.28,686.551 1230.84,686.551 1231.4,686.551 1231.96,686.551 1232.52,686.551 1233.08,686.551 1233.64,686.551 1234.2,686.551 1234.76,686.551 1235.32,686.551 1235.88,686.551 1236.44,686.551 1236.99,686.551 1237.55,686.551 1238.11,686.551 1238.67,686.551 1239.23,686.551 1239.79,686.551 1240.35,686.551 1240.91,686.551 1241.47,686.551 1242.03,686.551 1242.59,686.551 1243.15,686.551 1243.71,686.551 1244.26,686.551 1244.82,686.551 1245.38,686.551 1245.94,686.551 1246.5,686.551 1247.06,686.551 1247.62,686.551 1248.18,686.551 1248.74,686.551 1249.3,686.551 1249.86,686.551 1250.42,686.551 1250.98,686.551 1251.54,686.551 1252.09,686.551 1252.65,686.551 1253.21,686.551 1253.77,686.551 1254.33,686.551 1254.89,686.551 1255.45,686.551 1256.01,686.551 1256.57,686.551 1257.13,686.551 1257.69,686.551 1258.25,686.551 1258.81,686.551 1259.36,686.551 1259.92,686.551 1260.48,686.551 1261.04,686.551 1261.6,686.551 1262.16,686.551 1262.72,686.551 1263.28,686.551 1263.84,686.551 1264.4,686.551 1264.96,686.551 1265.52,686.551 1266.08,686.551 1266.63,686.551 1267.19,686.551 1267.75,686.551 1268.31,686.551 1268.87,686.551 1269.43,686.551 1269.99,686.551 1270.55,686.551 1271.11,686.551 1271.67,686.551 1272.23,686.551 1272.79,686.551 1273.35,686.551 1273.91,686.551 1274.46,686.551 1275.02,686.551 1275.58,686.551 1276.14,686.551 1276.7,686.551 1277.26,686.551 1277.82,686.551 1278.38,686.551 1278.94,686.551 1279.5,686.551 1280.06,686.551 1280.62,686.551 1281.18,686.551 1281.73,686.551 1282.29,686.551 1282.85,686.551 1283.41,686.551 1283.97,686.551 1284.53,686.551 1285.09,686.551 1285.65,686.551 1286.21,686.551 1286.77,686.551 1287.33,686.551 1287.89,686.551 1288.45,686.551 1289,686.551 1289.56,686.551 1290.12,686.551 1290.68,686.551 1291.24,686.551 1291.8,686.551 1292.36,686.551 1292.92,686.551 1293.48,686.551 1294.04,686.551 1294.6,686.551 1295.16,686.551 1295.72,686.551 1296.28,686.551 1296.83,686.551 1297.39,686.551 1297.95,686.551 1298.51,686.551 1299.07,686.551 1299.63,686.551 1300.19,686.551 1300.75,686.551 1301.31,686.551 1301.87,686.551 1302.43,686.551 1302.99,686.551 1303.55,686.551 1304.1,686.551 1304.66,686.551 1305.22,686.551 1305.78,686.551 1306.34,686.551 1306.9,686.551 1307.46,686.551 1308.02,686.551 1308.58,686.551 1309.14,686.551 1309.7,686.551 1310.26,686.551 1310.82,686.551 1311.38,686.551 1311.93,686.551 1312.49,686.551 1313.05,686.551 1313.61,686.551 1314.17,686.551 1314.73,686.551 1315.29,686.551 1315.85,686.551 1316.41,686.551 1316.97,686.551 1317.53,686.551 1318.09,686.551 1318.65,686.551 1319.2,686.551 1319.76,686.551 1320.32,686.551 1320.88,686.551 1321.44,686.551 1322,686.551 1322.56,686.551 1323.12,686.551 1323.68,686.551 1324.24,686.551 1324.8,686.551 1325.36,686.551 1325.92,686.551 1326.47,686.551 1327.03,686.551 1327.59,686.551 1328.15,686.551 1328.71,686.551 1329.27,686.551 1329.83,686.551 1330.39,686.551 1330.95,686.551 1331.51,686.551 1332.07,686.551 1332.63,686.551 1333.19,686.551 1333.75,686.551 1334.3,686.551 1334.86,686.551 1335.42,686.551 1335.98,686.551 1336.54,686.551 1337.1,686.551 1337.66,686.551 1338.22,686.551 1338.78,686.551 1339.34,686.551 1339.9,686.551 1340.46,686.551 1341.02,686.551 1341.57,686.551 1342.13,686.551 1342.69,686.551 1343.25,686.551 1343.81,686.551 1344.37,686.551 1344.93,686.551 1345.49,686.551 1346.05,686.551 1346.61,686.551 1347.17,686.551 1347.73,686.551 1348.29,686.551 1348.84,686.551 1349.4,686.551 1349.96,686.551 1350.52,686.551 1351.08,686.551 1351.64,686.551 1352.2,686.551 1352.76,686.551 1353.32,686.551 1353.88,686.551 1354.44,686.551 1355,686.551 1355.56,686.551 1356.12,686.551 1356.67,686.551 1357.23,686.551 1357.79,686.551 1358.35,686.551 1358.91,686.551 1359.47,686.551 1360.03,686.551 1360.59,686.551 1361.15,686.551 1361.71,686.551 1362.27,686.551 1362.83,686.551 1363.39,686.551 1363.94,686.551 1364.5,686.551 1365.06,686.551 1365.62,686.551 1366.18,686.551 1366.74,686.551 1367.3,686.551 1367.86,686.551 1368.42,686.551 1368.98,686.551 1369.54,686.551 1370.1,686.551 1370.66,686.551 1371.21,686.551 1371.77,686.551 1372.33,686.551 1372.89,686.551 1373.45,686.551 1374.01,686.551 1374.57,686.551 1375.13,686.551 1375.69,686.551 1376.25,686.551 1376.81,686.551 1377.37,686.551 1377.93,686.551 1378.49,686.551 1379.04,686.551 1379.6,686.551 1380.16,686.551 1380.72,686.551 1381.28,686.551 1381.84,686.551 1382.4,686.551 1382.96,686.551 1383.52,686.551 1384.08,686.551 1384.64,686.551 1385.2,686.551 1385.76,686.551 1386.31,686.551 1386.87,686.551 1387.43,686.551 1387.99,686.551 1388.55,686.551 1389.11,686.551 1389.67,686.551 1390.23,686.551 1390.79,686.551 1391.35,686.551 1391.91,686.551 1392.47,686.551 1393.03,686.551 1393.58,686.551 1394.14,686.551 1394.7,686.551 1395.26,686.551 1395.82,686.551 1396.38,686.551 1396.94,686.551 1397.5,686.551 1398.06,686.551 1398.62,686.551 1399.18,686.551 1399.74,686.551 1400.3,686.551 1400.86,686.551 1401.41,686.551 1401.97,686.551 1402.53,686.551 1403.09,686.551 1403.65,686.551 1404.21,686.551 1404.77,686.551 1405.33,686.551 1405.89,686.551 1406.45,686.551 1407.01,686.551 1407.57,686.551 1408.13,686.551 1408.68,686.551 1409.24,686.551 1409.8,686.551 1410.36,686.551 1410.92,686.551 1411.48,686.551 1412.04,686.551 1412.6,686.551 1413.16,686.551 1413.72,686.551 1414.28,686.551 1414.84,686.551 1415.4,686.551 1415.95,686.551 1416.51,686.551 1417.07,686.551 1417.63,686.551 1418.19,686.551 1418.75,686.551 1419.31,686.551 1419.87,686.551 1420.43,686.551 1420.99,686.551 1421.55,686.551 1422.11,686.551 1422.67,686.551 1423.23,686.551 1423.78,686.551 1424.34,686.551 1424.9,686.551 1425.46,686.551 1426.02,686.551 1426.58,686.551 1427.14,686.551 1427.7,686.551 1428.26,686.551 1428.82,686.551 1429.38,686.551 1429.94,686.551 1430.5,686.551 1431.05,686.551 1431.61,686.551 1432.17,686.551 1432.73,686.551 1433.29,686.551 1433.85,686.551 1434.41,686.551 1434.97,686.551 1435.53,686.551 1436.09,686.551 1436.65,686.551 1437.21,686.551 1437.77,686.551 1438.33,686.551 1438.88,686.551 1439.44,686.551 1440,686.551 1440.56,686.551 1441.12,686.551 1441.68,686.551 1442.24,686.551 1442.8,686.551 1443.36,686.551 1443.92,686.551 1444.48,686.551 1445.04,686.551 1445.6,686.551 1446.15,686.551 1446.71,686.551 1447.27,686.551 1447.83,686.551 1448.39,686.551 1448.95,686.551 1449.51,686.551 1450.07,686.551 1450.63,686.551 1451.19,686.551 1451.75,686.551 1452.31,686.551 1452.87,686.551 1453.42,686.551 1453.98,686.551 1454.54,686.551 1455.1,686.551 1455.66,686.551 1456.22,686.551 1456.78,686.551 1457.34,686.551 1457.9,686.551 1458.46,686.551 1459.02,686.551 1459.58,686.551 1460.14,686.551 1460.7,686.551 1461.25,686.551 1461.81,686.551 1462.37,686.551 1462.93,686.551 1463.49,686.551 1464.05,686.551 1464.61,686.551 1465.17,686.551 1465.73,686.551 1466.29,686.551 1466.85,686.551 1467.41,686.551 1467.97,686.551 1468.52,686.551 1469.08,686.551 1469.64,686.551 1470.2,686.551 1470.76,686.551 1471.32,686.551 1471.88,686.551 1472.44,686.551 1473,686.551 1473.56,686.551 1474.12,686.551 1474.68,686.551 1475.24,686.551 1475.79,686.551 1476.35,686.551 1476.91,686.551 1477.47,686.551 1478.03,686.551 1478.59,686.551 1479.15,686.551 1479.71,686.551 1480.27,686.551 1480.83,686.551 1481.39,686.551 1481.95,686.551 1482.51,686.551 1483.07,686.551 1483.62,686.551 1484.18,686.551 1484.74,686.551 1485.3,686.551 1485.86,686.551 1486.42,686.551 1486.98,686.551 1487.54,686.551 1488.1,686.551 1488.66,686.551 1489.22,686.551 1489.78,686.551 1490.34,686.551 1490.89,686.551 1491.45,686.551 1492.01,686.551 1492.57,686.551 1493.13,686.551 1493.69,686.551 1494.25,686.551 1494.81,686.551 1495.37,686.551 1495.93,686.551 1496.49,686.551 1497.05,686.551 1497.61,686.551 1498.16,686.551 1498.72,686.551 1499.28,686.551 1499.84,686.551 1500.4,686.551 1500.96,686.551 1501.52,686.551 1502.08,686.551 1502.64,686.551 1503.2,686.551 1503.76,686.551 1504.32,686.551 1504.88,686.551 1505.44,686.551 1505.99,686.551 1506.55,686.551 1507.11,686.551 1507.67,686.551 1508.23,686.551 1508.79,686.551 1509.35,686.551 1509.91,686.551 1510.47,686.551 1511.03,686.551 1511.59,686.551 1512.15,686.551 1512.71,686.551 1513.26,686.551 1513.82,686.551 1514.38,686.551 1514.94,686.551 1515.5,686.551 1516.06,686.551 1516.62,686.551 1517.18,686.551 1517.74,686.551 1518.3,686.551 1518.86,686.551 1519.42,686.551 1519.98,686.551 1520.53,686.551 1521.09,686.551 1521.65,686.551 1522.21,686.551 1522.77,686.551 1523.33,686.551 1523.89,686.551 1524.45,686.551 1525.01,686.551 1525.57,686.551 1526.13,686.551 1526.69,686.551 1527.25,686.551 1527.81,686.551 1528.36,686.551 1528.92,686.551 1529.48,686.551 1530.04,686.551 1530.6,686.551 1531.16,686.551 1531.72,686.551 1532.28,686.551 1532.84,686.551 1533.4,686.551 1533.96,686.551 1534.52,686.551 1535.08,686.551 1535.63,686.551 1536.19,686.551 1536.75,686.551 1537.31,686.551 1537.87,686.551 1538.43,686.551 1538.99,686.551 1539.55,686.551 1540.11,686.551 1540.67,686.551 1541.23,686.551 1541.79,686.551 1542.35,686.551 1542.9,686.551 1543.46,686.551 1544.02,686.551 1544.58,686.551 1545.14,686.551 1545.7,686.551 1546.26,686.551 1546.82,686.551 1547.38,686.551 1547.94,686.551 1548.5,686.551 1549.06,686.551 1549.62,686.551 1550.18,686.551 1550.73,686.551 1551.29,686.551 1551.85,686.551 1552.41,686.551 1552.97,686.551 1553.53,686.551 1554.09,686.551 1554.65,686.551 1555.21,686.551 1555.77,686.551 1556.33,686.551 1556.89,686.551 1557.45,686.551 1558,686.551 1558.56,686.551 1559.12,686.551 1559.68,686.551 1560.24,686.551 1560.8,686.551 1561.36,686.551 1561.92,686.551 1562.48,686.551 1563.04,686.551 1563.6,686.551 1564.16,686.551 1564.72,686.551 1565.28,686.551 1565.83,686.551 1566.39,686.551 1566.95,686.551 1567.51,686.551 1568.07,686.551 1568.63,686.551 1569.19,686.551 1569.75,686.551 1570.31,686.551 1570.87,686.551 1571.43,686.551 1571.99,686.551 1572.55,686.551 1573.1,686.551 1573.66,686.551 1574.22,686.551 1574.78,686.551 1575.34,686.551 1575.9,686.551 1576.46,686.551 1577.02,686.551 1577.58,686.551 1578.14,686.551 1578.7,686.551 1579.26,686.551 1579.82,686.551 1580.37,686.551 1580.93,686.551 1581.49,686.551 1582.05,686.551 1582.61,686.551 1583.17,686.551 1583.73,686.551 1584.29,686.551 1584.85,686.551 1585.41,686.551 1585.97,686.551 1586.53,686.551 1587.09,686.551 1587.65,686.551 1588.2,686.551 1588.76,686.551 1589.32,686.551 1589.88,686.551 1590.44,686.551 1591,686.551 1591.56,686.551 1592.12,686.551 1592.68,686.551 1593.24,686.551 1593.8,686.551 1594.36,686.551 1594.92,686.551 1595.47,686.551 1596.03,686.551 1596.59,686.551 1597.15,686.551 1597.71,686.551 1598.27,686.551 1598.83,686.551 1599.39,686.551 1599.95,686.551 1600.51,686.551 1601.07,686.551 1601.63,686.551 1602.19,686.551 1602.74,686.551 1603.3,686.551 1603.86,686.551 1604.42,686.551 1604.98,686.551 1605.54,686.551 1606.1,686.551 1606.66,686.551 1607.22,686.551 1607.78,686.551 1608.34,686.551 1608.9,686.551 1609.46,686.551 1610.02,686.551 1610.57,686.551 1611.13,686.551 1611.69,686.551 1612.25,686.551 1612.81,686.551 1613.37,686.551 1613.93,686.551 1614.49,686.551 1615.05,686.551 1615.61,686.551 1616.17,686.551 1616.73,686.551 1617.29,686.551 1617.84,686.551 1618.4,686.551 1618.96,686.551 1619.52,686.551 1620.08,686.551 1620.64,686.551 1621.2,686.551 1621.76,686.551 1622.32,686.551 1622.88,686.551 1623.44,686.551 1624,686.551 1624.56,686.551 1625.11,686.551 1625.67,686.551 1626.23,686.551 1626.79,686.551 1627.35,686.551 1627.91,686.551 1628.47,686.551 1629.03,686.551 1629.59,686.551 1630.15,686.551 1630.71,686.551 1631.27,686.551 1631.83,686.551 1632.39,686.551 1632.94,686.551 1633.5,686.551 1634.06,686.551 1634.62,686.551 1635.18,686.551 1635.74,686.551 1636.3,686.551 1636.86,686.551 1637.42,686.551 1637.98,686.551 1638.54,686.551 1639.1,686.551 1639.66,686.551 1640.21,686.551 1640.77,686.551 1641.33,686.551 1641.89,686.551 1642.45,686.551 1643.01,686.551 1643.57,686.551 1644.13,686.551 1644.69,686.551 1645.25,686.551 1645.81,686.551 1646.37,686.551 1646.93,686.551 1647.48,686.551 1648.04,686.551 1648.6,686.551 1649.16,686.551 1649.72,686.551 1650.28,686.551 1650.84,686.551 1651.4,686.551 1651.96,686.551 1652.52,686.551 1653.08,686.551 1653.64,686.551 1654.2,686.551 1654.76,686.551 1655.31,686.551 1655.87,686.551 1656.43,686.551 1656.99,686.551 1657.55,686.551 1658.11,686.551 1658.67,686.551 1659.23,686.551 1659.79,686.551 1660.35,686.551 1660.91,686.551 1661.47,686.551 1662.03,686.551 1662.58,686.551 1663.14,686.551 1663.7,686.551 1664.26,686.551 1664.82,686.551 1665.38,686.551 1665.94,686.551 1666.5,686.551 1667.06,686.551 1667.62,686.551 1668.18,686.551 1668.74,686.551 1669.3,686.551 1669.85,686.551 1670.41,686.551 1670.97,686.551 1671.53,686.551 1672.09,686.551 1672.65,686.551 1673.21,686.551 1673.77,686.551 1674.33,686.551 1674.89,686.551 1675.45,686.551 1676.01,686.551 1676.57,686.551 1677.13,686.551 1677.68,686.551 1678.24,686.551 1678.8,686.551 1679.36,686.551 1679.92,686.551 1680.48,686.551 1681.04,686.551 1681.6,686.551 1682.16,686.551 1682.72,686.551 1683.28,686.551 1683.84,686.551 1684.4,686.551 1684.95,686.551 1685.51,686.551 1686.07,686.551 1686.63,686.551 1687.19,686.551 1687.75,686.551 1688.31,686.551 1688.87,686.551 1689.43,686.551 1689.99,686.551 1690.55,686.551 1691.11,686.551 1691.67,686.551 1692.23,686.551 1692.78,686.551 1693.34,686.551 1693.9,686.551 1694.46,686.551 1695.02,686.551 1695.58,686.551 1696.14,686.551 1696.7,686.551 1697.26,686.551 1697.82,686.551 1698.38,686.551 1698.94,686.551 1699.5,686.551 1700.05,686.551 1700.61,686.551 1701.17,686.551 1701.73,686.551 1702.29,686.551 1702.85,686.551 1703.41,686.551 1703.97,686.551 1704.53,686.551 1705.09,686.551 1705.65,686.551 1706.21,686.551 1706.77,686.551 1707.32,686.551 1707.88,686.551 1708.44,686.551 1709,686.551 1709.56,686.551 1710.12,686.551 1710.68,686.551 1711.24,686.551 1711.8,686.551 1712.36,686.551 1712.92,686.551 1713.48,686.551 1714.04,686.551 1714.6,686.551 1715.15,686.551 1715.71,686.551 1716.27,686.551 1716.83,686.551 1717.39,686.551 1717.95,686.551 1718.51,686.551 1719.07,686.551 1719.63,686.551 1720.19,686.551 1720.75,686.551 1721.31,686.551 1721.87,686.551 1722.42,686.551 1722.98,686.551 1723.54,686.551 1724.1,686.551 1724.66,686.551 1725.22,686.551 1725.78,686.551 1726.34,686.551 1726.9,686.551 1727.46,686.551 1728.02,686.551 1728.58,686.551 1729.14,686.551 1729.69,686.551 1730.25,686.551 1730.81,686.551 1731.37,686.551 1731.93,686.551 1732.49,686.551 1733.05,686.551 1733.61,686.551 1734.17,686.551 1734.73,686.551 1735.29,686.551 1735.85,686.551 1736.41,686.551 1736.97,686.551 1737.52,686.551 1738.08,686.551 1738.64,686.551 1739.2,686.551 1739.76,686.551 1740.32,686.551 1740.88,686.551 1741.44,686.551 1742,686.551 1742.56,686.551 1743.12,686.551 1743.68,686.551 1744.24,686.551 1744.79,686.551 1745.35,686.551 1745.91,686.551 1746.47,686.551 1747.03,686.551 1747.59,686.551 1748.15,686.551 1748.71,686.551 1749.27,686.551 1749.83,686.551 1750.39,686.551 1750.95,686.551 1751.51,686.551 1752.06,686.551 1752.62,686.551 1753.18,686.551 1753.74,686.551 1754.3,686.551 1754.86,686.551 1755.42,686.551 1755.98,686.551 1756.54,686.551 1757.1,686.551 1757.66,686.551 1758.22,686.551 1758.78,686.551 1759.34,686.551 1759.89,686.551 1760.45,686.551 1761.01,686.551 1761.57,686.551 1762.13,686.551 1762.69,686.551 1763.25,686.551 1763.81,686.551 1764.37,686.551 1764.93,686.551 1765.49,686.551 1766.05,686.551 1766.61,686.551 1767.16,686.551 1767.72,686.551 1768.28,686.551 1768.84,686.551 1769.4,686.551 1769.96,686.551 1770.52,686.551 1771.08,686.551 1771.64,686.551 1772.2,686.551 1772.76,686.551 1773.32,686.551 1773.88,686.551 1774.43,686.551 1774.99,686.551 1775.55,686.551 1776.11,686.551 1776.67,686.551 1777.23,686.551 1777.79,686.551 1778.35,686.551 1778.91,686.551 1779.47,686.551 1780.03,686.551 1780.59,686.551 1781.15,686.551 1781.71,686.551 1782.26,686.551 1782.82,686.551 1783.38,686.551 1783.94,686.551 1784.5,686.551 1785.06,686.551 1785.62,686.551 1786.18,686.551 1786.74,686.551 1787.3,686.551 1787.86,686.551 1788.42,686.551 1788.98,686.551 1789.53,686.551 1790.09,686.551 1790.65,686.551 1791.21,686.551 1791.77,686.551 1792.33,686.551 1792.89,686.551 1793.45,686.551 1794.01,686.551 1794.57,686.551 1795.13,686.551 1795.69,686.551 1796.25,686.551 1796.8,686.551 1797.36,686.551 1797.92,686.551 1798.48,686.551 1799.04,686.551 1799.6,686.551 1800.16,686.551 1800.72,686.551 1801.28,686.551 1801.84,686.551 1802.4,686.551 1802.96,686.551 1803.52,686.551 1804.08,686.551 1804.63,686.551 1805.19,686.551 1805.75,686.551 1806.31,686.551 1806.87,686.551 1807.43,686.551 1807.99,686.551 1808.55,686.551 1809.11,686.551 1809.67,686.551 1810.23,686.551 1810.79,686.551 1811.35,686.551 1811.9,686.551 1812.46,686.551 1813.02,686.551 1813.58,686.551 1814.14,686.551 1814.7,686.551 1815.26,686.551 1815.82,686.551 1816.38,686.551 1816.94,686.551 1817.5,686.551 1818.06,686.551 1818.62,686.551 1819.18,686.551 1819.73,686.551 1820.29,686.551 1820.85,686.551 1821.41,686.551 1821.97,686.551 1822.53,686.551 1823.09,686.551 1823.65,686.551 1824.21,686.551 1824.77,686.551 1825.33,686.551 1825.89,686.551 1826.45,686.551 1827,686.551 1827.56,686.551 1828.12,686.551 1828.68,686.551 1829.24,686.551 1829.8,686.551 1830.36,686.551 1830.92,686.551 1831.48,686.551 1832.04,686.551 1832.6,686.551 1833.16,686.551 1833.72,686.551 1834.27,686.551 1834.83,686.551 1835.39,686.551 1835.95,686.551 1836.51,686.551 1837.07,686.551 1837.63,686.551 1838.19,686.551 \"/>\n<path clip-path=\"url(#clip703)\" d=\"M720.247 685.077 L720.806 685.077 L721.365 685.077 L721.924 685.077 L722.484 685.077 L723.043 685.077 L723.602 685.077 L724.161 685.077 L724.721 685.077 L725.28 685.077 L725.839 685.077 L726.398 685.077 L726.958 685.077 L727.517 685.077 L728.076 685.077 L728.635 685.077 L729.195 685.077 L729.754 685.077 L730.313 685.077 L730.872 685.077 L731.432 685.077 L731.991 685.077 L732.55 685.077 L733.109 685.077 L733.669 685.077 L734.228 685.077 L734.787 685.077 L735.346 685.077 L735.906 685.077 L736.465 685.077 L737.024 685.077 L737.583 685.077 L738.143 685.077 L738.702 685.077 L739.261 685.077 L739.82 685.077 L740.38 685.077 L740.939 685.077 L741.498 685.077 L742.057 685.077 L742.617 685.077 L743.176 685.077 L743.735 685.077 L744.294 685.077 L744.854 685.077 L745.413 685.077 L745.972 685.077 L746.531 685.077 L747.091 685.077 L747.65 685.077 L748.209 685.077 L748.768 685.077 L749.328 685.077 L749.887 685.077 L750.446 685.077 L751.005 685.077 L751.565 685.077 L752.124 685.077 L752.683 685.077 L753.242 685.077 L753.802 685.077 L754.361 685.077 L754.92 685.077 L755.479 685.077 L756.039 685.077 L756.598 685.077 L757.157 685.077 L757.716 685.077 L758.276 685.077 L758.835 685.077 L759.394 685.077 L759.953 685.077 L760.513 685.077 L761.072 685.077 L761.631 685.077 L762.19 685.077 L762.75 685.077 L763.309 685.077 L763.868 685.077 L764.427 685.077 L764.987 685.077 L765.546 685.077 L766.105 685.077 L766.664 685.077 L767.224 685.077 L767.783 685.077 L768.342 685.077 L768.901 685.077 L769.461 685.077 L770.02 685.077 L770.579 685.077 L771.138 685.077 L771.698 685.077 L772.257 685.077 L772.816 685.077 L773.375 685.077 L773.935 685.077 L774.494 685.077 L775.053 685.077 L775.612 685.077 L776.172 685.077 L776.731 685.077 L777.29 685.077 L777.849 685.077 L778.409 685.077 L778.968 685.077 L779.527 685.077 L780.086 685.077 L780.646 685.077 L781.205 685.077 L781.764 685.077 L782.323 685.077 L782.883 685.077 L783.442 685.077 L784.001 685.077 L784.56 685.077 L785.12 685.077 L785.679 685.077 L786.238 685.077 L786.797 685.077 L787.357 685.077 L787.916 685.077 L788.475 685.077 L789.034 685.077 L789.594 685.077 L790.153 685.077 L790.712 685.077 L791.271 685.077 L791.831 685.077 L792.39 685.077 L792.949 685.077 L793.508 685.077 L794.068 685.077 L794.627 685.077 L795.186 685.077 L795.745 685.077 L796.305 685.077 L796.864 685.077 L797.423 685.077 L797.982 685.077 L798.542 685.077 L799.101 685.077 L799.66 685.077 L800.219 685.077 L800.779 685.077 L801.338 685.077 L801.897 685.077 L802.456 685.077 L803.016 685.077 L803.575 685.077 L804.134 685.077 L804.693 685.077 L805.253 685.077 L805.812 685.077 L806.371 685.077 L806.931 685.077 L807.49 685.077 L808.049 685.077 L808.608 685.077 L809.168 685.077 L809.727 685.077 L810.286 685.077 L810.845 685.077 L811.405 685.077 L811.964 685.077 L812.523 685.077 L813.082 685.077 L813.642 685.077 L814.201 685.077 L814.76 685.077 L815.319 685.077 L815.879 685.077 L816.438 685.077 L816.997 685.077 L817.556 685.077 L818.116 685.077 L818.675 685.077 L819.234 685.077 L819.793 685.077 L820.353 685.077 L820.912 685.077 L821.471 685.077 L822.03 685.077 L822.59 685.077 L823.149 685.077 L823.708 685.077 L824.267 685.077 L824.827 685.077 L825.386 685.077 L825.945 685.077 L826.504 685.077 L827.064 685.077 L827.623 685.077 L828.182 685.077 L828.741 685.077 L829.301 685.077 L829.86 685.077 L830.419 685.077 L830.978 685.077 L831.538 685.077 L832.097 685.077 L832.656 685.077 L833.215 685.077 L833.775 685.077 L834.334 685.077 L834.893 685.077 L835.452 685.077 L836.012 685.077 L836.571 685.077 L837.13 685.077 L837.689 685.077 L838.249 685.077 L838.808 685.077 L839.367 685.077 L839.926 685.077 L840.486 685.077 L841.045 685.077 L841.604 685.077 L842.163 685.077 L842.723 685.077 L843.282 685.077 L843.841 685.077 L844.4 685.077 L844.96 685.077 L845.519 685.077 L846.078 685.077 L846.637 685.077 L847.197 685.077 L847.756 685.077 L848.315 685.077 L848.874 685.077 L849.434 685.077 L849.993 685.077 L850.552 685.077 L851.111 685.077 L851.671 685.077 L852.23 685.077 L852.789 685.077 L853.348 685.077 L853.908 685.077 L854.467 685.077 L855.026 685.077 L855.585 685.077 L856.145 685.077 L856.704 685.077 L857.263 685.077 L857.822 685.077 L858.382 685.077 L858.941 685.077 L859.5 685.077 L860.059 685.077 L860.619 685.077 L861.178 685.077 L861.737 685.077 L862.296 685.077 L862.856 685.077 L863.415 685.077 L863.974 685.077 L864.533 685.077 L865.093 685.077 L865.652 685.077 L866.211 685.077 L866.77 685.077 L867.33 685.077 L867.889 685.077 L868.448 685.077 L869.007 685.077 L869.567 685.077 L870.126 685.077 L870.685 685.077 L871.244 685.077 L871.804 685.077 L872.363 685.077 L872.922 685.077 L873.481 685.077 L874.041 685.077 L874.6 685.077 L875.159 685.077 L875.718 685.077 L876.278 685.077 L876.837 685.077 L877.396 685.077 L877.955 685.077 L878.515 685.077 L879.074 685.077 L879.633 685.077 L880.192 685.077 L880.752 685.077 L881.311 685.077 L881.87 685.077 L882.429 685.077 L882.989 685.077 L883.548 685.077 L884.107 685.077 L884.666 685.077 L885.226 685.077 L885.785 685.077 L886.344 685.077 L886.903 685.077 L887.463 685.077 L888.022 685.077 L888.581 685.077 L889.14 685.077 L889.7 685.077 L890.259 685.077 L890.818 685.077 L891.377 685.077 L891.937 685.077 L892.496 685.077 L893.055 685.077 L893.614 685.077 L894.174 685.077 L894.733 685.077 L895.292 685.077 L895.851 685.077 L896.411 685.077 L896.97 685.077 L897.529 685.077 L898.088 685.077 L898.648 685.077 L899.207 685.077 L899.766 685.077 L900.325 685.077 L900.885 685.077 L901.444 685.077 L902.003 685.077 L902.562 685.077 L903.122 685.077 L903.681 685.077 L904.24 685.077 L904.799 685.077 L905.359 685.077 L905.918 685.077 L906.477 685.077 L907.036 685.077 L907.596 685.077 L908.155 685.077 L908.714 685.077 L909.273 685.077 L909.833 685.077 L910.392 685.077 L910.951 685.077 L911.51 685.077 L912.07 685.077 L912.629 685.077 L913.188 685.077 L913.747 685.077 L914.307 685.077 L914.866 685.077 L915.425 685.077 L915.984 685.077 L916.544 685.077 L917.103 685.077 L917.662 685.077 L918.221 685.077 L918.781 685.077 L919.34 685.077 L919.899 685.077 L920.458 685.077 L921.018 685.077 L921.577 685.077 L922.136 685.077 L922.695 685.077 L923.255 685.077 L923.814 685.077 L924.373 685.077 L924.932 685.077 L925.492 685.077 L926.051 685.077 L926.61 685.077 L927.169 685.077 L927.729 685.077 L928.288 685.077 L928.847 685.077 L929.406 685.077 L929.966 685.077 L930.525 685.077 L931.084 685.077 L931.644 685.077 L932.203 685.077 L932.762 685.077 L933.321 685.077 L933.881 685.077 L934.44 685.077 L934.999 685.077 L935.558 685.077 L936.118 685.077 L936.677 685.077 L937.236 685.077 L937.795 685.077 L938.355 685.077 L938.914 685.077 L939.473 685.077 L940.032 685.077 L940.592 685.077 L941.151 685.077 L941.71 685.077 L942.269 685.077 L942.829 685.077 L943.388 685.077 L943.947 685.077 L944.506 685.077 L945.066 685.077 L945.625 685.077 L946.184 685.077 L946.743 685.077 L947.303 685.077 L947.862 685.077 L948.421 685.077 L948.98 685.077 L949.54 685.077 L950.099 685.077 L950.658 685.077 L951.217 685.077 L951.777 685.077 L952.336 685.077 L952.895 685.077 L953.454 685.077 L954.014 685.077 L954.573 685.077 L955.132 685.077 L955.691 685.077 L956.251 685.077 L956.81 685.077 L957.369 685.077 L957.928 685.077 L958.488 685.077 L959.047 685.077 L959.606 685.077 L960.165 685.077 L960.725 685.077 L961.284 685.077 L961.843 685.077 L962.402 685.077 L962.962 685.077 L963.521 685.077 L964.08 685.077 L964.639 685.077 L965.199 685.077 L965.758 685.077 L966.317 685.077 L966.876 685.077 L967.436 685.077 L967.995 685.077 L968.554 685.077 L969.113 685.077 L969.673 685.077 L970.232 685.077 L970.791 685.077 L971.35 685.077 L971.91 685.077 L972.469 685.077 L973.028 685.077 L973.587 685.077 L974.147 685.077 L974.706 685.077 L975.265 685.077 L975.824 685.077 L976.384 685.077 L976.943 685.077 L977.502 685.077 L978.061 685.077 L978.621 685.077 L979.18 685.077 L979.739 685.077 L980.298 685.077 L980.858 685.077 L981.417 685.077 L981.976 685.077 L982.535 685.077 L983.095 685.077 L983.654 685.077 L984.213 685.077 L984.772 685.077 L985.332 685.077 L985.891 685.077 L986.45 685.077 L987.009 685.077 L987.569 685.077 L988.128 685.077 L988.687 685.077 L989.246 685.077 L989.806 685.077 L990.365 685.077 L990.924 685.077 L991.483 685.077 L992.043 685.077 L992.602 685.077 L993.161 685.077 L993.72 685.077 L994.28 685.077 L994.839 685.077 L995.398 685.077 L995.957 685.077 L996.517 685.077 L997.076 685.077 L997.635 685.077 L998.194 685.077 L998.754 685.077 L999.313 685.077 L999.872 685.077 L1000.43 685.077 L1000.99 685.077 L1001.55 685.077 L1002.11 685.077 L1002.67 685.077 L1003.23 685.077 L1003.79 685.077 L1004.35 685.077 L1004.91 685.077 L1005.46 685.077 L1006.02 685.077 L1006.58 685.077 L1007.14 685.077 L1007.7 685.077 L1008.26 685.077 L1008.82 685.077 L1009.38 685.077 L1009.94 685.077 L1010.5 685.077 L1011.06 685.077 L1011.62 685.077 L1012.18 685.077 L1012.73 685.077 L1013.29 685.077 L1013.85 685.077 L1014.41 685.077 L1014.97 685.077 L1015.53 685.077 L1016.09 685.077 L1016.65 685.077 L1017.21 685.077 L1017.77 685.077 L1018.33 685.077 L1018.89 685.077 L1019.45 685.077 L1020.01 685.077 L1020.56 685.077 L1021.12 685.077 L1021.68 685.077 L1022.24 685.077 L1022.8 685.077 L1023.36 685.077 L1023.92 685.077 L1024.48 685.077 L1025.04 685.077 L1025.6 685.077 L1026.16 685.077 L1026.72 685.077 L1027.28 685.077 L1027.83 685.077 L1028.39 685.077 L1028.95 685.077 L1029.51 685.077 L1030.07 685.077 L1030.63 685.077 L1031.19 685.077 L1031.75 685.077 L1032.31 685.077 L1032.87 685.077 L1033.43 685.077 L1033.99 685.077 L1034.55 685.077 L1035.1 685.077 L1035.66 685.077 L1036.22 685.077 L1036.78 685.077 L1037.34 685.077 L1037.9 685.077 L1038.46 685.077 L1039.02 685.077 L1039.58 685.077 L1040.14 685.077 L1040.7 685.077 L1041.26 685.077 L1041.82 685.077 L1042.38 685.077 L1042.93 685.077 L1043.49 685.077 L1044.05 685.077 L1044.61 685.077 L1045.17 685.077 L1045.73 685.077 L1046.29 685.077 L1046.85 685.077 L1047.41 685.077 L1047.97 685.077 L1048.53 685.077 L1049.09 685.077 L1049.65 685.077 L1050.2 685.077 L1050.76 685.077 L1051.32 685.077 L1051.88 685.077 L1052.44 685.077 L1053 685.077 L1053.56 685.077 L1054.12 685.077 L1054.68 685.077 L1055.24 685.077 L1055.8 685.077 L1056.36 685.077 L1056.92 685.077 L1057.48 685.077 L1058.03 685.077 L1058.59 685.077 L1059.15 685.077 L1059.71 685.077 L1060.27 685.077 L1060.83 685.077 L1061.39 685.077 L1061.95 685.077 L1062.51 685.077 L1063.07 685.077 L1063.63 685.077 L1064.19 685.077 L1064.75 685.077 L1065.3 685.077 L1065.86 685.077 L1066.42 685.077 L1066.98 685.077 L1067.54 685.077 L1068.1 685.077 L1068.66 685.077 L1069.22 685.077 L1069.78 685.077 L1070.34 685.077 L1070.9 685.077 L1071.46 685.077 L1072.02 685.077 L1072.57 685.077 L1073.13 685.077 L1073.69 685.077 L1074.25 685.077 L1074.81 685.077 L1075.37 685.077 L1075.93 685.077 L1076.49 685.077 L1077.05 685.077 L1077.61 685.077 L1078.17 685.077 L1078.73 685.077 L1079.29 685.077 L1079.85 685.077 L1080.4 685.077 L1080.96 685.077 L1081.52 685.077 L1082.08 685.077 L1082.64 685.077 L1083.2 685.077 L1083.76 685.077 L1084.32 685.077 L1084.88 685.077 L1085.44 685.077 L1086 685.077 L1086.56 685.077 L1087.12 685.077 L1087.67 685.077 L1088.23 685.077 L1088.79 685.077 L1089.35 685.077 L1089.91 685.077 L1090.47 685.077 L1091.03 685.077 L1091.59 685.077 L1092.15 685.077 L1092.71 685.077 L1093.27 685.077 L1093.83 685.077 L1094.39 685.077 L1094.94 685.077 L1095.5 685.077 L1096.06 685.077 L1096.62 685.077 L1097.18 685.077 L1097.74 685.077 L1098.3 685.077 L1098.86 685.077 L1099.42 685.077 L1099.98 685.077 L1100.54 685.077 L1101.1 685.077 L1101.66 685.077 L1102.22 685.077 L1102.77 685.077 L1103.33 685.077 L1103.89 685.077 L1104.45 685.077 L1105.01 685.077 L1105.57 685.077 L1106.13 685.077 L1106.69 685.077 L1107.25 685.077 L1107.81 685.077 L1108.37 685.077 L1108.93 685.077 L1109.49 685.077 L1110.04 685.077 L1110.6 685.077 L1111.16 685.077 L1111.72 685.077 L1112.28 685.077 L1112.84 685.077 L1113.4 685.077 L1113.96 685.077 L1114.52 685.077 L1115.08 685.077 L1115.64 685.077 L1116.2 685.077 L1116.76 685.077 L1117.31 685.077 L1117.87 685.077 L1118.43 685.077 L1118.99 685.077 L1119.55 685.077 L1120.11 685.077 L1120.67 685.077 L1121.23 685.077 L1121.79 685.077 L1122.35 685.077 L1122.91 685.077 L1123.47 685.077 L1124.03 685.077 L1124.59 685.077 L1125.14 685.077 L1125.7 685.077 L1126.26 685.077 L1126.82 685.077 L1127.38 685.077 L1127.94 685.077 L1128.5 685.077 L1129.06 685.077 L1129.62 685.077 L1130.18 685.077 L1130.74 685.077 L1131.3 685.077 L1131.86 685.077 L1132.41 685.077 L1132.97 685.077 L1133.53 685.077 L1134.09 685.077 L1134.65 685.077 L1135.21 685.077 L1135.77 685.077 L1136.33 685.077 L1136.89 685.077 L1137.45 685.077 L1138.01 685.077 L1138.57 685.077 L1139.13 685.077 L1139.68 685.077 L1140.24 685.077 L1140.8 685.077 L1141.36 685.077 L1141.92 685.077 L1142.48 685.077 L1143.04 685.077 L1143.6 685.077 L1144.16 685.077 L1144.72 685.077 L1145.28 685.077 L1145.84 685.077 L1146.4 685.077 L1146.96 685.077 L1147.51 685.077 L1148.07 685.077 L1148.63 685.077 L1149.19 685.077 L1149.75 685.077 L1150.31 685.077 L1150.87 685.077 L1151.43 685.077 L1151.99 685.077 L1152.55 685.077 L1153.11 685.077 L1153.67 685.077 L1154.23 685.077 L1154.78 685.077 L1155.34 685.077 L1155.9 685.077 L1156.46 685.077 L1157.02 685.077 L1157.58 685.077 L1158.14 685.077 L1158.7 685.077 L1159.26 685.077 L1159.82 685.077 L1160.38 685.077 L1160.94 685.077 L1161.5 685.077 L1162.05 685.077 L1162.61 685.077 L1163.17 685.077 L1163.73 685.077 L1164.29 685.077 L1164.85 685.077 L1165.41 685.077 L1165.97 685.077 L1166.53 685.077 L1167.09 685.077 L1167.65 685.077 L1168.21 685.077 L1168.77 685.077 L1169.33 685.077 L1169.88 685.077 L1170.44 685.077 L1171 685.077 L1171.56 685.077 L1172.12 685.077 L1172.68 685.077 L1173.24 685.077 L1173.8 685.077 L1174.36 685.077 L1174.92 685.077 L1175.48 685.077 L1176.04 685.077 L1176.6 685.077 L1177.15 685.077 L1177.71 685.077 L1178.27 685.077 L1178.83 685.077 L1179.39 685.077 L1179.95 685.077 L1180.51 685.077 L1181.07 685.077 L1181.63 685.077 L1182.19 685.077 L1182.75 685.077 L1183.31 685.077 L1183.87 685.077 L1184.43 685.077 L1184.98 685.077 L1185.54 685.077 L1186.1 685.077 L1186.66 685.077 L1187.22 685.077 L1187.78 685.077 L1188.34 685.077 L1188.9 685.077 L1189.46 685.077 L1190.02 685.077 L1190.58 685.077 L1191.14 685.077 L1191.7 685.077 L1192.25 685.077 L1192.81 685.077 L1193.37 685.077 L1193.93 685.077 L1194.49 685.077 L1195.05 685.077 L1195.61 685.077 L1196.17 685.077 L1196.73 685.077 L1197.29 685.077 L1197.85 685.077 L1198.41 685.077 L1198.97 685.077 L1199.52 685.077 L1200.08 685.077 L1200.64 685.077 L1201.2 685.077 L1201.76 685.077 L1202.32 685.077 L1202.88 685.077 L1203.44 685.077 L1204 685.077 L1204.56 685.077 L1205.12 685.077 L1205.68 685.077 L1206.24 685.077 L1206.8 685.077 L1207.35 685.077 L1207.91 685.077 L1208.47 685.077 L1209.03 685.077 L1209.59 685.077 L1210.15 685.077 L1210.71 685.077 L1211.27 685.077 L1211.83 685.077 L1212.39 685.077 L1212.95 685.077 L1213.51 685.077 L1214.07 685.077 L1214.62 685.077 L1215.18 685.077 L1215.74 685.077 L1216.3 685.077 L1216.86 685.077 L1217.42 685.077 L1217.98 685.077 L1218.54 685.077 L1219.1 685.077 L1219.66 685.077 L1220.22 685.077 L1220.78 685.077 L1221.34 685.077 L1221.89 685.077 L1222.45 685.077 L1223.01 685.077 L1223.57 685.077 L1224.13 685.077 L1224.69 685.077 L1225.25 685.077 L1225.81 685.077 L1226.37 685.077 L1226.93 685.077 L1227.49 685.077 L1228.05 685.077 L1228.61 685.077 L1229.17 685.077 L1229.72 685.077 L1230.28 685.077 L1230.84 685.077 L1231.4 685.077 L1231.96 685.077 L1232.52 685.077 L1233.08 685.077 L1233.64 685.077 L1234.2 685.077 L1234.76 685.077 L1235.32 685.077 L1235.88 685.077 L1236.44 685.077 L1236.99 685.077 L1237.55 685.077 L1238.11 685.077 L1238.67 685.077 L1239.23 685.077 L1239.79 685.077 L1240.35 685.077 L1240.91 685.077 L1241.47 685.077 L1242.03 685.077 L1242.59 685.077 L1243.15 685.077 L1243.71 685.077 L1244.26 685.077 L1244.82 685.077 L1245.38 685.077 L1245.94 685.077 L1246.5 685.077 L1247.06 685.077 L1247.62 685.077 L1248.18 685.077 L1248.74 685.077 L1249.3 685.077 L1249.86 685.077 L1250.42 685.077 L1250.98 685.077 L1251.54 685.077 L1252.09 685.077 L1252.65 685.077 L1253.21 685.077 L1253.77 685.077 L1254.33 685.077 L1254.89 685.077 L1255.45 685.077 L1256.01 685.077 L1256.57 685.077 L1257.13 685.077 L1257.69 685.077 L1258.25 685.077 L1258.81 685.077 L1259.36 685.077 L1259.92 685.077 L1260.48 685.077 L1261.04 685.077 L1261.6 685.077 L1262.16 685.077 L1262.72 685.077 L1263.28 685.077 L1263.84 685.077 L1264.4 685.077 L1264.96 685.077 L1265.52 685.077 L1266.08 685.077 L1266.63 685.077 L1267.19 685.077 L1267.75 685.077 L1268.31 685.077 L1268.87 685.077 L1269.43 685.077 L1269.99 685.077 L1270.55 685.077 L1271.11 685.077 L1271.67 685.077 L1272.23 685.077 L1272.79 685.077 L1273.35 685.077 L1273.91 685.077 L1274.46 685.077 L1275.02 685.077 L1275.58 685.077 L1276.14 685.077 L1276.7 685.077 L1277.26 685.077 L1277.82 685.077 L1278.38 685.077 L1278.94 685.077 L1279.5 685.077 L1280.06 685.077 L1280.62 685.077 L1281.18 685.077 L1281.73 685.077 L1282.29 685.077 L1282.85 685.077 L1283.41 685.077 L1283.97 685.077 L1284.53 685.077 L1285.09 685.077 L1285.65 685.077 L1286.21 685.077 L1286.77 685.077 L1287.33 685.077 L1287.89 685.077 L1288.45 685.077 L1289 685.077 L1289.56 685.077 L1290.12 685.077 L1290.68 685.077 L1291.24 685.077 L1291.8 685.077 L1292.36 685.077 L1292.92 685.077 L1293.48 685.077 L1294.04 685.077 L1294.6 685.077 L1295.16 685.077 L1295.72 685.077 L1296.28 685.077 L1296.83 685.077 L1297.39 685.077 L1297.95 685.077 L1298.51 685.077 L1299.07 685.077 L1299.63 685.077 L1300.19 685.077 L1300.75 685.077 L1301.31 685.077 L1301.87 685.077 L1302.43 685.077 L1302.99 685.077 L1303.55 685.077 L1304.1 685.077 L1304.66 685.077 L1305.22 685.077 L1305.78 685.077 L1306.34 685.077 L1306.9 685.077 L1307.46 685.077 L1308.02 685.077 L1308.58 685.077 L1309.14 685.077 L1309.7 685.077 L1310.26 685.077 L1310.82 685.077 L1311.38 685.077 L1311.93 685.077 L1312.49 685.077 L1313.05 685.077 L1313.61 685.077 L1314.17 685.077 L1314.73 685.077 L1315.29 685.077 L1315.85 685.077 L1316.41 685.077 L1316.97 685.077 L1317.53 685.077 L1318.09 685.077 L1318.65 685.077 L1319.2 685.077 L1319.76 685.077 L1320.32 685.077 L1320.88 685.077 L1321.44 685.077 L1322 685.077 L1322.56 685.077 L1323.12 685.077 L1323.68 685.077 L1324.24 685.077 L1324.8 685.077 L1325.36 685.077 L1325.92 685.077 L1326.47 685.077 L1327.03 685.077 L1327.59 685.077 L1328.15 685.077 L1328.71 685.077 L1329.27 685.077 L1329.83 685.077 L1330.39 685.077 L1330.95 685.077 L1331.51 685.077 L1332.07 685.077 L1332.63 685.077 L1333.19 685.077 L1333.75 685.077 L1334.3 685.077 L1334.86 685.077 L1335.42 685.077 L1335.98 685.077 L1336.54 685.077 L1337.1 685.077 L1337.66 685.077 L1338.22 685.077 L1338.78 685.077 L1339.34 685.077 L1339.9 685.077 L1340.46 685.077 L1341.02 685.077 L1341.57 685.077 L1342.13 685.077 L1342.69 685.077 L1343.25 685.077 L1343.81 685.077 L1344.37 685.077 L1344.93 685.077 L1345.49 685.077 L1346.05 685.077 L1346.61 685.077 L1347.17 685.077 L1347.73 685.077 L1348.29 685.077 L1348.84 685.077 L1349.4 685.077 L1349.96 685.077 L1350.52 685.077 L1351.08 685.077 L1351.64 685.077 L1352.2 685.077 L1352.76 685.077 L1353.32 685.077 L1353.88 685.077 L1354.44 685.077 L1355 685.077 L1355.56 685.077 L1356.12 685.077 L1356.67 685.077 L1357.23 685.077 L1357.79 685.077 L1358.35 685.077 L1358.91 685.077 L1359.47 685.077 L1360.03 685.077 L1360.59 685.077 L1361.15 685.077 L1361.71 685.077 L1362.27 685.077 L1362.83 685.077 L1363.39 685.077 L1363.94 685.077 L1364.5 685.077 L1365.06 685.077 L1365.62 685.077 L1366.18 685.077 L1366.74 685.077 L1367.3 685.077 L1367.86 685.077 L1368.42 685.077 L1368.98 685.077 L1369.54 685.077 L1370.1 685.077 L1370.66 685.077 L1371.21 685.077 L1371.77 685.077 L1372.33 685.077 L1372.89 685.077 L1373.45 685.077 L1374.01 685.077 L1374.57 685.077 L1375.13 685.077 L1375.69 685.077 L1376.25 685.077 L1376.81 685.077 L1377.37 685.077 L1377.93 685.077 L1378.49 685.077 L1379.04 685.077 L1379.6 685.077 L1380.16 685.077 L1380.72 685.077 L1381.28 685.077 L1381.84 685.077 L1382.4 685.077 L1382.96 685.077 L1383.52 685.077 L1384.08 685.077 L1384.64 685.077 L1385.2 685.077 L1385.76 685.077 L1386.31 685.077 L1386.87 685.077 L1387.43 685.077 L1387.99 685.077 L1388.55 685.077 L1389.11 685.077 L1389.67 685.077 L1390.23 685.077 L1390.79 685.077 L1391.35 685.077 L1391.91 685.077 L1392.47 685.077 L1393.03 685.077 L1393.58 685.077 L1394.14 685.077 L1394.7 685.077 L1395.26 685.077 L1395.82 685.077 L1396.38 685.077 L1396.94 685.077 L1397.5 685.077 L1398.06 685.077 L1398.62 685.077 L1399.18 685.077 L1399.74 685.077 L1400.3 685.077 L1400.86 685.077 L1401.41 685.077 L1401.97 685.077 L1402.53 685.077 L1403.09 685.077 L1403.65 685.077 L1404.21 685.077 L1404.77 685.077 L1405.33 685.077 L1405.89 685.077 L1406.45 685.077 L1407.01 685.077 L1407.57 685.077 L1408.13 685.077 L1408.68 685.077 L1409.24 685.077 L1409.8 685.077 L1410.36 685.077 L1410.92 685.077 L1411.48 685.077 L1412.04 685.077 L1412.6 685.077 L1413.16 685.077 L1413.72 685.077 L1414.28 685.077 L1414.84 685.077 L1415.4 685.077 L1415.95 685.077 L1416.51 685.077 L1417.07 685.077 L1417.63 685.077 L1418.19 685.077 L1418.75 685.077 L1419.31 685.077 L1419.87 685.077 L1420.43 685.077 L1420.99 685.077 L1421.55 685.077 L1422.11 685.077 L1422.67 685.077 L1423.23 685.077 L1423.78 685.077 L1424.34 685.077 L1424.9 685.077 L1425.46 685.077 L1426.02 685.077 L1426.58 685.077 L1427.14 685.077 L1427.7 685.077 L1428.26 685.077 L1428.82 685.077 L1429.38 685.077 L1429.94 685.077 L1430.5 685.077 L1431.05 685.077 L1431.61 685.077 L1432.17 685.077 L1432.73 685.077 L1433.29 685.077 L1433.85 685.077 L1434.41 685.077 L1434.97 685.077 L1435.53 685.077 L1436.09 685.077 L1436.65 685.077 L1437.21 685.077 L1437.77 685.077 L1438.33 685.077 L1438.88 685.077 L1439.44 685.077 L1440 685.077 L1440.56 685.077 L1441.12 685.077 L1441.68 685.077 L1442.24 685.077 L1442.8 685.077 L1443.36 685.077 L1443.92 685.077 L1444.48 685.077 L1445.04 685.077 L1445.6 685.077 L1446.15 685.077 L1446.71 685.077 L1447.27 685.077 L1447.83 685.077 L1448.39 685.077 L1448.95 685.077 L1449.51 685.077 L1450.07 685.077 L1450.63 685.077 L1451.19 685.077 L1451.75 685.077 L1452.31 685.077 L1452.87 685.077 L1453.42 685.077 L1453.98 685.077 L1454.54 685.077 L1455.1 685.077 L1455.66 685.077 L1456.22 685.077 L1456.78 685.077 L1457.34 685.077 L1457.9 685.077 L1458.46 685.077 L1459.02 685.077 L1459.58 685.077 L1460.14 685.077 L1460.7 685.077 L1461.25 685.077 L1461.81 685.077 L1462.37 685.077 L1462.93 685.077 L1463.49 685.077 L1464.05 685.077 L1464.61 685.077 L1465.17 685.077 L1465.73 685.077 L1466.29 685.077 L1466.85 685.077 L1467.41 685.077 L1467.97 685.077 L1468.52 685.077 L1469.08 685.077 L1469.64 685.077 L1470.2 685.077 L1470.76 685.077 L1471.32 685.077 L1471.88 685.077 L1472.44 685.077 L1473 685.077 L1473.56 685.077 L1474.12 685.077 L1474.68 685.077 L1475.24 685.077 L1475.79 685.077 L1476.35 685.077 L1476.91 685.077 L1477.47 685.077 L1478.03 685.077 L1478.59 685.077 L1479.15 685.077 L1479.71 685.077 L1480.27 685.077 L1480.83 685.077 L1481.39 685.077 L1481.95 685.077 L1482.51 685.077 L1483.07 685.077 L1483.62 685.077 L1484.18 685.077 L1484.74 685.077 L1485.3 685.077 L1485.86 685.077 L1486.42 685.077 L1486.98 685.077 L1487.54 685.077 L1488.1 685.077 L1488.66 685.077 L1489.22 685.077 L1489.78 685.077 L1490.34 685.077 L1490.89 685.077 L1491.45 685.077 L1492.01 685.077 L1492.57 685.077 L1493.13 685.077 L1493.69 685.077 L1494.25 685.077 L1494.81 685.077 L1495.37 685.077 L1495.93 685.077 L1496.49 685.077 L1497.05 685.077 L1497.61 685.077 L1498.16 685.077 L1498.72 685.077 L1499.28 685.077 L1499.84 685.077 L1500.4 685.077 L1500.96 685.077 L1501.52 685.077 L1502.08 685.077 L1502.64 685.077 L1503.2 685.077 L1503.76 685.077 L1504.32 685.077 L1504.88 685.077 L1505.44 685.077 L1505.99 685.077 L1506.55 685.077 L1507.11 685.077 L1507.67 685.077 L1508.23 685.077 L1508.79 685.077 L1509.35 685.077 L1509.91 685.077 L1510.47 685.077 L1511.03 685.077 L1511.59 685.077 L1512.15 685.077 L1512.71 685.077 L1513.26 685.077 L1513.82 685.077 L1514.38 685.077 L1514.94 685.077 L1515.5 685.077 L1516.06 685.077 L1516.62 685.077 L1517.18 685.077 L1517.74 685.077 L1518.3 685.077 L1518.86 685.077 L1519.42 685.077 L1519.98 685.077 L1520.53 685.077 L1521.09 685.077 L1521.65 685.077 L1522.21 685.077 L1522.77 685.077 L1523.33 685.077 L1523.89 685.077 L1524.45 685.077 L1525.01 685.077 L1525.57 685.077 L1526.13 685.077 L1526.69 685.077 L1527.25 685.077 L1527.81 685.077 L1528.36 685.077 L1528.92 685.077 L1529.48 685.077 L1530.04 685.077 L1530.6 685.077 L1531.16 685.077 L1531.72 685.077 L1532.28 685.077 L1532.84 685.077 L1533.4 685.077 L1533.96 685.077 L1534.52 685.077 L1535.08 685.077 L1535.63 685.077 L1536.19 685.077 L1536.75 685.077 L1537.31 685.077 L1537.87 685.077 L1538.43 685.077 L1538.99 685.077 L1539.55 685.077 L1540.11 685.077 L1540.67 685.077 L1541.23 685.077 L1541.79 685.077 L1542.35 685.077 L1542.9 685.077 L1543.46 685.077 L1544.02 685.077 L1544.58 685.077 L1545.14 685.077 L1545.7 685.077 L1546.26 685.077 L1546.82 685.077 L1547.38 685.077 L1547.94 685.077 L1548.5 685.077 L1549.06 685.077 L1549.62 685.077 L1550.18 685.077 L1550.73 685.077 L1551.29 685.077 L1551.85 685.077 L1552.41 685.077 L1552.97 685.077 L1553.53 685.077 L1554.09 685.077 L1554.65 685.077 L1555.21 685.077 L1555.77 685.077 L1556.33 685.077 L1556.89 685.077 L1557.45 685.077 L1558 685.077 L1558.56 685.077 L1559.12 685.077 L1559.68 685.077 L1560.24 685.077 L1560.8 685.077 L1561.36 685.077 L1561.92 685.077 L1562.48 685.077 L1563.04 685.077 L1563.6 685.077 L1564.16 685.077 L1564.72 685.077 L1565.28 685.077 L1565.83 685.077 L1566.39 685.077 L1566.95 685.077 L1567.51 685.077 L1568.07 685.077 L1568.63 685.077 L1569.19 685.077 L1569.75 685.077 L1570.31 685.077 L1570.87 685.077 L1571.43 685.077 L1571.99 685.077 L1572.55 685.077 L1573.1 685.077 L1573.66 685.077 L1574.22 685.077 L1574.78 685.077 L1575.34 685.077 L1575.9 685.077 L1576.46 685.077 L1577.02 685.077 L1577.58 685.077 L1578.14 685.077 L1578.7 685.077 L1579.26 685.077 L1579.82 685.077 L1580.37 685.077 L1580.93 685.077 L1581.49 685.077 L1582.05 685.077 L1582.61 685.077 L1583.17 685.077 L1583.73 685.077 L1584.29 685.077 L1584.85 685.077 L1585.41 685.077 L1585.97 685.077 L1586.53 685.077 L1587.09 685.077 L1587.65 685.077 L1588.2 685.077 L1588.76 685.077 L1589.32 685.077 L1589.88 685.077 L1590.44 685.077 L1591 685.077 L1591.56 685.077 L1592.12 685.077 L1592.68 685.077 L1593.24 685.077 L1593.8 685.077 L1594.36 685.077 L1594.92 685.077 L1595.47 685.077 L1596.03 685.077 L1596.59 685.077 L1597.15 685.077 L1597.71 685.077 L1598.27 685.077 L1598.83 685.077 L1599.39 685.077 L1599.95 685.077 L1600.51 685.077 L1601.07 685.077 L1601.63 685.077 L1602.19 685.077 L1602.74 685.077 L1603.3 685.077 L1603.86 685.077 L1604.42 685.077 L1604.98 685.077 L1605.54 685.077 L1606.1 685.077 L1606.66 685.077 L1607.22 685.077 L1607.78 685.077 L1608.34 685.077 L1608.9 685.077 L1609.46 685.077 L1610.02 685.077 L1610.57 685.077 L1611.13 685.077 L1611.69 685.077 L1612.25 685.077 L1612.81 685.077 L1613.37 685.077 L1613.93 685.077 L1614.49 685.077 L1615.05 685.077 L1615.61 685.077 L1616.17 685.077 L1616.73 685.077 L1617.29 685.077 L1617.84 685.077 L1618.4 685.077 L1618.96 685.077 L1619.52 685.077 L1620.08 685.077 L1620.64 685.077 L1621.2 685.077 L1621.76 685.077 L1622.32 685.077 L1622.88 685.077 L1623.44 685.077 L1624 685.077 L1624.56 685.077 L1625.11 685.077 L1625.67 685.077 L1626.23 685.077 L1626.79 685.077 L1627.35 685.077 L1627.91 685.077 L1628.47 685.077 L1629.03 685.077 L1629.59 685.077 L1630.15 685.077 L1630.71 685.077 L1631.27 685.077 L1631.83 685.077 L1632.39 685.077 L1632.94 685.077 L1633.5 685.077 L1634.06 685.077 L1634.62 685.077 L1635.18 685.077 L1635.74 685.077 L1636.3 685.077 L1636.86 685.077 L1637.42 685.077 L1637.98 685.077 L1638.54 685.077 L1639.1 685.077 L1639.66 685.077 L1640.21 685.077 L1640.77 685.077 L1641.33 685.077 L1641.89 685.077 L1642.45 685.077 L1643.01 685.077 L1643.57 685.077 L1644.13 685.077 L1644.69 685.077 L1645.25 685.077 L1645.81 685.077 L1646.37 685.077 L1646.93 685.077 L1647.48 685.077 L1648.04 685.077 L1648.6 685.077 L1649.16 685.077 L1649.72 685.077 L1650.28 685.077 L1650.84 685.077 L1651.4 685.077 L1651.96 685.077 L1652.52 685.077 L1653.08 685.077 L1653.64 685.077 L1654.2 685.077 L1654.76 685.077 L1655.31 685.077 L1655.87 685.077 L1656.43 685.077 L1656.99 685.077 L1657.55 685.077 L1658.11 685.077 L1658.67 685.077 L1659.23 685.077 L1659.79 685.077 L1660.35 685.077 L1660.91 685.077 L1661.47 685.077 L1662.03 685.077 L1662.58 685.077 L1663.14 685.077 L1663.7 685.077 L1664.26 685.077 L1664.82 685.077 L1665.38 685.077 L1665.94 685.077 L1666.5 685.077 L1667.06 685.077 L1667.62 685.077 L1668.18 685.077 L1668.74 685.077 L1669.3 685.077 L1669.85 685.077 L1670.41 685.077 L1670.97 685.077 L1671.53 685.077 L1672.09 685.077 L1672.65 685.077 L1673.21 685.077 L1673.77 685.077 L1674.33 685.077 L1674.89 685.077 L1675.45 685.077 L1676.01 685.077 L1676.57 685.077 L1677.13 685.077 L1677.68 685.077 L1678.24 685.077 L1678.8 685.077 L1679.36 685.077 L1679.92 685.077 L1680.48 685.077 L1681.04 685.077 L1681.6 685.077 L1682.16 685.077 L1682.72 685.077 L1683.28 685.077 L1683.84 685.077 L1684.4 685.077 L1684.95 685.077 L1685.51 685.077 L1686.07 685.077 L1686.63 685.077 L1687.19 685.077 L1687.75 685.077 L1688.31 685.077 L1688.87 685.077 L1689.43 685.077 L1689.99 685.077 L1690.55 685.077 L1691.11 685.077 L1691.67 685.077 L1692.23 685.077 L1692.78 685.077 L1693.34 685.077 L1693.9 685.077 L1694.46 685.077 L1695.02 685.077 L1695.58 685.077 L1696.14 685.077 L1696.7 685.077 L1697.26 685.077 L1697.82 685.077 L1698.38 685.077 L1698.94 685.077 L1699.5 685.077 L1700.05 685.077 L1700.61 685.077 L1701.17 685.077 L1701.73 685.077 L1702.29 685.077 L1702.85 685.077 L1703.41 685.077 L1703.97 685.077 L1704.53 685.077 L1705.09 685.077 L1705.65 685.077 L1706.21 685.077 L1706.77 685.077 L1707.32 685.077 L1707.88 685.077 L1708.44 685.077 L1709 685.077 L1709.56 685.077 L1710.12 685.077 L1710.68 685.077 L1711.24 685.077 L1711.8 685.077 L1712.36 685.077 L1712.92 685.077 L1713.48 685.077 L1714.04 685.077 L1714.6 685.077 L1715.15 685.077 L1715.71 685.077 L1716.27 685.077 L1716.83 685.077 L1717.39 685.077 L1717.95 685.077 L1718.51 685.077 L1719.07 685.077 L1719.63 685.077 L1720.19 685.077 L1720.75 685.077 L1721.31 685.077 L1721.87 685.077 L1722.42 685.077 L1722.98 685.077 L1723.54 685.077 L1724.1 685.077 L1724.66 685.077 L1725.22 685.077 L1725.78 685.077 L1726.34 685.077 L1726.9 685.077 L1727.46 685.077 L1728.02 685.077 L1728.58 685.077 L1729.14 685.077 L1729.69 685.077 L1730.25 685.077 L1730.81 685.077 L1731.37 685.077 L1731.93 685.077 L1732.49 685.077 L1733.05 685.077 L1733.61 685.077 L1734.17 685.077 L1734.73 685.077 L1735.29 685.077 L1735.85 685.077 L1736.41 685.077 L1736.97 685.077 L1737.52 685.077 L1738.08 685.077 L1738.64 685.077 L1739.2 685.077 L1739.76 685.077 L1740.32 685.077 L1740.88 685.077 L1741.44 685.077 L1742 685.077 L1742.56 685.077 L1743.12 685.077 L1743.68 685.077 L1744.24 685.077 L1744.79 685.077 L1745.35 685.077 L1745.91 685.077 L1746.47 685.077 L1747.03 685.077 L1747.59 685.077 L1748.15 685.077 L1748.71 685.077 L1749.27 685.077 L1749.83 685.077 L1750.39 685.077 L1750.95 685.077 L1751.51 685.077 L1752.06 685.077 L1752.62 685.077 L1753.18 685.077 L1753.74 685.077 L1754.3 685.077 L1754.86 685.077 L1755.42 685.077 L1755.98 685.077 L1756.54 685.077 L1757.1 685.077 L1757.66 685.077 L1758.22 685.077 L1758.78 685.077 L1759.34 685.077 L1759.89 685.077 L1760.45 685.077 L1761.01 685.077 L1761.57 685.077 L1762.13 685.077 L1762.69 685.077 L1763.25 685.077 L1763.81 685.077 L1764.37 685.077 L1764.93 685.077 L1765.49 685.077 L1766.05 685.077 L1766.61 685.077 L1767.16 685.077 L1767.72 685.077 L1768.28 685.077 L1768.84 685.077 L1769.4 685.077 L1769.96 685.077 L1770.52 685.077 L1771.08 685.077 L1771.64 685.077 L1772.2 685.077 L1772.76 685.077 L1773.32 685.077 L1773.88 685.077 L1774.43 685.077 L1774.99 685.077 L1775.55 685.077 L1776.11 685.077 L1776.67 685.077 L1777.23 685.077 L1777.79 685.077 L1778.35 685.077 L1778.91 685.077 L1779.47 685.077 L1780.03 685.077 L1780.59 685.077 L1781.15 685.077 L1781.71 685.077 L1782.26 685.077 L1782.82 685.077 L1783.38 685.077 L1783.94 685.077 L1784.5 685.077 L1785.06 685.077 L1785.62 685.077 L1786.18 685.077 L1786.74 685.077 L1787.3 685.077 L1787.86 685.077 L1788.42 685.077 L1788.98 685.077 L1789.53 685.077 L1790.09 685.077 L1790.65 685.077 L1791.21 685.077 L1791.77 685.077 L1792.33 685.077 L1792.89 685.077 L1793.45 685.077 L1794.01 685.077 L1794.57 685.077 L1795.13 685.077 L1795.69 685.077 L1796.25 685.077 L1796.8 685.077 L1797.36 685.077 L1797.92 685.077 L1798.48 685.077 L1799.04 685.077 L1799.6 685.077 L1800.16 685.077 L1800.72 685.077 L1801.28 685.077 L1801.84 685.077 L1802.4 685.077 L1802.96 685.077 L1803.52 685.077 L1804.08 685.077 L1804.63 685.077 L1805.19 685.077 L1805.75 685.077 L1806.31 685.077 L1806.87 685.077 L1807.43 685.077 L1807.99 685.077 L1808.55 685.077 L1809.11 685.077 L1809.67 685.077 L1810.23 685.077 L1810.79 685.077 L1811.35 685.077 L1811.9 685.077 L1812.46 685.077 L1813.02 685.077 L1813.58 685.077 L1814.14 685.077 L1814.7 685.077 L1815.26 685.077 L1815.82 685.077 L1816.38 685.077 L1816.94 685.077 L1817.5 685.077 L1818.06 685.077 L1818.62 685.077 L1819.18 685.077 L1819.73 685.077 L1820.29 685.077 L1820.85 685.077 L1821.41 685.077 L1821.97 685.077 L1822.53 685.077 L1823.09 685.077 L1823.65 685.077 L1824.21 685.077 L1824.77 685.077 L1825.33 685.077 L1825.89 685.077 L1826.45 685.077 L1827 685.077 L1827.56 685.077 L1828.12 685.077 L1828.68 685.077 L1829.24 685.077 L1829.8 685.077 L1830.36 685.077 L1830.92 685.077 L1831.48 685.077 L1832.04 685.077 L1832.6 685.077 L1833.16 685.077 L1833.72 685.077 L1834.27 685.077 L1834.83 685.077 L1835.39 685.077 L1835.95 685.077 L1836.51 685.077 L1837.07 685.077 L1837.63 685.077 L1838.19 685.077 L1838.19 682.205 L1837.63 682.205 L1837.07 682.205 L1836.51 682.205 L1835.95 682.205 L1835.39 682.205 L1834.83 682.205 L1834.27 682.205 L1833.72 682.205 L1833.16 682.205 L1832.6 682.205 L1832.04 682.205 L1831.48 682.205 L1830.92 682.205 L1830.36 682.205 L1829.8 682.205 L1829.24 682.205 L1828.68 682.205 L1828.12 682.205 L1827.56 682.205 L1827 682.205 L1826.45 682.205 L1825.89 682.205 L1825.33 682.205 L1824.77 682.205 L1824.21 682.205 L1823.65 682.205 L1823.09 682.205 L1822.53 682.205 L1821.97 682.205 L1821.41 682.205 L1820.85 682.205 L1820.29 682.205 L1819.73 682.205 L1819.18 682.205 L1818.62 682.205 L1818.06 682.205 L1817.5 682.205 L1816.94 682.205 L1816.38 682.205 L1815.82 682.205 L1815.26 682.205 L1814.7 682.205 L1814.14 682.205 L1813.58 682.205 L1813.02 682.205 L1812.46 682.205 L1811.9 682.205 L1811.35 682.205 L1810.79 682.205 L1810.23 682.205 L1809.67 682.205 L1809.11 682.205 L1808.55 682.205 L1807.99 682.205 L1807.43 682.205 L1806.87 682.205 L1806.31 682.205 L1805.75 682.205 L1805.19 682.205 L1804.63 682.205 L1804.08 682.205 L1803.52 682.205 L1802.96 682.205 L1802.4 682.205 L1801.84 682.205 L1801.28 682.205 L1800.72 682.205 L1800.16 682.205 L1799.6 682.205 L1799.04 682.205 L1798.48 682.205 L1797.92 682.205 L1797.36 682.205 L1796.8 682.205 L1796.25 682.205 L1795.69 682.205 L1795.13 682.205 L1794.57 682.205 L1794.01 682.205 L1793.45 682.205 L1792.89 682.205 L1792.33 682.205 L1791.77 682.205 L1791.21 682.205 L1790.65 682.205 L1790.09 682.205 L1789.53 682.205 L1788.98 682.205 L1788.42 682.205 L1787.86 682.205 L1787.3 682.205 L1786.74 682.205 L1786.18 682.205 L1785.62 682.205 L1785.06 682.205 L1784.5 682.205 L1783.94 682.205 L1783.38 682.205 L1782.82 682.205 L1782.26 682.205 L1781.71 682.205 L1781.15 682.205 L1780.59 682.205 L1780.03 682.205 L1779.47 682.205 L1778.91 682.205 L1778.35 682.205 L1777.79 682.205 L1777.23 682.205 L1776.67 682.205 L1776.11 682.205 L1775.55 682.205 L1774.99 682.205 L1774.43 682.205 L1773.88 682.205 L1773.32 682.205 L1772.76 682.205 L1772.2 682.205 L1771.64 682.205 L1771.08 682.205 L1770.52 682.205 L1769.96 682.205 L1769.4 682.205 L1768.84 682.205 L1768.28 682.205 L1767.72 682.205 L1767.16 682.205 L1766.61 682.205 L1766.05 682.205 L1765.49 682.205 L1764.93 682.205 L1764.37 682.205 L1763.81 682.205 L1763.25 682.205 L1762.69 682.205 L1762.13 682.205 L1761.57 682.205 L1761.01 682.205 L1760.45 682.205 L1759.89 682.205 L1759.34 682.205 L1758.78 682.205 L1758.22 682.205 L1757.66 682.205 L1757.1 682.205 L1756.54 682.205 L1755.98 682.205 L1755.42 682.205 L1754.86 682.205 L1754.3 682.205 L1753.74 682.205 L1753.18 682.205 L1752.62 682.205 L1752.06 682.205 L1751.51 682.205 L1750.95 682.205 L1750.39 682.205 L1749.83 682.205 L1749.27 682.205 L1748.71 682.205 L1748.15 682.205 L1747.59 682.205 L1747.03 682.205 L1746.47 682.205 L1745.91 682.205 L1745.35 682.205 L1744.79 682.205 L1744.24 682.205 L1743.68 682.205 L1743.12 682.205 L1742.56 682.205 L1742 682.205 L1741.44 682.205 L1740.88 682.205 L1740.32 682.205 L1739.76 682.205 L1739.2 682.205 L1738.64 682.205 L1738.08 682.205 L1737.52 682.205 L1736.97 682.205 L1736.41 682.205 L1735.85 682.205 L1735.29 682.205 L1734.73 682.205 L1734.17 682.205 L1733.61 682.205 L1733.05 682.205 L1732.49 682.205 L1731.93 682.205 L1731.37 682.205 L1730.81 682.205 L1730.25 682.205 L1729.69 682.205 L1729.14 682.205 L1728.58 682.205 L1728.02 682.205 L1727.46 682.205 L1726.9 682.205 L1726.34 682.205 L1725.78 682.205 L1725.22 682.205 L1724.66 682.205 L1724.1 682.205 L1723.54 682.205 L1722.98 682.205 L1722.42 682.205 L1721.87 682.205 L1721.31 682.205 L1720.75 682.205 L1720.19 682.205 L1719.63 682.205 L1719.07 682.205 L1718.51 682.205 L1717.95 682.205 L1717.39 682.205 L1716.83 682.205 L1716.27 682.205 L1715.71 682.205 L1715.15 682.205 L1714.6 682.205 L1714.04 682.205 L1713.48 682.205 L1712.92 682.205 L1712.36 682.205 L1711.8 682.205 L1711.24 682.205 L1710.68 682.205 L1710.12 682.205 L1709.56 682.205 L1709 682.205 L1708.44 682.205 L1707.88 682.205 L1707.32 682.205 L1706.77 682.205 L1706.21 682.205 L1705.65 682.205 L1705.09 682.205 L1704.53 682.205 L1703.97 682.205 L1703.41 682.205 L1702.85 682.205 L1702.29 682.205 L1701.73 682.205 L1701.17 682.205 L1700.61 682.205 L1700.05 682.205 L1699.5 682.205 L1698.94 682.205 L1698.38 682.205 L1697.82 682.205 L1697.26 682.205 L1696.7 682.205 L1696.14 682.205 L1695.58 682.205 L1695.02 682.205 L1694.46 682.205 L1693.9 682.205 L1693.34 682.205 L1692.78 682.205 L1692.23 682.205 L1691.67 682.205 L1691.11 682.205 L1690.55 682.205 L1689.99 682.205 L1689.43 682.205 L1688.87 682.205 L1688.31 682.205 L1687.75 682.205 L1687.19 682.205 L1686.63 682.205 L1686.07 682.205 L1685.51 682.205 L1684.95 682.205 L1684.4 682.205 L1683.84 682.205 L1683.28 682.205 L1682.72 682.205 L1682.16 682.205 L1681.6 682.205 L1681.04 682.205 L1680.48 682.205 L1679.92 682.205 L1679.36 682.205 L1678.8 682.205 L1678.24 682.205 L1677.68 682.205 L1677.13 682.205 L1676.57 682.205 L1676.01 682.205 L1675.45 682.205 L1674.89 682.205 L1674.33 682.205 L1673.77 682.205 L1673.21 682.205 L1672.65 682.205 L1672.09 682.205 L1671.53 682.205 L1670.97 682.205 L1670.41 682.205 L1669.85 682.205 L1669.3 682.205 L1668.74 682.205 L1668.18 682.205 L1667.62 682.205 L1667.06 682.205 L1666.5 682.205 L1665.94 682.205 L1665.38 682.205 L1664.82 682.205 L1664.26 682.205 L1663.7 682.205 L1663.14 682.205 L1662.58 682.205 L1662.03 682.205 L1661.47 682.205 L1660.91 682.205 L1660.35 682.205 L1659.79 682.205 L1659.23 682.205 L1658.67 682.205 L1658.11 682.205 L1657.55 682.205 L1656.99 682.205 L1656.43 682.205 L1655.87 682.205 L1655.31 682.205 L1654.76 682.205 L1654.2 682.205 L1653.64 682.205 L1653.08 682.205 L1652.52 682.205 L1651.96 682.205 L1651.4 682.205 L1650.84 682.205 L1650.28 682.205 L1649.72 682.205 L1649.16 682.205 L1648.6 682.205 L1648.04 682.205 L1647.48 682.205 L1646.93 682.205 L1646.37 682.205 L1645.81 682.205 L1645.25 682.205 L1644.69 682.205 L1644.13 682.205 L1643.57 682.205 L1643.01 682.205 L1642.45 682.205 L1641.89 682.205 L1641.33 682.205 L1640.77 682.205 L1640.21 682.205 L1639.66 682.205 L1639.1 682.205 L1638.54 682.205 L1637.98 682.205 L1637.42 682.205 L1636.86 682.205 L1636.3 682.205 L1635.74 682.205 L1635.18 682.205 L1634.62 682.205 L1634.06 682.205 L1633.5 682.205 L1632.94 682.205 L1632.39 682.205 L1631.83 682.205 L1631.27 682.205 L1630.71 682.205 L1630.15 682.205 L1629.59 682.205 L1629.03 682.205 L1628.47 682.205 L1627.91 682.205 L1627.35 682.205 L1626.79 682.205 L1626.23 682.205 L1625.67 682.205 L1625.11 682.205 L1624.56 682.205 L1624 682.205 L1623.44 682.205 L1622.88 682.205 L1622.32 682.205 L1621.76 682.205 L1621.2 682.205 L1620.64 682.205 L1620.08 682.205 L1619.52 682.205 L1618.96 682.205 L1618.4 682.205 L1617.84 682.205 L1617.29 682.205 L1616.73 682.205 L1616.17 682.205 L1615.61 682.205 L1615.05 682.205 L1614.49 682.205 L1613.93 682.205 L1613.37 682.205 L1612.81 682.205 L1612.25 682.205 L1611.69 682.205 L1611.13 682.205 L1610.57 682.205 L1610.02 682.205 L1609.46 682.205 L1608.9 682.205 L1608.34 682.205 L1607.78 682.205 L1607.22 682.205 L1606.66 682.205 L1606.1 682.205 L1605.54 682.205 L1604.98 682.205 L1604.42 682.205 L1603.86 682.205 L1603.3 682.205 L1602.74 682.205 L1602.19 682.205 L1601.63 682.205 L1601.07 682.205 L1600.51 682.205 L1599.95 682.205 L1599.39 682.205 L1598.83 682.205 L1598.27 682.205 L1597.71 682.205 L1597.15 682.205 L1596.59 682.205 L1596.03 682.205 L1595.47 682.205 L1594.92 682.205 L1594.36 682.205 L1593.8 682.205 L1593.24 682.205 L1592.68 682.205 L1592.12 682.205 L1591.56 682.205 L1591 682.205 L1590.44 682.205 L1589.88 682.205 L1589.32 682.205 L1588.76 682.205 L1588.2 682.205 L1587.65 682.205 L1587.09 682.205 L1586.53 682.205 L1585.97 682.205 L1585.41 682.205 L1584.85 682.205 L1584.29 682.205 L1583.73 682.205 L1583.17 682.205 L1582.61 682.205 L1582.05 682.205 L1581.49 682.205 L1580.93 682.205 L1580.37 682.205 L1579.82 682.205 L1579.26 682.205 L1578.7 682.205 L1578.14 682.205 L1577.58 682.205 L1577.02 682.205 L1576.46 682.205 L1575.9 682.205 L1575.34 682.205 L1574.78 682.205 L1574.22 682.205 L1573.66 682.205 L1573.1 682.205 L1572.55 682.205 L1571.99 682.205 L1571.43 682.205 L1570.87 682.205 L1570.31 682.205 L1569.75 682.205 L1569.19 682.205 L1568.63 682.205 L1568.07 682.205 L1567.51 682.205 L1566.95 682.205 L1566.39 682.205 L1565.83 682.205 L1565.28 682.205 L1564.72 682.205 L1564.16 682.205 L1563.6 682.205 L1563.04 682.205 L1562.48 682.205 L1561.92 682.205 L1561.36 682.205 L1560.8 682.205 L1560.24 682.205 L1559.68 682.205 L1559.12 682.205 L1558.56 682.205 L1558 682.205 L1557.45 682.205 L1556.89 682.205 L1556.33 682.205 L1555.77 682.205 L1555.21 682.205 L1554.65 682.205 L1554.09 682.205 L1553.53 682.205 L1552.97 682.205 L1552.41 682.205 L1551.85 682.205 L1551.29 682.205 L1550.73 682.205 L1550.18 682.205 L1549.62 682.205 L1549.06 682.205 L1548.5 682.205 L1547.94 682.205 L1547.38 682.205 L1546.82 682.205 L1546.26 682.205 L1545.7 682.205 L1545.14 682.205 L1544.58 682.205 L1544.02 682.205 L1543.46 682.205 L1542.9 682.205 L1542.35 682.205 L1541.79 682.205 L1541.23 682.205 L1540.67 682.205 L1540.11 682.205 L1539.55 682.205 L1538.99 682.205 L1538.43 682.205 L1537.87 682.205 L1537.31 682.205 L1536.75 682.205 L1536.19 682.205 L1535.63 682.205 L1535.08 682.205 L1534.52 682.205 L1533.96 682.205 L1533.4 682.205 L1532.84 682.205 L1532.28 682.205 L1531.72 682.205 L1531.16 682.205 L1530.6 682.205 L1530.04 682.205 L1529.48 682.205 L1528.92 682.205 L1528.36 682.205 L1527.81 682.205 L1527.25 682.205 L1526.69 682.205 L1526.13 682.205 L1525.57 682.205 L1525.01 682.205 L1524.45 682.205 L1523.89 682.205 L1523.33 682.205 L1522.77 682.205 L1522.21 682.205 L1521.65 682.205 L1521.09 682.205 L1520.53 682.205 L1519.98 682.205 L1519.42 682.205 L1518.86 682.205 L1518.3 682.205 L1517.74 682.205 L1517.18 682.205 L1516.62 682.205 L1516.06 682.205 L1515.5 682.205 L1514.94 682.205 L1514.38 682.205 L1513.82 682.205 L1513.26 682.205 L1512.71 682.205 L1512.15 682.205 L1511.59 682.205 L1511.03 682.205 L1510.47 682.205 L1509.91 682.205 L1509.35 682.205 L1508.79 682.205 L1508.23 682.205 L1507.67 682.205 L1507.11 682.205 L1506.55 682.205 L1505.99 682.205 L1505.44 682.205 L1504.88 682.205 L1504.32 682.205 L1503.76 682.205 L1503.2 682.205 L1502.64 682.205 L1502.08 682.205 L1501.52 682.205 L1500.96 682.205 L1500.4 682.205 L1499.84 682.205 L1499.28 682.205 L1498.72 682.205 L1498.16 682.205 L1497.61 682.205 L1497.05 682.205 L1496.49 682.205 L1495.93 682.205 L1495.37 682.205 L1494.81 682.205 L1494.25 682.205 L1493.69 682.205 L1493.13 682.205 L1492.57 682.205 L1492.01 682.205 L1491.45 682.205 L1490.89 682.205 L1490.34 682.205 L1489.78 682.205 L1489.22 682.205 L1488.66 682.205 L1488.1 682.205 L1487.54 682.205 L1486.98 682.205 L1486.42 682.205 L1485.86 682.205 L1485.3 682.205 L1484.74 682.205 L1484.18 682.205 L1483.62 682.205 L1483.07 682.205 L1482.51 682.205 L1481.95 682.205 L1481.39 682.205 L1480.83 682.205 L1480.27 682.205 L1479.71 682.205 L1479.15 682.205 L1478.59 682.205 L1478.03 682.205 L1477.47 682.205 L1476.91 682.205 L1476.35 682.205 L1475.79 682.205 L1475.24 682.205 L1474.68 682.205 L1474.12 682.205 L1473.56 682.205 L1473 682.205 L1472.44 682.205 L1471.88 682.205 L1471.32 682.205 L1470.76 682.205 L1470.2 682.205 L1469.64 682.205 L1469.08 682.205 L1468.52 682.205 L1467.97 682.205 L1467.41 682.205 L1466.85 682.205 L1466.29 682.205 L1465.73 682.205 L1465.17 682.205 L1464.61 682.205 L1464.05 682.205 L1463.49 682.205 L1462.93 682.205 L1462.37 682.205 L1461.81 682.205 L1461.25 682.205 L1460.7 682.205 L1460.14 682.205 L1459.58 682.205 L1459.02 682.205 L1458.46 682.205 L1457.9 682.205 L1457.34 682.205 L1456.78 682.205 L1456.22 682.205 L1455.66 682.205 L1455.1 682.205 L1454.54 682.205 L1453.98 682.205 L1453.42 682.205 L1452.87 682.205 L1452.31 682.205 L1451.75 682.205 L1451.19 682.205 L1450.63 682.205 L1450.07 682.205 L1449.51 682.205 L1448.95 682.205 L1448.39 682.205 L1447.83 682.205 L1447.27 682.205 L1446.71 682.205 L1446.15 682.205 L1445.6 682.205 L1445.04 682.205 L1444.48 682.205 L1443.92 682.205 L1443.36 682.205 L1442.8 682.205 L1442.24 682.205 L1441.68 682.205 L1441.12 682.205 L1440.56 682.205 L1440 682.205 L1439.44 682.205 L1438.88 682.205 L1438.33 682.205 L1437.77 682.205 L1437.21 682.205 L1436.65 682.205 L1436.09 682.205 L1435.53 682.205 L1434.97 682.205 L1434.41 682.205 L1433.85 682.205 L1433.29 682.205 L1432.73 682.205 L1432.17 682.205 L1431.61 682.205 L1431.05 682.205 L1430.5 682.205 L1429.94 682.205 L1429.38 682.205 L1428.82 682.205 L1428.26 682.205 L1427.7 682.205 L1427.14 682.205 L1426.58 682.205 L1426.02 682.205 L1425.46 682.205 L1424.9 682.205 L1424.34 682.205 L1423.78 682.205 L1423.23 682.205 L1422.67 682.205 L1422.11 682.205 L1421.55 682.205 L1420.99 682.205 L1420.43 682.205 L1419.87 682.205 L1419.31 682.205 L1418.75 682.205 L1418.19 682.205 L1417.63 682.205 L1417.07 682.205 L1416.51 682.205 L1415.95 682.205 L1415.4 682.205 L1414.84 682.205 L1414.28 682.205 L1413.72 682.205 L1413.16 682.205 L1412.6 682.205 L1412.04 682.205 L1411.48 682.205 L1410.92 682.205 L1410.36 682.205 L1409.8 682.205 L1409.24 682.205 L1408.68 682.205 L1408.13 682.205 L1407.57 682.205 L1407.01 682.205 L1406.45 682.205 L1405.89 682.205 L1405.33 682.205 L1404.77 682.205 L1404.21 682.205 L1403.65 682.205 L1403.09 682.205 L1402.53 682.205 L1401.97 682.205 L1401.41 682.205 L1400.86 682.205 L1400.3 682.205 L1399.74 682.205 L1399.18 682.205 L1398.62 682.205 L1398.06 682.205 L1397.5 682.205 L1396.94 682.205 L1396.38 682.205 L1395.82 682.205 L1395.26 682.205 L1394.7 682.205 L1394.14 682.205 L1393.58 682.205 L1393.03 682.205 L1392.47 682.205 L1391.91 682.205 L1391.35 682.205 L1390.79 682.205 L1390.23 682.205 L1389.67 682.205 L1389.11 682.205 L1388.55 682.205 L1387.99 682.205 L1387.43 682.205 L1386.87 682.205 L1386.31 682.205 L1385.76 682.205 L1385.2 682.205 L1384.64 682.205 L1384.08 682.205 L1383.52 682.205 L1382.96 682.205 L1382.4 682.205 L1381.84 682.205 L1381.28 682.205 L1380.72 682.205 L1380.16 682.205 L1379.6 682.205 L1379.04 682.205 L1378.49 682.205 L1377.93 682.205 L1377.37 682.205 L1376.81 682.205 L1376.25 682.205 L1375.69 682.205 L1375.13 682.205 L1374.57 682.205 L1374.01 682.205 L1373.45 682.205 L1372.89 682.205 L1372.33 682.205 L1371.77 682.205 L1371.21 682.205 L1370.66 682.205 L1370.1 682.205 L1369.54 682.205 L1368.98 682.205 L1368.42 682.205 L1367.86 682.205 L1367.3 682.205 L1366.74 682.205 L1366.18 682.205 L1365.62 682.205 L1365.06 682.205 L1364.5 682.205 L1363.94 682.205 L1363.39 682.205 L1362.83 682.205 L1362.27 682.205 L1361.71 682.205 L1361.15 682.205 L1360.59 682.205 L1360.03 682.205 L1359.47 682.205 L1358.91 682.205 L1358.35 682.205 L1357.79 682.205 L1357.23 682.205 L1356.67 682.205 L1356.12 682.205 L1355.56 682.205 L1355 682.205 L1354.44 682.205 L1353.88 682.205 L1353.32 682.205 L1352.76 682.205 L1352.2 682.205 L1351.64 682.205 L1351.08 682.205 L1350.52 682.205 L1349.96 682.205 L1349.4 682.205 L1348.84 682.205 L1348.29 682.205 L1347.73 682.205 L1347.17 682.205 L1346.61 682.205 L1346.05 682.205 L1345.49 682.205 L1344.93 682.205 L1344.37 682.205 L1343.81 682.205 L1343.25 682.205 L1342.69 682.205 L1342.13 682.205 L1341.57 682.205 L1341.02 682.205 L1340.46 682.205 L1339.9 682.205 L1339.34 682.205 L1338.78 682.205 L1338.22 682.205 L1337.66 682.205 L1337.1 682.205 L1336.54 682.205 L1335.98 682.205 L1335.42 682.205 L1334.86 682.205 L1334.3 682.205 L1333.75 682.205 L1333.19 682.205 L1332.63 682.205 L1332.07 682.205 L1331.51 682.205 L1330.95 682.205 L1330.39 682.205 L1329.83 682.205 L1329.27 682.205 L1328.71 682.205 L1328.15 682.205 L1327.59 682.205 L1327.03 682.205 L1326.47 682.205 L1325.92 682.205 L1325.36 682.205 L1324.8 682.205 L1324.24 682.205 L1323.68 682.205 L1323.12 682.205 L1322.56 682.205 L1322 682.205 L1321.44 682.205 L1320.88 682.205 L1320.32 682.205 L1319.76 682.205 L1319.2 682.205 L1318.65 682.205 L1318.09 682.205 L1317.53 682.205 L1316.97 682.205 L1316.41 682.205 L1315.85 682.205 L1315.29 682.205 L1314.73 682.205 L1314.17 682.205 L1313.61 682.205 L1313.05 682.205 L1312.49 682.205 L1311.93 682.205 L1311.38 682.205 L1310.82 682.205 L1310.26 682.205 L1309.7 682.205 L1309.14 682.205 L1308.58 682.205 L1308.02 682.205 L1307.46 682.205 L1306.9 682.205 L1306.34 682.205 L1305.78 682.205 L1305.22 682.205 L1304.66 682.205 L1304.1 682.205 L1303.55 682.205 L1302.99 682.205 L1302.43 682.205 L1301.87 682.205 L1301.31 682.205 L1300.75 682.205 L1300.19 682.205 L1299.63 682.205 L1299.07 682.205 L1298.51 682.205 L1297.95 682.205 L1297.39 682.205 L1296.83 682.205 L1296.28 682.205 L1295.72 682.205 L1295.16 682.205 L1294.6 682.205 L1294.04 682.205 L1293.48 682.205 L1292.92 682.205 L1292.36 682.205 L1291.8 682.205 L1291.24 682.205 L1290.68 682.205 L1290.12 682.205 L1289.56 682.205 L1289 682.205 L1288.45 682.205 L1287.89 682.205 L1287.33 682.205 L1286.77 682.205 L1286.21 682.205 L1285.65 682.205 L1285.09 682.205 L1284.53 682.205 L1283.97 682.205 L1283.41 682.205 L1282.85 682.205 L1282.29 682.205 L1281.73 682.205 L1281.18 682.205 L1280.62 682.205 L1280.06 682.205 L1279.5 682.205 L1278.94 682.205 L1278.38 682.205 L1277.82 682.205 L1277.26 682.205 L1276.7 682.205 L1276.14 682.205 L1275.58 682.205 L1275.02 682.205 L1274.46 682.205 L1273.91 682.205 L1273.35 682.205 L1272.79 682.205 L1272.23 682.205 L1271.67 682.205 L1271.11 682.205 L1270.55 682.205 L1269.99 682.205 L1269.43 682.205 L1268.87 682.205 L1268.31 682.205 L1267.75 682.205 L1267.19 682.205 L1266.63 682.205 L1266.08 682.205 L1265.52 682.205 L1264.96 682.205 L1264.4 682.205 L1263.84 682.205 L1263.28 682.205 L1262.72 682.205 L1262.16 682.205 L1261.6 682.205 L1261.04 682.205 L1260.48 682.205 L1259.92 682.205 L1259.36 682.205 L1258.81 682.205 L1258.25 682.205 L1257.69 682.205 L1257.13 682.205 L1256.57 682.205 L1256.01 682.205 L1255.45 682.205 L1254.89 682.205 L1254.33 682.205 L1253.77 682.205 L1253.21 682.205 L1252.65 682.205 L1252.09 682.205 L1251.54 682.205 L1250.98 682.205 L1250.42 682.205 L1249.86 682.205 L1249.3 682.205 L1248.74 682.205 L1248.18 682.205 L1247.62 682.205 L1247.06 682.205 L1246.5 682.205 L1245.94 682.205 L1245.38 682.205 L1244.82 682.205 L1244.26 682.205 L1243.71 682.205 L1243.15 682.205 L1242.59 682.205 L1242.03 682.205 L1241.47 682.205 L1240.91 682.205 L1240.35 682.205 L1239.79 682.205 L1239.23 682.205 L1238.67 682.205 L1238.11 682.205 L1237.55 682.205 L1236.99 682.205 L1236.44 682.205 L1235.88 682.205 L1235.32 682.205 L1234.76 682.205 L1234.2 682.205 L1233.64 682.205 L1233.08 682.205 L1232.52 682.205 L1231.96 682.205 L1231.4 682.205 L1230.84 682.205 L1230.28 682.205 L1229.72 682.205 L1229.17 682.205 L1228.61 682.205 L1228.05 682.205 L1227.49 682.205 L1226.93 682.205 L1226.37 682.205 L1225.81 682.205 L1225.25 682.205 L1224.69 682.205 L1224.13 682.205 L1223.57 682.205 L1223.01 682.205 L1222.45 682.205 L1221.89 682.205 L1221.34 682.205 L1220.78 682.205 L1220.22 682.205 L1219.66 682.205 L1219.1 682.205 L1218.54 682.205 L1217.98 682.205 L1217.42 682.205 L1216.86 682.205 L1216.3 682.205 L1215.74 682.205 L1215.18 682.205 L1214.62 682.205 L1214.07 682.205 L1213.51 682.205 L1212.95 682.205 L1212.39 682.205 L1211.83 682.205 L1211.27 682.205 L1210.71 682.205 L1210.15 682.205 L1209.59 682.205 L1209.03 682.205 L1208.47 682.205 L1207.91 682.205 L1207.35 682.205 L1206.8 682.205 L1206.24 682.205 L1205.68 682.205 L1205.12 682.205 L1204.56 682.205 L1204 682.205 L1203.44 682.205 L1202.88 682.205 L1202.32 682.205 L1201.76 682.205 L1201.2 682.205 L1200.64 682.205 L1200.08 682.205 L1199.52 682.205 L1198.97 682.205 L1198.41 682.205 L1197.85 682.205 L1197.29 682.205 L1196.73 682.205 L1196.17 682.205 L1195.61 682.205 L1195.05 682.205 L1194.49 682.205 L1193.93 682.205 L1193.37 682.205 L1192.81 682.205 L1192.25 682.205 L1191.7 682.205 L1191.14 682.205 L1190.58 682.205 L1190.02 682.205 L1189.46 682.205 L1188.9 682.205 L1188.34 682.205 L1187.78 682.205 L1187.22 682.205 L1186.66 682.205 L1186.1 682.205 L1185.54 682.205 L1184.98 682.205 L1184.43 682.205 L1183.87 682.205 L1183.31 682.205 L1182.75 682.205 L1182.19 682.205 L1181.63 682.205 L1181.07 682.205 L1180.51 682.205 L1179.95 682.205 L1179.39 682.205 L1178.83 682.205 L1178.27 682.205 L1177.71 682.205 L1177.15 682.205 L1176.6 682.205 L1176.04 682.205 L1175.48 682.205 L1174.92 682.205 L1174.36 682.205 L1173.8 682.205 L1173.24 682.205 L1172.68 682.205 L1172.12 682.205 L1171.56 682.205 L1171 682.205 L1170.44 682.205 L1169.88 682.205 L1169.33 682.205 L1168.77 682.205 L1168.21 682.205 L1167.65 682.205 L1167.09 682.205 L1166.53 682.205 L1165.97 682.205 L1165.41 682.205 L1164.85 682.205 L1164.29 682.205 L1163.73 682.205 L1163.17 682.205 L1162.61 682.205 L1162.05 682.205 L1161.5 682.205 L1160.94 682.205 L1160.38 682.205 L1159.82 682.205 L1159.26 682.205 L1158.7 682.205 L1158.14 682.205 L1157.58 682.205 L1157.02 682.205 L1156.46 682.205 L1155.9 682.205 L1155.34 682.205 L1154.78 682.205 L1154.23 682.205 L1153.67 682.205 L1153.11 682.205 L1152.55 682.205 L1151.99 682.205 L1151.43 682.205 L1150.87 682.205 L1150.31 682.205 L1149.75 682.205 L1149.19 682.205 L1148.63 682.205 L1148.07 682.205 L1147.51 682.205 L1146.96 682.205 L1146.4 682.205 L1145.84 682.205 L1145.28 682.205 L1144.72 682.205 L1144.16 682.205 L1143.6 682.205 L1143.04 682.205 L1142.48 682.205 L1141.92 682.205 L1141.36 682.205 L1140.8 682.205 L1140.24 682.205 L1139.68 682.205 L1139.13 682.205 L1138.57 682.205 L1138.01 682.205 L1137.45 682.205 L1136.89 682.205 L1136.33 682.205 L1135.77 682.205 L1135.21 682.205 L1134.65 682.205 L1134.09 682.205 L1133.53 682.205 L1132.97 682.205 L1132.41 682.205 L1131.86 682.205 L1131.3 682.205 L1130.74 682.205 L1130.18 682.205 L1129.62 682.205 L1129.06 682.205 L1128.5 682.205 L1127.94 682.205 L1127.38 682.205 L1126.82 682.205 L1126.26 682.205 L1125.7 682.205 L1125.14 682.205 L1124.59 682.205 L1124.03 682.205 L1123.47 682.205 L1122.91 682.205 L1122.35 682.205 L1121.79 682.205 L1121.23 682.205 L1120.67 682.205 L1120.11 682.205 L1119.55 682.205 L1118.99 682.205 L1118.43 682.205 L1117.87 682.205 L1117.31 682.205 L1116.76 682.205 L1116.2 682.205 L1115.64 682.205 L1115.08 682.205 L1114.52 682.205 L1113.96 682.205 L1113.4 682.205 L1112.84 682.205 L1112.28 682.205 L1111.72 682.205 L1111.16 682.205 L1110.6 682.205 L1110.04 682.205 L1109.49 682.205 L1108.93 682.205 L1108.37 682.205 L1107.81 682.205 L1107.25 682.205 L1106.69 682.205 L1106.13 682.205 L1105.57 682.205 L1105.01 682.205 L1104.45 682.205 L1103.89 682.205 L1103.33 682.205 L1102.77 682.205 L1102.22 682.205 L1101.66 682.205 L1101.1 682.205 L1100.54 682.205 L1099.98 682.205 L1099.42 682.205 L1098.86 682.205 L1098.3 682.205 L1097.74 682.205 L1097.18 682.205 L1096.62 682.205 L1096.06 682.205 L1095.5 682.205 L1094.94 682.205 L1094.39 682.205 L1093.83 682.205 L1093.27 682.205 L1092.71 682.205 L1092.15 682.205 L1091.59 682.205 L1091.03 682.205 L1090.47 682.205 L1089.91 682.205 L1089.35 682.205 L1088.79 682.205 L1088.23 682.205 L1087.67 682.205 L1087.12 682.205 L1086.56 682.205 L1086 682.205 L1085.44 682.205 L1084.88 682.205 L1084.32 682.205 L1083.76 682.205 L1083.2 682.205 L1082.64 682.205 L1082.08 682.205 L1081.52 682.205 L1080.96 682.205 L1080.4 682.205 L1079.85 682.205 L1079.29 682.205 L1078.73 682.205 L1078.17 682.205 L1077.61 682.205 L1077.05 682.205 L1076.49 682.205 L1075.93 682.205 L1075.37 682.205 L1074.81 682.205 L1074.25 682.205 L1073.69 682.205 L1073.13 682.205 L1072.57 682.205 L1072.02 682.205 L1071.46 682.205 L1070.9 682.205 L1070.34 682.205 L1069.78 682.205 L1069.22 682.205 L1068.66 682.205 L1068.1 682.205 L1067.54 682.205 L1066.98 682.205 L1066.42 682.205 L1065.86 682.205 L1065.3 682.205 L1064.75 682.205 L1064.19 682.205 L1063.63 682.205 L1063.07 682.205 L1062.51 682.205 L1061.95 682.205 L1061.39 682.205 L1060.83 682.205 L1060.27 682.205 L1059.71 682.205 L1059.15 682.205 L1058.59 682.205 L1058.03 682.205 L1057.48 682.205 L1056.92 682.205 L1056.36 682.205 L1055.8 682.205 L1055.24 682.205 L1054.68 682.205 L1054.12 682.205 L1053.56 682.205 L1053 682.205 L1052.44 682.205 L1051.88 682.205 L1051.32 682.205 L1050.76 682.205 L1050.2 682.205 L1049.65 682.205 L1049.09 682.205 L1048.53 682.205 L1047.97 682.205 L1047.41 682.205 L1046.85 682.205 L1046.29 682.205 L1045.73 682.205 L1045.17 682.205 L1044.61 682.205 L1044.05 682.205 L1043.49 682.205 L1042.93 682.205 L1042.38 682.205 L1041.82 682.205 L1041.26 682.205 L1040.7 682.205 L1040.14 682.205 L1039.58 682.205 L1039.02 682.205 L1038.46 682.205 L1037.9 682.205 L1037.34 682.205 L1036.78 682.205 L1036.22 682.205 L1035.66 682.205 L1035.1 682.205 L1034.55 682.205 L1033.99 682.205 L1033.43 682.205 L1032.87 682.205 L1032.31 682.205 L1031.75 682.205 L1031.19 682.205 L1030.63 682.205 L1030.07 682.205 L1029.51 682.205 L1028.95 682.205 L1028.39 682.205 L1027.83 682.205 L1027.28 682.205 L1026.72 682.205 L1026.16 682.205 L1025.6 682.205 L1025.04 682.205 L1024.48 682.205 L1023.92 682.205 L1023.36 682.205 L1022.8 682.205 L1022.24 682.205 L1021.68 682.205 L1021.12 682.205 L1020.56 682.205 L1020.01 682.205 L1019.45 682.205 L1018.89 682.205 L1018.33 682.205 L1017.77 682.205 L1017.21 682.205 L1016.65 682.205 L1016.09 682.205 L1015.53 682.205 L1014.97 682.205 L1014.41 682.205 L1013.85 682.205 L1013.29 682.205 L1012.73 682.205 L1012.18 682.205 L1011.62 682.205 L1011.06 682.205 L1010.5 682.205 L1009.94 682.205 L1009.38 682.205 L1008.82 682.205 L1008.26 682.205 L1007.7 682.205 L1007.14 682.205 L1006.58 682.205 L1006.02 682.205 L1005.46 682.205 L1004.91 682.205 L1004.35 682.205 L1003.79 682.205 L1003.23 682.205 L1002.67 682.205 L1002.11 682.205 L1001.55 682.205 L1000.99 682.205 L1000.43 682.205 L999.872 682.205 L999.313 682.205 L998.754 682.205 L998.194 682.205 L997.635 682.205 L997.076 682.205 L996.517 682.205 L995.957 682.205 L995.398 682.205 L994.839 682.205 L994.28 682.205 L993.72 682.205 L993.161 682.205 L992.602 682.205 L992.043 682.205 L991.483 682.205 L990.924 682.205 L990.365 682.205 L989.806 682.205 L989.246 682.205 L988.687 682.205 L988.128 682.205 L987.569 682.205 L987.009 682.205 L986.45 682.205 L985.891 682.205 L985.332 682.205 L984.772 682.205 L984.213 682.205 L983.654 682.205 L983.095 682.205 L982.535 682.205 L981.976 682.205 L981.417 682.205 L980.858 682.205 L980.298 682.205 L979.739 682.205 L979.18 682.205 L978.621 682.205 L978.061 682.205 L977.502 682.205 L976.943 682.205 L976.384 682.205 L975.824 682.205 L975.265 682.205 L974.706 682.205 L974.147 682.205 L973.587 682.205 L973.028 682.205 L972.469 682.205 L971.91 682.205 L971.35 682.205 L970.791 682.205 L970.232 682.205 L969.673 682.205 L969.113 682.205 L968.554 682.205 L967.995 682.205 L967.436 682.205 L966.876 682.205 L966.317 682.205 L965.758 682.205 L965.199 682.205 L964.639 682.205 L964.08 682.205 L963.521 682.205 L962.962 682.205 L962.402 682.205 L961.843 682.205 L961.284 682.205 L960.725 682.205 L960.165 682.205 L959.606 682.205 L959.047 682.205 L958.488 682.205 L957.928 682.205 L957.369 682.205 L956.81 682.205 L956.251 682.205 L955.691 682.205 L955.132 682.205 L954.573 682.205 L954.014 682.205 L953.454 682.205 L952.895 682.205 L952.336 682.205 L951.777 682.205 L951.217 682.205 L950.658 682.205 L950.099 682.205 L949.54 682.205 L948.98 682.205 L948.421 682.205 L947.862 682.205 L947.303 682.205 L946.743 682.205 L946.184 682.205 L945.625 682.205 L945.066 682.205 L944.506 682.205 L943.947 682.205 L943.388 682.205 L942.829 682.205 L942.269 682.205 L941.71 682.205 L941.151 682.205 L940.592 682.205 L940.032 682.205 L939.473 682.205 L938.914 682.205 L938.355 682.205 L937.795 682.205 L937.236 682.205 L936.677 682.205 L936.118 682.205 L935.558 682.205 L934.999 682.205 L934.44 682.205 L933.881 682.205 L933.321 682.205 L932.762 682.205 L932.203 682.205 L931.644 682.205 L931.084 682.205 L930.525 682.205 L929.966 682.205 L929.406 682.205 L928.847 682.205 L928.288 682.205 L927.729 682.205 L927.169 682.205 L926.61 682.205 L926.051 682.205 L925.492 682.205 L924.932 682.205 L924.373 682.205 L923.814 682.205 L923.255 682.205 L922.695 682.205 L922.136 682.205 L921.577 682.205 L921.018 682.205 L920.458 682.205 L919.899 682.205 L919.34 682.205 L918.781 682.205 L918.221 682.205 L917.662 682.205 L917.103 682.205 L916.544 682.205 L915.984 682.205 L915.425 682.205 L914.866 682.205 L914.307 682.205 L913.747 682.205 L913.188 682.205 L912.629 682.205 L912.07 682.205 L911.51 682.205 L910.951 682.205 L910.392 682.205 L909.833 682.205 L909.273 682.205 L908.714 682.205 L908.155 682.205 L907.596 682.205 L907.036 682.205 L906.477 682.205 L905.918 682.205 L905.359 682.205 L904.799 682.205 L904.24 682.205 L903.681 682.205 L903.122 682.205 L902.562 682.205 L902.003 682.205 L901.444 682.205 L900.885 682.205 L900.325 682.205 L899.766 682.205 L899.207 682.205 L898.648 682.205 L898.088 682.205 L897.529 682.205 L896.97 682.205 L896.411 682.205 L895.851 682.205 L895.292 682.205 L894.733 682.205 L894.174 682.205 L893.614 682.205 L893.055 682.205 L892.496 682.205 L891.937 682.205 L891.377 682.205 L890.818 682.205 L890.259 682.205 L889.7 682.205 L889.14 682.205 L888.581 682.205 L888.022 682.205 L887.463 682.205 L886.903 682.205 L886.344 682.205 L885.785 682.205 L885.226 682.205 L884.666 682.205 L884.107 682.205 L883.548 682.205 L882.989 682.205 L882.429 682.205 L881.87 682.205 L881.311 682.205 L880.752 682.205 L880.192 682.205 L879.633 682.205 L879.074 682.205 L878.515 682.205 L877.955 682.205 L877.396 682.205 L876.837 682.205 L876.278 682.205 L875.718 682.205 L875.159 682.205 L874.6 682.205 L874.041 682.205 L873.481 682.205 L872.922 682.205 L872.363 682.205 L871.804 682.205 L871.244 682.205 L870.685 682.205 L870.126 682.205 L869.567 682.205 L869.007 682.205 L868.448 682.205 L867.889 682.205 L867.33 682.205 L866.77 682.205 L866.211 682.205 L865.652 682.205 L865.093 682.205 L864.533 682.205 L863.974 682.205 L863.415 682.205 L862.856 682.205 L862.296 682.205 L861.737 682.205 L861.178 682.205 L860.619 682.205 L860.059 682.205 L859.5 682.205 L858.941 682.205 L858.382 682.205 L857.822 682.205 L857.263 682.205 L856.704 682.205 L856.145 682.205 L855.585 682.205 L855.026 682.205 L854.467 682.205 L853.908 682.205 L853.348 682.205 L852.789 682.205 L852.23 682.205 L851.671 682.205 L851.111 682.205 L850.552 682.205 L849.993 682.205 L849.434 682.205 L848.874 682.205 L848.315 682.205 L847.756 682.205 L847.197 682.205 L846.637 682.205 L846.078 682.205 L845.519 682.205 L844.96 682.205 L844.4 682.205 L843.841 682.205 L843.282 682.205 L842.723 682.205 L842.163 682.205 L841.604 682.205 L841.045 682.205 L840.486 682.205 L839.926 682.205 L839.367 682.205 L838.808 682.205 L838.249 682.205 L837.689 682.205 L837.13 682.205 L836.571 682.205 L836.012 682.205 L835.452 682.205 L834.893 682.205 L834.334 682.205 L833.775 682.205 L833.215 682.205 L832.656 682.205 L832.097 682.205 L831.538 682.205 L830.978 682.205 L830.419 682.205 L829.86 682.205 L829.301 682.205 L828.741 682.205 L828.182 682.205 L827.623 682.205 L827.064 682.205 L826.504 682.205 L825.945 682.205 L825.386 682.205 L824.827 682.205 L824.267 682.205 L823.708 682.205 L823.149 682.205 L822.59 682.205 L822.03 682.205 L821.471 682.205 L820.912 682.205 L820.353 682.205 L819.793 682.205 L819.234 682.205 L818.675 682.205 L818.116 682.205 L817.556 682.205 L816.997 682.205 L816.438 682.205 L815.879 682.205 L815.319 682.205 L814.76 682.205 L814.201 682.205 L813.642 682.205 L813.082 682.205 L812.523 682.205 L811.964 682.205 L811.405 682.205 L810.845 682.205 L810.286 682.205 L809.727 682.205 L809.168 682.205 L808.608 682.205 L808.049 682.205 L807.49 682.205 L806.931 682.205 L806.371 682.205 L805.812 682.205 L805.253 682.205 L804.693 682.205 L804.134 682.205 L803.575 682.205 L803.016 682.205 L802.456 682.205 L801.897 682.205 L801.338 682.205 L800.779 682.205 L800.219 682.205 L799.66 682.205 L799.101 682.205 L798.542 682.205 L797.982 682.205 L797.423 682.205 L796.864 682.205 L796.305 682.205 L795.745 682.205 L795.186 682.205 L794.627 682.205 L794.068 682.205 L793.508 682.205 L792.949 682.205 L792.39 682.205 L791.831 682.205 L791.271 682.205 L790.712 682.205 L790.153 682.205 L789.594 682.205 L789.034 682.205 L788.475 682.205 L787.916 682.205 L787.357 682.205 L786.797 682.205 L786.238 682.205 L785.679 682.205 L785.12 682.205 L784.56 682.205 L784.001 682.205 L783.442 682.205 L782.883 682.205 L782.323 682.205 L781.764 682.205 L781.205 682.205 L780.646 682.205 L780.086 682.205 L779.527 682.205 L778.968 682.205 L778.409 682.205 L777.849 682.205 L777.29 682.205 L776.731 682.205 L776.172 682.205 L775.612 682.205 L775.053 682.205 L774.494 682.205 L773.935 682.205 L773.375 682.205 L772.816 682.205 L772.257 682.205 L771.698 682.205 L771.138 682.205 L770.579 682.205 L770.02 682.205 L769.461 682.205 L768.901 682.205 L768.342 682.205 L767.783 682.205 L767.224 682.205 L766.664 682.205 L766.105 682.205 L765.546 682.205 L764.987 682.205 L764.427 682.205 L763.868 682.205 L763.309 682.205 L762.75 682.205 L762.19 682.205 L761.631 682.205 L761.072 682.205 L760.513 682.205 L759.953 682.205 L759.394 682.205 L758.835 682.205 L758.276 682.205 L757.716 682.205 L757.157 682.205 L756.598 682.205 L756.039 682.205 L755.479 682.205 L754.92 682.205 L754.361 682.205 L753.802 682.205 L753.242 682.205 L752.683 682.205 L752.124 682.205 L751.565 682.205 L751.005 682.205 L750.446 682.205 L749.887 682.205 L749.328 682.205 L748.768 682.205 L748.209 682.205 L747.65 682.205 L747.091 682.205 L746.531 682.205 L745.972 682.205 L745.413 682.205 L744.854 682.205 L744.294 682.205 L743.735 682.205 L743.176 682.205 L742.617 682.205 L742.057 682.205 L741.498 682.205 L740.939 682.205 L740.38 682.205 L739.82 682.205 L739.261 682.205 L738.702 682.205 L738.143 682.205 L737.583 682.205 L737.024 682.205 L736.465 682.205 L735.906 682.205 L735.346 682.205 L734.787 682.205 L734.228 682.205 L733.669 682.205 L733.109 682.205 L732.55 682.205 L731.991 682.205 L731.432 682.205 L730.872 682.205 L730.313 682.205 L729.754 682.205 L729.195 682.205 L728.635 682.205 L728.076 682.205 L727.517 682.205 L726.958 682.205 L726.398 682.205 L725.839 682.205 L725.28 682.205 L724.721 682.205 L724.161 682.205 L723.602 682.205 L723.043 682.205 L722.484 682.205 L721.924 682.205 L721.365 682.205 L720.806 682.205 L720.247 682.205  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip703)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.628 720.806,683.628 721.365,683.628 721.924,683.628 722.484,683.628 723.043,683.628 723.602,683.628 724.161,683.628 724.721,683.628 725.28,683.628 725.839,683.628 726.398,683.628 726.958,683.628 727.517,683.628 728.076,683.628 728.635,683.628 729.195,683.628 729.754,683.628 730.313,683.628 730.872,683.628 731.432,683.628 731.991,683.628 732.55,683.628 733.109,683.628 733.669,683.628 734.228,683.628 734.787,683.628 735.346,683.628 735.906,683.628 736.465,683.628 737.024,683.628 737.583,683.628 738.143,683.628 738.702,683.628 739.261,683.628 739.82,683.628 740.38,683.628 740.939,683.628 741.498,683.628 742.057,683.628 742.617,683.628 743.176,683.628 743.735,683.628 744.294,683.628 744.854,683.628 745.413,683.628 745.972,683.628 746.531,683.628 747.091,683.628 747.65,683.628 748.209,683.628 748.768,683.628 749.328,683.628 749.887,683.628 750.446,683.628 751.005,683.628 751.565,683.628 752.124,683.628 752.683,683.628 753.242,683.628 753.802,683.628 754.361,683.628 754.92,683.628 755.479,683.628 756.039,683.628 756.598,683.628 757.157,683.628 757.716,683.628 758.276,683.628 758.835,683.628 759.394,683.628 759.953,683.628 760.513,683.628 761.072,683.628 761.631,683.628 762.19,683.628 762.75,683.628 763.309,683.628 763.868,683.628 764.427,683.628 764.987,683.628 765.546,683.628 766.105,683.628 766.664,683.628 767.224,683.628 767.783,683.628 768.342,683.628 768.901,683.628 769.461,683.628 770.02,683.628 770.579,683.628 771.138,683.628 771.698,683.628 772.257,683.628 772.816,683.628 773.375,683.628 773.935,683.628 774.494,683.628 775.053,683.628 775.612,683.628 776.172,683.628 776.731,683.628 777.29,683.628 777.849,683.628 778.409,683.628 778.968,683.628 779.527,683.628 780.086,683.628 780.646,683.628 781.205,683.628 781.764,683.628 782.323,683.628 782.883,683.628 783.442,683.628 784.001,683.628 784.56,683.628 785.12,683.628 785.679,683.628 786.238,683.628 786.797,683.628 787.357,683.628 787.916,683.628 788.475,683.628 789.034,683.628 789.594,683.628 790.153,683.628 790.712,683.628 791.271,683.628 791.831,683.628 792.39,683.628 792.949,683.628 793.508,683.628 794.068,683.628 794.627,683.628 795.186,683.628 795.745,683.628 796.305,683.628 796.864,683.628 797.423,683.628 797.982,683.628 798.542,683.628 799.101,683.628 799.66,683.628 800.219,683.628 800.779,683.628 801.338,683.628 801.897,683.628 802.456,683.628 803.016,683.628 803.575,683.628 804.134,683.628 804.693,683.628 805.253,683.628 805.812,683.628 806.371,683.628 806.931,683.628 807.49,683.628 808.049,683.628 808.608,683.628 809.168,683.628 809.727,683.628 810.286,683.628 810.845,683.628 811.405,683.628 811.964,683.628 812.523,683.628 813.082,683.628 813.642,683.628 814.201,683.628 814.76,683.628 815.319,683.628 815.879,683.628 816.438,683.628 816.997,683.628 817.556,683.628 818.116,683.628 818.675,683.628 819.234,683.628 819.793,683.628 820.353,683.628 820.912,683.628 821.471,683.628 822.03,683.628 822.59,683.628 823.149,683.628 823.708,683.628 824.267,683.628 824.827,683.628 825.386,683.628 825.945,683.628 826.504,683.628 827.064,683.628 827.623,683.628 828.182,683.628 828.741,683.628 829.301,683.628 829.86,683.628 830.419,683.628 830.978,683.628 831.538,683.628 832.097,683.628 832.656,683.628 833.215,683.628 833.775,683.628 834.334,683.628 834.893,683.628 835.452,683.628 836.012,683.628 836.571,683.628 837.13,683.628 837.689,683.628 838.249,683.628 838.808,683.628 839.367,683.628 839.926,683.628 840.486,683.628 841.045,683.628 841.604,683.628 842.163,683.628 842.723,683.628 843.282,683.628 843.841,683.628 844.4,683.628 844.96,683.628 845.519,683.628 846.078,683.628 846.637,683.628 847.197,683.628 847.756,683.628 848.315,683.628 848.874,683.628 849.434,683.628 849.993,683.628 850.552,683.628 851.111,683.628 851.671,683.628 852.23,683.628 852.789,683.628 853.348,683.628 853.908,683.628 854.467,683.628 855.026,683.628 855.585,683.628 856.145,683.628 856.704,683.628 857.263,683.628 857.822,683.628 858.382,683.628 858.941,683.628 859.5,683.628 860.059,683.628 860.619,683.628 861.178,683.628 861.737,683.628 862.296,683.628 862.856,683.628 863.415,683.628 863.974,683.628 864.533,683.628 865.093,683.628 865.652,683.628 866.211,683.628 866.77,683.628 867.33,683.628 867.889,683.628 868.448,683.628 869.007,683.628 869.567,683.628 870.126,683.628 870.685,683.628 871.244,683.628 871.804,683.628 872.363,683.628 872.922,683.628 873.481,683.628 874.041,683.628 874.6,683.628 875.159,683.628 875.718,683.628 876.278,683.628 876.837,683.628 877.396,683.628 877.955,683.628 878.515,683.628 879.074,683.628 879.633,683.628 880.192,683.628 880.752,683.628 881.311,683.628 881.87,683.628 882.429,683.628 882.989,683.628 883.548,683.628 884.107,683.628 884.666,683.628 885.226,683.628 885.785,683.628 886.344,683.628 886.903,683.628 887.463,683.628 888.022,683.628 888.581,683.628 889.14,683.628 889.7,683.628 890.259,683.628 890.818,683.628 891.377,683.628 891.937,683.628 892.496,683.628 893.055,683.628 893.614,683.628 894.174,683.628 894.733,683.628 895.292,683.628 895.851,683.628 896.411,683.628 896.97,683.628 897.529,683.628 898.088,683.628 898.648,683.628 899.207,683.628 899.766,683.628 900.325,683.628 900.885,683.628 901.444,683.628 902.003,683.628 902.562,683.628 903.122,683.628 903.681,683.628 904.24,683.628 904.799,683.628 905.359,683.628 905.918,683.628 906.477,683.628 907.036,683.628 907.596,683.628 908.155,683.628 908.714,683.628 909.273,683.628 909.833,683.628 910.392,683.628 910.951,683.628 911.51,683.628 912.07,683.628 912.629,683.628 913.188,683.628 913.747,683.628 914.307,683.628 914.866,683.628 915.425,683.628 915.984,683.628 916.544,683.628 917.103,683.628 917.662,683.628 918.221,683.628 918.781,683.628 919.34,683.628 919.899,683.628 920.458,683.628 921.018,683.628 921.577,683.628 922.136,683.628 922.695,683.628 923.255,683.628 923.814,683.628 924.373,683.628 924.932,683.628 925.492,683.628 926.051,683.628 926.61,683.628 927.169,683.628 927.729,683.628 928.288,683.628 928.847,683.628 929.406,683.628 929.966,683.628 930.525,683.628 931.084,683.628 931.644,683.628 932.203,683.628 932.762,683.628 933.321,683.628 933.881,683.628 934.44,683.628 934.999,683.628 935.558,683.628 936.118,683.628 936.677,683.628 937.236,683.628 937.795,683.628 938.355,683.628 938.914,683.628 939.473,683.628 940.032,683.628 940.592,683.628 941.151,683.628 941.71,683.628 942.269,683.628 942.829,683.628 943.388,683.628 943.947,683.628 944.506,683.628 945.066,683.628 945.625,683.628 946.184,683.628 946.743,683.628 947.303,683.628 947.862,683.628 948.421,683.628 948.98,683.628 949.54,683.628 950.099,683.628 950.658,683.628 951.217,683.628 951.777,683.628 952.336,683.628 952.895,683.628 953.454,683.628 954.014,683.628 954.573,683.628 955.132,683.628 955.691,683.628 956.251,683.628 956.81,683.628 957.369,683.628 957.928,683.628 958.488,683.628 959.047,683.628 959.606,683.628 960.165,683.628 960.725,683.628 961.284,683.628 961.843,683.628 962.402,683.628 962.962,683.628 963.521,683.628 964.08,683.628 964.639,683.628 965.199,683.628 965.758,683.628 966.317,683.628 966.876,683.628 967.436,683.628 967.995,683.628 968.554,683.628 969.113,683.628 969.673,683.628 970.232,683.628 970.791,683.628 971.35,683.628 971.91,683.628 972.469,683.628 973.028,683.628 973.587,683.628 974.147,683.628 974.706,683.628 975.265,683.628 975.824,683.628 976.384,683.628 976.943,683.628 977.502,683.628 978.061,683.628 978.621,683.628 979.18,683.628 979.739,683.628 980.298,683.628 980.858,683.628 981.417,683.628 981.976,683.628 982.535,683.628 983.095,683.628 983.654,683.628 984.213,683.628 984.772,683.628 985.332,683.628 985.891,683.628 986.45,683.628 987.009,683.628 987.569,683.628 988.128,683.628 988.687,683.628 989.246,683.628 989.806,683.628 990.365,683.628 990.924,683.628 991.483,683.628 992.043,683.628 992.602,683.628 993.161,683.628 993.72,683.628 994.28,683.628 994.839,683.628 995.398,683.628 995.957,683.628 996.517,683.628 997.076,683.628 997.635,683.628 998.194,683.628 998.754,683.628 999.313,683.628 999.872,683.628 1000.43,683.628 1000.99,683.628 1001.55,683.628 1002.11,683.628 1002.67,683.628 1003.23,683.628 1003.79,683.628 1004.35,683.628 1004.91,683.628 1005.46,683.628 1006.02,683.628 1006.58,683.628 1007.14,683.628 1007.7,683.628 1008.26,683.628 1008.82,683.628 1009.38,683.628 1009.94,683.628 1010.5,683.628 1011.06,683.628 1011.62,683.628 1012.18,683.628 1012.73,683.628 1013.29,683.628 1013.85,683.628 1014.41,683.628 1014.97,683.628 1015.53,683.628 1016.09,683.628 1016.65,683.628 1017.21,683.628 1017.77,683.628 1018.33,683.628 1018.89,683.628 1019.45,683.628 1020.01,683.628 1020.56,683.628 1021.12,683.628 1021.68,683.628 1022.24,683.628 1022.8,683.628 1023.36,683.628 1023.92,683.628 1024.48,683.628 1025.04,683.628 1025.6,683.628 1026.16,683.628 1026.72,683.628 1027.28,683.628 1027.83,683.628 1028.39,683.628 1028.95,683.628 1029.51,683.628 1030.07,683.628 1030.63,683.628 1031.19,683.628 1031.75,683.628 1032.31,683.628 1032.87,683.628 1033.43,683.628 1033.99,683.628 1034.55,683.628 1035.1,683.628 1035.66,683.628 1036.22,683.628 1036.78,683.628 1037.34,683.628 1037.9,683.628 1038.46,683.628 1039.02,683.628 1039.58,683.628 1040.14,683.628 1040.7,683.628 1041.26,683.628 1041.82,683.628 1042.38,683.628 1042.93,683.628 1043.49,683.628 1044.05,683.628 1044.61,683.628 1045.17,683.628 1045.73,683.628 1046.29,683.628 1046.85,683.628 1047.41,683.628 1047.97,683.628 1048.53,683.628 1049.09,683.628 1049.65,683.628 1050.2,683.628 1050.76,683.628 1051.32,683.628 1051.88,683.628 1052.44,683.628 1053,683.628 1053.56,683.628 1054.12,683.628 1054.68,683.628 1055.24,683.628 1055.8,683.628 1056.36,683.628 1056.92,683.628 1057.48,683.628 1058.03,683.628 1058.59,683.628 1059.15,683.628 1059.71,683.628 1060.27,683.628 1060.83,683.628 1061.39,683.628 1061.95,683.628 1062.51,683.628 1063.07,683.628 1063.63,683.628 1064.19,683.628 1064.75,683.628 1065.3,683.628 1065.86,683.628 1066.42,683.628 1066.98,683.628 1067.54,683.628 1068.1,683.628 1068.66,683.628 1069.22,683.628 1069.78,683.628 1070.34,683.628 1070.9,683.628 1071.46,683.628 1072.02,683.628 1072.57,683.628 1073.13,683.628 1073.69,683.628 1074.25,683.628 1074.81,683.628 1075.37,683.628 1075.93,683.628 1076.49,683.628 1077.05,683.628 1077.61,683.628 1078.17,683.628 1078.73,683.628 1079.29,683.628 1079.85,683.628 1080.4,683.628 1080.96,683.628 1081.52,683.628 1082.08,683.628 1082.64,683.628 1083.2,683.628 1083.76,683.628 1084.32,683.628 1084.88,683.628 1085.44,683.628 1086,683.628 1086.56,683.628 1087.12,683.628 1087.67,683.628 1088.23,683.628 1088.79,683.628 1089.35,683.628 1089.91,683.628 1090.47,683.628 1091.03,683.628 1091.59,683.628 1092.15,683.628 1092.71,683.628 1093.27,683.628 1093.83,683.628 1094.39,683.628 1094.94,683.628 1095.5,683.628 1096.06,683.628 1096.62,683.628 1097.18,683.628 1097.74,683.628 1098.3,683.628 1098.86,683.628 1099.42,683.628 1099.98,683.628 1100.54,683.628 1101.1,683.628 1101.66,683.628 1102.22,683.628 1102.77,683.628 1103.33,683.628 1103.89,683.628 1104.45,683.628 1105.01,683.628 1105.57,683.628 1106.13,683.628 1106.69,683.628 1107.25,683.628 1107.81,683.628 1108.37,683.628 1108.93,683.628 1109.49,683.628 1110.04,683.628 1110.6,683.628 1111.16,683.628 1111.72,683.628 1112.28,683.628 1112.84,683.628 1113.4,683.628 1113.96,683.628 1114.52,683.628 1115.08,683.628 1115.64,683.628 1116.2,683.628 1116.76,683.628 1117.31,683.628 1117.87,683.628 1118.43,683.628 1118.99,683.628 1119.55,683.628 1120.11,683.628 1120.67,683.628 1121.23,683.628 1121.79,683.628 1122.35,683.628 1122.91,683.628 1123.47,683.628 1124.03,683.628 1124.59,683.628 1125.14,683.628 1125.7,683.628 1126.26,683.628 1126.82,683.628 1127.38,683.628 1127.94,683.628 1128.5,683.628 1129.06,683.628 1129.62,683.628 1130.18,683.628 1130.74,683.628 1131.3,683.628 1131.86,683.628 1132.41,683.628 1132.97,683.628 1133.53,683.628 1134.09,683.628 1134.65,683.628 1135.21,683.628 1135.77,683.628 1136.33,683.628 1136.89,683.628 1137.45,683.628 1138.01,683.628 1138.57,683.628 1139.13,683.628 1139.68,683.628 1140.24,683.628 1140.8,683.628 1141.36,683.628 1141.92,683.628 1142.48,683.628 1143.04,683.628 1143.6,683.628 1144.16,683.628 1144.72,683.628 1145.28,683.628 1145.84,683.628 1146.4,683.628 1146.96,683.628 1147.51,683.628 1148.07,683.628 1148.63,683.628 1149.19,683.628 1149.75,683.628 1150.31,683.628 1150.87,683.628 1151.43,683.628 1151.99,683.628 1152.55,683.628 1153.11,683.628 1153.67,683.628 1154.23,683.628 1154.78,683.628 1155.34,683.628 1155.9,683.628 1156.46,683.628 1157.02,683.628 1157.58,683.628 1158.14,683.628 1158.7,683.628 1159.26,683.628 1159.82,683.628 1160.38,683.628 1160.94,683.628 1161.5,683.628 1162.05,683.628 1162.61,683.628 1163.17,683.628 1163.73,683.628 1164.29,683.628 1164.85,683.628 1165.41,683.628 1165.97,683.628 1166.53,683.628 1167.09,683.628 1167.65,683.628 1168.21,683.628 1168.77,683.628 1169.33,683.628 1169.88,683.628 1170.44,683.628 1171,683.628 1171.56,683.628 1172.12,683.628 1172.68,683.628 1173.24,683.628 1173.8,683.628 1174.36,683.628 1174.92,683.628 1175.48,683.628 1176.04,683.628 1176.6,683.628 1177.15,683.628 1177.71,683.628 1178.27,683.628 1178.83,683.628 1179.39,683.628 1179.95,683.628 1180.51,683.628 1181.07,683.628 1181.63,683.628 1182.19,683.628 1182.75,683.628 1183.31,683.628 1183.87,683.628 1184.43,683.628 1184.98,683.628 1185.54,683.628 1186.1,683.628 1186.66,683.628 1187.22,683.628 1187.78,683.628 1188.34,683.628 1188.9,683.628 1189.46,683.628 1190.02,683.628 1190.58,683.628 1191.14,683.628 1191.7,683.628 1192.25,683.628 1192.81,683.628 1193.37,683.628 1193.93,683.628 1194.49,683.628 1195.05,683.628 1195.61,683.628 1196.17,683.628 1196.73,683.628 1197.29,683.628 1197.85,683.628 1198.41,683.628 1198.97,683.628 1199.52,683.628 1200.08,683.628 1200.64,683.628 1201.2,683.628 1201.76,683.628 1202.32,683.628 1202.88,683.628 1203.44,683.628 1204,683.628 1204.56,683.628 1205.12,683.628 1205.68,683.628 1206.24,683.628 1206.8,683.628 1207.35,683.628 1207.91,683.628 1208.47,683.628 1209.03,683.628 1209.59,683.628 1210.15,683.628 1210.71,683.628 1211.27,683.628 1211.83,683.628 1212.39,683.628 1212.95,683.628 1213.51,683.628 1214.07,683.628 1214.62,683.628 1215.18,683.628 1215.74,683.628 1216.3,683.628 1216.86,683.628 1217.42,683.628 1217.98,683.628 1218.54,683.628 1219.1,683.628 1219.66,683.628 1220.22,683.628 1220.78,683.628 1221.34,683.628 1221.89,683.628 1222.45,683.628 1223.01,683.628 1223.57,683.628 1224.13,683.628 1224.69,683.628 1225.25,683.628 1225.81,683.628 1226.37,683.628 1226.93,683.628 1227.49,683.628 1228.05,683.628 1228.61,683.628 1229.17,683.628 1229.72,683.628 1230.28,683.628 1230.84,683.628 1231.4,683.628 1231.96,683.628 1232.52,683.628 1233.08,683.628 1233.64,683.628 1234.2,683.628 1234.76,683.628 1235.32,683.628 1235.88,683.628 1236.44,683.628 1236.99,683.628 1237.55,683.628 1238.11,683.628 1238.67,683.628 1239.23,683.628 1239.79,683.628 1240.35,683.628 1240.91,683.628 1241.47,683.628 1242.03,683.628 1242.59,683.628 1243.15,683.628 1243.71,683.628 1244.26,683.628 1244.82,683.628 1245.38,683.628 1245.94,683.628 1246.5,683.628 1247.06,683.628 1247.62,683.628 1248.18,683.628 1248.74,683.628 1249.3,683.628 1249.86,683.628 1250.42,683.628 1250.98,683.628 1251.54,683.628 1252.09,683.628 1252.65,683.628 1253.21,683.628 1253.77,683.628 1254.33,683.628 1254.89,683.628 1255.45,683.628 1256.01,683.628 1256.57,683.628 1257.13,683.628 1257.69,683.628 1258.25,683.628 1258.81,683.628 1259.36,683.628 1259.92,683.628 1260.48,683.628 1261.04,683.628 1261.6,683.628 1262.16,683.628 1262.72,683.628 1263.28,683.628 1263.84,683.628 1264.4,683.628 1264.96,683.628 1265.52,683.628 1266.08,683.628 1266.63,683.628 1267.19,683.628 1267.75,683.628 1268.31,683.628 1268.87,683.628 1269.43,683.628 1269.99,683.628 1270.55,683.628 1271.11,683.628 1271.67,683.628 1272.23,683.628 1272.79,683.628 1273.35,683.628 1273.91,683.628 1274.46,683.628 1275.02,683.628 1275.58,683.628 1276.14,683.628 1276.7,683.628 1277.26,683.628 1277.82,683.628 1278.38,683.628 1278.94,683.628 1279.5,683.628 1280.06,683.628 1280.62,683.628 1281.18,683.628 1281.73,683.628 1282.29,683.628 1282.85,683.628 1283.41,683.628 1283.97,683.628 1284.53,683.628 1285.09,683.628 1285.65,683.628 1286.21,683.628 1286.77,683.628 1287.33,683.628 1287.89,683.628 1288.45,683.628 1289,683.628 1289.56,683.628 1290.12,683.628 1290.68,683.628 1291.24,683.628 1291.8,683.628 1292.36,683.628 1292.92,683.628 1293.48,683.628 1294.04,683.628 1294.6,683.628 1295.16,683.628 1295.72,683.628 1296.28,683.628 1296.83,683.628 1297.39,683.628 1297.95,683.628 1298.51,683.628 1299.07,683.628 1299.63,683.628 1300.19,683.628 1300.75,683.628 1301.31,683.628 1301.87,683.628 1302.43,683.628 1302.99,683.628 1303.55,683.628 1304.1,683.628 1304.66,683.628 1305.22,683.628 1305.78,683.628 1306.34,683.628 1306.9,683.628 1307.46,683.628 1308.02,683.628 1308.58,683.628 1309.14,683.628 1309.7,683.628 1310.26,683.628 1310.82,683.628 1311.38,683.628 1311.93,683.628 1312.49,683.628 1313.05,683.628 1313.61,683.628 1314.17,683.628 1314.73,683.628 1315.29,683.628 1315.85,683.628 1316.41,683.628 1316.97,683.628 1317.53,683.628 1318.09,683.628 1318.65,683.628 1319.2,683.628 1319.76,683.628 1320.32,683.628 1320.88,683.628 1321.44,683.628 1322,683.628 1322.56,683.628 1323.12,683.628 1323.68,683.628 1324.24,683.628 1324.8,683.628 1325.36,683.628 1325.92,683.628 1326.47,683.628 1327.03,683.628 1327.59,683.628 1328.15,683.628 1328.71,683.628 1329.27,683.628 1329.83,683.628 1330.39,683.628 1330.95,683.628 1331.51,683.628 1332.07,683.628 1332.63,683.628 1333.19,683.628 1333.75,683.628 1334.3,683.628 1334.86,683.628 1335.42,683.628 1335.98,683.628 1336.54,683.628 1337.1,683.628 1337.66,683.628 1338.22,683.628 1338.78,683.628 1339.34,683.628 1339.9,683.628 1340.46,683.628 1341.02,683.628 1341.57,683.628 1342.13,683.628 1342.69,683.628 1343.25,683.628 1343.81,683.628 1344.37,683.628 1344.93,683.628 1345.49,683.628 1346.05,683.628 1346.61,683.628 1347.17,683.628 1347.73,683.628 1348.29,683.628 1348.84,683.628 1349.4,683.628 1349.96,683.628 1350.52,683.628 1351.08,683.628 1351.64,683.628 1352.2,683.628 1352.76,683.628 1353.32,683.628 1353.88,683.628 1354.44,683.628 1355,683.628 1355.56,683.628 1356.12,683.628 1356.67,683.628 1357.23,683.628 1357.79,683.628 1358.35,683.628 1358.91,683.628 1359.47,683.628 1360.03,683.628 1360.59,683.628 1361.15,683.628 1361.71,683.628 1362.27,683.628 1362.83,683.628 1363.39,683.628 1363.94,683.628 1364.5,683.628 1365.06,683.628 1365.62,683.628 1366.18,683.628 1366.74,683.628 1367.3,683.628 1367.86,683.628 1368.42,683.628 1368.98,683.628 1369.54,683.628 1370.1,683.628 1370.66,683.628 1371.21,683.628 1371.77,683.628 1372.33,683.628 1372.89,683.628 1373.45,683.628 1374.01,683.628 1374.57,683.628 1375.13,683.628 1375.69,683.628 1376.25,683.628 1376.81,683.628 1377.37,683.628 1377.93,683.628 1378.49,683.628 1379.04,683.628 1379.6,683.628 1380.16,683.628 1380.72,683.628 1381.28,683.628 1381.84,683.628 1382.4,683.628 1382.96,683.628 1383.52,683.628 1384.08,683.628 1384.64,683.628 1385.2,683.628 1385.76,683.628 1386.31,683.628 1386.87,683.628 1387.43,683.628 1387.99,683.628 1388.55,683.628 1389.11,683.628 1389.67,683.628 1390.23,683.628 1390.79,683.628 1391.35,683.628 1391.91,683.628 1392.47,683.628 1393.03,683.628 1393.58,683.628 1394.14,683.628 1394.7,683.628 1395.26,683.628 1395.82,683.628 1396.38,683.628 1396.94,683.628 1397.5,683.628 1398.06,683.628 1398.62,683.628 1399.18,683.628 1399.74,683.628 1400.3,683.628 1400.86,683.628 1401.41,683.628 1401.97,683.628 1402.53,683.628 1403.09,683.628 1403.65,683.628 1404.21,683.628 1404.77,683.628 1405.33,683.628 1405.89,683.628 1406.45,683.628 1407.01,683.628 1407.57,683.628 1408.13,683.628 1408.68,683.628 1409.24,683.628 1409.8,683.628 1410.36,683.628 1410.92,683.628 1411.48,683.628 1412.04,683.628 1412.6,683.628 1413.16,683.628 1413.72,683.628 1414.28,683.628 1414.84,683.628 1415.4,683.628 1415.95,683.628 1416.51,683.628 1417.07,683.628 1417.63,683.628 1418.19,683.628 1418.75,683.628 1419.31,683.628 1419.87,683.628 1420.43,683.628 1420.99,683.628 1421.55,683.628 1422.11,683.628 1422.67,683.628 1423.23,683.628 1423.78,683.628 1424.34,683.628 1424.9,683.628 1425.46,683.628 1426.02,683.628 1426.58,683.628 1427.14,683.628 1427.7,683.628 1428.26,683.628 1428.82,683.628 1429.38,683.628 1429.94,683.628 1430.5,683.628 1431.05,683.628 1431.61,683.628 1432.17,683.628 1432.73,683.628 1433.29,683.628 1433.85,683.628 1434.41,683.628 1434.97,683.628 1435.53,683.628 1436.09,683.628 1436.65,683.628 1437.21,683.628 1437.77,683.628 1438.33,683.628 1438.88,683.628 1439.44,683.628 1440,683.628 1440.56,683.628 1441.12,683.628 1441.68,683.628 1442.24,683.628 1442.8,683.628 1443.36,683.628 1443.92,683.628 1444.48,683.628 1445.04,683.628 1445.6,683.628 1446.15,683.628 1446.71,683.628 1447.27,683.628 1447.83,683.628 1448.39,683.628 1448.95,683.628 1449.51,683.628 1450.07,683.628 1450.63,683.628 1451.19,683.628 1451.75,683.628 1452.31,683.628 1452.87,683.628 1453.42,683.628 1453.98,683.628 1454.54,683.628 1455.1,683.628 1455.66,683.628 1456.22,683.628 1456.78,683.628 1457.34,683.628 1457.9,683.628 1458.46,683.628 1459.02,683.628 1459.58,683.628 1460.14,683.628 1460.7,683.628 1461.25,683.628 1461.81,683.628 1462.37,683.628 1462.93,683.628 1463.49,683.628 1464.05,683.628 1464.61,683.628 1465.17,683.628 1465.73,683.628 1466.29,683.628 1466.85,683.628 1467.41,683.628 1467.97,683.628 1468.52,683.628 1469.08,683.628 1469.64,683.628 1470.2,683.628 1470.76,683.628 1471.32,683.628 1471.88,683.628 1472.44,683.628 1473,683.628 1473.56,683.628 1474.12,683.628 1474.68,683.628 1475.24,683.628 1475.79,683.628 1476.35,683.628 1476.91,683.628 1477.47,683.628 1478.03,683.628 1478.59,683.628 1479.15,683.628 1479.71,683.628 1480.27,683.628 1480.83,683.628 1481.39,683.628 1481.95,683.628 1482.51,683.628 1483.07,683.628 1483.62,683.628 1484.18,683.628 1484.74,683.628 1485.3,683.628 1485.86,683.628 1486.42,683.628 1486.98,683.628 1487.54,683.628 1488.1,683.628 1488.66,683.628 1489.22,683.628 1489.78,683.628 1490.34,683.628 1490.89,683.628 1491.45,683.628 1492.01,683.628 1492.57,683.628 1493.13,683.628 1493.69,683.628 1494.25,683.628 1494.81,683.628 1495.37,683.628 1495.93,683.628 1496.49,683.628 1497.05,683.628 1497.61,683.628 1498.16,683.628 1498.72,683.628 1499.28,683.628 1499.84,683.628 1500.4,683.628 1500.96,683.628 1501.52,683.628 1502.08,683.628 1502.64,683.628 1503.2,683.628 1503.76,683.628 1504.32,683.628 1504.88,683.628 1505.44,683.628 1505.99,683.628 1506.55,683.628 1507.11,683.628 1507.67,683.628 1508.23,683.628 1508.79,683.628 1509.35,683.628 1509.91,683.628 1510.47,683.628 1511.03,683.628 1511.59,683.628 1512.15,683.628 1512.71,683.628 1513.26,683.628 1513.82,683.628 1514.38,683.628 1514.94,683.628 1515.5,683.628 1516.06,683.628 1516.62,683.628 1517.18,683.628 1517.74,683.628 1518.3,683.628 1518.86,683.628 1519.42,683.628 1519.98,683.628 1520.53,683.628 1521.09,683.628 1521.65,683.628 1522.21,683.628 1522.77,683.628 1523.33,683.628 1523.89,683.628 1524.45,683.628 1525.01,683.628 1525.57,683.628 1526.13,683.628 1526.69,683.628 1527.25,683.628 1527.81,683.628 1528.36,683.628 1528.92,683.628 1529.48,683.628 1530.04,683.628 1530.6,683.628 1531.16,683.628 1531.72,683.628 1532.28,683.628 1532.84,683.628 1533.4,683.628 1533.96,683.628 1534.52,683.628 1535.08,683.628 1535.63,683.628 1536.19,683.628 1536.75,683.628 1537.31,683.628 1537.87,683.628 1538.43,683.628 1538.99,683.628 1539.55,683.628 1540.11,683.628 1540.67,683.628 1541.23,683.628 1541.79,683.628 1542.35,683.628 1542.9,683.628 1543.46,683.628 1544.02,683.628 1544.58,683.628 1545.14,683.628 1545.7,683.628 1546.26,683.628 1546.82,683.628 1547.38,683.628 1547.94,683.628 1548.5,683.628 1549.06,683.628 1549.62,683.628 1550.18,683.628 1550.73,683.628 1551.29,683.628 1551.85,683.628 1552.41,683.628 1552.97,683.628 1553.53,683.628 1554.09,683.628 1554.65,683.628 1555.21,683.628 1555.77,683.628 1556.33,683.628 1556.89,683.628 1557.45,683.628 1558,683.628 1558.56,683.628 1559.12,683.628 1559.68,683.628 1560.24,683.628 1560.8,683.628 1561.36,683.628 1561.92,683.628 1562.48,683.628 1563.04,683.628 1563.6,683.628 1564.16,683.628 1564.72,683.628 1565.28,683.628 1565.83,683.628 1566.39,683.628 1566.95,683.628 1567.51,683.628 1568.07,683.628 1568.63,683.628 1569.19,683.628 1569.75,683.628 1570.31,683.628 1570.87,683.628 1571.43,683.628 1571.99,683.628 1572.55,683.628 1573.1,683.628 1573.66,683.628 1574.22,683.628 1574.78,683.628 1575.34,683.628 1575.9,683.628 1576.46,683.628 1577.02,683.628 1577.58,683.628 1578.14,683.628 1578.7,683.628 1579.26,683.628 1579.82,683.628 1580.37,683.628 1580.93,683.628 1581.49,683.628 1582.05,683.628 1582.61,683.628 1583.17,683.628 1583.73,683.628 1584.29,683.628 1584.85,683.628 1585.41,683.628 1585.97,683.628 1586.53,683.628 1587.09,683.628 1587.65,683.628 1588.2,683.628 1588.76,683.628 1589.32,683.628 1589.88,683.628 1590.44,683.628 1591,683.628 1591.56,683.628 1592.12,683.628 1592.68,683.628 1593.24,683.628 1593.8,683.628 1594.36,683.628 1594.92,683.628 1595.47,683.628 1596.03,683.628 1596.59,683.628 1597.15,683.628 1597.71,683.628 1598.27,683.628 1598.83,683.628 1599.39,683.628 1599.95,683.628 1600.51,683.628 1601.07,683.628 1601.63,683.628 1602.19,683.628 1602.74,683.628 1603.3,683.628 1603.86,683.628 1604.42,683.628 1604.98,683.628 1605.54,683.628 1606.1,683.628 1606.66,683.628 1607.22,683.628 1607.78,683.628 1608.34,683.628 1608.9,683.628 1609.46,683.628 1610.02,683.628 1610.57,683.628 1611.13,683.628 1611.69,683.628 1612.25,683.628 1612.81,683.628 1613.37,683.628 1613.93,683.628 1614.49,683.628 1615.05,683.628 1615.61,683.628 1616.17,683.628 1616.73,683.628 1617.29,683.628 1617.84,683.628 1618.4,683.628 1618.96,683.628 1619.52,683.628 1620.08,683.628 1620.64,683.628 1621.2,683.628 1621.76,683.628 1622.32,683.628 1622.88,683.628 1623.44,683.628 1624,683.628 1624.56,683.628 1625.11,683.628 1625.67,683.628 1626.23,683.628 1626.79,683.628 1627.35,683.628 1627.91,683.628 1628.47,683.628 1629.03,683.628 1629.59,683.628 1630.15,683.628 1630.71,683.628 1631.27,683.628 1631.83,683.628 1632.39,683.628 1632.94,683.628 1633.5,683.628 1634.06,683.628 1634.62,683.628 1635.18,683.628 1635.74,683.628 1636.3,683.628 1636.86,683.628 1637.42,683.628 1637.98,683.628 1638.54,683.628 1639.1,683.628 1639.66,683.628 1640.21,683.628 1640.77,683.628 1641.33,683.628 1641.89,683.628 1642.45,683.628 1643.01,683.628 1643.57,683.628 1644.13,683.628 1644.69,683.628 1645.25,683.628 1645.81,683.628 1646.37,683.628 1646.93,683.628 1647.48,683.628 1648.04,683.628 1648.6,683.628 1649.16,683.628 1649.72,683.628 1650.28,683.628 1650.84,683.628 1651.4,683.628 1651.96,683.628 1652.52,683.628 1653.08,683.628 1653.64,683.628 1654.2,683.628 1654.76,683.628 1655.31,683.628 1655.87,683.628 1656.43,683.628 1656.99,683.628 1657.55,683.628 1658.11,683.628 1658.67,683.628 1659.23,683.628 1659.79,683.628 1660.35,683.628 1660.91,683.628 1661.47,683.628 1662.03,683.628 1662.58,683.628 1663.14,683.628 1663.7,683.628 1664.26,683.628 1664.82,683.628 1665.38,683.628 1665.94,683.628 1666.5,683.628 1667.06,683.628 1667.62,683.628 1668.18,683.628 1668.74,683.628 1669.3,683.628 1669.85,683.628 1670.41,683.628 1670.97,683.628 1671.53,683.628 1672.09,683.628 1672.65,683.628 1673.21,683.628 1673.77,683.628 1674.33,683.628 1674.89,683.628 1675.45,683.628 1676.01,683.628 1676.57,683.628 1677.13,683.628 1677.68,683.628 1678.24,683.628 1678.8,683.628 1679.36,683.628 1679.92,683.628 1680.48,683.628 1681.04,683.628 1681.6,683.628 1682.16,683.628 1682.72,683.628 1683.28,683.628 1683.84,683.628 1684.4,683.628 1684.95,683.628 1685.51,683.628 1686.07,683.628 1686.63,683.628 1687.19,683.628 1687.75,683.628 1688.31,683.628 1688.87,683.628 1689.43,683.628 1689.99,683.628 1690.55,683.628 1691.11,683.628 1691.67,683.628 1692.23,683.628 1692.78,683.628 1693.34,683.628 1693.9,683.628 1694.46,683.628 1695.02,683.628 1695.58,683.628 1696.14,683.628 1696.7,683.628 1697.26,683.628 1697.82,683.628 1698.38,683.628 1698.94,683.628 1699.5,683.628 1700.05,683.628 1700.61,683.628 1701.17,683.628 1701.73,683.628 1702.29,683.628 1702.85,683.628 1703.41,683.628 1703.97,683.628 1704.53,683.628 1705.09,683.628 1705.65,683.628 1706.21,683.628 1706.77,683.628 1707.32,683.628 1707.88,683.628 1708.44,683.628 1709,683.628 1709.56,683.628 1710.12,683.628 1710.68,683.628 1711.24,683.628 1711.8,683.628 1712.36,683.628 1712.92,683.628 1713.48,683.628 1714.04,683.628 1714.6,683.628 1715.15,683.628 1715.71,683.628 1716.27,683.628 1716.83,683.628 1717.39,683.628 1717.95,683.628 1718.51,683.628 1719.07,683.628 1719.63,683.628 1720.19,683.628 1720.75,683.628 1721.31,683.628 1721.87,683.628 1722.42,683.628 1722.98,683.628 1723.54,683.628 1724.1,683.628 1724.66,683.628 1725.22,683.628 1725.78,683.628 1726.34,683.628 1726.9,683.628 1727.46,683.628 1728.02,683.628 1728.58,683.628 1729.14,683.628 1729.69,683.628 1730.25,683.628 1730.81,683.628 1731.37,683.628 1731.93,683.628 1732.49,683.628 1733.05,683.628 1733.61,683.628 1734.17,683.628 1734.73,683.628 1735.29,683.628 1735.85,683.628 1736.41,683.628 1736.97,683.628 1737.52,683.628 1738.08,683.628 1738.64,683.628 1739.2,683.628 1739.76,683.628 1740.32,683.628 1740.88,683.628 1741.44,683.628 1742,683.628 1742.56,683.628 1743.12,683.628 1743.68,683.628 1744.24,683.628 1744.79,683.628 1745.35,683.628 1745.91,683.628 1746.47,683.628 1747.03,683.628 1747.59,683.628 1748.15,683.628 1748.71,683.628 1749.27,683.628 1749.83,683.628 1750.39,683.628 1750.95,683.628 1751.51,683.628 1752.06,683.628 1752.62,683.628 1753.18,683.628 1753.74,683.628 1754.3,683.628 1754.86,683.628 1755.42,683.628 1755.98,683.628 1756.54,683.628 1757.1,683.628 1757.66,683.628 1758.22,683.628 1758.78,683.628 1759.34,683.628 1759.89,683.628 1760.45,683.628 1761.01,683.628 1761.57,683.628 1762.13,683.628 1762.69,683.628 1763.25,683.628 1763.81,683.628 1764.37,683.628 1764.93,683.628 1765.49,683.628 1766.05,683.628 1766.61,683.628 1767.16,683.628 1767.72,683.628 1768.28,683.628 1768.84,683.628 1769.4,683.628 1769.96,683.628 1770.52,683.628 1771.08,683.628 1771.64,683.628 1772.2,683.628 1772.76,683.628 1773.32,683.628 1773.88,683.628 1774.43,683.628 1774.99,683.628 1775.55,683.628 1776.11,683.628 1776.67,683.628 1777.23,683.628 1777.79,683.628 1778.35,683.628 1778.91,683.628 1779.47,683.628 1780.03,683.628 1780.59,683.628 1781.15,683.628 1781.71,683.628 1782.26,683.628 1782.82,683.628 1783.38,683.628 1783.94,683.628 1784.5,683.628 1785.06,683.628 1785.62,683.628 1786.18,683.628 1786.74,683.628 1787.3,683.628 1787.86,683.628 1788.42,683.628 1788.98,683.628 1789.53,683.628 1790.09,683.628 1790.65,683.628 1791.21,683.628 1791.77,683.628 1792.33,683.628 1792.89,683.628 1793.45,683.628 1794.01,683.628 1794.57,683.628 1795.13,683.628 1795.69,683.628 1796.25,683.628 1796.8,683.628 1797.36,683.628 1797.92,683.628 1798.48,683.628 1799.04,683.628 1799.6,683.628 1800.16,683.628 1800.72,683.628 1801.28,683.628 1801.84,683.628 1802.4,683.628 1802.96,683.628 1803.52,683.628 1804.08,683.628 1804.63,683.628 1805.19,683.628 1805.75,683.628 1806.31,683.628 1806.87,683.628 1807.43,683.628 1807.99,683.628 1808.55,683.628 1809.11,683.628 1809.67,683.628 1810.23,683.628 1810.79,683.628 1811.35,683.628 1811.9,683.628 1812.46,683.628 1813.02,683.628 1813.58,683.628 1814.14,683.628 1814.7,683.628 1815.26,683.628 1815.82,683.628 1816.38,683.628 1816.94,683.628 1817.5,683.628 1818.06,683.628 1818.62,683.628 1819.18,683.628 1819.73,683.628 1820.29,683.628 1820.85,683.628 1821.41,683.628 1821.97,683.628 1822.53,683.628 1823.09,683.628 1823.65,683.628 1824.21,683.628 1824.77,683.628 1825.33,683.628 1825.89,683.628 1826.45,683.628 1827,683.628 1827.56,683.628 1828.12,683.628 1828.68,683.628 1829.24,683.628 1829.8,683.628 1830.36,683.628 1830.92,683.628 1831.48,683.628 1832.04,683.628 1832.6,683.628 1833.16,683.628 1833.72,683.628 1834.27,683.628 1834.83,683.628 1835.39,683.628 1835.95,683.628 1836.51,683.628 1837.07,683.628 1837.63,683.628 1838.19,683.628 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.030015957644764 ± 0.021282995639687018\nProjected Energy: -4.015301941822934 ± (0.007298146212933787, 0.007164408897129881)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.488975</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4097e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4047e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.358e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.333e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.755e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.215e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V} <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix nrows. Used in the AllToAll communication strategy.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T} <: AbstractVector{AbstractVector{T}}\n\nMultiple vectors stored in a single buffer with MPI communication support. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
