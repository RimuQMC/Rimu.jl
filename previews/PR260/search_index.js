var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip440\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip441\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip440)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip442\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.99 2211.02,1002.99 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.128 2211.02,745.128 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.27 2211.02,487.27 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.413 2211.02,229.413 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.99 423.181,1002.99 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.128 423.181,745.128 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.27 423.181,487.27 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.413 423.181,229.413 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.54 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.88 Q344.395 1252.13 347.45 1247.54 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M290.043 1016.33 L306.363 1016.33 L306.363 1020.27 L284.418 1020.27 L284.418 1016.33 Q287.08 1013.58 291.664 1008.95 Q296.27 1004.29 297.451 1002.95 Q299.696 1000.43 300.576 998.691 Q301.478 996.932 301.478 995.242 Q301.478 992.488 299.534 990.752 Q297.613 989.016 294.511 989.016 Q292.312 989.016 289.858 989.779 Q287.427 990.543 284.65 992.094 L284.65 987.372 Q287.474 986.238 289.927 985.659 Q292.381 985.08 294.418 985.08 Q299.789 985.08 302.983 987.766 Q306.177 990.451 306.177 994.941 Q306.177 997.071 305.367 998.992 Q304.58 1000.89 302.474 1003.48 Q301.895 1004.15 298.793 1007.37 Q295.691 1010.57 290.043 1016.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 985.705 L334.58 985.705 L334.58 989.64 L320.506 989.64 L320.506 998.113 Q321.524 997.765 322.543 997.603 Q323.562 997.418 324.58 997.418 Q330.367 997.418 333.747 1000.59 Q337.126 1003.76 337.126 1009.18 Q337.126 1014.76 333.654 1017.86 Q330.182 1020.94 323.862 1020.94 Q321.687 1020.94 319.418 1020.57 Q317.173 1020.2 314.765 1019.46 L314.765 1014.76 Q316.849 1015.89 319.071 1016.45 Q321.293 1017 323.77 1017 Q327.774 1017 330.112 1014.89 Q332.45 1012.79 332.45 1009.18 Q332.45 1005.57 330.112 1003.46 Q327.774 1001.35 323.77 1001.35 Q321.895 1001.35 320.02 1001.77 Q318.168 1002.19 316.224 1003.07 L316.224 985.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 988.784 Q352.728 988.784 350.899 992.349 Q349.094 995.89 349.094 1003.02 Q349.094 1010.13 350.899 1013.69 Q352.728 1017.23 356.339 1017.23 Q359.973 1017.23 361.779 1013.69 Q363.608 1010.13 363.608 1003.02 Q363.608 995.89 361.779 992.349 Q359.973 988.784 356.339 988.784 M356.339 985.08 Q362.149 985.08 365.205 989.687 Q368.284 994.27 368.284 1003.02 Q368.284 1011.75 365.205 1016.35 Q362.149 1020.94 356.339 1020.94 Q350.529 1020.94 347.45 1016.35 Q344.395 1011.75 344.395 1003.02 Q344.395 994.27 347.45 989.687 Q350.529 985.08 356.339 985.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M286.062 727.848 L304.418 727.848 L304.418 731.783 L290.344 731.783 L290.344 740.255 Q291.363 739.908 292.381 739.746 Q293.4 739.561 294.418 739.561 Q300.205 739.561 303.585 742.732 Q306.964 745.903 306.964 751.32 Q306.964 756.899 303.492 760 Q300.02 763.079 293.701 763.079 Q291.525 763.079 289.256 762.709 Q287.011 762.338 284.603 761.598 L284.603 756.899 Q286.687 758.033 288.909 758.588 Q291.131 759.144 293.608 759.144 Q297.613 759.144 299.951 757.037 Q302.288 754.931 302.288 751.32 Q302.288 747.709 299.951 745.602 Q297.613 743.496 293.608 743.496 Q291.733 743.496 289.858 743.913 Q288.006 744.329 286.062 745.209 L286.062 727.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 730.926 Q322.566 730.926 320.737 734.491 Q318.932 738.033 318.932 745.163 Q318.932 752.269 320.737 755.834 Q322.566 759.375 326.177 759.375 Q329.811 759.375 331.617 755.834 Q333.446 752.269 333.446 745.163 Q333.446 738.033 331.617 734.491 Q329.811 730.926 326.177 730.926 M326.177 727.223 Q331.987 727.223 335.043 731.829 Q338.122 736.413 338.122 745.163 Q338.122 753.889 335.043 758.496 Q331.987 763.079 326.177 763.079 Q320.367 763.079 317.288 758.496 Q314.233 753.889 314.233 745.163 Q314.233 736.413 317.288 731.829 Q320.367 727.223 326.177 727.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 730.926 Q352.728 730.926 350.899 734.491 Q349.094 738.033 349.094 745.163 Q349.094 752.269 350.899 755.834 Q352.728 759.375 356.339 759.375 Q359.973 759.375 361.779 755.834 Q363.608 752.269 363.608 745.163 Q363.608 738.033 361.779 734.491 Q359.973 730.926 356.339 730.926 M356.339 727.223 Q362.149 727.223 365.205 731.829 Q368.284 736.413 368.284 745.163 Q368.284 753.889 365.205 758.496 Q362.149 763.079 356.339 763.079 Q350.529 763.079 347.45 758.496 Q344.395 753.889 344.395 745.163 Q344.395 736.413 347.45 731.829 Q350.529 727.223 356.339 727.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M284.835 469.99 L307.057 469.99 L307.057 471.981 L294.511 504.55 L289.627 504.55 L301.432 473.925 L284.835 473.925 L284.835 469.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M316.224 469.99 L334.58 469.99 L334.58 473.925 L320.506 473.925 L320.506 482.398 Q321.524 482.05 322.543 481.888 Q323.562 481.703 324.58 481.703 Q330.367 481.703 333.747 484.874 Q337.126 488.046 337.126 493.462 Q337.126 499.041 333.654 502.143 Q330.182 505.222 323.862 505.222 Q321.687 505.222 319.418 504.851 Q317.173 504.481 314.765 503.74 L314.765 499.041 Q316.849 500.175 319.071 500.731 Q321.293 501.286 323.77 501.286 Q327.774 501.286 330.112 499.18 Q332.45 497.073 332.45 493.462 Q332.45 489.851 330.112 487.745 Q327.774 485.638 323.77 485.638 Q321.895 485.638 320.02 486.055 Q318.168 486.472 316.224 487.351 L316.224 469.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 473.069 Q352.728 473.069 350.899 476.634 Q349.094 480.175 349.094 487.305 Q349.094 494.411 350.899 497.976 Q352.728 501.518 356.339 501.518 Q359.973 501.518 361.779 497.976 Q363.608 494.411 363.608 487.305 Q363.608 480.175 361.779 476.634 Q359.973 473.069 356.339 473.069 M356.339 469.365 Q362.149 469.365 365.205 473.972 Q368.284 478.555 368.284 487.305 Q368.284 496.032 365.205 500.638 Q362.149 505.222 356.339 505.222 Q350.529 505.222 347.45 500.638 Q344.395 496.032 344.395 487.305 Q344.395 478.555 347.45 473.972 Q350.529 469.365 356.339 469.365 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M256.664 242.758 L264.303 242.758 L264.303 216.392 L255.992 218.059 L255.992 213.799 L264.256 212.133 L268.932 212.133 L268.932 242.758 L276.571 242.758 L276.571 246.693 L256.664 246.693 L256.664 242.758 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M296.015 215.211 Q292.404 215.211 290.576 218.776 Q288.77 222.318 288.77 229.447 Q288.77 236.554 290.576 240.119 Q292.404 243.66 296.015 243.66 Q299.65 243.66 301.455 240.119 Q303.284 236.554 303.284 229.447 Q303.284 222.318 301.455 218.776 Q299.65 215.211 296.015 215.211 M296.015 211.508 Q301.826 211.508 304.881 216.114 Q307.96 220.698 307.96 229.447 Q307.96 238.174 304.881 242.781 Q301.826 247.364 296.015 247.364 Q290.205 247.364 287.127 242.781 Q284.071 238.174 284.071 229.447 Q284.071 220.698 287.127 216.114 Q290.205 211.508 296.015 211.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M326.177 215.211 Q322.566 215.211 320.737 218.776 Q318.932 222.318 318.932 229.447 Q318.932 236.554 320.737 240.119 Q322.566 243.66 326.177 243.66 Q329.811 243.66 331.617 240.119 Q333.446 236.554 333.446 229.447 Q333.446 222.318 331.617 218.776 Q329.811 215.211 326.177 215.211 M326.177 211.508 Q331.987 211.508 335.043 216.114 Q338.122 220.698 338.122 229.447 Q338.122 238.174 335.043 242.781 Q331.987 247.364 326.177 247.364 Q320.367 247.364 317.288 242.781 Q314.233 238.174 314.233 229.447 Q314.233 220.698 317.288 216.114 Q320.367 211.508 326.177 211.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M356.339 215.211 Q352.728 215.211 350.899 218.776 Q349.094 222.318 349.094 229.447 Q349.094 236.554 350.899 240.119 Q352.728 243.66 356.339 243.66 Q359.973 243.66 361.779 240.119 Q363.608 236.554 363.608 229.447 Q363.608 222.318 361.779 218.776 Q359.973 215.211 356.339 215.211 M356.339 211.508 Q362.149 211.508 365.205 216.114 Q368.284 220.698 368.284 229.447 Q368.284 238.174 365.205 242.781 Q362.149 247.364 356.339 247.364 Q350.529 247.364 347.45 242.781 Q344.395 238.174 344.395 229.447 Q344.395 220.698 347.45 216.114 Q350.529 211.508 356.339 211.508 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip442)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.413 4017.76,229.413 \"/>\n<polyline clip-path=\"url(#clip442)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.79 458.259,1248.46 458.828,1248.07 459.396,1247.61 459.964,1246.08 460.533,1245.55 461.101,1244.92 461.669,1244.22 462.238,1243.43 462.806,1242.54 463.375,1241.57 463.943,1240.52 464.511,1239.36 465.08,1238.1 465.648,1235.7 466.216,1233.19 466.785,1231.66 467.353,1229.98 467.921,1227.14 468.49,1225.22 469.058,1223.16 469.626,1217.82 470.195,1215.4 470.763,1212.83 471.331,1209.06 471.9,1206.13 472.468,1203.06 473.036,1199.82 473.605,1196.33 474.173,1191.64 474.741,1187.8 475.31,1183.72 475.878,1178.41 476.446,1172.84 477.015,1167.99 477.583,1161.87 478.152,1154.48 478.72,1149.01 479.288,1143.29 479.857,1135.26 480.425,1127.07 480.993,1120.71 481.562,1113.11 482.13,1105.29 482.698,1098.4 483.267,1089.23 483.835,1080.87 484.403,1073.39 484.972,1064.68 485.54,1056.85 486.108,1048.86 486.677,1036.48 487.245,1026.17 487.813,1016.83 488.382,1007.35 488.95,997.587 489.518,985.891 490.087,977.253 490.655,966.277 491.224,957.454 491.792,946.479 492.36,934.434 492.929,924.499 493.497,910.319 494.065,899.453 494.634,889.53 495.202,880.692 495.77,870.61 496.339,860.569 496.907,850.486 497.475,839.267 498.044,829.212 498.612,818.153 499.18,807.094 499.749,797.246 500.317,786.391 500.885,776.448 501.454,767.743 502.022,758.885 502.59,749.111 503.159,737.265 503.727,728.623 504.295,719.984 504.864,711.454 505.432,699.848 506.001,691.201 506.569,679.744 507.137,670.511 507.706,660.126 508.274,649.958 508.842,641.985 509.411,634.194 509.979,625.224 510.547,617.484 511.116,608.812 511.684,600.207 512.252,591.669 512.821,577.183 513.389,568.373 513.957,561.642 514.526,554.079 515.094,546.588 515.662,537.172 516.231,531.044 516.799,522.026 517.367,515.314 517.936,510.681 518.504,502.046 519.072,496.665 519.641,490.212 520.209,485.046 520.778,476.707 521.346,471.684 521.914,466.755 522.483,460.823 523.051,456.295 523.619,449.747 524.188,442.134 524.756,437.835 525.324,432.508 525.893,426.427 526.461,420.391 527.029,414.41 527.598,408.772 528.166,403.328 528.734,400.077 529.303,393.897 529.871,386.871 530.439,384.232 531.008,379.534 531.576,376.016 532.144,372.361 532.713,370.113 533.281,366.639 533.85,366.279 534.418,361.607 534.986,359.32 535.555,355.936 536.123,352.64 536.691,350.715 537.26,348.66 537.828,345.375 538.396,344.477 538.965,342.383 539.533,340.335 540.101,334.151 540.67,332.237 541.238,328.335 541.806,326.79 542.375,325.151 542.943,321.629 543.511,318.917 544.08,316.697 544.648,314.304 545.216,313.157 545.785,309.806 546.353,309.665 546.921,308.518 547.49,307.477 548.058,305.134 548.627,302.671 549.195,300.694 549.763,300.928 550.332,298.905 550.9,296.793 551.468,293.849 552.037,291.001 552.605,288.972 553.173,289.238 553.742,287.577 554.31,285.86 554.878,285.304 555.447,284.524 556.015,281.982 556.583,279.392 557.152,281.012 557.72,282.459 558.288,279.678 558.857,278.239 559.425,276.783 559.993,274.284 560.562,274.982 561.13,274.58 561.698,274.14 562.267,273.531 562.835,272.961 563.404,271.474 563.972,268.93 564.54,269.565 565.109,269.472 565.677,268.895 566.245,270.685 566.814,270.069 567.382,267.304 567.95,266.845 568.519,265.208 569.087,264.921 569.655,264.43 570.224,263.152 570.792,262.73 571.36,262.5 571.929,260.077 572.497,259.876 573.065,259.845 573.634,259.68 574.202,260.449 574.77,260.014 575.339,255.585 575.907,256.477 576.476,254.386 577.044,253.284 577.612,252.453 578.181,251.536 578.749,250.733 579.317,249.746 579.886,250.962 580.454,251.102 581.022,250.16 581.591,248.219 582.159,248.53 582.727,247.518 583.296,246.7 583.864,247.004 584.432,248.049 585.001,246.32 585.569,246.549 586.137,245.765 586.706,247.173 587.274,246.225 587.842,246.277 588.411,244.515 588.979,244.554 589.547,244.702 590.116,243.986 590.684,244.088 591.253,246.512 591.821,247.836 592.389,245.709 592.958,244.692 593.526,243.965 594.094,243.119 594.663,243.439 595.231,245.627 595.799,245.596 596.368,245.508 596.936,245.282 597.504,249.279 598.073,247.876 598.641,247.791 599.209,248.717 599.778,248.624 600.346,249.295 600.914,248.068 601.483,246.895 602.051,246.631 602.619,245.468 603.188,245.267 603.756,245.982 604.325,245.662 604.893,245.28 605.461,244.904 606.03,243.55 606.598,242.658 607.166,242.696 607.735,244.511 608.303,242.303 608.871,241.014 609.44,243.233 610.008,237.977 610.576,240.517 611.145,239.519 611.713,237.517 612.281,236.684 612.85,236.178 613.418,236.426 613.986,235.743 614.555,236.222 615.123,234.539 615.691,231.839 616.26,234.308 616.828,234.719 617.396,236.185 617.965,236.41 618.533,232.669 619.102,233.375 619.67,233.838 620.238,233.106 620.807,233.715 621.375,232.239 621.943,232.721 622.512,233.138 623.08,234.759 623.648,234.267 624.217,235.618 624.785,237.244 625.353,236.342 625.922,236.449 626.49,237.391 627.058,239.648 627.627,239.502 628.195,238.702 628.763,236.693 629.332,236.992 629.9,238.217 630.468,238.224 631.037,237.399 631.605,238.757 632.173,238.776 632.742,236.708 633.31,237.74 633.879,237.715 634.447,236.691 635.015,237.89 635.584,235.953 636.152,237.14 636.72,236.074 637.289,235.129 637.857,237.444 638.425,238.505 638.994,238.375 639.562,238.425 640.13,238.551 640.699,237.405 641.267,236.439 641.835,236.62 642.404,235.585 642.972,236.708 643.54,233.851 644.109,234.823 644.677,234.924 645.245,236.192 645.814,237.093 646.382,237.124 646.951,239.161 647.519,238.944 648.087,237.845 648.656,236.767 649.224,234.914 649.792,231.676 650.361,231.084 650.929,232.461 651.497,231.693 652.066,231.905 652.634,232.248 653.202,233.523 653.771,232.671 654.339,231.97 654.907,232.424 655.476,234.56 656.044,236.792 656.612,236.422 657.181,236.326 657.749,237.742 658.317,234.615 658.886,233.554 659.454,236.961 660.022,235.981 660.591,235.862 661.159,237.054 661.728,237.757 662.296,237.455 662.864,237.435 663.433,236.476 664.001,237.509 664.569,237.454 665.138,239.544 665.706,237.413 666.274,236.96 666.843,237 667.411,236.705 667.979,236.826 668.548,236.568 669.116,237.562 669.684,237.075 670.253,238.01 670.821,236.807 671.389,235.45 671.958,236.058 672.526,235.821 673.094,235.564 673.663,235.457 674.231,235.683 674.799,234.725 675.368,234.705 675.936,234.696 676.505,235.726 677.073,234.335 677.641,234.368 678.21,234.268 678.778,234.023 679.346,236.011 679.915,236.7 680.483,235.213 681.051,234.103 681.62,233.15 682.188,232.212 682.756,229.265 683.325,230.693 683.893,229.97 684.461,229.266 685.03,228.646 685.598,228.87 686.166,230.393 686.735,231.8 687.303,231.693 687.871,228.772 688.44,225.042 689.008,225.735 689.577,226.361 690.145,228.199 690.713,229.909 691.282,230.333 691.85,230.445 692.418,228.43 692.987,228.809 693.555,230.475 694.123,228.698 694.692,229.083 695.26,229.262 695.828,229.652 696.397,227.797 696.965,227.107 697.533,227.422 698.102,228.915 698.67,229.206 699.238,227.555 699.807,229.042 700.375,230.304 700.943,231.518 701.512,230.695 702.08,230.091 702.648,229.444 703.217,230.743 703.785,231.051 704.354,228.137 704.922,228.743 705.49,229.01 706.059,231.228 706.627,229.455 707.195,230.727 707.764,228.858 708.332,226.989 708.9,227.619 709.469,229.103 710.037,229.373 710.605,227.626 711.174,228.116 711.742,228.438 712.31,227.617 712.879,227.254 713.447,229.866 714.015,231.265 714.584,232.635 715.152,231.767 715.72,231.984 716.289,230.139 716.857,233.627 717.425,232.722 717.994,232.147 718.562,233.456 719.131,230.507 719.699,231.868 720.267,232.232 720.836,235.432 721.404,236.574 721.972,236.625 722.541,235.402 723.109,234.156 723.677,237.329 724.246,235.172 724.814,236.244 725.382,232.966 725.951,231.751 726.519,230.972 727.087,233.327 727.656,232.343 728.224,231.549 728.792,232.895 729.361,232.13 729.929,233.023 730.497,233.185 731.066,233.059 731.634,233.172 732.203,233.426 732.771,233.498 733.339,233.413 733.908,232.342 734.476,233.332 735.044,232.327 735.613,233.355 736.181,231.439 736.749,229.468 737.318,230.751 737.886,230.085 738.454,230.644 739.023,232.762 739.591,234.07 740.159,233.879 740.728,234.881 741.296,233.553 741.864,234.626 742.433,234.508 743.001,235.389 743.569,235.363 744.138,232.992 744.706,233.974 745.274,232.663 745.843,230.547 746.411,231.839 746.98,232.016 747.548,232.215 748.116,233.41 748.685,232.497 749.253,230.439 749.821,230.599 750.39,229.775 750.958,228.947 751.526,230.042 752.095,230.215 752.663,228.351 753.231,226.419 753.8,226.901 754.368,229.363 754.936,230.675 755.505,229.751 756.073,233.152 756.641,233.159 757.21,234.078 757.778,232.982 758.346,232.001 758.915,232.853 759.483,232.736 760.052,229.654 760.62,228.758 761.188,228.924 761.757,231.211 762.325,233.462 762.893,232.424 763.462,233.449 764.03,233.349 764.598,232.086 765.167,231.068 765.735,231.154 766.303,230.454 766.872,230.596 767.44,229.669 768.008,228.599 768.577,227.617 769.145,229.929 769.713,229.042 770.282,231.363 770.85,234.708 771.418,234.633 771.987,236.663 772.555,236.334 773.123,234.109 773.692,233.085 774.26,230.823 774.829,231.636 775.397,230.529 775.965,232.681 776.534,232.692 777.102,233.796 777.67,234.602 778.239,235.435 778.807,236.227 779.375,235.954 779.944,236.644 780.512,233.2 781.08,233.854 781.649,232.749 782.217,231.408 782.785,231.422 783.354,232.403 783.922,229.407 784.49,227.352 785.059,226.507 785.627,226.849 786.195,229.291 786.764,229.43 787.332,229.536 787.9,229.69 788.469,228.072 789.037,230.391 789.606,231.553 790.174,232.49 790.742,234.518 791.311,234.208 791.879,233.915 792.447,233.774 793.016,233.708 793.584,233.635 794.152,231.376 794.721,231.464 795.289,231.376 795.857,232.328 796.426,231.435 796.994,229.345 797.562,230.61 798.131,232.625 798.699,231.628 799.267,229.495 799.836,231.633 800.404,230.397 800.972,230.357 801.541,231.419 802.109,232.315 802.678,233.161 803.246,233.901 803.814,232.581 804.383,234.607 804.951,233.173 805.519,231.825 806.088,231.877 806.656,231.745 807.224,229.622 807.793,228.525 808.361,227.836 808.929,228.079 809.498,227.454 810.066,228.658 810.634,229.822 811.203,229.903 811.771,229.933 812.339,229.788 812.908,228.753 813.476,228.933 814.044,229.914 814.613,231.933 815.181,231.908 815.749,232.788 816.318,232.733 816.886,231.394 817.455,231.31 818.023,233.199 818.591,232.777 819.16,229.582 819.728,230.61 820.296,227.472 820.865,225.635 821.433,226.029 822.001,225.345 822.57,226.761 823.138,223.677 823.706,225.17 824.275,228.633 824.843,227.839 825.411,232.124 825.98,232.007 826.548,230.987 827.116,231.105 827.685,233.152 828.253,232.064 828.821,232.97 829.39,233.874 829.958,232.608 830.526,232.467 831.095,233.244 831.663,231.773 832.232,229.369 832.8,228.279 833.368,226.235 833.937,228.644 834.505,228.604 835.073,229.665 835.642,228.672 836.21,228.944 836.778,229.198 837.347,228.396 837.915,226.534 838.483,226.812 839.052,227.069 839.62,225.237 840.188,225.733 840.757,223.971 841.325,223.46 841.893,224.033 842.462,227.657 843.03,228.643 843.598,229.713 844.167,228.61 844.735,227.915 845.304,229.077 845.872,228.063 846.44,228.299 847.009,228.575 847.577,229.819 848.145,228.025 848.714,229.301 849.282,227.473 849.85,228.747 850.419,229.04 850.987,228.117 851.555,230.316 852.124,230.484 852.692,231.568 853.26,231.675 853.829,230.735 854.397,231.758 854.965,233.831 855.534,235.692 856.102,235.408 856.67,235.968 857.239,237.564 857.807,237.032 858.375,237.446 858.944,234.838 859.512,235.549 860.081,237.199 860.649,237.697 861.217,236.977 861.786,235.587 862.354,236.261 862.922,234.624 863.491,232.099 864.059,230.909 864.627,229.713 865.196,229.796 865.764,229.808 866.332,227.894 866.901,228.938 867.469,229.899 868.037,228.913 868.606,230.171 869.174,230.044 869.742,227.699 870.311,225.65 870.879,224.957 871.447,224.529 872.016,224.876 872.584,226.39 873.152,224.578 873.721,222.834 874.289,221.538 874.858,219.935 875.426,221.983 875.994,221.564 876.563,221.145 877.131,221.854 877.699,224.705 878.268,223.981 878.836,225.444 879.404,224.776 879.973,224.19 880.541,224.485 881.109,226.326 881.678,228.925 882.246,231.197 882.814,229.069 883.383,229.288 883.951,230.683 884.519,232.893 885.088,235.744 885.656,235.54 886.224,235.459 886.793,237.322 887.361,235.776 887.93,234.356 888.498,233.088 889.066,234.049 889.635,233.917 890.203,232.777 890.771,231.602 891.34,233.442 891.908,236.545 892.476,237.994 893.045,238.325 893.613,236.927 894.181,236.476 894.75,235.847 895.318,236.45 895.886,235.882 896.455,237.436 897.023,236.817 897.591,238.298 898.16,237.723 898.728,236.123 899.296,233.397 899.865,232.077 900.433,231.64 901.001,231.319 901.57,230.974 902.138,231.025 902.707,229.744 903.275,232.716 903.843,231.348 904.412,228.908 904.98,229.089 905.548,229.295 906.117,228.292 906.685,227.417 907.253,228.472 907.822,228.505 908.39,229.73 908.958,229.622 909.527,229.538 910.095,230.499 910.663,227.337 911.232,226.504 911.8,225.76 912.368,227.149 912.937,227.327 913.505,229.652 914.073,230.637 914.642,229.584 915.21,230.334 915.779,230.194 916.347,228.189 916.915,227.175 917.484,227.18 918.052,225.235 918.62,223.543 919.189,224.837 919.757,225.123 920.325,224.462 920.894,224.653 921.462,224.887 922.03,224.015 922.599,227.66 923.167,227.841 923.735,227.869 924.304,226.849 924.872,224.802 925.44,224.382 926.009,223.657 926.577,225.077 927.145,225.271 927.714,224.55 928.282,224.875 928.85,223.191 929.419,224.872 929.987,227.436 930.556,226.711 931.124,226.026 931.692,226.453 932.261,226.953 932.829,228.363 933.397,230.709 933.966,229.826 934.534,228.908 935.102,229.969 935.671,233.209 936.239,231.082 936.807,230.148 937.376,232.361 937.944,233.348 938.512,234.091 939.081,235.027 939.649,234.554 940.217,235.409 940.786,235.022 941.354,234.524 941.922,234.118 942.491,232.902 943.059,232.602 943.627,233.266 944.196,234.028 944.764,231.612 945.333,232.55 945.901,232.408 946.469,234.243 947.038,234.014 947.606,235.807 948.174,234.34 948.743,234.927 949.311,234.572 949.879,235.338 950.448,234.97 951.016,235.464 951.584,233.875 952.153,233.768 952.721,233.156 953.289,233.967 953.858,231.655 954.426,234.465 954.994,235.03 955.563,234.545 956.131,233.899 956.699,232.481 957.268,231.322 957.836,232.319 958.405,233.084 958.973,231.805 959.541,231.515 960.11,231.327 960.678,232.076 961.246,230.764 961.815,228.554 962.383,227.508 962.951,228.721 963.52,228.016 964.088,227.114 964.656,227.219 965.225,228.345 965.793,228.388 966.361,229.521 966.93,231.593 967.498,230.229 968.066,230.038 968.635,229.838 969.203,230.839 969.771,229.475 970.34,230.605 970.908,230.345 971.476,233.461 972.045,233.951 972.613,234.639 973.182,236.378 973.75,236.01 974.318,233.152 974.887,233.979 975.455,233.559 976.023,232.852 976.592,232.469 977.16,231.029 977.728,234.89 978.297,233.402 978.865,231.959 979.433,228.618 980.002,226.441 980.57,224.327 981.138,223.277 981.707,223.479 982.275,223.477 982.843,225.989 983.412,227.108 983.98,227.166 984.548,227.383 985.117,227.221 985.685,225.957 986.253,225.334 986.822,224.66 987.39,227.08 987.959,229.249 988.527,229.142 989.095,228.063 989.664,228.047 990.232,226.876 990.8,228.032 991.369,229.273 991.937,229.368 992.505,227.211 993.074,226.284 993.642,227.78 994.21,226.716 994.779,227.092 995.347,227.24 995.915,226.323 996.484,226.663 997.052,226.98 997.62,227.143 998.189,226.383 998.757,226.492 999.325,227.634 999.894,227.832 1000.46,229.099 1001.03,230.399 1001.6,229.289 1002.17,228.464 1002.74,227.444 1003.3,227.533 1003.87,226.783 1004.44,228.041 1005.01,226.911 1005.58,225.002 1006.15,227.454 1006.71,227.739 1007.28,228.802 1007.85,231.079 1008.42,231.803 1008.99,231.334 1009.56,230.134 1010.12,232.203 1010.69,230.742 1011.26,227.322 1011.83,228.539 1012.4,229.835 1012.97,230.19 1013.53,227.828 1014.1,229.163 1014.67,228.237 1015.24,229.422 1015.81,229.227 1016.38,230.23 1016.94,231.261 1017.51,232.111 1018.08,230.76 1018.65,229.464 1019.22,228.367 1019.79,226.226 1020.35,225.409 1020.92,226.723 1021.49,226.947 1022.06,227.109 1022.63,226.526 1023.2,226.82 1023.76,227.115 1024.33,227.194 1024.9,228.328 1025.47,227.382 1026.04,227.484 1026.61,226.715 1027.17,223.604 1027.74,223.043 1028.31,221.586 1028.88,222.066 1029.45,219.895 1030.02,221.451 1030.58,222.053 1031.15,224.481 1031.72,225.265 1032.29,228.893 1032.86,229 1033.43,230.437 1033.99,229.573 1034.56,231.923 1035.13,227.781 1035.7,229.92 1036.27,231.173 1036.84,231.132 1037.4,230.098 1037.97,231.358 1038.54,231.308 1039.11,233.389 1039.68,231.148 1040.25,233.248 1040.81,230.072 1041.38,228.158 1041.95,227.383 1042.52,227.522 1043.09,228.853 1043.66,228.997 1044.22,228.074 1044.79,228.227 1045.36,230.403 1045.93,229.528 1046.5,230.619 1047.07,231.666 1047.63,231.713 1048.2,232.705 1048.77,233.613 1049.34,232.455 1049.91,231.348 1050.48,232.487 1051.05,232.326 1051.61,231.054 1052.18,231.998 1052.75,229.82 1053.32,228.935 1053.89,230.971 1054.46,231.042 1055.02,232.886 1055.59,232.867 1056.16,234.567 1056.73,233.161 1057.3,231.945 1057.87,231.873 1058.43,233.704 1059,232.215 1059.57,231.854 1060.14,228.67 1060.71,226.831 1061.28,228.017 1061.84,230.132 1062.41,231.133 1062.98,230.058 1063.55,232.042 1064.12,231.884 1064.69,229.517 1065.25,230.541 1065.82,230.332 1066.39,231.396 1066.96,232.363 1067.53,230.329 1068.1,230.101 1068.66,229.889 1069.23,229.733 1069.8,229.619 1070.37,229.725 1070.94,229.624 1071.51,229.652 1072.07,229.715 1072.64,231.71 1073.21,227.556 1073.78,227.687 1074.35,226.691 1074.92,228.718 1075.48,228.662 1076.05,229.659 1076.62,232.708 1077.19,234.545 1077.76,235.209 1078.33,234.75 1078.89,233.124 1079.46,235.06 1080.03,234.598 1080.6,232.999 1081.17,231.751 1081.74,231.636 1082.3,231.211 1082.87,231.131 1083.44,232.115 1084.01,230.851 1084.58,231.691 1085.15,231.747 1085.71,232.299 1086.28,232.011 1086.85,231.528 1087.42,231.166 1087.99,229.88 1088.56,229.917 1089.12,230.647 1089.69,231.569 1090.26,233.292 1090.83,230.978 1091.4,231.837 1091.97,232.475 1092.53,232.43 1093.1,233.278 1093.67,234.021 1094.24,233.448 1094.81,230.953 1095.38,231.702 1095.94,231.281 1096.51,230.914 1097.08,230.697 1097.65,230.868 1098.22,230.762 1098.79,231.286 1099.35,230.059 1099.92,230.02 1100.49,229.862 1101.06,229.676 1101.63,229.843 1102.2,228.568 1102.76,226.332 1103.33,225.477 1103.9,225.431 1104.47,225.57 1105.04,225.637 1105.61,221.7 1106.17,221.958 1106.74,223.517 1107.31,220.711 1107.88,223.242 1108.45,221.624 1109.02,223.258 1109.58,224.637 1110.15,224.737 1110.72,225.853 1111.29,225.222 1111.86,224.408 1112.43,225.862 1112.99,226.111 1113.56,227.194 1114.13,226.376 1114.7,226.676 1115.27,231.222 1115.84,232.277 1116.4,234.205 1116.97,234.005 1117.54,232.636 1118.11,233.202 1118.68,232.938 1119.25,230.688 1119.81,230.731 1120.38,230.68 1120.95,232.466 1121.52,232.26 1122.09,231.907 1122.66,231.851 1123.23,231.596 1123.79,232.604 1124.36,232.184 1124.93,232.087 1125.5,230.809 1126.07,228.827 1126.64,227.886 1127.2,226.862 1127.77,224.985 1128.34,225.398 1128.91,224.516 1129.48,226.119 1130.05,226.337 1130.61,226.596 1131.18,225.819 1131.75,225.929 1132.32,225.346 1132.89,225.755 1133.46,225.977 1134.02,224.101 1134.59,221.487 1135.16,223.233 1135.73,224.794 1136.3,223.231 1136.87,223.713 1137.43,224.037 1138,221.488 1138.57,220.996 1139.14,222.542 1139.71,223.407 1140.28,221.828 1140.84,222.552 1141.41,223.188 1141.98,223.771 1142.55,222.885 1143.12,227.623 1143.69,224.697 1144.25,227.281 1144.82,228.71 1145.39,230.079 1145.96,228.093 1146.53,232.496 1147.1,232.661 1147.66,231.568 1148.23,232.645 1148.8,231.667 1149.37,231.72 1149.94,232.605 1150.51,231.482 1151.07,231.37 1151.64,229.394 1152.21,229.455 1152.78,227.753 1153.35,227.065 1153.92,230.61 1154.48,228.35 1155.05,230.6 1155.62,229.694 1156.19,227.837 1156.76,229.043 1157.33,229.373 1157.89,226.41 1158.46,225.802 1159.03,224.033 1159.6,225.452 1160.17,226.633 1160.74,229.068 1161.3,230.247 1161.87,230.206 1162.44,230.378 1163.01,231.551 1163.58,232.682 1164.15,233.713 1164.71,233.407 1165.28,231.477 1165.85,232.497 1166.42,234.372 1166.99,234.082 1167.56,234.001 1168.12,234.81 1168.69,236.486 1169.26,236.946 1169.83,237.512 1170.4,239.081 1170.97,239.399 1171.53,238.676 1172.1,237.03 1172.67,234.349 1173.24,234.045 1173.81,232.77 1174.38,232.331 1174.94,233.148 1175.51,233.708 1176.08,233.275 1176.65,236.054 1177.22,234.54 1177.79,235.413 1178.35,234.938 1178.92,236.684 1179.49,237.404 1180.06,236.924 1180.63,235.285 1181.2,233.829 1181.76,233.541 1182.33,233.317 1182.9,230.957 1183.47,228.633 1184.04,228.541 1184.61,229.239 1185.17,229.065 1185.74,229.969 1186.31,231.827 1186.88,233.668 1187.45,232.106 1188.02,233.084 1188.58,231.971 1189.15,230.556 1189.72,229.364 1190.29,229.291 1190.86,227.218 1191.43,228.342 1192,228.151 1192.56,226.885 1193.13,225.924 1193.7,227.316 1194.27,228.152 1194.84,227.271 1195.41,230.397 1195.97,230.292 1196.54,229.329 1197.11,228.092 1197.68,227.198 1198.25,228.193 1198.82,226.884 1199.38,227.975 1199.95,227.807 1200.52,225.643 1201.09,226.833 1201.66,227.898 1202.23,229.065 1202.79,228.803 1203.36,229.795 1203.93,230.585 1204.5,228.163 1205.07,228.174 1205.64,227.492 1206.2,225.462 1206.77,226.725 1207.34,226.674 1207.91,227.805 1208.48,227.579 1209.05,227.781 1209.61,229.099 1210.18,226.967 1210.75,229.115 1211.32,230.075 1211.89,229.067 1212.46,231.15 1213.02,228.795 1213.59,227.657 1214.16,227.757 1214.73,226.774 1215.3,226.986 1215.87,228.234 1216.43,228.14 1217,225.994 1217.57,226.293 1218.14,227.526 1218.71,226.442 1219.28,227.613 1219.84,227.722 1220.41,229.026 1220.98,230.201 1221.55,230.44 1222.12,230.345 1222.69,229.099 1223.25,228.21 1223.82,227.231 1224.39,226.251 1224.96,226.768 1225.53,228.959 1226.1,232.05 1226.66,231.994 1227.23,231.668 1227.8,231.576 1228.37,231.406 1228.94,233.216 1229.51,235.023 1230.07,232.548 1230.64,232.472 1231.21,233.42 1231.78,233.905 1232.35,231.511 1232.92,232.574 1233.48,234.494 1234.05,235.223 1234.62,232.907 1235.19,233.819 1235.76,232.12 1236.33,231.913 1236.89,232.822 1237.46,229.502 1238.03,229.201 1238.6,229.018 1239.17,228.017 1239.74,228.28 1240.3,226.2 1240.87,225.347 1241.44,224.607 1242.01,224.956 1242.58,222.33 1243.15,224.797 1243.71,225.119 1244.28,227.375 1244.85,226.373 1245.42,224.248 1245.99,223.683 1246.56,225.041 1247.12,225.229 1247.69,225.483 1248.26,224.788 1248.83,224.102 1249.4,225.533 1249.97,226.971 1250.53,228.061 1251.1,227.309 1251.67,227.387 1252.24,226.527 1252.81,228.813 1253.38,228.81 1253.94,228.95 1254.51,226.915 1255.08,228.34 1255.65,229.533 1256.22,228.578 1256.79,229.614 1257.35,230.847 1257.92,230.896 1258.49,229.924 1259.06,230.773 1259.63,231.782 1260.2,229.713 1260.76,227.634 1261.33,225.707 1261.9,224.909 1262.47,225.243 1263.04,225.549 1263.61,225.977 1264.18,228.305 1264.74,228.366 1265.31,229.491 1265.88,228.767 1266.45,228.866 1267.02,231.219 1267.59,230.095 1268.15,232.294 1268.72,232.053 1269.29,229.929 1269.86,228.806 1270.43,229.928 1271,228.881 1271.56,226.814 1272.13,228.125 1272.7,228.204 1273.27,231.616 1273.84,232.678 1274.41,231.566 1274.97,230.457 1275.54,231.596 1276.11,230.556 1276.68,230.481 1277.25,230.585 1277.82,234.684 1278.38,232.373 1278.95,232.368 1279.52,231.32 1280.09,232.163 1280.66,232.819 1281.23,230.68 1281.79,229.637 1282.36,231.9 1282.93,229.793 1283.5,230.689 1284.07,227.403 1284.64,230.797 1285.2,229.541 1285.77,229.592 1286.34,229.615 1286.91,230.672 1287.48,231.784 1288.05,232.563 1288.61,234.089 1289.18,232.984 1289.75,231.66 1290.32,232.659 1290.89,231.448 1291.46,232.272 1292.02,230.83 1292.59,231.72 1293.16,228.621 1293.73,230.72 1294.3,229.644 1294.87,228.492 1295.43,229.588 1296,231.726 1296.57,230.555 1297.14,232.523 1297.71,232.418 1298.28,231.166 1298.84,230.107 1299.41,228.833 1299.98,228.782 1300.55,229.691 1301.12,230.641 1301.69,229.696 1302.25,232.574 1302.82,233.25 1303.39,231.011 1303.96,229.733 1304.53,227.81 1305.1,229.999 1305.66,229.956 1306.23,230.799 1306.8,230.632 1307.37,230.541 1307.94,230.614 1308.51,229.371 1309.07,229.483 1309.64,230.351 1310.21,229.351 1310.78,231.273 1311.35,231.861 1311.92,230.752 1312.48,228.51 1313.05,227.686 1313.62,226.64 1314.19,225.869 1314.76,227.079 1315.33,229.257 1315.89,229.265 1316.46,230.425 1317.03,229.192 1317.6,226.962 1318.17,226.121 1318.74,226.374 1319.3,228.779 1319.87,229.862 1320.44,228.806 1321.01,229.819 1321.58,225.585 1322.15,226.049 1322.71,227.365 1323.28,226.551 1323.85,225.882 1324.42,228.096 1324.99,228.269 1325.56,229.593 1326.12,228.67 1326.69,229.887 1327.26,230.839 1327.83,230.578 1328.4,231.534 1328.97,231.542 1329.53,232.455 1330.1,230.205 1330.67,230.089 1331.24,229.088 1331.81,230.185 1332.38,230.076 1332.94,229.913 1333.51,229.868 1334.08,229.078 1334.65,230.254 1335.22,229.005 1335.79,231.179 1336.36,230.962 1336.92,229.912 1337.49,227.923 1338.06,228.986 1338.63,229.854 1339.2,231.86 1339.77,232.486 1340.33,232.246 1340.9,232.053 1341.47,230.819 1342.04,232.757 1342.61,232.652 1343.18,232.233 1343.74,233.128 1344.31,232.726 1344.88,232.522 1345.45,232.135 1346.02,231.883 1346.59,231.38 1347.15,233.089 1347.72,231.691 1348.29,231.412 1348.86,230.272 1349.43,232.48 1350,229.045 1350.56,230.966 1351.13,230.578 1351.7,228.405 1352.27,228.23 1352.84,227.093 1353.41,226.972 1353.97,228.822 1354.54,228.771 1355.11,226.553 1355.68,226.743 1356.25,226.793 1356.82,223.918 1357.38,226.252 1357.95,228.381 1358.52,228.305 1359.09,229.094 1359.66,226.182 1360.23,224.273 1360.79,225.73 1361.36,227.89 1361.93,225.709 1362.5,224.87 1363.07,224.064 1363.64,226.466 1364.2,224.771 1364.77,224.009 1365.34,223.425 1365.91,223.886 1366.48,223.132 1367.05,224.551 1367.61,223.84 1368.18,225.318 1368.75,226.476 1369.32,225.718 1369.89,226.073 1370.46,228.371 1371.02,226.429 1371.59,227.731 1372.16,228.802 1372.73,226.886 1373.3,226.822 1373.87,227.065 1374.43,226.181 1375,224.425 1375.57,224.955 1376.14,225.4 1376.71,223.737 1377.28,221.007 1377.84,221.851 1378.41,222.635 1378.98,223.283 1379.55,222.688 1380.12,224.434 1380.69,224.025 1381.25,223.838 1381.82,225.283 1382.39,224.791 1382.96,225.01 1383.53,224.493 1384.1,230.039 1384.66,231.16 1385.23,233.041 1385.8,233.884 1386.37,237.81 1386.94,238.536 1387.51,236.954 1388.07,237.56 1388.64,235.022 1389.21,232.703 1389.78,229.563 1390.35,228.496 1390.92,230.783 1391.48,230.629 1392.05,230.824 1392.62,229.879 1393.19,227.823 1393.76,227.979 1394.33,227.13 1394.89,227.357 1395.46,227.597 1396.03,229.109 1396.6,228.014 1397.17,228.184 1397.74,228.192 1398.3,229.31 1398.87,228.365 1399.44,229.652 1400.01,231.077 1400.58,231.344 1401.15,233.263 1401.71,232.044 1402.28,231.964 1402.85,231.915 1403.42,234.178 1403.99,234.837 1404.56,233.4 1405.13,234.254 1405.69,233.919 1406.26,232.457 1406.83,233.434 1407.4,233.33 1407.97,231.999 1408.54,230.942 1409.1,231.126 1409.67,229.975 1410.24,226.886 1410.81,227.251 1411.38,230.594 1411.95,232.675 1412.51,231.552 1413.08,232.478 1413.65,232.268 1414.22,233.292 1414.79,233.019 1415.36,233.777 1415.92,235.534 1416.49,236.226 1417.06,236.751 1417.63,235.132 1418.2,234.617 1418.77,234.007 1419.33,234.944 1419.9,233.585 1420.47,230.348 1421.04,229.018 1421.61,229.991 1422.18,229.57 1422.74,230.581 1423.31,230.418 1423.88,231.342 1424.45,230.386 1425.02,229.149 1425.59,228.192 1426.15,231.248 1426.72,231.149 1427.29,227.968 1427.86,229.999 1428.43,227.658 1429,226.724 1429.56,227.886 1430.13,227.05 1430.7,228.14 1431.27,229.222 1431.84,228.153 1432.41,227.509 1432.97,227.636 1433.54,228.866 1434.11,230.104 1434.68,230.025 1435.25,232.112 1435.82,230.947 1436.38,230.889 1436.95,229.644 1437.52,231.624 1438.09,231.604 1438.66,231.504 1439.23,231.392 1439.79,230.093 1440.36,230.208 1440.93,232.181 1441.5,232.808 1442.07,231.553 1442.64,230.359 1443.2,229.214 1443.77,228.145 1444.34,228.099 1444.91,228.248 1445.48,224.172 1446.05,225.392 1446.61,226.593 1447.18,228.716 1447.75,228.782 1448.32,230.035 1448.89,231.269 1449.46,229.148 1450.02,230.117 1450.59,229.822 1451.16,229.808 1451.73,227.721 1452.3,227.72 1452.87,227.935 1453.43,227.039 1454,227.251 1454.57,224.243 1455.14,228.704 1455.71,229.079 1456.28,228.232 1456.84,227.148 1457.41,230.274 1457.98,231.499 1458.55,233.424 1459.12,233.028 1459.69,229.741 1460.25,230.576 1460.82,232.421 1461.39,232.179 1461.96,230.91 1462.53,230.801 1463.1,232.714 1463.66,233.51 1464.23,233.161 1464.8,232.994 1465.37,233.591 1465.94,231.082 1466.51,230.804 1467.07,229.75 1467.64,228.549 1468.21,227.744 1468.78,228.073 1469.35,228.09 1469.92,227.872 1470.48,229.127 1471.05,229.032 1471.62,228.196 1472.19,227.579 1472.76,226.369 1473.33,226.532 1473.89,225.647 1474.46,225.91 1475.03,226.266 1475.6,223.388 1476.17,222.539 1476.74,222.056 1477.31,222.467 1477.87,223.003 1478.44,224.512 1479.01,227.951 1479.58,226.982 1480.15,225.896 1480.72,225.974 1481.28,225.282 1481.85,224.557 1482.42,224.909 1482.99,225.259 1483.56,226.502 1484.13,226.779 1484.69,227.148 1485.26,229.332 1485.83,230.193 1486.4,230.152 1486.97,227.317 1487.54,227.736 1488.1,227.95 1488.67,226.997 1489.24,227.072 1489.81,226.298 1490.38,225.474 1490.95,225.865 1491.51,227.244 1492.08,227.557 1492.65,228.82 1493.22,231.059 1493.79,233.039 1494.36,232.871 1494.92,232.671 1495.49,232.459 1496.06,233.378 1496.63,234.089 1497.2,234.707 1497.77,233.325 1498.33,233.25 1498.9,233.091 1499.47,233.719 1500.04,231.381 1500.61,230.463 1501.18,230.543 1501.74,229.601 1502.31,232.635 1502.88,234.348 1503.45,236.287 1504.02,233.704 1504.59,234.686 1505.15,234.484 1505.72,234.097 1506.29,232.899 1506.86,233.528 1507.43,231.161 1508,232.954 1508.56,230.251 1509.13,230.225 1509.7,230.975 1510.27,230.791 1510.84,232.454 1511.41,231.217 1511.97,231.891 1512.54,228.507 1513.11,229.511 1513.68,230.425 1514.25,230.273 1514.82,231.269 1515.38,227.983 1515.95,229.3 1516.52,231.224 1517.09,231.052 1517.66,232.033 1518.23,231.69 1518.79,232.645 1519.36,231.377 1519.93,231.37 1520.5,231.153 1521.07,230.898 1521.64,229.888 1522.2,227.829 1522.77,230.082 1523.34,229.962 1523.91,227.643 1524.48,225.722 1525.05,225.796 1525.61,226.953 1526.18,226.328 1526.75,226.368 1527.32,226.824 1527.89,226.738 1528.46,226.949 1529.02,227.14 1529.59,227.266 1530.16,229.486 1530.73,230.583 1531.3,230.555 1531.87,229.525 1532.43,226.279 1533,227.513 1533.57,227.547 1534.14,229.628 1534.71,229.567 1535.28,229.716 1535.84,229.468 1536.41,230.302 1536.98,231.442 1537.55,233.204 1538.12,233.148 1538.69,234.009 1539.25,234.609 1539.82,232.223 1540.39,230.922 1540.96,230.76 1541.53,230.607 1542.1,230.509 1542.66,231.175 1543.23,231.918 1543.8,230.86 1544.37,229.622 1544.94,231.796 1545.51,231.472 1546.08,229.047 1546.64,227.924 1547.21,226.901 1547.78,227.716 1548.35,227.801 1548.92,228.938 1549.49,228.1 1550.05,232.071 1550.62,230.865 1551.19,230.741 1551.76,230.449 1552.33,231.39 1552.9,233.273 1553.46,231.738 1554.03,231.663 1554.6,232.703 1555.17,230.248 1555.74,230.018 1556.31,229.906 1556.87,228.925 1557.44,227.946 1558.01,229.979 1558.58,228.424 1559.15,224.362 1559.72,224.612 1560.28,226.93 1560.85,227.003 1561.42,225.016 1561.99,226.455 1562.56,226.437 1563.13,226.655 1563.69,226.83 1564.26,226.761 1564.83,228.017 1565.4,229.258 1565.97,229.402 1566.54,229.234 1567.1,227.081 1567.67,225.371 1568.24,225.567 1568.81,227.936 1569.38,227.083 1569.95,226.447 1570.51,225.659 1571.08,227.055 1571.65,225.915 1572.22,225.992 1572.79,226.451 1573.36,227.702 1573.92,226.76 1574.49,225.967 1575.06,223.922 1575.63,224.319 1576.2,226.697 1576.77,226.91 1577.33,228.422 1577.9,228.409 1578.47,228.41 1579.04,227.269 1579.61,227.229 1580.18,228.64 1580.74,228.674 1581.31,226.611 1581.88,227.835 1582.45,229.19 1583.02,229.181 1583.59,231.406 1584.15,231.406 1584.72,232.197 1585.29,233.175 1585.86,234.909 1586.43,234.469 1587,235.071 1587.56,234.438 1588.13,233.224 1588.7,232.135 1589.27,231.021 1589.84,232.175 1590.41,230.112 1590.97,228.097 1591.54,229.246 1592.11,228.184 1592.68,228.459 1593.25,230.705 1593.82,232.679 1594.38,232.165 1594.95,233.015 1595.52,232.719 1596.09,232.386 1596.66,229.922 1597.23,226.731 1597.79,225.948 1598.36,224.082 1598.93,224.358 1599.5,225.571 1600.07,227.854 1600.64,227.766 1601.2,226.645 1601.77,227.874 1602.34,229.039 1602.91,229.123 1603.48,230.401 1604.05,231.532 1604.61,231.208 1605.18,232.135 1605.75,233.026 1606.32,232.982 1606.89,232.857 1607.46,233.77 1608.02,232.326 1608.59,231.264 1609.16,228.984 1609.73,229.925 1610.3,230.964 1610.87,229.822 1611.43,230.793 1612,228.645 1612.57,228.631 1613.14,228.672 1613.71,227.391 1614.28,226.472 1614.84,225.687 1615.41,225.893 1615.98,227.393 1616.55,229.68 1617.12,229.666 1617.69,230.792 1618.26,226.516 1618.82,224.811 1619.39,222.049 1619.96,222.53 1620.53,222.844 1621.1,222.37 1621.67,221.934 1622.23,223.777 1622.8,224.223 1623.37,222.555 1623.94,223.114 1624.51,223.825 1625.08,224.181 1625.64,225.768 1626.21,224.899 1626.78,225.474 1627.35,226.96 1627.92,225.059 1628.49,224.42 1629.05,226.061 1629.62,226.265 1630.19,227.778 1630.76,226.99 1631.33,226.019 1631.9,227.179 1632.46,228.596 1633.03,226.904 1633.6,229.338 1634.17,228.555 1634.74,228.713 1635.31,230.028 1635.87,229.042 1636.44,229.11 1637.01,230.165 1637.58,232.189 1638.15,233.23 1638.72,232.115 1639.28,233.986 1639.85,233.875 1640.42,233.8 1640.99,235.498 1641.56,234.214 1642.13,237.148 1642.69,235.68 1643.26,236.349 1643.83,232.973 1644.4,232.668 1644.97,234.582 1645.54,234.309 1646.1,235.018 1646.67,233.889 1647.24,232.459 1647.81,233.506 1648.38,233.26 1648.95,234.245 1649.51,232.735 1650.08,234.591 1650.65,234.071 1651.22,235.734 1651.79,234.339 1652.36,235.007 1652.92,233.537 1653.49,232.106 1654.06,235.01 1654.63,234.582 1655.2,233.96 1655.77,234.448 1656.33,233.172 1656.9,233.864 1657.47,233.587 1658.04,232.252 1658.61,232.746 1659.18,233.399 1659.74,231.094 1660.31,229.9 1660.88,228.788 1661.45,227.898 1662.02,225.857 1662.59,224.865 1663.15,229.123 1663.72,228.029 1664.29,230.144 1664.86,230.235 1665.43,229.998 1666,229.79 1666.56,228.791 1667.13,228.889 1667.7,225.871 1668.27,222.756 1668.84,223.232 1669.41,221.606 1669.97,222.99 1670.54,221.606 1671.11,222.065 1671.68,221.696 1672.25,223.413 1672.82,225.836 1673.38,226.017 1673.95,225.103 1674.52,226.142 1675.09,227.22 1675.66,227.336 1676.23,228.442 1676.79,228.493 1677.36,228.613 1677.93,228.364 1678.5,229.431 1679.07,230.445 1679.64,230.354 1680.2,229.555 1680.77,229.528 1681.34,229.317 1681.91,228.487 1682.48,226.714 1683.05,225.879 1683.61,225.208 1684.18,225.449 1684.75,225.613 1685.32,227.042 1685.89,225.092 1686.46,226.587 1687.02,229.075 1687.59,230.17 1688.16,229.912 1688.73,229.156 1689.3,232.263 1689.87,230.208 1690.44,230.323 1691,230.355 1691.57,232.481 1692.14,231.419 1692.71,229.251 1693.28,230.323 1693.85,229.219 1694.41,230.302 1694.98,230.305 1695.55,231.32 1696.12,232.294 1696.69,232.181 1697.26,233.174 1697.82,232.146 1698.39,232.016 1698.96,231.717 1699.53,230.631 1700.1,230.663 1700.67,230.621 1701.23,230.511 1701.8,231.339 1702.37,230.257 1702.94,233.228 1703.51,230.76 1704.08,229.708 1704.64,230.861 1705.21,231.745 1705.78,231.53 1706.35,230.394 1706.92,231.474 1707.49,231.611 1708.05,230.254 1708.62,230.192 1709.19,227.881 1709.76,230.229 1710.33,230.217 1710.9,229.269 1711.46,228.688 1712.03,226.503 1712.6,226.522 1713.17,225.666 1713.74,227.953 1714.31,231.026 1714.87,231.986 1715.44,230.712 1716.01,230.198 1716.58,230.035 1717.15,230.201 1717.72,233.216 1718.28,232.915 1718.85,232.874 1719.42,233.5 1719.99,233.303 1720.56,233.004 1721.13,232.623 1721.69,233.41 1722.26,230.846 1722.83,230.681 1723.4,229.502 1723.97,229.314 1724.54,229.317 1725.1,228.201 1725.67,227.261 1726.24,227.058 1726.81,228.097 1727.38,226.117 1727.95,226.264 1728.51,225.449 1729.08,226.674 1729.65,225.752 1730.22,224.929 1730.79,226.162 1731.36,225.146 1731.92,226.378 1732.49,226.448 1733.06,225.506 1733.63,223.89 1734.2,224.414 1734.77,224.773 1735.33,227.09 1735.9,228.339 1736.47,225.437 1737.04,228.815 1737.61,230.875 1738.18,230.04 1738.74,231.028 1739.31,229.933 1739.88,232.007 1740.45,232.678 1741.02,233.525 1741.59,233.525 1742.15,231.226 1742.72,228.893 1743.29,228.862 1743.86,231.041 1744.43,231.036 1745,230.931 1745.56,230.03 1746.13,230.032 1746.7,231.957 1747.27,229.834 1747.84,228.709 1748.41,229.921 1748.97,230.056 1749.54,230.046 1750.11,228.871 1750.68,228.93 1751.25,231.132 1751.82,229.982 1752.38,234.344 1752.95,233.977 1753.52,234.455 1754.09,235.16 1754.66,234.728 1755.23,231.486 1755.79,230.469 1756.36,227.232 1756.93,228.344 1757.5,228.362 1758.07,228.36 1758.64,229.458 1759.21,228.587 1759.77,228.538 1760.34,228.528 1760.91,229.647 1761.48,227.544 1762.05,227.918 1762.62,228.002 1763.18,229.056 1763.75,227.924 1764.32,229.243 1764.89,229.252 1765.46,229.372 1766.03,228.331 1766.59,227.377 1767.16,227.547 1767.73,227.571 1768.3,228.753 1768.87,228.721 1769.44,226.816 1770,225.96 1770.57,225.141 1771.14,225.447 1771.71,226.694 1772.28,226.818 1772.85,224.81 1773.41,226.983 1773.98,225.166 1774.55,224.48 1775.12,223.862 1775.69,222.367 1776.26,222.901 1776.82,225.508 1777.39,229.176 1777.96,230.458 1778.53,233.464 1779.1,228.969 1779.67,229.036 1780.23,229.057 1780.8,232.429 1781.37,233.389 1781.94,233.985 1782.51,232.773 1783.08,231.511 1783.64,229.58 1784.21,230.438 1784.78,233.442 1785.35,233.457 1785.92,232.163 1786.49,231.868 1787.05,232.729 1787.62,232.652 1788.19,232.47 1788.76,233.266 1789.33,234.088 1789.9,233.947 1790.46,233.602 1791.03,234.275 1791.6,235.022 1792.17,235.761 1792.74,236.388 1793.31,234.556 1793.87,234.369 1794.44,233.998 1795.01,234.422 1795.58,232.718 1796.15,231.269 1796.72,228.976 1797.28,224.976 1797.85,225.306 1798.42,225.705 1798.99,225.899 1799.56,226.908 1800.13,227.004 1800.69,228.198 1801.26,227.16 1801.83,227.144 1802.4,227.146 1802.97,227.096 1803.54,226.139 1804.1,227.317 1804.67,227.397 1805.24,229.441 1805.81,229.705 1806.38,229.438 1806.95,231.324 1807.51,231.136 1808.08,230.012 1808.65,229.812 1809.22,233.856 1809.79,235.633 1810.36,235.083 1810.92,232.553 1811.49,234.217 1812.06,232.642 1812.63,232.563 1813.2,235.318 1813.77,233.651 1814.33,232.15 1814.9,231.955 1815.47,231.73 1816.04,228.519 1816.61,229.708 1817.18,227.654 1817.74,227.713 1818.31,230.724 1818.88,232.551 1819.45,234.18 1820.02,230.709 1820.59,230.441 1821.15,230.225 1821.72,230.867 1822.29,229.575 1822.86,230.687 1823.43,229.626 1824,227.701 1824.56,226.8 1825.13,228.921 1825.7,224.828 1826.27,227.273 1826.84,227.289 1827.41,228.174 1827.97,230.052 1828.54,228.868 1829.11,228.849 1829.68,230.009 1830.25,230.112 1830.82,229.966 1831.39,231.108 1831.95,228.981 1832.52,229.069 1833.09,230.077 1833.66,230.228 1834.23,230.044 1834.8,232.991 1835.36,231.689 1835.93,231.329 1836.5,229.009 1837.07,230.158 1837.64,231.936 1838.21,232.533 1838.77,232.342 1839.34,229.042 1839.91,227.782 1840.48,227.783 1841.05,226.586 1841.62,226.738 1842.18,226.816 1842.75,226.006 1843.32,223.17 1843.89,223.564 1844.46,223.876 1845.03,224.282 1845.59,225.331 1846.16,224.687 1846.73,224.093 1847.3,224.307 1847.87,224.651 1848.44,225.094 1849,226.531 1849.57,224.946 1850.14,227.474 1850.71,227.436 1851.28,227.602 1851.85,226.69 1852.41,228.027 1852.98,225.809 1853.55,224.91 1854.12,224.284 1854.69,225.872 1855.26,227.05 1855.82,225.077 1856.39,226.476 1856.96,227.709 1857.53,225.884 1858.1,226.058 1858.67,226.359 1859.23,226.718 1859.8,225.843 1860.37,226.031 1860.94,228.308 1861.51,229.419 1862.08,229.556 1862.64,229.768 1863.21,227.799 1863.78,228.064 1864.35,228.131 1864.92,228.407 1865.49,228.659 1866.05,229.867 1866.62,228.777 1867.19,226.675 1867.76,229.207 1868.33,231.321 1868.9,230.113 1869.46,231.129 1870.03,231.13 1870.6,231.025 1871.17,231.99 1871.74,232.794 1872.31,232.332 1872.87,231.182 1873.44,227.977 1874.01,224.989 1874.58,224.209 1875.15,224.837 1875.72,225.368 1876.28,224.586 1876.85,222.974 1877.42,224.705 1877.99,228.142 1878.56,231.295 1879.13,230.188 1879.69,231.48 1880.26,232.546 1880.83,231.259 1881.4,231.108 1881.97,231.083 1882.54,234.156 1883.1,234.731 1883.67,235.283 1884.24,234.768 1884.81,231.328 1885.38,233.318 1885.95,234.022 1886.51,236.777 1887.08,237.414 1887.65,235.854 1888.22,235.345 1888.79,232.911 1889.36,231.811 1889.92,230.68 1890.49,230.475 1891.06,228.524 1891.63,228.693 1892.2,228.524 1892.77,228.454 1893.33,228.53 1893.9,229.487 1894.47,232.583 1895.04,235.427 1895.61,236.012 1896.18,236.513 1896.74,236.162 1897.31,234.642 1897.88,235.228 1898.45,232.769 1899.02,232.446 1899.59,233.091 1900.16,232.594 1900.72,232.418 1901.29,233.274 1901.86,237.063 1902.43,236.473 1903,236.033 1903.57,237.604 1904.13,238.02 1904.7,236.225 1905.27,236.566 1905.84,235.045 1906.41,234.506 1906.98,232.859 1907.54,232.609 1908.11,232.003 1908.68,231.675 1909.25,230.396 1909.82,229.128 1910.39,229.049 1910.95,227.801 1911.52,226.647 1912.09,225.774 1912.66,225.745 1913.23,226.743 1913.8,226.761 1914.36,225.547 1914.93,224.639 1915.5,222.887 1916.07,221.121 1916.64,222.493 1917.21,223.743 1917.77,224.967 1918.34,227.179 1918.91,226.142 1919.48,227.291 1920.05,226.495 1920.62,227.822 1921.18,226.858 1921.75,228.054 1922.32,230.264 1922.89,230.202 1923.46,231.011 1924.03,229.536 1924.59,230.546 1925.16,230.16 1925.73,229.958 1926.3,229.836 1926.87,227.56 1927.44,228.492 1928,229.468 1928.57,230.631 1929.14,228.38 1929.71,229.317 1930.28,228.396 1930.85,228.159 1931.41,229.158 1931.98,229.157 1932.55,229.105 1933.12,228.009 1933.69,228.248 1934.26,226.216 1934.82,226.315 1935.39,224.433 1935.96,224.712 1936.53,226.101 1937.1,227.396 1937.67,227.514 1938.23,227.684 1938.8,227.928 1939.37,228.988 1939.94,227.97 1940.51,225.882 1941.08,225.03 1941.64,225.165 1942.21,227.416 1942.78,228.755 1943.35,228.867 1943.92,228.078 1944.49,227.232 1945.05,227.619 1945.62,227.805 1946.19,227.006 1946.76,224.015 1947.33,225.185 1947.9,226.367 1948.46,225.448 1949.03,226.702 1949.6,227.869 1950.17,228.038 1950.74,227.25 1951.31,227.558 1951.87,227.739 1952.44,226.928 1953.01,228.319 1953.58,228.635 1954.15,230.027 1954.72,232.364 1955.28,234.394 1955.85,235.251 1956.42,233.965 1956.99,233.637 1957.56,234.337 1958.13,233.94 1958.69,232.576 1959.26,229.362 1959.83,229.247 1960.4,229.143 1960.97,229.342 1961.54,230.131 1962.1,229.049 1962.67,228.962 1963.24,227.88 1963.81,226.934 1964.38,225.801 1964.95,225.787 1965.51,225.96 1966.08,227.225 1966.65,226.454 1967.22,225.783 1967.79,224.941 1968.36,224.301 1968.92,224.674 1969.49,225.929 1970.06,227.364 1970.63,228.728 1971.2,229.613 1971.77,228.476 1972.34,229.508 1972.9,228.259 1973.47,227.585 1974.04,229.014 1974.61,227.05 1975.18,225.336 1975.75,225.854 1976.31,228.208 1976.88,228.661 1977.45,226.793 1978.02,226.968 1978.59,229.253 1979.16,226.946 1979.72,227.176 1980.29,229.487 1980.86,230.713 1981.43,231.964 1982,231.952 1982.57,230.886 1983.13,231.745 1983.7,231.624 1984.27,234.636 1984.84,233.176 1985.41,231.936 1985.98,229.589 1986.54,228.488 1987.11,229.653 1987.68,228.592 1988.25,229.548 1988.82,229.691 1989.39,233.901 1989.95,233.715 1990.52,234.441 1991.09,231.979 1991.66,231.794 1992.23,230.716 1992.8,229.872 1993.36,231.748 1993.93,231.676 1994.5,231.559 1995.07,232.62 1995.64,233.332 1996.21,232.788 1996.77,235.623 1997.34,237.237 1997.91,238.647 1998.48,237.857 1999.05,238.391 1999.62,238.81 2000.18,236.038 2000.75,235.615 2001.32,234.032 2001.89,232.264 2002.46,233.005 2003.03,232.764 2003.59,233.334 2004.16,231.057 2004.73,229.534 2005.3,231.353 2005.87,230.105 2006.44,228.809 2007,228.87 2007.57,228.666 2008.14,228.617 2008.71,229.782 2009.28,229.669 2009.85,230.419 2010.41,230.291 2010.98,229.015 2011.55,229.835 2012.12,228.789 2012.69,227.646 2013.26,224.698 2013.82,227.065 2014.39,226.925 2014.96,223.814 2015.53,225.21 2016.1,226.512 2016.67,226.524 2017.23,226.929 2017.8,224.914 2018.37,224.964 2018.94,228.297 2019.51,228.287 2020.08,229.405 2020.64,228.027 2021.21,230.316 2021.78,228.127 2022.35,228.106 2022.92,228.112 2023.49,227.485 2024.05,227.596 2024.62,226.483 2025.19,227.546 2025.76,228.73 2026.33,226.688 2026.9,227.948 2027.46,227.912 2028.03,227.141 2028.6,228.039 2029.17,228.892 2029.74,229.855 2030.31,228.701 2030.87,227.686 2031.44,229.76 2032.01,229.701 2032.58,229.702 2033.15,230.749 2033.72,230.637 2034.28,229.461 2034.85,230.472 2035.42,231.427 2035.99,231.284 2036.56,233.125 2037.13,230.902 2037.69,230.699 2038.26,231.41 2038.83,232.22 2039.4,232.778 2039.97,232.335 2040.54,231.339 2041.11,231.22 2041.67,228.908 2042.24,227.59 2042.81,227.572 2043.38,226.864 2043.95,226.99 2044.52,227.022 2045.08,224.999 2045.65,224.387 2046.22,223.71 2046.79,221.03 2047.36,221.586 2047.93,221.127 2048.49,221.666 2049.06,222.231 2049.63,222.906 2050.2,224.453 2050.77,223.935 2051.34,224.586 2051.9,226.282 2052.47,225.435 2053.04,224.556 2053.61,225.043 2054.18,227.451 2054.75,225.588 2055.31,224.928 2055.88,226.331 2056.45,226.623 2057.02,226.97 2057.59,226.294 2058.16,226.764 2058.72,223.912 2059.29,225.407 2059.86,226.535 2060.43,226.677 2061,225.789 2061.57,227.18 2062.13,228.556 2062.7,231.719 2063.27,231.745 2063.84,232.914 2064.41,232.589 2064.98,233.414 2065.54,234.364 2066.11,232.052 2066.68,230.959 2067.25,232.159 2067.82,233.006 2068.39,233.941 2068.95,233.832 2069.52,232.52 2070.09,231.549 2070.66,232.607 2071.23,231.433 2071.8,230.424 2072.36,228.252 2072.93,228.45 2073.5,228.538 2074.07,228.553 2074.64,229.662 2075.21,227.751 2075.77,229.288 2076.34,230.505 2076.91,230.592 2077.48,229.701 2078.05,228.629 2078.62,228.587 2079.18,230.638 2079.75,232.697 2080.32,235.624 2080.89,235.078 2081.46,234.909 2082.03,237.676 2082.59,237 2083.16,234.391 2083.73,233.069 2084.3,235.959 2084.87,235.093 2085.44,232.467 2086,231.105 2086.57,229.05 2087.14,231.208 2087.71,230.058 2088.28,230.04 2088.85,231.123 2089.41,230.057 2089.98,230.095 2090.55,231.163 2091.12,231.011 2091.69,227.806 2092.26,226.917 2092.82,229.246 2093.39,229.347 2093.96,226.164 2094.53,227.446 2095.1,229.698 2095.67,228.591 2096.23,228.789 2096.8,227.627 2097.37,225.602 2097.94,224.756 2098.51,225.271 2099.08,225.609 2099.64,225.031 2100.21,225.557 2100.78,225.956 2101.35,228.317 2101.92,227.47 2102.49,227.658 2103.05,227.752 2103.62,228.03 2104.19,228.11 2104.76,228.23 2105.33,229.47 2105.9,229.607 2106.46,229.627 2107.03,229.598 2107.6,229.758 2108.17,231.978 2108.74,231.815 2109.31,231.916 2109.87,231.741 2110.44,230.574 2111.01,229.495 2111.58,230.579 2112.15,232.544 2112.72,232.42 2113.29,232.294 2113.85,231.922 2114.42,231.763 2114.99,231.584 2115.56,233.419 2116.13,236.329 2116.7,236.736 2117.26,236.399 2117.83,237.075 2118.4,236.604 2118.97,236.993 2119.54,236.395 2120.11,235.576 2120.67,232.816 2121.24,232.556 2121.81,232.108 2122.38,234.058 2122.95,235.894 2123.52,235.169 2124.08,234.649 2124.65,234.992 2125.22,232.264 2125.79,232.082 2126.36,231.806 2126.93,231.427 2127.49,229.213 2128.06,228.94 2128.63,227.73 2129.2,227.695 2129.77,223.564 2130.34,225.786 2130.9,225.826 2131.47,226.002 2132.04,225.9 2132.61,225.042 2133.18,223.342 2133.75,223.825 2134.31,222.069 2134.88,221.623 2135.45,221.96 2136.02,222.47 2136.59,224.96 2137.16,225.251 2137.72,224.411 2138.29,226.764 2138.86,225.84 2139.43,227.094 2140,227.196 2140.57,227.153 2141.13,224.363 2141.7,224.788 2142.27,224.103 2142.84,225.45 2143.41,225.772 2143.98,226.159 2144.54,225.301 2145.11,226.71 2145.68,227.725 2146.25,228.996 2146.82,226.984 2147.39,227.253 2147.95,229.525 2148.52,229.594 2149.09,229.679 2149.66,229.526 2150.23,229.577 2150.8,230.233 2151.36,231.116 2151.93,229.994 2152.5,229.73 2153.07,231.692 2153.64,228.535 2154.21,228.669 2154.77,227.739 2155.34,227.463 2155.91,229.929 2156.48,229.81 2157.05,227.616 2157.62,227.753 2158.18,226.846 2158.75,227.095 2159.32,226.427 2159.89,227.721 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip440)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip440)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip440)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip440)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.023\n  with uncertainty of ± 0.00209467975131576\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01735 ± (0.0020366, 0.00189803) (MC)\n  95% confidence interval: [-4.02111, -4.01329]) (MC)\n  linear error propagation: -4.01735 ± 0.00198687\n  |δ_y| = |0.00124013| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0173461545677185, val_l = 0.0037631357665617315, val_u = 0.004058092928953094)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip470\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip471\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip470)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip472\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1153.36 2211.02,1153.36 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,994.833 2211.02,994.833 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,836.309 2211.02,836.309 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,677.785 2211.02,677.785 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,519.261 2211.02,519.261 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,360.737 2211.02,360.737 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,202.213 2211.02,202.213 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1153.36 365.751,1153.36 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,994.833 365.751,994.833 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,836.309 365.751,836.309 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,677.785 365.751,677.785 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,519.261 365.751,519.261 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,360.737 365.751,360.737 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,202.213 365.751,202.213 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M298.909 1139.16 Q295.298 1139.16 293.469 1142.72 Q291.664 1146.26 291.664 1153.39 Q291.664 1160.5 293.469 1164.06 Q295.298 1167.6 298.909 1167.6 Q302.543 1167.6 304.349 1164.06 Q306.177 1160.5 306.177 1153.39 Q306.177 1146.26 304.349 1142.72 Q302.543 1139.16 298.909 1139.16 M298.909 1135.45 Q304.719 1135.45 307.775 1140.06 Q310.853 1144.64 310.853 1153.39 Q310.853 1162.12 307.775 1166.72 Q304.719 1171.31 298.909 1171.31 Q293.099 1171.31 290.02 1166.72 Q286.964 1162.12 286.964 1153.39 Q286.964 1144.64 290.02 1140.06 Q293.099 1135.45 298.909 1135.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M259.557 1008.18 L267.196 1008.18 L267.196 981.812 L258.886 983.479 L258.886 979.22 L267.15 977.553 L271.826 977.553 L271.826 1008.18 L279.465 1008.18 L279.465 1012.11 L259.557 1012.11 L259.557 1008.18 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 980.632 Q295.298 980.632 293.469 984.196 Q291.664 987.738 291.664 994.868 Q291.664 1001.97 293.469 1005.54 Q295.298 1009.08 298.909 1009.08 Q302.543 1009.08 304.349 1005.54 Q306.177 1001.97 306.177 994.868 Q306.177 987.738 304.349 984.196 Q302.543 980.632 298.909 980.632 M298.909 976.928 Q304.719 976.928 307.775 981.534 Q310.853 986.118 310.853 994.868 Q310.853 1003.59 307.775 1008.2 Q304.719 1012.78 298.909 1012.78 Q293.099 1012.78 290.02 1008.2 Q286.964 1003.59 286.964 994.868 Q286.964 986.118 290.02 981.534 Q293.099 976.928 298.909 976.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M262.775 849.654 L279.094 849.654 L279.094 853.589 L257.15 853.589 L257.15 849.654 Q259.812 846.899 264.395 842.269 Q269.002 837.617 270.182 836.274 Q272.428 833.751 273.307 832.015 Q274.21 830.256 274.21 828.566 Q274.21 825.811 272.266 824.075 Q270.344 822.339 267.242 822.339 Q265.043 822.339 262.59 823.103 Q260.159 823.867 257.381 825.418 L257.381 820.696 Q260.205 819.561 262.659 818.983 Q265.113 818.404 267.15 818.404 Q272.52 818.404 275.715 821.089 Q278.909 823.774 278.909 828.265 Q278.909 830.395 278.099 832.316 Q277.312 834.214 275.205 836.807 Q274.627 837.478 271.525 840.695 Q268.423 843.89 262.775 849.654 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 822.108 Q295.298 822.108 293.469 825.672 Q291.664 829.214 291.664 836.344 Q291.664 843.45 293.469 847.015 Q295.298 850.556 298.909 850.556 Q302.543 850.556 304.349 847.015 Q306.177 843.45 306.177 836.344 Q306.177 829.214 304.349 825.672 Q302.543 822.108 298.909 822.108 M298.909 818.404 Q304.719 818.404 307.775 823.01 Q310.853 827.594 310.853 836.344 Q310.853 845.07 307.775 849.677 Q304.719 854.26 298.909 854.26 Q293.099 854.26 290.02 849.677 Q286.964 845.07 286.964 836.344 Q286.964 827.594 290.02 823.01 Q293.099 818.404 298.909 818.404 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M272.914 676.431 Q276.27 677.148 278.145 679.417 Q280.043 681.685 280.043 685.019 Q280.043 690.134 276.525 692.935 Q273.006 695.736 266.525 695.736 Q264.349 695.736 262.034 695.296 Q259.742 694.88 257.289 694.023 L257.289 689.509 Q259.233 690.644 261.548 691.222 Q263.863 691.801 266.386 691.801 Q270.784 691.801 273.076 690.065 Q275.39 688.329 275.39 685.019 Q275.39 681.963 273.238 680.25 Q271.108 678.514 267.289 678.514 L263.261 678.514 L263.261 674.671 L267.474 674.671 Q270.923 674.671 272.752 673.306 Q274.58 671.917 274.58 669.324 Q274.58 666.662 272.682 665.25 Q270.807 663.815 267.289 663.815 Q265.367 663.815 263.168 664.232 Q260.969 664.648 258.33 665.528 L258.33 661.361 Q260.992 660.621 263.307 660.25 Q265.645 659.88 267.705 659.88 Q273.029 659.88 276.131 662.31 Q279.233 664.718 279.233 668.838 Q279.233 671.708 277.59 673.699 Q275.946 675.667 272.914 676.431 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 663.584 Q295.298 663.584 293.469 667.148 Q291.664 670.69 291.664 677.82 Q291.664 684.926 293.469 688.491 Q295.298 692.032 298.909 692.032 Q302.543 692.032 304.349 688.491 Q306.177 684.926 306.177 677.82 Q306.177 670.69 304.349 667.148 Q302.543 663.584 298.909 663.584 M298.909 659.88 Q304.719 659.88 307.775 664.486 Q310.853 669.07 310.853 677.82 Q310.853 686.546 307.775 691.153 Q304.719 695.736 298.909 695.736 Q293.099 695.736 290.02 691.153 Q286.964 686.546 286.964 677.82 Q286.964 669.07 290.02 664.486 Q293.099 659.88 298.909 659.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M271.594 506.055 L259.789 524.504 L271.594 524.504 L271.594 506.055 M270.367 501.981 L276.247 501.981 L276.247 524.504 L281.177 524.504 L281.177 528.393 L276.247 528.393 L276.247 536.541 L271.594 536.541 L271.594 528.393 L255.992 528.393 L255.992 523.879 L270.367 501.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 505.059 Q295.298 505.059 293.469 508.624 Q291.664 512.166 291.664 519.296 Q291.664 526.402 293.469 529.967 Q295.298 533.508 298.909 533.508 Q302.543 533.508 304.349 529.967 Q306.177 526.402 306.177 519.296 Q306.177 512.166 304.349 508.624 Q302.543 505.059 298.909 505.059 M298.909 501.356 Q304.719 501.356 307.775 505.962 Q310.853 510.546 310.853 519.296 Q310.853 528.022 307.775 532.629 Q304.719 537.212 298.909 537.212 Q293.099 537.212 290.02 532.629 Q286.964 528.022 286.964 519.296 Q286.964 510.546 290.02 505.962 Q293.099 501.356 298.909 501.356 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M258.793 343.457 L277.15 343.457 L277.15 347.392 L263.076 347.392 L263.076 355.864 Q264.094 355.517 265.113 355.355 Q266.131 355.17 267.15 355.17 Q272.937 355.17 276.316 358.341 Q279.696 361.512 279.696 366.929 Q279.696 372.508 276.224 375.609 Q272.752 378.688 266.432 378.688 Q264.256 378.688 261.988 378.318 Q259.742 377.947 257.335 377.207 L257.335 372.508 Q259.418 373.642 261.641 374.197 Q263.863 374.753 266.34 374.753 Q270.344 374.753 272.682 372.646 Q275.02 370.54 275.02 366.929 Q275.02 363.318 272.682 361.211 Q270.344 359.105 266.34 359.105 Q264.465 359.105 262.59 359.521 Q260.738 359.938 258.793 360.818 L258.793 343.457 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 346.535 Q295.298 346.535 293.469 350.1 Q291.664 353.642 291.664 360.771 Q291.664 367.878 293.469 371.443 Q295.298 374.984 298.909 374.984 Q302.543 374.984 304.349 371.443 Q306.177 367.878 306.177 360.771 Q306.177 353.642 304.349 350.1 Q302.543 346.535 298.909 346.535 M298.909 342.832 Q304.719 342.832 307.775 347.438 Q310.853 352.022 310.853 360.771 Q310.853 369.498 307.775 374.105 Q304.719 378.688 298.909 378.688 Q293.099 378.688 290.02 374.105 Q286.964 369.498 286.964 360.771 Q286.964 352.022 290.02 347.438 Q293.099 342.832 298.909 342.832 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M269.326 200.349 Q266.178 200.349 264.326 202.502 Q262.497 204.655 262.497 208.405 Q262.497 212.132 264.326 214.308 Q266.178 216.46 269.326 216.46 Q272.474 216.46 274.303 214.308 Q276.154 212.132 276.154 208.405 Q276.154 204.655 274.303 202.502 Q272.474 200.349 269.326 200.349 M278.608 185.697 L278.608 189.956 Q276.849 189.123 275.043 188.683 Q273.261 188.243 271.502 188.243 Q266.872 188.243 264.418 191.368 Q261.988 194.493 261.641 200.812 Q263.006 198.798 265.066 197.734 Q267.127 196.646 269.603 196.646 Q274.812 196.646 277.821 199.817 Q280.853 202.965 280.853 208.405 Q280.853 213.729 277.705 216.946 Q274.557 220.164 269.326 220.164 Q263.33 220.164 260.159 215.581 Q256.988 210.974 256.988 202.247 Q256.988 194.053 260.877 189.192 Q264.766 184.308 271.316 184.308 Q273.076 184.308 274.858 184.655 Q276.664 185.002 278.608 185.697 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M298.909 188.011 Q295.298 188.011 293.469 191.576 Q291.664 195.118 291.664 202.247 Q291.664 209.354 293.469 212.919 Q295.298 216.46 298.909 216.46 Q302.543 216.46 304.349 212.919 Q306.177 209.354 306.177 202.247 Q306.177 195.118 304.349 191.576 Q302.543 188.011 298.909 188.011 M298.909 184.308 Q304.719 184.308 307.775 188.914 Q310.853 193.498 310.853 202.247 Q310.853 210.974 307.775 215.581 Q304.719 220.164 298.909 220.164 Q293.099 220.164 290.02 215.581 Q286.964 210.974 286.964 202.247 Q286.964 193.498 290.02 188.914 Q293.099 184.308 298.909 184.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip472)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1036.55 400.199,929.244 400.786,830.785 401.372,859.077 401.958,774.664 402.545,697.486 403.131,625.145 403.718,558.922 404.304,590.705 404.891,528.514 405.477,473.441 406.063,423.681 406.65,378.89 407.236,340.01 407.823,304.141 408.409,272.341 408.995,244.342 409.582,219.895 410.168,252.948 410.755,281.58 411.341,259.744 411.927,241.656 412.514,266.595 413.1,251.38 413.687,238.746 414.273,326.216 414.86,316.53 415.446,308.427 416.032,328.348 416.619,323.619 417.205,319.74 417.792,317.336 418.378,317.509 418.964,338.067 419.551,339.363 420.137,342.555 420.724,362.83 421.31,383.405 421.896,390.244 422.483,411.794 423.069,445.499 423.656,452.736 424.242,460.967 424.829,491.36 425.415,519.658 426.001,527.868 426.588,545.606 427.174,563.022 427.761,571.098 428.347,595.238 428.933,611.307 429.52,619.709 430.106,635.214 430.693,643.748 431.279,652.305 431.865,685.615 432.452,705.021 433.038,717.951 433.625,730.7 434.211,744.008 434.798,765.603 435.384,772.079 435.97,788.454 436.557,794.841 437.143,809.773 437.73,828.276 438.316,837.879 438.902,862.872 439.489,874.989 440.075,883.427 440.662,887.942 441.248,896.487 441.835,904.698 442.421,912.869 443.007,924.384 443.594,932.18 444.18,942.81 444.767,953.274 445.353,960.22 445.939,969.876 446.526,977.009 447.112,980.879 447.699,985.191 448.285,991.872 448.871,1003.7 449.458,1007.68 450.044,1011.72 450.631,1015.59 451.217,1026.66 451.804,1031 452.39,1041.7 452.976,1047.53 453.563,1055.94 454.149,1063.94 454.736,1067.43 455.322,1070.66 455.908,1076.4 456.495,1079.78 457.081,1085.13 457.668,1090.46 458.254,1095.77 458.84,1112.5 459.427,1118.63 460.013,1121.03 460.6,1125.09 461.186,1129.14 461.773,1136.76 462.359,1138.68 462.945,1145.8 463.532,1149.03 464.118,1148.81 464.705,1155.54 465.291,1156.9 465.877,1160.17 466.464,1161.42 467.05,1168.02 467.637,1169.33 468.223,1170.59 468.809,1173.59 469.396,1174.44 469.982,1178.63 470.569,1184.62 471.155,1185.53 471.742,1188.15 472.328,1192.05 472.914,1196 473.501,1199.98 474.087,1203.55 474.674,1206.95 475.26,1207.16 475.846,1211.82 476.433,1217.86 477.019,1217.56 477.606,1220.35 478.192,1221.51 478.778,1222.95 479.365,1222.44 479.951,1223.75 480.538,1220.65 481.124,1223.78 481.711,1223.59 482.297,1225.02 482.883,1226.4 483.47,1225.92 484.056,1225.66 484.643,1227.19 485.229,1225.44 485.815,1225.39 486.402,1225.33 486.988,1231.1 487.575,1231.06 488.161,1233.82 488.748,1233.4 489.334,1233.15 489.92,1235.54 490.507,1236.9 491.093,1237.64 491.68,1238.67 492.266,1238.06 492.852,1240.48 493.439,1238.61 494.025,1238.12 494.612,1237.5 495.198,1238.68 495.784,1240.08 496.371,1240.88 496.957,1238.74 497.544,1239.65 498.13,1240.71 498.717,1242.94 499.303,1245.11 499.889,1246.25 500.476,1244.39 501.062,1245.09 501.649,1245.89 502.235,1245.2 502.821,1244.82 503.408,1246.79 503.994,1248.89 504.581,1245.49 505.167,1242.28 505.753,1244.61 506.34,1245.24 506.926,1245.92 507.513,1248.01 508.099,1245.97 508.686,1245.35 509.272,1244.79 509.858,1244.46 510.445,1244.1 511.031,1244.95 511.618,1247.22 512.204,1245.4 512.79,1244.51 513.377,1244.26 513.963,1240.93 514.55,1240.7 515.136,1243.29 515.722,1242.94 516.309,1244.13 516.895,1243.6 517.482,1243.35 518.068,1244.14 518.655,1243.84 519.241,1243.3 519.827,1245.61 520.414,1245.11 521,1244.39 521.587,1243.84 522.173,1242.09 522.759,1241.88 523.346,1246.83 523.932,1245.03 524.519,1247.04 525.105,1247.84 525.691,1248.31 526.278,1248.91 526.864,1249.39 527.451,1250.12 528.037,1248.06 528.624,1247.35 529.21,1248.01 529.796,1249.98 530.383,1249.12 530.969,1249.93 531.556,1250.53 532.142,1249.71 532.728,1247.94 533.315,1249.69 533.901,1248.97 534.488,1249.55 535.074,1247.35 535.661,1248.12 536.247,1247.63 536.833,1249.46 537.42,1249.04 538.006,1248.47 538.593,1249 539.179,1248.51 539.765,1245.06 540.352,1242.95 540.938,1245.21 541.525,1246.1 542.111,1246.64 542.697,1247.36 543.284,1246.61 543.87,1243.48 544.457,1243.12 545.043,1242.83 545.63,1242.72 546.216,1237.22 546.802,1238.52 547.389,1238.17 547.975,1236.54 548.562,1236.17 549.148,1234.84 549.734,1235.92 550.321,1236.95 550.907,1236.85 551.494,1237.91 552.08,1237.77 552.666,1236.46 553.253,1236.46 553.839,1236.54 554.426,1236.63 555.012,1237.97 555.599,1238.75 556.185,1238.38 556.771,1235.74 557.358,1238.17 557.944,1239.49 558.531,1236.38 559.117,1242.71 559.703,1239.28 560.29,1240.27 560.876,1242.55 561.463,1243.4 562.049,1243.86 562.635,1243.38 563.222,1244.07 563.808,1243.31 564.395,1245.27 564.981,1248.54 565.568,1245.37 566.154,1244.73 566.74,1242.75 567.327,1242.3 567.913,1246.84 568.5,1245.88 569.086,1245.19 569.672,1246.01 570.259,1245.15 570.845,1246.9 571.432,1246.23 572.018,1245.62 572.605,1243.49 573.191,1243.97 573.777,1242.15 574.364,1239.95 574.95,1240.89 575.537,1240.58 576.123,1239.22 576.709,1236.17 577.296,1236.1 577.882,1236.86 578.469,1239.17 579.055,1238.62 579.641,1236.88 580.228,1236.65 580.814,1237.48 581.401,1235.57 581.987,1235.31 582.574,1237.69 583.16,1236.21 583.746,1236.04 584.333,1237.13 584.919,1235.43 585.506,1237.67 586.092,1236.01 586.678,1237.16 587.265,1238.19 587.851,1235.13 588.438,1233.59 589.024,1233.53 589.61,1233.24 590.197,1232.86 590.783,1234.08 591.37,1235.11 591.956,1234.7 592.543,1235.83 593.129,1234.26 593.715,1237.69 594.302,1236.35 594.888,1236.09 595.475,1234.36 596.061,1233.05 596.647,1232.82 597.234,1230.06 597.82,1230.09 598.407,1231.24 598.993,1232.4 599.579,1234.56 600.166,1238.5 600.752,1239.18 601.339,1237.41 601.925,1238.3 602.512,1237.98 603.098,1237.49 603.684,1235.81 604.271,1236.79 604.857,1237.59 605.444,1236.95 606.03,1234.19 606.616,1231.25 607.203,1231.53 607.789,1231.48 608.376,1229.52 608.962,1233.26 609.548,1234.47 610.135,1230.07 610.721,1231.12 611.308,1231.11 611.894,1229.44 612.481,1228.37 613.067,1228.54 613.653,1228.37 614.24,1229.38 614.826,1227.9 615.413,1227.77 615.999,1224.93 616.585,1227.38 617.172,1227.75 617.758,1227.52 618.345,1227.7 618.931,1227.37 619.518,1227.51 620.104,1226.08 620.69,1226.49 621.277,1225.12 621.863,1226.43 622.45,1227.96 623.036,1227.04 623.622,1227.18 624.209,1227.35 624.795,1227.33 625.382,1226.9 625.968,1227.95 626.554,1227.84 627.141,1227.72 627.727,1226.29 628.314,1227.89 628.9,1227.73 629.487,1227.73 630.073,1227.92 630.659,1225.3 631.246,1224.27 631.832,1225.97 632.419,1227.22 633.005,1228.31 633.591,1229.4 634.178,1233.03 634.764,1231.24 635.351,1232.11 635.937,1232.98 636.523,1233.76 637.11,1233.5 637.696,1231.61 638.283,1229.81 638.869,1229.89 639.456,1233.5 640.042,1238.18 640.628,1237.42 641.215,1236.73 641.801,1234.51 642.388,1232.39 642.974,1231.85 643.56,1231.69 644.147,1234.19 644.733,1233.74 645.32,1231.66 645.906,1233.86 646.492,1233.4 647.079,1233.18 647.665,1232.7 648.252,1235.02 648.838,1235.92 649.425,1235.58 650.011,1233.76 650.597,1233.41 651.184,1235.48 651.77,1233.66 652.357,1232.09 652.943,1230.54 653.529,1231.53 654.116,1232.25 654.702,1233.05 655.289,1231.42 655.875,1231 656.462,1234.61 657.048,1233.88 657.634,1233.57 658.221,1230.79 658.807,1232.97 659.394,1231.37 659.98,1233.69 660.566,1236.04 661.153,1235.31 661.739,1233.5 662.326,1233.17 662.912,1235.36 663.498,1234.79 664.085,1234.42 664.671,1235.47 665.258,1235.97 665.844,1232.75 666.431,1230.98 667.017,1229.21 667.603,1230.22 668.19,1229.89 668.776,1232.15 669.363,1227.74 669.949,1228.78 670.535,1229.42 671.122,1227.71 671.708,1231.31 672.295,1229.58 672.881,1229.06 673.467,1224.96 674.054,1223.37 674.64,1223.13 675.227,1224.49 675.813,1225.92 676.4,1221.8 676.986,1224.32 677.572,1222.83 678.159,1226.79 678.745,1228.23 679.332,1229.15 679.918,1226.16 680.504,1227.3 681.091,1228.22 681.677,1226.48 682.264,1227.35 682.85,1226.16 683.436,1225.87 684.023,1225.94 684.609,1225.71 685.196,1225.29 685.782,1225.1 686.369,1225.11 686.955,1226.36 687.541,1225.04 688.128,1226.21 688.714,1224.84 689.301,1227.16 689.887,1229.58 690.473,1227.97 691.06,1228.77 691.646,1228.05 692.233,1225.36 692.819,1223.63 693.405,1223.76 693.992,1222.39 694.578,1223.92 695.165,1222.47 695.751,1222.49 696.338,1221.25 696.924,1221.14 697.51,1223.98 698.097,1222.65 698.683,1224.19 699.27,1226.77 699.856,1225.12 700.442,1224.84 701.029,1224.52 701.615,1222.95 702.202,1224 702.788,1226.51 703.375,1226.29 703.961,1227.29 704.547,1228.32 705.134,1226.96 705.72,1226.73 706.307,1229.04 706.893,1231.49 707.479,1230.96 708.066,1227.94 708.652,1226.29 709.239,1227.42 709.825,1223.14 710.411,1223.04 710.998,1221.79 711.584,1223.05 712.171,1224.2 712.757,1223.06 713.344,1223.13 713.93,1226.92 714.516,1228.03 715.103,1227.84 715.689,1224.98 716.276,1222.11 716.862,1223.31 717.448,1221.95 718.035,1221.98 718.621,1223.47 719.208,1224.68 719.794,1224.53 720.38,1225.37 720.967,1225.17 721.553,1226.3 722.14,1227.64 722.726,1228.89 723.313,1226.03 723.899,1227.13 724.485,1224.23 725.072,1219.97 725.658,1219.93 726.245,1217.24 726.831,1217.48 727.417,1220.12 728.004,1221.29 728.59,1224.04 729.177,1222.99 729.763,1224.32 730.349,1221.59 730.936,1221.5 731.522,1220.03 732.109,1218.9 732.695,1217.72 733.282,1216.58 733.868,1216.75 734.454,1215.72 735.041,1219.88 735.627,1218.97 736.214,1220.25 736.8,1221.85 737.386,1221.79 737.973,1220.5 738.559,1224.19 739.146,1226.77 739.732,1227.88 740.318,1227.52 740.905,1224.52 741.491,1224.35 742.078,1224.22 742.664,1224.02 743.251,1226.04 743.837,1223.17 744.423,1221.68 745.01,1220.45 745.596,1217.82 746.183,1218.09 746.769,1218.34 747.355,1218.41 747.942,1218.38 748.528,1218.37 749.115,1221.11 749.701,1220.95 750.288,1221.01 750.874,1219.76 751.46,1220.81 752.047,1223.39 752.633,1221.8 753.22,1219.24 753.806,1220.41 754.392,1223.04 754.979,1220.35 755.565,1221.85 756.152,1221.88 756.738,1220.52 757.324,1219.34 757.911,1218.21 758.497,1217.18 759.084,1218.73 759.67,1216.1 760.257,1217.78 760.843,1219.39 761.429,1219.26 762.016,1219.37 762.602,1221.97 763.189,1223.34 763.775,1224.23 764.361,1223.96 764.948,1224.78 765.534,1223.32 766.121,1221.88 766.707,1221.77 767.293,1221.72 767.88,1221.89 768.466,1223.17 769.053,1222.96 769.639,1221.75 770.226,1219.2 770.812,1219.17 771.398,1218 771.985,1217.99 772.571,1219.59 773.158,1219.64 773.744,1217.22 774.33,1217.66 774.917,1221.59 775.503,1220.3 776.09,1224.2 776.676,1226.55 777.262,1226.15 777.849,1227.08 778.435,1225.41 779.022,1229.33 779.608,1227.61 780.195,1223.38 780.781,1224.39 781.367,1219.06 781.954,1219.14 782.54,1220.35 783.127,1220.17 783.713,1217.55 784.299,1218.83 784.886,1217.62 785.472,1216.4 786.059,1217.88 786.645,1217.98 787.232,1216.93 787.818,1218.68 788.404,1221.64 788.991,1223.01 789.577,1225.6 790.164,1222.66 790.75,1222.73 791.336,1221.42 791.923,1222.66 792.509,1222.33 793.096,1222.03 793.682,1223.04 794.268,1225.39 794.855,1225.12 795.441,1224.86 796.028,1227.21 796.614,1226.69 797.201,1228.98 797.787,1229.75 798.373,1229.18 798.96,1224.78 799.546,1223.59 800.133,1222.27 800.719,1223.64 801.305,1224.54 801.892,1223.12 802.478,1224.4 803.065,1224.13 803.651,1223.81 804.237,1222.28 804.824,1224.51 805.41,1222.95 805.997,1225.24 806.583,1223.69 807.17,1223.34 807.756,1224.51 808.342,1221.78 808.929,1221.55 809.515,1220.16 810.102,1219.97 810.688,1221.1 811.274,1219.78 811.861,1217.12 812.447,1214.66 813.034,1214.86 813.62,1214.01 814.206,1211.83 814.793,1212.3 815.379,1211.59 815.966,1214.69 816.552,1213.66 817.139,1211.42 817.725,1210.6 818.311,1211.3 818.898,1212.87 819.484,1211.87 820.071,1213.77 820.657,1216.82 821.243,1218.25 821.83,1219.71 822.416,1219.6 823.003,1219.57 823.589,1221.96 824.175,1220.69 824.762,1219.5 825.348,1220.72 825.935,1219.16 826.521,1219.3 827.108,1222.22 827.694,1224.83 828.28,1225.79 828.867,1226.43 829.453,1226.12 830.04,1224.34 830.626,1226.67 831.212,1228.97 831.799,1230.74 832.385,1232.93 832.972,1230.61 833.558,1231.32 834.145,1232.03 834.731,1231.35 835.317,1227.98 835.904,1229 836.49,1227.31 837.077,1228.24 837.663,1229.08 838.249,1228.84 838.836,1226.67 839.422,1223.49 840.009,1220.65 840.595,1223.28 841.181,1223.01 841.768,1221.26 842.354,1218.45 842.941,1214.77 843.527,1214.87 844.114,1214.83 844.7,1212.32 845.286,1214.08 845.873,1215.72 846.459,1217.19 847.046,1215.89 847.632,1215.94 848.218,1217.27 848.805,1218.66 849.391,1216.29 849.978,1212.28 850.564,1210.27 851.15,1209.64 851.737,1211.19 852.323,1211.57 852.91,1212.19 853.496,1211.27 854.083,1211.82 854.669,1209.7 855.255,1210.28 855.842,1208.22 856.428,1208.73 857.015,1210.55 857.601,1213.82 858.187,1215.38 858.774,1215.87 859.36,1216.21 859.947,1216.6 860.533,1216.5 861.119,1218.07 861.706,1214.32 862.292,1215.96 862.879,1218.98 863.465,1218.76 864.052,1218.51 864.638,1219.77 865.224,1220.9 865.811,1219.62 866.397,1219.61 866.984,1218.09 867.57,1218.22 868.156,1218.32 868.743,1217.11 869.329,1221.05 869.916,1222.14 870.502,1223.14 871.089,1221.5 871.675,1221.33 872.261,1218.47 872.848,1217.22 873.434,1218.52 874.021,1217.57 874.607,1217.72 875.193,1220.22 875.78,1221.52 876.366,1221.57 876.953,1224.05 877.539,1226.27 878.125,1224.8 878.712,1224.55 879.298,1225.48 879.885,1225.37 880.471,1225.19 881.058,1226.39 881.644,1221.97 882.23,1221.78 882.817,1221.79 883.403,1223.1 883.99,1225.72 884.576,1226.36 885.162,1227.39 885.749,1225.76 886.335,1225.62 886.922,1226.62 887.508,1226.34 888.094,1228.55 888.681,1226.6 889.267,1223.51 889.854,1224.46 890.44,1225.39 891.027,1224.94 891.613,1224.38 892.199,1222.68 892.786,1219.76 893.372,1220.84 893.959,1221.98 894.545,1220.66 895.131,1216.58 895.718,1219.16 896.304,1220.29 896.891,1217.49 897.477,1216.18 898.063,1215.14 898.65,1213.85 899.236,1214.31 899.823,1213.1 900.409,1213.44 900.996,1213.93 901.582,1214.32 902.168,1215.73 902.755,1216.02 903.341,1215.11 903.928,1214.06 904.514,1216.98 905.1,1215.75 905.687,1215.85 906.273,1213.46 906.86,1213.63 907.446,1211.26 908.032,1212.95 908.619,1212.09 909.205,1212.4 909.792,1211.31 910.378,1211.63 910.965,1210.87 911.551,1212.72 912.137,1212.75 912.724,1213.41 913.31,1212.3 913.897,1215.09 914.483,1211.5 915.069,1210.66 915.656,1211.14 916.242,1211.82 916.829,1213.5 917.415,1214.88 918.002,1213.58 918.588,1212.55 919.174,1214.06 919.761,1214.37 920.347,1214.55 920.934,1213.57 921.52,1215.15 922.106,1217.89 922.693,1219.22 923.279,1217.75 923.866,1218.65 924.452,1219.81 925.038,1219.74 925.625,1218.38 926.211,1218.35 926.798,1216.96 927.384,1214.35 927.971,1216.01 928.557,1216.23 929.143,1216.47 929.73,1215.2 930.316,1216.88 930.903,1215.46 931.489,1215.75 932.075,1211.81 932.662,1211.1 933.248,1210.12 933.835,1207.8 934.421,1208.09 935.007,1211.53 935.594,1210.4 936.18,1210.81 936.767,1211.6 937.353,1212 937.94,1213.73 938.526,1208.83 939.112,1210.57 939.699,1212.29 940.285,1216.42 940.872,1219.16 941.458,1221.88 942.044,1223.31 942.631,1223.21 943.217,1223.36 943.804,1220.37 944.39,1219.05 944.976,1219.04 945.563,1218.82 946.149,1219.07 946.736,1220.71 947.322,1221.57 947.909,1222.51 948.495,1219.61 949.081,1216.95 949.668,1217.08 950.254,1218.44 950.841,1218.5 951.427,1220 952.013,1218.61 952.6,1217.09 953.186,1216.97 953.773,1219.68 954.359,1220.89 954.945,1219.1 955.532,1220.47 956.118,1220.06 956.705,1219.94 957.291,1221.14 957.878,1220.79 958.464,1220.46 959.05,1220.31 959.637,1221.32 960.223,1221.26 960.81,1219.9 961.396,1219.7 961.982,1218.15 962.569,1216.53 963.155,1217.89 963.742,1218.93 964.328,1220.23 964.915,1220.17 965.501,1221.15 966.087,1219.64 966.674,1221.09 967.26,1223.54 967.847,1220.58 968.433,1220.27 969.019,1218.98 969.606,1216.14 970.192,1215.19 970.779,1215.72 971.365,1217.18 971.951,1214.56 972.538,1216.33 973.124,1220.58 973.711,1219.11 974.297,1217.51 974.884,1217.05 975.47,1219.99 976.056,1218.36 976.643,1219.53 977.229,1218.07 977.816,1218.31 978.402,1217.06 978.988,1215.75 979.575,1214.63 980.161,1216.26 980.748,1217.86 981.334,1219.23 981.92,1221.94 982.507,1223.04 983.093,1221.49 983.68,1221.28 984.266,1221.13 984.853,1221.92 985.439,1221.62 986.025,1221.32 986.612,1221.28 987.198,1219.91 987.785,1221.12 988.371,1221.04 988.957,1222.05 989.544,1226.01 990.13,1226.85 990.717,1228.82 991.303,1228.41 991.889,1231.29 992.476,1229.59 993.062,1229.04 993.649,1226.19 994.235,1225.33 994.822,1220.89 995.408,1220.77 995.994,1218.98 996.581,1220.04 997.167,1217.08 997.754,1222.22 998.34,1219.58 998.926,1217.99 999.513,1218 1000.1,1219.26 1000.69,1217.66 1001.27,1217.67 1001.86,1215.01 1002.44,1217.73 1003.03,1215.04 1003.62,1218.94 1004.2,1221.33 1004.79,1222.33 1005.38,1222.2 1005.96,1220.58 1006.55,1220.42 1007.14,1221.58 1007.72,1221.42 1008.31,1218.72 1008.9,1219.8 1009.48,1218.43 1010.07,1217.08 1010.65,1216.97 1011.24,1215.66 1011.83,1214.44 1012.41,1215.79 1013,1217.11 1013.59,1215.63 1014.17,1215.76 1014.76,1217.28 1015.35,1216.06 1015.93,1218.73 1016.52,1219.83 1017.11,1217.28 1017.69,1217.16 1018.28,1214.8 1018.86,1214.74 1019.45,1212.51 1020.04,1214.16 1020.62,1215.59 1021.21,1215.62 1021.8,1213.26 1022.38,1215.02 1022.97,1215.41 1023.56,1219.35 1024.14,1221.67 1024.73,1220.25 1025.32,1217.63 1025.9,1216.35 1026.49,1217.66 1027.07,1215.15 1027.66,1215.29 1028.25,1218.2 1028.83,1216.91 1029.42,1217.14 1030.01,1215.79 1030.59,1214.52 1031.18,1217 1031.77,1217.27 1032.35,1217.52 1032.94,1217.7 1033.52,1217.84 1034.11,1217.7 1034.7,1217.82 1035.28,1217.78 1035.87,1217.69 1036.46,1215.18 1037.04,1220.33 1037.63,1220.22 1038.22,1221.51 1038.8,1219.03 1039.39,1219.12 1039.98,1217.89 1040.56,1214.05 1041.15,1211.66 1041.73,1210.69 1042.32,1211.13 1042.91,1213.05 1043.49,1210.52 1044.08,1210.96 1044.67,1212.85 1045.25,1214.33 1045.84,1214.41 1046.43,1214.89 1047.01,1214.95 1047.6,1213.67 1048.19,1215.19 1048.77,1214.1 1049.36,1213.97 1049.94,1213.22 1050.53,1213.51 1051.12,1214.06 1051.7,1214.46 1052.29,1216.03 1052.88,1215.97 1053.46,1215.05 1054.05,1213.86 1054.64,1211.64 1055.22,1214.45 1055.81,1213.33 1056.39,1212.47 1056.98,1212.45 1057.57,1211.31 1058.15,1210.28 1058.74,1210.89 1059.33,1213.93 1059.91,1212.95 1060.5,1213.42 1061.09,1213.83 1061.67,1214.07 1062.26,1213.82 1062.85,1213.92 1063.43,1213.23 1064.02,1214.72 1064.6,1214.76 1065.19,1214.94 1065.78,1215.16 1066.36,1214.95 1066.95,1216.54 1067.54,1219.36 1068.12,1220.5 1068.71,1220.65 1069.3,1220.58 1069.88,1220.59 1070.47,1225.59 1071.06,1225.46 1071.64,1223.7 1072.23,1227.34 1072.81,1224.4 1073.4,1226.57 1073.99,1224.72 1074.57,1223.15 1075.16,1223.14 1075.75,1221.86 1076.33,1222.74 1076.92,1223.86 1077.51,1222.17 1078.09,1221.94 1078.68,1220.67 1079.26,1221.75 1079.85,1221.45 1080.44,1215.82 1081.02,1214.44 1081.61,1211.95 1082.2,1212.08 1082.78,1213.69 1083.37,1212.9 1083.96,1213.14 1084.54,1215.88 1085.13,1215.79 1085.72,1215.83 1086.3,1213.55 1086.89,1213.73 1087.47,1214.11 1088.06,1214.12 1088.65,1214.38 1089.23,1213.06 1089.82,1213.51 1090.41,1213.56 1090.99,1215.1 1091.58,1217.55 1092.17,1218.74 1092.75,1220.06 1093.34,1222.47 1093.93,1222.07 1094.51,1223.27 1095.1,1221.38 1095.68,1221.19 1096.27,1220.94 1096.86,1221.98 1097.44,1221.94 1098.03,1222.75 1098.62,1222.34 1099.2,1222.15 1099.79,1224.58 1100.38,1227.97 1100.96,1225.98 1101.55,1224.19 1102.14,1226.25 1102.72,1225.8 1103.31,1225.54 1103.89,1228.85 1104.48,1229.65 1105.07,1227.93 1105.65,1227.02 1106.24,1229.14 1106.83,1228.42 1107.41,1227.8 1108,1227.22 1108.59,1228.47 1109.17,1222.71 1109.76,1226.41 1110.34,1223.3 1110.93,1221.56 1111.52,1219.86 1112.1,1222.33 1112.69,1216.84 1113.28,1216.55 1113.86,1217.85 1114.45,1216.44 1115.04,1217.59 1115.62,1217.47 1116.21,1216.3 1116.8,1217.63 1117.38,1217.72 1117.97,1220.16 1118.55,1220.08 1119.14,1222.21 1119.73,1223.11 1120.31,1218.73 1120.9,1221.53 1121.49,1218.74 1122.07,1219.85 1122.66,1222.17 1123.25,1220.69 1123.83,1220.29 1124.42,1224 1125.01,1224.83 1125.59,1227.13 1126.18,1225.49 1126.76,1224.11 1127.35,1221.13 1127.94,1219.66 1128.52,1219.69 1129.11,1219.46 1129.7,1217.96 1130.28,1216.49 1130.87,1215.11 1131.46,1215.39 1132.04,1217.72 1132.63,1216.38 1133.21,1213.95 1133.8,1214.19 1134.39,1214.18 1134.97,1213.04 1135.56,1210.8 1136.15,1210.04 1136.73,1209.14 1137.32,1206.95 1137.91,1206.31 1138.49,1206.98 1139.08,1208.83 1139.67,1212.03 1140.25,1212.29 1140.84,1213.78 1141.42,1214.25 1142.01,1213.15 1142.6,1212.35 1143.18,1212.79 1143.77,1209.19 1144.36,1210.94 1144.94,1209.71 1145.53,1210.16 1146.12,1207.82 1146.7,1206.74 1147.29,1207.14 1147.88,1209.03 1148.46,1210.72 1149.05,1210.97 1149.63,1211.15 1150.22,1214.02 1150.81,1216.9 1151.39,1217.04 1151.98,1216.18 1152.57,1216.41 1153.15,1215.28 1153.74,1212.93 1154.33,1210.56 1154.91,1212.42 1155.5,1211.12 1156.09,1212.43 1156.67,1214.14 1157.26,1215.61 1157.84,1215.71 1158.43,1218.31 1159.02,1216.95 1159.6,1217.22 1160.19,1218.83 1160.78,1220.1 1161.36,1218.44 1161.95,1217.45 1162.54,1218.58 1163.12,1214.71 1163.71,1214.82 1164.29,1216.01 1164.88,1217.56 1165.47,1218.71 1166.05,1217.52 1166.64,1219.19 1167.23,1217.89 1167.81,1218.13 1168.4,1220.88 1168.99,1219.48 1169.57,1218.21 1170.16,1216.79 1170.75,1217.13 1171.33,1215.9 1171.92,1214.9 1172.5,1217.9 1173.09,1217.92 1173.68,1218.81 1174.26,1221.39 1174.85,1219.91 1175.44,1220.04 1176.02,1218.69 1176.61,1219.01 1177.2,1218.81 1177.78,1217.19 1178.37,1219.87 1178.96,1217.24 1179.54,1216.05 1180.13,1217.29 1180.71,1214.69 1181.3,1217.6 1181.89,1219.04 1182.47,1218.96 1183.06,1220.23 1183.65,1220.03 1184.23,1218.53 1184.82,1218.67 1185.41,1221.39 1185.99,1221.1 1186.58,1219.63 1187.16,1221.04 1187.75,1219.64 1188.34,1219.55 1188.92,1217.96 1189.51,1216.5 1190.1,1216.18 1190.68,1216.27 1191.27,1217.81 1191.86,1218.93 1192.44,1220.19 1193.03,1221.47 1193.62,1220.9 1194.2,1218.22 1194.79,1214.35 1195.37,1214.36 1195.96,1214.7 1196.55,1214.76 1197.13,1214.92 1197.72,1212.6 1198.31,1210.23 1198.89,1213.2 1199.48,1213.22 1200.07,1211.96 1200.65,1211.25 1201.24,1214.15 1201.83,1212.76 1202.41,1210.26 1203,1209.22 1203.58,1211.99 1204.17,1210.76 1204.76,1212.79 1205.34,1212.98 1205.93,1211.78 1206.52,1215.86 1207.1,1216.24 1207.69,1216.47 1208.28,1217.74 1208.86,1217.44 1209.45,1220.07 1210.03,1221.22 1210.62,1222.24 1211.21,1221.93 1211.79,1225.31 1212.38,1222.41 1212.97,1222.12 1213.55,1219.4 1214.14,1220.71 1214.73,1223.44 1215.31,1224.27 1215.9,1222.71 1216.49,1222.58 1217.07,1222.37 1217.66,1223.33 1218.24,1224.3 1218.83,1222.65 1219.42,1220.95 1220,1219.64 1220.59,1220.62 1221.18,1220.57 1221.76,1221.7 1222.35,1218.9 1222.94,1218.92 1223.52,1218.76 1224.11,1221.32 1224.7,1219.6 1225.28,1218.13 1225.87,1219.32 1226.45,1218.05 1227.04,1216.49 1227.63,1216.4 1228.21,1217.58 1228.8,1216.5 1229.39,1215.2 1229.97,1217.74 1230.56,1220.34 1231.15,1222.79 1231.73,1223.88 1232.32,1223.57 1232.91,1223.29 1233.49,1222.85 1234.08,1220.03 1234.66,1219.98 1235.25,1218.59 1235.84,1219.5 1236.42,1219.39 1237.01,1216.45 1237.6,1217.82 1238.18,1215.04 1238.77,1215.27 1239.36,1217.87 1239.94,1219.27 1240.53,1217.88 1241.11,1219.18 1241.7,1221.78 1242.29,1220.2 1242.87,1220.13 1243.46,1215.88 1244.05,1214.49 1244.63,1215.81 1245.22,1217.15 1245.81,1215.69 1246.39,1216.95 1246.98,1217.01 1247.57,1216.85 1248.15,1211.67 1248.74,1214.45 1249.32,1214.38 1249.91,1215.63 1250.5,1214.52 1251.08,1213.63 1251.67,1216.23 1252.26,1217.51 1252.84,1214.66 1253.43,1217.25 1254.02,1216.11 1254.6,1220.2 1255.19,1216 1255.78,1217.54 1256.36,1217.47 1256.95,1217.44 1257.53,1216.11 1258.12,1214.68 1258.71,1213.64 1259.29,1211.64 1259.88,1212.92 1260.47,1214.5 1261.05,1213.18 1261.64,1214.63 1262.23,1213.54 1262.81,1215.28 1263.4,1214.13 1263.98,1217.96 1264.57,1215.35 1265.16,1216.67 1265.74,1218.11 1266.33,1216.75 1266.92,1214.06 1267.5,1215.48 1268.09,1212.98 1268.68,1213.03 1269.26,1214.53 1269.85,1215.82 1270.44,1217.4 1271.02,1217.48 1271.61,1216.35 1272.19,1215.15 1272.78,1216.31 1273.37,1212.69 1273.95,1211.76 1274.54,1214.48 1275.13,1216.05 1275.71,1218.45 1276.3,1215.74 1276.89,1215.78 1277.47,1214.71 1278.06,1214.89 1278.65,1214.97 1279.23,1214.85 1279.82,1216.38 1280.4,1216.24 1280.99,1215.15 1281.58,1216.38 1282.16,1213.97 1282.75,1213.19 1283.34,1214.52 1283.92,1217.3 1284.51,1218.35 1285.1,1219.71 1285.68,1220.74 1286.27,1219.31 1286.86,1216.64 1287.44,1216.63 1288.03,1215.18 1288.61,1216.7 1289.2,1219.5 1289.79,1220.62 1290.37,1220.38 1290.96,1217.44 1291.55,1216.1 1292.13,1217.41 1292.72,1216.16 1293.31,1221.45 1293.89,1220.96 1294.48,1219.4 1295.06,1220.47 1295.65,1221.38 1296.24,1218.69 1296.82,1218.51 1297.41,1216.88 1298,1218.03 1298.58,1216.52 1299.17,1215.32 1299.76,1215.61 1300.34,1214.38 1300.93,1214.32 1301.52,1213.12 1302.1,1215.87 1302.69,1215.99 1303.27,1217.23 1303.86,1215.86 1304.45,1215.98 1305.03,1216.17 1305.62,1216.21 1306.21,1217.19 1306.79,1215.73 1307.38,1217.27 1307.97,1214.55 1308.55,1214.78 1309.14,1216.06 1309.73,1218.55 1310.31,1217.25 1310.9,1216.17 1311.48,1213.64 1312.07,1212.79 1312.66,1213.02 1313.24,1213.19 1313.83,1214.68 1314.42,1212.21 1315,1212.26 1315.59,1212.71 1316.18,1211.51 1316.76,1211.92 1317.35,1212.1 1317.93,1212.51 1318.52,1212.76 1319.11,1213.33 1319.69,1211.13 1320.28,1212.8 1320.87,1213.1 1321.45,1214.48 1322.04,1211.68 1322.63,1215.92 1323.21,1213.52 1323.8,1213.97 1324.39,1216.66 1324.97,1216.91 1325.56,1218.36 1326.14,1218.57 1326.73,1216.31 1327.32,1216.39 1327.9,1219.18 1328.49,1219.02 1329.08,1219.02 1329.66,1222.68 1330.25,1219.9 1330.84,1217.31 1331.42,1217.43 1332.01,1216.47 1332.6,1220.12 1333.18,1222.58 1333.77,1220.89 1334.35,1218.28 1334.94,1221.04 1335.53,1222.18 1336.11,1223.3 1336.7,1220.43 1337.29,1222.62 1337.87,1223.69 1338.46,1224.55 1339.05,1224.12 1339.63,1225.2 1340.22,1223.58 1340.8,1224.59 1341.39,1222.88 1341.98,1221.53 1342.56,1222.55 1343.15,1222.2 1343.74,1219.4 1344.32,1221.86 1344.91,1220.3 1345.5,1219 1346.08,1221.42 1346.67,1221.56 1347.26,1221.32 1347.84,1222.48 1348.43,1224.76 1349.01,1224.22 1349.6,1223.77 1350.19,1225.95 1350.77,1229.49 1351.36,1228.64 1351.95,1227.85 1352.53,1227.21 1353.12,1228.1 1353.71,1226.09 1354.29,1226.72 1354.88,1227.08 1355.47,1225.42 1356.05,1226.13 1356.64,1225.97 1357.22,1226.73 1357.81,1219.91 1358.4,1218.48 1358.98,1216.08 1359.57,1214.93 1360.16,1209.86 1360.74,1208.73 1361.33,1210.51 1361.92,1209.56 1362.5,1212.56 1363.09,1215.34 1363.68,1219.21 1364.26,1220.54 1364.85,1217.69 1365.43,1217.85 1366.02,1217.58 1366.61,1218.73 1367.19,1221.3 1367.78,1221.14 1368.37,1222.24 1368.95,1222.01 1369.54,1221.76 1370.13,1219.91 1370.71,1221.29 1371.3,1221.11 1371.88,1221.13 1372.47,1219.76 1373.06,1220.95 1373.64,1219.36 1374.23,1217.57 1374.82,1217.19 1375.4,1214.73 1375.99,1216.17 1376.58,1216.2 1377.16,1216.2 1377.75,1213.29 1378.34,1212.34 1378.92,1214.02 1379.51,1212.85 1380.09,1213.15 1380.68,1214.88 1381.27,1213.57 1381.85,1213.61 1382.44,1215.18 1383.03,1216.45 1383.61,1216.18 1384.2,1217.58 1384.79,1221.44 1385.37,1221.04 1385.96,1216.91 1386.55,1214.26 1387.13,1215.59 1387.72,1214.38 1388.3,1214.57 1388.89,1213.21 1389.48,1213.46 1390.06,1212.41 1390.65,1210.09 1391.24,1209.07 1391.82,1208.23 1392.41,1210.1 1393,1210.61 1393.58,1211.25 1394.17,1209.95 1394.75,1211.53 1395.34,1215.49 1395.93,1217.14 1396.51,1215.93 1397.1,1216.44 1397.69,1215.17 1398.27,1215.35 1398.86,1214.16 1399.45,1215.31 1400.03,1216.84 1400.62,1218.05 1401.21,1214.24 1401.79,1214.32 1402.38,1218.27 1402.96,1215.76 1403.55,1218.68 1404.14,1219.89 1404.72,1218.5 1405.31,1219.59 1405.9,1218.28 1406.48,1216.96 1407.07,1218.3 1407.66,1219.14 1408.24,1219.03 1408.83,1217.53 1409.42,1215.99 1410,1216.07 1410.59,1213.43 1411.17,1214.83 1411.76,1214.87 1412.35,1216.39 1412.93,1213.9 1413.52,1213.87 1414.11,1213.94 1414.69,1214.03 1415.28,1215.62 1415.87,1215.46 1416.45,1212.96 1417.04,1212.1 1417.63,1213.59 1418.21,1215.04 1418.8,1216.45 1419.38,1217.8 1419.97,1217.89 1420.56,1217.73 1421.14,1222.86 1421.73,1221.46 1422.32,1220.06 1422.9,1217.47 1423.49,1217.41 1424.08,1215.85 1424.66,1214.29 1425.25,1216.9 1425.83,1215.69 1426.42,1216.05 1427.01,1216.05 1427.59,1218.66 1428.18,1218.7 1428.77,1218.47 1429.35,1219.63 1429.94,1219.43 1430.53,1223.24 1431.11,1217.79 1431.7,1217.33 1432.29,1218.4 1432.87,1219.79 1433.46,1215.93 1434.04,1214.37 1434.63,1211.89 1435.22,1212.29 1435.8,1216.34 1436.39,1215.28 1436.98,1212.93 1437.56,1213.16 1438.15,1214.69 1438.74,1214.79 1439.32,1212.35 1439.91,1211.27 1440.5,1211.61 1441.08,1211.72 1441.67,1210.88 1442.25,1213.94 1442.84,1214.25 1443.43,1215.53 1444.01,1217.03 1444.6,1218.06 1445.19,1217.69 1445.77,1217.7 1446.36,1218.01 1446.95,1216.47 1447.53,1216.6 1448.12,1217.66 1448.7,1218.46 1449.29,1220.02 1449.88,1219.89 1450.46,1221.07 1451.05,1220.83 1451.64,1220.47 1452.22,1224.14 1452.81,1225.35 1453.4,1226.12 1453.98,1225.78 1454.57,1225.29 1455.16,1223.56 1455.74,1219.38 1456.33,1220.63 1456.91,1222.05 1457.5,1222.04 1458.09,1222.99 1458.67,1223.99 1459.26,1223.67 1459.85,1223.35 1460.43,1221.89 1461.02,1221.62 1461.61,1221.22 1462.19,1218.54 1462.78,1217.46 1463.37,1217.5 1463.95,1221.03 1464.54,1220.56 1465.12,1220.33 1465.71,1221.56 1466.3,1221.53 1466.88,1222.55 1467.47,1223.66 1468.06,1223.27 1468.64,1221.63 1469.23,1221.29 1469.82,1219.75 1470.4,1216.96 1470.99,1214.43 1471.57,1214.55 1472.16,1214.72 1472.75,1214.9 1473.33,1213.67 1473.92,1212.68 1474.51,1211.79 1475.09,1213.4 1475.68,1213.39 1476.27,1213.5 1476.85,1212.62 1477.44,1215.45 1478.03,1216.56 1478.61,1216.43 1479.2,1217.59 1479.78,1213.77 1480.37,1211.53 1480.96,1208.97 1481.54,1212.05 1482.13,1210.71 1482.72,1210.84 1483.3,1211.2 1483.89,1212.59 1484.48,1211.71 1485.06,1214.59 1485.65,1212.29 1486.24,1215.6 1486.82,1215.61 1487.41,1214.65 1487.99,1214.84 1488.58,1212.72 1489.17,1214.2 1489.75,1213.31 1490.34,1217.49 1490.93,1216.26 1491.51,1215.11 1492.1,1215.28 1492.69,1214 1493.27,1218.08 1493.86,1216.46 1494.45,1214.05 1495.03,1214.22 1495.62,1212.95 1496.2,1213.32 1496.79,1212.06 1497.38,1213.57 1497.96,1213.53 1498.55,1213.76 1499.14,1214.04 1499.72,1215.27 1500.31,1217.84 1500.9,1215.05 1501.48,1215.19 1502.07,1218.08 1502.65,1220.52 1503.24,1220.52 1503.83,1219.17 1504.41,1220.01 1505,1220.03 1505.59,1219.54 1506.17,1219.71 1506.76,1219.51 1507.35,1219.33 1507.93,1219.23 1508.52,1216.5 1509.11,1215.12 1509.69,1215.13 1510.28,1216.39 1510.86,1220.46 1511.45,1218.99 1512.04,1218.99 1512.62,1216.43 1513.21,1216.5 1513.8,1216.31 1514.38,1216.62 1514.97,1215.57 1515.56,1214.11 1516.14,1211.85 1516.73,1211.83 1517.32,1210.65 1517.9,1209.78 1518.49,1212.66 1519.07,1214.22 1519.66,1214.39 1520.25,1214.55 1520.83,1214.64 1521.42,1213.78 1522.01,1212.8 1522.59,1214.07 1523.18,1215.59 1523.77,1212.85 1524.35,1213.2 1524.94,1216.19 1525.52,1217.61 1526.11,1218.93 1526.7,1217.97 1527.28,1217.9 1527.87,1216.52 1528.46,1217.58 1529.04,1212.63 1529.63,1214.08 1530.22,1214.2 1530.8,1214.53 1531.39,1213.32 1531.98,1210.91 1532.56,1212.74 1533.15,1212.78 1533.73,1211.42 1534.32,1214.42 1534.91,1214.69 1535.49,1214.82 1536.08,1216.03 1536.67,1217.27 1537.25,1214.76 1537.84,1216.7 1538.43,1221.8 1539.01,1221.61 1539.6,1218.83 1540.19,1218.8 1540.77,1221.35 1541.36,1219.65 1541.94,1219.75 1542.53,1219.55 1543.12,1219.4 1543.7,1219.55 1544.29,1218.04 1544.88,1216.52 1545.46,1216.34 1546.05,1216.55 1546.64,1219.26 1547.22,1221.45 1547.81,1221.31 1548.4,1218.44 1548.98,1219.54 1549.57,1220.39 1550.15,1221.45 1550.74,1219.8 1551.33,1221.28 1551.91,1221.27 1552.5,1220.78 1553.09,1219.29 1553.67,1220.51 1554.26,1221.57 1554.85,1224.2 1555.43,1223.84 1556.02,1221 1556.6,1220.8 1557.19,1218.97 1557.78,1219.01 1558.36,1219.03 1558.95,1220.48 1559.54,1220.59 1560.12,1218.87 1560.71,1218.85 1561.3,1221.45 1561.88,1219.99 1562.47,1218.33 1563.06,1218.34 1563.64,1215.56 1564.23,1215.51 1564.81,1214.47 1565.4,1213.17 1565.99,1210.89 1566.57,1211.31 1567.16,1210.42 1567.75,1211.08 1568.33,1212.49 1568.92,1213.76 1569.51,1215.1 1570.09,1213.61 1570.68,1216.13 1571.27,1218.64 1571.85,1217.23 1572.44,1218.57 1573.02,1218.25 1573.61,1215.46 1574.2,1212.95 1574.78,1213.51 1575.37,1212.38 1575.96,1212.66 1576.54,1213 1577.13,1216.02 1577.72,1220 1578.3,1221.05 1578.89,1223.47 1579.47,1223.25 1580.06,1221.86 1580.65,1219.1 1581.23,1219.25 1581.82,1220.69 1582.41,1219.22 1582.99,1217.8 1583.58,1217.7 1584.17,1216.11 1584.75,1214.66 1585.34,1215.02 1585.93,1213.81 1586.51,1212.62 1587.1,1212.59 1587.68,1212.66 1588.27,1211.42 1588.86,1213.13 1589.44,1214.39 1590.03,1217.21 1590.62,1216.04 1591.2,1214.72 1591.79,1216.12 1592.38,1214.89 1592.96,1217.55 1593.55,1217.59 1594.14,1217.55 1594.72,1219.18 1595.31,1220.38 1595.89,1221.43 1596.48,1221.26 1597.07,1219.48 1597.65,1216.66 1598.24,1216.67 1598.83,1215.25 1599.41,1220.57 1600,1222.78 1600.59,1226.33 1601.17,1225.92 1601.76,1225.69 1602.34,1226.44 1602.93,1227.16 1603.52,1225.05 1604.1,1224.63 1604.69,1226.83 1605.28,1226.31 1605.86,1225.57 1606.45,1225.27 1607.04,1223.41 1607.62,1224.59 1608.21,1223.98 1608.8,1222.22 1609.38,1224.66 1609.97,1225.56 1610.55,1223.63 1611.14,1223.46 1611.73,1221.64 1612.31,1222.67 1612.9,1223.94 1613.49,1222.58 1614.07,1220.86 1614.66,1223 1615.25,1220.01 1615.83,1220.99 1616.42,1220.82 1617.01,1219.18 1617.59,1220.41 1618.18,1220.33 1618.76,1219.01 1619.35,1216.45 1619.94,1215.07 1620.52,1216.38 1621.11,1213.96 1621.7,1213.99 1622.28,1213.97 1622.87,1211.73 1623.46,1213.19 1624.04,1209.37 1624.63,1211.04 1625.22,1210.04 1625.8,1214.12 1626.39,1214.42 1626.97,1211.93 1627.56,1212.14 1628.15,1211.13 1628.73,1212.41 1629.32,1214.1 1629.91,1212.71 1630.49,1212.92 1631.08,1211.58 1631.67,1213.37 1632.25,1210.95 1632.84,1211.48 1633.42,1209.26 1634.01,1210.87 1634.6,1209.9 1635.18,1211.62 1635.77,1213.32 1636.36,1209.59 1636.94,1209.99 1637.53,1210.65 1638.12,1209.92 1638.7,1211.41 1639.29,1210.44 1639.88,1210.68 1640.46,1212.26 1641.05,1211.57 1641.63,1210.66 1642.22,1213.47 1642.81,1214.92 1643.39,1216.3 1643.98,1217.44 1644.57,1220.03 1645.15,1221.35 1645.74,1216.14 1646.33,1217.51 1646.91,1214.9 1647.5,1214.77 1648.09,1215.04 1648.67,1215.29 1649.26,1216.53 1649.84,1216.42 1650.43,1220.22 1651.02,1224.19 1651.6,1223.76 1652.19,1225.94 1652.78,1224.4 1653.36,1226.29 1653.95,1225.91 1654.54,1226.54 1655.12,1224.59 1655.71,1221.72 1656.29,1221.58 1656.88,1222.8 1657.47,1221.61 1658.05,1220.34 1658.64,1220.25 1659.23,1218.92 1659.81,1218.88 1660.4,1218.75 1660.99,1219.08 1661.57,1217.77 1662.16,1216.5 1662.75,1216.59 1663.33,1217.56 1663.92,1217.6 1664.5,1217.86 1665.09,1218.9 1665.68,1221.14 1666.26,1222.25 1666.85,1223.18 1667.44,1222.98 1668.02,1222.87 1668.61,1221.18 1669.2,1223.67 1669.78,1221.91 1670.37,1218.87 1670.96,1217.5 1671.54,1217.81 1672.13,1218.74 1672.71,1214.85 1673.3,1217.36 1673.89,1217.19 1674.47,1217.13 1675.06,1214.44 1675.65,1215.7 1676.23,1218.37 1676.82,1217.03 1677.41,1218.39 1677.99,1217.04 1678.58,1217.01 1679.17,1215.71 1679.75,1214.44 1680.34,1214.51 1680.92,1213.2 1681.51,1214.4 1682.1,1214.49 1682.68,1214.81 1683.27,1216.11 1683.86,1216.04 1684.44,1216.06 1685.03,1216.17 1685.62,1215.11 1686.2,1216.42 1686.79,1212.66 1687.37,1215.67 1687.96,1216.96 1688.55,1215.5 1689.13,1214.36 1689.72,1214.57 1690.31,1215.95 1690.89,1214.56 1691.48,1214.34 1692.07,1215.99 1692.65,1216.05 1693.24,1218.93 1693.83,1216.02 1694.41,1216.02 1695,1217.19 1695.58,1217.92 1696.17,1220.67 1696.76,1220.72 1697.34,1221.86 1697.93,1219.09 1698.52,1215.27 1699.1,1214.03 1699.69,1215.56 1700.28,1216.18 1700.86,1216.36 1701.45,1216.14 1702.04,1212.33 1702.62,1212.61 1703.21,1212.58 1703.79,1211.71 1704.38,1211.85 1704.97,1212.14 1705.55,1212.53 1706.14,1211.46 1706.73,1214.58 1707.31,1214.75 1707.9,1216.2 1708.49,1216.44 1709.07,1216.43 1709.66,1217.83 1710.24,1219.04 1710.83,1219.35 1711.42,1218.11 1712,1220.62 1712.59,1220.51 1713.18,1221.61 1713.76,1220.18 1714.35,1221.4 1714.94,1222.51 1715.52,1221.08 1716.11,1222.43 1716.7,1221 1717.28,1220.98 1717.87,1222.23 1718.45,1224.35 1719.04,1223.83 1719.63,1223.5 1720.21,1220.72 1720.8,1219.22 1721.39,1222.87 1721.97,1218.74 1722.56,1216.17 1723.15,1217.18 1723.73,1215.93 1724.32,1217.26 1724.91,1214.65 1725.49,1213.74 1726.08,1212.59 1726.66,1212.49 1727.25,1215.28 1727.84,1218.16 1728.42,1218.22 1729.01,1215.49 1729.6,1215.46 1730.18,1215.55 1730.77,1216.65 1731.36,1216.63 1731.94,1214.2 1732.53,1216.8 1733.11,1218.2 1733.7,1216.7 1734.29,1216.51 1734.87,1216.51 1735.46,1217.97 1736.05,1217.91 1736.63,1215.16 1737.22,1216.56 1737.81,1211.06 1738.39,1211.4 1738.98,1210.69 1739.57,1209.67 1740.15,1210.08 1740.74,1214.03 1741.32,1215.25 1741.91,1219.28 1742.5,1217.94 1743.08,1217.95 1743.67,1217.98 1744.26,1216.63 1744.84,1217.72 1745.43,1217.8 1746.02,1217.83 1746.6,1216.45 1747.19,1219.08 1747.78,1218.66 1748.36,1218.59 1748.95,1217.3 1749.53,1218.73 1750.12,1217.11 1750.71,1217.11 1751.29,1216.96 1751.88,1218.27 1752.47,1219.49 1753.05,1219.33 1753.64,1219.34 1754.23,1217.91 1754.81,1217.96 1755.4,1220.36 1755.99,1221.5 1756.57,1222.61 1757.16,1222.33 1757.74,1220.87 1758.33,1220.78 1758.92,1223.35 1759.5,1220.75 1760.09,1223.08 1760.68,1224.04 1761.26,1224.93 1761.85,1226.93 1762.44,1226.44 1763.02,1223.35 1763.61,1218.85 1764.19,1217.25 1764.78,1213.45 1765.37,1218.99 1765.95,1218.92 1766.54,1218.9 1767.13,1214.68 1767.71,1213.39 1768.3,1212.55 1768.89,1213.96 1769.47,1215.46 1770.06,1217.84 1770.65,1216.76 1771.23,1212.95 1771.82,1212.83 1772.4,1214.36 1772.99,1214.67 1773.58,1213.52 1774.16,1213.54 1774.75,1213.69 1775.34,1212.61 1775.92,1211.48 1776.51,1211.54 1777.1,1211.87 1777.68,1210.91 1778.27,1209.85 1778.86,1208.78 1779.44,1207.83 1780.03,1209.97 1780.61,1210.08 1781.2,1210.43 1781.79,1209.78 1782.37,1211.8 1782.96,1213.54 1783.55,1216.38 1784.13,1221.39 1784.72,1221.09 1785.31,1220.69 1785.89,1220.54 1786.48,1219.36 1787.06,1219.3 1787.65,1217.87 1788.24,1219.2 1788.82,1219.27 1789.41,1219.33 1790,1219.45 1790.58,1220.7 1791.17,1219.31 1791.76,1219.26 1792.34,1216.74 1792.93,1216.41 1793.52,1216.74 1794.1,1214.37 1794.69,1214.56 1795.27,1215.93 1795.86,1216.17 1796.45,1211.07 1797.03,1208.72 1797.62,1209.26 1798.21,1212.31 1798.79,1210.14 1799.38,1212 1799.97,1212.02 1800.55,1208.48 1801.14,1210.43 1801.73,1212.21 1802.31,1212.39 1802.9,1212.61 1803.48,1216.59 1804.07,1215.12 1804.66,1217.68 1805.24,1217.65 1805.83,1213.92 1806.42,1211.59 1807,1209.46 1807.59,1213.71 1808.18,1214.02 1808.76,1214.26 1809.35,1213.44 1809.94,1215.02 1810.52,1213.62 1811.11,1214.92 1811.69,1217.33 1812.28,1218.5 1812.87,1215.91 1813.45,1221.04 1814.04,1218.1 1814.63,1218.13 1815.21,1217.07 1815.8,1214.75 1816.39,1216.22 1816.97,1216.26 1817.56,1214.81 1818.14,1214.67 1818.73,1214.84 1819.32,1213.39 1819.9,1216.02 1820.49,1215.92 1821.08,1214.66 1821.66,1214.45 1822.25,1214.67 1822.84,1210.95 1823.42,1212.5 1824.01,1212.89 1824.6,1215.76 1825.18,1214.33 1825.77,1212.07 1826.35,1211.26 1826.94,1211.42 1827.53,1215.5 1828.11,1217.08 1828.7,1217.12 1829.29,1218.66 1829.87,1218.54 1830.46,1218.51 1831.05,1219.58 1831.63,1223.21 1832.22,1222.87 1832.81,1222.62 1833.39,1222.25 1833.98,1221.07 1834.56,1221.97 1835.15,1222.83 1835.74,1222.69 1836.32,1222.39 1836.91,1221.95 1837.5,1220.26 1838.08,1222.32 1838.67,1219.27 1839.26,1219.36 1839.84,1219.2 1840.43,1220.39 1841.01,1218.78 1841.6,1221.59 1842.19,1222.8 1842.77,1223.69 1843.36,1221.84 1843.95,1220.45 1844.53,1222.97 1845.12,1221.33 1845.71,1219.86 1846.29,1222.19 1846.88,1222.05 1847.47,1221.76 1848.05,1221.39 1848.64,1222.55 1849.22,1222.4 1849.81,1219.63 1850.4,1218.27 1850.98,1218.1 1851.57,1217.83 1852.16,1220.28 1852.74,1219.99 1853.33,1219.94 1853.92,1219.63 1854.5,1219.34 1855.09,1217.84 1855.68,1219.2 1856.26,1221.84 1856.85,1218.74 1857.43,1216.09 1858.02,1217.56 1858.61,1216.27 1859.19,1216.23 1859.78,1216.32 1860.37,1215.06 1860.95,1213.99 1861.54,1214.49 1862.13,1215.86 1862.71,1219.84 1863.3,1223.61 1863.88,1224.69 1864.47,1224.04 1865.06,1223.48 1865.64,1224.56 1866.23,1226.69 1866.82,1224.69 1867.4,1220.5 1867.99,1216.58 1868.58,1217.92 1869.16,1216.28 1869.75,1214.89 1870.34,1216.43 1870.92,1216.58 1871.51,1216.57 1872.09,1212.66 1872.68,1211.82 1873.27,1210.99 1873.85,1211.49 1874.44,1215.69 1875.03,1213.14 1875.61,1212.16 1876.2,1208.57 1876.79,1207.58 1877.37,1209.36 1877.96,1209.84 1878.55,1212.76 1879.13,1214.06 1879.72,1215.42 1880.3,1215.65 1880.89,1218.07 1881.48,1217.88 1882.06,1218.11 1882.65,1218.22 1883.24,1218.14 1883.82,1216.97 1884.41,1213.08 1885,1209.41 1885.58,1208.53 1886.17,1207.73 1886.76,1208 1887.34,1209.75 1887.93,1208.88 1888.51,1211.84 1889.1,1212.16 1889.69,1211.28 1890.27,1211.81 1890.86,1211.95 1891.45,1210.8 1892.03,1205.93 1892.62,1206.49 1893.21,1206.87 1893.79,1204.72 1894.38,1203.99 1894.96,1206.05 1895.55,1205.45 1896.14,1207.19 1896.72,1207.73 1897.31,1209.68 1897.9,1209.91 1898.48,1210.59 1899.07,1210.94 1899.66,1212.49 1900.24,1214.06 1900.83,1214.16 1901.42,1215.74 1902,1217.22 1902.59,1218.38 1903.17,1218.51 1903.76,1217.35 1904.35,1217.39 1904.93,1218.97 1905.52,1220.2 1906.11,1222.51 1906.69,1224.86 1907.28,1223.36 1907.87,1221.97 1908.45,1220.58 1909.04,1217.93 1909.63,1219.28 1910.21,1217.92 1910.8,1218.97 1911.38,1217.38 1911.97,1218.63 1912.56,1217.19 1913.14,1214.45 1913.73,1214.51 1914.32,1213.47 1914.9,1215.29 1915.49,1214.02 1916.08,1214.47 1916.66,1214.71 1917.25,1214.85 1917.83,1217.69 1918.42,1216.57 1919.01,1215.37 1919.59,1213.91 1920.18,1216.7 1920.77,1215.55 1921.35,1216.71 1921.94,1217.03 1922.53,1215.81 1923.11,1215.82 1923.7,1215.89 1924.29,1217.27 1924.87,1217 1925.46,1219.58 1926.04,1219.53 1926.63,1221.96 1927.22,1221.73 1927.8,1220.11 1928.39,1218.57 1928.98,1218.47 1929.56,1218.31 1930.15,1218.05 1930.74,1216.75 1931.32,1218.04 1931.91,1220.69 1932.5,1221.84 1933.08,1221.78 1933.67,1219.07 1934.25,1217.44 1934.84,1217.32 1935.43,1218.32 1936.01,1219.41 1936.6,1218.98 1937.19,1218.79 1937.77,1219.83 1938.36,1223.63 1938.95,1222.3 1939.53,1220.92 1940.12,1222.15 1940.71,1220.68 1941.29,1219.28 1941.88,1219.11 1942.46,1220.13 1943.05,1219.8 1943.64,1219.62 1944.22,1220.67 1944.81,1218.99 1945.4,1218.62 1945.98,1216.9 1946.57,1213.94 1947.16,1211.32 1947.74,1210.11 1948.33,1211.59 1948.91,1211.89 1949.5,1210.91 1950.09,1211.28 1950.67,1212.89 1951.26,1216.85 1951.85,1216.99 1952.43,1217.13 1953.02,1216.89 1953.61,1215.9 1954.19,1217.24 1954.78,1217.36 1955.37,1218.72 1955.95,1219.94 1956.54,1221.42 1957.12,1221.53 1957.71,1221.4 1958.3,1219.9 1958.88,1220.92 1959.47,1221.83 1960.06,1222.97 1960.64,1223.88 1961.23,1223.54 1961.82,1222.09 1962.4,1220.38 1962.99,1218.72 1963.58,1217.63 1964.16,1219.05 1964.75,1217.78 1965.33,1219.34 1965.92,1220.22 1966.51,1218.47 1967.09,1220.94 1967.68,1223.14 1968.27,1222.59 1968.85,1219.74 1969.44,1219.2 1970.03,1221.56 1970.61,1221.4 1971.2,1218.6 1971.78,1221.49 1972.37,1221.26 1972.96,1218.42 1973.54,1216.88 1974.13,1215.28 1974.72,1215.23 1975.3,1216.51 1975.89,1215.39 1976.48,1215.49 1977.06,1211.64 1977.65,1213.35 1978.24,1214.82 1978.82,1217.71 1979.41,1219.08 1979.99,1217.64 1980.58,1218.97 1981.17,1217.79 1981.75,1217.61 1982.34,1212.31 1982.93,1212.43 1983.51,1211.41 1984.1,1214.39 1984.69,1214.56 1985.27,1215.85 1985.86,1216.88 1986.45,1214.51 1987.03,1214.54 1987.62,1214.64 1988.2,1213.25 1988.79,1212.27 1989.38,1212.86 1989.96,1209.21 1990.55,1207.02 1991.14,1205.04 1991.72,1205.81 1992.31,1204.93 1992.9,1204.17 1993.48,1207.45 1994.07,1207.82 1994.65,1209.66 1995.24,1211.77 1995.83,1210.77 1996.41,1210.98 1997,1210.18 1997.59,1212.95 1998.17,1214.82 1998.76,1212.54 1999.35,1214.05 1999.93,1215.66 2000.52,1215.6 2001.11,1215.87 2001.69,1215.95 2002.28,1214.51 2002.86,1214.64 2003.45,1213.69 2004.04,1213.83 2004.62,1215.41 2005.21,1214.39 2005.8,1215.69 2006.38,1217.14 2006.97,1220.87 2007.56,1218.02 2008.14,1218.26 2008.73,1222.21 2009.32,1220.6 2009.9,1219.08 2010.49,1219.13 2011.07,1218.7 2011.66,1221.28 2012.25,1221.32 2012.83,1217.26 2013.42,1217.3 2014.01,1215.93 2014.59,1217.66 2015.18,1214.82 2015.77,1217.54 2016.35,1217.6 2016.94,1217.63 2017.53,1218.44 2018.11,1218.35 2018.7,1219.79 2019.28,1218.53 2019.87,1217.09 2020.46,1219.67 2021.04,1218.16 2021.63,1218.24 2022.22,1219.24 2022.8,1218.17 2023.39,1217.14 2023.98,1215.94 2024.56,1217.38 2025.15,1218.67 2025.73,1216.11 2026.32,1216.18 2026.91,1216.17 2027.49,1214.85 2028.08,1214.95 2028.67,1216.4 2029.25,1215.13 2029.84,1213.9 2030.43,1214.03 2031.01,1211.67 2031.6,1214.38 2032.19,1214.6 2032.77,1213.67 2033.36,1212.6 2033.94,1211.83 2034.53,1212.31 2035.12,1213.49 2035.7,1213.59 2036.29,1216.45 2036.88,1218.11 2037.46,1218.18 2038.05,1219.11 2038.64,1219.01 2039.22,1219.03 2039.81,1221.62 2040.4,1222.49 2040.98,1223.46 2041.57,1226.94 2042.15,1226.45 2042.74,1227.21 2043.33,1226.75 2043.91,1226.23 2044.5,1225.57 2045.09,1223.8 2045.67,1224.57 2046.26,1223.89 2046.85,1221.89 2047.43,1223.02 2048.02,1224.22 2048.6,1223.73 2049.19,1220.83 2049.78,1223.2 2050.36,1224.12 2050.95,1222.48 2051.54,1222.19 2052.12,1221.82 2052.71,1222.73 2053.3,1222.22 2053.88,1225.85 2054.47,1224.11 2055.06,1222.8 2055.64,1222.7 2056.23,1223.87 2056.81,1222.22 2057.4,1220.56 2057.99,1216.61 2058.57,1216.52 2059.16,1214.99 2059.75,1215.31 2060.33,1214.2 2060.92,1212.9 2061.51,1215.69 2062.09,1217 2062.68,1215.45 2063.27,1214.32 2063.85,1213.05 2064.44,1213.08 2065.02,1214.62 2065.61,1215.76 2066.2,1214.38 2066.78,1215.78 2067.37,1217 2067.96,1219.7 2068.54,1219.48 2069.13,1219.39 2069.72,1219.39 2070.3,1218.02 2070.89,1220.41 2071.48,1218.53 2072.06,1217 2072.65,1216.87 2073.23,1217.96 2073.82,1219.29 2074.41,1219.36 2074.99,1216.81 2075.58,1214.19 2076.17,1210.43 2076.75,1210.96 2077.34,1211.03 2077.93,1207.4 2078.51,1208.06 2079.1,1211.16 2079.68,1212.7 2080.27,1208.97 2080.86,1209.9 2081.44,1213.07 2082.03,1214.7 2082.62,1217.24 2083.2,1214.54 2083.79,1215.94 2084.38,1215.95 2084.96,1214.57 2085.55,1215.87 2086.14,1215.81 2086.72,1214.45 2087.31,1214.6 2087.89,1218.58 2088.48,1219.73 2089.07,1216.87 2089.65,1216.75 2090.24,1220.74 2090.83,1219.21 2091.41,1216.44 2092,1217.82 2092.59,1217.59 2093.17,1219.06 2093.76,1221.64 2094.35,1222.79 2094.93,1222.26 2095.52,1221.94 2096.1,1222.76 2096.69,1222.21 2097.28,1221.8 2097.86,1218.93 2098.45,1220.02 2099.04,1219.83 2099.62,1219.76 2100.21,1219.45 2100.8,1219.39 2101.38,1219.27 2101.97,1217.74 2102.55,1217.57 2103.14,1217.54 2103.73,1217.57 2104.31,1217.37 2104.9,1214.57 2105.49,1214.71 2106.07,1214.52 2106.66,1214.68 2107.25,1216.09 2107.83,1217.42 2108.42,1216.05 2109.01,1213.56 2109.59,1213.64 2110.18,1213.72 2110.76,1214.12 2111.35,1214.25 2111.94,1214.42 2112.52,1212.06 2113.11,1208.29 2113.7,1207.61 2114.28,1207.85 2114.87,1206.83 2115.46,1207.23 2116.04,1206.56 2116.63,1207.13 2117.22,1207.99 2117.8,1211.32 2118.39,1211.56 2118.97,1212.05 2119.56,1209.53 2120.15,1207.1 2120.73,1207.85 2121.32,1208.37 2121.91,1207.8 2122.49,1211.1 2123.08,1211.26 2123.67,1211.54 2124.25,1211.96 2124.84,1214.69 2125.42,1215.04 2126.01,1216.56 2126.6,1216.65 2127.18,1221.85 2127.77,1219.22 2128.36,1219.26 2128.94,1219.13 2129.53,1219.34 2130.12,1220.5 2130.7,1222.73 2131.29,1222.27 2131.88,1224.6 2132.46,1225.33 2133.05,1225.11 2133.63,1224.65 2134.22,1221.72 2134.81,1221.46 2135.39,1222.62 2135.98,1219.8 2136.57,1221.02 2137.15,1219.54 2137.74,1219.47 2138.33,1219.57 2138.91,1223.12 2139.5,1222.71 2140.09,1223.68 2140.67,1222.13 2141.26,1221.82 2141.84,1221.43 2142.43,1222.58 2143.02,1220.92 2143.6,1219.72 2144.19,1218.17 2144.78,1220.7 2145.36,1220.42 2145.95,1217.63 2146.54,1217.54 2147.12,1217.42 2147.71,1217.61 2148.3,1217.54 2148.88,1216.72 2149.47,1215.59 2150.05,1216.95 2150.64,1217.27 2151.23,1214.8 2151.81,1218.71 2152.4,1218.56 2152.99,1219.74 2153.57,1220.13 2154.16,1217.09 2154.75,1217.22 2155.33,1219.96 2155.92,1219.84 2156.5,1221.01 2157.09,1220.76 2157.68,1221.66 2158.26,1220.11 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1217.58 L986.612 1217.58 L987.198 1217.58 L987.785 1217.58 L988.371 1217.58 L988.957 1217.58 L989.544 1217.58 L990.13 1217.58 L990.717 1217.58 L991.303 1217.58 L991.889 1217.58 L992.476 1217.58 L993.062 1217.58 L993.649 1217.58 L994.235 1217.58 L994.822 1217.58 L995.408 1217.58 L995.994 1217.58 L996.581 1217.58 L997.167 1217.58 L997.754 1217.58 L998.34 1217.58 L998.926 1217.58 L999.513 1217.58 L1000.1 1217.58 L1000.69 1217.58 L1001.27 1217.58 L1001.86 1217.58 L1002.44 1217.58 L1003.03 1217.58 L1003.62 1217.58 L1004.2 1217.58 L1004.79 1217.58 L1005.38 1217.58 L1005.96 1217.58 L1006.55 1217.58 L1007.14 1217.58 L1007.72 1217.58 L1008.31 1217.58 L1008.9 1217.58 L1009.48 1217.58 L1010.07 1217.58 L1010.65 1217.58 L1011.24 1217.58 L1011.83 1217.58 L1012.41 1217.58 L1013 1217.58 L1013.59 1217.58 L1014.17 1217.58 L1014.76 1217.58 L1015.35 1217.58 L1015.93 1217.58 L1016.52 1217.58 L1017.11 1217.58 L1017.69 1217.58 L1018.28 1217.58 L1018.86 1217.58 L1019.45 1217.58 L1020.04 1217.58 L1020.62 1217.58 L1021.21 1217.58 L1021.8 1217.58 L1022.38 1217.58 L1022.97 1217.58 L1023.56 1217.58 L1024.14 1217.58 L1024.73 1217.58 L1025.32 1217.58 L1025.9 1217.58 L1026.49 1217.58 L1027.07 1217.58 L1027.66 1217.58 L1028.25 1217.58 L1028.83 1217.58 L1029.42 1217.58 L1030.01 1217.58 L1030.59 1217.58 L1031.18 1217.58 L1031.77 1217.58 L1032.35 1217.58 L1032.94 1217.58 L1033.52 1217.58 L1034.11 1217.58 L1034.7 1217.58 L1035.28 1217.58 L1035.87 1217.58 L1036.46 1217.58 L1037.04 1217.58 L1037.63 1217.58 L1038.22 1217.58 L1038.8 1217.58 L1039.39 1217.58 L1039.98 1217.58 L1040.56 1217.58 L1041.15 1217.58 L1041.73 1217.58 L1042.32 1217.58 L1042.91 1217.58 L1043.49 1217.58 L1044.08 1217.58 L1044.67 1217.58 L1045.25 1217.58 L1045.84 1217.58 L1046.43 1217.58 L1047.01 1217.58 L1047.6 1217.58 L1048.19 1217.58 L1048.77 1217.58 L1049.36 1217.58 L1049.94 1217.58 L1050.53 1217.58 L1051.12 1217.58 L1051.7 1217.58 L1052.29 1217.58 L1052.88 1217.58 L1053.46 1217.58 L1054.05 1217.58 L1054.64 1217.58 L1055.22 1217.58 L1055.81 1217.58 L1056.39 1217.58 L1056.98 1217.58 L1057.57 1217.58 L1058.15 1217.58 L1058.74 1217.58 L1059.33 1217.58 L1059.91 1217.58 L1060.5 1217.58 L1061.09 1217.58 L1061.67 1217.58 L1062.26 1217.58 L1062.85 1217.58 L1063.43 1217.58 L1064.02 1217.58 L1064.6 1217.58 L1065.19 1217.58 L1065.78 1217.58 L1066.36 1217.58 L1066.95 1217.58 L1067.54 1217.58 L1068.12 1217.58 L1068.71 1217.58 L1069.3 1217.58 L1069.88 1217.58 L1070.47 1217.58 L1071.06 1217.58 L1071.64 1217.58 L1072.23 1217.58 L1072.81 1217.58 L1073.4 1217.58 L1073.99 1217.58 L1074.57 1217.58 L1075.16 1217.58 L1075.75 1217.58 L1076.33 1217.58 L1076.92 1217.58 L1077.51 1217.58 L1078.09 1217.58 L1078.68 1217.58 L1079.26 1217.58 L1079.85 1217.58 L1080.44 1217.58 L1081.02 1217.58 L1081.61 1217.58 L1082.2 1217.58 L1082.78 1217.58 L1083.37 1217.58 L1083.96 1217.58 L1084.54 1217.58 L1085.13 1217.58 L1085.72 1217.58 L1086.3 1217.58 L1086.89 1217.58 L1087.47 1217.58 L1088.06 1217.58 L1088.65 1217.58 L1089.23 1217.58 L1089.82 1217.58 L1090.41 1217.58 L1090.99 1217.58 L1091.58 1217.58 L1092.17 1217.58 L1092.75 1217.58 L1093.34 1217.58 L1093.93 1217.58 L1094.51 1217.58 L1095.1 1217.58 L1095.68 1217.58 L1096.27 1217.58 L1096.86 1217.58 L1097.44 1217.58 L1098.03 1217.58 L1098.62 1217.58 L1099.2 1217.58 L1099.79 1217.58 L1100.38 1217.58 L1100.96 1217.58 L1101.55 1217.58 L1102.14 1217.58 L1102.72 1217.58 L1103.31 1217.58 L1103.89 1217.58 L1104.48 1217.58 L1105.07 1217.58 L1105.65 1217.58 L1106.24 1217.58 L1106.83 1217.58 L1107.41 1217.58 L1108 1217.58 L1108.59 1217.58 L1109.17 1217.58 L1109.76 1217.58 L1110.34 1217.58 L1110.93 1217.58 L1111.52 1217.58 L1112.1 1217.58 L1112.69 1217.58 L1113.28 1217.58 L1113.86 1217.58 L1114.45 1217.58 L1115.04 1217.58 L1115.62 1217.58 L1116.21 1217.58 L1116.8 1217.58 L1117.38 1217.58 L1117.97 1217.58 L1118.55 1217.58 L1119.14 1217.58 L1119.73 1217.58 L1120.31 1217.58 L1120.9 1217.58 L1121.49 1217.58 L1122.07 1217.58 L1122.66 1217.58 L1123.25 1217.58 L1123.83 1217.58 L1124.42 1217.58 L1125.01 1217.58 L1125.59 1217.58 L1126.18 1217.58 L1126.76 1217.58 L1127.35 1217.58 L1127.94 1217.58 L1128.52 1217.58 L1129.11 1217.58 L1129.7 1217.58 L1130.28 1217.58 L1130.87 1217.58 L1131.46 1217.58 L1132.04 1217.58 L1132.63 1217.58 L1133.21 1217.58 L1133.8 1217.58 L1134.39 1217.58 L1134.97 1217.58 L1135.56 1217.58 L1136.15 1217.58 L1136.73 1217.58 L1137.32 1217.58 L1137.91 1217.58 L1138.49 1217.58 L1139.08 1217.58 L1139.67 1217.58 L1140.25 1217.58 L1140.84 1217.58 L1141.42 1217.58 L1142.01 1217.58 L1142.6 1217.58 L1143.18 1217.58 L1143.77 1217.58 L1144.36 1217.58 L1144.94 1217.58 L1145.53 1217.58 L1146.12 1217.58 L1146.7 1217.58 L1147.29 1217.58 L1147.88 1217.58 L1148.46 1217.58 L1149.05 1217.58 L1149.63 1217.58 L1150.22 1217.58 L1150.81 1217.58 L1151.39 1217.58 L1151.98 1217.58 L1152.57 1217.58 L1153.15 1217.58 L1153.74 1217.58 L1154.33 1217.58 L1154.91 1217.58 L1155.5 1217.58 L1156.09 1217.58 L1156.67 1217.58 L1157.26 1217.58 L1157.84 1217.58 L1158.43 1217.58 L1159.02 1217.58 L1159.6 1217.58 L1160.19 1217.58 L1160.78 1217.58 L1161.36 1217.58 L1161.95 1217.58 L1162.54 1217.58 L1163.12 1217.58 L1163.71 1217.58 L1164.29 1217.58 L1164.88 1217.58 L1165.47 1217.58 L1166.05 1217.58 L1166.64 1217.58 L1167.23 1217.58 L1167.81 1217.58 L1168.4 1217.58 L1168.99 1217.58 L1169.57 1217.58 L1170.16 1217.58 L1170.75 1217.58 L1171.33 1217.58 L1171.92 1217.58 L1172.5 1217.58 L1173.09 1217.58 L1173.68 1217.58 L1174.26 1217.58 L1174.85 1217.58 L1175.44 1217.58 L1176.02 1217.58 L1176.61 1217.58 L1177.2 1217.58 L1177.78 1217.58 L1178.37 1217.58 L1178.96 1217.58 L1179.54 1217.58 L1180.13 1217.58 L1180.71 1217.58 L1181.3 1217.58 L1181.89 1217.58 L1182.47 1217.58 L1183.06 1217.58 L1183.65 1217.58 L1184.23 1217.58 L1184.82 1217.58 L1185.41 1217.58 L1185.99 1217.58 L1186.58 1217.58 L1187.16 1217.58 L1187.75 1217.58 L1188.34 1217.58 L1188.92 1217.58 L1189.51 1217.58 L1190.1 1217.58 L1190.68 1217.58 L1191.27 1217.58 L1191.86 1217.58 L1192.44 1217.58 L1193.03 1217.58 L1193.62 1217.58 L1194.2 1217.58 L1194.79 1217.58 L1195.37 1217.58 L1195.96 1217.58 L1196.55 1217.58 L1197.13 1217.58 L1197.72 1217.58 L1198.31 1217.58 L1198.89 1217.58 L1199.48 1217.58 L1200.07 1217.58 L1200.65 1217.58 L1201.24 1217.58 L1201.83 1217.58 L1202.41 1217.58 L1203 1217.58 L1203.58 1217.58 L1204.17 1217.58 L1204.76 1217.58 L1205.34 1217.58 L1205.93 1217.58 L1206.52 1217.58 L1207.1 1217.58 L1207.69 1217.58 L1208.28 1217.58 L1208.86 1217.58 L1209.45 1217.58 L1210.03 1217.58 L1210.62 1217.58 L1211.21 1217.58 L1211.79 1217.58 L1212.38 1217.58 L1212.97 1217.58 L1213.55 1217.58 L1214.14 1217.58 L1214.73 1217.58 L1215.31 1217.58 L1215.9 1217.58 L1216.49 1217.58 L1217.07 1217.58 L1217.66 1217.58 L1218.24 1217.58 L1218.83 1217.58 L1219.42 1217.58 L1220 1217.58 L1220.59 1217.58 L1221.18 1217.58 L1221.76 1217.58 L1222.35 1217.58 L1222.94 1217.58 L1223.52 1217.58 L1224.11 1217.58 L1224.7 1217.58 L1225.28 1217.58 L1225.87 1217.58 L1226.45 1217.58 L1227.04 1217.58 L1227.63 1217.58 L1228.21 1217.58 L1228.8 1217.58 L1229.39 1217.58 L1229.97 1217.58 L1230.56 1217.58 L1231.15 1217.58 L1231.73 1217.58 L1232.32 1217.58 L1232.91 1217.58 L1233.49 1217.58 L1234.08 1217.58 L1234.66 1217.58 L1235.25 1217.58 L1235.84 1217.58 L1236.42 1217.58 L1237.01 1217.58 L1237.6 1217.58 L1238.18 1217.58 L1238.77 1217.58 L1239.36 1217.58 L1239.94 1217.58 L1240.53 1217.58 L1241.11 1217.58 L1241.7 1217.58 L1242.29 1217.58 L1242.87 1217.58 L1243.46 1217.58 L1244.05 1217.58 L1244.63 1217.58 L1245.22 1217.58 L1245.81 1217.58 L1246.39 1217.58 L1246.98 1217.58 L1247.57 1217.58 L1248.15 1217.58 L1248.74 1217.58 L1249.32 1217.58 L1249.91 1217.58 L1250.5 1217.58 L1251.08 1217.58 L1251.67 1217.58 L1252.26 1217.58 L1252.84 1217.58 L1253.43 1217.58 L1254.02 1217.58 L1254.6 1217.58 L1255.19 1217.58 L1255.78 1217.58 L1256.36 1217.58 L1256.95 1217.58 L1257.53 1217.58 L1258.12 1217.58 L1258.71 1217.58 L1259.29 1217.58 L1259.88 1217.58 L1260.47 1217.58 L1261.05 1217.58 L1261.64 1217.58 L1262.23 1217.58 L1262.81 1217.58 L1263.4 1217.58 L1263.98 1217.58 L1264.57 1217.58 L1265.16 1217.58 L1265.74 1217.58 L1266.33 1217.58 L1266.92 1217.58 L1267.5 1217.58 L1268.09 1217.58 L1268.68 1217.58 L1269.26 1217.58 L1269.85 1217.58 L1270.44 1217.58 L1271.02 1217.58 L1271.61 1217.58 L1272.19 1217.58 L1272.78 1217.58 L1273.37 1217.58 L1273.95 1217.58 L1274.54 1217.58 L1275.13 1217.58 L1275.71 1217.58 L1276.3 1217.58 L1276.89 1217.58 L1277.47 1217.58 L1278.06 1217.58 L1278.65 1217.58 L1279.23 1217.58 L1279.82 1217.58 L1280.4 1217.58 L1280.99 1217.58 L1281.58 1217.58 L1282.16 1217.58 L1282.75 1217.58 L1283.34 1217.58 L1283.92 1217.58 L1284.51 1217.58 L1285.1 1217.58 L1285.68 1217.58 L1286.27 1217.58 L1286.86 1217.58 L1287.44 1217.58 L1288.03 1217.58 L1288.61 1217.58 L1289.2 1217.58 L1289.79 1217.58 L1290.37 1217.58 L1290.96 1217.58 L1291.55 1217.58 L1292.13 1217.58 L1292.72 1217.58 L1293.31 1217.58 L1293.89 1217.58 L1294.48 1217.58 L1295.06 1217.58 L1295.65 1217.58 L1296.24 1217.58 L1296.82 1217.58 L1297.41 1217.58 L1298 1217.58 L1298.58 1217.58 L1299.17 1217.58 L1299.76 1217.58 L1300.34 1217.58 L1300.93 1217.58 L1301.52 1217.58 L1302.1 1217.58 L1302.69 1217.58 L1303.27 1217.58 L1303.86 1217.58 L1304.45 1217.58 L1305.03 1217.58 L1305.62 1217.58 L1306.21 1217.58 L1306.79 1217.58 L1307.38 1217.58 L1307.97 1217.58 L1308.55 1217.58 L1309.14 1217.58 L1309.73 1217.58 L1310.31 1217.58 L1310.9 1217.58 L1311.48 1217.58 L1312.07 1217.58 L1312.66 1217.58 L1313.24 1217.58 L1313.83 1217.58 L1314.42 1217.58 L1315 1217.58 L1315.59 1217.58 L1316.18 1217.58 L1316.76 1217.58 L1317.35 1217.58 L1317.93 1217.58 L1318.52 1217.58 L1319.11 1217.58 L1319.69 1217.58 L1320.28 1217.58 L1320.87 1217.58 L1321.45 1217.58 L1322.04 1217.58 L1322.63 1217.58 L1323.21 1217.58 L1323.8 1217.58 L1324.39 1217.58 L1324.97 1217.58 L1325.56 1217.58 L1326.14 1217.58 L1326.73 1217.58 L1327.32 1217.58 L1327.9 1217.58 L1328.49 1217.58 L1329.08 1217.58 L1329.66 1217.58 L1330.25 1217.58 L1330.84 1217.58 L1331.42 1217.58 L1332.01 1217.58 L1332.6 1217.58 L1333.18 1217.58 L1333.77 1217.58 L1334.35 1217.58 L1334.94 1217.58 L1335.53 1217.58 L1336.11 1217.58 L1336.7 1217.58 L1337.29 1217.58 L1337.87 1217.58 L1338.46 1217.58 L1339.05 1217.58 L1339.63 1217.58 L1340.22 1217.58 L1340.8 1217.58 L1341.39 1217.58 L1341.98 1217.58 L1342.56 1217.58 L1343.15 1217.58 L1343.74 1217.58 L1344.32 1217.58 L1344.91 1217.58 L1345.5 1217.58 L1346.08 1217.58 L1346.67 1217.58 L1347.26 1217.58 L1347.84 1217.58 L1348.43 1217.58 L1349.01 1217.58 L1349.6 1217.58 L1350.19 1217.58 L1350.77 1217.58 L1351.36 1217.58 L1351.95 1217.58 L1352.53 1217.58 L1353.12 1217.58 L1353.71 1217.58 L1354.29 1217.58 L1354.88 1217.58 L1355.47 1217.58 L1356.05 1217.58 L1356.64 1217.58 L1357.22 1217.58 L1357.81 1217.58 L1358.4 1217.58 L1358.98 1217.58 L1359.57 1217.58 L1360.16 1217.58 L1360.74 1217.58 L1361.33 1217.58 L1361.92 1217.58 L1362.5 1217.58 L1363.09 1217.58 L1363.68 1217.58 L1364.26 1217.58 L1364.85 1217.58 L1365.43 1217.58 L1366.02 1217.58 L1366.61 1217.58 L1367.19 1217.58 L1367.78 1217.58 L1368.37 1217.58 L1368.95 1217.58 L1369.54 1217.58 L1370.13 1217.58 L1370.71 1217.58 L1371.3 1217.58 L1371.88 1217.58 L1372.47 1217.58 L1373.06 1217.58 L1373.64 1217.58 L1374.23 1217.58 L1374.82 1217.58 L1375.4 1217.58 L1375.99 1217.58 L1376.58 1217.58 L1377.16 1217.58 L1377.75 1217.58 L1378.34 1217.58 L1378.92 1217.58 L1379.51 1217.58 L1380.09 1217.58 L1380.68 1217.58 L1381.27 1217.58 L1381.85 1217.58 L1382.44 1217.58 L1383.03 1217.58 L1383.61 1217.58 L1384.2 1217.58 L1384.79 1217.58 L1385.37 1217.58 L1385.96 1217.58 L1386.55 1217.58 L1387.13 1217.58 L1387.72 1217.58 L1388.3 1217.58 L1388.89 1217.58 L1389.48 1217.58 L1390.06 1217.58 L1390.65 1217.58 L1391.24 1217.58 L1391.82 1217.58 L1392.41 1217.58 L1393 1217.58 L1393.58 1217.58 L1394.17 1217.58 L1394.75 1217.58 L1395.34 1217.58 L1395.93 1217.58 L1396.51 1217.58 L1397.1 1217.58 L1397.69 1217.58 L1398.27 1217.58 L1398.86 1217.58 L1399.45 1217.58 L1400.03 1217.58 L1400.62 1217.58 L1401.21 1217.58 L1401.79 1217.58 L1402.38 1217.58 L1402.96 1217.58 L1403.55 1217.58 L1404.14 1217.58 L1404.72 1217.58 L1405.31 1217.58 L1405.9 1217.58 L1406.48 1217.58 L1407.07 1217.58 L1407.66 1217.58 L1408.24 1217.58 L1408.83 1217.58 L1409.42 1217.58 L1410 1217.58 L1410.59 1217.58 L1411.17 1217.58 L1411.76 1217.58 L1412.35 1217.58 L1412.93 1217.58 L1413.52 1217.58 L1414.11 1217.58 L1414.69 1217.58 L1415.28 1217.58 L1415.87 1217.58 L1416.45 1217.58 L1417.04 1217.58 L1417.63 1217.58 L1418.21 1217.58 L1418.8 1217.58 L1419.38 1217.58 L1419.97 1217.58 L1420.56 1217.58 L1421.14 1217.58 L1421.73 1217.58 L1422.32 1217.58 L1422.9 1217.58 L1423.49 1217.58 L1424.08 1217.58 L1424.66 1217.58 L1425.25 1217.58 L1425.83 1217.58 L1426.42 1217.58 L1427.01 1217.58 L1427.59 1217.58 L1428.18 1217.58 L1428.77 1217.58 L1429.35 1217.58 L1429.94 1217.58 L1430.53 1217.58 L1431.11 1217.58 L1431.7 1217.58 L1432.29 1217.58 L1432.87 1217.58 L1433.46 1217.58 L1434.04 1217.58 L1434.63 1217.58 L1435.22 1217.58 L1435.8 1217.58 L1436.39 1217.58 L1436.98 1217.58 L1437.56 1217.58 L1438.15 1217.58 L1438.74 1217.58 L1439.32 1217.58 L1439.91 1217.58 L1440.5 1217.58 L1441.08 1217.58 L1441.67 1217.58 L1442.25 1217.58 L1442.84 1217.58 L1443.43 1217.58 L1444.01 1217.58 L1444.6 1217.58 L1445.19 1217.58 L1445.77 1217.58 L1446.36 1217.58 L1446.95 1217.58 L1447.53 1217.58 L1448.12 1217.58 L1448.7 1217.58 L1449.29 1217.58 L1449.88 1217.58 L1450.46 1217.58 L1451.05 1217.58 L1451.64 1217.58 L1452.22 1217.58 L1452.81 1217.58 L1453.4 1217.58 L1453.98 1217.58 L1454.57 1217.58 L1455.16 1217.58 L1455.74 1217.58 L1456.33 1217.58 L1456.91 1217.58 L1457.5 1217.58 L1458.09 1217.58 L1458.67 1217.58 L1459.26 1217.58 L1459.85 1217.58 L1460.43 1217.58 L1461.02 1217.58 L1461.61 1217.58 L1462.19 1217.58 L1462.78 1217.58 L1463.37 1217.58 L1463.95 1217.58 L1464.54 1217.58 L1465.12 1217.58 L1465.71 1217.58 L1466.3 1217.58 L1466.88 1217.58 L1467.47 1217.58 L1468.06 1217.58 L1468.64 1217.58 L1469.23 1217.58 L1469.82 1217.58 L1470.4 1217.58 L1470.99 1217.58 L1471.57 1217.58 L1472.16 1217.58 L1472.75 1217.58 L1473.33 1217.58 L1473.92 1217.58 L1474.51 1217.58 L1475.09 1217.58 L1475.68 1217.58 L1476.27 1217.58 L1476.85 1217.58 L1477.44 1217.58 L1478.03 1217.58 L1478.61 1217.58 L1479.2 1217.58 L1479.78 1217.58 L1480.37 1217.58 L1480.96 1217.58 L1481.54 1217.58 L1482.13 1217.58 L1482.72 1217.58 L1483.3 1217.58 L1483.89 1217.58 L1484.48 1217.58 L1485.06 1217.58 L1485.65 1217.58 L1486.24 1217.58 L1486.82 1217.58 L1487.41 1217.58 L1487.99 1217.58 L1488.58 1217.58 L1489.17 1217.58 L1489.75 1217.58 L1490.34 1217.58 L1490.93 1217.58 L1491.51 1217.58 L1492.1 1217.58 L1492.69 1217.58 L1493.27 1217.58 L1493.86 1217.58 L1494.45 1217.58 L1495.03 1217.58 L1495.62 1217.58 L1496.2 1217.58 L1496.79 1217.58 L1497.38 1217.58 L1497.96 1217.58 L1498.55 1217.58 L1499.14 1217.58 L1499.72 1217.58 L1500.31 1217.58 L1500.9 1217.58 L1501.48 1217.58 L1502.07 1217.58 L1502.65 1217.58 L1503.24 1217.58 L1503.83 1217.58 L1504.41 1217.58 L1505 1217.58 L1505.59 1217.58 L1506.17 1217.58 L1506.76 1217.58 L1507.35 1217.58 L1507.93 1217.58 L1508.52 1217.58 L1509.11 1217.58 L1509.69 1217.58 L1510.28 1217.58 L1510.86 1217.58 L1511.45 1217.58 L1512.04 1217.58 L1512.62 1217.58 L1513.21 1217.58 L1513.8 1217.58 L1514.38 1217.58 L1514.97 1217.58 L1515.56 1217.58 L1516.14 1217.58 L1516.73 1217.58 L1517.32 1217.58 L1517.9 1217.58 L1518.49 1217.58 L1519.07 1217.58 L1519.66 1217.58 L1520.25 1217.58 L1520.83 1217.58 L1521.42 1217.58 L1522.01 1217.58 L1522.59 1217.58 L1523.18 1217.58 L1523.77 1217.58 L1524.35 1217.58 L1524.94 1217.58 L1525.52 1217.58 L1526.11 1217.58 L1526.7 1217.58 L1527.28 1217.58 L1527.87 1217.58 L1528.46 1217.58 L1529.04 1217.58 L1529.63 1217.58 L1530.22 1217.58 L1530.8 1217.58 L1531.39 1217.58 L1531.98 1217.58 L1532.56 1217.58 L1533.15 1217.58 L1533.73 1217.58 L1534.32 1217.58 L1534.91 1217.58 L1535.49 1217.58 L1536.08 1217.58 L1536.67 1217.58 L1537.25 1217.58 L1537.84 1217.58 L1538.43 1217.58 L1539.01 1217.58 L1539.6 1217.58 L1540.19 1217.58 L1540.77 1217.58 L1541.36 1217.58 L1541.94 1217.58 L1542.53 1217.58 L1543.12 1217.58 L1543.7 1217.58 L1544.29 1217.58 L1544.88 1217.58 L1545.46 1217.58 L1546.05 1217.58 L1546.64 1217.58 L1547.22 1217.58 L1547.81 1217.58 L1548.4 1217.58 L1548.98 1217.58 L1549.57 1217.58 L1550.15 1217.58 L1550.74 1217.58 L1551.33 1217.58 L1551.91 1217.58 L1552.5 1217.58 L1553.09 1217.58 L1553.67 1217.58 L1554.26 1217.58 L1554.85 1217.58 L1555.43 1217.58 L1556.02 1217.58 L1556.6 1217.58 L1557.19 1217.58 L1557.78 1217.58 L1558.36 1217.58 L1558.95 1217.58 L1559.54 1217.58 L1560.12 1217.58 L1560.71 1217.58 L1561.3 1217.58 L1561.88 1217.58 L1562.47 1217.58 L1563.06 1217.58 L1563.64 1217.58 L1564.23 1217.58 L1564.81 1217.58 L1565.4 1217.58 L1565.99 1217.58 L1566.57 1217.58 L1567.16 1217.58 L1567.75 1217.58 L1568.33 1217.58 L1568.92 1217.58 L1569.51 1217.58 L1570.09 1217.58 L1570.68 1217.58 L1571.27 1217.58 L1571.85 1217.58 L1572.44 1217.58 L1573.02 1217.58 L1573.61 1217.58 L1574.2 1217.58 L1574.78 1217.58 L1575.37 1217.58 L1575.96 1217.58 L1576.54 1217.58 L1577.13 1217.58 L1577.72 1217.58 L1578.3 1217.58 L1578.89 1217.58 L1579.47 1217.58 L1580.06 1217.58 L1580.65 1217.58 L1581.23 1217.58 L1581.82 1217.58 L1582.41 1217.58 L1582.99 1217.58 L1583.58 1217.58 L1584.17 1217.58 L1584.75 1217.58 L1585.34 1217.58 L1585.93 1217.58 L1586.51 1217.58 L1587.1 1217.58 L1587.68 1217.58 L1588.27 1217.58 L1588.86 1217.58 L1589.44 1217.58 L1590.03 1217.58 L1590.62 1217.58 L1591.2 1217.58 L1591.79 1217.58 L1592.38 1217.58 L1592.96 1217.58 L1593.55 1217.58 L1594.14 1217.58 L1594.72 1217.58 L1595.31 1217.58 L1595.89 1217.58 L1596.48 1217.58 L1597.07 1217.58 L1597.65 1217.58 L1598.24 1217.58 L1598.83 1217.58 L1599.41 1217.58 L1600 1217.58 L1600.59 1217.58 L1601.17 1217.58 L1601.76 1217.58 L1602.34 1217.58 L1602.93 1217.58 L1603.52 1217.58 L1604.1 1217.58 L1604.69 1217.58 L1605.28 1217.58 L1605.86 1217.58 L1606.45 1217.58 L1607.04 1217.58 L1607.62 1217.58 L1608.21 1217.58 L1608.8 1217.58 L1609.38 1217.58 L1609.97 1217.58 L1610.55 1217.58 L1611.14 1217.58 L1611.73 1217.58 L1612.31 1217.58 L1612.9 1217.58 L1613.49 1217.58 L1614.07 1217.58 L1614.66 1217.58 L1615.25 1217.58 L1615.83 1217.58 L1616.42 1217.58 L1617.01 1217.58 L1617.59 1217.58 L1618.18 1217.58 L1618.76 1217.58 L1619.35 1217.58 L1619.94 1217.58 L1620.52 1217.58 L1621.11 1217.58 L1621.7 1217.58 L1622.28 1217.58 L1622.87 1217.58 L1623.46 1217.58 L1624.04 1217.58 L1624.63 1217.58 L1625.22 1217.58 L1625.8 1217.58 L1626.39 1217.58 L1626.97 1217.58 L1627.56 1217.58 L1628.15 1217.58 L1628.73 1217.58 L1629.32 1217.58 L1629.91 1217.58 L1630.49 1217.58 L1631.08 1217.58 L1631.67 1217.58 L1632.25 1217.58 L1632.84 1217.58 L1633.42 1217.58 L1634.01 1217.58 L1634.6 1217.58 L1635.18 1217.58 L1635.77 1217.58 L1636.36 1217.58 L1636.94 1217.58 L1637.53 1217.58 L1638.12 1217.58 L1638.7 1217.58 L1639.29 1217.58 L1639.88 1217.58 L1640.46 1217.58 L1641.05 1217.58 L1641.63 1217.58 L1642.22 1217.58 L1642.81 1217.58 L1643.39 1217.58 L1643.98 1217.58 L1644.57 1217.58 L1645.15 1217.58 L1645.74 1217.58 L1646.33 1217.58 L1646.91 1217.58 L1647.5 1217.58 L1648.09 1217.58 L1648.67 1217.58 L1649.26 1217.58 L1649.84 1217.58 L1650.43 1217.58 L1651.02 1217.58 L1651.6 1217.58 L1652.19 1217.58 L1652.78 1217.58 L1653.36 1217.58 L1653.95 1217.58 L1654.54 1217.58 L1655.12 1217.58 L1655.71 1217.58 L1656.29 1217.58 L1656.88 1217.58 L1657.47 1217.58 L1658.05 1217.58 L1658.64 1217.58 L1659.23 1217.58 L1659.81 1217.58 L1660.4 1217.58 L1660.99 1217.58 L1661.57 1217.58 L1662.16 1217.58 L1662.75 1217.58 L1663.33 1217.58 L1663.92 1217.58 L1664.5 1217.58 L1665.09 1217.58 L1665.68 1217.58 L1666.26 1217.58 L1666.85 1217.58 L1667.44 1217.58 L1668.02 1217.58 L1668.61 1217.58 L1669.2 1217.58 L1669.78 1217.58 L1670.37 1217.58 L1670.96 1217.58 L1671.54 1217.58 L1672.13 1217.58 L1672.71 1217.58 L1673.3 1217.58 L1673.89 1217.58 L1674.47 1217.58 L1675.06 1217.58 L1675.65 1217.58 L1676.23 1217.58 L1676.82 1217.58 L1677.41 1217.58 L1677.99 1217.58 L1678.58 1217.58 L1679.17 1217.58 L1679.75 1217.58 L1680.34 1217.58 L1680.92 1217.58 L1681.51 1217.58 L1682.1 1217.58 L1682.68 1217.58 L1683.27 1217.58 L1683.86 1217.58 L1684.44 1217.58 L1685.03 1217.58 L1685.62 1217.58 L1686.2 1217.58 L1686.79 1217.58 L1687.37 1217.58 L1687.96 1217.58 L1688.55 1217.58 L1689.13 1217.58 L1689.72 1217.58 L1690.31 1217.58 L1690.89 1217.58 L1691.48 1217.58 L1692.07 1217.58 L1692.65 1217.58 L1693.24 1217.58 L1693.83 1217.58 L1694.41 1217.58 L1695 1217.58 L1695.58 1217.58 L1696.17 1217.58 L1696.76 1217.58 L1697.34 1217.58 L1697.93 1217.58 L1698.52 1217.58 L1699.1 1217.58 L1699.69 1217.58 L1700.28 1217.58 L1700.86 1217.58 L1701.45 1217.58 L1702.04 1217.58 L1702.62 1217.58 L1703.21 1217.58 L1703.79 1217.58 L1704.38 1217.58 L1704.97 1217.58 L1705.55 1217.58 L1706.14 1217.58 L1706.73 1217.58 L1707.31 1217.58 L1707.9 1217.58 L1708.49 1217.58 L1709.07 1217.58 L1709.66 1217.58 L1710.24 1217.58 L1710.83 1217.58 L1711.42 1217.58 L1712 1217.58 L1712.59 1217.58 L1713.18 1217.58 L1713.76 1217.58 L1714.35 1217.58 L1714.94 1217.58 L1715.52 1217.58 L1716.11 1217.58 L1716.7 1217.58 L1717.28 1217.58 L1717.87 1217.58 L1718.45 1217.58 L1719.04 1217.58 L1719.63 1217.58 L1720.21 1217.58 L1720.8 1217.58 L1721.39 1217.58 L1721.97 1217.58 L1722.56 1217.58 L1723.15 1217.58 L1723.73 1217.58 L1724.32 1217.58 L1724.91 1217.58 L1725.49 1217.58 L1726.08 1217.58 L1726.66 1217.58 L1727.25 1217.58 L1727.84 1217.58 L1728.42 1217.58 L1729.01 1217.58 L1729.6 1217.58 L1730.18 1217.58 L1730.77 1217.58 L1731.36 1217.58 L1731.94 1217.58 L1732.53 1217.58 L1733.11 1217.58 L1733.7 1217.58 L1734.29 1217.58 L1734.87 1217.58 L1735.46 1217.58 L1736.05 1217.58 L1736.63 1217.58 L1737.22 1217.58 L1737.81 1217.58 L1738.39 1217.58 L1738.98 1217.58 L1739.57 1217.58 L1740.15 1217.58 L1740.74 1217.58 L1741.32 1217.58 L1741.91 1217.58 L1742.5 1217.58 L1743.08 1217.58 L1743.67 1217.58 L1744.26 1217.58 L1744.84 1217.58 L1745.43 1217.58 L1746.02 1217.58 L1746.6 1217.58 L1747.19 1217.58 L1747.78 1217.58 L1748.36 1217.58 L1748.95 1217.58 L1749.53 1217.58 L1750.12 1217.58 L1750.71 1217.58 L1751.29 1217.58 L1751.88 1217.58 L1752.47 1217.58 L1753.05 1217.58 L1753.64 1217.58 L1754.23 1217.58 L1754.81 1217.58 L1755.4 1217.58 L1755.99 1217.58 L1756.57 1217.58 L1757.16 1217.58 L1757.74 1217.58 L1758.33 1217.58 L1758.92 1217.58 L1759.5 1217.58 L1760.09 1217.58 L1760.68 1217.58 L1761.26 1217.58 L1761.85 1217.58 L1762.44 1217.58 L1763.02 1217.58 L1763.61 1217.58 L1764.19 1217.58 L1764.78 1217.58 L1765.37 1217.58 L1765.95 1217.58 L1766.54 1217.58 L1767.13 1217.58 L1767.71 1217.58 L1768.3 1217.58 L1768.89 1217.58 L1769.47 1217.58 L1770.06 1217.58 L1770.65 1217.58 L1771.23 1217.58 L1771.82 1217.58 L1772.4 1217.58 L1772.99 1217.58 L1773.58 1217.58 L1774.16 1217.58 L1774.75 1217.58 L1775.34 1217.58 L1775.92 1217.58 L1776.51 1217.58 L1777.1 1217.58 L1777.68 1217.58 L1778.27 1217.58 L1778.86 1217.58 L1779.44 1217.58 L1780.03 1217.58 L1780.61 1217.58 L1781.2 1217.58 L1781.79 1217.58 L1782.37 1217.58 L1782.96 1217.58 L1783.55 1217.58 L1784.13 1217.58 L1784.72 1217.58 L1785.31 1217.58 L1785.89 1217.58 L1786.48 1217.58 L1787.06 1217.58 L1787.65 1217.58 L1788.24 1217.58 L1788.82 1217.58 L1789.41 1217.58 L1790 1217.58 L1790.58 1217.58 L1791.17 1217.58 L1791.76 1217.58 L1792.34 1217.58 L1792.93 1217.58 L1793.52 1217.58 L1794.1 1217.58 L1794.69 1217.58 L1795.27 1217.58 L1795.86 1217.58 L1796.45 1217.58 L1797.03 1217.58 L1797.62 1217.58 L1798.21 1217.58 L1798.79 1217.58 L1799.38 1217.58 L1799.97 1217.58 L1800.55 1217.58 L1801.14 1217.58 L1801.73 1217.58 L1802.31 1217.58 L1802.9 1217.58 L1803.48 1217.58 L1804.07 1217.58 L1804.66 1217.58 L1805.24 1217.58 L1805.83 1217.58 L1806.42 1217.58 L1807 1217.58 L1807.59 1217.58 L1808.18 1217.58 L1808.76 1217.58 L1809.35 1217.58 L1809.94 1217.58 L1810.52 1217.58 L1811.11 1217.58 L1811.69 1217.58 L1812.28 1217.58 L1812.87 1217.58 L1813.45 1217.58 L1814.04 1217.58 L1814.63 1217.58 L1815.21 1217.58 L1815.8 1217.58 L1816.39 1217.58 L1816.97 1217.58 L1817.56 1217.58 L1818.14 1217.58 L1818.73 1217.58 L1819.32 1217.58 L1819.9 1217.58 L1820.49 1217.58 L1821.08 1217.58 L1821.66 1217.58 L1822.25 1217.58 L1822.84 1217.58 L1823.42 1217.58 L1824.01 1217.58 L1824.6 1217.58 L1825.18 1217.58 L1825.77 1217.58 L1826.35 1217.58 L1826.94 1217.58 L1827.53 1217.58 L1828.11 1217.58 L1828.7 1217.58 L1829.29 1217.58 L1829.87 1217.58 L1830.46 1217.58 L1831.05 1217.58 L1831.63 1217.58 L1832.22 1217.58 L1832.81 1217.58 L1833.39 1217.58 L1833.98 1217.58 L1834.56 1217.58 L1835.15 1217.58 L1835.74 1217.58 L1836.32 1217.58 L1836.91 1217.58 L1837.5 1217.58 L1838.08 1217.58 L1838.67 1217.58 L1839.26 1217.58 L1839.84 1217.58 L1840.43 1217.58 L1841.01 1217.58 L1841.6 1217.58 L1842.19 1217.58 L1842.77 1217.58 L1843.36 1217.58 L1843.95 1217.58 L1844.53 1217.58 L1845.12 1217.58 L1845.71 1217.58 L1846.29 1217.58 L1846.88 1217.58 L1847.47 1217.58 L1848.05 1217.58 L1848.64 1217.58 L1849.22 1217.58 L1849.81 1217.58 L1850.4 1217.58 L1850.98 1217.58 L1851.57 1217.58 L1852.16 1217.58 L1852.74 1217.58 L1853.33 1217.58 L1853.92 1217.58 L1854.5 1217.58 L1855.09 1217.58 L1855.68 1217.58 L1856.26 1217.58 L1856.85 1217.58 L1857.43 1217.58 L1858.02 1217.58 L1858.61 1217.58 L1859.19 1217.58 L1859.78 1217.58 L1860.37 1217.58 L1860.95 1217.58 L1861.54 1217.58 L1862.13 1217.58 L1862.71 1217.58 L1863.3 1217.58 L1863.88 1217.58 L1864.47 1217.58 L1865.06 1217.58 L1865.64 1217.58 L1866.23 1217.58 L1866.82 1217.58 L1867.4 1217.58 L1867.99 1217.58 L1868.58 1217.58 L1869.16 1217.58 L1869.75 1217.58 L1870.34 1217.58 L1870.92 1217.58 L1871.51 1217.58 L1872.09 1217.58 L1872.68 1217.58 L1873.27 1217.58 L1873.85 1217.58 L1874.44 1217.58 L1875.03 1217.58 L1875.61 1217.58 L1876.2 1217.58 L1876.79 1217.58 L1877.37 1217.58 L1877.96 1217.58 L1878.55 1217.58 L1879.13 1217.58 L1879.72 1217.58 L1880.3 1217.58 L1880.89 1217.58 L1881.48 1217.58 L1882.06 1217.58 L1882.65 1217.58 L1883.24 1217.58 L1883.82 1217.58 L1884.41 1217.58 L1885 1217.58 L1885.58 1217.58 L1886.17 1217.58 L1886.76 1217.58 L1887.34 1217.58 L1887.93 1217.58 L1888.51 1217.58 L1889.1 1217.58 L1889.69 1217.58 L1890.27 1217.58 L1890.86 1217.58 L1891.45 1217.58 L1892.03 1217.58 L1892.62 1217.58 L1893.21 1217.58 L1893.79 1217.58 L1894.38 1217.58 L1894.96 1217.58 L1895.55 1217.58 L1896.14 1217.58 L1896.72 1217.58 L1897.31 1217.58 L1897.9 1217.58 L1898.48 1217.58 L1899.07 1217.58 L1899.66 1217.58 L1900.24 1217.58 L1900.83 1217.58 L1901.42 1217.58 L1902 1217.58 L1902.59 1217.58 L1903.17 1217.58 L1903.76 1217.58 L1904.35 1217.58 L1904.93 1217.58 L1905.52 1217.58 L1906.11 1217.58 L1906.69 1217.58 L1907.28 1217.58 L1907.87 1217.58 L1908.45 1217.58 L1909.04 1217.58 L1909.63 1217.58 L1910.21 1217.58 L1910.8 1217.58 L1911.38 1217.58 L1911.97 1217.58 L1912.56 1217.58 L1913.14 1217.58 L1913.73 1217.58 L1914.32 1217.58 L1914.9 1217.58 L1915.49 1217.58 L1916.08 1217.58 L1916.66 1217.58 L1917.25 1217.58 L1917.83 1217.58 L1918.42 1217.58 L1919.01 1217.58 L1919.59 1217.58 L1920.18 1217.58 L1920.77 1217.58 L1921.35 1217.58 L1921.94 1217.58 L1922.53 1217.58 L1923.11 1217.58 L1923.7 1217.58 L1924.29 1217.58 L1924.87 1217.58 L1925.46 1217.58 L1926.04 1217.58 L1926.63 1217.58 L1927.22 1217.58 L1927.8 1217.58 L1928.39 1217.58 L1928.98 1217.58 L1929.56 1217.58 L1930.15 1217.58 L1930.74 1217.58 L1931.32 1217.58 L1931.91 1217.58 L1932.5 1217.58 L1933.08 1217.58 L1933.67 1217.58 L1934.25 1217.58 L1934.84 1217.58 L1935.43 1217.58 L1936.01 1217.58 L1936.6 1217.58 L1937.19 1217.58 L1937.77 1217.58 L1938.36 1217.58 L1938.95 1217.58 L1939.53 1217.58 L1940.12 1217.58 L1940.71 1217.58 L1941.29 1217.58 L1941.88 1217.58 L1942.46 1217.58 L1943.05 1217.58 L1943.64 1217.58 L1944.22 1217.58 L1944.81 1217.58 L1945.4 1217.58 L1945.98 1217.58 L1946.57 1217.58 L1947.16 1217.58 L1947.74 1217.58 L1948.33 1217.58 L1948.91 1217.58 L1949.5 1217.58 L1950.09 1217.58 L1950.67 1217.58 L1951.26 1217.58 L1951.85 1217.58 L1952.43 1217.58 L1953.02 1217.58 L1953.61 1217.58 L1954.19 1217.58 L1954.78 1217.58 L1955.37 1217.58 L1955.95 1217.58 L1956.54 1217.58 L1957.12 1217.58 L1957.71 1217.58 L1958.3 1217.58 L1958.88 1217.58 L1959.47 1217.58 L1960.06 1217.58 L1960.64 1217.58 L1961.23 1217.58 L1961.82 1217.58 L1962.4 1217.58 L1962.99 1217.58 L1963.58 1217.58 L1964.16 1217.58 L1964.75 1217.58 L1965.33 1217.58 L1965.92 1217.58 L1966.51 1217.58 L1967.09 1217.58 L1967.68 1217.58 L1968.27 1217.58 L1968.85 1217.58 L1969.44 1217.58 L1970.03 1217.58 L1970.61 1217.58 L1971.2 1217.58 L1971.78 1217.58 L1972.37 1217.58 L1972.96 1217.58 L1973.54 1217.58 L1974.13 1217.58 L1974.72 1217.58 L1975.3 1217.58 L1975.89 1217.58 L1976.48 1217.58 L1977.06 1217.58 L1977.65 1217.58 L1978.24 1217.58 L1978.82 1217.58 L1979.41 1217.58 L1979.99 1217.58 L1980.58 1217.58 L1981.17 1217.58 L1981.75 1217.58 L1982.34 1217.58 L1982.93 1217.58 L1983.51 1217.58 L1984.1 1217.58 L1984.69 1217.58 L1985.27 1217.58 L1985.86 1217.58 L1986.45 1217.58 L1987.03 1217.58 L1987.62 1217.58 L1988.2 1217.58 L1988.79 1217.58 L1989.38 1217.58 L1989.96 1217.58 L1990.55 1217.58 L1991.14 1217.58 L1991.72 1217.58 L1992.31 1217.58 L1992.9 1217.58 L1993.48 1217.58 L1994.07 1217.58 L1994.65 1217.58 L1995.24 1217.58 L1995.83 1217.58 L1996.41 1217.58 L1997 1217.58 L1997.59 1217.58 L1998.17 1217.58 L1998.76 1217.58 L1999.35 1217.58 L1999.93 1217.58 L2000.52 1217.58 L2001.11 1217.58 L2001.69 1217.58 L2002.28 1217.58 L2002.86 1217.58 L2003.45 1217.58 L2004.04 1217.58 L2004.62 1217.58 L2005.21 1217.58 L2005.8 1217.58 L2006.38 1217.58 L2006.97 1217.58 L2007.56 1217.58 L2008.14 1217.58 L2008.73 1217.58 L2009.32 1217.58 L2009.9 1217.58 L2010.49 1217.58 L2011.07 1217.58 L2011.66 1217.58 L2012.25 1217.58 L2012.83 1217.58 L2013.42 1217.58 L2014.01 1217.58 L2014.59 1217.58 L2015.18 1217.58 L2015.77 1217.58 L2016.35 1217.58 L2016.94 1217.58 L2017.53 1217.58 L2018.11 1217.58 L2018.7 1217.58 L2019.28 1217.58 L2019.87 1217.58 L2020.46 1217.58 L2021.04 1217.58 L2021.63 1217.58 L2022.22 1217.58 L2022.8 1217.58 L2023.39 1217.58 L2023.98 1217.58 L2024.56 1217.58 L2025.15 1217.58 L2025.73 1217.58 L2026.32 1217.58 L2026.91 1217.58 L2027.49 1217.58 L2028.08 1217.58 L2028.67 1217.58 L2029.25 1217.58 L2029.84 1217.58 L2030.43 1217.58 L2031.01 1217.58 L2031.6 1217.58 L2032.19 1217.58 L2032.77 1217.58 L2033.36 1217.58 L2033.94 1217.58 L2034.53 1217.58 L2035.12 1217.58 L2035.7 1217.58 L2036.29 1217.58 L2036.88 1217.58 L2037.46 1217.58 L2038.05 1217.58 L2038.64 1217.58 L2039.22 1217.58 L2039.81 1217.58 L2040.4 1217.58 L2040.98 1217.58 L2041.57 1217.58 L2042.15 1217.58 L2042.74 1217.58 L2043.33 1217.58 L2043.91 1217.58 L2044.5 1217.58 L2045.09 1217.58 L2045.67 1217.58 L2046.26 1217.58 L2046.85 1217.58 L2047.43 1217.58 L2048.02 1217.58 L2048.6 1217.58 L2049.19 1217.58 L2049.78 1217.58 L2050.36 1217.58 L2050.95 1217.58 L2051.54 1217.58 L2052.12 1217.58 L2052.71 1217.58 L2053.3 1217.58 L2053.88 1217.58 L2054.47 1217.58 L2055.06 1217.58 L2055.64 1217.58 L2056.23 1217.58 L2056.81 1217.58 L2057.4 1217.58 L2057.99 1217.58 L2058.57 1217.58 L2059.16 1217.58 L2059.75 1217.58 L2060.33 1217.58 L2060.92 1217.58 L2061.51 1217.58 L2062.09 1217.58 L2062.68 1217.58 L2063.27 1217.58 L2063.85 1217.58 L2064.44 1217.58 L2065.02 1217.58 L2065.61 1217.58 L2066.2 1217.58 L2066.78 1217.58 L2067.37 1217.58 L2067.96 1217.58 L2068.54 1217.58 L2069.13 1217.58 L2069.72 1217.58 L2070.3 1217.58 L2070.89 1217.58 L2071.48 1217.58 L2072.06 1217.58 L2072.65 1217.58 L2073.23 1217.58 L2073.82 1217.58 L2074.41 1217.58 L2074.99 1217.58 L2075.58 1217.58 L2076.17 1217.58 L2076.75 1217.58 L2077.34 1217.58 L2077.93 1217.58 L2078.51 1217.58 L2079.1 1217.58 L2079.68 1217.58 L2080.27 1217.58 L2080.86 1217.58 L2081.44 1217.58 L2082.03 1217.58 L2082.62 1217.58 L2083.2 1217.58 L2083.79 1217.58 L2084.38 1217.58 L2084.96 1217.58 L2085.55 1217.58 L2086.14 1217.58 L2086.72 1217.58 L2087.31 1217.58 L2087.89 1217.58 L2088.48 1217.58 L2089.07 1217.58 L2089.65 1217.58 L2090.24 1217.58 L2090.83 1217.58 L2091.41 1217.58 L2092 1217.58 L2092.59 1217.58 L2093.17 1217.58 L2093.76 1217.58 L2094.35 1217.58 L2094.93 1217.58 L2095.52 1217.58 L2096.1 1217.58 L2096.69 1217.58 L2097.28 1217.58 L2097.86 1217.58 L2098.45 1217.58 L2099.04 1217.58 L2099.62 1217.58 L2100.21 1217.58 L2100.8 1217.58 L2101.38 1217.58 L2101.97 1217.58 L2102.55 1217.58 L2103.14 1217.58 L2103.73 1217.58 L2104.31 1217.58 L2104.9 1217.58 L2105.49 1217.58 L2106.07 1217.58 L2106.66 1217.58 L2107.25 1217.58 L2107.83 1217.58 L2108.42 1217.58 L2109.01 1217.58 L2109.59 1217.58 L2110.18 1217.58 L2110.76 1217.58 L2111.35 1217.58 L2111.94 1217.58 L2112.52 1217.58 L2113.11 1217.58 L2113.7 1217.58 L2114.28 1217.58 L2114.87 1217.58 L2115.46 1217.58 L2116.04 1217.58 L2116.63 1217.58 L2117.22 1217.58 L2117.8 1217.58 L2118.39 1217.58 L2118.97 1217.58 L2119.56 1217.58 L2120.15 1217.58 L2120.73 1217.58 L2121.32 1217.58 L2121.91 1217.58 L2122.49 1217.58 L2123.08 1217.58 L2123.67 1217.58 L2124.25 1217.58 L2124.84 1217.58 L2125.42 1217.58 L2126.01 1217.58 L2126.6 1217.58 L2127.18 1217.58 L2127.77 1217.58 L2128.36 1217.58 L2128.94 1217.58 L2129.53 1217.58 L2130.12 1217.58 L2130.7 1217.58 L2131.29 1217.58 L2131.88 1217.58 L2132.46 1217.58 L2133.05 1217.58 L2133.63 1217.58 L2134.22 1217.58 L2134.81 1217.58 L2135.39 1217.58 L2135.98 1217.58 L2136.57 1217.58 L2137.15 1217.58 L2137.74 1217.58 L2138.33 1217.58 L2138.91 1217.58 L2139.5 1217.58 L2140.09 1217.58 L2140.67 1217.58 L2141.26 1217.58 L2141.84 1217.58 L2142.43 1217.58 L2143.02 1217.58 L2143.6 1217.58 L2144.19 1217.58 L2144.78 1217.58 L2145.36 1217.58 L2145.95 1217.58 L2146.54 1217.58 L2147.12 1217.58 L2147.71 1217.58 L2148.3 1217.58 L2148.88 1217.58 L2149.47 1217.58 L2150.05 1217.58 L2150.64 1217.58 L2151.23 1217.58 L2151.81 1217.58 L2152.4 1217.58 L2152.99 1217.58 L2153.57 1217.58 L2154.16 1217.58 L2154.75 1217.58 L2155.33 1217.58 L2155.92 1217.58 L2156.5 1217.58 L2157.09 1217.58 L2157.68 1217.58 L2158.26 1217.58 L2158.26 1216.85 L2157.68 1216.85 L2157.09 1216.85 L2156.5 1216.85 L2155.92 1216.85 L2155.33 1216.85 L2154.75 1216.85 L2154.16 1216.85 L2153.57 1216.85 L2152.99 1216.85 L2152.4 1216.85 L2151.81 1216.85 L2151.23 1216.85 L2150.64 1216.85 L2150.05 1216.85 L2149.47 1216.85 L2148.88 1216.85 L2148.3 1216.85 L2147.71 1216.85 L2147.12 1216.85 L2146.54 1216.85 L2145.95 1216.85 L2145.36 1216.85 L2144.78 1216.85 L2144.19 1216.85 L2143.6 1216.85 L2143.02 1216.85 L2142.43 1216.85 L2141.84 1216.85 L2141.26 1216.85 L2140.67 1216.85 L2140.09 1216.85 L2139.5 1216.85 L2138.91 1216.85 L2138.33 1216.85 L2137.74 1216.85 L2137.15 1216.85 L2136.57 1216.85 L2135.98 1216.85 L2135.39 1216.85 L2134.81 1216.85 L2134.22 1216.85 L2133.63 1216.85 L2133.05 1216.85 L2132.46 1216.85 L2131.88 1216.85 L2131.29 1216.85 L2130.7 1216.85 L2130.12 1216.85 L2129.53 1216.85 L2128.94 1216.85 L2128.36 1216.85 L2127.77 1216.85 L2127.18 1216.85 L2126.6 1216.85 L2126.01 1216.85 L2125.42 1216.85 L2124.84 1216.85 L2124.25 1216.85 L2123.67 1216.85 L2123.08 1216.85 L2122.49 1216.85 L2121.91 1216.85 L2121.32 1216.85 L2120.73 1216.85 L2120.15 1216.85 L2119.56 1216.85 L2118.97 1216.85 L2118.39 1216.85 L2117.8 1216.85 L2117.22 1216.85 L2116.63 1216.85 L2116.04 1216.85 L2115.46 1216.85 L2114.87 1216.85 L2114.28 1216.85 L2113.7 1216.85 L2113.11 1216.85 L2112.52 1216.85 L2111.94 1216.85 L2111.35 1216.85 L2110.76 1216.85 L2110.18 1216.85 L2109.59 1216.85 L2109.01 1216.85 L2108.42 1216.85 L2107.83 1216.85 L2107.25 1216.85 L2106.66 1216.85 L2106.07 1216.85 L2105.49 1216.85 L2104.9 1216.85 L2104.31 1216.85 L2103.73 1216.85 L2103.14 1216.85 L2102.55 1216.85 L2101.97 1216.85 L2101.38 1216.85 L2100.8 1216.85 L2100.21 1216.85 L2099.62 1216.85 L2099.04 1216.85 L2098.45 1216.85 L2097.86 1216.85 L2097.28 1216.85 L2096.69 1216.85 L2096.1 1216.85 L2095.52 1216.85 L2094.93 1216.85 L2094.35 1216.85 L2093.76 1216.85 L2093.17 1216.85 L2092.59 1216.85 L2092 1216.85 L2091.41 1216.85 L2090.83 1216.85 L2090.24 1216.85 L2089.65 1216.85 L2089.07 1216.85 L2088.48 1216.85 L2087.89 1216.85 L2087.31 1216.85 L2086.72 1216.85 L2086.14 1216.85 L2085.55 1216.85 L2084.96 1216.85 L2084.38 1216.85 L2083.79 1216.85 L2083.2 1216.85 L2082.62 1216.85 L2082.03 1216.85 L2081.44 1216.85 L2080.86 1216.85 L2080.27 1216.85 L2079.68 1216.85 L2079.1 1216.85 L2078.51 1216.85 L2077.93 1216.85 L2077.34 1216.85 L2076.75 1216.85 L2076.17 1216.85 L2075.58 1216.85 L2074.99 1216.85 L2074.41 1216.85 L2073.82 1216.85 L2073.23 1216.85 L2072.65 1216.85 L2072.06 1216.85 L2071.48 1216.85 L2070.89 1216.85 L2070.3 1216.85 L2069.72 1216.85 L2069.13 1216.85 L2068.54 1216.85 L2067.96 1216.85 L2067.37 1216.85 L2066.78 1216.85 L2066.2 1216.85 L2065.61 1216.85 L2065.02 1216.85 L2064.44 1216.85 L2063.85 1216.85 L2063.27 1216.85 L2062.68 1216.85 L2062.09 1216.85 L2061.51 1216.85 L2060.92 1216.85 L2060.33 1216.85 L2059.75 1216.85 L2059.16 1216.85 L2058.57 1216.85 L2057.99 1216.85 L2057.4 1216.85 L2056.81 1216.85 L2056.23 1216.85 L2055.64 1216.85 L2055.06 1216.85 L2054.47 1216.85 L2053.88 1216.85 L2053.3 1216.85 L2052.71 1216.85 L2052.12 1216.85 L2051.54 1216.85 L2050.95 1216.85 L2050.36 1216.85 L2049.78 1216.85 L2049.19 1216.85 L2048.6 1216.85 L2048.02 1216.85 L2047.43 1216.85 L2046.85 1216.85 L2046.26 1216.85 L2045.67 1216.85 L2045.09 1216.85 L2044.5 1216.85 L2043.91 1216.85 L2043.33 1216.85 L2042.74 1216.85 L2042.15 1216.85 L2041.57 1216.85 L2040.98 1216.85 L2040.4 1216.85 L2039.81 1216.85 L2039.22 1216.85 L2038.64 1216.85 L2038.05 1216.85 L2037.46 1216.85 L2036.88 1216.85 L2036.29 1216.85 L2035.7 1216.85 L2035.12 1216.85 L2034.53 1216.85 L2033.94 1216.85 L2033.36 1216.85 L2032.77 1216.85 L2032.19 1216.85 L2031.6 1216.85 L2031.01 1216.85 L2030.43 1216.85 L2029.84 1216.85 L2029.25 1216.85 L2028.67 1216.85 L2028.08 1216.85 L2027.49 1216.85 L2026.91 1216.85 L2026.32 1216.85 L2025.73 1216.85 L2025.15 1216.85 L2024.56 1216.85 L2023.98 1216.85 L2023.39 1216.85 L2022.8 1216.85 L2022.22 1216.85 L2021.63 1216.85 L2021.04 1216.85 L2020.46 1216.85 L2019.87 1216.85 L2019.28 1216.85 L2018.7 1216.85 L2018.11 1216.85 L2017.53 1216.85 L2016.94 1216.85 L2016.35 1216.85 L2015.77 1216.85 L2015.18 1216.85 L2014.59 1216.85 L2014.01 1216.85 L2013.42 1216.85 L2012.83 1216.85 L2012.25 1216.85 L2011.66 1216.85 L2011.07 1216.85 L2010.49 1216.85 L2009.9 1216.85 L2009.32 1216.85 L2008.73 1216.85 L2008.14 1216.85 L2007.56 1216.85 L2006.97 1216.85 L2006.38 1216.85 L2005.8 1216.85 L2005.21 1216.85 L2004.62 1216.85 L2004.04 1216.85 L2003.45 1216.85 L2002.86 1216.85 L2002.28 1216.85 L2001.69 1216.85 L2001.11 1216.85 L2000.52 1216.85 L1999.93 1216.85 L1999.35 1216.85 L1998.76 1216.85 L1998.17 1216.85 L1997.59 1216.85 L1997 1216.85 L1996.41 1216.85 L1995.83 1216.85 L1995.24 1216.85 L1994.65 1216.85 L1994.07 1216.85 L1993.48 1216.85 L1992.9 1216.85 L1992.31 1216.85 L1991.72 1216.85 L1991.14 1216.85 L1990.55 1216.85 L1989.96 1216.85 L1989.38 1216.85 L1988.79 1216.85 L1988.2 1216.85 L1987.62 1216.85 L1987.03 1216.85 L1986.45 1216.85 L1985.86 1216.85 L1985.27 1216.85 L1984.69 1216.85 L1984.1 1216.85 L1983.51 1216.85 L1982.93 1216.85 L1982.34 1216.85 L1981.75 1216.85 L1981.17 1216.85 L1980.58 1216.85 L1979.99 1216.85 L1979.41 1216.85 L1978.82 1216.85 L1978.24 1216.85 L1977.65 1216.85 L1977.06 1216.85 L1976.48 1216.85 L1975.89 1216.85 L1975.3 1216.85 L1974.72 1216.85 L1974.13 1216.85 L1973.54 1216.85 L1972.96 1216.85 L1972.37 1216.85 L1971.78 1216.85 L1971.2 1216.85 L1970.61 1216.85 L1970.03 1216.85 L1969.44 1216.85 L1968.85 1216.85 L1968.27 1216.85 L1967.68 1216.85 L1967.09 1216.85 L1966.51 1216.85 L1965.92 1216.85 L1965.33 1216.85 L1964.75 1216.85 L1964.16 1216.85 L1963.58 1216.85 L1962.99 1216.85 L1962.4 1216.85 L1961.82 1216.85 L1961.23 1216.85 L1960.64 1216.85 L1960.06 1216.85 L1959.47 1216.85 L1958.88 1216.85 L1958.3 1216.85 L1957.71 1216.85 L1957.12 1216.85 L1956.54 1216.85 L1955.95 1216.85 L1955.37 1216.85 L1954.78 1216.85 L1954.19 1216.85 L1953.61 1216.85 L1953.02 1216.85 L1952.43 1216.85 L1951.85 1216.85 L1951.26 1216.85 L1950.67 1216.85 L1950.09 1216.85 L1949.5 1216.85 L1948.91 1216.85 L1948.33 1216.85 L1947.74 1216.85 L1947.16 1216.85 L1946.57 1216.85 L1945.98 1216.85 L1945.4 1216.85 L1944.81 1216.85 L1944.22 1216.85 L1943.64 1216.85 L1943.05 1216.85 L1942.46 1216.85 L1941.88 1216.85 L1941.29 1216.85 L1940.71 1216.85 L1940.12 1216.85 L1939.53 1216.85 L1938.95 1216.85 L1938.36 1216.85 L1937.77 1216.85 L1937.19 1216.85 L1936.6 1216.85 L1936.01 1216.85 L1935.43 1216.85 L1934.84 1216.85 L1934.25 1216.85 L1933.67 1216.85 L1933.08 1216.85 L1932.5 1216.85 L1931.91 1216.85 L1931.32 1216.85 L1930.74 1216.85 L1930.15 1216.85 L1929.56 1216.85 L1928.98 1216.85 L1928.39 1216.85 L1927.8 1216.85 L1927.22 1216.85 L1926.63 1216.85 L1926.04 1216.85 L1925.46 1216.85 L1924.87 1216.85 L1924.29 1216.85 L1923.7 1216.85 L1923.11 1216.85 L1922.53 1216.85 L1921.94 1216.85 L1921.35 1216.85 L1920.77 1216.85 L1920.18 1216.85 L1919.59 1216.85 L1919.01 1216.85 L1918.42 1216.85 L1917.83 1216.85 L1917.25 1216.85 L1916.66 1216.85 L1916.08 1216.85 L1915.49 1216.85 L1914.9 1216.85 L1914.32 1216.85 L1913.73 1216.85 L1913.14 1216.85 L1912.56 1216.85 L1911.97 1216.85 L1911.38 1216.85 L1910.8 1216.85 L1910.21 1216.85 L1909.63 1216.85 L1909.04 1216.85 L1908.45 1216.85 L1907.87 1216.85 L1907.28 1216.85 L1906.69 1216.85 L1906.11 1216.85 L1905.52 1216.85 L1904.93 1216.85 L1904.35 1216.85 L1903.76 1216.85 L1903.17 1216.85 L1902.59 1216.85 L1902 1216.85 L1901.42 1216.85 L1900.83 1216.85 L1900.24 1216.85 L1899.66 1216.85 L1899.07 1216.85 L1898.48 1216.85 L1897.9 1216.85 L1897.31 1216.85 L1896.72 1216.85 L1896.14 1216.85 L1895.55 1216.85 L1894.96 1216.85 L1894.38 1216.85 L1893.79 1216.85 L1893.21 1216.85 L1892.62 1216.85 L1892.03 1216.85 L1891.45 1216.85 L1890.86 1216.85 L1890.27 1216.85 L1889.69 1216.85 L1889.1 1216.85 L1888.51 1216.85 L1887.93 1216.85 L1887.34 1216.85 L1886.76 1216.85 L1886.17 1216.85 L1885.58 1216.85 L1885 1216.85 L1884.41 1216.85 L1883.82 1216.85 L1883.24 1216.85 L1882.65 1216.85 L1882.06 1216.85 L1881.48 1216.85 L1880.89 1216.85 L1880.3 1216.85 L1879.72 1216.85 L1879.13 1216.85 L1878.55 1216.85 L1877.96 1216.85 L1877.37 1216.85 L1876.79 1216.85 L1876.2 1216.85 L1875.61 1216.85 L1875.03 1216.85 L1874.44 1216.85 L1873.85 1216.85 L1873.27 1216.85 L1872.68 1216.85 L1872.09 1216.85 L1871.51 1216.85 L1870.92 1216.85 L1870.34 1216.85 L1869.75 1216.85 L1869.16 1216.85 L1868.58 1216.85 L1867.99 1216.85 L1867.4 1216.85 L1866.82 1216.85 L1866.23 1216.85 L1865.64 1216.85 L1865.06 1216.85 L1864.47 1216.85 L1863.88 1216.85 L1863.3 1216.85 L1862.71 1216.85 L1862.13 1216.85 L1861.54 1216.85 L1860.95 1216.85 L1860.37 1216.85 L1859.78 1216.85 L1859.19 1216.85 L1858.61 1216.85 L1858.02 1216.85 L1857.43 1216.85 L1856.85 1216.85 L1856.26 1216.85 L1855.68 1216.85 L1855.09 1216.85 L1854.5 1216.85 L1853.92 1216.85 L1853.33 1216.85 L1852.74 1216.85 L1852.16 1216.85 L1851.57 1216.85 L1850.98 1216.85 L1850.4 1216.85 L1849.81 1216.85 L1849.22 1216.85 L1848.64 1216.85 L1848.05 1216.85 L1847.47 1216.85 L1846.88 1216.85 L1846.29 1216.85 L1845.71 1216.85 L1845.12 1216.85 L1844.53 1216.85 L1843.95 1216.85 L1843.36 1216.85 L1842.77 1216.85 L1842.19 1216.85 L1841.6 1216.85 L1841.01 1216.85 L1840.43 1216.85 L1839.84 1216.85 L1839.26 1216.85 L1838.67 1216.85 L1838.08 1216.85 L1837.5 1216.85 L1836.91 1216.85 L1836.32 1216.85 L1835.74 1216.85 L1835.15 1216.85 L1834.56 1216.85 L1833.98 1216.85 L1833.39 1216.85 L1832.81 1216.85 L1832.22 1216.85 L1831.63 1216.85 L1831.05 1216.85 L1830.46 1216.85 L1829.87 1216.85 L1829.29 1216.85 L1828.7 1216.85 L1828.11 1216.85 L1827.53 1216.85 L1826.94 1216.85 L1826.35 1216.85 L1825.77 1216.85 L1825.18 1216.85 L1824.6 1216.85 L1824.01 1216.85 L1823.42 1216.85 L1822.84 1216.85 L1822.25 1216.85 L1821.66 1216.85 L1821.08 1216.85 L1820.49 1216.85 L1819.9 1216.85 L1819.32 1216.85 L1818.73 1216.85 L1818.14 1216.85 L1817.56 1216.85 L1816.97 1216.85 L1816.39 1216.85 L1815.8 1216.85 L1815.21 1216.85 L1814.63 1216.85 L1814.04 1216.85 L1813.45 1216.85 L1812.87 1216.85 L1812.28 1216.85 L1811.69 1216.85 L1811.11 1216.85 L1810.52 1216.85 L1809.94 1216.85 L1809.35 1216.85 L1808.76 1216.85 L1808.18 1216.85 L1807.59 1216.85 L1807 1216.85 L1806.42 1216.85 L1805.83 1216.85 L1805.24 1216.85 L1804.66 1216.85 L1804.07 1216.85 L1803.48 1216.85 L1802.9 1216.85 L1802.31 1216.85 L1801.73 1216.85 L1801.14 1216.85 L1800.55 1216.85 L1799.97 1216.85 L1799.38 1216.85 L1798.79 1216.85 L1798.21 1216.85 L1797.62 1216.85 L1797.03 1216.85 L1796.45 1216.85 L1795.86 1216.85 L1795.27 1216.85 L1794.69 1216.85 L1794.1 1216.85 L1793.52 1216.85 L1792.93 1216.85 L1792.34 1216.85 L1791.76 1216.85 L1791.17 1216.85 L1790.58 1216.85 L1790 1216.85 L1789.41 1216.85 L1788.82 1216.85 L1788.24 1216.85 L1787.65 1216.85 L1787.06 1216.85 L1786.48 1216.85 L1785.89 1216.85 L1785.31 1216.85 L1784.72 1216.85 L1784.13 1216.85 L1783.55 1216.85 L1782.96 1216.85 L1782.37 1216.85 L1781.79 1216.85 L1781.2 1216.85 L1780.61 1216.85 L1780.03 1216.85 L1779.44 1216.85 L1778.86 1216.85 L1778.27 1216.85 L1777.68 1216.85 L1777.1 1216.85 L1776.51 1216.85 L1775.92 1216.85 L1775.34 1216.85 L1774.75 1216.85 L1774.16 1216.85 L1773.58 1216.85 L1772.99 1216.85 L1772.4 1216.85 L1771.82 1216.85 L1771.23 1216.85 L1770.65 1216.85 L1770.06 1216.85 L1769.47 1216.85 L1768.89 1216.85 L1768.3 1216.85 L1767.71 1216.85 L1767.13 1216.85 L1766.54 1216.85 L1765.95 1216.85 L1765.37 1216.85 L1764.78 1216.85 L1764.19 1216.85 L1763.61 1216.85 L1763.02 1216.85 L1762.44 1216.85 L1761.85 1216.85 L1761.26 1216.85 L1760.68 1216.85 L1760.09 1216.85 L1759.5 1216.85 L1758.92 1216.85 L1758.33 1216.85 L1757.74 1216.85 L1757.16 1216.85 L1756.57 1216.85 L1755.99 1216.85 L1755.4 1216.85 L1754.81 1216.85 L1754.23 1216.85 L1753.64 1216.85 L1753.05 1216.85 L1752.47 1216.85 L1751.88 1216.85 L1751.29 1216.85 L1750.71 1216.85 L1750.12 1216.85 L1749.53 1216.85 L1748.95 1216.85 L1748.36 1216.85 L1747.78 1216.85 L1747.19 1216.85 L1746.6 1216.85 L1746.02 1216.85 L1745.43 1216.85 L1744.84 1216.85 L1744.26 1216.85 L1743.67 1216.85 L1743.08 1216.85 L1742.5 1216.85 L1741.91 1216.85 L1741.32 1216.85 L1740.74 1216.85 L1740.15 1216.85 L1739.57 1216.85 L1738.98 1216.85 L1738.39 1216.85 L1737.81 1216.85 L1737.22 1216.85 L1736.63 1216.85 L1736.05 1216.85 L1735.46 1216.85 L1734.87 1216.85 L1734.29 1216.85 L1733.7 1216.85 L1733.11 1216.85 L1732.53 1216.85 L1731.94 1216.85 L1731.36 1216.85 L1730.77 1216.85 L1730.18 1216.85 L1729.6 1216.85 L1729.01 1216.85 L1728.42 1216.85 L1727.84 1216.85 L1727.25 1216.85 L1726.66 1216.85 L1726.08 1216.85 L1725.49 1216.85 L1724.91 1216.85 L1724.32 1216.85 L1723.73 1216.85 L1723.15 1216.85 L1722.56 1216.85 L1721.97 1216.85 L1721.39 1216.85 L1720.8 1216.85 L1720.21 1216.85 L1719.63 1216.85 L1719.04 1216.85 L1718.45 1216.85 L1717.87 1216.85 L1717.28 1216.85 L1716.7 1216.85 L1716.11 1216.85 L1715.52 1216.85 L1714.94 1216.85 L1714.35 1216.85 L1713.76 1216.85 L1713.18 1216.85 L1712.59 1216.85 L1712 1216.85 L1711.42 1216.85 L1710.83 1216.85 L1710.24 1216.85 L1709.66 1216.85 L1709.07 1216.85 L1708.49 1216.85 L1707.9 1216.85 L1707.31 1216.85 L1706.73 1216.85 L1706.14 1216.85 L1705.55 1216.85 L1704.97 1216.85 L1704.38 1216.85 L1703.79 1216.85 L1703.21 1216.85 L1702.62 1216.85 L1702.04 1216.85 L1701.45 1216.85 L1700.86 1216.85 L1700.28 1216.85 L1699.69 1216.85 L1699.1 1216.85 L1698.52 1216.85 L1697.93 1216.85 L1697.34 1216.85 L1696.76 1216.85 L1696.17 1216.85 L1695.58 1216.85 L1695 1216.85 L1694.41 1216.85 L1693.83 1216.85 L1693.24 1216.85 L1692.65 1216.85 L1692.07 1216.85 L1691.48 1216.85 L1690.89 1216.85 L1690.31 1216.85 L1689.72 1216.85 L1689.13 1216.85 L1688.55 1216.85 L1687.96 1216.85 L1687.37 1216.85 L1686.79 1216.85 L1686.2 1216.85 L1685.62 1216.85 L1685.03 1216.85 L1684.44 1216.85 L1683.86 1216.85 L1683.27 1216.85 L1682.68 1216.85 L1682.1 1216.85 L1681.51 1216.85 L1680.92 1216.85 L1680.34 1216.85 L1679.75 1216.85 L1679.17 1216.85 L1678.58 1216.85 L1677.99 1216.85 L1677.41 1216.85 L1676.82 1216.85 L1676.23 1216.85 L1675.65 1216.85 L1675.06 1216.85 L1674.47 1216.85 L1673.89 1216.85 L1673.3 1216.85 L1672.71 1216.85 L1672.13 1216.85 L1671.54 1216.85 L1670.96 1216.85 L1670.37 1216.85 L1669.78 1216.85 L1669.2 1216.85 L1668.61 1216.85 L1668.02 1216.85 L1667.44 1216.85 L1666.85 1216.85 L1666.26 1216.85 L1665.68 1216.85 L1665.09 1216.85 L1664.5 1216.85 L1663.92 1216.85 L1663.33 1216.85 L1662.75 1216.85 L1662.16 1216.85 L1661.57 1216.85 L1660.99 1216.85 L1660.4 1216.85 L1659.81 1216.85 L1659.23 1216.85 L1658.64 1216.85 L1658.05 1216.85 L1657.47 1216.85 L1656.88 1216.85 L1656.29 1216.85 L1655.71 1216.85 L1655.12 1216.85 L1654.54 1216.85 L1653.95 1216.85 L1653.36 1216.85 L1652.78 1216.85 L1652.19 1216.85 L1651.6 1216.85 L1651.02 1216.85 L1650.43 1216.85 L1649.84 1216.85 L1649.26 1216.85 L1648.67 1216.85 L1648.09 1216.85 L1647.5 1216.85 L1646.91 1216.85 L1646.33 1216.85 L1645.74 1216.85 L1645.15 1216.85 L1644.57 1216.85 L1643.98 1216.85 L1643.39 1216.85 L1642.81 1216.85 L1642.22 1216.85 L1641.63 1216.85 L1641.05 1216.85 L1640.46 1216.85 L1639.88 1216.85 L1639.29 1216.85 L1638.7 1216.85 L1638.12 1216.85 L1637.53 1216.85 L1636.94 1216.85 L1636.36 1216.85 L1635.77 1216.85 L1635.18 1216.85 L1634.6 1216.85 L1634.01 1216.85 L1633.42 1216.85 L1632.84 1216.85 L1632.25 1216.85 L1631.67 1216.85 L1631.08 1216.85 L1630.49 1216.85 L1629.91 1216.85 L1629.32 1216.85 L1628.73 1216.85 L1628.15 1216.85 L1627.56 1216.85 L1626.97 1216.85 L1626.39 1216.85 L1625.8 1216.85 L1625.22 1216.85 L1624.63 1216.85 L1624.04 1216.85 L1623.46 1216.85 L1622.87 1216.85 L1622.28 1216.85 L1621.7 1216.85 L1621.11 1216.85 L1620.52 1216.85 L1619.94 1216.85 L1619.35 1216.85 L1618.76 1216.85 L1618.18 1216.85 L1617.59 1216.85 L1617.01 1216.85 L1616.42 1216.85 L1615.83 1216.85 L1615.25 1216.85 L1614.66 1216.85 L1614.07 1216.85 L1613.49 1216.85 L1612.9 1216.85 L1612.31 1216.85 L1611.73 1216.85 L1611.14 1216.85 L1610.55 1216.85 L1609.97 1216.85 L1609.38 1216.85 L1608.8 1216.85 L1608.21 1216.85 L1607.62 1216.85 L1607.04 1216.85 L1606.45 1216.85 L1605.86 1216.85 L1605.28 1216.85 L1604.69 1216.85 L1604.1 1216.85 L1603.52 1216.85 L1602.93 1216.85 L1602.34 1216.85 L1601.76 1216.85 L1601.17 1216.85 L1600.59 1216.85 L1600 1216.85 L1599.41 1216.85 L1598.83 1216.85 L1598.24 1216.85 L1597.65 1216.85 L1597.07 1216.85 L1596.48 1216.85 L1595.89 1216.85 L1595.31 1216.85 L1594.72 1216.85 L1594.14 1216.85 L1593.55 1216.85 L1592.96 1216.85 L1592.38 1216.85 L1591.79 1216.85 L1591.2 1216.85 L1590.62 1216.85 L1590.03 1216.85 L1589.44 1216.85 L1588.86 1216.85 L1588.27 1216.85 L1587.68 1216.85 L1587.1 1216.85 L1586.51 1216.85 L1585.93 1216.85 L1585.34 1216.85 L1584.75 1216.85 L1584.17 1216.85 L1583.58 1216.85 L1582.99 1216.85 L1582.41 1216.85 L1581.82 1216.85 L1581.23 1216.85 L1580.65 1216.85 L1580.06 1216.85 L1579.47 1216.85 L1578.89 1216.85 L1578.3 1216.85 L1577.72 1216.85 L1577.13 1216.85 L1576.54 1216.85 L1575.96 1216.85 L1575.37 1216.85 L1574.78 1216.85 L1574.2 1216.85 L1573.61 1216.85 L1573.02 1216.85 L1572.44 1216.85 L1571.85 1216.85 L1571.27 1216.85 L1570.68 1216.85 L1570.09 1216.85 L1569.51 1216.85 L1568.92 1216.85 L1568.33 1216.85 L1567.75 1216.85 L1567.16 1216.85 L1566.57 1216.85 L1565.99 1216.85 L1565.4 1216.85 L1564.81 1216.85 L1564.23 1216.85 L1563.64 1216.85 L1563.06 1216.85 L1562.47 1216.85 L1561.88 1216.85 L1561.3 1216.85 L1560.71 1216.85 L1560.12 1216.85 L1559.54 1216.85 L1558.95 1216.85 L1558.36 1216.85 L1557.78 1216.85 L1557.19 1216.85 L1556.6 1216.85 L1556.02 1216.85 L1555.43 1216.85 L1554.85 1216.85 L1554.26 1216.85 L1553.67 1216.85 L1553.09 1216.85 L1552.5 1216.85 L1551.91 1216.85 L1551.33 1216.85 L1550.74 1216.85 L1550.15 1216.85 L1549.57 1216.85 L1548.98 1216.85 L1548.4 1216.85 L1547.81 1216.85 L1547.22 1216.85 L1546.64 1216.85 L1546.05 1216.85 L1545.46 1216.85 L1544.88 1216.85 L1544.29 1216.85 L1543.7 1216.85 L1543.12 1216.85 L1542.53 1216.85 L1541.94 1216.85 L1541.36 1216.85 L1540.77 1216.85 L1540.19 1216.85 L1539.6 1216.85 L1539.01 1216.85 L1538.43 1216.85 L1537.84 1216.85 L1537.25 1216.85 L1536.67 1216.85 L1536.08 1216.85 L1535.49 1216.85 L1534.91 1216.85 L1534.32 1216.85 L1533.73 1216.85 L1533.15 1216.85 L1532.56 1216.85 L1531.98 1216.85 L1531.39 1216.85 L1530.8 1216.85 L1530.22 1216.85 L1529.63 1216.85 L1529.04 1216.85 L1528.46 1216.85 L1527.87 1216.85 L1527.28 1216.85 L1526.7 1216.85 L1526.11 1216.85 L1525.52 1216.85 L1524.94 1216.85 L1524.35 1216.85 L1523.77 1216.85 L1523.18 1216.85 L1522.59 1216.85 L1522.01 1216.85 L1521.42 1216.85 L1520.83 1216.85 L1520.25 1216.85 L1519.66 1216.85 L1519.07 1216.85 L1518.49 1216.85 L1517.9 1216.85 L1517.32 1216.85 L1516.73 1216.85 L1516.14 1216.85 L1515.56 1216.85 L1514.97 1216.85 L1514.38 1216.85 L1513.8 1216.85 L1513.21 1216.85 L1512.62 1216.85 L1512.04 1216.85 L1511.45 1216.85 L1510.86 1216.85 L1510.28 1216.85 L1509.69 1216.85 L1509.11 1216.85 L1508.52 1216.85 L1507.93 1216.85 L1507.35 1216.85 L1506.76 1216.85 L1506.17 1216.85 L1505.59 1216.85 L1505 1216.85 L1504.41 1216.85 L1503.83 1216.85 L1503.24 1216.85 L1502.65 1216.85 L1502.07 1216.85 L1501.48 1216.85 L1500.9 1216.85 L1500.31 1216.85 L1499.72 1216.85 L1499.14 1216.85 L1498.55 1216.85 L1497.96 1216.85 L1497.38 1216.85 L1496.79 1216.85 L1496.2 1216.85 L1495.62 1216.85 L1495.03 1216.85 L1494.45 1216.85 L1493.86 1216.85 L1493.27 1216.85 L1492.69 1216.85 L1492.1 1216.85 L1491.51 1216.85 L1490.93 1216.85 L1490.34 1216.85 L1489.75 1216.85 L1489.17 1216.85 L1488.58 1216.85 L1487.99 1216.85 L1487.41 1216.85 L1486.82 1216.85 L1486.24 1216.85 L1485.65 1216.85 L1485.06 1216.85 L1484.48 1216.85 L1483.89 1216.85 L1483.3 1216.85 L1482.72 1216.85 L1482.13 1216.85 L1481.54 1216.85 L1480.96 1216.85 L1480.37 1216.85 L1479.78 1216.85 L1479.2 1216.85 L1478.61 1216.85 L1478.03 1216.85 L1477.44 1216.85 L1476.85 1216.85 L1476.27 1216.85 L1475.68 1216.85 L1475.09 1216.85 L1474.51 1216.85 L1473.92 1216.85 L1473.33 1216.85 L1472.75 1216.85 L1472.16 1216.85 L1471.57 1216.85 L1470.99 1216.85 L1470.4 1216.85 L1469.82 1216.85 L1469.23 1216.85 L1468.64 1216.85 L1468.06 1216.85 L1467.47 1216.85 L1466.88 1216.85 L1466.3 1216.85 L1465.71 1216.85 L1465.12 1216.85 L1464.54 1216.85 L1463.95 1216.85 L1463.37 1216.85 L1462.78 1216.85 L1462.19 1216.85 L1461.61 1216.85 L1461.02 1216.85 L1460.43 1216.85 L1459.85 1216.85 L1459.26 1216.85 L1458.67 1216.85 L1458.09 1216.85 L1457.5 1216.85 L1456.91 1216.85 L1456.33 1216.85 L1455.74 1216.85 L1455.16 1216.85 L1454.57 1216.85 L1453.98 1216.85 L1453.4 1216.85 L1452.81 1216.85 L1452.22 1216.85 L1451.64 1216.85 L1451.05 1216.85 L1450.46 1216.85 L1449.88 1216.85 L1449.29 1216.85 L1448.7 1216.85 L1448.12 1216.85 L1447.53 1216.85 L1446.95 1216.85 L1446.36 1216.85 L1445.77 1216.85 L1445.19 1216.85 L1444.6 1216.85 L1444.01 1216.85 L1443.43 1216.85 L1442.84 1216.85 L1442.25 1216.85 L1441.67 1216.85 L1441.08 1216.85 L1440.5 1216.85 L1439.91 1216.85 L1439.32 1216.85 L1438.74 1216.85 L1438.15 1216.85 L1437.56 1216.85 L1436.98 1216.85 L1436.39 1216.85 L1435.8 1216.85 L1435.22 1216.85 L1434.63 1216.85 L1434.04 1216.85 L1433.46 1216.85 L1432.87 1216.85 L1432.29 1216.85 L1431.7 1216.85 L1431.11 1216.85 L1430.53 1216.85 L1429.94 1216.85 L1429.35 1216.85 L1428.77 1216.85 L1428.18 1216.85 L1427.59 1216.85 L1427.01 1216.85 L1426.42 1216.85 L1425.83 1216.85 L1425.25 1216.85 L1424.66 1216.85 L1424.08 1216.85 L1423.49 1216.85 L1422.9 1216.85 L1422.32 1216.85 L1421.73 1216.85 L1421.14 1216.85 L1420.56 1216.85 L1419.97 1216.85 L1419.38 1216.85 L1418.8 1216.85 L1418.21 1216.85 L1417.63 1216.85 L1417.04 1216.85 L1416.45 1216.85 L1415.87 1216.85 L1415.28 1216.85 L1414.69 1216.85 L1414.11 1216.85 L1413.52 1216.85 L1412.93 1216.85 L1412.35 1216.85 L1411.76 1216.85 L1411.17 1216.85 L1410.59 1216.85 L1410 1216.85 L1409.42 1216.85 L1408.83 1216.85 L1408.24 1216.85 L1407.66 1216.85 L1407.07 1216.85 L1406.48 1216.85 L1405.9 1216.85 L1405.31 1216.85 L1404.72 1216.85 L1404.14 1216.85 L1403.55 1216.85 L1402.96 1216.85 L1402.38 1216.85 L1401.79 1216.85 L1401.21 1216.85 L1400.62 1216.85 L1400.03 1216.85 L1399.45 1216.85 L1398.86 1216.85 L1398.27 1216.85 L1397.69 1216.85 L1397.1 1216.85 L1396.51 1216.85 L1395.93 1216.85 L1395.34 1216.85 L1394.75 1216.85 L1394.17 1216.85 L1393.58 1216.85 L1393 1216.85 L1392.41 1216.85 L1391.82 1216.85 L1391.24 1216.85 L1390.65 1216.85 L1390.06 1216.85 L1389.48 1216.85 L1388.89 1216.85 L1388.3 1216.85 L1387.72 1216.85 L1387.13 1216.85 L1386.55 1216.85 L1385.96 1216.85 L1385.37 1216.85 L1384.79 1216.85 L1384.2 1216.85 L1383.61 1216.85 L1383.03 1216.85 L1382.44 1216.85 L1381.85 1216.85 L1381.27 1216.85 L1380.68 1216.85 L1380.09 1216.85 L1379.51 1216.85 L1378.92 1216.85 L1378.34 1216.85 L1377.75 1216.85 L1377.16 1216.85 L1376.58 1216.85 L1375.99 1216.85 L1375.4 1216.85 L1374.82 1216.85 L1374.23 1216.85 L1373.64 1216.85 L1373.06 1216.85 L1372.47 1216.85 L1371.88 1216.85 L1371.3 1216.85 L1370.71 1216.85 L1370.13 1216.85 L1369.54 1216.85 L1368.95 1216.85 L1368.37 1216.85 L1367.78 1216.85 L1367.19 1216.85 L1366.61 1216.85 L1366.02 1216.85 L1365.43 1216.85 L1364.85 1216.85 L1364.26 1216.85 L1363.68 1216.85 L1363.09 1216.85 L1362.5 1216.85 L1361.92 1216.85 L1361.33 1216.85 L1360.74 1216.85 L1360.16 1216.85 L1359.57 1216.85 L1358.98 1216.85 L1358.4 1216.85 L1357.81 1216.85 L1357.22 1216.85 L1356.64 1216.85 L1356.05 1216.85 L1355.47 1216.85 L1354.88 1216.85 L1354.29 1216.85 L1353.71 1216.85 L1353.12 1216.85 L1352.53 1216.85 L1351.95 1216.85 L1351.36 1216.85 L1350.77 1216.85 L1350.19 1216.85 L1349.6 1216.85 L1349.01 1216.85 L1348.43 1216.85 L1347.84 1216.85 L1347.26 1216.85 L1346.67 1216.85 L1346.08 1216.85 L1345.5 1216.85 L1344.91 1216.85 L1344.32 1216.85 L1343.74 1216.85 L1343.15 1216.85 L1342.56 1216.85 L1341.98 1216.85 L1341.39 1216.85 L1340.8 1216.85 L1340.22 1216.85 L1339.63 1216.85 L1339.05 1216.85 L1338.46 1216.85 L1337.87 1216.85 L1337.29 1216.85 L1336.7 1216.85 L1336.11 1216.85 L1335.53 1216.85 L1334.94 1216.85 L1334.35 1216.85 L1333.77 1216.85 L1333.18 1216.85 L1332.6 1216.85 L1332.01 1216.85 L1331.42 1216.85 L1330.84 1216.85 L1330.25 1216.85 L1329.66 1216.85 L1329.08 1216.85 L1328.49 1216.85 L1327.9 1216.85 L1327.32 1216.85 L1326.73 1216.85 L1326.14 1216.85 L1325.56 1216.85 L1324.97 1216.85 L1324.39 1216.85 L1323.8 1216.85 L1323.21 1216.85 L1322.63 1216.85 L1322.04 1216.85 L1321.45 1216.85 L1320.87 1216.85 L1320.28 1216.85 L1319.69 1216.85 L1319.11 1216.85 L1318.52 1216.85 L1317.93 1216.85 L1317.35 1216.85 L1316.76 1216.85 L1316.18 1216.85 L1315.59 1216.85 L1315 1216.85 L1314.42 1216.85 L1313.83 1216.85 L1313.24 1216.85 L1312.66 1216.85 L1312.07 1216.85 L1311.48 1216.85 L1310.9 1216.85 L1310.31 1216.85 L1309.73 1216.85 L1309.14 1216.85 L1308.55 1216.85 L1307.97 1216.85 L1307.38 1216.85 L1306.79 1216.85 L1306.21 1216.85 L1305.62 1216.85 L1305.03 1216.85 L1304.45 1216.85 L1303.86 1216.85 L1303.27 1216.85 L1302.69 1216.85 L1302.1 1216.85 L1301.52 1216.85 L1300.93 1216.85 L1300.34 1216.85 L1299.76 1216.85 L1299.17 1216.85 L1298.58 1216.85 L1298 1216.85 L1297.41 1216.85 L1296.82 1216.85 L1296.24 1216.85 L1295.65 1216.85 L1295.06 1216.85 L1294.48 1216.85 L1293.89 1216.85 L1293.31 1216.85 L1292.72 1216.85 L1292.13 1216.85 L1291.55 1216.85 L1290.96 1216.85 L1290.37 1216.85 L1289.79 1216.85 L1289.2 1216.85 L1288.61 1216.85 L1288.03 1216.85 L1287.44 1216.85 L1286.86 1216.85 L1286.27 1216.85 L1285.68 1216.85 L1285.1 1216.85 L1284.51 1216.85 L1283.92 1216.85 L1283.34 1216.85 L1282.75 1216.85 L1282.16 1216.85 L1281.58 1216.85 L1280.99 1216.85 L1280.4 1216.85 L1279.82 1216.85 L1279.23 1216.85 L1278.65 1216.85 L1278.06 1216.85 L1277.47 1216.85 L1276.89 1216.85 L1276.3 1216.85 L1275.71 1216.85 L1275.13 1216.85 L1274.54 1216.85 L1273.95 1216.85 L1273.37 1216.85 L1272.78 1216.85 L1272.19 1216.85 L1271.61 1216.85 L1271.02 1216.85 L1270.44 1216.85 L1269.85 1216.85 L1269.26 1216.85 L1268.68 1216.85 L1268.09 1216.85 L1267.5 1216.85 L1266.92 1216.85 L1266.33 1216.85 L1265.74 1216.85 L1265.16 1216.85 L1264.57 1216.85 L1263.98 1216.85 L1263.4 1216.85 L1262.81 1216.85 L1262.23 1216.85 L1261.64 1216.85 L1261.05 1216.85 L1260.47 1216.85 L1259.88 1216.85 L1259.29 1216.85 L1258.71 1216.85 L1258.12 1216.85 L1257.53 1216.85 L1256.95 1216.85 L1256.36 1216.85 L1255.78 1216.85 L1255.19 1216.85 L1254.6 1216.85 L1254.02 1216.85 L1253.43 1216.85 L1252.84 1216.85 L1252.26 1216.85 L1251.67 1216.85 L1251.08 1216.85 L1250.5 1216.85 L1249.91 1216.85 L1249.32 1216.85 L1248.74 1216.85 L1248.15 1216.85 L1247.57 1216.85 L1246.98 1216.85 L1246.39 1216.85 L1245.81 1216.85 L1245.22 1216.85 L1244.63 1216.85 L1244.05 1216.85 L1243.46 1216.85 L1242.87 1216.85 L1242.29 1216.85 L1241.7 1216.85 L1241.11 1216.85 L1240.53 1216.85 L1239.94 1216.85 L1239.36 1216.85 L1238.77 1216.85 L1238.18 1216.85 L1237.6 1216.85 L1237.01 1216.85 L1236.42 1216.85 L1235.84 1216.85 L1235.25 1216.85 L1234.66 1216.85 L1234.08 1216.85 L1233.49 1216.85 L1232.91 1216.85 L1232.32 1216.85 L1231.73 1216.85 L1231.15 1216.85 L1230.56 1216.85 L1229.97 1216.85 L1229.39 1216.85 L1228.8 1216.85 L1228.21 1216.85 L1227.63 1216.85 L1227.04 1216.85 L1226.45 1216.85 L1225.87 1216.85 L1225.28 1216.85 L1224.7 1216.85 L1224.11 1216.85 L1223.52 1216.85 L1222.94 1216.85 L1222.35 1216.85 L1221.76 1216.85 L1221.18 1216.85 L1220.59 1216.85 L1220 1216.85 L1219.42 1216.85 L1218.83 1216.85 L1218.24 1216.85 L1217.66 1216.85 L1217.07 1216.85 L1216.49 1216.85 L1215.9 1216.85 L1215.31 1216.85 L1214.73 1216.85 L1214.14 1216.85 L1213.55 1216.85 L1212.97 1216.85 L1212.38 1216.85 L1211.79 1216.85 L1211.21 1216.85 L1210.62 1216.85 L1210.03 1216.85 L1209.45 1216.85 L1208.86 1216.85 L1208.28 1216.85 L1207.69 1216.85 L1207.1 1216.85 L1206.52 1216.85 L1205.93 1216.85 L1205.34 1216.85 L1204.76 1216.85 L1204.17 1216.85 L1203.58 1216.85 L1203 1216.85 L1202.41 1216.85 L1201.83 1216.85 L1201.24 1216.85 L1200.65 1216.85 L1200.07 1216.85 L1199.48 1216.85 L1198.89 1216.85 L1198.31 1216.85 L1197.72 1216.85 L1197.13 1216.85 L1196.55 1216.85 L1195.96 1216.85 L1195.37 1216.85 L1194.79 1216.85 L1194.2 1216.85 L1193.62 1216.85 L1193.03 1216.85 L1192.44 1216.85 L1191.86 1216.85 L1191.27 1216.85 L1190.68 1216.85 L1190.1 1216.85 L1189.51 1216.85 L1188.92 1216.85 L1188.34 1216.85 L1187.75 1216.85 L1187.16 1216.85 L1186.58 1216.85 L1185.99 1216.85 L1185.41 1216.85 L1184.82 1216.85 L1184.23 1216.85 L1183.65 1216.85 L1183.06 1216.85 L1182.47 1216.85 L1181.89 1216.85 L1181.3 1216.85 L1180.71 1216.85 L1180.13 1216.85 L1179.54 1216.85 L1178.96 1216.85 L1178.37 1216.85 L1177.78 1216.85 L1177.2 1216.85 L1176.61 1216.85 L1176.02 1216.85 L1175.44 1216.85 L1174.85 1216.85 L1174.26 1216.85 L1173.68 1216.85 L1173.09 1216.85 L1172.5 1216.85 L1171.92 1216.85 L1171.33 1216.85 L1170.75 1216.85 L1170.16 1216.85 L1169.57 1216.85 L1168.99 1216.85 L1168.4 1216.85 L1167.81 1216.85 L1167.23 1216.85 L1166.64 1216.85 L1166.05 1216.85 L1165.47 1216.85 L1164.88 1216.85 L1164.29 1216.85 L1163.71 1216.85 L1163.12 1216.85 L1162.54 1216.85 L1161.95 1216.85 L1161.36 1216.85 L1160.78 1216.85 L1160.19 1216.85 L1159.6 1216.85 L1159.02 1216.85 L1158.43 1216.85 L1157.84 1216.85 L1157.26 1216.85 L1156.67 1216.85 L1156.09 1216.85 L1155.5 1216.85 L1154.91 1216.85 L1154.33 1216.85 L1153.74 1216.85 L1153.15 1216.85 L1152.57 1216.85 L1151.98 1216.85 L1151.39 1216.85 L1150.81 1216.85 L1150.22 1216.85 L1149.63 1216.85 L1149.05 1216.85 L1148.46 1216.85 L1147.88 1216.85 L1147.29 1216.85 L1146.7 1216.85 L1146.12 1216.85 L1145.53 1216.85 L1144.94 1216.85 L1144.36 1216.85 L1143.77 1216.85 L1143.18 1216.85 L1142.6 1216.85 L1142.01 1216.85 L1141.42 1216.85 L1140.84 1216.85 L1140.25 1216.85 L1139.67 1216.85 L1139.08 1216.85 L1138.49 1216.85 L1137.91 1216.85 L1137.32 1216.85 L1136.73 1216.85 L1136.15 1216.85 L1135.56 1216.85 L1134.97 1216.85 L1134.39 1216.85 L1133.8 1216.85 L1133.21 1216.85 L1132.63 1216.85 L1132.04 1216.85 L1131.46 1216.85 L1130.87 1216.85 L1130.28 1216.85 L1129.7 1216.85 L1129.11 1216.85 L1128.52 1216.85 L1127.94 1216.85 L1127.35 1216.85 L1126.76 1216.85 L1126.18 1216.85 L1125.59 1216.85 L1125.01 1216.85 L1124.42 1216.85 L1123.83 1216.85 L1123.25 1216.85 L1122.66 1216.85 L1122.07 1216.85 L1121.49 1216.85 L1120.9 1216.85 L1120.31 1216.85 L1119.73 1216.85 L1119.14 1216.85 L1118.55 1216.85 L1117.97 1216.85 L1117.38 1216.85 L1116.8 1216.85 L1116.21 1216.85 L1115.62 1216.85 L1115.04 1216.85 L1114.45 1216.85 L1113.86 1216.85 L1113.28 1216.85 L1112.69 1216.85 L1112.1 1216.85 L1111.52 1216.85 L1110.93 1216.85 L1110.34 1216.85 L1109.76 1216.85 L1109.17 1216.85 L1108.59 1216.85 L1108 1216.85 L1107.41 1216.85 L1106.83 1216.85 L1106.24 1216.85 L1105.65 1216.85 L1105.07 1216.85 L1104.48 1216.85 L1103.89 1216.85 L1103.31 1216.85 L1102.72 1216.85 L1102.14 1216.85 L1101.55 1216.85 L1100.96 1216.85 L1100.38 1216.85 L1099.79 1216.85 L1099.2 1216.85 L1098.62 1216.85 L1098.03 1216.85 L1097.44 1216.85 L1096.86 1216.85 L1096.27 1216.85 L1095.68 1216.85 L1095.1 1216.85 L1094.51 1216.85 L1093.93 1216.85 L1093.34 1216.85 L1092.75 1216.85 L1092.17 1216.85 L1091.58 1216.85 L1090.99 1216.85 L1090.41 1216.85 L1089.82 1216.85 L1089.23 1216.85 L1088.65 1216.85 L1088.06 1216.85 L1087.47 1216.85 L1086.89 1216.85 L1086.3 1216.85 L1085.72 1216.85 L1085.13 1216.85 L1084.54 1216.85 L1083.96 1216.85 L1083.37 1216.85 L1082.78 1216.85 L1082.2 1216.85 L1081.61 1216.85 L1081.02 1216.85 L1080.44 1216.85 L1079.85 1216.85 L1079.26 1216.85 L1078.68 1216.85 L1078.09 1216.85 L1077.51 1216.85 L1076.92 1216.85 L1076.33 1216.85 L1075.75 1216.85 L1075.16 1216.85 L1074.57 1216.85 L1073.99 1216.85 L1073.4 1216.85 L1072.81 1216.85 L1072.23 1216.85 L1071.64 1216.85 L1071.06 1216.85 L1070.47 1216.85 L1069.88 1216.85 L1069.3 1216.85 L1068.71 1216.85 L1068.12 1216.85 L1067.54 1216.85 L1066.95 1216.85 L1066.36 1216.85 L1065.78 1216.85 L1065.19 1216.85 L1064.6 1216.85 L1064.02 1216.85 L1063.43 1216.85 L1062.85 1216.85 L1062.26 1216.85 L1061.67 1216.85 L1061.09 1216.85 L1060.5 1216.85 L1059.91 1216.85 L1059.33 1216.85 L1058.74 1216.85 L1058.15 1216.85 L1057.57 1216.85 L1056.98 1216.85 L1056.39 1216.85 L1055.81 1216.85 L1055.22 1216.85 L1054.64 1216.85 L1054.05 1216.85 L1053.46 1216.85 L1052.88 1216.85 L1052.29 1216.85 L1051.7 1216.85 L1051.12 1216.85 L1050.53 1216.85 L1049.94 1216.85 L1049.36 1216.85 L1048.77 1216.85 L1048.19 1216.85 L1047.6 1216.85 L1047.01 1216.85 L1046.43 1216.85 L1045.84 1216.85 L1045.25 1216.85 L1044.67 1216.85 L1044.08 1216.85 L1043.49 1216.85 L1042.91 1216.85 L1042.32 1216.85 L1041.73 1216.85 L1041.15 1216.85 L1040.56 1216.85 L1039.98 1216.85 L1039.39 1216.85 L1038.8 1216.85 L1038.22 1216.85 L1037.63 1216.85 L1037.04 1216.85 L1036.46 1216.85 L1035.87 1216.85 L1035.28 1216.85 L1034.7 1216.85 L1034.11 1216.85 L1033.52 1216.85 L1032.94 1216.85 L1032.35 1216.85 L1031.77 1216.85 L1031.18 1216.85 L1030.59 1216.85 L1030.01 1216.85 L1029.42 1216.85 L1028.83 1216.85 L1028.25 1216.85 L1027.66 1216.85 L1027.07 1216.85 L1026.49 1216.85 L1025.9 1216.85 L1025.32 1216.85 L1024.73 1216.85 L1024.14 1216.85 L1023.56 1216.85 L1022.97 1216.85 L1022.38 1216.85 L1021.8 1216.85 L1021.21 1216.85 L1020.62 1216.85 L1020.04 1216.85 L1019.45 1216.85 L1018.86 1216.85 L1018.28 1216.85 L1017.69 1216.85 L1017.11 1216.85 L1016.52 1216.85 L1015.93 1216.85 L1015.35 1216.85 L1014.76 1216.85 L1014.17 1216.85 L1013.59 1216.85 L1013 1216.85 L1012.41 1216.85 L1011.83 1216.85 L1011.24 1216.85 L1010.65 1216.85 L1010.07 1216.85 L1009.48 1216.85 L1008.9 1216.85 L1008.31 1216.85 L1007.72 1216.85 L1007.14 1216.85 L1006.55 1216.85 L1005.96 1216.85 L1005.38 1216.85 L1004.79 1216.85 L1004.2 1216.85 L1003.62 1216.85 L1003.03 1216.85 L1002.44 1216.85 L1001.86 1216.85 L1001.27 1216.85 L1000.69 1216.85 L1000.1 1216.85 L999.513 1216.85 L998.926 1216.85 L998.34 1216.85 L997.754 1216.85 L997.167 1216.85 L996.581 1216.85 L995.994 1216.85 L995.408 1216.85 L994.822 1216.85 L994.235 1216.85 L993.649 1216.85 L993.062 1216.85 L992.476 1216.85 L991.889 1216.85 L991.303 1216.85 L990.717 1216.85 L990.13 1216.85 L989.544 1216.85 L988.957 1216.85 L988.371 1216.85 L987.785 1216.85 L987.198 1216.85 L986.612 1216.85 L986.025 1216.85  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1217.21 986.612,1217.21 987.198,1217.21 987.785,1217.21 988.371,1217.21 988.957,1217.21 989.544,1217.21 990.13,1217.21 990.717,1217.21 991.303,1217.21 991.889,1217.21 992.476,1217.21 993.062,1217.21 993.649,1217.21 994.235,1217.21 994.822,1217.21 995.408,1217.21 995.994,1217.21 996.581,1217.21 997.167,1217.21 997.754,1217.21 998.34,1217.21 998.926,1217.21 999.513,1217.21 1000.1,1217.21 1000.69,1217.21 1001.27,1217.21 1001.86,1217.21 1002.44,1217.21 1003.03,1217.21 1003.62,1217.21 1004.2,1217.21 1004.79,1217.21 1005.38,1217.21 1005.96,1217.21 1006.55,1217.21 1007.14,1217.21 1007.72,1217.21 1008.31,1217.21 1008.9,1217.21 1009.48,1217.21 1010.07,1217.21 1010.65,1217.21 1011.24,1217.21 1011.83,1217.21 1012.41,1217.21 1013,1217.21 1013.59,1217.21 1014.17,1217.21 1014.76,1217.21 1015.35,1217.21 1015.93,1217.21 1016.52,1217.21 1017.11,1217.21 1017.69,1217.21 1018.28,1217.21 1018.86,1217.21 1019.45,1217.21 1020.04,1217.21 1020.62,1217.21 1021.21,1217.21 1021.8,1217.21 1022.38,1217.21 1022.97,1217.21 1023.56,1217.21 1024.14,1217.21 1024.73,1217.21 1025.32,1217.21 1025.9,1217.21 1026.49,1217.21 1027.07,1217.21 1027.66,1217.21 1028.25,1217.21 1028.83,1217.21 1029.42,1217.21 1030.01,1217.21 1030.59,1217.21 1031.18,1217.21 1031.77,1217.21 1032.35,1217.21 1032.94,1217.21 1033.52,1217.21 1034.11,1217.21 1034.7,1217.21 1035.28,1217.21 1035.87,1217.21 1036.46,1217.21 1037.04,1217.21 1037.63,1217.21 1038.22,1217.21 1038.8,1217.21 1039.39,1217.21 1039.98,1217.21 1040.56,1217.21 1041.15,1217.21 1041.73,1217.21 1042.32,1217.21 1042.91,1217.21 1043.49,1217.21 1044.08,1217.21 1044.67,1217.21 1045.25,1217.21 1045.84,1217.21 1046.43,1217.21 1047.01,1217.21 1047.6,1217.21 1048.19,1217.21 1048.77,1217.21 1049.36,1217.21 1049.94,1217.21 1050.53,1217.21 1051.12,1217.21 1051.7,1217.21 1052.29,1217.21 1052.88,1217.21 1053.46,1217.21 1054.05,1217.21 1054.64,1217.21 1055.22,1217.21 1055.81,1217.21 1056.39,1217.21 1056.98,1217.21 1057.57,1217.21 1058.15,1217.21 1058.74,1217.21 1059.33,1217.21 1059.91,1217.21 1060.5,1217.21 1061.09,1217.21 1061.67,1217.21 1062.26,1217.21 1062.85,1217.21 1063.43,1217.21 1064.02,1217.21 1064.6,1217.21 1065.19,1217.21 1065.78,1217.21 1066.36,1217.21 1066.95,1217.21 1067.54,1217.21 1068.12,1217.21 1068.71,1217.21 1069.3,1217.21 1069.88,1217.21 1070.47,1217.21 1071.06,1217.21 1071.64,1217.21 1072.23,1217.21 1072.81,1217.21 1073.4,1217.21 1073.99,1217.21 1074.57,1217.21 1075.16,1217.21 1075.75,1217.21 1076.33,1217.21 1076.92,1217.21 1077.51,1217.21 1078.09,1217.21 1078.68,1217.21 1079.26,1217.21 1079.85,1217.21 1080.44,1217.21 1081.02,1217.21 1081.61,1217.21 1082.2,1217.21 1082.78,1217.21 1083.37,1217.21 1083.96,1217.21 1084.54,1217.21 1085.13,1217.21 1085.72,1217.21 1086.3,1217.21 1086.89,1217.21 1087.47,1217.21 1088.06,1217.21 1088.65,1217.21 1089.23,1217.21 1089.82,1217.21 1090.41,1217.21 1090.99,1217.21 1091.58,1217.21 1092.17,1217.21 1092.75,1217.21 1093.34,1217.21 1093.93,1217.21 1094.51,1217.21 1095.1,1217.21 1095.68,1217.21 1096.27,1217.21 1096.86,1217.21 1097.44,1217.21 1098.03,1217.21 1098.62,1217.21 1099.2,1217.21 1099.79,1217.21 1100.38,1217.21 1100.96,1217.21 1101.55,1217.21 1102.14,1217.21 1102.72,1217.21 1103.31,1217.21 1103.89,1217.21 1104.48,1217.21 1105.07,1217.21 1105.65,1217.21 1106.24,1217.21 1106.83,1217.21 1107.41,1217.21 1108,1217.21 1108.59,1217.21 1109.17,1217.21 1109.76,1217.21 1110.34,1217.21 1110.93,1217.21 1111.52,1217.21 1112.1,1217.21 1112.69,1217.21 1113.28,1217.21 1113.86,1217.21 1114.45,1217.21 1115.04,1217.21 1115.62,1217.21 1116.21,1217.21 1116.8,1217.21 1117.38,1217.21 1117.97,1217.21 1118.55,1217.21 1119.14,1217.21 1119.73,1217.21 1120.31,1217.21 1120.9,1217.21 1121.49,1217.21 1122.07,1217.21 1122.66,1217.21 1123.25,1217.21 1123.83,1217.21 1124.42,1217.21 1125.01,1217.21 1125.59,1217.21 1126.18,1217.21 1126.76,1217.21 1127.35,1217.21 1127.94,1217.21 1128.52,1217.21 1129.11,1217.21 1129.7,1217.21 1130.28,1217.21 1130.87,1217.21 1131.46,1217.21 1132.04,1217.21 1132.63,1217.21 1133.21,1217.21 1133.8,1217.21 1134.39,1217.21 1134.97,1217.21 1135.56,1217.21 1136.15,1217.21 1136.73,1217.21 1137.32,1217.21 1137.91,1217.21 1138.49,1217.21 1139.08,1217.21 1139.67,1217.21 1140.25,1217.21 1140.84,1217.21 1141.42,1217.21 1142.01,1217.21 1142.6,1217.21 1143.18,1217.21 1143.77,1217.21 1144.36,1217.21 1144.94,1217.21 1145.53,1217.21 1146.12,1217.21 1146.7,1217.21 1147.29,1217.21 1147.88,1217.21 1148.46,1217.21 1149.05,1217.21 1149.63,1217.21 1150.22,1217.21 1150.81,1217.21 1151.39,1217.21 1151.98,1217.21 1152.57,1217.21 1153.15,1217.21 1153.74,1217.21 1154.33,1217.21 1154.91,1217.21 1155.5,1217.21 1156.09,1217.21 1156.67,1217.21 1157.26,1217.21 1157.84,1217.21 1158.43,1217.21 1159.02,1217.21 1159.6,1217.21 1160.19,1217.21 1160.78,1217.21 1161.36,1217.21 1161.95,1217.21 1162.54,1217.21 1163.12,1217.21 1163.71,1217.21 1164.29,1217.21 1164.88,1217.21 1165.47,1217.21 1166.05,1217.21 1166.64,1217.21 1167.23,1217.21 1167.81,1217.21 1168.4,1217.21 1168.99,1217.21 1169.57,1217.21 1170.16,1217.21 1170.75,1217.21 1171.33,1217.21 1171.92,1217.21 1172.5,1217.21 1173.09,1217.21 1173.68,1217.21 1174.26,1217.21 1174.85,1217.21 1175.44,1217.21 1176.02,1217.21 1176.61,1217.21 1177.2,1217.21 1177.78,1217.21 1178.37,1217.21 1178.96,1217.21 1179.54,1217.21 1180.13,1217.21 1180.71,1217.21 1181.3,1217.21 1181.89,1217.21 1182.47,1217.21 1183.06,1217.21 1183.65,1217.21 1184.23,1217.21 1184.82,1217.21 1185.41,1217.21 1185.99,1217.21 1186.58,1217.21 1187.16,1217.21 1187.75,1217.21 1188.34,1217.21 1188.92,1217.21 1189.51,1217.21 1190.1,1217.21 1190.68,1217.21 1191.27,1217.21 1191.86,1217.21 1192.44,1217.21 1193.03,1217.21 1193.62,1217.21 1194.2,1217.21 1194.79,1217.21 1195.37,1217.21 1195.96,1217.21 1196.55,1217.21 1197.13,1217.21 1197.72,1217.21 1198.31,1217.21 1198.89,1217.21 1199.48,1217.21 1200.07,1217.21 1200.65,1217.21 1201.24,1217.21 1201.83,1217.21 1202.41,1217.21 1203,1217.21 1203.58,1217.21 1204.17,1217.21 1204.76,1217.21 1205.34,1217.21 1205.93,1217.21 1206.52,1217.21 1207.1,1217.21 1207.69,1217.21 1208.28,1217.21 1208.86,1217.21 1209.45,1217.21 1210.03,1217.21 1210.62,1217.21 1211.21,1217.21 1211.79,1217.21 1212.38,1217.21 1212.97,1217.21 1213.55,1217.21 1214.14,1217.21 1214.73,1217.21 1215.31,1217.21 1215.9,1217.21 1216.49,1217.21 1217.07,1217.21 1217.66,1217.21 1218.24,1217.21 1218.83,1217.21 1219.42,1217.21 1220,1217.21 1220.59,1217.21 1221.18,1217.21 1221.76,1217.21 1222.35,1217.21 1222.94,1217.21 1223.52,1217.21 1224.11,1217.21 1224.7,1217.21 1225.28,1217.21 1225.87,1217.21 1226.45,1217.21 1227.04,1217.21 1227.63,1217.21 1228.21,1217.21 1228.8,1217.21 1229.39,1217.21 1229.97,1217.21 1230.56,1217.21 1231.15,1217.21 1231.73,1217.21 1232.32,1217.21 1232.91,1217.21 1233.49,1217.21 1234.08,1217.21 1234.66,1217.21 1235.25,1217.21 1235.84,1217.21 1236.42,1217.21 1237.01,1217.21 1237.6,1217.21 1238.18,1217.21 1238.77,1217.21 1239.36,1217.21 1239.94,1217.21 1240.53,1217.21 1241.11,1217.21 1241.7,1217.21 1242.29,1217.21 1242.87,1217.21 1243.46,1217.21 1244.05,1217.21 1244.63,1217.21 1245.22,1217.21 1245.81,1217.21 1246.39,1217.21 1246.98,1217.21 1247.57,1217.21 1248.15,1217.21 1248.74,1217.21 1249.32,1217.21 1249.91,1217.21 1250.5,1217.21 1251.08,1217.21 1251.67,1217.21 1252.26,1217.21 1252.84,1217.21 1253.43,1217.21 1254.02,1217.21 1254.6,1217.21 1255.19,1217.21 1255.78,1217.21 1256.36,1217.21 1256.95,1217.21 1257.53,1217.21 1258.12,1217.21 1258.71,1217.21 1259.29,1217.21 1259.88,1217.21 1260.47,1217.21 1261.05,1217.21 1261.64,1217.21 1262.23,1217.21 1262.81,1217.21 1263.4,1217.21 1263.98,1217.21 1264.57,1217.21 1265.16,1217.21 1265.74,1217.21 1266.33,1217.21 1266.92,1217.21 1267.5,1217.21 1268.09,1217.21 1268.68,1217.21 1269.26,1217.21 1269.85,1217.21 1270.44,1217.21 1271.02,1217.21 1271.61,1217.21 1272.19,1217.21 1272.78,1217.21 1273.37,1217.21 1273.95,1217.21 1274.54,1217.21 1275.13,1217.21 1275.71,1217.21 1276.3,1217.21 1276.89,1217.21 1277.47,1217.21 1278.06,1217.21 1278.65,1217.21 1279.23,1217.21 1279.82,1217.21 1280.4,1217.21 1280.99,1217.21 1281.58,1217.21 1282.16,1217.21 1282.75,1217.21 1283.34,1217.21 1283.92,1217.21 1284.51,1217.21 1285.1,1217.21 1285.68,1217.21 1286.27,1217.21 1286.86,1217.21 1287.44,1217.21 1288.03,1217.21 1288.61,1217.21 1289.2,1217.21 1289.79,1217.21 1290.37,1217.21 1290.96,1217.21 1291.55,1217.21 1292.13,1217.21 1292.72,1217.21 1293.31,1217.21 1293.89,1217.21 1294.48,1217.21 1295.06,1217.21 1295.65,1217.21 1296.24,1217.21 1296.82,1217.21 1297.41,1217.21 1298,1217.21 1298.58,1217.21 1299.17,1217.21 1299.76,1217.21 1300.34,1217.21 1300.93,1217.21 1301.52,1217.21 1302.1,1217.21 1302.69,1217.21 1303.27,1217.21 1303.86,1217.21 1304.45,1217.21 1305.03,1217.21 1305.62,1217.21 1306.21,1217.21 1306.79,1217.21 1307.38,1217.21 1307.97,1217.21 1308.55,1217.21 1309.14,1217.21 1309.73,1217.21 1310.31,1217.21 1310.9,1217.21 1311.48,1217.21 1312.07,1217.21 1312.66,1217.21 1313.24,1217.21 1313.83,1217.21 1314.42,1217.21 1315,1217.21 1315.59,1217.21 1316.18,1217.21 1316.76,1217.21 1317.35,1217.21 1317.93,1217.21 1318.52,1217.21 1319.11,1217.21 1319.69,1217.21 1320.28,1217.21 1320.87,1217.21 1321.45,1217.21 1322.04,1217.21 1322.63,1217.21 1323.21,1217.21 1323.8,1217.21 1324.39,1217.21 1324.97,1217.21 1325.56,1217.21 1326.14,1217.21 1326.73,1217.21 1327.32,1217.21 1327.9,1217.21 1328.49,1217.21 1329.08,1217.21 1329.66,1217.21 1330.25,1217.21 1330.84,1217.21 1331.42,1217.21 1332.01,1217.21 1332.6,1217.21 1333.18,1217.21 1333.77,1217.21 1334.35,1217.21 1334.94,1217.21 1335.53,1217.21 1336.11,1217.21 1336.7,1217.21 1337.29,1217.21 1337.87,1217.21 1338.46,1217.21 1339.05,1217.21 1339.63,1217.21 1340.22,1217.21 1340.8,1217.21 1341.39,1217.21 1341.98,1217.21 1342.56,1217.21 1343.15,1217.21 1343.74,1217.21 1344.32,1217.21 1344.91,1217.21 1345.5,1217.21 1346.08,1217.21 1346.67,1217.21 1347.26,1217.21 1347.84,1217.21 1348.43,1217.21 1349.01,1217.21 1349.6,1217.21 1350.19,1217.21 1350.77,1217.21 1351.36,1217.21 1351.95,1217.21 1352.53,1217.21 1353.12,1217.21 1353.71,1217.21 1354.29,1217.21 1354.88,1217.21 1355.47,1217.21 1356.05,1217.21 1356.64,1217.21 1357.22,1217.21 1357.81,1217.21 1358.4,1217.21 1358.98,1217.21 1359.57,1217.21 1360.16,1217.21 1360.74,1217.21 1361.33,1217.21 1361.92,1217.21 1362.5,1217.21 1363.09,1217.21 1363.68,1217.21 1364.26,1217.21 1364.85,1217.21 1365.43,1217.21 1366.02,1217.21 1366.61,1217.21 1367.19,1217.21 1367.78,1217.21 1368.37,1217.21 1368.95,1217.21 1369.54,1217.21 1370.13,1217.21 1370.71,1217.21 1371.3,1217.21 1371.88,1217.21 1372.47,1217.21 1373.06,1217.21 1373.64,1217.21 1374.23,1217.21 1374.82,1217.21 1375.4,1217.21 1375.99,1217.21 1376.58,1217.21 1377.16,1217.21 1377.75,1217.21 1378.34,1217.21 1378.92,1217.21 1379.51,1217.21 1380.09,1217.21 1380.68,1217.21 1381.27,1217.21 1381.85,1217.21 1382.44,1217.21 1383.03,1217.21 1383.61,1217.21 1384.2,1217.21 1384.79,1217.21 1385.37,1217.21 1385.96,1217.21 1386.55,1217.21 1387.13,1217.21 1387.72,1217.21 1388.3,1217.21 1388.89,1217.21 1389.48,1217.21 1390.06,1217.21 1390.65,1217.21 1391.24,1217.21 1391.82,1217.21 1392.41,1217.21 1393,1217.21 1393.58,1217.21 1394.17,1217.21 1394.75,1217.21 1395.34,1217.21 1395.93,1217.21 1396.51,1217.21 1397.1,1217.21 1397.69,1217.21 1398.27,1217.21 1398.86,1217.21 1399.45,1217.21 1400.03,1217.21 1400.62,1217.21 1401.21,1217.21 1401.79,1217.21 1402.38,1217.21 1402.96,1217.21 1403.55,1217.21 1404.14,1217.21 1404.72,1217.21 1405.31,1217.21 1405.9,1217.21 1406.48,1217.21 1407.07,1217.21 1407.66,1217.21 1408.24,1217.21 1408.83,1217.21 1409.42,1217.21 1410,1217.21 1410.59,1217.21 1411.17,1217.21 1411.76,1217.21 1412.35,1217.21 1412.93,1217.21 1413.52,1217.21 1414.11,1217.21 1414.69,1217.21 1415.28,1217.21 1415.87,1217.21 1416.45,1217.21 1417.04,1217.21 1417.63,1217.21 1418.21,1217.21 1418.8,1217.21 1419.38,1217.21 1419.97,1217.21 1420.56,1217.21 1421.14,1217.21 1421.73,1217.21 1422.32,1217.21 1422.9,1217.21 1423.49,1217.21 1424.08,1217.21 1424.66,1217.21 1425.25,1217.21 1425.83,1217.21 1426.42,1217.21 1427.01,1217.21 1427.59,1217.21 1428.18,1217.21 1428.77,1217.21 1429.35,1217.21 1429.94,1217.21 1430.53,1217.21 1431.11,1217.21 1431.7,1217.21 1432.29,1217.21 1432.87,1217.21 1433.46,1217.21 1434.04,1217.21 1434.63,1217.21 1435.22,1217.21 1435.8,1217.21 1436.39,1217.21 1436.98,1217.21 1437.56,1217.21 1438.15,1217.21 1438.74,1217.21 1439.32,1217.21 1439.91,1217.21 1440.5,1217.21 1441.08,1217.21 1441.67,1217.21 1442.25,1217.21 1442.84,1217.21 1443.43,1217.21 1444.01,1217.21 1444.6,1217.21 1445.19,1217.21 1445.77,1217.21 1446.36,1217.21 1446.95,1217.21 1447.53,1217.21 1448.12,1217.21 1448.7,1217.21 1449.29,1217.21 1449.88,1217.21 1450.46,1217.21 1451.05,1217.21 1451.64,1217.21 1452.22,1217.21 1452.81,1217.21 1453.4,1217.21 1453.98,1217.21 1454.57,1217.21 1455.16,1217.21 1455.74,1217.21 1456.33,1217.21 1456.91,1217.21 1457.5,1217.21 1458.09,1217.21 1458.67,1217.21 1459.26,1217.21 1459.85,1217.21 1460.43,1217.21 1461.02,1217.21 1461.61,1217.21 1462.19,1217.21 1462.78,1217.21 1463.37,1217.21 1463.95,1217.21 1464.54,1217.21 1465.12,1217.21 1465.71,1217.21 1466.3,1217.21 1466.88,1217.21 1467.47,1217.21 1468.06,1217.21 1468.64,1217.21 1469.23,1217.21 1469.82,1217.21 1470.4,1217.21 1470.99,1217.21 1471.57,1217.21 1472.16,1217.21 1472.75,1217.21 1473.33,1217.21 1473.92,1217.21 1474.51,1217.21 1475.09,1217.21 1475.68,1217.21 1476.27,1217.21 1476.85,1217.21 1477.44,1217.21 1478.03,1217.21 1478.61,1217.21 1479.2,1217.21 1479.78,1217.21 1480.37,1217.21 1480.96,1217.21 1481.54,1217.21 1482.13,1217.21 1482.72,1217.21 1483.3,1217.21 1483.89,1217.21 1484.48,1217.21 1485.06,1217.21 1485.65,1217.21 1486.24,1217.21 1486.82,1217.21 1487.41,1217.21 1487.99,1217.21 1488.58,1217.21 1489.17,1217.21 1489.75,1217.21 1490.34,1217.21 1490.93,1217.21 1491.51,1217.21 1492.1,1217.21 1492.69,1217.21 1493.27,1217.21 1493.86,1217.21 1494.45,1217.21 1495.03,1217.21 1495.62,1217.21 1496.2,1217.21 1496.79,1217.21 1497.38,1217.21 1497.96,1217.21 1498.55,1217.21 1499.14,1217.21 1499.72,1217.21 1500.31,1217.21 1500.9,1217.21 1501.48,1217.21 1502.07,1217.21 1502.65,1217.21 1503.24,1217.21 1503.83,1217.21 1504.41,1217.21 1505,1217.21 1505.59,1217.21 1506.17,1217.21 1506.76,1217.21 1507.35,1217.21 1507.93,1217.21 1508.52,1217.21 1509.11,1217.21 1509.69,1217.21 1510.28,1217.21 1510.86,1217.21 1511.45,1217.21 1512.04,1217.21 1512.62,1217.21 1513.21,1217.21 1513.8,1217.21 1514.38,1217.21 1514.97,1217.21 1515.56,1217.21 1516.14,1217.21 1516.73,1217.21 1517.32,1217.21 1517.9,1217.21 1518.49,1217.21 1519.07,1217.21 1519.66,1217.21 1520.25,1217.21 1520.83,1217.21 1521.42,1217.21 1522.01,1217.21 1522.59,1217.21 1523.18,1217.21 1523.77,1217.21 1524.35,1217.21 1524.94,1217.21 1525.52,1217.21 1526.11,1217.21 1526.7,1217.21 1527.28,1217.21 1527.87,1217.21 1528.46,1217.21 1529.04,1217.21 1529.63,1217.21 1530.22,1217.21 1530.8,1217.21 1531.39,1217.21 1531.98,1217.21 1532.56,1217.21 1533.15,1217.21 1533.73,1217.21 1534.32,1217.21 1534.91,1217.21 1535.49,1217.21 1536.08,1217.21 1536.67,1217.21 1537.25,1217.21 1537.84,1217.21 1538.43,1217.21 1539.01,1217.21 1539.6,1217.21 1540.19,1217.21 1540.77,1217.21 1541.36,1217.21 1541.94,1217.21 1542.53,1217.21 1543.12,1217.21 1543.7,1217.21 1544.29,1217.21 1544.88,1217.21 1545.46,1217.21 1546.05,1217.21 1546.64,1217.21 1547.22,1217.21 1547.81,1217.21 1548.4,1217.21 1548.98,1217.21 1549.57,1217.21 1550.15,1217.21 1550.74,1217.21 1551.33,1217.21 1551.91,1217.21 1552.5,1217.21 1553.09,1217.21 1553.67,1217.21 1554.26,1217.21 1554.85,1217.21 1555.43,1217.21 1556.02,1217.21 1556.6,1217.21 1557.19,1217.21 1557.78,1217.21 1558.36,1217.21 1558.95,1217.21 1559.54,1217.21 1560.12,1217.21 1560.71,1217.21 1561.3,1217.21 1561.88,1217.21 1562.47,1217.21 1563.06,1217.21 1563.64,1217.21 1564.23,1217.21 1564.81,1217.21 1565.4,1217.21 1565.99,1217.21 1566.57,1217.21 1567.16,1217.21 1567.75,1217.21 1568.33,1217.21 1568.92,1217.21 1569.51,1217.21 1570.09,1217.21 1570.68,1217.21 1571.27,1217.21 1571.85,1217.21 1572.44,1217.21 1573.02,1217.21 1573.61,1217.21 1574.2,1217.21 1574.78,1217.21 1575.37,1217.21 1575.96,1217.21 1576.54,1217.21 1577.13,1217.21 1577.72,1217.21 1578.3,1217.21 1578.89,1217.21 1579.47,1217.21 1580.06,1217.21 1580.65,1217.21 1581.23,1217.21 1581.82,1217.21 1582.41,1217.21 1582.99,1217.21 1583.58,1217.21 1584.17,1217.21 1584.75,1217.21 1585.34,1217.21 1585.93,1217.21 1586.51,1217.21 1587.1,1217.21 1587.68,1217.21 1588.27,1217.21 1588.86,1217.21 1589.44,1217.21 1590.03,1217.21 1590.62,1217.21 1591.2,1217.21 1591.79,1217.21 1592.38,1217.21 1592.96,1217.21 1593.55,1217.21 1594.14,1217.21 1594.72,1217.21 1595.31,1217.21 1595.89,1217.21 1596.48,1217.21 1597.07,1217.21 1597.65,1217.21 1598.24,1217.21 1598.83,1217.21 1599.41,1217.21 1600,1217.21 1600.59,1217.21 1601.17,1217.21 1601.76,1217.21 1602.34,1217.21 1602.93,1217.21 1603.52,1217.21 1604.1,1217.21 1604.69,1217.21 1605.28,1217.21 1605.86,1217.21 1606.45,1217.21 1607.04,1217.21 1607.62,1217.21 1608.21,1217.21 1608.8,1217.21 1609.38,1217.21 1609.97,1217.21 1610.55,1217.21 1611.14,1217.21 1611.73,1217.21 1612.31,1217.21 1612.9,1217.21 1613.49,1217.21 1614.07,1217.21 1614.66,1217.21 1615.25,1217.21 1615.83,1217.21 1616.42,1217.21 1617.01,1217.21 1617.59,1217.21 1618.18,1217.21 1618.76,1217.21 1619.35,1217.21 1619.94,1217.21 1620.52,1217.21 1621.11,1217.21 1621.7,1217.21 1622.28,1217.21 1622.87,1217.21 1623.46,1217.21 1624.04,1217.21 1624.63,1217.21 1625.22,1217.21 1625.8,1217.21 1626.39,1217.21 1626.97,1217.21 1627.56,1217.21 1628.15,1217.21 1628.73,1217.21 1629.32,1217.21 1629.91,1217.21 1630.49,1217.21 1631.08,1217.21 1631.67,1217.21 1632.25,1217.21 1632.84,1217.21 1633.42,1217.21 1634.01,1217.21 1634.6,1217.21 1635.18,1217.21 1635.77,1217.21 1636.36,1217.21 1636.94,1217.21 1637.53,1217.21 1638.12,1217.21 1638.7,1217.21 1639.29,1217.21 1639.88,1217.21 1640.46,1217.21 1641.05,1217.21 1641.63,1217.21 1642.22,1217.21 1642.81,1217.21 1643.39,1217.21 1643.98,1217.21 1644.57,1217.21 1645.15,1217.21 1645.74,1217.21 1646.33,1217.21 1646.91,1217.21 1647.5,1217.21 1648.09,1217.21 1648.67,1217.21 1649.26,1217.21 1649.84,1217.21 1650.43,1217.21 1651.02,1217.21 1651.6,1217.21 1652.19,1217.21 1652.78,1217.21 1653.36,1217.21 1653.95,1217.21 1654.54,1217.21 1655.12,1217.21 1655.71,1217.21 1656.29,1217.21 1656.88,1217.21 1657.47,1217.21 1658.05,1217.21 1658.64,1217.21 1659.23,1217.21 1659.81,1217.21 1660.4,1217.21 1660.99,1217.21 1661.57,1217.21 1662.16,1217.21 1662.75,1217.21 1663.33,1217.21 1663.92,1217.21 1664.5,1217.21 1665.09,1217.21 1665.68,1217.21 1666.26,1217.21 1666.85,1217.21 1667.44,1217.21 1668.02,1217.21 1668.61,1217.21 1669.2,1217.21 1669.78,1217.21 1670.37,1217.21 1670.96,1217.21 1671.54,1217.21 1672.13,1217.21 1672.71,1217.21 1673.3,1217.21 1673.89,1217.21 1674.47,1217.21 1675.06,1217.21 1675.65,1217.21 1676.23,1217.21 1676.82,1217.21 1677.41,1217.21 1677.99,1217.21 1678.58,1217.21 1679.17,1217.21 1679.75,1217.21 1680.34,1217.21 1680.92,1217.21 1681.51,1217.21 1682.1,1217.21 1682.68,1217.21 1683.27,1217.21 1683.86,1217.21 1684.44,1217.21 1685.03,1217.21 1685.62,1217.21 1686.2,1217.21 1686.79,1217.21 1687.37,1217.21 1687.96,1217.21 1688.55,1217.21 1689.13,1217.21 1689.72,1217.21 1690.31,1217.21 1690.89,1217.21 1691.48,1217.21 1692.07,1217.21 1692.65,1217.21 1693.24,1217.21 1693.83,1217.21 1694.41,1217.21 1695,1217.21 1695.58,1217.21 1696.17,1217.21 1696.76,1217.21 1697.34,1217.21 1697.93,1217.21 1698.52,1217.21 1699.1,1217.21 1699.69,1217.21 1700.28,1217.21 1700.86,1217.21 1701.45,1217.21 1702.04,1217.21 1702.62,1217.21 1703.21,1217.21 1703.79,1217.21 1704.38,1217.21 1704.97,1217.21 1705.55,1217.21 1706.14,1217.21 1706.73,1217.21 1707.31,1217.21 1707.9,1217.21 1708.49,1217.21 1709.07,1217.21 1709.66,1217.21 1710.24,1217.21 1710.83,1217.21 1711.42,1217.21 1712,1217.21 1712.59,1217.21 1713.18,1217.21 1713.76,1217.21 1714.35,1217.21 1714.94,1217.21 1715.52,1217.21 1716.11,1217.21 1716.7,1217.21 1717.28,1217.21 1717.87,1217.21 1718.45,1217.21 1719.04,1217.21 1719.63,1217.21 1720.21,1217.21 1720.8,1217.21 1721.39,1217.21 1721.97,1217.21 1722.56,1217.21 1723.15,1217.21 1723.73,1217.21 1724.32,1217.21 1724.91,1217.21 1725.49,1217.21 1726.08,1217.21 1726.66,1217.21 1727.25,1217.21 1727.84,1217.21 1728.42,1217.21 1729.01,1217.21 1729.6,1217.21 1730.18,1217.21 1730.77,1217.21 1731.36,1217.21 1731.94,1217.21 1732.53,1217.21 1733.11,1217.21 1733.7,1217.21 1734.29,1217.21 1734.87,1217.21 1735.46,1217.21 1736.05,1217.21 1736.63,1217.21 1737.22,1217.21 1737.81,1217.21 1738.39,1217.21 1738.98,1217.21 1739.57,1217.21 1740.15,1217.21 1740.74,1217.21 1741.32,1217.21 1741.91,1217.21 1742.5,1217.21 1743.08,1217.21 1743.67,1217.21 1744.26,1217.21 1744.84,1217.21 1745.43,1217.21 1746.02,1217.21 1746.6,1217.21 1747.19,1217.21 1747.78,1217.21 1748.36,1217.21 1748.95,1217.21 1749.53,1217.21 1750.12,1217.21 1750.71,1217.21 1751.29,1217.21 1751.88,1217.21 1752.47,1217.21 1753.05,1217.21 1753.64,1217.21 1754.23,1217.21 1754.81,1217.21 1755.4,1217.21 1755.99,1217.21 1756.57,1217.21 1757.16,1217.21 1757.74,1217.21 1758.33,1217.21 1758.92,1217.21 1759.5,1217.21 1760.09,1217.21 1760.68,1217.21 1761.26,1217.21 1761.85,1217.21 1762.44,1217.21 1763.02,1217.21 1763.61,1217.21 1764.19,1217.21 1764.78,1217.21 1765.37,1217.21 1765.95,1217.21 1766.54,1217.21 1767.13,1217.21 1767.71,1217.21 1768.3,1217.21 1768.89,1217.21 1769.47,1217.21 1770.06,1217.21 1770.65,1217.21 1771.23,1217.21 1771.82,1217.21 1772.4,1217.21 1772.99,1217.21 1773.58,1217.21 1774.16,1217.21 1774.75,1217.21 1775.34,1217.21 1775.92,1217.21 1776.51,1217.21 1777.1,1217.21 1777.68,1217.21 1778.27,1217.21 1778.86,1217.21 1779.44,1217.21 1780.03,1217.21 1780.61,1217.21 1781.2,1217.21 1781.79,1217.21 1782.37,1217.21 1782.96,1217.21 1783.55,1217.21 1784.13,1217.21 1784.72,1217.21 1785.31,1217.21 1785.89,1217.21 1786.48,1217.21 1787.06,1217.21 1787.65,1217.21 1788.24,1217.21 1788.82,1217.21 1789.41,1217.21 1790,1217.21 1790.58,1217.21 1791.17,1217.21 1791.76,1217.21 1792.34,1217.21 1792.93,1217.21 1793.52,1217.21 1794.1,1217.21 1794.69,1217.21 1795.27,1217.21 1795.86,1217.21 1796.45,1217.21 1797.03,1217.21 1797.62,1217.21 1798.21,1217.21 1798.79,1217.21 1799.38,1217.21 1799.97,1217.21 1800.55,1217.21 1801.14,1217.21 1801.73,1217.21 1802.31,1217.21 1802.9,1217.21 1803.48,1217.21 1804.07,1217.21 1804.66,1217.21 1805.24,1217.21 1805.83,1217.21 1806.42,1217.21 1807,1217.21 1807.59,1217.21 1808.18,1217.21 1808.76,1217.21 1809.35,1217.21 1809.94,1217.21 1810.52,1217.21 1811.11,1217.21 1811.69,1217.21 1812.28,1217.21 1812.87,1217.21 1813.45,1217.21 1814.04,1217.21 1814.63,1217.21 1815.21,1217.21 1815.8,1217.21 1816.39,1217.21 1816.97,1217.21 1817.56,1217.21 1818.14,1217.21 1818.73,1217.21 1819.32,1217.21 1819.9,1217.21 1820.49,1217.21 1821.08,1217.21 1821.66,1217.21 1822.25,1217.21 1822.84,1217.21 1823.42,1217.21 1824.01,1217.21 1824.6,1217.21 1825.18,1217.21 1825.77,1217.21 1826.35,1217.21 1826.94,1217.21 1827.53,1217.21 1828.11,1217.21 1828.7,1217.21 1829.29,1217.21 1829.87,1217.21 1830.46,1217.21 1831.05,1217.21 1831.63,1217.21 1832.22,1217.21 1832.81,1217.21 1833.39,1217.21 1833.98,1217.21 1834.56,1217.21 1835.15,1217.21 1835.74,1217.21 1836.32,1217.21 1836.91,1217.21 1837.5,1217.21 1838.08,1217.21 1838.67,1217.21 1839.26,1217.21 1839.84,1217.21 1840.43,1217.21 1841.01,1217.21 1841.6,1217.21 1842.19,1217.21 1842.77,1217.21 1843.36,1217.21 1843.95,1217.21 1844.53,1217.21 1845.12,1217.21 1845.71,1217.21 1846.29,1217.21 1846.88,1217.21 1847.47,1217.21 1848.05,1217.21 1848.64,1217.21 1849.22,1217.21 1849.81,1217.21 1850.4,1217.21 1850.98,1217.21 1851.57,1217.21 1852.16,1217.21 1852.74,1217.21 1853.33,1217.21 1853.92,1217.21 1854.5,1217.21 1855.09,1217.21 1855.68,1217.21 1856.26,1217.21 1856.85,1217.21 1857.43,1217.21 1858.02,1217.21 1858.61,1217.21 1859.19,1217.21 1859.78,1217.21 1860.37,1217.21 1860.95,1217.21 1861.54,1217.21 1862.13,1217.21 1862.71,1217.21 1863.3,1217.21 1863.88,1217.21 1864.47,1217.21 1865.06,1217.21 1865.64,1217.21 1866.23,1217.21 1866.82,1217.21 1867.4,1217.21 1867.99,1217.21 1868.58,1217.21 1869.16,1217.21 1869.75,1217.21 1870.34,1217.21 1870.92,1217.21 1871.51,1217.21 1872.09,1217.21 1872.68,1217.21 1873.27,1217.21 1873.85,1217.21 1874.44,1217.21 1875.03,1217.21 1875.61,1217.21 1876.2,1217.21 1876.79,1217.21 1877.37,1217.21 1877.96,1217.21 1878.55,1217.21 1879.13,1217.21 1879.72,1217.21 1880.3,1217.21 1880.89,1217.21 1881.48,1217.21 1882.06,1217.21 1882.65,1217.21 1883.24,1217.21 1883.82,1217.21 1884.41,1217.21 1885,1217.21 1885.58,1217.21 1886.17,1217.21 1886.76,1217.21 1887.34,1217.21 1887.93,1217.21 1888.51,1217.21 1889.1,1217.21 1889.69,1217.21 1890.27,1217.21 1890.86,1217.21 1891.45,1217.21 1892.03,1217.21 1892.62,1217.21 1893.21,1217.21 1893.79,1217.21 1894.38,1217.21 1894.96,1217.21 1895.55,1217.21 1896.14,1217.21 1896.72,1217.21 1897.31,1217.21 1897.9,1217.21 1898.48,1217.21 1899.07,1217.21 1899.66,1217.21 1900.24,1217.21 1900.83,1217.21 1901.42,1217.21 1902,1217.21 1902.59,1217.21 1903.17,1217.21 1903.76,1217.21 1904.35,1217.21 1904.93,1217.21 1905.52,1217.21 1906.11,1217.21 1906.69,1217.21 1907.28,1217.21 1907.87,1217.21 1908.45,1217.21 1909.04,1217.21 1909.63,1217.21 1910.21,1217.21 1910.8,1217.21 1911.38,1217.21 1911.97,1217.21 1912.56,1217.21 1913.14,1217.21 1913.73,1217.21 1914.32,1217.21 1914.9,1217.21 1915.49,1217.21 1916.08,1217.21 1916.66,1217.21 1917.25,1217.21 1917.83,1217.21 1918.42,1217.21 1919.01,1217.21 1919.59,1217.21 1920.18,1217.21 1920.77,1217.21 1921.35,1217.21 1921.94,1217.21 1922.53,1217.21 1923.11,1217.21 1923.7,1217.21 1924.29,1217.21 1924.87,1217.21 1925.46,1217.21 1926.04,1217.21 1926.63,1217.21 1927.22,1217.21 1927.8,1217.21 1928.39,1217.21 1928.98,1217.21 1929.56,1217.21 1930.15,1217.21 1930.74,1217.21 1931.32,1217.21 1931.91,1217.21 1932.5,1217.21 1933.08,1217.21 1933.67,1217.21 1934.25,1217.21 1934.84,1217.21 1935.43,1217.21 1936.01,1217.21 1936.6,1217.21 1937.19,1217.21 1937.77,1217.21 1938.36,1217.21 1938.95,1217.21 1939.53,1217.21 1940.12,1217.21 1940.71,1217.21 1941.29,1217.21 1941.88,1217.21 1942.46,1217.21 1943.05,1217.21 1943.64,1217.21 1944.22,1217.21 1944.81,1217.21 1945.4,1217.21 1945.98,1217.21 1946.57,1217.21 1947.16,1217.21 1947.74,1217.21 1948.33,1217.21 1948.91,1217.21 1949.5,1217.21 1950.09,1217.21 1950.67,1217.21 1951.26,1217.21 1951.85,1217.21 1952.43,1217.21 1953.02,1217.21 1953.61,1217.21 1954.19,1217.21 1954.78,1217.21 1955.37,1217.21 1955.95,1217.21 1956.54,1217.21 1957.12,1217.21 1957.71,1217.21 1958.3,1217.21 1958.88,1217.21 1959.47,1217.21 1960.06,1217.21 1960.64,1217.21 1961.23,1217.21 1961.82,1217.21 1962.4,1217.21 1962.99,1217.21 1963.58,1217.21 1964.16,1217.21 1964.75,1217.21 1965.33,1217.21 1965.92,1217.21 1966.51,1217.21 1967.09,1217.21 1967.68,1217.21 1968.27,1217.21 1968.85,1217.21 1969.44,1217.21 1970.03,1217.21 1970.61,1217.21 1971.2,1217.21 1971.78,1217.21 1972.37,1217.21 1972.96,1217.21 1973.54,1217.21 1974.13,1217.21 1974.72,1217.21 1975.3,1217.21 1975.89,1217.21 1976.48,1217.21 1977.06,1217.21 1977.65,1217.21 1978.24,1217.21 1978.82,1217.21 1979.41,1217.21 1979.99,1217.21 1980.58,1217.21 1981.17,1217.21 1981.75,1217.21 1982.34,1217.21 1982.93,1217.21 1983.51,1217.21 1984.1,1217.21 1984.69,1217.21 1985.27,1217.21 1985.86,1217.21 1986.45,1217.21 1987.03,1217.21 1987.62,1217.21 1988.2,1217.21 1988.79,1217.21 1989.38,1217.21 1989.96,1217.21 1990.55,1217.21 1991.14,1217.21 1991.72,1217.21 1992.31,1217.21 1992.9,1217.21 1993.48,1217.21 1994.07,1217.21 1994.65,1217.21 1995.24,1217.21 1995.83,1217.21 1996.41,1217.21 1997,1217.21 1997.59,1217.21 1998.17,1217.21 1998.76,1217.21 1999.35,1217.21 1999.93,1217.21 2000.52,1217.21 2001.11,1217.21 2001.69,1217.21 2002.28,1217.21 2002.86,1217.21 2003.45,1217.21 2004.04,1217.21 2004.62,1217.21 2005.21,1217.21 2005.8,1217.21 2006.38,1217.21 2006.97,1217.21 2007.56,1217.21 2008.14,1217.21 2008.73,1217.21 2009.32,1217.21 2009.9,1217.21 2010.49,1217.21 2011.07,1217.21 2011.66,1217.21 2012.25,1217.21 2012.83,1217.21 2013.42,1217.21 2014.01,1217.21 2014.59,1217.21 2015.18,1217.21 2015.77,1217.21 2016.35,1217.21 2016.94,1217.21 2017.53,1217.21 2018.11,1217.21 2018.7,1217.21 2019.28,1217.21 2019.87,1217.21 2020.46,1217.21 2021.04,1217.21 2021.63,1217.21 2022.22,1217.21 2022.8,1217.21 2023.39,1217.21 2023.98,1217.21 2024.56,1217.21 2025.15,1217.21 2025.73,1217.21 2026.32,1217.21 2026.91,1217.21 2027.49,1217.21 2028.08,1217.21 2028.67,1217.21 2029.25,1217.21 2029.84,1217.21 2030.43,1217.21 2031.01,1217.21 2031.6,1217.21 2032.19,1217.21 2032.77,1217.21 2033.36,1217.21 2033.94,1217.21 2034.53,1217.21 2035.12,1217.21 2035.7,1217.21 2036.29,1217.21 2036.88,1217.21 2037.46,1217.21 2038.05,1217.21 2038.64,1217.21 2039.22,1217.21 2039.81,1217.21 2040.4,1217.21 2040.98,1217.21 2041.57,1217.21 2042.15,1217.21 2042.74,1217.21 2043.33,1217.21 2043.91,1217.21 2044.5,1217.21 2045.09,1217.21 2045.67,1217.21 2046.26,1217.21 2046.85,1217.21 2047.43,1217.21 2048.02,1217.21 2048.6,1217.21 2049.19,1217.21 2049.78,1217.21 2050.36,1217.21 2050.95,1217.21 2051.54,1217.21 2052.12,1217.21 2052.71,1217.21 2053.3,1217.21 2053.88,1217.21 2054.47,1217.21 2055.06,1217.21 2055.64,1217.21 2056.23,1217.21 2056.81,1217.21 2057.4,1217.21 2057.99,1217.21 2058.57,1217.21 2059.16,1217.21 2059.75,1217.21 2060.33,1217.21 2060.92,1217.21 2061.51,1217.21 2062.09,1217.21 2062.68,1217.21 2063.27,1217.21 2063.85,1217.21 2064.44,1217.21 2065.02,1217.21 2065.61,1217.21 2066.2,1217.21 2066.78,1217.21 2067.37,1217.21 2067.96,1217.21 2068.54,1217.21 2069.13,1217.21 2069.72,1217.21 2070.3,1217.21 2070.89,1217.21 2071.48,1217.21 2072.06,1217.21 2072.65,1217.21 2073.23,1217.21 2073.82,1217.21 2074.41,1217.21 2074.99,1217.21 2075.58,1217.21 2076.17,1217.21 2076.75,1217.21 2077.34,1217.21 2077.93,1217.21 2078.51,1217.21 2079.1,1217.21 2079.68,1217.21 2080.27,1217.21 2080.86,1217.21 2081.44,1217.21 2082.03,1217.21 2082.62,1217.21 2083.2,1217.21 2083.79,1217.21 2084.38,1217.21 2084.96,1217.21 2085.55,1217.21 2086.14,1217.21 2086.72,1217.21 2087.31,1217.21 2087.89,1217.21 2088.48,1217.21 2089.07,1217.21 2089.65,1217.21 2090.24,1217.21 2090.83,1217.21 2091.41,1217.21 2092,1217.21 2092.59,1217.21 2093.17,1217.21 2093.76,1217.21 2094.35,1217.21 2094.93,1217.21 2095.52,1217.21 2096.1,1217.21 2096.69,1217.21 2097.28,1217.21 2097.86,1217.21 2098.45,1217.21 2099.04,1217.21 2099.62,1217.21 2100.21,1217.21 2100.8,1217.21 2101.38,1217.21 2101.97,1217.21 2102.55,1217.21 2103.14,1217.21 2103.73,1217.21 2104.31,1217.21 2104.9,1217.21 2105.49,1217.21 2106.07,1217.21 2106.66,1217.21 2107.25,1217.21 2107.83,1217.21 2108.42,1217.21 2109.01,1217.21 2109.59,1217.21 2110.18,1217.21 2110.76,1217.21 2111.35,1217.21 2111.94,1217.21 2112.52,1217.21 2113.11,1217.21 2113.7,1217.21 2114.28,1217.21 2114.87,1217.21 2115.46,1217.21 2116.04,1217.21 2116.63,1217.21 2117.22,1217.21 2117.8,1217.21 2118.39,1217.21 2118.97,1217.21 2119.56,1217.21 2120.15,1217.21 2120.73,1217.21 2121.32,1217.21 2121.91,1217.21 2122.49,1217.21 2123.08,1217.21 2123.67,1217.21 2124.25,1217.21 2124.84,1217.21 2125.42,1217.21 2126.01,1217.21 2126.6,1217.21 2127.18,1217.21 2127.77,1217.21 2128.36,1217.21 2128.94,1217.21 2129.53,1217.21 2130.12,1217.21 2130.7,1217.21 2131.29,1217.21 2131.88,1217.21 2132.46,1217.21 2133.05,1217.21 2133.63,1217.21 2134.22,1217.21 2134.81,1217.21 2135.39,1217.21 2135.98,1217.21 2136.57,1217.21 2137.15,1217.21 2137.74,1217.21 2138.33,1217.21 2138.91,1217.21 2139.5,1217.21 2140.09,1217.21 2140.67,1217.21 2141.26,1217.21 2141.84,1217.21 2142.43,1217.21 2143.02,1217.21 2143.6,1217.21 2144.19,1217.21 2144.78,1217.21 2145.36,1217.21 2145.95,1217.21 2146.54,1217.21 2147.12,1217.21 2147.71,1217.21 2148.3,1217.21 2148.88,1217.21 2149.47,1217.21 2150.05,1217.21 2150.64,1217.21 2151.23,1217.21 2151.81,1217.21 2152.4,1217.21 2152.99,1217.21 2153.57,1217.21 2154.16,1217.21 2154.75,1217.21 2155.33,1217.21 2155.92,1217.21 2156.5,1217.21 2157.09,1217.21 2157.68,1217.21 2158.26,1217.21 \"/>\n<path clip-path=\"url(#clip472)\" d=\"M986.025 1217.1 L986.612 1217.1 L987.198 1217.1 L987.785 1217.1 L988.371 1217.1 L988.957 1217.1 L989.544 1217.1 L990.13 1217.1 L990.717 1217.1 L991.303 1217.1 L991.889 1217.1 L992.476 1217.1 L993.062 1217.1 L993.649 1217.1 L994.235 1217.1 L994.822 1217.1 L995.408 1217.1 L995.994 1217.1 L996.581 1217.1 L997.167 1217.1 L997.754 1217.1 L998.34 1217.1 L998.926 1217.1 L999.513 1217.1 L1000.1 1217.1 L1000.69 1217.1 L1001.27 1217.1 L1001.86 1217.1 L1002.44 1217.1 L1003.03 1217.1 L1003.62 1217.1 L1004.2 1217.1 L1004.79 1217.1 L1005.38 1217.1 L1005.96 1217.1 L1006.55 1217.1 L1007.14 1217.1 L1007.72 1217.1 L1008.31 1217.1 L1008.9 1217.1 L1009.48 1217.1 L1010.07 1217.1 L1010.65 1217.1 L1011.24 1217.1 L1011.83 1217.1 L1012.41 1217.1 L1013 1217.1 L1013.59 1217.1 L1014.17 1217.1 L1014.76 1217.1 L1015.35 1217.1 L1015.93 1217.1 L1016.52 1217.1 L1017.11 1217.1 L1017.69 1217.1 L1018.28 1217.1 L1018.86 1217.1 L1019.45 1217.1 L1020.04 1217.1 L1020.62 1217.1 L1021.21 1217.1 L1021.8 1217.1 L1022.38 1217.1 L1022.97 1217.1 L1023.56 1217.1 L1024.14 1217.1 L1024.73 1217.1 L1025.32 1217.1 L1025.9 1217.1 L1026.49 1217.1 L1027.07 1217.1 L1027.66 1217.1 L1028.25 1217.1 L1028.83 1217.1 L1029.42 1217.1 L1030.01 1217.1 L1030.59 1217.1 L1031.18 1217.1 L1031.77 1217.1 L1032.35 1217.1 L1032.94 1217.1 L1033.52 1217.1 L1034.11 1217.1 L1034.7 1217.1 L1035.28 1217.1 L1035.87 1217.1 L1036.46 1217.1 L1037.04 1217.1 L1037.63 1217.1 L1038.22 1217.1 L1038.8 1217.1 L1039.39 1217.1 L1039.98 1217.1 L1040.56 1217.1 L1041.15 1217.1 L1041.73 1217.1 L1042.32 1217.1 L1042.91 1217.1 L1043.49 1217.1 L1044.08 1217.1 L1044.67 1217.1 L1045.25 1217.1 L1045.84 1217.1 L1046.43 1217.1 L1047.01 1217.1 L1047.6 1217.1 L1048.19 1217.1 L1048.77 1217.1 L1049.36 1217.1 L1049.94 1217.1 L1050.53 1217.1 L1051.12 1217.1 L1051.7 1217.1 L1052.29 1217.1 L1052.88 1217.1 L1053.46 1217.1 L1054.05 1217.1 L1054.64 1217.1 L1055.22 1217.1 L1055.81 1217.1 L1056.39 1217.1 L1056.98 1217.1 L1057.57 1217.1 L1058.15 1217.1 L1058.74 1217.1 L1059.33 1217.1 L1059.91 1217.1 L1060.5 1217.1 L1061.09 1217.1 L1061.67 1217.1 L1062.26 1217.1 L1062.85 1217.1 L1063.43 1217.1 L1064.02 1217.1 L1064.6 1217.1 L1065.19 1217.1 L1065.78 1217.1 L1066.36 1217.1 L1066.95 1217.1 L1067.54 1217.1 L1068.12 1217.1 L1068.71 1217.1 L1069.3 1217.1 L1069.88 1217.1 L1070.47 1217.1 L1071.06 1217.1 L1071.64 1217.1 L1072.23 1217.1 L1072.81 1217.1 L1073.4 1217.1 L1073.99 1217.1 L1074.57 1217.1 L1075.16 1217.1 L1075.75 1217.1 L1076.33 1217.1 L1076.92 1217.1 L1077.51 1217.1 L1078.09 1217.1 L1078.68 1217.1 L1079.26 1217.1 L1079.85 1217.1 L1080.44 1217.1 L1081.02 1217.1 L1081.61 1217.1 L1082.2 1217.1 L1082.78 1217.1 L1083.37 1217.1 L1083.96 1217.1 L1084.54 1217.1 L1085.13 1217.1 L1085.72 1217.1 L1086.3 1217.1 L1086.89 1217.1 L1087.47 1217.1 L1088.06 1217.1 L1088.65 1217.1 L1089.23 1217.1 L1089.82 1217.1 L1090.41 1217.1 L1090.99 1217.1 L1091.58 1217.1 L1092.17 1217.1 L1092.75 1217.1 L1093.34 1217.1 L1093.93 1217.1 L1094.51 1217.1 L1095.1 1217.1 L1095.68 1217.1 L1096.27 1217.1 L1096.86 1217.1 L1097.44 1217.1 L1098.03 1217.1 L1098.62 1217.1 L1099.2 1217.1 L1099.79 1217.1 L1100.38 1217.1 L1100.96 1217.1 L1101.55 1217.1 L1102.14 1217.1 L1102.72 1217.1 L1103.31 1217.1 L1103.89 1217.1 L1104.48 1217.1 L1105.07 1217.1 L1105.65 1217.1 L1106.24 1217.1 L1106.83 1217.1 L1107.41 1217.1 L1108 1217.1 L1108.59 1217.1 L1109.17 1217.1 L1109.76 1217.1 L1110.34 1217.1 L1110.93 1217.1 L1111.52 1217.1 L1112.1 1217.1 L1112.69 1217.1 L1113.28 1217.1 L1113.86 1217.1 L1114.45 1217.1 L1115.04 1217.1 L1115.62 1217.1 L1116.21 1217.1 L1116.8 1217.1 L1117.38 1217.1 L1117.97 1217.1 L1118.55 1217.1 L1119.14 1217.1 L1119.73 1217.1 L1120.31 1217.1 L1120.9 1217.1 L1121.49 1217.1 L1122.07 1217.1 L1122.66 1217.1 L1123.25 1217.1 L1123.83 1217.1 L1124.42 1217.1 L1125.01 1217.1 L1125.59 1217.1 L1126.18 1217.1 L1126.76 1217.1 L1127.35 1217.1 L1127.94 1217.1 L1128.52 1217.1 L1129.11 1217.1 L1129.7 1217.1 L1130.28 1217.1 L1130.87 1217.1 L1131.46 1217.1 L1132.04 1217.1 L1132.63 1217.1 L1133.21 1217.1 L1133.8 1217.1 L1134.39 1217.1 L1134.97 1217.1 L1135.56 1217.1 L1136.15 1217.1 L1136.73 1217.1 L1137.32 1217.1 L1137.91 1217.1 L1138.49 1217.1 L1139.08 1217.1 L1139.67 1217.1 L1140.25 1217.1 L1140.84 1217.1 L1141.42 1217.1 L1142.01 1217.1 L1142.6 1217.1 L1143.18 1217.1 L1143.77 1217.1 L1144.36 1217.1 L1144.94 1217.1 L1145.53 1217.1 L1146.12 1217.1 L1146.7 1217.1 L1147.29 1217.1 L1147.88 1217.1 L1148.46 1217.1 L1149.05 1217.1 L1149.63 1217.1 L1150.22 1217.1 L1150.81 1217.1 L1151.39 1217.1 L1151.98 1217.1 L1152.57 1217.1 L1153.15 1217.1 L1153.74 1217.1 L1154.33 1217.1 L1154.91 1217.1 L1155.5 1217.1 L1156.09 1217.1 L1156.67 1217.1 L1157.26 1217.1 L1157.84 1217.1 L1158.43 1217.1 L1159.02 1217.1 L1159.6 1217.1 L1160.19 1217.1 L1160.78 1217.1 L1161.36 1217.1 L1161.95 1217.1 L1162.54 1217.1 L1163.12 1217.1 L1163.71 1217.1 L1164.29 1217.1 L1164.88 1217.1 L1165.47 1217.1 L1166.05 1217.1 L1166.64 1217.1 L1167.23 1217.1 L1167.81 1217.1 L1168.4 1217.1 L1168.99 1217.1 L1169.57 1217.1 L1170.16 1217.1 L1170.75 1217.1 L1171.33 1217.1 L1171.92 1217.1 L1172.5 1217.1 L1173.09 1217.1 L1173.68 1217.1 L1174.26 1217.1 L1174.85 1217.1 L1175.44 1217.1 L1176.02 1217.1 L1176.61 1217.1 L1177.2 1217.1 L1177.78 1217.1 L1178.37 1217.1 L1178.96 1217.1 L1179.54 1217.1 L1180.13 1217.1 L1180.71 1217.1 L1181.3 1217.1 L1181.89 1217.1 L1182.47 1217.1 L1183.06 1217.1 L1183.65 1217.1 L1184.23 1217.1 L1184.82 1217.1 L1185.41 1217.1 L1185.99 1217.1 L1186.58 1217.1 L1187.16 1217.1 L1187.75 1217.1 L1188.34 1217.1 L1188.92 1217.1 L1189.51 1217.1 L1190.1 1217.1 L1190.68 1217.1 L1191.27 1217.1 L1191.86 1217.1 L1192.44 1217.1 L1193.03 1217.1 L1193.62 1217.1 L1194.2 1217.1 L1194.79 1217.1 L1195.37 1217.1 L1195.96 1217.1 L1196.55 1217.1 L1197.13 1217.1 L1197.72 1217.1 L1198.31 1217.1 L1198.89 1217.1 L1199.48 1217.1 L1200.07 1217.1 L1200.65 1217.1 L1201.24 1217.1 L1201.83 1217.1 L1202.41 1217.1 L1203 1217.1 L1203.58 1217.1 L1204.17 1217.1 L1204.76 1217.1 L1205.34 1217.1 L1205.93 1217.1 L1206.52 1217.1 L1207.1 1217.1 L1207.69 1217.1 L1208.28 1217.1 L1208.86 1217.1 L1209.45 1217.1 L1210.03 1217.1 L1210.62 1217.1 L1211.21 1217.1 L1211.79 1217.1 L1212.38 1217.1 L1212.97 1217.1 L1213.55 1217.1 L1214.14 1217.1 L1214.73 1217.1 L1215.31 1217.1 L1215.9 1217.1 L1216.49 1217.1 L1217.07 1217.1 L1217.66 1217.1 L1218.24 1217.1 L1218.83 1217.1 L1219.42 1217.1 L1220 1217.1 L1220.59 1217.1 L1221.18 1217.1 L1221.76 1217.1 L1222.35 1217.1 L1222.94 1217.1 L1223.52 1217.1 L1224.11 1217.1 L1224.7 1217.1 L1225.28 1217.1 L1225.87 1217.1 L1226.45 1217.1 L1227.04 1217.1 L1227.63 1217.1 L1228.21 1217.1 L1228.8 1217.1 L1229.39 1217.1 L1229.97 1217.1 L1230.56 1217.1 L1231.15 1217.1 L1231.73 1217.1 L1232.32 1217.1 L1232.91 1217.1 L1233.49 1217.1 L1234.08 1217.1 L1234.66 1217.1 L1235.25 1217.1 L1235.84 1217.1 L1236.42 1217.1 L1237.01 1217.1 L1237.6 1217.1 L1238.18 1217.1 L1238.77 1217.1 L1239.36 1217.1 L1239.94 1217.1 L1240.53 1217.1 L1241.11 1217.1 L1241.7 1217.1 L1242.29 1217.1 L1242.87 1217.1 L1243.46 1217.1 L1244.05 1217.1 L1244.63 1217.1 L1245.22 1217.1 L1245.81 1217.1 L1246.39 1217.1 L1246.98 1217.1 L1247.57 1217.1 L1248.15 1217.1 L1248.74 1217.1 L1249.32 1217.1 L1249.91 1217.1 L1250.5 1217.1 L1251.08 1217.1 L1251.67 1217.1 L1252.26 1217.1 L1252.84 1217.1 L1253.43 1217.1 L1254.02 1217.1 L1254.6 1217.1 L1255.19 1217.1 L1255.78 1217.1 L1256.36 1217.1 L1256.95 1217.1 L1257.53 1217.1 L1258.12 1217.1 L1258.71 1217.1 L1259.29 1217.1 L1259.88 1217.1 L1260.47 1217.1 L1261.05 1217.1 L1261.64 1217.1 L1262.23 1217.1 L1262.81 1217.1 L1263.4 1217.1 L1263.98 1217.1 L1264.57 1217.1 L1265.16 1217.1 L1265.74 1217.1 L1266.33 1217.1 L1266.92 1217.1 L1267.5 1217.1 L1268.09 1217.1 L1268.68 1217.1 L1269.26 1217.1 L1269.85 1217.1 L1270.44 1217.1 L1271.02 1217.1 L1271.61 1217.1 L1272.19 1217.1 L1272.78 1217.1 L1273.37 1217.1 L1273.95 1217.1 L1274.54 1217.1 L1275.13 1217.1 L1275.71 1217.1 L1276.3 1217.1 L1276.89 1217.1 L1277.47 1217.1 L1278.06 1217.1 L1278.65 1217.1 L1279.23 1217.1 L1279.82 1217.1 L1280.4 1217.1 L1280.99 1217.1 L1281.58 1217.1 L1282.16 1217.1 L1282.75 1217.1 L1283.34 1217.1 L1283.92 1217.1 L1284.51 1217.1 L1285.1 1217.1 L1285.68 1217.1 L1286.27 1217.1 L1286.86 1217.1 L1287.44 1217.1 L1288.03 1217.1 L1288.61 1217.1 L1289.2 1217.1 L1289.79 1217.1 L1290.37 1217.1 L1290.96 1217.1 L1291.55 1217.1 L1292.13 1217.1 L1292.72 1217.1 L1293.31 1217.1 L1293.89 1217.1 L1294.48 1217.1 L1295.06 1217.1 L1295.65 1217.1 L1296.24 1217.1 L1296.82 1217.1 L1297.41 1217.1 L1298 1217.1 L1298.58 1217.1 L1299.17 1217.1 L1299.76 1217.1 L1300.34 1217.1 L1300.93 1217.1 L1301.52 1217.1 L1302.1 1217.1 L1302.69 1217.1 L1303.27 1217.1 L1303.86 1217.1 L1304.45 1217.1 L1305.03 1217.1 L1305.62 1217.1 L1306.21 1217.1 L1306.79 1217.1 L1307.38 1217.1 L1307.97 1217.1 L1308.55 1217.1 L1309.14 1217.1 L1309.73 1217.1 L1310.31 1217.1 L1310.9 1217.1 L1311.48 1217.1 L1312.07 1217.1 L1312.66 1217.1 L1313.24 1217.1 L1313.83 1217.1 L1314.42 1217.1 L1315 1217.1 L1315.59 1217.1 L1316.18 1217.1 L1316.76 1217.1 L1317.35 1217.1 L1317.93 1217.1 L1318.52 1217.1 L1319.11 1217.1 L1319.69 1217.1 L1320.28 1217.1 L1320.87 1217.1 L1321.45 1217.1 L1322.04 1217.1 L1322.63 1217.1 L1323.21 1217.1 L1323.8 1217.1 L1324.39 1217.1 L1324.97 1217.1 L1325.56 1217.1 L1326.14 1217.1 L1326.73 1217.1 L1327.32 1217.1 L1327.9 1217.1 L1328.49 1217.1 L1329.08 1217.1 L1329.66 1217.1 L1330.25 1217.1 L1330.84 1217.1 L1331.42 1217.1 L1332.01 1217.1 L1332.6 1217.1 L1333.18 1217.1 L1333.77 1217.1 L1334.35 1217.1 L1334.94 1217.1 L1335.53 1217.1 L1336.11 1217.1 L1336.7 1217.1 L1337.29 1217.1 L1337.87 1217.1 L1338.46 1217.1 L1339.05 1217.1 L1339.63 1217.1 L1340.22 1217.1 L1340.8 1217.1 L1341.39 1217.1 L1341.98 1217.1 L1342.56 1217.1 L1343.15 1217.1 L1343.74 1217.1 L1344.32 1217.1 L1344.91 1217.1 L1345.5 1217.1 L1346.08 1217.1 L1346.67 1217.1 L1347.26 1217.1 L1347.84 1217.1 L1348.43 1217.1 L1349.01 1217.1 L1349.6 1217.1 L1350.19 1217.1 L1350.77 1217.1 L1351.36 1217.1 L1351.95 1217.1 L1352.53 1217.1 L1353.12 1217.1 L1353.71 1217.1 L1354.29 1217.1 L1354.88 1217.1 L1355.47 1217.1 L1356.05 1217.1 L1356.64 1217.1 L1357.22 1217.1 L1357.81 1217.1 L1358.4 1217.1 L1358.98 1217.1 L1359.57 1217.1 L1360.16 1217.1 L1360.74 1217.1 L1361.33 1217.1 L1361.92 1217.1 L1362.5 1217.1 L1363.09 1217.1 L1363.68 1217.1 L1364.26 1217.1 L1364.85 1217.1 L1365.43 1217.1 L1366.02 1217.1 L1366.61 1217.1 L1367.19 1217.1 L1367.78 1217.1 L1368.37 1217.1 L1368.95 1217.1 L1369.54 1217.1 L1370.13 1217.1 L1370.71 1217.1 L1371.3 1217.1 L1371.88 1217.1 L1372.47 1217.1 L1373.06 1217.1 L1373.64 1217.1 L1374.23 1217.1 L1374.82 1217.1 L1375.4 1217.1 L1375.99 1217.1 L1376.58 1217.1 L1377.16 1217.1 L1377.75 1217.1 L1378.34 1217.1 L1378.92 1217.1 L1379.51 1217.1 L1380.09 1217.1 L1380.68 1217.1 L1381.27 1217.1 L1381.85 1217.1 L1382.44 1217.1 L1383.03 1217.1 L1383.61 1217.1 L1384.2 1217.1 L1384.79 1217.1 L1385.37 1217.1 L1385.96 1217.1 L1386.55 1217.1 L1387.13 1217.1 L1387.72 1217.1 L1388.3 1217.1 L1388.89 1217.1 L1389.48 1217.1 L1390.06 1217.1 L1390.65 1217.1 L1391.24 1217.1 L1391.82 1217.1 L1392.41 1217.1 L1393 1217.1 L1393.58 1217.1 L1394.17 1217.1 L1394.75 1217.1 L1395.34 1217.1 L1395.93 1217.1 L1396.51 1217.1 L1397.1 1217.1 L1397.69 1217.1 L1398.27 1217.1 L1398.86 1217.1 L1399.45 1217.1 L1400.03 1217.1 L1400.62 1217.1 L1401.21 1217.1 L1401.79 1217.1 L1402.38 1217.1 L1402.96 1217.1 L1403.55 1217.1 L1404.14 1217.1 L1404.72 1217.1 L1405.31 1217.1 L1405.9 1217.1 L1406.48 1217.1 L1407.07 1217.1 L1407.66 1217.1 L1408.24 1217.1 L1408.83 1217.1 L1409.42 1217.1 L1410 1217.1 L1410.59 1217.1 L1411.17 1217.1 L1411.76 1217.1 L1412.35 1217.1 L1412.93 1217.1 L1413.52 1217.1 L1414.11 1217.1 L1414.69 1217.1 L1415.28 1217.1 L1415.87 1217.1 L1416.45 1217.1 L1417.04 1217.1 L1417.63 1217.1 L1418.21 1217.1 L1418.8 1217.1 L1419.38 1217.1 L1419.97 1217.1 L1420.56 1217.1 L1421.14 1217.1 L1421.73 1217.1 L1422.32 1217.1 L1422.9 1217.1 L1423.49 1217.1 L1424.08 1217.1 L1424.66 1217.1 L1425.25 1217.1 L1425.83 1217.1 L1426.42 1217.1 L1427.01 1217.1 L1427.59 1217.1 L1428.18 1217.1 L1428.77 1217.1 L1429.35 1217.1 L1429.94 1217.1 L1430.53 1217.1 L1431.11 1217.1 L1431.7 1217.1 L1432.29 1217.1 L1432.87 1217.1 L1433.46 1217.1 L1434.04 1217.1 L1434.63 1217.1 L1435.22 1217.1 L1435.8 1217.1 L1436.39 1217.1 L1436.98 1217.1 L1437.56 1217.1 L1438.15 1217.1 L1438.74 1217.1 L1439.32 1217.1 L1439.91 1217.1 L1440.5 1217.1 L1441.08 1217.1 L1441.67 1217.1 L1442.25 1217.1 L1442.84 1217.1 L1443.43 1217.1 L1444.01 1217.1 L1444.6 1217.1 L1445.19 1217.1 L1445.77 1217.1 L1446.36 1217.1 L1446.95 1217.1 L1447.53 1217.1 L1448.12 1217.1 L1448.7 1217.1 L1449.29 1217.1 L1449.88 1217.1 L1450.46 1217.1 L1451.05 1217.1 L1451.64 1217.1 L1452.22 1217.1 L1452.81 1217.1 L1453.4 1217.1 L1453.98 1217.1 L1454.57 1217.1 L1455.16 1217.1 L1455.74 1217.1 L1456.33 1217.1 L1456.91 1217.1 L1457.5 1217.1 L1458.09 1217.1 L1458.67 1217.1 L1459.26 1217.1 L1459.85 1217.1 L1460.43 1217.1 L1461.02 1217.1 L1461.61 1217.1 L1462.19 1217.1 L1462.78 1217.1 L1463.37 1217.1 L1463.95 1217.1 L1464.54 1217.1 L1465.12 1217.1 L1465.71 1217.1 L1466.3 1217.1 L1466.88 1217.1 L1467.47 1217.1 L1468.06 1217.1 L1468.64 1217.1 L1469.23 1217.1 L1469.82 1217.1 L1470.4 1217.1 L1470.99 1217.1 L1471.57 1217.1 L1472.16 1217.1 L1472.75 1217.1 L1473.33 1217.1 L1473.92 1217.1 L1474.51 1217.1 L1475.09 1217.1 L1475.68 1217.1 L1476.27 1217.1 L1476.85 1217.1 L1477.44 1217.1 L1478.03 1217.1 L1478.61 1217.1 L1479.2 1217.1 L1479.78 1217.1 L1480.37 1217.1 L1480.96 1217.1 L1481.54 1217.1 L1482.13 1217.1 L1482.72 1217.1 L1483.3 1217.1 L1483.89 1217.1 L1484.48 1217.1 L1485.06 1217.1 L1485.65 1217.1 L1486.24 1217.1 L1486.82 1217.1 L1487.41 1217.1 L1487.99 1217.1 L1488.58 1217.1 L1489.17 1217.1 L1489.75 1217.1 L1490.34 1217.1 L1490.93 1217.1 L1491.51 1217.1 L1492.1 1217.1 L1492.69 1217.1 L1493.27 1217.1 L1493.86 1217.1 L1494.45 1217.1 L1495.03 1217.1 L1495.62 1217.1 L1496.2 1217.1 L1496.79 1217.1 L1497.38 1217.1 L1497.96 1217.1 L1498.55 1217.1 L1499.14 1217.1 L1499.72 1217.1 L1500.31 1217.1 L1500.9 1217.1 L1501.48 1217.1 L1502.07 1217.1 L1502.65 1217.1 L1503.24 1217.1 L1503.83 1217.1 L1504.41 1217.1 L1505 1217.1 L1505.59 1217.1 L1506.17 1217.1 L1506.76 1217.1 L1507.35 1217.1 L1507.93 1217.1 L1508.52 1217.1 L1509.11 1217.1 L1509.69 1217.1 L1510.28 1217.1 L1510.86 1217.1 L1511.45 1217.1 L1512.04 1217.1 L1512.62 1217.1 L1513.21 1217.1 L1513.8 1217.1 L1514.38 1217.1 L1514.97 1217.1 L1515.56 1217.1 L1516.14 1217.1 L1516.73 1217.1 L1517.32 1217.1 L1517.9 1217.1 L1518.49 1217.1 L1519.07 1217.1 L1519.66 1217.1 L1520.25 1217.1 L1520.83 1217.1 L1521.42 1217.1 L1522.01 1217.1 L1522.59 1217.1 L1523.18 1217.1 L1523.77 1217.1 L1524.35 1217.1 L1524.94 1217.1 L1525.52 1217.1 L1526.11 1217.1 L1526.7 1217.1 L1527.28 1217.1 L1527.87 1217.1 L1528.46 1217.1 L1529.04 1217.1 L1529.63 1217.1 L1530.22 1217.1 L1530.8 1217.1 L1531.39 1217.1 L1531.98 1217.1 L1532.56 1217.1 L1533.15 1217.1 L1533.73 1217.1 L1534.32 1217.1 L1534.91 1217.1 L1535.49 1217.1 L1536.08 1217.1 L1536.67 1217.1 L1537.25 1217.1 L1537.84 1217.1 L1538.43 1217.1 L1539.01 1217.1 L1539.6 1217.1 L1540.19 1217.1 L1540.77 1217.1 L1541.36 1217.1 L1541.94 1217.1 L1542.53 1217.1 L1543.12 1217.1 L1543.7 1217.1 L1544.29 1217.1 L1544.88 1217.1 L1545.46 1217.1 L1546.05 1217.1 L1546.64 1217.1 L1547.22 1217.1 L1547.81 1217.1 L1548.4 1217.1 L1548.98 1217.1 L1549.57 1217.1 L1550.15 1217.1 L1550.74 1217.1 L1551.33 1217.1 L1551.91 1217.1 L1552.5 1217.1 L1553.09 1217.1 L1553.67 1217.1 L1554.26 1217.1 L1554.85 1217.1 L1555.43 1217.1 L1556.02 1217.1 L1556.6 1217.1 L1557.19 1217.1 L1557.78 1217.1 L1558.36 1217.1 L1558.95 1217.1 L1559.54 1217.1 L1560.12 1217.1 L1560.71 1217.1 L1561.3 1217.1 L1561.88 1217.1 L1562.47 1217.1 L1563.06 1217.1 L1563.64 1217.1 L1564.23 1217.1 L1564.81 1217.1 L1565.4 1217.1 L1565.99 1217.1 L1566.57 1217.1 L1567.16 1217.1 L1567.75 1217.1 L1568.33 1217.1 L1568.92 1217.1 L1569.51 1217.1 L1570.09 1217.1 L1570.68 1217.1 L1571.27 1217.1 L1571.85 1217.1 L1572.44 1217.1 L1573.02 1217.1 L1573.61 1217.1 L1574.2 1217.1 L1574.78 1217.1 L1575.37 1217.1 L1575.96 1217.1 L1576.54 1217.1 L1577.13 1217.1 L1577.72 1217.1 L1578.3 1217.1 L1578.89 1217.1 L1579.47 1217.1 L1580.06 1217.1 L1580.65 1217.1 L1581.23 1217.1 L1581.82 1217.1 L1582.41 1217.1 L1582.99 1217.1 L1583.58 1217.1 L1584.17 1217.1 L1584.75 1217.1 L1585.34 1217.1 L1585.93 1217.1 L1586.51 1217.1 L1587.1 1217.1 L1587.68 1217.1 L1588.27 1217.1 L1588.86 1217.1 L1589.44 1217.1 L1590.03 1217.1 L1590.62 1217.1 L1591.2 1217.1 L1591.79 1217.1 L1592.38 1217.1 L1592.96 1217.1 L1593.55 1217.1 L1594.14 1217.1 L1594.72 1217.1 L1595.31 1217.1 L1595.89 1217.1 L1596.48 1217.1 L1597.07 1217.1 L1597.65 1217.1 L1598.24 1217.1 L1598.83 1217.1 L1599.41 1217.1 L1600 1217.1 L1600.59 1217.1 L1601.17 1217.1 L1601.76 1217.1 L1602.34 1217.1 L1602.93 1217.1 L1603.52 1217.1 L1604.1 1217.1 L1604.69 1217.1 L1605.28 1217.1 L1605.86 1217.1 L1606.45 1217.1 L1607.04 1217.1 L1607.62 1217.1 L1608.21 1217.1 L1608.8 1217.1 L1609.38 1217.1 L1609.97 1217.1 L1610.55 1217.1 L1611.14 1217.1 L1611.73 1217.1 L1612.31 1217.1 L1612.9 1217.1 L1613.49 1217.1 L1614.07 1217.1 L1614.66 1217.1 L1615.25 1217.1 L1615.83 1217.1 L1616.42 1217.1 L1617.01 1217.1 L1617.59 1217.1 L1618.18 1217.1 L1618.76 1217.1 L1619.35 1217.1 L1619.94 1217.1 L1620.52 1217.1 L1621.11 1217.1 L1621.7 1217.1 L1622.28 1217.1 L1622.87 1217.1 L1623.46 1217.1 L1624.04 1217.1 L1624.63 1217.1 L1625.22 1217.1 L1625.8 1217.1 L1626.39 1217.1 L1626.97 1217.1 L1627.56 1217.1 L1628.15 1217.1 L1628.73 1217.1 L1629.32 1217.1 L1629.91 1217.1 L1630.49 1217.1 L1631.08 1217.1 L1631.67 1217.1 L1632.25 1217.1 L1632.84 1217.1 L1633.42 1217.1 L1634.01 1217.1 L1634.6 1217.1 L1635.18 1217.1 L1635.77 1217.1 L1636.36 1217.1 L1636.94 1217.1 L1637.53 1217.1 L1638.12 1217.1 L1638.7 1217.1 L1639.29 1217.1 L1639.88 1217.1 L1640.46 1217.1 L1641.05 1217.1 L1641.63 1217.1 L1642.22 1217.1 L1642.81 1217.1 L1643.39 1217.1 L1643.98 1217.1 L1644.57 1217.1 L1645.15 1217.1 L1645.74 1217.1 L1646.33 1217.1 L1646.91 1217.1 L1647.5 1217.1 L1648.09 1217.1 L1648.67 1217.1 L1649.26 1217.1 L1649.84 1217.1 L1650.43 1217.1 L1651.02 1217.1 L1651.6 1217.1 L1652.19 1217.1 L1652.78 1217.1 L1653.36 1217.1 L1653.95 1217.1 L1654.54 1217.1 L1655.12 1217.1 L1655.71 1217.1 L1656.29 1217.1 L1656.88 1217.1 L1657.47 1217.1 L1658.05 1217.1 L1658.64 1217.1 L1659.23 1217.1 L1659.81 1217.1 L1660.4 1217.1 L1660.99 1217.1 L1661.57 1217.1 L1662.16 1217.1 L1662.75 1217.1 L1663.33 1217.1 L1663.92 1217.1 L1664.5 1217.1 L1665.09 1217.1 L1665.68 1217.1 L1666.26 1217.1 L1666.85 1217.1 L1667.44 1217.1 L1668.02 1217.1 L1668.61 1217.1 L1669.2 1217.1 L1669.78 1217.1 L1670.37 1217.1 L1670.96 1217.1 L1671.54 1217.1 L1672.13 1217.1 L1672.71 1217.1 L1673.3 1217.1 L1673.89 1217.1 L1674.47 1217.1 L1675.06 1217.1 L1675.65 1217.1 L1676.23 1217.1 L1676.82 1217.1 L1677.41 1217.1 L1677.99 1217.1 L1678.58 1217.1 L1679.17 1217.1 L1679.75 1217.1 L1680.34 1217.1 L1680.92 1217.1 L1681.51 1217.1 L1682.1 1217.1 L1682.68 1217.1 L1683.27 1217.1 L1683.86 1217.1 L1684.44 1217.1 L1685.03 1217.1 L1685.62 1217.1 L1686.2 1217.1 L1686.79 1217.1 L1687.37 1217.1 L1687.96 1217.1 L1688.55 1217.1 L1689.13 1217.1 L1689.72 1217.1 L1690.31 1217.1 L1690.89 1217.1 L1691.48 1217.1 L1692.07 1217.1 L1692.65 1217.1 L1693.24 1217.1 L1693.83 1217.1 L1694.41 1217.1 L1695 1217.1 L1695.58 1217.1 L1696.17 1217.1 L1696.76 1217.1 L1697.34 1217.1 L1697.93 1217.1 L1698.52 1217.1 L1699.1 1217.1 L1699.69 1217.1 L1700.28 1217.1 L1700.86 1217.1 L1701.45 1217.1 L1702.04 1217.1 L1702.62 1217.1 L1703.21 1217.1 L1703.79 1217.1 L1704.38 1217.1 L1704.97 1217.1 L1705.55 1217.1 L1706.14 1217.1 L1706.73 1217.1 L1707.31 1217.1 L1707.9 1217.1 L1708.49 1217.1 L1709.07 1217.1 L1709.66 1217.1 L1710.24 1217.1 L1710.83 1217.1 L1711.42 1217.1 L1712 1217.1 L1712.59 1217.1 L1713.18 1217.1 L1713.76 1217.1 L1714.35 1217.1 L1714.94 1217.1 L1715.52 1217.1 L1716.11 1217.1 L1716.7 1217.1 L1717.28 1217.1 L1717.87 1217.1 L1718.45 1217.1 L1719.04 1217.1 L1719.63 1217.1 L1720.21 1217.1 L1720.8 1217.1 L1721.39 1217.1 L1721.97 1217.1 L1722.56 1217.1 L1723.15 1217.1 L1723.73 1217.1 L1724.32 1217.1 L1724.91 1217.1 L1725.49 1217.1 L1726.08 1217.1 L1726.66 1217.1 L1727.25 1217.1 L1727.84 1217.1 L1728.42 1217.1 L1729.01 1217.1 L1729.6 1217.1 L1730.18 1217.1 L1730.77 1217.1 L1731.36 1217.1 L1731.94 1217.1 L1732.53 1217.1 L1733.11 1217.1 L1733.7 1217.1 L1734.29 1217.1 L1734.87 1217.1 L1735.46 1217.1 L1736.05 1217.1 L1736.63 1217.1 L1737.22 1217.1 L1737.81 1217.1 L1738.39 1217.1 L1738.98 1217.1 L1739.57 1217.1 L1740.15 1217.1 L1740.74 1217.1 L1741.32 1217.1 L1741.91 1217.1 L1742.5 1217.1 L1743.08 1217.1 L1743.67 1217.1 L1744.26 1217.1 L1744.84 1217.1 L1745.43 1217.1 L1746.02 1217.1 L1746.6 1217.1 L1747.19 1217.1 L1747.78 1217.1 L1748.36 1217.1 L1748.95 1217.1 L1749.53 1217.1 L1750.12 1217.1 L1750.71 1217.1 L1751.29 1217.1 L1751.88 1217.1 L1752.47 1217.1 L1753.05 1217.1 L1753.64 1217.1 L1754.23 1217.1 L1754.81 1217.1 L1755.4 1217.1 L1755.99 1217.1 L1756.57 1217.1 L1757.16 1217.1 L1757.74 1217.1 L1758.33 1217.1 L1758.92 1217.1 L1759.5 1217.1 L1760.09 1217.1 L1760.68 1217.1 L1761.26 1217.1 L1761.85 1217.1 L1762.44 1217.1 L1763.02 1217.1 L1763.61 1217.1 L1764.19 1217.1 L1764.78 1217.1 L1765.37 1217.1 L1765.95 1217.1 L1766.54 1217.1 L1767.13 1217.1 L1767.71 1217.1 L1768.3 1217.1 L1768.89 1217.1 L1769.47 1217.1 L1770.06 1217.1 L1770.65 1217.1 L1771.23 1217.1 L1771.82 1217.1 L1772.4 1217.1 L1772.99 1217.1 L1773.58 1217.1 L1774.16 1217.1 L1774.75 1217.1 L1775.34 1217.1 L1775.92 1217.1 L1776.51 1217.1 L1777.1 1217.1 L1777.68 1217.1 L1778.27 1217.1 L1778.86 1217.1 L1779.44 1217.1 L1780.03 1217.1 L1780.61 1217.1 L1781.2 1217.1 L1781.79 1217.1 L1782.37 1217.1 L1782.96 1217.1 L1783.55 1217.1 L1784.13 1217.1 L1784.72 1217.1 L1785.31 1217.1 L1785.89 1217.1 L1786.48 1217.1 L1787.06 1217.1 L1787.65 1217.1 L1788.24 1217.1 L1788.82 1217.1 L1789.41 1217.1 L1790 1217.1 L1790.58 1217.1 L1791.17 1217.1 L1791.76 1217.1 L1792.34 1217.1 L1792.93 1217.1 L1793.52 1217.1 L1794.1 1217.1 L1794.69 1217.1 L1795.27 1217.1 L1795.86 1217.1 L1796.45 1217.1 L1797.03 1217.1 L1797.62 1217.1 L1798.21 1217.1 L1798.79 1217.1 L1799.38 1217.1 L1799.97 1217.1 L1800.55 1217.1 L1801.14 1217.1 L1801.73 1217.1 L1802.31 1217.1 L1802.9 1217.1 L1803.48 1217.1 L1804.07 1217.1 L1804.66 1217.1 L1805.24 1217.1 L1805.83 1217.1 L1806.42 1217.1 L1807 1217.1 L1807.59 1217.1 L1808.18 1217.1 L1808.76 1217.1 L1809.35 1217.1 L1809.94 1217.1 L1810.52 1217.1 L1811.11 1217.1 L1811.69 1217.1 L1812.28 1217.1 L1812.87 1217.1 L1813.45 1217.1 L1814.04 1217.1 L1814.63 1217.1 L1815.21 1217.1 L1815.8 1217.1 L1816.39 1217.1 L1816.97 1217.1 L1817.56 1217.1 L1818.14 1217.1 L1818.73 1217.1 L1819.32 1217.1 L1819.9 1217.1 L1820.49 1217.1 L1821.08 1217.1 L1821.66 1217.1 L1822.25 1217.1 L1822.84 1217.1 L1823.42 1217.1 L1824.01 1217.1 L1824.6 1217.1 L1825.18 1217.1 L1825.77 1217.1 L1826.35 1217.1 L1826.94 1217.1 L1827.53 1217.1 L1828.11 1217.1 L1828.7 1217.1 L1829.29 1217.1 L1829.87 1217.1 L1830.46 1217.1 L1831.05 1217.1 L1831.63 1217.1 L1832.22 1217.1 L1832.81 1217.1 L1833.39 1217.1 L1833.98 1217.1 L1834.56 1217.1 L1835.15 1217.1 L1835.74 1217.1 L1836.32 1217.1 L1836.91 1217.1 L1837.5 1217.1 L1838.08 1217.1 L1838.67 1217.1 L1839.26 1217.1 L1839.84 1217.1 L1840.43 1217.1 L1841.01 1217.1 L1841.6 1217.1 L1842.19 1217.1 L1842.77 1217.1 L1843.36 1217.1 L1843.95 1217.1 L1844.53 1217.1 L1845.12 1217.1 L1845.71 1217.1 L1846.29 1217.1 L1846.88 1217.1 L1847.47 1217.1 L1848.05 1217.1 L1848.64 1217.1 L1849.22 1217.1 L1849.81 1217.1 L1850.4 1217.1 L1850.98 1217.1 L1851.57 1217.1 L1852.16 1217.1 L1852.74 1217.1 L1853.33 1217.1 L1853.92 1217.1 L1854.5 1217.1 L1855.09 1217.1 L1855.68 1217.1 L1856.26 1217.1 L1856.85 1217.1 L1857.43 1217.1 L1858.02 1217.1 L1858.61 1217.1 L1859.19 1217.1 L1859.78 1217.1 L1860.37 1217.1 L1860.95 1217.1 L1861.54 1217.1 L1862.13 1217.1 L1862.71 1217.1 L1863.3 1217.1 L1863.88 1217.1 L1864.47 1217.1 L1865.06 1217.1 L1865.64 1217.1 L1866.23 1217.1 L1866.82 1217.1 L1867.4 1217.1 L1867.99 1217.1 L1868.58 1217.1 L1869.16 1217.1 L1869.75 1217.1 L1870.34 1217.1 L1870.92 1217.1 L1871.51 1217.1 L1872.09 1217.1 L1872.68 1217.1 L1873.27 1217.1 L1873.85 1217.1 L1874.44 1217.1 L1875.03 1217.1 L1875.61 1217.1 L1876.2 1217.1 L1876.79 1217.1 L1877.37 1217.1 L1877.96 1217.1 L1878.55 1217.1 L1879.13 1217.1 L1879.72 1217.1 L1880.3 1217.1 L1880.89 1217.1 L1881.48 1217.1 L1882.06 1217.1 L1882.65 1217.1 L1883.24 1217.1 L1883.82 1217.1 L1884.41 1217.1 L1885 1217.1 L1885.58 1217.1 L1886.17 1217.1 L1886.76 1217.1 L1887.34 1217.1 L1887.93 1217.1 L1888.51 1217.1 L1889.1 1217.1 L1889.69 1217.1 L1890.27 1217.1 L1890.86 1217.1 L1891.45 1217.1 L1892.03 1217.1 L1892.62 1217.1 L1893.21 1217.1 L1893.79 1217.1 L1894.38 1217.1 L1894.96 1217.1 L1895.55 1217.1 L1896.14 1217.1 L1896.72 1217.1 L1897.31 1217.1 L1897.9 1217.1 L1898.48 1217.1 L1899.07 1217.1 L1899.66 1217.1 L1900.24 1217.1 L1900.83 1217.1 L1901.42 1217.1 L1902 1217.1 L1902.59 1217.1 L1903.17 1217.1 L1903.76 1217.1 L1904.35 1217.1 L1904.93 1217.1 L1905.52 1217.1 L1906.11 1217.1 L1906.69 1217.1 L1907.28 1217.1 L1907.87 1217.1 L1908.45 1217.1 L1909.04 1217.1 L1909.63 1217.1 L1910.21 1217.1 L1910.8 1217.1 L1911.38 1217.1 L1911.97 1217.1 L1912.56 1217.1 L1913.14 1217.1 L1913.73 1217.1 L1914.32 1217.1 L1914.9 1217.1 L1915.49 1217.1 L1916.08 1217.1 L1916.66 1217.1 L1917.25 1217.1 L1917.83 1217.1 L1918.42 1217.1 L1919.01 1217.1 L1919.59 1217.1 L1920.18 1217.1 L1920.77 1217.1 L1921.35 1217.1 L1921.94 1217.1 L1922.53 1217.1 L1923.11 1217.1 L1923.7 1217.1 L1924.29 1217.1 L1924.87 1217.1 L1925.46 1217.1 L1926.04 1217.1 L1926.63 1217.1 L1927.22 1217.1 L1927.8 1217.1 L1928.39 1217.1 L1928.98 1217.1 L1929.56 1217.1 L1930.15 1217.1 L1930.74 1217.1 L1931.32 1217.1 L1931.91 1217.1 L1932.5 1217.1 L1933.08 1217.1 L1933.67 1217.1 L1934.25 1217.1 L1934.84 1217.1 L1935.43 1217.1 L1936.01 1217.1 L1936.6 1217.1 L1937.19 1217.1 L1937.77 1217.1 L1938.36 1217.1 L1938.95 1217.1 L1939.53 1217.1 L1940.12 1217.1 L1940.71 1217.1 L1941.29 1217.1 L1941.88 1217.1 L1942.46 1217.1 L1943.05 1217.1 L1943.64 1217.1 L1944.22 1217.1 L1944.81 1217.1 L1945.4 1217.1 L1945.98 1217.1 L1946.57 1217.1 L1947.16 1217.1 L1947.74 1217.1 L1948.33 1217.1 L1948.91 1217.1 L1949.5 1217.1 L1950.09 1217.1 L1950.67 1217.1 L1951.26 1217.1 L1951.85 1217.1 L1952.43 1217.1 L1953.02 1217.1 L1953.61 1217.1 L1954.19 1217.1 L1954.78 1217.1 L1955.37 1217.1 L1955.95 1217.1 L1956.54 1217.1 L1957.12 1217.1 L1957.71 1217.1 L1958.3 1217.1 L1958.88 1217.1 L1959.47 1217.1 L1960.06 1217.1 L1960.64 1217.1 L1961.23 1217.1 L1961.82 1217.1 L1962.4 1217.1 L1962.99 1217.1 L1963.58 1217.1 L1964.16 1217.1 L1964.75 1217.1 L1965.33 1217.1 L1965.92 1217.1 L1966.51 1217.1 L1967.09 1217.1 L1967.68 1217.1 L1968.27 1217.1 L1968.85 1217.1 L1969.44 1217.1 L1970.03 1217.1 L1970.61 1217.1 L1971.2 1217.1 L1971.78 1217.1 L1972.37 1217.1 L1972.96 1217.1 L1973.54 1217.1 L1974.13 1217.1 L1974.72 1217.1 L1975.3 1217.1 L1975.89 1217.1 L1976.48 1217.1 L1977.06 1217.1 L1977.65 1217.1 L1978.24 1217.1 L1978.82 1217.1 L1979.41 1217.1 L1979.99 1217.1 L1980.58 1217.1 L1981.17 1217.1 L1981.75 1217.1 L1982.34 1217.1 L1982.93 1217.1 L1983.51 1217.1 L1984.1 1217.1 L1984.69 1217.1 L1985.27 1217.1 L1985.86 1217.1 L1986.45 1217.1 L1987.03 1217.1 L1987.62 1217.1 L1988.2 1217.1 L1988.79 1217.1 L1989.38 1217.1 L1989.96 1217.1 L1990.55 1217.1 L1991.14 1217.1 L1991.72 1217.1 L1992.31 1217.1 L1992.9 1217.1 L1993.48 1217.1 L1994.07 1217.1 L1994.65 1217.1 L1995.24 1217.1 L1995.83 1217.1 L1996.41 1217.1 L1997 1217.1 L1997.59 1217.1 L1998.17 1217.1 L1998.76 1217.1 L1999.35 1217.1 L1999.93 1217.1 L2000.52 1217.1 L2001.11 1217.1 L2001.69 1217.1 L2002.28 1217.1 L2002.86 1217.1 L2003.45 1217.1 L2004.04 1217.1 L2004.62 1217.1 L2005.21 1217.1 L2005.8 1217.1 L2006.38 1217.1 L2006.97 1217.1 L2007.56 1217.1 L2008.14 1217.1 L2008.73 1217.1 L2009.32 1217.1 L2009.9 1217.1 L2010.49 1217.1 L2011.07 1217.1 L2011.66 1217.1 L2012.25 1217.1 L2012.83 1217.1 L2013.42 1217.1 L2014.01 1217.1 L2014.59 1217.1 L2015.18 1217.1 L2015.77 1217.1 L2016.35 1217.1 L2016.94 1217.1 L2017.53 1217.1 L2018.11 1217.1 L2018.7 1217.1 L2019.28 1217.1 L2019.87 1217.1 L2020.46 1217.1 L2021.04 1217.1 L2021.63 1217.1 L2022.22 1217.1 L2022.8 1217.1 L2023.39 1217.1 L2023.98 1217.1 L2024.56 1217.1 L2025.15 1217.1 L2025.73 1217.1 L2026.32 1217.1 L2026.91 1217.1 L2027.49 1217.1 L2028.08 1217.1 L2028.67 1217.1 L2029.25 1217.1 L2029.84 1217.1 L2030.43 1217.1 L2031.01 1217.1 L2031.6 1217.1 L2032.19 1217.1 L2032.77 1217.1 L2033.36 1217.1 L2033.94 1217.1 L2034.53 1217.1 L2035.12 1217.1 L2035.7 1217.1 L2036.29 1217.1 L2036.88 1217.1 L2037.46 1217.1 L2038.05 1217.1 L2038.64 1217.1 L2039.22 1217.1 L2039.81 1217.1 L2040.4 1217.1 L2040.98 1217.1 L2041.57 1217.1 L2042.15 1217.1 L2042.74 1217.1 L2043.33 1217.1 L2043.91 1217.1 L2044.5 1217.1 L2045.09 1217.1 L2045.67 1217.1 L2046.26 1217.1 L2046.85 1217.1 L2047.43 1217.1 L2048.02 1217.1 L2048.6 1217.1 L2049.19 1217.1 L2049.78 1217.1 L2050.36 1217.1 L2050.95 1217.1 L2051.54 1217.1 L2052.12 1217.1 L2052.71 1217.1 L2053.3 1217.1 L2053.88 1217.1 L2054.47 1217.1 L2055.06 1217.1 L2055.64 1217.1 L2056.23 1217.1 L2056.81 1217.1 L2057.4 1217.1 L2057.99 1217.1 L2058.57 1217.1 L2059.16 1217.1 L2059.75 1217.1 L2060.33 1217.1 L2060.92 1217.1 L2061.51 1217.1 L2062.09 1217.1 L2062.68 1217.1 L2063.27 1217.1 L2063.85 1217.1 L2064.44 1217.1 L2065.02 1217.1 L2065.61 1217.1 L2066.2 1217.1 L2066.78 1217.1 L2067.37 1217.1 L2067.96 1217.1 L2068.54 1217.1 L2069.13 1217.1 L2069.72 1217.1 L2070.3 1217.1 L2070.89 1217.1 L2071.48 1217.1 L2072.06 1217.1 L2072.65 1217.1 L2073.23 1217.1 L2073.82 1217.1 L2074.41 1217.1 L2074.99 1217.1 L2075.58 1217.1 L2076.17 1217.1 L2076.75 1217.1 L2077.34 1217.1 L2077.93 1217.1 L2078.51 1217.1 L2079.1 1217.1 L2079.68 1217.1 L2080.27 1217.1 L2080.86 1217.1 L2081.44 1217.1 L2082.03 1217.1 L2082.62 1217.1 L2083.2 1217.1 L2083.79 1217.1 L2084.38 1217.1 L2084.96 1217.1 L2085.55 1217.1 L2086.14 1217.1 L2086.72 1217.1 L2087.31 1217.1 L2087.89 1217.1 L2088.48 1217.1 L2089.07 1217.1 L2089.65 1217.1 L2090.24 1217.1 L2090.83 1217.1 L2091.41 1217.1 L2092 1217.1 L2092.59 1217.1 L2093.17 1217.1 L2093.76 1217.1 L2094.35 1217.1 L2094.93 1217.1 L2095.52 1217.1 L2096.1 1217.1 L2096.69 1217.1 L2097.28 1217.1 L2097.86 1217.1 L2098.45 1217.1 L2099.04 1217.1 L2099.62 1217.1 L2100.21 1217.1 L2100.8 1217.1 L2101.38 1217.1 L2101.97 1217.1 L2102.55 1217.1 L2103.14 1217.1 L2103.73 1217.1 L2104.31 1217.1 L2104.9 1217.1 L2105.49 1217.1 L2106.07 1217.1 L2106.66 1217.1 L2107.25 1217.1 L2107.83 1217.1 L2108.42 1217.1 L2109.01 1217.1 L2109.59 1217.1 L2110.18 1217.1 L2110.76 1217.1 L2111.35 1217.1 L2111.94 1217.1 L2112.52 1217.1 L2113.11 1217.1 L2113.7 1217.1 L2114.28 1217.1 L2114.87 1217.1 L2115.46 1217.1 L2116.04 1217.1 L2116.63 1217.1 L2117.22 1217.1 L2117.8 1217.1 L2118.39 1217.1 L2118.97 1217.1 L2119.56 1217.1 L2120.15 1217.1 L2120.73 1217.1 L2121.32 1217.1 L2121.91 1217.1 L2122.49 1217.1 L2123.08 1217.1 L2123.67 1217.1 L2124.25 1217.1 L2124.84 1217.1 L2125.42 1217.1 L2126.01 1217.1 L2126.6 1217.1 L2127.18 1217.1 L2127.77 1217.1 L2128.36 1217.1 L2128.94 1217.1 L2129.53 1217.1 L2130.12 1217.1 L2130.7 1217.1 L2131.29 1217.1 L2131.88 1217.1 L2132.46 1217.1 L2133.05 1217.1 L2133.63 1217.1 L2134.22 1217.1 L2134.81 1217.1 L2135.39 1217.1 L2135.98 1217.1 L2136.57 1217.1 L2137.15 1217.1 L2137.74 1217.1 L2138.33 1217.1 L2138.91 1217.1 L2139.5 1217.1 L2140.09 1217.1 L2140.67 1217.1 L2141.26 1217.1 L2141.84 1217.1 L2142.43 1217.1 L2143.02 1217.1 L2143.6 1217.1 L2144.19 1217.1 L2144.78 1217.1 L2145.36 1217.1 L2145.95 1217.1 L2146.54 1217.1 L2147.12 1217.1 L2147.71 1217.1 L2148.3 1217.1 L2148.88 1217.1 L2149.47 1217.1 L2150.05 1217.1 L2150.64 1217.1 L2151.23 1217.1 L2151.81 1217.1 L2152.4 1217.1 L2152.99 1217.1 L2153.57 1217.1 L2154.16 1217.1 L2154.75 1217.1 L2155.33 1217.1 L2155.92 1217.1 L2156.5 1217.1 L2157.09 1217.1 L2157.68 1217.1 L2158.26 1217.1 L2158.26 1216.98 L2157.68 1216.98 L2157.09 1216.98 L2156.5 1216.98 L2155.92 1216.98 L2155.33 1216.98 L2154.75 1216.98 L2154.16 1216.98 L2153.57 1216.98 L2152.99 1216.98 L2152.4 1216.98 L2151.81 1216.98 L2151.23 1216.98 L2150.64 1216.98 L2150.05 1216.98 L2149.47 1216.98 L2148.88 1216.98 L2148.3 1216.98 L2147.71 1216.98 L2147.12 1216.98 L2146.54 1216.98 L2145.95 1216.98 L2145.36 1216.98 L2144.78 1216.98 L2144.19 1216.98 L2143.6 1216.98 L2143.02 1216.98 L2142.43 1216.98 L2141.84 1216.98 L2141.26 1216.98 L2140.67 1216.98 L2140.09 1216.98 L2139.5 1216.98 L2138.91 1216.98 L2138.33 1216.98 L2137.74 1216.98 L2137.15 1216.98 L2136.57 1216.98 L2135.98 1216.98 L2135.39 1216.98 L2134.81 1216.98 L2134.22 1216.98 L2133.63 1216.98 L2133.05 1216.98 L2132.46 1216.98 L2131.88 1216.98 L2131.29 1216.98 L2130.7 1216.98 L2130.12 1216.98 L2129.53 1216.98 L2128.94 1216.98 L2128.36 1216.98 L2127.77 1216.98 L2127.18 1216.98 L2126.6 1216.98 L2126.01 1216.98 L2125.42 1216.98 L2124.84 1216.98 L2124.25 1216.98 L2123.67 1216.98 L2123.08 1216.98 L2122.49 1216.98 L2121.91 1216.98 L2121.32 1216.98 L2120.73 1216.98 L2120.15 1216.98 L2119.56 1216.98 L2118.97 1216.98 L2118.39 1216.98 L2117.8 1216.98 L2117.22 1216.98 L2116.63 1216.98 L2116.04 1216.98 L2115.46 1216.98 L2114.87 1216.98 L2114.28 1216.98 L2113.7 1216.98 L2113.11 1216.98 L2112.52 1216.98 L2111.94 1216.98 L2111.35 1216.98 L2110.76 1216.98 L2110.18 1216.98 L2109.59 1216.98 L2109.01 1216.98 L2108.42 1216.98 L2107.83 1216.98 L2107.25 1216.98 L2106.66 1216.98 L2106.07 1216.98 L2105.49 1216.98 L2104.9 1216.98 L2104.31 1216.98 L2103.73 1216.98 L2103.14 1216.98 L2102.55 1216.98 L2101.97 1216.98 L2101.38 1216.98 L2100.8 1216.98 L2100.21 1216.98 L2099.62 1216.98 L2099.04 1216.98 L2098.45 1216.98 L2097.86 1216.98 L2097.28 1216.98 L2096.69 1216.98 L2096.1 1216.98 L2095.52 1216.98 L2094.93 1216.98 L2094.35 1216.98 L2093.76 1216.98 L2093.17 1216.98 L2092.59 1216.98 L2092 1216.98 L2091.41 1216.98 L2090.83 1216.98 L2090.24 1216.98 L2089.65 1216.98 L2089.07 1216.98 L2088.48 1216.98 L2087.89 1216.98 L2087.31 1216.98 L2086.72 1216.98 L2086.14 1216.98 L2085.55 1216.98 L2084.96 1216.98 L2084.38 1216.98 L2083.79 1216.98 L2083.2 1216.98 L2082.62 1216.98 L2082.03 1216.98 L2081.44 1216.98 L2080.86 1216.98 L2080.27 1216.98 L2079.68 1216.98 L2079.1 1216.98 L2078.51 1216.98 L2077.93 1216.98 L2077.34 1216.98 L2076.75 1216.98 L2076.17 1216.98 L2075.58 1216.98 L2074.99 1216.98 L2074.41 1216.98 L2073.82 1216.98 L2073.23 1216.98 L2072.65 1216.98 L2072.06 1216.98 L2071.48 1216.98 L2070.89 1216.98 L2070.3 1216.98 L2069.72 1216.98 L2069.13 1216.98 L2068.54 1216.98 L2067.96 1216.98 L2067.37 1216.98 L2066.78 1216.98 L2066.2 1216.98 L2065.61 1216.98 L2065.02 1216.98 L2064.44 1216.98 L2063.85 1216.98 L2063.27 1216.98 L2062.68 1216.98 L2062.09 1216.98 L2061.51 1216.98 L2060.92 1216.98 L2060.33 1216.98 L2059.75 1216.98 L2059.16 1216.98 L2058.57 1216.98 L2057.99 1216.98 L2057.4 1216.98 L2056.81 1216.98 L2056.23 1216.98 L2055.64 1216.98 L2055.06 1216.98 L2054.47 1216.98 L2053.88 1216.98 L2053.3 1216.98 L2052.71 1216.98 L2052.12 1216.98 L2051.54 1216.98 L2050.95 1216.98 L2050.36 1216.98 L2049.78 1216.98 L2049.19 1216.98 L2048.6 1216.98 L2048.02 1216.98 L2047.43 1216.98 L2046.85 1216.98 L2046.26 1216.98 L2045.67 1216.98 L2045.09 1216.98 L2044.5 1216.98 L2043.91 1216.98 L2043.33 1216.98 L2042.74 1216.98 L2042.15 1216.98 L2041.57 1216.98 L2040.98 1216.98 L2040.4 1216.98 L2039.81 1216.98 L2039.22 1216.98 L2038.64 1216.98 L2038.05 1216.98 L2037.46 1216.98 L2036.88 1216.98 L2036.29 1216.98 L2035.7 1216.98 L2035.12 1216.98 L2034.53 1216.98 L2033.94 1216.98 L2033.36 1216.98 L2032.77 1216.98 L2032.19 1216.98 L2031.6 1216.98 L2031.01 1216.98 L2030.43 1216.98 L2029.84 1216.98 L2029.25 1216.98 L2028.67 1216.98 L2028.08 1216.98 L2027.49 1216.98 L2026.91 1216.98 L2026.32 1216.98 L2025.73 1216.98 L2025.15 1216.98 L2024.56 1216.98 L2023.98 1216.98 L2023.39 1216.98 L2022.8 1216.98 L2022.22 1216.98 L2021.63 1216.98 L2021.04 1216.98 L2020.46 1216.98 L2019.87 1216.98 L2019.28 1216.98 L2018.7 1216.98 L2018.11 1216.98 L2017.53 1216.98 L2016.94 1216.98 L2016.35 1216.98 L2015.77 1216.98 L2015.18 1216.98 L2014.59 1216.98 L2014.01 1216.98 L2013.42 1216.98 L2012.83 1216.98 L2012.25 1216.98 L2011.66 1216.98 L2011.07 1216.98 L2010.49 1216.98 L2009.9 1216.98 L2009.32 1216.98 L2008.73 1216.98 L2008.14 1216.98 L2007.56 1216.98 L2006.97 1216.98 L2006.38 1216.98 L2005.8 1216.98 L2005.21 1216.98 L2004.62 1216.98 L2004.04 1216.98 L2003.45 1216.98 L2002.86 1216.98 L2002.28 1216.98 L2001.69 1216.98 L2001.11 1216.98 L2000.52 1216.98 L1999.93 1216.98 L1999.35 1216.98 L1998.76 1216.98 L1998.17 1216.98 L1997.59 1216.98 L1997 1216.98 L1996.41 1216.98 L1995.83 1216.98 L1995.24 1216.98 L1994.65 1216.98 L1994.07 1216.98 L1993.48 1216.98 L1992.9 1216.98 L1992.31 1216.98 L1991.72 1216.98 L1991.14 1216.98 L1990.55 1216.98 L1989.96 1216.98 L1989.38 1216.98 L1988.79 1216.98 L1988.2 1216.98 L1987.62 1216.98 L1987.03 1216.98 L1986.45 1216.98 L1985.86 1216.98 L1985.27 1216.98 L1984.69 1216.98 L1984.1 1216.98 L1983.51 1216.98 L1982.93 1216.98 L1982.34 1216.98 L1981.75 1216.98 L1981.17 1216.98 L1980.58 1216.98 L1979.99 1216.98 L1979.41 1216.98 L1978.82 1216.98 L1978.24 1216.98 L1977.65 1216.98 L1977.06 1216.98 L1976.48 1216.98 L1975.89 1216.98 L1975.3 1216.98 L1974.72 1216.98 L1974.13 1216.98 L1973.54 1216.98 L1972.96 1216.98 L1972.37 1216.98 L1971.78 1216.98 L1971.2 1216.98 L1970.61 1216.98 L1970.03 1216.98 L1969.44 1216.98 L1968.85 1216.98 L1968.27 1216.98 L1967.68 1216.98 L1967.09 1216.98 L1966.51 1216.98 L1965.92 1216.98 L1965.33 1216.98 L1964.75 1216.98 L1964.16 1216.98 L1963.58 1216.98 L1962.99 1216.98 L1962.4 1216.98 L1961.82 1216.98 L1961.23 1216.98 L1960.64 1216.98 L1960.06 1216.98 L1959.47 1216.98 L1958.88 1216.98 L1958.3 1216.98 L1957.71 1216.98 L1957.12 1216.98 L1956.54 1216.98 L1955.95 1216.98 L1955.37 1216.98 L1954.78 1216.98 L1954.19 1216.98 L1953.61 1216.98 L1953.02 1216.98 L1952.43 1216.98 L1951.85 1216.98 L1951.26 1216.98 L1950.67 1216.98 L1950.09 1216.98 L1949.5 1216.98 L1948.91 1216.98 L1948.33 1216.98 L1947.74 1216.98 L1947.16 1216.98 L1946.57 1216.98 L1945.98 1216.98 L1945.4 1216.98 L1944.81 1216.98 L1944.22 1216.98 L1943.64 1216.98 L1943.05 1216.98 L1942.46 1216.98 L1941.88 1216.98 L1941.29 1216.98 L1940.71 1216.98 L1940.12 1216.98 L1939.53 1216.98 L1938.95 1216.98 L1938.36 1216.98 L1937.77 1216.98 L1937.19 1216.98 L1936.6 1216.98 L1936.01 1216.98 L1935.43 1216.98 L1934.84 1216.98 L1934.25 1216.98 L1933.67 1216.98 L1933.08 1216.98 L1932.5 1216.98 L1931.91 1216.98 L1931.32 1216.98 L1930.74 1216.98 L1930.15 1216.98 L1929.56 1216.98 L1928.98 1216.98 L1928.39 1216.98 L1927.8 1216.98 L1927.22 1216.98 L1926.63 1216.98 L1926.04 1216.98 L1925.46 1216.98 L1924.87 1216.98 L1924.29 1216.98 L1923.7 1216.98 L1923.11 1216.98 L1922.53 1216.98 L1921.94 1216.98 L1921.35 1216.98 L1920.77 1216.98 L1920.18 1216.98 L1919.59 1216.98 L1919.01 1216.98 L1918.42 1216.98 L1917.83 1216.98 L1917.25 1216.98 L1916.66 1216.98 L1916.08 1216.98 L1915.49 1216.98 L1914.9 1216.98 L1914.32 1216.98 L1913.73 1216.98 L1913.14 1216.98 L1912.56 1216.98 L1911.97 1216.98 L1911.38 1216.98 L1910.8 1216.98 L1910.21 1216.98 L1909.63 1216.98 L1909.04 1216.98 L1908.45 1216.98 L1907.87 1216.98 L1907.28 1216.98 L1906.69 1216.98 L1906.11 1216.98 L1905.52 1216.98 L1904.93 1216.98 L1904.35 1216.98 L1903.76 1216.98 L1903.17 1216.98 L1902.59 1216.98 L1902 1216.98 L1901.42 1216.98 L1900.83 1216.98 L1900.24 1216.98 L1899.66 1216.98 L1899.07 1216.98 L1898.48 1216.98 L1897.9 1216.98 L1897.31 1216.98 L1896.72 1216.98 L1896.14 1216.98 L1895.55 1216.98 L1894.96 1216.98 L1894.38 1216.98 L1893.79 1216.98 L1893.21 1216.98 L1892.62 1216.98 L1892.03 1216.98 L1891.45 1216.98 L1890.86 1216.98 L1890.27 1216.98 L1889.69 1216.98 L1889.1 1216.98 L1888.51 1216.98 L1887.93 1216.98 L1887.34 1216.98 L1886.76 1216.98 L1886.17 1216.98 L1885.58 1216.98 L1885 1216.98 L1884.41 1216.98 L1883.82 1216.98 L1883.24 1216.98 L1882.65 1216.98 L1882.06 1216.98 L1881.48 1216.98 L1880.89 1216.98 L1880.3 1216.98 L1879.72 1216.98 L1879.13 1216.98 L1878.55 1216.98 L1877.96 1216.98 L1877.37 1216.98 L1876.79 1216.98 L1876.2 1216.98 L1875.61 1216.98 L1875.03 1216.98 L1874.44 1216.98 L1873.85 1216.98 L1873.27 1216.98 L1872.68 1216.98 L1872.09 1216.98 L1871.51 1216.98 L1870.92 1216.98 L1870.34 1216.98 L1869.75 1216.98 L1869.16 1216.98 L1868.58 1216.98 L1867.99 1216.98 L1867.4 1216.98 L1866.82 1216.98 L1866.23 1216.98 L1865.64 1216.98 L1865.06 1216.98 L1864.47 1216.98 L1863.88 1216.98 L1863.3 1216.98 L1862.71 1216.98 L1862.13 1216.98 L1861.54 1216.98 L1860.95 1216.98 L1860.37 1216.98 L1859.78 1216.98 L1859.19 1216.98 L1858.61 1216.98 L1858.02 1216.98 L1857.43 1216.98 L1856.85 1216.98 L1856.26 1216.98 L1855.68 1216.98 L1855.09 1216.98 L1854.5 1216.98 L1853.92 1216.98 L1853.33 1216.98 L1852.74 1216.98 L1852.16 1216.98 L1851.57 1216.98 L1850.98 1216.98 L1850.4 1216.98 L1849.81 1216.98 L1849.22 1216.98 L1848.64 1216.98 L1848.05 1216.98 L1847.47 1216.98 L1846.88 1216.98 L1846.29 1216.98 L1845.71 1216.98 L1845.12 1216.98 L1844.53 1216.98 L1843.95 1216.98 L1843.36 1216.98 L1842.77 1216.98 L1842.19 1216.98 L1841.6 1216.98 L1841.01 1216.98 L1840.43 1216.98 L1839.84 1216.98 L1839.26 1216.98 L1838.67 1216.98 L1838.08 1216.98 L1837.5 1216.98 L1836.91 1216.98 L1836.32 1216.98 L1835.74 1216.98 L1835.15 1216.98 L1834.56 1216.98 L1833.98 1216.98 L1833.39 1216.98 L1832.81 1216.98 L1832.22 1216.98 L1831.63 1216.98 L1831.05 1216.98 L1830.46 1216.98 L1829.87 1216.98 L1829.29 1216.98 L1828.7 1216.98 L1828.11 1216.98 L1827.53 1216.98 L1826.94 1216.98 L1826.35 1216.98 L1825.77 1216.98 L1825.18 1216.98 L1824.6 1216.98 L1824.01 1216.98 L1823.42 1216.98 L1822.84 1216.98 L1822.25 1216.98 L1821.66 1216.98 L1821.08 1216.98 L1820.49 1216.98 L1819.9 1216.98 L1819.32 1216.98 L1818.73 1216.98 L1818.14 1216.98 L1817.56 1216.98 L1816.97 1216.98 L1816.39 1216.98 L1815.8 1216.98 L1815.21 1216.98 L1814.63 1216.98 L1814.04 1216.98 L1813.45 1216.98 L1812.87 1216.98 L1812.28 1216.98 L1811.69 1216.98 L1811.11 1216.98 L1810.52 1216.98 L1809.94 1216.98 L1809.35 1216.98 L1808.76 1216.98 L1808.18 1216.98 L1807.59 1216.98 L1807 1216.98 L1806.42 1216.98 L1805.83 1216.98 L1805.24 1216.98 L1804.66 1216.98 L1804.07 1216.98 L1803.48 1216.98 L1802.9 1216.98 L1802.31 1216.98 L1801.73 1216.98 L1801.14 1216.98 L1800.55 1216.98 L1799.97 1216.98 L1799.38 1216.98 L1798.79 1216.98 L1798.21 1216.98 L1797.62 1216.98 L1797.03 1216.98 L1796.45 1216.98 L1795.86 1216.98 L1795.27 1216.98 L1794.69 1216.98 L1794.1 1216.98 L1793.52 1216.98 L1792.93 1216.98 L1792.34 1216.98 L1791.76 1216.98 L1791.17 1216.98 L1790.58 1216.98 L1790 1216.98 L1789.41 1216.98 L1788.82 1216.98 L1788.24 1216.98 L1787.65 1216.98 L1787.06 1216.98 L1786.48 1216.98 L1785.89 1216.98 L1785.31 1216.98 L1784.72 1216.98 L1784.13 1216.98 L1783.55 1216.98 L1782.96 1216.98 L1782.37 1216.98 L1781.79 1216.98 L1781.2 1216.98 L1780.61 1216.98 L1780.03 1216.98 L1779.44 1216.98 L1778.86 1216.98 L1778.27 1216.98 L1777.68 1216.98 L1777.1 1216.98 L1776.51 1216.98 L1775.92 1216.98 L1775.34 1216.98 L1774.75 1216.98 L1774.16 1216.98 L1773.58 1216.98 L1772.99 1216.98 L1772.4 1216.98 L1771.82 1216.98 L1771.23 1216.98 L1770.65 1216.98 L1770.06 1216.98 L1769.47 1216.98 L1768.89 1216.98 L1768.3 1216.98 L1767.71 1216.98 L1767.13 1216.98 L1766.54 1216.98 L1765.95 1216.98 L1765.37 1216.98 L1764.78 1216.98 L1764.19 1216.98 L1763.61 1216.98 L1763.02 1216.98 L1762.44 1216.98 L1761.85 1216.98 L1761.26 1216.98 L1760.68 1216.98 L1760.09 1216.98 L1759.5 1216.98 L1758.92 1216.98 L1758.33 1216.98 L1757.74 1216.98 L1757.16 1216.98 L1756.57 1216.98 L1755.99 1216.98 L1755.4 1216.98 L1754.81 1216.98 L1754.23 1216.98 L1753.64 1216.98 L1753.05 1216.98 L1752.47 1216.98 L1751.88 1216.98 L1751.29 1216.98 L1750.71 1216.98 L1750.12 1216.98 L1749.53 1216.98 L1748.95 1216.98 L1748.36 1216.98 L1747.78 1216.98 L1747.19 1216.98 L1746.6 1216.98 L1746.02 1216.98 L1745.43 1216.98 L1744.84 1216.98 L1744.26 1216.98 L1743.67 1216.98 L1743.08 1216.98 L1742.5 1216.98 L1741.91 1216.98 L1741.32 1216.98 L1740.74 1216.98 L1740.15 1216.98 L1739.57 1216.98 L1738.98 1216.98 L1738.39 1216.98 L1737.81 1216.98 L1737.22 1216.98 L1736.63 1216.98 L1736.05 1216.98 L1735.46 1216.98 L1734.87 1216.98 L1734.29 1216.98 L1733.7 1216.98 L1733.11 1216.98 L1732.53 1216.98 L1731.94 1216.98 L1731.36 1216.98 L1730.77 1216.98 L1730.18 1216.98 L1729.6 1216.98 L1729.01 1216.98 L1728.42 1216.98 L1727.84 1216.98 L1727.25 1216.98 L1726.66 1216.98 L1726.08 1216.98 L1725.49 1216.98 L1724.91 1216.98 L1724.32 1216.98 L1723.73 1216.98 L1723.15 1216.98 L1722.56 1216.98 L1721.97 1216.98 L1721.39 1216.98 L1720.8 1216.98 L1720.21 1216.98 L1719.63 1216.98 L1719.04 1216.98 L1718.45 1216.98 L1717.87 1216.98 L1717.28 1216.98 L1716.7 1216.98 L1716.11 1216.98 L1715.52 1216.98 L1714.94 1216.98 L1714.35 1216.98 L1713.76 1216.98 L1713.18 1216.98 L1712.59 1216.98 L1712 1216.98 L1711.42 1216.98 L1710.83 1216.98 L1710.24 1216.98 L1709.66 1216.98 L1709.07 1216.98 L1708.49 1216.98 L1707.9 1216.98 L1707.31 1216.98 L1706.73 1216.98 L1706.14 1216.98 L1705.55 1216.98 L1704.97 1216.98 L1704.38 1216.98 L1703.79 1216.98 L1703.21 1216.98 L1702.62 1216.98 L1702.04 1216.98 L1701.45 1216.98 L1700.86 1216.98 L1700.28 1216.98 L1699.69 1216.98 L1699.1 1216.98 L1698.52 1216.98 L1697.93 1216.98 L1697.34 1216.98 L1696.76 1216.98 L1696.17 1216.98 L1695.58 1216.98 L1695 1216.98 L1694.41 1216.98 L1693.83 1216.98 L1693.24 1216.98 L1692.65 1216.98 L1692.07 1216.98 L1691.48 1216.98 L1690.89 1216.98 L1690.31 1216.98 L1689.72 1216.98 L1689.13 1216.98 L1688.55 1216.98 L1687.96 1216.98 L1687.37 1216.98 L1686.79 1216.98 L1686.2 1216.98 L1685.62 1216.98 L1685.03 1216.98 L1684.44 1216.98 L1683.86 1216.98 L1683.27 1216.98 L1682.68 1216.98 L1682.1 1216.98 L1681.51 1216.98 L1680.92 1216.98 L1680.34 1216.98 L1679.75 1216.98 L1679.17 1216.98 L1678.58 1216.98 L1677.99 1216.98 L1677.41 1216.98 L1676.82 1216.98 L1676.23 1216.98 L1675.65 1216.98 L1675.06 1216.98 L1674.47 1216.98 L1673.89 1216.98 L1673.3 1216.98 L1672.71 1216.98 L1672.13 1216.98 L1671.54 1216.98 L1670.96 1216.98 L1670.37 1216.98 L1669.78 1216.98 L1669.2 1216.98 L1668.61 1216.98 L1668.02 1216.98 L1667.44 1216.98 L1666.85 1216.98 L1666.26 1216.98 L1665.68 1216.98 L1665.09 1216.98 L1664.5 1216.98 L1663.92 1216.98 L1663.33 1216.98 L1662.75 1216.98 L1662.16 1216.98 L1661.57 1216.98 L1660.99 1216.98 L1660.4 1216.98 L1659.81 1216.98 L1659.23 1216.98 L1658.64 1216.98 L1658.05 1216.98 L1657.47 1216.98 L1656.88 1216.98 L1656.29 1216.98 L1655.71 1216.98 L1655.12 1216.98 L1654.54 1216.98 L1653.95 1216.98 L1653.36 1216.98 L1652.78 1216.98 L1652.19 1216.98 L1651.6 1216.98 L1651.02 1216.98 L1650.43 1216.98 L1649.84 1216.98 L1649.26 1216.98 L1648.67 1216.98 L1648.09 1216.98 L1647.5 1216.98 L1646.91 1216.98 L1646.33 1216.98 L1645.74 1216.98 L1645.15 1216.98 L1644.57 1216.98 L1643.98 1216.98 L1643.39 1216.98 L1642.81 1216.98 L1642.22 1216.98 L1641.63 1216.98 L1641.05 1216.98 L1640.46 1216.98 L1639.88 1216.98 L1639.29 1216.98 L1638.7 1216.98 L1638.12 1216.98 L1637.53 1216.98 L1636.94 1216.98 L1636.36 1216.98 L1635.77 1216.98 L1635.18 1216.98 L1634.6 1216.98 L1634.01 1216.98 L1633.42 1216.98 L1632.84 1216.98 L1632.25 1216.98 L1631.67 1216.98 L1631.08 1216.98 L1630.49 1216.98 L1629.91 1216.98 L1629.32 1216.98 L1628.73 1216.98 L1628.15 1216.98 L1627.56 1216.98 L1626.97 1216.98 L1626.39 1216.98 L1625.8 1216.98 L1625.22 1216.98 L1624.63 1216.98 L1624.04 1216.98 L1623.46 1216.98 L1622.87 1216.98 L1622.28 1216.98 L1621.7 1216.98 L1621.11 1216.98 L1620.52 1216.98 L1619.94 1216.98 L1619.35 1216.98 L1618.76 1216.98 L1618.18 1216.98 L1617.59 1216.98 L1617.01 1216.98 L1616.42 1216.98 L1615.83 1216.98 L1615.25 1216.98 L1614.66 1216.98 L1614.07 1216.98 L1613.49 1216.98 L1612.9 1216.98 L1612.31 1216.98 L1611.73 1216.98 L1611.14 1216.98 L1610.55 1216.98 L1609.97 1216.98 L1609.38 1216.98 L1608.8 1216.98 L1608.21 1216.98 L1607.62 1216.98 L1607.04 1216.98 L1606.45 1216.98 L1605.86 1216.98 L1605.28 1216.98 L1604.69 1216.98 L1604.1 1216.98 L1603.52 1216.98 L1602.93 1216.98 L1602.34 1216.98 L1601.76 1216.98 L1601.17 1216.98 L1600.59 1216.98 L1600 1216.98 L1599.41 1216.98 L1598.83 1216.98 L1598.24 1216.98 L1597.65 1216.98 L1597.07 1216.98 L1596.48 1216.98 L1595.89 1216.98 L1595.31 1216.98 L1594.72 1216.98 L1594.14 1216.98 L1593.55 1216.98 L1592.96 1216.98 L1592.38 1216.98 L1591.79 1216.98 L1591.2 1216.98 L1590.62 1216.98 L1590.03 1216.98 L1589.44 1216.98 L1588.86 1216.98 L1588.27 1216.98 L1587.68 1216.98 L1587.1 1216.98 L1586.51 1216.98 L1585.93 1216.98 L1585.34 1216.98 L1584.75 1216.98 L1584.17 1216.98 L1583.58 1216.98 L1582.99 1216.98 L1582.41 1216.98 L1581.82 1216.98 L1581.23 1216.98 L1580.65 1216.98 L1580.06 1216.98 L1579.47 1216.98 L1578.89 1216.98 L1578.3 1216.98 L1577.72 1216.98 L1577.13 1216.98 L1576.54 1216.98 L1575.96 1216.98 L1575.37 1216.98 L1574.78 1216.98 L1574.2 1216.98 L1573.61 1216.98 L1573.02 1216.98 L1572.44 1216.98 L1571.85 1216.98 L1571.27 1216.98 L1570.68 1216.98 L1570.09 1216.98 L1569.51 1216.98 L1568.92 1216.98 L1568.33 1216.98 L1567.75 1216.98 L1567.16 1216.98 L1566.57 1216.98 L1565.99 1216.98 L1565.4 1216.98 L1564.81 1216.98 L1564.23 1216.98 L1563.64 1216.98 L1563.06 1216.98 L1562.47 1216.98 L1561.88 1216.98 L1561.3 1216.98 L1560.71 1216.98 L1560.12 1216.98 L1559.54 1216.98 L1558.95 1216.98 L1558.36 1216.98 L1557.78 1216.98 L1557.19 1216.98 L1556.6 1216.98 L1556.02 1216.98 L1555.43 1216.98 L1554.85 1216.98 L1554.26 1216.98 L1553.67 1216.98 L1553.09 1216.98 L1552.5 1216.98 L1551.91 1216.98 L1551.33 1216.98 L1550.74 1216.98 L1550.15 1216.98 L1549.57 1216.98 L1548.98 1216.98 L1548.4 1216.98 L1547.81 1216.98 L1547.22 1216.98 L1546.64 1216.98 L1546.05 1216.98 L1545.46 1216.98 L1544.88 1216.98 L1544.29 1216.98 L1543.7 1216.98 L1543.12 1216.98 L1542.53 1216.98 L1541.94 1216.98 L1541.36 1216.98 L1540.77 1216.98 L1540.19 1216.98 L1539.6 1216.98 L1539.01 1216.98 L1538.43 1216.98 L1537.84 1216.98 L1537.25 1216.98 L1536.67 1216.98 L1536.08 1216.98 L1535.49 1216.98 L1534.91 1216.98 L1534.32 1216.98 L1533.73 1216.98 L1533.15 1216.98 L1532.56 1216.98 L1531.98 1216.98 L1531.39 1216.98 L1530.8 1216.98 L1530.22 1216.98 L1529.63 1216.98 L1529.04 1216.98 L1528.46 1216.98 L1527.87 1216.98 L1527.28 1216.98 L1526.7 1216.98 L1526.11 1216.98 L1525.52 1216.98 L1524.94 1216.98 L1524.35 1216.98 L1523.77 1216.98 L1523.18 1216.98 L1522.59 1216.98 L1522.01 1216.98 L1521.42 1216.98 L1520.83 1216.98 L1520.25 1216.98 L1519.66 1216.98 L1519.07 1216.98 L1518.49 1216.98 L1517.9 1216.98 L1517.32 1216.98 L1516.73 1216.98 L1516.14 1216.98 L1515.56 1216.98 L1514.97 1216.98 L1514.38 1216.98 L1513.8 1216.98 L1513.21 1216.98 L1512.62 1216.98 L1512.04 1216.98 L1511.45 1216.98 L1510.86 1216.98 L1510.28 1216.98 L1509.69 1216.98 L1509.11 1216.98 L1508.52 1216.98 L1507.93 1216.98 L1507.35 1216.98 L1506.76 1216.98 L1506.17 1216.98 L1505.59 1216.98 L1505 1216.98 L1504.41 1216.98 L1503.83 1216.98 L1503.24 1216.98 L1502.65 1216.98 L1502.07 1216.98 L1501.48 1216.98 L1500.9 1216.98 L1500.31 1216.98 L1499.72 1216.98 L1499.14 1216.98 L1498.55 1216.98 L1497.96 1216.98 L1497.38 1216.98 L1496.79 1216.98 L1496.2 1216.98 L1495.62 1216.98 L1495.03 1216.98 L1494.45 1216.98 L1493.86 1216.98 L1493.27 1216.98 L1492.69 1216.98 L1492.1 1216.98 L1491.51 1216.98 L1490.93 1216.98 L1490.34 1216.98 L1489.75 1216.98 L1489.17 1216.98 L1488.58 1216.98 L1487.99 1216.98 L1487.41 1216.98 L1486.82 1216.98 L1486.24 1216.98 L1485.65 1216.98 L1485.06 1216.98 L1484.48 1216.98 L1483.89 1216.98 L1483.3 1216.98 L1482.72 1216.98 L1482.13 1216.98 L1481.54 1216.98 L1480.96 1216.98 L1480.37 1216.98 L1479.78 1216.98 L1479.2 1216.98 L1478.61 1216.98 L1478.03 1216.98 L1477.44 1216.98 L1476.85 1216.98 L1476.27 1216.98 L1475.68 1216.98 L1475.09 1216.98 L1474.51 1216.98 L1473.92 1216.98 L1473.33 1216.98 L1472.75 1216.98 L1472.16 1216.98 L1471.57 1216.98 L1470.99 1216.98 L1470.4 1216.98 L1469.82 1216.98 L1469.23 1216.98 L1468.64 1216.98 L1468.06 1216.98 L1467.47 1216.98 L1466.88 1216.98 L1466.3 1216.98 L1465.71 1216.98 L1465.12 1216.98 L1464.54 1216.98 L1463.95 1216.98 L1463.37 1216.98 L1462.78 1216.98 L1462.19 1216.98 L1461.61 1216.98 L1461.02 1216.98 L1460.43 1216.98 L1459.85 1216.98 L1459.26 1216.98 L1458.67 1216.98 L1458.09 1216.98 L1457.5 1216.98 L1456.91 1216.98 L1456.33 1216.98 L1455.74 1216.98 L1455.16 1216.98 L1454.57 1216.98 L1453.98 1216.98 L1453.4 1216.98 L1452.81 1216.98 L1452.22 1216.98 L1451.64 1216.98 L1451.05 1216.98 L1450.46 1216.98 L1449.88 1216.98 L1449.29 1216.98 L1448.7 1216.98 L1448.12 1216.98 L1447.53 1216.98 L1446.95 1216.98 L1446.36 1216.98 L1445.77 1216.98 L1445.19 1216.98 L1444.6 1216.98 L1444.01 1216.98 L1443.43 1216.98 L1442.84 1216.98 L1442.25 1216.98 L1441.67 1216.98 L1441.08 1216.98 L1440.5 1216.98 L1439.91 1216.98 L1439.32 1216.98 L1438.74 1216.98 L1438.15 1216.98 L1437.56 1216.98 L1436.98 1216.98 L1436.39 1216.98 L1435.8 1216.98 L1435.22 1216.98 L1434.63 1216.98 L1434.04 1216.98 L1433.46 1216.98 L1432.87 1216.98 L1432.29 1216.98 L1431.7 1216.98 L1431.11 1216.98 L1430.53 1216.98 L1429.94 1216.98 L1429.35 1216.98 L1428.77 1216.98 L1428.18 1216.98 L1427.59 1216.98 L1427.01 1216.98 L1426.42 1216.98 L1425.83 1216.98 L1425.25 1216.98 L1424.66 1216.98 L1424.08 1216.98 L1423.49 1216.98 L1422.9 1216.98 L1422.32 1216.98 L1421.73 1216.98 L1421.14 1216.98 L1420.56 1216.98 L1419.97 1216.98 L1419.38 1216.98 L1418.8 1216.98 L1418.21 1216.98 L1417.63 1216.98 L1417.04 1216.98 L1416.45 1216.98 L1415.87 1216.98 L1415.28 1216.98 L1414.69 1216.98 L1414.11 1216.98 L1413.52 1216.98 L1412.93 1216.98 L1412.35 1216.98 L1411.76 1216.98 L1411.17 1216.98 L1410.59 1216.98 L1410 1216.98 L1409.42 1216.98 L1408.83 1216.98 L1408.24 1216.98 L1407.66 1216.98 L1407.07 1216.98 L1406.48 1216.98 L1405.9 1216.98 L1405.31 1216.98 L1404.72 1216.98 L1404.14 1216.98 L1403.55 1216.98 L1402.96 1216.98 L1402.38 1216.98 L1401.79 1216.98 L1401.21 1216.98 L1400.62 1216.98 L1400.03 1216.98 L1399.45 1216.98 L1398.86 1216.98 L1398.27 1216.98 L1397.69 1216.98 L1397.1 1216.98 L1396.51 1216.98 L1395.93 1216.98 L1395.34 1216.98 L1394.75 1216.98 L1394.17 1216.98 L1393.58 1216.98 L1393 1216.98 L1392.41 1216.98 L1391.82 1216.98 L1391.24 1216.98 L1390.65 1216.98 L1390.06 1216.98 L1389.48 1216.98 L1388.89 1216.98 L1388.3 1216.98 L1387.72 1216.98 L1387.13 1216.98 L1386.55 1216.98 L1385.96 1216.98 L1385.37 1216.98 L1384.79 1216.98 L1384.2 1216.98 L1383.61 1216.98 L1383.03 1216.98 L1382.44 1216.98 L1381.85 1216.98 L1381.27 1216.98 L1380.68 1216.98 L1380.09 1216.98 L1379.51 1216.98 L1378.92 1216.98 L1378.34 1216.98 L1377.75 1216.98 L1377.16 1216.98 L1376.58 1216.98 L1375.99 1216.98 L1375.4 1216.98 L1374.82 1216.98 L1374.23 1216.98 L1373.64 1216.98 L1373.06 1216.98 L1372.47 1216.98 L1371.88 1216.98 L1371.3 1216.98 L1370.71 1216.98 L1370.13 1216.98 L1369.54 1216.98 L1368.95 1216.98 L1368.37 1216.98 L1367.78 1216.98 L1367.19 1216.98 L1366.61 1216.98 L1366.02 1216.98 L1365.43 1216.98 L1364.85 1216.98 L1364.26 1216.98 L1363.68 1216.98 L1363.09 1216.98 L1362.5 1216.98 L1361.92 1216.98 L1361.33 1216.98 L1360.74 1216.98 L1360.16 1216.98 L1359.57 1216.98 L1358.98 1216.98 L1358.4 1216.98 L1357.81 1216.98 L1357.22 1216.98 L1356.64 1216.98 L1356.05 1216.98 L1355.47 1216.98 L1354.88 1216.98 L1354.29 1216.98 L1353.71 1216.98 L1353.12 1216.98 L1352.53 1216.98 L1351.95 1216.98 L1351.36 1216.98 L1350.77 1216.98 L1350.19 1216.98 L1349.6 1216.98 L1349.01 1216.98 L1348.43 1216.98 L1347.84 1216.98 L1347.26 1216.98 L1346.67 1216.98 L1346.08 1216.98 L1345.5 1216.98 L1344.91 1216.98 L1344.32 1216.98 L1343.74 1216.98 L1343.15 1216.98 L1342.56 1216.98 L1341.98 1216.98 L1341.39 1216.98 L1340.8 1216.98 L1340.22 1216.98 L1339.63 1216.98 L1339.05 1216.98 L1338.46 1216.98 L1337.87 1216.98 L1337.29 1216.98 L1336.7 1216.98 L1336.11 1216.98 L1335.53 1216.98 L1334.94 1216.98 L1334.35 1216.98 L1333.77 1216.98 L1333.18 1216.98 L1332.6 1216.98 L1332.01 1216.98 L1331.42 1216.98 L1330.84 1216.98 L1330.25 1216.98 L1329.66 1216.98 L1329.08 1216.98 L1328.49 1216.98 L1327.9 1216.98 L1327.32 1216.98 L1326.73 1216.98 L1326.14 1216.98 L1325.56 1216.98 L1324.97 1216.98 L1324.39 1216.98 L1323.8 1216.98 L1323.21 1216.98 L1322.63 1216.98 L1322.04 1216.98 L1321.45 1216.98 L1320.87 1216.98 L1320.28 1216.98 L1319.69 1216.98 L1319.11 1216.98 L1318.52 1216.98 L1317.93 1216.98 L1317.35 1216.98 L1316.76 1216.98 L1316.18 1216.98 L1315.59 1216.98 L1315 1216.98 L1314.42 1216.98 L1313.83 1216.98 L1313.24 1216.98 L1312.66 1216.98 L1312.07 1216.98 L1311.48 1216.98 L1310.9 1216.98 L1310.31 1216.98 L1309.73 1216.98 L1309.14 1216.98 L1308.55 1216.98 L1307.97 1216.98 L1307.38 1216.98 L1306.79 1216.98 L1306.21 1216.98 L1305.62 1216.98 L1305.03 1216.98 L1304.45 1216.98 L1303.86 1216.98 L1303.27 1216.98 L1302.69 1216.98 L1302.1 1216.98 L1301.52 1216.98 L1300.93 1216.98 L1300.34 1216.98 L1299.76 1216.98 L1299.17 1216.98 L1298.58 1216.98 L1298 1216.98 L1297.41 1216.98 L1296.82 1216.98 L1296.24 1216.98 L1295.65 1216.98 L1295.06 1216.98 L1294.48 1216.98 L1293.89 1216.98 L1293.31 1216.98 L1292.72 1216.98 L1292.13 1216.98 L1291.55 1216.98 L1290.96 1216.98 L1290.37 1216.98 L1289.79 1216.98 L1289.2 1216.98 L1288.61 1216.98 L1288.03 1216.98 L1287.44 1216.98 L1286.86 1216.98 L1286.27 1216.98 L1285.68 1216.98 L1285.1 1216.98 L1284.51 1216.98 L1283.92 1216.98 L1283.34 1216.98 L1282.75 1216.98 L1282.16 1216.98 L1281.58 1216.98 L1280.99 1216.98 L1280.4 1216.98 L1279.82 1216.98 L1279.23 1216.98 L1278.65 1216.98 L1278.06 1216.98 L1277.47 1216.98 L1276.89 1216.98 L1276.3 1216.98 L1275.71 1216.98 L1275.13 1216.98 L1274.54 1216.98 L1273.95 1216.98 L1273.37 1216.98 L1272.78 1216.98 L1272.19 1216.98 L1271.61 1216.98 L1271.02 1216.98 L1270.44 1216.98 L1269.85 1216.98 L1269.26 1216.98 L1268.68 1216.98 L1268.09 1216.98 L1267.5 1216.98 L1266.92 1216.98 L1266.33 1216.98 L1265.74 1216.98 L1265.16 1216.98 L1264.57 1216.98 L1263.98 1216.98 L1263.4 1216.98 L1262.81 1216.98 L1262.23 1216.98 L1261.64 1216.98 L1261.05 1216.98 L1260.47 1216.98 L1259.88 1216.98 L1259.29 1216.98 L1258.71 1216.98 L1258.12 1216.98 L1257.53 1216.98 L1256.95 1216.98 L1256.36 1216.98 L1255.78 1216.98 L1255.19 1216.98 L1254.6 1216.98 L1254.02 1216.98 L1253.43 1216.98 L1252.84 1216.98 L1252.26 1216.98 L1251.67 1216.98 L1251.08 1216.98 L1250.5 1216.98 L1249.91 1216.98 L1249.32 1216.98 L1248.74 1216.98 L1248.15 1216.98 L1247.57 1216.98 L1246.98 1216.98 L1246.39 1216.98 L1245.81 1216.98 L1245.22 1216.98 L1244.63 1216.98 L1244.05 1216.98 L1243.46 1216.98 L1242.87 1216.98 L1242.29 1216.98 L1241.7 1216.98 L1241.11 1216.98 L1240.53 1216.98 L1239.94 1216.98 L1239.36 1216.98 L1238.77 1216.98 L1238.18 1216.98 L1237.6 1216.98 L1237.01 1216.98 L1236.42 1216.98 L1235.84 1216.98 L1235.25 1216.98 L1234.66 1216.98 L1234.08 1216.98 L1233.49 1216.98 L1232.91 1216.98 L1232.32 1216.98 L1231.73 1216.98 L1231.15 1216.98 L1230.56 1216.98 L1229.97 1216.98 L1229.39 1216.98 L1228.8 1216.98 L1228.21 1216.98 L1227.63 1216.98 L1227.04 1216.98 L1226.45 1216.98 L1225.87 1216.98 L1225.28 1216.98 L1224.7 1216.98 L1224.11 1216.98 L1223.52 1216.98 L1222.94 1216.98 L1222.35 1216.98 L1221.76 1216.98 L1221.18 1216.98 L1220.59 1216.98 L1220 1216.98 L1219.42 1216.98 L1218.83 1216.98 L1218.24 1216.98 L1217.66 1216.98 L1217.07 1216.98 L1216.49 1216.98 L1215.9 1216.98 L1215.31 1216.98 L1214.73 1216.98 L1214.14 1216.98 L1213.55 1216.98 L1212.97 1216.98 L1212.38 1216.98 L1211.79 1216.98 L1211.21 1216.98 L1210.62 1216.98 L1210.03 1216.98 L1209.45 1216.98 L1208.86 1216.98 L1208.28 1216.98 L1207.69 1216.98 L1207.1 1216.98 L1206.52 1216.98 L1205.93 1216.98 L1205.34 1216.98 L1204.76 1216.98 L1204.17 1216.98 L1203.58 1216.98 L1203 1216.98 L1202.41 1216.98 L1201.83 1216.98 L1201.24 1216.98 L1200.65 1216.98 L1200.07 1216.98 L1199.48 1216.98 L1198.89 1216.98 L1198.31 1216.98 L1197.72 1216.98 L1197.13 1216.98 L1196.55 1216.98 L1195.96 1216.98 L1195.37 1216.98 L1194.79 1216.98 L1194.2 1216.98 L1193.62 1216.98 L1193.03 1216.98 L1192.44 1216.98 L1191.86 1216.98 L1191.27 1216.98 L1190.68 1216.98 L1190.1 1216.98 L1189.51 1216.98 L1188.92 1216.98 L1188.34 1216.98 L1187.75 1216.98 L1187.16 1216.98 L1186.58 1216.98 L1185.99 1216.98 L1185.41 1216.98 L1184.82 1216.98 L1184.23 1216.98 L1183.65 1216.98 L1183.06 1216.98 L1182.47 1216.98 L1181.89 1216.98 L1181.3 1216.98 L1180.71 1216.98 L1180.13 1216.98 L1179.54 1216.98 L1178.96 1216.98 L1178.37 1216.98 L1177.78 1216.98 L1177.2 1216.98 L1176.61 1216.98 L1176.02 1216.98 L1175.44 1216.98 L1174.85 1216.98 L1174.26 1216.98 L1173.68 1216.98 L1173.09 1216.98 L1172.5 1216.98 L1171.92 1216.98 L1171.33 1216.98 L1170.75 1216.98 L1170.16 1216.98 L1169.57 1216.98 L1168.99 1216.98 L1168.4 1216.98 L1167.81 1216.98 L1167.23 1216.98 L1166.64 1216.98 L1166.05 1216.98 L1165.47 1216.98 L1164.88 1216.98 L1164.29 1216.98 L1163.71 1216.98 L1163.12 1216.98 L1162.54 1216.98 L1161.95 1216.98 L1161.36 1216.98 L1160.78 1216.98 L1160.19 1216.98 L1159.6 1216.98 L1159.02 1216.98 L1158.43 1216.98 L1157.84 1216.98 L1157.26 1216.98 L1156.67 1216.98 L1156.09 1216.98 L1155.5 1216.98 L1154.91 1216.98 L1154.33 1216.98 L1153.74 1216.98 L1153.15 1216.98 L1152.57 1216.98 L1151.98 1216.98 L1151.39 1216.98 L1150.81 1216.98 L1150.22 1216.98 L1149.63 1216.98 L1149.05 1216.98 L1148.46 1216.98 L1147.88 1216.98 L1147.29 1216.98 L1146.7 1216.98 L1146.12 1216.98 L1145.53 1216.98 L1144.94 1216.98 L1144.36 1216.98 L1143.77 1216.98 L1143.18 1216.98 L1142.6 1216.98 L1142.01 1216.98 L1141.42 1216.98 L1140.84 1216.98 L1140.25 1216.98 L1139.67 1216.98 L1139.08 1216.98 L1138.49 1216.98 L1137.91 1216.98 L1137.32 1216.98 L1136.73 1216.98 L1136.15 1216.98 L1135.56 1216.98 L1134.97 1216.98 L1134.39 1216.98 L1133.8 1216.98 L1133.21 1216.98 L1132.63 1216.98 L1132.04 1216.98 L1131.46 1216.98 L1130.87 1216.98 L1130.28 1216.98 L1129.7 1216.98 L1129.11 1216.98 L1128.52 1216.98 L1127.94 1216.98 L1127.35 1216.98 L1126.76 1216.98 L1126.18 1216.98 L1125.59 1216.98 L1125.01 1216.98 L1124.42 1216.98 L1123.83 1216.98 L1123.25 1216.98 L1122.66 1216.98 L1122.07 1216.98 L1121.49 1216.98 L1120.9 1216.98 L1120.31 1216.98 L1119.73 1216.98 L1119.14 1216.98 L1118.55 1216.98 L1117.97 1216.98 L1117.38 1216.98 L1116.8 1216.98 L1116.21 1216.98 L1115.62 1216.98 L1115.04 1216.98 L1114.45 1216.98 L1113.86 1216.98 L1113.28 1216.98 L1112.69 1216.98 L1112.1 1216.98 L1111.52 1216.98 L1110.93 1216.98 L1110.34 1216.98 L1109.76 1216.98 L1109.17 1216.98 L1108.59 1216.98 L1108 1216.98 L1107.41 1216.98 L1106.83 1216.98 L1106.24 1216.98 L1105.65 1216.98 L1105.07 1216.98 L1104.48 1216.98 L1103.89 1216.98 L1103.31 1216.98 L1102.72 1216.98 L1102.14 1216.98 L1101.55 1216.98 L1100.96 1216.98 L1100.38 1216.98 L1099.79 1216.98 L1099.2 1216.98 L1098.62 1216.98 L1098.03 1216.98 L1097.44 1216.98 L1096.86 1216.98 L1096.27 1216.98 L1095.68 1216.98 L1095.1 1216.98 L1094.51 1216.98 L1093.93 1216.98 L1093.34 1216.98 L1092.75 1216.98 L1092.17 1216.98 L1091.58 1216.98 L1090.99 1216.98 L1090.41 1216.98 L1089.82 1216.98 L1089.23 1216.98 L1088.65 1216.98 L1088.06 1216.98 L1087.47 1216.98 L1086.89 1216.98 L1086.3 1216.98 L1085.72 1216.98 L1085.13 1216.98 L1084.54 1216.98 L1083.96 1216.98 L1083.37 1216.98 L1082.78 1216.98 L1082.2 1216.98 L1081.61 1216.98 L1081.02 1216.98 L1080.44 1216.98 L1079.85 1216.98 L1079.26 1216.98 L1078.68 1216.98 L1078.09 1216.98 L1077.51 1216.98 L1076.92 1216.98 L1076.33 1216.98 L1075.75 1216.98 L1075.16 1216.98 L1074.57 1216.98 L1073.99 1216.98 L1073.4 1216.98 L1072.81 1216.98 L1072.23 1216.98 L1071.64 1216.98 L1071.06 1216.98 L1070.47 1216.98 L1069.88 1216.98 L1069.3 1216.98 L1068.71 1216.98 L1068.12 1216.98 L1067.54 1216.98 L1066.95 1216.98 L1066.36 1216.98 L1065.78 1216.98 L1065.19 1216.98 L1064.6 1216.98 L1064.02 1216.98 L1063.43 1216.98 L1062.85 1216.98 L1062.26 1216.98 L1061.67 1216.98 L1061.09 1216.98 L1060.5 1216.98 L1059.91 1216.98 L1059.33 1216.98 L1058.74 1216.98 L1058.15 1216.98 L1057.57 1216.98 L1056.98 1216.98 L1056.39 1216.98 L1055.81 1216.98 L1055.22 1216.98 L1054.64 1216.98 L1054.05 1216.98 L1053.46 1216.98 L1052.88 1216.98 L1052.29 1216.98 L1051.7 1216.98 L1051.12 1216.98 L1050.53 1216.98 L1049.94 1216.98 L1049.36 1216.98 L1048.77 1216.98 L1048.19 1216.98 L1047.6 1216.98 L1047.01 1216.98 L1046.43 1216.98 L1045.84 1216.98 L1045.25 1216.98 L1044.67 1216.98 L1044.08 1216.98 L1043.49 1216.98 L1042.91 1216.98 L1042.32 1216.98 L1041.73 1216.98 L1041.15 1216.98 L1040.56 1216.98 L1039.98 1216.98 L1039.39 1216.98 L1038.8 1216.98 L1038.22 1216.98 L1037.63 1216.98 L1037.04 1216.98 L1036.46 1216.98 L1035.87 1216.98 L1035.28 1216.98 L1034.7 1216.98 L1034.11 1216.98 L1033.52 1216.98 L1032.94 1216.98 L1032.35 1216.98 L1031.77 1216.98 L1031.18 1216.98 L1030.59 1216.98 L1030.01 1216.98 L1029.42 1216.98 L1028.83 1216.98 L1028.25 1216.98 L1027.66 1216.98 L1027.07 1216.98 L1026.49 1216.98 L1025.9 1216.98 L1025.32 1216.98 L1024.73 1216.98 L1024.14 1216.98 L1023.56 1216.98 L1022.97 1216.98 L1022.38 1216.98 L1021.8 1216.98 L1021.21 1216.98 L1020.62 1216.98 L1020.04 1216.98 L1019.45 1216.98 L1018.86 1216.98 L1018.28 1216.98 L1017.69 1216.98 L1017.11 1216.98 L1016.52 1216.98 L1015.93 1216.98 L1015.35 1216.98 L1014.76 1216.98 L1014.17 1216.98 L1013.59 1216.98 L1013 1216.98 L1012.41 1216.98 L1011.83 1216.98 L1011.24 1216.98 L1010.65 1216.98 L1010.07 1216.98 L1009.48 1216.98 L1008.9 1216.98 L1008.31 1216.98 L1007.72 1216.98 L1007.14 1216.98 L1006.55 1216.98 L1005.96 1216.98 L1005.38 1216.98 L1004.79 1216.98 L1004.2 1216.98 L1003.62 1216.98 L1003.03 1216.98 L1002.44 1216.98 L1001.86 1216.98 L1001.27 1216.98 L1000.69 1216.98 L1000.1 1216.98 L999.513 1216.98 L998.926 1216.98 L998.34 1216.98 L997.754 1216.98 L997.167 1216.98 L996.581 1216.98 L995.994 1216.98 L995.408 1216.98 L994.822 1216.98 L994.235 1216.98 L993.649 1216.98 L993.062 1216.98 L992.476 1216.98 L991.889 1216.98 L991.303 1216.98 L990.717 1216.98 L990.13 1216.98 L989.544 1216.98 L988.957 1216.98 L988.371 1216.98 L987.785 1216.98 L987.198 1216.98 L986.612 1216.98 L986.025 1216.98  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1217.04 986.612,1217.04 987.198,1217.04 987.785,1217.04 988.371,1217.04 988.957,1217.04 989.544,1217.04 990.13,1217.04 990.717,1217.04 991.303,1217.04 991.889,1217.04 992.476,1217.04 993.062,1217.04 993.649,1217.04 994.235,1217.04 994.822,1217.04 995.408,1217.04 995.994,1217.04 996.581,1217.04 997.167,1217.04 997.754,1217.04 998.34,1217.04 998.926,1217.04 999.513,1217.04 1000.1,1217.04 1000.69,1217.04 1001.27,1217.04 1001.86,1217.04 1002.44,1217.04 1003.03,1217.04 1003.62,1217.04 1004.2,1217.04 1004.79,1217.04 1005.38,1217.04 1005.96,1217.04 1006.55,1217.04 1007.14,1217.04 1007.72,1217.04 1008.31,1217.04 1008.9,1217.04 1009.48,1217.04 1010.07,1217.04 1010.65,1217.04 1011.24,1217.04 1011.83,1217.04 1012.41,1217.04 1013,1217.04 1013.59,1217.04 1014.17,1217.04 1014.76,1217.04 1015.35,1217.04 1015.93,1217.04 1016.52,1217.04 1017.11,1217.04 1017.69,1217.04 1018.28,1217.04 1018.86,1217.04 1019.45,1217.04 1020.04,1217.04 1020.62,1217.04 1021.21,1217.04 1021.8,1217.04 1022.38,1217.04 1022.97,1217.04 1023.56,1217.04 1024.14,1217.04 1024.73,1217.04 1025.32,1217.04 1025.9,1217.04 1026.49,1217.04 1027.07,1217.04 1027.66,1217.04 1028.25,1217.04 1028.83,1217.04 1029.42,1217.04 1030.01,1217.04 1030.59,1217.04 1031.18,1217.04 1031.77,1217.04 1032.35,1217.04 1032.94,1217.04 1033.52,1217.04 1034.11,1217.04 1034.7,1217.04 1035.28,1217.04 1035.87,1217.04 1036.46,1217.04 1037.04,1217.04 1037.63,1217.04 1038.22,1217.04 1038.8,1217.04 1039.39,1217.04 1039.98,1217.04 1040.56,1217.04 1041.15,1217.04 1041.73,1217.04 1042.32,1217.04 1042.91,1217.04 1043.49,1217.04 1044.08,1217.04 1044.67,1217.04 1045.25,1217.04 1045.84,1217.04 1046.43,1217.04 1047.01,1217.04 1047.6,1217.04 1048.19,1217.04 1048.77,1217.04 1049.36,1217.04 1049.94,1217.04 1050.53,1217.04 1051.12,1217.04 1051.7,1217.04 1052.29,1217.04 1052.88,1217.04 1053.46,1217.04 1054.05,1217.04 1054.64,1217.04 1055.22,1217.04 1055.81,1217.04 1056.39,1217.04 1056.98,1217.04 1057.57,1217.04 1058.15,1217.04 1058.74,1217.04 1059.33,1217.04 1059.91,1217.04 1060.5,1217.04 1061.09,1217.04 1061.67,1217.04 1062.26,1217.04 1062.85,1217.04 1063.43,1217.04 1064.02,1217.04 1064.6,1217.04 1065.19,1217.04 1065.78,1217.04 1066.36,1217.04 1066.95,1217.04 1067.54,1217.04 1068.12,1217.04 1068.71,1217.04 1069.3,1217.04 1069.88,1217.04 1070.47,1217.04 1071.06,1217.04 1071.64,1217.04 1072.23,1217.04 1072.81,1217.04 1073.4,1217.04 1073.99,1217.04 1074.57,1217.04 1075.16,1217.04 1075.75,1217.04 1076.33,1217.04 1076.92,1217.04 1077.51,1217.04 1078.09,1217.04 1078.68,1217.04 1079.26,1217.04 1079.85,1217.04 1080.44,1217.04 1081.02,1217.04 1081.61,1217.04 1082.2,1217.04 1082.78,1217.04 1083.37,1217.04 1083.96,1217.04 1084.54,1217.04 1085.13,1217.04 1085.72,1217.04 1086.3,1217.04 1086.89,1217.04 1087.47,1217.04 1088.06,1217.04 1088.65,1217.04 1089.23,1217.04 1089.82,1217.04 1090.41,1217.04 1090.99,1217.04 1091.58,1217.04 1092.17,1217.04 1092.75,1217.04 1093.34,1217.04 1093.93,1217.04 1094.51,1217.04 1095.1,1217.04 1095.68,1217.04 1096.27,1217.04 1096.86,1217.04 1097.44,1217.04 1098.03,1217.04 1098.62,1217.04 1099.2,1217.04 1099.79,1217.04 1100.38,1217.04 1100.96,1217.04 1101.55,1217.04 1102.14,1217.04 1102.72,1217.04 1103.31,1217.04 1103.89,1217.04 1104.48,1217.04 1105.07,1217.04 1105.65,1217.04 1106.24,1217.04 1106.83,1217.04 1107.41,1217.04 1108,1217.04 1108.59,1217.04 1109.17,1217.04 1109.76,1217.04 1110.34,1217.04 1110.93,1217.04 1111.52,1217.04 1112.1,1217.04 1112.69,1217.04 1113.28,1217.04 1113.86,1217.04 1114.45,1217.04 1115.04,1217.04 1115.62,1217.04 1116.21,1217.04 1116.8,1217.04 1117.38,1217.04 1117.97,1217.04 1118.55,1217.04 1119.14,1217.04 1119.73,1217.04 1120.31,1217.04 1120.9,1217.04 1121.49,1217.04 1122.07,1217.04 1122.66,1217.04 1123.25,1217.04 1123.83,1217.04 1124.42,1217.04 1125.01,1217.04 1125.59,1217.04 1126.18,1217.04 1126.76,1217.04 1127.35,1217.04 1127.94,1217.04 1128.52,1217.04 1129.11,1217.04 1129.7,1217.04 1130.28,1217.04 1130.87,1217.04 1131.46,1217.04 1132.04,1217.04 1132.63,1217.04 1133.21,1217.04 1133.8,1217.04 1134.39,1217.04 1134.97,1217.04 1135.56,1217.04 1136.15,1217.04 1136.73,1217.04 1137.32,1217.04 1137.91,1217.04 1138.49,1217.04 1139.08,1217.04 1139.67,1217.04 1140.25,1217.04 1140.84,1217.04 1141.42,1217.04 1142.01,1217.04 1142.6,1217.04 1143.18,1217.04 1143.77,1217.04 1144.36,1217.04 1144.94,1217.04 1145.53,1217.04 1146.12,1217.04 1146.7,1217.04 1147.29,1217.04 1147.88,1217.04 1148.46,1217.04 1149.05,1217.04 1149.63,1217.04 1150.22,1217.04 1150.81,1217.04 1151.39,1217.04 1151.98,1217.04 1152.57,1217.04 1153.15,1217.04 1153.74,1217.04 1154.33,1217.04 1154.91,1217.04 1155.5,1217.04 1156.09,1217.04 1156.67,1217.04 1157.26,1217.04 1157.84,1217.04 1158.43,1217.04 1159.02,1217.04 1159.6,1217.04 1160.19,1217.04 1160.78,1217.04 1161.36,1217.04 1161.95,1217.04 1162.54,1217.04 1163.12,1217.04 1163.71,1217.04 1164.29,1217.04 1164.88,1217.04 1165.47,1217.04 1166.05,1217.04 1166.64,1217.04 1167.23,1217.04 1167.81,1217.04 1168.4,1217.04 1168.99,1217.04 1169.57,1217.04 1170.16,1217.04 1170.75,1217.04 1171.33,1217.04 1171.92,1217.04 1172.5,1217.04 1173.09,1217.04 1173.68,1217.04 1174.26,1217.04 1174.85,1217.04 1175.44,1217.04 1176.02,1217.04 1176.61,1217.04 1177.2,1217.04 1177.78,1217.04 1178.37,1217.04 1178.96,1217.04 1179.54,1217.04 1180.13,1217.04 1180.71,1217.04 1181.3,1217.04 1181.89,1217.04 1182.47,1217.04 1183.06,1217.04 1183.65,1217.04 1184.23,1217.04 1184.82,1217.04 1185.41,1217.04 1185.99,1217.04 1186.58,1217.04 1187.16,1217.04 1187.75,1217.04 1188.34,1217.04 1188.92,1217.04 1189.51,1217.04 1190.1,1217.04 1190.68,1217.04 1191.27,1217.04 1191.86,1217.04 1192.44,1217.04 1193.03,1217.04 1193.62,1217.04 1194.2,1217.04 1194.79,1217.04 1195.37,1217.04 1195.96,1217.04 1196.55,1217.04 1197.13,1217.04 1197.72,1217.04 1198.31,1217.04 1198.89,1217.04 1199.48,1217.04 1200.07,1217.04 1200.65,1217.04 1201.24,1217.04 1201.83,1217.04 1202.41,1217.04 1203,1217.04 1203.58,1217.04 1204.17,1217.04 1204.76,1217.04 1205.34,1217.04 1205.93,1217.04 1206.52,1217.04 1207.1,1217.04 1207.69,1217.04 1208.28,1217.04 1208.86,1217.04 1209.45,1217.04 1210.03,1217.04 1210.62,1217.04 1211.21,1217.04 1211.79,1217.04 1212.38,1217.04 1212.97,1217.04 1213.55,1217.04 1214.14,1217.04 1214.73,1217.04 1215.31,1217.04 1215.9,1217.04 1216.49,1217.04 1217.07,1217.04 1217.66,1217.04 1218.24,1217.04 1218.83,1217.04 1219.42,1217.04 1220,1217.04 1220.59,1217.04 1221.18,1217.04 1221.76,1217.04 1222.35,1217.04 1222.94,1217.04 1223.52,1217.04 1224.11,1217.04 1224.7,1217.04 1225.28,1217.04 1225.87,1217.04 1226.45,1217.04 1227.04,1217.04 1227.63,1217.04 1228.21,1217.04 1228.8,1217.04 1229.39,1217.04 1229.97,1217.04 1230.56,1217.04 1231.15,1217.04 1231.73,1217.04 1232.32,1217.04 1232.91,1217.04 1233.49,1217.04 1234.08,1217.04 1234.66,1217.04 1235.25,1217.04 1235.84,1217.04 1236.42,1217.04 1237.01,1217.04 1237.6,1217.04 1238.18,1217.04 1238.77,1217.04 1239.36,1217.04 1239.94,1217.04 1240.53,1217.04 1241.11,1217.04 1241.7,1217.04 1242.29,1217.04 1242.87,1217.04 1243.46,1217.04 1244.05,1217.04 1244.63,1217.04 1245.22,1217.04 1245.81,1217.04 1246.39,1217.04 1246.98,1217.04 1247.57,1217.04 1248.15,1217.04 1248.74,1217.04 1249.32,1217.04 1249.91,1217.04 1250.5,1217.04 1251.08,1217.04 1251.67,1217.04 1252.26,1217.04 1252.84,1217.04 1253.43,1217.04 1254.02,1217.04 1254.6,1217.04 1255.19,1217.04 1255.78,1217.04 1256.36,1217.04 1256.95,1217.04 1257.53,1217.04 1258.12,1217.04 1258.71,1217.04 1259.29,1217.04 1259.88,1217.04 1260.47,1217.04 1261.05,1217.04 1261.64,1217.04 1262.23,1217.04 1262.81,1217.04 1263.4,1217.04 1263.98,1217.04 1264.57,1217.04 1265.16,1217.04 1265.74,1217.04 1266.33,1217.04 1266.92,1217.04 1267.5,1217.04 1268.09,1217.04 1268.68,1217.04 1269.26,1217.04 1269.85,1217.04 1270.44,1217.04 1271.02,1217.04 1271.61,1217.04 1272.19,1217.04 1272.78,1217.04 1273.37,1217.04 1273.95,1217.04 1274.54,1217.04 1275.13,1217.04 1275.71,1217.04 1276.3,1217.04 1276.89,1217.04 1277.47,1217.04 1278.06,1217.04 1278.65,1217.04 1279.23,1217.04 1279.82,1217.04 1280.4,1217.04 1280.99,1217.04 1281.58,1217.04 1282.16,1217.04 1282.75,1217.04 1283.34,1217.04 1283.92,1217.04 1284.51,1217.04 1285.1,1217.04 1285.68,1217.04 1286.27,1217.04 1286.86,1217.04 1287.44,1217.04 1288.03,1217.04 1288.61,1217.04 1289.2,1217.04 1289.79,1217.04 1290.37,1217.04 1290.96,1217.04 1291.55,1217.04 1292.13,1217.04 1292.72,1217.04 1293.31,1217.04 1293.89,1217.04 1294.48,1217.04 1295.06,1217.04 1295.65,1217.04 1296.24,1217.04 1296.82,1217.04 1297.41,1217.04 1298,1217.04 1298.58,1217.04 1299.17,1217.04 1299.76,1217.04 1300.34,1217.04 1300.93,1217.04 1301.52,1217.04 1302.1,1217.04 1302.69,1217.04 1303.27,1217.04 1303.86,1217.04 1304.45,1217.04 1305.03,1217.04 1305.62,1217.04 1306.21,1217.04 1306.79,1217.04 1307.38,1217.04 1307.97,1217.04 1308.55,1217.04 1309.14,1217.04 1309.73,1217.04 1310.31,1217.04 1310.9,1217.04 1311.48,1217.04 1312.07,1217.04 1312.66,1217.04 1313.24,1217.04 1313.83,1217.04 1314.42,1217.04 1315,1217.04 1315.59,1217.04 1316.18,1217.04 1316.76,1217.04 1317.35,1217.04 1317.93,1217.04 1318.52,1217.04 1319.11,1217.04 1319.69,1217.04 1320.28,1217.04 1320.87,1217.04 1321.45,1217.04 1322.04,1217.04 1322.63,1217.04 1323.21,1217.04 1323.8,1217.04 1324.39,1217.04 1324.97,1217.04 1325.56,1217.04 1326.14,1217.04 1326.73,1217.04 1327.32,1217.04 1327.9,1217.04 1328.49,1217.04 1329.08,1217.04 1329.66,1217.04 1330.25,1217.04 1330.84,1217.04 1331.42,1217.04 1332.01,1217.04 1332.6,1217.04 1333.18,1217.04 1333.77,1217.04 1334.35,1217.04 1334.94,1217.04 1335.53,1217.04 1336.11,1217.04 1336.7,1217.04 1337.29,1217.04 1337.87,1217.04 1338.46,1217.04 1339.05,1217.04 1339.63,1217.04 1340.22,1217.04 1340.8,1217.04 1341.39,1217.04 1341.98,1217.04 1342.56,1217.04 1343.15,1217.04 1343.74,1217.04 1344.32,1217.04 1344.91,1217.04 1345.5,1217.04 1346.08,1217.04 1346.67,1217.04 1347.26,1217.04 1347.84,1217.04 1348.43,1217.04 1349.01,1217.04 1349.6,1217.04 1350.19,1217.04 1350.77,1217.04 1351.36,1217.04 1351.95,1217.04 1352.53,1217.04 1353.12,1217.04 1353.71,1217.04 1354.29,1217.04 1354.88,1217.04 1355.47,1217.04 1356.05,1217.04 1356.64,1217.04 1357.22,1217.04 1357.81,1217.04 1358.4,1217.04 1358.98,1217.04 1359.57,1217.04 1360.16,1217.04 1360.74,1217.04 1361.33,1217.04 1361.92,1217.04 1362.5,1217.04 1363.09,1217.04 1363.68,1217.04 1364.26,1217.04 1364.85,1217.04 1365.43,1217.04 1366.02,1217.04 1366.61,1217.04 1367.19,1217.04 1367.78,1217.04 1368.37,1217.04 1368.95,1217.04 1369.54,1217.04 1370.13,1217.04 1370.71,1217.04 1371.3,1217.04 1371.88,1217.04 1372.47,1217.04 1373.06,1217.04 1373.64,1217.04 1374.23,1217.04 1374.82,1217.04 1375.4,1217.04 1375.99,1217.04 1376.58,1217.04 1377.16,1217.04 1377.75,1217.04 1378.34,1217.04 1378.92,1217.04 1379.51,1217.04 1380.09,1217.04 1380.68,1217.04 1381.27,1217.04 1381.85,1217.04 1382.44,1217.04 1383.03,1217.04 1383.61,1217.04 1384.2,1217.04 1384.79,1217.04 1385.37,1217.04 1385.96,1217.04 1386.55,1217.04 1387.13,1217.04 1387.72,1217.04 1388.3,1217.04 1388.89,1217.04 1389.48,1217.04 1390.06,1217.04 1390.65,1217.04 1391.24,1217.04 1391.82,1217.04 1392.41,1217.04 1393,1217.04 1393.58,1217.04 1394.17,1217.04 1394.75,1217.04 1395.34,1217.04 1395.93,1217.04 1396.51,1217.04 1397.1,1217.04 1397.69,1217.04 1398.27,1217.04 1398.86,1217.04 1399.45,1217.04 1400.03,1217.04 1400.62,1217.04 1401.21,1217.04 1401.79,1217.04 1402.38,1217.04 1402.96,1217.04 1403.55,1217.04 1404.14,1217.04 1404.72,1217.04 1405.31,1217.04 1405.9,1217.04 1406.48,1217.04 1407.07,1217.04 1407.66,1217.04 1408.24,1217.04 1408.83,1217.04 1409.42,1217.04 1410,1217.04 1410.59,1217.04 1411.17,1217.04 1411.76,1217.04 1412.35,1217.04 1412.93,1217.04 1413.52,1217.04 1414.11,1217.04 1414.69,1217.04 1415.28,1217.04 1415.87,1217.04 1416.45,1217.04 1417.04,1217.04 1417.63,1217.04 1418.21,1217.04 1418.8,1217.04 1419.38,1217.04 1419.97,1217.04 1420.56,1217.04 1421.14,1217.04 1421.73,1217.04 1422.32,1217.04 1422.9,1217.04 1423.49,1217.04 1424.08,1217.04 1424.66,1217.04 1425.25,1217.04 1425.83,1217.04 1426.42,1217.04 1427.01,1217.04 1427.59,1217.04 1428.18,1217.04 1428.77,1217.04 1429.35,1217.04 1429.94,1217.04 1430.53,1217.04 1431.11,1217.04 1431.7,1217.04 1432.29,1217.04 1432.87,1217.04 1433.46,1217.04 1434.04,1217.04 1434.63,1217.04 1435.22,1217.04 1435.8,1217.04 1436.39,1217.04 1436.98,1217.04 1437.56,1217.04 1438.15,1217.04 1438.74,1217.04 1439.32,1217.04 1439.91,1217.04 1440.5,1217.04 1441.08,1217.04 1441.67,1217.04 1442.25,1217.04 1442.84,1217.04 1443.43,1217.04 1444.01,1217.04 1444.6,1217.04 1445.19,1217.04 1445.77,1217.04 1446.36,1217.04 1446.95,1217.04 1447.53,1217.04 1448.12,1217.04 1448.7,1217.04 1449.29,1217.04 1449.88,1217.04 1450.46,1217.04 1451.05,1217.04 1451.64,1217.04 1452.22,1217.04 1452.81,1217.04 1453.4,1217.04 1453.98,1217.04 1454.57,1217.04 1455.16,1217.04 1455.74,1217.04 1456.33,1217.04 1456.91,1217.04 1457.5,1217.04 1458.09,1217.04 1458.67,1217.04 1459.26,1217.04 1459.85,1217.04 1460.43,1217.04 1461.02,1217.04 1461.61,1217.04 1462.19,1217.04 1462.78,1217.04 1463.37,1217.04 1463.95,1217.04 1464.54,1217.04 1465.12,1217.04 1465.71,1217.04 1466.3,1217.04 1466.88,1217.04 1467.47,1217.04 1468.06,1217.04 1468.64,1217.04 1469.23,1217.04 1469.82,1217.04 1470.4,1217.04 1470.99,1217.04 1471.57,1217.04 1472.16,1217.04 1472.75,1217.04 1473.33,1217.04 1473.92,1217.04 1474.51,1217.04 1475.09,1217.04 1475.68,1217.04 1476.27,1217.04 1476.85,1217.04 1477.44,1217.04 1478.03,1217.04 1478.61,1217.04 1479.2,1217.04 1479.78,1217.04 1480.37,1217.04 1480.96,1217.04 1481.54,1217.04 1482.13,1217.04 1482.72,1217.04 1483.3,1217.04 1483.89,1217.04 1484.48,1217.04 1485.06,1217.04 1485.65,1217.04 1486.24,1217.04 1486.82,1217.04 1487.41,1217.04 1487.99,1217.04 1488.58,1217.04 1489.17,1217.04 1489.75,1217.04 1490.34,1217.04 1490.93,1217.04 1491.51,1217.04 1492.1,1217.04 1492.69,1217.04 1493.27,1217.04 1493.86,1217.04 1494.45,1217.04 1495.03,1217.04 1495.62,1217.04 1496.2,1217.04 1496.79,1217.04 1497.38,1217.04 1497.96,1217.04 1498.55,1217.04 1499.14,1217.04 1499.72,1217.04 1500.31,1217.04 1500.9,1217.04 1501.48,1217.04 1502.07,1217.04 1502.65,1217.04 1503.24,1217.04 1503.83,1217.04 1504.41,1217.04 1505,1217.04 1505.59,1217.04 1506.17,1217.04 1506.76,1217.04 1507.35,1217.04 1507.93,1217.04 1508.52,1217.04 1509.11,1217.04 1509.69,1217.04 1510.28,1217.04 1510.86,1217.04 1511.45,1217.04 1512.04,1217.04 1512.62,1217.04 1513.21,1217.04 1513.8,1217.04 1514.38,1217.04 1514.97,1217.04 1515.56,1217.04 1516.14,1217.04 1516.73,1217.04 1517.32,1217.04 1517.9,1217.04 1518.49,1217.04 1519.07,1217.04 1519.66,1217.04 1520.25,1217.04 1520.83,1217.04 1521.42,1217.04 1522.01,1217.04 1522.59,1217.04 1523.18,1217.04 1523.77,1217.04 1524.35,1217.04 1524.94,1217.04 1525.52,1217.04 1526.11,1217.04 1526.7,1217.04 1527.28,1217.04 1527.87,1217.04 1528.46,1217.04 1529.04,1217.04 1529.63,1217.04 1530.22,1217.04 1530.8,1217.04 1531.39,1217.04 1531.98,1217.04 1532.56,1217.04 1533.15,1217.04 1533.73,1217.04 1534.32,1217.04 1534.91,1217.04 1535.49,1217.04 1536.08,1217.04 1536.67,1217.04 1537.25,1217.04 1537.84,1217.04 1538.43,1217.04 1539.01,1217.04 1539.6,1217.04 1540.19,1217.04 1540.77,1217.04 1541.36,1217.04 1541.94,1217.04 1542.53,1217.04 1543.12,1217.04 1543.7,1217.04 1544.29,1217.04 1544.88,1217.04 1545.46,1217.04 1546.05,1217.04 1546.64,1217.04 1547.22,1217.04 1547.81,1217.04 1548.4,1217.04 1548.98,1217.04 1549.57,1217.04 1550.15,1217.04 1550.74,1217.04 1551.33,1217.04 1551.91,1217.04 1552.5,1217.04 1553.09,1217.04 1553.67,1217.04 1554.26,1217.04 1554.85,1217.04 1555.43,1217.04 1556.02,1217.04 1556.6,1217.04 1557.19,1217.04 1557.78,1217.04 1558.36,1217.04 1558.95,1217.04 1559.54,1217.04 1560.12,1217.04 1560.71,1217.04 1561.3,1217.04 1561.88,1217.04 1562.47,1217.04 1563.06,1217.04 1563.64,1217.04 1564.23,1217.04 1564.81,1217.04 1565.4,1217.04 1565.99,1217.04 1566.57,1217.04 1567.16,1217.04 1567.75,1217.04 1568.33,1217.04 1568.92,1217.04 1569.51,1217.04 1570.09,1217.04 1570.68,1217.04 1571.27,1217.04 1571.85,1217.04 1572.44,1217.04 1573.02,1217.04 1573.61,1217.04 1574.2,1217.04 1574.78,1217.04 1575.37,1217.04 1575.96,1217.04 1576.54,1217.04 1577.13,1217.04 1577.72,1217.04 1578.3,1217.04 1578.89,1217.04 1579.47,1217.04 1580.06,1217.04 1580.65,1217.04 1581.23,1217.04 1581.82,1217.04 1582.41,1217.04 1582.99,1217.04 1583.58,1217.04 1584.17,1217.04 1584.75,1217.04 1585.34,1217.04 1585.93,1217.04 1586.51,1217.04 1587.1,1217.04 1587.68,1217.04 1588.27,1217.04 1588.86,1217.04 1589.44,1217.04 1590.03,1217.04 1590.62,1217.04 1591.2,1217.04 1591.79,1217.04 1592.38,1217.04 1592.96,1217.04 1593.55,1217.04 1594.14,1217.04 1594.72,1217.04 1595.31,1217.04 1595.89,1217.04 1596.48,1217.04 1597.07,1217.04 1597.65,1217.04 1598.24,1217.04 1598.83,1217.04 1599.41,1217.04 1600,1217.04 1600.59,1217.04 1601.17,1217.04 1601.76,1217.04 1602.34,1217.04 1602.93,1217.04 1603.52,1217.04 1604.1,1217.04 1604.69,1217.04 1605.28,1217.04 1605.86,1217.04 1606.45,1217.04 1607.04,1217.04 1607.62,1217.04 1608.21,1217.04 1608.8,1217.04 1609.38,1217.04 1609.97,1217.04 1610.55,1217.04 1611.14,1217.04 1611.73,1217.04 1612.31,1217.04 1612.9,1217.04 1613.49,1217.04 1614.07,1217.04 1614.66,1217.04 1615.25,1217.04 1615.83,1217.04 1616.42,1217.04 1617.01,1217.04 1617.59,1217.04 1618.18,1217.04 1618.76,1217.04 1619.35,1217.04 1619.94,1217.04 1620.52,1217.04 1621.11,1217.04 1621.7,1217.04 1622.28,1217.04 1622.87,1217.04 1623.46,1217.04 1624.04,1217.04 1624.63,1217.04 1625.22,1217.04 1625.8,1217.04 1626.39,1217.04 1626.97,1217.04 1627.56,1217.04 1628.15,1217.04 1628.73,1217.04 1629.32,1217.04 1629.91,1217.04 1630.49,1217.04 1631.08,1217.04 1631.67,1217.04 1632.25,1217.04 1632.84,1217.04 1633.42,1217.04 1634.01,1217.04 1634.6,1217.04 1635.18,1217.04 1635.77,1217.04 1636.36,1217.04 1636.94,1217.04 1637.53,1217.04 1638.12,1217.04 1638.7,1217.04 1639.29,1217.04 1639.88,1217.04 1640.46,1217.04 1641.05,1217.04 1641.63,1217.04 1642.22,1217.04 1642.81,1217.04 1643.39,1217.04 1643.98,1217.04 1644.57,1217.04 1645.15,1217.04 1645.74,1217.04 1646.33,1217.04 1646.91,1217.04 1647.5,1217.04 1648.09,1217.04 1648.67,1217.04 1649.26,1217.04 1649.84,1217.04 1650.43,1217.04 1651.02,1217.04 1651.6,1217.04 1652.19,1217.04 1652.78,1217.04 1653.36,1217.04 1653.95,1217.04 1654.54,1217.04 1655.12,1217.04 1655.71,1217.04 1656.29,1217.04 1656.88,1217.04 1657.47,1217.04 1658.05,1217.04 1658.64,1217.04 1659.23,1217.04 1659.81,1217.04 1660.4,1217.04 1660.99,1217.04 1661.57,1217.04 1662.16,1217.04 1662.75,1217.04 1663.33,1217.04 1663.92,1217.04 1664.5,1217.04 1665.09,1217.04 1665.68,1217.04 1666.26,1217.04 1666.85,1217.04 1667.44,1217.04 1668.02,1217.04 1668.61,1217.04 1669.2,1217.04 1669.78,1217.04 1670.37,1217.04 1670.96,1217.04 1671.54,1217.04 1672.13,1217.04 1672.71,1217.04 1673.3,1217.04 1673.89,1217.04 1674.47,1217.04 1675.06,1217.04 1675.65,1217.04 1676.23,1217.04 1676.82,1217.04 1677.41,1217.04 1677.99,1217.04 1678.58,1217.04 1679.17,1217.04 1679.75,1217.04 1680.34,1217.04 1680.92,1217.04 1681.51,1217.04 1682.1,1217.04 1682.68,1217.04 1683.27,1217.04 1683.86,1217.04 1684.44,1217.04 1685.03,1217.04 1685.62,1217.04 1686.2,1217.04 1686.79,1217.04 1687.37,1217.04 1687.96,1217.04 1688.55,1217.04 1689.13,1217.04 1689.72,1217.04 1690.31,1217.04 1690.89,1217.04 1691.48,1217.04 1692.07,1217.04 1692.65,1217.04 1693.24,1217.04 1693.83,1217.04 1694.41,1217.04 1695,1217.04 1695.58,1217.04 1696.17,1217.04 1696.76,1217.04 1697.34,1217.04 1697.93,1217.04 1698.52,1217.04 1699.1,1217.04 1699.69,1217.04 1700.28,1217.04 1700.86,1217.04 1701.45,1217.04 1702.04,1217.04 1702.62,1217.04 1703.21,1217.04 1703.79,1217.04 1704.38,1217.04 1704.97,1217.04 1705.55,1217.04 1706.14,1217.04 1706.73,1217.04 1707.31,1217.04 1707.9,1217.04 1708.49,1217.04 1709.07,1217.04 1709.66,1217.04 1710.24,1217.04 1710.83,1217.04 1711.42,1217.04 1712,1217.04 1712.59,1217.04 1713.18,1217.04 1713.76,1217.04 1714.35,1217.04 1714.94,1217.04 1715.52,1217.04 1716.11,1217.04 1716.7,1217.04 1717.28,1217.04 1717.87,1217.04 1718.45,1217.04 1719.04,1217.04 1719.63,1217.04 1720.21,1217.04 1720.8,1217.04 1721.39,1217.04 1721.97,1217.04 1722.56,1217.04 1723.15,1217.04 1723.73,1217.04 1724.32,1217.04 1724.91,1217.04 1725.49,1217.04 1726.08,1217.04 1726.66,1217.04 1727.25,1217.04 1727.84,1217.04 1728.42,1217.04 1729.01,1217.04 1729.6,1217.04 1730.18,1217.04 1730.77,1217.04 1731.36,1217.04 1731.94,1217.04 1732.53,1217.04 1733.11,1217.04 1733.7,1217.04 1734.29,1217.04 1734.87,1217.04 1735.46,1217.04 1736.05,1217.04 1736.63,1217.04 1737.22,1217.04 1737.81,1217.04 1738.39,1217.04 1738.98,1217.04 1739.57,1217.04 1740.15,1217.04 1740.74,1217.04 1741.32,1217.04 1741.91,1217.04 1742.5,1217.04 1743.08,1217.04 1743.67,1217.04 1744.26,1217.04 1744.84,1217.04 1745.43,1217.04 1746.02,1217.04 1746.6,1217.04 1747.19,1217.04 1747.78,1217.04 1748.36,1217.04 1748.95,1217.04 1749.53,1217.04 1750.12,1217.04 1750.71,1217.04 1751.29,1217.04 1751.88,1217.04 1752.47,1217.04 1753.05,1217.04 1753.64,1217.04 1754.23,1217.04 1754.81,1217.04 1755.4,1217.04 1755.99,1217.04 1756.57,1217.04 1757.16,1217.04 1757.74,1217.04 1758.33,1217.04 1758.92,1217.04 1759.5,1217.04 1760.09,1217.04 1760.68,1217.04 1761.26,1217.04 1761.85,1217.04 1762.44,1217.04 1763.02,1217.04 1763.61,1217.04 1764.19,1217.04 1764.78,1217.04 1765.37,1217.04 1765.95,1217.04 1766.54,1217.04 1767.13,1217.04 1767.71,1217.04 1768.3,1217.04 1768.89,1217.04 1769.47,1217.04 1770.06,1217.04 1770.65,1217.04 1771.23,1217.04 1771.82,1217.04 1772.4,1217.04 1772.99,1217.04 1773.58,1217.04 1774.16,1217.04 1774.75,1217.04 1775.34,1217.04 1775.92,1217.04 1776.51,1217.04 1777.1,1217.04 1777.68,1217.04 1778.27,1217.04 1778.86,1217.04 1779.44,1217.04 1780.03,1217.04 1780.61,1217.04 1781.2,1217.04 1781.79,1217.04 1782.37,1217.04 1782.96,1217.04 1783.55,1217.04 1784.13,1217.04 1784.72,1217.04 1785.31,1217.04 1785.89,1217.04 1786.48,1217.04 1787.06,1217.04 1787.65,1217.04 1788.24,1217.04 1788.82,1217.04 1789.41,1217.04 1790,1217.04 1790.58,1217.04 1791.17,1217.04 1791.76,1217.04 1792.34,1217.04 1792.93,1217.04 1793.52,1217.04 1794.1,1217.04 1794.69,1217.04 1795.27,1217.04 1795.86,1217.04 1796.45,1217.04 1797.03,1217.04 1797.62,1217.04 1798.21,1217.04 1798.79,1217.04 1799.38,1217.04 1799.97,1217.04 1800.55,1217.04 1801.14,1217.04 1801.73,1217.04 1802.31,1217.04 1802.9,1217.04 1803.48,1217.04 1804.07,1217.04 1804.66,1217.04 1805.24,1217.04 1805.83,1217.04 1806.42,1217.04 1807,1217.04 1807.59,1217.04 1808.18,1217.04 1808.76,1217.04 1809.35,1217.04 1809.94,1217.04 1810.52,1217.04 1811.11,1217.04 1811.69,1217.04 1812.28,1217.04 1812.87,1217.04 1813.45,1217.04 1814.04,1217.04 1814.63,1217.04 1815.21,1217.04 1815.8,1217.04 1816.39,1217.04 1816.97,1217.04 1817.56,1217.04 1818.14,1217.04 1818.73,1217.04 1819.32,1217.04 1819.9,1217.04 1820.49,1217.04 1821.08,1217.04 1821.66,1217.04 1822.25,1217.04 1822.84,1217.04 1823.42,1217.04 1824.01,1217.04 1824.6,1217.04 1825.18,1217.04 1825.77,1217.04 1826.35,1217.04 1826.94,1217.04 1827.53,1217.04 1828.11,1217.04 1828.7,1217.04 1829.29,1217.04 1829.87,1217.04 1830.46,1217.04 1831.05,1217.04 1831.63,1217.04 1832.22,1217.04 1832.81,1217.04 1833.39,1217.04 1833.98,1217.04 1834.56,1217.04 1835.15,1217.04 1835.74,1217.04 1836.32,1217.04 1836.91,1217.04 1837.5,1217.04 1838.08,1217.04 1838.67,1217.04 1839.26,1217.04 1839.84,1217.04 1840.43,1217.04 1841.01,1217.04 1841.6,1217.04 1842.19,1217.04 1842.77,1217.04 1843.36,1217.04 1843.95,1217.04 1844.53,1217.04 1845.12,1217.04 1845.71,1217.04 1846.29,1217.04 1846.88,1217.04 1847.47,1217.04 1848.05,1217.04 1848.64,1217.04 1849.22,1217.04 1849.81,1217.04 1850.4,1217.04 1850.98,1217.04 1851.57,1217.04 1852.16,1217.04 1852.74,1217.04 1853.33,1217.04 1853.92,1217.04 1854.5,1217.04 1855.09,1217.04 1855.68,1217.04 1856.26,1217.04 1856.85,1217.04 1857.43,1217.04 1858.02,1217.04 1858.61,1217.04 1859.19,1217.04 1859.78,1217.04 1860.37,1217.04 1860.95,1217.04 1861.54,1217.04 1862.13,1217.04 1862.71,1217.04 1863.3,1217.04 1863.88,1217.04 1864.47,1217.04 1865.06,1217.04 1865.64,1217.04 1866.23,1217.04 1866.82,1217.04 1867.4,1217.04 1867.99,1217.04 1868.58,1217.04 1869.16,1217.04 1869.75,1217.04 1870.34,1217.04 1870.92,1217.04 1871.51,1217.04 1872.09,1217.04 1872.68,1217.04 1873.27,1217.04 1873.85,1217.04 1874.44,1217.04 1875.03,1217.04 1875.61,1217.04 1876.2,1217.04 1876.79,1217.04 1877.37,1217.04 1877.96,1217.04 1878.55,1217.04 1879.13,1217.04 1879.72,1217.04 1880.3,1217.04 1880.89,1217.04 1881.48,1217.04 1882.06,1217.04 1882.65,1217.04 1883.24,1217.04 1883.82,1217.04 1884.41,1217.04 1885,1217.04 1885.58,1217.04 1886.17,1217.04 1886.76,1217.04 1887.34,1217.04 1887.93,1217.04 1888.51,1217.04 1889.1,1217.04 1889.69,1217.04 1890.27,1217.04 1890.86,1217.04 1891.45,1217.04 1892.03,1217.04 1892.62,1217.04 1893.21,1217.04 1893.79,1217.04 1894.38,1217.04 1894.96,1217.04 1895.55,1217.04 1896.14,1217.04 1896.72,1217.04 1897.31,1217.04 1897.9,1217.04 1898.48,1217.04 1899.07,1217.04 1899.66,1217.04 1900.24,1217.04 1900.83,1217.04 1901.42,1217.04 1902,1217.04 1902.59,1217.04 1903.17,1217.04 1903.76,1217.04 1904.35,1217.04 1904.93,1217.04 1905.52,1217.04 1906.11,1217.04 1906.69,1217.04 1907.28,1217.04 1907.87,1217.04 1908.45,1217.04 1909.04,1217.04 1909.63,1217.04 1910.21,1217.04 1910.8,1217.04 1911.38,1217.04 1911.97,1217.04 1912.56,1217.04 1913.14,1217.04 1913.73,1217.04 1914.32,1217.04 1914.9,1217.04 1915.49,1217.04 1916.08,1217.04 1916.66,1217.04 1917.25,1217.04 1917.83,1217.04 1918.42,1217.04 1919.01,1217.04 1919.59,1217.04 1920.18,1217.04 1920.77,1217.04 1921.35,1217.04 1921.94,1217.04 1922.53,1217.04 1923.11,1217.04 1923.7,1217.04 1924.29,1217.04 1924.87,1217.04 1925.46,1217.04 1926.04,1217.04 1926.63,1217.04 1927.22,1217.04 1927.8,1217.04 1928.39,1217.04 1928.98,1217.04 1929.56,1217.04 1930.15,1217.04 1930.74,1217.04 1931.32,1217.04 1931.91,1217.04 1932.5,1217.04 1933.08,1217.04 1933.67,1217.04 1934.25,1217.04 1934.84,1217.04 1935.43,1217.04 1936.01,1217.04 1936.6,1217.04 1937.19,1217.04 1937.77,1217.04 1938.36,1217.04 1938.95,1217.04 1939.53,1217.04 1940.12,1217.04 1940.71,1217.04 1941.29,1217.04 1941.88,1217.04 1942.46,1217.04 1943.05,1217.04 1943.64,1217.04 1944.22,1217.04 1944.81,1217.04 1945.4,1217.04 1945.98,1217.04 1946.57,1217.04 1947.16,1217.04 1947.74,1217.04 1948.33,1217.04 1948.91,1217.04 1949.5,1217.04 1950.09,1217.04 1950.67,1217.04 1951.26,1217.04 1951.85,1217.04 1952.43,1217.04 1953.02,1217.04 1953.61,1217.04 1954.19,1217.04 1954.78,1217.04 1955.37,1217.04 1955.95,1217.04 1956.54,1217.04 1957.12,1217.04 1957.71,1217.04 1958.3,1217.04 1958.88,1217.04 1959.47,1217.04 1960.06,1217.04 1960.64,1217.04 1961.23,1217.04 1961.82,1217.04 1962.4,1217.04 1962.99,1217.04 1963.58,1217.04 1964.16,1217.04 1964.75,1217.04 1965.33,1217.04 1965.92,1217.04 1966.51,1217.04 1967.09,1217.04 1967.68,1217.04 1968.27,1217.04 1968.85,1217.04 1969.44,1217.04 1970.03,1217.04 1970.61,1217.04 1971.2,1217.04 1971.78,1217.04 1972.37,1217.04 1972.96,1217.04 1973.54,1217.04 1974.13,1217.04 1974.72,1217.04 1975.3,1217.04 1975.89,1217.04 1976.48,1217.04 1977.06,1217.04 1977.65,1217.04 1978.24,1217.04 1978.82,1217.04 1979.41,1217.04 1979.99,1217.04 1980.58,1217.04 1981.17,1217.04 1981.75,1217.04 1982.34,1217.04 1982.93,1217.04 1983.51,1217.04 1984.1,1217.04 1984.69,1217.04 1985.27,1217.04 1985.86,1217.04 1986.45,1217.04 1987.03,1217.04 1987.62,1217.04 1988.2,1217.04 1988.79,1217.04 1989.38,1217.04 1989.96,1217.04 1990.55,1217.04 1991.14,1217.04 1991.72,1217.04 1992.31,1217.04 1992.9,1217.04 1993.48,1217.04 1994.07,1217.04 1994.65,1217.04 1995.24,1217.04 1995.83,1217.04 1996.41,1217.04 1997,1217.04 1997.59,1217.04 1998.17,1217.04 1998.76,1217.04 1999.35,1217.04 1999.93,1217.04 2000.52,1217.04 2001.11,1217.04 2001.69,1217.04 2002.28,1217.04 2002.86,1217.04 2003.45,1217.04 2004.04,1217.04 2004.62,1217.04 2005.21,1217.04 2005.8,1217.04 2006.38,1217.04 2006.97,1217.04 2007.56,1217.04 2008.14,1217.04 2008.73,1217.04 2009.32,1217.04 2009.9,1217.04 2010.49,1217.04 2011.07,1217.04 2011.66,1217.04 2012.25,1217.04 2012.83,1217.04 2013.42,1217.04 2014.01,1217.04 2014.59,1217.04 2015.18,1217.04 2015.77,1217.04 2016.35,1217.04 2016.94,1217.04 2017.53,1217.04 2018.11,1217.04 2018.7,1217.04 2019.28,1217.04 2019.87,1217.04 2020.46,1217.04 2021.04,1217.04 2021.63,1217.04 2022.22,1217.04 2022.8,1217.04 2023.39,1217.04 2023.98,1217.04 2024.56,1217.04 2025.15,1217.04 2025.73,1217.04 2026.32,1217.04 2026.91,1217.04 2027.49,1217.04 2028.08,1217.04 2028.67,1217.04 2029.25,1217.04 2029.84,1217.04 2030.43,1217.04 2031.01,1217.04 2031.6,1217.04 2032.19,1217.04 2032.77,1217.04 2033.36,1217.04 2033.94,1217.04 2034.53,1217.04 2035.12,1217.04 2035.7,1217.04 2036.29,1217.04 2036.88,1217.04 2037.46,1217.04 2038.05,1217.04 2038.64,1217.04 2039.22,1217.04 2039.81,1217.04 2040.4,1217.04 2040.98,1217.04 2041.57,1217.04 2042.15,1217.04 2042.74,1217.04 2043.33,1217.04 2043.91,1217.04 2044.5,1217.04 2045.09,1217.04 2045.67,1217.04 2046.26,1217.04 2046.85,1217.04 2047.43,1217.04 2048.02,1217.04 2048.6,1217.04 2049.19,1217.04 2049.78,1217.04 2050.36,1217.04 2050.95,1217.04 2051.54,1217.04 2052.12,1217.04 2052.71,1217.04 2053.3,1217.04 2053.88,1217.04 2054.47,1217.04 2055.06,1217.04 2055.64,1217.04 2056.23,1217.04 2056.81,1217.04 2057.4,1217.04 2057.99,1217.04 2058.57,1217.04 2059.16,1217.04 2059.75,1217.04 2060.33,1217.04 2060.92,1217.04 2061.51,1217.04 2062.09,1217.04 2062.68,1217.04 2063.27,1217.04 2063.85,1217.04 2064.44,1217.04 2065.02,1217.04 2065.61,1217.04 2066.2,1217.04 2066.78,1217.04 2067.37,1217.04 2067.96,1217.04 2068.54,1217.04 2069.13,1217.04 2069.72,1217.04 2070.3,1217.04 2070.89,1217.04 2071.48,1217.04 2072.06,1217.04 2072.65,1217.04 2073.23,1217.04 2073.82,1217.04 2074.41,1217.04 2074.99,1217.04 2075.58,1217.04 2076.17,1217.04 2076.75,1217.04 2077.34,1217.04 2077.93,1217.04 2078.51,1217.04 2079.1,1217.04 2079.68,1217.04 2080.27,1217.04 2080.86,1217.04 2081.44,1217.04 2082.03,1217.04 2082.62,1217.04 2083.2,1217.04 2083.79,1217.04 2084.38,1217.04 2084.96,1217.04 2085.55,1217.04 2086.14,1217.04 2086.72,1217.04 2087.31,1217.04 2087.89,1217.04 2088.48,1217.04 2089.07,1217.04 2089.65,1217.04 2090.24,1217.04 2090.83,1217.04 2091.41,1217.04 2092,1217.04 2092.59,1217.04 2093.17,1217.04 2093.76,1217.04 2094.35,1217.04 2094.93,1217.04 2095.52,1217.04 2096.1,1217.04 2096.69,1217.04 2097.28,1217.04 2097.86,1217.04 2098.45,1217.04 2099.04,1217.04 2099.62,1217.04 2100.21,1217.04 2100.8,1217.04 2101.38,1217.04 2101.97,1217.04 2102.55,1217.04 2103.14,1217.04 2103.73,1217.04 2104.31,1217.04 2104.9,1217.04 2105.49,1217.04 2106.07,1217.04 2106.66,1217.04 2107.25,1217.04 2107.83,1217.04 2108.42,1217.04 2109.01,1217.04 2109.59,1217.04 2110.18,1217.04 2110.76,1217.04 2111.35,1217.04 2111.94,1217.04 2112.52,1217.04 2113.11,1217.04 2113.7,1217.04 2114.28,1217.04 2114.87,1217.04 2115.46,1217.04 2116.04,1217.04 2116.63,1217.04 2117.22,1217.04 2117.8,1217.04 2118.39,1217.04 2118.97,1217.04 2119.56,1217.04 2120.15,1217.04 2120.73,1217.04 2121.32,1217.04 2121.91,1217.04 2122.49,1217.04 2123.08,1217.04 2123.67,1217.04 2124.25,1217.04 2124.84,1217.04 2125.42,1217.04 2126.01,1217.04 2126.6,1217.04 2127.18,1217.04 2127.77,1217.04 2128.36,1217.04 2128.94,1217.04 2129.53,1217.04 2130.12,1217.04 2130.7,1217.04 2131.29,1217.04 2131.88,1217.04 2132.46,1217.04 2133.05,1217.04 2133.63,1217.04 2134.22,1217.04 2134.81,1217.04 2135.39,1217.04 2135.98,1217.04 2136.57,1217.04 2137.15,1217.04 2137.74,1217.04 2138.33,1217.04 2138.91,1217.04 2139.5,1217.04 2140.09,1217.04 2140.67,1217.04 2141.26,1217.04 2141.84,1217.04 2142.43,1217.04 2143.02,1217.04 2143.6,1217.04 2144.19,1217.04 2144.78,1217.04 2145.36,1217.04 2145.95,1217.04 2146.54,1217.04 2147.12,1217.04 2147.71,1217.04 2148.3,1217.04 2148.88,1217.04 2149.47,1217.04 2150.05,1217.04 2150.64,1217.04 2151.23,1217.04 2151.81,1217.04 2152.4,1217.04 2152.99,1217.04 2153.57,1217.04 2154.16,1217.04 2154.75,1217.04 2155.33,1217.04 2155.92,1217.04 2156.5,1217.04 2157.09,1217.04 2157.68,1217.04 2158.26,1217.04 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.33,1199.33 1398.3,899.083 \"/>\n<polyline clip-path=\"url(#clip472)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.2 985.439,1199.33 2158.26,1199.33 2158.26,1234.2 985.439,1234.2 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip470)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip473\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip470)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip470)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip470)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip473)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4858.97 163.792,-5826.01 164.351,-6732.45 164.91,-7562.22 165.469,-7163.98 166.029,-7943.24 166.588,-8633.31 167.147,-9256.8 167.706,-9818.03 168.266,-10305.2 168.825,-10754.6 169.384,-11153.1 169.943,-11503.9 170.503,-11810.2 171.062,-11396.1 171.621,-11037.3 172.18,-11310.9 172.74,-11537.6 173.299,-11225.1 173.858,-11415.7 174.417,-11574 174.977,-10478 175.536,-10599.4 176.095,-10700.9 176.655,-10451.3 177.214,-10510.6 177.773,-10559.2 178.332,-10589.3 178.892,-10587.1 179.451,-10329.5 180.01,-10313.3 180.569,-10273.3 181.129,-10019.3 181.688,-9761.46 182.247,-9675.76 182.806,-9405.74 183.366,-8983.42 183.925,-8892.74 184.484,-8789.61 185.043,-8408.78 185.603,-8054.2 186.162,-7951.33 186.721,-7729.08 187.28,-7510.85 187.84,-7409.66 188.399,-7107.18 188.958,-6905.84 189.517,-6800.56 190.077,-6606.29 190.636,-6499.35 191.195,-6392.13 191.754,-5974.76 192.314,-5731.6 192.873,-5569.58 193.432,-5409.84 193.991,-5243.09 194.551,-4972.51 195.11,-4891.36 195.669,-4686.18 196.228,-4606.15 196.788,-4419.05 197.347,-4187.22 197.906,-4066.89 198.465,-3753.72 199.025,-3601.89 199.584,-3496.17 200.143,-3439.59 200.702,-3332.52 201.262,-3229.65 201.821,-3127.26 202.38,-2982.97 202.939,-2885.29 203.499,-2752.1 204.058,-2620.98 204.617,-2533.94 205.176,-2412.96 205.736,-2323.59 206.295,-2275.09 206.854,-2221.06 207.413,-2137.35 207.973,-1989.17 208.532,-1939.32 209.091,-1888.6 209.65,-1840.15 210.21,-1701.5 210.769,-1647.12 211.328,-1513.05 211.887,-1439.89 212.447,-1334.56 213.006,-1234.32 213.565,-1190.61 214.124,-1150.19 214.684,-1078.18 215.243,-1035.86 215.802,-968.851 216.361,-902.099 216.921,-835.542 217.48,-625.929 218.039,-549.075 218.598,-518.931 219.158,-468.102 219.717,-417.34 220.276,-321.857 220.835,-297.791 221.395,-208.674 221.954,-168.143 222.513,-170.875 223.072,-86.5817 223.632,-69.5926 224.191,-28.6146 224.75,-12.9642 225.309,69.8148 225.869,86.193 226.428,102.029 226.987,139.541 227.546,150.28 228.106,202.713 228.665,277.761 229.224,289.239 229.783,322.069 230.343,370.935 230.902,420.389 231.461,470.258 232.02,515.038 232.58,557.546 233.139,560.188 233.698,618.669 234.257,694.273 234.817,690.507 235.376,725.443 235.935,740.039 236.494,758.121 237.054,751.667 237.613,768.149 238.172,729.296 238.731,768.476 239.291,766.063 239.85,784.007 240.409,801.34 240.968,795.231 241.528,792.017 242.087,811.233 242.646,789.23 243.205,788.628 243.765,787.855 244.324,860.236 244.883,859.636 245.442,894.235 246.002,889.022 246.561,885.923 247.12,915.852 247.679,932.813 248.239,942.133 248.798,955.059 249.357,947.385 249.916,977.681 250.476,954.3 251.035,948.086 251.594,940.436 252.153,955.213 252.713,972.692 253.272,982.687 253.831,955.976 254.39,967.258 254.95,980.651 255.509,1008.59 256.068,1035.76 256.627,1050.06 257.187,1026.73 257.746,1035.42 258.305,1045.55 258.864,1036.9 259.424,1032.14 259.983,1056.83 260.542,1083.04 261.101,1040.49 261.661,1000.21 262.22,1029.44 262.779,1037.32 263.338,1045.91 263.898,1072.08 264.457,1046.46 265.016,1038.71 265.575,1031.71 266.135,1027.62 266.694,1023.09 267.253,1033.76 267.812,1062.14 268.372,1039.35 268.931,1028.25 269.49,1025.09 270.049,983.416 270.609,980.513 271.168,1012.9 271.727,1008.5 272.286,1023.42 272.846,1016.87 273.405,1013.72 273.964,1023.52 274.523,1019.8 275.083,1013.1 275.642,1042.03 276.201,1035.7 276.76,1026.67 277.32,1019.83 277.879,997.897 278.438,995.238 278.997,1057.24 279.557,1034.68 280.116,1059.94 280.675,1069.89 281.234,1075.8 281.794,1083.36 282.353,1089.36 282.912,1098.55 283.471,1072.72 284.031,1063.76 284.59,1072.12 285.149,1096.76 285.708,1085.93 286.268,1096.18 286.827,1103.63 287.386,1093.41 287.945,1071.22 288.505,1093.07 289.064,1084.16 289.623,1091.37 290.182,1063.78 290.742,1073.42 291.301,1067.35 291.86,1090.24 292.419,1084.93 292.979,1077.88 293.538,1084.54 294.097,1078.39 294.656,1035.15 295.216,1008.67 295.775,1036.93 296.334,1048.11 296.893,1054.96 297.453,1063.91 298.012,1054.58 298.571,1015.32 299.13,1010.79 299.69,1007.16 300.249,1005.78 300.808,936.933 301.368,953.207 301.927,948.827 302.486,928.297 303.045,923.771 303.605,907.052 304.164,920.521 304.723,933.483 305.282,932.264 305.842,945.495 306.401,943.708 306.96,927.38 307.519,927.335 308.079,928.393 308.638,929.462 309.197,946.237 309.756,956.065 310.316,951.354 310.875,918.31 311.434,948.801 311.993,965.304 312.553,926.397 313.112,1005.62 313.671,962.663 314.23,975.066 314.79,1003.67 315.349,1014.36 315.908,1020.11 316.467,1014.1 317.027,1022.73 317.586,1013.2 318.145,1037.7 318.704,1078.7 319.264,1039.02 319.823,1031.02 320.382,1006.21 320.941,1000.56 321.501,1057.47 322.06,1045.33 322.619,1036.8 323.178,1046.98 323.738,1036.23 324.297,1058.18 324.856,1049.72 325.415,1042.11 325.975,1015.37 326.534,1021.5 327.093,998.661 327.652,971.017 328.212,982.865 328.771,979.023 329.33,961.939 329.889,923.698 330.449,922.842 331.008,932.413 331.567,961.356 332.126,954.374 332.686,932.619 333.245,929.784 333.804,940.128 334.363,916.143 334.923,912.941 335.482,942.812 336.041,924.212 336.6,922.04 337.16,935.681 337.719,914.443 338.278,942.478 338.837,921.684 339.397,936.151 339.956,949.036 340.515,910.651 341.074,891.349 341.634,890.605 342.193,887.04 342.752,882.248 343.311,897.583 343.871,910.395 344.43,905.357 344.989,919.508 345.548,899.833 346.108,942.726 346.667,926.013 347.226,922.741 347.785,900.997 348.345,884.641 348.904,881.773 349.463,847.111 350.022,847.528 350.582,861.996 351.141,876.464 351.7,903.493 352.259,952.866 352.819,961.487 353.378,939.288 353.937,950.443 354.496,946.396 355.056,940.224 355.615,919.258 356.174,931.426 356.733,941.462 357.293,933.517 357.852,898.895 358.411,862.012 358.97,865.587 359.53,864.933 360.089,840.382 360.648,887.267 361.207,902.415 361.767,847.287 362.326,860.456 362.885,860.303 363.444,839.449 364.004,825.963 364.563,828.163 365.122,825.987 365.681,838.696 366.241,820.153 366.8,818.522 367.359,782.9 367.918,813.542 368.478,818.239 369.037,815.281 369.596,817.599 370.155,813.423 370.715,815.219 371.274,797.266 371.833,802.459 372.392,785.274 372.952,801.666 373.511,820.858 374.07,809.367 374.629,811.066 375.189,813.141 375.748,812.945 376.307,807.505 376.866,820.692 377.426,819.371 377.985,817.877 378.544,799.979 379.103,820.005 379.663,817.964 380.222,818.014 380.781,820.382 381.34,787.543 381.9,774.602 382.459,795.858 383.018,811.606 383.577,825.187 384.137,838.831 384.696,884.327 385.255,861.928 385.814,872.904 386.374,883.796 386.933,893.573 387.492,890.298 388.051,866.522 388.611,844.082 389.17,845.03 389.729,890.254 390.288,948.933 390.848,939.43 391.407,930.748 391.966,902.872 392.525,876.383 393.085,869.564 393.644,867.519 394.203,898.86 394.762,893.207 395.322,867.205 395.881,894.817 396.44,888.99 396.999,886.282 397.559,880.198 398.118,909.252 398.677,920.577 399.236,916.347 399.796,893.517 400.355,889.108 400.914,915.078 401.473,892.32 402.033,872.593 402.592,853.21 403.151,865.52 403.71,874.617 404.27,884.585 404.829,864.156 405.388,858.887 405.947,904.193 406.507,895.069 407.066,891.074 407.625,856.321 408.184,883.652 408.744,863.631 409.303,892.619 409.862,922.117 410.421,912.971 410.981,890.234 411.54,886.083 412.099,913.521 412.658,906.384 413.218,901.725 413.777,914.922 414.336,921.159 414.895,880.815 415.455,858.663 416.014,836.519 416.573,849.201 417.132,845.059 417.692,873.299 418.251,818.13 418.81,831.105 419.369,839.152 419.929,817.662 420.488,862.872 421.047,841.11 421.606,834.614 422.166,783.239 422.725,763.321 423.284,760.31 423.843,777.414 424.403,795.25 424.962,743.619 425.521,775.29 426.08,756.552 426.64,806.226 427.199,824.268 427.758,835.812 428.318,798.227 428.877,812.535 429.436,824.14 429.995,802.266 430.555,813.245 431.114,798.339 431.673,794.667 432.232,795.484 432.792,792.589 433.351,787.413 433.91,785.047 434.469,785.118 435.029,800.768 435.588,784.256 436.147,798.894 436.706,781.782 437.266,810.76 437.825,841.145 438.384,820.953 438.943,831.009 439.503,822.017 440.062,788.279 440.621,766.615 441.18,768.182 441.74,750.991 442.299,770.261 442.858,752.053 443.417,752.305 443.977,736.805 444.536,735.368 445.095,770.962 445.654,754.369 446.214,773.631 446.773,805.952 447.332,785.267 447.891,781.739 448.451,777.787 449.01,758.084 449.569,771.25 450.128,802.703 450.688,799.877 451.247,812.468 451.806,825.357 452.365,808.291 452.925,805.376 453.484,834.417 454.043,865.046 454.602,858.413 455.162,820.553 455.721,799.938 456.28,814.075 456.839,760.43 457.399,759.152 457.958,743.498 458.517,759.349 459.076,773.711 459.636,759.48 460.195,760.271 460.754,807.762 461.313,821.764 461.873,819.349 462.432,783.549 462.991,747.515 463.55,762.629 464.11,745.539 464.669,745.88 465.228,764.563 465.787,779.771 466.347,777.912 466.906,788.397 467.465,785.832 468.024,800.052 468.584,816.787 469.143,832.449 469.702,796.687 470.261,810.474 470.821,774.081 471.38,720.727 471.939,720.276 472.498,686.565 473.058,689.536 473.617,722.555 474.176,737.259 474.735,771.762 475.295,758.536 475.854,775.275 476.413,741.041 476.972,739.847 477.532,721.432 478.091,707.356 478.65,692.587 479.209,678.207 479.769,680.412 480.328,667.468 480.887,719.651 481.446,708.155 482.006,724.219 482.565,744.319 483.124,743.477 483.683,727.411 484.243,773.641 484.802,805.903 485.361,819.787 485.92,815.309 486.48,777.776 487.039,775.623 487.598,773.954 488.157,771.495 488.717,796.826 489.276,760.804 489.835,742.212 490.394,726.795 490.954,693.849 491.513,697.174 492.072,700.309 492.631,701.14 493.191,700.835 493.75,700.67 494.309,734.965 494.868,732.981 495.428,733.725 495.987,718.128 496.546,731.289 497.105,763.541 497.665,743.682 498.224,711.574 498.783,726.293 499.342,759.172 499.902,725.512 500.461,744.269 501.02,744.603 501.579,727.592 502.139,712.857 502.698,698.636 503.257,685.801 503.816,705.235 504.376,672.287 504.935,693.321 505.494,713.41 506.053,711.833 506.613,713.159 507.172,745.844 507.731,763.012 508.29,774.105 508.85,770.771 509.409,780.992 509.968,762.699 510.527,744.645 511.087,743.241 511.646,742.623 512.205,744.742 512.764,760.881 513.324,758.252 513.883,742.989 514.442,711.057 515.001,710.675 515.561,696.039 516.12,695.872 516.679,715.936 517.238,716.644 517.798,686.294 518.357,691.783 518.916,741.041 519.475,724.818 520.035,773.752 520.594,803.127 521.153,798.116 521.712,809.872 522.272,788.943 522.831,838.024 523.39,816.441 523.949,763.455 524.509,776.169 525.068,709.266 525.627,710.287 526.186,725.537 526.746,723.201 527.305,690.431 527.864,706.416 528.423,691.325 528.983,675.966 529.542,694.547 530.101,695.791 530.66,682.602 531.22,704.604 531.779,741.694 532.338,758.832 532.897,791.234 533.457,754.422 534.016,755.281 534.575,738.867 535.134,754.384 535.694,750.338 536.253,746.503 536.812,759.168 537.371,788.675 537.931,785.203 538.49,781.976 539.049,811.404 539.608,804.916 540.168,833.611 540.727,843.276 541.286,836.151 541.845,781.049 542.405,766.108 542.964,749.546 543.523,766.774 544.082,777.931 544.642,760.155 545.201,776.183 545.76,772.895 546.319,768.898 546.879,749.611 547.438,777.665 547.997,758.059 548.556,786.787 549.116,767.389 549.675,762.993 550.234,777.596 550.793,743.443 551.353,740.531 551.912,723.137 552.471,720.783 553.031,734.882 553.59,718.38 554.149,684.964 554.708,654.211 555.268,656.75 555.827,646.042 556.386,618.769 556.945,624.661 557.505,615.754 558.064,654.527 558.623,641.613 559.182,613.614 559.742,603.31 560.301,612.148 560.86,631.806 561.419,619.234 561.979,642.987 562.538,681.206 563.097,699.121 563.656,717.476 564.216,716.08 564.775,715.776 565.334,745.703 565.893,729.781 566.453,714.823 567.012,730.178 567.571,710.563 568.13,712.321 568.69,748.964 569.249,781.595 569.808,793.608 570.367,801.671 570.927,797.74 571.486,775.435 572.045,804.721 572.604,833.473 573.164,855.711 573.723,883.117 574.282,854.092 574.841,862.921 575.401,871.856 575.96,863.337 576.519,821.12 577.078,833.882 577.638,812.672 578.197,824.346 578.756,834.937 579.315,831.928 579.875,804.623 580.434,764.804 580.993,729.234 581.552,762.144 582.112,758.802 582.671,736.906 583.23,701.707 583.789,655.628 584.349,656.882 584.908,656.283 585.467,624.93 586.026,646.952 586.586,667.419 587.145,685.899 587.704,669.604 588.263,670.251 588.823,686.842 589.382,704.33 589.941,674.656 590.5,624.375 591.06,599.221 591.619,591.322 592.178,610.711 592.737,615.533 593.297,623.298 593.856,611.763 594.415,618.579 594.974,591.983 595.534,599.303 596.093,573.556 596.652,579.911 597.211,602.67 597.771,643.66 598.33,663.238 598.889,669.306 599.448,673.66 600.008,678.513 600.567,677.223 601.126,696.871 601.685,649.994 602.245,670.524 602.804,708.3 603.363,705.609 603.922,702.463 604.482,718.253 605.041,732.326 605.6,716.39 606.159,716.165 606.719,697.203 607.278,698.806 607.837,700.061 608.396,684.912 608.956,734.237 609.515,747.927 610.074,760.488 610.633,739.838 611.193,737.744 611.752,701.884 612.311,686.317 612.87,702.497 613.43,690.655 613.989,692.574 614.548,723.83 615.107,740.114 615.667,740.738 616.226,771.886 616.785,799.637 617.344,781.198 617.904,778.135 618.463,789.798 619.022,788.33 619.581,786.13 620.141,801.159 620.7,745.744 621.259,743.441 621.818,743.48 622.378,759.96 622.937,792.803 623.496,800.78 624.055,813.671 624.615,793.228 625.174,791.521 625.733,804.08 626.292,800.492 626.852,828.216 627.411,803.84 627.97,765.072 628.529,777.049 629.089,788.62 629.648,782.963 630.207,776.042 630.766,754.682 631.326,718.126 631.885,731.614 632.444,745.919 633.003,729.404 633.563,678.203 634.122,710.554 634.681,724.734 635.24,689.669 635.8,673.188 636.359,660.255 636.918,644.025 637.477,649.754 638.037,634.661 638.596,638.924 639.155,645.062 639.714,649.895 640.274,667.63 640.833,671.281 641.392,659.825 641.951,646.614 642.511,683.274 643.07,667.826 643.629,669.086 644.188,639.217 644.748,641.348 645.307,611.602 645.866,632.804 646.425,622.004 646.985,625.91 647.544,612.21 648.103,616.2 648.662,606.674 649.222,629.896 649.781,630.216 650.34,638.522 650.899,624.565 651.459,659.615 652.018,614.608 652.577,604.132 653.136,610.051 653.696,618.659 654.255,639.641 654.814,656.962 655.373,640.67 655.933,627.699 656.492,646.729 657.051,650.56 657.61,652.87 658.17,640.486 658.729,660.318 659.288,694.636 659.847,711.323 660.407,692.872 660.966,704.151 661.525,718.723 662.084,717.797 662.644,700.799 663.203,700.445 663.762,682.971 664.321,650.349 664.881,671.128 665.44,673.893 665.999,676.835 666.558,660.959 667.118,681.97 667.677,664.194 668.236,667.909 668.795,618.544 669.355,609.555 669.914,597.286 670.473,568.184 671.032,571.854 671.592,614.949 672.151,600.755 672.71,605.963 673.269,615.838 673.829,620.816 674.388,642.557 674.947,581.172 675.506,602.964 676.066,624.485 676.625,676.241 677.184,710.633 677.743,744.649 678.303,762.619 678.862,761.345 679.421,763.206 679.981,725.723 680.54,709.249 681.099,709.05 681.658,706.335 682.218,709.494 682.777,729.983 683.336,740.799 683.895,752.605 684.455,716.167 685.014,682.84 685.573,684.569 686.132,701.6 686.692,702.268 687.251,721.057 687.81,703.699 688.369,684.635 688.929,683.184 689.488,717.062 690.047,732.275 690.606,709.774 691.166,726.971 691.725,721.908 692.284,720.3 692.843,735.342 693.403,730.953 693.962,726.831 694.521,725.03 695.08,737.639 695.64,736.86 696.199,719.854 696.758,717.305 697.317,697.887 697.877,677.562 698.436,694.694 698.995,707.69 699.554,724.001 700.114,723.209 700.673,735.544 701.232,716.624 701.791,734.774 702.351,765.43 702.91,728.378 703.469,724.51 704.028,708.339 704.588,672.724 705.147,660.814 705.706,667.458 706.265,685.761 706.825,652.969 707.384,675.113 707.943,728.426 708.502,709.966 709.062,689.88 709.621,684.17 710.18,721.031 710.739,700.56 711.299,715.176 711.858,696.917 712.417,699.981 712.976,684.27 713.536,667.807 714.095,653.851 714.654,674.288 715.213,694.255 715.773,711.469 716.332,745.355 716.891,759.141 717.45,739.78 718.01,737.103 718.569,735.315 719.128,745.161 719.687,741.453 720.247,737.619 720.806,737.086 721.365,719.987 721.924,735.155 722.484,734.185 723.043,746.835 723.602,796.352 724.161,806.905 724.721,831.603 725.28,826.512 725.839,862.601 726.398,841.28 726.958,834.338 727.517,798.661 728.076,787.914 728.635,732.302 729.195,730.779 729.754,708.331 730.313,721.589 730.872,684.56 731.432,748.917 731.991,715.815 732.55,695.945 733.109,696.057 733.669,711.789 734.228,691.758 734.787,691.943 735.346,658.56 735.906,692.652 736.465,659.017 737.024,707.857 737.583,737.725 738.143,750.269 738.702,748.711 739.261,728.405 739.82,726.321 740.38,740.931 740.939,738.938 741.498,705.118 742.057,718.567 742.617,701.378 743.176,684.534 743.735,683.092 744.294,666.747 744.854,651.414 745.413,668.379 745.972,684.882 746.531,666.339 747.091,667.927 747.65,687.055 748.209,671.685 748.768,705.173 749.328,718.945 749.887,687.085 750.446,685.49 751.005,655.942 751.565,655.158 752.124,627.273 752.683,647.876 753.242,665.875 753.802,666.235 754.361,636.607 754.92,658.763 755.479,663.577 756.039,712.903 756.598,741.986 757.157,724.178 757.716,691.387 758.276,675.413 758.835,691.791 759.394,660.371 759.953,662.045 760.513,698.522 761.072,682.401 761.631,685.329 762.19,668.314 762.75,652.466 763.309,683.574 763.868,686.873 764.427,690.002 764.987,692.311 765.546,694 766.105,692.272 766.664,693.768 767.224,693.257 767.783,692.186 768.342,660.71 768.901,725.297 769.461,723.801 770.02,739.964 770.579,708.993 771.138,710.096 771.698,694.651 772.257,646.583 772.816,616.579 773.375,604.511 773.935,609.974 774.494,633.977 775.053,602.276 775.612,607.835 776.172,631.46 776.731,650.028 777.29,651.112 777.849,657.113 778.409,657.828 778.968,641.791 779.527,660.863 780.086,647.206 780.646,645.61 781.205,636.204 781.764,639.844 782.323,646.658 782.883,651.704 783.442,671.382 784.001,670.662 784.56,659.026 785.12,644.14 785.679,616.311 786.238,651.569 786.797,637.566 787.357,626.767 787.916,626.527 788.475,612.233 789.034,599.316 789.594,606.929 790.153,644.993 790.712,632.729 791.271,638.662 791.831,643.855 792.39,646.805 792.949,643.722 793.508,644.935 794.068,636.284 794.627,655.004 795.186,655.422 795.745,657.718 796.305,660.493 796.864,657.8 797.423,677.695 797.982,713.027 798.542,727.365 799.101,729.29 799.66,728.345 800.219,728.472 800.779,791.163 801.338,789.499 801.897,767.452 802.456,813.054 803.016,776.225 803.575,803.38 804.134,780.272 804.693,760.602 805.253,760.502 805.812,744.47 806.371,755.455 806.931,769.471 807.49,748.25 808.049,745.441 808.608,729.484 809.168,743.001 809.727,739.227 810.286,668.671 810.845,651.484 811.405,620.201 811.964,621.874 812.523,642.049 813.082,632.123 813.642,635.129 814.201,669.478 814.76,668.409 815.319,668.802 815.879,640.292 816.438,642.583 816.997,647.273 817.556,647.391 818.116,650.656 818.675,634.094 819.234,639.723 819.793,640.397 820.353,659.704 820.912,690.429 821.471,705.373 822.03,721.908 822.59,752.088 823.149,746.985 823.708,762.032 824.267,738.435 824.827,736.036 825.386,732.92 825.945,745.969 826.504,745.353 827.064,755.544 827.623,750.388 828.182,748.046 828.741,778.448 829.301,820.909 829.86,796.079 830.419,773.578 830.978,799.437 831.538,793.806 832.097,790.493 832.656,831.947 833.215,842.044 833.775,820.51 834.334,809.107 834.893,835.602 835.452,826.645 836.012,818.816 836.571,811.626 837.13,827.187 837.689,755.044 838.249,801.436 838.808,762.408 839.367,740.633 839.926,719.341 840.486,750.335 841.045,681.486 841.604,677.933 842.163,694.156 842.723,676.532 843.282,690.934 843.841,689.403 844.4,674.757 844.96,691.451 845.519,692.58 846.078,723.067 846.637,722.11 847.197,748.819 847.756,760.128 848.315,705.168 848.874,740.308 849.434,705.279 849.993,719.167 850.552,748.235 851.111,729.789 851.671,724.718 852.23,771.22 852.789,781.666 853.348,810.458 853.908,789.911 854.467,772.634 855.026,735.279 855.585,716.856 856.145,717.248 856.704,714.301 857.263,695.545 857.822,677.063 858.382,659.794 858.941,663.286 859.5,692.483 860.059,675.774 860.619,645.235 861.178,648.288 861.737,648.117 862.296,633.925 862.856,605.766 863.415,596.3 863.974,585.008 864.533,557.628 865.093,549.594 865.652,557.962 866.211,581.173 866.77,621.208 867.33,624.484 867.889,643.166 868.448,649.059 869.007,635.278 869.567,625.284 870.126,630.793 870.685,585.705 871.244,607.578 871.804,592.199 872.363,597.856 872.922,568.545 873.481,554.899 874.041,560.025 874.6,583.626 875.159,604.8 875.718,607.989 876.278,610.24 876.837,646.224 877.396,682.273 877.955,683.961 878.515,673.271 879.074,676.062 879.633,661.958 880.192,632.547 880.752,602.781 881.311,626.098 881.87,609.843 882.429,626.258 882.989,647.739 883.548,666.138 884.107,667.294 884.666,699.876 885.226,682.903 885.785,686.242 886.344,706.485 886.903,722.326 887.463,701.57 888.022,689.109 888.581,703.319 889.14,654.876 889.7,656.232 890.259,671.096 890.818,690.555 891.377,704.973 891.937,690.045 892.496,710.964 893.055,694.621 893.614,697.708 894.174,732.109 894.733,714.626 895.292,698.719 895.851,680.87 896.411,685.086 896.97,669.692 897.529,657.144 898.088,694.85 898.648,695.061 899.207,706.141 899.766,738.539 900.325,719.977 900.885,721.605 901.444,704.716 902.003,708.743 902.562,706.141 903.122,685.951 903.681,719.516 904.24,686.555 904.799,671.549 905.359,687.2 905.918,654.54 906.477,691.044 907.036,709.085 907.596,708.058 908.155,723.992 908.714,721.469 909.273,702.648 909.833,704.481 910.392,738.518 910.951,734.892 911.51,716.516 912.07,734.1 912.629,716.644 913.188,715.501 913.747,695.551 914.307,677.195 914.866,673.201 915.425,674.369 915.984,693.668 916.544,707.729 917.103,723.452 917.662,739.491 918.221,732.356 918.781,698.787 919.34,650.307 919.899,650.384 920.458,654.722 921.018,655.467 921.577,657.486 922.136,628.338 922.695,598.647 923.255,635.96 923.814,636.203 924.373,620.302 924.932,611.416 925.492,647.768 926.051,630.371 926.61,599.105 927.169,586.016 927.729,620.782 928.288,605.313 928.847,630.75 929.406,633.173 929.966,618.073 930.525,669.289 931.084,673.987 931.644,676.935 932.203,692.764 932.762,689.065 933.321,722.036 933.881,736.386 934.44,749.202 934.999,745.234 935.558,787.637 936.118,751.266 936.677,747.643 937.236,713.617 937.795,729.951 938.355,764.153 938.914,774.572 939.473,755.09 940.032,753.487 940.592,750.812 941.151,762.887 941.71,775.033 942.269,754.291 942.829,732.955 943.388,716.61 943.947,728.825 944.506,728.242 945.066,742.349 945.625,707.37 946.184,707.61 946.743,705.588 947.303,737.669 947.862,716.074 948.421,697.673 948.98,712.634 949.54,696.62 950.099,677.164 950.658,675.951 951.217,690.784 951.777,677.272 952.336,660.971 952.895,692.795 953.454,725.351 954.014,756.104 954.573,769.724 955.132,765.889 955.691,762.377 956.251,756.861 956.81,721.424 957.369,720.808 957.928,703.456 958.488,714.806 959.047,713.447 959.606,676.62 960.165,693.745 960.725,658.913 961.284,661.832 961.843,694.449 962.402,711.93 962.962,694.493 963.521,710.785 964.08,743.376 964.639,723.605 965.199,722.772 965.758,669.497 966.317,652.079 966.876,668.597 967.436,685.394 967.995,667.132 968.554,682.828 969.113,683.657 969.673,681.696 970.232,616.715 970.791,651.558 971.35,650.718 971.91,666.323 972.469,652.448 973.028,641.26 973.587,673.892 974.147,689.904 974.706,654.227 975.265,686.629 975.824,672.409 976.384,723.639 976.943,670.936 977.502,690.26 978.061,689.418 978.621,689.009 979.18,672.317 979.739,654.431 980.298,641.426 980.858,616.384 981.417,632.364 981.976,652.13 982.535,635.705 983.095,653.782 983.654,640.164 984.213,661.993 984.772,647.552 985.332,695.573 985.891,662.815 986.45,679.332 987.009,697.369 987.569,680.434 988.128,646.734 988.687,664.46 989.246,633.112 989.806,633.802 990.365,652.601 990.924,668.719 991.483,688.536 992.043,689.512 992.602,675.425 993.161,660.39 993.72,674.885 994.28,629.487 994.839,617.848 995.398,651.947 995.957,671.556 996.517,701.666 997.076,667.773 997.635,668.258 998.194,654.844 998.754,657.037 999.313,658.098 999.872,656.596 1000.43,675.778 1000.99,674.018 1001.55,660.352 1002.11,675.795 1002.67,645.572 1003.23,635.75 1003.79,652.444 1004.35,687.279 1004.91,700.487 1005.46,717.416 1006.02,730.354 1006.58,712.479 1007.14,679.009 1007.7,678.94 1008.26,660.74 1008.82,679.813 1009.38,714.886 1009.94,728.818 1010.5,725.861 1011.06,689.069 1011.62,672.243 1012.18,688.712 1012.73,672.981 1013.29,739.276 1013.85,733.188 1014.41,713.59 1014.97,726.992 1015.53,738.342 1016.09,704.723 1016.65,702.412 1017.21,681.967 1017.77,696.419 1018.33,677.519 1018.89,662.406 1019.45,666.074 1020.01,650.667 1020.56,649.885 1021.12,634.844 1021.68,669.334 1022.24,670.908 1022.8,686.428 1023.36,669.285 1023.92,670.761 1024.48,673.128 1025.04,673.676 1025.6,685.957 1026.16,667.568 1026.72,686.948 1027.28,652.876 1027.83,655.752 1028.39,671.798 1028.95,702.875 1029.51,686.645 1030.07,673.146 1030.63,641.433 1031.19,630.811 1031.75,633.655 1032.31,635.816 1032.87,654.437 1033.43,623.482 1033.99,624.092 1034.55,629.71 1035.1,614.727 1035.66,619.91 1036.22,622.101 1036.78,627.252 1037.34,630.384 1037.9,637.542 1038.46,610 1039.02,630.897 1039.58,634.586 1040.14,651.914 1040.7,616.883 1041.26,669.991 1041.82,639.891 1042.38,645.52 1042.93,679.31 1043.49,682.37 1044.05,700.577 1044.61,703.182 1045.17,674.907 1045.73,675.89 1046.29,710.883 1046.85,708.781 1047.41,708.822 1047.97,754.623 1048.53,719.793 1049.09,687.371 1049.65,688.892 1050.2,676.84 1050.76,722.619 1051.32,753.49 1051.88,732.271 1052.44,699.547 1053,734.198 1053.56,748.48 1054.12,762.479 1054.68,726.527 1055.24,753.969 1055.8,767.313 1056.36,778.101 1056.92,772.73 1057.48,786.219 1058.03,765.961 1058.59,778.573 1059.15,757.178 1059.71,740.292 1060.27,753.071 1060.83,748.642 1061.39,713.636 1061.95,744.426 1062.51,724.924 1063.07,708.631 1063.63,738.878 1064.19,740.658 1064.75,737.644 1065.3,752.22 1065.86,780.709 1066.42,773.946 1066.98,768.358 1067.54,795.603 1068.1,839.959 1068.66,829.368 1069.22,819.461 1069.78,811.42 1070.34,822.6 1070.9,797.379 1071.46,805.305 1072.02,809.879 1072.57,788.999 1073.13,797.96 1073.69,795.965 1074.25,805.403 1074.81,719.938 1075.37,702.115 1075.93,671.942 1076.49,657.519 1077.05,594.055 1077.61,579.947 1078.17,602.182 1078.73,590.256 1079.29,627.894 1079.85,662.759 1080.4,711.164 1080.96,727.881 1081.52,692.213 1082.08,694.217 1082.64,690.781 1083.2,705.201 1083.76,737.349 1084.32,735.386 1084.88,749.152 1085.44,746.292 1086,743.169 1086.56,719.981 1087.12,737.266 1087.67,735.033 1088.23,735.29 1088.79,718.106 1089.35,732.983 1089.91,713.089 1090.47,690.603 1091.03,685.889 1091.59,655.05 1092.15,673.077 1092.71,673.528 1093.27,673.51 1093.83,637.047 1094.39,625.169 1094.94,646.174 1095.5,631.473 1096.06,635.259 1096.62,656.937 1097.18,640.585 1097.74,640.991 1098.3,660.759 1098.86,676.602 1099.42,673.242 1099.98,690.809 1100.54,739.129 1101.1,734.188 1101.66,682.348 1102.22,649.209 1102.77,665.893 1103.33,650.648 1103.89,653.01 1104.45,635.985 1105.01,639.1 1105.57,626.028 1106.13,596.931 1106.69,584.09 1107.25,573.679 1107.81,597.015 1108.37,603.386 1108.93,611.407 1109.49,595.184 1110.04,614.941 1110.6,664.648 1111.16,685.254 1111.72,670.088 1112.28,676.53 1112.84,660.58 1113.4,662.79 1113.96,647.931 1114.52,662.384 1115.08,681.54 1115.64,696.644 1116.2,648.986 1116.76,649.974 1117.31,699.432 1117.87,667.973 1118.43,704.553 1118.99,719.745 1119.55,702.345 1120.11,715.939 1120.67,699.558 1121.23,682.96 1121.79,699.807 1122.35,710.3 1122.91,708.9 1123.47,690.136 1124.03,670.849 1124.59,671.876 1125.14,638.838 1125.7,656.356 1126.26,656.79 1126.82,675.914 1127.38,644.69 1127.94,644.33 1128.5,645.231 1129.06,646.346 1129.62,666.175 1130.18,664.157 1130.74,632.859 1131.3,622.117 1131.86,640.845 1132.41,658.98 1132.97,676.676 1133.53,693.535 1134.09,694.634 1134.65,692.708 1135.21,756.915 1135.77,739.446 1136.33,721.87 1136.89,689.43 1137.45,688.616 1138.01,669.117 1138.57,649.504 1139.13,682.288 1139.68,667.141 1140.24,671.564 1140.8,671.656 1141.36,704.312 1141.92,704.841 1142.48,701.996 1143.04,716.497 1143.6,713.917 1144.16,761.676 1144.72,693.358 1145.28,687.685 1145.84,701.088 1146.4,718.462 1146.96,670.064 1147.51,650.524 1148.07,619.547 1148.63,624.545 1149.19,675.19 1149.75,661.959 1150.31,632.553 1150.87,635.439 1151.43,654.562 1151.99,655.808 1152.55,625.255 1153.11,611.689 1153.67,615.918 1154.23,617.395 1154.78,606.886 1155.34,645.123 1155.9,648.994 1156.46,665.132 1157.02,683.897 1157.58,696.796 1158.14,692.147 1158.7,692.297 1159.26,696.13 1159.82,676.9 1160.38,678.473 1160.94,691.727 1161.5,701.772 1162.05,721.318 1162.61,719.69 1163.17,734.45 1163.73,731.479 1164.29,726.987 1164.85,772.982 1165.41,788.082 1165.97,797.731 1166.53,793.58 1167.09,787.34 1167.65,765.727 1168.21,713.361 1168.77,729.01 1169.33,746.775 1169.88,746.63 1170.44,758.523 1171,771.148 1171.56,767.124 1172.12,763.03 1172.68,744.841 1173.24,741.394 1173.8,736.42 1174.36,702.845 1174.92,689.333 1175.48,689.729 1176.04,734.034 1176.6,728.095 1177.15,725.252 1177.71,740.652 1178.27,740.232 1178.83,753.079 1179.39,766.947 1179.95,762.031 1180.51,741.516 1181.07,737.265 1181.63,718.019 1182.19,682.99 1182.75,651.295 1183.31,652.829 1183.87,654.907 1184.43,657.245 1184.98,641.82 1185.54,629.374 1186.1,618.175 1186.66,638.354 1187.22,638.328 1187.78,639.646 1188.34,628.601 1188.9,664.13 1189.46,677.974 1190.02,676.383 1190.58,690.845 1191.14,643.029 1191.7,615.014 1192.25,582.838 1192.81,621.522 1193.37,604.707 1193.93,606.27 1194.49,610.808 1195.05,628.261 1195.61,617.258 1196.17,653.294 1196.73,624.505 1197.29,665.974 1197.85,666.132 1198.41,654.087 1198.97,656.494 1199.52,629.875 1200.08,648.426 1200.64,637.251 1201.2,689.709 1201.76,674.213 1202.32,659.823 1202.88,661.9 1203.44,645.954 1204,697.034 1204.56,676.799 1205.12,646.567 1205.68,648.717 1206.24,632.767 1206.8,637.362 1207.35,621.606 1207.91,640.589 1208.47,640.096 1209.03,642.901 1209.59,646.388 1210.15,661.817 1210.71,694.005 1211.27,659.106 1211.83,660.782 1212.39,697.026 1212.95,727.679 1213.51,727.668 1214.07,710.646 1214.62,721.192 1215.18,721.522 1215.74,715.318 1216.3,717.455 1216.86,714.968 1217.42,712.743 1217.98,711.462 1218.54,677.264 1219.1,659.993 1219.66,660.079 1220.22,675.914 1220.78,726.817 1221.34,708.447 1221.89,708.495 1222.45,676.387 1223.01,677.287 1223.57,674.887 1224.13,678.691 1224.69,665.566 1225.25,647.351 1225.81,618.969 1226.37,618.682 1226.93,603.931 1227.49,593.038 1228.05,629.079 1228.61,648.699 1229.17,650.787 1229.72,652.781 1230.28,653.956 1230.84,643.134 1231.4,630.891 1231.96,646.765 1232.52,665.796 1233.08,631.528 1233.64,635.885 1234.2,673.392 1234.76,691.143 1235.32,707.649 1235.88,695.633 1236.44,694.831 1236.99,677.464 1237.55,690.775 1238.11,628.734 1238.67,646.913 1239.23,648.409 1239.79,652.596 1240.35,637.457 1240.91,607.185 1241.47,630.182 1242.03,630.643 1242.59,613.566 1243.15,651.21 1243.71,654.572 1244.26,656.145 1244.82,671.405 1245.38,686.928 1245.94,655.439 1246.5,679.704 1247.06,743.652 1247.62,741.291 1248.18,706.466 1248.74,706.087 1249.3,737.959 1249.86,716.765 1250.42,717.962 1250.98,715.465 1251.54,713.571 1252.09,715.443 1252.65,696.569 1253.21,677.511 1253.77,675.286 1254.33,677.936 1254.89,711.784 1255.45,739.294 1256.01,737.457 1256.57,701.512 1257.13,715.341 1257.69,726.031 1258.25,739.287 1258.81,718.566 1259.36,737.152 1259.92,737.033 1260.48,730.887 1261.04,712.184 1261.6,727.485 1262.16,740.726 1262.72,773.783 1263.28,769.272 1263.84,733.599 1264.4,731.1 1264.96,708.148 1265.52,708.658 1266.08,708.957 1266.63,727.165 1267.19,728.459 1267.75,706.98 1268.31,706.688 1268.87,739.285 1269.43,720.945 1269.99,700.162 1270.55,700.362 1271.11,665.446 1271.67,664.825 1272.23,651.763 1272.79,635.487 1273.35,606.948 1273.91,612.201 1274.46,601.121 1275.02,609.373 1275.58,626.987 1276.14,642.978 1276.7,659.675 1277.26,641.013 1277.82,672.628 1278.38,704.071 1278.94,686.438 1279.5,703.169 1280.06,699.221 1280.62,664.222 1281.18,632.722 1281.73,639.822 1282.29,625.578 1282.85,629.133 1283.41,633.357 1283.97,671.227 1284.53,721.163 1285.09,734.259 1285.65,764.521 1286.21,761.849 1286.77,744.421 1287.33,709.812 1287.89,711.674 1288.45,729.758 1289,711.334 1289.56,693.53 1290.12,692.319 1290.68,672.316 1291.24,654.221 1291.8,658.668 1292.36,643.504 1292.92,628.625 1293.48,628.202 1294.04,629.072 1294.6,613.612 1295.16,635.03 1295.72,650.866 1296.28,686.139 1296.83,671.489 1297.39,654.982 1297.95,672.469 1298.51,657.078 1299.07,690.418 1299.63,690.866 1300.19,690.464 1300.75,710.797 1301.31,725.825 1301.87,739.035 1302.43,736.941 1302.99,714.529 1303.55,679.235 1304.1,679.369 1304.66,661.58 1305.22,728.309 1305.78,755.896 1306.34,800.464 1306.9,795.222 1307.46,792.434 1308.02,801.837 1308.58,810.816 1309.14,784.336 1309.7,779.087 1310.26,806.737 1310.82,800.116 1311.38,790.953 1311.93,787.101 1312.49,763.877 1313.05,778.603 1313.61,770.986 1314.17,748.924 1314.73,779.448 1315.29,790.782 1315.85,766.641 1316.41,764.476 1316.97,741.712 1317.53,754.585 1318.09,770.535 1318.65,753.404 1319.2,731.854 1319.76,758.649 1320.32,721.232 1320.88,733.545 1321.44,731.333 1322,710.887 1322.56,726.195 1323.12,725.236 1323.68,708.751 1324.24,676.653 1324.8,659.384 1325.36,675.783 1325.92,645.444 1326.47,645.781 1327.03,645.585 1327.59,617.425 1328.15,635.818 1328.71,587.957 1329.27,608.785 1329.83,596.263 1330.39,647.443 1330.95,651.148 1331.51,619.946 1332.07,622.67 1332.63,609.961 1333.19,626.044 1333.75,647.23 1334.3,629.778 1334.86,632.394 1335.42,615.661 1335.98,637.994 1336.54,607.669 1337.1,614.288 1337.66,586.583 1338.22,606.659 1338.78,594.592 1339.34,616.071 1339.9,637.359 1340.46,590.715 1341.02,595.74 1341.57,603.963 1342.13,594.863 1342.69,613.442 1343.25,601.357 1343.81,604.356 1344.37,624.12 1344.93,615.451 1345.49,604.127 1346.05,639.226 1346.61,657.481 1347.17,674.803 1347.73,688.967 1348.29,721.437 1348.84,738.056 1349.4,672.691 1349.96,689.959 1350.52,657.166 1351.08,655.512 1351.64,658.986 1352.2,662.065 1352.76,677.654 1353.32,676.299 1353.88,723.806 1354.44,773.598 1355,768.206 1355.56,795.486 1356.12,776.277 1356.67,799.863 1357.23,795.097 1357.79,803.103 1358.35,778.676 1358.91,742.607 1359.47,740.872 1360.03,756.228 1360.59,741.289 1361.15,725.402 1361.71,724.255 1362.27,707.549 1362.83,707.034 1363.39,705.432 1363.94,709.59 1364.5,693.165 1365.06,677.208 1365.62,678.318 1366.18,690.59 1366.74,690.974 1367.3,694.249 1367.86,707.325 1368.42,735.425 1368.98,749.327 1369.54,760.929 1370.1,758.44 1370.66,757.101 1371.21,735.87 1371.77,767.148 1372.33,745.074 1372.89,706.906 1373.45,689.789 1374.01,693.611 1374.57,705.338 1375.13,656.531 1375.69,688.014 1376.25,685.956 1376.81,685.171 1377.37,651.403 1377.93,667.185 1378.49,700.665 1379.04,683.87 1379.6,700.933 1380.16,683.981 1380.72,683.649 1381.28,667.401 1381.84,651.478 1382.4,652.363 1382.96,635.868 1383.52,650.911 1384.08,652.114 1384.64,656.022 1385.2,672.396 1385.76,671.516 1386.31,671.796 1386.87,673.15 1387.43,659.779 1387.99,676.213 1388.55,629.165 1389.11,666.874 1389.67,683.003 1390.23,664.769 1390.79,650.415 1391.35,653.071 1391.91,670.295 1392.47,653 1393.03,650.204 1393.58,670.886 1394.14,671.602 1394.7,707.665 1395.26,671.258 1395.82,671.18 1396.38,685.849 1396.94,695.015 1397.5,729.518 1398.06,730.116 1398.62,744.4 1399.18,709.704 1399.74,661.873 1400.3,646.249 1400.86,665.519 1401.41,673.196 1401.97,675.529 1402.53,672.713 1403.09,624.997 1403.65,628.57 1404.21,628.127 1404.77,617.188 1405.33,619.041 1405.89,622.557 1406.45,627.447 1407.01,614.052 1407.57,653.218 1408.13,655.368 1408.68,673.509 1409.24,676.44 1409.8,676.423 1410.36,693.974 1410.92,709.1 1411.48,712.94 1412.04,697.367 1412.6,728.818 1413.16,727.533 1413.72,741.263 1414.28,723.304 1414.84,738.59 1415.4,752.597 1415.95,734.662 1416.51,751.57 1417.07,733.595 1417.63,733.435 1418.19,749.105 1418.75,775.579 1419.31,769.083 1419.87,764.997 1420.43,730.138 1420.99,711.269 1421.55,757.088 1422.11,705.335 1422.67,673.141 1423.23,685.829 1423.78,670.084 1424.34,686.821 1424.9,654.011 1425.46,642.632 1426.02,628.268 1426.58,627.007 1427.14,661.969 1427.7,698.095 1428.26,698.744 1428.82,664.652 1429.38,664.219 1429.94,665.372 1430.5,679.074 1431.05,678.866 1431.61,648.374 1432.17,681.005 1432.73,698.543 1433.29,679.715 1433.85,677.432 1434.41,677.402 1434.97,695.672 1435.53,694.906 1436.09,660.429 1436.65,677.996 1437.21,609.092 1437.77,613.36 1438.33,604.398 1438.88,591.706 1439.44,596.754 1440,646.244 1440.56,661.613 1441.12,712.124 1441.68,695.347 1442.24,695.399 1442.8,695.753 1443.36,678.831 1443.92,692.505 1444.48,693.525 1445.04,693.954 1445.6,676.643 1446.15,709.587 1446.71,704.306 1447.27,703.448 1447.83,687.324 1448.39,705.204 1448.95,684.95 1449.51,684.871 1450.07,683.031 1450.63,699.399 1451.19,714.695 1451.75,712.664 1452.31,712.855 1452.87,694.866 1453.42,695.582 1453.98,725.672 1454.54,739.883 1455.1,753.775 1455.66,750.294 1456.22,731.978 1456.78,730.874 1457.34,763.113 1457.9,730.499 1458.46,759.704 1459.02,771.756 1459.58,782.922 1460.14,807.978 1460.7,801.803 1461.25,763.045 1461.81,706.722 1462.37,686.645 1462.93,638.973 1463.49,708.471 1464.05,707.564 1464.61,707.347 1465.17,654.396 1465.73,638.332 1466.29,627.696 1466.85,645.401 1467.41,664.255 1467.97,693.982 1468.52,680.449 1469.08,632.797 1469.64,631.322 1470.2,650.471 1470.76,654.268 1471.32,639.956 1471.88,640.139 1472.44,642.017 1473,628.517 1473.56,614.353 1474.12,615.137 1474.68,619.181 1475.24,607.258 1475.79,593.967 1476.35,580.549 1476.91,568.676 1477.47,595.476 1478.03,596.835 1478.59,601.159 1479.15,593.061 1479.71,618.395 1480.27,640.194 1480.83,675.685 1481.39,738.523 1481.95,734.728 1482.51,729.749 1483.07,727.854 1483.62,713.112 1484.18,712.39 1484.74,694.403 1485.3,711.061 1485.86,711.993 1486.42,712.659 1486.98,714.155 1487.54,729.857 1488.1,712.41 1488.66,711.792 1489.22,680.318 1489.78,676.167 1490.34,680.275 1490.89,650.605 1491.45,652.965 1492.01,670.116 1492.57,673.083 1493.13,609.264 1493.69,579.823 1494.25,586.582 1494.81,624.772 1495.37,597.549 1495.93,620.908 1496.49,621.16 1497.05,576.705 1497.61,601.195 1498.16,623.556 1498.72,625.784 1499.28,628.555 1499.84,678.32 1500.4,659.923 1500.96,692.085 1501.52,691.706 1502.08,644.912 1502.64,615.742 1503.2,589.074 1503.76,642.314 1504.32,646.122 1504.88,649.203 1505.44,638.859 1505.99,658.734 1506.55,641.198 1507.11,657.483 1507.67,687.638 1508.23,702.295 1508.79,669.828 1509.35,734.136 1509.91,697.255 1510.47,697.66 1511.03,684.425 1511.59,655.305 1512.15,673.719 1512.71,674.187 1513.26,656.121 1513.82,654.316 1514.38,656.398 1514.94,638.26 1515.5,671.195 1516.06,669.946 1516.62,654.196 1517.18,651.625 1517.74,654.26 1518.3,607.658 1518.86,627.081 1519.42,632.044 1519.98,667.937 1520.53,650.004 1521.09,621.795 1521.65,611.608 1522.21,613.647 1522.77,664.678 1523.33,684.567 1523.89,685.058 1524.45,704.324 1525.01,702.814 1525.57,702.406 1526.13,715.895 1526.69,761.303 1527.25,757.071 1527.81,753.988 1528.36,749.346 1528.92,734.509 1529.48,745.84 1530.04,756.58 1530.6,754.87 1531.16,751.066 1531.72,745.6 1532.28,724.418 1532.84,750.122 1533.4,711.898 1533.96,713.086 1534.52,711.093 1535.08,725.948 1535.63,705.815 1536.19,741.015 1536.75,756.192 1537.31,767.373 1537.87,744.107 1538.43,726.732 1538.99,758.368 1539.55,737.785 1540.11,719.359 1540.67,748.486 1541.23,746.853 1541.79,743.168 1542.35,738.479 1542.9,753.027 1543.46,751.176 1544.02,716.506 1544.58,699.406 1545.14,697.25 1545.7,693.864 1546.26,724.675 1546.82,721.024 1547.38,720.391 1547.94,716.454 1548.5,712.801 1549.06,694.056 1549.62,711.045 1550.18,744.214 1550.73,705.318 1551.29,672.145 1551.85,690.556 1552.41,674.355 1552.97,673.811 1553.53,674.939 1554.09,659.243 1554.65,645.776 1555.21,652.02 1555.77,669.224 1556.33,719.051 1556.89,766.315 1557.45,779.886 1558,771.663 1558.56,764.759 1559.12,778.237 1559.68,804.909 1560.24,779.826 1560.8,727.421 1561.36,678.248 1561.92,695.095 1562.48,674.519 1563.04,657.09 1563.6,676.403 1564.16,678.198 1564.72,678.078 1565.28,629.121 1565.83,618.582 1566.39,608.208 1566.95,614.528 1567.51,667.124 1568.07,635.182 1568.63,622.865 1569.19,577.894 1569.75,565.529 1570.31,587.736 1570.87,593.797 1571.43,630.395 1571.99,646.645 1572.55,663.717 1573.1,666.55 1573.66,696.886 1574.22,694.502 1574.78,697.379 1575.34,698.751 1575.9,697.85 1576.46,683.095 1577.02,634.337 1577.58,588.462 1578.14,577.356 1578.7,567.397 1579.26,570.748 1579.82,592.698 1580.37,581.812 1580.93,618.829 1581.49,622.894 1582.05,611.782 1582.61,618.493 1583.17,620.285 1583.73,605.852 1584.29,544.785 1584.85,551.766 1585.41,556.539 1585.97,529.619 1586.53,520.493 1587.09,546.249 1587.65,538.752 1588.2,560.597 1588.76,567.36 1589.32,591.782 1589.88,594.666 1590.44,603.224 1591,607.593 1591.56,627.03 1592.12,646.655 1592.68,647.984 1593.24,667.689 1593.8,686.28 1594.36,700.811 1594.92,702.375 1595.47,687.87 1596.03,688.409 1596.59,708.249 1597.15,723.642 1597.71,752.497 1598.27,782.058 1598.83,763.187 1599.39,745.796 1599.95,728.403 1600.51,695.112 1601.07,712.051 1601.63,695.056 1602.19,708.188 1602.74,688.274 1603.3,703.884 1603.86,685.911 1604.42,651.613 1604.98,652.32 1605.54,639.344 1606.1,662.053 1606.66,646.142 1607.22,651.859 1607.78,654.798 1608.34,656.56 1608.9,692.171 1609.46,678.111 1610.02,663.06 1610.57,644.753 1611.13,679.765 1611.69,665.366 1612.25,679.855 1612.81,683.887 1613.37,668.593 1613.93,668.678 1614.49,669.577 1615.05,686.879 1615.61,683.556 1616.17,715.792 1616.73,715.215 1617.29,745.626 1617.84,742.793 1618.4,722.492 1618.96,703.224 1619.52,701.989 1620.08,699.906 1620.64,696.615 1621.2,680.429 1621.76,696.535 1622.32,729.719 1622.88,744.137 1623.44,743.378 1624,709.412 1624.56,689.011 1625.11,687.463 1625.67,700.008 1626.23,713.696 1626.79,708.299 1627.35,705.939 1627.91,718.951 1628.47,766.531 1629.03,749.889 1629.59,732.675 1630.15,748 1630.71,729.574 1631.27,712.113 1631.83,709.935 1632.39,722.717 1632.94,718.55 1633.5,716.286 1634.06,729.529 1634.62,708.463 1635.18,703.839 1635.74,682.208 1636.3,645.224 1636.86,612.305 1637.42,597.226 1637.98,615.73 1638.54,619.493 1639.1,607.144 1639.66,611.892 1640.21,632.005 1640.77,681.611 1641.33,683.442 1641.89,685.127 1642.45,682.076 1643.01,669.694 1643.57,686.479 1644.13,687.965 1644.69,705.087 1645.25,720.396 1645.81,738.914 1646.37,740.245 1646.93,738.65 1647.48,719.882 1648.04,732.645 1648.6,744.07 1649.16,758.361 1649.72,769.739 1650.28,765.484 1650.84,747.289 1651.4,725.877 1651.96,705.11 1652.52,691.414 1653.08,709.21 1653.64,693.281 1654.2,712.877 1654.76,723.806 1655.31,701.942 1655.87,732.888 1656.43,760.46 1656.99,753.61 1657.55,717.795 1658.11,711.045 1658.67,740.591 1659.23,738.656 1659.79,703.541 1660.35,739.802 1660.91,736.95 1661.47,701.358 1662.03,682.058 1662.58,661.968 1663.14,661.359 1663.7,677.369 1664.26,663.391 1664.82,664.569 1665.38,616.394 1665.94,637.818 1666.5,656.203 1667.06,692.362 1667.62,709.599 1668.18,691.574 1668.74,708.181 1669.3,693.414 1669.85,691.113 1670.41,624.726 1670.97,626.271 1671.53,613.482 1672.09,650.762 1672.65,652.88 1673.21,669.114 1673.77,681.991 1674.33,652.33 1674.89,652.751 1675.45,653.884 1676.01,636.515 1676.57,624.29 1677.13,631.667 1677.68,585.865 1678.24,558.406 1678.8,533.639 1679.36,543.308 1679.92,532.228 1680.48,522.802 1681.04,563.798 1681.6,568.451 1682.16,591.532 1682.72,617.993 1683.28,605.427 1683.84,608.125 1684.4,598.092 1684.95,632.759 1685.51,656.211 1686.07,627.57 1686.63,646.608 1687.19,666.754 1687.75,665.989 1688.31,669.345 1688.87,670.346 1689.43,652.301 1689.99,653.95 1690.55,642.09 1691.11,643.792 1691.67,663.574 1692.23,650.807 1692.78,667.119 1693.34,685.254 1693.9,731.978 1694.46,696.356 1695.02,699.27 1695.58,748.738 1696.14,728.619 1696.7,709.518 1697.26,710.232 1697.82,704.77 1698.38,737.092 1698.94,737.692 1699.5,686.826 1700.05,687.322 1700.61,670.107 1701.17,691.753 1701.73,656.224 1702.29,690.332 1702.85,691.055 1703.41,691.374 1703.97,701.6 1704.53,700.461 1705.09,718.461 1705.65,702.696 1706.21,684.701 1706.77,716.944 1707.32,698.013 1707.88,699.037 1708.44,711.594 1709,698.209 1709.56,685.233 1710.12,670.263 1710.68,688.253 1711.24,704.405 1711.8,672.365 1712.36,673.184 1712.92,673.08 1713.48,656.537 1714.04,657.886 1714.6,675.988 1715.15,660.084 1715.71,644.729 1716.27,646.354 1716.83,616.771 1717.39,650.651 1717.95,653.39 1718.51,641.789 1719.07,628.426 1719.63,618.758 1720.19,624.707 1720.75,639.489 1721.31,640.765 1721.87,676.566 1722.42,697.413 1722.98,698.251 1723.54,709.924 1724.1,708.734 1724.66,708.983 1725.22,741.394 1725.78,752.328 1726.34,764.459 1726.9,808.046 1727.46,801.935 1728.02,811.507 1728.58,805.634 1729.14,799.206 1729.69,790.87 1730.25,768.686 1730.81,778.322 1731.37,769.821 1731.93,744.761 1732.49,758.991 1733.05,773.967 1733.61,767.838 1734.17,731.446 1734.73,761.25 1735.29,772.756 1735.85,752.177 1736.41,748.546 1736.97,743.958 1737.52,755.307 1738.08,748.905 1738.64,794.353 1739.2,772.661 1739.76,756.228 1740.32,754.893 1740.88,769.638 1741.44,748.964 1742,728.064 1742.56,678.58 1743.12,677.456 1743.68,658.325 1744.24,662.361 1744.79,648.368 1745.35,632.138 1745.91,667.081 1746.47,683.476 1747.03,664.105 1747.59,649.903 1748.15,634.044 1748.71,634.362 1749.27,653.696 1749.83,668.03 1750.39,650.712 1750.95,668.207 1751.51,683.472 1752.06,717.295 1752.62,714.531 1753.18,713.448 1753.74,713.485 1754.3,696.325 1754.86,726.266 1755.42,702.635 1755.98,683.542 1756.54,681.835 1757.1,695.496 1757.66,712.24 1758.22,713.136 1758.78,681.164 1759.34,648.357 1759.89,601.13 1760.45,607.841 1761.01,608.767 1761.57,563.284 1762.13,571.443 1762.69,610.345 1763.25,629.665 1763.81,582.902 1764.37,594.563 1764.93,634.244 1765.49,654.756 1766.05,686.557 1766.61,652.733 1767.16,670.272 1767.72,670.358 1768.28,653.116 1768.84,669.369 1769.4,668.563 1769.96,651.56 1770.52,653.406 1771.08,703.28 1771.64,717.715 1772.2,681.933 1772.76,680.404 1773.32,730.361 1773.88,711.263 1774.43,676.506 1774.99,693.805 1775.55,690.954 1776.11,709.382 1776.67,741.676 1777.23,756.089 1777.79,749.457 1778.35,745.44 1778.91,755.657 1779.47,748.773 1780.03,743.714 1780.59,707.745 1781.15,721.372 1781.71,719.033 1782.26,718.093 1782.82,714.25 1783.38,713.419 1783.94,711.936 1784.5,692.82 1785.06,690.657 1785.62,690.27 1786.18,690.662 1786.74,688.1 1787.3,653.045 1787.86,654.832 1788.42,652.5 1788.98,654.473 1789.53,672.125 1790.09,688.734 1790.65,671.671 1791.21,640.363 1791.77,641.356 1792.33,642.419 1792.89,647.391 1793.45,649.117 1794.01,651.215 1794.57,621.614 1795.13,574.411 1795.69,565.825 1796.25,568.892 1796.8,556.045 1797.36,561.118 1797.92,552.742 1798.48,559.864 1799.04,570.663 1799.6,612.328 1800.16,615.381 1800.72,621.467 1801.28,589.882 1801.84,559.431 1802.4,568.894 1802.96,575.333 1803.52,568.297 1804.08,609.619 1804.63,611.602 1805.19,615.125 1805.75,620.358 1806.31,654.553 1806.87,658.913 1807.43,678.058 1807.99,679.123 1808.55,744.318 1809.11,711.366 1809.67,711.852 1810.23,710.197 1810.79,712.855 1811.35,727.36 1811.9,755.279 1812.46,749.596 1813.02,778.736 1813.58,787.946 1814.14,785.081 1814.7,779.417 1815.26,742.636 1815.82,739.446 1816.38,753.875 1816.94,718.572 1817.5,733.86 1818.06,715.313 1818.62,714.429 1819.18,715.773 1819.73,760.162 1820.29,755.069 1820.85,767.203 1821.41,747.77 1821.97,743.945 1822.53,739.003 1823.09,753.439 1823.65,732.626 1824.21,717.549 1824.77,698.119 1825.33,729.814 1825.89,726.338 1826.45,691.348 1827,690.222 1827.56,688.837 1828.12,691.158 1828.68,690.324 1829.24,679.947 1829.8,665.807 1830.36,682.94 1830.92,686.905 1831.48,655.939 1832.04,704.884 1832.6,703.052 1833.16,717.868 1833.72,722.71 1834.27,684.591 1834.83,686.301 1835.39,720.637 1835.95,719.038 1836.51,733.771 1837.07,730.659 1837.63,741.843 1838.19,722.48 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 690.802 L720.806 690.802 L721.365 690.802 L721.924 690.802 L722.484 690.802 L723.043 690.802 L723.602 690.802 L724.161 690.802 L724.721 690.802 L725.28 690.802 L725.839 690.802 L726.398 690.802 L726.958 690.802 L727.517 690.802 L728.076 690.802 L728.635 690.802 L729.195 690.802 L729.754 690.802 L730.313 690.802 L730.872 690.802 L731.432 690.802 L731.991 690.802 L732.55 690.802 L733.109 690.802 L733.669 690.802 L734.228 690.802 L734.787 690.802 L735.346 690.802 L735.906 690.802 L736.465 690.802 L737.024 690.802 L737.583 690.802 L738.143 690.802 L738.702 690.802 L739.261 690.802 L739.82 690.802 L740.38 690.802 L740.939 690.802 L741.498 690.802 L742.057 690.802 L742.617 690.802 L743.176 690.802 L743.735 690.802 L744.294 690.802 L744.854 690.802 L745.413 690.802 L745.972 690.802 L746.531 690.802 L747.091 690.802 L747.65 690.802 L748.209 690.802 L748.768 690.802 L749.328 690.802 L749.887 690.802 L750.446 690.802 L751.005 690.802 L751.565 690.802 L752.124 690.802 L752.683 690.802 L753.242 690.802 L753.802 690.802 L754.361 690.802 L754.92 690.802 L755.479 690.802 L756.039 690.802 L756.598 690.802 L757.157 690.802 L757.716 690.802 L758.276 690.802 L758.835 690.802 L759.394 690.802 L759.953 690.802 L760.513 690.802 L761.072 690.802 L761.631 690.802 L762.19 690.802 L762.75 690.802 L763.309 690.802 L763.868 690.802 L764.427 690.802 L764.987 690.802 L765.546 690.802 L766.105 690.802 L766.664 690.802 L767.224 690.802 L767.783 690.802 L768.342 690.802 L768.901 690.802 L769.461 690.802 L770.02 690.802 L770.579 690.802 L771.138 690.802 L771.698 690.802 L772.257 690.802 L772.816 690.802 L773.375 690.802 L773.935 690.802 L774.494 690.802 L775.053 690.802 L775.612 690.802 L776.172 690.802 L776.731 690.802 L777.29 690.802 L777.849 690.802 L778.409 690.802 L778.968 690.802 L779.527 690.802 L780.086 690.802 L780.646 690.802 L781.205 690.802 L781.764 690.802 L782.323 690.802 L782.883 690.802 L783.442 690.802 L784.001 690.802 L784.56 690.802 L785.12 690.802 L785.679 690.802 L786.238 690.802 L786.797 690.802 L787.357 690.802 L787.916 690.802 L788.475 690.802 L789.034 690.802 L789.594 690.802 L790.153 690.802 L790.712 690.802 L791.271 690.802 L791.831 690.802 L792.39 690.802 L792.949 690.802 L793.508 690.802 L794.068 690.802 L794.627 690.802 L795.186 690.802 L795.745 690.802 L796.305 690.802 L796.864 690.802 L797.423 690.802 L797.982 690.802 L798.542 690.802 L799.101 690.802 L799.66 690.802 L800.219 690.802 L800.779 690.802 L801.338 690.802 L801.897 690.802 L802.456 690.802 L803.016 690.802 L803.575 690.802 L804.134 690.802 L804.693 690.802 L805.253 690.802 L805.812 690.802 L806.371 690.802 L806.931 690.802 L807.49 690.802 L808.049 690.802 L808.608 690.802 L809.168 690.802 L809.727 690.802 L810.286 690.802 L810.845 690.802 L811.405 690.802 L811.964 690.802 L812.523 690.802 L813.082 690.802 L813.642 690.802 L814.201 690.802 L814.76 690.802 L815.319 690.802 L815.879 690.802 L816.438 690.802 L816.997 690.802 L817.556 690.802 L818.116 690.802 L818.675 690.802 L819.234 690.802 L819.793 690.802 L820.353 690.802 L820.912 690.802 L821.471 690.802 L822.03 690.802 L822.59 690.802 L823.149 690.802 L823.708 690.802 L824.267 690.802 L824.827 690.802 L825.386 690.802 L825.945 690.802 L826.504 690.802 L827.064 690.802 L827.623 690.802 L828.182 690.802 L828.741 690.802 L829.301 690.802 L829.86 690.802 L830.419 690.802 L830.978 690.802 L831.538 690.802 L832.097 690.802 L832.656 690.802 L833.215 690.802 L833.775 690.802 L834.334 690.802 L834.893 690.802 L835.452 690.802 L836.012 690.802 L836.571 690.802 L837.13 690.802 L837.689 690.802 L838.249 690.802 L838.808 690.802 L839.367 690.802 L839.926 690.802 L840.486 690.802 L841.045 690.802 L841.604 690.802 L842.163 690.802 L842.723 690.802 L843.282 690.802 L843.841 690.802 L844.4 690.802 L844.96 690.802 L845.519 690.802 L846.078 690.802 L846.637 690.802 L847.197 690.802 L847.756 690.802 L848.315 690.802 L848.874 690.802 L849.434 690.802 L849.993 690.802 L850.552 690.802 L851.111 690.802 L851.671 690.802 L852.23 690.802 L852.789 690.802 L853.348 690.802 L853.908 690.802 L854.467 690.802 L855.026 690.802 L855.585 690.802 L856.145 690.802 L856.704 690.802 L857.263 690.802 L857.822 690.802 L858.382 690.802 L858.941 690.802 L859.5 690.802 L860.059 690.802 L860.619 690.802 L861.178 690.802 L861.737 690.802 L862.296 690.802 L862.856 690.802 L863.415 690.802 L863.974 690.802 L864.533 690.802 L865.093 690.802 L865.652 690.802 L866.211 690.802 L866.77 690.802 L867.33 690.802 L867.889 690.802 L868.448 690.802 L869.007 690.802 L869.567 690.802 L870.126 690.802 L870.685 690.802 L871.244 690.802 L871.804 690.802 L872.363 690.802 L872.922 690.802 L873.481 690.802 L874.041 690.802 L874.6 690.802 L875.159 690.802 L875.718 690.802 L876.278 690.802 L876.837 690.802 L877.396 690.802 L877.955 690.802 L878.515 690.802 L879.074 690.802 L879.633 690.802 L880.192 690.802 L880.752 690.802 L881.311 690.802 L881.87 690.802 L882.429 690.802 L882.989 690.802 L883.548 690.802 L884.107 690.802 L884.666 690.802 L885.226 690.802 L885.785 690.802 L886.344 690.802 L886.903 690.802 L887.463 690.802 L888.022 690.802 L888.581 690.802 L889.14 690.802 L889.7 690.802 L890.259 690.802 L890.818 690.802 L891.377 690.802 L891.937 690.802 L892.496 690.802 L893.055 690.802 L893.614 690.802 L894.174 690.802 L894.733 690.802 L895.292 690.802 L895.851 690.802 L896.411 690.802 L896.97 690.802 L897.529 690.802 L898.088 690.802 L898.648 690.802 L899.207 690.802 L899.766 690.802 L900.325 690.802 L900.885 690.802 L901.444 690.802 L902.003 690.802 L902.562 690.802 L903.122 690.802 L903.681 690.802 L904.24 690.802 L904.799 690.802 L905.359 690.802 L905.918 690.802 L906.477 690.802 L907.036 690.802 L907.596 690.802 L908.155 690.802 L908.714 690.802 L909.273 690.802 L909.833 690.802 L910.392 690.802 L910.951 690.802 L911.51 690.802 L912.07 690.802 L912.629 690.802 L913.188 690.802 L913.747 690.802 L914.307 690.802 L914.866 690.802 L915.425 690.802 L915.984 690.802 L916.544 690.802 L917.103 690.802 L917.662 690.802 L918.221 690.802 L918.781 690.802 L919.34 690.802 L919.899 690.802 L920.458 690.802 L921.018 690.802 L921.577 690.802 L922.136 690.802 L922.695 690.802 L923.255 690.802 L923.814 690.802 L924.373 690.802 L924.932 690.802 L925.492 690.802 L926.051 690.802 L926.61 690.802 L927.169 690.802 L927.729 690.802 L928.288 690.802 L928.847 690.802 L929.406 690.802 L929.966 690.802 L930.525 690.802 L931.084 690.802 L931.644 690.802 L932.203 690.802 L932.762 690.802 L933.321 690.802 L933.881 690.802 L934.44 690.802 L934.999 690.802 L935.558 690.802 L936.118 690.802 L936.677 690.802 L937.236 690.802 L937.795 690.802 L938.355 690.802 L938.914 690.802 L939.473 690.802 L940.032 690.802 L940.592 690.802 L941.151 690.802 L941.71 690.802 L942.269 690.802 L942.829 690.802 L943.388 690.802 L943.947 690.802 L944.506 690.802 L945.066 690.802 L945.625 690.802 L946.184 690.802 L946.743 690.802 L947.303 690.802 L947.862 690.802 L948.421 690.802 L948.98 690.802 L949.54 690.802 L950.099 690.802 L950.658 690.802 L951.217 690.802 L951.777 690.802 L952.336 690.802 L952.895 690.802 L953.454 690.802 L954.014 690.802 L954.573 690.802 L955.132 690.802 L955.691 690.802 L956.251 690.802 L956.81 690.802 L957.369 690.802 L957.928 690.802 L958.488 690.802 L959.047 690.802 L959.606 690.802 L960.165 690.802 L960.725 690.802 L961.284 690.802 L961.843 690.802 L962.402 690.802 L962.962 690.802 L963.521 690.802 L964.08 690.802 L964.639 690.802 L965.199 690.802 L965.758 690.802 L966.317 690.802 L966.876 690.802 L967.436 690.802 L967.995 690.802 L968.554 690.802 L969.113 690.802 L969.673 690.802 L970.232 690.802 L970.791 690.802 L971.35 690.802 L971.91 690.802 L972.469 690.802 L973.028 690.802 L973.587 690.802 L974.147 690.802 L974.706 690.802 L975.265 690.802 L975.824 690.802 L976.384 690.802 L976.943 690.802 L977.502 690.802 L978.061 690.802 L978.621 690.802 L979.18 690.802 L979.739 690.802 L980.298 690.802 L980.858 690.802 L981.417 690.802 L981.976 690.802 L982.535 690.802 L983.095 690.802 L983.654 690.802 L984.213 690.802 L984.772 690.802 L985.332 690.802 L985.891 690.802 L986.45 690.802 L987.009 690.802 L987.569 690.802 L988.128 690.802 L988.687 690.802 L989.246 690.802 L989.806 690.802 L990.365 690.802 L990.924 690.802 L991.483 690.802 L992.043 690.802 L992.602 690.802 L993.161 690.802 L993.72 690.802 L994.28 690.802 L994.839 690.802 L995.398 690.802 L995.957 690.802 L996.517 690.802 L997.076 690.802 L997.635 690.802 L998.194 690.802 L998.754 690.802 L999.313 690.802 L999.872 690.802 L1000.43 690.802 L1000.99 690.802 L1001.55 690.802 L1002.11 690.802 L1002.67 690.802 L1003.23 690.802 L1003.79 690.802 L1004.35 690.802 L1004.91 690.802 L1005.46 690.802 L1006.02 690.802 L1006.58 690.802 L1007.14 690.802 L1007.7 690.802 L1008.26 690.802 L1008.82 690.802 L1009.38 690.802 L1009.94 690.802 L1010.5 690.802 L1011.06 690.802 L1011.62 690.802 L1012.18 690.802 L1012.73 690.802 L1013.29 690.802 L1013.85 690.802 L1014.41 690.802 L1014.97 690.802 L1015.53 690.802 L1016.09 690.802 L1016.65 690.802 L1017.21 690.802 L1017.77 690.802 L1018.33 690.802 L1018.89 690.802 L1019.45 690.802 L1020.01 690.802 L1020.56 690.802 L1021.12 690.802 L1021.68 690.802 L1022.24 690.802 L1022.8 690.802 L1023.36 690.802 L1023.92 690.802 L1024.48 690.802 L1025.04 690.802 L1025.6 690.802 L1026.16 690.802 L1026.72 690.802 L1027.28 690.802 L1027.83 690.802 L1028.39 690.802 L1028.95 690.802 L1029.51 690.802 L1030.07 690.802 L1030.63 690.802 L1031.19 690.802 L1031.75 690.802 L1032.31 690.802 L1032.87 690.802 L1033.43 690.802 L1033.99 690.802 L1034.55 690.802 L1035.1 690.802 L1035.66 690.802 L1036.22 690.802 L1036.78 690.802 L1037.34 690.802 L1037.9 690.802 L1038.46 690.802 L1039.02 690.802 L1039.58 690.802 L1040.14 690.802 L1040.7 690.802 L1041.26 690.802 L1041.82 690.802 L1042.38 690.802 L1042.93 690.802 L1043.49 690.802 L1044.05 690.802 L1044.61 690.802 L1045.17 690.802 L1045.73 690.802 L1046.29 690.802 L1046.85 690.802 L1047.41 690.802 L1047.97 690.802 L1048.53 690.802 L1049.09 690.802 L1049.65 690.802 L1050.2 690.802 L1050.76 690.802 L1051.32 690.802 L1051.88 690.802 L1052.44 690.802 L1053 690.802 L1053.56 690.802 L1054.12 690.802 L1054.68 690.802 L1055.24 690.802 L1055.8 690.802 L1056.36 690.802 L1056.92 690.802 L1057.48 690.802 L1058.03 690.802 L1058.59 690.802 L1059.15 690.802 L1059.71 690.802 L1060.27 690.802 L1060.83 690.802 L1061.39 690.802 L1061.95 690.802 L1062.51 690.802 L1063.07 690.802 L1063.63 690.802 L1064.19 690.802 L1064.75 690.802 L1065.3 690.802 L1065.86 690.802 L1066.42 690.802 L1066.98 690.802 L1067.54 690.802 L1068.1 690.802 L1068.66 690.802 L1069.22 690.802 L1069.78 690.802 L1070.34 690.802 L1070.9 690.802 L1071.46 690.802 L1072.02 690.802 L1072.57 690.802 L1073.13 690.802 L1073.69 690.802 L1074.25 690.802 L1074.81 690.802 L1075.37 690.802 L1075.93 690.802 L1076.49 690.802 L1077.05 690.802 L1077.61 690.802 L1078.17 690.802 L1078.73 690.802 L1079.29 690.802 L1079.85 690.802 L1080.4 690.802 L1080.96 690.802 L1081.52 690.802 L1082.08 690.802 L1082.64 690.802 L1083.2 690.802 L1083.76 690.802 L1084.32 690.802 L1084.88 690.802 L1085.44 690.802 L1086 690.802 L1086.56 690.802 L1087.12 690.802 L1087.67 690.802 L1088.23 690.802 L1088.79 690.802 L1089.35 690.802 L1089.91 690.802 L1090.47 690.802 L1091.03 690.802 L1091.59 690.802 L1092.15 690.802 L1092.71 690.802 L1093.27 690.802 L1093.83 690.802 L1094.39 690.802 L1094.94 690.802 L1095.5 690.802 L1096.06 690.802 L1096.62 690.802 L1097.18 690.802 L1097.74 690.802 L1098.3 690.802 L1098.86 690.802 L1099.42 690.802 L1099.98 690.802 L1100.54 690.802 L1101.1 690.802 L1101.66 690.802 L1102.22 690.802 L1102.77 690.802 L1103.33 690.802 L1103.89 690.802 L1104.45 690.802 L1105.01 690.802 L1105.57 690.802 L1106.13 690.802 L1106.69 690.802 L1107.25 690.802 L1107.81 690.802 L1108.37 690.802 L1108.93 690.802 L1109.49 690.802 L1110.04 690.802 L1110.6 690.802 L1111.16 690.802 L1111.72 690.802 L1112.28 690.802 L1112.84 690.802 L1113.4 690.802 L1113.96 690.802 L1114.52 690.802 L1115.08 690.802 L1115.64 690.802 L1116.2 690.802 L1116.76 690.802 L1117.31 690.802 L1117.87 690.802 L1118.43 690.802 L1118.99 690.802 L1119.55 690.802 L1120.11 690.802 L1120.67 690.802 L1121.23 690.802 L1121.79 690.802 L1122.35 690.802 L1122.91 690.802 L1123.47 690.802 L1124.03 690.802 L1124.59 690.802 L1125.14 690.802 L1125.7 690.802 L1126.26 690.802 L1126.82 690.802 L1127.38 690.802 L1127.94 690.802 L1128.5 690.802 L1129.06 690.802 L1129.62 690.802 L1130.18 690.802 L1130.74 690.802 L1131.3 690.802 L1131.86 690.802 L1132.41 690.802 L1132.97 690.802 L1133.53 690.802 L1134.09 690.802 L1134.65 690.802 L1135.21 690.802 L1135.77 690.802 L1136.33 690.802 L1136.89 690.802 L1137.45 690.802 L1138.01 690.802 L1138.57 690.802 L1139.13 690.802 L1139.68 690.802 L1140.24 690.802 L1140.8 690.802 L1141.36 690.802 L1141.92 690.802 L1142.48 690.802 L1143.04 690.802 L1143.6 690.802 L1144.16 690.802 L1144.72 690.802 L1145.28 690.802 L1145.84 690.802 L1146.4 690.802 L1146.96 690.802 L1147.51 690.802 L1148.07 690.802 L1148.63 690.802 L1149.19 690.802 L1149.75 690.802 L1150.31 690.802 L1150.87 690.802 L1151.43 690.802 L1151.99 690.802 L1152.55 690.802 L1153.11 690.802 L1153.67 690.802 L1154.23 690.802 L1154.78 690.802 L1155.34 690.802 L1155.9 690.802 L1156.46 690.802 L1157.02 690.802 L1157.58 690.802 L1158.14 690.802 L1158.7 690.802 L1159.26 690.802 L1159.82 690.802 L1160.38 690.802 L1160.94 690.802 L1161.5 690.802 L1162.05 690.802 L1162.61 690.802 L1163.17 690.802 L1163.73 690.802 L1164.29 690.802 L1164.85 690.802 L1165.41 690.802 L1165.97 690.802 L1166.53 690.802 L1167.09 690.802 L1167.65 690.802 L1168.21 690.802 L1168.77 690.802 L1169.33 690.802 L1169.88 690.802 L1170.44 690.802 L1171 690.802 L1171.56 690.802 L1172.12 690.802 L1172.68 690.802 L1173.24 690.802 L1173.8 690.802 L1174.36 690.802 L1174.92 690.802 L1175.48 690.802 L1176.04 690.802 L1176.6 690.802 L1177.15 690.802 L1177.71 690.802 L1178.27 690.802 L1178.83 690.802 L1179.39 690.802 L1179.95 690.802 L1180.51 690.802 L1181.07 690.802 L1181.63 690.802 L1182.19 690.802 L1182.75 690.802 L1183.31 690.802 L1183.87 690.802 L1184.43 690.802 L1184.98 690.802 L1185.54 690.802 L1186.1 690.802 L1186.66 690.802 L1187.22 690.802 L1187.78 690.802 L1188.34 690.802 L1188.9 690.802 L1189.46 690.802 L1190.02 690.802 L1190.58 690.802 L1191.14 690.802 L1191.7 690.802 L1192.25 690.802 L1192.81 690.802 L1193.37 690.802 L1193.93 690.802 L1194.49 690.802 L1195.05 690.802 L1195.61 690.802 L1196.17 690.802 L1196.73 690.802 L1197.29 690.802 L1197.85 690.802 L1198.41 690.802 L1198.97 690.802 L1199.52 690.802 L1200.08 690.802 L1200.64 690.802 L1201.2 690.802 L1201.76 690.802 L1202.32 690.802 L1202.88 690.802 L1203.44 690.802 L1204 690.802 L1204.56 690.802 L1205.12 690.802 L1205.68 690.802 L1206.24 690.802 L1206.8 690.802 L1207.35 690.802 L1207.91 690.802 L1208.47 690.802 L1209.03 690.802 L1209.59 690.802 L1210.15 690.802 L1210.71 690.802 L1211.27 690.802 L1211.83 690.802 L1212.39 690.802 L1212.95 690.802 L1213.51 690.802 L1214.07 690.802 L1214.62 690.802 L1215.18 690.802 L1215.74 690.802 L1216.3 690.802 L1216.86 690.802 L1217.42 690.802 L1217.98 690.802 L1218.54 690.802 L1219.1 690.802 L1219.66 690.802 L1220.22 690.802 L1220.78 690.802 L1221.34 690.802 L1221.89 690.802 L1222.45 690.802 L1223.01 690.802 L1223.57 690.802 L1224.13 690.802 L1224.69 690.802 L1225.25 690.802 L1225.81 690.802 L1226.37 690.802 L1226.93 690.802 L1227.49 690.802 L1228.05 690.802 L1228.61 690.802 L1229.17 690.802 L1229.72 690.802 L1230.28 690.802 L1230.84 690.802 L1231.4 690.802 L1231.96 690.802 L1232.52 690.802 L1233.08 690.802 L1233.64 690.802 L1234.2 690.802 L1234.76 690.802 L1235.32 690.802 L1235.88 690.802 L1236.44 690.802 L1236.99 690.802 L1237.55 690.802 L1238.11 690.802 L1238.67 690.802 L1239.23 690.802 L1239.79 690.802 L1240.35 690.802 L1240.91 690.802 L1241.47 690.802 L1242.03 690.802 L1242.59 690.802 L1243.15 690.802 L1243.71 690.802 L1244.26 690.802 L1244.82 690.802 L1245.38 690.802 L1245.94 690.802 L1246.5 690.802 L1247.06 690.802 L1247.62 690.802 L1248.18 690.802 L1248.74 690.802 L1249.3 690.802 L1249.86 690.802 L1250.42 690.802 L1250.98 690.802 L1251.54 690.802 L1252.09 690.802 L1252.65 690.802 L1253.21 690.802 L1253.77 690.802 L1254.33 690.802 L1254.89 690.802 L1255.45 690.802 L1256.01 690.802 L1256.57 690.802 L1257.13 690.802 L1257.69 690.802 L1258.25 690.802 L1258.81 690.802 L1259.36 690.802 L1259.92 690.802 L1260.48 690.802 L1261.04 690.802 L1261.6 690.802 L1262.16 690.802 L1262.72 690.802 L1263.28 690.802 L1263.84 690.802 L1264.4 690.802 L1264.96 690.802 L1265.52 690.802 L1266.08 690.802 L1266.63 690.802 L1267.19 690.802 L1267.75 690.802 L1268.31 690.802 L1268.87 690.802 L1269.43 690.802 L1269.99 690.802 L1270.55 690.802 L1271.11 690.802 L1271.67 690.802 L1272.23 690.802 L1272.79 690.802 L1273.35 690.802 L1273.91 690.802 L1274.46 690.802 L1275.02 690.802 L1275.58 690.802 L1276.14 690.802 L1276.7 690.802 L1277.26 690.802 L1277.82 690.802 L1278.38 690.802 L1278.94 690.802 L1279.5 690.802 L1280.06 690.802 L1280.62 690.802 L1281.18 690.802 L1281.73 690.802 L1282.29 690.802 L1282.85 690.802 L1283.41 690.802 L1283.97 690.802 L1284.53 690.802 L1285.09 690.802 L1285.65 690.802 L1286.21 690.802 L1286.77 690.802 L1287.33 690.802 L1287.89 690.802 L1288.45 690.802 L1289 690.802 L1289.56 690.802 L1290.12 690.802 L1290.68 690.802 L1291.24 690.802 L1291.8 690.802 L1292.36 690.802 L1292.92 690.802 L1293.48 690.802 L1294.04 690.802 L1294.6 690.802 L1295.16 690.802 L1295.72 690.802 L1296.28 690.802 L1296.83 690.802 L1297.39 690.802 L1297.95 690.802 L1298.51 690.802 L1299.07 690.802 L1299.63 690.802 L1300.19 690.802 L1300.75 690.802 L1301.31 690.802 L1301.87 690.802 L1302.43 690.802 L1302.99 690.802 L1303.55 690.802 L1304.1 690.802 L1304.66 690.802 L1305.22 690.802 L1305.78 690.802 L1306.34 690.802 L1306.9 690.802 L1307.46 690.802 L1308.02 690.802 L1308.58 690.802 L1309.14 690.802 L1309.7 690.802 L1310.26 690.802 L1310.82 690.802 L1311.38 690.802 L1311.93 690.802 L1312.49 690.802 L1313.05 690.802 L1313.61 690.802 L1314.17 690.802 L1314.73 690.802 L1315.29 690.802 L1315.85 690.802 L1316.41 690.802 L1316.97 690.802 L1317.53 690.802 L1318.09 690.802 L1318.65 690.802 L1319.2 690.802 L1319.76 690.802 L1320.32 690.802 L1320.88 690.802 L1321.44 690.802 L1322 690.802 L1322.56 690.802 L1323.12 690.802 L1323.68 690.802 L1324.24 690.802 L1324.8 690.802 L1325.36 690.802 L1325.92 690.802 L1326.47 690.802 L1327.03 690.802 L1327.59 690.802 L1328.15 690.802 L1328.71 690.802 L1329.27 690.802 L1329.83 690.802 L1330.39 690.802 L1330.95 690.802 L1331.51 690.802 L1332.07 690.802 L1332.63 690.802 L1333.19 690.802 L1333.75 690.802 L1334.3 690.802 L1334.86 690.802 L1335.42 690.802 L1335.98 690.802 L1336.54 690.802 L1337.1 690.802 L1337.66 690.802 L1338.22 690.802 L1338.78 690.802 L1339.34 690.802 L1339.9 690.802 L1340.46 690.802 L1341.02 690.802 L1341.57 690.802 L1342.13 690.802 L1342.69 690.802 L1343.25 690.802 L1343.81 690.802 L1344.37 690.802 L1344.93 690.802 L1345.49 690.802 L1346.05 690.802 L1346.61 690.802 L1347.17 690.802 L1347.73 690.802 L1348.29 690.802 L1348.84 690.802 L1349.4 690.802 L1349.96 690.802 L1350.52 690.802 L1351.08 690.802 L1351.64 690.802 L1352.2 690.802 L1352.76 690.802 L1353.32 690.802 L1353.88 690.802 L1354.44 690.802 L1355 690.802 L1355.56 690.802 L1356.12 690.802 L1356.67 690.802 L1357.23 690.802 L1357.79 690.802 L1358.35 690.802 L1358.91 690.802 L1359.47 690.802 L1360.03 690.802 L1360.59 690.802 L1361.15 690.802 L1361.71 690.802 L1362.27 690.802 L1362.83 690.802 L1363.39 690.802 L1363.94 690.802 L1364.5 690.802 L1365.06 690.802 L1365.62 690.802 L1366.18 690.802 L1366.74 690.802 L1367.3 690.802 L1367.86 690.802 L1368.42 690.802 L1368.98 690.802 L1369.54 690.802 L1370.1 690.802 L1370.66 690.802 L1371.21 690.802 L1371.77 690.802 L1372.33 690.802 L1372.89 690.802 L1373.45 690.802 L1374.01 690.802 L1374.57 690.802 L1375.13 690.802 L1375.69 690.802 L1376.25 690.802 L1376.81 690.802 L1377.37 690.802 L1377.93 690.802 L1378.49 690.802 L1379.04 690.802 L1379.6 690.802 L1380.16 690.802 L1380.72 690.802 L1381.28 690.802 L1381.84 690.802 L1382.4 690.802 L1382.96 690.802 L1383.52 690.802 L1384.08 690.802 L1384.64 690.802 L1385.2 690.802 L1385.76 690.802 L1386.31 690.802 L1386.87 690.802 L1387.43 690.802 L1387.99 690.802 L1388.55 690.802 L1389.11 690.802 L1389.67 690.802 L1390.23 690.802 L1390.79 690.802 L1391.35 690.802 L1391.91 690.802 L1392.47 690.802 L1393.03 690.802 L1393.58 690.802 L1394.14 690.802 L1394.7 690.802 L1395.26 690.802 L1395.82 690.802 L1396.38 690.802 L1396.94 690.802 L1397.5 690.802 L1398.06 690.802 L1398.62 690.802 L1399.18 690.802 L1399.74 690.802 L1400.3 690.802 L1400.86 690.802 L1401.41 690.802 L1401.97 690.802 L1402.53 690.802 L1403.09 690.802 L1403.65 690.802 L1404.21 690.802 L1404.77 690.802 L1405.33 690.802 L1405.89 690.802 L1406.45 690.802 L1407.01 690.802 L1407.57 690.802 L1408.13 690.802 L1408.68 690.802 L1409.24 690.802 L1409.8 690.802 L1410.36 690.802 L1410.92 690.802 L1411.48 690.802 L1412.04 690.802 L1412.6 690.802 L1413.16 690.802 L1413.72 690.802 L1414.28 690.802 L1414.84 690.802 L1415.4 690.802 L1415.95 690.802 L1416.51 690.802 L1417.07 690.802 L1417.63 690.802 L1418.19 690.802 L1418.75 690.802 L1419.31 690.802 L1419.87 690.802 L1420.43 690.802 L1420.99 690.802 L1421.55 690.802 L1422.11 690.802 L1422.67 690.802 L1423.23 690.802 L1423.78 690.802 L1424.34 690.802 L1424.9 690.802 L1425.46 690.802 L1426.02 690.802 L1426.58 690.802 L1427.14 690.802 L1427.7 690.802 L1428.26 690.802 L1428.82 690.802 L1429.38 690.802 L1429.94 690.802 L1430.5 690.802 L1431.05 690.802 L1431.61 690.802 L1432.17 690.802 L1432.73 690.802 L1433.29 690.802 L1433.85 690.802 L1434.41 690.802 L1434.97 690.802 L1435.53 690.802 L1436.09 690.802 L1436.65 690.802 L1437.21 690.802 L1437.77 690.802 L1438.33 690.802 L1438.88 690.802 L1439.44 690.802 L1440 690.802 L1440.56 690.802 L1441.12 690.802 L1441.68 690.802 L1442.24 690.802 L1442.8 690.802 L1443.36 690.802 L1443.92 690.802 L1444.48 690.802 L1445.04 690.802 L1445.6 690.802 L1446.15 690.802 L1446.71 690.802 L1447.27 690.802 L1447.83 690.802 L1448.39 690.802 L1448.95 690.802 L1449.51 690.802 L1450.07 690.802 L1450.63 690.802 L1451.19 690.802 L1451.75 690.802 L1452.31 690.802 L1452.87 690.802 L1453.42 690.802 L1453.98 690.802 L1454.54 690.802 L1455.1 690.802 L1455.66 690.802 L1456.22 690.802 L1456.78 690.802 L1457.34 690.802 L1457.9 690.802 L1458.46 690.802 L1459.02 690.802 L1459.58 690.802 L1460.14 690.802 L1460.7 690.802 L1461.25 690.802 L1461.81 690.802 L1462.37 690.802 L1462.93 690.802 L1463.49 690.802 L1464.05 690.802 L1464.61 690.802 L1465.17 690.802 L1465.73 690.802 L1466.29 690.802 L1466.85 690.802 L1467.41 690.802 L1467.97 690.802 L1468.52 690.802 L1469.08 690.802 L1469.64 690.802 L1470.2 690.802 L1470.76 690.802 L1471.32 690.802 L1471.88 690.802 L1472.44 690.802 L1473 690.802 L1473.56 690.802 L1474.12 690.802 L1474.68 690.802 L1475.24 690.802 L1475.79 690.802 L1476.35 690.802 L1476.91 690.802 L1477.47 690.802 L1478.03 690.802 L1478.59 690.802 L1479.15 690.802 L1479.71 690.802 L1480.27 690.802 L1480.83 690.802 L1481.39 690.802 L1481.95 690.802 L1482.51 690.802 L1483.07 690.802 L1483.62 690.802 L1484.18 690.802 L1484.74 690.802 L1485.3 690.802 L1485.86 690.802 L1486.42 690.802 L1486.98 690.802 L1487.54 690.802 L1488.1 690.802 L1488.66 690.802 L1489.22 690.802 L1489.78 690.802 L1490.34 690.802 L1490.89 690.802 L1491.45 690.802 L1492.01 690.802 L1492.57 690.802 L1493.13 690.802 L1493.69 690.802 L1494.25 690.802 L1494.81 690.802 L1495.37 690.802 L1495.93 690.802 L1496.49 690.802 L1497.05 690.802 L1497.61 690.802 L1498.16 690.802 L1498.72 690.802 L1499.28 690.802 L1499.84 690.802 L1500.4 690.802 L1500.96 690.802 L1501.52 690.802 L1502.08 690.802 L1502.64 690.802 L1503.2 690.802 L1503.76 690.802 L1504.32 690.802 L1504.88 690.802 L1505.44 690.802 L1505.99 690.802 L1506.55 690.802 L1507.11 690.802 L1507.67 690.802 L1508.23 690.802 L1508.79 690.802 L1509.35 690.802 L1509.91 690.802 L1510.47 690.802 L1511.03 690.802 L1511.59 690.802 L1512.15 690.802 L1512.71 690.802 L1513.26 690.802 L1513.82 690.802 L1514.38 690.802 L1514.94 690.802 L1515.5 690.802 L1516.06 690.802 L1516.62 690.802 L1517.18 690.802 L1517.74 690.802 L1518.3 690.802 L1518.86 690.802 L1519.42 690.802 L1519.98 690.802 L1520.53 690.802 L1521.09 690.802 L1521.65 690.802 L1522.21 690.802 L1522.77 690.802 L1523.33 690.802 L1523.89 690.802 L1524.45 690.802 L1525.01 690.802 L1525.57 690.802 L1526.13 690.802 L1526.69 690.802 L1527.25 690.802 L1527.81 690.802 L1528.36 690.802 L1528.92 690.802 L1529.48 690.802 L1530.04 690.802 L1530.6 690.802 L1531.16 690.802 L1531.72 690.802 L1532.28 690.802 L1532.84 690.802 L1533.4 690.802 L1533.96 690.802 L1534.52 690.802 L1535.08 690.802 L1535.63 690.802 L1536.19 690.802 L1536.75 690.802 L1537.31 690.802 L1537.87 690.802 L1538.43 690.802 L1538.99 690.802 L1539.55 690.802 L1540.11 690.802 L1540.67 690.802 L1541.23 690.802 L1541.79 690.802 L1542.35 690.802 L1542.9 690.802 L1543.46 690.802 L1544.02 690.802 L1544.58 690.802 L1545.14 690.802 L1545.7 690.802 L1546.26 690.802 L1546.82 690.802 L1547.38 690.802 L1547.94 690.802 L1548.5 690.802 L1549.06 690.802 L1549.62 690.802 L1550.18 690.802 L1550.73 690.802 L1551.29 690.802 L1551.85 690.802 L1552.41 690.802 L1552.97 690.802 L1553.53 690.802 L1554.09 690.802 L1554.65 690.802 L1555.21 690.802 L1555.77 690.802 L1556.33 690.802 L1556.89 690.802 L1557.45 690.802 L1558 690.802 L1558.56 690.802 L1559.12 690.802 L1559.68 690.802 L1560.24 690.802 L1560.8 690.802 L1561.36 690.802 L1561.92 690.802 L1562.48 690.802 L1563.04 690.802 L1563.6 690.802 L1564.16 690.802 L1564.72 690.802 L1565.28 690.802 L1565.83 690.802 L1566.39 690.802 L1566.95 690.802 L1567.51 690.802 L1568.07 690.802 L1568.63 690.802 L1569.19 690.802 L1569.75 690.802 L1570.31 690.802 L1570.87 690.802 L1571.43 690.802 L1571.99 690.802 L1572.55 690.802 L1573.1 690.802 L1573.66 690.802 L1574.22 690.802 L1574.78 690.802 L1575.34 690.802 L1575.9 690.802 L1576.46 690.802 L1577.02 690.802 L1577.58 690.802 L1578.14 690.802 L1578.7 690.802 L1579.26 690.802 L1579.82 690.802 L1580.37 690.802 L1580.93 690.802 L1581.49 690.802 L1582.05 690.802 L1582.61 690.802 L1583.17 690.802 L1583.73 690.802 L1584.29 690.802 L1584.85 690.802 L1585.41 690.802 L1585.97 690.802 L1586.53 690.802 L1587.09 690.802 L1587.65 690.802 L1588.2 690.802 L1588.76 690.802 L1589.32 690.802 L1589.88 690.802 L1590.44 690.802 L1591 690.802 L1591.56 690.802 L1592.12 690.802 L1592.68 690.802 L1593.24 690.802 L1593.8 690.802 L1594.36 690.802 L1594.92 690.802 L1595.47 690.802 L1596.03 690.802 L1596.59 690.802 L1597.15 690.802 L1597.71 690.802 L1598.27 690.802 L1598.83 690.802 L1599.39 690.802 L1599.95 690.802 L1600.51 690.802 L1601.07 690.802 L1601.63 690.802 L1602.19 690.802 L1602.74 690.802 L1603.3 690.802 L1603.86 690.802 L1604.42 690.802 L1604.98 690.802 L1605.54 690.802 L1606.1 690.802 L1606.66 690.802 L1607.22 690.802 L1607.78 690.802 L1608.34 690.802 L1608.9 690.802 L1609.46 690.802 L1610.02 690.802 L1610.57 690.802 L1611.13 690.802 L1611.69 690.802 L1612.25 690.802 L1612.81 690.802 L1613.37 690.802 L1613.93 690.802 L1614.49 690.802 L1615.05 690.802 L1615.61 690.802 L1616.17 690.802 L1616.73 690.802 L1617.29 690.802 L1617.84 690.802 L1618.4 690.802 L1618.96 690.802 L1619.52 690.802 L1620.08 690.802 L1620.64 690.802 L1621.2 690.802 L1621.76 690.802 L1622.32 690.802 L1622.88 690.802 L1623.44 690.802 L1624 690.802 L1624.56 690.802 L1625.11 690.802 L1625.67 690.802 L1626.23 690.802 L1626.79 690.802 L1627.35 690.802 L1627.91 690.802 L1628.47 690.802 L1629.03 690.802 L1629.59 690.802 L1630.15 690.802 L1630.71 690.802 L1631.27 690.802 L1631.83 690.802 L1632.39 690.802 L1632.94 690.802 L1633.5 690.802 L1634.06 690.802 L1634.62 690.802 L1635.18 690.802 L1635.74 690.802 L1636.3 690.802 L1636.86 690.802 L1637.42 690.802 L1637.98 690.802 L1638.54 690.802 L1639.1 690.802 L1639.66 690.802 L1640.21 690.802 L1640.77 690.802 L1641.33 690.802 L1641.89 690.802 L1642.45 690.802 L1643.01 690.802 L1643.57 690.802 L1644.13 690.802 L1644.69 690.802 L1645.25 690.802 L1645.81 690.802 L1646.37 690.802 L1646.93 690.802 L1647.48 690.802 L1648.04 690.802 L1648.6 690.802 L1649.16 690.802 L1649.72 690.802 L1650.28 690.802 L1650.84 690.802 L1651.4 690.802 L1651.96 690.802 L1652.52 690.802 L1653.08 690.802 L1653.64 690.802 L1654.2 690.802 L1654.76 690.802 L1655.31 690.802 L1655.87 690.802 L1656.43 690.802 L1656.99 690.802 L1657.55 690.802 L1658.11 690.802 L1658.67 690.802 L1659.23 690.802 L1659.79 690.802 L1660.35 690.802 L1660.91 690.802 L1661.47 690.802 L1662.03 690.802 L1662.58 690.802 L1663.14 690.802 L1663.7 690.802 L1664.26 690.802 L1664.82 690.802 L1665.38 690.802 L1665.94 690.802 L1666.5 690.802 L1667.06 690.802 L1667.62 690.802 L1668.18 690.802 L1668.74 690.802 L1669.3 690.802 L1669.85 690.802 L1670.41 690.802 L1670.97 690.802 L1671.53 690.802 L1672.09 690.802 L1672.65 690.802 L1673.21 690.802 L1673.77 690.802 L1674.33 690.802 L1674.89 690.802 L1675.45 690.802 L1676.01 690.802 L1676.57 690.802 L1677.13 690.802 L1677.68 690.802 L1678.24 690.802 L1678.8 690.802 L1679.36 690.802 L1679.92 690.802 L1680.48 690.802 L1681.04 690.802 L1681.6 690.802 L1682.16 690.802 L1682.72 690.802 L1683.28 690.802 L1683.84 690.802 L1684.4 690.802 L1684.95 690.802 L1685.51 690.802 L1686.07 690.802 L1686.63 690.802 L1687.19 690.802 L1687.75 690.802 L1688.31 690.802 L1688.87 690.802 L1689.43 690.802 L1689.99 690.802 L1690.55 690.802 L1691.11 690.802 L1691.67 690.802 L1692.23 690.802 L1692.78 690.802 L1693.34 690.802 L1693.9 690.802 L1694.46 690.802 L1695.02 690.802 L1695.58 690.802 L1696.14 690.802 L1696.7 690.802 L1697.26 690.802 L1697.82 690.802 L1698.38 690.802 L1698.94 690.802 L1699.5 690.802 L1700.05 690.802 L1700.61 690.802 L1701.17 690.802 L1701.73 690.802 L1702.29 690.802 L1702.85 690.802 L1703.41 690.802 L1703.97 690.802 L1704.53 690.802 L1705.09 690.802 L1705.65 690.802 L1706.21 690.802 L1706.77 690.802 L1707.32 690.802 L1707.88 690.802 L1708.44 690.802 L1709 690.802 L1709.56 690.802 L1710.12 690.802 L1710.68 690.802 L1711.24 690.802 L1711.8 690.802 L1712.36 690.802 L1712.92 690.802 L1713.48 690.802 L1714.04 690.802 L1714.6 690.802 L1715.15 690.802 L1715.71 690.802 L1716.27 690.802 L1716.83 690.802 L1717.39 690.802 L1717.95 690.802 L1718.51 690.802 L1719.07 690.802 L1719.63 690.802 L1720.19 690.802 L1720.75 690.802 L1721.31 690.802 L1721.87 690.802 L1722.42 690.802 L1722.98 690.802 L1723.54 690.802 L1724.1 690.802 L1724.66 690.802 L1725.22 690.802 L1725.78 690.802 L1726.34 690.802 L1726.9 690.802 L1727.46 690.802 L1728.02 690.802 L1728.58 690.802 L1729.14 690.802 L1729.69 690.802 L1730.25 690.802 L1730.81 690.802 L1731.37 690.802 L1731.93 690.802 L1732.49 690.802 L1733.05 690.802 L1733.61 690.802 L1734.17 690.802 L1734.73 690.802 L1735.29 690.802 L1735.85 690.802 L1736.41 690.802 L1736.97 690.802 L1737.52 690.802 L1738.08 690.802 L1738.64 690.802 L1739.2 690.802 L1739.76 690.802 L1740.32 690.802 L1740.88 690.802 L1741.44 690.802 L1742 690.802 L1742.56 690.802 L1743.12 690.802 L1743.68 690.802 L1744.24 690.802 L1744.79 690.802 L1745.35 690.802 L1745.91 690.802 L1746.47 690.802 L1747.03 690.802 L1747.59 690.802 L1748.15 690.802 L1748.71 690.802 L1749.27 690.802 L1749.83 690.802 L1750.39 690.802 L1750.95 690.802 L1751.51 690.802 L1752.06 690.802 L1752.62 690.802 L1753.18 690.802 L1753.74 690.802 L1754.3 690.802 L1754.86 690.802 L1755.42 690.802 L1755.98 690.802 L1756.54 690.802 L1757.1 690.802 L1757.66 690.802 L1758.22 690.802 L1758.78 690.802 L1759.34 690.802 L1759.89 690.802 L1760.45 690.802 L1761.01 690.802 L1761.57 690.802 L1762.13 690.802 L1762.69 690.802 L1763.25 690.802 L1763.81 690.802 L1764.37 690.802 L1764.93 690.802 L1765.49 690.802 L1766.05 690.802 L1766.61 690.802 L1767.16 690.802 L1767.72 690.802 L1768.28 690.802 L1768.84 690.802 L1769.4 690.802 L1769.96 690.802 L1770.52 690.802 L1771.08 690.802 L1771.64 690.802 L1772.2 690.802 L1772.76 690.802 L1773.32 690.802 L1773.88 690.802 L1774.43 690.802 L1774.99 690.802 L1775.55 690.802 L1776.11 690.802 L1776.67 690.802 L1777.23 690.802 L1777.79 690.802 L1778.35 690.802 L1778.91 690.802 L1779.47 690.802 L1780.03 690.802 L1780.59 690.802 L1781.15 690.802 L1781.71 690.802 L1782.26 690.802 L1782.82 690.802 L1783.38 690.802 L1783.94 690.802 L1784.5 690.802 L1785.06 690.802 L1785.62 690.802 L1786.18 690.802 L1786.74 690.802 L1787.3 690.802 L1787.86 690.802 L1788.42 690.802 L1788.98 690.802 L1789.53 690.802 L1790.09 690.802 L1790.65 690.802 L1791.21 690.802 L1791.77 690.802 L1792.33 690.802 L1792.89 690.802 L1793.45 690.802 L1794.01 690.802 L1794.57 690.802 L1795.13 690.802 L1795.69 690.802 L1796.25 690.802 L1796.8 690.802 L1797.36 690.802 L1797.92 690.802 L1798.48 690.802 L1799.04 690.802 L1799.6 690.802 L1800.16 690.802 L1800.72 690.802 L1801.28 690.802 L1801.84 690.802 L1802.4 690.802 L1802.96 690.802 L1803.52 690.802 L1804.08 690.802 L1804.63 690.802 L1805.19 690.802 L1805.75 690.802 L1806.31 690.802 L1806.87 690.802 L1807.43 690.802 L1807.99 690.802 L1808.55 690.802 L1809.11 690.802 L1809.67 690.802 L1810.23 690.802 L1810.79 690.802 L1811.35 690.802 L1811.9 690.802 L1812.46 690.802 L1813.02 690.802 L1813.58 690.802 L1814.14 690.802 L1814.7 690.802 L1815.26 690.802 L1815.82 690.802 L1816.38 690.802 L1816.94 690.802 L1817.5 690.802 L1818.06 690.802 L1818.62 690.802 L1819.18 690.802 L1819.73 690.802 L1820.29 690.802 L1820.85 690.802 L1821.41 690.802 L1821.97 690.802 L1822.53 690.802 L1823.09 690.802 L1823.65 690.802 L1824.21 690.802 L1824.77 690.802 L1825.33 690.802 L1825.89 690.802 L1826.45 690.802 L1827 690.802 L1827.56 690.802 L1828.12 690.802 L1828.68 690.802 L1829.24 690.802 L1829.8 690.802 L1830.36 690.802 L1830.92 690.802 L1831.48 690.802 L1832.04 690.802 L1832.6 690.802 L1833.16 690.802 L1833.72 690.802 L1834.27 690.802 L1834.83 690.802 L1835.39 690.802 L1835.95 690.802 L1836.51 690.802 L1837.07 690.802 L1837.63 690.802 L1838.19 690.802 L1838.19 681.611 L1837.63 681.611 L1837.07 681.611 L1836.51 681.611 L1835.95 681.611 L1835.39 681.611 L1834.83 681.611 L1834.27 681.611 L1833.72 681.611 L1833.16 681.611 L1832.6 681.611 L1832.04 681.611 L1831.48 681.611 L1830.92 681.611 L1830.36 681.611 L1829.8 681.611 L1829.24 681.611 L1828.68 681.611 L1828.12 681.611 L1827.56 681.611 L1827 681.611 L1826.45 681.611 L1825.89 681.611 L1825.33 681.611 L1824.77 681.611 L1824.21 681.611 L1823.65 681.611 L1823.09 681.611 L1822.53 681.611 L1821.97 681.611 L1821.41 681.611 L1820.85 681.611 L1820.29 681.611 L1819.73 681.611 L1819.18 681.611 L1818.62 681.611 L1818.06 681.611 L1817.5 681.611 L1816.94 681.611 L1816.38 681.611 L1815.82 681.611 L1815.26 681.611 L1814.7 681.611 L1814.14 681.611 L1813.58 681.611 L1813.02 681.611 L1812.46 681.611 L1811.9 681.611 L1811.35 681.611 L1810.79 681.611 L1810.23 681.611 L1809.67 681.611 L1809.11 681.611 L1808.55 681.611 L1807.99 681.611 L1807.43 681.611 L1806.87 681.611 L1806.31 681.611 L1805.75 681.611 L1805.19 681.611 L1804.63 681.611 L1804.08 681.611 L1803.52 681.611 L1802.96 681.611 L1802.4 681.611 L1801.84 681.611 L1801.28 681.611 L1800.72 681.611 L1800.16 681.611 L1799.6 681.611 L1799.04 681.611 L1798.48 681.611 L1797.92 681.611 L1797.36 681.611 L1796.8 681.611 L1796.25 681.611 L1795.69 681.611 L1795.13 681.611 L1794.57 681.611 L1794.01 681.611 L1793.45 681.611 L1792.89 681.611 L1792.33 681.611 L1791.77 681.611 L1791.21 681.611 L1790.65 681.611 L1790.09 681.611 L1789.53 681.611 L1788.98 681.611 L1788.42 681.611 L1787.86 681.611 L1787.3 681.611 L1786.74 681.611 L1786.18 681.611 L1785.62 681.611 L1785.06 681.611 L1784.5 681.611 L1783.94 681.611 L1783.38 681.611 L1782.82 681.611 L1782.26 681.611 L1781.71 681.611 L1781.15 681.611 L1780.59 681.611 L1780.03 681.611 L1779.47 681.611 L1778.91 681.611 L1778.35 681.611 L1777.79 681.611 L1777.23 681.611 L1776.67 681.611 L1776.11 681.611 L1775.55 681.611 L1774.99 681.611 L1774.43 681.611 L1773.88 681.611 L1773.32 681.611 L1772.76 681.611 L1772.2 681.611 L1771.64 681.611 L1771.08 681.611 L1770.52 681.611 L1769.96 681.611 L1769.4 681.611 L1768.84 681.611 L1768.28 681.611 L1767.72 681.611 L1767.16 681.611 L1766.61 681.611 L1766.05 681.611 L1765.49 681.611 L1764.93 681.611 L1764.37 681.611 L1763.81 681.611 L1763.25 681.611 L1762.69 681.611 L1762.13 681.611 L1761.57 681.611 L1761.01 681.611 L1760.45 681.611 L1759.89 681.611 L1759.34 681.611 L1758.78 681.611 L1758.22 681.611 L1757.66 681.611 L1757.1 681.611 L1756.54 681.611 L1755.98 681.611 L1755.42 681.611 L1754.86 681.611 L1754.3 681.611 L1753.74 681.611 L1753.18 681.611 L1752.62 681.611 L1752.06 681.611 L1751.51 681.611 L1750.95 681.611 L1750.39 681.611 L1749.83 681.611 L1749.27 681.611 L1748.71 681.611 L1748.15 681.611 L1747.59 681.611 L1747.03 681.611 L1746.47 681.611 L1745.91 681.611 L1745.35 681.611 L1744.79 681.611 L1744.24 681.611 L1743.68 681.611 L1743.12 681.611 L1742.56 681.611 L1742 681.611 L1741.44 681.611 L1740.88 681.611 L1740.32 681.611 L1739.76 681.611 L1739.2 681.611 L1738.64 681.611 L1738.08 681.611 L1737.52 681.611 L1736.97 681.611 L1736.41 681.611 L1735.85 681.611 L1735.29 681.611 L1734.73 681.611 L1734.17 681.611 L1733.61 681.611 L1733.05 681.611 L1732.49 681.611 L1731.93 681.611 L1731.37 681.611 L1730.81 681.611 L1730.25 681.611 L1729.69 681.611 L1729.14 681.611 L1728.58 681.611 L1728.02 681.611 L1727.46 681.611 L1726.9 681.611 L1726.34 681.611 L1725.78 681.611 L1725.22 681.611 L1724.66 681.611 L1724.1 681.611 L1723.54 681.611 L1722.98 681.611 L1722.42 681.611 L1721.87 681.611 L1721.31 681.611 L1720.75 681.611 L1720.19 681.611 L1719.63 681.611 L1719.07 681.611 L1718.51 681.611 L1717.95 681.611 L1717.39 681.611 L1716.83 681.611 L1716.27 681.611 L1715.71 681.611 L1715.15 681.611 L1714.6 681.611 L1714.04 681.611 L1713.48 681.611 L1712.92 681.611 L1712.36 681.611 L1711.8 681.611 L1711.24 681.611 L1710.68 681.611 L1710.12 681.611 L1709.56 681.611 L1709 681.611 L1708.44 681.611 L1707.88 681.611 L1707.32 681.611 L1706.77 681.611 L1706.21 681.611 L1705.65 681.611 L1705.09 681.611 L1704.53 681.611 L1703.97 681.611 L1703.41 681.611 L1702.85 681.611 L1702.29 681.611 L1701.73 681.611 L1701.17 681.611 L1700.61 681.611 L1700.05 681.611 L1699.5 681.611 L1698.94 681.611 L1698.38 681.611 L1697.82 681.611 L1697.26 681.611 L1696.7 681.611 L1696.14 681.611 L1695.58 681.611 L1695.02 681.611 L1694.46 681.611 L1693.9 681.611 L1693.34 681.611 L1692.78 681.611 L1692.23 681.611 L1691.67 681.611 L1691.11 681.611 L1690.55 681.611 L1689.99 681.611 L1689.43 681.611 L1688.87 681.611 L1688.31 681.611 L1687.75 681.611 L1687.19 681.611 L1686.63 681.611 L1686.07 681.611 L1685.51 681.611 L1684.95 681.611 L1684.4 681.611 L1683.84 681.611 L1683.28 681.611 L1682.72 681.611 L1682.16 681.611 L1681.6 681.611 L1681.04 681.611 L1680.48 681.611 L1679.92 681.611 L1679.36 681.611 L1678.8 681.611 L1678.24 681.611 L1677.68 681.611 L1677.13 681.611 L1676.57 681.611 L1676.01 681.611 L1675.45 681.611 L1674.89 681.611 L1674.33 681.611 L1673.77 681.611 L1673.21 681.611 L1672.65 681.611 L1672.09 681.611 L1671.53 681.611 L1670.97 681.611 L1670.41 681.611 L1669.85 681.611 L1669.3 681.611 L1668.74 681.611 L1668.18 681.611 L1667.62 681.611 L1667.06 681.611 L1666.5 681.611 L1665.94 681.611 L1665.38 681.611 L1664.82 681.611 L1664.26 681.611 L1663.7 681.611 L1663.14 681.611 L1662.58 681.611 L1662.03 681.611 L1661.47 681.611 L1660.91 681.611 L1660.35 681.611 L1659.79 681.611 L1659.23 681.611 L1658.67 681.611 L1658.11 681.611 L1657.55 681.611 L1656.99 681.611 L1656.43 681.611 L1655.87 681.611 L1655.31 681.611 L1654.76 681.611 L1654.2 681.611 L1653.64 681.611 L1653.08 681.611 L1652.52 681.611 L1651.96 681.611 L1651.4 681.611 L1650.84 681.611 L1650.28 681.611 L1649.72 681.611 L1649.16 681.611 L1648.6 681.611 L1648.04 681.611 L1647.48 681.611 L1646.93 681.611 L1646.37 681.611 L1645.81 681.611 L1645.25 681.611 L1644.69 681.611 L1644.13 681.611 L1643.57 681.611 L1643.01 681.611 L1642.45 681.611 L1641.89 681.611 L1641.33 681.611 L1640.77 681.611 L1640.21 681.611 L1639.66 681.611 L1639.1 681.611 L1638.54 681.611 L1637.98 681.611 L1637.42 681.611 L1636.86 681.611 L1636.3 681.611 L1635.74 681.611 L1635.18 681.611 L1634.62 681.611 L1634.06 681.611 L1633.5 681.611 L1632.94 681.611 L1632.39 681.611 L1631.83 681.611 L1631.27 681.611 L1630.71 681.611 L1630.15 681.611 L1629.59 681.611 L1629.03 681.611 L1628.47 681.611 L1627.91 681.611 L1627.35 681.611 L1626.79 681.611 L1626.23 681.611 L1625.67 681.611 L1625.11 681.611 L1624.56 681.611 L1624 681.611 L1623.44 681.611 L1622.88 681.611 L1622.32 681.611 L1621.76 681.611 L1621.2 681.611 L1620.64 681.611 L1620.08 681.611 L1619.52 681.611 L1618.96 681.611 L1618.4 681.611 L1617.84 681.611 L1617.29 681.611 L1616.73 681.611 L1616.17 681.611 L1615.61 681.611 L1615.05 681.611 L1614.49 681.611 L1613.93 681.611 L1613.37 681.611 L1612.81 681.611 L1612.25 681.611 L1611.69 681.611 L1611.13 681.611 L1610.57 681.611 L1610.02 681.611 L1609.46 681.611 L1608.9 681.611 L1608.34 681.611 L1607.78 681.611 L1607.22 681.611 L1606.66 681.611 L1606.1 681.611 L1605.54 681.611 L1604.98 681.611 L1604.42 681.611 L1603.86 681.611 L1603.3 681.611 L1602.74 681.611 L1602.19 681.611 L1601.63 681.611 L1601.07 681.611 L1600.51 681.611 L1599.95 681.611 L1599.39 681.611 L1598.83 681.611 L1598.27 681.611 L1597.71 681.611 L1597.15 681.611 L1596.59 681.611 L1596.03 681.611 L1595.47 681.611 L1594.92 681.611 L1594.36 681.611 L1593.8 681.611 L1593.24 681.611 L1592.68 681.611 L1592.12 681.611 L1591.56 681.611 L1591 681.611 L1590.44 681.611 L1589.88 681.611 L1589.32 681.611 L1588.76 681.611 L1588.2 681.611 L1587.65 681.611 L1587.09 681.611 L1586.53 681.611 L1585.97 681.611 L1585.41 681.611 L1584.85 681.611 L1584.29 681.611 L1583.73 681.611 L1583.17 681.611 L1582.61 681.611 L1582.05 681.611 L1581.49 681.611 L1580.93 681.611 L1580.37 681.611 L1579.82 681.611 L1579.26 681.611 L1578.7 681.611 L1578.14 681.611 L1577.58 681.611 L1577.02 681.611 L1576.46 681.611 L1575.9 681.611 L1575.34 681.611 L1574.78 681.611 L1574.22 681.611 L1573.66 681.611 L1573.1 681.611 L1572.55 681.611 L1571.99 681.611 L1571.43 681.611 L1570.87 681.611 L1570.31 681.611 L1569.75 681.611 L1569.19 681.611 L1568.63 681.611 L1568.07 681.611 L1567.51 681.611 L1566.95 681.611 L1566.39 681.611 L1565.83 681.611 L1565.28 681.611 L1564.72 681.611 L1564.16 681.611 L1563.6 681.611 L1563.04 681.611 L1562.48 681.611 L1561.92 681.611 L1561.36 681.611 L1560.8 681.611 L1560.24 681.611 L1559.68 681.611 L1559.12 681.611 L1558.56 681.611 L1558 681.611 L1557.45 681.611 L1556.89 681.611 L1556.33 681.611 L1555.77 681.611 L1555.21 681.611 L1554.65 681.611 L1554.09 681.611 L1553.53 681.611 L1552.97 681.611 L1552.41 681.611 L1551.85 681.611 L1551.29 681.611 L1550.73 681.611 L1550.18 681.611 L1549.62 681.611 L1549.06 681.611 L1548.5 681.611 L1547.94 681.611 L1547.38 681.611 L1546.82 681.611 L1546.26 681.611 L1545.7 681.611 L1545.14 681.611 L1544.58 681.611 L1544.02 681.611 L1543.46 681.611 L1542.9 681.611 L1542.35 681.611 L1541.79 681.611 L1541.23 681.611 L1540.67 681.611 L1540.11 681.611 L1539.55 681.611 L1538.99 681.611 L1538.43 681.611 L1537.87 681.611 L1537.31 681.611 L1536.75 681.611 L1536.19 681.611 L1535.63 681.611 L1535.08 681.611 L1534.52 681.611 L1533.96 681.611 L1533.4 681.611 L1532.84 681.611 L1532.28 681.611 L1531.72 681.611 L1531.16 681.611 L1530.6 681.611 L1530.04 681.611 L1529.48 681.611 L1528.92 681.611 L1528.36 681.611 L1527.81 681.611 L1527.25 681.611 L1526.69 681.611 L1526.13 681.611 L1525.57 681.611 L1525.01 681.611 L1524.45 681.611 L1523.89 681.611 L1523.33 681.611 L1522.77 681.611 L1522.21 681.611 L1521.65 681.611 L1521.09 681.611 L1520.53 681.611 L1519.98 681.611 L1519.42 681.611 L1518.86 681.611 L1518.3 681.611 L1517.74 681.611 L1517.18 681.611 L1516.62 681.611 L1516.06 681.611 L1515.5 681.611 L1514.94 681.611 L1514.38 681.611 L1513.82 681.611 L1513.26 681.611 L1512.71 681.611 L1512.15 681.611 L1511.59 681.611 L1511.03 681.611 L1510.47 681.611 L1509.91 681.611 L1509.35 681.611 L1508.79 681.611 L1508.23 681.611 L1507.67 681.611 L1507.11 681.611 L1506.55 681.611 L1505.99 681.611 L1505.44 681.611 L1504.88 681.611 L1504.32 681.611 L1503.76 681.611 L1503.2 681.611 L1502.64 681.611 L1502.08 681.611 L1501.52 681.611 L1500.96 681.611 L1500.4 681.611 L1499.84 681.611 L1499.28 681.611 L1498.72 681.611 L1498.16 681.611 L1497.61 681.611 L1497.05 681.611 L1496.49 681.611 L1495.93 681.611 L1495.37 681.611 L1494.81 681.611 L1494.25 681.611 L1493.69 681.611 L1493.13 681.611 L1492.57 681.611 L1492.01 681.611 L1491.45 681.611 L1490.89 681.611 L1490.34 681.611 L1489.78 681.611 L1489.22 681.611 L1488.66 681.611 L1488.1 681.611 L1487.54 681.611 L1486.98 681.611 L1486.42 681.611 L1485.86 681.611 L1485.3 681.611 L1484.74 681.611 L1484.18 681.611 L1483.62 681.611 L1483.07 681.611 L1482.51 681.611 L1481.95 681.611 L1481.39 681.611 L1480.83 681.611 L1480.27 681.611 L1479.71 681.611 L1479.15 681.611 L1478.59 681.611 L1478.03 681.611 L1477.47 681.611 L1476.91 681.611 L1476.35 681.611 L1475.79 681.611 L1475.24 681.611 L1474.68 681.611 L1474.12 681.611 L1473.56 681.611 L1473 681.611 L1472.44 681.611 L1471.88 681.611 L1471.32 681.611 L1470.76 681.611 L1470.2 681.611 L1469.64 681.611 L1469.08 681.611 L1468.52 681.611 L1467.97 681.611 L1467.41 681.611 L1466.85 681.611 L1466.29 681.611 L1465.73 681.611 L1465.17 681.611 L1464.61 681.611 L1464.05 681.611 L1463.49 681.611 L1462.93 681.611 L1462.37 681.611 L1461.81 681.611 L1461.25 681.611 L1460.7 681.611 L1460.14 681.611 L1459.58 681.611 L1459.02 681.611 L1458.46 681.611 L1457.9 681.611 L1457.34 681.611 L1456.78 681.611 L1456.22 681.611 L1455.66 681.611 L1455.1 681.611 L1454.54 681.611 L1453.98 681.611 L1453.42 681.611 L1452.87 681.611 L1452.31 681.611 L1451.75 681.611 L1451.19 681.611 L1450.63 681.611 L1450.07 681.611 L1449.51 681.611 L1448.95 681.611 L1448.39 681.611 L1447.83 681.611 L1447.27 681.611 L1446.71 681.611 L1446.15 681.611 L1445.6 681.611 L1445.04 681.611 L1444.48 681.611 L1443.92 681.611 L1443.36 681.611 L1442.8 681.611 L1442.24 681.611 L1441.68 681.611 L1441.12 681.611 L1440.56 681.611 L1440 681.611 L1439.44 681.611 L1438.88 681.611 L1438.33 681.611 L1437.77 681.611 L1437.21 681.611 L1436.65 681.611 L1436.09 681.611 L1435.53 681.611 L1434.97 681.611 L1434.41 681.611 L1433.85 681.611 L1433.29 681.611 L1432.73 681.611 L1432.17 681.611 L1431.61 681.611 L1431.05 681.611 L1430.5 681.611 L1429.94 681.611 L1429.38 681.611 L1428.82 681.611 L1428.26 681.611 L1427.7 681.611 L1427.14 681.611 L1426.58 681.611 L1426.02 681.611 L1425.46 681.611 L1424.9 681.611 L1424.34 681.611 L1423.78 681.611 L1423.23 681.611 L1422.67 681.611 L1422.11 681.611 L1421.55 681.611 L1420.99 681.611 L1420.43 681.611 L1419.87 681.611 L1419.31 681.611 L1418.75 681.611 L1418.19 681.611 L1417.63 681.611 L1417.07 681.611 L1416.51 681.611 L1415.95 681.611 L1415.4 681.611 L1414.84 681.611 L1414.28 681.611 L1413.72 681.611 L1413.16 681.611 L1412.6 681.611 L1412.04 681.611 L1411.48 681.611 L1410.92 681.611 L1410.36 681.611 L1409.8 681.611 L1409.24 681.611 L1408.68 681.611 L1408.13 681.611 L1407.57 681.611 L1407.01 681.611 L1406.45 681.611 L1405.89 681.611 L1405.33 681.611 L1404.77 681.611 L1404.21 681.611 L1403.65 681.611 L1403.09 681.611 L1402.53 681.611 L1401.97 681.611 L1401.41 681.611 L1400.86 681.611 L1400.3 681.611 L1399.74 681.611 L1399.18 681.611 L1398.62 681.611 L1398.06 681.611 L1397.5 681.611 L1396.94 681.611 L1396.38 681.611 L1395.82 681.611 L1395.26 681.611 L1394.7 681.611 L1394.14 681.611 L1393.58 681.611 L1393.03 681.611 L1392.47 681.611 L1391.91 681.611 L1391.35 681.611 L1390.79 681.611 L1390.23 681.611 L1389.67 681.611 L1389.11 681.611 L1388.55 681.611 L1387.99 681.611 L1387.43 681.611 L1386.87 681.611 L1386.31 681.611 L1385.76 681.611 L1385.2 681.611 L1384.64 681.611 L1384.08 681.611 L1383.52 681.611 L1382.96 681.611 L1382.4 681.611 L1381.84 681.611 L1381.28 681.611 L1380.72 681.611 L1380.16 681.611 L1379.6 681.611 L1379.04 681.611 L1378.49 681.611 L1377.93 681.611 L1377.37 681.611 L1376.81 681.611 L1376.25 681.611 L1375.69 681.611 L1375.13 681.611 L1374.57 681.611 L1374.01 681.611 L1373.45 681.611 L1372.89 681.611 L1372.33 681.611 L1371.77 681.611 L1371.21 681.611 L1370.66 681.611 L1370.1 681.611 L1369.54 681.611 L1368.98 681.611 L1368.42 681.611 L1367.86 681.611 L1367.3 681.611 L1366.74 681.611 L1366.18 681.611 L1365.62 681.611 L1365.06 681.611 L1364.5 681.611 L1363.94 681.611 L1363.39 681.611 L1362.83 681.611 L1362.27 681.611 L1361.71 681.611 L1361.15 681.611 L1360.59 681.611 L1360.03 681.611 L1359.47 681.611 L1358.91 681.611 L1358.35 681.611 L1357.79 681.611 L1357.23 681.611 L1356.67 681.611 L1356.12 681.611 L1355.56 681.611 L1355 681.611 L1354.44 681.611 L1353.88 681.611 L1353.32 681.611 L1352.76 681.611 L1352.2 681.611 L1351.64 681.611 L1351.08 681.611 L1350.52 681.611 L1349.96 681.611 L1349.4 681.611 L1348.84 681.611 L1348.29 681.611 L1347.73 681.611 L1347.17 681.611 L1346.61 681.611 L1346.05 681.611 L1345.49 681.611 L1344.93 681.611 L1344.37 681.611 L1343.81 681.611 L1343.25 681.611 L1342.69 681.611 L1342.13 681.611 L1341.57 681.611 L1341.02 681.611 L1340.46 681.611 L1339.9 681.611 L1339.34 681.611 L1338.78 681.611 L1338.22 681.611 L1337.66 681.611 L1337.1 681.611 L1336.54 681.611 L1335.98 681.611 L1335.42 681.611 L1334.86 681.611 L1334.3 681.611 L1333.75 681.611 L1333.19 681.611 L1332.63 681.611 L1332.07 681.611 L1331.51 681.611 L1330.95 681.611 L1330.39 681.611 L1329.83 681.611 L1329.27 681.611 L1328.71 681.611 L1328.15 681.611 L1327.59 681.611 L1327.03 681.611 L1326.47 681.611 L1325.92 681.611 L1325.36 681.611 L1324.8 681.611 L1324.24 681.611 L1323.68 681.611 L1323.12 681.611 L1322.56 681.611 L1322 681.611 L1321.44 681.611 L1320.88 681.611 L1320.32 681.611 L1319.76 681.611 L1319.2 681.611 L1318.65 681.611 L1318.09 681.611 L1317.53 681.611 L1316.97 681.611 L1316.41 681.611 L1315.85 681.611 L1315.29 681.611 L1314.73 681.611 L1314.17 681.611 L1313.61 681.611 L1313.05 681.611 L1312.49 681.611 L1311.93 681.611 L1311.38 681.611 L1310.82 681.611 L1310.26 681.611 L1309.7 681.611 L1309.14 681.611 L1308.58 681.611 L1308.02 681.611 L1307.46 681.611 L1306.9 681.611 L1306.34 681.611 L1305.78 681.611 L1305.22 681.611 L1304.66 681.611 L1304.1 681.611 L1303.55 681.611 L1302.99 681.611 L1302.43 681.611 L1301.87 681.611 L1301.31 681.611 L1300.75 681.611 L1300.19 681.611 L1299.63 681.611 L1299.07 681.611 L1298.51 681.611 L1297.95 681.611 L1297.39 681.611 L1296.83 681.611 L1296.28 681.611 L1295.72 681.611 L1295.16 681.611 L1294.6 681.611 L1294.04 681.611 L1293.48 681.611 L1292.92 681.611 L1292.36 681.611 L1291.8 681.611 L1291.24 681.611 L1290.68 681.611 L1290.12 681.611 L1289.56 681.611 L1289 681.611 L1288.45 681.611 L1287.89 681.611 L1287.33 681.611 L1286.77 681.611 L1286.21 681.611 L1285.65 681.611 L1285.09 681.611 L1284.53 681.611 L1283.97 681.611 L1283.41 681.611 L1282.85 681.611 L1282.29 681.611 L1281.73 681.611 L1281.18 681.611 L1280.62 681.611 L1280.06 681.611 L1279.5 681.611 L1278.94 681.611 L1278.38 681.611 L1277.82 681.611 L1277.26 681.611 L1276.7 681.611 L1276.14 681.611 L1275.58 681.611 L1275.02 681.611 L1274.46 681.611 L1273.91 681.611 L1273.35 681.611 L1272.79 681.611 L1272.23 681.611 L1271.67 681.611 L1271.11 681.611 L1270.55 681.611 L1269.99 681.611 L1269.43 681.611 L1268.87 681.611 L1268.31 681.611 L1267.75 681.611 L1267.19 681.611 L1266.63 681.611 L1266.08 681.611 L1265.52 681.611 L1264.96 681.611 L1264.4 681.611 L1263.84 681.611 L1263.28 681.611 L1262.72 681.611 L1262.16 681.611 L1261.6 681.611 L1261.04 681.611 L1260.48 681.611 L1259.92 681.611 L1259.36 681.611 L1258.81 681.611 L1258.25 681.611 L1257.69 681.611 L1257.13 681.611 L1256.57 681.611 L1256.01 681.611 L1255.45 681.611 L1254.89 681.611 L1254.33 681.611 L1253.77 681.611 L1253.21 681.611 L1252.65 681.611 L1252.09 681.611 L1251.54 681.611 L1250.98 681.611 L1250.42 681.611 L1249.86 681.611 L1249.3 681.611 L1248.74 681.611 L1248.18 681.611 L1247.62 681.611 L1247.06 681.611 L1246.5 681.611 L1245.94 681.611 L1245.38 681.611 L1244.82 681.611 L1244.26 681.611 L1243.71 681.611 L1243.15 681.611 L1242.59 681.611 L1242.03 681.611 L1241.47 681.611 L1240.91 681.611 L1240.35 681.611 L1239.79 681.611 L1239.23 681.611 L1238.67 681.611 L1238.11 681.611 L1237.55 681.611 L1236.99 681.611 L1236.44 681.611 L1235.88 681.611 L1235.32 681.611 L1234.76 681.611 L1234.2 681.611 L1233.64 681.611 L1233.08 681.611 L1232.52 681.611 L1231.96 681.611 L1231.4 681.611 L1230.84 681.611 L1230.28 681.611 L1229.72 681.611 L1229.17 681.611 L1228.61 681.611 L1228.05 681.611 L1227.49 681.611 L1226.93 681.611 L1226.37 681.611 L1225.81 681.611 L1225.25 681.611 L1224.69 681.611 L1224.13 681.611 L1223.57 681.611 L1223.01 681.611 L1222.45 681.611 L1221.89 681.611 L1221.34 681.611 L1220.78 681.611 L1220.22 681.611 L1219.66 681.611 L1219.1 681.611 L1218.54 681.611 L1217.98 681.611 L1217.42 681.611 L1216.86 681.611 L1216.3 681.611 L1215.74 681.611 L1215.18 681.611 L1214.62 681.611 L1214.07 681.611 L1213.51 681.611 L1212.95 681.611 L1212.39 681.611 L1211.83 681.611 L1211.27 681.611 L1210.71 681.611 L1210.15 681.611 L1209.59 681.611 L1209.03 681.611 L1208.47 681.611 L1207.91 681.611 L1207.35 681.611 L1206.8 681.611 L1206.24 681.611 L1205.68 681.611 L1205.12 681.611 L1204.56 681.611 L1204 681.611 L1203.44 681.611 L1202.88 681.611 L1202.32 681.611 L1201.76 681.611 L1201.2 681.611 L1200.64 681.611 L1200.08 681.611 L1199.52 681.611 L1198.97 681.611 L1198.41 681.611 L1197.85 681.611 L1197.29 681.611 L1196.73 681.611 L1196.17 681.611 L1195.61 681.611 L1195.05 681.611 L1194.49 681.611 L1193.93 681.611 L1193.37 681.611 L1192.81 681.611 L1192.25 681.611 L1191.7 681.611 L1191.14 681.611 L1190.58 681.611 L1190.02 681.611 L1189.46 681.611 L1188.9 681.611 L1188.34 681.611 L1187.78 681.611 L1187.22 681.611 L1186.66 681.611 L1186.1 681.611 L1185.54 681.611 L1184.98 681.611 L1184.43 681.611 L1183.87 681.611 L1183.31 681.611 L1182.75 681.611 L1182.19 681.611 L1181.63 681.611 L1181.07 681.611 L1180.51 681.611 L1179.95 681.611 L1179.39 681.611 L1178.83 681.611 L1178.27 681.611 L1177.71 681.611 L1177.15 681.611 L1176.6 681.611 L1176.04 681.611 L1175.48 681.611 L1174.92 681.611 L1174.36 681.611 L1173.8 681.611 L1173.24 681.611 L1172.68 681.611 L1172.12 681.611 L1171.56 681.611 L1171 681.611 L1170.44 681.611 L1169.88 681.611 L1169.33 681.611 L1168.77 681.611 L1168.21 681.611 L1167.65 681.611 L1167.09 681.611 L1166.53 681.611 L1165.97 681.611 L1165.41 681.611 L1164.85 681.611 L1164.29 681.611 L1163.73 681.611 L1163.17 681.611 L1162.61 681.611 L1162.05 681.611 L1161.5 681.611 L1160.94 681.611 L1160.38 681.611 L1159.82 681.611 L1159.26 681.611 L1158.7 681.611 L1158.14 681.611 L1157.58 681.611 L1157.02 681.611 L1156.46 681.611 L1155.9 681.611 L1155.34 681.611 L1154.78 681.611 L1154.23 681.611 L1153.67 681.611 L1153.11 681.611 L1152.55 681.611 L1151.99 681.611 L1151.43 681.611 L1150.87 681.611 L1150.31 681.611 L1149.75 681.611 L1149.19 681.611 L1148.63 681.611 L1148.07 681.611 L1147.51 681.611 L1146.96 681.611 L1146.4 681.611 L1145.84 681.611 L1145.28 681.611 L1144.72 681.611 L1144.16 681.611 L1143.6 681.611 L1143.04 681.611 L1142.48 681.611 L1141.92 681.611 L1141.36 681.611 L1140.8 681.611 L1140.24 681.611 L1139.68 681.611 L1139.13 681.611 L1138.57 681.611 L1138.01 681.611 L1137.45 681.611 L1136.89 681.611 L1136.33 681.611 L1135.77 681.611 L1135.21 681.611 L1134.65 681.611 L1134.09 681.611 L1133.53 681.611 L1132.97 681.611 L1132.41 681.611 L1131.86 681.611 L1131.3 681.611 L1130.74 681.611 L1130.18 681.611 L1129.62 681.611 L1129.06 681.611 L1128.5 681.611 L1127.94 681.611 L1127.38 681.611 L1126.82 681.611 L1126.26 681.611 L1125.7 681.611 L1125.14 681.611 L1124.59 681.611 L1124.03 681.611 L1123.47 681.611 L1122.91 681.611 L1122.35 681.611 L1121.79 681.611 L1121.23 681.611 L1120.67 681.611 L1120.11 681.611 L1119.55 681.611 L1118.99 681.611 L1118.43 681.611 L1117.87 681.611 L1117.31 681.611 L1116.76 681.611 L1116.2 681.611 L1115.64 681.611 L1115.08 681.611 L1114.52 681.611 L1113.96 681.611 L1113.4 681.611 L1112.84 681.611 L1112.28 681.611 L1111.72 681.611 L1111.16 681.611 L1110.6 681.611 L1110.04 681.611 L1109.49 681.611 L1108.93 681.611 L1108.37 681.611 L1107.81 681.611 L1107.25 681.611 L1106.69 681.611 L1106.13 681.611 L1105.57 681.611 L1105.01 681.611 L1104.45 681.611 L1103.89 681.611 L1103.33 681.611 L1102.77 681.611 L1102.22 681.611 L1101.66 681.611 L1101.1 681.611 L1100.54 681.611 L1099.98 681.611 L1099.42 681.611 L1098.86 681.611 L1098.3 681.611 L1097.74 681.611 L1097.18 681.611 L1096.62 681.611 L1096.06 681.611 L1095.5 681.611 L1094.94 681.611 L1094.39 681.611 L1093.83 681.611 L1093.27 681.611 L1092.71 681.611 L1092.15 681.611 L1091.59 681.611 L1091.03 681.611 L1090.47 681.611 L1089.91 681.611 L1089.35 681.611 L1088.79 681.611 L1088.23 681.611 L1087.67 681.611 L1087.12 681.611 L1086.56 681.611 L1086 681.611 L1085.44 681.611 L1084.88 681.611 L1084.32 681.611 L1083.76 681.611 L1083.2 681.611 L1082.64 681.611 L1082.08 681.611 L1081.52 681.611 L1080.96 681.611 L1080.4 681.611 L1079.85 681.611 L1079.29 681.611 L1078.73 681.611 L1078.17 681.611 L1077.61 681.611 L1077.05 681.611 L1076.49 681.611 L1075.93 681.611 L1075.37 681.611 L1074.81 681.611 L1074.25 681.611 L1073.69 681.611 L1073.13 681.611 L1072.57 681.611 L1072.02 681.611 L1071.46 681.611 L1070.9 681.611 L1070.34 681.611 L1069.78 681.611 L1069.22 681.611 L1068.66 681.611 L1068.1 681.611 L1067.54 681.611 L1066.98 681.611 L1066.42 681.611 L1065.86 681.611 L1065.3 681.611 L1064.75 681.611 L1064.19 681.611 L1063.63 681.611 L1063.07 681.611 L1062.51 681.611 L1061.95 681.611 L1061.39 681.611 L1060.83 681.611 L1060.27 681.611 L1059.71 681.611 L1059.15 681.611 L1058.59 681.611 L1058.03 681.611 L1057.48 681.611 L1056.92 681.611 L1056.36 681.611 L1055.8 681.611 L1055.24 681.611 L1054.68 681.611 L1054.12 681.611 L1053.56 681.611 L1053 681.611 L1052.44 681.611 L1051.88 681.611 L1051.32 681.611 L1050.76 681.611 L1050.2 681.611 L1049.65 681.611 L1049.09 681.611 L1048.53 681.611 L1047.97 681.611 L1047.41 681.611 L1046.85 681.611 L1046.29 681.611 L1045.73 681.611 L1045.17 681.611 L1044.61 681.611 L1044.05 681.611 L1043.49 681.611 L1042.93 681.611 L1042.38 681.611 L1041.82 681.611 L1041.26 681.611 L1040.7 681.611 L1040.14 681.611 L1039.58 681.611 L1039.02 681.611 L1038.46 681.611 L1037.9 681.611 L1037.34 681.611 L1036.78 681.611 L1036.22 681.611 L1035.66 681.611 L1035.1 681.611 L1034.55 681.611 L1033.99 681.611 L1033.43 681.611 L1032.87 681.611 L1032.31 681.611 L1031.75 681.611 L1031.19 681.611 L1030.63 681.611 L1030.07 681.611 L1029.51 681.611 L1028.95 681.611 L1028.39 681.611 L1027.83 681.611 L1027.28 681.611 L1026.72 681.611 L1026.16 681.611 L1025.6 681.611 L1025.04 681.611 L1024.48 681.611 L1023.92 681.611 L1023.36 681.611 L1022.8 681.611 L1022.24 681.611 L1021.68 681.611 L1021.12 681.611 L1020.56 681.611 L1020.01 681.611 L1019.45 681.611 L1018.89 681.611 L1018.33 681.611 L1017.77 681.611 L1017.21 681.611 L1016.65 681.611 L1016.09 681.611 L1015.53 681.611 L1014.97 681.611 L1014.41 681.611 L1013.85 681.611 L1013.29 681.611 L1012.73 681.611 L1012.18 681.611 L1011.62 681.611 L1011.06 681.611 L1010.5 681.611 L1009.94 681.611 L1009.38 681.611 L1008.82 681.611 L1008.26 681.611 L1007.7 681.611 L1007.14 681.611 L1006.58 681.611 L1006.02 681.611 L1005.46 681.611 L1004.91 681.611 L1004.35 681.611 L1003.79 681.611 L1003.23 681.611 L1002.67 681.611 L1002.11 681.611 L1001.55 681.611 L1000.99 681.611 L1000.43 681.611 L999.872 681.611 L999.313 681.611 L998.754 681.611 L998.194 681.611 L997.635 681.611 L997.076 681.611 L996.517 681.611 L995.957 681.611 L995.398 681.611 L994.839 681.611 L994.28 681.611 L993.72 681.611 L993.161 681.611 L992.602 681.611 L992.043 681.611 L991.483 681.611 L990.924 681.611 L990.365 681.611 L989.806 681.611 L989.246 681.611 L988.687 681.611 L988.128 681.611 L987.569 681.611 L987.009 681.611 L986.45 681.611 L985.891 681.611 L985.332 681.611 L984.772 681.611 L984.213 681.611 L983.654 681.611 L983.095 681.611 L982.535 681.611 L981.976 681.611 L981.417 681.611 L980.858 681.611 L980.298 681.611 L979.739 681.611 L979.18 681.611 L978.621 681.611 L978.061 681.611 L977.502 681.611 L976.943 681.611 L976.384 681.611 L975.824 681.611 L975.265 681.611 L974.706 681.611 L974.147 681.611 L973.587 681.611 L973.028 681.611 L972.469 681.611 L971.91 681.611 L971.35 681.611 L970.791 681.611 L970.232 681.611 L969.673 681.611 L969.113 681.611 L968.554 681.611 L967.995 681.611 L967.436 681.611 L966.876 681.611 L966.317 681.611 L965.758 681.611 L965.199 681.611 L964.639 681.611 L964.08 681.611 L963.521 681.611 L962.962 681.611 L962.402 681.611 L961.843 681.611 L961.284 681.611 L960.725 681.611 L960.165 681.611 L959.606 681.611 L959.047 681.611 L958.488 681.611 L957.928 681.611 L957.369 681.611 L956.81 681.611 L956.251 681.611 L955.691 681.611 L955.132 681.611 L954.573 681.611 L954.014 681.611 L953.454 681.611 L952.895 681.611 L952.336 681.611 L951.777 681.611 L951.217 681.611 L950.658 681.611 L950.099 681.611 L949.54 681.611 L948.98 681.611 L948.421 681.611 L947.862 681.611 L947.303 681.611 L946.743 681.611 L946.184 681.611 L945.625 681.611 L945.066 681.611 L944.506 681.611 L943.947 681.611 L943.388 681.611 L942.829 681.611 L942.269 681.611 L941.71 681.611 L941.151 681.611 L940.592 681.611 L940.032 681.611 L939.473 681.611 L938.914 681.611 L938.355 681.611 L937.795 681.611 L937.236 681.611 L936.677 681.611 L936.118 681.611 L935.558 681.611 L934.999 681.611 L934.44 681.611 L933.881 681.611 L933.321 681.611 L932.762 681.611 L932.203 681.611 L931.644 681.611 L931.084 681.611 L930.525 681.611 L929.966 681.611 L929.406 681.611 L928.847 681.611 L928.288 681.611 L927.729 681.611 L927.169 681.611 L926.61 681.611 L926.051 681.611 L925.492 681.611 L924.932 681.611 L924.373 681.611 L923.814 681.611 L923.255 681.611 L922.695 681.611 L922.136 681.611 L921.577 681.611 L921.018 681.611 L920.458 681.611 L919.899 681.611 L919.34 681.611 L918.781 681.611 L918.221 681.611 L917.662 681.611 L917.103 681.611 L916.544 681.611 L915.984 681.611 L915.425 681.611 L914.866 681.611 L914.307 681.611 L913.747 681.611 L913.188 681.611 L912.629 681.611 L912.07 681.611 L911.51 681.611 L910.951 681.611 L910.392 681.611 L909.833 681.611 L909.273 681.611 L908.714 681.611 L908.155 681.611 L907.596 681.611 L907.036 681.611 L906.477 681.611 L905.918 681.611 L905.359 681.611 L904.799 681.611 L904.24 681.611 L903.681 681.611 L903.122 681.611 L902.562 681.611 L902.003 681.611 L901.444 681.611 L900.885 681.611 L900.325 681.611 L899.766 681.611 L899.207 681.611 L898.648 681.611 L898.088 681.611 L897.529 681.611 L896.97 681.611 L896.411 681.611 L895.851 681.611 L895.292 681.611 L894.733 681.611 L894.174 681.611 L893.614 681.611 L893.055 681.611 L892.496 681.611 L891.937 681.611 L891.377 681.611 L890.818 681.611 L890.259 681.611 L889.7 681.611 L889.14 681.611 L888.581 681.611 L888.022 681.611 L887.463 681.611 L886.903 681.611 L886.344 681.611 L885.785 681.611 L885.226 681.611 L884.666 681.611 L884.107 681.611 L883.548 681.611 L882.989 681.611 L882.429 681.611 L881.87 681.611 L881.311 681.611 L880.752 681.611 L880.192 681.611 L879.633 681.611 L879.074 681.611 L878.515 681.611 L877.955 681.611 L877.396 681.611 L876.837 681.611 L876.278 681.611 L875.718 681.611 L875.159 681.611 L874.6 681.611 L874.041 681.611 L873.481 681.611 L872.922 681.611 L872.363 681.611 L871.804 681.611 L871.244 681.611 L870.685 681.611 L870.126 681.611 L869.567 681.611 L869.007 681.611 L868.448 681.611 L867.889 681.611 L867.33 681.611 L866.77 681.611 L866.211 681.611 L865.652 681.611 L865.093 681.611 L864.533 681.611 L863.974 681.611 L863.415 681.611 L862.856 681.611 L862.296 681.611 L861.737 681.611 L861.178 681.611 L860.619 681.611 L860.059 681.611 L859.5 681.611 L858.941 681.611 L858.382 681.611 L857.822 681.611 L857.263 681.611 L856.704 681.611 L856.145 681.611 L855.585 681.611 L855.026 681.611 L854.467 681.611 L853.908 681.611 L853.348 681.611 L852.789 681.611 L852.23 681.611 L851.671 681.611 L851.111 681.611 L850.552 681.611 L849.993 681.611 L849.434 681.611 L848.874 681.611 L848.315 681.611 L847.756 681.611 L847.197 681.611 L846.637 681.611 L846.078 681.611 L845.519 681.611 L844.96 681.611 L844.4 681.611 L843.841 681.611 L843.282 681.611 L842.723 681.611 L842.163 681.611 L841.604 681.611 L841.045 681.611 L840.486 681.611 L839.926 681.611 L839.367 681.611 L838.808 681.611 L838.249 681.611 L837.689 681.611 L837.13 681.611 L836.571 681.611 L836.012 681.611 L835.452 681.611 L834.893 681.611 L834.334 681.611 L833.775 681.611 L833.215 681.611 L832.656 681.611 L832.097 681.611 L831.538 681.611 L830.978 681.611 L830.419 681.611 L829.86 681.611 L829.301 681.611 L828.741 681.611 L828.182 681.611 L827.623 681.611 L827.064 681.611 L826.504 681.611 L825.945 681.611 L825.386 681.611 L824.827 681.611 L824.267 681.611 L823.708 681.611 L823.149 681.611 L822.59 681.611 L822.03 681.611 L821.471 681.611 L820.912 681.611 L820.353 681.611 L819.793 681.611 L819.234 681.611 L818.675 681.611 L818.116 681.611 L817.556 681.611 L816.997 681.611 L816.438 681.611 L815.879 681.611 L815.319 681.611 L814.76 681.611 L814.201 681.611 L813.642 681.611 L813.082 681.611 L812.523 681.611 L811.964 681.611 L811.405 681.611 L810.845 681.611 L810.286 681.611 L809.727 681.611 L809.168 681.611 L808.608 681.611 L808.049 681.611 L807.49 681.611 L806.931 681.611 L806.371 681.611 L805.812 681.611 L805.253 681.611 L804.693 681.611 L804.134 681.611 L803.575 681.611 L803.016 681.611 L802.456 681.611 L801.897 681.611 L801.338 681.611 L800.779 681.611 L800.219 681.611 L799.66 681.611 L799.101 681.611 L798.542 681.611 L797.982 681.611 L797.423 681.611 L796.864 681.611 L796.305 681.611 L795.745 681.611 L795.186 681.611 L794.627 681.611 L794.068 681.611 L793.508 681.611 L792.949 681.611 L792.39 681.611 L791.831 681.611 L791.271 681.611 L790.712 681.611 L790.153 681.611 L789.594 681.611 L789.034 681.611 L788.475 681.611 L787.916 681.611 L787.357 681.611 L786.797 681.611 L786.238 681.611 L785.679 681.611 L785.12 681.611 L784.56 681.611 L784.001 681.611 L783.442 681.611 L782.883 681.611 L782.323 681.611 L781.764 681.611 L781.205 681.611 L780.646 681.611 L780.086 681.611 L779.527 681.611 L778.968 681.611 L778.409 681.611 L777.849 681.611 L777.29 681.611 L776.731 681.611 L776.172 681.611 L775.612 681.611 L775.053 681.611 L774.494 681.611 L773.935 681.611 L773.375 681.611 L772.816 681.611 L772.257 681.611 L771.698 681.611 L771.138 681.611 L770.579 681.611 L770.02 681.611 L769.461 681.611 L768.901 681.611 L768.342 681.611 L767.783 681.611 L767.224 681.611 L766.664 681.611 L766.105 681.611 L765.546 681.611 L764.987 681.611 L764.427 681.611 L763.868 681.611 L763.309 681.611 L762.75 681.611 L762.19 681.611 L761.631 681.611 L761.072 681.611 L760.513 681.611 L759.953 681.611 L759.394 681.611 L758.835 681.611 L758.276 681.611 L757.716 681.611 L757.157 681.611 L756.598 681.611 L756.039 681.611 L755.479 681.611 L754.92 681.611 L754.361 681.611 L753.802 681.611 L753.242 681.611 L752.683 681.611 L752.124 681.611 L751.565 681.611 L751.005 681.611 L750.446 681.611 L749.887 681.611 L749.328 681.611 L748.768 681.611 L748.209 681.611 L747.65 681.611 L747.091 681.611 L746.531 681.611 L745.972 681.611 L745.413 681.611 L744.854 681.611 L744.294 681.611 L743.735 681.611 L743.176 681.611 L742.617 681.611 L742.057 681.611 L741.498 681.611 L740.939 681.611 L740.38 681.611 L739.82 681.611 L739.261 681.611 L738.702 681.611 L738.143 681.611 L737.583 681.611 L737.024 681.611 L736.465 681.611 L735.906 681.611 L735.346 681.611 L734.787 681.611 L734.228 681.611 L733.669 681.611 L733.109 681.611 L732.55 681.611 L731.991 681.611 L731.432 681.611 L730.872 681.611 L730.313 681.611 L729.754 681.611 L729.195 681.611 L728.635 681.611 L728.076 681.611 L727.517 681.611 L726.958 681.611 L726.398 681.611 L725.839 681.611 L725.28 681.611 L724.721 681.611 L724.161 681.611 L723.602 681.611 L723.043 681.611 L722.484 681.611 L721.924 681.611 L721.365 681.611 L720.806 681.611 L720.247 681.611  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.207 720.806,686.207 721.365,686.207 721.924,686.207 722.484,686.207 723.043,686.207 723.602,686.207 724.161,686.207 724.721,686.207 725.28,686.207 725.839,686.207 726.398,686.207 726.958,686.207 727.517,686.207 728.076,686.207 728.635,686.207 729.195,686.207 729.754,686.207 730.313,686.207 730.872,686.207 731.432,686.207 731.991,686.207 732.55,686.207 733.109,686.207 733.669,686.207 734.228,686.207 734.787,686.207 735.346,686.207 735.906,686.207 736.465,686.207 737.024,686.207 737.583,686.207 738.143,686.207 738.702,686.207 739.261,686.207 739.82,686.207 740.38,686.207 740.939,686.207 741.498,686.207 742.057,686.207 742.617,686.207 743.176,686.207 743.735,686.207 744.294,686.207 744.854,686.207 745.413,686.207 745.972,686.207 746.531,686.207 747.091,686.207 747.65,686.207 748.209,686.207 748.768,686.207 749.328,686.207 749.887,686.207 750.446,686.207 751.005,686.207 751.565,686.207 752.124,686.207 752.683,686.207 753.242,686.207 753.802,686.207 754.361,686.207 754.92,686.207 755.479,686.207 756.039,686.207 756.598,686.207 757.157,686.207 757.716,686.207 758.276,686.207 758.835,686.207 759.394,686.207 759.953,686.207 760.513,686.207 761.072,686.207 761.631,686.207 762.19,686.207 762.75,686.207 763.309,686.207 763.868,686.207 764.427,686.207 764.987,686.207 765.546,686.207 766.105,686.207 766.664,686.207 767.224,686.207 767.783,686.207 768.342,686.207 768.901,686.207 769.461,686.207 770.02,686.207 770.579,686.207 771.138,686.207 771.698,686.207 772.257,686.207 772.816,686.207 773.375,686.207 773.935,686.207 774.494,686.207 775.053,686.207 775.612,686.207 776.172,686.207 776.731,686.207 777.29,686.207 777.849,686.207 778.409,686.207 778.968,686.207 779.527,686.207 780.086,686.207 780.646,686.207 781.205,686.207 781.764,686.207 782.323,686.207 782.883,686.207 783.442,686.207 784.001,686.207 784.56,686.207 785.12,686.207 785.679,686.207 786.238,686.207 786.797,686.207 787.357,686.207 787.916,686.207 788.475,686.207 789.034,686.207 789.594,686.207 790.153,686.207 790.712,686.207 791.271,686.207 791.831,686.207 792.39,686.207 792.949,686.207 793.508,686.207 794.068,686.207 794.627,686.207 795.186,686.207 795.745,686.207 796.305,686.207 796.864,686.207 797.423,686.207 797.982,686.207 798.542,686.207 799.101,686.207 799.66,686.207 800.219,686.207 800.779,686.207 801.338,686.207 801.897,686.207 802.456,686.207 803.016,686.207 803.575,686.207 804.134,686.207 804.693,686.207 805.253,686.207 805.812,686.207 806.371,686.207 806.931,686.207 807.49,686.207 808.049,686.207 808.608,686.207 809.168,686.207 809.727,686.207 810.286,686.207 810.845,686.207 811.405,686.207 811.964,686.207 812.523,686.207 813.082,686.207 813.642,686.207 814.201,686.207 814.76,686.207 815.319,686.207 815.879,686.207 816.438,686.207 816.997,686.207 817.556,686.207 818.116,686.207 818.675,686.207 819.234,686.207 819.793,686.207 820.353,686.207 820.912,686.207 821.471,686.207 822.03,686.207 822.59,686.207 823.149,686.207 823.708,686.207 824.267,686.207 824.827,686.207 825.386,686.207 825.945,686.207 826.504,686.207 827.064,686.207 827.623,686.207 828.182,686.207 828.741,686.207 829.301,686.207 829.86,686.207 830.419,686.207 830.978,686.207 831.538,686.207 832.097,686.207 832.656,686.207 833.215,686.207 833.775,686.207 834.334,686.207 834.893,686.207 835.452,686.207 836.012,686.207 836.571,686.207 837.13,686.207 837.689,686.207 838.249,686.207 838.808,686.207 839.367,686.207 839.926,686.207 840.486,686.207 841.045,686.207 841.604,686.207 842.163,686.207 842.723,686.207 843.282,686.207 843.841,686.207 844.4,686.207 844.96,686.207 845.519,686.207 846.078,686.207 846.637,686.207 847.197,686.207 847.756,686.207 848.315,686.207 848.874,686.207 849.434,686.207 849.993,686.207 850.552,686.207 851.111,686.207 851.671,686.207 852.23,686.207 852.789,686.207 853.348,686.207 853.908,686.207 854.467,686.207 855.026,686.207 855.585,686.207 856.145,686.207 856.704,686.207 857.263,686.207 857.822,686.207 858.382,686.207 858.941,686.207 859.5,686.207 860.059,686.207 860.619,686.207 861.178,686.207 861.737,686.207 862.296,686.207 862.856,686.207 863.415,686.207 863.974,686.207 864.533,686.207 865.093,686.207 865.652,686.207 866.211,686.207 866.77,686.207 867.33,686.207 867.889,686.207 868.448,686.207 869.007,686.207 869.567,686.207 870.126,686.207 870.685,686.207 871.244,686.207 871.804,686.207 872.363,686.207 872.922,686.207 873.481,686.207 874.041,686.207 874.6,686.207 875.159,686.207 875.718,686.207 876.278,686.207 876.837,686.207 877.396,686.207 877.955,686.207 878.515,686.207 879.074,686.207 879.633,686.207 880.192,686.207 880.752,686.207 881.311,686.207 881.87,686.207 882.429,686.207 882.989,686.207 883.548,686.207 884.107,686.207 884.666,686.207 885.226,686.207 885.785,686.207 886.344,686.207 886.903,686.207 887.463,686.207 888.022,686.207 888.581,686.207 889.14,686.207 889.7,686.207 890.259,686.207 890.818,686.207 891.377,686.207 891.937,686.207 892.496,686.207 893.055,686.207 893.614,686.207 894.174,686.207 894.733,686.207 895.292,686.207 895.851,686.207 896.411,686.207 896.97,686.207 897.529,686.207 898.088,686.207 898.648,686.207 899.207,686.207 899.766,686.207 900.325,686.207 900.885,686.207 901.444,686.207 902.003,686.207 902.562,686.207 903.122,686.207 903.681,686.207 904.24,686.207 904.799,686.207 905.359,686.207 905.918,686.207 906.477,686.207 907.036,686.207 907.596,686.207 908.155,686.207 908.714,686.207 909.273,686.207 909.833,686.207 910.392,686.207 910.951,686.207 911.51,686.207 912.07,686.207 912.629,686.207 913.188,686.207 913.747,686.207 914.307,686.207 914.866,686.207 915.425,686.207 915.984,686.207 916.544,686.207 917.103,686.207 917.662,686.207 918.221,686.207 918.781,686.207 919.34,686.207 919.899,686.207 920.458,686.207 921.018,686.207 921.577,686.207 922.136,686.207 922.695,686.207 923.255,686.207 923.814,686.207 924.373,686.207 924.932,686.207 925.492,686.207 926.051,686.207 926.61,686.207 927.169,686.207 927.729,686.207 928.288,686.207 928.847,686.207 929.406,686.207 929.966,686.207 930.525,686.207 931.084,686.207 931.644,686.207 932.203,686.207 932.762,686.207 933.321,686.207 933.881,686.207 934.44,686.207 934.999,686.207 935.558,686.207 936.118,686.207 936.677,686.207 937.236,686.207 937.795,686.207 938.355,686.207 938.914,686.207 939.473,686.207 940.032,686.207 940.592,686.207 941.151,686.207 941.71,686.207 942.269,686.207 942.829,686.207 943.388,686.207 943.947,686.207 944.506,686.207 945.066,686.207 945.625,686.207 946.184,686.207 946.743,686.207 947.303,686.207 947.862,686.207 948.421,686.207 948.98,686.207 949.54,686.207 950.099,686.207 950.658,686.207 951.217,686.207 951.777,686.207 952.336,686.207 952.895,686.207 953.454,686.207 954.014,686.207 954.573,686.207 955.132,686.207 955.691,686.207 956.251,686.207 956.81,686.207 957.369,686.207 957.928,686.207 958.488,686.207 959.047,686.207 959.606,686.207 960.165,686.207 960.725,686.207 961.284,686.207 961.843,686.207 962.402,686.207 962.962,686.207 963.521,686.207 964.08,686.207 964.639,686.207 965.199,686.207 965.758,686.207 966.317,686.207 966.876,686.207 967.436,686.207 967.995,686.207 968.554,686.207 969.113,686.207 969.673,686.207 970.232,686.207 970.791,686.207 971.35,686.207 971.91,686.207 972.469,686.207 973.028,686.207 973.587,686.207 974.147,686.207 974.706,686.207 975.265,686.207 975.824,686.207 976.384,686.207 976.943,686.207 977.502,686.207 978.061,686.207 978.621,686.207 979.18,686.207 979.739,686.207 980.298,686.207 980.858,686.207 981.417,686.207 981.976,686.207 982.535,686.207 983.095,686.207 983.654,686.207 984.213,686.207 984.772,686.207 985.332,686.207 985.891,686.207 986.45,686.207 987.009,686.207 987.569,686.207 988.128,686.207 988.687,686.207 989.246,686.207 989.806,686.207 990.365,686.207 990.924,686.207 991.483,686.207 992.043,686.207 992.602,686.207 993.161,686.207 993.72,686.207 994.28,686.207 994.839,686.207 995.398,686.207 995.957,686.207 996.517,686.207 997.076,686.207 997.635,686.207 998.194,686.207 998.754,686.207 999.313,686.207 999.872,686.207 1000.43,686.207 1000.99,686.207 1001.55,686.207 1002.11,686.207 1002.67,686.207 1003.23,686.207 1003.79,686.207 1004.35,686.207 1004.91,686.207 1005.46,686.207 1006.02,686.207 1006.58,686.207 1007.14,686.207 1007.7,686.207 1008.26,686.207 1008.82,686.207 1009.38,686.207 1009.94,686.207 1010.5,686.207 1011.06,686.207 1011.62,686.207 1012.18,686.207 1012.73,686.207 1013.29,686.207 1013.85,686.207 1014.41,686.207 1014.97,686.207 1015.53,686.207 1016.09,686.207 1016.65,686.207 1017.21,686.207 1017.77,686.207 1018.33,686.207 1018.89,686.207 1019.45,686.207 1020.01,686.207 1020.56,686.207 1021.12,686.207 1021.68,686.207 1022.24,686.207 1022.8,686.207 1023.36,686.207 1023.92,686.207 1024.48,686.207 1025.04,686.207 1025.6,686.207 1026.16,686.207 1026.72,686.207 1027.28,686.207 1027.83,686.207 1028.39,686.207 1028.95,686.207 1029.51,686.207 1030.07,686.207 1030.63,686.207 1031.19,686.207 1031.75,686.207 1032.31,686.207 1032.87,686.207 1033.43,686.207 1033.99,686.207 1034.55,686.207 1035.1,686.207 1035.66,686.207 1036.22,686.207 1036.78,686.207 1037.34,686.207 1037.9,686.207 1038.46,686.207 1039.02,686.207 1039.58,686.207 1040.14,686.207 1040.7,686.207 1041.26,686.207 1041.82,686.207 1042.38,686.207 1042.93,686.207 1043.49,686.207 1044.05,686.207 1044.61,686.207 1045.17,686.207 1045.73,686.207 1046.29,686.207 1046.85,686.207 1047.41,686.207 1047.97,686.207 1048.53,686.207 1049.09,686.207 1049.65,686.207 1050.2,686.207 1050.76,686.207 1051.32,686.207 1051.88,686.207 1052.44,686.207 1053,686.207 1053.56,686.207 1054.12,686.207 1054.68,686.207 1055.24,686.207 1055.8,686.207 1056.36,686.207 1056.92,686.207 1057.48,686.207 1058.03,686.207 1058.59,686.207 1059.15,686.207 1059.71,686.207 1060.27,686.207 1060.83,686.207 1061.39,686.207 1061.95,686.207 1062.51,686.207 1063.07,686.207 1063.63,686.207 1064.19,686.207 1064.75,686.207 1065.3,686.207 1065.86,686.207 1066.42,686.207 1066.98,686.207 1067.54,686.207 1068.1,686.207 1068.66,686.207 1069.22,686.207 1069.78,686.207 1070.34,686.207 1070.9,686.207 1071.46,686.207 1072.02,686.207 1072.57,686.207 1073.13,686.207 1073.69,686.207 1074.25,686.207 1074.81,686.207 1075.37,686.207 1075.93,686.207 1076.49,686.207 1077.05,686.207 1077.61,686.207 1078.17,686.207 1078.73,686.207 1079.29,686.207 1079.85,686.207 1080.4,686.207 1080.96,686.207 1081.52,686.207 1082.08,686.207 1082.64,686.207 1083.2,686.207 1083.76,686.207 1084.32,686.207 1084.88,686.207 1085.44,686.207 1086,686.207 1086.56,686.207 1087.12,686.207 1087.67,686.207 1088.23,686.207 1088.79,686.207 1089.35,686.207 1089.91,686.207 1090.47,686.207 1091.03,686.207 1091.59,686.207 1092.15,686.207 1092.71,686.207 1093.27,686.207 1093.83,686.207 1094.39,686.207 1094.94,686.207 1095.5,686.207 1096.06,686.207 1096.62,686.207 1097.18,686.207 1097.74,686.207 1098.3,686.207 1098.86,686.207 1099.42,686.207 1099.98,686.207 1100.54,686.207 1101.1,686.207 1101.66,686.207 1102.22,686.207 1102.77,686.207 1103.33,686.207 1103.89,686.207 1104.45,686.207 1105.01,686.207 1105.57,686.207 1106.13,686.207 1106.69,686.207 1107.25,686.207 1107.81,686.207 1108.37,686.207 1108.93,686.207 1109.49,686.207 1110.04,686.207 1110.6,686.207 1111.16,686.207 1111.72,686.207 1112.28,686.207 1112.84,686.207 1113.4,686.207 1113.96,686.207 1114.52,686.207 1115.08,686.207 1115.64,686.207 1116.2,686.207 1116.76,686.207 1117.31,686.207 1117.87,686.207 1118.43,686.207 1118.99,686.207 1119.55,686.207 1120.11,686.207 1120.67,686.207 1121.23,686.207 1121.79,686.207 1122.35,686.207 1122.91,686.207 1123.47,686.207 1124.03,686.207 1124.59,686.207 1125.14,686.207 1125.7,686.207 1126.26,686.207 1126.82,686.207 1127.38,686.207 1127.94,686.207 1128.5,686.207 1129.06,686.207 1129.62,686.207 1130.18,686.207 1130.74,686.207 1131.3,686.207 1131.86,686.207 1132.41,686.207 1132.97,686.207 1133.53,686.207 1134.09,686.207 1134.65,686.207 1135.21,686.207 1135.77,686.207 1136.33,686.207 1136.89,686.207 1137.45,686.207 1138.01,686.207 1138.57,686.207 1139.13,686.207 1139.68,686.207 1140.24,686.207 1140.8,686.207 1141.36,686.207 1141.92,686.207 1142.48,686.207 1143.04,686.207 1143.6,686.207 1144.16,686.207 1144.72,686.207 1145.28,686.207 1145.84,686.207 1146.4,686.207 1146.96,686.207 1147.51,686.207 1148.07,686.207 1148.63,686.207 1149.19,686.207 1149.75,686.207 1150.31,686.207 1150.87,686.207 1151.43,686.207 1151.99,686.207 1152.55,686.207 1153.11,686.207 1153.67,686.207 1154.23,686.207 1154.78,686.207 1155.34,686.207 1155.9,686.207 1156.46,686.207 1157.02,686.207 1157.58,686.207 1158.14,686.207 1158.7,686.207 1159.26,686.207 1159.82,686.207 1160.38,686.207 1160.94,686.207 1161.5,686.207 1162.05,686.207 1162.61,686.207 1163.17,686.207 1163.73,686.207 1164.29,686.207 1164.85,686.207 1165.41,686.207 1165.97,686.207 1166.53,686.207 1167.09,686.207 1167.65,686.207 1168.21,686.207 1168.77,686.207 1169.33,686.207 1169.88,686.207 1170.44,686.207 1171,686.207 1171.56,686.207 1172.12,686.207 1172.68,686.207 1173.24,686.207 1173.8,686.207 1174.36,686.207 1174.92,686.207 1175.48,686.207 1176.04,686.207 1176.6,686.207 1177.15,686.207 1177.71,686.207 1178.27,686.207 1178.83,686.207 1179.39,686.207 1179.95,686.207 1180.51,686.207 1181.07,686.207 1181.63,686.207 1182.19,686.207 1182.75,686.207 1183.31,686.207 1183.87,686.207 1184.43,686.207 1184.98,686.207 1185.54,686.207 1186.1,686.207 1186.66,686.207 1187.22,686.207 1187.78,686.207 1188.34,686.207 1188.9,686.207 1189.46,686.207 1190.02,686.207 1190.58,686.207 1191.14,686.207 1191.7,686.207 1192.25,686.207 1192.81,686.207 1193.37,686.207 1193.93,686.207 1194.49,686.207 1195.05,686.207 1195.61,686.207 1196.17,686.207 1196.73,686.207 1197.29,686.207 1197.85,686.207 1198.41,686.207 1198.97,686.207 1199.52,686.207 1200.08,686.207 1200.64,686.207 1201.2,686.207 1201.76,686.207 1202.32,686.207 1202.88,686.207 1203.44,686.207 1204,686.207 1204.56,686.207 1205.12,686.207 1205.68,686.207 1206.24,686.207 1206.8,686.207 1207.35,686.207 1207.91,686.207 1208.47,686.207 1209.03,686.207 1209.59,686.207 1210.15,686.207 1210.71,686.207 1211.27,686.207 1211.83,686.207 1212.39,686.207 1212.95,686.207 1213.51,686.207 1214.07,686.207 1214.62,686.207 1215.18,686.207 1215.74,686.207 1216.3,686.207 1216.86,686.207 1217.42,686.207 1217.98,686.207 1218.54,686.207 1219.1,686.207 1219.66,686.207 1220.22,686.207 1220.78,686.207 1221.34,686.207 1221.89,686.207 1222.45,686.207 1223.01,686.207 1223.57,686.207 1224.13,686.207 1224.69,686.207 1225.25,686.207 1225.81,686.207 1226.37,686.207 1226.93,686.207 1227.49,686.207 1228.05,686.207 1228.61,686.207 1229.17,686.207 1229.72,686.207 1230.28,686.207 1230.84,686.207 1231.4,686.207 1231.96,686.207 1232.52,686.207 1233.08,686.207 1233.64,686.207 1234.2,686.207 1234.76,686.207 1235.32,686.207 1235.88,686.207 1236.44,686.207 1236.99,686.207 1237.55,686.207 1238.11,686.207 1238.67,686.207 1239.23,686.207 1239.79,686.207 1240.35,686.207 1240.91,686.207 1241.47,686.207 1242.03,686.207 1242.59,686.207 1243.15,686.207 1243.71,686.207 1244.26,686.207 1244.82,686.207 1245.38,686.207 1245.94,686.207 1246.5,686.207 1247.06,686.207 1247.62,686.207 1248.18,686.207 1248.74,686.207 1249.3,686.207 1249.86,686.207 1250.42,686.207 1250.98,686.207 1251.54,686.207 1252.09,686.207 1252.65,686.207 1253.21,686.207 1253.77,686.207 1254.33,686.207 1254.89,686.207 1255.45,686.207 1256.01,686.207 1256.57,686.207 1257.13,686.207 1257.69,686.207 1258.25,686.207 1258.81,686.207 1259.36,686.207 1259.92,686.207 1260.48,686.207 1261.04,686.207 1261.6,686.207 1262.16,686.207 1262.72,686.207 1263.28,686.207 1263.84,686.207 1264.4,686.207 1264.96,686.207 1265.52,686.207 1266.08,686.207 1266.63,686.207 1267.19,686.207 1267.75,686.207 1268.31,686.207 1268.87,686.207 1269.43,686.207 1269.99,686.207 1270.55,686.207 1271.11,686.207 1271.67,686.207 1272.23,686.207 1272.79,686.207 1273.35,686.207 1273.91,686.207 1274.46,686.207 1275.02,686.207 1275.58,686.207 1276.14,686.207 1276.7,686.207 1277.26,686.207 1277.82,686.207 1278.38,686.207 1278.94,686.207 1279.5,686.207 1280.06,686.207 1280.62,686.207 1281.18,686.207 1281.73,686.207 1282.29,686.207 1282.85,686.207 1283.41,686.207 1283.97,686.207 1284.53,686.207 1285.09,686.207 1285.65,686.207 1286.21,686.207 1286.77,686.207 1287.33,686.207 1287.89,686.207 1288.45,686.207 1289,686.207 1289.56,686.207 1290.12,686.207 1290.68,686.207 1291.24,686.207 1291.8,686.207 1292.36,686.207 1292.92,686.207 1293.48,686.207 1294.04,686.207 1294.6,686.207 1295.16,686.207 1295.72,686.207 1296.28,686.207 1296.83,686.207 1297.39,686.207 1297.95,686.207 1298.51,686.207 1299.07,686.207 1299.63,686.207 1300.19,686.207 1300.75,686.207 1301.31,686.207 1301.87,686.207 1302.43,686.207 1302.99,686.207 1303.55,686.207 1304.1,686.207 1304.66,686.207 1305.22,686.207 1305.78,686.207 1306.34,686.207 1306.9,686.207 1307.46,686.207 1308.02,686.207 1308.58,686.207 1309.14,686.207 1309.7,686.207 1310.26,686.207 1310.82,686.207 1311.38,686.207 1311.93,686.207 1312.49,686.207 1313.05,686.207 1313.61,686.207 1314.17,686.207 1314.73,686.207 1315.29,686.207 1315.85,686.207 1316.41,686.207 1316.97,686.207 1317.53,686.207 1318.09,686.207 1318.65,686.207 1319.2,686.207 1319.76,686.207 1320.32,686.207 1320.88,686.207 1321.44,686.207 1322,686.207 1322.56,686.207 1323.12,686.207 1323.68,686.207 1324.24,686.207 1324.8,686.207 1325.36,686.207 1325.92,686.207 1326.47,686.207 1327.03,686.207 1327.59,686.207 1328.15,686.207 1328.71,686.207 1329.27,686.207 1329.83,686.207 1330.39,686.207 1330.95,686.207 1331.51,686.207 1332.07,686.207 1332.63,686.207 1333.19,686.207 1333.75,686.207 1334.3,686.207 1334.86,686.207 1335.42,686.207 1335.98,686.207 1336.54,686.207 1337.1,686.207 1337.66,686.207 1338.22,686.207 1338.78,686.207 1339.34,686.207 1339.9,686.207 1340.46,686.207 1341.02,686.207 1341.57,686.207 1342.13,686.207 1342.69,686.207 1343.25,686.207 1343.81,686.207 1344.37,686.207 1344.93,686.207 1345.49,686.207 1346.05,686.207 1346.61,686.207 1347.17,686.207 1347.73,686.207 1348.29,686.207 1348.84,686.207 1349.4,686.207 1349.96,686.207 1350.52,686.207 1351.08,686.207 1351.64,686.207 1352.2,686.207 1352.76,686.207 1353.32,686.207 1353.88,686.207 1354.44,686.207 1355,686.207 1355.56,686.207 1356.12,686.207 1356.67,686.207 1357.23,686.207 1357.79,686.207 1358.35,686.207 1358.91,686.207 1359.47,686.207 1360.03,686.207 1360.59,686.207 1361.15,686.207 1361.71,686.207 1362.27,686.207 1362.83,686.207 1363.39,686.207 1363.94,686.207 1364.5,686.207 1365.06,686.207 1365.62,686.207 1366.18,686.207 1366.74,686.207 1367.3,686.207 1367.86,686.207 1368.42,686.207 1368.98,686.207 1369.54,686.207 1370.1,686.207 1370.66,686.207 1371.21,686.207 1371.77,686.207 1372.33,686.207 1372.89,686.207 1373.45,686.207 1374.01,686.207 1374.57,686.207 1375.13,686.207 1375.69,686.207 1376.25,686.207 1376.81,686.207 1377.37,686.207 1377.93,686.207 1378.49,686.207 1379.04,686.207 1379.6,686.207 1380.16,686.207 1380.72,686.207 1381.28,686.207 1381.84,686.207 1382.4,686.207 1382.96,686.207 1383.52,686.207 1384.08,686.207 1384.64,686.207 1385.2,686.207 1385.76,686.207 1386.31,686.207 1386.87,686.207 1387.43,686.207 1387.99,686.207 1388.55,686.207 1389.11,686.207 1389.67,686.207 1390.23,686.207 1390.79,686.207 1391.35,686.207 1391.91,686.207 1392.47,686.207 1393.03,686.207 1393.58,686.207 1394.14,686.207 1394.7,686.207 1395.26,686.207 1395.82,686.207 1396.38,686.207 1396.94,686.207 1397.5,686.207 1398.06,686.207 1398.62,686.207 1399.18,686.207 1399.74,686.207 1400.3,686.207 1400.86,686.207 1401.41,686.207 1401.97,686.207 1402.53,686.207 1403.09,686.207 1403.65,686.207 1404.21,686.207 1404.77,686.207 1405.33,686.207 1405.89,686.207 1406.45,686.207 1407.01,686.207 1407.57,686.207 1408.13,686.207 1408.68,686.207 1409.24,686.207 1409.8,686.207 1410.36,686.207 1410.92,686.207 1411.48,686.207 1412.04,686.207 1412.6,686.207 1413.16,686.207 1413.72,686.207 1414.28,686.207 1414.84,686.207 1415.4,686.207 1415.95,686.207 1416.51,686.207 1417.07,686.207 1417.63,686.207 1418.19,686.207 1418.75,686.207 1419.31,686.207 1419.87,686.207 1420.43,686.207 1420.99,686.207 1421.55,686.207 1422.11,686.207 1422.67,686.207 1423.23,686.207 1423.78,686.207 1424.34,686.207 1424.9,686.207 1425.46,686.207 1426.02,686.207 1426.58,686.207 1427.14,686.207 1427.7,686.207 1428.26,686.207 1428.82,686.207 1429.38,686.207 1429.94,686.207 1430.5,686.207 1431.05,686.207 1431.61,686.207 1432.17,686.207 1432.73,686.207 1433.29,686.207 1433.85,686.207 1434.41,686.207 1434.97,686.207 1435.53,686.207 1436.09,686.207 1436.65,686.207 1437.21,686.207 1437.77,686.207 1438.33,686.207 1438.88,686.207 1439.44,686.207 1440,686.207 1440.56,686.207 1441.12,686.207 1441.68,686.207 1442.24,686.207 1442.8,686.207 1443.36,686.207 1443.92,686.207 1444.48,686.207 1445.04,686.207 1445.6,686.207 1446.15,686.207 1446.71,686.207 1447.27,686.207 1447.83,686.207 1448.39,686.207 1448.95,686.207 1449.51,686.207 1450.07,686.207 1450.63,686.207 1451.19,686.207 1451.75,686.207 1452.31,686.207 1452.87,686.207 1453.42,686.207 1453.98,686.207 1454.54,686.207 1455.1,686.207 1455.66,686.207 1456.22,686.207 1456.78,686.207 1457.34,686.207 1457.9,686.207 1458.46,686.207 1459.02,686.207 1459.58,686.207 1460.14,686.207 1460.7,686.207 1461.25,686.207 1461.81,686.207 1462.37,686.207 1462.93,686.207 1463.49,686.207 1464.05,686.207 1464.61,686.207 1465.17,686.207 1465.73,686.207 1466.29,686.207 1466.85,686.207 1467.41,686.207 1467.97,686.207 1468.52,686.207 1469.08,686.207 1469.64,686.207 1470.2,686.207 1470.76,686.207 1471.32,686.207 1471.88,686.207 1472.44,686.207 1473,686.207 1473.56,686.207 1474.12,686.207 1474.68,686.207 1475.24,686.207 1475.79,686.207 1476.35,686.207 1476.91,686.207 1477.47,686.207 1478.03,686.207 1478.59,686.207 1479.15,686.207 1479.71,686.207 1480.27,686.207 1480.83,686.207 1481.39,686.207 1481.95,686.207 1482.51,686.207 1483.07,686.207 1483.62,686.207 1484.18,686.207 1484.74,686.207 1485.3,686.207 1485.86,686.207 1486.42,686.207 1486.98,686.207 1487.54,686.207 1488.1,686.207 1488.66,686.207 1489.22,686.207 1489.78,686.207 1490.34,686.207 1490.89,686.207 1491.45,686.207 1492.01,686.207 1492.57,686.207 1493.13,686.207 1493.69,686.207 1494.25,686.207 1494.81,686.207 1495.37,686.207 1495.93,686.207 1496.49,686.207 1497.05,686.207 1497.61,686.207 1498.16,686.207 1498.72,686.207 1499.28,686.207 1499.84,686.207 1500.4,686.207 1500.96,686.207 1501.52,686.207 1502.08,686.207 1502.64,686.207 1503.2,686.207 1503.76,686.207 1504.32,686.207 1504.88,686.207 1505.44,686.207 1505.99,686.207 1506.55,686.207 1507.11,686.207 1507.67,686.207 1508.23,686.207 1508.79,686.207 1509.35,686.207 1509.91,686.207 1510.47,686.207 1511.03,686.207 1511.59,686.207 1512.15,686.207 1512.71,686.207 1513.26,686.207 1513.82,686.207 1514.38,686.207 1514.94,686.207 1515.5,686.207 1516.06,686.207 1516.62,686.207 1517.18,686.207 1517.74,686.207 1518.3,686.207 1518.86,686.207 1519.42,686.207 1519.98,686.207 1520.53,686.207 1521.09,686.207 1521.65,686.207 1522.21,686.207 1522.77,686.207 1523.33,686.207 1523.89,686.207 1524.45,686.207 1525.01,686.207 1525.57,686.207 1526.13,686.207 1526.69,686.207 1527.25,686.207 1527.81,686.207 1528.36,686.207 1528.92,686.207 1529.48,686.207 1530.04,686.207 1530.6,686.207 1531.16,686.207 1531.72,686.207 1532.28,686.207 1532.84,686.207 1533.4,686.207 1533.96,686.207 1534.52,686.207 1535.08,686.207 1535.63,686.207 1536.19,686.207 1536.75,686.207 1537.31,686.207 1537.87,686.207 1538.43,686.207 1538.99,686.207 1539.55,686.207 1540.11,686.207 1540.67,686.207 1541.23,686.207 1541.79,686.207 1542.35,686.207 1542.9,686.207 1543.46,686.207 1544.02,686.207 1544.58,686.207 1545.14,686.207 1545.7,686.207 1546.26,686.207 1546.82,686.207 1547.38,686.207 1547.94,686.207 1548.5,686.207 1549.06,686.207 1549.62,686.207 1550.18,686.207 1550.73,686.207 1551.29,686.207 1551.85,686.207 1552.41,686.207 1552.97,686.207 1553.53,686.207 1554.09,686.207 1554.65,686.207 1555.21,686.207 1555.77,686.207 1556.33,686.207 1556.89,686.207 1557.45,686.207 1558,686.207 1558.56,686.207 1559.12,686.207 1559.68,686.207 1560.24,686.207 1560.8,686.207 1561.36,686.207 1561.92,686.207 1562.48,686.207 1563.04,686.207 1563.6,686.207 1564.16,686.207 1564.72,686.207 1565.28,686.207 1565.83,686.207 1566.39,686.207 1566.95,686.207 1567.51,686.207 1568.07,686.207 1568.63,686.207 1569.19,686.207 1569.75,686.207 1570.31,686.207 1570.87,686.207 1571.43,686.207 1571.99,686.207 1572.55,686.207 1573.1,686.207 1573.66,686.207 1574.22,686.207 1574.78,686.207 1575.34,686.207 1575.9,686.207 1576.46,686.207 1577.02,686.207 1577.58,686.207 1578.14,686.207 1578.7,686.207 1579.26,686.207 1579.82,686.207 1580.37,686.207 1580.93,686.207 1581.49,686.207 1582.05,686.207 1582.61,686.207 1583.17,686.207 1583.73,686.207 1584.29,686.207 1584.85,686.207 1585.41,686.207 1585.97,686.207 1586.53,686.207 1587.09,686.207 1587.65,686.207 1588.2,686.207 1588.76,686.207 1589.32,686.207 1589.88,686.207 1590.44,686.207 1591,686.207 1591.56,686.207 1592.12,686.207 1592.68,686.207 1593.24,686.207 1593.8,686.207 1594.36,686.207 1594.92,686.207 1595.47,686.207 1596.03,686.207 1596.59,686.207 1597.15,686.207 1597.71,686.207 1598.27,686.207 1598.83,686.207 1599.39,686.207 1599.95,686.207 1600.51,686.207 1601.07,686.207 1601.63,686.207 1602.19,686.207 1602.74,686.207 1603.3,686.207 1603.86,686.207 1604.42,686.207 1604.98,686.207 1605.54,686.207 1606.1,686.207 1606.66,686.207 1607.22,686.207 1607.78,686.207 1608.34,686.207 1608.9,686.207 1609.46,686.207 1610.02,686.207 1610.57,686.207 1611.13,686.207 1611.69,686.207 1612.25,686.207 1612.81,686.207 1613.37,686.207 1613.93,686.207 1614.49,686.207 1615.05,686.207 1615.61,686.207 1616.17,686.207 1616.73,686.207 1617.29,686.207 1617.84,686.207 1618.4,686.207 1618.96,686.207 1619.52,686.207 1620.08,686.207 1620.64,686.207 1621.2,686.207 1621.76,686.207 1622.32,686.207 1622.88,686.207 1623.44,686.207 1624,686.207 1624.56,686.207 1625.11,686.207 1625.67,686.207 1626.23,686.207 1626.79,686.207 1627.35,686.207 1627.91,686.207 1628.47,686.207 1629.03,686.207 1629.59,686.207 1630.15,686.207 1630.71,686.207 1631.27,686.207 1631.83,686.207 1632.39,686.207 1632.94,686.207 1633.5,686.207 1634.06,686.207 1634.62,686.207 1635.18,686.207 1635.74,686.207 1636.3,686.207 1636.86,686.207 1637.42,686.207 1637.98,686.207 1638.54,686.207 1639.1,686.207 1639.66,686.207 1640.21,686.207 1640.77,686.207 1641.33,686.207 1641.89,686.207 1642.45,686.207 1643.01,686.207 1643.57,686.207 1644.13,686.207 1644.69,686.207 1645.25,686.207 1645.81,686.207 1646.37,686.207 1646.93,686.207 1647.48,686.207 1648.04,686.207 1648.6,686.207 1649.16,686.207 1649.72,686.207 1650.28,686.207 1650.84,686.207 1651.4,686.207 1651.96,686.207 1652.52,686.207 1653.08,686.207 1653.64,686.207 1654.2,686.207 1654.76,686.207 1655.31,686.207 1655.87,686.207 1656.43,686.207 1656.99,686.207 1657.55,686.207 1658.11,686.207 1658.67,686.207 1659.23,686.207 1659.79,686.207 1660.35,686.207 1660.91,686.207 1661.47,686.207 1662.03,686.207 1662.58,686.207 1663.14,686.207 1663.7,686.207 1664.26,686.207 1664.82,686.207 1665.38,686.207 1665.94,686.207 1666.5,686.207 1667.06,686.207 1667.62,686.207 1668.18,686.207 1668.74,686.207 1669.3,686.207 1669.85,686.207 1670.41,686.207 1670.97,686.207 1671.53,686.207 1672.09,686.207 1672.65,686.207 1673.21,686.207 1673.77,686.207 1674.33,686.207 1674.89,686.207 1675.45,686.207 1676.01,686.207 1676.57,686.207 1677.13,686.207 1677.68,686.207 1678.24,686.207 1678.8,686.207 1679.36,686.207 1679.92,686.207 1680.48,686.207 1681.04,686.207 1681.6,686.207 1682.16,686.207 1682.72,686.207 1683.28,686.207 1683.84,686.207 1684.4,686.207 1684.95,686.207 1685.51,686.207 1686.07,686.207 1686.63,686.207 1687.19,686.207 1687.75,686.207 1688.31,686.207 1688.87,686.207 1689.43,686.207 1689.99,686.207 1690.55,686.207 1691.11,686.207 1691.67,686.207 1692.23,686.207 1692.78,686.207 1693.34,686.207 1693.9,686.207 1694.46,686.207 1695.02,686.207 1695.58,686.207 1696.14,686.207 1696.7,686.207 1697.26,686.207 1697.82,686.207 1698.38,686.207 1698.94,686.207 1699.5,686.207 1700.05,686.207 1700.61,686.207 1701.17,686.207 1701.73,686.207 1702.29,686.207 1702.85,686.207 1703.41,686.207 1703.97,686.207 1704.53,686.207 1705.09,686.207 1705.65,686.207 1706.21,686.207 1706.77,686.207 1707.32,686.207 1707.88,686.207 1708.44,686.207 1709,686.207 1709.56,686.207 1710.12,686.207 1710.68,686.207 1711.24,686.207 1711.8,686.207 1712.36,686.207 1712.92,686.207 1713.48,686.207 1714.04,686.207 1714.6,686.207 1715.15,686.207 1715.71,686.207 1716.27,686.207 1716.83,686.207 1717.39,686.207 1717.95,686.207 1718.51,686.207 1719.07,686.207 1719.63,686.207 1720.19,686.207 1720.75,686.207 1721.31,686.207 1721.87,686.207 1722.42,686.207 1722.98,686.207 1723.54,686.207 1724.1,686.207 1724.66,686.207 1725.22,686.207 1725.78,686.207 1726.34,686.207 1726.9,686.207 1727.46,686.207 1728.02,686.207 1728.58,686.207 1729.14,686.207 1729.69,686.207 1730.25,686.207 1730.81,686.207 1731.37,686.207 1731.93,686.207 1732.49,686.207 1733.05,686.207 1733.61,686.207 1734.17,686.207 1734.73,686.207 1735.29,686.207 1735.85,686.207 1736.41,686.207 1736.97,686.207 1737.52,686.207 1738.08,686.207 1738.64,686.207 1739.2,686.207 1739.76,686.207 1740.32,686.207 1740.88,686.207 1741.44,686.207 1742,686.207 1742.56,686.207 1743.12,686.207 1743.68,686.207 1744.24,686.207 1744.79,686.207 1745.35,686.207 1745.91,686.207 1746.47,686.207 1747.03,686.207 1747.59,686.207 1748.15,686.207 1748.71,686.207 1749.27,686.207 1749.83,686.207 1750.39,686.207 1750.95,686.207 1751.51,686.207 1752.06,686.207 1752.62,686.207 1753.18,686.207 1753.74,686.207 1754.3,686.207 1754.86,686.207 1755.42,686.207 1755.98,686.207 1756.54,686.207 1757.1,686.207 1757.66,686.207 1758.22,686.207 1758.78,686.207 1759.34,686.207 1759.89,686.207 1760.45,686.207 1761.01,686.207 1761.57,686.207 1762.13,686.207 1762.69,686.207 1763.25,686.207 1763.81,686.207 1764.37,686.207 1764.93,686.207 1765.49,686.207 1766.05,686.207 1766.61,686.207 1767.16,686.207 1767.72,686.207 1768.28,686.207 1768.84,686.207 1769.4,686.207 1769.96,686.207 1770.52,686.207 1771.08,686.207 1771.64,686.207 1772.2,686.207 1772.76,686.207 1773.32,686.207 1773.88,686.207 1774.43,686.207 1774.99,686.207 1775.55,686.207 1776.11,686.207 1776.67,686.207 1777.23,686.207 1777.79,686.207 1778.35,686.207 1778.91,686.207 1779.47,686.207 1780.03,686.207 1780.59,686.207 1781.15,686.207 1781.71,686.207 1782.26,686.207 1782.82,686.207 1783.38,686.207 1783.94,686.207 1784.5,686.207 1785.06,686.207 1785.62,686.207 1786.18,686.207 1786.74,686.207 1787.3,686.207 1787.86,686.207 1788.42,686.207 1788.98,686.207 1789.53,686.207 1790.09,686.207 1790.65,686.207 1791.21,686.207 1791.77,686.207 1792.33,686.207 1792.89,686.207 1793.45,686.207 1794.01,686.207 1794.57,686.207 1795.13,686.207 1795.69,686.207 1796.25,686.207 1796.8,686.207 1797.36,686.207 1797.92,686.207 1798.48,686.207 1799.04,686.207 1799.6,686.207 1800.16,686.207 1800.72,686.207 1801.28,686.207 1801.84,686.207 1802.4,686.207 1802.96,686.207 1803.52,686.207 1804.08,686.207 1804.63,686.207 1805.19,686.207 1805.75,686.207 1806.31,686.207 1806.87,686.207 1807.43,686.207 1807.99,686.207 1808.55,686.207 1809.11,686.207 1809.67,686.207 1810.23,686.207 1810.79,686.207 1811.35,686.207 1811.9,686.207 1812.46,686.207 1813.02,686.207 1813.58,686.207 1814.14,686.207 1814.7,686.207 1815.26,686.207 1815.82,686.207 1816.38,686.207 1816.94,686.207 1817.5,686.207 1818.06,686.207 1818.62,686.207 1819.18,686.207 1819.73,686.207 1820.29,686.207 1820.85,686.207 1821.41,686.207 1821.97,686.207 1822.53,686.207 1823.09,686.207 1823.65,686.207 1824.21,686.207 1824.77,686.207 1825.33,686.207 1825.89,686.207 1826.45,686.207 1827,686.207 1827.56,686.207 1828.12,686.207 1828.68,686.207 1829.24,686.207 1829.8,686.207 1830.36,686.207 1830.92,686.207 1831.48,686.207 1832.04,686.207 1832.6,686.207 1833.16,686.207 1833.72,686.207 1834.27,686.207 1834.83,686.207 1835.39,686.207 1835.95,686.207 1836.51,686.207 1837.07,686.207 1837.63,686.207 1838.19,686.207 \"/>\n<path clip-path=\"url(#clip473)\" d=\"M720.247 684.781 L720.806 684.781 L721.365 684.781 L721.924 684.781 L722.484 684.781 L723.043 684.781 L723.602 684.781 L724.161 684.781 L724.721 684.781 L725.28 684.781 L725.839 684.781 L726.398 684.781 L726.958 684.781 L727.517 684.781 L728.076 684.781 L728.635 684.781 L729.195 684.781 L729.754 684.781 L730.313 684.781 L730.872 684.781 L731.432 684.781 L731.991 684.781 L732.55 684.781 L733.109 684.781 L733.669 684.781 L734.228 684.781 L734.787 684.781 L735.346 684.781 L735.906 684.781 L736.465 684.781 L737.024 684.781 L737.583 684.781 L738.143 684.781 L738.702 684.781 L739.261 684.781 L739.82 684.781 L740.38 684.781 L740.939 684.781 L741.498 684.781 L742.057 684.781 L742.617 684.781 L743.176 684.781 L743.735 684.781 L744.294 684.781 L744.854 684.781 L745.413 684.781 L745.972 684.781 L746.531 684.781 L747.091 684.781 L747.65 684.781 L748.209 684.781 L748.768 684.781 L749.328 684.781 L749.887 684.781 L750.446 684.781 L751.005 684.781 L751.565 684.781 L752.124 684.781 L752.683 684.781 L753.242 684.781 L753.802 684.781 L754.361 684.781 L754.92 684.781 L755.479 684.781 L756.039 684.781 L756.598 684.781 L757.157 684.781 L757.716 684.781 L758.276 684.781 L758.835 684.781 L759.394 684.781 L759.953 684.781 L760.513 684.781 L761.072 684.781 L761.631 684.781 L762.19 684.781 L762.75 684.781 L763.309 684.781 L763.868 684.781 L764.427 684.781 L764.987 684.781 L765.546 684.781 L766.105 684.781 L766.664 684.781 L767.224 684.781 L767.783 684.781 L768.342 684.781 L768.901 684.781 L769.461 684.781 L770.02 684.781 L770.579 684.781 L771.138 684.781 L771.698 684.781 L772.257 684.781 L772.816 684.781 L773.375 684.781 L773.935 684.781 L774.494 684.781 L775.053 684.781 L775.612 684.781 L776.172 684.781 L776.731 684.781 L777.29 684.781 L777.849 684.781 L778.409 684.781 L778.968 684.781 L779.527 684.781 L780.086 684.781 L780.646 684.781 L781.205 684.781 L781.764 684.781 L782.323 684.781 L782.883 684.781 L783.442 684.781 L784.001 684.781 L784.56 684.781 L785.12 684.781 L785.679 684.781 L786.238 684.781 L786.797 684.781 L787.357 684.781 L787.916 684.781 L788.475 684.781 L789.034 684.781 L789.594 684.781 L790.153 684.781 L790.712 684.781 L791.271 684.781 L791.831 684.781 L792.39 684.781 L792.949 684.781 L793.508 684.781 L794.068 684.781 L794.627 684.781 L795.186 684.781 L795.745 684.781 L796.305 684.781 L796.864 684.781 L797.423 684.781 L797.982 684.781 L798.542 684.781 L799.101 684.781 L799.66 684.781 L800.219 684.781 L800.779 684.781 L801.338 684.781 L801.897 684.781 L802.456 684.781 L803.016 684.781 L803.575 684.781 L804.134 684.781 L804.693 684.781 L805.253 684.781 L805.812 684.781 L806.371 684.781 L806.931 684.781 L807.49 684.781 L808.049 684.781 L808.608 684.781 L809.168 684.781 L809.727 684.781 L810.286 684.781 L810.845 684.781 L811.405 684.781 L811.964 684.781 L812.523 684.781 L813.082 684.781 L813.642 684.781 L814.201 684.781 L814.76 684.781 L815.319 684.781 L815.879 684.781 L816.438 684.781 L816.997 684.781 L817.556 684.781 L818.116 684.781 L818.675 684.781 L819.234 684.781 L819.793 684.781 L820.353 684.781 L820.912 684.781 L821.471 684.781 L822.03 684.781 L822.59 684.781 L823.149 684.781 L823.708 684.781 L824.267 684.781 L824.827 684.781 L825.386 684.781 L825.945 684.781 L826.504 684.781 L827.064 684.781 L827.623 684.781 L828.182 684.781 L828.741 684.781 L829.301 684.781 L829.86 684.781 L830.419 684.781 L830.978 684.781 L831.538 684.781 L832.097 684.781 L832.656 684.781 L833.215 684.781 L833.775 684.781 L834.334 684.781 L834.893 684.781 L835.452 684.781 L836.012 684.781 L836.571 684.781 L837.13 684.781 L837.689 684.781 L838.249 684.781 L838.808 684.781 L839.367 684.781 L839.926 684.781 L840.486 684.781 L841.045 684.781 L841.604 684.781 L842.163 684.781 L842.723 684.781 L843.282 684.781 L843.841 684.781 L844.4 684.781 L844.96 684.781 L845.519 684.781 L846.078 684.781 L846.637 684.781 L847.197 684.781 L847.756 684.781 L848.315 684.781 L848.874 684.781 L849.434 684.781 L849.993 684.781 L850.552 684.781 L851.111 684.781 L851.671 684.781 L852.23 684.781 L852.789 684.781 L853.348 684.781 L853.908 684.781 L854.467 684.781 L855.026 684.781 L855.585 684.781 L856.145 684.781 L856.704 684.781 L857.263 684.781 L857.822 684.781 L858.382 684.781 L858.941 684.781 L859.5 684.781 L860.059 684.781 L860.619 684.781 L861.178 684.781 L861.737 684.781 L862.296 684.781 L862.856 684.781 L863.415 684.781 L863.974 684.781 L864.533 684.781 L865.093 684.781 L865.652 684.781 L866.211 684.781 L866.77 684.781 L867.33 684.781 L867.889 684.781 L868.448 684.781 L869.007 684.781 L869.567 684.781 L870.126 684.781 L870.685 684.781 L871.244 684.781 L871.804 684.781 L872.363 684.781 L872.922 684.781 L873.481 684.781 L874.041 684.781 L874.6 684.781 L875.159 684.781 L875.718 684.781 L876.278 684.781 L876.837 684.781 L877.396 684.781 L877.955 684.781 L878.515 684.781 L879.074 684.781 L879.633 684.781 L880.192 684.781 L880.752 684.781 L881.311 684.781 L881.87 684.781 L882.429 684.781 L882.989 684.781 L883.548 684.781 L884.107 684.781 L884.666 684.781 L885.226 684.781 L885.785 684.781 L886.344 684.781 L886.903 684.781 L887.463 684.781 L888.022 684.781 L888.581 684.781 L889.14 684.781 L889.7 684.781 L890.259 684.781 L890.818 684.781 L891.377 684.781 L891.937 684.781 L892.496 684.781 L893.055 684.781 L893.614 684.781 L894.174 684.781 L894.733 684.781 L895.292 684.781 L895.851 684.781 L896.411 684.781 L896.97 684.781 L897.529 684.781 L898.088 684.781 L898.648 684.781 L899.207 684.781 L899.766 684.781 L900.325 684.781 L900.885 684.781 L901.444 684.781 L902.003 684.781 L902.562 684.781 L903.122 684.781 L903.681 684.781 L904.24 684.781 L904.799 684.781 L905.359 684.781 L905.918 684.781 L906.477 684.781 L907.036 684.781 L907.596 684.781 L908.155 684.781 L908.714 684.781 L909.273 684.781 L909.833 684.781 L910.392 684.781 L910.951 684.781 L911.51 684.781 L912.07 684.781 L912.629 684.781 L913.188 684.781 L913.747 684.781 L914.307 684.781 L914.866 684.781 L915.425 684.781 L915.984 684.781 L916.544 684.781 L917.103 684.781 L917.662 684.781 L918.221 684.781 L918.781 684.781 L919.34 684.781 L919.899 684.781 L920.458 684.781 L921.018 684.781 L921.577 684.781 L922.136 684.781 L922.695 684.781 L923.255 684.781 L923.814 684.781 L924.373 684.781 L924.932 684.781 L925.492 684.781 L926.051 684.781 L926.61 684.781 L927.169 684.781 L927.729 684.781 L928.288 684.781 L928.847 684.781 L929.406 684.781 L929.966 684.781 L930.525 684.781 L931.084 684.781 L931.644 684.781 L932.203 684.781 L932.762 684.781 L933.321 684.781 L933.881 684.781 L934.44 684.781 L934.999 684.781 L935.558 684.781 L936.118 684.781 L936.677 684.781 L937.236 684.781 L937.795 684.781 L938.355 684.781 L938.914 684.781 L939.473 684.781 L940.032 684.781 L940.592 684.781 L941.151 684.781 L941.71 684.781 L942.269 684.781 L942.829 684.781 L943.388 684.781 L943.947 684.781 L944.506 684.781 L945.066 684.781 L945.625 684.781 L946.184 684.781 L946.743 684.781 L947.303 684.781 L947.862 684.781 L948.421 684.781 L948.98 684.781 L949.54 684.781 L950.099 684.781 L950.658 684.781 L951.217 684.781 L951.777 684.781 L952.336 684.781 L952.895 684.781 L953.454 684.781 L954.014 684.781 L954.573 684.781 L955.132 684.781 L955.691 684.781 L956.251 684.781 L956.81 684.781 L957.369 684.781 L957.928 684.781 L958.488 684.781 L959.047 684.781 L959.606 684.781 L960.165 684.781 L960.725 684.781 L961.284 684.781 L961.843 684.781 L962.402 684.781 L962.962 684.781 L963.521 684.781 L964.08 684.781 L964.639 684.781 L965.199 684.781 L965.758 684.781 L966.317 684.781 L966.876 684.781 L967.436 684.781 L967.995 684.781 L968.554 684.781 L969.113 684.781 L969.673 684.781 L970.232 684.781 L970.791 684.781 L971.35 684.781 L971.91 684.781 L972.469 684.781 L973.028 684.781 L973.587 684.781 L974.147 684.781 L974.706 684.781 L975.265 684.781 L975.824 684.781 L976.384 684.781 L976.943 684.781 L977.502 684.781 L978.061 684.781 L978.621 684.781 L979.18 684.781 L979.739 684.781 L980.298 684.781 L980.858 684.781 L981.417 684.781 L981.976 684.781 L982.535 684.781 L983.095 684.781 L983.654 684.781 L984.213 684.781 L984.772 684.781 L985.332 684.781 L985.891 684.781 L986.45 684.781 L987.009 684.781 L987.569 684.781 L988.128 684.781 L988.687 684.781 L989.246 684.781 L989.806 684.781 L990.365 684.781 L990.924 684.781 L991.483 684.781 L992.043 684.781 L992.602 684.781 L993.161 684.781 L993.72 684.781 L994.28 684.781 L994.839 684.781 L995.398 684.781 L995.957 684.781 L996.517 684.781 L997.076 684.781 L997.635 684.781 L998.194 684.781 L998.754 684.781 L999.313 684.781 L999.872 684.781 L1000.43 684.781 L1000.99 684.781 L1001.55 684.781 L1002.11 684.781 L1002.67 684.781 L1003.23 684.781 L1003.79 684.781 L1004.35 684.781 L1004.91 684.781 L1005.46 684.781 L1006.02 684.781 L1006.58 684.781 L1007.14 684.781 L1007.7 684.781 L1008.26 684.781 L1008.82 684.781 L1009.38 684.781 L1009.94 684.781 L1010.5 684.781 L1011.06 684.781 L1011.62 684.781 L1012.18 684.781 L1012.73 684.781 L1013.29 684.781 L1013.85 684.781 L1014.41 684.781 L1014.97 684.781 L1015.53 684.781 L1016.09 684.781 L1016.65 684.781 L1017.21 684.781 L1017.77 684.781 L1018.33 684.781 L1018.89 684.781 L1019.45 684.781 L1020.01 684.781 L1020.56 684.781 L1021.12 684.781 L1021.68 684.781 L1022.24 684.781 L1022.8 684.781 L1023.36 684.781 L1023.92 684.781 L1024.48 684.781 L1025.04 684.781 L1025.6 684.781 L1026.16 684.781 L1026.72 684.781 L1027.28 684.781 L1027.83 684.781 L1028.39 684.781 L1028.95 684.781 L1029.51 684.781 L1030.07 684.781 L1030.63 684.781 L1031.19 684.781 L1031.75 684.781 L1032.31 684.781 L1032.87 684.781 L1033.43 684.781 L1033.99 684.781 L1034.55 684.781 L1035.1 684.781 L1035.66 684.781 L1036.22 684.781 L1036.78 684.781 L1037.34 684.781 L1037.9 684.781 L1038.46 684.781 L1039.02 684.781 L1039.58 684.781 L1040.14 684.781 L1040.7 684.781 L1041.26 684.781 L1041.82 684.781 L1042.38 684.781 L1042.93 684.781 L1043.49 684.781 L1044.05 684.781 L1044.61 684.781 L1045.17 684.781 L1045.73 684.781 L1046.29 684.781 L1046.85 684.781 L1047.41 684.781 L1047.97 684.781 L1048.53 684.781 L1049.09 684.781 L1049.65 684.781 L1050.2 684.781 L1050.76 684.781 L1051.32 684.781 L1051.88 684.781 L1052.44 684.781 L1053 684.781 L1053.56 684.781 L1054.12 684.781 L1054.68 684.781 L1055.24 684.781 L1055.8 684.781 L1056.36 684.781 L1056.92 684.781 L1057.48 684.781 L1058.03 684.781 L1058.59 684.781 L1059.15 684.781 L1059.71 684.781 L1060.27 684.781 L1060.83 684.781 L1061.39 684.781 L1061.95 684.781 L1062.51 684.781 L1063.07 684.781 L1063.63 684.781 L1064.19 684.781 L1064.75 684.781 L1065.3 684.781 L1065.86 684.781 L1066.42 684.781 L1066.98 684.781 L1067.54 684.781 L1068.1 684.781 L1068.66 684.781 L1069.22 684.781 L1069.78 684.781 L1070.34 684.781 L1070.9 684.781 L1071.46 684.781 L1072.02 684.781 L1072.57 684.781 L1073.13 684.781 L1073.69 684.781 L1074.25 684.781 L1074.81 684.781 L1075.37 684.781 L1075.93 684.781 L1076.49 684.781 L1077.05 684.781 L1077.61 684.781 L1078.17 684.781 L1078.73 684.781 L1079.29 684.781 L1079.85 684.781 L1080.4 684.781 L1080.96 684.781 L1081.52 684.781 L1082.08 684.781 L1082.64 684.781 L1083.2 684.781 L1083.76 684.781 L1084.32 684.781 L1084.88 684.781 L1085.44 684.781 L1086 684.781 L1086.56 684.781 L1087.12 684.781 L1087.67 684.781 L1088.23 684.781 L1088.79 684.781 L1089.35 684.781 L1089.91 684.781 L1090.47 684.781 L1091.03 684.781 L1091.59 684.781 L1092.15 684.781 L1092.71 684.781 L1093.27 684.781 L1093.83 684.781 L1094.39 684.781 L1094.94 684.781 L1095.5 684.781 L1096.06 684.781 L1096.62 684.781 L1097.18 684.781 L1097.74 684.781 L1098.3 684.781 L1098.86 684.781 L1099.42 684.781 L1099.98 684.781 L1100.54 684.781 L1101.1 684.781 L1101.66 684.781 L1102.22 684.781 L1102.77 684.781 L1103.33 684.781 L1103.89 684.781 L1104.45 684.781 L1105.01 684.781 L1105.57 684.781 L1106.13 684.781 L1106.69 684.781 L1107.25 684.781 L1107.81 684.781 L1108.37 684.781 L1108.93 684.781 L1109.49 684.781 L1110.04 684.781 L1110.6 684.781 L1111.16 684.781 L1111.72 684.781 L1112.28 684.781 L1112.84 684.781 L1113.4 684.781 L1113.96 684.781 L1114.52 684.781 L1115.08 684.781 L1115.64 684.781 L1116.2 684.781 L1116.76 684.781 L1117.31 684.781 L1117.87 684.781 L1118.43 684.781 L1118.99 684.781 L1119.55 684.781 L1120.11 684.781 L1120.67 684.781 L1121.23 684.781 L1121.79 684.781 L1122.35 684.781 L1122.91 684.781 L1123.47 684.781 L1124.03 684.781 L1124.59 684.781 L1125.14 684.781 L1125.7 684.781 L1126.26 684.781 L1126.82 684.781 L1127.38 684.781 L1127.94 684.781 L1128.5 684.781 L1129.06 684.781 L1129.62 684.781 L1130.18 684.781 L1130.74 684.781 L1131.3 684.781 L1131.86 684.781 L1132.41 684.781 L1132.97 684.781 L1133.53 684.781 L1134.09 684.781 L1134.65 684.781 L1135.21 684.781 L1135.77 684.781 L1136.33 684.781 L1136.89 684.781 L1137.45 684.781 L1138.01 684.781 L1138.57 684.781 L1139.13 684.781 L1139.68 684.781 L1140.24 684.781 L1140.8 684.781 L1141.36 684.781 L1141.92 684.781 L1142.48 684.781 L1143.04 684.781 L1143.6 684.781 L1144.16 684.781 L1144.72 684.781 L1145.28 684.781 L1145.84 684.781 L1146.4 684.781 L1146.96 684.781 L1147.51 684.781 L1148.07 684.781 L1148.63 684.781 L1149.19 684.781 L1149.75 684.781 L1150.31 684.781 L1150.87 684.781 L1151.43 684.781 L1151.99 684.781 L1152.55 684.781 L1153.11 684.781 L1153.67 684.781 L1154.23 684.781 L1154.78 684.781 L1155.34 684.781 L1155.9 684.781 L1156.46 684.781 L1157.02 684.781 L1157.58 684.781 L1158.14 684.781 L1158.7 684.781 L1159.26 684.781 L1159.82 684.781 L1160.38 684.781 L1160.94 684.781 L1161.5 684.781 L1162.05 684.781 L1162.61 684.781 L1163.17 684.781 L1163.73 684.781 L1164.29 684.781 L1164.85 684.781 L1165.41 684.781 L1165.97 684.781 L1166.53 684.781 L1167.09 684.781 L1167.65 684.781 L1168.21 684.781 L1168.77 684.781 L1169.33 684.781 L1169.88 684.781 L1170.44 684.781 L1171 684.781 L1171.56 684.781 L1172.12 684.781 L1172.68 684.781 L1173.24 684.781 L1173.8 684.781 L1174.36 684.781 L1174.92 684.781 L1175.48 684.781 L1176.04 684.781 L1176.6 684.781 L1177.15 684.781 L1177.71 684.781 L1178.27 684.781 L1178.83 684.781 L1179.39 684.781 L1179.95 684.781 L1180.51 684.781 L1181.07 684.781 L1181.63 684.781 L1182.19 684.781 L1182.75 684.781 L1183.31 684.781 L1183.87 684.781 L1184.43 684.781 L1184.98 684.781 L1185.54 684.781 L1186.1 684.781 L1186.66 684.781 L1187.22 684.781 L1187.78 684.781 L1188.34 684.781 L1188.9 684.781 L1189.46 684.781 L1190.02 684.781 L1190.58 684.781 L1191.14 684.781 L1191.7 684.781 L1192.25 684.781 L1192.81 684.781 L1193.37 684.781 L1193.93 684.781 L1194.49 684.781 L1195.05 684.781 L1195.61 684.781 L1196.17 684.781 L1196.73 684.781 L1197.29 684.781 L1197.85 684.781 L1198.41 684.781 L1198.97 684.781 L1199.52 684.781 L1200.08 684.781 L1200.64 684.781 L1201.2 684.781 L1201.76 684.781 L1202.32 684.781 L1202.88 684.781 L1203.44 684.781 L1204 684.781 L1204.56 684.781 L1205.12 684.781 L1205.68 684.781 L1206.24 684.781 L1206.8 684.781 L1207.35 684.781 L1207.91 684.781 L1208.47 684.781 L1209.03 684.781 L1209.59 684.781 L1210.15 684.781 L1210.71 684.781 L1211.27 684.781 L1211.83 684.781 L1212.39 684.781 L1212.95 684.781 L1213.51 684.781 L1214.07 684.781 L1214.62 684.781 L1215.18 684.781 L1215.74 684.781 L1216.3 684.781 L1216.86 684.781 L1217.42 684.781 L1217.98 684.781 L1218.54 684.781 L1219.1 684.781 L1219.66 684.781 L1220.22 684.781 L1220.78 684.781 L1221.34 684.781 L1221.89 684.781 L1222.45 684.781 L1223.01 684.781 L1223.57 684.781 L1224.13 684.781 L1224.69 684.781 L1225.25 684.781 L1225.81 684.781 L1226.37 684.781 L1226.93 684.781 L1227.49 684.781 L1228.05 684.781 L1228.61 684.781 L1229.17 684.781 L1229.72 684.781 L1230.28 684.781 L1230.84 684.781 L1231.4 684.781 L1231.96 684.781 L1232.52 684.781 L1233.08 684.781 L1233.64 684.781 L1234.2 684.781 L1234.76 684.781 L1235.32 684.781 L1235.88 684.781 L1236.44 684.781 L1236.99 684.781 L1237.55 684.781 L1238.11 684.781 L1238.67 684.781 L1239.23 684.781 L1239.79 684.781 L1240.35 684.781 L1240.91 684.781 L1241.47 684.781 L1242.03 684.781 L1242.59 684.781 L1243.15 684.781 L1243.71 684.781 L1244.26 684.781 L1244.82 684.781 L1245.38 684.781 L1245.94 684.781 L1246.5 684.781 L1247.06 684.781 L1247.62 684.781 L1248.18 684.781 L1248.74 684.781 L1249.3 684.781 L1249.86 684.781 L1250.42 684.781 L1250.98 684.781 L1251.54 684.781 L1252.09 684.781 L1252.65 684.781 L1253.21 684.781 L1253.77 684.781 L1254.33 684.781 L1254.89 684.781 L1255.45 684.781 L1256.01 684.781 L1256.57 684.781 L1257.13 684.781 L1257.69 684.781 L1258.25 684.781 L1258.81 684.781 L1259.36 684.781 L1259.92 684.781 L1260.48 684.781 L1261.04 684.781 L1261.6 684.781 L1262.16 684.781 L1262.72 684.781 L1263.28 684.781 L1263.84 684.781 L1264.4 684.781 L1264.96 684.781 L1265.52 684.781 L1266.08 684.781 L1266.63 684.781 L1267.19 684.781 L1267.75 684.781 L1268.31 684.781 L1268.87 684.781 L1269.43 684.781 L1269.99 684.781 L1270.55 684.781 L1271.11 684.781 L1271.67 684.781 L1272.23 684.781 L1272.79 684.781 L1273.35 684.781 L1273.91 684.781 L1274.46 684.781 L1275.02 684.781 L1275.58 684.781 L1276.14 684.781 L1276.7 684.781 L1277.26 684.781 L1277.82 684.781 L1278.38 684.781 L1278.94 684.781 L1279.5 684.781 L1280.06 684.781 L1280.62 684.781 L1281.18 684.781 L1281.73 684.781 L1282.29 684.781 L1282.85 684.781 L1283.41 684.781 L1283.97 684.781 L1284.53 684.781 L1285.09 684.781 L1285.65 684.781 L1286.21 684.781 L1286.77 684.781 L1287.33 684.781 L1287.89 684.781 L1288.45 684.781 L1289 684.781 L1289.56 684.781 L1290.12 684.781 L1290.68 684.781 L1291.24 684.781 L1291.8 684.781 L1292.36 684.781 L1292.92 684.781 L1293.48 684.781 L1294.04 684.781 L1294.6 684.781 L1295.16 684.781 L1295.72 684.781 L1296.28 684.781 L1296.83 684.781 L1297.39 684.781 L1297.95 684.781 L1298.51 684.781 L1299.07 684.781 L1299.63 684.781 L1300.19 684.781 L1300.75 684.781 L1301.31 684.781 L1301.87 684.781 L1302.43 684.781 L1302.99 684.781 L1303.55 684.781 L1304.1 684.781 L1304.66 684.781 L1305.22 684.781 L1305.78 684.781 L1306.34 684.781 L1306.9 684.781 L1307.46 684.781 L1308.02 684.781 L1308.58 684.781 L1309.14 684.781 L1309.7 684.781 L1310.26 684.781 L1310.82 684.781 L1311.38 684.781 L1311.93 684.781 L1312.49 684.781 L1313.05 684.781 L1313.61 684.781 L1314.17 684.781 L1314.73 684.781 L1315.29 684.781 L1315.85 684.781 L1316.41 684.781 L1316.97 684.781 L1317.53 684.781 L1318.09 684.781 L1318.65 684.781 L1319.2 684.781 L1319.76 684.781 L1320.32 684.781 L1320.88 684.781 L1321.44 684.781 L1322 684.781 L1322.56 684.781 L1323.12 684.781 L1323.68 684.781 L1324.24 684.781 L1324.8 684.781 L1325.36 684.781 L1325.92 684.781 L1326.47 684.781 L1327.03 684.781 L1327.59 684.781 L1328.15 684.781 L1328.71 684.781 L1329.27 684.781 L1329.83 684.781 L1330.39 684.781 L1330.95 684.781 L1331.51 684.781 L1332.07 684.781 L1332.63 684.781 L1333.19 684.781 L1333.75 684.781 L1334.3 684.781 L1334.86 684.781 L1335.42 684.781 L1335.98 684.781 L1336.54 684.781 L1337.1 684.781 L1337.66 684.781 L1338.22 684.781 L1338.78 684.781 L1339.34 684.781 L1339.9 684.781 L1340.46 684.781 L1341.02 684.781 L1341.57 684.781 L1342.13 684.781 L1342.69 684.781 L1343.25 684.781 L1343.81 684.781 L1344.37 684.781 L1344.93 684.781 L1345.49 684.781 L1346.05 684.781 L1346.61 684.781 L1347.17 684.781 L1347.73 684.781 L1348.29 684.781 L1348.84 684.781 L1349.4 684.781 L1349.96 684.781 L1350.52 684.781 L1351.08 684.781 L1351.64 684.781 L1352.2 684.781 L1352.76 684.781 L1353.32 684.781 L1353.88 684.781 L1354.44 684.781 L1355 684.781 L1355.56 684.781 L1356.12 684.781 L1356.67 684.781 L1357.23 684.781 L1357.79 684.781 L1358.35 684.781 L1358.91 684.781 L1359.47 684.781 L1360.03 684.781 L1360.59 684.781 L1361.15 684.781 L1361.71 684.781 L1362.27 684.781 L1362.83 684.781 L1363.39 684.781 L1363.94 684.781 L1364.5 684.781 L1365.06 684.781 L1365.62 684.781 L1366.18 684.781 L1366.74 684.781 L1367.3 684.781 L1367.86 684.781 L1368.42 684.781 L1368.98 684.781 L1369.54 684.781 L1370.1 684.781 L1370.66 684.781 L1371.21 684.781 L1371.77 684.781 L1372.33 684.781 L1372.89 684.781 L1373.45 684.781 L1374.01 684.781 L1374.57 684.781 L1375.13 684.781 L1375.69 684.781 L1376.25 684.781 L1376.81 684.781 L1377.37 684.781 L1377.93 684.781 L1378.49 684.781 L1379.04 684.781 L1379.6 684.781 L1380.16 684.781 L1380.72 684.781 L1381.28 684.781 L1381.84 684.781 L1382.4 684.781 L1382.96 684.781 L1383.52 684.781 L1384.08 684.781 L1384.64 684.781 L1385.2 684.781 L1385.76 684.781 L1386.31 684.781 L1386.87 684.781 L1387.43 684.781 L1387.99 684.781 L1388.55 684.781 L1389.11 684.781 L1389.67 684.781 L1390.23 684.781 L1390.79 684.781 L1391.35 684.781 L1391.91 684.781 L1392.47 684.781 L1393.03 684.781 L1393.58 684.781 L1394.14 684.781 L1394.7 684.781 L1395.26 684.781 L1395.82 684.781 L1396.38 684.781 L1396.94 684.781 L1397.5 684.781 L1398.06 684.781 L1398.62 684.781 L1399.18 684.781 L1399.74 684.781 L1400.3 684.781 L1400.86 684.781 L1401.41 684.781 L1401.97 684.781 L1402.53 684.781 L1403.09 684.781 L1403.65 684.781 L1404.21 684.781 L1404.77 684.781 L1405.33 684.781 L1405.89 684.781 L1406.45 684.781 L1407.01 684.781 L1407.57 684.781 L1408.13 684.781 L1408.68 684.781 L1409.24 684.781 L1409.8 684.781 L1410.36 684.781 L1410.92 684.781 L1411.48 684.781 L1412.04 684.781 L1412.6 684.781 L1413.16 684.781 L1413.72 684.781 L1414.28 684.781 L1414.84 684.781 L1415.4 684.781 L1415.95 684.781 L1416.51 684.781 L1417.07 684.781 L1417.63 684.781 L1418.19 684.781 L1418.75 684.781 L1419.31 684.781 L1419.87 684.781 L1420.43 684.781 L1420.99 684.781 L1421.55 684.781 L1422.11 684.781 L1422.67 684.781 L1423.23 684.781 L1423.78 684.781 L1424.34 684.781 L1424.9 684.781 L1425.46 684.781 L1426.02 684.781 L1426.58 684.781 L1427.14 684.781 L1427.7 684.781 L1428.26 684.781 L1428.82 684.781 L1429.38 684.781 L1429.94 684.781 L1430.5 684.781 L1431.05 684.781 L1431.61 684.781 L1432.17 684.781 L1432.73 684.781 L1433.29 684.781 L1433.85 684.781 L1434.41 684.781 L1434.97 684.781 L1435.53 684.781 L1436.09 684.781 L1436.65 684.781 L1437.21 684.781 L1437.77 684.781 L1438.33 684.781 L1438.88 684.781 L1439.44 684.781 L1440 684.781 L1440.56 684.781 L1441.12 684.781 L1441.68 684.781 L1442.24 684.781 L1442.8 684.781 L1443.36 684.781 L1443.92 684.781 L1444.48 684.781 L1445.04 684.781 L1445.6 684.781 L1446.15 684.781 L1446.71 684.781 L1447.27 684.781 L1447.83 684.781 L1448.39 684.781 L1448.95 684.781 L1449.51 684.781 L1450.07 684.781 L1450.63 684.781 L1451.19 684.781 L1451.75 684.781 L1452.31 684.781 L1452.87 684.781 L1453.42 684.781 L1453.98 684.781 L1454.54 684.781 L1455.1 684.781 L1455.66 684.781 L1456.22 684.781 L1456.78 684.781 L1457.34 684.781 L1457.9 684.781 L1458.46 684.781 L1459.02 684.781 L1459.58 684.781 L1460.14 684.781 L1460.7 684.781 L1461.25 684.781 L1461.81 684.781 L1462.37 684.781 L1462.93 684.781 L1463.49 684.781 L1464.05 684.781 L1464.61 684.781 L1465.17 684.781 L1465.73 684.781 L1466.29 684.781 L1466.85 684.781 L1467.41 684.781 L1467.97 684.781 L1468.52 684.781 L1469.08 684.781 L1469.64 684.781 L1470.2 684.781 L1470.76 684.781 L1471.32 684.781 L1471.88 684.781 L1472.44 684.781 L1473 684.781 L1473.56 684.781 L1474.12 684.781 L1474.68 684.781 L1475.24 684.781 L1475.79 684.781 L1476.35 684.781 L1476.91 684.781 L1477.47 684.781 L1478.03 684.781 L1478.59 684.781 L1479.15 684.781 L1479.71 684.781 L1480.27 684.781 L1480.83 684.781 L1481.39 684.781 L1481.95 684.781 L1482.51 684.781 L1483.07 684.781 L1483.62 684.781 L1484.18 684.781 L1484.74 684.781 L1485.3 684.781 L1485.86 684.781 L1486.42 684.781 L1486.98 684.781 L1487.54 684.781 L1488.1 684.781 L1488.66 684.781 L1489.22 684.781 L1489.78 684.781 L1490.34 684.781 L1490.89 684.781 L1491.45 684.781 L1492.01 684.781 L1492.57 684.781 L1493.13 684.781 L1493.69 684.781 L1494.25 684.781 L1494.81 684.781 L1495.37 684.781 L1495.93 684.781 L1496.49 684.781 L1497.05 684.781 L1497.61 684.781 L1498.16 684.781 L1498.72 684.781 L1499.28 684.781 L1499.84 684.781 L1500.4 684.781 L1500.96 684.781 L1501.52 684.781 L1502.08 684.781 L1502.64 684.781 L1503.2 684.781 L1503.76 684.781 L1504.32 684.781 L1504.88 684.781 L1505.44 684.781 L1505.99 684.781 L1506.55 684.781 L1507.11 684.781 L1507.67 684.781 L1508.23 684.781 L1508.79 684.781 L1509.35 684.781 L1509.91 684.781 L1510.47 684.781 L1511.03 684.781 L1511.59 684.781 L1512.15 684.781 L1512.71 684.781 L1513.26 684.781 L1513.82 684.781 L1514.38 684.781 L1514.94 684.781 L1515.5 684.781 L1516.06 684.781 L1516.62 684.781 L1517.18 684.781 L1517.74 684.781 L1518.3 684.781 L1518.86 684.781 L1519.42 684.781 L1519.98 684.781 L1520.53 684.781 L1521.09 684.781 L1521.65 684.781 L1522.21 684.781 L1522.77 684.781 L1523.33 684.781 L1523.89 684.781 L1524.45 684.781 L1525.01 684.781 L1525.57 684.781 L1526.13 684.781 L1526.69 684.781 L1527.25 684.781 L1527.81 684.781 L1528.36 684.781 L1528.92 684.781 L1529.48 684.781 L1530.04 684.781 L1530.6 684.781 L1531.16 684.781 L1531.72 684.781 L1532.28 684.781 L1532.84 684.781 L1533.4 684.781 L1533.96 684.781 L1534.52 684.781 L1535.08 684.781 L1535.63 684.781 L1536.19 684.781 L1536.75 684.781 L1537.31 684.781 L1537.87 684.781 L1538.43 684.781 L1538.99 684.781 L1539.55 684.781 L1540.11 684.781 L1540.67 684.781 L1541.23 684.781 L1541.79 684.781 L1542.35 684.781 L1542.9 684.781 L1543.46 684.781 L1544.02 684.781 L1544.58 684.781 L1545.14 684.781 L1545.7 684.781 L1546.26 684.781 L1546.82 684.781 L1547.38 684.781 L1547.94 684.781 L1548.5 684.781 L1549.06 684.781 L1549.62 684.781 L1550.18 684.781 L1550.73 684.781 L1551.29 684.781 L1551.85 684.781 L1552.41 684.781 L1552.97 684.781 L1553.53 684.781 L1554.09 684.781 L1554.65 684.781 L1555.21 684.781 L1555.77 684.781 L1556.33 684.781 L1556.89 684.781 L1557.45 684.781 L1558 684.781 L1558.56 684.781 L1559.12 684.781 L1559.68 684.781 L1560.24 684.781 L1560.8 684.781 L1561.36 684.781 L1561.92 684.781 L1562.48 684.781 L1563.04 684.781 L1563.6 684.781 L1564.16 684.781 L1564.72 684.781 L1565.28 684.781 L1565.83 684.781 L1566.39 684.781 L1566.95 684.781 L1567.51 684.781 L1568.07 684.781 L1568.63 684.781 L1569.19 684.781 L1569.75 684.781 L1570.31 684.781 L1570.87 684.781 L1571.43 684.781 L1571.99 684.781 L1572.55 684.781 L1573.1 684.781 L1573.66 684.781 L1574.22 684.781 L1574.78 684.781 L1575.34 684.781 L1575.9 684.781 L1576.46 684.781 L1577.02 684.781 L1577.58 684.781 L1578.14 684.781 L1578.7 684.781 L1579.26 684.781 L1579.82 684.781 L1580.37 684.781 L1580.93 684.781 L1581.49 684.781 L1582.05 684.781 L1582.61 684.781 L1583.17 684.781 L1583.73 684.781 L1584.29 684.781 L1584.85 684.781 L1585.41 684.781 L1585.97 684.781 L1586.53 684.781 L1587.09 684.781 L1587.65 684.781 L1588.2 684.781 L1588.76 684.781 L1589.32 684.781 L1589.88 684.781 L1590.44 684.781 L1591 684.781 L1591.56 684.781 L1592.12 684.781 L1592.68 684.781 L1593.24 684.781 L1593.8 684.781 L1594.36 684.781 L1594.92 684.781 L1595.47 684.781 L1596.03 684.781 L1596.59 684.781 L1597.15 684.781 L1597.71 684.781 L1598.27 684.781 L1598.83 684.781 L1599.39 684.781 L1599.95 684.781 L1600.51 684.781 L1601.07 684.781 L1601.63 684.781 L1602.19 684.781 L1602.74 684.781 L1603.3 684.781 L1603.86 684.781 L1604.42 684.781 L1604.98 684.781 L1605.54 684.781 L1606.1 684.781 L1606.66 684.781 L1607.22 684.781 L1607.78 684.781 L1608.34 684.781 L1608.9 684.781 L1609.46 684.781 L1610.02 684.781 L1610.57 684.781 L1611.13 684.781 L1611.69 684.781 L1612.25 684.781 L1612.81 684.781 L1613.37 684.781 L1613.93 684.781 L1614.49 684.781 L1615.05 684.781 L1615.61 684.781 L1616.17 684.781 L1616.73 684.781 L1617.29 684.781 L1617.84 684.781 L1618.4 684.781 L1618.96 684.781 L1619.52 684.781 L1620.08 684.781 L1620.64 684.781 L1621.2 684.781 L1621.76 684.781 L1622.32 684.781 L1622.88 684.781 L1623.44 684.781 L1624 684.781 L1624.56 684.781 L1625.11 684.781 L1625.67 684.781 L1626.23 684.781 L1626.79 684.781 L1627.35 684.781 L1627.91 684.781 L1628.47 684.781 L1629.03 684.781 L1629.59 684.781 L1630.15 684.781 L1630.71 684.781 L1631.27 684.781 L1631.83 684.781 L1632.39 684.781 L1632.94 684.781 L1633.5 684.781 L1634.06 684.781 L1634.62 684.781 L1635.18 684.781 L1635.74 684.781 L1636.3 684.781 L1636.86 684.781 L1637.42 684.781 L1637.98 684.781 L1638.54 684.781 L1639.1 684.781 L1639.66 684.781 L1640.21 684.781 L1640.77 684.781 L1641.33 684.781 L1641.89 684.781 L1642.45 684.781 L1643.01 684.781 L1643.57 684.781 L1644.13 684.781 L1644.69 684.781 L1645.25 684.781 L1645.81 684.781 L1646.37 684.781 L1646.93 684.781 L1647.48 684.781 L1648.04 684.781 L1648.6 684.781 L1649.16 684.781 L1649.72 684.781 L1650.28 684.781 L1650.84 684.781 L1651.4 684.781 L1651.96 684.781 L1652.52 684.781 L1653.08 684.781 L1653.64 684.781 L1654.2 684.781 L1654.76 684.781 L1655.31 684.781 L1655.87 684.781 L1656.43 684.781 L1656.99 684.781 L1657.55 684.781 L1658.11 684.781 L1658.67 684.781 L1659.23 684.781 L1659.79 684.781 L1660.35 684.781 L1660.91 684.781 L1661.47 684.781 L1662.03 684.781 L1662.58 684.781 L1663.14 684.781 L1663.7 684.781 L1664.26 684.781 L1664.82 684.781 L1665.38 684.781 L1665.94 684.781 L1666.5 684.781 L1667.06 684.781 L1667.62 684.781 L1668.18 684.781 L1668.74 684.781 L1669.3 684.781 L1669.85 684.781 L1670.41 684.781 L1670.97 684.781 L1671.53 684.781 L1672.09 684.781 L1672.65 684.781 L1673.21 684.781 L1673.77 684.781 L1674.33 684.781 L1674.89 684.781 L1675.45 684.781 L1676.01 684.781 L1676.57 684.781 L1677.13 684.781 L1677.68 684.781 L1678.24 684.781 L1678.8 684.781 L1679.36 684.781 L1679.92 684.781 L1680.48 684.781 L1681.04 684.781 L1681.6 684.781 L1682.16 684.781 L1682.72 684.781 L1683.28 684.781 L1683.84 684.781 L1684.4 684.781 L1684.95 684.781 L1685.51 684.781 L1686.07 684.781 L1686.63 684.781 L1687.19 684.781 L1687.75 684.781 L1688.31 684.781 L1688.87 684.781 L1689.43 684.781 L1689.99 684.781 L1690.55 684.781 L1691.11 684.781 L1691.67 684.781 L1692.23 684.781 L1692.78 684.781 L1693.34 684.781 L1693.9 684.781 L1694.46 684.781 L1695.02 684.781 L1695.58 684.781 L1696.14 684.781 L1696.7 684.781 L1697.26 684.781 L1697.82 684.781 L1698.38 684.781 L1698.94 684.781 L1699.5 684.781 L1700.05 684.781 L1700.61 684.781 L1701.17 684.781 L1701.73 684.781 L1702.29 684.781 L1702.85 684.781 L1703.41 684.781 L1703.97 684.781 L1704.53 684.781 L1705.09 684.781 L1705.65 684.781 L1706.21 684.781 L1706.77 684.781 L1707.32 684.781 L1707.88 684.781 L1708.44 684.781 L1709 684.781 L1709.56 684.781 L1710.12 684.781 L1710.68 684.781 L1711.24 684.781 L1711.8 684.781 L1712.36 684.781 L1712.92 684.781 L1713.48 684.781 L1714.04 684.781 L1714.6 684.781 L1715.15 684.781 L1715.71 684.781 L1716.27 684.781 L1716.83 684.781 L1717.39 684.781 L1717.95 684.781 L1718.51 684.781 L1719.07 684.781 L1719.63 684.781 L1720.19 684.781 L1720.75 684.781 L1721.31 684.781 L1721.87 684.781 L1722.42 684.781 L1722.98 684.781 L1723.54 684.781 L1724.1 684.781 L1724.66 684.781 L1725.22 684.781 L1725.78 684.781 L1726.34 684.781 L1726.9 684.781 L1727.46 684.781 L1728.02 684.781 L1728.58 684.781 L1729.14 684.781 L1729.69 684.781 L1730.25 684.781 L1730.81 684.781 L1731.37 684.781 L1731.93 684.781 L1732.49 684.781 L1733.05 684.781 L1733.61 684.781 L1734.17 684.781 L1734.73 684.781 L1735.29 684.781 L1735.85 684.781 L1736.41 684.781 L1736.97 684.781 L1737.52 684.781 L1738.08 684.781 L1738.64 684.781 L1739.2 684.781 L1739.76 684.781 L1740.32 684.781 L1740.88 684.781 L1741.44 684.781 L1742 684.781 L1742.56 684.781 L1743.12 684.781 L1743.68 684.781 L1744.24 684.781 L1744.79 684.781 L1745.35 684.781 L1745.91 684.781 L1746.47 684.781 L1747.03 684.781 L1747.59 684.781 L1748.15 684.781 L1748.71 684.781 L1749.27 684.781 L1749.83 684.781 L1750.39 684.781 L1750.95 684.781 L1751.51 684.781 L1752.06 684.781 L1752.62 684.781 L1753.18 684.781 L1753.74 684.781 L1754.3 684.781 L1754.86 684.781 L1755.42 684.781 L1755.98 684.781 L1756.54 684.781 L1757.1 684.781 L1757.66 684.781 L1758.22 684.781 L1758.78 684.781 L1759.34 684.781 L1759.89 684.781 L1760.45 684.781 L1761.01 684.781 L1761.57 684.781 L1762.13 684.781 L1762.69 684.781 L1763.25 684.781 L1763.81 684.781 L1764.37 684.781 L1764.93 684.781 L1765.49 684.781 L1766.05 684.781 L1766.61 684.781 L1767.16 684.781 L1767.72 684.781 L1768.28 684.781 L1768.84 684.781 L1769.4 684.781 L1769.96 684.781 L1770.52 684.781 L1771.08 684.781 L1771.64 684.781 L1772.2 684.781 L1772.76 684.781 L1773.32 684.781 L1773.88 684.781 L1774.43 684.781 L1774.99 684.781 L1775.55 684.781 L1776.11 684.781 L1776.67 684.781 L1777.23 684.781 L1777.79 684.781 L1778.35 684.781 L1778.91 684.781 L1779.47 684.781 L1780.03 684.781 L1780.59 684.781 L1781.15 684.781 L1781.71 684.781 L1782.26 684.781 L1782.82 684.781 L1783.38 684.781 L1783.94 684.781 L1784.5 684.781 L1785.06 684.781 L1785.62 684.781 L1786.18 684.781 L1786.74 684.781 L1787.3 684.781 L1787.86 684.781 L1788.42 684.781 L1788.98 684.781 L1789.53 684.781 L1790.09 684.781 L1790.65 684.781 L1791.21 684.781 L1791.77 684.781 L1792.33 684.781 L1792.89 684.781 L1793.45 684.781 L1794.01 684.781 L1794.57 684.781 L1795.13 684.781 L1795.69 684.781 L1796.25 684.781 L1796.8 684.781 L1797.36 684.781 L1797.92 684.781 L1798.48 684.781 L1799.04 684.781 L1799.6 684.781 L1800.16 684.781 L1800.72 684.781 L1801.28 684.781 L1801.84 684.781 L1802.4 684.781 L1802.96 684.781 L1803.52 684.781 L1804.08 684.781 L1804.63 684.781 L1805.19 684.781 L1805.75 684.781 L1806.31 684.781 L1806.87 684.781 L1807.43 684.781 L1807.99 684.781 L1808.55 684.781 L1809.11 684.781 L1809.67 684.781 L1810.23 684.781 L1810.79 684.781 L1811.35 684.781 L1811.9 684.781 L1812.46 684.781 L1813.02 684.781 L1813.58 684.781 L1814.14 684.781 L1814.7 684.781 L1815.26 684.781 L1815.82 684.781 L1816.38 684.781 L1816.94 684.781 L1817.5 684.781 L1818.06 684.781 L1818.62 684.781 L1819.18 684.781 L1819.73 684.781 L1820.29 684.781 L1820.85 684.781 L1821.41 684.781 L1821.97 684.781 L1822.53 684.781 L1823.09 684.781 L1823.65 684.781 L1824.21 684.781 L1824.77 684.781 L1825.33 684.781 L1825.89 684.781 L1826.45 684.781 L1827 684.781 L1827.56 684.781 L1828.12 684.781 L1828.68 684.781 L1829.24 684.781 L1829.8 684.781 L1830.36 684.781 L1830.92 684.781 L1831.48 684.781 L1832.04 684.781 L1832.6 684.781 L1833.16 684.781 L1833.72 684.781 L1834.27 684.781 L1834.83 684.781 L1835.39 684.781 L1835.95 684.781 L1836.51 684.781 L1837.07 684.781 L1837.63 684.781 L1838.19 684.781 L1838.19 683.228 L1837.63 683.228 L1837.07 683.228 L1836.51 683.228 L1835.95 683.228 L1835.39 683.228 L1834.83 683.228 L1834.27 683.228 L1833.72 683.228 L1833.16 683.228 L1832.6 683.228 L1832.04 683.228 L1831.48 683.228 L1830.92 683.228 L1830.36 683.228 L1829.8 683.228 L1829.24 683.228 L1828.68 683.228 L1828.12 683.228 L1827.56 683.228 L1827 683.228 L1826.45 683.228 L1825.89 683.228 L1825.33 683.228 L1824.77 683.228 L1824.21 683.228 L1823.65 683.228 L1823.09 683.228 L1822.53 683.228 L1821.97 683.228 L1821.41 683.228 L1820.85 683.228 L1820.29 683.228 L1819.73 683.228 L1819.18 683.228 L1818.62 683.228 L1818.06 683.228 L1817.5 683.228 L1816.94 683.228 L1816.38 683.228 L1815.82 683.228 L1815.26 683.228 L1814.7 683.228 L1814.14 683.228 L1813.58 683.228 L1813.02 683.228 L1812.46 683.228 L1811.9 683.228 L1811.35 683.228 L1810.79 683.228 L1810.23 683.228 L1809.67 683.228 L1809.11 683.228 L1808.55 683.228 L1807.99 683.228 L1807.43 683.228 L1806.87 683.228 L1806.31 683.228 L1805.75 683.228 L1805.19 683.228 L1804.63 683.228 L1804.08 683.228 L1803.52 683.228 L1802.96 683.228 L1802.4 683.228 L1801.84 683.228 L1801.28 683.228 L1800.72 683.228 L1800.16 683.228 L1799.6 683.228 L1799.04 683.228 L1798.48 683.228 L1797.92 683.228 L1797.36 683.228 L1796.8 683.228 L1796.25 683.228 L1795.69 683.228 L1795.13 683.228 L1794.57 683.228 L1794.01 683.228 L1793.45 683.228 L1792.89 683.228 L1792.33 683.228 L1791.77 683.228 L1791.21 683.228 L1790.65 683.228 L1790.09 683.228 L1789.53 683.228 L1788.98 683.228 L1788.42 683.228 L1787.86 683.228 L1787.3 683.228 L1786.74 683.228 L1786.18 683.228 L1785.62 683.228 L1785.06 683.228 L1784.5 683.228 L1783.94 683.228 L1783.38 683.228 L1782.82 683.228 L1782.26 683.228 L1781.71 683.228 L1781.15 683.228 L1780.59 683.228 L1780.03 683.228 L1779.47 683.228 L1778.91 683.228 L1778.35 683.228 L1777.79 683.228 L1777.23 683.228 L1776.67 683.228 L1776.11 683.228 L1775.55 683.228 L1774.99 683.228 L1774.43 683.228 L1773.88 683.228 L1773.32 683.228 L1772.76 683.228 L1772.2 683.228 L1771.64 683.228 L1771.08 683.228 L1770.52 683.228 L1769.96 683.228 L1769.4 683.228 L1768.84 683.228 L1768.28 683.228 L1767.72 683.228 L1767.16 683.228 L1766.61 683.228 L1766.05 683.228 L1765.49 683.228 L1764.93 683.228 L1764.37 683.228 L1763.81 683.228 L1763.25 683.228 L1762.69 683.228 L1762.13 683.228 L1761.57 683.228 L1761.01 683.228 L1760.45 683.228 L1759.89 683.228 L1759.34 683.228 L1758.78 683.228 L1758.22 683.228 L1757.66 683.228 L1757.1 683.228 L1756.54 683.228 L1755.98 683.228 L1755.42 683.228 L1754.86 683.228 L1754.3 683.228 L1753.74 683.228 L1753.18 683.228 L1752.62 683.228 L1752.06 683.228 L1751.51 683.228 L1750.95 683.228 L1750.39 683.228 L1749.83 683.228 L1749.27 683.228 L1748.71 683.228 L1748.15 683.228 L1747.59 683.228 L1747.03 683.228 L1746.47 683.228 L1745.91 683.228 L1745.35 683.228 L1744.79 683.228 L1744.24 683.228 L1743.68 683.228 L1743.12 683.228 L1742.56 683.228 L1742 683.228 L1741.44 683.228 L1740.88 683.228 L1740.32 683.228 L1739.76 683.228 L1739.2 683.228 L1738.64 683.228 L1738.08 683.228 L1737.52 683.228 L1736.97 683.228 L1736.41 683.228 L1735.85 683.228 L1735.29 683.228 L1734.73 683.228 L1734.17 683.228 L1733.61 683.228 L1733.05 683.228 L1732.49 683.228 L1731.93 683.228 L1731.37 683.228 L1730.81 683.228 L1730.25 683.228 L1729.69 683.228 L1729.14 683.228 L1728.58 683.228 L1728.02 683.228 L1727.46 683.228 L1726.9 683.228 L1726.34 683.228 L1725.78 683.228 L1725.22 683.228 L1724.66 683.228 L1724.1 683.228 L1723.54 683.228 L1722.98 683.228 L1722.42 683.228 L1721.87 683.228 L1721.31 683.228 L1720.75 683.228 L1720.19 683.228 L1719.63 683.228 L1719.07 683.228 L1718.51 683.228 L1717.95 683.228 L1717.39 683.228 L1716.83 683.228 L1716.27 683.228 L1715.71 683.228 L1715.15 683.228 L1714.6 683.228 L1714.04 683.228 L1713.48 683.228 L1712.92 683.228 L1712.36 683.228 L1711.8 683.228 L1711.24 683.228 L1710.68 683.228 L1710.12 683.228 L1709.56 683.228 L1709 683.228 L1708.44 683.228 L1707.88 683.228 L1707.32 683.228 L1706.77 683.228 L1706.21 683.228 L1705.65 683.228 L1705.09 683.228 L1704.53 683.228 L1703.97 683.228 L1703.41 683.228 L1702.85 683.228 L1702.29 683.228 L1701.73 683.228 L1701.17 683.228 L1700.61 683.228 L1700.05 683.228 L1699.5 683.228 L1698.94 683.228 L1698.38 683.228 L1697.82 683.228 L1697.26 683.228 L1696.7 683.228 L1696.14 683.228 L1695.58 683.228 L1695.02 683.228 L1694.46 683.228 L1693.9 683.228 L1693.34 683.228 L1692.78 683.228 L1692.23 683.228 L1691.67 683.228 L1691.11 683.228 L1690.55 683.228 L1689.99 683.228 L1689.43 683.228 L1688.87 683.228 L1688.31 683.228 L1687.75 683.228 L1687.19 683.228 L1686.63 683.228 L1686.07 683.228 L1685.51 683.228 L1684.95 683.228 L1684.4 683.228 L1683.84 683.228 L1683.28 683.228 L1682.72 683.228 L1682.16 683.228 L1681.6 683.228 L1681.04 683.228 L1680.48 683.228 L1679.92 683.228 L1679.36 683.228 L1678.8 683.228 L1678.24 683.228 L1677.68 683.228 L1677.13 683.228 L1676.57 683.228 L1676.01 683.228 L1675.45 683.228 L1674.89 683.228 L1674.33 683.228 L1673.77 683.228 L1673.21 683.228 L1672.65 683.228 L1672.09 683.228 L1671.53 683.228 L1670.97 683.228 L1670.41 683.228 L1669.85 683.228 L1669.3 683.228 L1668.74 683.228 L1668.18 683.228 L1667.62 683.228 L1667.06 683.228 L1666.5 683.228 L1665.94 683.228 L1665.38 683.228 L1664.82 683.228 L1664.26 683.228 L1663.7 683.228 L1663.14 683.228 L1662.58 683.228 L1662.03 683.228 L1661.47 683.228 L1660.91 683.228 L1660.35 683.228 L1659.79 683.228 L1659.23 683.228 L1658.67 683.228 L1658.11 683.228 L1657.55 683.228 L1656.99 683.228 L1656.43 683.228 L1655.87 683.228 L1655.31 683.228 L1654.76 683.228 L1654.2 683.228 L1653.64 683.228 L1653.08 683.228 L1652.52 683.228 L1651.96 683.228 L1651.4 683.228 L1650.84 683.228 L1650.28 683.228 L1649.72 683.228 L1649.16 683.228 L1648.6 683.228 L1648.04 683.228 L1647.48 683.228 L1646.93 683.228 L1646.37 683.228 L1645.81 683.228 L1645.25 683.228 L1644.69 683.228 L1644.13 683.228 L1643.57 683.228 L1643.01 683.228 L1642.45 683.228 L1641.89 683.228 L1641.33 683.228 L1640.77 683.228 L1640.21 683.228 L1639.66 683.228 L1639.1 683.228 L1638.54 683.228 L1637.98 683.228 L1637.42 683.228 L1636.86 683.228 L1636.3 683.228 L1635.74 683.228 L1635.18 683.228 L1634.62 683.228 L1634.06 683.228 L1633.5 683.228 L1632.94 683.228 L1632.39 683.228 L1631.83 683.228 L1631.27 683.228 L1630.71 683.228 L1630.15 683.228 L1629.59 683.228 L1629.03 683.228 L1628.47 683.228 L1627.91 683.228 L1627.35 683.228 L1626.79 683.228 L1626.23 683.228 L1625.67 683.228 L1625.11 683.228 L1624.56 683.228 L1624 683.228 L1623.44 683.228 L1622.88 683.228 L1622.32 683.228 L1621.76 683.228 L1621.2 683.228 L1620.64 683.228 L1620.08 683.228 L1619.52 683.228 L1618.96 683.228 L1618.4 683.228 L1617.84 683.228 L1617.29 683.228 L1616.73 683.228 L1616.17 683.228 L1615.61 683.228 L1615.05 683.228 L1614.49 683.228 L1613.93 683.228 L1613.37 683.228 L1612.81 683.228 L1612.25 683.228 L1611.69 683.228 L1611.13 683.228 L1610.57 683.228 L1610.02 683.228 L1609.46 683.228 L1608.9 683.228 L1608.34 683.228 L1607.78 683.228 L1607.22 683.228 L1606.66 683.228 L1606.1 683.228 L1605.54 683.228 L1604.98 683.228 L1604.42 683.228 L1603.86 683.228 L1603.3 683.228 L1602.74 683.228 L1602.19 683.228 L1601.63 683.228 L1601.07 683.228 L1600.51 683.228 L1599.95 683.228 L1599.39 683.228 L1598.83 683.228 L1598.27 683.228 L1597.71 683.228 L1597.15 683.228 L1596.59 683.228 L1596.03 683.228 L1595.47 683.228 L1594.92 683.228 L1594.36 683.228 L1593.8 683.228 L1593.24 683.228 L1592.68 683.228 L1592.12 683.228 L1591.56 683.228 L1591 683.228 L1590.44 683.228 L1589.88 683.228 L1589.32 683.228 L1588.76 683.228 L1588.2 683.228 L1587.65 683.228 L1587.09 683.228 L1586.53 683.228 L1585.97 683.228 L1585.41 683.228 L1584.85 683.228 L1584.29 683.228 L1583.73 683.228 L1583.17 683.228 L1582.61 683.228 L1582.05 683.228 L1581.49 683.228 L1580.93 683.228 L1580.37 683.228 L1579.82 683.228 L1579.26 683.228 L1578.7 683.228 L1578.14 683.228 L1577.58 683.228 L1577.02 683.228 L1576.46 683.228 L1575.9 683.228 L1575.34 683.228 L1574.78 683.228 L1574.22 683.228 L1573.66 683.228 L1573.1 683.228 L1572.55 683.228 L1571.99 683.228 L1571.43 683.228 L1570.87 683.228 L1570.31 683.228 L1569.75 683.228 L1569.19 683.228 L1568.63 683.228 L1568.07 683.228 L1567.51 683.228 L1566.95 683.228 L1566.39 683.228 L1565.83 683.228 L1565.28 683.228 L1564.72 683.228 L1564.16 683.228 L1563.6 683.228 L1563.04 683.228 L1562.48 683.228 L1561.92 683.228 L1561.36 683.228 L1560.8 683.228 L1560.24 683.228 L1559.68 683.228 L1559.12 683.228 L1558.56 683.228 L1558 683.228 L1557.45 683.228 L1556.89 683.228 L1556.33 683.228 L1555.77 683.228 L1555.21 683.228 L1554.65 683.228 L1554.09 683.228 L1553.53 683.228 L1552.97 683.228 L1552.41 683.228 L1551.85 683.228 L1551.29 683.228 L1550.73 683.228 L1550.18 683.228 L1549.62 683.228 L1549.06 683.228 L1548.5 683.228 L1547.94 683.228 L1547.38 683.228 L1546.82 683.228 L1546.26 683.228 L1545.7 683.228 L1545.14 683.228 L1544.58 683.228 L1544.02 683.228 L1543.46 683.228 L1542.9 683.228 L1542.35 683.228 L1541.79 683.228 L1541.23 683.228 L1540.67 683.228 L1540.11 683.228 L1539.55 683.228 L1538.99 683.228 L1538.43 683.228 L1537.87 683.228 L1537.31 683.228 L1536.75 683.228 L1536.19 683.228 L1535.63 683.228 L1535.08 683.228 L1534.52 683.228 L1533.96 683.228 L1533.4 683.228 L1532.84 683.228 L1532.28 683.228 L1531.72 683.228 L1531.16 683.228 L1530.6 683.228 L1530.04 683.228 L1529.48 683.228 L1528.92 683.228 L1528.36 683.228 L1527.81 683.228 L1527.25 683.228 L1526.69 683.228 L1526.13 683.228 L1525.57 683.228 L1525.01 683.228 L1524.45 683.228 L1523.89 683.228 L1523.33 683.228 L1522.77 683.228 L1522.21 683.228 L1521.65 683.228 L1521.09 683.228 L1520.53 683.228 L1519.98 683.228 L1519.42 683.228 L1518.86 683.228 L1518.3 683.228 L1517.74 683.228 L1517.18 683.228 L1516.62 683.228 L1516.06 683.228 L1515.5 683.228 L1514.94 683.228 L1514.38 683.228 L1513.82 683.228 L1513.26 683.228 L1512.71 683.228 L1512.15 683.228 L1511.59 683.228 L1511.03 683.228 L1510.47 683.228 L1509.91 683.228 L1509.35 683.228 L1508.79 683.228 L1508.23 683.228 L1507.67 683.228 L1507.11 683.228 L1506.55 683.228 L1505.99 683.228 L1505.44 683.228 L1504.88 683.228 L1504.32 683.228 L1503.76 683.228 L1503.2 683.228 L1502.64 683.228 L1502.08 683.228 L1501.52 683.228 L1500.96 683.228 L1500.4 683.228 L1499.84 683.228 L1499.28 683.228 L1498.72 683.228 L1498.16 683.228 L1497.61 683.228 L1497.05 683.228 L1496.49 683.228 L1495.93 683.228 L1495.37 683.228 L1494.81 683.228 L1494.25 683.228 L1493.69 683.228 L1493.13 683.228 L1492.57 683.228 L1492.01 683.228 L1491.45 683.228 L1490.89 683.228 L1490.34 683.228 L1489.78 683.228 L1489.22 683.228 L1488.66 683.228 L1488.1 683.228 L1487.54 683.228 L1486.98 683.228 L1486.42 683.228 L1485.86 683.228 L1485.3 683.228 L1484.74 683.228 L1484.18 683.228 L1483.62 683.228 L1483.07 683.228 L1482.51 683.228 L1481.95 683.228 L1481.39 683.228 L1480.83 683.228 L1480.27 683.228 L1479.71 683.228 L1479.15 683.228 L1478.59 683.228 L1478.03 683.228 L1477.47 683.228 L1476.91 683.228 L1476.35 683.228 L1475.79 683.228 L1475.24 683.228 L1474.68 683.228 L1474.12 683.228 L1473.56 683.228 L1473 683.228 L1472.44 683.228 L1471.88 683.228 L1471.32 683.228 L1470.76 683.228 L1470.2 683.228 L1469.64 683.228 L1469.08 683.228 L1468.52 683.228 L1467.97 683.228 L1467.41 683.228 L1466.85 683.228 L1466.29 683.228 L1465.73 683.228 L1465.17 683.228 L1464.61 683.228 L1464.05 683.228 L1463.49 683.228 L1462.93 683.228 L1462.37 683.228 L1461.81 683.228 L1461.25 683.228 L1460.7 683.228 L1460.14 683.228 L1459.58 683.228 L1459.02 683.228 L1458.46 683.228 L1457.9 683.228 L1457.34 683.228 L1456.78 683.228 L1456.22 683.228 L1455.66 683.228 L1455.1 683.228 L1454.54 683.228 L1453.98 683.228 L1453.42 683.228 L1452.87 683.228 L1452.31 683.228 L1451.75 683.228 L1451.19 683.228 L1450.63 683.228 L1450.07 683.228 L1449.51 683.228 L1448.95 683.228 L1448.39 683.228 L1447.83 683.228 L1447.27 683.228 L1446.71 683.228 L1446.15 683.228 L1445.6 683.228 L1445.04 683.228 L1444.48 683.228 L1443.92 683.228 L1443.36 683.228 L1442.8 683.228 L1442.24 683.228 L1441.68 683.228 L1441.12 683.228 L1440.56 683.228 L1440 683.228 L1439.44 683.228 L1438.88 683.228 L1438.33 683.228 L1437.77 683.228 L1437.21 683.228 L1436.65 683.228 L1436.09 683.228 L1435.53 683.228 L1434.97 683.228 L1434.41 683.228 L1433.85 683.228 L1433.29 683.228 L1432.73 683.228 L1432.17 683.228 L1431.61 683.228 L1431.05 683.228 L1430.5 683.228 L1429.94 683.228 L1429.38 683.228 L1428.82 683.228 L1428.26 683.228 L1427.7 683.228 L1427.14 683.228 L1426.58 683.228 L1426.02 683.228 L1425.46 683.228 L1424.9 683.228 L1424.34 683.228 L1423.78 683.228 L1423.23 683.228 L1422.67 683.228 L1422.11 683.228 L1421.55 683.228 L1420.99 683.228 L1420.43 683.228 L1419.87 683.228 L1419.31 683.228 L1418.75 683.228 L1418.19 683.228 L1417.63 683.228 L1417.07 683.228 L1416.51 683.228 L1415.95 683.228 L1415.4 683.228 L1414.84 683.228 L1414.28 683.228 L1413.72 683.228 L1413.16 683.228 L1412.6 683.228 L1412.04 683.228 L1411.48 683.228 L1410.92 683.228 L1410.36 683.228 L1409.8 683.228 L1409.24 683.228 L1408.68 683.228 L1408.13 683.228 L1407.57 683.228 L1407.01 683.228 L1406.45 683.228 L1405.89 683.228 L1405.33 683.228 L1404.77 683.228 L1404.21 683.228 L1403.65 683.228 L1403.09 683.228 L1402.53 683.228 L1401.97 683.228 L1401.41 683.228 L1400.86 683.228 L1400.3 683.228 L1399.74 683.228 L1399.18 683.228 L1398.62 683.228 L1398.06 683.228 L1397.5 683.228 L1396.94 683.228 L1396.38 683.228 L1395.82 683.228 L1395.26 683.228 L1394.7 683.228 L1394.14 683.228 L1393.58 683.228 L1393.03 683.228 L1392.47 683.228 L1391.91 683.228 L1391.35 683.228 L1390.79 683.228 L1390.23 683.228 L1389.67 683.228 L1389.11 683.228 L1388.55 683.228 L1387.99 683.228 L1387.43 683.228 L1386.87 683.228 L1386.31 683.228 L1385.76 683.228 L1385.2 683.228 L1384.64 683.228 L1384.08 683.228 L1383.52 683.228 L1382.96 683.228 L1382.4 683.228 L1381.84 683.228 L1381.28 683.228 L1380.72 683.228 L1380.16 683.228 L1379.6 683.228 L1379.04 683.228 L1378.49 683.228 L1377.93 683.228 L1377.37 683.228 L1376.81 683.228 L1376.25 683.228 L1375.69 683.228 L1375.13 683.228 L1374.57 683.228 L1374.01 683.228 L1373.45 683.228 L1372.89 683.228 L1372.33 683.228 L1371.77 683.228 L1371.21 683.228 L1370.66 683.228 L1370.1 683.228 L1369.54 683.228 L1368.98 683.228 L1368.42 683.228 L1367.86 683.228 L1367.3 683.228 L1366.74 683.228 L1366.18 683.228 L1365.62 683.228 L1365.06 683.228 L1364.5 683.228 L1363.94 683.228 L1363.39 683.228 L1362.83 683.228 L1362.27 683.228 L1361.71 683.228 L1361.15 683.228 L1360.59 683.228 L1360.03 683.228 L1359.47 683.228 L1358.91 683.228 L1358.35 683.228 L1357.79 683.228 L1357.23 683.228 L1356.67 683.228 L1356.12 683.228 L1355.56 683.228 L1355 683.228 L1354.44 683.228 L1353.88 683.228 L1353.32 683.228 L1352.76 683.228 L1352.2 683.228 L1351.64 683.228 L1351.08 683.228 L1350.52 683.228 L1349.96 683.228 L1349.4 683.228 L1348.84 683.228 L1348.29 683.228 L1347.73 683.228 L1347.17 683.228 L1346.61 683.228 L1346.05 683.228 L1345.49 683.228 L1344.93 683.228 L1344.37 683.228 L1343.81 683.228 L1343.25 683.228 L1342.69 683.228 L1342.13 683.228 L1341.57 683.228 L1341.02 683.228 L1340.46 683.228 L1339.9 683.228 L1339.34 683.228 L1338.78 683.228 L1338.22 683.228 L1337.66 683.228 L1337.1 683.228 L1336.54 683.228 L1335.98 683.228 L1335.42 683.228 L1334.86 683.228 L1334.3 683.228 L1333.75 683.228 L1333.19 683.228 L1332.63 683.228 L1332.07 683.228 L1331.51 683.228 L1330.95 683.228 L1330.39 683.228 L1329.83 683.228 L1329.27 683.228 L1328.71 683.228 L1328.15 683.228 L1327.59 683.228 L1327.03 683.228 L1326.47 683.228 L1325.92 683.228 L1325.36 683.228 L1324.8 683.228 L1324.24 683.228 L1323.68 683.228 L1323.12 683.228 L1322.56 683.228 L1322 683.228 L1321.44 683.228 L1320.88 683.228 L1320.32 683.228 L1319.76 683.228 L1319.2 683.228 L1318.65 683.228 L1318.09 683.228 L1317.53 683.228 L1316.97 683.228 L1316.41 683.228 L1315.85 683.228 L1315.29 683.228 L1314.73 683.228 L1314.17 683.228 L1313.61 683.228 L1313.05 683.228 L1312.49 683.228 L1311.93 683.228 L1311.38 683.228 L1310.82 683.228 L1310.26 683.228 L1309.7 683.228 L1309.14 683.228 L1308.58 683.228 L1308.02 683.228 L1307.46 683.228 L1306.9 683.228 L1306.34 683.228 L1305.78 683.228 L1305.22 683.228 L1304.66 683.228 L1304.1 683.228 L1303.55 683.228 L1302.99 683.228 L1302.43 683.228 L1301.87 683.228 L1301.31 683.228 L1300.75 683.228 L1300.19 683.228 L1299.63 683.228 L1299.07 683.228 L1298.51 683.228 L1297.95 683.228 L1297.39 683.228 L1296.83 683.228 L1296.28 683.228 L1295.72 683.228 L1295.16 683.228 L1294.6 683.228 L1294.04 683.228 L1293.48 683.228 L1292.92 683.228 L1292.36 683.228 L1291.8 683.228 L1291.24 683.228 L1290.68 683.228 L1290.12 683.228 L1289.56 683.228 L1289 683.228 L1288.45 683.228 L1287.89 683.228 L1287.33 683.228 L1286.77 683.228 L1286.21 683.228 L1285.65 683.228 L1285.09 683.228 L1284.53 683.228 L1283.97 683.228 L1283.41 683.228 L1282.85 683.228 L1282.29 683.228 L1281.73 683.228 L1281.18 683.228 L1280.62 683.228 L1280.06 683.228 L1279.5 683.228 L1278.94 683.228 L1278.38 683.228 L1277.82 683.228 L1277.26 683.228 L1276.7 683.228 L1276.14 683.228 L1275.58 683.228 L1275.02 683.228 L1274.46 683.228 L1273.91 683.228 L1273.35 683.228 L1272.79 683.228 L1272.23 683.228 L1271.67 683.228 L1271.11 683.228 L1270.55 683.228 L1269.99 683.228 L1269.43 683.228 L1268.87 683.228 L1268.31 683.228 L1267.75 683.228 L1267.19 683.228 L1266.63 683.228 L1266.08 683.228 L1265.52 683.228 L1264.96 683.228 L1264.4 683.228 L1263.84 683.228 L1263.28 683.228 L1262.72 683.228 L1262.16 683.228 L1261.6 683.228 L1261.04 683.228 L1260.48 683.228 L1259.92 683.228 L1259.36 683.228 L1258.81 683.228 L1258.25 683.228 L1257.69 683.228 L1257.13 683.228 L1256.57 683.228 L1256.01 683.228 L1255.45 683.228 L1254.89 683.228 L1254.33 683.228 L1253.77 683.228 L1253.21 683.228 L1252.65 683.228 L1252.09 683.228 L1251.54 683.228 L1250.98 683.228 L1250.42 683.228 L1249.86 683.228 L1249.3 683.228 L1248.74 683.228 L1248.18 683.228 L1247.62 683.228 L1247.06 683.228 L1246.5 683.228 L1245.94 683.228 L1245.38 683.228 L1244.82 683.228 L1244.26 683.228 L1243.71 683.228 L1243.15 683.228 L1242.59 683.228 L1242.03 683.228 L1241.47 683.228 L1240.91 683.228 L1240.35 683.228 L1239.79 683.228 L1239.23 683.228 L1238.67 683.228 L1238.11 683.228 L1237.55 683.228 L1236.99 683.228 L1236.44 683.228 L1235.88 683.228 L1235.32 683.228 L1234.76 683.228 L1234.2 683.228 L1233.64 683.228 L1233.08 683.228 L1232.52 683.228 L1231.96 683.228 L1231.4 683.228 L1230.84 683.228 L1230.28 683.228 L1229.72 683.228 L1229.17 683.228 L1228.61 683.228 L1228.05 683.228 L1227.49 683.228 L1226.93 683.228 L1226.37 683.228 L1225.81 683.228 L1225.25 683.228 L1224.69 683.228 L1224.13 683.228 L1223.57 683.228 L1223.01 683.228 L1222.45 683.228 L1221.89 683.228 L1221.34 683.228 L1220.78 683.228 L1220.22 683.228 L1219.66 683.228 L1219.1 683.228 L1218.54 683.228 L1217.98 683.228 L1217.42 683.228 L1216.86 683.228 L1216.3 683.228 L1215.74 683.228 L1215.18 683.228 L1214.62 683.228 L1214.07 683.228 L1213.51 683.228 L1212.95 683.228 L1212.39 683.228 L1211.83 683.228 L1211.27 683.228 L1210.71 683.228 L1210.15 683.228 L1209.59 683.228 L1209.03 683.228 L1208.47 683.228 L1207.91 683.228 L1207.35 683.228 L1206.8 683.228 L1206.24 683.228 L1205.68 683.228 L1205.12 683.228 L1204.56 683.228 L1204 683.228 L1203.44 683.228 L1202.88 683.228 L1202.32 683.228 L1201.76 683.228 L1201.2 683.228 L1200.64 683.228 L1200.08 683.228 L1199.52 683.228 L1198.97 683.228 L1198.41 683.228 L1197.85 683.228 L1197.29 683.228 L1196.73 683.228 L1196.17 683.228 L1195.61 683.228 L1195.05 683.228 L1194.49 683.228 L1193.93 683.228 L1193.37 683.228 L1192.81 683.228 L1192.25 683.228 L1191.7 683.228 L1191.14 683.228 L1190.58 683.228 L1190.02 683.228 L1189.46 683.228 L1188.9 683.228 L1188.34 683.228 L1187.78 683.228 L1187.22 683.228 L1186.66 683.228 L1186.1 683.228 L1185.54 683.228 L1184.98 683.228 L1184.43 683.228 L1183.87 683.228 L1183.31 683.228 L1182.75 683.228 L1182.19 683.228 L1181.63 683.228 L1181.07 683.228 L1180.51 683.228 L1179.95 683.228 L1179.39 683.228 L1178.83 683.228 L1178.27 683.228 L1177.71 683.228 L1177.15 683.228 L1176.6 683.228 L1176.04 683.228 L1175.48 683.228 L1174.92 683.228 L1174.36 683.228 L1173.8 683.228 L1173.24 683.228 L1172.68 683.228 L1172.12 683.228 L1171.56 683.228 L1171 683.228 L1170.44 683.228 L1169.88 683.228 L1169.33 683.228 L1168.77 683.228 L1168.21 683.228 L1167.65 683.228 L1167.09 683.228 L1166.53 683.228 L1165.97 683.228 L1165.41 683.228 L1164.85 683.228 L1164.29 683.228 L1163.73 683.228 L1163.17 683.228 L1162.61 683.228 L1162.05 683.228 L1161.5 683.228 L1160.94 683.228 L1160.38 683.228 L1159.82 683.228 L1159.26 683.228 L1158.7 683.228 L1158.14 683.228 L1157.58 683.228 L1157.02 683.228 L1156.46 683.228 L1155.9 683.228 L1155.34 683.228 L1154.78 683.228 L1154.23 683.228 L1153.67 683.228 L1153.11 683.228 L1152.55 683.228 L1151.99 683.228 L1151.43 683.228 L1150.87 683.228 L1150.31 683.228 L1149.75 683.228 L1149.19 683.228 L1148.63 683.228 L1148.07 683.228 L1147.51 683.228 L1146.96 683.228 L1146.4 683.228 L1145.84 683.228 L1145.28 683.228 L1144.72 683.228 L1144.16 683.228 L1143.6 683.228 L1143.04 683.228 L1142.48 683.228 L1141.92 683.228 L1141.36 683.228 L1140.8 683.228 L1140.24 683.228 L1139.68 683.228 L1139.13 683.228 L1138.57 683.228 L1138.01 683.228 L1137.45 683.228 L1136.89 683.228 L1136.33 683.228 L1135.77 683.228 L1135.21 683.228 L1134.65 683.228 L1134.09 683.228 L1133.53 683.228 L1132.97 683.228 L1132.41 683.228 L1131.86 683.228 L1131.3 683.228 L1130.74 683.228 L1130.18 683.228 L1129.62 683.228 L1129.06 683.228 L1128.5 683.228 L1127.94 683.228 L1127.38 683.228 L1126.82 683.228 L1126.26 683.228 L1125.7 683.228 L1125.14 683.228 L1124.59 683.228 L1124.03 683.228 L1123.47 683.228 L1122.91 683.228 L1122.35 683.228 L1121.79 683.228 L1121.23 683.228 L1120.67 683.228 L1120.11 683.228 L1119.55 683.228 L1118.99 683.228 L1118.43 683.228 L1117.87 683.228 L1117.31 683.228 L1116.76 683.228 L1116.2 683.228 L1115.64 683.228 L1115.08 683.228 L1114.52 683.228 L1113.96 683.228 L1113.4 683.228 L1112.84 683.228 L1112.28 683.228 L1111.72 683.228 L1111.16 683.228 L1110.6 683.228 L1110.04 683.228 L1109.49 683.228 L1108.93 683.228 L1108.37 683.228 L1107.81 683.228 L1107.25 683.228 L1106.69 683.228 L1106.13 683.228 L1105.57 683.228 L1105.01 683.228 L1104.45 683.228 L1103.89 683.228 L1103.33 683.228 L1102.77 683.228 L1102.22 683.228 L1101.66 683.228 L1101.1 683.228 L1100.54 683.228 L1099.98 683.228 L1099.42 683.228 L1098.86 683.228 L1098.3 683.228 L1097.74 683.228 L1097.18 683.228 L1096.62 683.228 L1096.06 683.228 L1095.5 683.228 L1094.94 683.228 L1094.39 683.228 L1093.83 683.228 L1093.27 683.228 L1092.71 683.228 L1092.15 683.228 L1091.59 683.228 L1091.03 683.228 L1090.47 683.228 L1089.91 683.228 L1089.35 683.228 L1088.79 683.228 L1088.23 683.228 L1087.67 683.228 L1087.12 683.228 L1086.56 683.228 L1086 683.228 L1085.44 683.228 L1084.88 683.228 L1084.32 683.228 L1083.76 683.228 L1083.2 683.228 L1082.64 683.228 L1082.08 683.228 L1081.52 683.228 L1080.96 683.228 L1080.4 683.228 L1079.85 683.228 L1079.29 683.228 L1078.73 683.228 L1078.17 683.228 L1077.61 683.228 L1077.05 683.228 L1076.49 683.228 L1075.93 683.228 L1075.37 683.228 L1074.81 683.228 L1074.25 683.228 L1073.69 683.228 L1073.13 683.228 L1072.57 683.228 L1072.02 683.228 L1071.46 683.228 L1070.9 683.228 L1070.34 683.228 L1069.78 683.228 L1069.22 683.228 L1068.66 683.228 L1068.1 683.228 L1067.54 683.228 L1066.98 683.228 L1066.42 683.228 L1065.86 683.228 L1065.3 683.228 L1064.75 683.228 L1064.19 683.228 L1063.63 683.228 L1063.07 683.228 L1062.51 683.228 L1061.95 683.228 L1061.39 683.228 L1060.83 683.228 L1060.27 683.228 L1059.71 683.228 L1059.15 683.228 L1058.59 683.228 L1058.03 683.228 L1057.48 683.228 L1056.92 683.228 L1056.36 683.228 L1055.8 683.228 L1055.24 683.228 L1054.68 683.228 L1054.12 683.228 L1053.56 683.228 L1053 683.228 L1052.44 683.228 L1051.88 683.228 L1051.32 683.228 L1050.76 683.228 L1050.2 683.228 L1049.65 683.228 L1049.09 683.228 L1048.53 683.228 L1047.97 683.228 L1047.41 683.228 L1046.85 683.228 L1046.29 683.228 L1045.73 683.228 L1045.17 683.228 L1044.61 683.228 L1044.05 683.228 L1043.49 683.228 L1042.93 683.228 L1042.38 683.228 L1041.82 683.228 L1041.26 683.228 L1040.7 683.228 L1040.14 683.228 L1039.58 683.228 L1039.02 683.228 L1038.46 683.228 L1037.9 683.228 L1037.34 683.228 L1036.78 683.228 L1036.22 683.228 L1035.66 683.228 L1035.1 683.228 L1034.55 683.228 L1033.99 683.228 L1033.43 683.228 L1032.87 683.228 L1032.31 683.228 L1031.75 683.228 L1031.19 683.228 L1030.63 683.228 L1030.07 683.228 L1029.51 683.228 L1028.95 683.228 L1028.39 683.228 L1027.83 683.228 L1027.28 683.228 L1026.72 683.228 L1026.16 683.228 L1025.6 683.228 L1025.04 683.228 L1024.48 683.228 L1023.92 683.228 L1023.36 683.228 L1022.8 683.228 L1022.24 683.228 L1021.68 683.228 L1021.12 683.228 L1020.56 683.228 L1020.01 683.228 L1019.45 683.228 L1018.89 683.228 L1018.33 683.228 L1017.77 683.228 L1017.21 683.228 L1016.65 683.228 L1016.09 683.228 L1015.53 683.228 L1014.97 683.228 L1014.41 683.228 L1013.85 683.228 L1013.29 683.228 L1012.73 683.228 L1012.18 683.228 L1011.62 683.228 L1011.06 683.228 L1010.5 683.228 L1009.94 683.228 L1009.38 683.228 L1008.82 683.228 L1008.26 683.228 L1007.7 683.228 L1007.14 683.228 L1006.58 683.228 L1006.02 683.228 L1005.46 683.228 L1004.91 683.228 L1004.35 683.228 L1003.79 683.228 L1003.23 683.228 L1002.67 683.228 L1002.11 683.228 L1001.55 683.228 L1000.99 683.228 L1000.43 683.228 L999.872 683.228 L999.313 683.228 L998.754 683.228 L998.194 683.228 L997.635 683.228 L997.076 683.228 L996.517 683.228 L995.957 683.228 L995.398 683.228 L994.839 683.228 L994.28 683.228 L993.72 683.228 L993.161 683.228 L992.602 683.228 L992.043 683.228 L991.483 683.228 L990.924 683.228 L990.365 683.228 L989.806 683.228 L989.246 683.228 L988.687 683.228 L988.128 683.228 L987.569 683.228 L987.009 683.228 L986.45 683.228 L985.891 683.228 L985.332 683.228 L984.772 683.228 L984.213 683.228 L983.654 683.228 L983.095 683.228 L982.535 683.228 L981.976 683.228 L981.417 683.228 L980.858 683.228 L980.298 683.228 L979.739 683.228 L979.18 683.228 L978.621 683.228 L978.061 683.228 L977.502 683.228 L976.943 683.228 L976.384 683.228 L975.824 683.228 L975.265 683.228 L974.706 683.228 L974.147 683.228 L973.587 683.228 L973.028 683.228 L972.469 683.228 L971.91 683.228 L971.35 683.228 L970.791 683.228 L970.232 683.228 L969.673 683.228 L969.113 683.228 L968.554 683.228 L967.995 683.228 L967.436 683.228 L966.876 683.228 L966.317 683.228 L965.758 683.228 L965.199 683.228 L964.639 683.228 L964.08 683.228 L963.521 683.228 L962.962 683.228 L962.402 683.228 L961.843 683.228 L961.284 683.228 L960.725 683.228 L960.165 683.228 L959.606 683.228 L959.047 683.228 L958.488 683.228 L957.928 683.228 L957.369 683.228 L956.81 683.228 L956.251 683.228 L955.691 683.228 L955.132 683.228 L954.573 683.228 L954.014 683.228 L953.454 683.228 L952.895 683.228 L952.336 683.228 L951.777 683.228 L951.217 683.228 L950.658 683.228 L950.099 683.228 L949.54 683.228 L948.98 683.228 L948.421 683.228 L947.862 683.228 L947.303 683.228 L946.743 683.228 L946.184 683.228 L945.625 683.228 L945.066 683.228 L944.506 683.228 L943.947 683.228 L943.388 683.228 L942.829 683.228 L942.269 683.228 L941.71 683.228 L941.151 683.228 L940.592 683.228 L940.032 683.228 L939.473 683.228 L938.914 683.228 L938.355 683.228 L937.795 683.228 L937.236 683.228 L936.677 683.228 L936.118 683.228 L935.558 683.228 L934.999 683.228 L934.44 683.228 L933.881 683.228 L933.321 683.228 L932.762 683.228 L932.203 683.228 L931.644 683.228 L931.084 683.228 L930.525 683.228 L929.966 683.228 L929.406 683.228 L928.847 683.228 L928.288 683.228 L927.729 683.228 L927.169 683.228 L926.61 683.228 L926.051 683.228 L925.492 683.228 L924.932 683.228 L924.373 683.228 L923.814 683.228 L923.255 683.228 L922.695 683.228 L922.136 683.228 L921.577 683.228 L921.018 683.228 L920.458 683.228 L919.899 683.228 L919.34 683.228 L918.781 683.228 L918.221 683.228 L917.662 683.228 L917.103 683.228 L916.544 683.228 L915.984 683.228 L915.425 683.228 L914.866 683.228 L914.307 683.228 L913.747 683.228 L913.188 683.228 L912.629 683.228 L912.07 683.228 L911.51 683.228 L910.951 683.228 L910.392 683.228 L909.833 683.228 L909.273 683.228 L908.714 683.228 L908.155 683.228 L907.596 683.228 L907.036 683.228 L906.477 683.228 L905.918 683.228 L905.359 683.228 L904.799 683.228 L904.24 683.228 L903.681 683.228 L903.122 683.228 L902.562 683.228 L902.003 683.228 L901.444 683.228 L900.885 683.228 L900.325 683.228 L899.766 683.228 L899.207 683.228 L898.648 683.228 L898.088 683.228 L897.529 683.228 L896.97 683.228 L896.411 683.228 L895.851 683.228 L895.292 683.228 L894.733 683.228 L894.174 683.228 L893.614 683.228 L893.055 683.228 L892.496 683.228 L891.937 683.228 L891.377 683.228 L890.818 683.228 L890.259 683.228 L889.7 683.228 L889.14 683.228 L888.581 683.228 L888.022 683.228 L887.463 683.228 L886.903 683.228 L886.344 683.228 L885.785 683.228 L885.226 683.228 L884.666 683.228 L884.107 683.228 L883.548 683.228 L882.989 683.228 L882.429 683.228 L881.87 683.228 L881.311 683.228 L880.752 683.228 L880.192 683.228 L879.633 683.228 L879.074 683.228 L878.515 683.228 L877.955 683.228 L877.396 683.228 L876.837 683.228 L876.278 683.228 L875.718 683.228 L875.159 683.228 L874.6 683.228 L874.041 683.228 L873.481 683.228 L872.922 683.228 L872.363 683.228 L871.804 683.228 L871.244 683.228 L870.685 683.228 L870.126 683.228 L869.567 683.228 L869.007 683.228 L868.448 683.228 L867.889 683.228 L867.33 683.228 L866.77 683.228 L866.211 683.228 L865.652 683.228 L865.093 683.228 L864.533 683.228 L863.974 683.228 L863.415 683.228 L862.856 683.228 L862.296 683.228 L861.737 683.228 L861.178 683.228 L860.619 683.228 L860.059 683.228 L859.5 683.228 L858.941 683.228 L858.382 683.228 L857.822 683.228 L857.263 683.228 L856.704 683.228 L856.145 683.228 L855.585 683.228 L855.026 683.228 L854.467 683.228 L853.908 683.228 L853.348 683.228 L852.789 683.228 L852.23 683.228 L851.671 683.228 L851.111 683.228 L850.552 683.228 L849.993 683.228 L849.434 683.228 L848.874 683.228 L848.315 683.228 L847.756 683.228 L847.197 683.228 L846.637 683.228 L846.078 683.228 L845.519 683.228 L844.96 683.228 L844.4 683.228 L843.841 683.228 L843.282 683.228 L842.723 683.228 L842.163 683.228 L841.604 683.228 L841.045 683.228 L840.486 683.228 L839.926 683.228 L839.367 683.228 L838.808 683.228 L838.249 683.228 L837.689 683.228 L837.13 683.228 L836.571 683.228 L836.012 683.228 L835.452 683.228 L834.893 683.228 L834.334 683.228 L833.775 683.228 L833.215 683.228 L832.656 683.228 L832.097 683.228 L831.538 683.228 L830.978 683.228 L830.419 683.228 L829.86 683.228 L829.301 683.228 L828.741 683.228 L828.182 683.228 L827.623 683.228 L827.064 683.228 L826.504 683.228 L825.945 683.228 L825.386 683.228 L824.827 683.228 L824.267 683.228 L823.708 683.228 L823.149 683.228 L822.59 683.228 L822.03 683.228 L821.471 683.228 L820.912 683.228 L820.353 683.228 L819.793 683.228 L819.234 683.228 L818.675 683.228 L818.116 683.228 L817.556 683.228 L816.997 683.228 L816.438 683.228 L815.879 683.228 L815.319 683.228 L814.76 683.228 L814.201 683.228 L813.642 683.228 L813.082 683.228 L812.523 683.228 L811.964 683.228 L811.405 683.228 L810.845 683.228 L810.286 683.228 L809.727 683.228 L809.168 683.228 L808.608 683.228 L808.049 683.228 L807.49 683.228 L806.931 683.228 L806.371 683.228 L805.812 683.228 L805.253 683.228 L804.693 683.228 L804.134 683.228 L803.575 683.228 L803.016 683.228 L802.456 683.228 L801.897 683.228 L801.338 683.228 L800.779 683.228 L800.219 683.228 L799.66 683.228 L799.101 683.228 L798.542 683.228 L797.982 683.228 L797.423 683.228 L796.864 683.228 L796.305 683.228 L795.745 683.228 L795.186 683.228 L794.627 683.228 L794.068 683.228 L793.508 683.228 L792.949 683.228 L792.39 683.228 L791.831 683.228 L791.271 683.228 L790.712 683.228 L790.153 683.228 L789.594 683.228 L789.034 683.228 L788.475 683.228 L787.916 683.228 L787.357 683.228 L786.797 683.228 L786.238 683.228 L785.679 683.228 L785.12 683.228 L784.56 683.228 L784.001 683.228 L783.442 683.228 L782.883 683.228 L782.323 683.228 L781.764 683.228 L781.205 683.228 L780.646 683.228 L780.086 683.228 L779.527 683.228 L778.968 683.228 L778.409 683.228 L777.849 683.228 L777.29 683.228 L776.731 683.228 L776.172 683.228 L775.612 683.228 L775.053 683.228 L774.494 683.228 L773.935 683.228 L773.375 683.228 L772.816 683.228 L772.257 683.228 L771.698 683.228 L771.138 683.228 L770.579 683.228 L770.02 683.228 L769.461 683.228 L768.901 683.228 L768.342 683.228 L767.783 683.228 L767.224 683.228 L766.664 683.228 L766.105 683.228 L765.546 683.228 L764.987 683.228 L764.427 683.228 L763.868 683.228 L763.309 683.228 L762.75 683.228 L762.19 683.228 L761.631 683.228 L761.072 683.228 L760.513 683.228 L759.953 683.228 L759.394 683.228 L758.835 683.228 L758.276 683.228 L757.716 683.228 L757.157 683.228 L756.598 683.228 L756.039 683.228 L755.479 683.228 L754.92 683.228 L754.361 683.228 L753.802 683.228 L753.242 683.228 L752.683 683.228 L752.124 683.228 L751.565 683.228 L751.005 683.228 L750.446 683.228 L749.887 683.228 L749.328 683.228 L748.768 683.228 L748.209 683.228 L747.65 683.228 L747.091 683.228 L746.531 683.228 L745.972 683.228 L745.413 683.228 L744.854 683.228 L744.294 683.228 L743.735 683.228 L743.176 683.228 L742.617 683.228 L742.057 683.228 L741.498 683.228 L740.939 683.228 L740.38 683.228 L739.82 683.228 L739.261 683.228 L738.702 683.228 L738.143 683.228 L737.583 683.228 L737.024 683.228 L736.465 683.228 L735.906 683.228 L735.346 683.228 L734.787 683.228 L734.228 683.228 L733.669 683.228 L733.109 683.228 L732.55 683.228 L731.991 683.228 L731.432 683.228 L730.872 683.228 L730.313 683.228 L729.754 683.228 L729.195 683.228 L728.635 683.228 L728.076 683.228 L727.517 683.228 L726.958 683.228 L726.398 683.228 L725.839 683.228 L725.28 683.228 L724.721 683.228 L724.161 683.228 L723.602 683.228 L723.043 683.228 L722.484 683.228 L721.924 683.228 L721.365 683.228 L720.806 683.228 L720.247 683.228  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip473)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.034 720.806,684.034 721.365,684.034 721.924,684.034 722.484,684.034 723.043,684.034 723.602,684.034 724.161,684.034 724.721,684.034 725.28,684.034 725.839,684.034 726.398,684.034 726.958,684.034 727.517,684.034 728.076,684.034 728.635,684.034 729.195,684.034 729.754,684.034 730.313,684.034 730.872,684.034 731.432,684.034 731.991,684.034 732.55,684.034 733.109,684.034 733.669,684.034 734.228,684.034 734.787,684.034 735.346,684.034 735.906,684.034 736.465,684.034 737.024,684.034 737.583,684.034 738.143,684.034 738.702,684.034 739.261,684.034 739.82,684.034 740.38,684.034 740.939,684.034 741.498,684.034 742.057,684.034 742.617,684.034 743.176,684.034 743.735,684.034 744.294,684.034 744.854,684.034 745.413,684.034 745.972,684.034 746.531,684.034 747.091,684.034 747.65,684.034 748.209,684.034 748.768,684.034 749.328,684.034 749.887,684.034 750.446,684.034 751.005,684.034 751.565,684.034 752.124,684.034 752.683,684.034 753.242,684.034 753.802,684.034 754.361,684.034 754.92,684.034 755.479,684.034 756.039,684.034 756.598,684.034 757.157,684.034 757.716,684.034 758.276,684.034 758.835,684.034 759.394,684.034 759.953,684.034 760.513,684.034 761.072,684.034 761.631,684.034 762.19,684.034 762.75,684.034 763.309,684.034 763.868,684.034 764.427,684.034 764.987,684.034 765.546,684.034 766.105,684.034 766.664,684.034 767.224,684.034 767.783,684.034 768.342,684.034 768.901,684.034 769.461,684.034 770.02,684.034 770.579,684.034 771.138,684.034 771.698,684.034 772.257,684.034 772.816,684.034 773.375,684.034 773.935,684.034 774.494,684.034 775.053,684.034 775.612,684.034 776.172,684.034 776.731,684.034 777.29,684.034 777.849,684.034 778.409,684.034 778.968,684.034 779.527,684.034 780.086,684.034 780.646,684.034 781.205,684.034 781.764,684.034 782.323,684.034 782.883,684.034 783.442,684.034 784.001,684.034 784.56,684.034 785.12,684.034 785.679,684.034 786.238,684.034 786.797,684.034 787.357,684.034 787.916,684.034 788.475,684.034 789.034,684.034 789.594,684.034 790.153,684.034 790.712,684.034 791.271,684.034 791.831,684.034 792.39,684.034 792.949,684.034 793.508,684.034 794.068,684.034 794.627,684.034 795.186,684.034 795.745,684.034 796.305,684.034 796.864,684.034 797.423,684.034 797.982,684.034 798.542,684.034 799.101,684.034 799.66,684.034 800.219,684.034 800.779,684.034 801.338,684.034 801.897,684.034 802.456,684.034 803.016,684.034 803.575,684.034 804.134,684.034 804.693,684.034 805.253,684.034 805.812,684.034 806.371,684.034 806.931,684.034 807.49,684.034 808.049,684.034 808.608,684.034 809.168,684.034 809.727,684.034 810.286,684.034 810.845,684.034 811.405,684.034 811.964,684.034 812.523,684.034 813.082,684.034 813.642,684.034 814.201,684.034 814.76,684.034 815.319,684.034 815.879,684.034 816.438,684.034 816.997,684.034 817.556,684.034 818.116,684.034 818.675,684.034 819.234,684.034 819.793,684.034 820.353,684.034 820.912,684.034 821.471,684.034 822.03,684.034 822.59,684.034 823.149,684.034 823.708,684.034 824.267,684.034 824.827,684.034 825.386,684.034 825.945,684.034 826.504,684.034 827.064,684.034 827.623,684.034 828.182,684.034 828.741,684.034 829.301,684.034 829.86,684.034 830.419,684.034 830.978,684.034 831.538,684.034 832.097,684.034 832.656,684.034 833.215,684.034 833.775,684.034 834.334,684.034 834.893,684.034 835.452,684.034 836.012,684.034 836.571,684.034 837.13,684.034 837.689,684.034 838.249,684.034 838.808,684.034 839.367,684.034 839.926,684.034 840.486,684.034 841.045,684.034 841.604,684.034 842.163,684.034 842.723,684.034 843.282,684.034 843.841,684.034 844.4,684.034 844.96,684.034 845.519,684.034 846.078,684.034 846.637,684.034 847.197,684.034 847.756,684.034 848.315,684.034 848.874,684.034 849.434,684.034 849.993,684.034 850.552,684.034 851.111,684.034 851.671,684.034 852.23,684.034 852.789,684.034 853.348,684.034 853.908,684.034 854.467,684.034 855.026,684.034 855.585,684.034 856.145,684.034 856.704,684.034 857.263,684.034 857.822,684.034 858.382,684.034 858.941,684.034 859.5,684.034 860.059,684.034 860.619,684.034 861.178,684.034 861.737,684.034 862.296,684.034 862.856,684.034 863.415,684.034 863.974,684.034 864.533,684.034 865.093,684.034 865.652,684.034 866.211,684.034 866.77,684.034 867.33,684.034 867.889,684.034 868.448,684.034 869.007,684.034 869.567,684.034 870.126,684.034 870.685,684.034 871.244,684.034 871.804,684.034 872.363,684.034 872.922,684.034 873.481,684.034 874.041,684.034 874.6,684.034 875.159,684.034 875.718,684.034 876.278,684.034 876.837,684.034 877.396,684.034 877.955,684.034 878.515,684.034 879.074,684.034 879.633,684.034 880.192,684.034 880.752,684.034 881.311,684.034 881.87,684.034 882.429,684.034 882.989,684.034 883.548,684.034 884.107,684.034 884.666,684.034 885.226,684.034 885.785,684.034 886.344,684.034 886.903,684.034 887.463,684.034 888.022,684.034 888.581,684.034 889.14,684.034 889.7,684.034 890.259,684.034 890.818,684.034 891.377,684.034 891.937,684.034 892.496,684.034 893.055,684.034 893.614,684.034 894.174,684.034 894.733,684.034 895.292,684.034 895.851,684.034 896.411,684.034 896.97,684.034 897.529,684.034 898.088,684.034 898.648,684.034 899.207,684.034 899.766,684.034 900.325,684.034 900.885,684.034 901.444,684.034 902.003,684.034 902.562,684.034 903.122,684.034 903.681,684.034 904.24,684.034 904.799,684.034 905.359,684.034 905.918,684.034 906.477,684.034 907.036,684.034 907.596,684.034 908.155,684.034 908.714,684.034 909.273,684.034 909.833,684.034 910.392,684.034 910.951,684.034 911.51,684.034 912.07,684.034 912.629,684.034 913.188,684.034 913.747,684.034 914.307,684.034 914.866,684.034 915.425,684.034 915.984,684.034 916.544,684.034 917.103,684.034 917.662,684.034 918.221,684.034 918.781,684.034 919.34,684.034 919.899,684.034 920.458,684.034 921.018,684.034 921.577,684.034 922.136,684.034 922.695,684.034 923.255,684.034 923.814,684.034 924.373,684.034 924.932,684.034 925.492,684.034 926.051,684.034 926.61,684.034 927.169,684.034 927.729,684.034 928.288,684.034 928.847,684.034 929.406,684.034 929.966,684.034 930.525,684.034 931.084,684.034 931.644,684.034 932.203,684.034 932.762,684.034 933.321,684.034 933.881,684.034 934.44,684.034 934.999,684.034 935.558,684.034 936.118,684.034 936.677,684.034 937.236,684.034 937.795,684.034 938.355,684.034 938.914,684.034 939.473,684.034 940.032,684.034 940.592,684.034 941.151,684.034 941.71,684.034 942.269,684.034 942.829,684.034 943.388,684.034 943.947,684.034 944.506,684.034 945.066,684.034 945.625,684.034 946.184,684.034 946.743,684.034 947.303,684.034 947.862,684.034 948.421,684.034 948.98,684.034 949.54,684.034 950.099,684.034 950.658,684.034 951.217,684.034 951.777,684.034 952.336,684.034 952.895,684.034 953.454,684.034 954.014,684.034 954.573,684.034 955.132,684.034 955.691,684.034 956.251,684.034 956.81,684.034 957.369,684.034 957.928,684.034 958.488,684.034 959.047,684.034 959.606,684.034 960.165,684.034 960.725,684.034 961.284,684.034 961.843,684.034 962.402,684.034 962.962,684.034 963.521,684.034 964.08,684.034 964.639,684.034 965.199,684.034 965.758,684.034 966.317,684.034 966.876,684.034 967.436,684.034 967.995,684.034 968.554,684.034 969.113,684.034 969.673,684.034 970.232,684.034 970.791,684.034 971.35,684.034 971.91,684.034 972.469,684.034 973.028,684.034 973.587,684.034 974.147,684.034 974.706,684.034 975.265,684.034 975.824,684.034 976.384,684.034 976.943,684.034 977.502,684.034 978.061,684.034 978.621,684.034 979.18,684.034 979.739,684.034 980.298,684.034 980.858,684.034 981.417,684.034 981.976,684.034 982.535,684.034 983.095,684.034 983.654,684.034 984.213,684.034 984.772,684.034 985.332,684.034 985.891,684.034 986.45,684.034 987.009,684.034 987.569,684.034 988.128,684.034 988.687,684.034 989.246,684.034 989.806,684.034 990.365,684.034 990.924,684.034 991.483,684.034 992.043,684.034 992.602,684.034 993.161,684.034 993.72,684.034 994.28,684.034 994.839,684.034 995.398,684.034 995.957,684.034 996.517,684.034 997.076,684.034 997.635,684.034 998.194,684.034 998.754,684.034 999.313,684.034 999.872,684.034 1000.43,684.034 1000.99,684.034 1001.55,684.034 1002.11,684.034 1002.67,684.034 1003.23,684.034 1003.79,684.034 1004.35,684.034 1004.91,684.034 1005.46,684.034 1006.02,684.034 1006.58,684.034 1007.14,684.034 1007.7,684.034 1008.26,684.034 1008.82,684.034 1009.38,684.034 1009.94,684.034 1010.5,684.034 1011.06,684.034 1011.62,684.034 1012.18,684.034 1012.73,684.034 1013.29,684.034 1013.85,684.034 1014.41,684.034 1014.97,684.034 1015.53,684.034 1016.09,684.034 1016.65,684.034 1017.21,684.034 1017.77,684.034 1018.33,684.034 1018.89,684.034 1019.45,684.034 1020.01,684.034 1020.56,684.034 1021.12,684.034 1021.68,684.034 1022.24,684.034 1022.8,684.034 1023.36,684.034 1023.92,684.034 1024.48,684.034 1025.04,684.034 1025.6,684.034 1026.16,684.034 1026.72,684.034 1027.28,684.034 1027.83,684.034 1028.39,684.034 1028.95,684.034 1029.51,684.034 1030.07,684.034 1030.63,684.034 1031.19,684.034 1031.75,684.034 1032.31,684.034 1032.87,684.034 1033.43,684.034 1033.99,684.034 1034.55,684.034 1035.1,684.034 1035.66,684.034 1036.22,684.034 1036.78,684.034 1037.34,684.034 1037.9,684.034 1038.46,684.034 1039.02,684.034 1039.58,684.034 1040.14,684.034 1040.7,684.034 1041.26,684.034 1041.82,684.034 1042.38,684.034 1042.93,684.034 1043.49,684.034 1044.05,684.034 1044.61,684.034 1045.17,684.034 1045.73,684.034 1046.29,684.034 1046.85,684.034 1047.41,684.034 1047.97,684.034 1048.53,684.034 1049.09,684.034 1049.65,684.034 1050.2,684.034 1050.76,684.034 1051.32,684.034 1051.88,684.034 1052.44,684.034 1053,684.034 1053.56,684.034 1054.12,684.034 1054.68,684.034 1055.24,684.034 1055.8,684.034 1056.36,684.034 1056.92,684.034 1057.48,684.034 1058.03,684.034 1058.59,684.034 1059.15,684.034 1059.71,684.034 1060.27,684.034 1060.83,684.034 1061.39,684.034 1061.95,684.034 1062.51,684.034 1063.07,684.034 1063.63,684.034 1064.19,684.034 1064.75,684.034 1065.3,684.034 1065.86,684.034 1066.42,684.034 1066.98,684.034 1067.54,684.034 1068.1,684.034 1068.66,684.034 1069.22,684.034 1069.78,684.034 1070.34,684.034 1070.9,684.034 1071.46,684.034 1072.02,684.034 1072.57,684.034 1073.13,684.034 1073.69,684.034 1074.25,684.034 1074.81,684.034 1075.37,684.034 1075.93,684.034 1076.49,684.034 1077.05,684.034 1077.61,684.034 1078.17,684.034 1078.73,684.034 1079.29,684.034 1079.85,684.034 1080.4,684.034 1080.96,684.034 1081.52,684.034 1082.08,684.034 1082.64,684.034 1083.2,684.034 1083.76,684.034 1084.32,684.034 1084.88,684.034 1085.44,684.034 1086,684.034 1086.56,684.034 1087.12,684.034 1087.67,684.034 1088.23,684.034 1088.79,684.034 1089.35,684.034 1089.91,684.034 1090.47,684.034 1091.03,684.034 1091.59,684.034 1092.15,684.034 1092.71,684.034 1093.27,684.034 1093.83,684.034 1094.39,684.034 1094.94,684.034 1095.5,684.034 1096.06,684.034 1096.62,684.034 1097.18,684.034 1097.74,684.034 1098.3,684.034 1098.86,684.034 1099.42,684.034 1099.98,684.034 1100.54,684.034 1101.1,684.034 1101.66,684.034 1102.22,684.034 1102.77,684.034 1103.33,684.034 1103.89,684.034 1104.45,684.034 1105.01,684.034 1105.57,684.034 1106.13,684.034 1106.69,684.034 1107.25,684.034 1107.81,684.034 1108.37,684.034 1108.93,684.034 1109.49,684.034 1110.04,684.034 1110.6,684.034 1111.16,684.034 1111.72,684.034 1112.28,684.034 1112.84,684.034 1113.4,684.034 1113.96,684.034 1114.52,684.034 1115.08,684.034 1115.64,684.034 1116.2,684.034 1116.76,684.034 1117.31,684.034 1117.87,684.034 1118.43,684.034 1118.99,684.034 1119.55,684.034 1120.11,684.034 1120.67,684.034 1121.23,684.034 1121.79,684.034 1122.35,684.034 1122.91,684.034 1123.47,684.034 1124.03,684.034 1124.59,684.034 1125.14,684.034 1125.7,684.034 1126.26,684.034 1126.82,684.034 1127.38,684.034 1127.94,684.034 1128.5,684.034 1129.06,684.034 1129.62,684.034 1130.18,684.034 1130.74,684.034 1131.3,684.034 1131.86,684.034 1132.41,684.034 1132.97,684.034 1133.53,684.034 1134.09,684.034 1134.65,684.034 1135.21,684.034 1135.77,684.034 1136.33,684.034 1136.89,684.034 1137.45,684.034 1138.01,684.034 1138.57,684.034 1139.13,684.034 1139.68,684.034 1140.24,684.034 1140.8,684.034 1141.36,684.034 1141.92,684.034 1142.48,684.034 1143.04,684.034 1143.6,684.034 1144.16,684.034 1144.72,684.034 1145.28,684.034 1145.84,684.034 1146.4,684.034 1146.96,684.034 1147.51,684.034 1148.07,684.034 1148.63,684.034 1149.19,684.034 1149.75,684.034 1150.31,684.034 1150.87,684.034 1151.43,684.034 1151.99,684.034 1152.55,684.034 1153.11,684.034 1153.67,684.034 1154.23,684.034 1154.78,684.034 1155.34,684.034 1155.9,684.034 1156.46,684.034 1157.02,684.034 1157.58,684.034 1158.14,684.034 1158.7,684.034 1159.26,684.034 1159.82,684.034 1160.38,684.034 1160.94,684.034 1161.5,684.034 1162.05,684.034 1162.61,684.034 1163.17,684.034 1163.73,684.034 1164.29,684.034 1164.85,684.034 1165.41,684.034 1165.97,684.034 1166.53,684.034 1167.09,684.034 1167.65,684.034 1168.21,684.034 1168.77,684.034 1169.33,684.034 1169.88,684.034 1170.44,684.034 1171,684.034 1171.56,684.034 1172.12,684.034 1172.68,684.034 1173.24,684.034 1173.8,684.034 1174.36,684.034 1174.92,684.034 1175.48,684.034 1176.04,684.034 1176.6,684.034 1177.15,684.034 1177.71,684.034 1178.27,684.034 1178.83,684.034 1179.39,684.034 1179.95,684.034 1180.51,684.034 1181.07,684.034 1181.63,684.034 1182.19,684.034 1182.75,684.034 1183.31,684.034 1183.87,684.034 1184.43,684.034 1184.98,684.034 1185.54,684.034 1186.1,684.034 1186.66,684.034 1187.22,684.034 1187.78,684.034 1188.34,684.034 1188.9,684.034 1189.46,684.034 1190.02,684.034 1190.58,684.034 1191.14,684.034 1191.7,684.034 1192.25,684.034 1192.81,684.034 1193.37,684.034 1193.93,684.034 1194.49,684.034 1195.05,684.034 1195.61,684.034 1196.17,684.034 1196.73,684.034 1197.29,684.034 1197.85,684.034 1198.41,684.034 1198.97,684.034 1199.52,684.034 1200.08,684.034 1200.64,684.034 1201.2,684.034 1201.76,684.034 1202.32,684.034 1202.88,684.034 1203.44,684.034 1204,684.034 1204.56,684.034 1205.12,684.034 1205.68,684.034 1206.24,684.034 1206.8,684.034 1207.35,684.034 1207.91,684.034 1208.47,684.034 1209.03,684.034 1209.59,684.034 1210.15,684.034 1210.71,684.034 1211.27,684.034 1211.83,684.034 1212.39,684.034 1212.95,684.034 1213.51,684.034 1214.07,684.034 1214.62,684.034 1215.18,684.034 1215.74,684.034 1216.3,684.034 1216.86,684.034 1217.42,684.034 1217.98,684.034 1218.54,684.034 1219.1,684.034 1219.66,684.034 1220.22,684.034 1220.78,684.034 1221.34,684.034 1221.89,684.034 1222.45,684.034 1223.01,684.034 1223.57,684.034 1224.13,684.034 1224.69,684.034 1225.25,684.034 1225.81,684.034 1226.37,684.034 1226.93,684.034 1227.49,684.034 1228.05,684.034 1228.61,684.034 1229.17,684.034 1229.72,684.034 1230.28,684.034 1230.84,684.034 1231.4,684.034 1231.96,684.034 1232.52,684.034 1233.08,684.034 1233.64,684.034 1234.2,684.034 1234.76,684.034 1235.32,684.034 1235.88,684.034 1236.44,684.034 1236.99,684.034 1237.55,684.034 1238.11,684.034 1238.67,684.034 1239.23,684.034 1239.79,684.034 1240.35,684.034 1240.91,684.034 1241.47,684.034 1242.03,684.034 1242.59,684.034 1243.15,684.034 1243.71,684.034 1244.26,684.034 1244.82,684.034 1245.38,684.034 1245.94,684.034 1246.5,684.034 1247.06,684.034 1247.62,684.034 1248.18,684.034 1248.74,684.034 1249.3,684.034 1249.86,684.034 1250.42,684.034 1250.98,684.034 1251.54,684.034 1252.09,684.034 1252.65,684.034 1253.21,684.034 1253.77,684.034 1254.33,684.034 1254.89,684.034 1255.45,684.034 1256.01,684.034 1256.57,684.034 1257.13,684.034 1257.69,684.034 1258.25,684.034 1258.81,684.034 1259.36,684.034 1259.92,684.034 1260.48,684.034 1261.04,684.034 1261.6,684.034 1262.16,684.034 1262.72,684.034 1263.28,684.034 1263.84,684.034 1264.4,684.034 1264.96,684.034 1265.52,684.034 1266.08,684.034 1266.63,684.034 1267.19,684.034 1267.75,684.034 1268.31,684.034 1268.87,684.034 1269.43,684.034 1269.99,684.034 1270.55,684.034 1271.11,684.034 1271.67,684.034 1272.23,684.034 1272.79,684.034 1273.35,684.034 1273.91,684.034 1274.46,684.034 1275.02,684.034 1275.58,684.034 1276.14,684.034 1276.7,684.034 1277.26,684.034 1277.82,684.034 1278.38,684.034 1278.94,684.034 1279.5,684.034 1280.06,684.034 1280.62,684.034 1281.18,684.034 1281.73,684.034 1282.29,684.034 1282.85,684.034 1283.41,684.034 1283.97,684.034 1284.53,684.034 1285.09,684.034 1285.65,684.034 1286.21,684.034 1286.77,684.034 1287.33,684.034 1287.89,684.034 1288.45,684.034 1289,684.034 1289.56,684.034 1290.12,684.034 1290.68,684.034 1291.24,684.034 1291.8,684.034 1292.36,684.034 1292.92,684.034 1293.48,684.034 1294.04,684.034 1294.6,684.034 1295.16,684.034 1295.72,684.034 1296.28,684.034 1296.83,684.034 1297.39,684.034 1297.95,684.034 1298.51,684.034 1299.07,684.034 1299.63,684.034 1300.19,684.034 1300.75,684.034 1301.31,684.034 1301.87,684.034 1302.43,684.034 1302.99,684.034 1303.55,684.034 1304.1,684.034 1304.66,684.034 1305.22,684.034 1305.78,684.034 1306.34,684.034 1306.9,684.034 1307.46,684.034 1308.02,684.034 1308.58,684.034 1309.14,684.034 1309.7,684.034 1310.26,684.034 1310.82,684.034 1311.38,684.034 1311.93,684.034 1312.49,684.034 1313.05,684.034 1313.61,684.034 1314.17,684.034 1314.73,684.034 1315.29,684.034 1315.85,684.034 1316.41,684.034 1316.97,684.034 1317.53,684.034 1318.09,684.034 1318.65,684.034 1319.2,684.034 1319.76,684.034 1320.32,684.034 1320.88,684.034 1321.44,684.034 1322,684.034 1322.56,684.034 1323.12,684.034 1323.68,684.034 1324.24,684.034 1324.8,684.034 1325.36,684.034 1325.92,684.034 1326.47,684.034 1327.03,684.034 1327.59,684.034 1328.15,684.034 1328.71,684.034 1329.27,684.034 1329.83,684.034 1330.39,684.034 1330.95,684.034 1331.51,684.034 1332.07,684.034 1332.63,684.034 1333.19,684.034 1333.75,684.034 1334.3,684.034 1334.86,684.034 1335.42,684.034 1335.98,684.034 1336.54,684.034 1337.1,684.034 1337.66,684.034 1338.22,684.034 1338.78,684.034 1339.34,684.034 1339.9,684.034 1340.46,684.034 1341.02,684.034 1341.57,684.034 1342.13,684.034 1342.69,684.034 1343.25,684.034 1343.81,684.034 1344.37,684.034 1344.93,684.034 1345.49,684.034 1346.05,684.034 1346.61,684.034 1347.17,684.034 1347.73,684.034 1348.29,684.034 1348.84,684.034 1349.4,684.034 1349.96,684.034 1350.52,684.034 1351.08,684.034 1351.64,684.034 1352.2,684.034 1352.76,684.034 1353.32,684.034 1353.88,684.034 1354.44,684.034 1355,684.034 1355.56,684.034 1356.12,684.034 1356.67,684.034 1357.23,684.034 1357.79,684.034 1358.35,684.034 1358.91,684.034 1359.47,684.034 1360.03,684.034 1360.59,684.034 1361.15,684.034 1361.71,684.034 1362.27,684.034 1362.83,684.034 1363.39,684.034 1363.94,684.034 1364.5,684.034 1365.06,684.034 1365.62,684.034 1366.18,684.034 1366.74,684.034 1367.3,684.034 1367.86,684.034 1368.42,684.034 1368.98,684.034 1369.54,684.034 1370.1,684.034 1370.66,684.034 1371.21,684.034 1371.77,684.034 1372.33,684.034 1372.89,684.034 1373.45,684.034 1374.01,684.034 1374.57,684.034 1375.13,684.034 1375.69,684.034 1376.25,684.034 1376.81,684.034 1377.37,684.034 1377.93,684.034 1378.49,684.034 1379.04,684.034 1379.6,684.034 1380.16,684.034 1380.72,684.034 1381.28,684.034 1381.84,684.034 1382.4,684.034 1382.96,684.034 1383.52,684.034 1384.08,684.034 1384.64,684.034 1385.2,684.034 1385.76,684.034 1386.31,684.034 1386.87,684.034 1387.43,684.034 1387.99,684.034 1388.55,684.034 1389.11,684.034 1389.67,684.034 1390.23,684.034 1390.79,684.034 1391.35,684.034 1391.91,684.034 1392.47,684.034 1393.03,684.034 1393.58,684.034 1394.14,684.034 1394.7,684.034 1395.26,684.034 1395.82,684.034 1396.38,684.034 1396.94,684.034 1397.5,684.034 1398.06,684.034 1398.62,684.034 1399.18,684.034 1399.74,684.034 1400.3,684.034 1400.86,684.034 1401.41,684.034 1401.97,684.034 1402.53,684.034 1403.09,684.034 1403.65,684.034 1404.21,684.034 1404.77,684.034 1405.33,684.034 1405.89,684.034 1406.45,684.034 1407.01,684.034 1407.57,684.034 1408.13,684.034 1408.68,684.034 1409.24,684.034 1409.8,684.034 1410.36,684.034 1410.92,684.034 1411.48,684.034 1412.04,684.034 1412.6,684.034 1413.16,684.034 1413.72,684.034 1414.28,684.034 1414.84,684.034 1415.4,684.034 1415.95,684.034 1416.51,684.034 1417.07,684.034 1417.63,684.034 1418.19,684.034 1418.75,684.034 1419.31,684.034 1419.87,684.034 1420.43,684.034 1420.99,684.034 1421.55,684.034 1422.11,684.034 1422.67,684.034 1423.23,684.034 1423.78,684.034 1424.34,684.034 1424.9,684.034 1425.46,684.034 1426.02,684.034 1426.58,684.034 1427.14,684.034 1427.7,684.034 1428.26,684.034 1428.82,684.034 1429.38,684.034 1429.94,684.034 1430.5,684.034 1431.05,684.034 1431.61,684.034 1432.17,684.034 1432.73,684.034 1433.29,684.034 1433.85,684.034 1434.41,684.034 1434.97,684.034 1435.53,684.034 1436.09,684.034 1436.65,684.034 1437.21,684.034 1437.77,684.034 1438.33,684.034 1438.88,684.034 1439.44,684.034 1440,684.034 1440.56,684.034 1441.12,684.034 1441.68,684.034 1442.24,684.034 1442.8,684.034 1443.36,684.034 1443.92,684.034 1444.48,684.034 1445.04,684.034 1445.6,684.034 1446.15,684.034 1446.71,684.034 1447.27,684.034 1447.83,684.034 1448.39,684.034 1448.95,684.034 1449.51,684.034 1450.07,684.034 1450.63,684.034 1451.19,684.034 1451.75,684.034 1452.31,684.034 1452.87,684.034 1453.42,684.034 1453.98,684.034 1454.54,684.034 1455.1,684.034 1455.66,684.034 1456.22,684.034 1456.78,684.034 1457.34,684.034 1457.9,684.034 1458.46,684.034 1459.02,684.034 1459.58,684.034 1460.14,684.034 1460.7,684.034 1461.25,684.034 1461.81,684.034 1462.37,684.034 1462.93,684.034 1463.49,684.034 1464.05,684.034 1464.61,684.034 1465.17,684.034 1465.73,684.034 1466.29,684.034 1466.85,684.034 1467.41,684.034 1467.97,684.034 1468.52,684.034 1469.08,684.034 1469.64,684.034 1470.2,684.034 1470.76,684.034 1471.32,684.034 1471.88,684.034 1472.44,684.034 1473,684.034 1473.56,684.034 1474.12,684.034 1474.68,684.034 1475.24,684.034 1475.79,684.034 1476.35,684.034 1476.91,684.034 1477.47,684.034 1478.03,684.034 1478.59,684.034 1479.15,684.034 1479.71,684.034 1480.27,684.034 1480.83,684.034 1481.39,684.034 1481.95,684.034 1482.51,684.034 1483.07,684.034 1483.62,684.034 1484.18,684.034 1484.74,684.034 1485.3,684.034 1485.86,684.034 1486.42,684.034 1486.98,684.034 1487.54,684.034 1488.1,684.034 1488.66,684.034 1489.22,684.034 1489.78,684.034 1490.34,684.034 1490.89,684.034 1491.45,684.034 1492.01,684.034 1492.57,684.034 1493.13,684.034 1493.69,684.034 1494.25,684.034 1494.81,684.034 1495.37,684.034 1495.93,684.034 1496.49,684.034 1497.05,684.034 1497.61,684.034 1498.16,684.034 1498.72,684.034 1499.28,684.034 1499.84,684.034 1500.4,684.034 1500.96,684.034 1501.52,684.034 1502.08,684.034 1502.64,684.034 1503.2,684.034 1503.76,684.034 1504.32,684.034 1504.88,684.034 1505.44,684.034 1505.99,684.034 1506.55,684.034 1507.11,684.034 1507.67,684.034 1508.23,684.034 1508.79,684.034 1509.35,684.034 1509.91,684.034 1510.47,684.034 1511.03,684.034 1511.59,684.034 1512.15,684.034 1512.71,684.034 1513.26,684.034 1513.82,684.034 1514.38,684.034 1514.94,684.034 1515.5,684.034 1516.06,684.034 1516.62,684.034 1517.18,684.034 1517.74,684.034 1518.3,684.034 1518.86,684.034 1519.42,684.034 1519.98,684.034 1520.53,684.034 1521.09,684.034 1521.65,684.034 1522.21,684.034 1522.77,684.034 1523.33,684.034 1523.89,684.034 1524.45,684.034 1525.01,684.034 1525.57,684.034 1526.13,684.034 1526.69,684.034 1527.25,684.034 1527.81,684.034 1528.36,684.034 1528.92,684.034 1529.48,684.034 1530.04,684.034 1530.6,684.034 1531.16,684.034 1531.72,684.034 1532.28,684.034 1532.84,684.034 1533.4,684.034 1533.96,684.034 1534.52,684.034 1535.08,684.034 1535.63,684.034 1536.19,684.034 1536.75,684.034 1537.31,684.034 1537.87,684.034 1538.43,684.034 1538.99,684.034 1539.55,684.034 1540.11,684.034 1540.67,684.034 1541.23,684.034 1541.79,684.034 1542.35,684.034 1542.9,684.034 1543.46,684.034 1544.02,684.034 1544.58,684.034 1545.14,684.034 1545.7,684.034 1546.26,684.034 1546.82,684.034 1547.38,684.034 1547.94,684.034 1548.5,684.034 1549.06,684.034 1549.62,684.034 1550.18,684.034 1550.73,684.034 1551.29,684.034 1551.85,684.034 1552.41,684.034 1552.97,684.034 1553.53,684.034 1554.09,684.034 1554.65,684.034 1555.21,684.034 1555.77,684.034 1556.33,684.034 1556.89,684.034 1557.45,684.034 1558,684.034 1558.56,684.034 1559.12,684.034 1559.68,684.034 1560.24,684.034 1560.8,684.034 1561.36,684.034 1561.92,684.034 1562.48,684.034 1563.04,684.034 1563.6,684.034 1564.16,684.034 1564.72,684.034 1565.28,684.034 1565.83,684.034 1566.39,684.034 1566.95,684.034 1567.51,684.034 1568.07,684.034 1568.63,684.034 1569.19,684.034 1569.75,684.034 1570.31,684.034 1570.87,684.034 1571.43,684.034 1571.99,684.034 1572.55,684.034 1573.1,684.034 1573.66,684.034 1574.22,684.034 1574.78,684.034 1575.34,684.034 1575.9,684.034 1576.46,684.034 1577.02,684.034 1577.58,684.034 1578.14,684.034 1578.7,684.034 1579.26,684.034 1579.82,684.034 1580.37,684.034 1580.93,684.034 1581.49,684.034 1582.05,684.034 1582.61,684.034 1583.17,684.034 1583.73,684.034 1584.29,684.034 1584.85,684.034 1585.41,684.034 1585.97,684.034 1586.53,684.034 1587.09,684.034 1587.65,684.034 1588.2,684.034 1588.76,684.034 1589.32,684.034 1589.88,684.034 1590.44,684.034 1591,684.034 1591.56,684.034 1592.12,684.034 1592.68,684.034 1593.24,684.034 1593.8,684.034 1594.36,684.034 1594.92,684.034 1595.47,684.034 1596.03,684.034 1596.59,684.034 1597.15,684.034 1597.71,684.034 1598.27,684.034 1598.83,684.034 1599.39,684.034 1599.95,684.034 1600.51,684.034 1601.07,684.034 1601.63,684.034 1602.19,684.034 1602.74,684.034 1603.3,684.034 1603.86,684.034 1604.42,684.034 1604.98,684.034 1605.54,684.034 1606.1,684.034 1606.66,684.034 1607.22,684.034 1607.78,684.034 1608.34,684.034 1608.9,684.034 1609.46,684.034 1610.02,684.034 1610.57,684.034 1611.13,684.034 1611.69,684.034 1612.25,684.034 1612.81,684.034 1613.37,684.034 1613.93,684.034 1614.49,684.034 1615.05,684.034 1615.61,684.034 1616.17,684.034 1616.73,684.034 1617.29,684.034 1617.84,684.034 1618.4,684.034 1618.96,684.034 1619.52,684.034 1620.08,684.034 1620.64,684.034 1621.2,684.034 1621.76,684.034 1622.32,684.034 1622.88,684.034 1623.44,684.034 1624,684.034 1624.56,684.034 1625.11,684.034 1625.67,684.034 1626.23,684.034 1626.79,684.034 1627.35,684.034 1627.91,684.034 1628.47,684.034 1629.03,684.034 1629.59,684.034 1630.15,684.034 1630.71,684.034 1631.27,684.034 1631.83,684.034 1632.39,684.034 1632.94,684.034 1633.5,684.034 1634.06,684.034 1634.62,684.034 1635.18,684.034 1635.74,684.034 1636.3,684.034 1636.86,684.034 1637.42,684.034 1637.98,684.034 1638.54,684.034 1639.1,684.034 1639.66,684.034 1640.21,684.034 1640.77,684.034 1641.33,684.034 1641.89,684.034 1642.45,684.034 1643.01,684.034 1643.57,684.034 1644.13,684.034 1644.69,684.034 1645.25,684.034 1645.81,684.034 1646.37,684.034 1646.93,684.034 1647.48,684.034 1648.04,684.034 1648.6,684.034 1649.16,684.034 1649.72,684.034 1650.28,684.034 1650.84,684.034 1651.4,684.034 1651.96,684.034 1652.52,684.034 1653.08,684.034 1653.64,684.034 1654.2,684.034 1654.76,684.034 1655.31,684.034 1655.87,684.034 1656.43,684.034 1656.99,684.034 1657.55,684.034 1658.11,684.034 1658.67,684.034 1659.23,684.034 1659.79,684.034 1660.35,684.034 1660.91,684.034 1661.47,684.034 1662.03,684.034 1662.58,684.034 1663.14,684.034 1663.7,684.034 1664.26,684.034 1664.82,684.034 1665.38,684.034 1665.94,684.034 1666.5,684.034 1667.06,684.034 1667.62,684.034 1668.18,684.034 1668.74,684.034 1669.3,684.034 1669.85,684.034 1670.41,684.034 1670.97,684.034 1671.53,684.034 1672.09,684.034 1672.65,684.034 1673.21,684.034 1673.77,684.034 1674.33,684.034 1674.89,684.034 1675.45,684.034 1676.01,684.034 1676.57,684.034 1677.13,684.034 1677.68,684.034 1678.24,684.034 1678.8,684.034 1679.36,684.034 1679.92,684.034 1680.48,684.034 1681.04,684.034 1681.6,684.034 1682.16,684.034 1682.72,684.034 1683.28,684.034 1683.84,684.034 1684.4,684.034 1684.95,684.034 1685.51,684.034 1686.07,684.034 1686.63,684.034 1687.19,684.034 1687.75,684.034 1688.31,684.034 1688.87,684.034 1689.43,684.034 1689.99,684.034 1690.55,684.034 1691.11,684.034 1691.67,684.034 1692.23,684.034 1692.78,684.034 1693.34,684.034 1693.9,684.034 1694.46,684.034 1695.02,684.034 1695.58,684.034 1696.14,684.034 1696.7,684.034 1697.26,684.034 1697.82,684.034 1698.38,684.034 1698.94,684.034 1699.5,684.034 1700.05,684.034 1700.61,684.034 1701.17,684.034 1701.73,684.034 1702.29,684.034 1702.85,684.034 1703.41,684.034 1703.97,684.034 1704.53,684.034 1705.09,684.034 1705.65,684.034 1706.21,684.034 1706.77,684.034 1707.32,684.034 1707.88,684.034 1708.44,684.034 1709,684.034 1709.56,684.034 1710.12,684.034 1710.68,684.034 1711.24,684.034 1711.8,684.034 1712.36,684.034 1712.92,684.034 1713.48,684.034 1714.04,684.034 1714.6,684.034 1715.15,684.034 1715.71,684.034 1716.27,684.034 1716.83,684.034 1717.39,684.034 1717.95,684.034 1718.51,684.034 1719.07,684.034 1719.63,684.034 1720.19,684.034 1720.75,684.034 1721.31,684.034 1721.87,684.034 1722.42,684.034 1722.98,684.034 1723.54,684.034 1724.1,684.034 1724.66,684.034 1725.22,684.034 1725.78,684.034 1726.34,684.034 1726.9,684.034 1727.46,684.034 1728.02,684.034 1728.58,684.034 1729.14,684.034 1729.69,684.034 1730.25,684.034 1730.81,684.034 1731.37,684.034 1731.93,684.034 1732.49,684.034 1733.05,684.034 1733.61,684.034 1734.17,684.034 1734.73,684.034 1735.29,684.034 1735.85,684.034 1736.41,684.034 1736.97,684.034 1737.52,684.034 1738.08,684.034 1738.64,684.034 1739.2,684.034 1739.76,684.034 1740.32,684.034 1740.88,684.034 1741.44,684.034 1742,684.034 1742.56,684.034 1743.12,684.034 1743.68,684.034 1744.24,684.034 1744.79,684.034 1745.35,684.034 1745.91,684.034 1746.47,684.034 1747.03,684.034 1747.59,684.034 1748.15,684.034 1748.71,684.034 1749.27,684.034 1749.83,684.034 1750.39,684.034 1750.95,684.034 1751.51,684.034 1752.06,684.034 1752.62,684.034 1753.18,684.034 1753.74,684.034 1754.3,684.034 1754.86,684.034 1755.42,684.034 1755.98,684.034 1756.54,684.034 1757.1,684.034 1757.66,684.034 1758.22,684.034 1758.78,684.034 1759.34,684.034 1759.89,684.034 1760.45,684.034 1761.01,684.034 1761.57,684.034 1762.13,684.034 1762.69,684.034 1763.25,684.034 1763.81,684.034 1764.37,684.034 1764.93,684.034 1765.49,684.034 1766.05,684.034 1766.61,684.034 1767.16,684.034 1767.72,684.034 1768.28,684.034 1768.84,684.034 1769.4,684.034 1769.96,684.034 1770.52,684.034 1771.08,684.034 1771.64,684.034 1772.2,684.034 1772.76,684.034 1773.32,684.034 1773.88,684.034 1774.43,684.034 1774.99,684.034 1775.55,684.034 1776.11,684.034 1776.67,684.034 1777.23,684.034 1777.79,684.034 1778.35,684.034 1778.91,684.034 1779.47,684.034 1780.03,684.034 1780.59,684.034 1781.15,684.034 1781.71,684.034 1782.26,684.034 1782.82,684.034 1783.38,684.034 1783.94,684.034 1784.5,684.034 1785.06,684.034 1785.62,684.034 1786.18,684.034 1786.74,684.034 1787.3,684.034 1787.86,684.034 1788.42,684.034 1788.98,684.034 1789.53,684.034 1790.09,684.034 1790.65,684.034 1791.21,684.034 1791.77,684.034 1792.33,684.034 1792.89,684.034 1793.45,684.034 1794.01,684.034 1794.57,684.034 1795.13,684.034 1795.69,684.034 1796.25,684.034 1796.8,684.034 1797.36,684.034 1797.92,684.034 1798.48,684.034 1799.04,684.034 1799.6,684.034 1800.16,684.034 1800.72,684.034 1801.28,684.034 1801.84,684.034 1802.4,684.034 1802.96,684.034 1803.52,684.034 1804.08,684.034 1804.63,684.034 1805.19,684.034 1805.75,684.034 1806.31,684.034 1806.87,684.034 1807.43,684.034 1807.99,684.034 1808.55,684.034 1809.11,684.034 1809.67,684.034 1810.23,684.034 1810.79,684.034 1811.35,684.034 1811.9,684.034 1812.46,684.034 1813.02,684.034 1813.58,684.034 1814.14,684.034 1814.7,684.034 1815.26,684.034 1815.82,684.034 1816.38,684.034 1816.94,684.034 1817.5,684.034 1818.06,684.034 1818.62,684.034 1819.18,684.034 1819.73,684.034 1820.29,684.034 1820.85,684.034 1821.41,684.034 1821.97,684.034 1822.53,684.034 1823.09,684.034 1823.65,684.034 1824.21,684.034 1824.77,684.034 1825.33,684.034 1825.89,684.034 1826.45,684.034 1827,684.034 1827.56,684.034 1828.12,684.034 1828.68,684.034 1829.24,684.034 1829.8,684.034 1830.36,684.034 1830.92,684.034 1831.48,684.034 1832.04,684.034 1832.6,684.034 1833.16,684.034 1833.72,684.034 1834.27,684.034 1834.83,684.034 1835.39,684.034 1835.95,684.034 1836.51,684.034 1837.07,684.034 1837.63,684.034 1838.19,684.034 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0282845398977845 ± 0.0231364940686746\nProjected Energy: -4.0173461545677185 ± (0.0037631357665617315, 0.004058092928953094)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.475594</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3526e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1872e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.937e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.152e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.655e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.305e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V} <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix nrows. Used in the AllToAll communication strategy.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T} <: AbstractVector{AbstractVector{T}}\n\nMultiple vectors stored in a single buffer with MPI communication support. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
