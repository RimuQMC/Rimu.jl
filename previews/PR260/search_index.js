var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndœÑ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dœÑ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ¬± $(r.œÉ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ¬± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ¬± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ¬± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ¬± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ¬± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ¬± 0.13748856752861724\n   Replica 2: -3.974753826250174 ¬± 0.12466355058904417\n   Replica 3: -4.011054302602586 ¬± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1‚ü©\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1‚ü©\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0‚ü©\"=>-14.1421, fs\"|0 2 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 1 0 2‚ü©\"=>-14.1421, fs\"|1 2 0 1 1 1‚ü©\"=>-14.1421, fs\"|2 0 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 2 0 1‚ü©\"=>-14.1421, fs\"|1 1 2 0 1 1‚ü©\"=>-14.1421, fs\"|1 1 0 2 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 0 2 1‚ü©\"=>-14.1421, fs\"|1 0 2 1 1 1‚ü©\"=>-14.1421, fs\"|2 1 1 1 1 0‚ü©\"=>-14.1421, fs\"|0 1 1 1 1 2‚ü©\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip050\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip051\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip050)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip052\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.14 2211.02,1004.14 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.42 2211.02,746.42 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.695 2211.02,488.695 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.971 2211.02,230.971 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.14 423.181,1004.14 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.42 423.181,746.42 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.695 423.181,488.695 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.971 423.181,230.971 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.23 Q349.094 1254.77 349.094 1261.9 Q349.094 1269.01 350.899 1272.57 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.57 Q363.608 1269.01 363.608 1261.9 Q363.608 1254.77 361.779 1251.23 Q359.973 1247.67 356.339 1247.67 M356.339 1243.96 Q362.149 1243.96 365.205 1248.57 Q368.284 1253.15 368.284 1261.9 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.9 Q344.395 1253.15 347.45 1248.57 Q350.529 1243.96 356.339 1243.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M290.043 1017.49 L306.363 1017.49 L306.363 1021.42 L284.418 1021.42 L284.418 1017.49 Q287.08 1014.73 291.664 1010.1 Q296.27 1005.45 297.451 1004.11 Q299.696 1001.59 300.576 999.85 Q301.478 998.091 301.478 996.401 Q301.478 993.646 299.534 991.91 Q297.613 990.174 294.511 990.174 Q292.312 990.174 289.858 990.938 Q287.427 991.702 284.65 993.253 L284.65 988.531 Q287.474 987.396 289.927 986.818 Q292.381 986.239 294.418 986.239 Q299.789 986.239 302.983 988.924 Q306.177 991.609 306.177 996.1 Q306.177 998.23 305.367 1000.15 Q304.58 1002.05 302.474 1004.64 Q301.895 1005.31 298.793 1008.53 Q295.691 1011.72 290.043 1017.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M316.224 986.864 L334.58 986.864 L334.58 990.799 L320.506 990.799 L320.506 999.271 Q321.524 998.924 322.543 998.762 Q323.562 998.577 324.58 998.577 Q330.367 998.577 333.747 1001.75 Q337.126 1004.92 337.126 1010.34 Q337.126 1015.91 333.654 1019.02 Q330.182 1022.1 323.862 1022.1 Q321.687 1022.1 319.418 1021.72 Q317.173 1021.35 314.765 1020.61 L314.765 1015.91 Q316.849 1017.05 319.071 1017.6 Q321.293 1018.16 323.77 1018.16 Q327.774 1018.16 330.112 1016.05 Q332.45 1013.95 332.45 1010.34 Q332.45 1006.73 330.112 1004.62 Q327.774 1002.51 323.77 1002.51 Q321.895 1002.51 320.02 1002.93 Q318.168 1003.35 316.224 1004.23 L316.224 986.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M356.339 989.943 Q352.728 989.943 350.899 993.507 Q349.094 997.049 349.094 1004.18 Q349.094 1011.29 350.899 1014.85 Q352.728 1018.39 356.339 1018.39 Q359.973 1018.39 361.779 1014.85 Q363.608 1011.29 363.608 1004.18 Q363.608 997.049 361.779 993.507 Q359.973 989.943 356.339 989.943 M356.339 986.239 Q362.149 986.239 365.205 990.845 Q368.284 995.429 368.284 1004.18 Q368.284 1012.91 365.205 1017.51 Q362.149 1022.1 356.339 1022.1 Q350.529 1022.1 347.45 1017.51 Q344.395 1012.91 344.395 1004.18 Q344.395 995.429 347.45 990.845 Q350.529 986.239 356.339 986.239 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M286.062 729.14 L304.418 729.14 L304.418 733.075 L290.344 733.075 L290.344 741.547 Q291.363 741.2 292.381 741.038 Q293.4 740.852 294.418 740.852 Q300.205 740.852 303.585 744.024 Q306.964 747.195 306.964 752.612 Q306.964 758.19 303.492 761.292 Q300.02 764.371 293.701 764.371 Q291.525 764.371 289.256 764.001 Q287.011 763.63 284.603 762.889 L284.603 758.19 Q286.687 759.325 288.909 759.88 Q291.131 760.436 293.608 760.436 Q297.613 760.436 299.951 758.329 Q302.288 756.223 302.288 752.612 Q302.288 749.001 299.951 746.894 Q297.613 744.788 293.608 744.788 Q291.733 744.788 289.858 745.204 Q288.006 745.621 286.062 746.501 L286.062 729.14 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M326.177 732.218 Q322.566 732.218 320.737 735.783 Q318.932 739.325 318.932 746.454 Q318.932 753.561 320.737 757.126 Q322.566 760.667 326.177 760.667 Q329.811 760.667 331.617 757.126 Q333.446 753.561 333.446 746.454 Q333.446 739.325 331.617 735.783 Q329.811 732.218 326.177 732.218 M326.177 728.515 Q331.987 728.515 335.043 733.121 Q338.122 737.704 338.122 746.454 Q338.122 755.181 335.043 759.788 Q331.987 764.371 326.177 764.371 Q320.367 764.371 317.288 759.788 Q314.233 755.181 314.233 746.454 Q314.233 737.704 317.288 733.121 Q320.367 728.515 326.177 728.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M356.339 732.218 Q352.728 732.218 350.899 735.783 Q349.094 739.325 349.094 746.454 Q349.094 753.561 350.899 757.126 Q352.728 760.667 356.339 760.667 Q359.973 760.667 361.779 757.126 Q363.608 753.561 363.608 746.454 Q363.608 739.325 361.779 735.783 Q359.973 732.218 356.339 732.218 M356.339 728.515 Q362.149 728.515 365.205 733.121 Q368.284 737.704 368.284 746.454 Q368.284 755.181 365.205 759.788 Q362.149 764.371 356.339 764.371 Q350.529 764.371 347.45 759.788 Q344.395 755.181 344.395 746.454 Q344.395 737.704 347.45 733.121 Q350.529 728.515 356.339 728.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M284.835 471.415 L307.057 471.415 L307.057 473.406 L294.511 505.975 L289.627 505.975 L301.432 475.35 L284.835 475.35 L284.835 471.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M316.224 471.415 L334.58 471.415 L334.58 475.35 L320.506 475.35 L320.506 483.823 Q321.524 483.475 322.543 483.313 Q323.562 483.128 324.58 483.128 Q330.367 483.128 333.747 486.299 Q337.126 489.471 337.126 494.887 Q337.126 500.466 333.654 503.568 Q330.182 506.646 323.862 506.646 Q321.687 506.646 319.418 506.276 Q317.173 505.906 314.765 505.165 L314.765 500.466 Q316.849 501.6 319.071 502.156 Q321.293 502.711 323.77 502.711 Q327.774 502.711 330.112 500.605 Q332.45 498.498 332.45 494.887 Q332.45 491.276 330.112 489.17 Q327.774 487.063 323.77 487.063 Q321.895 487.063 320.02 487.48 Q318.168 487.897 316.224 488.776 L316.224 471.415 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M356.339 474.494 Q352.728 474.494 350.899 478.059 Q349.094 481.6 349.094 488.73 Q349.094 495.836 350.899 499.401 Q352.728 502.943 356.339 502.943 Q359.973 502.943 361.779 499.401 Q363.608 495.836 363.608 488.73 Q363.608 481.6 361.779 478.059 Q359.973 474.494 356.339 474.494 M356.339 470.79 Q362.149 470.79 365.205 475.397 Q368.284 479.98 368.284 488.73 Q368.284 497.457 365.205 502.063 Q362.149 506.646 356.339 506.646 Q350.529 506.646 347.45 502.063 Q344.395 497.457 344.395 488.73 Q344.395 479.98 347.45 475.397 Q350.529 470.79 356.339 470.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M256.664 244.316 L264.303 244.316 L264.303 217.95 L255.992 219.617 L255.992 215.357 L264.256 213.691 L268.932 213.691 L268.932 244.316 L276.571 244.316 L276.571 248.251 L256.664 248.251 L256.664 244.316 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M296.015 216.769 Q292.404 216.769 290.576 220.334 Q288.77 223.876 288.77 231.005 Q288.77 238.112 290.576 241.677 Q292.404 245.218 296.015 245.218 Q299.65 245.218 301.455 241.677 Q303.284 238.112 303.284 231.005 Q303.284 223.876 301.455 220.334 Q299.65 216.769 296.015 216.769 M296.015 213.066 Q301.826 213.066 304.881 217.672 Q307.96 222.256 307.96 231.005 Q307.96 239.732 304.881 244.339 Q301.826 248.922 296.015 248.922 Q290.205 248.922 287.127 244.339 Q284.071 239.732 284.071 231.005 Q284.071 222.256 287.127 217.672 Q290.205 213.066 296.015 213.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M326.177 216.769 Q322.566 216.769 320.737 220.334 Q318.932 223.876 318.932 231.005 Q318.932 238.112 320.737 241.677 Q322.566 245.218 326.177 245.218 Q329.811 245.218 331.617 241.677 Q333.446 238.112 333.446 231.005 Q333.446 223.876 331.617 220.334 Q329.811 216.769 326.177 216.769 M326.177 213.066 Q331.987 213.066 335.043 217.672 Q338.122 222.256 338.122 231.005 Q338.122 239.732 335.043 244.339 Q331.987 248.922 326.177 248.922 Q320.367 248.922 317.288 244.339 Q314.233 239.732 314.233 231.005 Q314.233 222.256 317.288 217.672 Q320.367 213.066 326.177 213.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M356.339 216.769 Q352.728 216.769 350.899 220.334 Q349.094 223.876 349.094 231.005 Q349.094 238.112 350.899 241.677 Q352.728 245.218 356.339 245.218 Q359.973 245.218 361.779 241.677 Q363.608 238.112 363.608 231.005 Q363.608 223.876 361.779 220.334 Q359.973 216.769 356.339 216.769 M356.339 213.066 Q362.149 213.066 365.205 217.672 Q368.284 222.256 368.284 231.005 Q368.284 239.732 365.205 244.339 Q362.149 248.922 356.339 248.922 Q350.529 248.922 347.45 244.339 Q344.395 239.732 344.395 231.005 Q344.395 222.256 347.45 217.672 Q350.529 213.066 356.339 213.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip052)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.971 4017.76,230.971 \"/>\n<polyline clip-path=\"url(#clip052)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.5 456.554,1248.39 457.123,1247.32 457.691,1245.2 458.259,1245.17 458.828,1244.99 459.396,1243.77 459.964,1242.48 460.533,1242.24 461.101,1241.84 461.669,1240.35 462.238,1239.84 462.806,1239.19 463.375,1238.41 463.943,1237.57 464.511,1236.62 465.08,1235.55 465.648,1234.36 466.216,1233.11 466.785,1231.74 467.353,1230.21 467.921,1228.59 468.49,1226.78 469.058,1223.86 469.626,1221.86 470.195,1218.63 470.763,1216.34 471.331,1213.82 471.9,1211.18 472.468,1206.33 473.036,1203.41 473.605,1200.26 474.173,1196.96 474.741,1193.46 475.31,1188.72 475.878,1182.81 476.446,1178.79 477.015,1174.56 477.583,1170.11 478.152,1163.34 478.72,1157.54 479.288,1152.53 479.857,1147.27 480.425,1140.84 480.993,1134.18 481.562,1126.28 482.13,1119.11 482.698,1111.78 483.267,1104.24 483.835,1095.59 484.403,1087.55 484.972,1080.46 485.54,1073.36 486.108,1065.85 486.677,1056.07 487.245,1046.16 487.813,1037.35 488.382,1029.39 488.95,1018.13 489.518,1008.86 490.087,999.376 490.655,989.773 491.224,979.082 491.792,968.287 492.36,958.453 492.929,949.565 493.497,938.663 494.065,927.509 494.634,917.434 495.202,907.181 495.77,897.922 496.339,886.557 496.907,874.068 497.475,863.805 498.044,851.355 498.612,840.081 499.18,829.862 499.749,819.613 500.317,809.248 500.885,797.975 501.454,787.814 502.022,776.571 502.59,765.621 503.159,753.542 503.727,742.849 504.295,728.104 504.864,717.596 505.432,706.35 506.001,698.386 506.569,689.381 507.137,678.297 507.706,667.54 508.274,657.724 508.842,649.199 509.411,641.788 509.979,633.334 510.547,623.987 511.116,613.803 511.684,606.808 512.252,597.717 512.821,587.867 513.389,581.227 513.957,573.52 514.526,565.917 515.094,558.677 515.662,550.202 516.231,543.017 516.799,533.164 517.367,526.539 517.936,521.965 518.504,512.378 519.072,505.032 519.641,497.649 520.209,492.809 520.778,487.884 521.346,477.721 521.914,472.189 522.483,465.577 523.051,459.218 523.619,453.1 524.188,447.104 524.756,441.232 525.324,436.701 525.893,433.013 526.461,426.512 527.029,421.968 527.598,416.683 528.166,412.417 528.734,409.009 529.303,403.623 529.871,398.17 530.439,393.041 531.008,390.131 531.576,387.318 532.144,384.581 532.713,381.814 533.281,379.019 533.85,376.083 534.418,372.269 534.986,371.667 535.555,369.996 536.123,367.07 536.691,363.146 537.26,359.229 537.828,357.606 538.396,354.877 538.965,347.306 539.533,345.007 540.101,342.791 540.67,340.638 541.238,338.284 541.806,332.967 542.375,331.186 542.943,329.429 543.511,326.277 544.08,324.614 544.648,322.86 545.216,320.936 545.785,321.06 546.353,319.972 546.921,318.102 547.49,317.184 548.058,315.102 548.627,312.267 549.195,309.418 549.763,305.746 550.332,303.999 550.9,302.348 551.468,300.799 552.037,298.3 552.605,294.956 553.173,292.824 553.742,291.634 554.31,290.368 554.878,289.977 555.447,287.671 556.015,286.404 556.583,286.677 557.152,284.372 557.72,283.519 558.288,280.497 558.857,280.663 559.425,279.766 559.993,276.782 560.562,274.941 561.13,272.117 561.698,269.322 562.267,268.028 562.835,267.71 563.404,267.454 563.972,268.333 564.54,267.913 565.109,268.275 565.677,266.86 566.245,265.107 566.814,262.555 567.382,262.273 567.95,261.941 568.519,262.791 569.087,263.545 569.655,263.174 570.224,262.753 570.792,262.244 571.36,260.534 571.929,258.244 572.497,258.043 573.065,256.688 573.634,255.488 574.202,255.194 574.77,257.01 575.339,255.624 575.907,255.488 576.476,254.416 577.044,254.448 577.612,252.148 578.181,251.953 578.749,251.052 579.317,251.009 579.886,249.92 580.454,251.005 581.022,250.759 581.591,249.688 582.159,248.729 582.727,246.59 583.296,246.651 583.864,247.739 584.432,246.779 585.001,246.976 585.569,247.054 586.137,246.072 586.706,246.381 587.274,246.564 587.842,244.417 588.411,246.536 588.979,247.464 589.547,246.333 590.116,247.379 590.684,247.327 591.253,245.989 591.821,243.918 592.389,242.979 592.958,244.273 593.526,244.312 594.094,244.576 594.663,243.64 595.231,242.725 595.799,242.819 596.368,241.747 596.936,240.653 597.504,240.681 598.073,240.078 598.641,240.385 599.209,240.72 599.778,240.881 600.346,239.923 600.914,240.152 601.483,238.315 602.051,238.547 602.619,239.953 603.188,240.287 603.756,239.622 604.325,238.761 604.893,239.979 605.461,241.2 606.03,241.015 606.598,241.159 607.166,240.257 607.735,238.589 608.303,236.851 608.871,236.194 609.44,235.689 610.008,240.122 610.576,238.193 611.145,238.244 611.713,238.543 612.281,236.416 612.85,235.694 613.418,237.001 613.986,238.417 614.555,238.562 615.123,237.743 615.691,236.817 616.26,236.285 616.828,234.757 617.396,235.146 617.965,236.649 618.533,237.939 619.102,235.086 619.67,236.467 620.238,236.928 620.807,238.113 621.375,238.3 621.943,235.194 622.512,237.572 623.08,237.789 623.648,239.053 624.217,237.067 624.785,237.379 625.353,236.269 625.922,236.608 626.49,239.084 627.058,240.992 627.627,242.06 628.195,239.815 628.763,239.915 629.332,241.028 629.9,240.952 630.468,238.856 631.037,237.875 631.605,239.042 632.173,240.128 632.742,242.247 633.31,240.977 633.879,240.833 634.447,240.673 635.015,241.44 635.584,240.14 636.152,240.126 636.72,240.027 637.289,242.017 637.857,242.581 638.425,242.207 638.994,241.899 639.562,240.351 640.13,237.093 640.699,238.079 641.267,236.192 641.835,236.216 642.404,238.494 642.972,238.346 643.54,238.413 644.109,235.15 644.677,234.119 645.245,235.588 645.814,233.925 646.382,234.264 646.951,234.105 647.519,235.328 648.087,232.289 648.656,233.575 649.224,231.848 649.792,232.293 650.361,232.711 650.929,236.238 651.497,236.152 652.066,235.904 652.634,235.987 653.202,236.118 653.771,236.185 654.339,236.295 654.907,236.361 655.476,238.482 656.044,238.352 656.612,238.109 657.181,236.957 657.749,235.939 658.317,236.036 658.886,234.968 659.454,234.833 660.022,236.919 660.591,237.852 661.159,239.782 661.728,239.33 662.296,239.27 662.864,238.05 663.433,239.891 664.001,236.621 664.569,235.56 665.138,236.301 665.706,236.174 666.274,237.33 666.843,236.45 667.411,237.425 667.979,238.313 668.548,239.108 669.116,236.767 669.684,236.419 670.253,234.168 670.821,232.226 671.389,231.127 671.958,230.531 672.526,231.819 673.094,230.825 673.663,231.114 674.231,230.216 674.799,232.757 675.368,231.858 675.936,230.061 676.505,231.468 677.073,232.867 677.641,233.119 678.21,232.255 678.778,230.233 679.346,231.384 679.915,229.58 680.483,229.149 681.051,229.446 681.62,230.676 682.188,232.034 682.756,233.204 683.325,232.318 683.893,234.56 684.461,233.477 685.03,232.609 685.598,230.738 686.166,228.979 686.735,230.472 687.303,230.792 687.871,230.178 688.44,229.36 689.008,227.677 689.577,228.124 690.145,227.6 690.713,226.029 691.282,226.689 691.85,228.234 692.418,228.833 692.987,230.471 693.555,230.692 694.123,231.997 694.692,232.219 695.26,232.416 695.828,234.802 696.397,233.993 696.965,237.497 697.533,237.536 698.102,236.326 698.67,237.291 699.238,238.292 699.807,237.092 700.375,235.656 700.943,235.781 701.512,235.687 702.08,236.605 702.648,236.586 703.217,237.726 703.785,237.297 704.354,237.072 704.922,235.541 705.49,236.248 706.059,232.906 706.627,233.16 707.195,232.327 707.764,232.454 708.332,231.417 708.9,232.742 709.469,232.694 710.037,233.646 710.605,234.726 711.174,234.79 711.742,233.518 712.31,232.556 712.879,232.587 713.447,232.781 714.015,230.955 714.584,231.313 715.152,230.344 715.72,229.404 716.289,229.58 716.857,230.766 717.425,230.072 717.994,230.251 718.562,228.577 719.131,228.873 719.699,228.129 720.267,226.723 720.836,228.307 721.404,227.633 721.972,231.281 722.541,227.477 723.109,225.108 723.677,226.879 724.246,226.476 724.814,225.95 725.382,224.536 725.951,224.245 726.519,224.303 727.087,226.113 727.656,227.774 728.224,228.369 728.792,229.832 729.361,227.242 729.929,228.84 730.497,231.493 731.066,232.948 731.634,233.225 732.203,235.449 732.771,236.403 733.339,236.248 733.908,237.169 734.476,237.935 735.044,237.795 735.613,237.485 736.181,236.535 736.749,236.365 737.318,236.245 737.886,236.251 738.454,234.155 739.023,235.049 739.591,237.034 740.159,233.989 740.728,234.005 741.296,234.992 741.864,236.026 742.433,236.94 743.001,237.905 743.569,238.724 744.138,238.496 744.706,237.257 745.274,237.079 745.843,236.087 746.411,236.909 746.98,233.809 747.548,236.673 748.116,236.535 748.685,238.369 749.253,240.044 749.821,236.613 750.39,234.264 750.958,234.059 751.526,231.757 752.095,231.751 752.663,232.841 753.231,231.928 753.8,234.137 754.368,233.113 754.936,234.211 755.505,233.145 756.073,234.23 756.641,237.329 757.21,233.833 757.778,234.879 758.346,234.701 758.915,234.359 759.483,234.44 760.052,234.502 760.62,235.581 761.188,235.283 761.757,236.069 762.325,233.882 762.893,230.771 763.462,230.63 764.03,230.789 764.598,231.073 765.167,233.339 765.735,231.285 766.303,232.346 766.872,232.534 767.44,232.739 768.008,231.828 768.577,231.913 769.145,233.003 769.713,228.743 770.282,227.071 770.85,226.484 771.418,227.048 771.987,228.458 772.555,228.651 773.123,226.934 773.692,226.396 774.26,225.827 774.829,226.332 775.397,225.948 775.965,225.144 776.534,226.791 777.102,227.088 777.67,228.654 778.239,230.041 778.807,229.616 779.375,232.851 779.944,231.954 780.512,232.261 781.08,233.208 781.649,234.263 782.217,232.05 782.785,233.125 783.354,235.102 783.922,236.797 784.49,236.522 785.059,237.262 785.627,236.912 786.195,240.645 786.764,240.132 787.332,239.7 787.9,241.211 788.469,238.448 789.037,240.081 789.606,239.437 790.174,239.854 790.742,241.346 791.311,239.459 791.879,237.88 792.447,237.596 793.016,236.217 793.584,232.995 794.152,232.785 794.721,232.953 795.289,231.766 795.857,229.661 796.426,228.842 796.994,230.146 797.562,230.421 798.131,230.46 798.699,230.443 799.267,230.604 799.836,231.782 800.404,233.884 800.972,233.631 801.541,233.303 802.109,236.216 802.678,234.907 803.246,234.692 803.814,234.426 804.383,234.154 804.951,233.673 805.519,233.619 806.088,234.586 806.656,235.343 807.224,233.99 807.793,232.49 808.361,232.388 808.929,232.328 809.498,232.327 810.066,231.156 810.634,231.171 811.203,232.092 811.771,233.073 812.339,232.851 812.908,233.628 813.476,233.341 814.044,231.79 814.613,231.756 815.181,232.924 815.749,231.952 816.318,232.025 816.886,231.792 817.455,232.82 818.023,232.766 818.591,233.858 819.16,234.557 819.728,232.101 820.296,231.977 820.865,232.084 821.433,231.967 822.001,232.972 822.57,231.642 823.138,233.255 823.706,233.105 824.275,235.067 824.843,234.732 825.411,233.408 825.98,233.261 826.548,233.943 827.116,233.654 827.685,232.432 828.253,233.486 828.821,232.431 829.39,232.235 829.958,233.07 830.526,231.956 831.095,231.811 831.663,227.4 832.232,227.783 832.8,227.989 833.368,228.198 833.937,230.47 834.505,229.471 835.073,227.565 835.642,228.802 836.21,231.19 836.778,231.124 837.347,232.048 837.915,233.169 838.483,232.079 839.052,232.368 839.62,232.185 840.188,229.035 840.757,228.133 841.325,228.454 841.893,228.654 842.462,228.815 843.03,229.091 843.598,226.945 844.167,225.162 844.735,224.743 845.304,227.039 845.872,226.538 846.44,226.976 847.009,227.367 847.577,227.544 848.145,228.67 848.714,229.716 849.282,229.896 849.85,229.982 850.419,230.196 850.987,232.443 851.555,232.563 852.124,233.379 852.692,231.322 853.26,228.173 853.829,229.528 854.397,230.762 854.965,228.959 855.534,230.163 856.102,229.372 856.67,228.584 857.239,226.67 857.807,231.255 858.375,233.337 858.944,231.466 859.512,232.396 860.081,233.378 860.649,233.369 861.217,229.288 861.786,228.555 862.354,229.82 862.922,229.929 863.491,229.134 864.059,231.282 864.627,230.34 865.196,229.488 865.764,231.679 866.332,229.494 866.901,229.691 867.469,227.632 868.037,230.248 868.606,231.451 869.174,230.381 869.742,232.566 870.311,231.592 870.879,231.764 871.447,230.609 872.016,229.689 872.584,230.902 873.152,231.042 873.721,230.122 874.289,232.15 874.858,232.018 875.426,231.914 875.994,231.952 876.563,231.905 877.131,234.072 877.699,232.948 878.268,230.029 878.836,230.446 879.404,228.489 879.973,228.925 880.541,231.181 881.109,230.239 881.678,232.574 882.246,230.396 882.814,231.561 883.383,231.555 883.951,234.403 884.519,234.184 885.088,234.01 885.656,232.01 886.224,231.067 886.793,232.817 887.361,233.866 887.93,236.824 888.498,238.696 889.066,238.114 889.635,237.642 890.203,237.04 890.771,234.835 891.34,233.474 891.908,232.005 892.476,232.553 893.045,233.467 893.613,234.347 894.181,234.182 894.75,232.898 895.318,234.853 895.886,235.552 896.455,234.24 897.023,232.117 897.591,231.081 898.16,229.913 898.728,230.073 899.296,231.128 899.865,232.052 900.433,232.044 901.001,232.977 901.57,233.034 902.138,230.766 902.707,231.741 903.275,232.785 903.843,233.884 904.412,233.612 904.98,233.284 905.548,231.876 906.117,229.854 906.685,228.942 907.253,229.068 907.822,230.268 908.39,231.275 908.958,231.455 909.527,232.491 910.095,233.527 910.663,233.571 911.232,232.302 911.8,232.999 912.368,232.622 912.937,232.367 913.505,233.327 914.073,233.326 914.642,232.121 915.21,231.052 915.779,230.027 916.347,230.012 916.915,230.103 917.484,229.862 918.052,228.741 918.62,228.631 919.189,229.898 919.757,228.699 920.325,228.759 920.894,230.135 921.462,229.151 922.03,228.337 922.599,227.51 923.167,226.804 923.735,228.151 924.304,227.479 924.872,226.71 925.44,228.035 926.009,226.235 926.577,226.611 927.145,228.715 927.714,228.837 928.282,229.137 928.85,230.284 929.419,230.372 929.987,229.341 930.556,230.421 931.124,230.503 931.692,227.533 932.261,229.001 932.829,230.166 933.397,229.45 933.966,227.794 934.534,226.102 935.102,225.58 935.671,226.966 936.239,228.378 936.807,229.728 937.376,228.917 937.944,228.818 938.512,229.051 939.081,229.544 939.649,233.753 940.217,231.553 940.786,231.784 941.354,230.888 941.922,229.82 942.491,226.678 943.059,226.056 943.627,226.622 944.196,227.234 944.764,228.62 945.333,228.149 945.901,229.595 946.469,230.911 947.038,233.159 947.606,232.036 948.174,231.99 948.743,229.054 949.311,229.116 949.879,229.236 950.448,229.651 951.016,229.802 951.584,229.97 952.153,232.052 952.721,232.941 953.289,229.929 953.858,229.963 954.426,231.233 954.994,230.403 955.563,230.724 956.131,232.971 956.699,231.766 957.268,230.831 957.836,231.099 958.405,231.408 958.973,229.583 959.541,229.84 960.11,228.943 960.678,228.978 961.246,231.488 961.815,232.685 962.383,235.616 962.951,237.351 963.52,238.002 964.088,238.715 964.656,235.103 965.225,237.018 965.793,235.581 966.361,233.29 966.93,233.172 967.498,234.167 968.066,234.122 968.635,234.873 969.203,235.638 969.771,237.478 970.34,236.11 970.908,235.707 971.476,236.491 972.045,234.056 972.613,233.807 973.182,233.868 973.75,232.627 974.318,232.468 974.887,233.591 975.455,233.495 976.023,234.362 976.592,234.012 977.16,232.724 977.728,233.746 978.297,233.369 978.865,229.945 979.433,230.864 980.002,228.981 980.57,230.196 981.138,231.222 981.707,230.17 982.275,232.37 982.843,232.326 983.412,231.41 983.98,230.483 984.548,230.509 985.117,230.476 985.685,232.572 986.253,232.47 986.822,232.344 987.39,229.19 987.959,231.154 988.527,231.04 989.095,229 989.664,230.135 990.232,230.139 990.8,231.23 991.369,231.251 991.937,231.168 992.505,229.888 993.074,229.093 993.642,229.243 994.21,230.362 994.779,232.6 995.347,231.365 995.915,229.29 996.484,231.412 997.052,232.508 997.62,232.376 998.189,232.292 998.757,231.193 999.325,230.243 999.894,230.276 1000.46,230.202 1001.03,230.285 1001.6,231.513 1002.17,230.498 1002.74,231.648 1003.3,230.481 1003.87,231.382 1004.44,230.279 1005.01,231.24 1005.58,232.145 1006.15,231.953 1006.71,231.858 1007.28,230.768 1007.85,229.75 1008.42,232.638 1008.99,232.357 1009.56,233.5 1010.12,231.008 1010.69,231.957 1011.26,230.93 1011.83,229.829 1012.4,229.657 1012.97,230.774 1013.53,230.004 1014.1,230.015 1014.67,233.088 1015.24,234.029 1015.81,232.813 1016.38,230.614 1016.94,231.611 1017.51,232.496 1018.08,233.262 1018.65,234.22 1019.22,234.117 1019.79,233.691 1020.35,233.56 1020.92,235.546 1021.49,235.239 1022.06,232.733 1022.63,231.449 1023.2,232.302 1023.76,231.154 1024.33,229.962 1024.9,230.195 1025.47,229.25 1026.04,227.188 1026.61,222.47 1027.17,222.239 1027.74,223.878 1028.31,225.313 1028.88,223.6 1029.45,225.443 1030.02,224.733 1030.58,225.306 1031.15,225.708 1031.72,225.007 1032.29,225.704 1032.86,227.941 1033.43,229.148 1033.99,229.345 1034.56,231.492 1035.13,231.457 1035.7,232.538 1036.27,231.298 1036.84,232.521 1037.4,233.317 1037.97,233.009 1038.54,233.176 1039.11,232.117 1039.68,232.061 1040.25,230.959 1040.81,230.99 1041.38,231.01 1041.95,231.292 1042.52,232.431 1043.09,233.63 1043.66,233.639 1044.22,230.366 1044.79,228.225 1045.36,228.26 1045.93,228.234 1046.5,228.723 1047.07,228.014 1047.63,228.404 1048.2,229.494 1048.77,230.81 1049.34,227.771 1049.91,227.961 1050.48,227.005 1051.05,226.31 1051.61,227.651 1052.18,228.053 1052.75,229.321 1053.32,227.524 1053.89,226.856 1054.46,227.147 1055.02,227.508 1055.59,227.769 1056.16,227.067 1056.73,228.597 1057.3,228.836 1057.87,229.198 1058.43,228.489 1059,230.698 1059.57,231.804 1060.14,231.83 1060.71,230.835 1061.28,231.987 1061.84,231.988 1062.41,231.013 1062.98,232.14 1063.55,232.046 1064.12,231.101 1064.69,233.238 1065.25,233.18 1065.82,233.181 1066.39,234.436 1066.96,233.251 1067.53,235.372 1068.1,235.034 1068.66,233.532 1069.23,230.37 1069.8,230.577 1070.37,229.674 1070.94,230.881 1071.51,233.079 1072.07,236.17 1072.64,235.789 1073.21,238.54 1073.78,240.976 1074.35,239.244 1074.92,239.596 1075.48,238.038 1076.05,238.631 1076.62,240.033 1077.19,239.508 1077.76,238.068 1078.33,238.526 1078.89,238.144 1079.46,236.655 1080.03,236.22 1080.6,236.934 1081.17,236.542 1081.74,237.125 1082.3,235.366 1082.87,233.973 1083.44,232.741 1084.01,232.41 1084.58,232.226 1085.15,232.051 1085.71,232.094 1086.28,231.021 1086.85,230.781 1087.42,231.648 1087.99,231.506 1088.56,229.362 1089.12,229.472 1089.69,231.683 1090.26,232.683 1090.83,233.651 1091.4,235.726 1091.97,234.521 1092.53,236.402 1093.1,236.15 1093.67,238 1094.24,235.197 1094.81,237.808 1095.38,236.331 1095.94,235.95 1096.51,237.643 1097.08,235.879 1097.65,234.403 1098.22,234.969 1098.79,231.414 1099.35,231.33 1099.92,232.063 1100.49,230.804 1101.06,230.945 1101.63,232.112 1102.2,231.977 1102.76,233.881 1103.33,231.587 1103.9,230.437 1104.47,229.109 1105.04,226.994 1105.61,227.07 1106.17,229.173 1106.74,229.159 1107.31,229.131 1107.88,229.087 1108.45,230.241 1109.02,228.107 1109.58,229.092 1110.15,230.141 1110.72,230.164 1111.29,227.892 1111.86,225.058 1112.43,224.304 1112.99,225.736 1113.56,226.083 1114.13,228.288 1114.7,229.605 1115.27,229.618 1115.84,230.704 1116.4,229.962 1116.97,230.049 1117.54,228.932 1118.11,227.923 1118.68,227.93 1119.25,228.143 1119.81,227.55 1120.38,227.029 1120.95,226.388 1121.52,224.713 1122.09,224.212 1122.66,225.65 1123.23,227.951 1123.79,229.144 1124.36,231.138 1124.93,233.29 1125.5,233.449 1126.07,233.164 1126.64,234.042 1127.2,233.863 1127.77,234.423 1128.34,233.981 1128.91,233.652 1129.48,231.348 1130.05,231.505 1130.61,230.502 1131.18,229.518 1131.75,230.477 1132.32,231.454 1132.89,231.469 1133.46,231.21 1134.02,232.142 1134.59,230.203 1135.16,230.142 1135.73,230.133 1136.3,230.055 1136.87,231.006 1137.43,231.839 1138,230.805 1138.57,230.695 1139.14,231.753 1139.71,230.561 1140.28,230.45 1140.84,230.469 1141.41,231.414 1141.98,231.329 1142.55,231.068 1143.12,230.148 1143.69,229.027 1144.25,228.884 1144.82,231.042 1145.39,229.056 1145.96,229.093 1146.53,228.269 1147.1,229.584 1147.66,228.891 1148.23,227.918 1148.8,229.069 1149.37,227.28 1149.94,228.589 1150.51,228.818 1151.07,229.035 1151.64,228.189 1152.21,228.53 1152.78,226.723 1153.35,229.282 1153.92,227.497 1154.48,226.836 1155.05,230.165 1155.62,230.32 1156.19,230.36 1156.76,230.437 1157.33,229.444 1157.89,229.618 1158.46,230.639 1159.03,230.658 1159.6,231.776 1160.17,230.739 1160.74,229.831 1161.3,230.901 1161.87,228.712 1162.44,223.802 1163.01,225.491 1163.58,226.081 1164.15,226.333 1164.71,226.666 1165.28,227.155 1165.85,227.526 1166.42,225.851 1166.99,226.329 1167.56,227.543 1168.12,225.845 1168.69,225.174 1169.26,228.493 1169.83,228.645 1170.4,231.984 1170.97,232.279 1171.53,231.054 1172.1,230.114 1172.67,228.474 1173.24,229.853 1173.81,231.068 1174.38,231.346 1174.94,232.457 1175.51,234.67 1176.08,235.349 1176.65,237.226 1177.22,238.001 1177.79,236.35 1178.35,237 1178.92,235.529 1179.49,234.471 1180.06,235.266 1180.63,234.134 1181.2,235.022 1181.76,233.933 1182.33,232.472 1182.9,231.439 1183.47,231.533 1184.04,232.467 1184.61,234.765 1185.17,233.627 1185.74,234.612 1186.31,234.429 1186.88,235.437 1187.45,235.396 1188.02,236.357 1188.58,237.883 1189.15,235.55 1189.72,235.277 1190.29,235.09 1190.86,233.8 1191.43,235.837 1192,233.269 1192.56,233.147 1193.13,233.066 1193.7,229.86 1194.27,232.002 1194.84,235.761 1195.41,235.411 1195.97,235.132 1196.54,233.856 1197.11,233.749 1197.68,230.351 1198.25,230.451 1198.82,230.263 1199.38,229.198 1199.95,229.095 1200.52,229.228 1201.09,230.453 1201.66,231.581 1202.23,232.625 1202.79,233.449 1203.36,234.147 1203.93,231.846 1204.5,231.659 1205.07,231.567 1205.64,232.378 1206.2,232.093 1206.77,230.726 1207.34,231.346 1207.91,230.273 1208.48,230.127 1209.05,229.104 1209.61,231.108 1210.18,229.016 1210.75,229.297 1211.32,231.356 1211.89,232.333 1212.46,231.264 1213.02,231.328 1213.59,230.126 1214.16,231.169 1214.73,230.84 1215.3,231.723 1215.87,231.754 1216.43,232.709 1217,232.58 1217.57,233.35 1218.14,233.005 1218.71,232.772 1219.28,233.315 1219.84,232.209 1220.41,233.289 1220.98,231.234 1221.55,231.233 1222.12,230.317 1222.69,229.126 1223.25,230.109 1223.82,227.206 1224.39,229.69 1224.96,229.872 1225.53,229.959 1226.1,228.972 1226.66,229.776 1227.23,229.564 1227.8,231.82 1228.37,230.794 1228.94,230.759 1229.51,229.567 1230.07,228.675 1230.64,231.991 1231.21,231.855 1231.78,231.673 1232.35,230.63 1232.92,229.572 1233.48,228.575 1234.05,227.781 1234.62,226.893 1235.19,227.175 1235.76,227.564 1236.33,225.786 1236.89,225.139 1237.46,224.529 1238.03,223.007 1238.6,227.565 1239.17,226.799 1239.74,228.244 1240.3,231.435 1240.87,234.384 1241.44,236.302 1242.01,235.862 1242.58,235.709 1243.15,235.474 1243.71,235.145 1244.28,234.931 1244.85,232.872 1245.42,232.842 1245.99,233.827 1246.56,233.713 1247.12,235.577 1247.69,234.231 1248.26,233.738 1248.83,233.215 1249.4,232.952 1249.97,230.644 1250.53,230.479 1251.1,230.314 1251.67,230.374 1252.24,229.235 1252.81,227.089 1253.38,227.481 1253.94,227.675 1254.51,226.789 1255.08,226.978 1255.65,226.112 1256.22,226.496 1256.79,227.731 1257.35,228.03 1257.92,229.454 1258.49,227.472 1259.06,228.728 1259.63,228.891 1260.2,227.871 1260.76,229.107 1261.33,228.263 1261.9,230.633 1262.47,232.873 1263.04,233.811 1263.61,233.788 1264.18,235.59 1264.74,234.085 1265.31,232.842 1265.88,233.725 1266.45,234.565 1267.02,234.251 1267.59,233.953 1268.15,233.537 1268.72,234.3 1269.29,232.881 1269.86,233.567 1270.43,232.491 1271,232.139 1271.56,231.987 1272.13,231.674 1272.7,231.506 1273.27,231.323 1273.84,231.281 1274.41,231.091 1274.97,231.959 1275.54,232.804 1276.11,233.691 1276.68,231.466 1277.25,231.594 1277.82,228.429 1278.38,229.29 1278.95,227.459 1279.52,228.712 1280.09,227.791 1280.66,229.038 1281.23,230.107 1281.79,230.063 1282.36,231.246 1282.93,232.319 1283.5,232.977 1284.07,234.965 1284.64,234.497 1285.2,236.309 1285.77,236.921 1286.34,234.515 1286.91,233.128 1287.48,231.978 1288.05,230.933 1288.61,228.931 1289.18,228.974 1289.75,227.954 1290.32,231.216 1290.89,233.115 1291.46,233.059 1292.02,231.781 1292.59,231.539 1293.16,232.601 1293.73,232.286 1294.3,235.042 1294.87,233.808 1295.43,232.4 1296,231.301 1296.57,229.364 1297.14,227.405 1297.71,226.499 1298.28,227.771 1298.84,227.241 1299.41,226.57 1299.98,224.901 1300.55,226.154 1301.12,228.338 1301.69,228.396 1302.25,228.346 1302.82,229.639 1303.39,229.871 1303.96,229.922 1304.53,229.96 1305.1,228.849 1305.66,229.87 1306.23,229.934 1306.8,230.956 1307.37,229.933 1307.94,227.842 1308.51,228.014 1309.07,228.144 1309.64,228.365 1310.21,228.495 1310.78,227.394 1311.35,227.843 1311.92,227.088 1312.48,225.306 1313.05,225.644 1313.62,227.337 1314.19,226.727 1314.76,225.124 1315.33,224.448 1315.89,224.019 1316.46,226.718 1317.03,228.164 1317.6,230.571 1318.17,230.787 1318.74,230.912 1319.3,231.107 1319.87,232.019 1320.44,233.016 1321.01,232.939 1321.58,231.909 1322.15,231.858 1322.71,232.103 1323.28,230.985 1323.85,230.974 1324.42,228.907 1324.99,231.299 1325.56,232.473 1326.12,233.644 1326.69,228.558 1327.26,229.735 1327.83,228.652 1328.4,231.01 1328.97,230.78 1329.53,229.73 1330.1,231.876 1330.67,230.794 1331.24,226.675 1331.81,227.86 1332.38,229.467 1332.94,229.672 1333.51,229.753 1334.08,227.804 1334.65,225.246 1335.22,224.606 1335.79,223.916 1336.36,224.669 1336.92,226.111 1337.49,227.561 1338.06,227.852 1338.63,229.233 1339.2,232.796 1339.77,231.752 1340.33,232.078 1340.9,231.901 1341.47,230.992 1342.04,233.164 1342.61,231.197 1343.18,233.339 1343.74,230.227 1344.31,231.366 1344.88,232.68 1345.45,231.713 1346.02,231.971 1346.59,231.954 1347.15,231.797 1347.72,231.012 1348.29,232.398 1348.86,233.341 1349.43,233.31 1350,233.238 1350.56,232.141 1351.13,230.21 1351.7,230.38 1352.27,230.475 1352.84,230.77 1353.41,229.682 1353.97,230.631 1354.54,231.657 1355.11,231.745 1355.68,230.981 1356.25,231.07 1356.82,232.307 1357.38,231.257 1357.95,231.284 1358.52,232.394 1359.09,231.355 1359.66,231.561 1360.23,234.621 1360.79,237.229 1361.36,235.907 1361.93,235.805 1362.5,234.629 1363.07,235.562 1363.64,235.266 1364.2,236.094 1364.77,236.878 1365.34,236.58 1365.91,236.037 1366.48,235.712 1367.05,237.29 1367.61,235.903 1368.18,237.574 1368.75,237.242 1369.32,235.762 1369.89,235.371 1370.46,235.058 1371.02,232.943 1371.59,233.986 1372.16,232.342 1372.73,231.105 1373.3,231.064 1373.87,229.921 1374.43,232.085 1375,233.969 1375.57,234.6 1376.14,233.439 1376.71,234.123 1377.28,234.111 1377.84,233.89 1378.41,235.786 1378.98,234.137 1379.55,234.804 1380.12,233.431 1380.69,230.128 1381.25,229.909 1381.82,232.979 1382.39,232.137 1382.96,231.888 1383.53,231.978 1384.1,233.029 1384.66,233.614 1385.23,229.123 1385.8,228.277 1386.37,227.419 1386.94,226.515 1387.51,227.945 1388.07,229.047 1388.64,225.869 1389.21,226.174 1389.78,225.44 1390.35,227.883 1390.92,228.892 1391.48,230.105 1392.05,229.129 1392.62,229.397 1393.19,228.604 1393.76,228.924 1394.33,227.18 1394.89,225.581 1395.46,226.921 1396.03,224.114 1396.6,225.583 1397.17,229.131 1397.74,229.249 1398.3,231.431 1398.87,231.455 1399.44,230.527 1400.01,228.377 1400.58,227.508 1401.15,228.631 1401.71,229.75 1402.28,229.902 1402.85,230.035 1403.42,231.091 1403.99,231.228 1404.56,229.289 1405.13,227.344 1405.69,227.716 1406.26,223.876 1406.83,222.378 1407.4,219.895 1407.97,220.732 1408.54,221.669 1409.1,222.511 1409.67,223.185 1410.24,224.049 1410.81,226.654 1411.38,228.01 1411.95,228.383 1412.51,229.639 1413.08,229.983 1413.65,230.144 1414.22,229.531 1414.79,228.617 1415.36,229.929 1415.92,229.298 1416.49,228.362 1417.06,231.933 1417.63,232.335 1418.2,231.243 1418.77,232.55 1419.33,232.561 1419.9,232.484 1420.47,231.396 1421.04,231.751 1421.61,230.837 1422.18,230.858 1422.74,230.069 1423.31,233.262 1423.88,234.271 1424.45,235.214 1425.02,233.908 1425.59,233.836 1426.15,231.787 1426.72,233.73 1427.29,233.7 1427.86,232.623 1428.43,234.916 1429,231.7 1429.56,233.667 1430.13,234.629 1430.7,236.564 1431.27,235.143 1431.84,234.853 1432.41,234.713 1432.97,235.486 1433.54,236.254 1434.11,233.871 1434.68,233.754 1435.25,233.87 1435.82,232.609 1436.38,237.627 1436.95,238.185 1437.52,238.665 1438.09,238.201 1438.66,238.777 1439.23,239.155 1439.79,237.342 1440.36,238.776 1440.93,237.312 1441.5,236.686 1442.07,238.173 1442.64,236.446 1443.2,235.983 1443.77,233.476 1444.34,233.22 1444.91,233.849 1445.48,234.64 1446.05,234.092 1446.61,235.537 1447.18,234.962 1447.75,236.449 1448.32,234.015 1448.89,233.448 1449.46,233.31 1450.02,231.019 1450.59,229.873 1451.16,226.621 1451.73,227.889 1452.3,227.946 1452.87,227.945 1453.43,230.191 1454,230.246 1454.57,231.219 1455.14,233.003 1455.71,233.674 1456.28,233.325 1456.84,231.023 1457.41,233.104 1457.98,234.827 1458.55,233.37 1459.12,233.15 1459.69,230.831 1460.25,231.924 1460.82,230.872 1461.39,229.67 1461.96,229.81 1462.53,229.784 1463.1,230.592 1463.66,231.675 1464.23,232.367 1464.8,232.152 1465.37,232.983 1465.94,231.804 1466.51,233.763 1467.07,233.633 1467.64,232.275 1468.21,232.081 1468.78,232.001 1469.35,231.72 1469.92,229.261 1470.48,228.407 1471.05,230.489 1471.62,230.304 1472.19,230.282 1472.76,230.197 1473.33,228.106 1473.89,229.245 1474.46,229.647 1475.03,231.642 1475.6,232.547 1476.17,232.442 1476.74,233.119 1477.31,230.832 1477.87,228.832 1478.44,228.991 1479.01,229.889 1479.58,228.849 1480.15,230.111 1480.72,231.121 1481.28,228.791 1481.85,226.779 1482.42,225.744 1482.99,224.818 1483.56,225.245 1484.13,227.501 1484.69,230.89 1485.26,231.771 1485.83,230.597 1486.4,228.571 1486.97,228.784 1487.54,228.79 1488.1,232.953 1488.67,233.755 1489.24,232.486 1489.81,234.242 1490.38,233.03 1490.95,233.919 1491.51,236.759 1492.08,235.412 1492.65,234.12 1493.22,232.783 1493.79,232.646 1494.36,231.345 1494.92,232.003 1495.49,231.803 1496.06,233.827 1496.63,232.558 1497.2,233.475 1497.77,233.203 1498.33,233.024 1498.9,231.831 1499.47,231.759 1500.04,230.403 1500.61,230.181 1501.18,229.028 1501.74,228.043 1502.31,227.318 1502.88,226.417 1503.45,224.657 1504.02,222.965 1504.59,225.655 1505.15,227.122 1505.72,228.342 1506.29,227.665 1506.86,227.86 1507.43,226.041 1508,227.461 1508.56,230.845 1509.13,232.033 1509.7,234.142 1510.27,234.983 1510.84,237.044 1511.41,236.589 1511.97,236.928 1512.54,236.467 1513.11,234.098 1513.68,233.757 1514.25,233.598 1514.82,230.493 1515.38,230.458 1515.95,228.214 1516.52,227.414 1517.09,226.415 1517.66,226.686 1518.23,225.799 1518.79,227.182 1519.36,227.633 1519.93,227.902 1520.5,229.173 1521.07,230.287 1521.64,227.153 1522.2,227.337 1522.77,224.644 1523.34,226.929 1523.91,227.14 1524.48,228.344 1525.05,226.468 1525.61,227.614 1526.18,229.723 1526.75,229.786 1527.32,230.996 1527.89,231.067 1528.46,231.186 1529.02,231.463 1529.59,231.344 1530.16,232.158 1530.73,232.866 1531.3,232.867 1531.87,233.641 1532.43,232.216 1533,231.919 1533.57,230.822 1534.14,229.808 1534.71,230.778 1535.28,230.818 1535.84,229.632 1536.41,228.554 1536.98,228.672 1537.55,227.711 1538.12,225.79 1538.69,226.041 1539.25,226.257 1539.82,224.508 1540.39,224.245 1540.96,224.654 1541.53,224.199 1542.1,224.693 1542.66,224.257 1543.23,226.927 1543.8,225.186 1544.37,224.79 1544.94,227.197 1545.51,227.327 1546.08,228.809 1546.64,231.123 1547.21,229.127 1547.78,229.378 1548.35,229.591 1548.92,231.999 1549.49,233.473 1550.05,232.448 1550.62,233.344 1551.19,232.186 1551.76,233.131 1552.33,233.02 1552.9,230.701 1553.46,230.611 1554.03,230.52 1554.6,230.593 1555.17,228.89 1555.74,228.809 1556.31,228.038 1556.87,230.439 1557.44,233.866 1558.01,233.685 1558.58,232.575 1559.15,231.45 1559.72,232.564 1560.28,230.466 1560.85,231.465 1561.42,230.514 1561.99,230.456 1562.56,230.721 1563.13,228.556 1563.69,226.652 1564.26,226.037 1564.83,225.357 1565.4,226.883 1565.97,227.38 1566.54,226.634 1567.1,225.771 1567.67,229.174 1568.24,229.278 1568.81,228.508 1569.38,227.817 1569.95,230.392 1570.51,230.639 1571.08,229.795 1571.65,231.182 1572.22,232.384 1572.79,234.676 1573.36,233.393 1573.92,232.507 1574.49,234.446 1575.06,234.269 1575.63,234.35 1576.2,232.279 1576.77,233.218 1577.33,233.152 1577.9,234.208 1578.47,234.976 1579.04,233.9 1579.61,232.749 1580.18,232.632 1580.74,232.499 1581.31,233.49 1581.88,232.309 1582.45,233.396 1583.02,232.149 1583.59,229.958 1584.15,230.007 1584.72,230.011 1585.29,228.355 1585.86,229.685 1586.43,229.934 1587,232.069 1587.56,232.049 1588.13,232.966 1588.7,232.723 1589.27,232.768 1589.84,231.735 1590.41,233.845 1590.97,233.67 1591.54,231.347 1592.11,229.336 1592.68,230.265 1593.25,230.633 1593.82,230.808 1594.38,231.938 1594.95,230.041 1595.52,229.085 1596.09,228.342 1596.66,227.663 1597.23,226.998 1597.79,227.455 1598.36,225.892 1598.93,228.479 1599.5,228.882 1600.07,228.103 1600.64,227.522 1601.2,231.081 1601.77,229.874 1602.34,230.08 1602.91,231.073 1603.48,230.182 1604.05,229.367 1604.61,229.787 1605.18,231.968 1605.75,232.948 1606.32,234.024 1606.89,232.929 1607.46,232.941 1608.02,234.81 1608.59,234.851 1609.16,232.635 1609.73,232.432 1610.3,231.403 1610.87,232.355 1611.43,232.293 1612,230.246 1612.57,229.452 1613.14,228.772 1613.71,230.025 1614.28,229.956 1614.84,230.089 1615.41,228.287 1615.98,227.57 1616.55,227.031 1617.12,229.238 1617.69,229.506 1618.26,232.966 1618.82,233.251 1619.39,235.452 1619.96,234.368 1620.53,235.35 1621.1,235.093 1621.67,235.915 1622.23,235.856 1622.8,234.672 1623.37,232.282 1623.94,234.308 1624.51,233.008 1625.08,232.048 1625.64,231.932 1626.21,231.092 1626.78,230.137 1627.35,230.267 1627.92,230.427 1628.49,231.74 1629.05,232.663 1629.62,232.599 1630.19,232.451 1630.76,233.591 1631.33,232.521 1631.9,230.14 1632.46,232.303 1633.03,232.178 1633.6,233.179 1634.17,233.021 1634.74,233.868 1635.31,230.73 1635.87,234.032 1636.44,234.774 1637.01,235.567 1637.58,235.075 1638.15,235.698 1638.72,233.238 1639.28,234.213 1639.85,235.003 1640.42,234.739 1640.99,234.662 1641.56,233.324 1642.13,233.371 1642.69,233.17 1643.26,231.798 1643.83,230.673 1644.4,232.679 1644.97,232.863 1645.54,232.679 1646.1,232.622 1646.67,233.519 1647.24,232.444 1647.81,232.62 1648.38,233.502 1648.95,233.333 1649.51,234.293 1650.08,233.103 1650.65,230.695 1651.22,233.718 1651.79,234.316 1652.36,235.008 1652.92,235.751 1653.49,235.472 1654.06,230.891 1654.63,232.83 1655.2,230.249 1655.77,233.131 1656.33,231.739 1656.9,234.629 1657.47,235.302 1658.04,236.07 1658.61,236.449 1659.18,235.996 1659.74,233.592 1660.31,234.238 1660.88,230.634 1661.45,229.466 1662.02,228.546 1662.59,229.752 1663.15,227.736 1663.72,225.947 1664.29,225.322 1664.86,225.868 1665.43,223.926 1666,224.584 1666.56,223.837 1667.13,222.16 1667.7,223.635 1668.27,223.875 1668.84,225.173 1669.41,226.647 1669.97,228.178 1670.54,228.268 1671.11,227.595 1671.68,227.731 1672.25,225.868 1672.82,228.058 1673.38,230.329 1673.95,230.468 1674.52,228.384 1675.09,228.536 1675.66,228.733 1676.23,229.157 1676.79,229.341 1677.36,231.486 1677.93,232.449 1678.5,232.242 1679.07,233.238 1679.64,233.221 1680.2,233.169 1680.77,233.049 1681.34,234.89 1681.91,236.586 1682.48,237.161 1683.05,235.692 1683.61,235.366 1684.18,234.972 1684.75,234.654 1685.32,234.623 1685.89,233.414 1686.46,234.186 1687.02,236.813 1687.59,235.178 1688.16,234.802 1688.73,234.2 1689.3,235.862 1689.87,235.118 1690.44,234.938 1691,232.357 1691.57,232.26 1692.14,232.32 1692.71,231.258 1693.28,231.238 1693.85,231.318 1694.41,231.302 1694.98,231.042 1695.55,232.174 1696.12,232.026 1696.69,231.665 1697.26,230.766 1697.82,231.822 1698.39,233.726 1698.96,233.445 1699.53,233.414 1700.1,236.371 1700.67,236.785 1701.23,236.029 1701.8,235.471 1702.37,235.311 1702.94,233.724 1703.51,231.282 1704.08,229.249 1704.64,230.413 1705.21,231.398 1705.78,232.534 1706.35,233.351 1706.92,233.192 1707.49,230.617 1708.05,229.541 1708.62,231.529 1709.19,231.628 1709.76,232.674 1710.33,231.43 1710.9,232.051 1711.46,228.633 1712.03,230.696 1712.6,230.645 1713.17,230.569 1713.74,230.662 1714.31,228.358 1714.87,229.52 1715.44,229.211 1716.01,229.109 1716.58,228.841 1717.15,227.94 1717.72,229.355 1718.28,227.563 1718.85,228.573 1719.42,228.614 1719.99,226.619 1720.56,225.838 1721.13,227.489 1721.69,227.513 1722.26,226.751 1722.83,227.006 1723.4,226.971 1723.97,226.405 1724.54,227.629 1725.1,227.874 1725.67,228.142 1726.24,230.468 1726.81,229.34 1727.38,229.51 1727.95,227.667 1728.51,228.927 1729.08,229.07 1729.65,229.027 1730.22,230.018 1730.79,229.032 1731.36,228.117 1731.92,226.997 1732.49,227.282 1733.06,229.328 1733.63,228.246 1734.2,229.53 1734.77,230.573 1735.33,230.641 1735.9,232.905 1736.47,231.534 1737.04,231.644 1737.61,231.733 1738.18,230.485 1738.74,229.454 1739.31,230.58 1739.88,231.566 1740.45,231.523 1741.02,232.544 1741.59,233.272 1742.15,233.249 1742.72,236.381 1743.29,233.913 1743.86,231.59 1744.43,231.6 1745,233.417 1745.56,235.342 1746.13,235.135 1746.7,235.767 1747.27,235.401 1747.84,236.103 1748.41,235.693 1748.97,236.399 1749.54,234.957 1750.11,231.66 1750.68,232.445 1751.25,234.201 1751.82,234.005 1752.38,233.816 1752.95,231.169 1753.52,232.173 1754.09,232.125 1754.66,230.836 1755.23,230.826 1755.79,228.697 1756.36,230.6 1756.93,230.606 1757.5,230.62 1758.07,229.491 1758.64,231.503 1759.21,228.277 1759.77,229.319 1760.34,228.34 1760.91,229.713 1761.48,230.539 1762.05,230.582 1762.62,227.873 1763.18,226.879 1763.75,223.072 1764.32,225.74 1764.89,226.047 1765.46,226.354 1766.03,226.758 1766.59,227.985 1767.16,227.163 1767.73,226.415 1768.3,226.611 1768.87,227.007 1769.44,229.298 1770,232.479 1770.57,231.335 1771.14,230.391 1771.71,230.516 1772.28,230.477 1772.85,231.602 1773.41,231.632 1773.98,233.437 1774.55,234.112 1775.12,233.85 1775.69,232.745 1776.26,233.648 1776.82,234.581 1777.39,235.188 1777.96,232.849 1778.53,230.51 1779.1,229.224 1779.67,230.374 1780.23,229.211 1780.8,229.367 1781.37,230.332 1781.94,230.428 1782.51,227.28 1783.08,227.516 1783.64,227.654 1784.21,226.765 1784.78,227.221 1785.35,229.473 1785.92,229.772 1786.49,229.8 1787.05,231.917 1787.62,231.574 1788.19,233.648 1788.76,234.545 1789.33,232.195 1789.9,231.007 1790.46,232.021 1791.03,232.903 1791.6,231.639 1792.17,230.629 1792.74,226.536 1793.31,227.73 1793.87,228.232 1794.44,226.279 1795.01,225.618 1795.58,224.067 1796.15,225.604 1796.72,226.035 1797.28,226.426 1797.85,226.863 1798.42,224.922 1798.99,226.284 1799.56,226.732 1800.13,226.062 1800.69,226.489 1801.26,225.845 1801.83,225.145 1802.4,226.636 1802.97,228.036 1803.54,229.453 1804.1,227.853 1804.67,229.42 1805.24,229.349 1805.81,228.611 1806.38,226.744 1806.95,227.03 1807.51,227.384 1808.08,227.671 1808.65,228.157 1809.22,227.441 1809.79,228.662 1810.36,229.001 1810.92,228.1 1811.49,229.384 1812.06,229.343 1812.63,230.608 1813.2,232.766 1813.77,231.714 1814.33,231.746 1814.9,231.716 1815.47,228.683 1816.04,229.073 1816.61,229.12 1817.18,229.3 1817.74,230.447 1818.31,232.866 1818.88,234.829 1819.45,234.691 1820.02,234.317 1820.59,235.09 1821.15,234.737 1821.72,234.682 1822.29,235.316 1822.86,235.105 1823.43,235.881 1824,234.567 1824.56,232.072 1825.13,230.89 1825.7,228.853 1826.27,231.164 1826.84,229.985 1827.41,231.217 1827.97,232.47 1828.54,233.304 1829.11,235.327 1829.68,236.955 1830.25,235.654 1830.82,232.164 1831.39,230.997 1831.95,231.908 1832.52,230.76 1833.09,231.647 1833.66,231.573 1834.23,232.472 1834.8,233.591 1835.36,233.464 1835.93,235.447 1836.5,236.307 1837.07,235.955 1837.64,237.707 1838.21,238.318 1838.77,238.995 1839.34,237.542 1839.91,238.192 1840.48,237.829 1841.05,238.287 1841.62,236.811 1842.18,234.348 1842.75,235.252 1843.32,236.193 1843.89,235.727 1844.46,236.166 1845.03,234.701 1845.59,232.329 1846.16,232.135 1846.73,231.246 1847.3,231.064 1847.87,230.812 1848.44,228.62 1849,229.646 1849.57,229.583 1850.14,230.625 1850.71,229.752 1851.28,225.815 1851.85,226.991 1852.41,226.131 1852.98,225.231 1853.55,225.289 1854.12,225.38 1854.69,223.685 1855.26,224.421 1855.82,223.506 1856.39,226.145 1856.96,226.479 1857.53,228.819 1858.1,228.922 1858.67,231.459 1859.23,231.471 1859.8,231.474 1860.37,228.292 1860.94,228.55 1861.51,229.861 1862.08,228.794 1862.64,228.99 1863.21,229.087 1863.78,231.384 1864.35,232.464 1864.92,232.41 1865.49,233.654 1866.05,231.334 1866.62,231.398 1867.19,231.526 1867.76,231.669 1868.33,230.581 1868.9,231.548 1869.46,229.465 1870.03,230.582 1870.6,230.608 1871.17,231.714 1871.74,232.589 1872.31,231.367 1872.87,230.438 1873.44,229.549 1874.01,228.627 1874.58,225.729 1875.15,225.958 1875.72,228.298 1876.28,229.468 1876.85,229.502 1877.42,229.801 1877.99,230.082 1878.56,230.295 1879.13,232.328 1879.69,236.312 1880.26,235.917 1880.83,236.442 1881.4,235.987 1881.97,234.463 1882.54,232.052 1883.1,232.985 1883.67,231.939 1884.24,233.997 1884.81,232.771 1885.38,232.563 1885.95,234.696 1886.51,233.386 1887.08,233.274 1887.65,234.173 1888.22,235.016 1888.79,234.682 1889.36,233.166 1889.92,231.178 1890.49,231.025 1891.06,232.029 1891.63,231.98 1892.2,230.784 1892.77,228.701 1893.33,232.986 1893.9,231.798 1894.47,230.769 1895.04,230.715 1895.61,230.696 1896.18,231.843 1896.74,232.818 1897.31,233.536 1897.88,233.318 1898.45,233.109 1899.02,230.934 1899.59,233.004 1900.16,232.849 1900.72,232.729 1901.29,232.627 1901.86,231.247 1902.43,231.161 1903,231.968 1903.57,230.083 1904.13,230.851 1904.7,230.689 1905.27,232.841 1905.84,230.453 1906.41,230.251 1906.98,229.21 1907.54,228.144 1908.11,228.213 1908.68,226.216 1909.25,225.201 1909.82,226.639 1910.39,226.742 1910.95,230.134 1911.52,228.992 1912.09,230.226 1912.66,231.208 1913.23,231.011 1913.8,232.033 1914.36,232.865 1914.93,232.674 1915.5,232.486 1916.07,232.365 1916.64,233.369 1917.21,234.254 1917.77,232.852 1918.34,234.61 1918.91,234.476 1919.48,236.414 1920.05,233.109 1920.62,232.972 1921.18,232.708 1921.75,232.399 1922.32,233.206 1922.89,232.702 1923.46,234.739 1924.03,234.294 1924.59,233.124 1925.16,232.938 1925.73,232.828 1926.3,232.706 1926.87,233.565 1927.44,228.987 1928,228.926 1928.57,229.29 1929.14,229.535 1929.71,229.6 1930.28,226.607 1930.85,225.849 1931.41,226.232 1931.98,226.64 1932.55,226.06 1933.12,226.333 1933.69,225.573 1934.26,225.815 1934.82,227.409 1935.39,231.826 1935.96,229.541 1936.53,229.556 1937.1,229.812 1937.67,231.061 1938.23,232.126 1938.8,231.994 1939.37,231.844 1939.94,228.797 1940.51,229.839 1941.08,229.822 1941.64,230.711 1942.21,230.585 1942.78,231.68 1943.35,229.515 1943.92,229.668 1944.49,227.727 1945.05,228.866 1945.62,226.155 1946.19,226.436 1946.76,226.944 1947.33,227.262 1947.9,226.596 1948.46,226.001 1949.03,226.271 1949.6,227.671 1950.17,228.042 1950.74,227.365 1951.31,225.249 1951.87,224.545 1952.44,227.356 1953.01,227.516 1953.58,227.81 1954.15,228.055 1954.72,228.239 1955.28,231.49 1955.85,232.781 1956.42,231.679 1956.99,231.582 1957.56,232.406 1958.13,231.246 1958.69,232.323 1959.26,230.297 1959.83,229.256 1960.4,229.276 1960.97,229.327 1961.54,227.664 1962.1,226.936 1962.67,227.18 1963.24,227.397 1963.81,226.72 1964.38,228.418 1964.95,228.749 1965.51,228.115 1966.08,228.505 1966.65,229.751 1967.22,231.991 1967.79,233.058 1968.36,233.936 1968.92,235.067 1969.49,235.99 1970.06,235.776 1970.63,235.447 1971.2,237.154 1971.77,236.841 1972.34,236.523 1972.9,236.19 1973.47,237.223 1974.04,236.984 1974.61,234.471 1975.18,235.349 1975.75,234.113 1976.31,234.872 1976.88,234.725 1977.45,235.394 1978.02,236.059 1978.59,235.842 1979.16,233.536 1979.72,233.04 1980.29,232.977 1980.86,233.807 1981.43,234.604 1982,234.395 1982.57,234.078 1983.13,236.026 1983.7,235.68 1984.27,232.576 1984.84,229.385 1985.41,229.413 1985.98,230.377 1986.54,230.234 1987.11,231.331 1987.68,227.159 1988.25,224.433 1988.82,222.672 1989.39,224.331 1989.95,225.749 1990.52,228.353 1991.09,229.757 1991.66,230.999 1992.23,233.117 1992.8,232.949 1993.36,231.658 1993.93,231.678 1994.5,229.719 1995.07,230.829 1995.64,232.172 1996.21,231.838 1996.77,232.608 1997.34,233.492 1997.91,234.128 1998.48,232.982 1999.05,231.801 1999.62,229.673 2000.18,228.722 2000.75,227.974 2001.32,227.977 2001.89,228.323 2002.46,228.423 2003.03,229.569 2003.59,229.559 2004.16,230.689 2004.73,232.763 2005.3,232.606 2005.87,230.34 2006.44,228.176 2007,228.481 2007.57,228.672 2008.14,229.772 2008.71,231.806 2009.28,231.695 2009.85,231.637 2010.41,231.653 2010.98,232.517 2011.55,232.407 2012.12,233.615 2012.69,234.545 2013.26,234.222 2013.82,234.243 2014.39,234.137 2014.96,235.133 2015.53,236.939 2016.1,236.528 2016.67,234.979 2017.23,235.721 2017.8,232.115 2018.37,232.03 2018.94,233.024 2019.51,232.623 2020.08,232.415 2020.64,234.469 2021.21,235.241 2021.78,233.849 2022.35,233.526 2022.92,233.26 2023.49,233.053 2024.05,230.759 2024.62,231.448 2025.19,230.409 2025.76,231.665 2026.33,229.546 2026.9,231.704 2027.46,233.653 2028.03,235.4 2028.6,236.955 2029.17,237.347 2029.74,233.725 2030.31,233.565 2030.87,233.146 2031.44,232.776 2032.01,232.589 2032.58,232.542 2033.15,233.108 2033.72,232.671 2034.28,232.41 2034.85,233.1 2035.42,230.791 2035.99,227.705 2036.56,225.699 2037.13,224.955 2037.69,224.225 2038.26,224.631 2038.83,223.948 2039.4,222.291 2039.97,223.858 2040.54,225.423 2041.11,226.709 2041.67,224.975 2042.24,226.444 2042.81,225.543 2043.38,225.726 2043.95,224.927 2044.52,225.484 2045.08,226.122 2045.65,225.404 2046.22,225.834 2046.79,225.084 2047.36,225.557 2047.93,227.99 2048.49,227.174 2049.06,226.683 2049.63,226.998 2050.2,228.326 2050.77,230.643 2051.34,230.475 2051.9,227.581 2052.47,226.679 2053.04,228.031 2053.61,227.443 2054.18,227.761 2054.75,226.863 2055.31,228.177 2055.88,227.213 2056.45,229.633 2057.02,231.804 2057.59,232.981 2058.16,230.864 2058.72,230.264 2059.29,229.457 2059.86,229.7 2060.43,230.888 2061,229.902 2061.57,229.241 2062.13,230.647 2062.7,229.901 2063.27,228.257 2063.84,230.499 2064.41,229.361 2064.98,231.481 2065.54,231.646 2066.11,231.499 2066.68,230.72 2067.25,231.694 2067.82,229.652 2068.39,229.956 2068.95,230.38 2069.52,229.356 2070.09,228.505 2070.66,229.836 2071.23,228.969 2071.8,232.255 2072.36,233.12 2072.93,235.273 2073.5,234.109 2074.07,231.048 2074.64,232.237 2075.21,234.326 2075.77,233.999 2076.34,232.873 2076.91,232.869 2077.48,232.966 2078.05,233.901 2078.62,233.952 2079.18,233.929 2079.75,233.398 2080.32,232.085 2080.89,234.177 2081.46,234.179 2082.03,234.904 2082.59,234.642 2083.16,232.518 2083.73,233.47 2084.3,235.335 2084.87,236.112 2085.44,235.88 2086,236.652 2086.57,239.397 2087.14,238.86 2087.71,239.469 2088.28,239 2088.85,238.441 2089.41,237.911 2089.98,237.501 2090.55,235.985 2091.12,235.59 2091.69,235.138 2092.26,238.707 2092.82,238.161 2093.39,238.621 2093.96,237.91 2094.53,237.469 2095.1,236.01 2095.67,233.573 2096.23,235.228 2096.8,236.761 2097.37,237.191 2097.94,235.488 2098.51,234.802 2099.08,234.596 2099.64,236.249 2100.21,236.959 2100.78,235.353 2101.35,234.039 2101.92,232.706 2102.49,231.387 2103.05,230.966 2103.62,229.77 2104.19,227.5 2104.76,226.459 2105.33,226.609 2105.9,226.892 2106.46,227.001 2107.03,227.336 2107.6,227.432 2108.17,226.51 2108.74,225.585 2109.31,228.935 2109.87,230.134 2110.44,230.126 2111.01,232.035 2111.58,231.711 2112.15,229.334 2112.72,229.255 2113.29,228.265 2113.85,228.478 2114.42,227.575 2114.99,226.527 2115.56,227.594 2116.13,228.762 2116.7,227.635 2117.26,227.618 2117.83,227.649 2118.4,226.911 2118.97,226.211 2119.54,226.306 2120.11,226.74 2120.67,225.719 2121.24,226.063 2121.81,227.374 2122.38,226.388 2122.95,222.619 2123.52,223.16 2124.08,222.631 2124.65,225.35 2125.22,226.555 2125.79,229.167 2126.36,229.486 2126.93,228.637 2127.49,228.696 2128.06,229.802 2128.63,229.934 2129.2,231.008 2129.77,232.131 2130.34,231.839 2130.9,231.873 2131.47,231.834 2132.04,231.797 2132.61,232.81 2133.18,232.693 2133.75,231.563 2134.31,230.348 2134.88,232.245 2135.45,232.147 2136.02,232.232 2136.59,233.495 2137.16,233.627 2137.72,234.454 2138.29,233.033 2138.86,231.84 2139.43,230.787 2140,229.759 2140.57,227.962 2141.13,228.214 2141.7,229.393 2142.27,228.394 2142.84,226.431 2143.41,225.678 2143.98,228.053 2144.54,229.393 2145.11,231.415 2145.68,229.314 2146.25,230.447 2146.82,229.576 2147.39,229.567 2147.95,231.724 2148.52,230.861 2149.09,231.901 2149.66,230.987 2150.23,230.889 2150.8,229.941 2151.36,229.042 2151.93,230.179 2152.5,230.14 2153.07,230.218 2153.64,228.232 2154.21,229.468 2154.77,228.43 2155.34,227.724 2155.91,227.816 2156.48,226.855 2157.05,230.123 2157.62,230.173 2158.18,229.136 2158.75,229.445 2159.32,228.375 2159.89,228.459 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip050)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip050)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip050)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip050)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ¬± 0.023\n  with uncertainty of ¬± 0.0021174306359009166\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01451 ¬± (0.0015821, 0.00141507) (MC)\n  95% confidence interval: [-4.0176, -4.01137]) (MC)\n  linear error propagation: -4.01454 ¬± 0.0015521\n  |Œ¥_y| = |0.00129218| (‚â§ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014513659059263, val_l = 0.0030849480820727138, val_u = 0.0031405357011546897)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip080\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip081\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip080)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip082\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1149.77 2211.02,1149.77 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,971.311 2211.02,971.311 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,792.849 2211.02,792.849 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,614.387 2211.02,614.387 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,435.925 2211.02,435.925 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,257.462 2211.02,257.462 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1149.77 365.751,1149.77 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,971.311 365.751,971.311 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,792.849 365.751,792.849 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,614.387 365.751,614.387 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,435.925 365.751,435.925 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,257.462 365.751,257.462 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M298.909 1135.57 Q295.298 1135.57 293.469 1139.14 Q291.664 1142.68 291.664 1149.81 Q291.664 1156.91 293.469 1160.48 Q295.298 1164.02 298.909 1164.02 Q302.543 1164.02 304.349 1160.48 Q306.177 1156.91 306.177 1149.81 Q306.177 1142.68 304.349 1139.14 Q302.543 1135.57 298.909 1135.57 M298.909 1131.87 Q304.719 1131.87 307.775 1136.47 Q310.853 1141.06 310.853 1149.81 Q310.853 1158.53 307.775 1163.14 Q304.719 1167.72 298.909 1167.72 Q293.099 1167.72 290.02 1163.14 Q286.964 1158.53 286.964 1149.81 Q286.964 1141.06 290.02 1136.47 Q293.099 1131.87 298.909 1131.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M259.557 984.656 L267.196 984.656 L267.196 958.29 L258.886 959.957 L258.886 955.698 L267.15 954.031 L271.826 954.031 L271.826 984.656 L279.465 984.656 L279.465 988.591 L259.557 988.591 L259.557 984.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M298.909 957.11 Q295.298 957.11 293.469 960.674 Q291.664 964.216 291.664 971.346 Q291.664 978.452 293.469 982.017 Q295.298 985.558 298.909 985.558 Q302.543 985.558 304.349 982.017 Q306.177 978.452 306.177 971.346 Q306.177 964.216 304.349 960.674 Q302.543 957.11 298.909 957.11 M298.909 953.406 Q304.719 953.406 307.775 958.012 Q310.853 962.596 310.853 971.346 Q310.853 980.072 307.775 984.679 Q304.719 989.262 298.909 989.262 Q293.099 989.262 290.02 984.679 Q286.964 980.072 286.964 971.346 Q286.964 962.596 290.02 958.012 Q293.099 953.406 298.909 953.406 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M262.775 806.194 L279.094 806.194 L279.094 810.129 L257.15 810.129 L257.15 806.194 Q259.812 803.439 264.395 798.809 Q269.002 794.157 270.182 792.814 Q272.428 790.291 273.307 788.555 Q274.21 786.796 274.21 785.106 Q274.21 782.351 272.266 780.615 Q270.344 778.879 267.242 778.879 Q265.043 778.879 262.59 779.643 Q260.159 780.407 257.381 781.958 L257.381 777.235 Q260.205 776.101 262.659 775.522 Q265.113 774.944 267.15 774.944 Q272.52 774.944 275.715 777.629 Q278.909 780.314 278.909 784.805 Q278.909 786.934 278.099 788.856 Q277.312 790.754 275.205 793.346 Q274.627 794.018 271.525 797.235 Q268.423 800.43 262.775 806.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M298.909 778.647 Q295.298 778.647 293.469 782.212 Q291.664 785.754 291.664 792.883 Q291.664 799.99 293.469 803.555 Q295.298 807.096 298.909 807.096 Q302.543 807.096 304.349 803.555 Q306.177 799.99 306.177 792.883 Q306.177 785.754 304.349 782.212 Q302.543 778.647 298.909 778.647 M298.909 774.944 Q304.719 774.944 307.775 779.55 Q310.853 784.134 310.853 792.883 Q310.853 801.61 307.775 806.217 Q304.719 810.8 298.909 810.8 Q293.099 810.8 290.02 806.217 Q286.964 801.61 286.964 792.883 Q286.964 784.134 290.02 779.55 Q293.099 774.944 298.909 774.944 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M272.914 613.032 Q276.27 613.75 278.145 616.019 Q280.043 618.287 280.043 621.62 Q280.043 626.736 276.525 629.537 Q273.006 632.338 266.525 632.338 Q264.349 632.338 262.034 631.898 Q259.742 631.481 257.289 630.625 L257.289 626.111 Q259.233 627.245 261.548 627.824 Q263.863 628.403 266.386 628.403 Q270.784 628.403 273.076 626.667 Q275.39 624.931 275.39 621.62 Q275.39 618.565 273.238 616.852 Q271.108 615.116 267.289 615.116 L263.261 615.116 L263.261 611.273 L267.474 611.273 Q270.923 611.273 272.752 609.908 Q274.58 608.519 274.58 605.926 Q274.58 603.264 272.682 601.852 Q270.807 600.417 267.289 600.417 Q265.367 600.417 263.168 600.833 Q260.969 601.25 258.33 602.13 L258.33 597.963 Q260.992 597.222 263.307 596.852 Q265.645 596.482 267.705 596.482 Q273.029 596.482 276.131 598.912 Q279.233 601.32 279.233 605.44 Q279.233 608.31 277.59 610.301 Q275.946 612.269 272.914 613.032 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M298.909 600.185 Q295.298 600.185 293.469 603.75 Q291.664 607.292 291.664 614.421 Q291.664 621.528 293.469 625.093 Q295.298 628.634 298.909 628.634 Q302.543 628.634 304.349 625.093 Q306.177 621.528 306.177 614.421 Q306.177 607.292 304.349 603.75 Q302.543 600.185 298.909 600.185 M298.909 596.482 Q304.719 596.482 307.775 601.088 Q310.853 605.671 310.853 614.421 Q310.853 623.148 307.775 627.755 Q304.719 632.338 298.909 632.338 Q293.099 632.338 290.02 627.755 Q286.964 623.148 286.964 614.421 Q286.964 605.671 290.02 601.088 Q293.099 596.482 298.909 596.482 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M271.594 422.719 L259.789 441.168 L271.594 441.168 L271.594 422.719 M270.367 418.645 L276.247 418.645 L276.247 441.168 L281.177 441.168 L281.177 445.056 L276.247 445.056 L276.247 453.205 L271.594 453.205 L271.594 445.056 L255.992 445.056 L255.992 440.543 L270.367 418.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M298.909 421.723 Q295.298 421.723 293.469 425.288 Q291.664 428.83 291.664 435.959 Q291.664 443.066 293.469 446.631 Q295.298 450.172 298.909 450.172 Q302.543 450.172 304.349 446.631 Q306.177 443.066 306.177 435.959 Q306.177 428.83 304.349 425.288 Q302.543 421.723 298.909 421.723 M298.909 418.02 Q304.719 418.02 307.775 422.626 Q310.853 427.209 310.853 435.959 Q310.853 444.686 307.775 449.293 Q304.719 453.876 298.909 453.876 Q293.099 453.876 290.02 449.293 Q286.964 444.686 286.964 435.959 Q286.964 427.209 290.02 422.626 Q293.099 418.02 298.909 418.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M258.793 240.182 L277.15 240.182 L277.15 244.118 L263.076 244.118 L263.076 252.59 Q264.094 252.243 265.113 252.081 Q266.131 251.895 267.15 251.895 Q272.937 251.895 276.316 255.067 Q279.696 258.238 279.696 263.655 Q279.696 269.233 276.224 272.335 Q272.752 275.414 266.432 275.414 Q264.256 275.414 261.988 275.043 Q259.742 274.673 257.335 273.932 L257.335 269.233 Q259.418 270.367 261.641 270.923 Q263.863 271.479 266.34 271.479 Q270.344 271.479 272.682 269.372 Q275.02 267.266 275.02 263.655 Q275.02 260.043 272.682 257.937 Q270.344 255.831 266.34 255.831 Q264.465 255.831 262.59 256.247 Q260.738 256.664 258.793 257.543 L258.793 240.182 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M298.909 243.261 Q295.298 243.261 293.469 246.826 Q291.664 250.368 291.664 257.497 Q291.664 264.604 293.469 268.168 Q295.298 271.71 298.909 271.71 Q302.543 271.71 304.349 268.168 Q306.177 264.604 306.177 257.497 Q306.177 250.368 304.349 246.826 Q302.543 243.261 298.909 243.261 M298.909 239.557 Q304.719 239.557 307.775 244.164 Q310.853 248.747 310.853 257.497 Q310.853 266.224 307.775 270.83 Q304.719 275.414 298.909 275.414 Q293.099 275.414 290.02 270.83 Q286.964 266.224 286.964 257.497 Q286.964 248.747 290.02 244.164 Q293.099 239.557 298.909 239.557 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip082)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1157.07 400.199,1154.51 400.786,1153.12 401.372,1141.28 401.958,1217.12 402.545,1102.58 403.131,1000.12 403.718,984.318 404.304,969.193 404.891,874.022 405.477,790.119 406.063,781.763 406.65,705.264 407.236,638.085 407.823,578.129 408.409,521.577 408.995,470.628 409.582,424.794 410.168,384.552 410.755,345.789 411.341,311.292 411.927,282.644 412.514,255.756 413.1,235.11 413.687,254.856 414.273,235.326 414.86,255.42 415.446,240.143 416.032,229.641 416.619,219.895 417.205,266.927 417.792,258.062 418.378,252.529 418.964,248.194 419.551,245.651 420.137,265.766 420.724,303.367 421.31,302.206 421.896,302.672 422.483,304.515 423.069,339.246 423.656,355.388 424.242,358.352 424.829,362.644 425.415,379.475 426.001,396.333 426.588,424.061 427.174,441.179 427.761,457.638 428.347,473.977 428.933,498.176 429.52,514.821 430.106,522.183 430.693,528.462 431.279,536.835 431.865,560.365 432.452,582.803 433.038,596.439 433.625,603.663 434.211,630.008 434.798,643.207 435.384,656.674 435.97,669.94 436.557,688.026 437.143,705.646 437.73,717.764 438.316,724.884 438.902,740.752 439.489,757.04 440.075,768.124 440.662,779.536 441.248,786.597 441.835,801.648 442.421,820.464 443.007,830.588 443.594,848.264 444.18,861.424 444.767,870.768 445.353,880.078 445.939,889.649 446.526,901.971 447.112,910.723 447.699,922.675 448.285,933.654 448.871,947.799 449.458,957.926 450.044,979.125 450.631,988.719 451.217,1000.26 451.804,1003.34 452.39,1009.18 452.976,1020.31 453.563,1030.66 454.149,1038.79 454.736,1043.94 455.322,1046.59 455.908,1051.79 456.495,1059.16 457.081,1068.52 457.668,1070.9 458.254,1078.02 458.84,1086.91 459.427,1089.05 460.013,1093.59 460.6,1098.06 461.186,1101.91 461.773,1108.43 462.359,1112.48 462.945,1122.01 463.532,1125.28 464.118,1124.66 464.705,1133.94 465.291,1139.04 465.877,1144.36 466.464,1145 467.05,1145.93 467.637,1156.74 468.223,1159.17 468.809,1163.7 469.396,1167.91 469.982,1171.82 470.569,1175.65 471.155,1179.39 471.742,1180.89 472.328,1181.03 472.914,1186.18 473.501,1188.08 474.087,1191.36 474.674,1193.02 475.26,1193.32 475.846,1197.08 476.433,1201.07 477.019,1204.63 477.606,1204.62 478.192,1204.52 478.778,1204.38 479.365,1204.36 479.951,1204.46 480.538,1204.86 481.124,1206.79 481.711,1203.56 482.297,1202.11 482.883,1202.74 483.47,1205.07 484.056,1207.48 484.643,1206.31 485.229,1206.95 485.815,1215.4 486.402,1215.64 486.988,1215.81 487.575,1215.93 488.161,1216.44 488.748,1221.66 489.334,1221.47 489.92,1221.3 490.507,1223.35 491.093,1223.17 491.68,1223.17 492.266,1223.48 492.852,1220.68 493.439,1219.76 494.025,1220.07 494.612,1218.96 495.198,1219.67 495.784,1221.6 496.371,1223.61 496.957,1226.96 497.544,1227.47 498.13,1227.88 498.717,1228.18 499.303,1229.95 499.889,1233.07 500.476,1234.45 501.062,1234.47 501.649,1234.64 502.235,1233.53 502.821,1235.3 503.408,1235.57 503.994,1233.59 504.581,1235.44 505.167,1235.19 505.753,1238.19 506.34,1236.54 506.926,1236.46 507.513,1239.49 508.099,1240.91 508.686,1243.83 509.272,1246.77 509.858,1247.59 510.445,1247.01 511.031,1246.34 511.618,1244.03 512.204,1243.59 512.79,1242.02 513.377,1243.04 513.963,1244.59 514.55,1247.35 515.136,1246.87 515.722,1246.48 516.309,1244.37 516.895,1242.37 517.482,1242 518.068,1241.7 518.655,1241.55 519.241,1243.16 519.827,1245.66 520.414,1245.18 521,1246.39 521.587,1247.4 522.173,1247.14 522.759,1243.83 523.346,1245.11 523.932,1244.62 524.519,1245.48 525.105,1244.77 525.691,1247.44 526.278,1247.13 526.864,1247.84 527.451,1247.34 528.037,1248.35 528.624,1246.25 529.21,1246.05 529.796,1247.04 530.383,1247.89 530.969,1250.47 531.556,1249.94 532.142,1247.94 532.728,1248.85 533.315,1248.13 533.901,1247.57 534.488,1248.53 535.074,1247.67 535.661,1246.97 536.247,1249.62 536.833,1246.2 537.42,1244.44 538.006,1245.6 538.593,1243.67 539.179,1243.29 539.765,1244.75 540.352,1247.3 540.938,1248.28 541.525,1246.09 542.111,1245.67 542.697,1244.92 543.284,1245.88 543.87,1246.83 544.457,1246.37 545.043,1247.57 545.63,1248.83 546.216,1248.52 546.802,1249.11 547.389,1248.42 547.975,1247.68 548.562,1247.18 549.148,1248.27 549.734,1247.7 550.321,1250.06 550.907,1249.52 551.494,1247.31 552.08,1246.58 552.666,1247.27 553.253,1248.26 553.839,1246.31 554.426,1244.31 555.012,1244.29 555.599,1243.81 556.185,1244.81 556.771,1246.93 557.358,1249.19 557.944,1249.96 558.531,1250.53 559.117,1244.09 559.703,1246.58 560.29,1246.31 560.876,1245.68 561.463,1248.5 562.049,1249.37 562.635,1247.38 563.222,1245.2 563.808,1244.79 564.395,1245.74 564.981,1246.87 565.568,1247.47 566.154,1249.48 566.74,1248.83 567.327,1246.58 567.913,1244.59 568.5,1248.45 569.086,1246.37 569.672,1245.57 570.259,1243.72 570.845,1243.25 571.432,1247.46 572.018,1243.97 572.605,1243.47 573.191,1241.48 573.777,1244.09 574.364,1243.47 574.95,1244.87 575.537,1244.24 576.123,1240.56 576.709,1237.62 577.296,1235.82 577.882,1238.71 578.469,1238.32 579.055,1236.49 579.641,1236.31 580.228,1239.02 580.814,1240.2 581.401,1238.35 581.987,1236.58 582.574,1233.3 583.16,1234.8 583.746,1234.72 584.333,1234.68 584.919,1233.31 585.506,1234.88 586.092,1234.64 586.678,1234.53 587.265,1231.44 587.851,1230.32 588.438,1230.53 589.024,1230.66 589.61,1232.57 590.197,1236.94 590.783,1235.37 591.37,1237.85 591.956,1237.67 592.543,1234.29 593.129,1234.29 593.715,1233.99 594.302,1238.42 594.888,1239.77 595.475,1237.6 596.061,1239.82 596.647,1239.26 597.234,1239.4 597.82,1237.58 598.407,1241.76 598.993,1239.9 599.579,1242.27 600.166,1241.62 600.752,1240.99 601.339,1235.95 601.925,1235.92 602.512,1236.13 603.098,1235.88 603.684,1235.55 604.271,1235.31 604.857,1235.01 605.444,1234.77 606.03,1231.6 606.616,1231.58 607.203,1231.72 607.789,1233.16 608.376,1234.44 608.962,1234.16 609.548,1235.54 610.135,1235.62 610.721,1232.55 611.308,1231.06 611.894,1228.12 612.481,1228.52 613.067,1228.37 613.653,1229.88 614.24,1227.06 614.826,1231.46 615.413,1232.81 615.999,1231.64 616.585,1231.67 617.172,1229.88 617.758,1230.95 618.345,1229.42 618.931,1227.98 619.518,1226.64 620.104,1229.74 620.69,1230.08 621.277,1233.12 621.863,1235.78 622.45,1237.3 623.036,1238.13 623.622,1236.33 624.209,1237.71 624.795,1237.3 625.382,1238.57 625.968,1235 626.554,1236.22 627.141,1238.73 627.727,1236.77 628.314,1234.78 628.9,1234.37 629.487,1235.53 630.073,1238.35 630.659,1236.75 631.246,1239.28 631.832,1239.93 632.419,1239.56 633.005,1237.87 633.591,1235.96 634.178,1234.27 634.764,1235.46 635.351,1232.25 635.937,1233.69 636.523,1234.85 637.11,1237.45 637.696,1239.93 638.283,1237.88 638.869,1237.45 639.456,1238.32 640.042,1239.49 640.628,1241.91 641.215,1241.37 641.801,1242.19 642.388,1244.49 642.974,1243.7 643.56,1241.64 644.147,1240.87 644.733,1238.62 645.32,1238.32 645.906,1236.49 646.492,1236.15 647.079,1235.83 647.665,1232.41 648.252,1233.45 648.838,1228.4 649.425,1228.16 650.011,1229.7 650.597,1228.18 651.184,1226.58 651.77,1228.08 652.357,1229.95 652.943,1229.64 653.529,1229.64 654.116,1228.21 654.702,1228.08 655.289,1226.3 655.875,1226.72 656.462,1226.87 657.048,1228.87 657.634,1227.74 658.221,1232.33 658.807,1231.92 659.394,1233.04 659.98,1232.82 660.566,1234.25 661.153,1232.36 661.739,1232.38 662.326,1230.98 662.912,1229.38 663.498,1229.18 664.085,1230.88 664.671,1232.17 665.258,1232.08 665.844,1231.76 666.431,1234.3 667.017,1233.79 667.603,1235.15 668.19,1236.49 668.776,1236.29 669.363,1234.65 669.949,1235.64 670.535,1235.41 671.122,1237.79 671.708,1237.44 672.295,1238.55 672.881,1240.61 673.467,1238.49 674.054,1239.52 674.64,1234.46 675.227,1239.82 675.813,1243.25 676.4,1240.92 676.986,1241.6 677.572,1242.46 678.159,1244.59 678.745,1245.17 679.332,1245.28 679.918,1242.92 680.504,1240.72 681.091,1239.97 681.677,1237.98 682.264,1241.66 682.85,1239.51 683.436,1235.82 684.023,1233.75 684.609,1233.31 685.196,1230.09 685.782,1228.61 686.369,1228.68 686.955,1227.23 687.541,1225.97 688.128,1225.97 688.714,1226.22 689.301,1227.39 689.887,1227.48 690.473,1227.5 691.06,1227.34 691.646,1230.17 692.233,1228.81 692.819,1225.88 693.405,1230.04 693.992,1229.93 694.578,1228.45 695.165,1226.87 695.751,1225.43 696.338,1223.89 696.924,1222.53 697.51,1222.64 698.097,1224.19 698.683,1224.27 699.27,1225.51 699.856,1224.2 700.442,1228.44 701.029,1224.29 701.615,1224.33 702.202,1221.57 702.788,1218.98 703.375,1223.61 703.961,1226.78 704.547,1226.98 705.134,1230.16 705.72,1230.14 706.307,1228.58 706.893,1229.82 707.479,1226.67 708.066,1228.03 708.652,1226.41 709.239,1227.83 709.825,1226.24 710.411,1221.75 710.998,1226.53 711.584,1224.97 712.171,1225.11 712.757,1225.5 713.344,1225.29 713.93,1225.1 714.516,1223.47 715.103,1223.77 715.689,1222.53 716.276,1225.49 716.862,1229.81 717.448,1230.02 718.035,1229.8 718.621,1229.41 719.208,1226.2 719.794,1229.04 720.38,1227.53 720.967,1227.23 721.553,1226.89 722.14,1228.13 722.726,1227.99 723.313,1226.42 723.899,1232.38 724.485,1234.8 725.072,1235.73 725.658,1235.06 726.245,1233.18 726.831,1232.98 727.417,1235.46 728.004,1236.33 728.59,1237.26 729.177,1236.69 729.763,1237.36 730.349,1238.63 730.936,1236.47 731.522,1236.17 732.109,1234.07 732.695,1232.18 733.282,1232.81 733.868,1228.27 734.454,1229.49 735.041,1229.03 735.627,1227.65 736.214,1226.1 736.8,1229.14 737.386,1227.59 737.973,1224.73 738.559,1222.2 739.146,1222.43 739.732,1221.23 740.318,1221.55 740.905,1216.07 741.491,1216.53 742.078,1216.89 742.664,1214.5 743.251,1218.15 743.837,1215.62 744.423,1216.28 745.01,1215.45 745.596,1213.08 746.183,1215.48 746.769,1217.49 747.355,1217.7 747.942,1219.48 748.528,1223.9 749.115,1224.14 749.701,1223.85 750.288,1225.48 750.874,1228.43 751.46,1229.62 752.047,1227.84 752.633,1227.47 753.22,1227.43 753.806,1227.47 754.392,1227.26 754.979,1225.6 755.565,1222.6 756.152,1222.88 756.738,1223.27 757.324,1219.08 757.911,1220.79 758.497,1220.99 759.084,1221.26 759.67,1221.55 760.257,1222.14 760.843,1222.14 761.429,1220.7 762.016,1219.53 762.602,1221.32 763.189,1223.36 763.775,1223.47 764.361,1223.51 764.948,1223.47 765.534,1225.09 766.121,1225.07 766.707,1223.76 767.293,1222.34 767.88,1222.6 768.466,1221.44 769.053,1221.78 769.639,1223.91 770.226,1223.93 770.812,1222.26 771.398,1223.58 771.985,1223.45 772.571,1223.75 773.158,1222.27 773.744,1222.3 774.33,1220.7 774.917,1219.63 775.503,1223.01 776.09,1223.15 776.676,1222.97 777.262,1223.11 777.849,1221.66 778.435,1223.48 779.022,1221.18 779.608,1221.33 780.195,1218.49 780.781,1218.85 781.367,1220.62 781.954,1220.77 782.54,1219.74 783.127,1220.06 783.713,1221.72 784.299,1220.19 784.886,1221.61 785.472,1221.85 786.059,1220.63 786.645,1222.15 787.232,1222.32 787.818,1228.53 788.404,1228.08 788.991,1227.88 789.577,1227.67 790.164,1224.54 790.75,1225.97 791.336,1228.69 791.923,1227.05 792.509,1223.74 793.096,1223.82 793.682,1222.51 794.268,1220.9 794.855,1222.38 795.441,1221.94 796.028,1222.16 796.614,1226.57 797.201,1227.9 797.787,1227.52 798.373,1227.31 798.96,1227.15 799.546,1226.82 800.133,1229.89 800.719,1232.51 801.305,1233.26 801.892,1230.21 802.478,1231.02 803.065,1230.53 803.651,1230.09 804.237,1229.94 804.824,1228.44 805.41,1227.03 805.997,1226.81 806.583,1226.72 807.17,1226.45 807.756,1223.29 808.342,1223.08 808.929,1221.88 809.515,1224.73 810.102,1229.16 810.688,1227.33 811.274,1225.63 811.861,1228.18 812.447,1226.53 813.034,1227.67 813.62,1228.83 814.206,1231.59 814.793,1225.24 815.379,1222.29 815.966,1224.87 816.552,1223.54 817.139,1222.11 817.725,1222.06 818.311,1227.76 818.898,1228.84 819.484,1227.12 820.071,1227 820.657,1228.15 821.243,1225.17 821.83,1226.49 822.416,1227.71 823.003,1224.66 823.589,1227.72 824.175,1227.49 824.762,1230.42 825.348,1226.83 825.935,1225.15 826.521,1226.65 827.108,1223.58 827.694,1224.91 828.28,1224.65 828.867,1226.26 829.453,1227.57 830.04,1225.89 830.626,1225.69 831.212,1226.99 831.799,1224.15 832.385,1224.3 832.972,1224.42 833.558,1224.34 834.145,1224.38 834.731,1221.29 835.317,1222.79 835.904,1226.86 836.49,1226.3 837.077,1229.08 837.663,1228.53 838.249,1225.4 838.836,1226.73 839.422,1223.45 840.009,1226.48 840.595,1224.85 841.181,1224.84 841.768,1220.8 842.354,1221.01 842.941,1221.17 843.527,1223.92 844.114,1225.22 844.7,1222.74 845.286,1221.21 845.873,1216.93 846.459,1214.11 847.046,1214.72 847.632,1215.19 848.218,1215.86 848.805,1218.82 849.391,1220.64 849.978,1222.65 850.564,1221.85 851.15,1220.51 851.737,1219.2 852.323,1219.34 852.91,1221.07 853.496,1218.24 854.083,1217.14 854.669,1218.88 855.255,1221.79 855.842,1223.22 856.428,1224.87 857.015,1224.67 857.601,1223.21 858.187,1221.9 858.774,1221.88 859.36,1220.53 859.947,1220.39 860.533,1223.54 861.119,1222.17 861.706,1220.67 862.292,1219.07 862.879,1219.37 863.465,1219.76 864.052,1221.69 864.638,1224.52 865.224,1225.84 865.811,1225.72 866.397,1224.08 866.984,1222.67 867.57,1222.41 868.156,1220.93 868.743,1219.42 869.329,1219.29 869.916,1221.02 870.502,1219.99 871.089,1220.47 871.675,1220.78 872.261,1219.39 872.848,1219.32 873.434,1220.96 874.021,1222.44 874.607,1223.89 875.193,1223.93 875.78,1223.83 876.366,1224.2 876.953,1225.81 877.539,1226.03 878.125,1224.3 878.712,1226.02 879.298,1226 879.885,1224.12 880.471,1225.53 881.058,1226.73 881.644,1227.97 882.23,1229.06 882.817,1227.28 883.403,1228.3 883.99,1229.48 884.576,1227.73 885.162,1230.35 885.749,1229.95 886.335,1227.11 886.922,1227 887.508,1226.63 888.094,1225.07 888.681,1224.96 889.267,1226.43 889.854,1224.95 890.44,1224.85 891.027,1229.05 891.613,1227.08 892.199,1225.49 892.786,1226.52 893.372,1228.9 893.959,1231.37 894.545,1232.24 895.131,1230.44 895.718,1228.56 896.304,1226.73 896.891,1227.91 897.477,1228.1 898.063,1227.83 898.65,1227.19 899.236,1221.28 899.823,1224.32 900.409,1223.97 900.996,1225.22 901.582,1226.73 902.168,1231.19 902.755,1232.18 903.341,1231.52 903.928,1230.78 904.514,1228.93 905.1,1229.66 905.687,1227.7 906.273,1225.88 906.86,1222.7 907.446,1224.23 908.032,1224.27 908.619,1228.38 909.205,1228.35 909.792,1228.23 910.378,1227.69 910.965,1227.52 911.551,1227.31 912.137,1224.4 912.724,1223.11 913.31,1227.31 913.897,1227.29 914.483,1225.53 915.069,1226.69 915.656,1226.26 916.242,1223.09 916.829,1224.73 917.415,1226.03 918.002,1225.66 918.588,1225.22 919.174,1227.78 919.761,1227.46 920.347,1228.76 920.934,1228.76 921.52,1225.27 922.106,1223.57 922.693,1219.37 923.279,1216.77 923.866,1215.67 924.452,1214.46 925.038,1219.38 925.625,1216.54 926.211,1218.42 926.798,1221.54 927.384,1221.64 927.971,1220.17 928.557,1220.14 929.143,1218.99 929.73,1217.8 930.316,1215.06 930.903,1216.82 931.489,1217.25 932.075,1216 932.662,1219.3 933.248,1219.57 933.835,1219.41 934.421,1221.08 935.007,1221.26 935.594,1219.63 936.18,1219.69 936.767,1218.4 937.353,1218.8 937.94,1220.54 938.526,1219.04 939.112,1219.5 939.699,1224.27 940.285,1223 940.872,1225.66 941.458,1224 942.044,1222.58 942.631,1224.05 943.217,1220.97 943.804,1220.99 944.39,1222.25 944.976,1223.55 945.563,1223.52 946.149,1223.58 946.736,1220.63 947.322,1220.73 947.909,1220.87 948.495,1225.29 949.081,1222.56 949.668,1222.72 950.254,1225.6 950.841,1224.05 951.427,1224.07 952.013,1222.55 952.6,1222.51 953.186,1222.62 953.773,1224.43 954.359,1225.58 954.945,1225.42 955.532,1223.89 956.118,1220.74 956.705,1222.44 957.291,1225.36 957.878,1222.41 958.464,1220.85 959.05,1220.99 959.637,1221.07 960.223,1222.59 960.81,1223.92 961.396,1223.9 961.982,1224.02 962.569,1223.93 963.155,1222.21 963.742,1223.63 964.328,1222.02 964.915,1223.65 965.501,1222.39 966.087,1223.93 966.674,1222.6 967.26,1221.31 967.847,1221.55 968.433,1221.66 969.019,1223.17 969.606,1224.61 970.192,1220.57 970.779,1220.92 971.365,1219.26 971.951,1222.72 972.538,1221.38 973.124,1222.8 973.711,1224.36 974.297,1224.63 974.884,1223.09 975.47,1224.18 976.056,1224.19 976.643,1219.88 977.229,1218.48 977.816,1220.12 978.402,1223.18 978.988,1221.78 979.575,1220.51 980.161,1219.38 980.748,1217.96 981.334,1218.02 981.92,1218.54 982.507,1218.65 983.093,1215.76 983.68,1216.07 984.266,1219.5 984.853,1221.27 985.439,1220.05 986.025,1221.63 986.612,1223.31 987.198,1223.01 987.785,1224.37 988.371,1227.32 988.957,1234.05 989.544,1234.61 990.13,1232.55 990.717,1230.73 991.303,1233.29 991.889,1230.91 992.476,1232.06 993.062,1231.42 993.649,1231.02 994.235,1232.15 994.822,1231.33 995.408,1228.33 995.994,1226.71 996.581,1226.49 997.167,1223.5 997.754,1223.53 998.34,1221.99 998.926,1223.7 999.513,1221.96 1000.1,1220.79 1000.69,1221.16 1001.27,1220.87 1001.86,1222.31 1002.44,1222.36 1003.03,1223.88 1003.62,1223.84 1004.2,1223.81 1004.79,1223.41 1005.38,1221.79 1005.96,1220.06 1006.55,1219.97 1007.14,1224.52 1007.72,1227.56 1008.31,1227.59 1008.9,1227.7 1009.48,1227.08 1010.07,1228.15 1010.65,1227.68 1011.24,1226.21 1011.83,1224.39 1012.41,1228.69 1013,1228.51 1013.59,1229.94 1014.17,1231.02 1014.76,1229.26 1015.35,1228.79 1015.93,1227.08 1016.52,1229.66 1017.11,1230.7 1017.69,1230.4 1018.28,1230 1018.86,1229.73 1019.45,1230.8 1020.04,1228.76 1020.62,1228.49 1021.21,1228.03 1021.8,1229.08 1022.38,1226.04 1022.97,1224.48 1023.56,1224.42 1024.14,1225.8 1024.73,1224.18 1025.32,1224.15 1025.9,1225.5 1026.49,1223.9 1027.07,1224.01 1027.66,1225.31 1028.25,1222.29 1028.83,1222.3 1029.42,1222.24 1030.01,1220.4 1030.59,1221.99 1031.18,1218.92 1031.77,1219.27 1032.35,1221.29 1032.94,1225.69 1033.52,1225.41 1034.11,1226.7 1034.7,1225.03 1035.28,1221.93 1035.87,1217.49 1036.46,1217.88 1037.04,1213.84 1037.63,1210.16 1038.22,1212.35 1038.8,1211.62 1039.39,1213.59 1039.98,1212.55 1040.56,1210.34 1041.15,1210.84 1041.73,1212.65 1042.32,1211.8 1042.91,1212.14 1043.49,1214.05 1044.08,1214.51 1044.67,1213.35 1045.25,1213.74 1045.84,1212.76 1046.43,1215.09 1047.01,1216.94 1047.6,1218.6 1048.19,1219.02 1048.77,1219.24 1049.36,1219.45 1049.94,1219.36 1050.53,1220.85 1051.12,1221.19 1051.7,1219.97 1052.29,1220.15 1052.88,1223.16 1053.46,1223.05 1054.05,1219.97 1054.64,1218.54 1055.22,1217.12 1055.81,1214.1 1056.39,1215.68 1056.98,1212.91 1057.57,1213.12 1058.15,1210.35 1058.74,1214.13 1059.33,1210.31 1059.91,1212.22 1060.5,1212.61 1061.09,1210.07 1061.67,1212.38 1062.26,1214.34 1062.85,1213.44 1063.43,1218.37 1064.02,1218.47 1064.6,1217.43 1065.19,1219.18 1065.78,1218.98 1066.36,1217.33 1066.95,1217.49 1067.54,1214.77 1068.12,1217.93 1068.71,1219.54 1069.3,1221.43 1069.88,1224.46 1070.47,1224.46 1071.06,1221.61 1071.64,1221.68 1072.23,1221.77 1072.81,1221.88 1073.4,1220.3 1073.99,1223.33 1074.57,1222.03 1075.16,1220.6 1075.75,1220.59 1076.33,1223.81 1076.92,1227.89 1077.51,1229.11 1078.09,1227.28 1078.68,1226.94 1079.26,1223.97 1079.85,1222.19 1080.44,1222.21 1081.02,1220.71 1081.61,1221.77 1082.2,1221.67 1082.78,1223.27 1083.37,1224.75 1083.96,1224.82 1084.54,1224.61 1085.13,1225.52 1085.72,1226.35 1086.3,1227.36 1086.89,1229.84 1087.47,1230.72 1088.06,1228.88 1088.65,1225.79 1089.23,1224.2 1089.82,1221.43 1090.41,1218.38 1090.99,1218.09 1091.58,1218.43 1092.17,1217.12 1092.75,1217.29 1093.34,1216.42 1093.93,1216.95 1094.51,1217.33 1095.1,1220.52 1095.68,1220.29 1096.27,1221.69 1096.86,1223.09 1097.44,1221.78 1098.03,1220.41 1098.62,1220.37 1099.2,1220.73 1099.79,1219.4 1100.38,1222.11 1100.96,1222.22 1101.55,1222.25 1102.14,1222.39 1102.72,1221.07 1103.31,1219.89 1103.89,1221.33 1104.48,1221.49 1105.07,1220 1105.65,1221.66 1106.24,1221.83 1106.83,1221.82 1107.41,1220.5 1108,1220.6 1108.59,1220.96 1109.17,1222.26 1109.76,1223.86 1110.34,1224.12 1110.93,1221.13 1111.52,1223.93 1112.1,1223.93 1112.69,1225.15 1113.28,1223.37 1113.86,1224.38 1114.45,1225.81 1115.04,1224.28 1115.62,1226.85 1116.21,1225.11 1116.8,1224.85 1117.38,1224.6 1117.97,1225.85 1118.55,1225.45 1119.14,1228.06 1119.73,1224.57 1120.31,1227.13 1120.9,1228.16 1121.49,1223.58 1122.07,1223.39 1122.66,1223.35 1123.25,1223.26 1123.83,1224.67 1124.42,1224.47 1125.01,1223.06 1125.59,1223.05 1126.18,1221.48 1126.76,1222.92 1127.35,1224.21 1127.94,1222.73 1128.52,1225.82 1129.11,1232.78 1129.7,1230.61 1130.28,1229.93 1130.87,1229.71 1131.46,1229.37 1132.04,1228.81 1132.63,1228.39 1133.21,1230.84 1133.8,1230.31 1134.39,1228.73 1134.97,1231.21 1135.56,1232.3 1136.15,1227.79 1136.73,1227.64 1137.32,1222.99 1137.91,1222.55 1138.49,1224.24 1139.08,1225.57 1139.67,1227.9 1140.25,1226.03 1140.84,1224.34 1141.42,1223.95 1142.01,1222.37 1142.6,1219.19 1143.18,1218.13 1143.77,1215.34 1144.36,1214.07 1144.94,1216.22 1145.53,1215.14 1146.12,1217.06 1146.7,1218.44 1147.29,1217.21 1147.88,1218.7 1148.46,1217.35 1149.05,1218.78 1149.63,1220.77 1150.22,1222.19 1150.81,1222.04 1151.39,1220.71 1151.98,1217.41 1152.57,1218.92 1153.15,1217.45 1153.74,1217.61 1154.33,1216.08 1154.91,1216.02 1155.5,1214.53 1156.09,1212.21 1156.67,1215.33 1157.26,1215.59 1157.84,1215.74 1158.43,1217.45 1159.02,1214.49 1159.6,1217.99 1160.19,1218.1 1160.78,1218.15 1161.36,1222.63 1161.95,1219.63 1162.54,1214.28 1163.12,1214.64 1163.71,1214.91 1164.29,1216.61 1164.88,1216.68 1165.47,1221.41 1166.05,1221.28 1166.64,1221.56 1167.23,1223.09 1167.81,1223.28 1168.4,1223.14 1168.99,1221.46 1169.57,1219.89 1170.16,1218.39 1170.75,1217.18 1171.33,1216.12 1171.92,1219.29 1172.5,1219.53 1173.09,1219.64 1173.68,1218.48 1174.26,1218.84 1174.85,1220.74 1175.44,1219.88 1176.02,1221.38 1176.61,1221.6 1177.2,1223.07 1177.78,1220.3 1178.37,1223.24 1178.96,1222.9 1179.54,1220.04 1180.13,1218.65 1180.71,1220.12 1181.3,1220.02 1181.89,1221.71 1182.47,1220.26 1183.06,1220.72 1183.65,1219.48 1184.23,1219.41 1184.82,1218.04 1185.41,1218.18 1185.99,1217.04 1186.58,1217.46 1187.16,1217.74 1187.75,1216.92 1188.34,1218.42 1188.92,1216.86 1189.51,1219.7 1190.1,1219.69 1190.68,1220.98 1191.27,1222.68 1191.86,1221.34 1192.44,1225.46 1193.03,1222.06 1193.62,1221.84 1194.2,1221.75 1194.79,1223.17 1195.37,1222.09 1195.96,1222.42 1196.55,1219.27 1197.13,1220.7 1197.72,1220.75 1198.31,1222.44 1198.89,1223.74 1199.48,1219.12 1200.07,1219.28 1200.65,1219.52 1201.24,1220.97 1201.83,1222.47 1202.41,1223.92 1203,1225.1 1203.58,1226.44 1204.17,1226.16 1204.76,1225.72 1205.34,1228.31 1205.93,1229.36 1206.52,1230.38 1207.1,1232.69 1207.69,1226.51 1208.28,1227.68 1208.86,1225.76 1209.45,1221.34 1210.03,1217.15 1210.62,1214.33 1211.21,1214.81 1211.79,1214.89 1212.38,1215.09 1212.97,1215.44 1213.55,1215.62 1214.14,1218.43 1214.73,1218.42 1215.31,1216.97 1215.9,1217.06 1216.49,1214.34 1217.07,1216.12 1217.66,1216.73 1218.24,1217.39 1218.83,1217.7 1219.42,1220.91 1220,1221.15 1220.59,1221.4 1221.18,1221.33 1221.76,1222.95 1222.35,1226.02 1222.94,1225.58 1223.52,1225.4 1224.11,1226.74 1224.7,1226.59 1225.28,1227.92 1225.87,1227.51 1226.45,1225.9 1227.04,1225.57 1227.63,1223.64 1228.21,1226.48 1228.8,1224.81 1229.39,1224.64 1229.97,1226.13 1230.56,1224.47 1231.15,1225.72 1231.73,1222.45 1232.32,1219.29 1232.91,1217.91 1233.49,1217.86 1234.08,1215.23 1234.66,1217.24 1235.25,1218.91 1235.84,1217.61 1236.42,1216.34 1237.01,1216.69 1237.6,1217.02 1238.18,1217.53 1238.77,1216.37 1239.36,1218.29 1239.94,1217.27 1240.53,1218.72 1241.11,1219.17 1241.7,1219.36 1242.29,1219.77 1242.87,1219.99 1243.46,1220.23 1244.05,1220.28 1244.63,1220.54 1245.22,1219.31 1245.81,1218.09 1246.39,1216.78 1246.98,1219.85 1247.57,1219.66 1248.15,1224.11 1248.74,1222.97 1249.32,1225.59 1249.91,1223.92 1250.5,1225.28 1251.08,1223.62 1251.67,1222.16 1252.26,1222.25 1252.84,1220.6 1253.43,1219.08 1254.02,1218.11 1254.6,1215.24 1255.19,1215.79 1255.78,1213.12 1256.36,1212.1 1256.95,1215.35 1257.53,1217.22 1258.12,1218.79 1258.71,1220.23 1259.29,1223.06 1259.88,1223.06 1260.47,1224.55 1261.05,1220.03 1261.64,1217.34 1262.23,1217.36 1262.81,1219.11 1263.4,1219.43 1263.98,1217.91 1264.57,1218.31 1265.16,1214.37 1265.74,1216.01 1266.33,1217.92 1266.92,1219.43 1267.5,1222.16 1268.09,1224.97 1268.68,1226.34 1269.26,1224.67 1269.85,1225.51 1270.44,1226.55 1271.02,1229.02 1271.61,1227.43 1272.19,1224.49 1272.78,1224.48 1273.37,1224.62 1273.95,1222.87 1274.54,1222.58 1275.13,1222.54 1275.71,1222.51 1276.3,1224.11 1276.89,1222.73 1277.47,1222.67 1278.06,1221.25 1278.65,1222.7 1279.23,1225.67 1279.82,1225.52 1280.4,1225.42 1280.99,1225.18 1281.58,1225.07 1282.16,1226.69 1282.75,1226.16 1283.34,1227.31 1283.92,1229.92 1284.51,1229.6 1285.1,1227.37 1285.68,1228.33 1286.27,1230.7 1286.86,1231.81 1287.44,1232.59 1288.03,1228.99 1288.61,1227.07 1289.2,1223.76 1289.79,1223.46 1290.37,1223.29 1290.96,1223.02 1291.55,1221.72 1292.13,1220.28 1292.72,1220.34 1293.31,1221.74 1293.89,1221.79 1294.48,1221.41 1295.06,1222.96 1295.65,1222.98 1296.24,1225.9 1296.82,1222.58 1297.41,1220.91 1298,1219.21 1298.58,1226.32 1299.17,1224.73 1299.76,1226.29 1300.34,1223.02 1300.93,1223.35 1301.52,1224.84 1302.1,1221.84 1302.69,1223.34 1303.27,1229.15 1303.86,1227.6 1304.45,1225.43 1305.03,1225.18 1305.62,1225.1 1306.21,1227.88 1306.79,1231.57 1307.38,1232.62 1307.97,1233.77 1308.55,1232.9 1309.14,1231.05 1309.73,1229.15 1310.31,1228.83 1310.9,1226.97 1311.48,1221.99 1312.07,1223.41 1312.66,1222.93 1313.24,1223.15 1313.83,1224.41 1314.42,1221.34 1315,1224.06 1315.59,1221.02 1316.18,1225.36 1316.76,1223.77 1317.35,1221.9 1317.93,1223.22 1318.52,1222.83 1319.11,1222.83 1319.69,1223.02 1320.28,1224.11 1320.87,1222.15 1321.45,1220.78 1322.04,1220.76 1322.63,1220.79 1323.21,1222.28 1323.8,1224.98 1324.39,1224.76 1324.97,1224.64 1325.56,1224.24 1326.14,1225.78 1326.73,1224.47 1327.32,1223.03 1327.9,1222.89 1328.49,1223.95 1329.08,1223.82 1329.66,1222.07 1330.25,1223.52 1330.84,1223.47 1331.42,1221.89 1332.01,1223.33 1332.6,1223.02 1333.18,1218.68 1333.77,1214.87 1334.35,1216.58 1334.94,1216.58 1335.53,1218.12 1336.11,1216.69 1336.7,1216.99 1337.29,1215.69 1337.87,1214.43 1338.46,1214.69 1339.05,1215.31 1339.63,1215.63 1340.22,1213.26 1340.8,1215.05 1341.39,1212.54 1341.98,1212.83 1342.56,1214.76 1343.15,1215.18 1343.74,1215.5 1344.32,1218.38 1344.91,1216.85 1345.5,1219.1 1346.08,1220.81 1346.67,1220.86 1347.26,1222.47 1347.84,1219.44 1348.43,1216.75 1349.01,1215.77 1349.6,1217.31 1350.19,1216.28 1350.77,1216.21 1351.36,1216.43 1351.95,1213.66 1352.53,1215.87 1353.12,1214.83 1353.71,1216.67 1354.29,1221.27 1354.88,1221.61 1355.47,1217.3 1356.05,1218.43 1356.64,1218.75 1357.22,1218.6 1357.81,1217.09 1358.4,1216.2 1358.98,1222.47 1359.57,1223.72 1360.16,1225 1360.74,1226.37 1361.33,1224.48 1361.92,1223.01 1362.5,1227.54 1363.09,1227.25 1363.68,1228.42 1364.26,1225.13 1364.85,1223.79 1365.43,1222.14 1366.02,1223.54 1366.61,1223.21 1367.19,1224.38 1367.78,1223.99 1368.37,1226.51 1368.95,1228.86 1369.54,1227.12 1370.13,1231.18 1370.71,1229.31 1371.3,1224.46 1371.88,1224.34 1372.47,1221.31 1373.06,1221.26 1373.64,1222.56 1374.23,1225.61 1374.82,1226.9 1375.4,1225.42 1375.99,1223.9 1376.58,1223.72 1377.16,1223.57 1377.75,1222.1 1378.34,1221.9 1378.92,1224.63 1379.51,1227.42 1380.09,1227 1380.68,1232.48 1381.27,1234.78 1381.85,1238.49 1382.44,1237.63 1383.03,1236.6 1383.61,1235.67 1384.2,1234.96 1384.79,1233.97 1385.37,1230.5 1385.96,1228.71 1386.55,1228.26 1387.13,1226.56 1387.72,1226.12 1388.3,1225.92 1388.89,1226.8 1389.48,1228.13 1390.06,1226.35 1390.65,1227.27 1391.24,1228.63 1391.82,1223.66 1392.41,1223.07 1393,1224.58 1393.58,1222.72 1394.17,1222.66 1394.75,1222.72 1395.34,1224.22 1395.93,1223.71 1396.51,1224.98 1397.1,1224.95 1397.69,1226.07 1398.27,1221.58 1398.86,1220.09 1399.45,1218.66 1400.03,1220.39 1400.62,1220.41 1401.21,1223.23 1401.79,1220.46 1402.38,1220.43 1402.96,1221.88 1403.55,1218.58 1404.14,1223.03 1404.72,1220.22 1405.31,1218.78 1405.9,1215.94 1406.48,1217.8 1407.07,1218.09 1407.66,1218.19 1408.24,1216.99 1408.83,1215.77 1409.42,1219 1410,1219.09 1410.59,1218.85 1411.17,1220.55 1411.76,1213.39 1412.35,1212.41 1412.93,1211.53 1413.52,1211.97 1414.11,1210.95 1414.69,1210.2 1415.28,1212.55 1415.87,1210.33 1416.45,1212.2 1417.04,1212.91 1417.63,1210.64 1418.21,1212.89 1418.8,1213.4 1419.38,1216.81 1419.97,1217.11 1420.56,1216.15 1421.14,1214.95 1421.73,1215.63 1422.32,1213.49 1422.9,1214.18 1423.49,1211.96 1424.08,1215.26 1424.66,1215.98 1425.25,1216.11 1425.83,1219.28 1426.42,1220.9 1427.01,1225.51 1427.59,1223.84 1428.18,1223.85 1428.77,1223.93 1429.35,1220.85 1429.94,1220.8 1430.53,1219.44 1431.11,1216.91 1431.7,1215.91 1432.29,1216.32 1432.87,1219.51 1433.46,1216.57 1434.04,1214.07 1434.63,1216.03 1435.22,1216.27 1435.8,1219.49 1436.39,1217.95 1436.98,1219.41 1437.56,1221.11 1438.15,1220.95 1438.74,1221.02 1439.32,1219.91 1439.91,1218.39 1440.5,1217.39 1441.08,1217.66 1441.67,1216.45 1442.25,1218.06 1442.84,1215.27 1443.43,1215.37 1444.01,1217.22 1444.6,1217.46 1445.19,1217.54 1445.77,1217.91 1446.36,1221.36 1446.95,1222.61 1447.53,1219.75 1448.12,1220.02 1448.7,1220.07 1449.29,1220.21 1449.88,1223.18 1450.46,1221.65 1451.05,1221.13 1451.64,1218.35 1452.22,1217.06 1452.81,1217.16 1453.4,1216.16 1453.98,1219.34 1454.57,1222.16 1455.16,1222 1455.74,1220.79 1456.33,1222.28 1456.91,1220.56 1457.5,1219.16 1458.09,1222.44 1458.67,1225.34 1459.26,1226.91 1459.85,1228.35 1460.43,1227.92 1461.02,1224.91 1461.61,1220.22 1462.19,1218.98 1462.78,1220.62 1463.37,1223.49 1463.95,1223.25 1464.54,1223.31 1465.12,1217.49 1465.71,1216.29 1466.3,1218.01 1466.88,1215.49 1467.47,1217.11 1468.06,1215.79 1468.64,1211.69 1469.23,1213.44 1469.82,1215.14 1470.4,1216.95 1470.99,1217.09 1471.57,1218.89 1472.16,1217.95 1472.75,1218.2 1473.33,1215.31 1473.92,1217.03 1474.51,1215.69 1475.09,1216 1475.68,1216.2 1476.27,1217.83 1476.85,1217.91 1477.44,1219.8 1478.03,1220.13 1478.61,1221.78 1479.2,1223.22 1479.78,1224.32 1480.37,1225.69 1480.96,1228.29 1481.54,1230.84 1482.13,1227.28 1482.72,1225.36 1483.3,1223.75 1483.89,1224.78 1484.48,1224.6 1485.06,1227.24 1485.65,1225.38 1486.24,1220.71 1486.82,1219.03 1487.41,1216.02 1487.99,1214.74 1488.58,1211.7 1489.17,1212.18 1489.75,1211.54 1490.34,1212.03 1490.93,1215.24 1491.51,1215.63 1492.1,1215.78 1492.69,1220.1 1493.27,1220.16 1493.86,1223.34 1494.45,1224.54 1495.03,1226.05 1495.62,1225.79 1496.2,1227.16 1496.79,1225.35 1497.38,1224.82 1497.96,1224.54 1498.55,1222.83 1499.14,1221.31 1499.72,1225.75 1500.31,1225.59 1500.9,1229.48 1501.48,1226.44 1502.07,1226.26 1502.65,1224.67 1503.24,1227.38 1503.83,1225.89 1504.41,1223.01 1505,1222.96 1505.59,1221.28 1506.17,1221.18 1506.76,1221.01 1507.35,1220.61 1507.93,1220.77 1508.52,1219.61 1509.11,1218.57 1509.69,1218.52 1510.28,1217.37 1510.86,1219.31 1511.45,1219.7 1512.04,1221.22 1512.62,1222.66 1513.21,1221.32 1513.8,1221.27 1514.38,1222.95 1514.97,1224.5 1515.56,1224.41 1516.14,1225.82 1516.73,1228.62 1517.32,1228.41 1517.9,1228.24 1518.49,1230.83 1519.07,1231.37 1519.66,1230.99 1520.25,1231.8 1520.83,1231.29 1521.42,1232.08 1522.01,1228.51 1522.59,1231.07 1523.18,1231.79 1523.77,1228.57 1524.35,1228.49 1524.94,1226.51 1525.52,1223.3 1526.11,1226.12 1526.7,1225.81 1527.28,1225.56 1527.87,1222.19 1528.46,1220.08 1529.04,1221.46 1529.63,1220.15 1530.22,1221.72 1530.8,1220.35 1531.39,1220.45 1531.98,1223.67 1532.56,1223.81 1533.15,1223.95 1533.73,1223.85 1534.32,1226.27 1534.91,1226.44 1535.49,1227.59 1536.08,1224.28 1536.67,1219.45 1537.25,1219.62 1537.84,1221.12 1538.43,1222.67 1539.01,1221.08 1539.6,1224 1540.19,1222.6 1540.77,1223.93 1541.36,1224.03 1541.94,1223.67 1542.53,1226.73 1543.12,1229.48 1543.7,1230.46 1544.29,1231.55 1544.88,1229.56 1545.46,1228.98 1546.05,1230.12 1546.64,1231.46 1547.22,1226.81 1547.81,1226.71 1548.4,1227.85 1548.98,1228.89 1549.57,1225.34 1550.15,1225.01 1550.74,1226.21 1551.33,1224.29 1551.91,1222.58 1552.5,1219.3 1553.09,1221.01 1553.67,1222.2 1554.26,1219.41 1554.85,1219.56 1555.43,1219.36 1556.02,1222.2 1556.6,1220.83 1557.19,1220.86 1557.78,1219.31 1558.36,1218.13 1558.95,1219.54 1559.54,1221.09 1560.12,1221.21 1560.71,1221.35 1561.3,1219.9 1561.88,1221.5 1562.47,1219.93 1563.06,1221.63 1563.64,1224.69 1564.23,1224.65 1564.81,1224.67 1565.4,1227.03 1565.99,1225.23 1566.57,1224.91 1567.16,1221.92 1567.75,1221.92 1568.33,1220.6 1568.92,1220.88 1569.51,1220.77 1570.09,1222.18 1570.68,1219.18 1571.27,1219.34 1571.85,1222.56 1572.44,1225.38 1573.02,1224.12 1573.61,1223.62 1574.2,1223.38 1574.78,1221.79 1575.37,1224.44 1575.96,1225.82 1576.54,1226.91 1577.13,1227.94 1577.72,1228.97 1578.3,1228.44 1578.89,1230.73 1579.47,1227.23 1580.06,1226.73 1580.65,1227.89 1581.23,1228.79 1581.82,1223.86 1582.41,1225.56 1582.99,1225.3 1583.58,1223.93 1584.17,1225.18 1584.75,1226.35 1585.34,1225.81 1585.93,1222.76 1586.51,1221.34 1587.1,1219.77 1587.68,1221.23 1588.27,1221.16 1588.86,1218.46 1589.44,1218.29 1590.03,1221.32 1590.62,1221.56 1591.2,1222.98 1591.79,1221.62 1592.38,1221.67 1592.96,1224.53 1593.55,1225.67 1594.14,1226.67 1594.72,1224.96 1595.31,1225.09 1595.89,1224.93 1596.48,1227.49 1597.07,1228.58 1597.65,1229.43 1598.24,1226.43 1598.83,1226.1 1599.41,1221.25 1600,1220.79 1600.59,1217.61 1601.17,1219.02 1601.76,1217.53 1602.34,1217.78 1602.93,1216.5 1603.52,1216.44 1604.1,1217.99 1604.69,1221.27 1605.28,1218.36 1605.86,1220.11 1606.45,1221.41 1607.04,1221.55 1607.62,1222.71 1608.21,1224.05 1608.8,1223.89 1609.38,1223.69 1609.97,1221.85 1610.55,1220.52 1611.14,1220.56 1611.73,1220.73 1612.31,1219.07 1612.9,1220.52 1613.49,1223.84 1614.07,1220.8 1614.66,1220.95 1615.25,1219.49 1615.83,1219.66 1616.42,1218.4 1617.01,1222.76 1617.59,1218.09 1618.18,1216.96 1618.76,1215.73 1619.35,1216.3 1619.94,1215.3 1620.52,1218.66 1621.11,1217.21 1621.7,1216 1622.28,1216.27 1622.87,1216.27 1623.46,1218.06 1624.04,1217.93 1624.63,1218.15 1625.22,1220.03 1625.8,1221.6 1626.39,1218.77 1626.97,1218.46 1627.56,1218.67 1628.15,1218.7 1628.73,1217.39 1629.32,1218.84 1629.91,1218.55 1630.49,1217.25 1631.08,1217.42 1631.67,1216 1632.25,1217.59 1632.84,1220.94 1633.42,1216.67 1634.01,1215.74 1634.6,1214.67 1635.18,1213.5 1635.77,1213.77 1636.36,1220.13 1636.94,1217.39 1637.53,1220.98 1638.12,1216.93 1638.7,1218.84 1639.29,1214.73 1639.88,1213.67 1640.46,1212.46 1641.05,1211.78 1641.63,1212.27 1642.22,1215.54 1642.81,1214.55 1643.39,1219.56 1643.98,1221.22 1644.57,1222.56 1645.15,1220.93 1645.74,1223.8 1646.33,1226.41 1646.91,1227.42 1647.5,1226.81 1648.09,1229.68 1648.67,1228.95 1649.26,1230.18 1649.84,1232.72 1650.43,1230.9 1651.02,1230.77 1651.6,1229.14 1652.19,1227.23 1652.78,1225.19 1653.36,1225.14 1653.95,1226.16 1654.54,1226.07 1655.12,1228.78 1655.71,1225.84 1656.29,1222.71 1656.88,1222.54 1657.47,1225.49 1658.05,1225.35 1658.64,1225.14 1659.23,1224.6 1659.81,1224.39 1660.4,1221.41 1660.99,1220.03 1661.57,1220.28 1662.16,1218.84 1662.75,1218.8 1663.33,1218.81 1663.92,1218.92 1664.5,1216.26 1665.09,1213.74 1665.68,1212.77 1666.26,1214.68 1666.85,1215.01 1667.44,1215.45 1668.02,1215.79 1668.61,1215.73 1669.2,1217.34 1669.78,1216.18 1670.37,1212.36 1670.96,1214.52 1671.54,1214.94 1672.13,1215.69 1672.71,1213.24 1673.3,1214.16 1673.89,1214.3 1674.47,1217.84 1675.06,1217.94 1675.65,1217.82 1676.23,1219.29 1676.82,1219.31 1677.41,1219.19 1677.99,1219.2 1678.58,1219.56 1679.17,1217.96 1679.75,1218.13 1680.34,1218.61 1680.92,1219.86 1681.51,1218.38 1682.1,1215.66 1682.68,1215.98 1683.27,1215.96 1683.86,1211.7 1684.44,1210.96 1685.03,1211.87 1685.62,1212.52 1686.2,1212.62 1686.79,1214.75 1687.37,1218.13 1687.96,1220.99 1688.55,1219.4 1689.13,1218.02 1689.72,1216.4 1690.31,1215.2 1690.89,1215.36 1691.48,1218.94 1692.07,1220.47 1692.65,1217.7 1693.24,1217.55 1693.83,1216.05 1694.41,1217.76 1695,1216.87 1695.58,1221.67 1696.17,1218.82 1696.76,1218.9 1697.34,1219.02 1697.93,1218.9 1698.52,1222.16 1699.1,1220.59 1699.69,1221.07 1700.28,1221.26 1700.86,1221.69 1701.45,1223.02 1702.04,1221.11 1702.62,1223.68 1703.21,1222.35 1703.79,1222.36 1704.38,1225.23 1704.97,1226.45 1705.55,1224.27 1706.14,1224.33 1706.73,1225.5 1707.31,1225.26 1707.9,1225.41 1708.49,1226.32 1709.07,1224.72 1709.66,1224.47 1710.24,1224.18 1710.83,1220.98 1711.42,1222.58 1712,1222.39 1712.59,1225.03 1713.18,1223.34 1713.76,1223.2 1714.35,1223.31 1714.94,1221.97 1715.52,1223.38 1716.11,1224.73 1716.7,1226.38 1717.28,1226.09 1717.87,1223.31 1718.45,1224.88 1719.04,1223.15 1719.63,1221.72 1720.21,1221.63 1720.8,1218.44 1721.39,1220.32 1721.97,1220.15 1722.56,1220.01 1723.15,1221.75 1723.73,1223.22 1724.32,1221.67 1724.91,1220.29 1725.49,1220.33 1726.08,1218.88 1726.66,1217.8 1727.25,1217.77 1727.84,1213.27 1728.42,1216.62 1729.01,1219.82 1729.6,1219.79 1730.18,1217.2 1730.77,1214.41 1731.36,1214.58 1731.94,1213.57 1732.53,1213.95 1733.11,1212.83 1733.7,1213.27 1734.29,1212.14 1734.87,1214.03 1735.46,1218.59 1736.05,1217.46 1736.63,1214.94 1737.22,1215.12 1737.81,1215.31 1738.39,1218.97 1738.98,1217.55 1739.57,1217.58 1740.15,1219.37 1740.74,1219.39 1741.32,1222.4 1741.91,1219.78 1742.5,1219.78 1743.08,1219.77 1743.67,1221.37 1744.26,1218.57 1744.84,1223.11 1745.43,1221.72 1746.02,1223.14 1746.6,1221.28 1747.19,1220.15 1747.78,1220.1 1748.36,1223.93 1748.95,1225.41 1749.53,1230.87 1750.12,1227.35 1750.71,1227.06 1751.29,1226.76 1751.88,1226.32 1752.47,1224.71 1753.05,1225.95 1753.64,1227.11 1754.23,1226.96 1754.81,1226.52 1755.4,1223.41 1755.99,1218.96 1756.57,1220.54 1757.16,1221.86 1757.74,1221.7 1758.33,1221.77 1758.92,1220.19 1759.5,1220.13 1760.09,1217.56 1760.68,1216.53 1761.26,1216.82 1761.85,1218.3 1762.44,1216.98 1763.02,1215.58 1763.61,1214.62 1764.19,1217.81 1764.78,1221.07 1765.37,1222.9 1765.95,1221.32 1766.54,1222.98 1767.13,1222.81 1767.71,1221.49 1768.3,1221.37 1768.89,1225.83 1769.47,1225.6 1770.06,1225.5 1770.65,1226.84 1771.23,1226.32 1771.82,1223.25 1772.4,1222.86 1772.99,1222.86 1773.58,1219.9 1774.16,1220.36 1774.75,1217.41 1775.34,1216.06 1775.92,1219.29 1776.51,1220.94 1777.1,1219.5 1777.68,1218.23 1778.27,1219.96 1778.86,1221.37 1779.44,1227.15 1780.03,1225.59 1780.61,1224.97 1781.2,1227.8 1781.79,1228.85 1782.37,1231.18 1782.96,1229.21 1783.55,1228.75 1784.13,1228.34 1784.72,1227.85 1785.31,1230.69 1785.89,1228.95 1786.48,1228.45 1787.06,1229.51 1787.65,1229.04 1788.24,1230.07 1788.82,1231.2 1789.41,1229.26 1790,1227.41 1790.58,1225.49 1791.17,1227.79 1791.76,1225.67 1792.34,1225.81 1792.93,1226.9 1793.52,1229.59 1794.1,1229.31 1794.69,1228.92 1795.27,1228.61 1795.86,1228.02 1796.45,1229.1 1797.03,1227.48 1797.62,1227.07 1798.21,1228.39 1798.79,1226.66 1799.38,1226.76 1799.97,1225.02 1800.55,1221.98 1801.14,1223.42 1801.73,1223.36 1802.31,1223.38 1802.9,1227.64 1803.48,1227.15 1804.07,1227.14 1804.66,1226.93 1805.24,1225.36 1805.83,1221.96 1806.42,1219.12 1807,1219.21 1807.59,1219.64 1808.18,1218.45 1808.76,1218.84 1809.35,1218.81 1809.94,1217.81 1810.52,1217.99 1811.11,1216.77 1811.69,1218.5 1812.28,1221.93 1812.87,1223.57 1813.45,1226.45 1814.04,1223.25 1814.63,1224.9 1815.21,1223.19 1815.8,1221.41 1816.39,1220.19 1816.97,1217.26 1817.56,1214.83 1818.14,1216.51 1818.73,1221.32 1819.32,1222.94 1819.9,1221.65 1820.49,1223.25 1821.08,1222 1821.66,1222.09 1822.25,1220.8 1822.84,1219.17 1823.42,1219.28 1824.01,1216.4 1824.6,1215.05 1825.18,1215.41 1825.77,1212.78 1826.35,1211.72 1826.94,1210.56 1827.53,1212.4 1828.11,1211.29 1828.7,1211.61 1829.29,1210.77 1829.87,1212.66 1830.46,1215.99 1831.05,1214.62 1831.63,1213.16 1832.22,1213.68 1832.81,1212.92 1833.39,1214.86 1833.98,1218.12 1834.56,1218.35 1835.15,1219.58 1835.74,1219.83 1836.32,1220.18 1836.91,1223.28 1837.5,1221.89 1838.08,1222.02 1838.67,1220.59 1839.26,1221.83 1839.84,1227.41 1840.43,1225.9 1841.01,1227.21 1841.6,1228.61 1842.19,1228.69 1842.77,1228.72 1843.36,1231.25 1843.95,1230.42 1844.53,1231.89 1845.12,1228.39 1845.71,1228.05 1846.29,1224.88 1846.88,1224.79 1847.47,1221.27 1848.05,1221.24 1848.64,1221.22 1849.22,1225.7 1849.81,1225.41 1850.4,1223.63 1850.98,1225.16 1851.57,1224.95 1852.16,1224.86 1852.74,1221.67 1853.33,1220.14 1853.92,1220.17 1854.5,1218.37 1855.09,1221.58 1855.68,1221.48 1856.26,1221.28 1856.85,1221.07 1857.43,1222.58 1858.02,1221.23 1858.61,1224.15 1859.19,1222.62 1859.78,1222.59 1860.37,1221.04 1860.95,1219.78 1861.54,1221.47 1862.13,1222.77 1862.71,1224.04 1863.3,1225.38 1863.88,1229.52 1864.47,1229.34 1865.06,1226.19 1865.64,1224.61 1866.23,1224.61 1866.82,1224.23 1867.4,1223.86 1867.99,1223.58 1868.58,1220.73 1869.16,1215.05 1869.75,1215.46 1870.34,1214.58 1870.92,1215.07 1871.51,1217.09 1872.09,1220.41 1872.68,1219.06 1873.27,1220.48 1873.85,1217.54 1874.44,1219.2 1875.03,1219.44 1875.61,1216.38 1876.2,1218.13 1876.79,1218.22 1877.37,1216.88 1877.96,1215.6 1878.55,1215.96 1879.13,1218 1879.72,1220.76 1880.3,1220.97 1880.89,1219.54 1881.48,1219.59 1882.06,1221.25 1882.65,1224.19 1883.24,1218.2 1883.82,1219.83 1884.41,1221.26 1885,1221.34 1885.58,1221.37 1886.17,1219.76 1886.76,1218.36 1887.34,1217.29 1887.93,1217.53 1888.51,1217.76 1889.1,1220.77 1889.69,1217.85 1890.27,1218.01 1890.86,1218.13 1891.45,1218.22 1892.03,1220.13 1892.62,1220.24 1893.21,1219.1 1893.79,1221.73 1894.38,1220.67 1894.96,1220.91 1895.55,1217.87 1896.14,1221.19 1896.72,1221.49 1897.31,1222.98 1897.9,1224.53 1898.48,1224.51 1899.07,1227.4 1899.66,1228.96 1900.24,1227.1 1900.83,1227.07 1901.42,1222.41 1902,1224.04 1902.59,1222.36 1903.17,1220.99 1903.76,1221.26 1904.35,1219.82 1904.93,1218.61 1905.52,1218.83 1906.11,1219.05 1906.69,1219.18 1907.28,1217.72 1907.87,1216.4 1908.45,1218.29 1909.04,1215.75 1909.63,1215.84 1910.21,1212.99 1910.8,1217.53 1911.38,1217.66 1911.97,1217.98 1912.56,1218.37 1913.14,1217.19 1913.73,1217.84 1914.32,1214.9 1914.9,1215.43 1915.49,1217 1916.08,1217.2 1916.66,1217.3 1917.25,1217.42 1917.83,1216.16 1918.42,1222.55 1919.01,1222.7 1919.59,1222.24 1920.18,1221.94 1920.77,1221.89 1921.35,1226.14 1921.94,1227.33 1922.53,1226.93 1923.11,1226.49 1923.7,1227.42 1924.29,1227.17 1924.87,1228.37 1925.46,1228.18 1926.04,1226.08 1926.63,1219.95 1927.22,1223.15 1927.8,1223.17 1928.39,1222.85 1928.98,1221.12 1929.56,1219.61 1930.15,1219.76 1930.74,1219.95 1931.32,1224.22 1931.91,1222.82 1932.5,1222.87 1933.08,1221.65 1933.67,1221.83 1934.25,1220.3 1934.84,1223.33 1935.43,1223.16 1936.01,1225.93 1936.6,1224.41 1937.19,1228.29 1937.77,1228.03 1938.36,1227.44 1938.95,1227.1 1939.53,1228.14 1940.12,1229.1 1940.71,1228.86 1941.29,1227.02 1941.88,1226.59 1942.46,1227.62 1943.05,1230.7 1943.64,1231.84 1944.22,1228.07 1944.81,1227.94 1945.4,1227.62 1945.98,1227.37 1946.57,1227.19 1947.16,1222.68 1947.74,1220.84 1948.33,1222.34 1948.91,1222.46 1949.5,1221.28 1950.09,1222.88 1950.67,1221.35 1951.26,1224.18 1951.85,1225.66 1952.43,1225.68 1953.02,1225.66 1953.61,1228.05 1954.19,1229.16 1954.78,1228.93 1955.37,1228.73 1955.95,1229.78 1956.54,1227.51 1957.12,1227.11 1957.71,1228.07 1958.3,1227.6 1958.88,1225.91 1959.47,1222.78 1960.06,1221.24 1960.64,1219.94 1961.23,1218.25 1961.82,1216.83 1962.4,1216.99 1962.99,1217.33 1963.58,1214.78 1964.16,1215.05 1964.75,1215.34 1965.33,1215.66 1965.92,1214.05 1966.51,1214.21 1967.09,1217.61 1967.68,1216.27 1968.27,1217.9 1968.85,1216.74 1969.44,1216.84 1970.03,1215.79 1970.61,1214.72 1971.2,1214.89 1971.78,1218.02 1972.37,1218.65 1972.96,1218.68 1973.54,1217.45 1974.13,1216.24 1974.72,1216.44 1975.3,1216.79 1975.89,1213.94 1976.48,1214.3 1977.06,1218.56 1977.65,1223.03 1978.24,1223.03 1978.82,1221.71 1979.41,1221.93 1979.99,1220.4 1980.58,1226.28 1981.17,1230.21 1981.75,1232.86 1982.34,1230.77 1982.93,1228.96 1983.51,1225.44 1984.1,1223.53 1984.69,1221.81 1985.27,1218.81 1985.86,1218.99 1986.45,1220.76 1987.03,1220.72 1987.62,1223.46 1988.2,1221.93 1988.79,1220.04 1989.38,1220.48 1989.96,1219.36 1990.55,1218.07 1991.14,1217.1 1991.72,1218.63 1992.31,1220.25 1992.9,1223.23 1993.48,1224.6 1994.07,1225.72 1994.65,1225.8 1995.24,1225.39 1995.83,1225.33 1996.41,1223.78 1997,1223.83 1997.59,1222.28 1998.17,1219.36 1998.76,1219.53 1999.35,1222.69 1999.93,1225.75 2000.52,1225.4 2001.11,1225.2 2001.69,1223.71 2002.28,1220.87 2002.86,1221.01 2003.45,1221.07 2004.04,1221.03 2004.62,1219.79 2005.21,1219.9 2005.8,1218.15 2006.38,1216.76 2006.97,1217.12 2007.56,1217 2008.14,1217.06 2008.73,1215.56 2009.32,1212.88 2009.9,1213.3 2010.49,1215.34 2011.07,1214.18 2011.66,1219.15 2012.25,1219.24 2012.83,1217.81 2013.42,1218.32 2014.01,1218.57 2014.59,1215.62 2015.18,1214.43 2015.77,1216.28 2016.35,1216.66 2016.94,1216.96 2017.53,1217.19 2018.11,1220.38 2018.7,1219.41 2019.28,1220.87 2019.87,1219.11 2020.46,1222.08 2021.04,1219.07 2021.63,1216.29 2022.22,1213.74 2022.8,1211.41 2023.39,1210.69 2023.98,1215.65 2024.56,1215.8 2025.15,1216.32 2025.73,1216.79 2026.32,1217 2026.91,1217.02 2027.49,1216.18 2028.08,1216.74 2028.67,1217.06 2029.25,1216.04 2029.84,1219.25 2030.43,1223.61 2031.01,1226.52 2031.6,1227.71 2032.19,1228.9 2032.77,1228.52 2033.36,1229.65 2033.94,1232.17 2034.53,1230.21 2035.12,1228.21 2035.7,1226.55 2036.29,1229.11 2036.88,1227.21 2037.46,1228.6 2038.05,1228.49 2038.64,1229.76 2039.22,1229.15 2039.81,1228.4 2040.4,1229.54 2040.98,1229.09 2041.57,1230.29 2042.15,1229.79 2042.74,1226.51 2043.33,1227.75 2043.91,1228.54 2044.5,1228.22 2045.09,1226.46 2045.67,1223.26 2046.26,1223.51 2046.85,1227.6 2047.43,1228.96 2048.02,1227.18 2048.6,1228.09 2049.19,1227.74 2049.78,1229.09 2050.36,1227.36 2050.95,1228.79 2051.54,1225.49 2052.12,1222.46 2052.71,1220.77 2053.3,1223.7 2053.88,1224.56 2054.47,1225.71 2055.06,1225.41 2055.64,1223.77 2056.23,1225.17 2056.81,1226.13 2057.4,1224.19 2057.99,1225.25 2058.57,1227.6 2059.16,1224.51 2059.75,1226.13 2060.33,1223.18 2060.92,1222.94 2061.51,1223.13 2062.09,1224.21 2062.68,1222.84 2063.27,1225.71 2063.85,1225.31 2064.44,1224.74 2065.02,1226.21 2065.61,1227.45 2066.2,1225.64 2066.78,1226.89 2067.37,1222.31 2067.96,1221.05 2068.54,1217.94 2069.13,1219.47 2069.72,1223.71 2070.3,1222.03 2070.89,1219.04 2071.48,1219.41 2072.06,1220.92 2072.65,1220.87 2073.23,1220.68 2073.82,1219.3 2074.41,1219.15 2074.99,1219.1 2075.58,1219.77 2076.17,1221.56 2076.75,1218.57 2077.34,1218.48 2077.93,1217.36 2078.51,1217.62 2079.1,1220.53 2079.68,1219.14 2080.27,1216.42 2080.86,1215.2 2081.44,1215.39 2082.03,1214.15 2082.62,1210.09 2083.2,1210.62 2083.79,1209.54 2084.38,1209.97 2084.96,1210.54 2085.55,1211.09 2086.14,1211.48 2086.72,1213.45 2087.31,1213.87 2087.89,1214.38 2088.48,1209.2 2089.07,1209.76 2089.65,1208.9 2090.24,1209.7 2090.83,1210.14 2091.41,1212.03 2092,1215.35 2092.59,1212.93 2093.17,1210.63 2093.76,1209.86 2094.35,1212.11 2094.93,1212.95 2095.52,1213.14 2096.1,1210.69 2096.69,1209.54 2097.28,1211.65 2097.86,1213.39 2098.45,1215.2 2099.04,1217.01 2099.62,1217.6 2100.21,1219.29 2100.8,1222.52 2101.38,1224.08 2101.97,1223.99 2102.55,1223.72 2103.14,1223.67 2103.73,1223.31 2104.31,1223.28 2104.9,1224.67 2105.49,1226.1 2106.07,1221.53 2106.66,1219.9 2107.25,1219.93 2107.83,1217.26 2108.42,1217.69 2109.01,1221.02 2109.59,1221.18 2110.18,1222.62 2110.76,1222.4 2111.35,1223.74 2111.94,1225.3 2112.52,1223.93 2113.11,1222.37 2113.7,1224.02 2114.28,1224.14 2114.87,1224.19 2115.46,1225.32 2116.04,1226.42 2116.63,1226.41 2117.22,1225.93 2117.8,1227.48 2118.39,1227.15 2118.97,1225.44 2119.56,1226.92 2120.15,1232.34 2120.73,1231.81 2121.32,1232.77 2121.91,1229.19 2122.49,1227.65 2123.08,1224.09 2123.67,1223.69 2124.25,1224.93 2124.84,1224.91 2125.42,1223.41 2126.01,1223.26 2126.6,1221.77 2127.18,1220.18 2127.77,1220.56 2128.36,1220.49 2128.94,1220.52 2129.53,1220.55 2130.12,1219.09 2130.7,1219.21 2131.29,1220.76 2131.88,1222.46 2132.46,1219.8 2133.05,1219.9 2133.63,1219.75 2134.22,1217.92 2134.81,1217.67 2135.39,1216.42 2135.98,1218.34 2136.57,1219.97 2137.15,1221.43 2137.74,1222.89 2138.33,1225.46 2138.91,1225.18 2139.5,1223.6 2140.09,1225.05 2140.67,1227.89 2141.26,1229.07 2141.84,1225.87 2142.43,1224.07 2143.02,1221.25 2143.6,1224.21 2144.19,1222.66 2144.78,1223.9 2145.36,1223.95 2145.95,1220.94 2146.54,1222.14 2147.12,1220.67 2147.71,1221.94 2148.3,1222.08 2148.88,1223.42 2149.47,1224.72 2150.05,1223.17 2150.64,1223.24 2151.23,1223.16 2151.81,1225.98 2152.4,1224.31 2152.99,1225.82 2153.57,1226.88 2154.16,1226.84 2154.75,1228.28 2155.33,1223.79 2155.92,1223.74 2156.5,1225.23 2157.09,1224.84 2157.68,1226.39 2158.26,1226.35 \"/>\n<path clip-path=\"url(#clip082)\" d=\"M986.025 1222.07 L986.612 1222.07 L987.198 1222.07 L987.785 1222.07 L988.371 1222.07 L988.957 1222.07 L989.544 1222.07 L990.13 1222.07 L990.717 1222.07 L991.303 1222.07 L991.889 1222.07 L992.476 1222.07 L993.062 1222.07 L993.649 1222.07 L994.235 1222.07 L994.822 1222.07 L995.408 1222.07 L995.994 1222.07 L996.581 1222.07 L997.167 1222.07 L997.754 1222.07 L998.34 1222.07 L998.926 1222.07 L999.513 1222.07 L1000.1 1222.07 L1000.69 1222.07 L1001.27 1222.07 L1001.86 1222.07 L1002.44 1222.07 L1003.03 1222.07 L1003.62 1222.07 L1004.2 1222.07 L1004.79 1222.07 L1005.38 1222.07 L1005.96 1222.07 L1006.55 1222.07 L1007.14 1222.07 L1007.72 1222.07 L1008.31 1222.07 L1008.9 1222.07 L1009.48 1222.07 L1010.07 1222.07 L1010.65 1222.07 L1011.24 1222.07 L1011.83 1222.07 L1012.41 1222.07 L1013 1222.07 L1013.59 1222.07 L1014.17 1222.07 L1014.76 1222.07 L1015.35 1222.07 L1015.93 1222.07 L1016.52 1222.07 L1017.11 1222.07 L1017.69 1222.07 L1018.28 1222.07 L1018.86 1222.07 L1019.45 1222.07 L1020.04 1222.07 L1020.62 1222.07 L1021.21 1222.07 L1021.8 1222.07 L1022.38 1222.07 L1022.97 1222.07 L1023.56 1222.07 L1024.14 1222.07 L1024.73 1222.07 L1025.32 1222.07 L1025.9 1222.07 L1026.49 1222.07 L1027.07 1222.07 L1027.66 1222.07 L1028.25 1222.07 L1028.83 1222.07 L1029.42 1222.07 L1030.01 1222.07 L1030.59 1222.07 L1031.18 1222.07 L1031.77 1222.07 L1032.35 1222.07 L1032.94 1222.07 L1033.52 1222.07 L1034.11 1222.07 L1034.7 1222.07 L1035.28 1222.07 L1035.87 1222.07 L1036.46 1222.07 L1037.04 1222.07 L1037.63 1222.07 L1038.22 1222.07 L1038.8 1222.07 L1039.39 1222.07 L1039.98 1222.07 L1040.56 1222.07 L1041.15 1222.07 L1041.73 1222.07 L1042.32 1222.07 L1042.91 1222.07 L1043.49 1222.07 L1044.08 1222.07 L1044.67 1222.07 L1045.25 1222.07 L1045.84 1222.07 L1046.43 1222.07 L1047.01 1222.07 L1047.6 1222.07 L1048.19 1222.07 L1048.77 1222.07 L1049.36 1222.07 L1049.94 1222.07 L1050.53 1222.07 L1051.12 1222.07 L1051.7 1222.07 L1052.29 1222.07 L1052.88 1222.07 L1053.46 1222.07 L1054.05 1222.07 L1054.64 1222.07 L1055.22 1222.07 L1055.81 1222.07 L1056.39 1222.07 L1056.98 1222.07 L1057.57 1222.07 L1058.15 1222.07 L1058.74 1222.07 L1059.33 1222.07 L1059.91 1222.07 L1060.5 1222.07 L1061.09 1222.07 L1061.67 1222.07 L1062.26 1222.07 L1062.85 1222.07 L1063.43 1222.07 L1064.02 1222.07 L1064.6 1222.07 L1065.19 1222.07 L1065.78 1222.07 L1066.36 1222.07 L1066.95 1222.07 L1067.54 1222.07 L1068.12 1222.07 L1068.71 1222.07 L1069.3 1222.07 L1069.88 1222.07 L1070.47 1222.07 L1071.06 1222.07 L1071.64 1222.07 L1072.23 1222.07 L1072.81 1222.07 L1073.4 1222.07 L1073.99 1222.07 L1074.57 1222.07 L1075.16 1222.07 L1075.75 1222.07 L1076.33 1222.07 L1076.92 1222.07 L1077.51 1222.07 L1078.09 1222.07 L1078.68 1222.07 L1079.26 1222.07 L1079.85 1222.07 L1080.44 1222.07 L1081.02 1222.07 L1081.61 1222.07 L1082.2 1222.07 L1082.78 1222.07 L1083.37 1222.07 L1083.96 1222.07 L1084.54 1222.07 L1085.13 1222.07 L1085.72 1222.07 L1086.3 1222.07 L1086.89 1222.07 L1087.47 1222.07 L1088.06 1222.07 L1088.65 1222.07 L1089.23 1222.07 L1089.82 1222.07 L1090.41 1222.07 L1090.99 1222.07 L1091.58 1222.07 L1092.17 1222.07 L1092.75 1222.07 L1093.34 1222.07 L1093.93 1222.07 L1094.51 1222.07 L1095.1 1222.07 L1095.68 1222.07 L1096.27 1222.07 L1096.86 1222.07 L1097.44 1222.07 L1098.03 1222.07 L1098.62 1222.07 L1099.2 1222.07 L1099.79 1222.07 L1100.38 1222.07 L1100.96 1222.07 L1101.55 1222.07 L1102.14 1222.07 L1102.72 1222.07 L1103.31 1222.07 L1103.89 1222.07 L1104.48 1222.07 L1105.07 1222.07 L1105.65 1222.07 L1106.24 1222.07 L1106.83 1222.07 L1107.41 1222.07 L1108 1222.07 L1108.59 1222.07 L1109.17 1222.07 L1109.76 1222.07 L1110.34 1222.07 L1110.93 1222.07 L1111.52 1222.07 L1112.1 1222.07 L1112.69 1222.07 L1113.28 1222.07 L1113.86 1222.07 L1114.45 1222.07 L1115.04 1222.07 L1115.62 1222.07 L1116.21 1222.07 L1116.8 1222.07 L1117.38 1222.07 L1117.97 1222.07 L1118.55 1222.07 L1119.14 1222.07 L1119.73 1222.07 L1120.31 1222.07 L1120.9 1222.07 L1121.49 1222.07 L1122.07 1222.07 L1122.66 1222.07 L1123.25 1222.07 L1123.83 1222.07 L1124.42 1222.07 L1125.01 1222.07 L1125.59 1222.07 L1126.18 1222.07 L1126.76 1222.07 L1127.35 1222.07 L1127.94 1222.07 L1128.52 1222.07 L1129.11 1222.07 L1129.7 1222.07 L1130.28 1222.07 L1130.87 1222.07 L1131.46 1222.07 L1132.04 1222.07 L1132.63 1222.07 L1133.21 1222.07 L1133.8 1222.07 L1134.39 1222.07 L1134.97 1222.07 L1135.56 1222.07 L1136.15 1222.07 L1136.73 1222.07 L1137.32 1222.07 L1137.91 1222.07 L1138.49 1222.07 L1139.08 1222.07 L1139.67 1222.07 L1140.25 1222.07 L1140.84 1222.07 L1141.42 1222.07 L1142.01 1222.07 L1142.6 1222.07 L1143.18 1222.07 L1143.77 1222.07 L1144.36 1222.07 L1144.94 1222.07 L1145.53 1222.07 L1146.12 1222.07 L1146.7 1222.07 L1147.29 1222.07 L1147.88 1222.07 L1148.46 1222.07 L1149.05 1222.07 L1149.63 1222.07 L1150.22 1222.07 L1150.81 1222.07 L1151.39 1222.07 L1151.98 1222.07 L1152.57 1222.07 L1153.15 1222.07 L1153.74 1222.07 L1154.33 1222.07 L1154.91 1222.07 L1155.5 1222.07 L1156.09 1222.07 L1156.67 1222.07 L1157.26 1222.07 L1157.84 1222.07 L1158.43 1222.07 L1159.02 1222.07 L1159.6 1222.07 L1160.19 1222.07 L1160.78 1222.07 L1161.36 1222.07 L1161.95 1222.07 L1162.54 1222.07 L1163.12 1222.07 L1163.71 1222.07 L1164.29 1222.07 L1164.88 1222.07 L1165.47 1222.07 L1166.05 1222.07 L1166.64 1222.07 L1167.23 1222.07 L1167.81 1222.07 L1168.4 1222.07 L1168.99 1222.07 L1169.57 1222.07 L1170.16 1222.07 L1170.75 1222.07 L1171.33 1222.07 L1171.92 1222.07 L1172.5 1222.07 L1173.09 1222.07 L1173.68 1222.07 L1174.26 1222.07 L1174.85 1222.07 L1175.44 1222.07 L1176.02 1222.07 L1176.61 1222.07 L1177.2 1222.07 L1177.78 1222.07 L1178.37 1222.07 L1178.96 1222.07 L1179.54 1222.07 L1180.13 1222.07 L1180.71 1222.07 L1181.3 1222.07 L1181.89 1222.07 L1182.47 1222.07 L1183.06 1222.07 L1183.65 1222.07 L1184.23 1222.07 L1184.82 1222.07 L1185.41 1222.07 L1185.99 1222.07 L1186.58 1222.07 L1187.16 1222.07 L1187.75 1222.07 L1188.34 1222.07 L1188.92 1222.07 L1189.51 1222.07 L1190.1 1222.07 L1190.68 1222.07 L1191.27 1222.07 L1191.86 1222.07 L1192.44 1222.07 L1193.03 1222.07 L1193.62 1222.07 L1194.2 1222.07 L1194.79 1222.07 L1195.37 1222.07 L1195.96 1222.07 L1196.55 1222.07 L1197.13 1222.07 L1197.72 1222.07 L1198.31 1222.07 L1198.89 1222.07 L1199.48 1222.07 L1200.07 1222.07 L1200.65 1222.07 L1201.24 1222.07 L1201.83 1222.07 L1202.41 1222.07 L1203 1222.07 L1203.58 1222.07 L1204.17 1222.07 L1204.76 1222.07 L1205.34 1222.07 L1205.93 1222.07 L1206.52 1222.07 L1207.1 1222.07 L1207.69 1222.07 L1208.28 1222.07 L1208.86 1222.07 L1209.45 1222.07 L1210.03 1222.07 L1210.62 1222.07 L1211.21 1222.07 L1211.79 1222.07 L1212.38 1222.07 L1212.97 1222.07 L1213.55 1222.07 L1214.14 1222.07 L1214.73 1222.07 L1215.31 1222.07 L1215.9 1222.07 L1216.49 1222.07 L1217.07 1222.07 L1217.66 1222.07 L1218.24 1222.07 L1218.83 1222.07 L1219.42 1222.07 L1220 1222.07 L1220.59 1222.07 L1221.18 1222.07 L1221.76 1222.07 L1222.35 1222.07 L1222.94 1222.07 L1223.52 1222.07 L1224.11 1222.07 L1224.7 1222.07 L1225.28 1222.07 L1225.87 1222.07 L1226.45 1222.07 L1227.04 1222.07 L1227.63 1222.07 L1228.21 1222.07 L1228.8 1222.07 L1229.39 1222.07 L1229.97 1222.07 L1230.56 1222.07 L1231.15 1222.07 L1231.73 1222.07 L1232.32 1222.07 L1232.91 1222.07 L1233.49 1222.07 L1234.08 1222.07 L1234.66 1222.07 L1235.25 1222.07 L1235.84 1222.07 L1236.42 1222.07 L1237.01 1222.07 L1237.6 1222.07 L1238.18 1222.07 L1238.77 1222.07 L1239.36 1222.07 L1239.94 1222.07 L1240.53 1222.07 L1241.11 1222.07 L1241.7 1222.07 L1242.29 1222.07 L1242.87 1222.07 L1243.46 1222.07 L1244.05 1222.07 L1244.63 1222.07 L1245.22 1222.07 L1245.81 1222.07 L1246.39 1222.07 L1246.98 1222.07 L1247.57 1222.07 L1248.15 1222.07 L1248.74 1222.07 L1249.32 1222.07 L1249.91 1222.07 L1250.5 1222.07 L1251.08 1222.07 L1251.67 1222.07 L1252.26 1222.07 L1252.84 1222.07 L1253.43 1222.07 L1254.02 1222.07 L1254.6 1222.07 L1255.19 1222.07 L1255.78 1222.07 L1256.36 1222.07 L1256.95 1222.07 L1257.53 1222.07 L1258.12 1222.07 L1258.71 1222.07 L1259.29 1222.07 L1259.88 1222.07 L1260.47 1222.07 L1261.05 1222.07 L1261.64 1222.07 L1262.23 1222.07 L1262.81 1222.07 L1263.4 1222.07 L1263.98 1222.07 L1264.57 1222.07 L1265.16 1222.07 L1265.74 1222.07 L1266.33 1222.07 L1266.92 1222.07 L1267.5 1222.07 L1268.09 1222.07 L1268.68 1222.07 L1269.26 1222.07 L1269.85 1222.07 L1270.44 1222.07 L1271.02 1222.07 L1271.61 1222.07 L1272.19 1222.07 L1272.78 1222.07 L1273.37 1222.07 L1273.95 1222.07 L1274.54 1222.07 L1275.13 1222.07 L1275.71 1222.07 L1276.3 1222.07 L1276.89 1222.07 L1277.47 1222.07 L1278.06 1222.07 L1278.65 1222.07 L1279.23 1222.07 L1279.82 1222.07 L1280.4 1222.07 L1280.99 1222.07 L1281.58 1222.07 L1282.16 1222.07 L1282.75 1222.07 L1283.34 1222.07 L1283.92 1222.07 L1284.51 1222.07 L1285.1 1222.07 L1285.68 1222.07 L1286.27 1222.07 L1286.86 1222.07 L1287.44 1222.07 L1288.03 1222.07 L1288.61 1222.07 L1289.2 1222.07 L1289.79 1222.07 L1290.37 1222.07 L1290.96 1222.07 L1291.55 1222.07 L1292.13 1222.07 L1292.72 1222.07 L1293.31 1222.07 L1293.89 1222.07 L1294.48 1222.07 L1295.06 1222.07 L1295.65 1222.07 L1296.24 1222.07 L1296.82 1222.07 L1297.41 1222.07 L1298 1222.07 L1298.58 1222.07 L1299.17 1222.07 L1299.76 1222.07 L1300.34 1222.07 L1300.93 1222.07 L1301.52 1222.07 L1302.1 1222.07 L1302.69 1222.07 L1303.27 1222.07 L1303.86 1222.07 L1304.45 1222.07 L1305.03 1222.07 L1305.62 1222.07 L1306.21 1222.07 L1306.79 1222.07 L1307.38 1222.07 L1307.97 1222.07 L1308.55 1222.07 L1309.14 1222.07 L1309.73 1222.07 L1310.31 1222.07 L1310.9 1222.07 L1311.48 1222.07 L1312.07 1222.07 L1312.66 1222.07 L1313.24 1222.07 L1313.83 1222.07 L1314.42 1222.07 L1315 1222.07 L1315.59 1222.07 L1316.18 1222.07 L1316.76 1222.07 L1317.35 1222.07 L1317.93 1222.07 L1318.52 1222.07 L1319.11 1222.07 L1319.69 1222.07 L1320.28 1222.07 L1320.87 1222.07 L1321.45 1222.07 L1322.04 1222.07 L1322.63 1222.07 L1323.21 1222.07 L1323.8 1222.07 L1324.39 1222.07 L1324.97 1222.07 L1325.56 1222.07 L1326.14 1222.07 L1326.73 1222.07 L1327.32 1222.07 L1327.9 1222.07 L1328.49 1222.07 L1329.08 1222.07 L1329.66 1222.07 L1330.25 1222.07 L1330.84 1222.07 L1331.42 1222.07 L1332.01 1222.07 L1332.6 1222.07 L1333.18 1222.07 L1333.77 1222.07 L1334.35 1222.07 L1334.94 1222.07 L1335.53 1222.07 L1336.11 1222.07 L1336.7 1222.07 L1337.29 1222.07 L1337.87 1222.07 L1338.46 1222.07 L1339.05 1222.07 L1339.63 1222.07 L1340.22 1222.07 L1340.8 1222.07 L1341.39 1222.07 L1341.98 1222.07 L1342.56 1222.07 L1343.15 1222.07 L1343.74 1222.07 L1344.32 1222.07 L1344.91 1222.07 L1345.5 1222.07 L1346.08 1222.07 L1346.67 1222.07 L1347.26 1222.07 L1347.84 1222.07 L1348.43 1222.07 L1349.01 1222.07 L1349.6 1222.07 L1350.19 1222.07 L1350.77 1222.07 L1351.36 1222.07 L1351.95 1222.07 L1352.53 1222.07 L1353.12 1222.07 L1353.71 1222.07 L1354.29 1222.07 L1354.88 1222.07 L1355.47 1222.07 L1356.05 1222.07 L1356.64 1222.07 L1357.22 1222.07 L1357.81 1222.07 L1358.4 1222.07 L1358.98 1222.07 L1359.57 1222.07 L1360.16 1222.07 L1360.74 1222.07 L1361.33 1222.07 L1361.92 1222.07 L1362.5 1222.07 L1363.09 1222.07 L1363.68 1222.07 L1364.26 1222.07 L1364.85 1222.07 L1365.43 1222.07 L1366.02 1222.07 L1366.61 1222.07 L1367.19 1222.07 L1367.78 1222.07 L1368.37 1222.07 L1368.95 1222.07 L1369.54 1222.07 L1370.13 1222.07 L1370.71 1222.07 L1371.3 1222.07 L1371.88 1222.07 L1372.47 1222.07 L1373.06 1222.07 L1373.64 1222.07 L1374.23 1222.07 L1374.82 1222.07 L1375.4 1222.07 L1375.99 1222.07 L1376.58 1222.07 L1377.16 1222.07 L1377.75 1222.07 L1378.34 1222.07 L1378.92 1222.07 L1379.51 1222.07 L1380.09 1222.07 L1380.68 1222.07 L1381.27 1222.07 L1381.85 1222.07 L1382.44 1222.07 L1383.03 1222.07 L1383.61 1222.07 L1384.2 1222.07 L1384.79 1222.07 L1385.37 1222.07 L1385.96 1222.07 L1386.55 1222.07 L1387.13 1222.07 L1387.72 1222.07 L1388.3 1222.07 L1388.89 1222.07 L1389.48 1222.07 L1390.06 1222.07 L1390.65 1222.07 L1391.24 1222.07 L1391.82 1222.07 L1392.41 1222.07 L1393 1222.07 L1393.58 1222.07 L1394.17 1222.07 L1394.75 1222.07 L1395.34 1222.07 L1395.93 1222.07 L1396.51 1222.07 L1397.1 1222.07 L1397.69 1222.07 L1398.27 1222.07 L1398.86 1222.07 L1399.45 1222.07 L1400.03 1222.07 L1400.62 1222.07 L1401.21 1222.07 L1401.79 1222.07 L1402.38 1222.07 L1402.96 1222.07 L1403.55 1222.07 L1404.14 1222.07 L1404.72 1222.07 L1405.31 1222.07 L1405.9 1222.07 L1406.48 1222.07 L1407.07 1222.07 L1407.66 1222.07 L1408.24 1222.07 L1408.83 1222.07 L1409.42 1222.07 L1410 1222.07 L1410.59 1222.07 L1411.17 1222.07 L1411.76 1222.07 L1412.35 1222.07 L1412.93 1222.07 L1413.52 1222.07 L1414.11 1222.07 L1414.69 1222.07 L1415.28 1222.07 L1415.87 1222.07 L1416.45 1222.07 L1417.04 1222.07 L1417.63 1222.07 L1418.21 1222.07 L1418.8 1222.07 L1419.38 1222.07 L1419.97 1222.07 L1420.56 1222.07 L1421.14 1222.07 L1421.73 1222.07 L1422.32 1222.07 L1422.9 1222.07 L1423.49 1222.07 L1424.08 1222.07 L1424.66 1222.07 L1425.25 1222.07 L1425.83 1222.07 L1426.42 1222.07 L1427.01 1222.07 L1427.59 1222.07 L1428.18 1222.07 L1428.77 1222.07 L1429.35 1222.07 L1429.94 1222.07 L1430.53 1222.07 L1431.11 1222.07 L1431.7 1222.07 L1432.29 1222.07 L1432.87 1222.07 L1433.46 1222.07 L1434.04 1222.07 L1434.63 1222.07 L1435.22 1222.07 L1435.8 1222.07 L1436.39 1222.07 L1436.98 1222.07 L1437.56 1222.07 L1438.15 1222.07 L1438.74 1222.07 L1439.32 1222.07 L1439.91 1222.07 L1440.5 1222.07 L1441.08 1222.07 L1441.67 1222.07 L1442.25 1222.07 L1442.84 1222.07 L1443.43 1222.07 L1444.01 1222.07 L1444.6 1222.07 L1445.19 1222.07 L1445.77 1222.07 L1446.36 1222.07 L1446.95 1222.07 L1447.53 1222.07 L1448.12 1222.07 L1448.7 1222.07 L1449.29 1222.07 L1449.88 1222.07 L1450.46 1222.07 L1451.05 1222.07 L1451.64 1222.07 L1452.22 1222.07 L1452.81 1222.07 L1453.4 1222.07 L1453.98 1222.07 L1454.57 1222.07 L1455.16 1222.07 L1455.74 1222.07 L1456.33 1222.07 L1456.91 1222.07 L1457.5 1222.07 L1458.09 1222.07 L1458.67 1222.07 L1459.26 1222.07 L1459.85 1222.07 L1460.43 1222.07 L1461.02 1222.07 L1461.61 1222.07 L1462.19 1222.07 L1462.78 1222.07 L1463.37 1222.07 L1463.95 1222.07 L1464.54 1222.07 L1465.12 1222.07 L1465.71 1222.07 L1466.3 1222.07 L1466.88 1222.07 L1467.47 1222.07 L1468.06 1222.07 L1468.64 1222.07 L1469.23 1222.07 L1469.82 1222.07 L1470.4 1222.07 L1470.99 1222.07 L1471.57 1222.07 L1472.16 1222.07 L1472.75 1222.07 L1473.33 1222.07 L1473.92 1222.07 L1474.51 1222.07 L1475.09 1222.07 L1475.68 1222.07 L1476.27 1222.07 L1476.85 1222.07 L1477.44 1222.07 L1478.03 1222.07 L1478.61 1222.07 L1479.2 1222.07 L1479.78 1222.07 L1480.37 1222.07 L1480.96 1222.07 L1481.54 1222.07 L1482.13 1222.07 L1482.72 1222.07 L1483.3 1222.07 L1483.89 1222.07 L1484.48 1222.07 L1485.06 1222.07 L1485.65 1222.07 L1486.24 1222.07 L1486.82 1222.07 L1487.41 1222.07 L1487.99 1222.07 L1488.58 1222.07 L1489.17 1222.07 L1489.75 1222.07 L1490.34 1222.07 L1490.93 1222.07 L1491.51 1222.07 L1492.1 1222.07 L1492.69 1222.07 L1493.27 1222.07 L1493.86 1222.07 L1494.45 1222.07 L1495.03 1222.07 L1495.62 1222.07 L1496.2 1222.07 L1496.79 1222.07 L1497.38 1222.07 L1497.96 1222.07 L1498.55 1222.07 L1499.14 1222.07 L1499.72 1222.07 L1500.31 1222.07 L1500.9 1222.07 L1501.48 1222.07 L1502.07 1222.07 L1502.65 1222.07 L1503.24 1222.07 L1503.83 1222.07 L1504.41 1222.07 L1505 1222.07 L1505.59 1222.07 L1506.17 1222.07 L1506.76 1222.07 L1507.35 1222.07 L1507.93 1222.07 L1508.52 1222.07 L1509.11 1222.07 L1509.69 1222.07 L1510.28 1222.07 L1510.86 1222.07 L1511.45 1222.07 L1512.04 1222.07 L1512.62 1222.07 L1513.21 1222.07 L1513.8 1222.07 L1514.38 1222.07 L1514.97 1222.07 L1515.56 1222.07 L1516.14 1222.07 L1516.73 1222.07 L1517.32 1222.07 L1517.9 1222.07 L1518.49 1222.07 L1519.07 1222.07 L1519.66 1222.07 L1520.25 1222.07 L1520.83 1222.07 L1521.42 1222.07 L1522.01 1222.07 L1522.59 1222.07 L1523.18 1222.07 L1523.77 1222.07 L1524.35 1222.07 L1524.94 1222.07 L1525.52 1222.07 L1526.11 1222.07 L1526.7 1222.07 L1527.28 1222.07 L1527.87 1222.07 L1528.46 1222.07 L1529.04 1222.07 L1529.63 1222.07 L1530.22 1222.07 L1530.8 1222.07 L1531.39 1222.07 L1531.98 1222.07 L1532.56 1222.07 L1533.15 1222.07 L1533.73 1222.07 L1534.32 1222.07 L1534.91 1222.07 L1535.49 1222.07 L1536.08 1222.07 L1536.67 1222.07 L1537.25 1222.07 L1537.84 1222.07 L1538.43 1222.07 L1539.01 1222.07 L1539.6 1222.07 L1540.19 1222.07 L1540.77 1222.07 L1541.36 1222.07 L1541.94 1222.07 L1542.53 1222.07 L1543.12 1222.07 L1543.7 1222.07 L1544.29 1222.07 L1544.88 1222.07 L1545.46 1222.07 L1546.05 1222.07 L1546.64 1222.07 L1547.22 1222.07 L1547.81 1222.07 L1548.4 1222.07 L1548.98 1222.07 L1549.57 1222.07 L1550.15 1222.07 L1550.74 1222.07 L1551.33 1222.07 L1551.91 1222.07 L1552.5 1222.07 L1553.09 1222.07 L1553.67 1222.07 L1554.26 1222.07 L1554.85 1222.07 L1555.43 1222.07 L1556.02 1222.07 L1556.6 1222.07 L1557.19 1222.07 L1557.78 1222.07 L1558.36 1222.07 L1558.95 1222.07 L1559.54 1222.07 L1560.12 1222.07 L1560.71 1222.07 L1561.3 1222.07 L1561.88 1222.07 L1562.47 1222.07 L1563.06 1222.07 L1563.64 1222.07 L1564.23 1222.07 L1564.81 1222.07 L1565.4 1222.07 L1565.99 1222.07 L1566.57 1222.07 L1567.16 1222.07 L1567.75 1222.07 L1568.33 1222.07 L1568.92 1222.07 L1569.51 1222.07 L1570.09 1222.07 L1570.68 1222.07 L1571.27 1222.07 L1571.85 1222.07 L1572.44 1222.07 L1573.02 1222.07 L1573.61 1222.07 L1574.2 1222.07 L1574.78 1222.07 L1575.37 1222.07 L1575.96 1222.07 L1576.54 1222.07 L1577.13 1222.07 L1577.72 1222.07 L1578.3 1222.07 L1578.89 1222.07 L1579.47 1222.07 L1580.06 1222.07 L1580.65 1222.07 L1581.23 1222.07 L1581.82 1222.07 L1582.41 1222.07 L1582.99 1222.07 L1583.58 1222.07 L1584.17 1222.07 L1584.75 1222.07 L1585.34 1222.07 L1585.93 1222.07 L1586.51 1222.07 L1587.1 1222.07 L1587.68 1222.07 L1588.27 1222.07 L1588.86 1222.07 L1589.44 1222.07 L1590.03 1222.07 L1590.62 1222.07 L1591.2 1222.07 L1591.79 1222.07 L1592.38 1222.07 L1592.96 1222.07 L1593.55 1222.07 L1594.14 1222.07 L1594.72 1222.07 L1595.31 1222.07 L1595.89 1222.07 L1596.48 1222.07 L1597.07 1222.07 L1597.65 1222.07 L1598.24 1222.07 L1598.83 1222.07 L1599.41 1222.07 L1600 1222.07 L1600.59 1222.07 L1601.17 1222.07 L1601.76 1222.07 L1602.34 1222.07 L1602.93 1222.07 L1603.52 1222.07 L1604.1 1222.07 L1604.69 1222.07 L1605.28 1222.07 L1605.86 1222.07 L1606.45 1222.07 L1607.04 1222.07 L1607.62 1222.07 L1608.21 1222.07 L1608.8 1222.07 L1609.38 1222.07 L1609.97 1222.07 L1610.55 1222.07 L1611.14 1222.07 L1611.73 1222.07 L1612.31 1222.07 L1612.9 1222.07 L1613.49 1222.07 L1614.07 1222.07 L1614.66 1222.07 L1615.25 1222.07 L1615.83 1222.07 L1616.42 1222.07 L1617.01 1222.07 L1617.59 1222.07 L1618.18 1222.07 L1618.76 1222.07 L1619.35 1222.07 L1619.94 1222.07 L1620.52 1222.07 L1621.11 1222.07 L1621.7 1222.07 L1622.28 1222.07 L1622.87 1222.07 L1623.46 1222.07 L1624.04 1222.07 L1624.63 1222.07 L1625.22 1222.07 L1625.8 1222.07 L1626.39 1222.07 L1626.97 1222.07 L1627.56 1222.07 L1628.15 1222.07 L1628.73 1222.07 L1629.32 1222.07 L1629.91 1222.07 L1630.49 1222.07 L1631.08 1222.07 L1631.67 1222.07 L1632.25 1222.07 L1632.84 1222.07 L1633.42 1222.07 L1634.01 1222.07 L1634.6 1222.07 L1635.18 1222.07 L1635.77 1222.07 L1636.36 1222.07 L1636.94 1222.07 L1637.53 1222.07 L1638.12 1222.07 L1638.7 1222.07 L1639.29 1222.07 L1639.88 1222.07 L1640.46 1222.07 L1641.05 1222.07 L1641.63 1222.07 L1642.22 1222.07 L1642.81 1222.07 L1643.39 1222.07 L1643.98 1222.07 L1644.57 1222.07 L1645.15 1222.07 L1645.74 1222.07 L1646.33 1222.07 L1646.91 1222.07 L1647.5 1222.07 L1648.09 1222.07 L1648.67 1222.07 L1649.26 1222.07 L1649.84 1222.07 L1650.43 1222.07 L1651.02 1222.07 L1651.6 1222.07 L1652.19 1222.07 L1652.78 1222.07 L1653.36 1222.07 L1653.95 1222.07 L1654.54 1222.07 L1655.12 1222.07 L1655.71 1222.07 L1656.29 1222.07 L1656.88 1222.07 L1657.47 1222.07 L1658.05 1222.07 L1658.64 1222.07 L1659.23 1222.07 L1659.81 1222.07 L1660.4 1222.07 L1660.99 1222.07 L1661.57 1222.07 L1662.16 1222.07 L1662.75 1222.07 L1663.33 1222.07 L1663.92 1222.07 L1664.5 1222.07 L1665.09 1222.07 L1665.68 1222.07 L1666.26 1222.07 L1666.85 1222.07 L1667.44 1222.07 L1668.02 1222.07 L1668.61 1222.07 L1669.2 1222.07 L1669.78 1222.07 L1670.37 1222.07 L1670.96 1222.07 L1671.54 1222.07 L1672.13 1222.07 L1672.71 1222.07 L1673.3 1222.07 L1673.89 1222.07 L1674.47 1222.07 L1675.06 1222.07 L1675.65 1222.07 L1676.23 1222.07 L1676.82 1222.07 L1677.41 1222.07 L1677.99 1222.07 L1678.58 1222.07 L1679.17 1222.07 L1679.75 1222.07 L1680.34 1222.07 L1680.92 1222.07 L1681.51 1222.07 L1682.1 1222.07 L1682.68 1222.07 L1683.27 1222.07 L1683.86 1222.07 L1684.44 1222.07 L1685.03 1222.07 L1685.62 1222.07 L1686.2 1222.07 L1686.79 1222.07 L1687.37 1222.07 L1687.96 1222.07 L1688.55 1222.07 L1689.13 1222.07 L1689.72 1222.07 L1690.31 1222.07 L1690.89 1222.07 L1691.48 1222.07 L1692.07 1222.07 L1692.65 1222.07 L1693.24 1222.07 L1693.83 1222.07 L1694.41 1222.07 L1695 1222.07 L1695.58 1222.07 L1696.17 1222.07 L1696.76 1222.07 L1697.34 1222.07 L1697.93 1222.07 L1698.52 1222.07 L1699.1 1222.07 L1699.69 1222.07 L1700.28 1222.07 L1700.86 1222.07 L1701.45 1222.07 L1702.04 1222.07 L1702.62 1222.07 L1703.21 1222.07 L1703.79 1222.07 L1704.38 1222.07 L1704.97 1222.07 L1705.55 1222.07 L1706.14 1222.07 L1706.73 1222.07 L1707.31 1222.07 L1707.9 1222.07 L1708.49 1222.07 L1709.07 1222.07 L1709.66 1222.07 L1710.24 1222.07 L1710.83 1222.07 L1711.42 1222.07 L1712 1222.07 L1712.59 1222.07 L1713.18 1222.07 L1713.76 1222.07 L1714.35 1222.07 L1714.94 1222.07 L1715.52 1222.07 L1716.11 1222.07 L1716.7 1222.07 L1717.28 1222.07 L1717.87 1222.07 L1718.45 1222.07 L1719.04 1222.07 L1719.63 1222.07 L1720.21 1222.07 L1720.8 1222.07 L1721.39 1222.07 L1721.97 1222.07 L1722.56 1222.07 L1723.15 1222.07 L1723.73 1222.07 L1724.32 1222.07 L1724.91 1222.07 L1725.49 1222.07 L1726.08 1222.07 L1726.66 1222.07 L1727.25 1222.07 L1727.84 1222.07 L1728.42 1222.07 L1729.01 1222.07 L1729.6 1222.07 L1730.18 1222.07 L1730.77 1222.07 L1731.36 1222.07 L1731.94 1222.07 L1732.53 1222.07 L1733.11 1222.07 L1733.7 1222.07 L1734.29 1222.07 L1734.87 1222.07 L1735.46 1222.07 L1736.05 1222.07 L1736.63 1222.07 L1737.22 1222.07 L1737.81 1222.07 L1738.39 1222.07 L1738.98 1222.07 L1739.57 1222.07 L1740.15 1222.07 L1740.74 1222.07 L1741.32 1222.07 L1741.91 1222.07 L1742.5 1222.07 L1743.08 1222.07 L1743.67 1222.07 L1744.26 1222.07 L1744.84 1222.07 L1745.43 1222.07 L1746.02 1222.07 L1746.6 1222.07 L1747.19 1222.07 L1747.78 1222.07 L1748.36 1222.07 L1748.95 1222.07 L1749.53 1222.07 L1750.12 1222.07 L1750.71 1222.07 L1751.29 1222.07 L1751.88 1222.07 L1752.47 1222.07 L1753.05 1222.07 L1753.64 1222.07 L1754.23 1222.07 L1754.81 1222.07 L1755.4 1222.07 L1755.99 1222.07 L1756.57 1222.07 L1757.16 1222.07 L1757.74 1222.07 L1758.33 1222.07 L1758.92 1222.07 L1759.5 1222.07 L1760.09 1222.07 L1760.68 1222.07 L1761.26 1222.07 L1761.85 1222.07 L1762.44 1222.07 L1763.02 1222.07 L1763.61 1222.07 L1764.19 1222.07 L1764.78 1222.07 L1765.37 1222.07 L1765.95 1222.07 L1766.54 1222.07 L1767.13 1222.07 L1767.71 1222.07 L1768.3 1222.07 L1768.89 1222.07 L1769.47 1222.07 L1770.06 1222.07 L1770.65 1222.07 L1771.23 1222.07 L1771.82 1222.07 L1772.4 1222.07 L1772.99 1222.07 L1773.58 1222.07 L1774.16 1222.07 L1774.75 1222.07 L1775.34 1222.07 L1775.92 1222.07 L1776.51 1222.07 L1777.1 1222.07 L1777.68 1222.07 L1778.27 1222.07 L1778.86 1222.07 L1779.44 1222.07 L1780.03 1222.07 L1780.61 1222.07 L1781.2 1222.07 L1781.79 1222.07 L1782.37 1222.07 L1782.96 1222.07 L1783.55 1222.07 L1784.13 1222.07 L1784.72 1222.07 L1785.31 1222.07 L1785.89 1222.07 L1786.48 1222.07 L1787.06 1222.07 L1787.65 1222.07 L1788.24 1222.07 L1788.82 1222.07 L1789.41 1222.07 L1790 1222.07 L1790.58 1222.07 L1791.17 1222.07 L1791.76 1222.07 L1792.34 1222.07 L1792.93 1222.07 L1793.52 1222.07 L1794.1 1222.07 L1794.69 1222.07 L1795.27 1222.07 L1795.86 1222.07 L1796.45 1222.07 L1797.03 1222.07 L1797.62 1222.07 L1798.21 1222.07 L1798.79 1222.07 L1799.38 1222.07 L1799.97 1222.07 L1800.55 1222.07 L1801.14 1222.07 L1801.73 1222.07 L1802.31 1222.07 L1802.9 1222.07 L1803.48 1222.07 L1804.07 1222.07 L1804.66 1222.07 L1805.24 1222.07 L1805.83 1222.07 L1806.42 1222.07 L1807 1222.07 L1807.59 1222.07 L1808.18 1222.07 L1808.76 1222.07 L1809.35 1222.07 L1809.94 1222.07 L1810.52 1222.07 L1811.11 1222.07 L1811.69 1222.07 L1812.28 1222.07 L1812.87 1222.07 L1813.45 1222.07 L1814.04 1222.07 L1814.63 1222.07 L1815.21 1222.07 L1815.8 1222.07 L1816.39 1222.07 L1816.97 1222.07 L1817.56 1222.07 L1818.14 1222.07 L1818.73 1222.07 L1819.32 1222.07 L1819.9 1222.07 L1820.49 1222.07 L1821.08 1222.07 L1821.66 1222.07 L1822.25 1222.07 L1822.84 1222.07 L1823.42 1222.07 L1824.01 1222.07 L1824.6 1222.07 L1825.18 1222.07 L1825.77 1222.07 L1826.35 1222.07 L1826.94 1222.07 L1827.53 1222.07 L1828.11 1222.07 L1828.7 1222.07 L1829.29 1222.07 L1829.87 1222.07 L1830.46 1222.07 L1831.05 1222.07 L1831.63 1222.07 L1832.22 1222.07 L1832.81 1222.07 L1833.39 1222.07 L1833.98 1222.07 L1834.56 1222.07 L1835.15 1222.07 L1835.74 1222.07 L1836.32 1222.07 L1836.91 1222.07 L1837.5 1222.07 L1838.08 1222.07 L1838.67 1222.07 L1839.26 1222.07 L1839.84 1222.07 L1840.43 1222.07 L1841.01 1222.07 L1841.6 1222.07 L1842.19 1222.07 L1842.77 1222.07 L1843.36 1222.07 L1843.95 1222.07 L1844.53 1222.07 L1845.12 1222.07 L1845.71 1222.07 L1846.29 1222.07 L1846.88 1222.07 L1847.47 1222.07 L1848.05 1222.07 L1848.64 1222.07 L1849.22 1222.07 L1849.81 1222.07 L1850.4 1222.07 L1850.98 1222.07 L1851.57 1222.07 L1852.16 1222.07 L1852.74 1222.07 L1853.33 1222.07 L1853.92 1222.07 L1854.5 1222.07 L1855.09 1222.07 L1855.68 1222.07 L1856.26 1222.07 L1856.85 1222.07 L1857.43 1222.07 L1858.02 1222.07 L1858.61 1222.07 L1859.19 1222.07 L1859.78 1222.07 L1860.37 1222.07 L1860.95 1222.07 L1861.54 1222.07 L1862.13 1222.07 L1862.71 1222.07 L1863.3 1222.07 L1863.88 1222.07 L1864.47 1222.07 L1865.06 1222.07 L1865.64 1222.07 L1866.23 1222.07 L1866.82 1222.07 L1867.4 1222.07 L1867.99 1222.07 L1868.58 1222.07 L1869.16 1222.07 L1869.75 1222.07 L1870.34 1222.07 L1870.92 1222.07 L1871.51 1222.07 L1872.09 1222.07 L1872.68 1222.07 L1873.27 1222.07 L1873.85 1222.07 L1874.44 1222.07 L1875.03 1222.07 L1875.61 1222.07 L1876.2 1222.07 L1876.79 1222.07 L1877.37 1222.07 L1877.96 1222.07 L1878.55 1222.07 L1879.13 1222.07 L1879.72 1222.07 L1880.3 1222.07 L1880.89 1222.07 L1881.48 1222.07 L1882.06 1222.07 L1882.65 1222.07 L1883.24 1222.07 L1883.82 1222.07 L1884.41 1222.07 L1885 1222.07 L1885.58 1222.07 L1886.17 1222.07 L1886.76 1222.07 L1887.34 1222.07 L1887.93 1222.07 L1888.51 1222.07 L1889.1 1222.07 L1889.69 1222.07 L1890.27 1222.07 L1890.86 1222.07 L1891.45 1222.07 L1892.03 1222.07 L1892.62 1222.07 L1893.21 1222.07 L1893.79 1222.07 L1894.38 1222.07 L1894.96 1222.07 L1895.55 1222.07 L1896.14 1222.07 L1896.72 1222.07 L1897.31 1222.07 L1897.9 1222.07 L1898.48 1222.07 L1899.07 1222.07 L1899.66 1222.07 L1900.24 1222.07 L1900.83 1222.07 L1901.42 1222.07 L1902 1222.07 L1902.59 1222.07 L1903.17 1222.07 L1903.76 1222.07 L1904.35 1222.07 L1904.93 1222.07 L1905.52 1222.07 L1906.11 1222.07 L1906.69 1222.07 L1907.28 1222.07 L1907.87 1222.07 L1908.45 1222.07 L1909.04 1222.07 L1909.63 1222.07 L1910.21 1222.07 L1910.8 1222.07 L1911.38 1222.07 L1911.97 1222.07 L1912.56 1222.07 L1913.14 1222.07 L1913.73 1222.07 L1914.32 1222.07 L1914.9 1222.07 L1915.49 1222.07 L1916.08 1222.07 L1916.66 1222.07 L1917.25 1222.07 L1917.83 1222.07 L1918.42 1222.07 L1919.01 1222.07 L1919.59 1222.07 L1920.18 1222.07 L1920.77 1222.07 L1921.35 1222.07 L1921.94 1222.07 L1922.53 1222.07 L1923.11 1222.07 L1923.7 1222.07 L1924.29 1222.07 L1924.87 1222.07 L1925.46 1222.07 L1926.04 1222.07 L1926.63 1222.07 L1927.22 1222.07 L1927.8 1222.07 L1928.39 1222.07 L1928.98 1222.07 L1929.56 1222.07 L1930.15 1222.07 L1930.74 1222.07 L1931.32 1222.07 L1931.91 1222.07 L1932.5 1222.07 L1933.08 1222.07 L1933.67 1222.07 L1934.25 1222.07 L1934.84 1222.07 L1935.43 1222.07 L1936.01 1222.07 L1936.6 1222.07 L1937.19 1222.07 L1937.77 1222.07 L1938.36 1222.07 L1938.95 1222.07 L1939.53 1222.07 L1940.12 1222.07 L1940.71 1222.07 L1941.29 1222.07 L1941.88 1222.07 L1942.46 1222.07 L1943.05 1222.07 L1943.64 1222.07 L1944.22 1222.07 L1944.81 1222.07 L1945.4 1222.07 L1945.98 1222.07 L1946.57 1222.07 L1947.16 1222.07 L1947.74 1222.07 L1948.33 1222.07 L1948.91 1222.07 L1949.5 1222.07 L1950.09 1222.07 L1950.67 1222.07 L1951.26 1222.07 L1951.85 1222.07 L1952.43 1222.07 L1953.02 1222.07 L1953.61 1222.07 L1954.19 1222.07 L1954.78 1222.07 L1955.37 1222.07 L1955.95 1222.07 L1956.54 1222.07 L1957.12 1222.07 L1957.71 1222.07 L1958.3 1222.07 L1958.88 1222.07 L1959.47 1222.07 L1960.06 1222.07 L1960.64 1222.07 L1961.23 1222.07 L1961.82 1222.07 L1962.4 1222.07 L1962.99 1222.07 L1963.58 1222.07 L1964.16 1222.07 L1964.75 1222.07 L1965.33 1222.07 L1965.92 1222.07 L1966.51 1222.07 L1967.09 1222.07 L1967.68 1222.07 L1968.27 1222.07 L1968.85 1222.07 L1969.44 1222.07 L1970.03 1222.07 L1970.61 1222.07 L1971.2 1222.07 L1971.78 1222.07 L1972.37 1222.07 L1972.96 1222.07 L1973.54 1222.07 L1974.13 1222.07 L1974.72 1222.07 L1975.3 1222.07 L1975.89 1222.07 L1976.48 1222.07 L1977.06 1222.07 L1977.65 1222.07 L1978.24 1222.07 L1978.82 1222.07 L1979.41 1222.07 L1979.99 1222.07 L1980.58 1222.07 L1981.17 1222.07 L1981.75 1222.07 L1982.34 1222.07 L1982.93 1222.07 L1983.51 1222.07 L1984.1 1222.07 L1984.69 1222.07 L1985.27 1222.07 L1985.86 1222.07 L1986.45 1222.07 L1987.03 1222.07 L1987.62 1222.07 L1988.2 1222.07 L1988.79 1222.07 L1989.38 1222.07 L1989.96 1222.07 L1990.55 1222.07 L1991.14 1222.07 L1991.72 1222.07 L1992.31 1222.07 L1992.9 1222.07 L1993.48 1222.07 L1994.07 1222.07 L1994.65 1222.07 L1995.24 1222.07 L1995.83 1222.07 L1996.41 1222.07 L1997 1222.07 L1997.59 1222.07 L1998.17 1222.07 L1998.76 1222.07 L1999.35 1222.07 L1999.93 1222.07 L2000.52 1222.07 L2001.11 1222.07 L2001.69 1222.07 L2002.28 1222.07 L2002.86 1222.07 L2003.45 1222.07 L2004.04 1222.07 L2004.62 1222.07 L2005.21 1222.07 L2005.8 1222.07 L2006.38 1222.07 L2006.97 1222.07 L2007.56 1222.07 L2008.14 1222.07 L2008.73 1222.07 L2009.32 1222.07 L2009.9 1222.07 L2010.49 1222.07 L2011.07 1222.07 L2011.66 1222.07 L2012.25 1222.07 L2012.83 1222.07 L2013.42 1222.07 L2014.01 1222.07 L2014.59 1222.07 L2015.18 1222.07 L2015.77 1222.07 L2016.35 1222.07 L2016.94 1222.07 L2017.53 1222.07 L2018.11 1222.07 L2018.7 1222.07 L2019.28 1222.07 L2019.87 1222.07 L2020.46 1222.07 L2021.04 1222.07 L2021.63 1222.07 L2022.22 1222.07 L2022.8 1222.07 L2023.39 1222.07 L2023.98 1222.07 L2024.56 1222.07 L2025.15 1222.07 L2025.73 1222.07 L2026.32 1222.07 L2026.91 1222.07 L2027.49 1222.07 L2028.08 1222.07 L2028.67 1222.07 L2029.25 1222.07 L2029.84 1222.07 L2030.43 1222.07 L2031.01 1222.07 L2031.6 1222.07 L2032.19 1222.07 L2032.77 1222.07 L2033.36 1222.07 L2033.94 1222.07 L2034.53 1222.07 L2035.12 1222.07 L2035.7 1222.07 L2036.29 1222.07 L2036.88 1222.07 L2037.46 1222.07 L2038.05 1222.07 L2038.64 1222.07 L2039.22 1222.07 L2039.81 1222.07 L2040.4 1222.07 L2040.98 1222.07 L2041.57 1222.07 L2042.15 1222.07 L2042.74 1222.07 L2043.33 1222.07 L2043.91 1222.07 L2044.5 1222.07 L2045.09 1222.07 L2045.67 1222.07 L2046.26 1222.07 L2046.85 1222.07 L2047.43 1222.07 L2048.02 1222.07 L2048.6 1222.07 L2049.19 1222.07 L2049.78 1222.07 L2050.36 1222.07 L2050.95 1222.07 L2051.54 1222.07 L2052.12 1222.07 L2052.71 1222.07 L2053.3 1222.07 L2053.88 1222.07 L2054.47 1222.07 L2055.06 1222.07 L2055.64 1222.07 L2056.23 1222.07 L2056.81 1222.07 L2057.4 1222.07 L2057.99 1222.07 L2058.57 1222.07 L2059.16 1222.07 L2059.75 1222.07 L2060.33 1222.07 L2060.92 1222.07 L2061.51 1222.07 L2062.09 1222.07 L2062.68 1222.07 L2063.27 1222.07 L2063.85 1222.07 L2064.44 1222.07 L2065.02 1222.07 L2065.61 1222.07 L2066.2 1222.07 L2066.78 1222.07 L2067.37 1222.07 L2067.96 1222.07 L2068.54 1222.07 L2069.13 1222.07 L2069.72 1222.07 L2070.3 1222.07 L2070.89 1222.07 L2071.48 1222.07 L2072.06 1222.07 L2072.65 1222.07 L2073.23 1222.07 L2073.82 1222.07 L2074.41 1222.07 L2074.99 1222.07 L2075.58 1222.07 L2076.17 1222.07 L2076.75 1222.07 L2077.34 1222.07 L2077.93 1222.07 L2078.51 1222.07 L2079.1 1222.07 L2079.68 1222.07 L2080.27 1222.07 L2080.86 1222.07 L2081.44 1222.07 L2082.03 1222.07 L2082.62 1222.07 L2083.2 1222.07 L2083.79 1222.07 L2084.38 1222.07 L2084.96 1222.07 L2085.55 1222.07 L2086.14 1222.07 L2086.72 1222.07 L2087.31 1222.07 L2087.89 1222.07 L2088.48 1222.07 L2089.07 1222.07 L2089.65 1222.07 L2090.24 1222.07 L2090.83 1222.07 L2091.41 1222.07 L2092 1222.07 L2092.59 1222.07 L2093.17 1222.07 L2093.76 1222.07 L2094.35 1222.07 L2094.93 1222.07 L2095.52 1222.07 L2096.1 1222.07 L2096.69 1222.07 L2097.28 1222.07 L2097.86 1222.07 L2098.45 1222.07 L2099.04 1222.07 L2099.62 1222.07 L2100.21 1222.07 L2100.8 1222.07 L2101.38 1222.07 L2101.97 1222.07 L2102.55 1222.07 L2103.14 1222.07 L2103.73 1222.07 L2104.31 1222.07 L2104.9 1222.07 L2105.49 1222.07 L2106.07 1222.07 L2106.66 1222.07 L2107.25 1222.07 L2107.83 1222.07 L2108.42 1222.07 L2109.01 1222.07 L2109.59 1222.07 L2110.18 1222.07 L2110.76 1222.07 L2111.35 1222.07 L2111.94 1222.07 L2112.52 1222.07 L2113.11 1222.07 L2113.7 1222.07 L2114.28 1222.07 L2114.87 1222.07 L2115.46 1222.07 L2116.04 1222.07 L2116.63 1222.07 L2117.22 1222.07 L2117.8 1222.07 L2118.39 1222.07 L2118.97 1222.07 L2119.56 1222.07 L2120.15 1222.07 L2120.73 1222.07 L2121.32 1222.07 L2121.91 1222.07 L2122.49 1222.07 L2123.08 1222.07 L2123.67 1222.07 L2124.25 1222.07 L2124.84 1222.07 L2125.42 1222.07 L2126.01 1222.07 L2126.6 1222.07 L2127.18 1222.07 L2127.77 1222.07 L2128.36 1222.07 L2128.94 1222.07 L2129.53 1222.07 L2130.12 1222.07 L2130.7 1222.07 L2131.29 1222.07 L2131.88 1222.07 L2132.46 1222.07 L2133.05 1222.07 L2133.63 1222.07 L2134.22 1222.07 L2134.81 1222.07 L2135.39 1222.07 L2135.98 1222.07 L2136.57 1222.07 L2137.15 1222.07 L2137.74 1222.07 L2138.33 1222.07 L2138.91 1222.07 L2139.5 1222.07 L2140.09 1222.07 L2140.67 1222.07 L2141.26 1222.07 L2141.84 1222.07 L2142.43 1222.07 L2143.02 1222.07 L2143.6 1222.07 L2144.19 1222.07 L2144.78 1222.07 L2145.36 1222.07 L2145.95 1222.07 L2146.54 1222.07 L2147.12 1222.07 L2147.71 1222.07 L2148.3 1222.07 L2148.88 1222.07 L2149.47 1222.07 L2150.05 1222.07 L2150.64 1222.07 L2151.23 1222.07 L2151.81 1222.07 L2152.4 1222.07 L2152.99 1222.07 L2153.57 1222.07 L2154.16 1222.07 L2154.75 1222.07 L2155.33 1222.07 L2155.92 1222.07 L2156.5 1222.07 L2157.09 1222.07 L2157.68 1222.07 L2158.26 1222.07 L2158.26 1221.24 L2157.68 1221.24 L2157.09 1221.24 L2156.5 1221.24 L2155.92 1221.24 L2155.33 1221.24 L2154.75 1221.24 L2154.16 1221.24 L2153.57 1221.24 L2152.99 1221.24 L2152.4 1221.24 L2151.81 1221.24 L2151.23 1221.24 L2150.64 1221.24 L2150.05 1221.24 L2149.47 1221.24 L2148.88 1221.24 L2148.3 1221.24 L2147.71 1221.24 L2147.12 1221.24 L2146.54 1221.24 L2145.95 1221.24 L2145.36 1221.24 L2144.78 1221.24 L2144.19 1221.24 L2143.6 1221.24 L2143.02 1221.24 L2142.43 1221.24 L2141.84 1221.24 L2141.26 1221.24 L2140.67 1221.24 L2140.09 1221.24 L2139.5 1221.24 L2138.91 1221.24 L2138.33 1221.24 L2137.74 1221.24 L2137.15 1221.24 L2136.57 1221.24 L2135.98 1221.24 L2135.39 1221.24 L2134.81 1221.24 L2134.22 1221.24 L2133.63 1221.24 L2133.05 1221.24 L2132.46 1221.24 L2131.88 1221.24 L2131.29 1221.24 L2130.7 1221.24 L2130.12 1221.24 L2129.53 1221.24 L2128.94 1221.24 L2128.36 1221.24 L2127.77 1221.24 L2127.18 1221.24 L2126.6 1221.24 L2126.01 1221.24 L2125.42 1221.24 L2124.84 1221.24 L2124.25 1221.24 L2123.67 1221.24 L2123.08 1221.24 L2122.49 1221.24 L2121.91 1221.24 L2121.32 1221.24 L2120.73 1221.24 L2120.15 1221.24 L2119.56 1221.24 L2118.97 1221.24 L2118.39 1221.24 L2117.8 1221.24 L2117.22 1221.24 L2116.63 1221.24 L2116.04 1221.24 L2115.46 1221.24 L2114.87 1221.24 L2114.28 1221.24 L2113.7 1221.24 L2113.11 1221.24 L2112.52 1221.24 L2111.94 1221.24 L2111.35 1221.24 L2110.76 1221.24 L2110.18 1221.24 L2109.59 1221.24 L2109.01 1221.24 L2108.42 1221.24 L2107.83 1221.24 L2107.25 1221.24 L2106.66 1221.24 L2106.07 1221.24 L2105.49 1221.24 L2104.9 1221.24 L2104.31 1221.24 L2103.73 1221.24 L2103.14 1221.24 L2102.55 1221.24 L2101.97 1221.24 L2101.38 1221.24 L2100.8 1221.24 L2100.21 1221.24 L2099.62 1221.24 L2099.04 1221.24 L2098.45 1221.24 L2097.86 1221.24 L2097.28 1221.24 L2096.69 1221.24 L2096.1 1221.24 L2095.52 1221.24 L2094.93 1221.24 L2094.35 1221.24 L2093.76 1221.24 L2093.17 1221.24 L2092.59 1221.24 L2092 1221.24 L2091.41 1221.24 L2090.83 1221.24 L2090.24 1221.24 L2089.65 1221.24 L2089.07 1221.24 L2088.48 1221.24 L2087.89 1221.24 L2087.31 1221.24 L2086.72 1221.24 L2086.14 1221.24 L2085.55 1221.24 L2084.96 1221.24 L2084.38 1221.24 L2083.79 1221.24 L2083.2 1221.24 L2082.62 1221.24 L2082.03 1221.24 L2081.44 1221.24 L2080.86 1221.24 L2080.27 1221.24 L2079.68 1221.24 L2079.1 1221.24 L2078.51 1221.24 L2077.93 1221.24 L2077.34 1221.24 L2076.75 1221.24 L2076.17 1221.24 L2075.58 1221.24 L2074.99 1221.24 L2074.41 1221.24 L2073.82 1221.24 L2073.23 1221.24 L2072.65 1221.24 L2072.06 1221.24 L2071.48 1221.24 L2070.89 1221.24 L2070.3 1221.24 L2069.72 1221.24 L2069.13 1221.24 L2068.54 1221.24 L2067.96 1221.24 L2067.37 1221.24 L2066.78 1221.24 L2066.2 1221.24 L2065.61 1221.24 L2065.02 1221.24 L2064.44 1221.24 L2063.85 1221.24 L2063.27 1221.24 L2062.68 1221.24 L2062.09 1221.24 L2061.51 1221.24 L2060.92 1221.24 L2060.33 1221.24 L2059.75 1221.24 L2059.16 1221.24 L2058.57 1221.24 L2057.99 1221.24 L2057.4 1221.24 L2056.81 1221.24 L2056.23 1221.24 L2055.64 1221.24 L2055.06 1221.24 L2054.47 1221.24 L2053.88 1221.24 L2053.3 1221.24 L2052.71 1221.24 L2052.12 1221.24 L2051.54 1221.24 L2050.95 1221.24 L2050.36 1221.24 L2049.78 1221.24 L2049.19 1221.24 L2048.6 1221.24 L2048.02 1221.24 L2047.43 1221.24 L2046.85 1221.24 L2046.26 1221.24 L2045.67 1221.24 L2045.09 1221.24 L2044.5 1221.24 L2043.91 1221.24 L2043.33 1221.24 L2042.74 1221.24 L2042.15 1221.24 L2041.57 1221.24 L2040.98 1221.24 L2040.4 1221.24 L2039.81 1221.24 L2039.22 1221.24 L2038.64 1221.24 L2038.05 1221.24 L2037.46 1221.24 L2036.88 1221.24 L2036.29 1221.24 L2035.7 1221.24 L2035.12 1221.24 L2034.53 1221.24 L2033.94 1221.24 L2033.36 1221.24 L2032.77 1221.24 L2032.19 1221.24 L2031.6 1221.24 L2031.01 1221.24 L2030.43 1221.24 L2029.84 1221.24 L2029.25 1221.24 L2028.67 1221.24 L2028.08 1221.24 L2027.49 1221.24 L2026.91 1221.24 L2026.32 1221.24 L2025.73 1221.24 L2025.15 1221.24 L2024.56 1221.24 L2023.98 1221.24 L2023.39 1221.24 L2022.8 1221.24 L2022.22 1221.24 L2021.63 1221.24 L2021.04 1221.24 L2020.46 1221.24 L2019.87 1221.24 L2019.28 1221.24 L2018.7 1221.24 L2018.11 1221.24 L2017.53 1221.24 L2016.94 1221.24 L2016.35 1221.24 L2015.77 1221.24 L2015.18 1221.24 L2014.59 1221.24 L2014.01 1221.24 L2013.42 1221.24 L2012.83 1221.24 L2012.25 1221.24 L2011.66 1221.24 L2011.07 1221.24 L2010.49 1221.24 L2009.9 1221.24 L2009.32 1221.24 L2008.73 1221.24 L2008.14 1221.24 L2007.56 1221.24 L2006.97 1221.24 L2006.38 1221.24 L2005.8 1221.24 L2005.21 1221.24 L2004.62 1221.24 L2004.04 1221.24 L2003.45 1221.24 L2002.86 1221.24 L2002.28 1221.24 L2001.69 1221.24 L2001.11 1221.24 L2000.52 1221.24 L1999.93 1221.24 L1999.35 1221.24 L1998.76 1221.24 L1998.17 1221.24 L1997.59 1221.24 L1997 1221.24 L1996.41 1221.24 L1995.83 1221.24 L1995.24 1221.24 L1994.65 1221.24 L1994.07 1221.24 L1993.48 1221.24 L1992.9 1221.24 L1992.31 1221.24 L1991.72 1221.24 L1991.14 1221.24 L1990.55 1221.24 L1989.96 1221.24 L1989.38 1221.24 L1988.79 1221.24 L1988.2 1221.24 L1987.62 1221.24 L1987.03 1221.24 L1986.45 1221.24 L1985.86 1221.24 L1985.27 1221.24 L1984.69 1221.24 L1984.1 1221.24 L1983.51 1221.24 L1982.93 1221.24 L1982.34 1221.24 L1981.75 1221.24 L1981.17 1221.24 L1980.58 1221.24 L1979.99 1221.24 L1979.41 1221.24 L1978.82 1221.24 L1978.24 1221.24 L1977.65 1221.24 L1977.06 1221.24 L1976.48 1221.24 L1975.89 1221.24 L1975.3 1221.24 L1974.72 1221.24 L1974.13 1221.24 L1973.54 1221.24 L1972.96 1221.24 L1972.37 1221.24 L1971.78 1221.24 L1971.2 1221.24 L1970.61 1221.24 L1970.03 1221.24 L1969.44 1221.24 L1968.85 1221.24 L1968.27 1221.24 L1967.68 1221.24 L1967.09 1221.24 L1966.51 1221.24 L1965.92 1221.24 L1965.33 1221.24 L1964.75 1221.24 L1964.16 1221.24 L1963.58 1221.24 L1962.99 1221.24 L1962.4 1221.24 L1961.82 1221.24 L1961.23 1221.24 L1960.64 1221.24 L1960.06 1221.24 L1959.47 1221.24 L1958.88 1221.24 L1958.3 1221.24 L1957.71 1221.24 L1957.12 1221.24 L1956.54 1221.24 L1955.95 1221.24 L1955.37 1221.24 L1954.78 1221.24 L1954.19 1221.24 L1953.61 1221.24 L1953.02 1221.24 L1952.43 1221.24 L1951.85 1221.24 L1951.26 1221.24 L1950.67 1221.24 L1950.09 1221.24 L1949.5 1221.24 L1948.91 1221.24 L1948.33 1221.24 L1947.74 1221.24 L1947.16 1221.24 L1946.57 1221.24 L1945.98 1221.24 L1945.4 1221.24 L1944.81 1221.24 L1944.22 1221.24 L1943.64 1221.24 L1943.05 1221.24 L1942.46 1221.24 L1941.88 1221.24 L1941.29 1221.24 L1940.71 1221.24 L1940.12 1221.24 L1939.53 1221.24 L1938.95 1221.24 L1938.36 1221.24 L1937.77 1221.24 L1937.19 1221.24 L1936.6 1221.24 L1936.01 1221.24 L1935.43 1221.24 L1934.84 1221.24 L1934.25 1221.24 L1933.67 1221.24 L1933.08 1221.24 L1932.5 1221.24 L1931.91 1221.24 L1931.32 1221.24 L1930.74 1221.24 L1930.15 1221.24 L1929.56 1221.24 L1928.98 1221.24 L1928.39 1221.24 L1927.8 1221.24 L1927.22 1221.24 L1926.63 1221.24 L1926.04 1221.24 L1925.46 1221.24 L1924.87 1221.24 L1924.29 1221.24 L1923.7 1221.24 L1923.11 1221.24 L1922.53 1221.24 L1921.94 1221.24 L1921.35 1221.24 L1920.77 1221.24 L1920.18 1221.24 L1919.59 1221.24 L1919.01 1221.24 L1918.42 1221.24 L1917.83 1221.24 L1917.25 1221.24 L1916.66 1221.24 L1916.08 1221.24 L1915.49 1221.24 L1914.9 1221.24 L1914.32 1221.24 L1913.73 1221.24 L1913.14 1221.24 L1912.56 1221.24 L1911.97 1221.24 L1911.38 1221.24 L1910.8 1221.24 L1910.21 1221.24 L1909.63 1221.24 L1909.04 1221.24 L1908.45 1221.24 L1907.87 1221.24 L1907.28 1221.24 L1906.69 1221.24 L1906.11 1221.24 L1905.52 1221.24 L1904.93 1221.24 L1904.35 1221.24 L1903.76 1221.24 L1903.17 1221.24 L1902.59 1221.24 L1902 1221.24 L1901.42 1221.24 L1900.83 1221.24 L1900.24 1221.24 L1899.66 1221.24 L1899.07 1221.24 L1898.48 1221.24 L1897.9 1221.24 L1897.31 1221.24 L1896.72 1221.24 L1896.14 1221.24 L1895.55 1221.24 L1894.96 1221.24 L1894.38 1221.24 L1893.79 1221.24 L1893.21 1221.24 L1892.62 1221.24 L1892.03 1221.24 L1891.45 1221.24 L1890.86 1221.24 L1890.27 1221.24 L1889.69 1221.24 L1889.1 1221.24 L1888.51 1221.24 L1887.93 1221.24 L1887.34 1221.24 L1886.76 1221.24 L1886.17 1221.24 L1885.58 1221.24 L1885 1221.24 L1884.41 1221.24 L1883.82 1221.24 L1883.24 1221.24 L1882.65 1221.24 L1882.06 1221.24 L1881.48 1221.24 L1880.89 1221.24 L1880.3 1221.24 L1879.72 1221.24 L1879.13 1221.24 L1878.55 1221.24 L1877.96 1221.24 L1877.37 1221.24 L1876.79 1221.24 L1876.2 1221.24 L1875.61 1221.24 L1875.03 1221.24 L1874.44 1221.24 L1873.85 1221.24 L1873.27 1221.24 L1872.68 1221.24 L1872.09 1221.24 L1871.51 1221.24 L1870.92 1221.24 L1870.34 1221.24 L1869.75 1221.24 L1869.16 1221.24 L1868.58 1221.24 L1867.99 1221.24 L1867.4 1221.24 L1866.82 1221.24 L1866.23 1221.24 L1865.64 1221.24 L1865.06 1221.24 L1864.47 1221.24 L1863.88 1221.24 L1863.3 1221.24 L1862.71 1221.24 L1862.13 1221.24 L1861.54 1221.24 L1860.95 1221.24 L1860.37 1221.24 L1859.78 1221.24 L1859.19 1221.24 L1858.61 1221.24 L1858.02 1221.24 L1857.43 1221.24 L1856.85 1221.24 L1856.26 1221.24 L1855.68 1221.24 L1855.09 1221.24 L1854.5 1221.24 L1853.92 1221.24 L1853.33 1221.24 L1852.74 1221.24 L1852.16 1221.24 L1851.57 1221.24 L1850.98 1221.24 L1850.4 1221.24 L1849.81 1221.24 L1849.22 1221.24 L1848.64 1221.24 L1848.05 1221.24 L1847.47 1221.24 L1846.88 1221.24 L1846.29 1221.24 L1845.71 1221.24 L1845.12 1221.24 L1844.53 1221.24 L1843.95 1221.24 L1843.36 1221.24 L1842.77 1221.24 L1842.19 1221.24 L1841.6 1221.24 L1841.01 1221.24 L1840.43 1221.24 L1839.84 1221.24 L1839.26 1221.24 L1838.67 1221.24 L1838.08 1221.24 L1837.5 1221.24 L1836.91 1221.24 L1836.32 1221.24 L1835.74 1221.24 L1835.15 1221.24 L1834.56 1221.24 L1833.98 1221.24 L1833.39 1221.24 L1832.81 1221.24 L1832.22 1221.24 L1831.63 1221.24 L1831.05 1221.24 L1830.46 1221.24 L1829.87 1221.24 L1829.29 1221.24 L1828.7 1221.24 L1828.11 1221.24 L1827.53 1221.24 L1826.94 1221.24 L1826.35 1221.24 L1825.77 1221.24 L1825.18 1221.24 L1824.6 1221.24 L1824.01 1221.24 L1823.42 1221.24 L1822.84 1221.24 L1822.25 1221.24 L1821.66 1221.24 L1821.08 1221.24 L1820.49 1221.24 L1819.9 1221.24 L1819.32 1221.24 L1818.73 1221.24 L1818.14 1221.24 L1817.56 1221.24 L1816.97 1221.24 L1816.39 1221.24 L1815.8 1221.24 L1815.21 1221.24 L1814.63 1221.24 L1814.04 1221.24 L1813.45 1221.24 L1812.87 1221.24 L1812.28 1221.24 L1811.69 1221.24 L1811.11 1221.24 L1810.52 1221.24 L1809.94 1221.24 L1809.35 1221.24 L1808.76 1221.24 L1808.18 1221.24 L1807.59 1221.24 L1807 1221.24 L1806.42 1221.24 L1805.83 1221.24 L1805.24 1221.24 L1804.66 1221.24 L1804.07 1221.24 L1803.48 1221.24 L1802.9 1221.24 L1802.31 1221.24 L1801.73 1221.24 L1801.14 1221.24 L1800.55 1221.24 L1799.97 1221.24 L1799.38 1221.24 L1798.79 1221.24 L1798.21 1221.24 L1797.62 1221.24 L1797.03 1221.24 L1796.45 1221.24 L1795.86 1221.24 L1795.27 1221.24 L1794.69 1221.24 L1794.1 1221.24 L1793.52 1221.24 L1792.93 1221.24 L1792.34 1221.24 L1791.76 1221.24 L1791.17 1221.24 L1790.58 1221.24 L1790 1221.24 L1789.41 1221.24 L1788.82 1221.24 L1788.24 1221.24 L1787.65 1221.24 L1787.06 1221.24 L1786.48 1221.24 L1785.89 1221.24 L1785.31 1221.24 L1784.72 1221.24 L1784.13 1221.24 L1783.55 1221.24 L1782.96 1221.24 L1782.37 1221.24 L1781.79 1221.24 L1781.2 1221.24 L1780.61 1221.24 L1780.03 1221.24 L1779.44 1221.24 L1778.86 1221.24 L1778.27 1221.24 L1777.68 1221.24 L1777.1 1221.24 L1776.51 1221.24 L1775.92 1221.24 L1775.34 1221.24 L1774.75 1221.24 L1774.16 1221.24 L1773.58 1221.24 L1772.99 1221.24 L1772.4 1221.24 L1771.82 1221.24 L1771.23 1221.24 L1770.65 1221.24 L1770.06 1221.24 L1769.47 1221.24 L1768.89 1221.24 L1768.3 1221.24 L1767.71 1221.24 L1767.13 1221.24 L1766.54 1221.24 L1765.95 1221.24 L1765.37 1221.24 L1764.78 1221.24 L1764.19 1221.24 L1763.61 1221.24 L1763.02 1221.24 L1762.44 1221.24 L1761.85 1221.24 L1761.26 1221.24 L1760.68 1221.24 L1760.09 1221.24 L1759.5 1221.24 L1758.92 1221.24 L1758.33 1221.24 L1757.74 1221.24 L1757.16 1221.24 L1756.57 1221.24 L1755.99 1221.24 L1755.4 1221.24 L1754.81 1221.24 L1754.23 1221.24 L1753.64 1221.24 L1753.05 1221.24 L1752.47 1221.24 L1751.88 1221.24 L1751.29 1221.24 L1750.71 1221.24 L1750.12 1221.24 L1749.53 1221.24 L1748.95 1221.24 L1748.36 1221.24 L1747.78 1221.24 L1747.19 1221.24 L1746.6 1221.24 L1746.02 1221.24 L1745.43 1221.24 L1744.84 1221.24 L1744.26 1221.24 L1743.67 1221.24 L1743.08 1221.24 L1742.5 1221.24 L1741.91 1221.24 L1741.32 1221.24 L1740.74 1221.24 L1740.15 1221.24 L1739.57 1221.24 L1738.98 1221.24 L1738.39 1221.24 L1737.81 1221.24 L1737.22 1221.24 L1736.63 1221.24 L1736.05 1221.24 L1735.46 1221.24 L1734.87 1221.24 L1734.29 1221.24 L1733.7 1221.24 L1733.11 1221.24 L1732.53 1221.24 L1731.94 1221.24 L1731.36 1221.24 L1730.77 1221.24 L1730.18 1221.24 L1729.6 1221.24 L1729.01 1221.24 L1728.42 1221.24 L1727.84 1221.24 L1727.25 1221.24 L1726.66 1221.24 L1726.08 1221.24 L1725.49 1221.24 L1724.91 1221.24 L1724.32 1221.24 L1723.73 1221.24 L1723.15 1221.24 L1722.56 1221.24 L1721.97 1221.24 L1721.39 1221.24 L1720.8 1221.24 L1720.21 1221.24 L1719.63 1221.24 L1719.04 1221.24 L1718.45 1221.24 L1717.87 1221.24 L1717.28 1221.24 L1716.7 1221.24 L1716.11 1221.24 L1715.52 1221.24 L1714.94 1221.24 L1714.35 1221.24 L1713.76 1221.24 L1713.18 1221.24 L1712.59 1221.24 L1712 1221.24 L1711.42 1221.24 L1710.83 1221.24 L1710.24 1221.24 L1709.66 1221.24 L1709.07 1221.24 L1708.49 1221.24 L1707.9 1221.24 L1707.31 1221.24 L1706.73 1221.24 L1706.14 1221.24 L1705.55 1221.24 L1704.97 1221.24 L1704.38 1221.24 L1703.79 1221.24 L1703.21 1221.24 L1702.62 1221.24 L1702.04 1221.24 L1701.45 1221.24 L1700.86 1221.24 L1700.28 1221.24 L1699.69 1221.24 L1699.1 1221.24 L1698.52 1221.24 L1697.93 1221.24 L1697.34 1221.24 L1696.76 1221.24 L1696.17 1221.24 L1695.58 1221.24 L1695 1221.24 L1694.41 1221.24 L1693.83 1221.24 L1693.24 1221.24 L1692.65 1221.24 L1692.07 1221.24 L1691.48 1221.24 L1690.89 1221.24 L1690.31 1221.24 L1689.72 1221.24 L1689.13 1221.24 L1688.55 1221.24 L1687.96 1221.24 L1687.37 1221.24 L1686.79 1221.24 L1686.2 1221.24 L1685.62 1221.24 L1685.03 1221.24 L1684.44 1221.24 L1683.86 1221.24 L1683.27 1221.24 L1682.68 1221.24 L1682.1 1221.24 L1681.51 1221.24 L1680.92 1221.24 L1680.34 1221.24 L1679.75 1221.24 L1679.17 1221.24 L1678.58 1221.24 L1677.99 1221.24 L1677.41 1221.24 L1676.82 1221.24 L1676.23 1221.24 L1675.65 1221.24 L1675.06 1221.24 L1674.47 1221.24 L1673.89 1221.24 L1673.3 1221.24 L1672.71 1221.24 L1672.13 1221.24 L1671.54 1221.24 L1670.96 1221.24 L1670.37 1221.24 L1669.78 1221.24 L1669.2 1221.24 L1668.61 1221.24 L1668.02 1221.24 L1667.44 1221.24 L1666.85 1221.24 L1666.26 1221.24 L1665.68 1221.24 L1665.09 1221.24 L1664.5 1221.24 L1663.92 1221.24 L1663.33 1221.24 L1662.75 1221.24 L1662.16 1221.24 L1661.57 1221.24 L1660.99 1221.24 L1660.4 1221.24 L1659.81 1221.24 L1659.23 1221.24 L1658.64 1221.24 L1658.05 1221.24 L1657.47 1221.24 L1656.88 1221.24 L1656.29 1221.24 L1655.71 1221.24 L1655.12 1221.24 L1654.54 1221.24 L1653.95 1221.24 L1653.36 1221.24 L1652.78 1221.24 L1652.19 1221.24 L1651.6 1221.24 L1651.02 1221.24 L1650.43 1221.24 L1649.84 1221.24 L1649.26 1221.24 L1648.67 1221.24 L1648.09 1221.24 L1647.5 1221.24 L1646.91 1221.24 L1646.33 1221.24 L1645.74 1221.24 L1645.15 1221.24 L1644.57 1221.24 L1643.98 1221.24 L1643.39 1221.24 L1642.81 1221.24 L1642.22 1221.24 L1641.63 1221.24 L1641.05 1221.24 L1640.46 1221.24 L1639.88 1221.24 L1639.29 1221.24 L1638.7 1221.24 L1638.12 1221.24 L1637.53 1221.24 L1636.94 1221.24 L1636.36 1221.24 L1635.77 1221.24 L1635.18 1221.24 L1634.6 1221.24 L1634.01 1221.24 L1633.42 1221.24 L1632.84 1221.24 L1632.25 1221.24 L1631.67 1221.24 L1631.08 1221.24 L1630.49 1221.24 L1629.91 1221.24 L1629.32 1221.24 L1628.73 1221.24 L1628.15 1221.24 L1627.56 1221.24 L1626.97 1221.24 L1626.39 1221.24 L1625.8 1221.24 L1625.22 1221.24 L1624.63 1221.24 L1624.04 1221.24 L1623.46 1221.24 L1622.87 1221.24 L1622.28 1221.24 L1621.7 1221.24 L1621.11 1221.24 L1620.52 1221.24 L1619.94 1221.24 L1619.35 1221.24 L1618.76 1221.24 L1618.18 1221.24 L1617.59 1221.24 L1617.01 1221.24 L1616.42 1221.24 L1615.83 1221.24 L1615.25 1221.24 L1614.66 1221.24 L1614.07 1221.24 L1613.49 1221.24 L1612.9 1221.24 L1612.31 1221.24 L1611.73 1221.24 L1611.14 1221.24 L1610.55 1221.24 L1609.97 1221.24 L1609.38 1221.24 L1608.8 1221.24 L1608.21 1221.24 L1607.62 1221.24 L1607.04 1221.24 L1606.45 1221.24 L1605.86 1221.24 L1605.28 1221.24 L1604.69 1221.24 L1604.1 1221.24 L1603.52 1221.24 L1602.93 1221.24 L1602.34 1221.24 L1601.76 1221.24 L1601.17 1221.24 L1600.59 1221.24 L1600 1221.24 L1599.41 1221.24 L1598.83 1221.24 L1598.24 1221.24 L1597.65 1221.24 L1597.07 1221.24 L1596.48 1221.24 L1595.89 1221.24 L1595.31 1221.24 L1594.72 1221.24 L1594.14 1221.24 L1593.55 1221.24 L1592.96 1221.24 L1592.38 1221.24 L1591.79 1221.24 L1591.2 1221.24 L1590.62 1221.24 L1590.03 1221.24 L1589.44 1221.24 L1588.86 1221.24 L1588.27 1221.24 L1587.68 1221.24 L1587.1 1221.24 L1586.51 1221.24 L1585.93 1221.24 L1585.34 1221.24 L1584.75 1221.24 L1584.17 1221.24 L1583.58 1221.24 L1582.99 1221.24 L1582.41 1221.24 L1581.82 1221.24 L1581.23 1221.24 L1580.65 1221.24 L1580.06 1221.24 L1579.47 1221.24 L1578.89 1221.24 L1578.3 1221.24 L1577.72 1221.24 L1577.13 1221.24 L1576.54 1221.24 L1575.96 1221.24 L1575.37 1221.24 L1574.78 1221.24 L1574.2 1221.24 L1573.61 1221.24 L1573.02 1221.24 L1572.44 1221.24 L1571.85 1221.24 L1571.27 1221.24 L1570.68 1221.24 L1570.09 1221.24 L1569.51 1221.24 L1568.92 1221.24 L1568.33 1221.24 L1567.75 1221.24 L1567.16 1221.24 L1566.57 1221.24 L1565.99 1221.24 L1565.4 1221.24 L1564.81 1221.24 L1564.23 1221.24 L1563.64 1221.24 L1563.06 1221.24 L1562.47 1221.24 L1561.88 1221.24 L1561.3 1221.24 L1560.71 1221.24 L1560.12 1221.24 L1559.54 1221.24 L1558.95 1221.24 L1558.36 1221.24 L1557.78 1221.24 L1557.19 1221.24 L1556.6 1221.24 L1556.02 1221.24 L1555.43 1221.24 L1554.85 1221.24 L1554.26 1221.24 L1553.67 1221.24 L1553.09 1221.24 L1552.5 1221.24 L1551.91 1221.24 L1551.33 1221.24 L1550.74 1221.24 L1550.15 1221.24 L1549.57 1221.24 L1548.98 1221.24 L1548.4 1221.24 L1547.81 1221.24 L1547.22 1221.24 L1546.64 1221.24 L1546.05 1221.24 L1545.46 1221.24 L1544.88 1221.24 L1544.29 1221.24 L1543.7 1221.24 L1543.12 1221.24 L1542.53 1221.24 L1541.94 1221.24 L1541.36 1221.24 L1540.77 1221.24 L1540.19 1221.24 L1539.6 1221.24 L1539.01 1221.24 L1538.43 1221.24 L1537.84 1221.24 L1537.25 1221.24 L1536.67 1221.24 L1536.08 1221.24 L1535.49 1221.24 L1534.91 1221.24 L1534.32 1221.24 L1533.73 1221.24 L1533.15 1221.24 L1532.56 1221.24 L1531.98 1221.24 L1531.39 1221.24 L1530.8 1221.24 L1530.22 1221.24 L1529.63 1221.24 L1529.04 1221.24 L1528.46 1221.24 L1527.87 1221.24 L1527.28 1221.24 L1526.7 1221.24 L1526.11 1221.24 L1525.52 1221.24 L1524.94 1221.24 L1524.35 1221.24 L1523.77 1221.24 L1523.18 1221.24 L1522.59 1221.24 L1522.01 1221.24 L1521.42 1221.24 L1520.83 1221.24 L1520.25 1221.24 L1519.66 1221.24 L1519.07 1221.24 L1518.49 1221.24 L1517.9 1221.24 L1517.32 1221.24 L1516.73 1221.24 L1516.14 1221.24 L1515.56 1221.24 L1514.97 1221.24 L1514.38 1221.24 L1513.8 1221.24 L1513.21 1221.24 L1512.62 1221.24 L1512.04 1221.24 L1511.45 1221.24 L1510.86 1221.24 L1510.28 1221.24 L1509.69 1221.24 L1509.11 1221.24 L1508.52 1221.24 L1507.93 1221.24 L1507.35 1221.24 L1506.76 1221.24 L1506.17 1221.24 L1505.59 1221.24 L1505 1221.24 L1504.41 1221.24 L1503.83 1221.24 L1503.24 1221.24 L1502.65 1221.24 L1502.07 1221.24 L1501.48 1221.24 L1500.9 1221.24 L1500.31 1221.24 L1499.72 1221.24 L1499.14 1221.24 L1498.55 1221.24 L1497.96 1221.24 L1497.38 1221.24 L1496.79 1221.24 L1496.2 1221.24 L1495.62 1221.24 L1495.03 1221.24 L1494.45 1221.24 L1493.86 1221.24 L1493.27 1221.24 L1492.69 1221.24 L1492.1 1221.24 L1491.51 1221.24 L1490.93 1221.24 L1490.34 1221.24 L1489.75 1221.24 L1489.17 1221.24 L1488.58 1221.24 L1487.99 1221.24 L1487.41 1221.24 L1486.82 1221.24 L1486.24 1221.24 L1485.65 1221.24 L1485.06 1221.24 L1484.48 1221.24 L1483.89 1221.24 L1483.3 1221.24 L1482.72 1221.24 L1482.13 1221.24 L1481.54 1221.24 L1480.96 1221.24 L1480.37 1221.24 L1479.78 1221.24 L1479.2 1221.24 L1478.61 1221.24 L1478.03 1221.24 L1477.44 1221.24 L1476.85 1221.24 L1476.27 1221.24 L1475.68 1221.24 L1475.09 1221.24 L1474.51 1221.24 L1473.92 1221.24 L1473.33 1221.24 L1472.75 1221.24 L1472.16 1221.24 L1471.57 1221.24 L1470.99 1221.24 L1470.4 1221.24 L1469.82 1221.24 L1469.23 1221.24 L1468.64 1221.24 L1468.06 1221.24 L1467.47 1221.24 L1466.88 1221.24 L1466.3 1221.24 L1465.71 1221.24 L1465.12 1221.24 L1464.54 1221.24 L1463.95 1221.24 L1463.37 1221.24 L1462.78 1221.24 L1462.19 1221.24 L1461.61 1221.24 L1461.02 1221.24 L1460.43 1221.24 L1459.85 1221.24 L1459.26 1221.24 L1458.67 1221.24 L1458.09 1221.24 L1457.5 1221.24 L1456.91 1221.24 L1456.33 1221.24 L1455.74 1221.24 L1455.16 1221.24 L1454.57 1221.24 L1453.98 1221.24 L1453.4 1221.24 L1452.81 1221.24 L1452.22 1221.24 L1451.64 1221.24 L1451.05 1221.24 L1450.46 1221.24 L1449.88 1221.24 L1449.29 1221.24 L1448.7 1221.24 L1448.12 1221.24 L1447.53 1221.24 L1446.95 1221.24 L1446.36 1221.24 L1445.77 1221.24 L1445.19 1221.24 L1444.6 1221.24 L1444.01 1221.24 L1443.43 1221.24 L1442.84 1221.24 L1442.25 1221.24 L1441.67 1221.24 L1441.08 1221.24 L1440.5 1221.24 L1439.91 1221.24 L1439.32 1221.24 L1438.74 1221.24 L1438.15 1221.24 L1437.56 1221.24 L1436.98 1221.24 L1436.39 1221.24 L1435.8 1221.24 L1435.22 1221.24 L1434.63 1221.24 L1434.04 1221.24 L1433.46 1221.24 L1432.87 1221.24 L1432.29 1221.24 L1431.7 1221.24 L1431.11 1221.24 L1430.53 1221.24 L1429.94 1221.24 L1429.35 1221.24 L1428.77 1221.24 L1428.18 1221.24 L1427.59 1221.24 L1427.01 1221.24 L1426.42 1221.24 L1425.83 1221.24 L1425.25 1221.24 L1424.66 1221.24 L1424.08 1221.24 L1423.49 1221.24 L1422.9 1221.24 L1422.32 1221.24 L1421.73 1221.24 L1421.14 1221.24 L1420.56 1221.24 L1419.97 1221.24 L1419.38 1221.24 L1418.8 1221.24 L1418.21 1221.24 L1417.63 1221.24 L1417.04 1221.24 L1416.45 1221.24 L1415.87 1221.24 L1415.28 1221.24 L1414.69 1221.24 L1414.11 1221.24 L1413.52 1221.24 L1412.93 1221.24 L1412.35 1221.24 L1411.76 1221.24 L1411.17 1221.24 L1410.59 1221.24 L1410 1221.24 L1409.42 1221.24 L1408.83 1221.24 L1408.24 1221.24 L1407.66 1221.24 L1407.07 1221.24 L1406.48 1221.24 L1405.9 1221.24 L1405.31 1221.24 L1404.72 1221.24 L1404.14 1221.24 L1403.55 1221.24 L1402.96 1221.24 L1402.38 1221.24 L1401.79 1221.24 L1401.21 1221.24 L1400.62 1221.24 L1400.03 1221.24 L1399.45 1221.24 L1398.86 1221.24 L1398.27 1221.24 L1397.69 1221.24 L1397.1 1221.24 L1396.51 1221.24 L1395.93 1221.24 L1395.34 1221.24 L1394.75 1221.24 L1394.17 1221.24 L1393.58 1221.24 L1393 1221.24 L1392.41 1221.24 L1391.82 1221.24 L1391.24 1221.24 L1390.65 1221.24 L1390.06 1221.24 L1389.48 1221.24 L1388.89 1221.24 L1388.3 1221.24 L1387.72 1221.24 L1387.13 1221.24 L1386.55 1221.24 L1385.96 1221.24 L1385.37 1221.24 L1384.79 1221.24 L1384.2 1221.24 L1383.61 1221.24 L1383.03 1221.24 L1382.44 1221.24 L1381.85 1221.24 L1381.27 1221.24 L1380.68 1221.24 L1380.09 1221.24 L1379.51 1221.24 L1378.92 1221.24 L1378.34 1221.24 L1377.75 1221.24 L1377.16 1221.24 L1376.58 1221.24 L1375.99 1221.24 L1375.4 1221.24 L1374.82 1221.24 L1374.23 1221.24 L1373.64 1221.24 L1373.06 1221.24 L1372.47 1221.24 L1371.88 1221.24 L1371.3 1221.24 L1370.71 1221.24 L1370.13 1221.24 L1369.54 1221.24 L1368.95 1221.24 L1368.37 1221.24 L1367.78 1221.24 L1367.19 1221.24 L1366.61 1221.24 L1366.02 1221.24 L1365.43 1221.24 L1364.85 1221.24 L1364.26 1221.24 L1363.68 1221.24 L1363.09 1221.24 L1362.5 1221.24 L1361.92 1221.24 L1361.33 1221.24 L1360.74 1221.24 L1360.16 1221.24 L1359.57 1221.24 L1358.98 1221.24 L1358.4 1221.24 L1357.81 1221.24 L1357.22 1221.24 L1356.64 1221.24 L1356.05 1221.24 L1355.47 1221.24 L1354.88 1221.24 L1354.29 1221.24 L1353.71 1221.24 L1353.12 1221.24 L1352.53 1221.24 L1351.95 1221.24 L1351.36 1221.24 L1350.77 1221.24 L1350.19 1221.24 L1349.6 1221.24 L1349.01 1221.24 L1348.43 1221.24 L1347.84 1221.24 L1347.26 1221.24 L1346.67 1221.24 L1346.08 1221.24 L1345.5 1221.24 L1344.91 1221.24 L1344.32 1221.24 L1343.74 1221.24 L1343.15 1221.24 L1342.56 1221.24 L1341.98 1221.24 L1341.39 1221.24 L1340.8 1221.24 L1340.22 1221.24 L1339.63 1221.24 L1339.05 1221.24 L1338.46 1221.24 L1337.87 1221.24 L1337.29 1221.24 L1336.7 1221.24 L1336.11 1221.24 L1335.53 1221.24 L1334.94 1221.24 L1334.35 1221.24 L1333.77 1221.24 L1333.18 1221.24 L1332.6 1221.24 L1332.01 1221.24 L1331.42 1221.24 L1330.84 1221.24 L1330.25 1221.24 L1329.66 1221.24 L1329.08 1221.24 L1328.49 1221.24 L1327.9 1221.24 L1327.32 1221.24 L1326.73 1221.24 L1326.14 1221.24 L1325.56 1221.24 L1324.97 1221.24 L1324.39 1221.24 L1323.8 1221.24 L1323.21 1221.24 L1322.63 1221.24 L1322.04 1221.24 L1321.45 1221.24 L1320.87 1221.24 L1320.28 1221.24 L1319.69 1221.24 L1319.11 1221.24 L1318.52 1221.24 L1317.93 1221.24 L1317.35 1221.24 L1316.76 1221.24 L1316.18 1221.24 L1315.59 1221.24 L1315 1221.24 L1314.42 1221.24 L1313.83 1221.24 L1313.24 1221.24 L1312.66 1221.24 L1312.07 1221.24 L1311.48 1221.24 L1310.9 1221.24 L1310.31 1221.24 L1309.73 1221.24 L1309.14 1221.24 L1308.55 1221.24 L1307.97 1221.24 L1307.38 1221.24 L1306.79 1221.24 L1306.21 1221.24 L1305.62 1221.24 L1305.03 1221.24 L1304.45 1221.24 L1303.86 1221.24 L1303.27 1221.24 L1302.69 1221.24 L1302.1 1221.24 L1301.52 1221.24 L1300.93 1221.24 L1300.34 1221.24 L1299.76 1221.24 L1299.17 1221.24 L1298.58 1221.24 L1298 1221.24 L1297.41 1221.24 L1296.82 1221.24 L1296.24 1221.24 L1295.65 1221.24 L1295.06 1221.24 L1294.48 1221.24 L1293.89 1221.24 L1293.31 1221.24 L1292.72 1221.24 L1292.13 1221.24 L1291.55 1221.24 L1290.96 1221.24 L1290.37 1221.24 L1289.79 1221.24 L1289.2 1221.24 L1288.61 1221.24 L1288.03 1221.24 L1287.44 1221.24 L1286.86 1221.24 L1286.27 1221.24 L1285.68 1221.24 L1285.1 1221.24 L1284.51 1221.24 L1283.92 1221.24 L1283.34 1221.24 L1282.75 1221.24 L1282.16 1221.24 L1281.58 1221.24 L1280.99 1221.24 L1280.4 1221.24 L1279.82 1221.24 L1279.23 1221.24 L1278.65 1221.24 L1278.06 1221.24 L1277.47 1221.24 L1276.89 1221.24 L1276.3 1221.24 L1275.71 1221.24 L1275.13 1221.24 L1274.54 1221.24 L1273.95 1221.24 L1273.37 1221.24 L1272.78 1221.24 L1272.19 1221.24 L1271.61 1221.24 L1271.02 1221.24 L1270.44 1221.24 L1269.85 1221.24 L1269.26 1221.24 L1268.68 1221.24 L1268.09 1221.24 L1267.5 1221.24 L1266.92 1221.24 L1266.33 1221.24 L1265.74 1221.24 L1265.16 1221.24 L1264.57 1221.24 L1263.98 1221.24 L1263.4 1221.24 L1262.81 1221.24 L1262.23 1221.24 L1261.64 1221.24 L1261.05 1221.24 L1260.47 1221.24 L1259.88 1221.24 L1259.29 1221.24 L1258.71 1221.24 L1258.12 1221.24 L1257.53 1221.24 L1256.95 1221.24 L1256.36 1221.24 L1255.78 1221.24 L1255.19 1221.24 L1254.6 1221.24 L1254.02 1221.24 L1253.43 1221.24 L1252.84 1221.24 L1252.26 1221.24 L1251.67 1221.24 L1251.08 1221.24 L1250.5 1221.24 L1249.91 1221.24 L1249.32 1221.24 L1248.74 1221.24 L1248.15 1221.24 L1247.57 1221.24 L1246.98 1221.24 L1246.39 1221.24 L1245.81 1221.24 L1245.22 1221.24 L1244.63 1221.24 L1244.05 1221.24 L1243.46 1221.24 L1242.87 1221.24 L1242.29 1221.24 L1241.7 1221.24 L1241.11 1221.24 L1240.53 1221.24 L1239.94 1221.24 L1239.36 1221.24 L1238.77 1221.24 L1238.18 1221.24 L1237.6 1221.24 L1237.01 1221.24 L1236.42 1221.24 L1235.84 1221.24 L1235.25 1221.24 L1234.66 1221.24 L1234.08 1221.24 L1233.49 1221.24 L1232.91 1221.24 L1232.32 1221.24 L1231.73 1221.24 L1231.15 1221.24 L1230.56 1221.24 L1229.97 1221.24 L1229.39 1221.24 L1228.8 1221.24 L1228.21 1221.24 L1227.63 1221.24 L1227.04 1221.24 L1226.45 1221.24 L1225.87 1221.24 L1225.28 1221.24 L1224.7 1221.24 L1224.11 1221.24 L1223.52 1221.24 L1222.94 1221.24 L1222.35 1221.24 L1221.76 1221.24 L1221.18 1221.24 L1220.59 1221.24 L1220 1221.24 L1219.42 1221.24 L1218.83 1221.24 L1218.24 1221.24 L1217.66 1221.24 L1217.07 1221.24 L1216.49 1221.24 L1215.9 1221.24 L1215.31 1221.24 L1214.73 1221.24 L1214.14 1221.24 L1213.55 1221.24 L1212.97 1221.24 L1212.38 1221.24 L1211.79 1221.24 L1211.21 1221.24 L1210.62 1221.24 L1210.03 1221.24 L1209.45 1221.24 L1208.86 1221.24 L1208.28 1221.24 L1207.69 1221.24 L1207.1 1221.24 L1206.52 1221.24 L1205.93 1221.24 L1205.34 1221.24 L1204.76 1221.24 L1204.17 1221.24 L1203.58 1221.24 L1203 1221.24 L1202.41 1221.24 L1201.83 1221.24 L1201.24 1221.24 L1200.65 1221.24 L1200.07 1221.24 L1199.48 1221.24 L1198.89 1221.24 L1198.31 1221.24 L1197.72 1221.24 L1197.13 1221.24 L1196.55 1221.24 L1195.96 1221.24 L1195.37 1221.24 L1194.79 1221.24 L1194.2 1221.24 L1193.62 1221.24 L1193.03 1221.24 L1192.44 1221.24 L1191.86 1221.24 L1191.27 1221.24 L1190.68 1221.24 L1190.1 1221.24 L1189.51 1221.24 L1188.92 1221.24 L1188.34 1221.24 L1187.75 1221.24 L1187.16 1221.24 L1186.58 1221.24 L1185.99 1221.24 L1185.41 1221.24 L1184.82 1221.24 L1184.23 1221.24 L1183.65 1221.24 L1183.06 1221.24 L1182.47 1221.24 L1181.89 1221.24 L1181.3 1221.24 L1180.71 1221.24 L1180.13 1221.24 L1179.54 1221.24 L1178.96 1221.24 L1178.37 1221.24 L1177.78 1221.24 L1177.2 1221.24 L1176.61 1221.24 L1176.02 1221.24 L1175.44 1221.24 L1174.85 1221.24 L1174.26 1221.24 L1173.68 1221.24 L1173.09 1221.24 L1172.5 1221.24 L1171.92 1221.24 L1171.33 1221.24 L1170.75 1221.24 L1170.16 1221.24 L1169.57 1221.24 L1168.99 1221.24 L1168.4 1221.24 L1167.81 1221.24 L1167.23 1221.24 L1166.64 1221.24 L1166.05 1221.24 L1165.47 1221.24 L1164.88 1221.24 L1164.29 1221.24 L1163.71 1221.24 L1163.12 1221.24 L1162.54 1221.24 L1161.95 1221.24 L1161.36 1221.24 L1160.78 1221.24 L1160.19 1221.24 L1159.6 1221.24 L1159.02 1221.24 L1158.43 1221.24 L1157.84 1221.24 L1157.26 1221.24 L1156.67 1221.24 L1156.09 1221.24 L1155.5 1221.24 L1154.91 1221.24 L1154.33 1221.24 L1153.74 1221.24 L1153.15 1221.24 L1152.57 1221.24 L1151.98 1221.24 L1151.39 1221.24 L1150.81 1221.24 L1150.22 1221.24 L1149.63 1221.24 L1149.05 1221.24 L1148.46 1221.24 L1147.88 1221.24 L1147.29 1221.24 L1146.7 1221.24 L1146.12 1221.24 L1145.53 1221.24 L1144.94 1221.24 L1144.36 1221.24 L1143.77 1221.24 L1143.18 1221.24 L1142.6 1221.24 L1142.01 1221.24 L1141.42 1221.24 L1140.84 1221.24 L1140.25 1221.24 L1139.67 1221.24 L1139.08 1221.24 L1138.49 1221.24 L1137.91 1221.24 L1137.32 1221.24 L1136.73 1221.24 L1136.15 1221.24 L1135.56 1221.24 L1134.97 1221.24 L1134.39 1221.24 L1133.8 1221.24 L1133.21 1221.24 L1132.63 1221.24 L1132.04 1221.24 L1131.46 1221.24 L1130.87 1221.24 L1130.28 1221.24 L1129.7 1221.24 L1129.11 1221.24 L1128.52 1221.24 L1127.94 1221.24 L1127.35 1221.24 L1126.76 1221.24 L1126.18 1221.24 L1125.59 1221.24 L1125.01 1221.24 L1124.42 1221.24 L1123.83 1221.24 L1123.25 1221.24 L1122.66 1221.24 L1122.07 1221.24 L1121.49 1221.24 L1120.9 1221.24 L1120.31 1221.24 L1119.73 1221.24 L1119.14 1221.24 L1118.55 1221.24 L1117.97 1221.24 L1117.38 1221.24 L1116.8 1221.24 L1116.21 1221.24 L1115.62 1221.24 L1115.04 1221.24 L1114.45 1221.24 L1113.86 1221.24 L1113.28 1221.24 L1112.69 1221.24 L1112.1 1221.24 L1111.52 1221.24 L1110.93 1221.24 L1110.34 1221.24 L1109.76 1221.24 L1109.17 1221.24 L1108.59 1221.24 L1108 1221.24 L1107.41 1221.24 L1106.83 1221.24 L1106.24 1221.24 L1105.65 1221.24 L1105.07 1221.24 L1104.48 1221.24 L1103.89 1221.24 L1103.31 1221.24 L1102.72 1221.24 L1102.14 1221.24 L1101.55 1221.24 L1100.96 1221.24 L1100.38 1221.24 L1099.79 1221.24 L1099.2 1221.24 L1098.62 1221.24 L1098.03 1221.24 L1097.44 1221.24 L1096.86 1221.24 L1096.27 1221.24 L1095.68 1221.24 L1095.1 1221.24 L1094.51 1221.24 L1093.93 1221.24 L1093.34 1221.24 L1092.75 1221.24 L1092.17 1221.24 L1091.58 1221.24 L1090.99 1221.24 L1090.41 1221.24 L1089.82 1221.24 L1089.23 1221.24 L1088.65 1221.24 L1088.06 1221.24 L1087.47 1221.24 L1086.89 1221.24 L1086.3 1221.24 L1085.72 1221.24 L1085.13 1221.24 L1084.54 1221.24 L1083.96 1221.24 L1083.37 1221.24 L1082.78 1221.24 L1082.2 1221.24 L1081.61 1221.24 L1081.02 1221.24 L1080.44 1221.24 L1079.85 1221.24 L1079.26 1221.24 L1078.68 1221.24 L1078.09 1221.24 L1077.51 1221.24 L1076.92 1221.24 L1076.33 1221.24 L1075.75 1221.24 L1075.16 1221.24 L1074.57 1221.24 L1073.99 1221.24 L1073.4 1221.24 L1072.81 1221.24 L1072.23 1221.24 L1071.64 1221.24 L1071.06 1221.24 L1070.47 1221.24 L1069.88 1221.24 L1069.3 1221.24 L1068.71 1221.24 L1068.12 1221.24 L1067.54 1221.24 L1066.95 1221.24 L1066.36 1221.24 L1065.78 1221.24 L1065.19 1221.24 L1064.6 1221.24 L1064.02 1221.24 L1063.43 1221.24 L1062.85 1221.24 L1062.26 1221.24 L1061.67 1221.24 L1061.09 1221.24 L1060.5 1221.24 L1059.91 1221.24 L1059.33 1221.24 L1058.74 1221.24 L1058.15 1221.24 L1057.57 1221.24 L1056.98 1221.24 L1056.39 1221.24 L1055.81 1221.24 L1055.22 1221.24 L1054.64 1221.24 L1054.05 1221.24 L1053.46 1221.24 L1052.88 1221.24 L1052.29 1221.24 L1051.7 1221.24 L1051.12 1221.24 L1050.53 1221.24 L1049.94 1221.24 L1049.36 1221.24 L1048.77 1221.24 L1048.19 1221.24 L1047.6 1221.24 L1047.01 1221.24 L1046.43 1221.24 L1045.84 1221.24 L1045.25 1221.24 L1044.67 1221.24 L1044.08 1221.24 L1043.49 1221.24 L1042.91 1221.24 L1042.32 1221.24 L1041.73 1221.24 L1041.15 1221.24 L1040.56 1221.24 L1039.98 1221.24 L1039.39 1221.24 L1038.8 1221.24 L1038.22 1221.24 L1037.63 1221.24 L1037.04 1221.24 L1036.46 1221.24 L1035.87 1221.24 L1035.28 1221.24 L1034.7 1221.24 L1034.11 1221.24 L1033.52 1221.24 L1032.94 1221.24 L1032.35 1221.24 L1031.77 1221.24 L1031.18 1221.24 L1030.59 1221.24 L1030.01 1221.24 L1029.42 1221.24 L1028.83 1221.24 L1028.25 1221.24 L1027.66 1221.24 L1027.07 1221.24 L1026.49 1221.24 L1025.9 1221.24 L1025.32 1221.24 L1024.73 1221.24 L1024.14 1221.24 L1023.56 1221.24 L1022.97 1221.24 L1022.38 1221.24 L1021.8 1221.24 L1021.21 1221.24 L1020.62 1221.24 L1020.04 1221.24 L1019.45 1221.24 L1018.86 1221.24 L1018.28 1221.24 L1017.69 1221.24 L1017.11 1221.24 L1016.52 1221.24 L1015.93 1221.24 L1015.35 1221.24 L1014.76 1221.24 L1014.17 1221.24 L1013.59 1221.24 L1013 1221.24 L1012.41 1221.24 L1011.83 1221.24 L1011.24 1221.24 L1010.65 1221.24 L1010.07 1221.24 L1009.48 1221.24 L1008.9 1221.24 L1008.31 1221.24 L1007.72 1221.24 L1007.14 1221.24 L1006.55 1221.24 L1005.96 1221.24 L1005.38 1221.24 L1004.79 1221.24 L1004.2 1221.24 L1003.62 1221.24 L1003.03 1221.24 L1002.44 1221.24 L1001.86 1221.24 L1001.27 1221.24 L1000.69 1221.24 L1000.1 1221.24 L999.513 1221.24 L998.926 1221.24 L998.34 1221.24 L997.754 1221.24 L997.167 1221.24 L996.581 1221.24 L995.994 1221.24 L995.408 1221.24 L994.822 1221.24 L994.235 1221.24 L993.649 1221.24 L993.062 1221.24 L992.476 1221.24 L991.889 1221.24 L991.303 1221.24 L990.717 1221.24 L990.13 1221.24 L989.544 1221.24 L988.957 1221.24 L988.371 1221.24 L987.785 1221.24 L987.198 1221.24 L986.612 1221.24 L986.025 1221.24  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1221.65 986.612,1221.65 987.198,1221.65 987.785,1221.65 988.371,1221.65 988.957,1221.65 989.544,1221.65 990.13,1221.65 990.717,1221.65 991.303,1221.65 991.889,1221.65 992.476,1221.65 993.062,1221.65 993.649,1221.65 994.235,1221.65 994.822,1221.65 995.408,1221.65 995.994,1221.65 996.581,1221.65 997.167,1221.65 997.754,1221.65 998.34,1221.65 998.926,1221.65 999.513,1221.65 1000.1,1221.65 1000.69,1221.65 1001.27,1221.65 1001.86,1221.65 1002.44,1221.65 1003.03,1221.65 1003.62,1221.65 1004.2,1221.65 1004.79,1221.65 1005.38,1221.65 1005.96,1221.65 1006.55,1221.65 1007.14,1221.65 1007.72,1221.65 1008.31,1221.65 1008.9,1221.65 1009.48,1221.65 1010.07,1221.65 1010.65,1221.65 1011.24,1221.65 1011.83,1221.65 1012.41,1221.65 1013,1221.65 1013.59,1221.65 1014.17,1221.65 1014.76,1221.65 1015.35,1221.65 1015.93,1221.65 1016.52,1221.65 1017.11,1221.65 1017.69,1221.65 1018.28,1221.65 1018.86,1221.65 1019.45,1221.65 1020.04,1221.65 1020.62,1221.65 1021.21,1221.65 1021.8,1221.65 1022.38,1221.65 1022.97,1221.65 1023.56,1221.65 1024.14,1221.65 1024.73,1221.65 1025.32,1221.65 1025.9,1221.65 1026.49,1221.65 1027.07,1221.65 1027.66,1221.65 1028.25,1221.65 1028.83,1221.65 1029.42,1221.65 1030.01,1221.65 1030.59,1221.65 1031.18,1221.65 1031.77,1221.65 1032.35,1221.65 1032.94,1221.65 1033.52,1221.65 1034.11,1221.65 1034.7,1221.65 1035.28,1221.65 1035.87,1221.65 1036.46,1221.65 1037.04,1221.65 1037.63,1221.65 1038.22,1221.65 1038.8,1221.65 1039.39,1221.65 1039.98,1221.65 1040.56,1221.65 1041.15,1221.65 1041.73,1221.65 1042.32,1221.65 1042.91,1221.65 1043.49,1221.65 1044.08,1221.65 1044.67,1221.65 1045.25,1221.65 1045.84,1221.65 1046.43,1221.65 1047.01,1221.65 1047.6,1221.65 1048.19,1221.65 1048.77,1221.65 1049.36,1221.65 1049.94,1221.65 1050.53,1221.65 1051.12,1221.65 1051.7,1221.65 1052.29,1221.65 1052.88,1221.65 1053.46,1221.65 1054.05,1221.65 1054.64,1221.65 1055.22,1221.65 1055.81,1221.65 1056.39,1221.65 1056.98,1221.65 1057.57,1221.65 1058.15,1221.65 1058.74,1221.65 1059.33,1221.65 1059.91,1221.65 1060.5,1221.65 1061.09,1221.65 1061.67,1221.65 1062.26,1221.65 1062.85,1221.65 1063.43,1221.65 1064.02,1221.65 1064.6,1221.65 1065.19,1221.65 1065.78,1221.65 1066.36,1221.65 1066.95,1221.65 1067.54,1221.65 1068.12,1221.65 1068.71,1221.65 1069.3,1221.65 1069.88,1221.65 1070.47,1221.65 1071.06,1221.65 1071.64,1221.65 1072.23,1221.65 1072.81,1221.65 1073.4,1221.65 1073.99,1221.65 1074.57,1221.65 1075.16,1221.65 1075.75,1221.65 1076.33,1221.65 1076.92,1221.65 1077.51,1221.65 1078.09,1221.65 1078.68,1221.65 1079.26,1221.65 1079.85,1221.65 1080.44,1221.65 1081.02,1221.65 1081.61,1221.65 1082.2,1221.65 1082.78,1221.65 1083.37,1221.65 1083.96,1221.65 1084.54,1221.65 1085.13,1221.65 1085.72,1221.65 1086.3,1221.65 1086.89,1221.65 1087.47,1221.65 1088.06,1221.65 1088.65,1221.65 1089.23,1221.65 1089.82,1221.65 1090.41,1221.65 1090.99,1221.65 1091.58,1221.65 1092.17,1221.65 1092.75,1221.65 1093.34,1221.65 1093.93,1221.65 1094.51,1221.65 1095.1,1221.65 1095.68,1221.65 1096.27,1221.65 1096.86,1221.65 1097.44,1221.65 1098.03,1221.65 1098.62,1221.65 1099.2,1221.65 1099.79,1221.65 1100.38,1221.65 1100.96,1221.65 1101.55,1221.65 1102.14,1221.65 1102.72,1221.65 1103.31,1221.65 1103.89,1221.65 1104.48,1221.65 1105.07,1221.65 1105.65,1221.65 1106.24,1221.65 1106.83,1221.65 1107.41,1221.65 1108,1221.65 1108.59,1221.65 1109.17,1221.65 1109.76,1221.65 1110.34,1221.65 1110.93,1221.65 1111.52,1221.65 1112.1,1221.65 1112.69,1221.65 1113.28,1221.65 1113.86,1221.65 1114.45,1221.65 1115.04,1221.65 1115.62,1221.65 1116.21,1221.65 1116.8,1221.65 1117.38,1221.65 1117.97,1221.65 1118.55,1221.65 1119.14,1221.65 1119.73,1221.65 1120.31,1221.65 1120.9,1221.65 1121.49,1221.65 1122.07,1221.65 1122.66,1221.65 1123.25,1221.65 1123.83,1221.65 1124.42,1221.65 1125.01,1221.65 1125.59,1221.65 1126.18,1221.65 1126.76,1221.65 1127.35,1221.65 1127.94,1221.65 1128.52,1221.65 1129.11,1221.65 1129.7,1221.65 1130.28,1221.65 1130.87,1221.65 1131.46,1221.65 1132.04,1221.65 1132.63,1221.65 1133.21,1221.65 1133.8,1221.65 1134.39,1221.65 1134.97,1221.65 1135.56,1221.65 1136.15,1221.65 1136.73,1221.65 1137.32,1221.65 1137.91,1221.65 1138.49,1221.65 1139.08,1221.65 1139.67,1221.65 1140.25,1221.65 1140.84,1221.65 1141.42,1221.65 1142.01,1221.65 1142.6,1221.65 1143.18,1221.65 1143.77,1221.65 1144.36,1221.65 1144.94,1221.65 1145.53,1221.65 1146.12,1221.65 1146.7,1221.65 1147.29,1221.65 1147.88,1221.65 1148.46,1221.65 1149.05,1221.65 1149.63,1221.65 1150.22,1221.65 1150.81,1221.65 1151.39,1221.65 1151.98,1221.65 1152.57,1221.65 1153.15,1221.65 1153.74,1221.65 1154.33,1221.65 1154.91,1221.65 1155.5,1221.65 1156.09,1221.65 1156.67,1221.65 1157.26,1221.65 1157.84,1221.65 1158.43,1221.65 1159.02,1221.65 1159.6,1221.65 1160.19,1221.65 1160.78,1221.65 1161.36,1221.65 1161.95,1221.65 1162.54,1221.65 1163.12,1221.65 1163.71,1221.65 1164.29,1221.65 1164.88,1221.65 1165.47,1221.65 1166.05,1221.65 1166.64,1221.65 1167.23,1221.65 1167.81,1221.65 1168.4,1221.65 1168.99,1221.65 1169.57,1221.65 1170.16,1221.65 1170.75,1221.65 1171.33,1221.65 1171.92,1221.65 1172.5,1221.65 1173.09,1221.65 1173.68,1221.65 1174.26,1221.65 1174.85,1221.65 1175.44,1221.65 1176.02,1221.65 1176.61,1221.65 1177.2,1221.65 1177.78,1221.65 1178.37,1221.65 1178.96,1221.65 1179.54,1221.65 1180.13,1221.65 1180.71,1221.65 1181.3,1221.65 1181.89,1221.65 1182.47,1221.65 1183.06,1221.65 1183.65,1221.65 1184.23,1221.65 1184.82,1221.65 1185.41,1221.65 1185.99,1221.65 1186.58,1221.65 1187.16,1221.65 1187.75,1221.65 1188.34,1221.65 1188.92,1221.65 1189.51,1221.65 1190.1,1221.65 1190.68,1221.65 1191.27,1221.65 1191.86,1221.65 1192.44,1221.65 1193.03,1221.65 1193.62,1221.65 1194.2,1221.65 1194.79,1221.65 1195.37,1221.65 1195.96,1221.65 1196.55,1221.65 1197.13,1221.65 1197.72,1221.65 1198.31,1221.65 1198.89,1221.65 1199.48,1221.65 1200.07,1221.65 1200.65,1221.65 1201.24,1221.65 1201.83,1221.65 1202.41,1221.65 1203,1221.65 1203.58,1221.65 1204.17,1221.65 1204.76,1221.65 1205.34,1221.65 1205.93,1221.65 1206.52,1221.65 1207.1,1221.65 1207.69,1221.65 1208.28,1221.65 1208.86,1221.65 1209.45,1221.65 1210.03,1221.65 1210.62,1221.65 1211.21,1221.65 1211.79,1221.65 1212.38,1221.65 1212.97,1221.65 1213.55,1221.65 1214.14,1221.65 1214.73,1221.65 1215.31,1221.65 1215.9,1221.65 1216.49,1221.65 1217.07,1221.65 1217.66,1221.65 1218.24,1221.65 1218.83,1221.65 1219.42,1221.65 1220,1221.65 1220.59,1221.65 1221.18,1221.65 1221.76,1221.65 1222.35,1221.65 1222.94,1221.65 1223.52,1221.65 1224.11,1221.65 1224.7,1221.65 1225.28,1221.65 1225.87,1221.65 1226.45,1221.65 1227.04,1221.65 1227.63,1221.65 1228.21,1221.65 1228.8,1221.65 1229.39,1221.65 1229.97,1221.65 1230.56,1221.65 1231.15,1221.65 1231.73,1221.65 1232.32,1221.65 1232.91,1221.65 1233.49,1221.65 1234.08,1221.65 1234.66,1221.65 1235.25,1221.65 1235.84,1221.65 1236.42,1221.65 1237.01,1221.65 1237.6,1221.65 1238.18,1221.65 1238.77,1221.65 1239.36,1221.65 1239.94,1221.65 1240.53,1221.65 1241.11,1221.65 1241.7,1221.65 1242.29,1221.65 1242.87,1221.65 1243.46,1221.65 1244.05,1221.65 1244.63,1221.65 1245.22,1221.65 1245.81,1221.65 1246.39,1221.65 1246.98,1221.65 1247.57,1221.65 1248.15,1221.65 1248.74,1221.65 1249.32,1221.65 1249.91,1221.65 1250.5,1221.65 1251.08,1221.65 1251.67,1221.65 1252.26,1221.65 1252.84,1221.65 1253.43,1221.65 1254.02,1221.65 1254.6,1221.65 1255.19,1221.65 1255.78,1221.65 1256.36,1221.65 1256.95,1221.65 1257.53,1221.65 1258.12,1221.65 1258.71,1221.65 1259.29,1221.65 1259.88,1221.65 1260.47,1221.65 1261.05,1221.65 1261.64,1221.65 1262.23,1221.65 1262.81,1221.65 1263.4,1221.65 1263.98,1221.65 1264.57,1221.65 1265.16,1221.65 1265.74,1221.65 1266.33,1221.65 1266.92,1221.65 1267.5,1221.65 1268.09,1221.65 1268.68,1221.65 1269.26,1221.65 1269.85,1221.65 1270.44,1221.65 1271.02,1221.65 1271.61,1221.65 1272.19,1221.65 1272.78,1221.65 1273.37,1221.65 1273.95,1221.65 1274.54,1221.65 1275.13,1221.65 1275.71,1221.65 1276.3,1221.65 1276.89,1221.65 1277.47,1221.65 1278.06,1221.65 1278.65,1221.65 1279.23,1221.65 1279.82,1221.65 1280.4,1221.65 1280.99,1221.65 1281.58,1221.65 1282.16,1221.65 1282.75,1221.65 1283.34,1221.65 1283.92,1221.65 1284.51,1221.65 1285.1,1221.65 1285.68,1221.65 1286.27,1221.65 1286.86,1221.65 1287.44,1221.65 1288.03,1221.65 1288.61,1221.65 1289.2,1221.65 1289.79,1221.65 1290.37,1221.65 1290.96,1221.65 1291.55,1221.65 1292.13,1221.65 1292.72,1221.65 1293.31,1221.65 1293.89,1221.65 1294.48,1221.65 1295.06,1221.65 1295.65,1221.65 1296.24,1221.65 1296.82,1221.65 1297.41,1221.65 1298,1221.65 1298.58,1221.65 1299.17,1221.65 1299.76,1221.65 1300.34,1221.65 1300.93,1221.65 1301.52,1221.65 1302.1,1221.65 1302.69,1221.65 1303.27,1221.65 1303.86,1221.65 1304.45,1221.65 1305.03,1221.65 1305.62,1221.65 1306.21,1221.65 1306.79,1221.65 1307.38,1221.65 1307.97,1221.65 1308.55,1221.65 1309.14,1221.65 1309.73,1221.65 1310.31,1221.65 1310.9,1221.65 1311.48,1221.65 1312.07,1221.65 1312.66,1221.65 1313.24,1221.65 1313.83,1221.65 1314.42,1221.65 1315,1221.65 1315.59,1221.65 1316.18,1221.65 1316.76,1221.65 1317.35,1221.65 1317.93,1221.65 1318.52,1221.65 1319.11,1221.65 1319.69,1221.65 1320.28,1221.65 1320.87,1221.65 1321.45,1221.65 1322.04,1221.65 1322.63,1221.65 1323.21,1221.65 1323.8,1221.65 1324.39,1221.65 1324.97,1221.65 1325.56,1221.65 1326.14,1221.65 1326.73,1221.65 1327.32,1221.65 1327.9,1221.65 1328.49,1221.65 1329.08,1221.65 1329.66,1221.65 1330.25,1221.65 1330.84,1221.65 1331.42,1221.65 1332.01,1221.65 1332.6,1221.65 1333.18,1221.65 1333.77,1221.65 1334.35,1221.65 1334.94,1221.65 1335.53,1221.65 1336.11,1221.65 1336.7,1221.65 1337.29,1221.65 1337.87,1221.65 1338.46,1221.65 1339.05,1221.65 1339.63,1221.65 1340.22,1221.65 1340.8,1221.65 1341.39,1221.65 1341.98,1221.65 1342.56,1221.65 1343.15,1221.65 1343.74,1221.65 1344.32,1221.65 1344.91,1221.65 1345.5,1221.65 1346.08,1221.65 1346.67,1221.65 1347.26,1221.65 1347.84,1221.65 1348.43,1221.65 1349.01,1221.65 1349.6,1221.65 1350.19,1221.65 1350.77,1221.65 1351.36,1221.65 1351.95,1221.65 1352.53,1221.65 1353.12,1221.65 1353.71,1221.65 1354.29,1221.65 1354.88,1221.65 1355.47,1221.65 1356.05,1221.65 1356.64,1221.65 1357.22,1221.65 1357.81,1221.65 1358.4,1221.65 1358.98,1221.65 1359.57,1221.65 1360.16,1221.65 1360.74,1221.65 1361.33,1221.65 1361.92,1221.65 1362.5,1221.65 1363.09,1221.65 1363.68,1221.65 1364.26,1221.65 1364.85,1221.65 1365.43,1221.65 1366.02,1221.65 1366.61,1221.65 1367.19,1221.65 1367.78,1221.65 1368.37,1221.65 1368.95,1221.65 1369.54,1221.65 1370.13,1221.65 1370.71,1221.65 1371.3,1221.65 1371.88,1221.65 1372.47,1221.65 1373.06,1221.65 1373.64,1221.65 1374.23,1221.65 1374.82,1221.65 1375.4,1221.65 1375.99,1221.65 1376.58,1221.65 1377.16,1221.65 1377.75,1221.65 1378.34,1221.65 1378.92,1221.65 1379.51,1221.65 1380.09,1221.65 1380.68,1221.65 1381.27,1221.65 1381.85,1221.65 1382.44,1221.65 1383.03,1221.65 1383.61,1221.65 1384.2,1221.65 1384.79,1221.65 1385.37,1221.65 1385.96,1221.65 1386.55,1221.65 1387.13,1221.65 1387.72,1221.65 1388.3,1221.65 1388.89,1221.65 1389.48,1221.65 1390.06,1221.65 1390.65,1221.65 1391.24,1221.65 1391.82,1221.65 1392.41,1221.65 1393,1221.65 1393.58,1221.65 1394.17,1221.65 1394.75,1221.65 1395.34,1221.65 1395.93,1221.65 1396.51,1221.65 1397.1,1221.65 1397.69,1221.65 1398.27,1221.65 1398.86,1221.65 1399.45,1221.65 1400.03,1221.65 1400.62,1221.65 1401.21,1221.65 1401.79,1221.65 1402.38,1221.65 1402.96,1221.65 1403.55,1221.65 1404.14,1221.65 1404.72,1221.65 1405.31,1221.65 1405.9,1221.65 1406.48,1221.65 1407.07,1221.65 1407.66,1221.65 1408.24,1221.65 1408.83,1221.65 1409.42,1221.65 1410,1221.65 1410.59,1221.65 1411.17,1221.65 1411.76,1221.65 1412.35,1221.65 1412.93,1221.65 1413.52,1221.65 1414.11,1221.65 1414.69,1221.65 1415.28,1221.65 1415.87,1221.65 1416.45,1221.65 1417.04,1221.65 1417.63,1221.65 1418.21,1221.65 1418.8,1221.65 1419.38,1221.65 1419.97,1221.65 1420.56,1221.65 1421.14,1221.65 1421.73,1221.65 1422.32,1221.65 1422.9,1221.65 1423.49,1221.65 1424.08,1221.65 1424.66,1221.65 1425.25,1221.65 1425.83,1221.65 1426.42,1221.65 1427.01,1221.65 1427.59,1221.65 1428.18,1221.65 1428.77,1221.65 1429.35,1221.65 1429.94,1221.65 1430.53,1221.65 1431.11,1221.65 1431.7,1221.65 1432.29,1221.65 1432.87,1221.65 1433.46,1221.65 1434.04,1221.65 1434.63,1221.65 1435.22,1221.65 1435.8,1221.65 1436.39,1221.65 1436.98,1221.65 1437.56,1221.65 1438.15,1221.65 1438.74,1221.65 1439.32,1221.65 1439.91,1221.65 1440.5,1221.65 1441.08,1221.65 1441.67,1221.65 1442.25,1221.65 1442.84,1221.65 1443.43,1221.65 1444.01,1221.65 1444.6,1221.65 1445.19,1221.65 1445.77,1221.65 1446.36,1221.65 1446.95,1221.65 1447.53,1221.65 1448.12,1221.65 1448.7,1221.65 1449.29,1221.65 1449.88,1221.65 1450.46,1221.65 1451.05,1221.65 1451.64,1221.65 1452.22,1221.65 1452.81,1221.65 1453.4,1221.65 1453.98,1221.65 1454.57,1221.65 1455.16,1221.65 1455.74,1221.65 1456.33,1221.65 1456.91,1221.65 1457.5,1221.65 1458.09,1221.65 1458.67,1221.65 1459.26,1221.65 1459.85,1221.65 1460.43,1221.65 1461.02,1221.65 1461.61,1221.65 1462.19,1221.65 1462.78,1221.65 1463.37,1221.65 1463.95,1221.65 1464.54,1221.65 1465.12,1221.65 1465.71,1221.65 1466.3,1221.65 1466.88,1221.65 1467.47,1221.65 1468.06,1221.65 1468.64,1221.65 1469.23,1221.65 1469.82,1221.65 1470.4,1221.65 1470.99,1221.65 1471.57,1221.65 1472.16,1221.65 1472.75,1221.65 1473.33,1221.65 1473.92,1221.65 1474.51,1221.65 1475.09,1221.65 1475.68,1221.65 1476.27,1221.65 1476.85,1221.65 1477.44,1221.65 1478.03,1221.65 1478.61,1221.65 1479.2,1221.65 1479.78,1221.65 1480.37,1221.65 1480.96,1221.65 1481.54,1221.65 1482.13,1221.65 1482.72,1221.65 1483.3,1221.65 1483.89,1221.65 1484.48,1221.65 1485.06,1221.65 1485.65,1221.65 1486.24,1221.65 1486.82,1221.65 1487.41,1221.65 1487.99,1221.65 1488.58,1221.65 1489.17,1221.65 1489.75,1221.65 1490.34,1221.65 1490.93,1221.65 1491.51,1221.65 1492.1,1221.65 1492.69,1221.65 1493.27,1221.65 1493.86,1221.65 1494.45,1221.65 1495.03,1221.65 1495.62,1221.65 1496.2,1221.65 1496.79,1221.65 1497.38,1221.65 1497.96,1221.65 1498.55,1221.65 1499.14,1221.65 1499.72,1221.65 1500.31,1221.65 1500.9,1221.65 1501.48,1221.65 1502.07,1221.65 1502.65,1221.65 1503.24,1221.65 1503.83,1221.65 1504.41,1221.65 1505,1221.65 1505.59,1221.65 1506.17,1221.65 1506.76,1221.65 1507.35,1221.65 1507.93,1221.65 1508.52,1221.65 1509.11,1221.65 1509.69,1221.65 1510.28,1221.65 1510.86,1221.65 1511.45,1221.65 1512.04,1221.65 1512.62,1221.65 1513.21,1221.65 1513.8,1221.65 1514.38,1221.65 1514.97,1221.65 1515.56,1221.65 1516.14,1221.65 1516.73,1221.65 1517.32,1221.65 1517.9,1221.65 1518.49,1221.65 1519.07,1221.65 1519.66,1221.65 1520.25,1221.65 1520.83,1221.65 1521.42,1221.65 1522.01,1221.65 1522.59,1221.65 1523.18,1221.65 1523.77,1221.65 1524.35,1221.65 1524.94,1221.65 1525.52,1221.65 1526.11,1221.65 1526.7,1221.65 1527.28,1221.65 1527.87,1221.65 1528.46,1221.65 1529.04,1221.65 1529.63,1221.65 1530.22,1221.65 1530.8,1221.65 1531.39,1221.65 1531.98,1221.65 1532.56,1221.65 1533.15,1221.65 1533.73,1221.65 1534.32,1221.65 1534.91,1221.65 1535.49,1221.65 1536.08,1221.65 1536.67,1221.65 1537.25,1221.65 1537.84,1221.65 1538.43,1221.65 1539.01,1221.65 1539.6,1221.65 1540.19,1221.65 1540.77,1221.65 1541.36,1221.65 1541.94,1221.65 1542.53,1221.65 1543.12,1221.65 1543.7,1221.65 1544.29,1221.65 1544.88,1221.65 1545.46,1221.65 1546.05,1221.65 1546.64,1221.65 1547.22,1221.65 1547.81,1221.65 1548.4,1221.65 1548.98,1221.65 1549.57,1221.65 1550.15,1221.65 1550.74,1221.65 1551.33,1221.65 1551.91,1221.65 1552.5,1221.65 1553.09,1221.65 1553.67,1221.65 1554.26,1221.65 1554.85,1221.65 1555.43,1221.65 1556.02,1221.65 1556.6,1221.65 1557.19,1221.65 1557.78,1221.65 1558.36,1221.65 1558.95,1221.65 1559.54,1221.65 1560.12,1221.65 1560.71,1221.65 1561.3,1221.65 1561.88,1221.65 1562.47,1221.65 1563.06,1221.65 1563.64,1221.65 1564.23,1221.65 1564.81,1221.65 1565.4,1221.65 1565.99,1221.65 1566.57,1221.65 1567.16,1221.65 1567.75,1221.65 1568.33,1221.65 1568.92,1221.65 1569.51,1221.65 1570.09,1221.65 1570.68,1221.65 1571.27,1221.65 1571.85,1221.65 1572.44,1221.65 1573.02,1221.65 1573.61,1221.65 1574.2,1221.65 1574.78,1221.65 1575.37,1221.65 1575.96,1221.65 1576.54,1221.65 1577.13,1221.65 1577.72,1221.65 1578.3,1221.65 1578.89,1221.65 1579.47,1221.65 1580.06,1221.65 1580.65,1221.65 1581.23,1221.65 1581.82,1221.65 1582.41,1221.65 1582.99,1221.65 1583.58,1221.65 1584.17,1221.65 1584.75,1221.65 1585.34,1221.65 1585.93,1221.65 1586.51,1221.65 1587.1,1221.65 1587.68,1221.65 1588.27,1221.65 1588.86,1221.65 1589.44,1221.65 1590.03,1221.65 1590.62,1221.65 1591.2,1221.65 1591.79,1221.65 1592.38,1221.65 1592.96,1221.65 1593.55,1221.65 1594.14,1221.65 1594.72,1221.65 1595.31,1221.65 1595.89,1221.65 1596.48,1221.65 1597.07,1221.65 1597.65,1221.65 1598.24,1221.65 1598.83,1221.65 1599.41,1221.65 1600,1221.65 1600.59,1221.65 1601.17,1221.65 1601.76,1221.65 1602.34,1221.65 1602.93,1221.65 1603.52,1221.65 1604.1,1221.65 1604.69,1221.65 1605.28,1221.65 1605.86,1221.65 1606.45,1221.65 1607.04,1221.65 1607.62,1221.65 1608.21,1221.65 1608.8,1221.65 1609.38,1221.65 1609.97,1221.65 1610.55,1221.65 1611.14,1221.65 1611.73,1221.65 1612.31,1221.65 1612.9,1221.65 1613.49,1221.65 1614.07,1221.65 1614.66,1221.65 1615.25,1221.65 1615.83,1221.65 1616.42,1221.65 1617.01,1221.65 1617.59,1221.65 1618.18,1221.65 1618.76,1221.65 1619.35,1221.65 1619.94,1221.65 1620.52,1221.65 1621.11,1221.65 1621.7,1221.65 1622.28,1221.65 1622.87,1221.65 1623.46,1221.65 1624.04,1221.65 1624.63,1221.65 1625.22,1221.65 1625.8,1221.65 1626.39,1221.65 1626.97,1221.65 1627.56,1221.65 1628.15,1221.65 1628.73,1221.65 1629.32,1221.65 1629.91,1221.65 1630.49,1221.65 1631.08,1221.65 1631.67,1221.65 1632.25,1221.65 1632.84,1221.65 1633.42,1221.65 1634.01,1221.65 1634.6,1221.65 1635.18,1221.65 1635.77,1221.65 1636.36,1221.65 1636.94,1221.65 1637.53,1221.65 1638.12,1221.65 1638.7,1221.65 1639.29,1221.65 1639.88,1221.65 1640.46,1221.65 1641.05,1221.65 1641.63,1221.65 1642.22,1221.65 1642.81,1221.65 1643.39,1221.65 1643.98,1221.65 1644.57,1221.65 1645.15,1221.65 1645.74,1221.65 1646.33,1221.65 1646.91,1221.65 1647.5,1221.65 1648.09,1221.65 1648.67,1221.65 1649.26,1221.65 1649.84,1221.65 1650.43,1221.65 1651.02,1221.65 1651.6,1221.65 1652.19,1221.65 1652.78,1221.65 1653.36,1221.65 1653.95,1221.65 1654.54,1221.65 1655.12,1221.65 1655.71,1221.65 1656.29,1221.65 1656.88,1221.65 1657.47,1221.65 1658.05,1221.65 1658.64,1221.65 1659.23,1221.65 1659.81,1221.65 1660.4,1221.65 1660.99,1221.65 1661.57,1221.65 1662.16,1221.65 1662.75,1221.65 1663.33,1221.65 1663.92,1221.65 1664.5,1221.65 1665.09,1221.65 1665.68,1221.65 1666.26,1221.65 1666.85,1221.65 1667.44,1221.65 1668.02,1221.65 1668.61,1221.65 1669.2,1221.65 1669.78,1221.65 1670.37,1221.65 1670.96,1221.65 1671.54,1221.65 1672.13,1221.65 1672.71,1221.65 1673.3,1221.65 1673.89,1221.65 1674.47,1221.65 1675.06,1221.65 1675.65,1221.65 1676.23,1221.65 1676.82,1221.65 1677.41,1221.65 1677.99,1221.65 1678.58,1221.65 1679.17,1221.65 1679.75,1221.65 1680.34,1221.65 1680.92,1221.65 1681.51,1221.65 1682.1,1221.65 1682.68,1221.65 1683.27,1221.65 1683.86,1221.65 1684.44,1221.65 1685.03,1221.65 1685.62,1221.65 1686.2,1221.65 1686.79,1221.65 1687.37,1221.65 1687.96,1221.65 1688.55,1221.65 1689.13,1221.65 1689.72,1221.65 1690.31,1221.65 1690.89,1221.65 1691.48,1221.65 1692.07,1221.65 1692.65,1221.65 1693.24,1221.65 1693.83,1221.65 1694.41,1221.65 1695,1221.65 1695.58,1221.65 1696.17,1221.65 1696.76,1221.65 1697.34,1221.65 1697.93,1221.65 1698.52,1221.65 1699.1,1221.65 1699.69,1221.65 1700.28,1221.65 1700.86,1221.65 1701.45,1221.65 1702.04,1221.65 1702.62,1221.65 1703.21,1221.65 1703.79,1221.65 1704.38,1221.65 1704.97,1221.65 1705.55,1221.65 1706.14,1221.65 1706.73,1221.65 1707.31,1221.65 1707.9,1221.65 1708.49,1221.65 1709.07,1221.65 1709.66,1221.65 1710.24,1221.65 1710.83,1221.65 1711.42,1221.65 1712,1221.65 1712.59,1221.65 1713.18,1221.65 1713.76,1221.65 1714.35,1221.65 1714.94,1221.65 1715.52,1221.65 1716.11,1221.65 1716.7,1221.65 1717.28,1221.65 1717.87,1221.65 1718.45,1221.65 1719.04,1221.65 1719.63,1221.65 1720.21,1221.65 1720.8,1221.65 1721.39,1221.65 1721.97,1221.65 1722.56,1221.65 1723.15,1221.65 1723.73,1221.65 1724.32,1221.65 1724.91,1221.65 1725.49,1221.65 1726.08,1221.65 1726.66,1221.65 1727.25,1221.65 1727.84,1221.65 1728.42,1221.65 1729.01,1221.65 1729.6,1221.65 1730.18,1221.65 1730.77,1221.65 1731.36,1221.65 1731.94,1221.65 1732.53,1221.65 1733.11,1221.65 1733.7,1221.65 1734.29,1221.65 1734.87,1221.65 1735.46,1221.65 1736.05,1221.65 1736.63,1221.65 1737.22,1221.65 1737.81,1221.65 1738.39,1221.65 1738.98,1221.65 1739.57,1221.65 1740.15,1221.65 1740.74,1221.65 1741.32,1221.65 1741.91,1221.65 1742.5,1221.65 1743.08,1221.65 1743.67,1221.65 1744.26,1221.65 1744.84,1221.65 1745.43,1221.65 1746.02,1221.65 1746.6,1221.65 1747.19,1221.65 1747.78,1221.65 1748.36,1221.65 1748.95,1221.65 1749.53,1221.65 1750.12,1221.65 1750.71,1221.65 1751.29,1221.65 1751.88,1221.65 1752.47,1221.65 1753.05,1221.65 1753.64,1221.65 1754.23,1221.65 1754.81,1221.65 1755.4,1221.65 1755.99,1221.65 1756.57,1221.65 1757.16,1221.65 1757.74,1221.65 1758.33,1221.65 1758.92,1221.65 1759.5,1221.65 1760.09,1221.65 1760.68,1221.65 1761.26,1221.65 1761.85,1221.65 1762.44,1221.65 1763.02,1221.65 1763.61,1221.65 1764.19,1221.65 1764.78,1221.65 1765.37,1221.65 1765.95,1221.65 1766.54,1221.65 1767.13,1221.65 1767.71,1221.65 1768.3,1221.65 1768.89,1221.65 1769.47,1221.65 1770.06,1221.65 1770.65,1221.65 1771.23,1221.65 1771.82,1221.65 1772.4,1221.65 1772.99,1221.65 1773.58,1221.65 1774.16,1221.65 1774.75,1221.65 1775.34,1221.65 1775.92,1221.65 1776.51,1221.65 1777.1,1221.65 1777.68,1221.65 1778.27,1221.65 1778.86,1221.65 1779.44,1221.65 1780.03,1221.65 1780.61,1221.65 1781.2,1221.65 1781.79,1221.65 1782.37,1221.65 1782.96,1221.65 1783.55,1221.65 1784.13,1221.65 1784.72,1221.65 1785.31,1221.65 1785.89,1221.65 1786.48,1221.65 1787.06,1221.65 1787.65,1221.65 1788.24,1221.65 1788.82,1221.65 1789.41,1221.65 1790,1221.65 1790.58,1221.65 1791.17,1221.65 1791.76,1221.65 1792.34,1221.65 1792.93,1221.65 1793.52,1221.65 1794.1,1221.65 1794.69,1221.65 1795.27,1221.65 1795.86,1221.65 1796.45,1221.65 1797.03,1221.65 1797.62,1221.65 1798.21,1221.65 1798.79,1221.65 1799.38,1221.65 1799.97,1221.65 1800.55,1221.65 1801.14,1221.65 1801.73,1221.65 1802.31,1221.65 1802.9,1221.65 1803.48,1221.65 1804.07,1221.65 1804.66,1221.65 1805.24,1221.65 1805.83,1221.65 1806.42,1221.65 1807,1221.65 1807.59,1221.65 1808.18,1221.65 1808.76,1221.65 1809.35,1221.65 1809.94,1221.65 1810.52,1221.65 1811.11,1221.65 1811.69,1221.65 1812.28,1221.65 1812.87,1221.65 1813.45,1221.65 1814.04,1221.65 1814.63,1221.65 1815.21,1221.65 1815.8,1221.65 1816.39,1221.65 1816.97,1221.65 1817.56,1221.65 1818.14,1221.65 1818.73,1221.65 1819.32,1221.65 1819.9,1221.65 1820.49,1221.65 1821.08,1221.65 1821.66,1221.65 1822.25,1221.65 1822.84,1221.65 1823.42,1221.65 1824.01,1221.65 1824.6,1221.65 1825.18,1221.65 1825.77,1221.65 1826.35,1221.65 1826.94,1221.65 1827.53,1221.65 1828.11,1221.65 1828.7,1221.65 1829.29,1221.65 1829.87,1221.65 1830.46,1221.65 1831.05,1221.65 1831.63,1221.65 1832.22,1221.65 1832.81,1221.65 1833.39,1221.65 1833.98,1221.65 1834.56,1221.65 1835.15,1221.65 1835.74,1221.65 1836.32,1221.65 1836.91,1221.65 1837.5,1221.65 1838.08,1221.65 1838.67,1221.65 1839.26,1221.65 1839.84,1221.65 1840.43,1221.65 1841.01,1221.65 1841.6,1221.65 1842.19,1221.65 1842.77,1221.65 1843.36,1221.65 1843.95,1221.65 1844.53,1221.65 1845.12,1221.65 1845.71,1221.65 1846.29,1221.65 1846.88,1221.65 1847.47,1221.65 1848.05,1221.65 1848.64,1221.65 1849.22,1221.65 1849.81,1221.65 1850.4,1221.65 1850.98,1221.65 1851.57,1221.65 1852.16,1221.65 1852.74,1221.65 1853.33,1221.65 1853.92,1221.65 1854.5,1221.65 1855.09,1221.65 1855.68,1221.65 1856.26,1221.65 1856.85,1221.65 1857.43,1221.65 1858.02,1221.65 1858.61,1221.65 1859.19,1221.65 1859.78,1221.65 1860.37,1221.65 1860.95,1221.65 1861.54,1221.65 1862.13,1221.65 1862.71,1221.65 1863.3,1221.65 1863.88,1221.65 1864.47,1221.65 1865.06,1221.65 1865.64,1221.65 1866.23,1221.65 1866.82,1221.65 1867.4,1221.65 1867.99,1221.65 1868.58,1221.65 1869.16,1221.65 1869.75,1221.65 1870.34,1221.65 1870.92,1221.65 1871.51,1221.65 1872.09,1221.65 1872.68,1221.65 1873.27,1221.65 1873.85,1221.65 1874.44,1221.65 1875.03,1221.65 1875.61,1221.65 1876.2,1221.65 1876.79,1221.65 1877.37,1221.65 1877.96,1221.65 1878.55,1221.65 1879.13,1221.65 1879.72,1221.65 1880.3,1221.65 1880.89,1221.65 1881.48,1221.65 1882.06,1221.65 1882.65,1221.65 1883.24,1221.65 1883.82,1221.65 1884.41,1221.65 1885,1221.65 1885.58,1221.65 1886.17,1221.65 1886.76,1221.65 1887.34,1221.65 1887.93,1221.65 1888.51,1221.65 1889.1,1221.65 1889.69,1221.65 1890.27,1221.65 1890.86,1221.65 1891.45,1221.65 1892.03,1221.65 1892.62,1221.65 1893.21,1221.65 1893.79,1221.65 1894.38,1221.65 1894.96,1221.65 1895.55,1221.65 1896.14,1221.65 1896.72,1221.65 1897.31,1221.65 1897.9,1221.65 1898.48,1221.65 1899.07,1221.65 1899.66,1221.65 1900.24,1221.65 1900.83,1221.65 1901.42,1221.65 1902,1221.65 1902.59,1221.65 1903.17,1221.65 1903.76,1221.65 1904.35,1221.65 1904.93,1221.65 1905.52,1221.65 1906.11,1221.65 1906.69,1221.65 1907.28,1221.65 1907.87,1221.65 1908.45,1221.65 1909.04,1221.65 1909.63,1221.65 1910.21,1221.65 1910.8,1221.65 1911.38,1221.65 1911.97,1221.65 1912.56,1221.65 1913.14,1221.65 1913.73,1221.65 1914.32,1221.65 1914.9,1221.65 1915.49,1221.65 1916.08,1221.65 1916.66,1221.65 1917.25,1221.65 1917.83,1221.65 1918.42,1221.65 1919.01,1221.65 1919.59,1221.65 1920.18,1221.65 1920.77,1221.65 1921.35,1221.65 1921.94,1221.65 1922.53,1221.65 1923.11,1221.65 1923.7,1221.65 1924.29,1221.65 1924.87,1221.65 1925.46,1221.65 1926.04,1221.65 1926.63,1221.65 1927.22,1221.65 1927.8,1221.65 1928.39,1221.65 1928.98,1221.65 1929.56,1221.65 1930.15,1221.65 1930.74,1221.65 1931.32,1221.65 1931.91,1221.65 1932.5,1221.65 1933.08,1221.65 1933.67,1221.65 1934.25,1221.65 1934.84,1221.65 1935.43,1221.65 1936.01,1221.65 1936.6,1221.65 1937.19,1221.65 1937.77,1221.65 1938.36,1221.65 1938.95,1221.65 1939.53,1221.65 1940.12,1221.65 1940.71,1221.65 1941.29,1221.65 1941.88,1221.65 1942.46,1221.65 1943.05,1221.65 1943.64,1221.65 1944.22,1221.65 1944.81,1221.65 1945.4,1221.65 1945.98,1221.65 1946.57,1221.65 1947.16,1221.65 1947.74,1221.65 1948.33,1221.65 1948.91,1221.65 1949.5,1221.65 1950.09,1221.65 1950.67,1221.65 1951.26,1221.65 1951.85,1221.65 1952.43,1221.65 1953.02,1221.65 1953.61,1221.65 1954.19,1221.65 1954.78,1221.65 1955.37,1221.65 1955.95,1221.65 1956.54,1221.65 1957.12,1221.65 1957.71,1221.65 1958.3,1221.65 1958.88,1221.65 1959.47,1221.65 1960.06,1221.65 1960.64,1221.65 1961.23,1221.65 1961.82,1221.65 1962.4,1221.65 1962.99,1221.65 1963.58,1221.65 1964.16,1221.65 1964.75,1221.65 1965.33,1221.65 1965.92,1221.65 1966.51,1221.65 1967.09,1221.65 1967.68,1221.65 1968.27,1221.65 1968.85,1221.65 1969.44,1221.65 1970.03,1221.65 1970.61,1221.65 1971.2,1221.65 1971.78,1221.65 1972.37,1221.65 1972.96,1221.65 1973.54,1221.65 1974.13,1221.65 1974.72,1221.65 1975.3,1221.65 1975.89,1221.65 1976.48,1221.65 1977.06,1221.65 1977.65,1221.65 1978.24,1221.65 1978.82,1221.65 1979.41,1221.65 1979.99,1221.65 1980.58,1221.65 1981.17,1221.65 1981.75,1221.65 1982.34,1221.65 1982.93,1221.65 1983.51,1221.65 1984.1,1221.65 1984.69,1221.65 1985.27,1221.65 1985.86,1221.65 1986.45,1221.65 1987.03,1221.65 1987.62,1221.65 1988.2,1221.65 1988.79,1221.65 1989.38,1221.65 1989.96,1221.65 1990.55,1221.65 1991.14,1221.65 1991.72,1221.65 1992.31,1221.65 1992.9,1221.65 1993.48,1221.65 1994.07,1221.65 1994.65,1221.65 1995.24,1221.65 1995.83,1221.65 1996.41,1221.65 1997,1221.65 1997.59,1221.65 1998.17,1221.65 1998.76,1221.65 1999.35,1221.65 1999.93,1221.65 2000.52,1221.65 2001.11,1221.65 2001.69,1221.65 2002.28,1221.65 2002.86,1221.65 2003.45,1221.65 2004.04,1221.65 2004.62,1221.65 2005.21,1221.65 2005.8,1221.65 2006.38,1221.65 2006.97,1221.65 2007.56,1221.65 2008.14,1221.65 2008.73,1221.65 2009.32,1221.65 2009.9,1221.65 2010.49,1221.65 2011.07,1221.65 2011.66,1221.65 2012.25,1221.65 2012.83,1221.65 2013.42,1221.65 2014.01,1221.65 2014.59,1221.65 2015.18,1221.65 2015.77,1221.65 2016.35,1221.65 2016.94,1221.65 2017.53,1221.65 2018.11,1221.65 2018.7,1221.65 2019.28,1221.65 2019.87,1221.65 2020.46,1221.65 2021.04,1221.65 2021.63,1221.65 2022.22,1221.65 2022.8,1221.65 2023.39,1221.65 2023.98,1221.65 2024.56,1221.65 2025.15,1221.65 2025.73,1221.65 2026.32,1221.65 2026.91,1221.65 2027.49,1221.65 2028.08,1221.65 2028.67,1221.65 2029.25,1221.65 2029.84,1221.65 2030.43,1221.65 2031.01,1221.65 2031.6,1221.65 2032.19,1221.65 2032.77,1221.65 2033.36,1221.65 2033.94,1221.65 2034.53,1221.65 2035.12,1221.65 2035.7,1221.65 2036.29,1221.65 2036.88,1221.65 2037.46,1221.65 2038.05,1221.65 2038.64,1221.65 2039.22,1221.65 2039.81,1221.65 2040.4,1221.65 2040.98,1221.65 2041.57,1221.65 2042.15,1221.65 2042.74,1221.65 2043.33,1221.65 2043.91,1221.65 2044.5,1221.65 2045.09,1221.65 2045.67,1221.65 2046.26,1221.65 2046.85,1221.65 2047.43,1221.65 2048.02,1221.65 2048.6,1221.65 2049.19,1221.65 2049.78,1221.65 2050.36,1221.65 2050.95,1221.65 2051.54,1221.65 2052.12,1221.65 2052.71,1221.65 2053.3,1221.65 2053.88,1221.65 2054.47,1221.65 2055.06,1221.65 2055.64,1221.65 2056.23,1221.65 2056.81,1221.65 2057.4,1221.65 2057.99,1221.65 2058.57,1221.65 2059.16,1221.65 2059.75,1221.65 2060.33,1221.65 2060.92,1221.65 2061.51,1221.65 2062.09,1221.65 2062.68,1221.65 2063.27,1221.65 2063.85,1221.65 2064.44,1221.65 2065.02,1221.65 2065.61,1221.65 2066.2,1221.65 2066.78,1221.65 2067.37,1221.65 2067.96,1221.65 2068.54,1221.65 2069.13,1221.65 2069.72,1221.65 2070.3,1221.65 2070.89,1221.65 2071.48,1221.65 2072.06,1221.65 2072.65,1221.65 2073.23,1221.65 2073.82,1221.65 2074.41,1221.65 2074.99,1221.65 2075.58,1221.65 2076.17,1221.65 2076.75,1221.65 2077.34,1221.65 2077.93,1221.65 2078.51,1221.65 2079.1,1221.65 2079.68,1221.65 2080.27,1221.65 2080.86,1221.65 2081.44,1221.65 2082.03,1221.65 2082.62,1221.65 2083.2,1221.65 2083.79,1221.65 2084.38,1221.65 2084.96,1221.65 2085.55,1221.65 2086.14,1221.65 2086.72,1221.65 2087.31,1221.65 2087.89,1221.65 2088.48,1221.65 2089.07,1221.65 2089.65,1221.65 2090.24,1221.65 2090.83,1221.65 2091.41,1221.65 2092,1221.65 2092.59,1221.65 2093.17,1221.65 2093.76,1221.65 2094.35,1221.65 2094.93,1221.65 2095.52,1221.65 2096.1,1221.65 2096.69,1221.65 2097.28,1221.65 2097.86,1221.65 2098.45,1221.65 2099.04,1221.65 2099.62,1221.65 2100.21,1221.65 2100.8,1221.65 2101.38,1221.65 2101.97,1221.65 2102.55,1221.65 2103.14,1221.65 2103.73,1221.65 2104.31,1221.65 2104.9,1221.65 2105.49,1221.65 2106.07,1221.65 2106.66,1221.65 2107.25,1221.65 2107.83,1221.65 2108.42,1221.65 2109.01,1221.65 2109.59,1221.65 2110.18,1221.65 2110.76,1221.65 2111.35,1221.65 2111.94,1221.65 2112.52,1221.65 2113.11,1221.65 2113.7,1221.65 2114.28,1221.65 2114.87,1221.65 2115.46,1221.65 2116.04,1221.65 2116.63,1221.65 2117.22,1221.65 2117.8,1221.65 2118.39,1221.65 2118.97,1221.65 2119.56,1221.65 2120.15,1221.65 2120.73,1221.65 2121.32,1221.65 2121.91,1221.65 2122.49,1221.65 2123.08,1221.65 2123.67,1221.65 2124.25,1221.65 2124.84,1221.65 2125.42,1221.65 2126.01,1221.65 2126.6,1221.65 2127.18,1221.65 2127.77,1221.65 2128.36,1221.65 2128.94,1221.65 2129.53,1221.65 2130.12,1221.65 2130.7,1221.65 2131.29,1221.65 2131.88,1221.65 2132.46,1221.65 2133.05,1221.65 2133.63,1221.65 2134.22,1221.65 2134.81,1221.65 2135.39,1221.65 2135.98,1221.65 2136.57,1221.65 2137.15,1221.65 2137.74,1221.65 2138.33,1221.65 2138.91,1221.65 2139.5,1221.65 2140.09,1221.65 2140.67,1221.65 2141.26,1221.65 2141.84,1221.65 2142.43,1221.65 2143.02,1221.65 2143.6,1221.65 2144.19,1221.65 2144.78,1221.65 2145.36,1221.65 2145.95,1221.65 2146.54,1221.65 2147.12,1221.65 2147.71,1221.65 2148.3,1221.65 2148.88,1221.65 2149.47,1221.65 2150.05,1221.65 2150.64,1221.65 2151.23,1221.65 2151.81,1221.65 2152.4,1221.65 2152.99,1221.65 2153.57,1221.65 2154.16,1221.65 2154.75,1221.65 2155.33,1221.65 2155.92,1221.65 2156.5,1221.65 2157.09,1221.65 2157.68,1221.65 2158.26,1221.65 \"/>\n<path clip-path=\"url(#clip082)\" d=\"M986.025 1221.47 L986.612 1221.47 L987.198 1221.47 L987.785 1221.47 L988.371 1221.47 L988.957 1221.47 L989.544 1221.47 L990.13 1221.47 L990.717 1221.47 L991.303 1221.47 L991.889 1221.47 L992.476 1221.47 L993.062 1221.47 L993.649 1221.47 L994.235 1221.47 L994.822 1221.47 L995.408 1221.47 L995.994 1221.47 L996.581 1221.47 L997.167 1221.47 L997.754 1221.47 L998.34 1221.47 L998.926 1221.47 L999.513 1221.47 L1000.1 1221.47 L1000.69 1221.47 L1001.27 1221.47 L1001.86 1221.47 L1002.44 1221.47 L1003.03 1221.47 L1003.62 1221.47 L1004.2 1221.47 L1004.79 1221.47 L1005.38 1221.47 L1005.96 1221.47 L1006.55 1221.47 L1007.14 1221.47 L1007.72 1221.47 L1008.31 1221.47 L1008.9 1221.47 L1009.48 1221.47 L1010.07 1221.47 L1010.65 1221.47 L1011.24 1221.47 L1011.83 1221.47 L1012.41 1221.47 L1013 1221.47 L1013.59 1221.47 L1014.17 1221.47 L1014.76 1221.47 L1015.35 1221.47 L1015.93 1221.47 L1016.52 1221.47 L1017.11 1221.47 L1017.69 1221.47 L1018.28 1221.47 L1018.86 1221.47 L1019.45 1221.47 L1020.04 1221.47 L1020.62 1221.47 L1021.21 1221.47 L1021.8 1221.47 L1022.38 1221.47 L1022.97 1221.47 L1023.56 1221.47 L1024.14 1221.47 L1024.73 1221.47 L1025.32 1221.47 L1025.9 1221.47 L1026.49 1221.47 L1027.07 1221.47 L1027.66 1221.47 L1028.25 1221.47 L1028.83 1221.47 L1029.42 1221.47 L1030.01 1221.47 L1030.59 1221.47 L1031.18 1221.47 L1031.77 1221.47 L1032.35 1221.47 L1032.94 1221.47 L1033.52 1221.47 L1034.11 1221.47 L1034.7 1221.47 L1035.28 1221.47 L1035.87 1221.47 L1036.46 1221.47 L1037.04 1221.47 L1037.63 1221.47 L1038.22 1221.47 L1038.8 1221.47 L1039.39 1221.47 L1039.98 1221.47 L1040.56 1221.47 L1041.15 1221.47 L1041.73 1221.47 L1042.32 1221.47 L1042.91 1221.47 L1043.49 1221.47 L1044.08 1221.47 L1044.67 1221.47 L1045.25 1221.47 L1045.84 1221.47 L1046.43 1221.47 L1047.01 1221.47 L1047.6 1221.47 L1048.19 1221.47 L1048.77 1221.47 L1049.36 1221.47 L1049.94 1221.47 L1050.53 1221.47 L1051.12 1221.47 L1051.7 1221.47 L1052.29 1221.47 L1052.88 1221.47 L1053.46 1221.47 L1054.05 1221.47 L1054.64 1221.47 L1055.22 1221.47 L1055.81 1221.47 L1056.39 1221.47 L1056.98 1221.47 L1057.57 1221.47 L1058.15 1221.47 L1058.74 1221.47 L1059.33 1221.47 L1059.91 1221.47 L1060.5 1221.47 L1061.09 1221.47 L1061.67 1221.47 L1062.26 1221.47 L1062.85 1221.47 L1063.43 1221.47 L1064.02 1221.47 L1064.6 1221.47 L1065.19 1221.47 L1065.78 1221.47 L1066.36 1221.47 L1066.95 1221.47 L1067.54 1221.47 L1068.12 1221.47 L1068.71 1221.47 L1069.3 1221.47 L1069.88 1221.47 L1070.47 1221.47 L1071.06 1221.47 L1071.64 1221.47 L1072.23 1221.47 L1072.81 1221.47 L1073.4 1221.47 L1073.99 1221.47 L1074.57 1221.47 L1075.16 1221.47 L1075.75 1221.47 L1076.33 1221.47 L1076.92 1221.47 L1077.51 1221.47 L1078.09 1221.47 L1078.68 1221.47 L1079.26 1221.47 L1079.85 1221.47 L1080.44 1221.47 L1081.02 1221.47 L1081.61 1221.47 L1082.2 1221.47 L1082.78 1221.47 L1083.37 1221.47 L1083.96 1221.47 L1084.54 1221.47 L1085.13 1221.47 L1085.72 1221.47 L1086.3 1221.47 L1086.89 1221.47 L1087.47 1221.47 L1088.06 1221.47 L1088.65 1221.47 L1089.23 1221.47 L1089.82 1221.47 L1090.41 1221.47 L1090.99 1221.47 L1091.58 1221.47 L1092.17 1221.47 L1092.75 1221.47 L1093.34 1221.47 L1093.93 1221.47 L1094.51 1221.47 L1095.1 1221.47 L1095.68 1221.47 L1096.27 1221.47 L1096.86 1221.47 L1097.44 1221.47 L1098.03 1221.47 L1098.62 1221.47 L1099.2 1221.47 L1099.79 1221.47 L1100.38 1221.47 L1100.96 1221.47 L1101.55 1221.47 L1102.14 1221.47 L1102.72 1221.47 L1103.31 1221.47 L1103.89 1221.47 L1104.48 1221.47 L1105.07 1221.47 L1105.65 1221.47 L1106.24 1221.47 L1106.83 1221.47 L1107.41 1221.47 L1108 1221.47 L1108.59 1221.47 L1109.17 1221.47 L1109.76 1221.47 L1110.34 1221.47 L1110.93 1221.47 L1111.52 1221.47 L1112.1 1221.47 L1112.69 1221.47 L1113.28 1221.47 L1113.86 1221.47 L1114.45 1221.47 L1115.04 1221.47 L1115.62 1221.47 L1116.21 1221.47 L1116.8 1221.47 L1117.38 1221.47 L1117.97 1221.47 L1118.55 1221.47 L1119.14 1221.47 L1119.73 1221.47 L1120.31 1221.47 L1120.9 1221.47 L1121.49 1221.47 L1122.07 1221.47 L1122.66 1221.47 L1123.25 1221.47 L1123.83 1221.47 L1124.42 1221.47 L1125.01 1221.47 L1125.59 1221.47 L1126.18 1221.47 L1126.76 1221.47 L1127.35 1221.47 L1127.94 1221.47 L1128.52 1221.47 L1129.11 1221.47 L1129.7 1221.47 L1130.28 1221.47 L1130.87 1221.47 L1131.46 1221.47 L1132.04 1221.47 L1132.63 1221.47 L1133.21 1221.47 L1133.8 1221.47 L1134.39 1221.47 L1134.97 1221.47 L1135.56 1221.47 L1136.15 1221.47 L1136.73 1221.47 L1137.32 1221.47 L1137.91 1221.47 L1138.49 1221.47 L1139.08 1221.47 L1139.67 1221.47 L1140.25 1221.47 L1140.84 1221.47 L1141.42 1221.47 L1142.01 1221.47 L1142.6 1221.47 L1143.18 1221.47 L1143.77 1221.47 L1144.36 1221.47 L1144.94 1221.47 L1145.53 1221.47 L1146.12 1221.47 L1146.7 1221.47 L1147.29 1221.47 L1147.88 1221.47 L1148.46 1221.47 L1149.05 1221.47 L1149.63 1221.47 L1150.22 1221.47 L1150.81 1221.47 L1151.39 1221.47 L1151.98 1221.47 L1152.57 1221.47 L1153.15 1221.47 L1153.74 1221.47 L1154.33 1221.47 L1154.91 1221.47 L1155.5 1221.47 L1156.09 1221.47 L1156.67 1221.47 L1157.26 1221.47 L1157.84 1221.47 L1158.43 1221.47 L1159.02 1221.47 L1159.6 1221.47 L1160.19 1221.47 L1160.78 1221.47 L1161.36 1221.47 L1161.95 1221.47 L1162.54 1221.47 L1163.12 1221.47 L1163.71 1221.47 L1164.29 1221.47 L1164.88 1221.47 L1165.47 1221.47 L1166.05 1221.47 L1166.64 1221.47 L1167.23 1221.47 L1167.81 1221.47 L1168.4 1221.47 L1168.99 1221.47 L1169.57 1221.47 L1170.16 1221.47 L1170.75 1221.47 L1171.33 1221.47 L1171.92 1221.47 L1172.5 1221.47 L1173.09 1221.47 L1173.68 1221.47 L1174.26 1221.47 L1174.85 1221.47 L1175.44 1221.47 L1176.02 1221.47 L1176.61 1221.47 L1177.2 1221.47 L1177.78 1221.47 L1178.37 1221.47 L1178.96 1221.47 L1179.54 1221.47 L1180.13 1221.47 L1180.71 1221.47 L1181.3 1221.47 L1181.89 1221.47 L1182.47 1221.47 L1183.06 1221.47 L1183.65 1221.47 L1184.23 1221.47 L1184.82 1221.47 L1185.41 1221.47 L1185.99 1221.47 L1186.58 1221.47 L1187.16 1221.47 L1187.75 1221.47 L1188.34 1221.47 L1188.92 1221.47 L1189.51 1221.47 L1190.1 1221.47 L1190.68 1221.47 L1191.27 1221.47 L1191.86 1221.47 L1192.44 1221.47 L1193.03 1221.47 L1193.62 1221.47 L1194.2 1221.47 L1194.79 1221.47 L1195.37 1221.47 L1195.96 1221.47 L1196.55 1221.47 L1197.13 1221.47 L1197.72 1221.47 L1198.31 1221.47 L1198.89 1221.47 L1199.48 1221.47 L1200.07 1221.47 L1200.65 1221.47 L1201.24 1221.47 L1201.83 1221.47 L1202.41 1221.47 L1203 1221.47 L1203.58 1221.47 L1204.17 1221.47 L1204.76 1221.47 L1205.34 1221.47 L1205.93 1221.47 L1206.52 1221.47 L1207.1 1221.47 L1207.69 1221.47 L1208.28 1221.47 L1208.86 1221.47 L1209.45 1221.47 L1210.03 1221.47 L1210.62 1221.47 L1211.21 1221.47 L1211.79 1221.47 L1212.38 1221.47 L1212.97 1221.47 L1213.55 1221.47 L1214.14 1221.47 L1214.73 1221.47 L1215.31 1221.47 L1215.9 1221.47 L1216.49 1221.47 L1217.07 1221.47 L1217.66 1221.47 L1218.24 1221.47 L1218.83 1221.47 L1219.42 1221.47 L1220 1221.47 L1220.59 1221.47 L1221.18 1221.47 L1221.76 1221.47 L1222.35 1221.47 L1222.94 1221.47 L1223.52 1221.47 L1224.11 1221.47 L1224.7 1221.47 L1225.28 1221.47 L1225.87 1221.47 L1226.45 1221.47 L1227.04 1221.47 L1227.63 1221.47 L1228.21 1221.47 L1228.8 1221.47 L1229.39 1221.47 L1229.97 1221.47 L1230.56 1221.47 L1231.15 1221.47 L1231.73 1221.47 L1232.32 1221.47 L1232.91 1221.47 L1233.49 1221.47 L1234.08 1221.47 L1234.66 1221.47 L1235.25 1221.47 L1235.84 1221.47 L1236.42 1221.47 L1237.01 1221.47 L1237.6 1221.47 L1238.18 1221.47 L1238.77 1221.47 L1239.36 1221.47 L1239.94 1221.47 L1240.53 1221.47 L1241.11 1221.47 L1241.7 1221.47 L1242.29 1221.47 L1242.87 1221.47 L1243.46 1221.47 L1244.05 1221.47 L1244.63 1221.47 L1245.22 1221.47 L1245.81 1221.47 L1246.39 1221.47 L1246.98 1221.47 L1247.57 1221.47 L1248.15 1221.47 L1248.74 1221.47 L1249.32 1221.47 L1249.91 1221.47 L1250.5 1221.47 L1251.08 1221.47 L1251.67 1221.47 L1252.26 1221.47 L1252.84 1221.47 L1253.43 1221.47 L1254.02 1221.47 L1254.6 1221.47 L1255.19 1221.47 L1255.78 1221.47 L1256.36 1221.47 L1256.95 1221.47 L1257.53 1221.47 L1258.12 1221.47 L1258.71 1221.47 L1259.29 1221.47 L1259.88 1221.47 L1260.47 1221.47 L1261.05 1221.47 L1261.64 1221.47 L1262.23 1221.47 L1262.81 1221.47 L1263.4 1221.47 L1263.98 1221.47 L1264.57 1221.47 L1265.16 1221.47 L1265.74 1221.47 L1266.33 1221.47 L1266.92 1221.47 L1267.5 1221.47 L1268.09 1221.47 L1268.68 1221.47 L1269.26 1221.47 L1269.85 1221.47 L1270.44 1221.47 L1271.02 1221.47 L1271.61 1221.47 L1272.19 1221.47 L1272.78 1221.47 L1273.37 1221.47 L1273.95 1221.47 L1274.54 1221.47 L1275.13 1221.47 L1275.71 1221.47 L1276.3 1221.47 L1276.89 1221.47 L1277.47 1221.47 L1278.06 1221.47 L1278.65 1221.47 L1279.23 1221.47 L1279.82 1221.47 L1280.4 1221.47 L1280.99 1221.47 L1281.58 1221.47 L1282.16 1221.47 L1282.75 1221.47 L1283.34 1221.47 L1283.92 1221.47 L1284.51 1221.47 L1285.1 1221.47 L1285.68 1221.47 L1286.27 1221.47 L1286.86 1221.47 L1287.44 1221.47 L1288.03 1221.47 L1288.61 1221.47 L1289.2 1221.47 L1289.79 1221.47 L1290.37 1221.47 L1290.96 1221.47 L1291.55 1221.47 L1292.13 1221.47 L1292.72 1221.47 L1293.31 1221.47 L1293.89 1221.47 L1294.48 1221.47 L1295.06 1221.47 L1295.65 1221.47 L1296.24 1221.47 L1296.82 1221.47 L1297.41 1221.47 L1298 1221.47 L1298.58 1221.47 L1299.17 1221.47 L1299.76 1221.47 L1300.34 1221.47 L1300.93 1221.47 L1301.52 1221.47 L1302.1 1221.47 L1302.69 1221.47 L1303.27 1221.47 L1303.86 1221.47 L1304.45 1221.47 L1305.03 1221.47 L1305.62 1221.47 L1306.21 1221.47 L1306.79 1221.47 L1307.38 1221.47 L1307.97 1221.47 L1308.55 1221.47 L1309.14 1221.47 L1309.73 1221.47 L1310.31 1221.47 L1310.9 1221.47 L1311.48 1221.47 L1312.07 1221.47 L1312.66 1221.47 L1313.24 1221.47 L1313.83 1221.47 L1314.42 1221.47 L1315 1221.47 L1315.59 1221.47 L1316.18 1221.47 L1316.76 1221.47 L1317.35 1221.47 L1317.93 1221.47 L1318.52 1221.47 L1319.11 1221.47 L1319.69 1221.47 L1320.28 1221.47 L1320.87 1221.47 L1321.45 1221.47 L1322.04 1221.47 L1322.63 1221.47 L1323.21 1221.47 L1323.8 1221.47 L1324.39 1221.47 L1324.97 1221.47 L1325.56 1221.47 L1326.14 1221.47 L1326.73 1221.47 L1327.32 1221.47 L1327.9 1221.47 L1328.49 1221.47 L1329.08 1221.47 L1329.66 1221.47 L1330.25 1221.47 L1330.84 1221.47 L1331.42 1221.47 L1332.01 1221.47 L1332.6 1221.47 L1333.18 1221.47 L1333.77 1221.47 L1334.35 1221.47 L1334.94 1221.47 L1335.53 1221.47 L1336.11 1221.47 L1336.7 1221.47 L1337.29 1221.47 L1337.87 1221.47 L1338.46 1221.47 L1339.05 1221.47 L1339.63 1221.47 L1340.22 1221.47 L1340.8 1221.47 L1341.39 1221.47 L1341.98 1221.47 L1342.56 1221.47 L1343.15 1221.47 L1343.74 1221.47 L1344.32 1221.47 L1344.91 1221.47 L1345.5 1221.47 L1346.08 1221.47 L1346.67 1221.47 L1347.26 1221.47 L1347.84 1221.47 L1348.43 1221.47 L1349.01 1221.47 L1349.6 1221.47 L1350.19 1221.47 L1350.77 1221.47 L1351.36 1221.47 L1351.95 1221.47 L1352.53 1221.47 L1353.12 1221.47 L1353.71 1221.47 L1354.29 1221.47 L1354.88 1221.47 L1355.47 1221.47 L1356.05 1221.47 L1356.64 1221.47 L1357.22 1221.47 L1357.81 1221.47 L1358.4 1221.47 L1358.98 1221.47 L1359.57 1221.47 L1360.16 1221.47 L1360.74 1221.47 L1361.33 1221.47 L1361.92 1221.47 L1362.5 1221.47 L1363.09 1221.47 L1363.68 1221.47 L1364.26 1221.47 L1364.85 1221.47 L1365.43 1221.47 L1366.02 1221.47 L1366.61 1221.47 L1367.19 1221.47 L1367.78 1221.47 L1368.37 1221.47 L1368.95 1221.47 L1369.54 1221.47 L1370.13 1221.47 L1370.71 1221.47 L1371.3 1221.47 L1371.88 1221.47 L1372.47 1221.47 L1373.06 1221.47 L1373.64 1221.47 L1374.23 1221.47 L1374.82 1221.47 L1375.4 1221.47 L1375.99 1221.47 L1376.58 1221.47 L1377.16 1221.47 L1377.75 1221.47 L1378.34 1221.47 L1378.92 1221.47 L1379.51 1221.47 L1380.09 1221.47 L1380.68 1221.47 L1381.27 1221.47 L1381.85 1221.47 L1382.44 1221.47 L1383.03 1221.47 L1383.61 1221.47 L1384.2 1221.47 L1384.79 1221.47 L1385.37 1221.47 L1385.96 1221.47 L1386.55 1221.47 L1387.13 1221.47 L1387.72 1221.47 L1388.3 1221.47 L1388.89 1221.47 L1389.48 1221.47 L1390.06 1221.47 L1390.65 1221.47 L1391.24 1221.47 L1391.82 1221.47 L1392.41 1221.47 L1393 1221.47 L1393.58 1221.47 L1394.17 1221.47 L1394.75 1221.47 L1395.34 1221.47 L1395.93 1221.47 L1396.51 1221.47 L1397.1 1221.47 L1397.69 1221.47 L1398.27 1221.47 L1398.86 1221.47 L1399.45 1221.47 L1400.03 1221.47 L1400.62 1221.47 L1401.21 1221.47 L1401.79 1221.47 L1402.38 1221.47 L1402.96 1221.47 L1403.55 1221.47 L1404.14 1221.47 L1404.72 1221.47 L1405.31 1221.47 L1405.9 1221.47 L1406.48 1221.47 L1407.07 1221.47 L1407.66 1221.47 L1408.24 1221.47 L1408.83 1221.47 L1409.42 1221.47 L1410 1221.47 L1410.59 1221.47 L1411.17 1221.47 L1411.76 1221.47 L1412.35 1221.47 L1412.93 1221.47 L1413.52 1221.47 L1414.11 1221.47 L1414.69 1221.47 L1415.28 1221.47 L1415.87 1221.47 L1416.45 1221.47 L1417.04 1221.47 L1417.63 1221.47 L1418.21 1221.47 L1418.8 1221.47 L1419.38 1221.47 L1419.97 1221.47 L1420.56 1221.47 L1421.14 1221.47 L1421.73 1221.47 L1422.32 1221.47 L1422.9 1221.47 L1423.49 1221.47 L1424.08 1221.47 L1424.66 1221.47 L1425.25 1221.47 L1425.83 1221.47 L1426.42 1221.47 L1427.01 1221.47 L1427.59 1221.47 L1428.18 1221.47 L1428.77 1221.47 L1429.35 1221.47 L1429.94 1221.47 L1430.53 1221.47 L1431.11 1221.47 L1431.7 1221.47 L1432.29 1221.47 L1432.87 1221.47 L1433.46 1221.47 L1434.04 1221.47 L1434.63 1221.47 L1435.22 1221.47 L1435.8 1221.47 L1436.39 1221.47 L1436.98 1221.47 L1437.56 1221.47 L1438.15 1221.47 L1438.74 1221.47 L1439.32 1221.47 L1439.91 1221.47 L1440.5 1221.47 L1441.08 1221.47 L1441.67 1221.47 L1442.25 1221.47 L1442.84 1221.47 L1443.43 1221.47 L1444.01 1221.47 L1444.6 1221.47 L1445.19 1221.47 L1445.77 1221.47 L1446.36 1221.47 L1446.95 1221.47 L1447.53 1221.47 L1448.12 1221.47 L1448.7 1221.47 L1449.29 1221.47 L1449.88 1221.47 L1450.46 1221.47 L1451.05 1221.47 L1451.64 1221.47 L1452.22 1221.47 L1452.81 1221.47 L1453.4 1221.47 L1453.98 1221.47 L1454.57 1221.47 L1455.16 1221.47 L1455.74 1221.47 L1456.33 1221.47 L1456.91 1221.47 L1457.5 1221.47 L1458.09 1221.47 L1458.67 1221.47 L1459.26 1221.47 L1459.85 1221.47 L1460.43 1221.47 L1461.02 1221.47 L1461.61 1221.47 L1462.19 1221.47 L1462.78 1221.47 L1463.37 1221.47 L1463.95 1221.47 L1464.54 1221.47 L1465.12 1221.47 L1465.71 1221.47 L1466.3 1221.47 L1466.88 1221.47 L1467.47 1221.47 L1468.06 1221.47 L1468.64 1221.47 L1469.23 1221.47 L1469.82 1221.47 L1470.4 1221.47 L1470.99 1221.47 L1471.57 1221.47 L1472.16 1221.47 L1472.75 1221.47 L1473.33 1221.47 L1473.92 1221.47 L1474.51 1221.47 L1475.09 1221.47 L1475.68 1221.47 L1476.27 1221.47 L1476.85 1221.47 L1477.44 1221.47 L1478.03 1221.47 L1478.61 1221.47 L1479.2 1221.47 L1479.78 1221.47 L1480.37 1221.47 L1480.96 1221.47 L1481.54 1221.47 L1482.13 1221.47 L1482.72 1221.47 L1483.3 1221.47 L1483.89 1221.47 L1484.48 1221.47 L1485.06 1221.47 L1485.65 1221.47 L1486.24 1221.47 L1486.82 1221.47 L1487.41 1221.47 L1487.99 1221.47 L1488.58 1221.47 L1489.17 1221.47 L1489.75 1221.47 L1490.34 1221.47 L1490.93 1221.47 L1491.51 1221.47 L1492.1 1221.47 L1492.69 1221.47 L1493.27 1221.47 L1493.86 1221.47 L1494.45 1221.47 L1495.03 1221.47 L1495.62 1221.47 L1496.2 1221.47 L1496.79 1221.47 L1497.38 1221.47 L1497.96 1221.47 L1498.55 1221.47 L1499.14 1221.47 L1499.72 1221.47 L1500.31 1221.47 L1500.9 1221.47 L1501.48 1221.47 L1502.07 1221.47 L1502.65 1221.47 L1503.24 1221.47 L1503.83 1221.47 L1504.41 1221.47 L1505 1221.47 L1505.59 1221.47 L1506.17 1221.47 L1506.76 1221.47 L1507.35 1221.47 L1507.93 1221.47 L1508.52 1221.47 L1509.11 1221.47 L1509.69 1221.47 L1510.28 1221.47 L1510.86 1221.47 L1511.45 1221.47 L1512.04 1221.47 L1512.62 1221.47 L1513.21 1221.47 L1513.8 1221.47 L1514.38 1221.47 L1514.97 1221.47 L1515.56 1221.47 L1516.14 1221.47 L1516.73 1221.47 L1517.32 1221.47 L1517.9 1221.47 L1518.49 1221.47 L1519.07 1221.47 L1519.66 1221.47 L1520.25 1221.47 L1520.83 1221.47 L1521.42 1221.47 L1522.01 1221.47 L1522.59 1221.47 L1523.18 1221.47 L1523.77 1221.47 L1524.35 1221.47 L1524.94 1221.47 L1525.52 1221.47 L1526.11 1221.47 L1526.7 1221.47 L1527.28 1221.47 L1527.87 1221.47 L1528.46 1221.47 L1529.04 1221.47 L1529.63 1221.47 L1530.22 1221.47 L1530.8 1221.47 L1531.39 1221.47 L1531.98 1221.47 L1532.56 1221.47 L1533.15 1221.47 L1533.73 1221.47 L1534.32 1221.47 L1534.91 1221.47 L1535.49 1221.47 L1536.08 1221.47 L1536.67 1221.47 L1537.25 1221.47 L1537.84 1221.47 L1538.43 1221.47 L1539.01 1221.47 L1539.6 1221.47 L1540.19 1221.47 L1540.77 1221.47 L1541.36 1221.47 L1541.94 1221.47 L1542.53 1221.47 L1543.12 1221.47 L1543.7 1221.47 L1544.29 1221.47 L1544.88 1221.47 L1545.46 1221.47 L1546.05 1221.47 L1546.64 1221.47 L1547.22 1221.47 L1547.81 1221.47 L1548.4 1221.47 L1548.98 1221.47 L1549.57 1221.47 L1550.15 1221.47 L1550.74 1221.47 L1551.33 1221.47 L1551.91 1221.47 L1552.5 1221.47 L1553.09 1221.47 L1553.67 1221.47 L1554.26 1221.47 L1554.85 1221.47 L1555.43 1221.47 L1556.02 1221.47 L1556.6 1221.47 L1557.19 1221.47 L1557.78 1221.47 L1558.36 1221.47 L1558.95 1221.47 L1559.54 1221.47 L1560.12 1221.47 L1560.71 1221.47 L1561.3 1221.47 L1561.88 1221.47 L1562.47 1221.47 L1563.06 1221.47 L1563.64 1221.47 L1564.23 1221.47 L1564.81 1221.47 L1565.4 1221.47 L1565.99 1221.47 L1566.57 1221.47 L1567.16 1221.47 L1567.75 1221.47 L1568.33 1221.47 L1568.92 1221.47 L1569.51 1221.47 L1570.09 1221.47 L1570.68 1221.47 L1571.27 1221.47 L1571.85 1221.47 L1572.44 1221.47 L1573.02 1221.47 L1573.61 1221.47 L1574.2 1221.47 L1574.78 1221.47 L1575.37 1221.47 L1575.96 1221.47 L1576.54 1221.47 L1577.13 1221.47 L1577.72 1221.47 L1578.3 1221.47 L1578.89 1221.47 L1579.47 1221.47 L1580.06 1221.47 L1580.65 1221.47 L1581.23 1221.47 L1581.82 1221.47 L1582.41 1221.47 L1582.99 1221.47 L1583.58 1221.47 L1584.17 1221.47 L1584.75 1221.47 L1585.34 1221.47 L1585.93 1221.47 L1586.51 1221.47 L1587.1 1221.47 L1587.68 1221.47 L1588.27 1221.47 L1588.86 1221.47 L1589.44 1221.47 L1590.03 1221.47 L1590.62 1221.47 L1591.2 1221.47 L1591.79 1221.47 L1592.38 1221.47 L1592.96 1221.47 L1593.55 1221.47 L1594.14 1221.47 L1594.72 1221.47 L1595.31 1221.47 L1595.89 1221.47 L1596.48 1221.47 L1597.07 1221.47 L1597.65 1221.47 L1598.24 1221.47 L1598.83 1221.47 L1599.41 1221.47 L1600 1221.47 L1600.59 1221.47 L1601.17 1221.47 L1601.76 1221.47 L1602.34 1221.47 L1602.93 1221.47 L1603.52 1221.47 L1604.1 1221.47 L1604.69 1221.47 L1605.28 1221.47 L1605.86 1221.47 L1606.45 1221.47 L1607.04 1221.47 L1607.62 1221.47 L1608.21 1221.47 L1608.8 1221.47 L1609.38 1221.47 L1609.97 1221.47 L1610.55 1221.47 L1611.14 1221.47 L1611.73 1221.47 L1612.31 1221.47 L1612.9 1221.47 L1613.49 1221.47 L1614.07 1221.47 L1614.66 1221.47 L1615.25 1221.47 L1615.83 1221.47 L1616.42 1221.47 L1617.01 1221.47 L1617.59 1221.47 L1618.18 1221.47 L1618.76 1221.47 L1619.35 1221.47 L1619.94 1221.47 L1620.52 1221.47 L1621.11 1221.47 L1621.7 1221.47 L1622.28 1221.47 L1622.87 1221.47 L1623.46 1221.47 L1624.04 1221.47 L1624.63 1221.47 L1625.22 1221.47 L1625.8 1221.47 L1626.39 1221.47 L1626.97 1221.47 L1627.56 1221.47 L1628.15 1221.47 L1628.73 1221.47 L1629.32 1221.47 L1629.91 1221.47 L1630.49 1221.47 L1631.08 1221.47 L1631.67 1221.47 L1632.25 1221.47 L1632.84 1221.47 L1633.42 1221.47 L1634.01 1221.47 L1634.6 1221.47 L1635.18 1221.47 L1635.77 1221.47 L1636.36 1221.47 L1636.94 1221.47 L1637.53 1221.47 L1638.12 1221.47 L1638.7 1221.47 L1639.29 1221.47 L1639.88 1221.47 L1640.46 1221.47 L1641.05 1221.47 L1641.63 1221.47 L1642.22 1221.47 L1642.81 1221.47 L1643.39 1221.47 L1643.98 1221.47 L1644.57 1221.47 L1645.15 1221.47 L1645.74 1221.47 L1646.33 1221.47 L1646.91 1221.47 L1647.5 1221.47 L1648.09 1221.47 L1648.67 1221.47 L1649.26 1221.47 L1649.84 1221.47 L1650.43 1221.47 L1651.02 1221.47 L1651.6 1221.47 L1652.19 1221.47 L1652.78 1221.47 L1653.36 1221.47 L1653.95 1221.47 L1654.54 1221.47 L1655.12 1221.47 L1655.71 1221.47 L1656.29 1221.47 L1656.88 1221.47 L1657.47 1221.47 L1658.05 1221.47 L1658.64 1221.47 L1659.23 1221.47 L1659.81 1221.47 L1660.4 1221.47 L1660.99 1221.47 L1661.57 1221.47 L1662.16 1221.47 L1662.75 1221.47 L1663.33 1221.47 L1663.92 1221.47 L1664.5 1221.47 L1665.09 1221.47 L1665.68 1221.47 L1666.26 1221.47 L1666.85 1221.47 L1667.44 1221.47 L1668.02 1221.47 L1668.61 1221.47 L1669.2 1221.47 L1669.78 1221.47 L1670.37 1221.47 L1670.96 1221.47 L1671.54 1221.47 L1672.13 1221.47 L1672.71 1221.47 L1673.3 1221.47 L1673.89 1221.47 L1674.47 1221.47 L1675.06 1221.47 L1675.65 1221.47 L1676.23 1221.47 L1676.82 1221.47 L1677.41 1221.47 L1677.99 1221.47 L1678.58 1221.47 L1679.17 1221.47 L1679.75 1221.47 L1680.34 1221.47 L1680.92 1221.47 L1681.51 1221.47 L1682.1 1221.47 L1682.68 1221.47 L1683.27 1221.47 L1683.86 1221.47 L1684.44 1221.47 L1685.03 1221.47 L1685.62 1221.47 L1686.2 1221.47 L1686.79 1221.47 L1687.37 1221.47 L1687.96 1221.47 L1688.55 1221.47 L1689.13 1221.47 L1689.72 1221.47 L1690.31 1221.47 L1690.89 1221.47 L1691.48 1221.47 L1692.07 1221.47 L1692.65 1221.47 L1693.24 1221.47 L1693.83 1221.47 L1694.41 1221.47 L1695 1221.47 L1695.58 1221.47 L1696.17 1221.47 L1696.76 1221.47 L1697.34 1221.47 L1697.93 1221.47 L1698.52 1221.47 L1699.1 1221.47 L1699.69 1221.47 L1700.28 1221.47 L1700.86 1221.47 L1701.45 1221.47 L1702.04 1221.47 L1702.62 1221.47 L1703.21 1221.47 L1703.79 1221.47 L1704.38 1221.47 L1704.97 1221.47 L1705.55 1221.47 L1706.14 1221.47 L1706.73 1221.47 L1707.31 1221.47 L1707.9 1221.47 L1708.49 1221.47 L1709.07 1221.47 L1709.66 1221.47 L1710.24 1221.47 L1710.83 1221.47 L1711.42 1221.47 L1712 1221.47 L1712.59 1221.47 L1713.18 1221.47 L1713.76 1221.47 L1714.35 1221.47 L1714.94 1221.47 L1715.52 1221.47 L1716.11 1221.47 L1716.7 1221.47 L1717.28 1221.47 L1717.87 1221.47 L1718.45 1221.47 L1719.04 1221.47 L1719.63 1221.47 L1720.21 1221.47 L1720.8 1221.47 L1721.39 1221.47 L1721.97 1221.47 L1722.56 1221.47 L1723.15 1221.47 L1723.73 1221.47 L1724.32 1221.47 L1724.91 1221.47 L1725.49 1221.47 L1726.08 1221.47 L1726.66 1221.47 L1727.25 1221.47 L1727.84 1221.47 L1728.42 1221.47 L1729.01 1221.47 L1729.6 1221.47 L1730.18 1221.47 L1730.77 1221.47 L1731.36 1221.47 L1731.94 1221.47 L1732.53 1221.47 L1733.11 1221.47 L1733.7 1221.47 L1734.29 1221.47 L1734.87 1221.47 L1735.46 1221.47 L1736.05 1221.47 L1736.63 1221.47 L1737.22 1221.47 L1737.81 1221.47 L1738.39 1221.47 L1738.98 1221.47 L1739.57 1221.47 L1740.15 1221.47 L1740.74 1221.47 L1741.32 1221.47 L1741.91 1221.47 L1742.5 1221.47 L1743.08 1221.47 L1743.67 1221.47 L1744.26 1221.47 L1744.84 1221.47 L1745.43 1221.47 L1746.02 1221.47 L1746.6 1221.47 L1747.19 1221.47 L1747.78 1221.47 L1748.36 1221.47 L1748.95 1221.47 L1749.53 1221.47 L1750.12 1221.47 L1750.71 1221.47 L1751.29 1221.47 L1751.88 1221.47 L1752.47 1221.47 L1753.05 1221.47 L1753.64 1221.47 L1754.23 1221.47 L1754.81 1221.47 L1755.4 1221.47 L1755.99 1221.47 L1756.57 1221.47 L1757.16 1221.47 L1757.74 1221.47 L1758.33 1221.47 L1758.92 1221.47 L1759.5 1221.47 L1760.09 1221.47 L1760.68 1221.47 L1761.26 1221.47 L1761.85 1221.47 L1762.44 1221.47 L1763.02 1221.47 L1763.61 1221.47 L1764.19 1221.47 L1764.78 1221.47 L1765.37 1221.47 L1765.95 1221.47 L1766.54 1221.47 L1767.13 1221.47 L1767.71 1221.47 L1768.3 1221.47 L1768.89 1221.47 L1769.47 1221.47 L1770.06 1221.47 L1770.65 1221.47 L1771.23 1221.47 L1771.82 1221.47 L1772.4 1221.47 L1772.99 1221.47 L1773.58 1221.47 L1774.16 1221.47 L1774.75 1221.47 L1775.34 1221.47 L1775.92 1221.47 L1776.51 1221.47 L1777.1 1221.47 L1777.68 1221.47 L1778.27 1221.47 L1778.86 1221.47 L1779.44 1221.47 L1780.03 1221.47 L1780.61 1221.47 L1781.2 1221.47 L1781.79 1221.47 L1782.37 1221.47 L1782.96 1221.47 L1783.55 1221.47 L1784.13 1221.47 L1784.72 1221.47 L1785.31 1221.47 L1785.89 1221.47 L1786.48 1221.47 L1787.06 1221.47 L1787.65 1221.47 L1788.24 1221.47 L1788.82 1221.47 L1789.41 1221.47 L1790 1221.47 L1790.58 1221.47 L1791.17 1221.47 L1791.76 1221.47 L1792.34 1221.47 L1792.93 1221.47 L1793.52 1221.47 L1794.1 1221.47 L1794.69 1221.47 L1795.27 1221.47 L1795.86 1221.47 L1796.45 1221.47 L1797.03 1221.47 L1797.62 1221.47 L1798.21 1221.47 L1798.79 1221.47 L1799.38 1221.47 L1799.97 1221.47 L1800.55 1221.47 L1801.14 1221.47 L1801.73 1221.47 L1802.31 1221.47 L1802.9 1221.47 L1803.48 1221.47 L1804.07 1221.47 L1804.66 1221.47 L1805.24 1221.47 L1805.83 1221.47 L1806.42 1221.47 L1807 1221.47 L1807.59 1221.47 L1808.18 1221.47 L1808.76 1221.47 L1809.35 1221.47 L1809.94 1221.47 L1810.52 1221.47 L1811.11 1221.47 L1811.69 1221.47 L1812.28 1221.47 L1812.87 1221.47 L1813.45 1221.47 L1814.04 1221.47 L1814.63 1221.47 L1815.21 1221.47 L1815.8 1221.47 L1816.39 1221.47 L1816.97 1221.47 L1817.56 1221.47 L1818.14 1221.47 L1818.73 1221.47 L1819.32 1221.47 L1819.9 1221.47 L1820.49 1221.47 L1821.08 1221.47 L1821.66 1221.47 L1822.25 1221.47 L1822.84 1221.47 L1823.42 1221.47 L1824.01 1221.47 L1824.6 1221.47 L1825.18 1221.47 L1825.77 1221.47 L1826.35 1221.47 L1826.94 1221.47 L1827.53 1221.47 L1828.11 1221.47 L1828.7 1221.47 L1829.29 1221.47 L1829.87 1221.47 L1830.46 1221.47 L1831.05 1221.47 L1831.63 1221.47 L1832.22 1221.47 L1832.81 1221.47 L1833.39 1221.47 L1833.98 1221.47 L1834.56 1221.47 L1835.15 1221.47 L1835.74 1221.47 L1836.32 1221.47 L1836.91 1221.47 L1837.5 1221.47 L1838.08 1221.47 L1838.67 1221.47 L1839.26 1221.47 L1839.84 1221.47 L1840.43 1221.47 L1841.01 1221.47 L1841.6 1221.47 L1842.19 1221.47 L1842.77 1221.47 L1843.36 1221.47 L1843.95 1221.47 L1844.53 1221.47 L1845.12 1221.47 L1845.71 1221.47 L1846.29 1221.47 L1846.88 1221.47 L1847.47 1221.47 L1848.05 1221.47 L1848.64 1221.47 L1849.22 1221.47 L1849.81 1221.47 L1850.4 1221.47 L1850.98 1221.47 L1851.57 1221.47 L1852.16 1221.47 L1852.74 1221.47 L1853.33 1221.47 L1853.92 1221.47 L1854.5 1221.47 L1855.09 1221.47 L1855.68 1221.47 L1856.26 1221.47 L1856.85 1221.47 L1857.43 1221.47 L1858.02 1221.47 L1858.61 1221.47 L1859.19 1221.47 L1859.78 1221.47 L1860.37 1221.47 L1860.95 1221.47 L1861.54 1221.47 L1862.13 1221.47 L1862.71 1221.47 L1863.3 1221.47 L1863.88 1221.47 L1864.47 1221.47 L1865.06 1221.47 L1865.64 1221.47 L1866.23 1221.47 L1866.82 1221.47 L1867.4 1221.47 L1867.99 1221.47 L1868.58 1221.47 L1869.16 1221.47 L1869.75 1221.47 L1870.34 1221.47 L1870.92 1221.47 L1871.51 1221.47 L1872.09 1221.47 L1872.68 1221.47 L1873.27 1221.47 L1873.85 1221.47 L1874.44 1221.47 L1875.03 1221.47 L1875.61 1221.47 L1876.2 1221.47 L1876.79 1221.47 L1877.37 1221.47 L1877.96 1221.47 L1878.55 1221.47 L1879.13 1221.47 L1879.72 1221.47 L1880.3 1221.47 L1880.89 1221.47 L1881.48 1221.47 L1882.06 1221.47 L1882.65 1221.47 L1883.24 1221.47 L1883.82 1221.47 L1884.41 1221.47 L1885 1221.47 L1885.58 1221.47 L1886.17 1221.47 L1886.76 1221.47 L1887.34 1221.47 L1887.93 1221.47 L1888.51 1221.47 L1889.1 1221.47 L1889.69 1221.47 L1890.27 1221.47 L1890.86 1221.47 L1891.45 1221.47 L1892.03 1221.47 L1892.62 1221.47 L1893.21 1221.47 L1893.79 1221.47 L1894.38 1221.47 L1894.96 1221.47 L1895.55 1221.47 L1896.14 1221.47 L1896.72 1221.47 L1897.31 1221.47 L1897.9 1221.47 L1898.48 1221.47 L1899.07 1221.47 L1899.66 1221.47 L1900.24 1221.47 L1900.83 1221.47 L1901.42 1221.47 L1902 1221.47 L1902.59 1221.47 L1903.17 1221.47 L1903.76 1221.47 L1904.35 1221.47 L1904.93 1221.47 L1905.52 1221.47 L1906.11 1221.47 L1906.69 1221.47 L1907.28 1221.47 L1907.87 1221.47 L1908.45 1221.47 L1909.04 1221.47 L1909.63 1221.47 L1910.21 1221.47 L1910.8 1221.47 L1911.38 1221.47 L1911.97 1221.47 L1912.56 1221.47 L1913.14 1221.47 L1913.73 1221.47 L1914.32 1221.47 L1914.9 1221.47 L1915.49 1221.47 L1916.08 1221.47 L1916.66 1221.47 L1917.25 1221.47 L1917.83 1221.47 L1918.42 1221.47 L1919.01 1221.47 L1919.59 1221.47 L1920.18 1221.47 L1920.77 1221.47 L1921.35 1221.47 L1921.94 1221.47 L1922.53 1221.47 L1923.11 1221.47 L1923.7 1221.47 L1924.29 1221.47 L1924.87 1221.47 L1925.46 1221.47 L1926.04 1221.47 L1926.63 1221.47 L1927.22 1221.47 L1927.8 1221.47 L1928.39 1221.47 L1928.98 1221.47 L1929.56 1221.47 L1930.15 1221.47 L1930.74 1221.47 L1931.32 1221.47 L1931.91 1221.47 L1932.5 1221.47 L1933.08 1221.47 L1933.67 1221.47 L1934.25 1221.47 L1934.84 1221.47 L1935.43 1221.47 L1936.01 1221.47 L1936.6 1221.47 L1937.19 1221.47 L1937.77 1221.47 L1938.36 1221.47 L1938.95 1221.47 L1939.53 1221.47 L1940.12 1221.47 L1940.71 1221.47 L1941.29 1221.47 L1941.88 1221.47 L1942.46 1221.47 L1943.05 1221.47 L1943.64 1221.47 L1944.22 1221.47 L1944.81 1221.47 L1945.4 1221.47 L1945.98 1221.47 L1946.57 1221.47 L1947.16 1221.47 L1947.74 1221.47 L1948.33 1221.47 L1948.91 1221.47 L1949.5 1221.47 L1950.09 1221.47 L1950.67 1221.47 L1951.26 1221.47 L1951.85 1221.47 L1952.43 1221.47 L1953.02 1221.47 L1953.61 1221.47 L1954.19 1221.47 L1954.78 1221.47 L1955.37 1221.47 L1955.95 1221.47 L1956.54 1221.47 L1957.12 1221.47 L1957.71 1221.47 L1958.3 1221.47 L1958.88 1221.47 L1959.47 1221.47 L1960.06 1221.47 L1960.64 1221.47 L1961.23 1221.47 L1961.82 1221.47 L1962.4 1221.47 L1962.99 1221.47 L1963.58 1221.47 L1964.16 1221.47 L1964.75 1221.47 L1965.33 1221.47 L1965.92 1221.47 L1966.51 1221.47 L1967.09 1221.47 L1967.68 1221.47 L1968.27 1221.47 L1968.85 1221.47 L1969.44 1221.47 L1970.03 1221.47 L1970.61 1221.47 L1971.2 1221.47 L1971.78 1221.47 L1972.37 1221.47 L1972.96 1221.47 L1973.54 1221.47 L1974.13 1221.47 L1974.72 1221.47 L1975.3 1221.47 L1975.89 1221.47 L1976.48 1221.47 L1977.06 1221.47 L1977.65 1221.47 L1978.24 1221.47 L1978.82 1221.47 L1979.41 1221.47 L1979.99 1221.47 L1980.58 1221.47 L1981.17 1221.47 L1981.75 1221.47 L1982.34 1221.47 L1982.93 1221.47 L1983.51 1221.47 L1984.1 1221.47 L1984.69 1221.47 L1985.27 1221.47 L1985.86 1221.47 L1986.45 1221.47 L1987.03 1221.47 L1987.62 1221.47 L1988.2 1221.47 L1988.79 1221.47 L1989.38 1221.47 L1989.96 1221.47 L1990.55 1221.47 L1991.14 1221.47 L1991.72 1221.47 L1992.31 1221.47 L1992.9 1221.47 L1993.48 1221.47 L1994.07 1221.47 L1994.65 1221.47 L1995.24 1221.47 L1995.83 1221.47 L1996.41 1221.47 L1997 1221.47 L1997.59 1221.47 L1998.17 1221.47 L1998.76 1221.47 L1999.35 1221.47 L1999.93 1221.47 L2000.52 1221.47 L2001.11 1221.47 L2001.69 1221.47 L2002.28 1221.47 L2002.86 1221.47 L2003.45 1221.47 L2004.04 1221.47 L2004.62 1221.47 L2005.21 1221.47 L2005.8 1221.47 L2006.38 1221.47 L2006.97 1221.47 L2007.56 1221.47 L2008.14 1221.47 L2008.73 1221.47 L2009.32 1221.47 L2009.9 1221.47 L2010.49 1221.47 L2011.07 1221.47 L2011.66 1221.47 L2012.25 1221.47 L2012.83 1221.47 L2013.42 1221.47 L2014.01 1221.47 L2014.59 1221.47 L2015.18 1221.47 L2015.77 1221.47 L2016.35 1221.47 L2016.94 1221.47 L2017.53 1221.47 L2018.11 1221.47 L2018.7 1221.47 L2019.28 1221.47 L2019.87 1221.47 L2020.46 1221.47 L2021.04 1221.47 L2021.63 1221.47 L2022.22 1221.47 L2022.8 1221.47 L2023.39 1221.47 L2023.98 1221.47 L2024.56 1221.47 L2025.15 1221.47 L2025.73 1221.47 L2026.32 1221.47 L2026.91 1221.47 L2027.49 1221.47 L2028.08 1221.47 L2028.67 1221.47 L2029.25 1221.47 L2029.84 1221.47 L2030.43 1221.47 L2031.01 1221.47 L2031.6 1221.47 L2032.19 1221.47 L2032.77 1221.47 L2033.36 1221.47 L2033.94 1221.47 L2034.53 1221.47 L2035.12 1221.47 L2035.7 1221.47 L2036.29 1221.47 L2036.88 1221.47 L2037.46 1221.47 L2038.05 1221.47 L2038.64 1221.47 L2039.22 1221.47 L2039.81 1221.47 L2040.4 1221.47 L2040.98 1221.47 L2041.57 1221.47 L2042.15 1221.47 L2042.74 1221.47 L2043.33 1221.47 L2043.91 1221.47 L2044.5 1221.47 L2045.09 1221.47 L2045.67 1221.47 L2046.26 1221.47 L2046.85 1221.47 L2047.43 1221.47 L2048.02 1221.47 L2048.6 1221.47 L2049.19 1221.47 L2049.78 1221.47 L2050.36 1221.47 L2050.95 1221.47 L2051.54 1221.47 L2052.12 1221.47 L2052.71 1221.47 L2053.3 1221.47 L2053.88 1221.47 L2054.47 1221.47 L2055.06 1221.47 L2055.64 1221.47 L2056.23 1221.47 L2056.81 1221.47 L2057.4 1221.47 L2057.99 1221.47 L2058.57 1221.47 L2059.16 1221.47 L2059.75 1221.47 L2060.33 1221.47 L2060.92 1221.47 L2061.51 1221.47 L2062.09 1221.47 L2062.68 1221.47 L2063.27 1221.47 L2063.85 1221.47 L2064.44 1221.47 L2065.02 1221.47 L2065.61 1221.47 L2066.2 1221.47 L2066.78 1221.47 L2067.37 1221.47 L2067.96 1221.47 L2068.54 1221.47 L2069.13 1221.47 L2069.72 1221.47 L2070.3 1221.47 L2070.89 1221.47 L2071.48 1221.47 L2072.06 1221.47 L2072.65 1221.47 L2073.23 1221.47 L2073.82 1221.47 L2074.41 1221.47 L2074.99 1221.47 L2075.58 1221.47 L2076.17 1221.47 L2076.75 1221.47 L2077.34 1221.47 L2077.93 1221.47 L2078.51 1221.47 L2079.1 1221.47 L2079.68 1221.47 L2080.27 1221.47 L2080.86 1221.47 L2081.44 1221.47 L2082.03 1221.47 L2082.62 1221.47 L2083.2 1221.47 L2083.79 1221.47 L2084.38 1221.47 L2084.96 1221.47 L2085.55 1221.47 L2086.14 1221.47 L2086.72 1221.47 L2087.31 1221.47 L2087.89 1221.47 L2088.48 1221.47 L2089.07 1221.47 L2089.65 1221.47 L2090.24 1221.47 L2090.83 1221.47 L2091.41 1221.47 L2092 1221.47 L2092.59 1221.47 L2093.17 1221.47 L2093.76 1221.47 L2094.35 1221.47 L2094.93 1221.47 L2095.52 1221.47 L2096.1 1221.47 L2096.69 1221.47 L2097.28 1221.47 L2097.86 1221.47 L2098.45 1221.47 L2099.04 1221.47 L2099.62 1221.47 L2100.21 1221.47 L2100.8 1221.47 L2101.38 1221.47 L2101.97 1221.47 L2102.55 1221.47 L2103.14 1221.47 L2103.73 1221.47 L2104.31 1221.47 L2104.9 1221.47 L2105.49 1221.47 L2106.07 1221.47 L2106.66 1221.47 L2107.25 1221.47 L2107.83 1221.47 L2108.42 1221.47 L2109.01 1221.47 L2109.59 1221.47 L2110.18 1221.47 L2110.76 1221.47 L2111.35 1221.47 L2111.94 1221.47 L2112.52 1221.47 L2113.11 1221.47 L2113.7 1221.47 L2114.28 1221.47 L2114.87 1221.47 L2115.46 1221.47 L2116.04 1221.47 L2116.63 1221.47 L2117.22 1221.47 L2117.8 1221.47 L2118.39 1221.47 L2118.97 1221.47 L2119.56 1221.47 L2120.15 1221.47 L2120.73 1221.47 L2121.32 1221.47 L2121.91 1221.47 L2122.49 1221.47 L2123.08 1221.47 L2123.67 1221.47 L2124.25 1221.47 L2124.84 1221.47 L2125.42 1221.47 L2126.01 1221.47 L2126.6 1221.47 L2127.18 1221.47 L2127.77 1221.47 L2128.36 1221.47 L2128.94 1221.47 L2129.53 1221.47 L2130.12 1221.47 L2130.7 1221.47 L2131.29 1221.47 L2131.88 1221.47 L2132.46 1221.47 L2133.05 1221.47 L2133.63 1221.47 L2134.22 1221.47 L2134.81 1221.47 L2135.39 1221.47 L2135.98 1221.47 L2136.57 1221.47 L2137.15 1221.47 L2137.74 1221.47 L2138.33 1221.47 L2138.91 1221.47 L2139.5 1221.47 L2140.09 1221.47 L2140.67 1221.47 L2141.26 1221.47 L2141.84 1221.47 L2142.43 1221.47 L2143.02 1221.47 L2143.6 1221.47 L2144.19 1221.47 L2144.78 1221.47 L2145.36 1221.47 L2145.95 1221.47 L2146.54 1221.47 L2147.12 1221.47 L2147.71 1221.47 L2148.3 1221.47 L2148.88 1221.47 L2149.47 1221.47 L2150.05 1221.47 L2150.64 1221.47 L2151.23 1221.47 L2151.81 1221.47 L2152.4 1221.47 L2152.99 1221.47 L2153.57 1221.47 L2154.16 1221.47 L2154.75 1221.47 L2155.33 1221.47 L2155.92 1221.47 L2156.5 1221.47 L2157.09 1221.47 L2157.68 1221.47 L2158.26 1221.47 L2158.26 1221.36 L2157.68 1221.36 L2157.09 1221.36 L2156.5 1221.36 L2155.92 1221.36 L2155.33 1221.36 L2154.75 1221.36 L2154.16 1221.36 L2153.57 1221.36 L2152.99 1221.36 L2152.4 1221.36 L2151.81 1221.36 L2151.23 1221.36 L2150.64 1221.36 L2150.05 1221.36 L2149.47 1221.36 L2148.88 1221.36 L2148.3 1221.36 L2147.71 1221.36 L2147.12 1221.36 L2146.54 1221.36 L2145.95 1221.36 L2145.36 1221.36 L2144.78 1221.36 L2144.19 1221.36 L2143.6 1221.36 L2143.02 1221.36 L2142.43 1221.36 L2141.84 1221.36 L2141.26 1221.36 L2140.67 1221.36 L2140.09 1221.36 L2139.5 1221.36 L2138.91 1221.36 L2138.33 1221.36 L2137.74 1221.36 L2137.15 1221.36 L2136.57 1221.36 L2135.98 1221.36 L2135.39 1221.36 L2134.81 1221.36 L2134.22 1221.36 L2133.63 1221.36 L2133.05 1221.36 L2132.46 1221.36 L2131.88 1221.36 L2131.29 1221.36 L2130.7 1221.36 L2130.12 1221.36 L2129.53 1221.36 L2128.94 1221.36 L2128.36 1221.36 L2127.77 1221.36 L2127.18 1221.36 L2126.6 1221.36 L2126.01 1221.36 L2125.42 1221.36 L2124.84 1221.36 L2124.25 1221.36 L2123.67 1221.36 L2123.08 1221.36 L2122.49 1221.36 L2121.91 1221.36 L2121.32 1221.36 L2120.73 1221.36 L2120.15 1221.36 L2119.56 1221.36 L2118.97 1221.36 L2118.39 1221.36 L2117.8 1221.36 L2117.22 1221.36 L2116.63 1221.36 L2116.04 1221.36 L2115.46 1221.36 L2114.87 1221.36 L2114.28 1221.36 L2113.7 1221.36 L2113.11 1221.36 L2112.52 1221.36 L2111.94 1221.36 L2111.35 1221.36 L2110.76 1221.36 L2110.18 1221.36 L2109.59 1221.36 L2109.01 1221.36 L2108.42 1221.36 L2107.83 1221.36 L2107.25 1221.36 L2106.66 1221.36 L2106.07 1221.36 L2105.49 1221.36 L2104.9 1221.36 L2104.31 1221.36 L2103.73 1221.36 L2103.14 1221.36 L2102.55 1221.36 L2101.97 1221.36 L2101.38 1221.36 L2100.8 1221.36 L2100.21 1221.36 L2099.62 1221.36 L2099.04 1221.36 L2098.45 1221.36 L2097.86 1221.36 L2097.28 1221.36 L2096.69 1221.36 L2096.1 1221.36 L2095.52 1221.36 L2094.93 1221.36 L2094.35 1221.36 L2093.76 1221.36 L2093.17 1221.36 L2092.59 1221.36 L2092 1221.36 L2091.41 1221.36 L2090.83 1221.36 L2090.24 1221.36 L2089.65 1221.36 L2089.07 1221.36 L2088.48 1221.36 L2087.89 1221.36 L2087.31 1221.36 L2086.72 1221.36 L2086.14 1221.36 L2085.55 1221.36 L2084.96 1221.36 L2084.38 1221.36 L2083.79 1221.36 L2083.2 1221.36 L2082.62 1221.36 L2082.03 1221.36 L2081.44 1221.36 L2080.86 1221.36 L2080.27 1221.36 L2079.68 1221.36 L2079.1 1221.36 L2078.51 1221.36 L2077.93 1221.36 L2077.34 1221.36 L2076.75 1221.36 L2076.17 1221.36 L2075.58 1221.36 L2074.99 1221.36 L2074.41 1221.36 L2073.82 1221.36 L2073.23 1221.36 L2072.65 1221.36 L2072.06 1221.36 L2071.48 1221.36 L2070.89 1221.36 L2070.3 1221.36 L2069.72 1221.36 L2069.13 1221.36 L2068.54 1221.36 L2067.96 1221.36 L2067.37 1221.36 L2066.78 1221.36 L2066.2 1221.36 L2065.61 1221.36 L2065.02 1221.36 L2064.44 1221.36 L2063.85 1221.36 L2063.27 1221.36 L2062.68 1221.36 L2062.09 1221.36 L2061.51 1221.36 L2060.92 1221.36 L2060.33 1221.36 L2059.75 1221.36 L2059.16 1221.36 L2058.57 1221.36 L2057.99 1221.36 L2057.4 1221.36 L2056.81 1221.36 L2056.23 1221.36 L2055.64 1221.36 L2055.06 1221.36 L2054.47 1221.36 L2053.88 1221.36 L2053.3 1221.36 L2052.71 1221.36 L2052.12 1221.36 L2051.54 1221.36 L2050.95 1221.36 L2050.36 1221.36 L2049.78 1221.36 L2049.19 1221.36 L2048.6 1221.36 L2048.02 1221.36 L2047.43 1221.36 L2046.85 1221.36 L2046.26 1221.36 L2045.67 1221.36 L2045.09 1221.36 L2044.5 1221.36 L2043.91 1221.36 L2043.33 1221.36 L2042.74 1221.36 L2042.15 1221.36 L2041.57 1221.36 L2040.98 1221.36 L2040.4 1221.36 L2039.81 1221.36 L2039.22 1221.36 L2038.64 1221.36 L2038.05 1221.36 L2037.46 1221.36 L2036.88 1221.36 L2036.29 1221.36 L2035.7 1221.36 L2035.12 1221.36 L2034.53 1221.36 L2033.94 1221.36 L2033.36 1221.36 L2032.77 1221.36 L2032.19 1221.36 L2031.6 1221.36 L2031.01 1221.36 L2030.43 1221.36 L2029.84 1221.36 L2029.25 1221.36 L2028.67 1221.36 L2028.08 1221.36 L2027.49 1221.36 L2026.91 1221.36 L2026.32 1221.36 L2025.73 1221.36 L2025.15 1221.36 L2024.56 1221.36 L2023.98 1221.36 L2023.39 1221.36 L2022.8 1221.36 L2022.22 1221.36 L2021.63 1221.36 L2021.04 1221.36 L2020.46 1221.36 L2019.87 1221.36 L2019.28 1221.36 L2018.7 1221.36 L2018.11 1221.36 L2017.53 1221.36 L2016.94 1221.36 L2016.35 1221.36 L2015.77 1221.36 L2015.18 1221.36 L2014.59 1221.36 L2014.01 1221.36 L2013.42 1221.36 L2012.83 1221.36 L2012.25 1221.36 L2011.66 1221.36 L2011.07 1221.36 L2010.49 1221.36 L2009.9 1221.36 L2009.32 1221.36 L2008.73 1221.36 L2008.14 1221.36 L2007.56 1221.36 L2006.97 1221.36 L2006.38 1221.36 L2005.8 1221.36 L2005.21 1221.36 L2004.62 1221.36 L2004.04 1221.36 L2003.45 1221.36 L2002.86 1221.36 L2002.28 1221.36 L2001.69 1221.36 L2001.11 1221.36 L2000.52 1221.36 L1999.93 1221.36 L1999.35 1221.36 L1998.76 1221.36 L1998.17 1221.36 L1997.59 1221.36 L1997 1221.36 L1996.41 1221.36 L1995.83 1221.36 L1995.24 1221.36 L1994.65 1221.36 L1994.07 1221.36 L1993.48 1221.36 L1992.9 1221.36 L1992.31 1221.36 L1991.72 1221.36 L1991.14 1221.36 L1990.55 1221.36 L1989.96 1221.36 L1989.38 1221.36 L1988.79 1221.36 L1988.2 1221.36 L1987.62 1221.36 L1987.03 1221.36 L1986.45 1221.36 L1985.86 1221.36 L1985.27 1221.36 L1984.69 1221.36 L1984.1 1221.36 L1983.51 1221.36 L1982.93 1221.36 L1982.34 1221.36 L1981.75 1221.36 L1981.17 1221.36 L1980.58 1221.36 L1979.99 1221.36 L1979.41 1221.36 L1978.82 1221.36 L1978.24 1221.36 L1977.65 1221.36 L1977.06 1221.36 L1976.48 1221.36 L1975.89 1221.36 L1975.3 1221.36 L1974.72 1221.36 L1974.13 1221.36 L1973.54 1221.36 L1972.96 1221.36 L1972.37 1221.36 L1971.78 1221.36 L1971.2 1221.36 L1970.61 1221.36 L1970.03 1221.36 L1969.44 1221.36 L1968.85 1221.36 L1968.27 1221.36 L1967.68 1221.36 L1967.09 1221.36 L1966.51 1221.36 L1965.92 1221.36 L1965.33 1221.36 L1964.75 1221.36 L1964.16 1221.36 L1963.58 1221.36 L1962.99 1221.36 L1962.4 1221.36 L1961.82 1221.36 L1961.23 1221.36 L1960.64 1221.36 L1960.06 1221.36 L1959.47 1221.36 L1958.88 1221.36 L1958.3 1221.36 L1957.71 1221.36 L1957.12 1221.36 L1956.54 1221.36 L1955.95 1221.36 L1955.37 1221.36 L1954.78 1221.36 L1954.19 1221.36 L1953.61 1221.36 L1953.02 1221.36 L1952.43 1221.36 L1951.85 1221.36 L1951.26 1221.36 L1950.67 1221.36 L1950.09 1221.36 L1949.5 1221.36 L1948.91 1221.36 L1948.33 1221.36 L1947.74 1221.36 L1947.16 1221.36 L1946.57 1221.36 L1945.98 1221.36 L1945.4 1221.36 L1944.81 1221.36 L1944.22 1221.36 L1943.64 1221.36 L1943.05 1221.36 L1942.46 1221.36 L1941.88 1221.36 L1941.29 1221.36 L1940.71 1221.36 L1940.12 1221.36 L1939.53 1221.36 L1938.95 1221.36 L1938.36 1221.36 L1937.77 1221.36 L1937.19 1221.36 L1936.6 1221.36 L1936.01 1221.36 L1935.43 1221.36 L1934.84 1221.36 L1934.25 1221.36 L1933.67 1221.36 L1933.08 1221.36 L1932.5 1221.36 L1931.91 1221.36 L1931.32 1221.36 L1930.74 1221.36 L1930.15 1221.36 L1929.56 1221.36 L1928.98 1221.36 L1928.39 1221.36 L1927.8 1221.36 L1927.22 1221.36 L1926.63 1221.36 L1926.04 1221.36 L1925.46 1221.36 L1924.87 1221.36 L1924.29 1221.36 L1923.7 1221.36 L1923.11 1221.36 L1922.53 1221.36 L1921.94 1221.36 L1921.35 1221.36 L1920.77 1221.36 L1920.18 1221.36 L1919.59 1221.36 L1919.01 1221.36 L1918.42 1221.36 L1917.83 1221.36 L1917.25 1221.36 L1916.66 1221.36 L1916.08 1221.36 L1915.49 1221.36 L1914.9 1221.36 L1914.32 1221.36 L1913.73 1221.36 L1913.14 1221.36 L1912.56 1221.36 L1911.97 1221.36 L1911.38 1221.36 L1910.8 1221.36 L1910.21 1221.36 L1909.63 1221.36 L1909.04 1221.36 L1908.45 1221.36 L1907.87 1221.36 L1907.28 1221.36 L1906.69 1221.36 L1906.11 1221.36 L1905.52 1221.36 L1904.93 1221.36 L1904.35 1221.36 L1903.76 1221.36 L1903.17 1221.36 L1902.59 1221.36 L1902 1221.36 L1901.42 1221.36 L1900.83 1221.36 L1900.24 1221.36 L1899.66 1221.36 L1899.07 1221.36 L1898.48 1221.36 L1897.9 1221.36 L1897.31 1221.36 L1896.72 1221.36 L1896.14 1221.36 L1895.55 1221.36 L1894.96 1221.36 L1894.38 1221.36 L1893.79 1221.36 L1893.21 1221.36 L1892.62 1221.36 L1892.03 1221.36 L1891.45 1221.36 L1890.86 1221.36 L1890.27 1221.36 L1889.69 1221.36 L1889.1 1221.36 L1888.51 1221.36 L1887.93 1221.36 L1887.34 1221.36 L1886.76 1221.36 L1886.17 1221.36 L1885.58 1221.36 L1885 1221.36 L1884.41 1221.36 L1883.82 1221.36 L1883.24 1221.36 L1882.65 1221.36 L1882.06 1221.36 L1881.48 1221.36 L1880.89 1221.36 L1880.3 1221.36 L1879.72 1221.36 L1879.13 1221.36 L1878.55 1221.36 L1877.96 1221.36 L1877.37 1221.36 L1876.79 1221.36 L1876.2 1221.36 L1875.61 1221.36 L1875.03 1221.36 L1874.44 1221.36 L1873.85 1221.36 L1873.27 1221.36 L1872.68 1221.36 L1872.09 1221.36 L1871.51 1221.36 L1870.92 1221.36 L1870.34 1221.36 L1869.75 1221.36 L1869.16 1221.36 L1868.58 1221.36 L1867.99 1221.36 L1867.4 1221.36 L1866.82 1221.36 L1866.23 1221.36 L1865.64 1221.36 L1865.06 1221.36 L1864.47 1221.36 L1863.88 1221.36 L1863.3 1221.36 L1862.71 1221.36 L1862.13 1221.36 L1861.54 1221.36 L1860.95 1221.36 L1860.37 1221.36 L1859.78 1221.36 L1859.19 1221.36 L1858.61 1221.36 L1858.02 1221.36 L1857.43 1221.36 L1856.85 1221.36 L1856.26 1221.36 L1855.68 1221.36 L1855.09 1221.36 L1854.5 1221.36 L1853.92 1221.36 L1853.33 1221.36 L1852.74 1221.36 L1852.16 1221.36 L1851.57 1221.36 L1850.98 1221.36 L1850.4 1221.36 L1849.81 1221.36 L1849.22 1221.36 L1848.64 1221.36 L1848.05 1221.36 L1847.47 1221.36 L1846.88 1221.36 L1846.29 1221.36 L1845.71 1221.36 L1845.12 1221.36 L1844.53 1221.36 L1843.95 1221.36 L1843.36 1221.36 L1842.77 1221.36 L1842.19 1221.36 L1841.6 1221.36 L1841.01 1221.36 L1840.43 1221.36 L1839.84 1221.36 L1839.26 1221.36 L1838.67 1221.36 L1838.08 1221.36 L1837.5 1221.36 L1836.91 1221.36 L1836.32 1221.36 L1835.74 1221.36 L1835.15 1221.36 L1834.56 1221.36 L1833.98 1221.36 L1833.39 1221.36 L1832.81 1221.36 L1832.22 1221.36 L1831.63 1221.36 L1831.05 1221.36 L1830.46 1221.36 L1829.87 1221.36 L1829.29 1221.36 L1828.7 1221.36 L1828.11 1221.36 L1827.53 1221.36 L1826.94 1221.36 L1826.35 1221.36 L1825.77 1221.36 L1825.18 1221.36 L1824.6 1221.36 L1824.01 1221.36 L1823.42 1221.36 L1822.84 1221.36 L1822.25 1221.36 L1821.66 1221.36 L1821.08 1221.36 L1820.49 1221.36 L1819.9 1221.36 L1819.32 1221.36 L1818.73 1221.36 L1818.14 1221.36 L1817.56 1221.36 L1816.97 1221.36 L1816.39 1221.36 L1815.8 1221.36 L1815.21 1221.36 L1814.63 1221.36 L1814.04 1221.36 L1813.45 1221.36 L1812.87 1221.36 L1812.28 1221.36 L1811.69 1221.36 L1811.11 1221.36 L1810.52 1221.36 L1809.94 1221.36 L1809.35 1221.36 L1808.76 1221.36 L1808.18 1221.36 L1807.59 1221.36 L1807 1221.36 L1806.42 1221.36 L1805.83 1221.36 L1805.24 1221.36 L1804.66 1221.36 L1804.07 1221.36 L1803.48 1221.36 L1802.9 1221.36 L1802.31 1221.36 L1801.73 1221.36 L1801.14 1221.36 L1800.55 1221.36 L1799.97 1221.36 L1799.38 1221.36 L1798.79 1221.36 L1798.21 1221.36 L1797.62 1221.36 L1797.03 1221.36 L1796.45 1221.36 L1795.86 1221.36 L1795.27 1221.36 L1794.69 1221.36 L1794.1 1221.36 L1793.52 1221.36 L1792.93 1221.36 L1792.34 1221.36 L1791.76 1221.36 L1791.17 1221.36 L1790.58 1221.36 L1790 1221.36 L1789.41 1221.36 L1788.82 1221.36 L1788.24 1221.36 L1787.65 1221.36 L1787.06 1221.36 L1786.48 1221.36 L1785.89 1221.36 L1785.31 1221.36 L1784.72 1221.36 L1784.13 1221.36 L1783.55 1221.36 L1782.96 1221.36 L1782.37 1221.36 L1781.79 1221.36 L1781.2 1221.36 L1780.61 1221.36 L1780.03 1221.36 L1779.44 1221.36 L1778.86 1221.36 L1778.27 1221.36 L1777.68 1221.36 L1777.1 1221.36 L1776.51 1221.36 L1775.92 1221.36 L1775.34 1221.36 L1774.75 1221.36 L1774.16 1221.36 L1773.58 1221.36 L1772.99 1221.36 L1772.4 1221.36 L1771.82 1221.36 L1771.23 1221.36 L1770.65 1221.36 L1770.06 1221.36 L1769.47 1221.36 L1768.89 1221.36 L1768.3 1221.36 L1767.71 1221.36 L1767.13 1221.36 L1766.54 1221.36 L1765.95 1221.36 L1765.37 1221.36 L1764.78 1221.36 L1764.19 1221.36 L1763.61 1221.36 L1763.02 1221.36 L1762.44 1221.36 L1761.85 1221.36 L1761.26 1221.36 L1760.68 1221.36 L1760.09 1221.36 L1759.5 1221.36 L1758.92 1221.36 L1758.33 1221.36 L1757.74 1221.36 L1757.16 1221.36 L1756.57 1221.36 L1755.99 1221.36 L1755.4 1221.36 L1754.81 1221.36 L1754.23 1221.36 L1753.64 1221.36 L1753.05 1221.36 L1752.47 1221.36 L1751.88 1221.36 L1751.29 1221.36 L1750.71 1221.36 L1750.12 1221.36 L1749.53 1221.36 L1748.95 1221.36 L1748.36 1221.36 L1747.78 1221.36 L1747.19 1221.36 L1746.6 1221.36 L1746.02 1221.36 L1745.43 1221.36 L1744.84 1221.36 L1744.26 1221.36 L1743.67 1221.36 L1743.08 1221.36 L1742.5 1221.36 L1741.91 1221.36 L1741.32 1221.36 L1740.74 1221.36 L1740.15 1221.36 L1739.57 1221.36 L1738.98 1221.36 L1738.39 1221.36 L1737.81 1221.36 L1737.22 1221.36 L1736.63 1221.36 L1736.05 1221.36 L1735.46 1221.36 L1734.87 1221.36 L1734.29 1221.36 L1733.7 1221.36 L1733.11 1221.36 L1732.53 1221.36 L1731.94 1221.36 L1731.36 1221.36 L1730.77 1221.36 L1730.18 1221.36 L1729.6 1221.36 L1729.01 1221.36 L1728.42 1221.36 L1727.84 1221.36 L1727.25 1221.36 L1726.66 1221.36 L1726.08 1221.36 L1725.49 1221.36 L1724.91 1221.36 L1724.32 1221.36 L1723.73 1221.36 L1723.15 1221.36 L1722.56 1221.36 L1721.97 1221.36 L1721.39 1221.36 L1720.8 1221.36 L1720.21 1221.36 L1719.63 1221.36 L1719.04 1221.36 L1718.45 1221.36 L1717.87 1221.36 L1717.28 1221.36 L1716.7 1221.36 L1716.11 1221.36 L1715.52 1221.36 L1714.94 1221.36 L1714.35 1221.36 L1713.76 1221.36 L1713.18 1221.36 L1712.59 1221.36 L1712 1221.36 L1711.42 1221.36 L1710.83 1221.36 L1710.24 1221.36 L1709.66 1221.36 L1709.07 1221.36 L1708.49 1221.36 L1707.9 1221.36 L1707.31 1221.36 L1706.73 1221.36 L1706.14 1221.36 L1705.55 1221.36 L1704.97 1221.36 L1704.38 1221.36 L1703.79 1221.36 L1703.21 1221.36 L1702.62 1221.36 L1702.04 1221.36 L1701.45 1221.36 L1700.86 1221.36 L1700.28 1221.36 L1699.69 1221.36 L1699.1 1221.36 L1698.52 1221.36 L1697.93 1221.36 L1697.34 1221.36 L1696.76 1221.36 L1696.17 1221.36 L1695.58 1221.36 L1695 1221.36 L1694.41 1221.36 L1693.83 1221.36 L1693.24 1221.36 L1692.65 1221.36 L1692.07 1221.36 L1691.48 1221.36 L1690.89 1221.36 L1690.31 1221.36 L1689.72 1221.36 L1689.13 1221.36 L1688.55 1221.36 L1687.96 1221.36 L1687.37 1221.36 L1686.79 1221.36 L1686.2 1221.36 L1685.62 1221.36 L1685.03 1221.36 L1684.44 1221.36 L1683.86 1221.36 L1683.27 1221.36 L1682.68 1221.36 L1682.1 1221.36 L1681.51 1221.36 L1680.92 1221.36 L1680.34 1221.36 L1679.75 1221.36 L1679.17 1221.36 L1678.58 1221.36 L1677.99 1221.36 L1677.41 1221.36 L1676.82 1221.36 L1676.23 1221.36 L1675.65 1221.36 L1675.06 1221.36 L1674.47 1221.36 L1673.89 1221.36 L1673.3 1221.36 L1672.71 1221.36 L1672.13 1221.36 L1671.54 1221.36 L1670.96 1221.36 L1670.37 1221.36 L1669.78 1221.36 L1669.2 1221.36 L1668.61 1221.36 L1668.02 1221.36 L1667.44 1221.36 L1666.85 1221.36 L1666.26 1221.36 L1665.68 1221.36 L1665.09 1221.36 L1664.5 1221.36 L1663.92 1221.36 L1663.33 1221.36 L1662.75 1221.36 L1662.16 1221.36 L1661.57 1221.36 L1660.99 1221.36 L1660.4 1221.36 L1659.81 1221.36 L1659.23 1221.36 L1658.64 1221.36 L1658.05 1221.36 L1657.47 1221.36 L1656.88 1221.36 L1656.29 1221.36 L1655.71 1221.36 L1655.12 1221.36 L1654.54 1221.36 L1653.95 1221.36 L1653.36 1221.36 L1652.78 1221.36 L1652.19 1221.36 L1651.6 1221.36 L1651.02 1221.36 L1650.43 1221.36 L1649.84 1221.36 L1649.26 1221.36 L1648.67 1221.36 L1648.09 1221.36 L1647.5 1221.36 L1646.91 1221.36 L1646.33 1221.36 L1645.74 1221.36 L1645.15 1221.36 L1644.57 1221.36 L1643.98 1221.36 L1643.39 1221.36 L1642.81 1221.36 L1642.22 1221.36 L1641.63 1221.36 L1641.05 1221.36 L1640.46 1221.36 L1639.88 1221.36 L1639.29 1221.36 L1638.7 1221.36 L1638.12 1221.36 L1637.53 1221.36 L1636.94 1221.36 L1636.36 1221.36 L1635.77 1221.36 L1635.18 1221.36 L1634.6 1221.36 L1634.01 1221.36 L1633.42 1221.36 L1632.84 1221.36 L1632.25 1221.36 L1631.67 1221.36 L1631.08 1221.36 L1630.49 1221.36 L1629.91 1221.36 L1629.32 1221.36 L1628.73 1221.36 L1628.15 1221.36 L1627.56 1221.36 L1626.97 1221.36 L1626.39 1221.36 L1625.8 1221.36 L1625.22 1221.36 L1624.63 1221.36 L1624.04 1221.36 L1623.46 1221.36 L1622.87 1221.36 L1622.28 1221.36 L1621.7 1221.36 L1621.11 1221.36 L1620.52 1221.36 L1619.94 1221.36 L1619.35 1221.36 L1618.76 1221.36 L1618.18 1221.36 L1617.59 1221.36 L1617.01 1221.36 L1616.42 1221.36 L1615.83 1221.36 L1615.25 1221.36 L1614.66 1221.36 L1614.07 1221.36 L1613.49 1221.36 L1612.9 1221.36 L1612.31 1221.36 L1611.73 1221.36 L1611.14 1221.36 L1610.55 1221.36 L1609.97 1221.36 L1609.38 1221.36 L1608.8 1221.36 L1608.21 1221.36 L1607.62 1221.36 L1607.04 1221.36 L1606.45 1221.36 L1605.86 1221.36 L1605.28 1221.36 L1604.69 1221.36 L1604.1 1221.36 L1603.52 1221.36 L1602.93 1221.36 L1602.34 1221.36 L1601.76 1221.36 L1601.17 1221.36 L1600.59 1221.36 L1600 1221.36 L1599.41 1221.36 L1598.83 1221.36 L1598.24 1221.36 L1597.65 1221.36 L1597.07 1221.36 L1596.48 1221.36 L1595.89 1221.36 L1595.31 1221.36 L1594.72 1221.36 L1594.14 1221.36 L1593.55 1221.36 L1592.96 1221.36 L1592.38 1221.36 L1591.79 1221.36 L1591.2 1221.36 L1590.62 1221.36 L1590.03 1221.36 L1589.44 1221.36 L1588.86 1221.36 L1588.27 1221.36 L1587.68 1221.36 L1587.1 1221.36 L1586.51 1221.36 L1585.93 1221.36 L1585.34 1221.36 L1584.75 1221.36 L1584.17 1221.36 L1583.58 1221.36 L1582.99 1221.36 L1582.41 1221.36 L1581.82 1221.36 L1581.23 1221.36 L1580.65 1221.36 L1580.06 1221.36 L1579.47 1221.36 L1578.89 1221.36 L1578.3 1221.36 L1577.72 1221.36 L1577.13 1221.36 L1576.54 1221.36 L1575.96 1221.36 L1575.37 1221.36 L1574.78 1221.36 L1574.2 1221.36 L1573.61 1221.36 L1573.02 1221.36 L1572.44 1221.36 L1571.85 1221.36 L1571.27 1221.36 L1570.68 1221.36 L1570.09 1221.36 L1569.51 1221.36 L1568.92 1221.36 L1568.33 1221.36 L1567.75 1221.36 L1567.16 1221.36 L1566.57 1221.36 L1565.99 1221.36 L1565.4 1221.36 L1564.81 1221.36 L1564.23 1221.36 L1563.64 1221.36 L1563.06 1221.36 L1562.47 1221.36 L1561.88 1221.36 L1561.3 1221.36 L1560.71 1221.36 L1560.12 1221.36 L1559.54 1221.36 L1558.95 1221.36 L1558.36 1221.36 L1557.78 1221.36 L1557.19 1221.36 L1556.6 1221.36 L1556.02 1221.36 L1555.43 1221.36 L1554.85 1221.36 L1554.26 1221.36 L1553.67 1221.36 L1553.09 1221.36 L1552.5 1221.36 L1551.91 1221.36 L1551.33 1221.36 L1550.74 1221.36 L1550.15 1221.36 L1549.57 1221.36 L1548.98 1221.36 L1548.4 1221.36 L1547.81 1221.36 L1547.22 1221.36 L1546.64 1221.36 L1546.05 1221.36 L1545.46 1221.36 L1544.88 1221.36 L1544.29 1221.36 L1543.7 1221.36 L1543.12 1221.36 L1542.53 1221.36 L1541.94 1221.36 L1541.36 1221.36 L1540.77 1221.36 L1540.19 1221.36 L1539.6 1221.36 L1539.01 1221.36 L1538.43 1221.36 L1537.84 1221.36 L1537.25 1221.36 L1536.67 1221.36 L1536.08 1221.36 L1535.49 1221.36 L1534.91 1221.36 L1534.32 1221.36 L1533.73 1221.36 L1533.15 1221.36 L1532.56 1221.36 L1531.98 1221.36 L1531.39 1221.36 L1530.8 1221.36 L1530.22 1221.36 L1529.63 1221.36 L1529.04 1221.36 L1528.46 1221.36 L1527.87 1221.36 L1527.28 1221.36 L1526.7 1221.36 L1526.11 1221.36 L1525.52 1221.36 L1524.94 1221.36 L1524.35 1221.36 L1523.77 1221.36 L1523.18 1221.36 L1522.59 1221.36 L1522.01 1221.36 L1521.42 1221.36 L1520.83 1221.36 L1520.25 1221.36 L1519.66 1221.36 L1519.07 1221.36 L1518.49 1221.36 L1517.9 1221.36 L1517.32 1221.36 L1516.73 1221.36 L1516.14 1221.36 L1515.56 1221.36 L1514.97 1221.36 L1514.38 1221.36 L1513.8 1221.36 L1513.21 1221.36 L1512.62 1221.36 L1512.04 1221.36 L1511.45 1221.36 L1510.86 1221.36 L1510.28 1221.36 L1509.69 1221.36 L1509.11 1221.36 L1508.52 1221.36 L1507.93 1221.36 L1507.35 1221.36 L1506.76 1221.36 L1506.17 1221.36 L1505.59 1221.36 L1505 1221.36 L1504.41 1221.36 L1503.83 1221.36 L1503.24 1221.36 L1502.65 1221.36 L1502.07 1221.36 L1501.48 1221.36 L1500.9 1221.36 L1500.31 1221.36 L1499.72 1221.36 L1499.14 1221.36 L1498.55 1221.36 L1497.96 1221.36 L1497.38 1221.36 L1496.79 1221.36 L1496.2 1221.36 L1495.62 1221.36 L1495.03 1221.36 L1494.45 1221.36 L1493.86 1221.36 L1493.27 1221.36 L1492.69 1221.36 L1492.1 1221.36 L1491.51 1221.36 L1490.93 1221.36 L1490.34 1221.36 L1489.75 1221.36 L1489.17 1221.36 L1488.58 1221.36 L1487.99 1221.36 L1487.41 1221.36 L1486.82 1221.36 L1486.24 1221.36 L1485.65 1221.36 L1485.06 1221.36 L1484.48 1221.36 L1483.89 1221.36 L1483.3 1221.36 L1482.72 1221.36 L1482.13 1221.36 L1481.54 1221.36 L1480.96 1221.36 L1480.37 1221.36 L1479.78 1221.36 L1479.2 1221.36 L1478.61 1221.36 L1478.03 1221.36 L1477.44 1221.36 L1476.85 1221.36 L1476.27 1221.36 L1475.68 1221.36 L1475.09 1221.36 L1474.51 1221.36 L1473.92 1221.36 L1473.33 1221.36 L1472.75 1221.36 L1472.16 1221.36 L1471.57 1221.36 L1470.99 1221.36 L1470.4 1221.36 L1469.82 1221.36 L1469.23 1221.36 L1468.64 1221.36 L1468.06 1221.36 L1467.47 1221.36 L1466.88 1221.36 L1466.3 1221.36 L1465.71 1221.36 L1465.12 1221.36 L1464.54 1221.36 L1463.95 1221.36 L1463.37 1221.36 L1462.78 1221.36 L1462.19 1221.36 L1461.61 1221.36 L1461.02 1221.36 L1460.43 1221.36 L1459.85 1221.36 L1459.26 1221.36 L1458.67 1221.36 L1458.09 1221.36 L1457.5 1221.36 L1456.91 1221.36 L1456.33 1221.36 L1455.74 1221.36 L1455.16 1221.36 L1454.57 1221.36 L1453.98 1221.36 L1453.4 1221.36 L1452.81 1221.36 L1452.22 1221.36 L1451.64 1221.36 L1451.05 1221.36 L1450.46 1221.36 L1449.88 1221.36 L1449.29 1221.36 L1448.7 1221.36 L1448.12 1221.36 L1447.53 1221.36 L1446.95 1221.36 L1446.36 1221.36 L1445.77 1221.36 L1445.19 1221.36 L1444.6 1221.36 L1444.01 1221.36 L1443.43 1221.36 L1442.84 1221.36 L1442.25 1221.36 L1441.67 1221.36 L1441.08 1221.36 L1440.5 1221.36 L1439.91 1221.36 L1439.32 1221.36 L1438.74 1221.36 L1438.15 1221.36 L1437.56 1221.36 L1436.98 1221.36 L1436.39 1221.36 L1435.8 1221.36 L1435.22 1221.36 L1434.63 1221.36 L1434.04 1221.36 L1433.46 1221.36 L1432.87 1221.36 L1432.29 1221.36 L1431.7 1221.36 L1431.11 1221.36 L1430.53 1221.36 L1429.94 1221.36 L1429.35 1221.36 L1428.77 1221.36 L1428.18 1221.36 L1427.59 1221.36 L1427.01 1221.36 L1426.42 1221.36 L1425.83 1221.36 L1425.25 1221.36 L1424.66 1221.36 L1424.08 1221.36 L1423.49 1221.36 L1422.9 1221.36 L1422.32 1221.36 L1421.73 1221.36 L1421.14 1221.36 L1420.56 1221.36 L1419.97 1221.36 L1419.38 1221.36 L1418.8 1221.36 L1418.21 1221.36 L1417.63 1221.36 L1417.04 1221.36 L1416.45 1221.36 L1415.87 1221.36 L1415.28 1221.36 L1414.69 1221.36 L1414.11 1221.36 L1413.52 1221.36 L1412.93 1221.36 L1412.35 1221.36 L1411.76 1221.36 L1411.17 1221.36 L1410.59 1221.36 L1410 1221.36 L1409.42 1221.36 L1408.83 1221.36 L1408.24 1221.36 L1407.66 1221.36 L1407.07 1221.36 L1406.48 1221.36 L1405.9 1221.36 L1405.31 1221.36 L1404.72 1221.36 L1404.14 1221.36 L1403.55 1221.36 L1402.96 1221.36 L1402.38 1221.36 L1401.79 1221.36 L1401.21 1221.36 L1400.62 1221.36 L1400.03 1221.36 L1399.45 1221.36 L1398.86 1221.36 L1398.27 1221.36 L1397.69 1221.36 L1397.1 1221.36 L1396.51 1221.36 L1395.93 1221.36 L1395.34 1221.36 L1394.75 1221.36 L1394.17 1221.36 L1393.58 1221.36 L1393 1221.36 L1392.41 1221.36 L1391.82 1221.36 L1391.24 1221.36 L1390.65 1221.36 L1390.06 1221.36 L1389.48 1221.36 L1388.89 1221.36 L1388.3 1221.36 L1387.72 1221.36 L1387.13 1221.36 L1386.55 1221.36 L1385.96 1221.36 L1385.37 1221.36 L1384.79 1221.36 L1384.2 1221.36 L1383.61 1221.36 L1383.03 1221.36 L1382.44 1221.36 L1381.85 1221.36 L1381.27 1221.36 L1380.68 1221.36 L1380.09 1221.36 L1379.51 1221.36 L1378.92 1221.36 L1378.34 1221.36 L1377.75 1221.36 L1377.16 1221.36 L1376.58 1221.36 L1375.99 1221.36 L1375.4 1221.36 L1374.82 1221.36 L1374.23 1221.36 L1373.64 1221.36 L1373.06 1221.36 L1372.47 1221.36 L1371.88 1221.36 L1371.3 1221.36 L1370.71 1221.36 L1370.13 1221.36 L1369.54 1221.36 L1368.95 1221.36 L1368.37 1221.36 L1367.78 1221.36 L1367.19 1221.36 L1366.61 1221.36 L1366.02 1221.36 L1365.43 1221.36 L1364.85 1221.36 L1364.26 1221.36 L1363.68 1221.36 L1363.09 1221.36 L1362.5 1221.36 L1361.92 1221.36 L1361.33 1221.36 L1360.74 1221.36 L1360.16 1221.36 L1359.57 1221.36 L1358.98 1221.36 L1358.4 1221.36 L1357.81 1221.36 L1357.22 1221.36 L1356.64 1221.36 L1356.05 1221.36 L1355.47 1221.36 L1354.88 1221.36 L1354.29 1221.36 L1353.71 1221.36 L1353.12 1221.36 L1352.53 1221.36 L1351.95 1221.36 L1351.36 1221.36 L1350.77 1221.36 L1350.19 1221.36 L1349.6 1221.36 L1349.01 1221.36 L1348.43 1221.36 L1347.84 1221.36 L1347.26 1221.36 L1346.67 1221.36 L1346.08 1221.36 L1345.5 1221.36 L1344.91 1221.36 L1344.32 1221.36 L1343.74 1221.36 L1343.15 1221.36 L1342.56 1221.36 L1341.98 1221.36 L1341.39 1221.36 L1340.8 1221.36 L1340.22 1221.36 L1339.63 1221.36 L1339.05 1221.36 L1338.46 1221.36 L1337.87 1221.36 L1337.29 1221.36 L1336.7 1221.36 L1336.11 1221.36 L1335.53 1221.36 L1334.94 1221.36 L1334.35 1221.36 L1333.77 1221.36 L1333.18 1221.36 L1332.6 1221.36 L1332.01 1221.36 L1331.42 1221.36 L1330.84 1221.36 L1330.25 1221.36 L1329.66 1221.36 L1329.08 1221.36 L1328.49 1221.36 L1327.9 1221.36 L1327.32 1221.36 L1326.73 1221.36 L1326.14 1221.36 L1325.56 1221.36 L1324.97 1221.36 L1324.39 1221.36 L1323.8 1221.36 L1323.21 1221.36 L1322.63 1221.36 L1322.04 1221.36 L1321.45 1221.36 L1320.87 1221.36 L1320.28 1221.36 L1319.69 1221.36 L1319.11 1221.36 L1318.52 1221.36 L1317.93 1221.36 L1317.35 1221.36 L1316.76 1221.36 L1316.18 1221.36 L1315.59 1221.36 L1315 1221.36 L1314.42 1221.36 L1313.83 1221.36 L1313.24 1221.36 L1312.66 1221.36 L1312.07 1221.36 L1311.48 1221.36 L1310.9 1221.36 L1310.31 1221.36 L1309.73 1221.36 L1309.14 1221.36 L1308.55 1221.36 L1307.97 1221.36 L1307.38 1221.36 L1306.79 1221.36 L1306.21 1221.36 L1305.62 1221.36 L1305.03 1221.36 L1304.45 1221.36 L1303.86 1221.36 L1303.27 1221.36 L1302.69 1221.36 L1302.1 1221.36 L1301.52 1221.36 L1300.93 1221.36 L1300.34 1221.36 L1299.76 1221.36 L1299.17 1221.36 L1298.58 1221.36 L1298 1221.36 L1297.41 1221.36 L1296.82 1221.36 L1296.24 1221.36 L1295.65 1221.36 L1295.06 1221.36 L1294.48 1221.36 L1293.89 1221.36 L1293.31 1221.36 L1292.72 1221.36 L1292.13 1221.36 L1291.55 1221.36 L1290.96 1221.36 L1290.37 1221.36 L1289.79 1221.36 L1289.2 1221.36 L1288.61 1221.36 L1288.03 1221.36 L1287.44 1221.36 L1286.86 1221.36 L1286.27 1221.36 L1285.68 1221.36 L1285.1 1221.36 L1284.51 1221.36 L1283.92 1221.36 L1283.34 1221.36 L1282.75 1221.36 L1282.16 1221.36 L1281.58 1221.36 L1280.99 1221.36 L1280.4 1221.36 L1279.82 1221.36 L1279.23 1221.36 L1278.65 1221.36 L1278.06 1221.36 L1277.47 1221.36 L1276.89 1221.36 L1276.3 1221.36 L1275.71 1221.36 L1275.13 1221.36 L1274.54 1221.36 L1273.95 1221.36 L1273.37 1221.36 L1272.78 1221.36 L1272.19 1221.36 L1271.61 1221.36 L1271.02 1221.36 L1270.44 1221.36 L1269.85 1221.36 L1269.26 1221.36 L1268.68 1221.36 L1268.09 1221.36 L1267.5 1221.36 L1266.92 1221.36 L1266.33 1221.36 L1265.74 1221.36 L1265.16 1221.36 L1264.57 1221.36 L1263.98 1221.36 L1263.4 1221.36 L1262.81 1221.36 L1262.23 1221.36 L1261.64 1221.36 L1261.05 1221.36 L1260.47 1221.36 L1259.88 1221.36 L1259.29 1221.36 L1258.71 1221.36 L1258.12 1221.36 L1257.53 1221.36 L1256.95 1221.36 L1256.36 1221.36 L1255.78 1221.36 L1255.19 1221.36 L1254.6 1221.36 L1254.02 1221.36 L1253.43 1221.36 L1252.84 1221.36 L1252.26 1221.36 L1251.67 1221.36 L1251.08 1221.36 L1250.5 1221.36 L1249.91 1221.36 L1249.32 1221.36 L1248.74 1221.36 L1248.15 1221.36 L1247.57 1221.36 L1246.98 1221.36 L1246.39 1221.36 L1245.81 1221.36 L1245.22 1221.36 L1244.63 1221.36 L1244.05 1221.36 L1243.46 1221.36 L1242.87 1221.36 L1242.29 1221.36 L1241.7 1221.36 L1241.11 1221.36 L1240.53 1221.36 L1239.94 1221.36 L1239.36 1221.36 L1238.77 1221.36 L1238.18 1221.36 L1237.6 1221.36 L1237.01 1221.36 L1236.42 1221.36 L1235.84 1221.36 L1235.25 1221.36 L1234.66 1221.36 L1234.08 1221.36 L1233.49 1221.36 L1232.91 1221.36 L1232.32 1221.36 L1231.73 1221.36 L1231.15 1221.36 L1230.56 1221.36 L1229.97 1221.36 L1229.39 1221.36 L1228.8 1221.36 L1228.21 1221.36 L1227.63 1221.36 L1227.04 1221.36 L1226.45 1221.36 L1225.87 1221.36 L1225.28 1221.36 L1224.7 1221.36 L1224.11 1221.36 L1223.52 1221.36 L1222.94 1221.36 L1222.35 1221.36 L1221.76 1221.36 L1221.18 1221.36 L1220.59 1221.36 L1220 1221.36 L1219.42 1221.36 L1218.83 1221.36 L1218.24 1221.36 L1217.66 1221.36 L1217.07 1221.36 L1216.49 1221.36 L1215.9 1221.36 L1215.31 1221.36 L1214.73 1221.36 L1214.14 1221.36 L1213.55 1221.36 L1212.97 1221.36 L1212.38 1221.36 L1211.79 1221.36 L1211.21 1221.36 L1210.62 1221.36 L1210.03 1221.36 L1209.45 1221.36 L1208.86 1221.36 L1208.28 1221.36 L1207.69 1221.36 L1207.1 1221.36 L1206.52 1221.36 L1205.93 1221.36 L1205.34 1221.36 L1204.76 1221.36 L1204.17 1221.36 L1203.58 1221.36 L1203 1221.36 L1202.41 1221.36 L1201.83 1221.36 L1201.24 1221.36 L1200.65 1221.36 L1200.07 1221.36 L1199.48 1221.36 L1198.89 1221.36 L1198.31 1221.36 L1197.72 1221.36 L1197.13 1221.36 L1196.55 1221.36 L1195.96 1221.36 L1195.37 1221.36 L1194.79 1221.36 L1194.2 1221.36 L1193.62 1221.36 L1193.03 1221.36 L1192.44 1221.36 L1191.86 1221.36 L1191.27 1221.36 L1190.68 1221.36 L1190.1 1221.36 L1189.51 1221.36 L1188.92 1221.36 L1188.34 1221.36 L1187.75 1221.36 L1187.16 1221.36 L1186.58 1221.36 L1185.99 1221.36 L1185.41 1221.36 L1184.82 1221.36 L1184.23 1221.36 L1183.65 1221.36 L1183.06 1221.36 L1182.47 1221.36 L1181.89 1221.36 L1181.3 1221.36 L1180.71 1221.36 L1180.13 1221.36 L1179.54 1221.36 L1178.96 1221.36 L1178.37 1221.36 L1177.78 1221.36 L1177.2 1221.36 L1176.61 1221.36 L1176.02 1221.36 L1175.44 1221.36 L1174.85 1221.36 L1174.26 1221.36 L1173.68 1221.36 L1173.09 1221.36 L1172.5 1221.36 L1171.92 1221.36 L1171.33 1221.36 L1170.75 1221.36 L1170.16 1221.36 L1169.57 1221.36 L1168.99 1221.36 L1168.4 1221.36 L1167.81 1221.36 L1167.23 1221.36 L1166.64 1221.36 L1166.05 1221.36 L1165.47 1221.36 L1164.88 1221.36 L1164.29 1221.36 L1163.71 1221.36 L1163.12 1221.36 L1162.54 1221.36 L1161.95 1221.36 L1161.36 1221.36 L1160.78 1221.36 L1160.19 1221.36 L1159.6 1221.36 L1159.02 1221.36 L1158.43 1221.36 L1157.84 1221.36 L1157.26 1221.36 L1156.67 1221.36 L1156.09 1221.36 L1155.5 1221.36 L1154.91 1221.36 L1154.33 1221.36 L1153.74 1221.36 L1153.15 1221.36 L1152.57 1221.36 L1151.98 1221.36 L1151.39 1221.36 L1150.81 1221.36 L1150.22 1221.36 L1149.63 1221.36 L1149.05 1221.36 L1148.46 1221.36 L1147.88 1221.36 L1147.29 1221.36 L1146.7 1221.36 L1146.12 1221.36 L1145.53 1221.36 L1144.94 1221.36 L1144.36 1221.36 L1143.77 1221.36 L1143.18 1221.36 L1142.6 1221.36 L1142.01 1221.36 L1141.42 1221.36 L1140.84 1221.36 L1140.25 1221.36 L1139.67 1221.36 L1139.08 1221.36 L1138.49 1221.36 L1137.91 1221.36 L1137.32 1221.36 L1136.73 1221.36 L1136.15 1221.36 L1135.56 1221.36 L1134.97 1221.36 L1134.39 1221.36 L1133.8 1221.36 L1133.21 1221.36 L1132.63 1221.36 L1132.04 1221.36 L1131.46 1221.36 L1130.87 1221.36 L1130.28 1221.36 L1129.7 1221.36 L1129.11 1221.36 L1128.52 1221.36 L1127.94 1221.36 L1127.35 1221.36 L1126.76 1221.36 L1126.18 1221.36 L1125.59 1221.36 L1125.01 1221.36 L1124.42 1221.36 L1123.83 1221.36 L1123.25 1221.36 L1122.66 1221.36 L1122.07 1221.36 L1121.49 1221.36 L1120.9 1221.36 L1120.31 1221.36 L1119.73 1221.36 L1119.14 1221.36 L1118.55 1221.36 L1117.97 1221.36 L1117.38 1221.36 L1116.8 1221.36 L1116.21 1221.36 L1115.62 1221.36 L1115.04 1221.36 L1114.45 1221.36 L1113.86 1221.36 L1113.28 1221.36 L1112.69 1221.36 L1112.1 1221.36 L1111.52 1221.36 L1110.93 1221.36 L1110.34 1221.36 L1109.76 1221.36 L1109.17 1221.36 L1108.59 1221.36 L1108 1221.36 L1107.41 1221.36 L1106.83 1221.36 L1106.24 1221.36 L1105.65 1221.36 L1105.07 1221.36 L1104.48 1221.36 L1103.89 1221.36 L1103.31 1221.36 L1102.72 1221.36 L1102.14 1221.36 L1101.55 1221.36 L1100.96 1221.36 L1100.38 1221.36 L1099.79 1221.36 L1099.2 1221.36 L1098.62 1221.36 L1098.03 1221.36 L1097.44 1221.36 L1096.86 1221.36 L1096.27 1221.36 L1095.68 1221.36 L1095.1 1221.36 L1094.51 1221.36 L1093.93 1221.36 L1093.34 1221.36 L1092.75 1221.36 L1092.17 1221.36 L1091.58 1221.36 L1090.99 1221.36 L1090.41 1221.36 L1089.82 1221.36 L1089.23 1221.36 L1088.65 1221.36 L1088.06 1221.36 L1087.47 1221.36 L1086.89 1221.36 L1086.3 1221.36 L1085.72 1221.36 L1085.13 1221.36 L1084.54 1221.36 L1083.96 1221.36 L1083.37 1221.36 L1082.78 1221.36 L1082.2 1221.36 L1081.61 1221.36 L1081.02 1221.36 L1080.44 1221.36 L1079.85 1221.36 L1079.26 1221.36 L1078.68 1221.36 L1078.09 1221.36 L1077.51 1221.36 L1076.92 1221.36 L1076.33 1221.36 L1075.75 1221.36 L1075.16 1221.36 L1074.57 1221.36 L1073.99 1221.36 L1073.4 1221.36 L1072.81 1221.36 L1072.23 1221.36 L1071.64 1221.36 L1071.06 1221.36 L1070.47 1221.36 L1069.88 1221.36 L1069.3 1221.36 L1068.71 1221.36 L1068.12 1221.36 L1067.54 1221.36 L1066.95 1221.36 L1066.36 1221.36 L1065.78 1221.36 L1065.19 1221.36 L1064.6 1221.36 L1064.02 1221.36 L1063.43 1221.36 L1062.85 1221.36 L1062.26 1221.36 L1061.67 1221.36 L1061.09 1221.36 L1060.5 1221.36 L1059.91 1221.36 L1059.33 1221.36 L1058.74 1221.36 L1058.15 1221.36 L1057.57 1221.36 L1056.98 1221.36 L1056.39 1221.36 L1055.81 1221.36 L1055.22 1221.36 L1054.64 1221.36 L1054.05 1221.36 L1053.46 1221.36 L1052.88 1221.36 L1052.29 1221.36 L1051.7 1221.36 L1051.12 1221.36 L1050.53 1221.36 L1049.94 1221.36 L1049.36 1221.36 L1048.77 1221.36 L1048.19 1221.36 L1047.6 1221.36 L1047.01 1221.36 L1046.43 1221.36 L1045.84 1221.36 L1045.25 1221.36 L1044.67 1221.36 L1044.08 1221.36 L1043.49 1221.36 L1042.91 1221.36 L1042.32 1221.36 L1041.73 1221.36 L1041.15 1221.36 L1040.56 1221.36 L1039.98 1221.36 L1039.39 1221.36 L1038.8 1221.36 L1038.22 1221.36 L1037.63 1221.36 L1037.04 1221.36 L1036.46 1221.36 L1035.87 1221.36 L1035.28 1221.36 L1034.7 1221.36 L1034.11 1221.36 L1033.52 1221.36 L1032.94 1221.36 L1032.35 1221.36 L1031.77 1221.36 L1031.18 1221.36 L1030.59 1221.36 L1030.01 1221.36 L1029.42 1221.36 L1028.83 1221.36 L1028.25 1221.36 L1027.66 1221.36 L1027.07 1221.36 L1026.49 1221.36 L1025.9 1221.36 L1025.32 1221.36 L1024.73 1221.36 L1024.14 1221.36 L1023.56 1221.36 L1022.97 1221.36 L1022.38 1221.36 L1021.8 1221.36 L1021.21 1221.36 L1020.62 1221.36 L1020.04 1221.36 L1019.45 1221.36 L1018.86 1221.36 L1018.28 1221.36 L1017.69 1221.36 L1017.11 1221.36 L1016.52 1221.36 L1015.93 1221.36 L1015.35 1221.36 L1014.76 1221.36 L1014.17 1221.36 L1013.59 1221.36 L1013 1221.36 L1012.41 1221.36 L1011.83 1221.36 L1011.24 1221.36 L1010.65 1221.36 L1010.07 1221.36 L1009.48 1221.36 L1008.9 1221.36 L1008.31 1221.36 L1007.72 1221.36 L1007.14 1221.36 L1006.55 1221.36 L1005.96 1221.36 L1005.38 1221.36 L1004.79 1221.36 L1004.2 1221.36 L1003.62 1221.36 L1003.03 1221.36 L1002.44 1221.36 L1001.86 1221.36 L1001.27 1221.36 L1000.69 1221.36 L1000.1 1221.36 L999.513 1221.36 L998.926 1221.36 L998.34 1221.36 L997.754 1221.36 L997.167 1221.36 L996.581 1221.36 L995.994 1221.36 L995.408 1221.36 L994.822 1221.36 L994.235 1221.36 L993.649 1221.36 L993.062 1221.36 L992.476 1221.36 L991.889 1221.36 L991.303 1221.36 L990.717 1221.36 L990.13 1221.36 L989.544 1221.36 L988.957 1221.36 L988.371 1221.36 L987.785 1221.36 L987.198 1221.36 L986.612 1221.36 L986.025 1221.36  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1221.42 986.612,1221.42 987.198,1221.42 987.785,1221.42 988.371,1221.42 988.957,1221.42 989.544,1221.42 990.13,1221.42 990.717,1221.42 991.303,1221.42 991.889,1221.42 992.476,1221.42 993.062,1221.42 993.649,1221.42 994.235,1221.42 994.822,1221.42 995.408,1221.42 995.994,1221.42 996.581,1221.42 997.167,1221.42 997.754,1221.42 998.34,1221.42 998.926,1221.42 999.513,1221.42 1000.1,1221.42 1000.69,1221.42 1001.27,1221.42 1001.86,1221.42 1002.44,1221.42 1003.03,1221.42 1003.62,1221.42 1004.2,1221.42 1004.79,1221.42 1005.38,1221.42 1005.96,1221.42 1006.55,1221.42 1007.14,1221.42 1007.72,1221.42 1008.31,1221.42 1008.9,1221.42 1009.48,1221.42 1010.07,1221.42 1010.65,1221.42 1011.24,1221.42 1011.83,1221.42 1012.41,1221.42 1013,1221.42 1013.59,1221.42 1014.17,1221.42 1014.76,1221.42 1015.35,1221.42 1015.93,1221.42 1016.52,1221.42 1017.11,1221.42 1017.69,1221.42 1018.28,1221.42 1018.86,1221.42 1019.45,1221.42 1020.04,1221.42 1020.62,1221.42 1021.21,1221.42 1021.8,1221.42 1022.38,1221.42 1022.97,1221.42 1023.56,1221.42 1024.14,1221.42 1024.73,1221.42 1025.32,1221.42 1025.9,1221.42 1026.49,1221.42 1027.07,1221.42 1027.66,1221.42 1028.25,1221.42 1028.83,1221.42 1029.42,1221.42 1030.01,1221.42 1030.59,1221.42 1031.18,1221.42 1031.77,1221.42 1032.35,1221.42 1032.94,1221.42 1033.52,1221.42 1034.11,1221.42 1034.7,1221.42 1035.28,1221.42 1035.87,1221.42 1036.46,1221.42 1037.04,1221.42 1037.63,1221.42 1038.22,1221.42 1038.8,1221.42 1039.39,1221.42 1039.98,1221.42 1040.56,1221.42 1041.15,1221.42 1041.73,1221.42 1042.32,1221.42 1042.91,1221.42 1043.49,1221.42 1044.08,1221.42 1044.67,1221.42 1045.25,1221.42 1045.84,1221.42 1046.43,1221.42 1047.01,1221.42 1047.6,1221.42 1048.19,1221.42 1048.77,1221.42 1049.36,1221.42 1049.94,1221.42 1050.53,1221.42 1051.12,1221.42 1051.7,1221.42 1052.29,1221.42 1052.88,1221.42 1053.46,1221.42 1054.05,1221.42 1054.64,1221.42 1055.22,1221.42 1055.81,1221.42 1056.39,1221.42 1056.98,1221.42 1057.57,1221.42 1058.15,1221.42 1058.74,1221.42 1059.33,1221.42 1059.91,1221.42 1060.5,1221.42 1061.09,1221.42 1061.67,1221.42 1062.26,1221.42 1062.85,1221.42 1063.43,1221.42 1064.02,1221.42 1064.6,1221.42 1065.19,1221.42 1065.78,1221.42 1066.36,1221.42 1066.95,1221.42 1067.54,1221.42 1068.12,1221.42 1068.71,1221.42 1069.3,1221.42 1069.88,1221.42 1070.47,1221.42 1071.06,1221.42 1071.64,1221.42 1072.23,1221.42 1072.81,1221.42 1073.4,1221.42 1073.99,1221.42 1074.57,1221.42 1075.16,1221.42 1075.75,1221.42 1076.33,1221.42 1076.92,1221.42 1077.51,1221.42 1078.09,1221.42 1078.68,1221.42 1079.26,1221.42 1079.85,1221.42 1080.44,1221.42 1081.02,1221.42 1081.61,1221.42 1082.2,1221.42 1082.78,1221.42 1083.37,1221.42 1083.96,1221.42 1084.54,1221.42 1085.13,1221.42 1085.72,1221.42 1086.3,1221.42 1086.89,1221.42 1087.47,1221.42 1088.06,1221.42 1088.65,1221.42 1089.23,1221.42 1089.82,1221.42 1090.41,1221.42 1090.99,1221.42 1091.58,1221.42 1092.17,1221.42 1092.75,1221.42 1093.34,1221.42 1093.93,1221.42 1094.51,1221.42 1095.1,1221.42 1095.68,1221.42 1096.27,1221.42 1096.86,1221.42 1097.44,1221.42 1098.03,1221.42 1098.62,1221.42 1099.2,1221.42 1099.79,1221.42 1100.38,1221.42 1100.96,1221.42 1101.55,1221.42 1102.14,1221.42 1102.72,1221.42 1103.31,1221.42 1103.89,1221.42 1104.48,1221.42 1105.07,1221.42 1105.65,1221.42 1106.24,1221.42 1106.83,1221.42 1107.41,1221.42 1108,1221.42 1108.59,1221.42 1109.17,1221.42 1109.76,1221.42 1110.34,1221.42 1110.93,1221.42 1111.52,1221.42 1112.1,1221.42 1112.69,1221.42 1113.28,1221.42 1113.86,1221.42 1114.45,1221.42 1115.04,1221.42 1115.62,1221.42 1116.21,1221.42 1116.8,1221.42 1117.38,1221.42 1117.97,1221.42 1118.55,1221.42 1119.14,1221.42 1119.73,1221.42 1120.31,1221.42 1120.9,1221.42 1121.49,1221.42 1122.07,1221.42 1122.66,1221.42 1123.25,1221.42 1123.83,1221.42 1124.42,1221.42 1125.01,1221.42 1125.59,1221.42 1126.18,1221.42 1126.76,1221.42 1127.35,1221.42 1127.94,1221.42 1128.52,1221.42 1129.11,1221.42 1129.7,1221.42 1130.28,1221.42 1130.87,1221.42 1131.46,1221.42 1132.04,1221.42 1132.63,1221.42 1133.21,1221.42 1133.8,1221.42 1134.39,1221.42 1134.97,1221.42 1135.56,1221.42 1136.15,1221.42 1136.73,1221.42 1137.32,1221.42 1137.91,1221.42 1138.49,1221.42 1139.08,1221.42 1139.67,1221.42 1140.25,1221.42 1140.84,1221.42 1141.42,1221.42 1142.01,1221.42 1142.6,1221.42 1143.18,1221.42 1143.77,1221.42 1144.36,1221.42 1144.94,1221.42 1145.53,1221.42 1146.12,1221.42 1146.7,1221.42 1147.29,1221.42 1147.88,1221.42 1148.46,1221.42 1149.05,1221.42 1149.63,1221.42 1150.22,1221.42 1150.81,1221.42 1151.39,1221.42 1151.98,1221.42 1152.57,1221.42 1153.15,1221.42 1153.74,1221.42 1154.33,1221.42 1154.91,1221.42 1155.5,1221.42 1156.09,1221.42 1156.67,1221.42 1157.26,1221.42 1157.84,1221.42 1158.43,1221.42 1159.02,1221.42 1159.6,1221.42 1160.19,1221.42 1160.78,1221.42 1161.36,1221.42 1161.95,1221.42 1162.54,1221.42 1163.12,1221.42 1163.71,1221.42 1164.29,1221.42 1164.88,1221.42 1165.47,1221.42 1166.05,1221.42 1166.64,1221.42 1167.23,1221.42 1167.81,1221.42 1168.4,1221.42 1168.99,1221.42 1169.57,1221.42 1170.16,1221.42 1170.75,1221.42 1171.33,1221.42 1171.92,1221.42 1172.5,1221.42 1173.09,1221.42 1173.68,1221.42 1174.26,1221.42 1174.85,1221.42 1175.44,1221.42 1176.02,1221.42 1176.61,1221.42 1177.2,1221.42 1177.78,1221.42 1178.37,1221.42 1178.96,1221.42 1179.54,1221.42 1180.13,1221.42 1180.71,1221.42 1181.3,1221.42 1181.89,1221.42 1182.47,1221.42 1183.06,1221.42 1183.65,1221.42 1184.23,1221.42 1184.82,1221.42 1185.41,1221.42 1185.99,1221.42 1186.58,1221.42 1187.16,1221.42 1187.75,1221.42 1188.34,1221.42 1188.92,1221.42 1189.51,1221.42 1190.1,1221.42 1190.68,1221.42 1191.27,1221.42 1191.86,1221.42 1192.44,1221.42 1193.03,1221.42 1193.62,1221.42 1194.2,1221.42 1194.79,1221.42 1195.37,1221.42 1195.96,1221.42 1196.55,1221.42 1197.13,1221.42 1197.72,1221.42 1198.31,1221.42 1198.89,1221.42 1199.48,1221.42 1200.07,1221.42 1200.65,1221.42 1201.24,1221.42 1201.83,1221.42 1202.41,1221.42 1203,1221.42 1203.58,1221.42 1204.17,1221.42 1204.76,1221.42 1205.34,1221.42 1205.93,1221.42 1206.52,1221.42 1207.1,1221.42 1207.69,1221.42 1208.28,1221.42 1208.86,1221.42 1209.45,1221.42 1210.03,1221.42 1210.62,1221.42 1211.21,1221.42 1211.79,1221.42 1212.38,1221.42 1212.97,1221.42 1213.55,1221.42 1214.14,1221.42 1214.73,1221.42 1215.31,1221.42 1215.9,1221.42 1216.49,1221.42 1217.07,1221.42 1217.66,1221.42 1218.24,1221.42 1218.83,1221.42 1219.42,1221.42 1220,1221.42 1220.59,1221.42 1221.18,1221.42 1221.76,1221.42 1222.35,1221.42 1222.94,1221.42 1223.52,1221.42 1224.11,1221.42 1224.7,1221.42 1225.28,1221.42 1225.87,1221.42 1226.45,1221.42 1227.04,1221.42 1227.63,1221.42 1228.21,1221.42 1228.8,1221.42 1229.39,1221.42 1229.97,1221.42 1230.56,1221.42 1231.15,1221.42 1231.73,1221.42 1232.32,1221.42 1232.91,1221.42 1233.49,1221.42 1234.08,1221.42 1234.66,1221.42 1235.25,1221.42 1235.84,1221.42 1236.42,1221.42 1237.01,1221.42 1237.6,1221.42 1238.18,1221.42 1238.77,1221.42 1239.36,1221.42 1239.94,1221.42 1240.53,1221.42 1241.11,1221.42 1241.7,1221.42 1242.29,1221.42 1242.87,1221.42 1243.46,1221.42 1244.05,1221.42 1244.63,1221.42 1245.22,1221.42 1245.81,1221.42 1246.39,1221.42 1246.98,1221.42 1247.57,1221.42 1248.15,1221.42 1248.74,1221.42 1249.32,1221.42 1249.91,1221.42 1250.5,1221.42 1251.08,1221.42 1251.67,1221.42 1252.26,1221.42 1252.84,1221.42 1253.43,1221.42 1254.02,1221.42 1254.6,1221.42 1255.19,1221.42 1255.78,1221.42 1256.36,1221.42 1256.95,1221.42 1257.53,1221.42 1258.12,1221.42 1258.71,1221.42 1259.29,1221.42 1259.88,1221.42 1260.47,1221.42 1261.05,1221.42 1261.64,1221.42 1262.23,1221.42 1262.81,1221.42 1263.4,1221.42 1263.98,1221.42 1264.57,1221.42 1265.16,1221.42 1265.74,1221.42 1266.33,1221.42 1266.92,1221.42 1267.5,1221.42 1268.09,1221.42 1268.68,1221.42 1269.26,1221.42 1269.85,1221.42 1270.44,1221.42 1271.02,1221.42 1271.61,1221.42 1272.19,1221.42 1272.78,1221.42 1273.37,1221.42 1273.95,1221.42 1274.54,1221.42 1275.13,1221.42 1275.71,1221.42 1276.3,1221.42 1276.89,1221.42 1277.47,1221.42 1278.06,1221.42 1278.65,1221.42 1279.23,1221.42 1279.82,1221.42 1280.4,1221.42 1280.99,1221.42 1281.58,1221.42 1282.16,1221.42 1282.75,1221.42 1283.34,1221.42 1283.92,1221.42 1284.51,1221.42 1285.1,1221.42 1285.68,1221.42 1286.27,1221.42 1286.86,1221.42 1287.44,1221.42 1288.03,1221.42 1288.61,1221.42 1289.2,1221.42 1289.79,1221.42 1290.37,1221.42 1290.96,1221.42 1291.55,1221.42 1292.13,1221.42 1292.72,1221.42 1293.31,1221.42 1293.89,1221.42 1294.48,1221.42 1295.06,1221.42 1295.65,1221.42 1296.24,1221.42 1296.82,1221.42 1297.41,1221.42 1298,1221.42 1298.58,1221.42 1299.17,1221.42 1299.76,1221.42 1300.34,1221.42 1300.93,1221.42 1301.52,1221.42 1302.1,1221.42 1302.69,1221.42 1303.27,1221.42 1303.86,1221.42 1304.45,1221.42 1305.03,1221.42 1305.62,1221.42 1306.21,1221.42 1306.79,1221.42 1307.38,1221.42 1307.97,1221.42 1308.55,1221.42 1309.14,1221.42 1309.73,1221.42 1310.31,1221.42 1310.9,1221.42 1311.48,1221.42 1312.07,1221.42 1312.66,1221.42 1313.24,1221.42 1313.83,1221.42 1314.42,1221.42 1315,1221.42 1315.59,1221.42 1316.18,1221.42 1316.76,1221.42 1317.35,1221.42 1317.93,1221.42 1318.52,1221.42 1319.11,1221.42 1319.69,1221.42 1320.28,1221.42 1320.87,1221.42 1321.45,1221.42 1322.04,1221.42 1322.63,1221.42 1323.21,1221.42 1323.8,1221.42 1324.39,1221.42 1324.97,1221.42 1325.56,1221.42 1326.14,1221.42 1326.73,1221.42 1327.32,1221.42 1327.9,1221.42 1328.49,1221.42 1329.08,1221.42 1329.66,1221.42 1330.25,1221.42 1330.84,1221.42 1331.42,1221.42 1332.01,1221.42 1332.6,1221.42 1333.18,1221.42 1333.77,1221.42 1334.35,1221.42 1334.94,1221.42 1335.53,1221.42 1336.11,1221.42 1336.7,1221.42 1337.29,1221.42 1337.87,1221.42 1338.46,1221.42 1339.05,1221.42 1339.63,1221.42 1340.22,1221.42 1340.8,1221.42 1341.39,1221.42 1341.98,1221.42 1342.56,1221.42 1343.15,1221.42 1343.74,1221.42 1344.32,1221.42 1344.91,1221.42 1345.5,1221.42 1346.08,1221.42 1346.67,1221.42 1347.26,1221.42 1347.84,1221.42 1348.43,1221.42 1349.01,1221.42 1349.6,1221.42 1350.19,1221.42 1350.77,1221.42 1351.36,1221.42 1351.95,1221.42 1352.53,1221.42 1353.12,1221.42 1353.71,1221.42 1354.29,1221.42 1354.88,1221.42 1355.47,1221.42 1356.05,1221.42 1356.64,1221.42 1357.22,1221.42 1357.81,1221.42 1358.4,1221.42 1358.98,1221.42 1359.57,1221.42 1360.16,1221.42 1360.74,1221.42 1361.33,1221.42 1361.92,1221.42 1362.5,1221.42 1363.09,1221.42 1363.68,1221.42 1364.26,1221.42 1364.85,1221.42 1365.43,1221.42 1366.02,1221.42 1366.61,1221.42 1367.19,1221.42 1367.78,1221.42 1368.37,1221.42 1368.95,1221.42 1369.54,1221.42 1370.13,1221.42 1370.71,1221.42 1371.3,1221.42 1371.88,1221.42 1372.47,1221.42 1373.06,1221.42 1373.64,1221.42 1374.23,1221.42 1374.82,1221.42 1375.4,1221.42 1375.99,1221.42 1376.58,1221.42 1377.16,1221.42 1377.75,1221.42 1378.34,1221.42 1378.92,1221.42 1379.51,1221.42 1380.09,1221.42 1380.68,1221.42 1381.27,1221.42 1381.85,1221.42 1382.44,1221.42 1383.03,1221.42 1383.61,1221.42 1384.2,1221.42 1384.79,1221.42 1385.37,1221.42 1385.96,1221.42 1386.55,1221.42 1387.13,1221.42 1387.72,1221.42 1388.3,1221.42 1388.89,1221.42 1389.48,1221.42 1390.06,1221.42 1390.65,1221.42 1391.24,1221.42 1391.82,1221.42 1392.41,1221.42 1393,1221.42 1393.58,1221.42 1394.17,1221.42 1394.75,1221.42 1395.34,1221.42 1395.93,1221.42 1396.51,1221.42 1397.1,1221.42 1397.69,1221.42 1398.27,1221.42 1398.86,1221.42 1399.45,1221.42 1400.03,1221.42 1400.62,1221.42 1401.21,1221.42 1401.79,1221.42 1402.38,1221.42 1402.96,1221.42 1403.55,1221.42 1404.14,1221.42 1404.72,1221.42 1405.31,1221.42 1405.9,1221.42 1406.48,1221.42 1407.07,1221.42 1407.66,1221.42 1408.24,1221.42 1408.83,1221.42 1409.42,1221.42 1410,1221.42 1410.59,1221.42 1411.17,1221.42 1411.76,1221.42 1412.35,1221.42 1412.93,1221.42 1413.52,1221.42 1414.11,1221.42 1414.69,1221.42 1415.28,1221.42 1415.87,1221.42 1416.45,1221.42 1417.04,1221.42 1417.63,1221.42 1418.21,1221.42 1418.8,1221.42 1419.38,1221.42 1419.97,1221.42 1420.56,1221.42 1421.14,1221.42 1421.73,1221.42 1422.32,1221.42 1422.9,1221.42 1423.49,1221.42 1424.08,1221.42 1424.66,1221.42 1425.25,1221.42 1425.83,1221.42 1426.42,1221.42 1427.01,1221.42 1427.59,1221.42 1428.18,1221.42 1428.77,1221.42 1429.35,1221.42 1429.94,1221.42 1430.53,1221.42 1431.11,1221.42 1431.7,1221.42 1432.29,1221.42 1432.87,1221.42 1433.46,1221.42 1434.04,1221.42 1434.63,1221.42 1435.22,1221.42 1435.8,1221.42 1436.39,1221.42 1436.98,1221.42 1437.56,1221.42 1438.15,1221.42 1438.74,1221.42 1439.32,1221.42 1439.91,1221.42 1440.5,1221.42 1441.08,1221.42 1441.67,1221.42 1442.25,1221.42 1442.84,1221.42 1443.43,1221.42 1444.01,1221.42 1444.6,1221.42 1445.19,1221.42 1445.77,1221.42 1446.36,1221.42 1446.95,1221.42 1447.53,1221.42 1448.12,1221.42 1448.7,1221.42 1449.29,1221.42 1449.88,1221.42 1450.46,1221.42 1451.05,1221.42 1451.64,1221.42 1452.22,1221.42 1452.81,1221.42 1453.4,1221.42 1453.98,1221.42 1454.57,1221.42 1455.16,1221.42 1455.74,1221.42 1456.33,1221.42 1456.91,1221.42 1457.5,1221.42 1458.09,1221.42 1458.67,1221.42 1459.26,1221.42 1459.85,1221.42 1460.43,1221.42 1461.02,1221.42 1461.61,1221.42 1462.19,1221.42 1462.78,1221.42 1463.37,1221.42 1463.95,1221.42 1464.54,1221.42 1465.12,1221.42 1465.71,1221.42 1466.3,1221.42 1466.88,1221.42 1467.47,1221.42 1468.06,1221.42 1468.64,1221.42 1469.23,1221.42 1469.82,1221.42 1470.4,1221.42 1470.99,1221.42 1471.57,1221.42 1472.16,1221.42 1472.75,1221.42 1473.33,1221.42 1473.92,1221.42 1474.51,1221.42 1475.09,1221.42 1475.68,1221.42 1476.27,1221.42 1476.85,1221.42 1477.44,1221.42 1478.03,1221.42 1478.61,1221.42 1479.2,1221.42 1479.78,1221.42 1480.37,1221.42 1480.96,1221.42 1481.54,1221.42 1482.13,1221.42 1482.72,1221.42 1483.3,1221.42 1483.89,1221.42 1484.48,1221.42 1485.06,1221.42 1485.65,1221.42 1486.24,1221.42 1486.82,1221.42 1487.41,1221.42 1487.99,1221.42 1488.58,1221.42 1489.17,1221.42 1489.75,1221.42 1490.34,1221.42 1490.93,1221.42 1491.51,1221.42 1492.1,1221.42 1492.69,1221.42 1493.27,1221.42 1493.86,1221.42 1494.45,1221.42 1495.03,1221.42 1495.62,1221.42 1496.2,1221.42 1496.79,1221.42 1497.38,1221.42 1497.96,1221.42 1498.55,1221.42 1499.14,1221.42 1499.72,1221.42 1500.31,1221.42 1500.9,1221.42 1501.48,1221.42 1502.07,1221.42 1502.65,1221.42 1503.24,1221.42 1503.83,1221.42 1504.41,1221.42 1505,1221.42 1505.59,1221.42 1506.17,1221.42 1506.76,1221.42 1507.35,1221.42 1507.93,1221.42 1508.52,1221.42 1509.11,1221.42 1509.69,1221.42 1510.28,1221.42 1510.86,1221.42 1511.45,1221.42 1512.04,1221.42 1512.62,1221.42 1513.21,1221.42 1513.8,1221.42 1514.38,1221.42 1514.97,1221.42 1515.56,1221.42 1516.14,1221.42 1516.73,1221.42 1517.32,1221.42 1517.9,1221.42 1518.49,1221.42 1519.07,1221.42 1519.66,1221.42 1520.25,1221.42 1520.83,1221.42 1521.42,1221.42 1522.01,1221.42 1522.59,1221.42 1523.18,1221.42 1523.77,1221.42 1524.35,1221.42 1524.94,1221.42 1525.52,1221.42 1526.11,1221.42 1526.7,1221.42 1527.28,1221.42 1527.87,1221.42 1528.46,1221.42 1529.04,1221.42 1529.63,1221.42 1530.22,1221.42 1530.8,1221.42 1531.39,1221.42 1531.98,1221.42 1532.56,1221.42 1533.15,1221.42 1533.73,1221.42 1534.32,1221.42 1534.91,1221.42 1535.49,1221.42 1536.08,1221.42 1536.67,1221.42 1537.25,1221.42 1537.84,1221.42 1538.43,1221.42 1539.01,1221.42 1539.6,1221.42 1540.19,1221.42 1540.77,1221.42 1541.36,1221.42 1541.94,1221.42 1542.53,1221.42 1543.12,1221.42 1543.7,1221.42 1544.29,1221.42 1544.88,1221.42 1545.46,1221.42 1546.05,1221.42 1546.64,1221.42 1547.22,1221.42 1547.81,1221.42 1548.4,1221.42 1548.98,1221.42 1549.57,1221.42 1550.15,1221.42 1550.74,1221.42 1551.33,1221.42 1551.91,1221.42 1552.5,1221.42 1553.09,1221.42 1553.67,1221.42 1554.26,1221.42 1554.85,1221.42 1555.43,1221.42 1556.02,1221.42 1556.6,1221.42 1557.19,1221.42 1557.78,1221.42 1558.36,1221.42 1558.95,1221.42 1559.54,1221.42 1560.12,1221.42 1560.71,1221.42 1561.3,1221.42 1561.88,1221.42 1562.47,1221.42 1563.06,1221.42 1563.64,1221.42 1564.23,1221.42 1564.81,1221.42 1565.4,1221.42 1565.99,1221.42 1566.57,1221.42 1567.16,1221.42 1567.75,1221.42 1568.33,1221.42 1568.92,1221.42 1569.51,1221.42 1570.09,1221.42 1570.68,1221.42 1571.27,1221.42 1571.85,1221.42 1572.44,1221.42 1573.02,1221.42 1573.61,1221.42 1574.2,1221.42 1574.78,1221.42 1575.37,1221.42 1575.96,1221.42 1576.54,1221.42 1577.13,1221.42 1577.72,1221.42 1578.3,1221.42 1578.89,1221.42 1579.47,1221.42 1580.06,1221.42 1580.65,1221.42 1581.23,1221.42 1581.82,1221.42 1582.41,1221.42 1582.99,1221.42 1583.58,1221.42 1584.17,1221.42 1584.75,1221.42 1585.34,1221.42 1585.93,1221.42 1586.51,1221.42 1587.1,1221.42 1587.68,1221.42 1588.27,1221.42 1588.86,1221.42 1589.44,1221.42 1590.03,1221.42 1590.62,1221.42 1591.2,1221.42 1591.79,1221.42 1592.38,1221.42 1592.96,1221.42 1593.55,1221.42 1594.14,1221.42 1594.72,1221.42 1595.31,1221.42 1595.89,1221.42 1596.48,1221.42 1597.07,1221.42 1597.65,1221.42 1598.24,1221.42 1598.83,1221.42 1599.41,1221.42 1600,1221.42 1600.59,1221.42 1601.17,1221.42 1601.76,1221.42 1602.34,1221.42 1602.93,1221.42 1603.52,1221.42 1604.1,1221.42 1604.69,1221.42 1605.28,1221.42 1605.86,1221.42 1606.45,1221.42 1607.04,1221.42 1607.62,1221.42 1608.21,1221.42 1608.8,1221.42 1609.38,1221.42 1609.97,1221.42 1610.55,1221.42 1611.14,1221.42 1611.73,1221.42 1612.31,1221.42 1612.9,1221.42 1613.49,1221.42 1614.07,1221.42 1614.66,1221.42 1615.25,1221.42 1615.83,1221.42 1616.42,1221.42 1617.01,1221.42 1617.59,1221.42 1618.18,1221.42 1618.76,1221.42 1619.35,1221.42 1619.94,1221.42 1620.52,1221.42 1621.11,1221.42 1621.7,1221.42 1622.28,1221.42 1622.87,1221.42 1623.46,1221.42 1624.04,1221.42 1624.63,1221.42 1625.22,1221.42 1625.8,1221.42 1626.39,1221.42 1626.97,1221.42 1627.56,1221.42 1628.15,1221.42 1628.73,1221.42 1629.32,1221.42 1629.91,1221.42 1630.49,1221.42 1631.08,1221.42 1631.67,1221.42 1632.25,1221.42 1632.84,1221.42 1633.42,1221.42 1634.01,1221.42 1634.6,1221.42 1635.18,1221.42 1635.77,1221.42 1636.36,1221.42 1636.94,1221.42 1637.53,1221.42 1638.12,1221.42 1638.7,1221.42 1639.29,1221.42 1639.88,1221.42 1640.46,1221.42 1641.05,1221.42 1641.63,1221.42 1642.22,1221.42 1642.81,1221.42 1643.39,1221.42 1643.98,1221.42 1644.57,1221.42 1645.15,1221.42 1645.74,1221.42 1646.33,1221.42 1646.91,1221.42 1647.5,1221.42 1648.09,1221.42 1648.67,1221.42 1649.26,1221.42 1649.84,1221.42 1650.43,1221.42 1651.02,1221.42 1651.6,1221.42 1652.19,1221.42 1652.78,1221.42 1653.36,1221.42 1653.95,1221.42 1654.54,1221.42 1655.12,1221.42 1655.71,1221.42 1656.29,1221.42 1656.88,1221.42 1657.47,1221.42 1658.05,1221.42 1658.64,1221.42 1659.23,1221.42 1659.81,1221.42 1660.4,1221.42 1660.99,1221.42 1661.57,1221.42 1662.16,1221.42 1662.75,1221.42 1663.33,1221.42 1663.92,1221.42 1664.5,1221.42 1665.09,1221.42 1665.68,1221.42 1666.26,1221.42 1666.85,1221.42 1667.44,1221.42 1668.02,1221.42 1668.61,1221.42 1669.2,1221.42 1669.78,1221.42 1670.37,1221.42 1670.96,1221.42 1671.54,1221.42 1672.13,1221.42 1672.71,1221.42 1673.3,1221.42 1673.89,1221.42 1674.47,1221.42 1675.06,1221.42 1675.65,1221.42 1676.23,1221.42 1676.82,1221.42 1677.41,1221.42 1677.99,1221.42 1678.58,1221.42 1679.17,1221.42 1679.75,1221.42 1680.34,1221.42 1680.92,1221.42 1681.51,1221.42 1682.1,1221.42 1682.68,1221.42 1683.27,1221.42 1683.86,1221.42 1684.44,1221.42 1685.03,1221.42 1685.62,1221.42 1686.2,1221.42 1686.79,1221.42 1687.37,1221.42 1687.96,1221.42 1688.55,1221.42 1689.13,1221.42 1689.72,1221.42 1690.31,1221.42 1690.89,1221.42 1691.48,1221.42 1692.07,1221.42 1692.65,1221.42 1693.24,1221.42 1693.83,1221.42 1694.41,1221.42 1695,1221.42 1695.58,1221.42 1696.17,1221.42 1696.76,1221.42 1697.34,1221.42 1697.93,1221.42 1698.52,1221.42 1699.1,1221.42 1699.69,1221.42 1700.28,1221.42 1700.86,1221.42 1701.45,1221.42 1702.04,1221.42 1702.62,1221.42 1703.21,1221.42 1703.79,1221.42 1704.38,1221.42 1704.97,1221.42 1705.55,1221.42 1706.14,1221.42 1706.73,1221.42 1707.31,1221.42 1707.9,1221.42 1708.49,1221.42 1709.07,1221.42 1709.66,1221.42 1710.24,1221.42 1710.83,1221.42 1711.42,1221.42 1712,1221.42 1712.59,1221.42 1713.18,1221.42 1713.76,1221.42 1714.35,1221.42 1714.94,1221.42 1715.52,1221.42 1716.11,1221.42 1716.7,1221.42 1717.28,1221.42 1717.87,1221.42 1718.45,1221.42 1719.04,1221.42 1719.63,1221.42 1720.21,1221.42 1720.8,1221.42 1721.39,1221.42 1721.97,1221.42 1722.56,1221.42 1723.15,1221.42 1723.73,1221.42 1724.32,1221.42 1724.91,1221.42 1725.49,1221.42 1726.08,1221.42 1726.66,1221.42 1727.25,1221.42 1727.84,1221.42 1728.42,1221.42 1729.01,1221.42 1729.6,1221.42 1730.18,1221.42 1730.77,1221.42 1731.36,1221.42 1731.94,1221.42 1732.53,1221.42 1733.11,1221.42 1733.7,1221.42 1734.29,1221.42 1734.87,1221.42 1735.46,1221.42 1736.05,1221.42 1736.63,1221.42 1737.22,1221.42 1737.81,1221.42 1738.39,1221.42 1738.98,1221.42 1739.57,1221.42 1740.15,1221.42 1740.74,1221.42 1741.32,1221.42 1741.91,1221.42 1742.5,1221.42 1743.08,1221.42 1743.67,1221.42 1744.26,1221.42 1744.84,1221.42 1745.43,1221.42 1746.02,1221.42 1746.6,1221.42 1747.19,1221.42 1747.78,1221.42 1748.36,1221.42 1748.95,1221.42 1749.53,1221.42 1750.12,1221.42 1750.71,1221.42 1751.29,1221.42 1751.88,1221.42 1752.47,1221.42 1753.05,1221.42 1753.64,1221.42 1754.23,1221.42 1754.81,1221.42 1755.4,1221.42 1755.99,1221.42 1756.57,1221.42 1757.16,1221.42 1757.74,1221.42 1758.33,1221.42 1758.92,1221.42 1759.5,1221.42 1760.09,1221.42 1760.68,1221.42 1761.26,1221.42 1761.85,1221.42 1762.44,1221.42 1763.02,1221.42 1763.61,1221.42 1764.19,1221.42 1764.78,1221.42 1765.37,1221.42 1765.95,1221.42 1766.54,1221.42 1767.13,1221.42 1767.71,1221.42 1768.3,1221.42 1768.89,1221.42 1769.47,1221.42 1770.06,1221.42 1770.65,1221.42 1771.23,1221.42 1771.82,1221.42 1772.4,1221.42 1772.99,1221.42 1773.58,1221.42 1774.16,1221.42 1774.75,1221.42 1775.34,1221.42 1775.92,1221.42 1776.51,1221.42 1777.1,1221.42 1777.68,1221.42 1778.27,1221.42 1778.86,1221.42 1779.44,1221.42 1780.03,1221.42 1780.61,1221.42 1781.2,1221.42 1781.79,1221.42 1782.37,1221.42 1782.96,1221.42 1783.55,1221.42 1784.13,1221.42 1784.72,1221.42 1785.31,1221.42 1785.89,1221.42 1786.48,1221.42 1787.06,1221.42 1787.65,1221.42 1788.24,1221.42 1788.82,1221.42 1789.41,1221.42 1790,1221.42 1790.58,1221.42 1791.17,1221.42 1791.76,1221.42 1792.34,1221.42 1792.93,1221.42 1793.52,1221.42 1794.1,1221.42 1794.69,1221.42 1795.27,1221.42 1795.86,1221.42 1796.45,1221.42 1797.03,1221.42 1797.62,1221.42 1798.21,1221.42 1798.79,1221.42 1799.38,1221.42 1799.97,1221.42 1800.55,1221.42 1801.14,1221.42 1801.73,1221.42 1802.31,1221.42 1802.9,1221.42 1803.48,1221.42 1804.07,1221.42 1804.66,1221.42 1805.24,1221.42 1805.83,1221.42 1806.42,1221.42 1807,1221.42 1807.59,1221.42 1808.18,1221.42 1808.76,1221.42 1809.35,1221.42 1809.94,1221.42 1810.52,1221.42 1811.11,1221.42 1811.69,1221.42 1812.28,1221.42 1812.87,1221.42 1813.45,1221.42 1814.04,1221.42 1814.63,1221.42 1815.21,1221.42 1815.8,1221.42 1816.39,1221.42 1816.97,1221.42 1817.56,1221.42 1818.14,1221.42 1818.73,1221.42 1819.32,1221.42 1819.9,1221.42 1820.49,1221.42 1821.08,1221.42 1821.66,1221.42 1822.25,1221.42 1822.84,1221.42 1823.42,1221.42 1824.01,1221.42 1824.6,1221.42 1825.18,1221.42 1825.77,1221.42 1826.35,1221.42 1826.94,1221.42 1827.53,1221.42 1828.11,1221.42 1828.7,1221.42 1829.29,1221.42 1829.87,1221.42 1830.46,1221.42 1831.05,1221.42 1831.63,1221.42 1832.22,1221.42 1832.81,1221.42 1833.39,1221.42 1833.98,1221.42 1834.56,1221.42 1835.15,1221.42 1835.74,1221.42 1836.32,1221.42 1836.91,1221.42 1837.5,1221.42 1838.08,1221.42 1838.67,1221.42 1839.26,1221.42 1839.84,1221.42 1840.43,1221.42 1841.01,1221.42 1841.6,1221.42 1842.19,1221.42 1842.77,1221.42 1843.36,1221.42 1843.95,1221.42 1844.53,1221.42 1845.12,1221.42 1845.71,1221.42 1846.29,1221.42 1846.88,1221.42 1847.47,1221.42 1848.05,1221.42 1848.64,1221.42 1849.22,1221.42 1849.81,1221.42 1850.4,1221.42 1850.98,1221.42 1851.57,1221.42 1852.16,1221.42 1852.74,1221.42 1853.33,1221.42 1853.92,1221.42 1854.5,1221.42 1855.09,1221.42 1855.68,1221.42 1856.26,1221.42 1856.85,1221.42 1857.43,1221.42 1858.02,1221.42 1858.61,1221.42 1859.19,1221.42 1859.78,1221.42 1860.37,1221.42 1860.95,1221.42 1861.54,1221.42 1862.13,1221.42 1862.71,1221.42 1863.3,1221.42 1863.88,1221.42 1864.47,1221.42 1865.06,1221.42 1865.64,1221.42 1866.23,1221.42 1866.82,1221.42 1867.4,1221.42 1867.99,1221.42 1868.58,1221.42 1869.16,1221.42 1869.75,1221.42 1870.34,1221.42 1870.92,1221.42 1871.51,1221.42 1872.09,1221.42 1872.68,1221.42 1873.27,1221.42 1873.85,1221.42 1874.44,1221.42 1875.03,1221.42 1875.61,1221.42 1876.2,1221.42 1876.79,1221.42 1877.37,1221.42 1877.96,1221.42 1878.55,1221.42 1879.13,1221.42 1879.72,1221.42 1880.3,1221.42 1880.89,1221.42 1881.48,1221.42 1882.06,1221.42 1882.65,1221.42 1883.24,1221.42 1883.82,1221.42 1884.41,1221.42 1885,1221.42 1885.58,1221.42 1886.17,1221.42 1886.76,1221.42 1887.34,1221.42 1887.93,1221.42 1888.51,1221.42 1889.1,1221.42 1889.69,1221.42 1890.27,1221.42 1890.86,1221.42 1891.45,1221.42 1892.03,1221.42 1892.62,1221.42 1893.21,1221.42 1893.79,1221.42 1894.38,1221.42 1894.96,1221.42 1895.55,1221.42 1896.14,1221.42 1896.72,1221.42 1897.31,1221.42 1897.9,1221.42 1898.48,1221.42 1899.07,1221.42 1899.66,1221.42 1900.24,1221.42 1900.83,1221.42 1901.42,1221.42 1902,1221.42 1902.59,1221.42 1903.17,1221.42 1903.76,1221.42 1904.35,1221.42 1904.93,1221.42 1905.52,1221.42 1906.11,1221.42 1906.69,1221.42 1907.28,1221.42 1907.87,1221.42 1908.45,1221.42 1909.04,1221.42 1909.63,1221.42 1910.21,1221.42 1910.8,1221.42 1911.38,1221.42 1911.97,1221.42 1912.56,1221.42 1913.14,1221.42 1913.73,1221.42 1914.32,1221.42 1914.9,1221.42 1915.49,1221.42 1916.08,1221.42 1916.66,1221.42 1917.25,1221.42 1917.83,1221.42 1918.42,1221.42 1919.01,1221.42 1919.59,1221.42 1920.18,1221.42 1920.77,1221.42 1921.35,1221.42 1921.94,1221.42 1922.53,1221.42 1923.11,1221.42 1923.7,1221.42 1924.29,1221.42 1924.87,1221.42 1925.46,1221.42 1926.04,1221.42 1926.63,1221.42 1927.22,1221.42 1927.8,1221.42 1928.39,1221.42 1928.98,1221.42 1929.56,1221.42 1930.15,1221.42 1930.74,1221.42 1931.32,1221.42 1931.91,1221.42 1932.5,1221.42 1933.08,1221.42 1933.67,1221.42 1934.25,1221.42 1934.84,1221.42 1935.43,1221.42 1936.01,1221.42 1936.6,1221.42 1937.19,1221.42 1937.77,1221.42 1938.36,1221.42 1938.95,1221.42 1939.53,1221.42 1940.12,1221.42 1940.71,1221.42 1941.29,1221.42 1941.88,1221.42 1942.46,1221.42 1943.05,1221.42 1943.64,1221.42 1944.22,1221.42 1944.81,1221.42 1945.4,1221.42 1945.98,1221.42 1946.57,1221.42 1947.16,1221.42 1947.74,1221.42 1948.33,1221.42 1948.91,1221.42 1949.5,1221.42 1950.09,1221.42 1950.67,1221.42 1951.26,1221.42 1951.85,1221.42 1952.43,1221.42 1953.02,1221.42 1953.61,1221.42 1954.19,1221.42 1954.78,1221.42 1955.37,1221.42 1955.95,1221.42 1956.54,1221.42 1957.12,1221.42 1957.71,1221.42 1958.3,1221.42 1958.88,1221.42 1959.47,1221.42 1960.06,1221.42 1960.64,1221.42 1961.23,1221.42 1961.82,1221.42 1962.4,1221.42 1962.99,1221.42 1963.58,1221.42 1964.16,1221.42 1964.75,1221.42 1965.33,1221.42 1965.92,1221.42 1966.51,1221.42 1967.09,1221.42 1967.68,1221.42 1968.27,1221.42 1968.85,1221.42 1969.44,1221.42 1970.03,1221.42 1970.61,1221.42 1971.2,1221.42 1971.78,1221.42 1972.37,1221.42 1972.96,1221.42 1973.54,1221.42 1974.13,1221.42 1974.72,1221.42 1975.3,1221.42 1975.89,1221.42 1976.48,1221.42 1977.06,1221.42 1977.65,1221.42 1978.24,1221.42 1978.82,1221.42 1979.41,1221.42 1979.99,1221.42 1980.58,1221.42 1981.17,1221.42 1981.75,1221.42 1982.34,1221.42 1982.93,1221.42 1983.51,1221.42 1984.1,1221.42 1984.69,1221.42 1985.27,1221.42 1985.86,1221.42 1986.45,1221.42 1987.03,1221.42 1987.62,1221.42 1988.2,1221.42 1988.79,1221.42 1989.38,1221.42 1989.96,1221.42 1990.55,1221.42 1991.14,1221.42 1991.72,1221.42 1992.31,1221.42 1992.9,1221.42 1993.48,1221.42 1994.07,1221.42 1994.65,1221.42 1995.24,1221.42 1995.83,1221.42 1996.41,1221.42 1997,1221.42 1997.59,1221.42 1998.17,1221.42 1998.76,1221.42 1999.35,1221.42 1999.93,1221.42 2000.52,1221.42 2001.11,1221.42 2001.69,1221.42 2002.28,1221.42 2002.86,1221.42 2003.45,1221.42 2004.04,1221.42 2004.62,1221.42 2005.21,1221.42 2005.8,1221.42 2006.38,1221.42 2006.97,1221.42 2007.56,1221.42 2008.14,1221.42 2008.73,1221.42 2009.32,1221.42 2009.9,1221.42 2010.49,1221.42 2011.07,1221.42 2011.66,1221.42 2012.25,1221.42 2012.83,1221.42 2013.42,1221.42 2014.01,1221.42 2014.59,1221.42 2015.18,1221.42 2015.77,1221.42 2016.35,1221.42 2016.94,1221.42 2017.53,1221.42 2018.11,1221.42 2018.7,1221.42 2019.28,1221.42 2019.87,1221.42 2020.46,1221.42 2021.04,1221.42 2021.63,1221.42 2022.22,1221.42 2022.8,1221.42 2023.39,1221.42 2023.98,1221.42 2024.56,1221.42 2025.15,1221.42 2025.73,1221.42 2026.32,1221.42 2026.91,1221.42 2027.49,1221.42 2028.08,1221.42 2028.67,1221.42 2029.25,1221.42 2029.84,1221.42 2030.43,1221.42 2031.01,1221.42 2031.6,1221.42 2032.19,1221.42 2032.77,1221.42 2033.36,1221.42 2033.94,1221.42 2034.53,1221.42 2035.12,1221.42 2035.7,1221.42 2036.29,1221.42 2036.88,1221.42 2037.46,1221.42 2038.05,1221.42 2038.64,1221.42 2039.22,1221.42 2039.81,1221.42 2040.4,1221.42 2040.98,1221.42 2041.57,1221.42 2042.15,1221.42 2042.74,1221.42 2043.33,1221.42 2043.91,1221.42 2044.5,1221.42 2045.09,1221.42 2045.67,1221.42 2046.26,1221.42 2046.85,1221.42 2047.43,1221.42 2048.02,1221.42 2048.6,1221.42 2049.19,1221.42 2049.78,1221.42 2050.36,1221.42 2050.95,1221.42 2051.54,1221.42 2052.12,1221.42 2052.71,1221.42 2053.3,1221.42 2053.88,1221.42 2054.47,1221.42 2055.06,1221.42 2055.64,1221.42 2056.23,1221.42 2056.81,1221.42 2057.4,1221.42 2057.99,1221.42 2058.57,1221.42 2059.16,1221.42 2059.75,1221.42 2060.33,1221.42 2060.92,1221.42 2061.51,1221.42 2062.09,1221.42 2062.68,1221.42 2063.27,1221.42 2063.85,1221.42 2064.44,1221.42 2065.02,1221.42 2065.61,1221.42 2066.2,1221.42 2066.78,1221.42 2067.37,1221.42 2067.96,1221.42 2068.54,1221.42 2069.13,1221.42 2069.72,1221.42 2070.3,1221.42 2070.89,1221.42 2071.48,1221.42 2072.06,1221.42 2072.65,1221.42 2073.23,1221.42 2073.82,1221.42 2074.41,1221.42 2074.99,1221.42 2075.58,1221.42 2076.17,1221.42 2076.75,1221.42 2077.34,1221.42 2077.93,1221.42 2078.51,1221.42 2079.1,1221.42 2079.68,1221.42 2080.27,1221.42 2080.86,1221.42 2081.44,1221.42 2082.03,1221.42 2082.62,1221.42 2083.2,1221.42 2083.79,1221.42 2084.38,1221.42 2084.96,1221.42 2085.55,1221.42 2086.14,1221.42 2086.72,1221.42 2087.31,1221.42 2087.89,1221.42 2088.48,1221.42 2089.07,1221.42 2089.65,1221.42 2090.24,1221.42 2090.83,1221.42 2091.41,1221.42 2092,1221.42 2092.59,1221.42 2093.17,1221.42 2093.76,1221.42 2094.35,1221.42 2094.93,1221.42 2095.52,1221.42 2096.1,1221.42 2096.69,1221.42 2097.28,1221.42 2097.86,1221.42 2098.45,1221.42 2099.04,1221.42 2099.62,1221.42 2100.21,1221.42 2100.8,1221.42 2101.38,1221.42 2101.97,1221.42 2102.55,1221.42 2103.14,1221.42 2103.73,1221.42 2104.31,1221.42 2104.9,1221.42 2105.49,1221.42 2106.07,1221.42 2106.66,1221.42 2107.25,1221.42 2107.83,1221.42 2108.42,1221.42 2109.01,1221.42 2109.59,1221.42 2110.18,1221.42 2110.76,1221.42 2111.35,1221.42 2111.94,1221.42 2112.52,1221.42 2113.11,1221.42 2113.7,1221.42 2114.28,1221.42 2114.87,1221.42 2115.46,1221.42 2116.04,1221.42 2116.63,1221.42 2117.22,1221.42 2117.8,1221.42 2118.39,1221.42 2118.97,1221.42 2119.56,1221.42 2120.15,1221.42 2120.73,1221.42 2121.32,1221.42 2121.91,1221.42 2122.49,1221.42 2123.08,1221.42 2123.67,1221.42 2124.25,1221.42 2124.84,1221.42 2125.42,1221.42 2126.01,1221.42 2126.6,1221.42 2127.18,1221.42 2127.77,1221.42 2128.36,1221.42 2128.94,1221.42 2129.53,1221.42 2130.12,1221.42 2130.7,1221.42 2131.29,1221.42 2131.88,1221.42 2132.46,1221.42 2133.05,1221.42 2133.63,1221.42 2134.22,1221.42 2134.81,1221.42 2135.39,1221.42 2135.98,1221.42 2136.57,1221.42 2137.15,1221.42 2137.74,1221.42 2138.33,1221.42 2138.91,1221.42 2139.5,1221.42 2140.09,1221.42 2140.67,1221.42 2141.26,1221.42 2141.84,1221.42 2142.43,1221.42 2143.02,1221.42 2143.6,1221.42 2144.19,1221.42 2144.78,1221.42 2145.36,1221.42 2145.95,1221.42 2146.54,1221.42 2147.12,1221.42 2147.71,1221.42 2148.3,1221.42 2148.88,1221.42 2149.47,1221.42 2150.05,1221.42 2150.64,1221.42 2151.23,1221.42 2151.81,1221.42 2152.4,1221.42 2152.99,1221.42 2153.57,1221.42 2154.16,1221.42 2154.75,1221.42 2155.33,1221.42 2155.92,1221.42 2156.5,1221.42 2157.09,1221.42 2157.68,1221.42 2158.26,1221.42 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.21,1201.53 1397.33,899.083 \"/>\n<polyline clip-path=\"url(#clip082)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1240.79 985.439,1201.53 2158.26,1201.53 2158.26,1240.79 985.439,1240.79 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip080)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip080)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip083\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip080)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip080)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip080)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip083)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-61.1853 162.114,-76.6728 162.673,-208.482 163.232,635.639 163.792,-639.226 164.351,-1779.6 164.91,-1955.47 165.469,-2123.82 166.029,-3183.08 166.588,-4116.94 167.147,-4209.95 167.706,-5061.39 168.266,-5809.1 168.825,-6476.42 169.384,-7105.85 169.943,-7672.92 170.503,-8183.06 171.062,-8630.96 171.621,-9062.4 172.18,-9446.36 172.74,-9765.22 173.299,-10064.5 173.858,-10294.3 174.417,-10074.5 174.977,-10291.9 175.536,-10068.2 176.095,-10238.3 176.655,-10355.1 177.214,-10463.6 177.773,-9940.15 178.332,-10038.8 178.892,-10100.4 179.451,-10148.6 180.01,-10177 180.569,-9953.08 181.129,-9534.57 181.688,-9547.49 182.247,-9542.3 182.806,-9521.79 183.366,-9135.22 183.925,-8955.57 184.484,-8922.58 185.043,-8874.81 185.603,-8687.47 186.162,-8499.84 186.721,-8191.22 187.28,-8000.7 187.84,-7817.5 188.399,-7635.65 188.958,-7366.31 189.517,-7181.05 190.077,-7099.11 190.636,-7029.22 191.195,-6936.03 191.754,-6674.14 192.314,-6424.4 192.873,-6272.63 193.432,-6192.23 193.991,-5899.01 194.551,-5752.09 195.11,-5602.2 195.669,-5454.56 196.228,-5253.25 196.788,-5057.14 197.347,-4922.26 197.906,-4843.02 198.465,-4666.41 199.025,-4485.11 199.584,-4361.74 200.143,-4234.73 200.702,-4156.14 201.262,-3988.62 201.821,-3779.2 202.38,-3666.52 202.939,-3469.78 203.499,-3323.3 204.058,-3219.3 204.617,-3115.68 205.176,-3009.16 205.736,-2872.01 206.295,-2774.6 206.854,-2641.57 207.413,-2519.37 207.973,-2361.94 208.532,-2249.23 209.091,-2013.28 209.65,-1906.49 210.21,-1777.99 210.769,-1743.78 211.328,-1678.76 211.887,-1554.9 212.447,-1439.68 213.006,-1349.2 213.565,-1291.92 214.124,-1262.41 214.684,-1204.47 215.243,-1122.47 215.802,-1018.3 216.361,-991.818 216.921,-912.538 217.48,-813.644 218.039,-789.797 218.598,-739.24 219.158,-689.557 219.717,-646.678 220.276,-574.095 220.835,-529.049 221.395,-422.96 221.954,-386.533 222.513,-393.397 223.072,-290.15 223.632,-233.362 224.191,-174.238 224.75,-167.047 225.309,-156.69 225.869,-36.3476 226.428,-9.35017 226.987,41.0884 227.546,87.9444 228.106,131.471 228.665,174.078 229.224,215.688 229.783,232.442 230.343,233.98 230.902,291.279 231.461,312.372 232.02,348.907 232.58,367.396 233.139,370.766 233.698,412.547 234.257,456.96 234.817,496.672 235.376,496.508 235.935,495.439 236.494,493.807 237.054,493.58 237.613,494.695 238.172,499.228 238.731,520.659 239.291,484.768 239.85,468.529 240.409,475.582 240.968,501.511 241.528,528.392 242.087,515.278 242.646,522.478 243.205,616.509 243.765,619.147 244.324,621.019 244.883,622.451 245.442,628.073 246.002,686.177 246.561,684.116 247.12,682.189 247.679,704.976 248.239,702.941 248.798,702.981 249.357,706.488 249.916,675.319 250.476,665.001 251.035,668.453 251.594,656.148 252.153,664.075 252.713,685.468 253.272,707.925 253.831,745.14 254.39,750.805 254.95,755.364 255.509,758.7 256.068,778.496 256.627,813.187 257.187,828.525 257.746,828.745 258.305,830.602 258.864,818.269 259.424,837.955 259.983,841.035 260.542,818.936 261.101,839.546 261.661,836.774 262.22,870.145 262.779,851.747 263.338,850.855 263.898,884.619 264.457,900.441 265.016,932.906 265.575,965.656 266.135,974.727 266.694,968.282 267.253,960.914 267.812,935.129 268.372,930.26 268.931,912.754 269.49,924.099 270.049,941.367 270.609,972.122 271.168,966.796 271.727,962.378 272.286,938.899 272.846,916.699 273.405,912.53 273.964,909.261 274.523,907.569 275.083,925.484 275.642,953.259 276.201,947.989 276.76,961.387 277.32,972.703 277.879,969.786 278.438,932.964 278.997,947.172 279.557,941.679 280.116,951.283 280.675,943.447 281.234,973.101 281.794,969.619 282.353,977.539 282.912,971.982 283.471,983.191 284.031,959.91 284.59,957.618 285.149,968.617 285.708,978.143 286.268,1006.81 286.827,1000.97 287.386,978.73 287.945,988.861 288.505,980.795 289.064,974.58 289.623,985.264 290.182,975.63 290.742,967.936 291.301,997.327 291.86,959.359 292.419,939.709 292.979,952.646 293.538,931.161 294.097,926.89 294.656,943.173 295.216,971.527 295.775,982.445 296.334,958.128 296.893,953.384 297.453,945.031 298.012,955.723 298.571,966.34 299.13,961.198 299.69,974.572 300.249,988.606 300.808,985.166 301.368,991.73 301.927,984.038 302.486,975.796 303.045,970.22 303.605,982.35 304.164,975.959 304.723,1002.22 305.282,996.275 305.842,971.656 306.401,963.572 306.96,971.231 307.519,982.195 308.079,960.487 308.638,938.312 309.197,938.079 309.756,932.676 310.316,943.844 310.875,967.409 311.434,992.56 311.993,1001.13 312.553,1007.49 313.112,935.866 313.671,963.592 314.23,960.562 314.79,953.567 315.349,984.885 315.908,994.607 316.467,972.493 317.027,948.215 317.586,943.622 318.145,954.236 318.704,966.794 319.264,973.396 319.823,995.874 320.382,988.57 320.941,963.544 321.501,941.37 322.06,984.326 322.619,961.228 323.178,952.252 323.738,931.658 324.297,926.477 324.856,973.329 325.415,934.441 325.975,928.961 326.534,906.825 327.093,935.774 327.652,928.945 328.212,944.525 328.771,937.524 329.33,896.587 329.889,863.822 330.449,843.754 331.008,875.953 331.567,871.62 332.126,851.2 332.686,849.29 333.245,879.44 333.804,892.524 334.363,871.912 334.923,852.202 335.482,815.715 336.041,832.4 336.6,831.58 337.16,831.069 337.719,815.878 338.278,833.277 338.837,830.66 339.397,829.395 339.956,794.996 340.515,782.605 341.074,784.948 341.634,786.354 342.193,807.553 342.752,856.265 343.311,838.757 343.871,866.413 344.43,864.426 344.989,826.759 345.548,826.769 346.108,823.428 346.667,872.73 347.226,887.698 347.785,863.539 348.345,888.353 348.904,882.102 349.463,883.588 350.022,863.32 350.582,909.89 351.141,889.224 351.7,915.622 352.259,908.355 352.819,901.36 353.378,845.187 353.937,844.903 354.496,847.231 355.056,844.398 355.615,840.765 356.174,838.121 356.733,834.77 357.293,832.085 357.852,796.853 358.411,796.591 358.97,798.161 359.53,814.173 360.089,828.425 360.648,825.346 361.207,840.658 361.767,841.551 362.326,807.393 362.885,790.807 363.444,758.093 364.004,762.538 364.563,760.89 365.122,777.658 365.681,746.293 366.241,795.307 366.8,810.323 367.359,797.202 367.918,797.559 368.478,777.674 369.037,789.618 369.596,772.506 370.155,756.466 370.715,741.588 371.274,776.131 371.833,779.848 372.392,813.705 372.952,843.316 373.511,860.21 374.07,869.532 374.629,849.413 375.189,864.792 375.748,860.286 376.307,874.355 376.866,834.626 377.426,848.225 377.985,876.204 378.544,854.372 379.103,832.193 379.663,827.636 380.222,840.581 380.781,871.981 381.34,854.118 381.9,882.338 382.459,889.533 383.018,885.427 383.577,866.574 384.137,845.316 384.696,826.564 385.255,839.822 385.814,804.081 386.374,820.037 386.933,832.944 387.492,861.878 388.051,889.571 388.611,866.742 389.17,861.869 389.729,871.569 390.288,884.661 390.848,911.563 391.407,905.56 391.966,914.647 392.525,940.287 393.085,931.482 393.644,908.588 394.203,900.041 394.762,874.978 395.322,871.658 395.881,851.214 396.44,847.404 396.999,843.925 397.559,805.864 398.118,817.438 398.677,761.161 399.236,758.523 399.796,775.635 400.355,758.715 400.914,740.913 401.473,757.648 402.033,778.444 402.592,775.023 403.151,775.017 403.71,759.063 404.27,757.618 404.829,737.854 405.388,742.542 405.947,744.144 406.507,766.464 407.066,753.874 407.625,804.985 408.184,800.372 408.744,812.83 409.303,810.398 409.862,826.261 410.421,805.275 410.981,805.484 411.54,789.946 412.099,772.092 412.658,769.927 413.218,788.811 413.777,803.179 414.336,802.193 414.895,798.648 415.455,826.817 416.014,821.195 416.573,836.323 417.132,851.271 417.692,848.993 418.251,830.786 418.81,841.758 419.369,839.229 419.929,865.725 420.488,861.818 421.047,874.141 421.606,897.043 422.166,873.521 422.725,884.913 423.284,828.672 423.843,888.285 424.403,926.442 424.962,900.539 425.521,908.109 426.08,917.713 426.64,941.367 427.199,947.889 427.758,949.053 428.318,922.806 428.877,898.286 429.436,889.94 429.995,867.784 430.555,908.764 431.114,884.859 431.673,843.836 432.232,820.759 432.792,815.79 433.351,780.012 433.91,763.565 434.469,764.321 435.029,748.129 435.588,734.093 436.147,734.159 436.706,736.955 437.266,749.964 437.825,750.925 438.384,751.168 438.943,749.44 439.503,780.891 440.062,765.799 440.621,733.187 441.18,779.4 441.74,778.21 442.299,761.708 442.858,744.136 443.417,728.121 443.977,711.01 444.536,695.901 445.095,697.104 445.654,714.388 446.214,715.266 446.773,729.058 447.332,714.487 447.891,761.592 448.451,715.495 449.01,715.924 449.569,685.175 450.128,656.346 450.688,707.863 451.247,743.212 451.806,745.439 452.365,780.747 452.925,780.592 453.484,763.197 454.043,776.985 454.602,741.888 455.162,757.053 455.721,739.093 456.28,754.888 456.839,737.122 457.399,687.161 457.958,740.405 458.517,723.026 459.076,724.628 459.636,728.872 460.195,726.536 460.754,724.498 461.313,706.366 461.873,709.657 462.432,695.903 462.991,728.847 463.55,776.922 464.11,779.198 464.669,776.817 465.228,772.406 465.787,736.699 466.347,768.304 466.906,751.513 467.465,748.122 468.024,744.419 468.584,758.209 469.143,756.609 469.702,739.162 470.261,805.504 470.821,832.395 471.38,842.795 471.939,835.341 472.498,814.446 473.058,812.193 473.617,839.816 474.176,849.489 474.735,859.794 475.295,853.479 475.854,860.918 476.413,875.032 476.972,851.06 477.532,847.688 478.091,824.341 478.65,803.276 479.209,810.244 479.769,759.785 480.328,773.327 480.887,768.189 481.446,752.867 482.006,735.557 482.565,769.407 483.124,752.134 483.683,720.295 484.243,692.236 484.802,694.789 485.361,681.371 485.92,684.962 486.48,623.988 487.039,629.131 487.598,633.138 488.157,606.466 488.717,647.101 489.276,618.917 489.835,626.308 490.394,617.075 490.954,590.645 491.513,617.374 492.072,639.762 492.631,642.11 493.191,661.873 493.75,711.088 494.309,713.763 494.868,710.561 495.428,728.64 495.987,761.476 496.546,774.738 497.105,754.916 497.665,750.854 498.224,750.405 498.783,750.832 499.342,748.471 499.902,730.052 500.461,696.692 501.02,699.787 501.579,704.137 502.139,657.44 502.698,676.498 503.257,678.682 503.816,681.73 504.376,684.951 504.935,691.548 505.494,691.559 506.053,675.499 506.613,662.436 507.172,682.434 507.731,705.131 508.29,706.269 508.85,706.778 509.409,706.372 509.968,724.388 510.527,724.087 511.087,709.544 511.646,693.738 512.205,696.589 512.764,683.772 513.324,687.476 513.883,711.169 514.442,711.439 515.001,692.817 515.561,707.511 516.12,706.069 516.679,709.404 517.238,692.966 517.798,693.256 518.357,675.484 518.916,663.578 519.475,701.167 520.035,702.764 520.594,700.777 521.153,702.279 521.712,686.148 522.272,706.468 522.831,680.859 523.39,682.516 523.949,650.92 524.509,654.942 525.068,674.656 525.627,676.226 526.186,664.763 526.746,668.407 527.305,686.826 527.864,669.774 528.423,685.609 528.983,688.252 529.542,674.707 530.101,691.602 530.66,693.576 531.22,762.587 531.779,757.684 532.338,755.427 532.897,753.078 533.457,718.259 534.016,734.107 534.575,764.465 535.134,746.125 535.694,709.282 536.253,710.25 536.812,695.658 537.371,677.685 537.931,694.161 538.49,689.267 539.049,691.721 539.608,740.85 540.168,755.602 540.727,751.438 541.286,749.072 541.845,747.267 542.405,743.602 542.964,777.816 543.523,806.964 544.082,815.294 544.642,781.286 545.201,790.35 545.76,784.852 546.319,779.954 546.879,778.284 547.438,761.692 547.997,745.977 548.556,743.535 549.116,742.521 549.675,739.464 550.234,704.36 550.793,702.017 551.353,688.673 551.912,720.317 552.471,769.661 553.031,749.251 553.59,730.314 554.149,758.705 554.708,740.413 555.268,753.088 555.827,765.945 556.386,796.67 556.945,726.045 557.505,693.178 558.064,721.917 558.623,707.122 559.182,691.208 559.742,690.613 560.301,754.054 560.86,766.084 561.419,746.97 561.979,745.615 562.538,758.408 563.097,725.228 563.656,739.952 564.216,753.524 564.775,719.549 565.334,753.66 565.893,751.027 566.453,783.716 567.012,743.701 567.571,725.009 568.13,741.687 568.69,707.496 569.249,722.34 569.808,719.443 570.367,737.359 570.927,751.923 571.486,733.256 572.045,731.084 572.604,745.52 573.164,713.886 573.723,715.594 574.282,716.92 574.841,716.027 575.401,716.453 575.96,682.039 576.519,698.801 577.078,744.107 577.638,737.836 578.197,768.72 578.756,762.652 579.315,727.839 579.875,742.579 580.434,706.08 580.993,739.842 581.552,721.701 582.112,721.614 582.671,676.57 583.23,678.972 583.789,680.716 584.349,711.293 584.908,725.804 585.467,698.239 586.026,681.135 586.586,633.537 587.145,602.099 587.704,608.917 588.263,614.183 588.823,621.638 589.382,654.606 589.941,674.88 590.5,697.243 591.06,688.29 591.619,673.405 592.178,658.764 592.737,660.327 593.297,679.563 593.856,648.144 594.415,635.916 594.974,655.204 595.534,687.639 596.093,703.595 596.652,721.908 597.211,719.725 597.771,703.424 598.33,688.828 598.889,688.631 599.448,673.61 600.008,672.083 600.567,707.142 601.126,691.875 601.685,675.199 602.245,657.326 602.804,660.711 603.363,665.057 603.922,686.525 604.482,718.035 605.041,732.692 605.6,731.332 606.159,713.076 606.719,697.466 607.278,694.548 607.837,678.096 608.396,661.295 608.956,659.817 609.515,679.012 610.074,667.623 610.633,672.935 611.193,676.437 611.752,660.888 612.311,660.176 612.87,678.423 613.43,694.889 613.989,710.969 614.548,711.498 615.107,710.367 615.667,714.421 616.226,732.359 616.785,734.769 617.344,715.606 617.904,734.758 618.463,734.511 619.022,713.589 619.581,729.304 620.141,742.625 620.7,756.404 621.259,768.534 621.818,748.707 622.378,760.106 622.937,773.224 623.496,753.767 624.055,782.88 624.615,778.442 625.174,746.813 625.733,745.587 626.292,741.546 626.852,724.087 627.411,722.93 627.97,739.294 628.529,722.836 629.089,721.722 629.648,768.47 630.207,746.516 630.766,728.826 631.326,740.323 631.885,766.758 632.444,794.237 633.003,803.902 633.563,783.865 634.122,762.976 634.681,742.589 635.24,755.693 635.8,757.879 636.359,754.898 636.918,747.738 637.477,681.97 638.037,715.758 638.596,711.939 639.155,725.771 639.714,742.589 640.274,792.203 640.833,803.264 641.392,795.922 641.951,787.676 642.511,767.093 643.07,775.212 643.629,753.379 644.188,733.132 644.748,697.777 645.307,714.785 645.866,715.179 646.425,761.001 646.985,760.619 647.544,759.306 648.103,753.326 648.662,751.368 649.222,749.077 649.781,716.661 650.34,702.318 650.899,749.087 651.459,748.878 652.018,729.225 652.577,742.203 653.136,737.336 653.696,702.052 654.255,720.399 654.814,734.865 655.373,730.683 655.933,725.792 656.492,754.33 657.051,750.729 657.61,765.155 658.17,765.226 658.729,726.41 659.288,707.414 659.847,660.654 660.407,631.801 660.966,619.528 661.525,606.06 662.084,660.779 662.644,629.245 663.203,650.089 663.762,684.802 664.321,685.951 664.881,669.581 665.44,669.311 665.999,656.483 666.558,643.194 667.118,612.674 667.677,632.29 668.236,637.067 668.795,623.221 669.355,659.952 669.914,662.932 670.473,661.083 671.032,679.749 671.592,681.746 672.151,663.584 672.71,664.299 673.269,649.842 673.829,654.31 674.388,673.671 674.947,657.03 675.506,662.116 676.066,715.244 676.625,701.115 677.184,730.727 677.743,712.269 678.303,696.376 678.862,712.832 679.421,678.489 679.981,678.744 680.54,692.747 681.099,707.181 681.658,706.918 682.218,707.582 682.777,674.758 683.336,675.875 683.895,677.4 684.455,726.548 685.014,696.25 685.573,697.975 686.132,730.007 686.692,712.782 687.251,712.989 687.81,696.09 688.369,695.675 688.929,696.901 689.488,716.955 690.047,729.763 690.606,728.002 691.166,710.957 691.725,675.933 692.284,694.877 692.843,727.35 693.403,694.523 693.962,677.136 694.521,678.749 695.08,679.632 695.64,696.521 696.199,711.38 696.758,711.092 697.317,712.466 697.877,711.405 698.436,692.306 698.995,708.094 699.554,690.157 700.114,708.293 700.673,694.278 701.232,711.493 701.791,696.605 702.351,682.288 702.91,684.939 703.469,686.142 704.028,703.007 704.588,719.066 705.147,674.023 705.706,677.939 706.265,659.492 706.825,697.945 707.384,683.016 707.943,698.856 708.502,716.176 709.062,719.217 709.621,702.074 710.18,714.236 710.739,714.369 711.299,666.323 711.858,650.833 712.417,669.056 712.976,703.089 713.536,687.512 714.095,673.387 714.654,660.856 715.213,645.047 715.773,645.659 716.332,651.411 716.891,652.635 717.45,620.505 718.01,623.929 718.569,662.127 719.128,681.792 719.687,668.225 720.247,685.883 720.806,704.552 721.365,701.214 721.924,716.292 722.484,749.153 723.043,824.052 723.602,830.267 724.161,807.371 724.721,787.133 725.28,815.626 725.839,789.094 726.398,801.905 726.958,794.853 727.517,790.314 728.076,802.891 728.635,793.829 729.195,760.419 729.754,742.413 730.313,739.888 730.872,706.642 731.432,707.044 731.991,689.872 732.55,708.899 733.109,689.558 733.669,676.536 734.228,680.666 734.787,677.415 735.346,693.402 735.906,693.938 736.465,710.926 737.024,710.448 737.583,710.13 738.143,705.675 738.702,687.656 739.261,668.314 739.82,667.364 740.38,718.046 740.939,751.835 741.498,752.14 742.057,753.376 742.617,746.553 743.176,758.363 743.735,753.151 744.294,736.839 744.854,716.618 745.413,764.371 745.972,762.382 746.531,778.295 747.091,790.385 747.65,770.814 748.209,765.535 748.768,746.551 749.328,775.236 749.887,786.77 750.446,783.47 751.005,779 751.565,775.963 752.124,787.958 752.683,765.171 753.242,762.154 753.802,757.124 754.361,768.798 754.92,734.875 755.479,717.567 756.039,716.9 756.598,732.289 757.157,714.218 757.716,713.88 758.276,728.911 758.835,711.16 759.394,712.283 759.953,726.823 760.513,693.138 761.072,693.355 761.631,692.648 762.19,672.186 762.75,689.805 763.309,655.633 763.868,659.614 764.427,682.06 764.987,731.022 765.546,727.954 766.105,742.267 766.664,723.701 767.224,689.133 767.783,639.715 768.342,644.128 768.901,599.127 769.461,558.158 770.02,582.529 770.579,574.39 771.138,596.395 771.698,584.83 772.257,560.224 772.816,565.754 773.375,585.923 773.935,576.464 774.494,580.179 775.053,601.515 775.612,606.646 776.172,593.728 776.731,598.078 777.29,587.149 777.849,613.045 778.409,633.653 778.968,652.154 779.527,656.821 780.086,659.265 780.646,661.632 781.205,660.618 781.764,677.159 782.323,680.923 782.883,667.338 783.442,669.372 784.001,702.895 784.56,701.661 785.12,667.375 785.679,651.413 786.238,635.64 786.797,602.065 787.357,619.616 787.916,588.821 788.475,591.119 789.034,560.253 789.594,602.402 790.153,559.82 790.712,581.062 791.271,585.431 791.831,557.126 792.39,582.941 792.949,604.732 793.508,594.741 794.068,649.516 794.627,650.696 795.186,639.053 795.745,658.527 796.305,656.366 796.864,638.006 797.423,639.782 797.982,609.485 798.542,644.709 799.101,662.597 799.66,683.622 800.219,717.356 800.779,717.389 801.338,685.61 801.897,686.382 802.456,687.39 803.016,688.638 803.575,671.095 804.134,704.819 804.693,690.246 805.253,674.358 805.812,674.259 806.371,710.159 806.931,755.469 807.49,769.073 808.049,748.735 808.608,744.911 809.168,711.878 809.727,692.031 810.286,692.25 810.845,675.601 811.405,687.349 811.964,686.292 812.523,704.114 813.082,720.569 813.642,721.392 814.201,718.992 814.76,729.158 815.319,738.364 815.879,749.618 816.438,777.234 816.997,786.976 817.556,766.583 818.116,732.19 818.675,714.399 819.234,683.641 819.793,649.714 820.353,646.494 820.912,650.211 821.471,635.7 822.03,637.571 822.59,627.851 823.149,633.752 823.708,638.003 824.267,673.466 824.827,670.879 825.386,686.479 825.945,702.077 826.504,687.458 827.064,672.264 827.623,671.872 828.182,675.786 828.741,661.061 829.301,691.184 829.86,692.38 830.419,692.774 830.978,694.268 831.538,679.6 832.097,666.487 832.656,682.485 833.215,684.254 833.775,667.711 834.334,686.204 834.893,688.078 835.452,687.941 836.012,673.242 836.571,674.434 837.13,678.429 837.689,692.861 838.249,710.713 838.808,713.562 839.367,680.302 839.926,711.474 840.486,711.488 841.045,724.992 841.604,705.195 842.163,716.497 842.723,732.399 843.282,715.291 843.841,743.925 844.4,724.531 844.96,721.68 845.519,718.936 846.078,732.797 846.637,728.31 847.197,757.378 847.756,718.566 848.315,747.08 848.874,758.515 849.434,707.565 849.993,705.381 850.552,704.943 851.111,703.931 851.671,719.696 852.23,717.423 852.789,701.804 853.348,701.612 853.908,684.122 854.467,700.182 855.026,714.524 855.585,698.064 856.145,732.456 856.704,810 857.263,785.81 857.822,778.268 858.382,775.83 858.941,772.036 859.5,765.706 860.059,761.062 860.619,788.353 861.178,782.441 861.737,764.861 862.296,792.497 862.856,804.571 863.415,754.386 863.974,752.765 864.533,701.006 865.093,696.064 865.652,714.92 866.211,729.681 866.77,755.682 867.33,734.806 867.889,716.054 868.448,711.654 869.007,694.052 869.567,658.72 870.126,646.864 870.685,615.847 871.244,601.648 871.804,625.588 872.363,613.637 872.922,635.026 873.481,650.316 874.041,636.686 874.6,653.231 875.159,638.244 875.718,654.164 876.278,676.275 876.837,692.058 877.396,690.45 877.955,675.563 878.515,638.893 879.074,655.664 879.633,639.313 880.192,641.063 880.752,624.095 881.311,623.358 881.87,606.817 882.429,581.006 882.989,615.765 883.548,618.658 884.107,620.271 884.666,639.36 885.226,606.339 885.785,645.348 886.344,646.566 886.903,647.163 887.463,696.942 888.022,663.612 888.581,604.021 889.14,608.069 889.7,611.102 890.259,629.947 890.818,630.757 891.377,683.377 891.937,681.994 892.496,685.101 893.055,702.047 893.614,704.207 894.174,702.705 894.733,684.003 895.292,666.431 895.851,649.798 896.411,636.314 896.97,624.536 897.529,659.814 898.088,662.489 898.648,663.716 899.207,650.776 899.766,654.823 900.325,675.977 900.885,666.313 901.444,683.058 902.003,685.56 902.562,701.89 903.122,670.989 903.681,703.807 904.24,699.994 904.799,668.151 905.359,652.671 905.918,669.067 906.477,667.975 907.036,686.754 907.596,670.627 908.155,675.734 908.714,661.879 909.273,661.167 909.833,645.89 910.392,647.393 910.951,634.761 911.51,639.464 912.07,642.499 912.629,633.4 913.188,650.088 913.747,632.701 914.307,664.337 914.866,664.263 915.425,678.583 915.984,697.489 916.544,682.627 917.103,728.425 917.662,690.632 918.221,688.171 918.781,687.133 919.34,702.94 919.899,690.944 920.458,694.634 921.018,659.606 921.577,675.478 922.136,676.092 922.695,694.876 923.255,709.311 923.814,657.913 924.373,659.734 924.932,662.324 925.492,678.513 926.051,695.239 926.61,711.322 927.169,724.508 927.729,739.404 928.288,736.231 928.847,731.312 929.406,760.203 929.966,771.915 930.525,783.238 931.084,808.988 931.644,740.149 932.203,753.21 932.762,731.85 933.321,682.567 933.881,635.979 934.44,604.638 934.999,609.933 935.558,610.849 936.118,613.089 936.677,616.901 937.236,618.983 937.795,650.23 938.355,650.111 938.914,634.015 939.473,634.933 940.032,604.667 940.592,624.485 941.151,631.254 941.71,638.64 942.269,642.096 942.829,677.799 943.388,680.491 943.947,683.243 944.506,682.505 945.066,700.564 945.625,734.761 946.184,729.809 946.743,727.842 947.303,742.729 947.862,741.061 948.421,755.844 948.98,751.335 949.54,733.37 950.099,729.674 950.658,708.243 951.217,739.794 951.777,721.183 952.336,719.304 952.895,735.952 953.454,717.509 954.014,731.331 954.573,694.955 955.132,659.814 955.691,644.442 956.251,643.926 956.81,614.633 957.369,636.946 957.928,655.579 958.488,641.086 959.047,626.992 959.606,630.836 960.165,634.524 960.725,640.157 961.284,627.332 961.843,648.669 962.402,637.282 962.962,653.419 963.521,658.502 964.08,660.527 964.639,665.148 965.199,667.562 965.758,670.276 966.317,670.833 966.876,673.725 967.436,660.029 967.995,646.423 968.554,631.878 969.113,666.078 969.673,663.919 970.232,713.44 970.791,700.712 971.35,729.94 971.91,711.372 972.469,726.518 973.028,707.946 973.587,691.747 974.147,692.705 974.706,674.392 975.265,657.418 975.824,646.652 976.384,614.673 976.943,620.827 977.502,591.125 978.061,579.802 978.621,615.966 979.18,636.739 979.739,654.184 980.298,670.317 980.858,701.768 981.417,701.721 981.976,718.34 982.535,668.05 983.095,638.074 983.654,638.301 984.213,657.77 984.772,661.328 985.332,644.434 985.891,648.9 986.45,605.045 987.009,623.253 987.569,644.57 988.128,661.41 988.687,691.748 989.246,722.968 989.806,738.249 990.365,719.707 990.924,729.002 991.483,740.658 992.043,768.122 992.602,750.383 993.161,717.647 993.72,717.55 994.28,719.124 994.839,699.639 995.398,696.415 995.957,695.948 996.517,695.683 997.076,713.427 997.635,698.048 998.194,697.394 998.754,681.654 999.313,697.729 999.872,730.863 1000.43,729.118 1000.99,728 1001.55,725.406 1002.11,724.171 1002.67,742.193 1003.23,736.245 1003.79,749.052 1004.35,778.125 1004.91,774.585 1005.46,749.715 1006.02,760.391 1006.58,786.772 1007.14,799.137 1007.7,807.853 1008.26,767.769 1008.82,746.431 1009.38,709.504 1009.94,706.236 1010.5,704.322 1011.06,701.271 1011.62,686.883 1012.18,670.866 1012.73,671.448 1013.29,687.064 1013.85,687.57 1014.41,683.437 1014.97,700.676 1015.53,700.846 1016.09,733.318 1016.65,696.364 1017.21,677.799 1017.77,658.883 1018.33,738.031 1018.89,720.306 1019.45,737.68 1020.01,701.369 1020.56,704.964 1021.12,721.524 1021.68,688.164 1022.24,704.91 1022.8,769.58 1023.36,752.34 1023.92,728.087 1024.48,725.334 1025.04,724.462 1025.6,755.417 1026.16,796.429 1026.72,808.196 1027.28,820.935 1027.83,811.332 1028.39,790.727 1028.95,769.52 1029.51,766.002 1030.07,745.297 1030.63,689.819 1031.19,705.692 1031.75,700.321 1032.31,702.76 1032.87,716.767 1033.43,682.579 1033.99,712.858 1034.55,679.071 1035.1,727.305 1035.66,709.636 1036.22,688.838 1036.78,703.53 1037.34,699.236 1037.9,699.199 1038.46,701.37 1039.02,713.452 1039.58,691.63 1040.14,676.342 1040.7,676.106 1041.26,676.515 1041.82,693.09 1042.38,723.097 1042.93,720.665 1043.49,719.346 1044.05,714.856 1044.61,732.024 1045.17,717.507 1045.73,701.476 1046.29,699.887 1046.85,711.657 1047.41,710.255 1047.97,690.765 1048.53,706.871 1049.09,706.36 1049.65,688.793 1050.2,704.714 1050.76,701.348 1051.32,652.963 1051.88,610.625 1052.44,629.586 1053,629.674 1053.56,646.751 1054.12,630.884 1054.68,634.154 1055.24,619.749 1055.8,605.761 1056.36,608.654 1056.92,615.499 1057.48,619.072 1058.03,592.665 1058.59,612.639 1059.15,584.686 1059.71,587.904 1060.27,609.357 1060.83,614.053 1061.39,617.634 1061.95,649.72 1062.51,632.669 1063.07,657.65 1063.63,676.678 1064.19,677.294 1064.75,695.226 1065.3,661.522 1065.86,631.489 1066.42,620.62 1066.98,637.801 1067.54,626.253 1068.1,625.473 1068.66,627.992 1069.22,597.163 1069.78,621.709 1070.34,610.204 1070.9,630.668 1071.46,681.88 1072.02,685.593 1072.57,637.629 1073.13,650.266 1073.69,653.823 1074.25,652.115 1074.81,635.265 1075.37,625.416 1075.93,695.235 1076.49,709.069 1077.05,723.348 1077.61,738.607 1078.17,717.57 1078.73,701.212 1079.29,751.6 1079.85,748.398 1080.4,761.368 1080.96,724.817 1081.52,709.939 1082.08,691.53 1082.64,707.131 1083.2,703.482 1083.76,716.415 1084.32,712.13 1084.88,740.104 1085.44,766.293 1086,746.981 1086.56,792.126 1087.12,771.271 1087.67,717.341 1088.23,716.054 1088.79,682.294 1089.35,681.78 1089.91,696.217 1090.47,730.107 1091.03,744.533 1091.59,727.991 1092.15,711.148 1092.71,709.135 1093.27,707.383 1093.83,691.067 1094.39,688.871 1094.94,719.27 1095.5,750.279 1096.06,745.574 1096.62,806.652 1097.18,832.193 1097.74,873.501 1098.3,863.871 1098.86,852.431 1099.42,842.156 1099.98,834.234 1100.54,823.143 1101.1,784.53 1101.66,764.615 1102.22,759.685 1102.77,740.759 1103.33,735.779 1103.89,733.543 1104.45,743.431 1105.01,758.211 1105.57,738.342 1106.13,748.57 1106.69,763.773 1107.25,708.489 1107.81,701.85 1108.37,718.622 1108.93,697.96 1109.49,697.311 1110.04,698.025 1110.6,714.69 1111.16,708.972 1111.72,723.105 1112.28,722.816 1112.84,735.242 1113.4,685.287 1113.96,668.675 1114.52,652.772 1115.08,672.072 1115.64,672.304 1116.2,703.694 1116.76,672.832 1117.31,672.448 1117.87,688.577 1118.43,651.918 1118.99,701.373 1119.55,670.184 1120.11,654.167 1120.67,622.483 1121.23,643.2 1121.79,646.491 1122.35,647.506 1122.91,634.144 1123.47,620.613 1124.03,656.596 1124.59,657.549 1125.14,654.855 1125.7,673.828 1126.26,594.12 1126.82,583.218 1127.38,573.391 1127.94,578.361 1128.5,567.005 1129.06,558.594 1129.62,584.761 1130.18,560.099 1130.74,580.854 1131.3,588.788 1131.86,563.505 1132.41,588.587 1132.97,594.226 1133.53,632.23 1134.09,635.498 1134.65,624.884 1135.21,611.521 1135.77,619.033 1136.33,595.262 1136.89,602.934 1137.45,578.209 1138.01,614.939 1138.57,622.942 1139.13,624.355 1139.68,659.697 1140.24,677.683 1140.8,729.019 1141.36,710.494 1141.92,710.549 1142.48,711.488 1143.04,677.185 1143.6,676.558 1144.16,661.49 1144.72,633.325 1145.28,622.129 1145.84,626.786 1146.4,662.302 1146.96,629.532 1147.51,601.702 1148.07,623.489 1148.63,626.214 1149.19,662.038 1149.75,644.894 1150.31,661.141 1150.87,680.064 1151.43,678.256 1151.99,679.026 1152.55,666.697 1153.11,649.783 1153.67,638.683 1154.23,641.629 1154.78,628.185 1155.34,646.117 1155.9,615.014 1156.46,616.197 1157.02,636.774 1157.58,639.429 1158.14,640.345 1158.7,644.45 1159.26,682.857 1159.82,696.778 1160.38,664.88 1160.94,667.945 1161.5,668.489 1162.05,670.044 1162.61,703.09 1163.17,686.11 1163.73,680.331 1164.29,649.383 1164.85,634.935 1165.41,636.1 1165.97,624.987 1166.53,660.316 1167.09,691.769 1167.65,689.926 1168.21,676.444 1168.77,693.093 1169.33,673.936 1169.88,658.322 1170.44,694.886 1171,727.088 1171.56,744.575 1172.12,760.662 1172.68,755.885 1173.24,722.326 1173.8,670.204 1174.36,656.368 1174.92,674.582 1175.48,706.505 1176.04,703.91 1176.6,704.488 1177.15,639.714 1177.71,626.458 1178.27,645.598 1178.83,617.451 1179.39,635.557 1179.95,620.897 1180.51,575.158 1181.07,594.652 1181.63,613.659 1182.19,633.761 1182.75,635.366 1183.31,655.325 1183.87,644.857 1184.43,647.675 1184.98,615.541 1185.54,634.654 1186.1,619.726 1186.66,623.237 1187.22,625.367 1187.78,643.518 1188.34,644.389 1188.9,665.461 1189.46,669.126 1190.02,687.466 1190.58,703.53 1191.14,715.788 1191.7,731.019 1192.25,759.944 1192.81,788.303 1193.37,748.744 1193.93,727.409 1194.49,709.484 1195.05,720.896 1195.61,718.865 1196.17,748.302 1196.73,727.589 1197.29,675.553 1197.85,656.914 1198.41,623.356 1198.97,609.107 1199.52,575.312 1200.08,580.625 1200.64,573.524 1201.2,578.969 1201.76,614.682 1202.32,619.081 1202.88,620.73 1203.44,668.796 1204,669.49 1204.56,704.874 1205.12,718.255 1205.68,734.998 1206.24,732.165 1206.8,747.357 1207.35,727.303 1207.91,721.396 1208.47,718.214 1209.03,699.217 1209.59,682.273 1210.15,731.651 1210.71,729.941 1211.27,773.208 1211.83,739.394 1212.39,737.347 1212.95,719.656 1213.51,749.844 1214.07,733.286 1214.62,701.231 1215.18,700.626 1215.74,681.987 1216.3,680.855 1216.86,678.96 1217.42,674.54 1217.98,676.253 1218.54,663.327 1219.1,651.811 1219.66,651.215 1220.22,638.433 1220.78,660.053 1221.34,664.351 1221.89,681.315 1222.45,697.281 1223.01,682.399 1223.57,681.843 1224.13,700.512 1224.69,717.841 1225.25,716.733 1225.81,732.509 1226.37,763.592 1226.93,761.27 1227.49,759.398 1228.05,788.199 1228.61,794.294 1229.17,789.971 1229.72,799.023 1230.28,793.379 1230.84,802.123 1231.4,762.435 1231.96,790.921 1232.52,798.89 1233.08,763.115 1233.64,762.245 1234.2,740.128 1234.76,704.458 1235.32,735.767 1235.88,732.387 1236.44,729.539 1236.99,692.11 1237.55,668.58 1238.11,683.945 1238.67,669.375 1239.23,686.893 1239.79,671.636 1240.35,672.707 1240.91,708.576 1241.47,710.063 1242.03,711.611 1242.59,710.597 1243.15,737.464 1243.71,739.371 1244.26,752.124 1244.82,715.35 1245.38,661.565 1245.94,663.525 1246.5,680.186 1247.06,697.382 1247.62,679.707 1248.18,712.216 1248.74,696.67 1249.3,711.465 1249.86,712.516 1250.42,708.516 1250.98,742.594 1251.54,773.172 1252.09,784.132 1252.65,796.276 1253.21,774.122 1253.77,767.598 1254.33,780.382 1254.89,795.227 1255.45,743.495 1256.01,742.43 1256.57,755.027 1257.13,766.627 1257.69,727.175 1258.25,723.47 1258.81,736.832 1259.36,715.409 1259.92,696.431 1260.48,659.857 1261.04,678.945 1261.6,692.167 1262.16,661.127 1262.72,662.846 1263.28,660.549 1263.84,692.143 1264.4,676.946 1264.96,677.292 1265.52,659.98 1266.08,646.859 1266.63,662.593 1267.19,679.828 1267.75,681.118 1268.31,682.702 1268.87,666.618 1269.43,684.452 1269.99,666.918 1270.55,685.81 1271.11,719.89 1271.67,719.427 1272.23,719.667 1272.79,745.959 1273.35,725.897 1273.91,722.377 1274.46,689.123 1275.02,689.096 1275.58,674.336 1276.14,677.542 1276.7,676.293 1277.26,692.001 1277.82,658.536 1278.38,660.401 1278.94,696.15 1279.5,727.624 1280.06,713.551 1280.62,707.976 1281.18,705.332 1281.73,687.602 1282.29,717.138 1282.85,732.429 1283.41,744.664 1283.97,756.125 1284.53,767.557 1285.09,761.618 1285.65,787.181 1286.21,748.211 1286.77,742.656 1287.33,755.525 1287.89,765.507 1288.45,710.7 1289,729.64 1289.56,726.744 1290.12,711.407 1290.68,725.378 1291.24,738.43 1291.8,732.332 1292.36,698.399 1292.92,682.668 1293.48,665.1 1294.04,681.409 1294.6,680.622 1295.16,650.539 1295.72,648.706 1296.28,682.437 1296.83,685.12 1297.39,700.872 1297.95,685.758 1298.51,686.306 1299.07,718.09 1299.63,730.791 1300.19,741.927 1300.75,722.93 1301.31,724.306 1301.87,722.527 1302.43,751.082 1302.99,763.147 1303.55,772.645 1304.1,739.255 1304.66,735.574 1305.22,681.613 1305.78,676.515 1306.34,641.085 1306.9,656.81 1307.46,640.263 1308.02,642.969 1308.58,628.719 1309.14,628.116 1309.7,645.303 1310.26,681.82 1310.82,649.493 1311.38,668.958 1311.93,683.44 1312.49,684.945 1313.05,697.851 1313.61,712.831 1314.17,711.048 1314.73,708.748 1315.29,688.265 1315.85,673.493 1316.41,673.981 1316.97,675.811 1317.53,657.394 1318.09,673.44 1318.65,710.419 1319.2,676.661 1319.76,678.22 1320.32,662.074 1320.88,663.878 1321.44,649.904 1322,698.411 1322.56,646.497 1323.12,633.841 1323.68,620.156 1324.24,626.5 1324.8,615.388 1325.36,652.741 1325.92,636.678 1326.47,623.203 1327.03,626.131 1327.59,626.172 1328.15,646.139 1328.71,644.668 1329.27,647.101 1329.83,668.025 1330.39,685.465 1330.95,653.989 1331.51,650.568 1332.07,652.881 1332.63,653.257 1333.19,638.612 1333.75,654.757 1334.3,651.531 1334.86,637.134 1335.42,639.013 1335.98,623.145 1336.54,640.872 1337.1,678.116 1337.66,630.619 1338.22,620.331 1338.78,608.375 1339.34,595.396 1339.9,598.327 1340.46,669.126 1341.02,638.634 1341.57,678.663 1342.13,633.534 1342.69,654.784 1343.25,609.017 1343.81,597.267 1344.37,583.803 1344.93,576.237 1345.49,581.7 1346.05,618.083 1346.61,607.081 1347.17,662.821 1347.73,681.273 1348.29,696.173 1348.84,677.997 1349.4,709.993 1349.96,739.008 1350.52,750.335 1351.08,743.527 1351.64,775.446 1352.2,767.328 1352.76,780.967 1353.32,809.317 1353.88,789.014 1354.44,787.525 1355,769.421 1355.56,748.136 1356.12,725.483 1356.67,724.934 1357.23,736.309 1357.79,735.227 1358.35,765.392 1358.91,732.667 1359.47,697.914 1360.03,695.934 1360.59,728.808 1361.15,727.212 1361.71,724.865 1362.27,718.914 1362.83,716.584 1363.39,683.368 1363.94,668.055 1364.5,670.859 1365.06,654.777 1365.62,654.346 1366.18,654.479 1366.74,655.696 1367.3,626.021 1367.86,598.014 1368.42,587.193 1368.98,608.5 1369.54,612.181 1370.1,617.051 1370.66,620.824 1371.21,620.177 1371.77,638.117 1372.33,625.198 1372.89,582.714 1373.45,606.736 1374.01,611.375 1374.57,619.683 1375.13,592.462 1375.69,602.701 1376.25,604.259 1376.81,643.709 1377.37,644.818 1377.93,643.481 1378.49,659.767 1379.04,659.99 1379.6,658.648 1380.16,658.802 1380.72,662.792 1381.28,644.946 1381.84,646.911 1382.4,652.272 1382.96,666.195 1383.52,649.641 1384.08,619.388 1384.64,622.975 1385.2,622.699 1385.76,575.274 1386.31,567.06 1386.87,577.21 1387.43,584.47 1387.99,585.6 1388.55,609.297 1389.11,646.902 1389.67,678.748 1390.23,660.987 1390.79,645.675 1391.35,627.673 1391.91,614.317 1392.47,616.091 1393.03,655.921 1393.58,672.941 1394.14,642.139 1394.7,640.411 1395.26,623.734 1395.82,642.789 1396.38,632.876 1396.94,686.245 1397.5,654.581 1398.06,655.47 1398.62,656.761 1399.18,655.42 1399.74,691.694 1400.3,674.264 1400.86,679.556 1401.41,681.698 1401.97,686.481 1402.53,701.274 1403.09,680.008 1403.65,708.607 1404.21,693.828 1404.77,693.914 1405.33,725.912 1405.89,739.469 1406.45,715.194 1407.01,715.889 1407.57,728.893 1408.13,726.192 1408.68,727.958 1409.24,738.057 1409.8,720.289 1410.36,717.476 1410.92,714.233 1411.48,678.595 1412.04,696.461 1412.6,694.294 1413.16,723.65 1413.72,704.92 1414.28,703.305 1414.84,704.553 1415.4,689.592 1415.95,705.375 1416.51,720.327 1417.07,738.76 1417.63,735.516 1418.19,704.553 1418.75,722.036 1419.31,702.74 1419.87,686.791 1420.43,685.851 1420.99,650.333 1421.55,671.31 1422.11,669.412 1422.67,667.8 1423.23,687.185 1423.78,703.53 1424.34,686.312 1424.9,670.933 1425.46,671.423 1426.02,655.182 1426.58,643.228 1427.14,642.876 1427.7,592.757 1428.26,630.034 1428.82,665.711 1429.38,665.362 1429.94,636.557 1430.5,605.436 1431.05,607.357 1431.61,596.089 1432.17,600.399 1432.73,587.936 1433.29,592.825 1433.85,580.208 1434.41,601.304 1434.97,652.038 1435.53,639.471 1436.09,611.339 1436.65,613.432 1437.21,615.475 1437.77,656.282 1438.33,640.427 1438.88,640.803 1439.44,660.724 1440,660.925 1440.56,694.395 1441.12,665.219 1441.68,665.248 1442.24,665.13 1442.8,682.969 1443.36,651.811 1443.92,702.316 1444.48,686.803 1445.04,702.665 1445.6,681.934 1446.15,669.342 1446.71,668.793 1447.27,711.431 1447.83,727.966 1448.39,788.739 1448.95,749.48 1449.51,746.278 1450.07,742.995 1450.63,738.092 1451.19,720.16 1451.75,733.954 1452.31,746.848 1452.87,745.182 1453.42,740.314 1453.98,705.62 1454.54,656.116 1455.1,673.665 1455.66,688.383 1456.22,686.597 1456.78,687.357 1457.34,669.82 1457.9,669.159 1458.46,640.531 1459.02,629.116 1459.58,632.28 1460.14,648.804 1460.7,634.035 1461.25,618.486 1461.81,607.789 1462.37,643.38 1462.93,679.6 1463.49,699.942 1464.05,682.416 1464.61,700.861 1465.17,698.958 1465.73,684.3 1466.29,682.977 1466.85,732.55 1467.41,729.98 1467.97,728.879 1468.52,743.831 1469.08,737.99 1469.64,703.826 1470.2,699.589 1470.76,699.508 1471.32,666.592 1471.88,671.705 1472.44,638.85 1473,623.88 1473.56,659.808 1474.12,678.119 1474.68,662.155 1475.24,647.949 1475.79,667.246 1476.35,682.921 1476.91,747.241 1477.47,729.905 1478.03,723.019 1478.59,754.468 1479.15,766.244 1479.71,792.132 1480.27,770.231 1480.83,765.137 1481.39,760.54 1481.95,755.103 1482.51,786.725 1483.07,767.28 1483.62,761.721 1484.18,773.509 1484.74,768.338 1485.3,779.782 1485.86,792.311 1486.42,770.77 1486.98,750.171 1487.54,728.845 1488.1,754.409 1488.66,730.793 1489.22,732.387 1489.78,744.466 1490.34,774.453 1490.89,771.277 1491.45,766.945 1492.01,763.553 1492.57,756.942 1493.13,769.035 1493.69,750.981 1494.25,746.373 1494.81,761.111 1495.37,741.856 1495.93,742.986 1496.49,723.613 1497.05,689.768 1497.61,705.787 1498.16,705.047 1498.72,705.283 1499.28,752.7 1499.84,747.292 1500.4,747.132 1500.96,744.885 1501.52,727.379 1502.08,689.479 1502.64,657.941 1503.2,658.939 1503.76,663.687 1504.32,650.451 1504.88,654.747 1505.44,654.463 1505.99,643.308 1506.55,645.287 1507.11,631.759 1507.67,650.992 1508.23,689.192 1508.79,707.442 1509.35,739.467 1509.91,703.823 1510.47,722.286 1511.03,703.227 1511.59,683.442 1512.15,669.833 1512.71,637.206 1513.26,610.128 1513.82,628.842 1514.38,682.427 1514.94,700.414 1515.5,686.076 1516.06,703.845 1516.62,689.957 1517.18,690.925 1517.74,676.579 1518.3,658.487 1518.86,659.688 1519.42,627.636 1519.98,612.655 1520.53,616.57 1521.09,587.329 1521.65,575.582 1522.21,562.586 1522.77,583.098 1523.33,570.783 1523.89,574.299 1524.45,564.927 1525.01,586.02 1525.57,623.1 1526.13,607.792 1526.69,591.617 1527.25,597.363 1527.81,588.954 1528.36,610.485 1528.92,646.722 1529.48,649.356 1530.04,662.986 1530.6,665.756 1531.16,669.688 1531.72,704.163 1532.28,688.783 1532.84,690.187 1533.4,674.234 1533.96,688.059 1534.52,750.14 1535.08,733.319 1535.63,748.005 1536.19,763.576 1536.75,764.44 1537.31,764.75 1537.87,792.958 1538.43,783.711 1538.99,799.999 1539.55,761.047 1540.11,757.312 1540.67,722.017 1541.23,721.068 1541.79,681.841 1542.35,681.499 1542.9,681.295 1543.46,731.116 1544.02,727.891 1544.58,708.062 1545.14,725.153 1545.7,722.748 1546.26,721.84 1546.82,686.326 1547.38,669.207 1547.94,669.604 1548.5,649.56 1549.06,685.25 1549.62,684.143 1550.18,681.987 1550.73,679.566 1551.29,696.472 1551.85,681.383 1552.41,713.939 1552.97,696.863 1553.53,696.568 1554.09,679.29 1554.65,665.285 1555.21,684.01 1555.77,698.494 1556.33,712.63 1556.89,727.529 1557.45,773.655 1558,771.688 1558.56,736.571 1559.12,719.04 1559.68,718.966 1560.24,714.727 1560.8,710.671 1561.36,707.591 1561.92,675.831 1562.48,612.575 1563.04,617.156 1563.6,607.327 1564.16,612.839 1564.72,635.352 1565.28,672.253 1565.83,657.238 1566.39,673.082 1566.95,640.369 1567.51,658.752 1568.07,661.463 1568.63,627.358 1569.19,646.856 1569.75,647.889 1570.31,632.999 1570.87,618.71 1571.43,622.734 1571.99,645.492 1572.55,676.11 1573.1,678.449 1573.66,662.634 1574.22,663.087 1574.78,681.586 1575.34,714.352 1575.9,647.692 1576.46,665.76 1577.02,681.696 1577.58,682.6 1578.14,682.991 1578.7,665.03 1579.26,649.408 1579.82,637.53 1580.37,640.165 1580.93,642.748 1581.49,676.319 1582.05,643.747 1582.61,645.554 1583.17,646.864 1583.73,647.942 1584.29,669.141 1584.85,670.411 1585.41,657.647 1585.97,686.99 1586.53,675.192 1587.09,677.781 1587.65,644.008 1588.2,680.999 1588.76,684.322 1589.32,700.893 1589.88,718.155 1590.44,717.942 1591,750.08 1591.56,767.418 1592.12,746.698 1592.68,746.418 1593.24,694.524 1593.8,712.71 1594.36,693.946 1594.92,678.731 1595.47,681.755 1596.03,665.662 1596.59,652.235 1597.15,654.657 1597.71,657.104 1598.27,658.532 1598.83,642.29 1599.39,627.606 1599.95,648.69 1600.51,620.389 1601.07,621.375 1601.63,589.692 1602.19,640.173 1602.74,641.657 1603.3,645.198 1603.86,649.533 1604.42,636.383 1604.98,643.631 1605.54,610.991 1606.1,616.851 1606.66,634.265 1607.22,636.528 1607.78,637.654 1608.34,639.004 1608.9,624.933 1609.46,696.124 1610.02,697.698 1610.57,692.609 1611.13,689.284 1611.69,688.703 1612.25,736.06 1612.81,749.256 1613.37,744.852 1613.93,739.923 1614.49,750.325 1615.05,747.559 1615.61,760.889 1616.17,758.752 1616.73,735.39 1617.29,667.123 1617.84,702.78 1618.4,702.991 1618.96,699.404 1619.52,680.136 1620.08,663.352 1620.64,665.074 1621.2,667.118 1621.76,714.721 1622.32,699.039 1622.88,699.655 1623.44,686.037 1624,688.102 1624.56,671.004 1625.11,704.809 1625.67,702.856 1626.23,733.7 1626.79,716.832 1627.35,759.971 1627.91,757.048 1628.47,750.488 1629.03,746.752 1629.59,758.326 1630.15,768.988 1630.71,766.28 1631.27,745.801 1631.83,741.009 1632.39,752.52 1632.94,786.743 1633.5,799.501 1634.06,757.501 1634.62,756.105 1635.18,752.562 1635.74,749.687 1636.3,747.7 1636.86,697.483 1637.42,677.001 1637.98,693.792 1638.54,695.096 1639.1,681.947 1639.66,699.757 1640.21,682.722 1640.77,714.179 1641.33,730.734 1641.89,730.946 1642.45,730.658 1643.01,757.261 1643.57,769.685 1644.13,767.095 1644.69,764.866 1645.25,776.568 1645.81,751.274 1646.37,746.861 1646.93,757.48 1647.48,752.254 1648.04,733.462 1648.6,698.618 1649.16,681.504 1649.72,667.019 1650.28,648.26 1650.84,632.411 1651.4,634.255 1651.96,637.959 1652.52,609.601 1653.08,612.643 1653.64,615.847 1654.2,619.389 1654.76,601.449 1655.31,603.299 1655.87,641.132 1656.43,626.197 1656.99,644.349 1657.55,631.393 1658.11,632.514 1658.67,620.799 1659.23,608.932 1659.79,610.781 1660.35,645.664 1660.91,652.68 1661.47,653.035 1662.03,639.344 1662.58,625.897 1663.14,628.064 1663.7,632.015 1664.26,600.307 1664.82,604.207 1665.38,651.699 1665.94,701.386 1666.5,701.436 1667.06,686.763 1667.62,689.195 1668.18,672.185 1668.74,737.562 1669.3,781.367 1669.85,810.876 1670.41,787.532 1670.97,767.398 1671.53,728.216 1672.09,706.994 1672.65,687.848 1673.21,654.508 1673.77,656.492 1674.33,676.198 1674.89,675.675 1675.45,706.248 1676.01,689.193 1676.57,668.107 1677.13,673.005 1677.68,660.61 1678.24,646.179 1678.8,635.374 1679.36,652.467 1679.92,670.435 1680.48,703.627 1681.04,718.954 1681.6,731.378 1682.16,732.257 1682.72,727.743 1683.28,727.004 1683.84,709.805 1684.4,710.385 1684.95,693.071 1685.51,660.527 1686.07,662.442 1686.63,697.591 1687.19,731.739 1687.75,727.819 1688.31,725.595 1688.87,709.032 1689.43,677.435 1689.99,678.918 1690.55,679.605 1691.11,679.151 1691.67,665.34 1692.23,666.604 1692.78,647.126 1693.34,631.643 1693.9,635.635 1694.46,634.295 1695.02,634.963 1695.58,618.267 1696.14,588.447 1696.7,593.098 1697.26,615.853 1697.82,602.901 1698.38,658.292 1698.94,659.275 1699.5,643.293 1700.05,648.969 1700.61,651.735 1701.17,618.921 1701.73,605.656 1702.29,626.306 1702.85,630.504 1703.41,633.911 1703.97,636.463 1704.53,671.916 1705.09,661.153 1705.65,677.345 1706.21,657.759 1706.77,690.858 1707.32,657.376 1707.88,626.454 1708.44,598.068 1709,572.122 1709.56,564.073 1710.12,619.302 1710.68,620.971 1711.24,626.771 1711.8,631.936 1712.36,634.325 1712.92,634.554 1713.48,625.16 1714.04,631.387 1714.6,634.97 1715.15,623.659 1715.71,659.345 1716.27,707.841 1716.83,740.252 1717.39,753.511 1717.95,766.76 1718.51,762.484 1719.07,775.115 1719.63,803.116 1720.19,781.337 1720.75,759.07 1721.31,740.648 1721.87,769.088 1722.42,747.949 1722.98,763.442 1723.54,762.246 1724.1,776.347 1724.66,769.498 1725.22,761.213 1725.78,773.939 1726.34,768.925 1726.9,782.222 1727.46,776.642 1728.02,740.204 1728.58,753.912 1729.14,762.769 1729.69,759.163 1730.25,739.559 1730.81,703.998 1731.37,706.742 1731.93,752.31 1732.49,767.482 1733.05,747.616 1733.61,757.737 1734.17,753.844 1734.73,768.901 1735.29,749.583 1735.85,765.549 1736.41,728.751 1736.97,695.03 1737.52,676.245 1738.08,708.939 1738.64,718.405 1739.2,731.302 1739.76,727.947 1740.32,709.669 1740.88,725.192 1741.44,735.898 1742,714.344 1742.56,726.163 1743.12,752.293 1743.68,717.94 1744.24,735.956 1744.79,703.136 1745.35,700.388 1745.91,702.491 1746.47,714.584 1747.03,699.336 1747.59,731.215 1748.15,726.842 1748.71,720.487 1749.27,736.764 1749.83,750.609 1750.39,730.476 1750.95,744.441 1751.51,693.416 1752.06,679.391 1752.62,644.773 1753.18,661.804 1753.74,709.036 1754.3,690.305 1754.86,657 1755.42,661.129 1755.98,677.935 1756.54,677.415 1757.1,675.302 1757.66,659.948 1758.22,658.23 1758.78,657.678 1759.34,665.131 1759.89,685.066 1760.45,651.757 1761.01,650.747 1761.57,638.311 1762.13,641.225 1762.69,673.578 1763.25,658.108 1763.81,627.906 1764.37,614.284 1764.93,616.359 1765.49,602.644 1766.05,557.443 1766.61,563.336 1767.16,551.252 1767.72,556.043 1768.28,562.413 1768.84,568.502 1769.4,572.847 1769.96,594.793 1770.52,599.483 1771.08,605.192 1771.64,547.463 1772.2,553.71 1772.76,544.21 1773.32,553.095 1773.88,557.932 1774.43,578.993 1774.99,615.897 1775.55,588.974 1776.11,563.439 1776.67,554.851 1777.23,579.839 1777.79,589.272 1778.35,591.35 1778.91,564.131 1779.47,551.268 1780.03,574.796 1780.59,594.179 1781.15,614.235 1781.71,634.462 1782.26,640.95 1782.82,659.746 1783.38,695.721 1783.94,713.097 1784.5,712.144 1785.06,709.05 1785.62,708.596 1786.18,704.576 1786.74,704.189 1787.3,719.721 1787.86,735.558 1788.42,684.738 1788.98,666.534 1789.53,666.921 1790.09,637.168 1790.65,641.938 1791.21,679.068 1791.77,680.812 1792.33,696.864 1792.89,694.364 1793.45,709.279 1794.01,726.736 1794.57,711.391 1795.13,694.128 1795.69,712.477 1796.25,713.767 1796.8,714.32 1797.36,726.892 1797.92,739.114 1798.48,739.082 1799.04,733.732 1799.6,751.003 1800.16,747.233 1800.72,728.219 1801.28,744.769 1801.84,805.061 1802.4,799.195 1802.96,809.84 1803.52,769.945 1804.08,752.815 1804.63,713.224 1805.19,708.783 1805.75,722.558 1806.31,722.359 1806.87,705.694 1807.43,703.974 1807.99,687.422 1808.55,669.748 1809.11,673.978 1809.67,673.172 1810.23,673.51 1810.79,673.828 1811.35,657.621 1811.9,658.897 1812.46,676.149 1813.02,695.08 1813.58,665.435 1814.14,666.583 1814.7,664.887 1815.26,644.607 1815.82,641.74 1816.38,627.883 1816.94,649.197 1817.5,667.353 1818.06,683.638 1818.62,699.849 1819.18,728.422 1819.73,725.402 1820.29,707.751 1820.85,723.914 1821.41,755.463 1821.97,768.644 1822.53,733.067 1823.09,712.95 1823.65,681.667 1824.21,714.537 1824.77,697.257 1825.33,711.093 1825.89,711.676 1826.45,678.191 1827,691.535 1827.56,675.208 1828.12,689.304 1828.68,690.844 1829.24,705.76 1829.8,720.191 1830.36,702.935 1830.92,703.784 1831.48,702.825 1832.04,734.229 1832.6,715.679 1833.16,732.435 1833.72,744.286 1834.27,743.839 1834.83,759.862 1835.39,709.865 1835.95,709.34 1836.51,725.873 1837.07,721.587 1837.63,738.851 1838.19,738.334 \"/>\n<path clip-path=\"url(#clip083)\" d=\"M720.247 690.757 L720.806 690.757 L721.365 690.757 L721.924 690.757 L722.484 690.757 L723.043 690.757 L723.602 690.757 L724.161 690.757 L724.721 690.757 L725.28 690.757 L725.839 690.757 L726.398 690.757 L726.958 690.757 L727.517 690.757 L728.076 690.757 L728.635 690.757 L729.195 690.757 L729.754 690.757 L730.313 690.757 L730.872 690.757 L731.432 690.757 L731.991 690.757 L732.55 690.757 L733.109 690.757 L733.669 690.757 L734.228 690.757 L734.787 690.757 L735.346 690.757 L735.906 690.757 L736.465 690.757 L737.024 690.757 L737.583 690.757 L738.143 690.757 L738.702 690.757 L739.261 690.757 L739.82 690.757 L740.38 690.757 L740.939 690.757 L741.498 690.757 L742.057 690.757 L742.617 690.757 L743.176 690.757 L743.735 690.757 L744.294 690.757 L744.854 690.757 L745.413 690.757 L745.972 690.757 L746.531 690.757 L747.091 690.757 L747.65 690.757 L748.209 690.757 L748.768 690.757 L749.328 690.757 L749.887 690.757 L750.446 690.757 L751.005 690.757 L751.565 690.757 L752.124 690.757 L752.683 690.757 L753.242 690.757 L753.802 690.757 L754.361 690.757 L754.92 690.757 L755.479 690.757 L756.039 690.757 L756.598 690.757 L757.157 690.757 L757.716 690.757 L758.276 690.757 L758.835 690.757 L759.394 690.757 L759.953 690.757 L760.513 690.757 L761.072 690.757 L761.631 690.757 L762.19 690.757 L762.75 690.757 L763.309 690.757 L763.868 690.757 L764.427 690.757 L764.987 690.757 L765.546 690.757 L766.105 690.757 L766.664 690.757 L767.224 690.757 L767.783 690.757 L768.342 690.757 L768.901 690.757 L769.461 690.757 L770.02 690.757 L770.579 690.757 L771.138 690.757 L771.698 690.757 L772.257 690.757 L772.816 690.757 L773.375 690.757 L773.935 690.757 L774.494 690.757 L775.053 690.757 L775.612 690.757 L776.172 690.757 L776.731 690.757 L777.29 690.757 L777.849 690.757 L778.409 690.757 L778.968 690.757 L779.527 690.757 L780.086 690.757 L780.646 690.757 L781.205 690.757 L781.764 690.757 L782.323 690.757 L782.883 690.757 L783.442 690.757 L784.001 690.757 L784.56 690.757 L785.12 690.757 L785.679 690.757 L786.238 690.757 L786.797 690.757 L787.357 690.757 L787.916 690.757 L788.475 690.757 L789.034 690.757 L789.594 690.757 L790.153 690.757 L790.712 690.757 L791.271 690.757 L791.831 690.757 L792.39 690.757 L792.949 690.757 L793.508 690.757 L794.068 690.757 L794.627 690.757 L795.186 690.757 L795.745 690.757 L796.305 690.757 L796.864 690.757 L797.423 690.757 L797.982 690.757 L798.542 690.757 L799.101 690.757 L799.66 690.757 L800.219 690.757 L800.779 690.757 L801.338 690.757 L801.897 690.757 L802.456 690.757 L803.016 690.757 L803.575 690.757 L804.134 690.757 L804.693 690.757 L805.253 690.757 L805.812 690.757 L806.371 690.757 L806.931 690.757 L807.49 690.757 L808.049 690.757 L808.608 690.757 L809.168 690.757 L809.727 690.757 L810.286 690.757 L810.845 690.757 L811.405 690.757 L811.964 690.757 L812.523 690.757 L813.082 690.757 L813.642 690.757 L814.201 690.757 L814.76 690.757 L815.319 690.757 L815.879 690.757 L816.438 690.757 L816.997 690.757 L817.556 690.757 L818.116 690.757 L818.675 690.757 L819.234 690.757 L819.793 690.757 L820.353 690.757 L820.912 690.757 L821.471 690.757 L822.03 690.757 L822.59 690.757 L823.149 690.757 L823.708 690.757 L824.267 690.757 L824.827 690.757 L825.386 690.757 L825.945 690.757 L826.504 690.757 L827.064 690.757 L827.623 690.757 L828.182 690.757 L828.741 690.757 L829.301 690.757 L829.86 690.757 L830.419 690.757 L830.978 690.757 L831.538 690.757 L832.097 690.757 L832.656 690.757 L833.215 690.757 L833.775 690.757 L834.334 690.757 L834.893 690.757 L835.452 690.757 L836.012 690.757 L836.571 690.757 L837.13 690.757 L837.689 690.757 L838.249 690.757 L838.808 690.757 L839.367 690.757 L839.926 690.757 L840.486 690.757 L841.045 690.757 L841.604 690.757 L842.163 690.757 L842.723 690.757 L843.282 690.757 L843.841 690.757 L844.4 690.757 L844.96 690.757 L845.519 690.757 L846.078 690.757 L846.637 690.757 L847.197 690.757 L847.756 690.757 L848.315 690.757 L848.874 690.757 L849.434 690.757 L849.993 690.757 L850.552 690.757 L851.111 690.757 L851.671 690.757 L852.23 690.757 L852.789 690.757 L853.348 690.757 L853.908 690.757 L854.467 690.757 L855.026 690.757 L855.585 690.757 L856.145 690.757 L856.704 690.757 L857.263 690.757 L857.822 690.757 L858.382 690.757 L858.941 690.757 L859.5 690.757 L860.059 690.757 L860.619 690.757 L861.178 690.757 L861.737 690.757 L862.296 690.757 L862.856 690.757 L863.415 690.757 L863.974 690.757 L864.533 690.757 L865.093 690.757 L865.652 690.757 L866.211 690.757 L866.77 690.757 L867.33 690.757 L867.889 690.757 L868.448 690.757 L869.007 690.757 L869.567 690.757 L870.126 690.757 L870.685 690.757 L871.244 690.757 L871.804 690.757 L872.363 690.757 L872.922 690.757 L873.481 690.757 L874.041 690.757 L874.6 690.757 L875.159 690.757 L875.718 690.757 L876.278 690.757 L876.837 690.757 L877.396 690.757 L877.955 690.757 L878.515 690.757 L879.074 690.757 L879.633 690.757 L880.192 690.757 L880.752 690.757 L881.311 690.757 L881.87 690.757 L882.429 690.757 L882.989 690.757 L883.548 690.757 L884.107 690.757 L884.666 690.757 L885.226 690.757 L885.785 690.757 L886.344 690.757 L886.903 690.757 L887.463 690.757 L888.022 690.757 L888.581 690.757 L889.14 690.757 L889.7 690.757 L890.259 690.757 L890.818 690.757 L891.377 690.757 L891.937 690.757 L892.496 690.757 L893.055 690.757 L893.614 690.757 L894.174 690.757 L894.733 690.757 L895.292 690.757 L895.851 690.757 L896.411 690.757 L896.97 690.757 L897.529 690.757 L898.088 690.757 L898.648 690.757 L899.207 690.757 L899.766 690.757 L900.325 690.757 L900.885 690.757 L901.444 690.757 L902.003 690.757 L902.562 690.757 L903.122 690.757 L903.681 690.757 L904.24 690.757 L904.799 690.757 L905.359 690.757 L905.918 690.757 L906.477 690.757 L907.036 690.757 L907.596 690.757 L908.155 690.757 L908.714 690.757 L909.273 690.757 L909.833 690.757 L910.392 690.757 L910.951 690.757 L911.51 690.757 L912.07 690.757 L912.629 690.757 L913.188 690.757 L913.747 690.757 L914.307 690.757 L914.866 690.757 L915.425 690.757 L915.984 690.757 L916.544 690.757 L917.103 690.757 L917.662 690.757 L918.221 690.757 L918.781 690.757 L919.34 690.757 L919.899 690.757 L920.458 690.757 L921.018 690.757 L921.577 690.757 L922.136 690.757 L922.695 690.757 L923.255 690.757 L923.814 690.757 L924.373 690.757 L924.932 690.757 L925.492 690.757 L926.051 690.757 L926.61 690.757 L927.169 690.757 L927.729 690.757 L928.288 690.757 L928.847 690.757 L929.406 690.757 L929.966 690.757 L930.525 690.757 L931.084 690.757 L931.644 690.757 L932.203 690.757 L932.762 690.757 L933.321 690.757 L933.881 690.757 L934.44 690.757 L934.999 690.757 L935.558 690.757 L936.118 690.757 L936.677 690.757 L937.236 690.757 L937.795 690.757 L938.355 690.757 L938.914 690.757 L939.473 690.757 L940.032 690.757 L940.592 690.757 L941.151 690.757 L941.71 690.757 L942.269 690.757 L942.829 690.757 L943.388 690.757 L943.947 690.757 L944.506 690.757 L945.066 690.757 L945.625 690.757 L946.184 690.757 L946.743 690.757 L947.303 690.757 L947.862 690.757 L948.421 690.757 L948.98 690.757 L949.54 690.757 L950.099 690.757 L950.658 690.757 L951.217 690.757 L951.777 690.757 L952.336 690.757 L952.895 690.757 L953.454 690.757 L954.014 690.757 L954.573 690.757 L955.132 690.757 L955.691 690.757 L956.251 690.757 L956.81 690.757 L957.369 690.757 L957.928 690.757 L958.488 690.757 L959.047 690.757 L959.606 690.757 L960.165 690.757 L960.725 690.757 L961.284 690.757 L961.843 690.757 L962.402 690.757 L962.962 690.757 L963.521 690.757 L964.08 690.757 L964.639 690.757 L965.199 690.757 L965.758 690.757 L966.317 690.757 L966.876 690.757 L967.436 690.757 L967.995 690.757 L968.554 690.757 L969.113 690.757 L969.673 690.757 L970.232 690.757 L970.791 690.757 L971.35 690.757 L971.91 690.757 L972.469 690.757 L973.028 690.757 L973.587 690.757 L974.147 690.757 L974.706 690.757 L975.265 690.757 L975.824 690.757 L976.384 690.757 L976.943 690.757 L977.502 690.757 L978.061 690.757 L978.621 690.757 L979.18 690.757 L979.739 690.757 L980.298 690.757 L980.858 690.757 L981.417 690.757 L981.976 690.757 L982.535 690.757 L983.095 690.757 L983.654 690.757 L984.213 690.757 L984.772 690.757 L985.332 690.757 L985.891 690.757 L986.45 690.757 L987.009 690.757 L987.569 690.757 L988.128 690.757 L988.687 690.757 L989.246 690.757 L989.806 690.757 L990.365 690.757 L990.924 690.757 L991.483 690.757 L992.043 690.757 L992.602 690.757 L993.161 690.757 L993.72 690.757 L994.28 690.757 L994.839 690.757 L995.398 690.757 L995.957 690.757 L996.517 690.757 L997.076 690.757 L997.635 690.757 L998.194 690.757 L998.754 690.757 L999.313 690.757 L999.872 690.757 L1000.43 690.757 L1000.99 690.757 L1001.55 690.757 L1002.11 690.757 L1002.67 690.757 L1003.23 690.757 L1003.79 690.757 L1004.35 690.757 L1004.91 690.757 L1005.46 690.757 L1006.02 690.757 L1006.58 690.757 L1007.14 690.757 L1007.7 690.757 L1008.26 690.757 L1008.82 690.757 L1009.38 690.757 L1009.94 690.757 L1010.5 690.757 L1011.06 690.757 L1011.62 690.757 L1012.18 690.757 L1012.73 690.757 L1013.29 690.757 L1013.85 690.757 L1014.41 690.757 L1014.97 690.757 L1015.53 690.757 L1016.09 690.757 L1016.65 690.757 L1017.21 690.757 L1017.77 690.757 L1018.33 690.757 L1018.89 690.757 L1019.45 690.757 L1020.01 690.757 L1020.56 690.757 L1021.12 690.757 L1021.68 690.757 L1022.24 690.757 L1022.8 690.757 L1023.36 690.757 L1023.92 690.757 L1024.48 690.757 L1025.04 690.757 L1025.6 690.757 L1026.16 690.757 L1026.72 690.757 L1027.28 690.757 L1027.83 690.757 L1028.39 690.757 L1028.95 690.757 L1029.51 690.757 L1030.07 690.757 L1030.63 690.757 L1031.19 690.757 L1031.75 690.757 L1032.31 690.757 L1032.87 690.757 L1033.43 690.757 L1033.99 690.757 L1034.55 690.757 L1035.1 690.757 L1035.66 690.757 L1036.22 690.757 L1036.78 690.757 L1037.34 690.757 L1037.9 690.757 L1038.46 690.757 L1039.02 690.757 L1039.58 690.757 L1040.14 690.757 L1040.7 690.757 L1041.26 690.757 L1041.82 690.757 L1042.38 690.757 L1042.93 690.757 L1043.49 690.757 L1044.05 690.757 L1044.61 690.757 L1045.17 690.757 L1045.73 690.757 L1046.29 690.757 L1046.85 690.757 L1047.41 690.757 L1047.97 690.757 L1048.53 690.757 L1049.09 690.757 L1049.65 690.757 L1050.2 690.757 L1050.76 690.757 L1051.32 690.757 L1051.88 690.757 L1052.44 690.757 L1053 690.757 L1053.56 690.757 L1054.12 690.757 L1054.68 690.757 L1055.24 690.757 L1055.8 690.757 L1056.36 690.757 L1056.92 690.757 L1057.48 690.757 L1058.03 690.757 L1058.59 690.757 L1059.15 690.757 L1059.71 690.757 L1060.27 690.757 L1060.83 690.757 L1061.39 690.757 L1061.95 690.757 L1062.51 690.757 L1063.07 690.757 L1063.63 690.757 L1064.19 690.757 L1064.75 690.757 L1065.3 690.757 L1065.86 690.757 L1066.42 690.757 L1066.98 690.757 L1067.54 690.757 L1068.1 690.757 L1068.66 690.757 L1069.22 690.757 L1069.78 690.757 L1070.34 690.757 L1070.9 690.757 L1071.46 690.757 L1072.02 690.757 L1072.57 690.757 L1073.13 690.757 L1073.69 690.757 L1074.25 690.757 L1074.81 690.757 L1075.37 690.757 L1075.93 690.757 L1076.49 690.757 L1077.05 690.757 L1077.61 690.757 L1078.17 690.757 L1078.73 690.757 L1079.29 690.757 L1079.85 690.757 L1080.4 690.757 L1080.96 690.757 L1081.52 690.757 L1082.08 690.757 L1082.64 690.757 L1083.2 690.757 L1083.76 690.757 L1084.32 690.757 L1084.88 690.757 L1085.44 690.757 L1086 690.757 L1086.56 690.757 L1087.12 690.757 L1087.67 690.757 L1088.23 690.757 L1088.79 690.757 L1089.35 690.757 L1089.91 690.757 L1090.47 690.757 L1091.03 690.757 L1091.59 690.757 L1092.15 690.757 L1092.71 690.757 L1093.27 690.757 L1093.83 690.757 L1094.39 690.757 L1094.94 690.757 L1095.5 690.757 L1096.06 690.757 L1096.62 690.757 L1097.18 690.757 L1097.74 690.757 L1098.3 690.757 L1098.86 690.757 L1099.42 690.757 L1099.98 690.757 L1100.54 690.757 L1101.1 690.757 L1101.66 690.757 L1102.22 690.757 L1102.77 690.757 L1103.33 690.757 L1103.89 690.757 L1104.45 690.757 L1105.01 690.757 L1105.57 690.757 L1106.13 690.757 L1106.69 690.757 L1107.25 690.757 L1107.81 690.757 L1108.37 690.757 L1108.93 690.757 L1109.49 690.757 L1110.04 690.757 L1110.6 690.757 L1111.16 690.757 L1111.72 690.757 L1112.28 690.757 L1112.84 690.757 L1113.4 690.757 L1113.96 690.757 L1114.52 690.757 L1115.08 690.757 L1115.64 690.757 L1116.2 690.757 L1116.76 690.757 L1117.31 690.757 L1117.87 690.757 L1118.43 690.757 L1118.99 690.757 L1119.55 690.757 L1120.11 690.757 L1120.67 690.757 L1121.23 690.757 L1121.79 690.757 L1122.35 690.757 L1122.91 690.757 L1123.47 690.757 L1124.03 690.757 L1124.59 690.757 L1125.14 690.757 L1125.7 690.757 L1126.26 690.757 L1126.82 690.757 L1127.38 690.757 L1127.94 690.757 L1128.5 690.757 L1129.06 690.757 L1129.62 690.757 L1130.18 690.757 L1130.74 690.757 L1131.3 690.757 L1131.86 690.757 L1132.41 690.757 L1132.97 690.757 L1133.53 690.757 L1134.09 690.757 L1134.65 690.757 L1135.21 690.757 L1135.77 690.757 L1136.33 690.757 L1136.89 690.757 L1137.45 690.757 L1138.01 690.757 L1138.57 690.757 L1139.13 690.757 L1139.68 690.757 L1140.24 690.757 L1140.8 690.757 L1141.36 690.757 L1141.92 690.757 L1142.48 690.757 L1143.04 690.757 L1143.6 690.757 L1144.16 690.757 L1144.72 690.757 L1145.28 690.757 L1145.84 690.757 L1146.4 690.757 L1146.96 690.757 L1147.51 690.757 L1148.07 690.757 L1148.63 690.757 L1149.19 690.757 L1149.75 690.757 L1150.31 690.757 L1150.87 690.757 L1151.43 690.757 L1151.99 690.757 L1152.55 690.757 L1153.11 690.757 L1153.67 690.757 L1154.23 690.757 L1154.78 690.757 L1155.34 690.757 L1155.9 690.757 L1156.46 690.757 L1157.02 690.757 L1157.58 690.757 L1158.14 690.757 L1158.7 690.757 L1159.26 690.757 L1159.82 690.757 L1160.38 690.757 L1160.94 690.757 L1161.5 690.757 L1162.05 690.757 L1162.61 690.757 L1163.17 690.757 L1163.73 690.757 L1164.29 690.757 L1164.85 690.757 L1165.41 690.757 L1165.97 690.757 L1166.53 690.757 L1167.09 690.757 L1167.65 690.757 L1168.21 690.757 L1168.77 690.757 L1169.33 690.757 L1169.88 690.757 L1170.44 690.757 L1171 690.757 L1171.56 690.757 L1172.12 690.757 L1172.68 690.757 L1173.24 690.757 L1173.8 690.757 L1174.36 690.757 L1174.92 690.757 L1175.48 690.757 L1176.04 690.757 L1176.6 690.757 L1177.15 690.757 L1177.71 690.757 L1178.27 690.757 L1178.83 690.757 L1179.39 690.757 L1179.95 690.757 L1180.51 690.757 L1181.07 690.757 L1181.63 690.757 L1182.19 690.757 L1182.75 690.757 L1183.31 690.757 L1183.87 690.757 L1184.43 690.757 L1184.98 690.757 L1185.54 690.757 L1186.1 690.757 L1186.66 690.757 L1187.22 690.757 L1187.78 690.757 L1188.34 690.757 L1188.9 690.757 L1189.46 690.757 L1190.02 690.757 L1190.58 690.757 L1191.14 690.757 L1191.7 690.757 L1192.25 690.757 L1192.81 690.757 L1193.37 690.757 L1193.93 690.757 L1194.49 690.757 L1195.05 690.757 L1195.61 690.757 L1196.17 690.757 L1196.73 690.757 L1197.29 690.757 L1197.85 690.757 L1198.41 690.757 L1198.97 690.757 L1199.52 690.757 L1200.08 690.757 L1200.64 690.757 L1201.2 690.757 L1201.76 690.757 L1202.32 690.757 L1202.88 690.757 L1203.44 690.757 L1204 690.757 L1204.56 690.757 L1205.12 690.757 L1205.68 690.757 L1206.24 690.757 L1206.8 690.757 L1207.35 690.757 L1207.91 690.757 L1208.47 690.757 L1209.03 690.757 L1209.59 690.757 L1210.15 690.757 L1210.71 690.757 L1211.27 690.757 L1211.83 690.757 L1212.39 690.757 L1212.95 690.757 L1213.51 690.757 L1214.07 690.757 L1214.62 690.757 L1215.18 690.757 L1215.74 690.757 L1216.3 690.757 L1216.86 690.757 L1217.42 690.757 L1217.98 690.757 L1218.54 690.757 L1219.1 690.757 L1219.66 690.757 L1220.22 690.757 L1220.78 690.757 L1221.34 690.757 L1221.89 690.757 L1222.45 690.757 L1223.01 690.757 L1223.57 690.757 L1224.13 690.757 L1224.69 690.757 L1225.25 690.757 L1225.81 690.757 L1226.37 690.757 L1226.93 690.757 L1227.49 690.757 L1228.05 690.757 L1228.61 690.757 L1229.17 690.757 L1229.72 690.757 L1230.28 690.757 L1230.84 690.757 L1231.4 690.757 L1231.96 690.757 L1232.52 690.757 L1233.08 690.757 L1233.64 690.757 L1234.2 690.757 L1234.76 690.757 L1235.32 690.757 L1235.88 690.757 L1236.44 690.757 L1236.99 690.757 L1237.55 690.757 L1238.11 690.757 L1238.67 690.757 L1239.23 690.757 L1239.79 690.757 L1240.35 690.757 L1240.91 690.757 L1241.47 690.757 L1242.03 690.757 L1242.59 690.757 L1243.15 690.757 L1243.71 690.757 L1244.26 690.757 L1244.82 690.757 L1245.38 690.757 L1245.94 690.757 L1246.5 690.757 L1247.06 690.757 L1247.62 690.757 L1248.18 690.757 L1248.74 690.757 L1249.3 690.757 L1249.86 690.757 L1250.42 690.757 L1250.98 690.757 L1251.54 690.757 L1252.09 690.757 L1252.65 690.757 L1253.21 690.757 L1253.77 690.757 L1254.33 690.757 L1254.89 690.757 L1255.45 690.757 L1256.01 690.757 L1256.57 690.757 L1257.13 690.757 L1257.69 690.757 L1258.25 690.757 L1258.81 690.757 L1259.36 690.757 L1259.92 690.757 L1260.48 690.757 L1261.04 690.757 L1261.6 690.757 L1262.16 690.757 L1262.72 690.757 L1263.28 690.757 L1263.84 690.757 L1264.4 690.757 L1264.96 690.757 L1265.52 690.757 L1266.08 690.757 L1266.63 690.757 L1267.19 690.757 L1267.75 690.757 L1268.31 690.757 L1268.87 690.757 L1269.43 690.757 L1269.99 690.757 L1270.55 690.757 L1271.11 690.757 L1271.67 690.757 L1272.23 690.757 L1272.79 690.757 L1273.35 690.757 L1273.91 690.757 L1274.46 690.757 L1275.02 690.757 L1275.58 690.757 L1276.14 690.757 L1276.7 690.757 L1277.26 690.757 L1277.82 690.757 L1278.38 690.757 L1278.94 690.757 L1279.5 690.757 L1280.06 690.757 L1280.62 690.757 L1281.18 690.757 L1281.73 690.757 L1282.29 690.757 L1282.85 690.757 L1283.41 690.757 L1283.97 690.757 L1284.53 690.757 L1285.09 690.757 L1285.65 690.757 L1286.21 690.757 L1286.77 690.757 L1287.33 690.757 L1287.89 690.757 L1288.45 690.757 L1289 690.757 L1289.56 690.757 L1290.12 690.757 L1290.68 690.757 L1291.24 690.757 L1291.8 690.757 L1292.36 690.757 L1292.92 690.757 L1293.48 690.757 L1294.04 690.757 L1294.6 690.757 L1295.16 690.757 L1295.72 690.757 L1296.28 690.757 L1296.83 690.757 L1297.39 690.757 L1297.95 690.757 L1298.51 690.757 L1299.07 690.757 L1299.63 690.757 L1300.19 690.757 L1300.75 690.757 L1301.31 690.757 L1301.87 690.757 L1302.43 690.757 L1302.99 690.757 L1303.55 690.757 L1304.1 690.757 L1304.66 690.757 L1305.22 690.757 L1305.78 690.757 L1306.34 690.757 L1306.9 690.757 L1307.46 690.757 L1308.02 690.757 L1308.58 690.757 L1309.14 690.757 L1309.7 690.757 L1310.26 690.757 L1310.82 690.757 L1311.38 690.757 L1311.93 690.757 L1312.49 690.757 L1313.05 690.757 L1313.61 690.757 L1314.17 690.757 L1314.73 690.757 L1315.29 690.757 L1315.85 690.757 L1316.41 690.757 L1316.97 690.757 L1317.53 690.757 L1318.09 690.757 L1318.65 690.757 L1319.2 690.757 L1319.76 690.757 L1320.32 690.757 L1320.88 690.757 L1321.44 690.757 L1322 690.757 L1322.56 690.757 L1323.12 690.757 L1323.68 690.757 L1324.24 690.757 L1324.8 690.757 L1325.36 690.757 L1325.92 690.757 L1326.47 690.757 L1327.03 690.757 L1327.59 690.757 L1328.15 690.757 L1328.71 690.757 L1329.27 690.757 L1329.83 690.757 L1330.39 690.757 L1330.95 690.757 L1331.51 690.757 L1332.07 690.757 L1332.63 690.757 L1333.19 690.757 L1333.75 690.757 L1334.3 690.757 L1334.86 690.757 L1335.42 690.757 L1335.98 690.757 L1336.54 690.757 L1337.1 690.757 L1337.66 690.757 L1338.22 690.757 L1338.78 690.757 L1339.34 690.757 L1339.9 690.757 L1340.46 690.757 L1341.02 690.757 L1341.57 690.757 L1342.13 690.757 L1342.69 690.757 L1343.25 690.757 L1343.81 690.757 L1344.37 690.757 L1344.93 690.757 L1345.49 690.757 L1346.05 690.757 L1346.61 690.757 L1347.17 690.757 L1347.73 690.757 L1348.29 690.757 L1348.84 690.757 L1349.4 690.757 L1349.96 690.757 L1350.52 690.757 L1351.08 690.757 L1351.64 690.757 L1352.2 690.757 L1352.76 690.757 L1353.32 690.757 L1353.88 690.757 L1354.44 690.757 L1355 690.757 L1355.56 690.757 L1356.12 690.757 L1356.67 690.757 L1357.23 690.757 L1357.79 690.757 L1358.35 690.757 L1358.91 690.757 L1359.47 690.757 L1360.03 690.757 L1360.59 690.757 L1361.15 690.757 L1361.71 690.757 L1362.27 690.757 L1362.83 690.757 L1363.39 690.757 L1363.94 690.757 L1364.5 690.757 L1365.06 690.757 L1365.62 690.757 L1366.18 690.757 L1366.74 690.757 L1367.3 690.757 L1367.86 690.757 L1368.42 690.757 L1368.98 690.757 L1369.54 690.757 L1370.1 690.757 L1370.66 690.757 L1371.21 690.757 L1371.77 690.757 L1372.33 690.757 L1372.89 690.757 L1373.45 690.757 L1374.01 690.757 L1374.57 690.757 L1375.13 690.757 L1375.69 690.757 L1376.25 690.757 L1376.81 690.757 L1377.37 690.757 L1377.93 690.757 L1378.49 690.757 L1379.04 690.757 L1379.6 690.757 L1380.16 690.757 L1380.72 690.757 L1381.28 690.757 L1381.84 690.757 L1382.4 690.757 L1382.96 690.757 L1383.52 690.757 L1384.08 690.757 L1384.64 690.757 L1385.2 690.757 L1385.76 690.757 L1386.31 690.757 L1386.87 690.757 L1387.43 690.757 L1387.99 690.757 L1388.55 690.757 L1389.11 690.757 L1389.67 690.757 L1390.23 690.757 L1390.79 690.757 L1391.35 690.757 L1391.91 690.757 L1392.47 690.757 L1393.03 690.757 L1393.58 690.757 L1394.14 690.757 L1394.7 690.757 L1395.26 690.757 L1395.82 690.757 L1396.38 690.757 L1396.94 690.757 L1397.5 690.757 L1398.06 690.757 L1398.62 690.757 L1399.18 690.757 L1399.74 690.757 L1400.3 690.757 L1400.86 690.757 L1401.41 690.757 L1401.97 690.757 L1402.53 690.757 L1403.09 690.757 L1403.65 690.757 L1404.21 690.757 L1404.77 690.757 L1405.33 690.757 L1405.89 690.757 L1406.45 690.757 L1407.01 690.757 L1407.57 690.757 L1408.13 690.757 L1408.68 690.757 L1409.24 690.757 L1409.8 690.757 L1410.36 690.757 L1410.92 690.757 L1411.48 690.757 L1412.04 690.757 L1412.6 690.757 L1413.16 690.757 L1413.72 690.757 L1414.28 690.757 L1414.84 690.757 L1415.4 690.757 L1415.95 690.757 L1416.51 690.757 L1417.07 690.757 L1417.63 690.757 L1418.19 690.757 L1418.75 690.757 L1419.31 690.757 L1419.87 690.757 L1420.43 690.757 L1420.99 690.757 L1421.55 690.757 L1422.11 690.757 L1422.67 690.757 L1423.23 690.757 L1423.78 690.757 L1424.34 690.757 L1424.9 690.757 L1425.46 690.757 L1426.02 690.757 L1426.58 690.757 L1427.14 690.757 L1427.7 690.757 L1428.26 690.757 L1428.82 690.757 L1429.38 690.757 L1429.94 690.757 L1430.5 690.757 L1431.05 690.757 L1431.61 690.757 L1432.17 690.757 L1432.73 690.757 L1433.29 690.757 L1433.85 690.757 L1434.41 690.757 L1434.97 690.757 L1435.53 690.757 L1436.09 690.757 L1436.65 690.757 L1437.21 690.757 L1437.77 690.757 L1438.33 690.757 L1438.88 690.757 L1439.44 690.757 L1440 690.757 L1440.56 690.757 L1441.12 690.757 L1441.68 690.757 L1442.24 690.757 L1442.8 690.757 L1443.36 690.757 L1443.92 690.757 L1444.48 690.757 L1445.04 690.757 L1445.6 690.757 L1446.15 690.757 L1446.71 690.757 L1447.27 690.757 L1447.83 690.757 L1448.39 690.757 L1448.95 690.757 L1449.51 690.757 L1450.07 690.757 L1450.63 690.757 L1451.19 690.757 L1451.75 690.757 L1452.31 690.757 L1452.87 690.757 L1453.42 690.757 L1453.98 690.757 L1454.54 690.757 L1455.1 690.757 L1455.66 690.757 L1456.22 690.757 L1456.78 690.757 L1457.34 690.757 L1457.9 690.757 L1458.46 690.757 L1459.02 690.757 L1459.58 690.757 L1460.14 690.757 L1460.7 690.757 L1461.25 690.757 L1461.81 690.757 L1462.37 690.757 L1462.93 690.757 L1463.49 690.757 L1464.05 690.757 L1464.61 690.757 L1465.17 690.757 L1465.73 690.757 L1466.29 690.757 L1466.85 690.757 L1467.41 690.757 L1467.97 690.757 L1468.52 690.757 L1469.08 690.757 L1469.64 690.757 L1470.2 690.757 L1470.76 690.757 L1471.32 690.757 L1471.88 690.757 L1472.44 690.757 L1473 690.757 L1473.56 690.757 L1474.12 690.757 L1474.68 690.757 L1475.24 690.757 L1475.79 690.757 L1476.35 690.757 L1476.91 690.757 L1477.47 690.757 L1478.03 690.757 L1478.59 690.757 L1479.15 690.757 L1479.71 690.757 L1480.27 690.757 L1480.83 690.757 L1481.39 690.757 L1481.95 690.757 L1482.51 690.757 L1483.07 690.757 L1483.62 690.757 L1484.18 690.757 L1484.74 690.757 L1485.3 690.757 L1485.86 690.757 L1486.42 690.757 L1486.98 690.757 L1487.54 690.757 L1488.1 690.757 L1488.66 690.757 L1489.22 690.757 L1489.78 690.757 L1490.34 690.757 L1490.89 690.757 L1491.45 690.757 L1492.01 690.757 L1492.57 690.757 L1493.13 690.757 L1493.69 690.757 L1494.25 690.757 L1494.81 690.757 L1495.37 690.757 L1495.93 690.757 L1496.49 690.757 L1497.05 690.757 L1497.61 690.757 L1498.16 690.757 L1498.72 690.757 L1499.28 690.757 L1499.84 690.757 L1500.4 690.757 L1500.96 690.757 L1501.52 690.757 L1502.08 690.757 L1502.64 690.757 L1503.2 690.757 L1503.76 690.757 L1504.32 690.757 L1504.88 690.757 L1505.44 690.757 L1505.99 690.757 L1506.55 690.757 L1507.11 690.757 L1507.67 690.757 L1508.23 690.757 L1508.79 690.757 L1509.35 690.757 L1509.91 690.757 L1510.47 690.757 L1511.03 690.757 L1511.59 690.757 L1512.15 690.757 L1512.71 690.757 L1513.26 690.757 L1513.82 690.757 L1514.38 690.757 L1514.94 690.757 L1515.5 690.757 L1516.06 690.757 L1516.62 690.757 L1517.18 690.757 L1517.74 690.757 L1518.3 690.757 L1518.86 690.757 L1519.42 690.757 L1519.98 690.757 L1520.53 690.757 L1521.09 690.757 L1521.65 690.757 L1522.21 690.757 L1522.77 690.757 L1523.33 690.757 L1523.89 690.757 L1524.45 690.757 L1525.01 690.757 L1525.57 690.757 L1526.13 690.757 L1526.69 690.757 L1527.25 690.757 L1527.81 690.757 L1528.36 690.757 L1528.92 690.757 L1529.48 690.757 L1530.04 690.757 L1530.6 690.757 L1531.16 690.757 L1531.72 690.757 L1532.28 690.757 L1532.84 690.757 L1533.4 690.757 L1533.96 690.757 L1534.52 690.757 L1535.08 690.757 L1535.63 690.757 L1536.19 690.757 L1536.75 690.757 L1537.31 690.757 L1537.87 690.757 L1538.43 690.757 L1538.99 690.757 L1539.55 690.757 L1540.11 690.757 L1540.67 690.757 L1541.23 690.757 L1541.79 690.757 L1542.35 690.757 L1542.9 690.757 L1543.46 690.757 L1544.02 690.757 L1544.58 690.757 L1545.14 690.757 L1545.7 690.757 L1546.26 690.757 L1546.82 690.757 L1547.38 690.757 L1547.94 690.757 L1548.5 690.757 L1549.06 690.757 L1549.62 690.757 L1550.18 690.757 L1550.73 690.757 L1551.29 690.757 L1551.85 690.757 L1552.41 690.757 L1552.97 690.757 L1553.53 690.757 L1554.09 690.757 L1554.65 690.757 L1555.21 690.757 L1555.77 690.757 L1556.33 690.757 L1556.89 690.757 L1557.45 690.757 L1558 690.757 L1558.56 690.757 L1559.12 690.757 L1559.68 690.757 L1560.24 690.757 L1560.8 690.757 L1561.36 690.757 L1561.92 690.757 L1562.48 690.757 L1563.04 690.757 L1563.6 690.757 L1564.16 690.757 L1564.72 690.757 L1565.28 690.757 L1565.83 690.757 L1566.39 690.757 L1566.95 690.757 L1567.51 690.757 L1568.07 690.757 L1568.63 690.757 L1569.19 690.757 L1569.75 690.757 L1570.31 690.757 L1570.87 690.757 L1571.43 690.757 L1571.99 690.757 L1572.55 690.757 L1573.1 690.757 L1573.66 690.757 L1574.22 690.757 L1574.78 690.757 L1575.34 690.757 L1575.9 690.757 L1576.46 690.757 L1577.02 690.757 L1577.58 690.757 L1578.14 690.757 L1578.7 690.757 L1579.26 690.757 L1579.82 690.757 L1580.37 690.757 L1580.93 690.757 L1581.49 690.757 L1582.05 690.757 L1582.61 690.757 L1583.17 690.757 L1583.73 690.757 L1584.29 690.757 L1584.85 690.757 L1585.41 690.757 L1585.97 690.757 L1586.53 690.757 L1587.09 690.757 L1587.65 690.757 L1588.2 690.757 L1588.76 690.757 L1589.32 690.757 L1589.88 690.757 L1590.44 690.757 L1591 690.757 L1591.56 690.757 L1592.12 690.757 L1592.68 690.757 L1593.24 690.757 L1593.8 690.757 L1594.36 690.757 L1594.92 690.757 L1595.47 690.757 L1596.03 690.757 L1596.59 690.757 L1597.15 690.757 L1597.71 690.757 L1598.27 690.757 L1598.83 690.757 L1599.39 690.757 L1599.95 690.757 L1600.51 690.757 L1601.07 690.757 L1601.63 690.757 L1602.19 690.757 L1602.74 690.757 L1603.3 690.757 L1603.86 690.757 L1604.42 690.757 L1604.98 690.757 L1605.54 690.757 L1606.1 690.757 L1606.66 690.757 L1607.22 690.757 L1607.78 690.757 L1608.34 690.757 L1608.9 690.757 L1609.46 690.757 L1610.02 690.757 L1610.57 690.757 L1611.13 690.757 L1611.69 690.757 L1612.25 690.757 L1612.81 690.757 L1613.37 690.757 L1613.93 690.757 L1614.49 690.757 L1615.05 690.757 L1615.61 690.757 L1616.17 690.757 L1616.73 690.757 L1617.29 690.757 L1617.84 690.757 L1618.4 690.757 L1618.96 690.757 L1619.52 690.757 L1620.08 690.757 L1620.64 690.757 L1621.2 690.757 L1621.76 690.757 L1622.32 690.757 L1622.88 690.757 L1623.44 690.757 L1624 690.757 L1624.56 690.757 L1625.11 690.757 L1625.67 690.757 L1626.23 690.757 L1626.79 690.757 L1627.35 690.757 L1627.91 690.757 L1628.47 690.757 L1629.03 690.757 L1629.59 690.757 L1630.15 690.757 L1630.71 690.757 L1631.27 690.757 L1631.83 690.757 L1632.39 690.757 L1632.94 690.757 L1633.5 690.757 L1634.06 690.757 L1634.62 690.757 L1635.18 690.757 L1635.74 690.757 L1636.3 690.757 L1636.86 690.757 L1637.42 690.757 L1637.98 690.757 L1638.54 690.757 L1639.1 690.757 L1639.66 690.757 L1640.21 690.757 L1640.77 690.757 L1641.33 690.757 L1641.89 690.757 L1642.45 690.757 L1643.01 690.757 L1643.57 690.757 L1644.13 690.757 L1644.69 690.757 L1645.25 690.757 L1645.81 690.757 L1646.37 690.757 L1646.93 690.757 L1647.48 690.757 L1648.04 690.757 L1648.6 690.757 L1649.16 690.757 L1649.72 690.757 L1650.28 690.757 L1650.84 690.757 L1651.4 690.757 L1651.96 690.757 L1652.52 690.757 L1653.08 690.757 L1653.64 690.757 L1654.2 690.757 L1654.76 690.757 L1655.31 690.757 L1655.87 690.757 L1656.43 690.757 L1656.99 690.757 L1657.55 690.757 L1658.11 690.757 L1658.67 690.757 L1659.23 690.757 L1659.79 690.757 L1660.35 690.757 L1660.91 690.757 L1661.47 690.757 L1662.03 690.757 L1662.58 690.757 L1663.14 690.757 L1663.7 690.757 L1664.26 690.757 L1664.82 690.757 L1665.38 690.757 L1665.94 690.757 L1666.5 690.757 L1667.06 690.757 L1667.62 690.757 L1668.18 690.757 L1668.74 690.757 L1669.3 690.757 L1669.85 690.757 L1670.41 690.757 L1670.97 690.757 L1671.53 690.757 L1672.09 690.757 L1672.65 690.757 L1673.21 690.757 L1673.77 690.757 L1674.33 690.757 L1674.89 690.757 L1675.45 690.757 L1676.01 690.757 L1676.57 690.757 L1677.13 690.757 L1677.68 690.757 L1678.24 690.757 L1678.8 690.757 L1679.36 690.757 L1679.92 690.757 L1680.48 690.757 L1681.04 690.757 L1681.6 690.757 L1682.16 690.757 L1682.72 690.757 L1683.28 690.757 L1683.84 690.757 L1684.4 690.757 L1684.95 690.757 L1685.51 690.757 L1686.07 690.757 L1686.63 690.757 L1687.19 690.757 L1687.75 690.757 L1688.31 690.757 L1688.87 690.757 L1689.43 690.757 L1689.99 690.757 L1690.55 690.757 L1691.11 690.757 L1691.67 690.757 L1692.23 690.757 L1692.78 690.757 L1693.34 690.757 L1693.9 690.757 L1694.46 690.757 L1695.02 690.757 L1695.58 690.757 L1696.14 690.757 L1696.7 690.757 L1697.26 690.757 L1697.82 690.757 L1698.38 690.757 L1698.94 690.757 L1699.5 690.757 L1700.05 690.757 L1700.61 690.757 L1701.17 690.757 L1701.73 690.757 L1702.29 690.757 L1702.85 690.757 L1703.41 690.757 L1703.97 690.757 L1704.53 690.757 L1705.09 690.757 L1705.65 690.757 L1706.21 690.757 L1706.77 690.757 L1707.32 690.757 L1707.88 690.757 L1708.44 690.757 L1709 690.757 L1709.56 690.757 L1710.12 690.757 L1710.68 690.757 L1711.24 690.757 L1711.8 690.757 L1712.36 690.757 L1712.92 690.757 L1713.48 690.757 L1714.04 690.757 L1714.6 690.757 L1715.15 690.757 L1715.71 690.757 L1716.27 690.757 L1716.83 690.757 L1717.39 690.757 L1717.95 690.757 L1718.51 690.757 L1719.07 690.757 L1719.63 690.757 L1720.19 690.757 L1720.75 690.757 L1721.31 690.757 L1721.87 690.757 L1722.42 690.757 L1722.98 690.757 L1723.54 690.757 L1724.1 690.757 L1724.66 690.757 L1725.22 690.757 L1725.78 690.757 L1726.34 690.757 L1726.9 690.757 L1727.46 690.757 L1728.02 690.757 L1728.58 690.757 L1729.14 690.757 L1729.69 690.757 L1730.25 690.757 L1730.81 690.757 L1731.37 690.757 L1731.93 690.757 L1732.49 690.757 L1733.05 690.757 L1733.61 690.757 L1734.17 690.757 L1734.73 690.757 L1735.29 690.757 L1735.85 690.757 L1736.41 690.757 L1736.97 690.757 L1737.52 690.757 L1738.08 690.757 L1738.64 690.757 L1739.2 690.757 L1739.76 690.757 L1740.32 690.757 L1740.88 690.757 L1741.44 690.757 L1742 690.757 L1742.56 690.757 L1743.12 690.757 L1743.68 690.757 L1744.24 690.757 L1744.79 690.757 L1745.35 690.757 L1745.91 690.757 L1746.47 690.757 L1747.03 690.757 L1747.59 690.757 L1748.15 690.757 L1748.71 690.757 L1749.27 690.757 L1749.83 690.757 L1750.39 690.757 L1750.95 690.757 L1751.51 690.757 L1752.06 690.757 L1752.62 690.757 L1753.18 690.757 L1753.74 690.757 L1754.3 690.757 L1754.86 690.757 L1755.42 690.757 L1755.98 690.757 L1756.54 690.757 L1757.1 690.757 L1757.66 690.757 L1758.22 690.757 L1758.78 690.757 L1759.34 690.757 L1759.89 690.757 L1760.45 690.757 L1761.01 690.757 L1761.57 690.757 L1762.13 690.757 L1762.69 690.757 L1763.25 690.757 L1763.81 690.757 L1764.37 690.757 L1764.93 690.757 L1765.49 690.757 L1766.05 690.757 L1766.61 690.757 L1767.16 690.757 L1767.72 690.757 L1768.28 690.757 L1768.84 690.757 L1769.4 690.757 L1769.96 690.757 L1770.52 690.757 L1771.08 690.757 L1771.64 690.757 L1772.2 690.757 L1772.76 690.757 L1773.32 690.757 L1773.88 690.757 L1774.43 690.757 L1774.99 690.757 L1775.55 690.757 L1776.11 690.757 L1776.67 690.757 L1777.23 690.757 L1777.79 690.757 L1778.35 690.757 L1778.91 690.757 L1779.47 690.757 L1780.03 690.757 L1780.59 690.757 L1781.15 690.757 L1781.71 690.757 L1782.26 690.757 L1782.82 690.757 L1783.38 690.757 L1783.94 690.757 L1784.5 690.757 L1785.06 690.757 L1785.62 690.757 L1786.18 690.757 L1786.74 690.757 L1787.3 690.757 L1787.86 690.757 L1788.42 690.757 L1788.98 690.757 L1789.53 690.757 L1790.09 690.757 L1790.65 690.757 L1791.21 690.757 L1791.77 690.757 L1792.33 690.757 L1792.89 690.757 L1793.45 690.757 L1794.01 690.757 L1794.57 690.757 L1795.13 690.757 L1795.69 690.757 L1796.25 690.757 L1796.8 690.757 L1797.36 690.757 L1797.92 690.757 L1798.48 690.757 L1799.04 690.757 L1799.6 690.757 L1800.16 690.757 L1800.72 690.757 L1801.28 690.757 L1801.84 690.757 L1802.4 690.757 L1802.96 690.757 L1803.52 690.757 L1804.08 690.757 L1804.63 690.757 L1805.19 690.757 L1805.75 690.757 L1806.31 690.757 L1806.87 690.757 L1807.43 690.757 L1807.99 690.757 L1808.55 690.757 L1809.11 690.757 L1809.67 690.757 L1810.23 690.757 L1810.79 690.757 L1811.35 690.757 L1811.9 690.757 L1812.46 690.757 L1813.02 690.757 L1813.58 690.757 L1814.14 690.757 L1814.7 690.757 L1815.26 690.757 L1815.82 690.757 L1816.38 690.757 L1816.94 690.757 L1817.5 690.757 L1818.06 690.757 L1818.62 690.757 L1819.18 690.757 L1819.73 690.757 L1820.29 690.757 L1820.85 690.757 L1821.41 690.757 L1821.97 690.757 L1822.53 690.757 L1823.09 690.757 L1823.65 690.757 L1824.21 690.757 L1824.77 690.757 L1825.33 690.757 L1825.89 690.757 L1826.45 690.757 L1827 690.757 L1827.56 690.757 L1828.12 690.757 L1828.68 690.757 L1829.24 690.757 L1829.8 690.757 L1830.36 690.757 L1830.92 690.757 L1831.48 690.757 L1832.04 690.757 L1832.6 690.757 L1833.16 690.757 L1833.72 690.757 L1834.27 690.757 L1834.83 690.757 L1835.39 690.757 L1835.95 690.757 L1836.51 690.757 L1837.07 690.757 L1837.63 690.757 L1838.19 690.757 L1838.19 681.466 L1837.63 681.466 L1837.07 681.466 L1836.51 681.466 L1835.95 681.466 L1835.39 681.466 L1834.83 681.466 L1834.27 681.466 L1833.72 681.466 L1833.16 681.466 L1832.6 681.466 L1832.04 681.466 L1831.48 681.466 L1830.92 681.466 L1830.36 681.466 L1829.8 681.466 L1829.24 681.466 L1828.68 681.466 L1828.12 681.466 L1827.56 681.466 L1827 681.466 L1826.45 681.466 L1825.89 681.466 L1825.33 681.466 L1824.77 681.466 L1824.21 681.466 L1823.65 681.466 L1823.09 681.466 L1822.53 681.466 L1821.97 681.466 L1821.41 681.466 L1820.85 681.466 L1820.29 681.466 L1819.73 681.466 L1819.18 681.466 L1818.62 681.466 L1818.06 681.466 L1817.5 681.466 L1816.94 681.466 L1816.38 681.466 L1815.82 681.466 L1815.26 681.466 L1814.7 681.466 L1814.14 681.466 L1813.58 681.466 L1813.02 681.466 L1812.46 681.466 L1811.9 681.466 L1811.35 681.466 L1810.79 681.466 L1810.23 681.466 L1809.67 681.466 L1809.11 681.466 L1808.55 681.466 L1807.99 681.466 L1807.43 681.466 L1806.87 681.466 L1806.31 681.466 L1805.75 681.466 L1805.19 681.466 L1804.63 681.466 L1804.08 681.466 L1803.52 681.466 L1802.96 681.466 L1802.4 681.466 L1801.84 681.466 L1801.28 681.466 L1800.72 681.466 L1800.16 681.466 L1799.6 681.466 L1799.04 681.466 L1798.48 681.466 L1797.92 681.466 L1797.36 681.466 L1796.8 681.466 L1796.25 681.466 L1795.69 681.466 L1795.13 681.466 L1794.57 681.466 L1794.01 681.466 L1793.45 681.466 L1792.89 681.466 L1792.33 681.466 L1791.77 681.466 L1791.21 681.466 L1790.65 681.466 L1790.09 681.466 L1789.53 681.466 L1788.98 681.466 L1788.42 681.466 L1787.86 681.466 L1787.3 681.466 L1786.74 681.466 L1786.18 681.466 L1785.62 681.466 L1785.06 681.466 L1784.5 681.466 L1783.94 681.466 L1783.38 681.466 L1782.82 681.466 L1782.26 681.466 L1781.71 681.466 L1781.15 681.466 L1780.59 681.466 L1780.03 681.466 L1779.47 681.466 L1778.91 681.466 L1778.35 681.466 L1777.79 681.466 L1777.23 681.466 L1776.67 681.466 L1776.11 681.466 L1775.55 681.466 L1774.99 681.466 L1774.43 681.466 L1773.88 681.466 L1773.32 681.466 L1772.76 681.466 L1772.2 681.466 L1771.64 681.466 L1771.08 681.466 L1770.52 681.466 L1769.96 681.466 L1769.4 681.466 L1768.84 681.466 L1768.28 681.466 L1767.72 681.466 L1767.16 681.466 L1766.61 681.466 L1766.05 681.466 L1765.49 681.466 L1764.93 681.466 L1764.37 681.466 L1763.81 681.466 L1763.25 681.466 L1762.69 681.466 L1762.13 681.466 L1761.57 681.466 L1761.01 681.466 L1760.45 681.466 L1759.89 681.466 L1759.34 681.466 L1758.78 681.466 L1758.22 681.466 L1757.66 681.466 L1757.1 681.466 L1756.54 681.466 L1755.98 681.466 L1755.42 681.466 L1754.86 681.466 L1754.3 681.466 L1753.74 681.466 L1753.18 681.466 L1752.62 681.466 L1752.06 681.466 L1751.51 681.466 L1750.95 681.466 L1750.39 681.466 L1749.83 681.466 L1749.27 681.466 L1748.71 681.466 L1748.15 681.466 L1747.59 681.466 L1747.03 681.466 L1746.47 681.466 L1745.91 681.466 L1745.35 681.466 L1744.79 681.466 L1744.24 681.466 L1743.68 681.466 L1743.12 681.466 L1742.56 681.466 L1742 681.466 L1741.44 681.466 L1740.88 681.466 L1740.32 681.466 L1739.76 681.466 L1739.2 681.466 L1738.64 681.466 L1738.08 681.466 L1737.52 681.466 L1736.97 681.466 L1736.41 681.466 L1735.85 681.466 L1735.29 681.466 L1734.73 681.466 L1734.17 681.466 L1733.61 681.466 L1733.05 681.466 L1732.49 681.466 L1731.93 681.466 L1731.37 681.466 L1730.81 681.466 L1730.25 681.466 L1729.69 681.466 L1729.14 681.466 L1728.58 681.466 L1728.02 681.466 L1727.46 681.466 L1726.9 681.466 L1726.34 681.466 L1725.78 681.466 L1725.22 681.466 L1724.66 681.466 L1724.1 681.466 L1723.54 681.466 L1722.98 681.466 L1722.42 681.466 L1721.87 681.466 L1721.31 681.466 L1720.75 681.466 L1720.19 681.466 L1719.63 681.466 L1719.07 681.466 L1718.51 681.466 L1717.95 681.466 L1717.39 681.466 L1716.83 681.466 L1716.27 681.466 L1715.71 681.466 L1715.15 681.466 L1714.6 681.466 L1714.04 681.466 L1713.48 681.466 L1712.92 681.466 L1712.36 681.466 L1711.8 681.466 L1711.24 681.466 L1710.68 681.466 L1710.12 681.466 L1709.56 681.466 L1709 681.466 L1708.44 681.466 L1707.88 681.466 L1707.32 681.466 L1706.77 681.466 L1706.21 681.466 L1705.65 681.466 L1705.09 681.466 L1704.53 681.466 L1703.97 681.466 L1703.41 681.466 L1702.85 681.466 L1702.29 681.466 L1701.73 681.466 L1701.17 681.466 L1700.61 681.466 L1700.05 681.466 L1699.5 681.466 L1698.94 681.466 L1698.38 681.466 L1697.82 681.466 L1697.26 681.466 L1696.7 681.466 L1696.14 681.466 L1695.58 681.466 L1695.02 681.466 L1694.46 681.466 L1693.9 681.466 L1693.34 681.466 L1692.78 681.466 L1692.23 681.466 L1691.67 681.466 L1691.11 681.466 L1690.55 681.466 L1689.99 681.466 L1689.43 681.466 L1688.87 681.466 L1688.31 681.466 L1687.75 681.466 L1687.19 681.466 L1686.63 681.466 L1686.07 681.466 L1685.51 681.466 L1684.95 681.466 L1684.4 681.466 L1683.84 681.466 L1683.28 681.466 L1682.72 681.466 L1682.16 681.466 L1681.6 681.466 L1681.04 681.466 L1680.48 681.466 L1679.92 681.466 L1679.36 681.466 L1678.8 681.466 L1678.24 681.466 L1677.68 681.466 L1677.13 681.466 L1676.57 681.466 L1676.01 681.466 L1675.45 681.466 L1674.89 681.466 L1674.33 681.466 L1673.77 681.466 L1673.21 681.466 L1672.65 681.466 L1672.09 681.466 L1671.53 681.466 L1670.97 681.466 L1670.41 681.466 L1669.85 681.466 L1669.3 681.466 L1668.74 681.466 L1668.18 681.466 L1667.62 681.466 L1667.06 681.466 L1666.5 681.466 L1665.94 681.466 L1665.38 681.466 L1664.82 681.466 L1664.26 681.466 L1663.7 681.466 L1663.14 681.466 L1662.58 681.466 L1662.03 681.466 L1661.47 681.466 L1660.91 681.466 L1660.35 681.466 L1659.79 681.466 L1659.23 681.466 L1658.67 681.466 L1658.11 681.466 L1657.55 681.466 L1656.99 681.466 L1656.43 681.466 L1655.87 681.466 L1655.31 681.466 L1654.76 681.466 L1654.2 681.466 L1653.64 681.466 L1653.08 681.466 L1652.52 681.466 L1651.96 681.466 L1651.4 681.466 L1650.84 681.466 L1650.28 681.466 L1649.72 681.466 L1649.16 681.466 L1648.6 681.466 L1648.04 681.466 L1647.48 681.466 L1646.93 681.466 L1646.37 681.466 L1645.81 681.466 L1645.25 681.466 L1644.69 681.466 L1644.13 681.466 L1643.57 681.466 L1643.01 681.466 L1642.45 681.466 L1641.89 681.466 L1641.33 681.466 L1640.77 681.466 L1640.21 681.466 L1639.66 681.466 L1639.1 681.466 L1638.54 681.466 L1637.98 681.466 L1637.42 681.466 L1636.86 681.466 L1636.3 681.466 L1635.74 681.466 L1635.18 681.466 L1634.62 681.466 L1634.06 681.466 L1633.5 681.466 L1632.94 681.466 L1632.39 681.466 L1631.83 681.466 L1631.27 681.466 L1630.71 681.466 L1630.15 681.466 L1629.59 681.466 L1629.03 681.466 L1628.47 681.466 L1627.91 681.466 L1627.35 681.466 L1626.79 681.466 L1626.23 681.466 L1625.67 681.466 L1625.11 681.466 L1624.56 681.466 L1624 681.466 L1623.44 681.466 L1622.88 681.466 L1622.32 681.466 L1621.76 681.466 L1621.2 681.466 L1620.64 681.466 L1620.08 681.466 L1619.52 681.466 L1618.96 681.466 L1618.4 681.466 L1617.84 681.466 L1617.29 681.466 L1616.73 681.466 L1616.17 681.466 L1615.61 681.466 L1615.05 681.466 L1614.49 681.466 L1613.93 681.466 L1613.37 681.466 L1612.81 681.466 L1612.25 681.466 L1611.69 681.466 L1611.13 681.466 L1610.57 681.466 L1610.02 681.466 L1609.46 681.466 L1608.9 681.466 L1608.34 681.466 L1607.78 681.466 L1607.22 681.466 L1606.66 681.466 L1606.1 681.466 L1605.54 681.466 L1604.98 681.466 L1604.42 681.466 L1603.86 681.466 L1603.3 681.466 L1602.74 681.466 L1602.19 681.466 L1601.63 681.466 L1601.07 681.466 L1600.51 681.466 L1599.95 681.466 L1599.39 681.466 L1598.83 681.466 L1598.27 681.466 L1597.71 681.466 L1597.15 681.466 L1596.59 681.466 L1596.03 681.466 L1595.47 681.466 L1594.92 681.466 L1594.36 681.466 L1593.8 681.466 L1593.24 681.466 L1592.68 681.466 L1592.12 681.466 L1591.56 681.466 L1591 681.466 L1590.44 681.466 L1589.88 681.466 L1589.32 681.466 L1588.76 681.466 L1588.2 681.466 L1587.65 681.466 L1587.09 681.466 L1586.53 681.466 L1585.97 681.466 L1585.41 681.466 L1584.85 681.466 L1584.29 681.466 L1583.73 681.466 L1583.17 681.466 L1582.61 681.466 L1582.05 681.466 L1581.49 681.466 L1580.93 681.466 L1580.37 681.466 L1579.82 681.466 L1579.26 681.466 L1578.7 681.466 L1578.14 681.466 L1577.58 681.466 L1577.02 681.466 L1576.46 681.466 L1575.9 681.466 L1575.34 681.466 L1574.78 681.466 L1574.22 681.466 L1573.66 681.466 L1573.1 681.466 L1572.55 681.466 L1571.99 681.466 L1571.43 681.466 L1570.87 681.466 L1570.31 681.466 L1569.75 681.466 L1569.19 681.466 L1568.63 681.466 L1568.07 681.466 L1567.51 681.466 L1566.95 681.466 L1566.39 681.466 L1565.83 681.466 L1565.28 681.466 L1564.72 681.466 L1564.16 681.466 L1563.6 681.466 L1563.04 681.466 L1562.48 681.466 L1561.92 681.466 L1561.36 681.466 L1560.8 681.466 L1560.24 681.466 L1559.68 681.466 L1559.12 681.466 L1558.56 681.466 L1558 681.466 L1557.45 681.466 L1556.89 681.466 L1556.33 681.466 L1555.77 681.466 L1555.21 681.466 L1554.65 681.466 L1554.09 681.466 L1553.53 681.466 L1552.97 681.466 L1552.41 681.466 L1551.85 681.466 L1551.29 681.466 L1550.73 681.466 L1550.18 681.466 L1549.62 681.466 L1549.06 681.466 L1548.5 681.466 L1547.94 681.466 L1547.38 681.466 L1546.82 681.466 L1546.26 681.466 L1545.7 681.466 L1545.14 681.466 L1544.58 681.466 L1544.02 681.466 L1543.46 681.466 L1542.9 681.466 L1542.35 681.466 L1541.79 681.466 L1541.23 681.466 L1540.67 681.466 L1540.11 681.466 L1539.55 681.466 L1538.99 681.466 L1538.43 681.466 L1537.87 681.466 L1537.31 681.466 L1536.75 681.466 L1536.19 681.466 L1535.63 681.466 L1535.08 681.466 L1534.52 681.466 L1533.96 681.466 L1533.4 681.466 L1532.84 681.466 L1532.28 681.466 L1531.72 681.466 L1531.16 681.466 L1530.6 681.466 L1530.04 681.466 L1529.48 681.466 L1528.92 681.466 L1528.36 681.466 L1527.81 681.466 L1527.25 681.466 L1526.69 681.466 L1526.13 681.466 L1525.57 681.466 L1525.01 681.466 L1524.45 681.466 L1523.89 681.466 L1523.33 681.466 L1522.77 681.466 L1522.21 681.466 L1521.65 681.466 L1521.09 681.466 L1520.53 681.466 L1519.98 681.466 L1519.42 681.466 L1518.86 681.466 L1518.3 681.466 L1517.74 681.466 L1517.18 681.466 L1516.62 681.466 L1516.06 681.466 L1515.5 681.466 L1514.94 681.466 L1514.38 681.466 L1513.82 681.466 L1513.26 681.466 L1512.71 681.466 L1512.15 681.466 L1511.59 681.466 L1511.03 681.466 L1510.47 681.466 L1509.91 681.466 L1509.35 681.466 L1508.79 681.466 L1508.23 681.466 L1507.67 681.466 L1507.11 681.466 L1506.55 681.466 L1505.99 681.466 L1505.44 681.466 L1504.88 681.466 L1504.32 681.466 L1503.76 681.466 L1503.2 681.466 L1502.64 681.466 L1502.08 681.466 L1501.52 681.466 L1500.96 681.466 L1500.4 681.466 L1499.84 681.466 L1499.28 681.466 L1498.72 681.466 L1498.16 681.466 L1497.61 681.466 L1497.05 681.466 L1496.49 681.466 L1495.93 681.466 L1495.37 681.466 L1494.81 681.466 L1494.25 681.466 L1493.69 681.466 L1493.13 681.466 L1492.57 681.466 L1492.01 681.466 L1491.45 681.466 L1490.89 681.466 L1490.34 681.466 L1489.78 681.466 L1489.22 681.466 L1488.66 681.466 L1488.1 681.466 L1487.54 681.466 L1486.98 681.466 L1486.42 681.466 L1485.86 681.466 L1485.3 681.466 L1484.74 681.466 L1484.18 681.466 L1483.62 681.466 L1483.07 681.466 L1482.51 681.466 L1481.95 681.466 L1481.39 681.466 L1480.83 681.466 L1480.27 681.466 L1479.71 681.466 L1479.15 681.466 L1478.59 681.466 L1478.03 681.466 L1477.47 681.466 L1476.91 681.466 L1476.35 681.466 L1475.79 681.466 L1475.24 681.466 L1474.68 681.466 L1474.12 681.466 L1473.56 681.466 L1473 681.466 L1472.44 681.466 L1471.88 681.466 L1471.32 681.466 L1470.76 681.466 L1470.2 681.466 L1469.64 681.466 L1469.08 681.466 L1468.52 681.466 L1467.97 681.466 L1467.41 681.466 L1466.85 681.466 L1466.29 681.466 L1465.73 681.466 L1465.17 681.466 L1464.61 681.466 L1464.05 681.466 L1463.49 681.466 L1462.93 681.466 L1462.37 681.466 L1461.81 681.466 L1461.25 681.466 L1460.7 681.466 L1460.14 681.466 L1459.58 681.466 L1459.02 681.466 L1458.46 681.466 L1457.9 681.466 L1457.34 681.466 L1456.78 681.466 L1456.22 681.466 L1455.66 681.466 L1455.1 681.466 L1454.54 681.466 L1453.98 681.466 L1453.42 681.466 L1452.87 681.466 L1452.31 681.466 L1451.75 681.466 L1451.19 681.466 L1450.63 681.466 L1450.07 681.466 L1449.51 681.466 L1448.95 681.466 L1448.39 681.466 L1447.83 681.466 L1447.27 681.466 L1446.71 681.466 L1446.15 681.466 L1445.6 681.466 L1445.04 681.466 L1444.48 681.466 L1443.92 681.466 L1443.36 681.466 L1442.8 681.466 L1442.24 681.466 L1441.68 681.466 L1441.12 681.466 L1440.56 681.466 L1440 681.466 L1439.44 681.466 L1438.88 681.466 L1438.33 681.466 L1437.77 681.466 L1437.21 681.466 L1436.65 681.466 L1436.09 681.466 L1435.53 681.466 L1434.97 681.466 L1434.41 681.466 L1433.85 681.466 L1433.29 681.466 L1432.73 681.466 L1432.17 681.466 L1431.61 681.466 L1431.05 681.466 L1430.5 681.466 L1429.94 681.466 L1429.38 681.466 L1428.82 681.466 L1428.26 681.466 L1427.7 681.466 L1427.14 681.466 L1426.58 681.466 L1426.02 681.466 L1425.46 681.466 L1424.9 681.466 L1424.34 681.466 L1423.78 681.466 L1423.23 681.466 L1422.67 681.466 L1422.11 681.466 L1421.55 681.466 L1420.99 681.466 L1420.43 681.466 L1419.87 681.466 L1419.31 681.466 L1418.75 681.466 L1418.19 681.466 L1417.63 681.466 L1417.07 681.466 L1416.51 681.466 L1415.95 681.466 L1415.4 681.466 L1414.84 681.466 L1414.28 681.466 L1413.72 681.466 L1413.16 681.466 L1412.6 681.466 L1412.04 681.466 L1411.48 681.466 L1410.92 681.466 L1410.36 681.466 L1409.8 681.466 L1409.24 681.466 L1408.68 681.466 L1408.13 681.466 L1407.57 681.466 L1407.01 681.466 L1406.45 681.466 L1405.89 681.466 L1405.33 681.466 L1404.77 681.466 L1404.21 681.466 L1403.65 681.466 L1403.09 681.466 L1402.53 681.466 L1401.97 681.466 L1401.41 681.466 L1400.86 681.466 L1400.3 681.466 L1399.74 681.466 L1399.18 681.466 L1398.62 681.466 L1398.06 681.466 L1397.5 681.466 L1396.94 681.466 L1396.38 681.466 L1395.82 681.466 L1395.26 681.466 L1394.7 681.466 L1394.14 681.466 L1393.58 681.466 L1393.03 681.466 L1392.47 681.466 L1391.91 681.466 L1391.35 681.466 L1390.79 681.466 L1390.23 681.466 L1389.67 681.466 L1389.11 681.466 L1388.55 681.466 L1387.99 681.466 L1387.43 681.466 L1386.87 681.466 L1386.31 681.466 L1385.76 681.466 L1385.2 681.466 L1384.64 681.466 L1384.08 681.466 L1383.52 681.466 L1382.96 681.466 L1382.4 681.466 L1381.84 681.466 L1381.28 681.466 L1380.72 681.466 L1380.16 681.466 L1379.6 681.466 L1379.04 681.466 L1378.49 681.466 L1377.93 681.466 L1377.37 681.466 L1376.81 681.466 L1376.25 681.466 L1375.69 681.466 L1375.13 681.466 L1374.57 681.466 L1374.01 681.466 L1373.45 681.466 L1372.89 681.466 L1372.33 681.466 L1371.77 681.466 L1371.21 681.466 L1370.66 681.466 L1370.1 681.466 L1369.54 681.466 L1368.98 681.466 L1368.42 681.466 L1367.86 681.466 L1367.3 681.466 L1366.74 681.466 L1366.18 681.466 L1365.62 681.466 L1365.06 681.466 L1364.5 681.466 L1363.94 681.466 L1363.39 681.466 L1362.83 681.466 L1362.27 681.466 L1361.71 681.466 L1361.15 681.466 L1360.59 681.466 L1360.03 681.466 L1359.47 681.466 L1358.91 681.466 L1358.35 681.466 L1357.79 681.466 L1357.23 681.466 L1356.67 681.466 L1356.12 681.466 L1355.56 681.466 L1355 681.466 L1354.44 681.466 L1353.88 681.466 L1353.32 681.466 L1352.76 681.466 L1352.2 681.466 L1351.64 681.466 L1351.08 681.466 L1350.52 681.466 L1349.96 681.466 L1349.4 681.466 L1348.84 681.466 L1348.29 681.466 L1347.73 681.466 L1347.17 681.466 L1346.61 681.466 L1346.05 681.466 L1345.49 681.466 L1344.93 681.466 L1344.37 681.466 L1343.81 681.466 L1343.25 681.466 L1342.69 681.466 L1342.13 681.466 L1341.57 681.466 L1341.02 681.466 L1340.46 681.466 L1339.9 681.466 L1339.34 681.466 L1338.78 681.466 L1338.22 681.466 L1337.66 681.466 L1337.1 681.466 L1336.54 681.466 L1335.98 681.466 L1335.42 681.466 L1334.86 681.466 L1334.3 681.466 L1333.75 681.466 L1333.19 681.466 L1332.63 681.466 L1332.07 681.466 L1331.51 681.466 L1330.95 681.466 L1330.39 681.466 L1329.83 681.466 L1329.27 681.466 L1328.71 681.466 L1328.15 681.466 L1327.59 681.466 L1327.03 681.466 L1326.47 681.466 L1325.92 681.466 L1325.36 681.466 L1324.8 681.466 L1324.24 681.466 L1323.68 681.466 L1323.12 681.466 L1322.56 681.466 L1322 681.466 L1321.44 681.466 L1320.88 681.466 L1320.32 681.466 L1319.76 681.466 L1319.2 681.466 L1318.65 681.466 L1318.09 681.466 L1317.53 681.466 L1316.97 681.466 L1316.41 681.466 L1315.85 681.466 L1315.29 681.466 L1314.73 681.466 L1314.17 681.466 L1313.61 681.466 L1313.05 681.466 L1312.49 681.466 L1311.93 681.466 L1311.38 681.466 L1310.82 681.466 L1310.26 681.466 L1309.7 681.466 L1309.14 681.466 L1308.58 681.466 L1308.02 681.466 L1307.46 681.466 L1306.9 681.466 L1306.34 681.466 L1305.78 681.466 L1305.22 681.466 L1304.66 681.466 L1304.1 681.466 L1303.55 681.466 L1302.99 681.466 L1302.43 681.466 L1301.87 681.466 L1301.31 681.466 L1300.75 681.466 L1300.19 681.466 L1299.63 681.466 L1299.07 681.466 L1298.51 681.466 L1297.95 681.466 L1297.39 681.466 L1296.83 681.466 L1296.28 681.466 L1295.72 681.466 L1295.16 681.466 L1294.6 681.466 L1294.04 681.466 L1293.48 681.466 L1292.92 681.466 L1292.36 681.466 L1291.8 681.466 L1291.24 681.466 L1290.68 681.466 L1290.12 681.466 L1289.56 681.466 L1289 681.466 L1288.45 681.466 L1287.89 681.466 L1287.33 681.466 L1286.77 681.466 L1286.21 681.466 L1285.65 681.466 L1285.09 681.466 L1284.53 681.466 L1283.97 681.466 L1283.41 681.466 L1282.85 681.466 L1282.29 681.466 L1281.73 681.466 L1281.18 681.466 L1280.62 681.466 L1280.06 681.466 L1279.5 681.466 L1278.94 681.466 L1278.38 681.466 L1277.82 681.466 L1277.26 681.466 L1276.7 681.466 L1276.14 681.466 L1275.58 681.466 L1275.02 681.466 L1274.46 681.466 L1273.91 681.466 L1273.35 681.466 L1272.79 681.466 L1272.23 681.466 L1271.67 681.466 L1271.11 681.466 L1270.55 681.466 L1269.99 681.466 L1269.43 681.466 L1268.87 681.466 L1268.31 681.466 L1267.75 681.466 L1267.19 681.466 L1266.63 681.466 L1266.08 681.466 L1265.52 681.466 L1264.96 681.466 L1264.4 681.466 L1263.84 681.466 L1263.28 681.466 L1262.72 681.466 L1262.16 681.466 L1261.6 681.466 L1261.04 681.466 L1260.48 681.466 L1259.92 681.466 L1259.36 681.466 L1258.81 681.466 L1258.25 681.466 L1257.69 681.466 L1257.13 681.466 L1256.57 681.466 L1256.01 681.466 L1255.45 681.466 L1254.89 681.466 L1254.33 681.466 L1253.77 681.466 L1253.21 681.466 L1252.65 681.466 L1252.09 681.466 L1251.54 681.466 L1250.98 681.466 L1250.42 681.466 L1249.86 681.466 L1249.3 681.466 L1248.74 681.466 L1248.18 681.466 L1247.62 681.466 L1247.06 681.466 L1246.5 681.466 L1245.94 681.466 L1245.38 681.466 L1244.82 681.466 L1244.26 681.466 L1243.71 681.466 L1243.15 681.466 L1242.59 681.466 L1242.03 681.466 L1241.47 681.466 L1240.91 681.466 L1240.35 681.466 L1239.79 681.466 L1239.23 681.466 L1238.67 681.466 L1238.11 681.466 L1237.55 681.466 L1236.99 681.466 L1236.44 681.466 L1235.88 681.466 L1235.32 681.466 L1234.76 681.466 L1234.2 681.466 L1233.64 681.466 L1233.08 681.466 L1232.52 681.466 L1231.96 681.466 L1231.4 681.466 L1230.84 681.466 L1230.28 681.466 L1229.72 681.466 L1229.17 681.466 L1228.61 681.466 L1228.05 681.466 L1227.49 681.466 L1226.93 681.466 L1226.37 681.466 L1225.81 681.466 L1225.25 681.466 L1224.69 681.466 L1224.13 681.466 L1223.57 681.466 L1223.01 681.466 L1222.45 681.466 L1221.89 681.466 L1221.34 681.466 L1220.78 681.466 L1220.22 681.466 L1219.66 681.466 L1219.1 681.466 L1218.54 681.466 L1217.98 681.466 L1217.42 681.466 L1216.86 681.466 L1216.3 681.466 L1215.74 681.466 L1215.18 681.466 L1214.62 681.466 L1214.07 681.466 L1213.51 681.466 L1212.95 681.466 L1212.39 681.466 L1211.83 681.466 L1211.27 681.466 L1210.71 681.466 L1210.15 681.466 L1209.59 681.466 L1209.03 681.466 L1208.47 681.466 L1207.91 681.466 L1207.35 681.466 L1206.8 681.466 L1206.24 681.466 L1205.68 681.466 L1205.12 681.466 L1204.56 681.466 L1204 681.466 L1203.44 681.466 L1202.88 681.466 L1202.32 681.466 L1201.76 681.466 L1201.2 681.466 L1200.64 681.466 L1200.08 681.466 L1199.52 681.466 L1198.97 681.466 L1198.41 681.466 L1197.85 681.466 L1197.29 681.466 L1196.73 681.466 L1196.17 681.466 L1195.61 681.466 L1195.05 681.466 L1194.49 681.466 L1193.93 681.466 L1193.37 681.466 L1192.81 681.466 L1192.25 681.466 L1191.7 681.466 L1191.14 681.466 L1190.58 681.466 L1190.02 681.466 L1189.46 681.466 L1188.9 681.466 L1188.34 681.466 L1187.78 681.466 L1187.22 681.466 L1186.66 681.466 L1186.1 681.466 L1185.54 681.466 L1184.98 681.466 L1184.43 681.466 L1183.87 681.466 L1183.31 681.466 L1182.75 681.466 L1182.19 681.466 L1181.63 681.466 L1181.07 681.466 L1180.51 681.466 L1179.95 681.466 L1179.39 681.466 L1178.83 681.466 L1178.27 681.466 L1177.71 681.466 L1177.15 681.466 L1176.6 681.466 L1176.04 681.466 L1175.48 681.466 L1174.92 681.466 L1174.36 681.466 L1173.8 681.466 L1173.24 681.466 L1172.68 681.466 L1172.12 681.466 L1171.56 681.466 L1171 681.466 L1170.44 681.466 L1169.88 681.466 L1169.33 681.466 L1168.77 681.466 L1168.21 681.466 L1167.65 681.466 L1167.09 681.466 L1166.53 681.466 L1165.97 681.466 L1165.41 681.466 L1164.85 681.466 L1164.29 681.466 L1163.73 681.466 L1163.17 681.466 L1162.61 681.466 L1162.05 681.466 L1161.5 681.466 L1160.94 681.466 L1160.38 681.466 L1159.82 681.466 L1159.26 681.466 L1158.7 681.466 L1158.14 681.466 L1157.58 681.466 L1157.02 681.466 L1156.46 681.466 L1155.9 681.466 L1155.34 681.466 L1154.78 681.466 L1154.23 681.466 L1153.67 681.466 L1153.11 681.466 L1152.55 681.466 L1151.99 681.466 L1151.43 681.466 L1150.87 681.466 L1150.31 681.466 L1149.75 681.466 L1149.19 681.466 L1148.63 681.466 L1148.07 681.466 L1147.51 681.466 L1146.96 681.466 L1146.4 681.466 L1145.84 681.466 L1145.28 681.466 L1144.72 681.466 L1144.16 681.466 L1143.6 681.466 L1143.04 681.466 L1142.48 681.466 L1141.92 681.466 L1141.36 681.466 L1140.8 681.466 L1140.24 681.466 L1139.68 681.466 L1139.13 681.466 L1138.57 681.466 L1138.01 681.466 L1137.45 681.466 L1136.89 681.466 L1136.33 681.466 L1135.77 681.466 L1135.21 681.466 L1134.65 681.466 L1134.09 681.466 L1133.53 681.466 L1132.97 681.466 L1132.41 681.466 L1131.86 681.466 L1131.3 681.466 L1130.74 681.466 L1130.18 681.466 L1129.62 681.466 L1129.06 681.466 L1128.5 681.466 L1127.94 681.466 L1127.38 681.466 L1126.82 681.466 L1126.26 681.466 L1125.7 681.466 L1125.14 681.466 L1124.59 681.466 L1124.03 681.466 L1123.47 681.466 L1122.91 681.466 L1122.35 681.466 L1121.79 681.466 L1121.23 681.466 L1120.67 681.466 L1120.11 681.466 L1119.55 681.466 L1118.99 681.466 L1118.43 681.466 L1117.87 681.466 L1117.31 681.466 L1116.76 681.466 L1116.2 681.466 L1115.64 681.466 L1115.08 681.466 L1114.52 681.466 L1113.96 681.466 L1113.4 681.466 L1112.84 681.466 L1112.28 681.466 L1111.72 681.466 L1111.16 681.466 L1110.6 681.466 L1110.04 681.466 L1109.49 681.466 L1108.93 681.466 L1108.37 681.466 L1107.81 681.466 L1107.25 681.466 L1106.69 681.466 L1106.13 681.466 L1105.57 681.466 L1105.01 681.466 L1104.45 681.466 L1103.89 681.466 L1103.33 681.466 L1102.77 681.466 L1102.22 681.466 L1101.66 681.466 L1101.1 681.466 L1100.54 681.466 L1099.98 681.466 L1099.42 681.466 L1098.86 681.466 L1098.3 681.466 L1097.74 681.466 L1097.18 681.466 L1096.62 681.466 L1096.06 681.466 L1095.5 681.466 L1094.94 681.466 L1094.39 681.466 L1093.83 681.466 L1093.27 681.466 L1092.71 681.466 L1092.15 681.466 L1091.59 681.466 L1091.03 681.466 L1090.47 681.466 L1089.91 681.466 L1089.35 681.466 L1088.79 681.466 L1088.23 681.466 L1087.67 681.466 L1087.12 681.466 L1086.56 681.466 L1086 681.466 L1085.44 681.466 L1084.88 681.466 L1084.32 681.466 L1083.76 681.466 L1083.2 681.466 L1082.64 681.466 L1082.08 681.466 L1081.52 681.466 L1080.96 681.466 L1080.4 681.466 L1079.85 681.466 L1079.29 681.466 L1078.73 681.466 L1078.17 681.466 L1077.61 681.466 L1077.05 681.466 L1076.49 681.466 L1075.93 681.466 L1075.37 681.466 L1074.81 681.466 L1074.25 681.466 L1073.69 681.466 L1073.13 681.466 L1072.57 681.466 L1072.02 681.466 L1071.46 681.466 L1070.9 681.466 L1070.34 681.466 L1069.78 681.466 L1069.22 681.466 L1068.66 681.466 L1068.1 681.466 L1067.54 681.466 L1066.98 681.466 L1066.42 681.466 L1065.86 681.466 L1065.3 681.466 L1064.75 681.466 L1064.19 681.466 L1063.63 681.466 L1063.07 681.466 L1062.51 681.466 L1061.95 681.466 L1061.39 681.466 L1060.83 681.466 L1060.27 681.466 L1059.71 681.466 L1059.15 681.466 L1058.59 681.466 L1058.03 681.466 L1057.48 681.466 L1056.92 681.466 L1056.36 681.466 L1055.8 681.466 L1055.24 681.466 L1054.68 681.466 L1054.12 681.466 L1053.56 681.466 L1053 681.466 L1052.44 681.466 L1051.88 681.466 L1051.32 681.466 L1050.76 681.466 L1050.2 681.466 L1049.65 681.466 L1049.09 681.466 L1048.53 681.466 L1047.97 681.466 L1047.41 681.466 L1046.85 681.466 L1046.29 681.466 L1045.73 681.466 L1045.17 681.466 L1044.61 681.466 L1044.05 681.466 L1043.49 681.466 L1042.93 681.466 L1042.38 681.466 L1041.82 681.466 L1041.26 681.466 L1040.7 681.466 L1040.14 681.466 L1039.58 681.466 L1039.02 681.466 L1038.46 681.466 L1037.9 681.466 L1037.34 681.466 L1036.78 681.466 L1036.22 681.466 L1035.66 681.466 L1035.1 681.466 L1034.55 681.466 L1033.99 681.466 L1033.43 681.466 L1032.87 681.466 L1032.31 681.466 L1031.75 681.466 L1031.19 681.466 L1030.63 681.466 L1030.07 681.466 L1029.51 681.466 L1028.95 681.466 L1028.39 681.466 L1027.83 681.466 L1027.28 681.466 L1026.72 681.466 L1026.16 681.466 L1025.6 681.466 L1025.04 681.466 L1024.48 681.466 L1023.92 681.466 L1023.36 681.466 L1022.8 681.466 L1022.24 681.466 L1021.68 681.466 L1021.12 681.466 L1020.56 681.466 L1020.01 681.466 L1019.45 681.466 L1018.89 681.466 L1018.33 681.466 L1017.77 681.466 L1017.21 681.466 L1016.65 681.466 L1016.09 681.466 L1015.53 681.466 L1014.97 681.466 L1014.41 681.466 L1013.85 681.466 L1013.29 681.466 L1012.73 681.466 L1012.18 681.466 L1011.62 681.466 L1011.06 681.466 L1010.5 681.466 L1009.94 681.466 L1009.38 681.466 L1008.82 681.466 L1008.26 681.466 L1007.7 681.466 L1007.14 681.466 L1006.58 681.466 L1006.02 681.466 L1005.46 681.466 L1004.91 681.466 L1004.35 681.466 L1003.79 681.466 L1003.23 681.466 L1002.67 681.466 L1002.11 681.466 L1001.55 681.466 L1000.99 681.466 L1000.43 681.466 L999.872 681.466 L999.313 681.466 L998.754 681.466 L998.194 681.466 L997.635 681.466 L997.076 681.466 L996.517 681.466 L995.957 681.466 L995.398 681.466 L994.839 681.466 L994.28 681.466 L993.72 681.466 L993.161 681.466 L992.602 681.466 L992.043 681.466 L991.483 681.466 L990.924 681.466 L990.365 681.466 L989.806 681.466 L989.246 681.466 L988.687 681.466 L988.128 681.466 L987.569 681.466 L987.009 681.466 L986.45 681.466 L985.891 681.466 L985.332 681.466 L984.772 681.466 L984.213 681.466 L983.654 681.466 L983.095 681.466 L982.535 681.466 L981.976 681.466 L981.417 681.466 L980.858 681.466 L980.298 681.466 L979.739 681.466 L979.18 681.466 L978.621 681.466 L978.061 681.466 L977.502 681.466 L976.943 681.466 L976.384 681.466 L975.824 681.466 L975.265 681.466 L974.706 681.466 L974.147 681.466 L973.587 681.466 L973.028 681.466 L972.469 681.466 L971.91 681.466 L971.35 681.466 L970.791 681.466 L970.232 681.466 L969.673 681.466 L969.113 681.466 L968.554 681.466 L967.995 681.466 L967.436 681.466 L966.876 681.466 L966.317 681.466 L965.758 681.466 L965.199 681.466 L964.639 681.466 L964.08 681.466 L963.521 681.466 L962.962 681.466 L962.402 681.466 L961.843 681.466 L961.284 681.466 L960.725 681.466 L960.165 681.466 L959.606 681.466 L959.047 681.466 L958.488 681.466 L957.928 681.466 L957.369 681.466 L956.81 681.466 L956.251 681.466 L955.691 681.466 L955.132 681.466 L954.573 681.466 L954.014 681.466 L953.454 681.466 L952.895 681.466 L952.336 681.466 L951.777 681.466 L951.217 681.466 L950.658 681.466 L950.099 681.466 L949.54 681.466 L948.98 681.466 L948.421 681.466 L947.862 681.466 L947.303 681.466 L946.743 681.466 L946.184 681.466 L945.625 681.466 L945.066 681.466 L944.506 681.466 L943.947 681.466 L943.388 681.466 L942.829 681.466 L942.269 681.466 L941.71 681.466 L941.151 681.466 L940.592 681.466 L940.032 681.466 L939.473 681.466 L938.914 681.466 L938.355 681.466 L937.795 681.466 L937.236 681.466 L936.677 681.466 L936.118 681.466 L935.558 681.466 L934.999 681.466 L934.44 681.466 L933.881 681.466 L933.321 681.466 L932.762 681.466 L932.203 681.466 L931.644 681.466 L931.084 681.466 L930.525 681.466 L929.966 681.466 L929.406 681.466 L928.847 681.466 L928.288 681.466 L927.729 681.466 L927.169 681.466 L926.61 681.466 L926.051 681.466 L925.492 681.466 L924.932 681.466 L924.373 681.466 L923.814 681.466 L923.255 681.466 L922.695 681.466 L922.136 681.466 L921.577 681.466 L921.018 681.466 L920.458 681.466 L919.899 681.466 L919.34 681.466 L918.781 681.466 L918.221 681.466 L917.662 681.466 L917.103 681.466 L916.544 681.466 L915.984 681.466 L915.425 681.466 L914.866 681.466 L914.307 681.466 L913.747 681.466 L913.188 681.466 L912.629 681.466 L912.07 681.466 L911.51 681.466 L910.951 681.466 L910.392 681.466 L909.833 681.466 L909.273 681.466 L908.714 681.466 L908.155 681.466 L907.596 681.466 L907.036 681.466 L906.477 681.466 L905.918 681.466 L905.359 681.466 L904.799 681.466 L904.24 681.466 L903.681 681.466 L903.122 681.466 L902.562 681.466 L902.003 681.466 L901.444 681.466 L900.885 681.466 L900.325 681.466 L899.766 681.466 L899.207 681.466 L898.648 681.466 L898.088 681.466 L897.529 681.466 L896.97 681.466 L896.411 681.466 L895.851 681.466 L895.292 681.466 L894.733 681.466 L894.174 681.466 L893.614 681.466 L893.055 681.466 L892.496 681.466 L891.937 681.466 L891.377 681.466 L890.818 681.466 L890.259 681.466 L889.7 681.466 L889.14 681.466 L888.581 681.466 L888.022 681.466 L887.463 681.466 L886.903 681.466 L886.344 681.466 L885.785 681.466 L885.226 681.466 L884.666 681.466 L884.107 681.466 L883.548 681.466 L882.989 681.466 L882.429 681.466 L881.87 681.466 L881.311 681.466 L880.752 681.466 L880.192 681.466 L879.633 681.466 L879.074 681.466 L878.515 681.466 L877.955 681.466 L877.396 681.466 L876.837 681.466 L876.278 681.466 L875.718 681.466 L875.159 681.466 L874.6 681.466 L874.041 681.466 L873.481 681.466 L872.922 681.466 L872.363 681.466 L871.804 681.466 L871.244 681.466 L870.685 681.466 L870.126 681.466 L869.567 681.466 L869.007 681.466 L868.448 681.466 L867.889 681.466 L867.33 681.466 L866.77 681.466 L866.211 681.466 L865.652 681.466 L865.093 681.466 L864.533 681.466 L863.974 681.466 L863.415 681.466 L862.856 681.466 L862.296 681.466 L861.737 681.466 L861.178 681.466 L860.619 681.466 L860.059 681.466 L859.5 681.466 L858.941 681.466 L858.382 681.466 L857.822 681.466 L857.263 681.466 L856.704 681.466 L856.145 681.466 L855.585 681.466 L855.026 681.466 L854.467 681.466 L853.908 681.466 L853.348 681.466 L852.789 681.466 L852.23 681.466 L851.671 681.466 L851.111 681.466 L850.552 681.466 L849.993 681.466 L849.434 681.466 L848.874 681.466 L848.315 681.466 L847.756 681.466 L847.197 681.466 L846.637 681.466 L846.078 681.466 L845.519 681.466 L844.96 681.466 L844.4 681.466 L843.841 681.466 L843.282 681.466 L842.723 681.466 L842.163 681.466 L841.604 681.466 L841.045 681.466 L840.486 681.466 L839.926 681.466 L839.367 681.466 L838.808 681.466 L838.249 681.466 L837.689 681.466 L837.13 681.466 L836.571 681.466 L836.012 681.466 L835.452 681.466 L834.893 681.466 L834.334 681.466 L833.775 681.466 L833.215 681.466 L832.656 681.466 L832.097 681.466 L831.538 681.466 L830.978 681.466 L830.419 681.466 L829.86 681.466 L829.301 681.466 L828.741 681.466 L828.182 681.466 L827.623 681.466 L827.064 681.466 L826.504 681.466 L825.945 681.466 L825.386 681.466 L824.827 681.466 L824.267 681.466 L823.708 681.466 L823.149 681.466 L822.59 681.466 L822.03 681.466 L821.471 681.466 L820.912 681.466 L820.353 681.466 L819.793 681.466 L819.234 681.466 L818.675 681.466 L818.116 681.466 L817.556 681.466 L816.997 681.466 L816.438 681.466 L815.879 681.466 L815.319 681.466 L814.76 681.466 L814.201 681.466 L813.642 681.466 L813.082 681.466 L812.523 681.466 L811.964 681.466 L811.405 681.466 L810.845 681.466 L810.286 681.466 L809.727 681.466 L809.168 681.466 L808.608 681.466 L808.049 681.466 L807.49 681.466 L806.931 681.466 L806.371 681.466 L805.812 681.466 L805.253 681.466 L804.693 681.466 L804.134 681.466 L803.575 681.466 L803.016 681.466 L802.456 681.466 L801.897 681.466 L801.338 681.466 L800.779 681.466 L800.219 681.466 L799.66 681.466 L799.101 681.466 L798.542 681.466 L797.982 681.466 L797.423 681.466 L796.864 681.466 L796.305 681.466 L795.745 681.466 L795.186 681.466 L794.627 681.466 L794.068 681.466 L793.508 681.466 L792.949 681.466 L792.39 681.466 L791.831 681.466 L791.271 681.466 L790.712 681.466 L790.153 681.466 L789.594 681.466 L789.034 681.466 L788.475 681.466 L787.916 681.466 L787.357 681.466 L786.797 681.466 L786.238 681.466 L785.679 681.466 L785.12 681.466 L784.56 681.466 L784.001 681.466 L783.442 681.466 L782.883 681.466 L782.323 681.466 L781.764 681.466 L781.205 681.466 L780.646 681.466 L780.086 681.466 L779.527 681.466 L778.968 681.466 L778.409 681.466 L777.849 681.466 L777.29 681.466 L776.731 681.466 L776.172 681.466 L775.612 681.466 L775.053 681.466 L774.494 681.466 L773.935 681.466 L773.375 681.466 L772.816 681.466 L772.257 681.466 L771.698 681.466 L771.138 681.466 L770.579 681.466 L770.02 681.466 L769.461 681.466 L768.901 681.466 L768.342 681.466 L767.783 681.466 L767.224 681.466 L766.664 681.466 L766.105 681.466 L765.546 681.466 L764.987 681.466 L764.427 681.466 L763.868 681.466 L763.309 681.466 L762.75 681.466 L762.19 681.466 L761.631 681.466 L761.072 681.466 L760.513 681.466 L759.953 681.466 L759.394 681.466 L758.835 681.466 L758.276 681.466 L757.716 681.466 L757.157 681.466 L756.598 681.466 L756.039 681.466 L755.479 681.466 L754.92 681.466 L754.361 681.466 L753.802 681.466 L753.242 681.466 L752.683 681.466 L752.124 681.466 L751.565 681.466 L751.005 681.466 L750.446 681.466 L749.887 681.466 L749.328 681.466 L748.768 681.466 L748.209 681.466 L747.65 681.466 L747.091 681.466 L746.531 681.466 L745.972 681.466 L745.413 681.466 L744.854 681.466 L744.294 681.466 L743.735 681.466 L743.176 681.466 L742.617 681.466 L742.057 681.466 L741.498 681.466 L740.939 681.466 L740.38 681.466 L739.82 681.466 L739.261 681.466 L738.702 681.466 L738.143 681.466 L737.583 681.466 L737.024 681.466 L736.465 681.466 L735.906 681.466 L735.346 681.466 L734.787 681.466 L734.228 681.466 L733.669 681.466 L733.109 681.466 L732.55 681.466 L731.991 681.466 L731.432 681.466 L730.872 681.466 L730.313 681.466 L729.754 681.466 L729.195 681.466 L728.635 681.466 L728.076 681.466 L727.517 681.466 L726.958 681.466 L726.398 681.466 L725.839 681.466 L725.28 681.466 L724.721 681.466 L724.161 681.466 L723.602 681.466 L723.043 681.466 L722.484 681.466 L721.924 681.466 L721.365 681.466 L720.806 681.466 L720.247 681.466  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.112 720.806,686.112 721.365,686.112 721.924,686.112 722.484,686.112 723.043,686.112 723.602,686.112 724.161,686.112 724.721,686.112 725.28,686.112 725.839,686.112 726.398,686.112 726.958,686.112 727.517,686.112 728.076,686.112 728.635,686.112 729.195,686.112 729.754,686.112 730.313,686.112 730.872,686.112 731.432,686.112 731.991,686.112 732.55,686.112 733.109,686.112 733.669,686.112 734.228,686.112 734.787,686.112 735.346,686.112 735.906,686.112 736.465,686.112 737.024,686.112 737.583,686.112 738.143,686.112 738.702,686.112 739.261,686.112 739.82,686.112 740.38,686.112 740.939,686.112 741.498,686.112 742.057,686.112 742.617,686.112 743.176,686.112 743.735,686.112 744.294,686.112 744.854,686.112 745.413,686.112 745.972,686.112 746.531,686.112 747.091,686.112 747.65,686.112 748.209,686.112 748.768,686.112 749.328,686.112 749.887,686.112 750.446,686.112 751.005,686.112 751.565,686.112 752.124,686.112 752.683,686.112 753.242,686.112 753.802,686.112 754.361,686.112 754.92,686.112 755.479,686.112 756.039,686.112 756.598,686.112 757.157,686.112 757.716,686.112 758.276,686.112 758.835,686.112 759.394,686.112 759.953,686.112 760.513,686.112 761.072,686.112 761.631,686.112 762.19,686.112 762.75,686.112 763.309,686.112 763.868,686.112 764.427,686.112 764.987,686.112 765.546,686.112 766.105,686.112 766.664,686.112 767.224,686.112 767.783,686.112 768.342,686.112 768.901,686.112 769.461,686.112 770.02,686.112 770.579,686.112 771.138,686.112 771.698,686.112 772.257,686.112 772.816,686.112 773.375,686.112 773.935,686.112 774.494,686.112 775.053,686.112 775.612,686.112 776.172,686.112 776.731,686.112 777.29,686.112 777.849,686.112 778.409,686.112 778.968,686.112 779.527,686.112 780.086,686.112 780.646,686.112 781.205,686.112 781.764,686.112 782.323,686.112 782.883,686.112 783.442,686.112 784.001,686.112 784.56,686.112 785.12,686.112 785.679,686.112 786.238,686.112 786.797,686.112 787.357,686.112 787.916,686.112 788.475,686.112 789.034,686.112 789.594,686.112 790.153,686.112 790.712,686.112 791.271,686.112 791.831,686.112 792.39,686.112 792.949,686.112 793.508,686.112 794.068,686.112 794.627,686.112 795.186,686.112 795.745,686.112 796.305,686.112 796.864,686.112 797.423,686.112 797.982,686.112 798.542,686.112 799.101,686.112 799.66,686.112 800.219,686.112 800.779,686.112 801.338,686.112 801.897,686.112 802.456,686.112 803.016,686.112 803.575,686.112 804.134,686.112 804.693,686.112 805.253,686.112 805.812,686.112 806.371,686.112 806.931,686.112 807.49,686.112 808.049,686.112 808.608,686.112 809.168,686.112 809.727,686.112 810.286,686.112 810.845,686.112 811.405,686.112 811.964,686.112 812.523,686.112 813.082,686.112 813.642,686.112 814.201,686.112 814.76,686.112 815.319,686.112 815.879,686.112 816.438,686.112 816.997,686.112 817.556,686.112 818.116,686.112 818.675,686.112 819.234,686.112 819.793,686.112 820.353,686.112 820.912,686.112 821.471,686.112 822.03,686.112 822.59,686.112 823.149,686.112 823.708,686.112 824.267,686.112 824.827,686.112 825.386,686.112 825.945,686.112 826.504,686.112 827.064,686.112 827.623,686.112 828.182,686.112 828.741,686.112 829.301,686.112 829.86,686.112 830.419,686.112 830.978,686.112 831.538,686.112 832.097,686.112 832.656,686.112 833.215,686.112 833.775,686.112 834.334,686.112 834.893,686.112 835.452,686.112 836.012,686.112 836.571,686.112 837.13,686.112 837.689,686.112 838.249,686.112 838.808,686.112 839.367,686.112 839.926,686.112 840.486,686.112 841.045,686.112 841.604,686.112 842.163,686.112 842.723,686.112 843.282,686.112 843.841,686.112 844.4,686.112 844.96,686.112 845.519,686.112 846.078,686.112 846.637,686.112 847.197,686.112 847.756,686.112 848.315,686.112 848.874,686.112 849.434,686.112 849.993,686.112 850.552,686.112 851.111,686.112 851.671,686.112 852.23,686.112 852.789,686.112 853.348,686.112 853.908,686.112 854.467,686.112 855.026,686.112 855.585,686.112 856.145,686.112 856.704,686.112 857.263,686.112 857.822,686.112 858.382,686.112 858.941,686.112 859.5,686.112 860.059,686.112 860.619,686.112 861.178,686.112 861.737,686.112 862.296,686.112 862.856,686.112 863.415,686.112 863.974,686.112 864.533,686.112 865.093,686.112 865.652,686.112 866.211,686.112 866.77,686.112 867.33,686.112 867.889,686.112 868.448,686.112 869.007,686.112 869.567,686.112 870.126,686.112 870.685,686.112 871.244,686.112 871.804,686.112 872.363,686.112 872.922,686.112 873.481,686.112 874.041,686.112 874.6,686.112 875.159,686.112 875.718,686.112 876.278,686.112 876.837,686.112 877.396,686.112 877.955,686.112 878.515,686.112 879.074,686.112 879.633,686.112 880.192,686.112 880.752,686.112 881.311,686.112 881.87,686.112 882.429,686.112 882.989,686.112 883.548,686.112 884.107,686.112 884.666,686.112 885.226,686.112 885.785,686.112 886.344,686.112 886.903,686.112 887.463,686.112 888.022,686.112 888.581,686.112 889.14,686.112 889.7,686.112 890.259,686.112 890.818,686.112 891.377,686.112 891.937,686.112 892.496,686.112 893.055,686.112 893.614,686.112 894.174,686.112 894.733,686.112 895.292,686.112 895.851,686.112 896.411,686.112 896.97,686.112 897.529,686.112 898.088,686.112 898.648,686.112 899.207,686.112 899.766,686.112 900.325,686.112 900.885,686.112 901.444,686.112 902.003,686.112 902.562,686.112 903.122,686.112 903.681,686.112 904.24,686.112 904.799,686.112 905.359,686.112 905.918,686.112 906.477,686.112 907.036,686.112 907.596,686.112 908.155,686.112 908.714,686.112 909.273,686.112 909.833,686.112 910.392,686.112 910.951,686.112 911.51,686.112 912.07,686.112 912.629,686.112 913.188,686.112 913.747,686.112 914.307,686.112 914.866,686.112 915.425,686.112 915.984,686.112 916.544,686.112 917.103,686.112 917.662,686.112 918.221,686.112 918.781,686.112 919.34,686.112 919.899,686.112 920.458,686.112 921.018,686.112 921.577,686.112 922.136,686.112 922.695,686.112 923.255,686.112 923.814,686.112 924.373,686.112 924.932,686.112 925.492,686.112 926.051,686.112 926.61,686.112 927.169,686.112 927.729,686.112 928.288,686.112 928.847,686.112 929.406,686.112 929.966,686.112 930.525,686.112 931.084,686.112 931.644,686.112 932.203,686.112 932.762,686.112 933.321,686.112 933.881,686.112 934.44,686.112 934.999,686.112 935.558,686.112 936.118,686.112 936.677,686.112 937.236,686.112 937.795,686.112 938.355,686.112 938.914,686.112 939.473,686.112 940.032,686.112 940.592,686.112 941.151,686.112 941.71,686.112 942.269,686.112 942.829,686.112 943.388,686.112 943.947,686.112 944.506,686.112 945.066,686.112 945.625,686.112 946.184,686.112 946.743,686.112 947.303,686.112 947.862,686.112 948.421,686.112 948.98,686.112 949.54,686.112 950.099,686.112 950.658,686.112 951.217,686.112 951.777,686.112 952.336,686.112 952.895,686.112 953.454,686.112 954.014,686.112 954.573,686.112 955.132,686.112 955.691,686.112 956.251,686.112 956.81,686.112 957.369,686.112 957.928,686.112 958.488,686.112 959.047,686.112 959.606,686.112 960.165,686.112 960.725,686.112 961.284,686.112 961.843,686.112 962.402,686.112 962.962,686.112 963.521,686.112 964.08,686.112 964.639,686.112 965.199,686.112 965.758,686.112 966.317,686.112 966.876,686.112 967.436,686.112 967.995,686.112 968.554,686.112 969.113,686.112 969.673,686.112 970.232,686.112 970.791,686.112 971.35,686.112 971.91,686.112 972.469,686.112 973.028,686.112 973.587,686.112 974.147,686.112 974.706,686.112 975.265,686.112 975.824,686.112 976.384,686.112 976.943,686.112 977.502,686.112 978.061,686.112 978.621,686.112 979.18,686.112 979.739,686.112 980.298,686.112 980.858,686.112 981.417,686.112 981.976,686.112 982.535,686.112 983.095,686.112 983.654,686.112 984.213,686.112 984.772,686.112 985.332,686.112 985.891,686.112 986.45,686.112 987.009,686.112 987.569,686.112 988.128,686.112 988.687,686.112 989.246,686.112 989.806,686.112 990.365,686.112 990.924,686.112 991.483,686.112 992.043,686.112 992.602,686.112 993.161,686.112 993.72,686.112 994.28,686.112 994.839,686.112 995.398,686.112 995.957,686.112 996.517,686.112 997.076,686.112 997.635,686.112 998.194,686.112 998.754,686.112 999.313,686.112 999.872,686.112 1000.43,686.112 1000.99,686.112 1001.55,686.112 1002.11,686.112 1002.67,686.112 1003.23,686.112 1003.79,686.112 1004.35,686.112 1004.91,686.112 1005.46,686.112 1006.02,686.112 1006.58,686.112 1007.14,686.112 1007.7,686.112 1008.26,686.112 1008.82,686.112 1009.38,686.112 1009.94,686.112 1010.5,686.112 1011.06,686.112 1011.62,686.112 1012.18,686.112 1012.73,686.112 1013.29,686.112 1013.85,686.112 1014.41,686.112 1014.97,686.112 1015.53,686.112 1016.09,686.112 1016.65,686.112 1017.21,686.112 1017.77,686.112 1018.33,686.112 1018.89,686.112 1019.45,686.112 1020.01,686.112 1020.56,686.112 1021.12,686.112 1021.68,686.112 1022.24,686.112 1022.8,686.112 1023.36,686.112 1023.92,686.112 1024.48,686.112 1025.04,686.112 1025.6,686.112 1026.16,686.112 1026.72,686.112 1027.28,686.112 1027.83,686.112 1028.39,686.112 1028.95,686.112 1029.51,686.112 1030.07,686.112 1030.63,686.112 1031.19,686.112 1031.75,686.112 1032.31,686.112 1032.87,686.112 1033.43,686.112 1033.99,686.112 1034.55,686.112 1035.1,686.112 1035.66,686.112 1036.22,686.112 1036.78,686.112 1037.34,686.112 1037.9,686.112 1038.46,686.112 1039.02,686.112 1039.58,686.112 1040.14,686.112 1040.7,686.112 1041.26,686.112 1041.82,686.112 1042.38,686.112 1042.93,686.112 1043.49,686.112 1044.05,686.112 1044.61,686.112 1045.17,686.112 1045.73,686.112 1046.29,686.112 1046.85,686.112 1047.41,686.112 1047.97,686.112 1048.53,686.112 1049.09,686.112 1049.65,686.112 1050.2,686.112 1050.76,686.112 1051.32,686.112 1051.88,686.112 1052.44,686.112 1053,686.112 1053.56,686.112 1054.12,686.112 1054.68,686.112 1055.24,686.112 1055.8,686.112 1056.36,686.112 1056.92,686.112 1057.48,686.112 1058.03,686.112 1058.59,686.112 1059.15,686.112 1059.71,686.112 1060.27,686.112 1060.83,686.112 1061.39,686.112 1061.95,686.112 1062.51,686.112 1063.07,686.112 1063.63,686.112 1064.19,686.112 1064.75,686.112 1065.3,686.112 1065.86,686.112 1066.42,686.112 1066.98,686.112 1067.54,686.112 1068.1,686.112 1068.66,686.112 1069.22,686.112 1069.78,686.112 1070.34,686.112 1070.9,686.112 1071.46,686.112 1072.02,686.112 1072.57,686.112 1073.13,686.112 1073.69,686.112 1074.25,686.112 1074.81,686.112 1075.37,686.112 1075.93,686.112 1076.49,686.112 1077.05,686.112 1077.61,686.112 1078.17,686.112 1078.73,686.112 1079.29,686.112 1079.85,686.112 1080.4,686.112 1080.96,686.112 1081.52,686.112 1082.08,686.112 1082.64,686.112 1083.2,686.112 1083.76,686.112 1084.32,686.112 1084.88,686.112 1085.44,686.112 1086,686.112 1086.56,686.112 1087.12,686.112 1087.67,686.112 1088.23,686.112 1088.79,686.112 1089.35,686.112 1089.91,686.112 1090.47,686.112 1091.03,686.112 1091.59,686.112 1092.15,686.112 1092.71,686.112 1093.27,686.112 1093.83,686.112 1094.39,686.112 1094.94,686.112 1095.5,686.112 1096.06,686.112 1096.62,686.112 1097.18,686.112 1097.74,686.112 1098.3,686.112 1098.86,686.112 1099.42,686.112 1099.98,686.112 1100.54,686.112 1101.1,686.112 1101.66,686.112 1102.22,686.112 1102.77,686.112 1103.33,686.112 1103.89,686.112 1104.45,686.112 1105.01,686.112 1105.57,686.112 1106.13,686.112 1106.69,686.112 1107.25,686.112 1107.81,686.112 1108.37,686.112 1108.93,686.112 1109.49,686.112 1110.04,686.112 1110.6,686.112 1111.16,686.112 1111.72,686.112 1112.28,686.112 1112.84,686.112 1113.4,686.112 1113.96,686.112 1114.52,686.112 1115.08,686.112 1115.64,686.112 1116.2,686.112 1116.76,686.112 1117.31,686.112 1117.87,686.112 1118.43,686.112 1118.99,686.112 1119.55,686.112 1120.11,686.112 1120.67,686.112 1121.23,686.112 1121.79,686.112 1122.35,686.112 1122.91,686.112 1123.47,686.112 1124.03,686.112 1124.59,686.112 1125.14,686.112 1125.7,686.112 1126.26,686.112 1126.82,686.112 1127.38,686.112 1127.94,686.112 1128.5,686.112 1129.06,686.112 1129.62,686.112 1130.18,686.112 1130.74,686.112 1131.3,686.112 1131.86,686.112 1132.41,686.112 1132.97,686.112 1133.53,686.112 1134.09,686.112 1134.65,686.112 1135.21,686.112 1135.77,686.112 1136.33,686.112 1136.89,686.112 1137.45,686.112 1138.01,686.112 1138.57,686.112 1139.13,686.112 1139.68,686.112 1140.24,686.112 1140.8,686.112 1141.36,686.112 1141.92,686.112 1142.48,686.112 1143.04,686.112 1143.6,686.112 1144.16,686.112 1144.72,686.112 1145.28,686.112 1145.84,686.112 1146.4,686.112 1146.96,686.112 1147.51,686.112 1148.07,686.112 1148.63,686.112 1149.19,686.112 1149.75,686.112 1150.31,686.112 1150.87,686.112 1151.43,686.112 1151.99,686.112 1152.55,686.112 1153.11,686.112 1153.67,686.112 1154.23,686.112 1154.78,686.112 1155.34,686.112 1155.9,686.112 1156.46,686.112 1157.02,686.112 1157.58,686.112 1158.14,686.112 1158.7,686.112 1159.26,686.112 1159.82,686.112 1160.38,686.112 1160.94,686.112 1161.5,686.112 1162.05,686.112 1162.61,686.112 1163.17,686.112 1163.73,686.112 1164.29,686.112 1164.85,686.112 1165.41,686.112 1165.97,686.112 1166.53,686.112 1167.09,686.112 1167.65,686.112 1168.21,686.112 1168.77,686.112 1169.33,686.112 1169.88,686.112 1170.44,686.112 1171,686.112 1171.56,686.112 1172.12,686.112 1172.68,686.112 1173.24,686.112 1173.8,686.112 1174.36,686.112 1174.92,686.112 1175.48,686.112 1176.04,686.112 1176.6,686.112 1177.15,686.112 1177.71,686.112 1178.27,686.112 1178.83,686.112 1179.39,686.112 1179.95,686.112 1180.51,686.112 1181.07,686.112 1181.63,686.112 1182.19,686.112 1182.75,686.112 1183.31,686.112 1183.87,686.112 1184.43,686.112 1184.98,686.112 1185.54,686.112 1186.1,686.112 1186.66,686.112 1187.22,686.112 1187.78,686.112 1188.34,686.112 1188.9,686.112 1189.46,686.112 1190.02,686.112 1190.58,686.112 1191.14,686.112 1191.7,686.112 1192.25,686.112 1192.81,686.112 1193.37,686.112 1193.93,686.112 1194.49,686.112 1195.05,686.112 1195.61,686.112 1196.17,686.112 1196.73,686.112 1197.29,686.112 1197.85,686.112 1198.41,686.112 1198.97,686.112 1199.52,686.112 1200.08,686.112 1200.64,686.112 1201.2,686.112 1201.76,686.112 1202.32,686.112 1202.88,686.112 1203.44,686.112 1204,686.112 1204.56,686.112 1205.12,686.112 1205.68,686.112 1206.24,686.112 1206.8,686.112 1207.35,686.112 1207.91,686.112 1208.47,686.112 1209.03,686.112 1209.59,686.112 1210.15,686.112 1210.71,686.112 1211.27,686.112 1211.83,686.112 1212.39,686.112 1212.95,686.112 1213.51,686.112 1214.07,686.112 1214.62,686.112 1215.18,686.112 1215.74,686.112 1216.3,686.112 1216.86,686.112 1217.42,686.112 1217.98,686.112 1218.54,686.112 1219.1,686.112 1219.66,686.112 1220.22,686.112 1220.78,686.112 1221.34,686.112 1221.89,686.112 1222.45,686.112 1223.01,686.112 1223.57,686.112 1224.13,686.112 1224.69,686.112 1225.25,686.112 1225.81,686.112 1226.37,686.112 1226.93,686.112 1227.49,686.112 1228.05,686.112 1228.61,686.112 1229.17,686.112 1229.72,686.112 1230.28,686.112 1230.84,686.112 1231.4,686.112 1231.96,686.112 1232.52,686.112 1233.08,686.112 1233.64,686.112 1234.2,686.112 1234.76,686.112 1235.32,686.112 1235.88,686.112 1236.44,686.112 1236.99,686.112 1237.55,686.112 1238.11,686.112 1238.67,686.112 1239.23,686.112 1239.79,686.112 1240.35,686.112 1240.91,686.112 1241.47,686.112 1242.03,686.112 1242.59,686.112 1243.15,686.112 1243.71,686.112 1244.26,686.112 1244.82,686.112 1245.38,686.112 1245.94,686.112 1246.5,686.112 1247.06,686.112 1247.62,686.112 1248.18,686.112 1248.74,686.112 1249.3,686.112 1249.86,686.112 1250.42,686.112 1250.98,686.112 1251.54,686.112 1252.09,686.112 1252.65,686.112 1253.21,686.112 1253.77,686.112 1254.33,686.112 1254.89,686.112 1255.45,686.112 1256.01,686.112 1256.57,686.112 1257.13,686.112 1257.69,686.112 1258.25,686.112 1258.81,686.112 1259.36,686.112 1259.92,686.112 1260.48,686.112 1261.04,686.112 1261.6,686.112 1262.16,686.112 1262.72,686.112 1263.28,686.112 1263.84,686.112 1264.4,686.112 1264.96,686.112 1265.52,686.112 1266.08,686.112 1266.63,686.112 1267.19,686.112 1267.75,686.112 1268.31,686.112 1268.87,686.112 1269.43,686.112 1269.99,686.112 1270.55,686.112 1271.11,686.112 1271.67,686.112 1272.23,686.112 1272.79,686.112 1273.35,686.112 1273.91,686.112 1274.46,686.112 1275.02,686.112 1275.58,686.112 1276.14,686.112 1276.7,686.112 1277.26,686.112 1277.82,686.112 1278.38,686.112 1278.94,686.112 1279.5,686.112 1280.06,686.112 1280.62,686.112 1281.18,686.112 1281.73,686.112 1282.29,686.112 1282.85,686.112 1283.41,686.112 1283.97,686.112 1284.53,686.112 1285.09,686.112 1285.65,686.112 1286.21,686.112 1286.77,686.112 1287.33,686.112 1287.89,686.112 1288.45,686.112 1289,686.112 1289.56,686.112 1290.12,686.112 1290.68,686.112 1291.24,686.112 1291.8,686.112 1292.36,686.112 1292.92,686.112 1293.48,686.112 1294.04,686.112 1294.6,686.112 1295.16,686.112 1295.72,686.112 1296.28,686.112 1296.83,686.112 1297.39,686.112 1297.95,686.112 1298.51,686.112 1299.07,686.112 1299.63,686.112 1300.19,686.112 1300.75,686.112 1301.31,686.112 1301.87,686.112 1302.43,686.112 1302.99,686.112 1303.55,686.112 1304.1,686.112 1304.66,686.112 1305.22,686.112 1305.78,686.112 1306.34,686.112 1306.9,686.112 1307.46,686.112 1308.02,686.112 1308.58,686.112 1309.14,686.112 1309.7,686.112 1310.26,686.112 1310.82,686.112 1311.38,686.112 1311.93,686.112 1312.49,686.112 1313.05,686.112 1313.61,686.112 1314.17,686.112 1314.73,686.112 1315.29,686.112 1315.85,686.112 1316.41,686.112 1316.97,686.112 1317.53,686.112 1318.09,686.112 1318.65,686.112 1319.2,686.112 1319.76,686.112 1320.32,686.112 1320.88,686.112 1321.44,686.112 1322,686.112 1322.56,686.112 1323.12,686.112 1323.68,686.112 1324.24,686.112 1324.8,686.112 1325.36,686.112 1325.92,686.112 1326.47,686.112 1327.03,686.112 1327.59,686.112 1328.15,686.112 1328.71,686.112 1329.27,686.112 1329.83,686.112 1330.39,686.112 1330.95,686.112 1331.51,686.112 1332.07,686.112 1332.63,686.112 1333.19,686.112 1333.75,686.112 1334.3,686.112 1334.86,686.112 1335.42,686.112 1335.98,686.112 1336.54,686.112 1337.1,686.112 1337.66,686.112 1338.22,686.112 1338.78,686.112 1339.34,686.112 1339.9,686.112 1340.46,686.112 1341.02,686.112 1341.57,686.112 1342.13,686.112 1342.69,686.112 1343.25,686.112 1343.81,686.112 1344.37,686.112 1344.93,686.112 1345.49,686.112 1346.05,686.112 1346.61,686.112 1347.17,686.112 1347.73,686.112 1348.29,686.112 1348.84,686.112 1349.4,686.112 1349.96,686.112 1350.52,686.112 1351.08,686.112 1351.64,686.112 1352.2,686.112 1352.76,686.112 1353.32,686.112 1353.88,686.112 1354.44,686.112 1355,686.112 1355.56,686.112 1356.12,686.112 1356.67,686.112 1357.23,686.112 1357.79,686.112 1358.35,686.112 1358.91,686.112 1359.47,686.112 1360.03,686.112 1360.59,686.112 1361.15,686.112 1361.71,686.112 1362.27,686.112 1362.83,686.112 1363.39,686.112 1363.94,686.112 1364.5,686.112 1365.06,686.112 1365.62,686.112 1366.18,686.112 1366.74,686.112 1367.3,686.112 1367.86,686.112 1368.42,686.112 1368.98,686.112 1369.54,686.112 1370.1,686.112 1370.66,686.112 1371.21,686.112 1371.77,686.112 1372.33,686.112 1372.89,686.112 1373.45,686.112 1374.01,686.112 1374.57,686.112 1375.13,686.112 1375.69,686.112 1376.25,686.112 1376.81,686.112 1377.37,686.112 1377.93,686.112 1378.49,686.112 1379.04,686.112 1379.6,686.112 1380.16,686.112 1380.72,686.112 1381.28,686.112 1381.84,686.112 1382.4,686.112 1382.96,686.112 1383.52,686.112 1384.08,686.112 1384.64,686.112 1385.2,686.112 1385.76,686.112 1386.31,686.112 1386.87,686.112 1387.43,686.112 1387.99,686.112 1388.55,686.112 1389.11,686.112 1389.67,686.112 1390.23,686.112 1390.79,686.112 1391.35,686.112 1391.91,686.112 1392.47,686.112 1393.03,686.112 1393.58,686.112 1394.14,686.112 1394.7,686.112 1395.26,686.112 1395.82,686.112 1396.38,686.112 1396.94,686.112 1397.5,686.112 1398.06,686.112 1398.62,686.112 1399.18,686.112 1399.74,686.112 1400.3,686.112 1400.86,686.112 1401.41,686.112 1401.97,686.112 1402.53,686.112 1403.09,686.112 1403.65,686.112 1404.21,686.112 1404.77,686.112 1405.33,686.112 1405.89,686.112 1406.45,686.112 1407.01,686.112 1407.57,686.112 1408.13,686.112 1408.68,686.112 1409.24,686.112 1409.8,686.112 1410.36,686.112 1410.92,686.112 1411.48,686.112 1412.04,686.112 1412.6,686.112 1413.16,686.112 1413.72,686.112 1414.28,686.112 1414.84,686.112 1415.4,686.112 1415.95,686.112 1416.51,686.112 1417.07,686.112 1417.63,686.112 1418.19,686.112 1418.75,686.112 1419.31,686.112 1419.87,686.112 1420.43,686.112 1420.99,686.112 1421.55,686.112 1422.11,686.112 1422.67,686.112 1423.23,686.112 1423.78,686.112 1424.34,686.112 1424.9,686.112 1425.46,686.112 1426.02,686.112 1426.58,686.112 1427.14,686.112 1427.7,686.112 1428.26,686.112 1428.82,686.112 1429.38,686.112 1429.94,686.112 1430.5,686.112 1431.05,686.112 1431.61,686.112 1432.17,686.112 1432.73,686.112 1433.29,686.112 1433.85,686.112 1434.41,686.112 1434.97,686.112 1435.53,686.112 1436.09,686.112 1436.65,686.112 1437.21,686.112 1437.77,686.112 1438.33,686.112 1438.88,686.112 1439.44,686.112 1440,686.112 1440.56,686.112 1441.12,686.112 1441.68,686.112 1442.24,686.112 1442.8,686.112 1443.36,686.112 1443.92,686.112 1444.48,686.112 1445.04,686.112 1445.6,686.112 1446.15,686.112 1446.71,686.112 1447.27,686.112 1447.83,686.112 1448.39,686.112 1448.95,686.112 1449.51,686.112 1450.07,686.112 1450.63,686.112 1451.19,686.112 1451.75,686.112 1452.31,686.112 1452.87,686.112 1453.42,686.112 1453.98,686.112 1454.54,686.112 1455.1,686.112 1455.66,686.112 1456.22,686.112 1456.78,686.112 1457.34,686.112 1457.9,686.112 1458.46,686.112 1459.02,686.112 1459.58,686.112 1460.14,686.112 1460.7,686.112 1461.25,686.112 1461.81,686.112 1462.37,686.112 1462.93,686.112 1463.49,686.112 1464.05,686.112 1464.61,686.112 1465.17,686.112 1465.73,686.112 1466.29,686.112 1466.85,686.112 1467.41,686.112 1467.97,686.112 1468.52,686.112 1469.08,686.112 1469.64,686.112 1470.2,686.112 1470.76,686.112 1471.32,686.112 1471.88,686.112 1472.44,686.112 1473,686.112 1473.56,686.112 1474.12,686.112 1474.68,686.112 1475.24,686.112 1475.79,686.112 1476.35,686.112 1476.91,686.112 1477.47,686.112 1478.03,686.112 1478.59,686.112 1479.15,686.112 1479.71,686.112 1480.27,686.112 1480.83,686.112 1481.39,686.112 1481.95,686.112 1482.51,686.112 1483.07,686.112 1483.62,686.112 1484.18,686.112 1484.74,686.112 1485.3,686.112 1485.86,686.112 1486.42,686.112 1486.98,686.112 1487.54,686.112 1488.1,686.112 1488.66,686.112 1489.22,686.112 1489.78,686.112 1490.34,686.112 1490.89,686.112 1491.45,686.112 1492.01,686.112 1492.57,686.112 1493.13,686.112 1493.69,686.112 1494.25,686.112 1494.81,686.112 1495.37,686.112 1495.93,686.112 1496.49,686.112 1497.05,686.112 1497.61,686.112 1498.16,686.112 1498.72,686.112 1499.28,686.112 1499.84,686.112 1500.4,686.112 1500.96,686.112 1501.52,686.112 1502.08,686.112 1502.64,686.112 1503.2,686.112 1503.76,686.112 1504.32,686.112 1504.88,686.112 1505.44,686.112 1505.99,686.112 1506.55,686.112 1507.11,686.112 1507.67,686.112 1508.23,686.112 1508.79,686.112 1509.35,686.112 1509.91,686.112 1510.47,686.112 1511.03,686.112 1511.59,686.112 1512.15,686.112 1512.71,686.112 1513.26,686.112 1513.82,686.112 1514.38,686.112 1514.94,686.112 1515.5,686.112 1516.06,686.112 1516.62,686.112 1517.18,686.112 1517.74,686.112 1518.3,686.112 1518.86,686.112 1519.42,686.112 1519.98,686.112 1520.53,686.112 1521.09,686.112 1521.65,686.112 1522.21,686.112 1522.77,686.112 1523.33,686.112 1523.89,686.112 1524.45,686.112 1525.01,686.112 1525.57,686.112 1526.13,686.112 1526.69,686.112 1527.25,686.112 1527.81,686.112 1528.36,686.112 1528.92,686.112 1529.48,686.112 1530.04,686.112 1530.6,686.112 1531.16,686.112 1531.72,686.112 1532.28,686.112 1532.84,686.112 1533.4,686.112 1533.96,686.112 1534.52,686.112 1535.08,686.112 1535.63,686.112 1536.19,686.112 1536.75,686.112 1537.31,686.112 1537.87,686.112 1538.43,686.112 1538.99,686.112 1539.55,686.112 1540.11,686.112 1540.67,686.112 1541.23,686.112 1541.79,686.112 1542.35,686.112 1542.9,686.112 1543.46,686.112 1544.02,686.112 1544.58,686.112 1545.14,686.112 1545.7,686.112 1546.26,686.112 1546.82,686.112 1547.38,686.112 1547.94,686.112 1548.5,686.112 1549.06,686.112 1549.62,686.112 1550.18,686.112 1550.73,686.112 1551.29,686.112 1551.85,686.112 1552.41,686.112 1552.97,686.112 1553.53,686.112 1554.09,686.112 1554.65,686.112 1555.21,686.112 1555.77,686.112 1556.33,686.112 1556.89,686.112 1557.45,686.112 1558,686.112 1558.56,686.112 1559.12,686.112 1559.68,686.112 1560.24,686.112 1560.8,686.112 1561.36,686.112 1561.92,686.112 1562.48,686.112 1563.04,686.112 1563.6,686.112 1564.16,686.112 1564.72,686.112 1565.28,686.112 1565.83,686.112 1566.39,686.112 1566.95,686.112 1567.51,686.112 1568.07,686.112 1568.63,686.112 1569.19,686.112 1569.75,686.112 1570.31,686.112 1570.87,686.112 1571.43,686.112 1571.99,686.112 1572.55,686.112 1573.1,686.112 1573.66,686.112 1574.22,686.112 1574.78,686.112 1575.34,686.112 1575.9,686.112 1576.46,686.112 1577.02,686.112 1577.58,686.112 1578.14,686.112 1578.7,686.112 1579.26,686.112 1579.82,686.112 1580.37,686.112 1580.93,686.112 1581.49,686.112 1582.05,686.112 1582.61,686.112 1583.17,686.112 1583.73,686.112 1584.29,686.112 1584.85,686.112 1585.41,686.112 1585.97,686.112 1586.53,686.112 1587.09,686.112 1587.65,686.112 1588.2,686.112 1588.76,686.112 1589.32,686.112 1589.88,686.112 1590.44,686.112 1591,686.112 1591.56,686.112 1592.12,686.112 1592.68,686.112 1593.24,686.112 1593.8,686.112 1594.36,686.112 1594.92,686.112 1595.47,686.112 1596.03,686.112 1596.59,686.112 1597.15,686.112 1597.71,686.112 1598.27,686.112 1598.83,686.112 1599.39,686.112 1599.95,686.112 1600.51,686.112 1601.07,686.112 1601.63,686.112 1602.19,686.112 1602.74,686.112 1603.3,686.112 1603.86,686.112 1604.42,686.112 1604.98,686.112 1605.54,686.112 1606.1,686.112 1606.66,686.112 1607.22,686.112 1607.78,686.112 1608.34,686.112 1608.9,686.112 1609.46,686.112 1610.02,686.112 1610.57,686.112 1611.13,686.112 1611.69,686.112 1612.25,686.112 1612.81,686.112 1613.37,686.112 1613.93,686.112 1614.49,686.112 1615.05,686.112 1615.61,686.112 1616.17,686.112 1616.73,686.112 1617.29,686.112 1617.84,686.112 1618.4,686.112 1618.96,686.112 1619.52,686.112 1620.08,686.112 1620.64,686.112 1621.2,686.112 1621.76,686.112 1622.32,686.112 1622.88,686.112 1623.44,686.112 1624,686.112 1624.56,686.112 1625.11,686.112 1625.67,686.112 1626.23,686.112 1626.79,686.112 1627.35,686.112 1627.91,686.112 1628.47,686.112 1629.03,686.112 1629.59,686.112 1630.15,686.112 1630.71,686.112 1631.27,686.112 1631.83,686.112 1632.39,686.112 1632.94,686.112 1633.5,686.112 1634.06,686.112 1634.62,686.112 1635.18,686.112 1635.74,686.112 1636.3,686.112 1636.86,686.112 1637.42,686.112 1637.98,686.112 1638.54,686.112 1639.1,686.112 1639.66,686.112 1640.21,686.112 1640.77,686.112 1641.33,686.112 1641.89,686.112 1642.45,686.112 1643.01,686.112 1643.57,686.112 1644.13,686.112 1644.69,686.112 1645.25,686.112 1645.81,686.112 1646.37,686.112 1646.93,686.112 1647.48,686.112 1648.04,686.112 1648.6,686.112 1649.16,686.112 1649.72,686.112 1650.28,686.112 1650.84,686.112 1651.4,686.112 1651.96,686.112 1652.52,686.112 1653.08,686.112 1653.64,686.112 1654.2,686.112 1654.76,686.112 1655.31,686.112 1655.87,686.112 1656.43,686.112 1656.99,686.112 1657.55,686.112 1658.11,686.112 1658.67,686.112 1659.23,686.112 1659.79,686.112 1660.35,686.112 1660.91,686.112 1661.47,686.112 1662.03,686.112 1662.58,686.112 1663.14,686.112 1663.7,686.112 1664.26,686.112 1664.82,686.112 1665.38,686.112 1665.94,686.112 1666.5,686.112 1667.06,686.112 1667.62,686.112 1668.18,686.112 1668.74,686.112 1669.3,686.112 1669.85,686.112 1670.41,686.112 1670.97,686.112 1671.53,686.112 1672.09,686.112 1672.65,686.112 1673.21,686.112 1673.77,686.112 1674.33,686.112 1674.89,686.112 1675.45,686.112 1676.01,686.112 1676.57,686.112 1677.13,686.112 1677.68,686.112 1678.24,686.112 1678.8,686.112 1679.36,686.112 1679.92,686.112 1680.48,686.112 1681.04,686.112 1681.6,686.112 1682.16,686.112 1682.72,686.112 1683.28,686.112 1683.84,686.112 1684.4,686.112 1684.95,686.112 1685.51,686.112 1686.07,686.112 1686.63,686.112 1687.19,686.112 1687.75,686.112 1688.31,686.112 1688.87,686.112 1689.43,686.112 1689.99,686.112 1690.55,686.112 1691.11,686.112 1691.67,686.112 1692.23,686.112 1692.78,686.112 1693.34,686.112 1693.9,686.112 1694.46,686.112 1695.02,686.112 1695.58,686.112 1696.14,686.112 1696.7,686.112 1697.26,686.112 1697.82,686.112 1698.38,686.112 1698.94,686.112 1699.5,686.112 1700.05,686.112 1700.61,686.112 1701.17,686.112 1701.73,686.112 1702.29,686.112 1702.85,686.112 1703.41,686.112 1703.97,686.112 1704.53,686.112 1705.09,686.112 1705.65,686.112 1706.21,686.112 1706.77,686.112 1707.32,686.112 1707.88,686.112 1708.44,686.112 1709,686.112 1709.56,686.112 1710.12,686.112 1710.68,686.112 1711.24,686.112 1711.8,686.112 1712.36,686.112 1712.92,686.112 1713.48,686.112 1714.04,686.112 1714.6,686.112 1715.15,686.112 1715.71,686.112 1716.27,686.112 1716.83,686.112 1717.39,686.112 1717.95,686.112 1718.51,686.112 1719.07,686.112 1719.63,686.112 1720.19,686.112 1720.75,686.112 1721.31,686.112 1721.87,686.112 1722.42,686.112 1722.98,686.112 1723.54,686.112 1724.1,686.112 1724.66,686.112 1725.22,686.112 1725.78,686.112 1726.34,686.112 1726.9,686.112 1727.46,686.112 1728.02,686.112 1728.58,686.112 1729.14,686.112 1729.69,686.112 1730.25,686.112 1730.81,686.112 1731.37,686.112 1731.93,686.112 1732.49,686.112 1733.05,686.112 1733.61,686.112 1734.17,686.112 1734.73,686.112 1735.29,686.112 1735.85,686.112 1736.41,686.112 1736.97,686.112 1737.52,686.112 1738.08,686.112 1738.64,686.112 1739.2,686.112 1739.76,686.112 1740.32,686.112 1740.88,686.112 1741.44,686.112 1742,686.112 1742.56,686.112 1743.12,686.112 1743.68,686.112 1744.24,686.112 1744.79,686.112 1745.35,686.112 1745.91,686.112 1746.47,686.112 1747.03,686.112 1747.59,686.112 1748.15,686.112 1748.71,686.112 1749.27,686.112 1749.83,686.112 1750.39,686.112 1750.95,686.112 1751.51,686.112 1752.06,686.112 1752.62,686.112 1753.18,686.112 1753.74,686.112 1754.3,686.112 1754.86,686.112 1755.42,686.112 1755.98,686.112 1756.54,686.112 1757.1,686.112 1757.66,686.112 1758.22,686.112 1758.78,686.112 1759.34,686.112 1759.89,686.112 1760.45,686.112 1761.01,686.112 1761.57,686.112 1762.13,686.112 1762.69,686.112 1763.25,686.112 1763.81,686.112 1764.37,686.112 1764.93,686.112 1765.49,686.112 1766.05,686.112 1766.61,686.112 1767.16,686.112 1767.72,686.112 1768.28,686.112 1768.84,686.112 1769.4,686.112 1769.96,686.112 1770.52,686.112 1771.08,686.112 1771.64,686.112 1772.2,686.112 1772.76,686.112 1773.32,686.112 1773.88,686.112 1774.43,686.112 1774.99,686.112 1775.55,686.112 1776.11,686.112 1776.67,686.112 1777.23,686.112 1777.79,686.112 1778.35,686.112 1778.91,686.112 1779.47,686.112 1780.03,686.112 1780.59,686.112 1781.15,686.112 1781.71,686.112 1782.26,686.112 1782.82,686.112 1783.38,686.112 1783.94,686.112 1784.5,686.112 1785.06,686.112 1785.62,686.112 1786.18,686.112 1786.74,686.112 1787.3,686.112 1787.86,686.112 1788.42,686.112 1788.98,686.112 1789.53,686.112 1790.09,686.112 1790.65,686.112 1791.21,686.112 1791.77,686.112 1792.33,686.112 1792.89,686.112 1793.45,686.112 1794.01,686.112 1794.57,686.112 1795.13,686.112 1795.69,686.112 1796.25,686.112 1796.8,686.112 1797.36,686.112 1797.92,686.112 1798.48,686.112 1799.04,686.112 1799.6,686.112 1800.16,686.112 1800.72,686.112 1801.28,686.112 1801.84,686.112 1802.4,686.112 1802.96,686.112 1803.52,686.112 1804.08,686.112 1804.63,686.112 1805.19,686.112 1805.75,686.112 1806.31,686.112 1806.87,686.112 1807.43,686.112 1807.99,686.112 1808.55,686.112 1809.11,686.112 1809.67,686.112 1810.23,686.112 1810.79,686.112 1811.35,686.112 1811.9,686.112 1812.46,686.112 1813.02,686.112 1813.58,686.112 1814.14,686.112 1814.7,686.112 1815.26,686.112 1815.82,686.112 1816.38,686.112 1816.94,686.112 1817.5,686.112 1818.06,686.112 1818.62,686.112 1819.18,686.112 1819.73,686.112 1820.29,686.112 1820.85,686.112 1821.41,686.112 1821.97,686.112 1822.53,686.112 1823.09,686.112 1823.65,686.112 1824.21,686.112 1824.77,686.112 1825.33,686.112 1825.89,686.112 1826.45,686.112 1827,686.112 1827.56,686.112 1828.12,686.112 1828.68,686.112 1829.24,686.112 1829.8,686.112 1830.36,686.112 1830.92,686.112 1831.48,686.112 1832.04,686.112 1832.6,686.112 1833.16,686.112 1833.72,686.112 1834.27,686.112 1834.83,686.112 1835.39,686.112 1835.95,686.112 1836.51,686.112 1837.07,686.112 1837.63,686.112 1838.19,686.112 \"/>\n<path clip-path=\"url(#clip083)\" d=\"M720.247 684.084 L720.806 684.084 L721.365 684.084 L721.924 684.084 L722.484 684.084 L723.043 684.084 L723.602 684.084 L724.161 684.084 L724.721 684.084 L725.28 684.084 L725.839 684.084 L726.398 684.084 L726.958 684.084 L727.517 684.084 L728.076 684.084 L728.635 684.084 L729.195 684.084 L729.754 684.084 L730.313 684.084 L730.872 684.084 L731.432 684.084 L731.991 684.084 L732.55 684.084 L733.109 684.084 L733.669 684.084 L734.228 684.084 L734.787 684.084 L735.346 684.084 L735.906 684.084 L736.465 684.084 L737.024 684.084 L737.583 684.084 L738.143 684.084 L738.702 684.084 L739.261 684.084 L739.82 684.084 L740.38 684.084 L740.939 684.084 L741.498 684.084 L742.057 684.084 L742.617 684.084 L743.176 684.084 L743.735 684.084 L744.294 684.084 L744.854 684.084 L745.413 684.084 L745.972 684.084 L746.531 684.084 L747.091 684.084 L747.65 684.084 L748.209 684.084 L748.768 684.084 L749.328 684.084 L749.887 684.084 L750.446 684.084 L751.005 684.084 L751.565 684.084 L752.124 684.084 L752.683 684.084 L753.242 684.084 L753.802 684.084 L754.361 684.084 L754.92 684.084 L755.479 684.084 L756.039 684.084 L756.598 684.084 L757.157 684.084 L757.716 684.084 L758.276 684.084 L758.835 684.084 L759.394 684.084 L759.953 684.084 L760.513 684.084 L761.072 684.084 L761.631 684.084 L762.19 684.084 L762.75 684.084 L763.309 684.084 L763.868 684.084 L764.427 684.084 L764.987 684.084 L765.546 684.084 L766.105 684.084 L766.664 684.084 L767.224 684.084 L767.783 684.084 L768.342 684.084 L768.901 684.084 L769.461 684.084 L770.02 684.084 L770.579 684.084 L771.138 684.084 L771.698 684.084 L772.257 684.084 L772.816 684.084 L773.375 684.084 L773.935 684.084 L774.494 684.084 L775.053 684.084 L775.612 684.084 L776.172 684.084 L776.731 684.084 L777.29 684.084 L777.849 684.084 L778.409 684.084 L778.968 684.084 L779.527 684.084 L780.086 684.084 L780.646 684.084 L781.205 684.084 L781.764 684.084 L782.323 684.084 L782.883 684.084 L783.442 684.084 L784.001 684.084 L784.56 684.084 L785.12 684.084 L785.679 684.084 L786.238 684.084 L786.797 684.084 L787.357 684.084 L787.916 684.084 L788.475 684.084 L789.034 684.084 L789.594 684.084 L790.153 684.084 L790.712 684.084 L791.271 684.084 L791.831 684.084 L792.39 684.084 L792.949 684.084 L793.508 684.084 L794.068 684.084 L794.627 684.084 L795.186 684.084 L795.745 684.084 L796.305 684.084 L796.864 684.084 L797.423 684.084 L797.982 684.084 L798.542 684.084 L799.101 684.084 L799.66 684.084 L800.219 684.084 L800.779 684.084 L801.338 684.084 L801.897 684.084 L802.456 684.084 L803.016 684.084 L803.575 684.084 L804.134 684.084 L804.693 684.084 L805.253 684.084 L805.812 684.084 L806.371 684.084 L806.931 684.084 L807.49 684.084 L808.049 684.084 L808.608 684.084 L809.168 684.084 L809.727 684.084 L810.286 684.084 L810.845 684.084 L811.405 684.084 L811.964 684.084 L812.523 684.084 L813.082 684.084 L813.642 684.084 L814.201 684.084 L814.76 684.084 L815.319 684.084 L815.879 684.084 L816.438 684.084 L816.997 684.084 L817.556 684.084 L818.116 684.084 L818.675 684.084 L819.234 684.084 L819.793 684.084 L820.353 684.084 L820.912 684.084 L821.471 684.084 L822.03 684.084 L822.59 684.084 L823.149 684.084 L823.708 684.084 L824.267 684.084 L824.827 684.084 L825.386 684.084 L825.945 684.084 L826.504 684.084 L827.064 684.084 L827.623 684.084 L828.182 684.084 L828.741 684.084 L829.301 684.084 L829.86 684.084 L830.419 684.084 L830.978 684.084 L831.538 684.084 L832.097 684.084 L832.656 684.084 L833.215 684.084 L833.775 684.084 L834.334 684.084 L834.893 684.084 L835.452 684.084 L836.012 684.084 L836.571 684.084 L837.13 684.084 L837.689 684.084 L838.249 684.084 L838.808 684.084 L839.367 684.084 L839.926 684.084 L840.486 684.084 L841.045 684.084 L841.604 684.084 L842.163 684.084 L842.723 684.084 L843.282 684.084 L843.841 684.084 L844.4 684.084 L844.96 684.084 L845.519 684.084 L846.078 684.084 L846.637 684.084 L847.197 684.084 L847.756 684.084 L848.315 684.084 L848.874 684.084 L849.434 684.084 L849.993 684.084 L850.552 684.084 L851.111 684.084 L851.671 684.084 L852.23 684.084 L852.789 684.084 L853.348 684.084 L853.908 684.084 L854.467 684.084 L855.026 684.084 L855.585 684.084 L856.145 684.084 L856.704 684.084 L857.263 684.084 L857.822 684.084 L858.382 684.084 L858.941 684.084 L859.5 684.084 L860.059 684.084 L860.619 684.084 L861.178 684.084 L861.737 684.084 L862.296 684.084 L862.856 684.084 L863.415 684.084 L863.974 684.084 L864.533 684.084 L865.093 684.084 L865.652 684.084 L866.211 684.084 L866.77 684.084 L867.33 684.084 L867.889 684.084 L868.448 684.084 L869.007 684.084 L869.567 684.084 L870.126 684.084 L870.685 684.084 L871.244 684.084 L871.804 684.084 L872.363 684.084 L872.922 684.084 L873.481 684.084 L874.041 684.084 L874.6 684.084 L875.159 684.084 L875.718 684.084 L876.278 684.084 L876.837 684.084 L877.396 684.084 L877.955 684.084 L878.515 684.084 L879.074 684.084 L879.633 684.084 L880.192 684.084 L880.752 684.084 L881.311 684.084 L881.87 684.084 L882.429 684.084 L882.989 684.084 L883.548 684.084 L884.107 684.084 L884.666 684.084 L885.226 684.084 L885.785 684.084 L886.344 684.084 L886.903 684.084 L887.463 684.084 L888.022 684.084 L888.581 684.084 L889.14 684.084 L889.7 684.084 L890.259 684.084 L890.818 684.084 L891.377 684.084 L891.937 684.084 L892.496 684.084 L893.055 684.084 L893.614 684.084 L894.174 684.084 L894.733 684.084 L895.292 684.084 L895.851 684.084 L896.411 684.084 L896.97 684.084 L897.529 684.084 L898.088 684.084 L898.648 684.084 L899.207 684.084 L899.766 684.084 L900.325 684.084 L900.885 684.084 L901.444 684.084 L902.003 684.084 L902.562 684.084 L903.122 684.084 L903.681 684.084 L904.24 684.084 L904.799 684.084 L905.359 684.084 L905.918 684.084 L906.477 684.084 L907.036 684.084 L907.596 684.084 L908.155 684.084 L908.714 684.084 L909.273 684.084 L909.833 684.084 L910.392 684.084 L910.951 684.084 L911.51 684.084 L912.07 684.084 L912.629 684.084 L913.188 684.084 L913.747 684.084 L914.307 684.084 L914.866 684.084 L915.425 684.084 L915.984 684.084 L916.544 684.084 L917.103 684.084 L917.662 684.084 L918.221 684.084 L918.781 684.084 L919.34 684.084 L919.899 684.084 L920.458 684.084 L921.018 684.084 L921.577 684.084 L922.136 684.084 L922.695 684.084 L923.255 684.084 L923.814 684.084 L924.373 684.084 L924.932 684.084 L925.492 684.084 L926.051 684.084 L926.61 684.084 L927.169 684.084 L927.729 684.084 L928.288 684.084 L928.847 684.084 L929.406 684.084 L929.966 684.084 L930.525 684.084 L931.084 684.084 L931.644 684.084 L932.203 684.084 L932.762 684.084 L933.321 684.084 L933.881 684.084 L934.44 684.084 L934.999 684.084 L935.558 684.084 L936.118 684.084 L936.677 684.084 L937.236 684.084 L937.795 684.084 L938.355 684.084 L938.914 684.084 L939.473 684.084 L940.032 684.084 L940.592 684.084 L941.151 684.084 L941.71 684.084 L942.269 684.084 L942.829 684.084 L943.388 684.084 L943.947 684.084 L944.506 684.084 L945.066 684.084 L945.625 684.084 L946.184 684.084 L946.743 684.084 L947.303 684.084 L947.862 684.084 L948.421 684.084 L948.98 684.084 L949.54 684.084 L950.099 684.084 L950.658 684.084 L951.217 684.084 L951.777 684.084 L952.336 684.084 L952.895 684.084 L953.454 684.084 L954.014 684.084 L954.573 684.084 L955.132 684.084 L955.691 684.084 L956.251 684.084 L956.81 684.084 L957.369 684.084 L957.928 684.084 L958.488 684.084 L959.047 684.084 L959.606 684.084 L960.165 684.084 L960.725 684.084 L961.284 684.084 L961.843 684.084 L962.402 684.084 L962.962 684.084 L963.521 684.084 L964.08 684.084 L964.639 684.084 L965.199 684.084 L965.758 684.084 L966.317 684.084 L966.876 684.084 L967.436 684.084 L967.995 684.084 L968.554 684.084 L969.113 684.084 L969.673 684.084 L970.232 684.084 L970.791 684.084 L971.35 684.084 L971.91 684.084 L972.469 684.084 L973.028 684.084 L973.587 684.084 L974.147 684.084 L974.706 684.084 L975.265 684.084 L975.824 684.084 L976.384 684.084 L976.943 684.084 L977.502 684.084 L978.061 684.084 L978.621 684.084 L979.18 684.084 L979.739 684.084 L980.298 684.084 L980.858 684.084 L981.417 684.084 L981.976 684.084 L982.535 684.084 L983.095 684.084 L983.654 684.084 L984.213 684.084 L984.772 684.084 L985.332 684.084 L985.891 684.084 L986.45 684.084 L987.009 684.084 L987.569 684.084 L988.128 684.084 L988.687 684.084 L989.246 684.084 L989.806 684.084 L990.365 684.084 L990.924 684.084 L991.483 684.084 L992.043 684.084 L992.602 684.084 L993.161 684.084 L993.72 684.084 L994.28 684.084 L994.839 684.084 L995.398 684.084 L995.957 684.084 L996.517 684.084 L997.076 684.084 L997.635 684.084 L998.194 684.084 L998.754 684.084 L999.313 684.084 L999.872 684.084 L1000.43 684.084 L1000.99 684.084 L1001.55 684.084 L1002.11 684.084 L1002.67 684.084 L1003.23 684.084 L1003.79 684.084 L1004.35 684.084 L1004.91 684.084 L1005.46 684.084 L1006.02 684.084 L1006.58 684.084 L1007.14 684.084 L1007.7 684.084 L1008.26 684.084 L1008.82 684.084 L1009.38 684.084 L1009.94 684.084 L1010.5 684.084 L1011.06 684.084 L1011.62 684.084 L1012.18 684.084 L1012.73 684.084 L1013.29 684.084 L1013.85 684.084 L1014.41 684.084 L1014.97 684.084 L1015.53 684.084 L1016.09 684.084 L1016.65 684.084 L1017.21 684.084 L1017.77 684.084 L1018.33 684.084 L1018.89 684.084 L1019.45 684.084 L1020.01 684.084 L1020.56 684.084 L1021.12 684.084 L1021.68 684.084 L1022.24 684.084 L1022.8 684.084 L1023.36 684.084 L1023.92 684.084 L1024.48 684.084 L1025.04 684.084 L1025.6 684.084 L1026.16 684.084 L1026.72 684.084 L1027.28 684.084 L1027.83 684.084 L1028.39 684.084 L1028.95 684.084 L1029.51 684.084 L1030.07 684.084 L1030.63 684.084 L1031.19 684.084 L1031.75 684.084 L1032.31 684.084 L1032.87 684.084 L1033.43 684.084 L1033.99 684.084 L1034.55 684.084 L1035.1 684.084 L1035.66 684.084 L1036.22 684.084 L1036.78 684.084 L1037.34 684.084 L1037.9 684.084 L1038.46 684.084 L1039.02 684.084 L1039.58 684.084 L1040.14 684.084 L1040.7 684.084 L1041.26 684.084 L1041.82 684.084 L1042.38 684.084 L1042.93 684.084 L1043.49 684.084 L1044.05 684.084 L1044.61 684.084 L1045.17 684.084 L1045.73 684.084 L1046.29 684.084 L1046.85 684.084 L1047.41 684.084 L1047.97 684.084 L1048.53 684.084 L1049.09 684.084 L1049.65 684.084 L1050.2 684.084 L1050.76 684.084 L1051.32 684.084 L1051.88 684.084 L1052.44 684.084 L1053 684.084 L1053.56 684.084 L1054.12 684.084 L1054.68 684.084 L1055.24 684.084 L1055.8 684.084 L1056.36 684.084 L1056.92 684.084 L1057.48 684.084 L1058.03 684.084 L1058.59 684.084 L1059.15 684.084 L1059.71 684.084 L1060.27 684.084 L1060.83 684.084 L1061.39 684.084 L1061.95 684.084 L1062.51 684.084 L1063.07 684.084 L1063.63 684.084 L1064.19 684.084 L1064.75 684.084 L1065.3 684.084 L1065.86 684.084 L1066.42 684.084 L1066.98 684.084 L1067.54 684.084 L1068.1 684.084 L1068.66 684.084 L1069.22 684.084 L1069.78 684.084 L1070.34 684.084 L1070.9 684.084 L1071.46 684.084 L1072.02 684.084 L1072.57 684.084 L1073.13 684.084 L1073.69 684.084 L1074.25 684.084 L1074.81 684.084 L1075.37 684.084 L1075.93 684.084 L1076.49 684.084 L1077.05 684.084 L1077.61 684.084 L1078.17 684.084 L1078.73 684.084 L1079.29 684.084 L1079.85 684.084 L1080.4 684.084 L1080.96 684.084 L1081.52 684.084 L1082.08 684.084 L1082.64 684.084 L1083.2 684.084 L1083.76 684.084 L1084.32 684.084 L1084.88 684.084 L1085.44 684.084 L1086 684.084 L1086.56 684.084 L1087.12 684.084 L1087.67 684.084 L1088.23 684.084 L1088.79 684.084 L1089.35 684.084 L1089.91 684.084 L1090.47 684.084 L1091.03 684.084 L1091.59 684.084 L1092.15 684.084 L1092.71 684.084 L1093.27 684.084 L1093.83 684.084 L1094.39 684.084 L1094.94 684.084 L1095.5 684.084 L1096.06 684.084 L1096.62 684.084 L1097.18 684.084 L1097.74 684.084 L1098.3 684.084 L1098.86 684.084 L1099.42 684.084 L1099.98 684.084 L1100.54 684.084 L1101.1 684.084 L1101.66 684.084 L1102.22 684.084 L1102.77 684.084 L1103.33 684.084 L1103.89 684.084 L1104.45 684.084 L1105.01 684.084 L1105.57 684.084 L1106.13 684.084 L1106.69 684.084 L1107.25 684.084 L1107.81 684.084 L1108.37 684.084 L1108.93 684.084 L1109.49 684.084 L1110.04 684.084 L1110.6 684.084 L1111.16 684.084 L1111.72 684.084 L1112.28 684.084 L1112.84 684.084 L1113.4 684.084 L1113.96 684.084 L1114.52 684.084 L1115.08 684.084 L1115.64 684.084 L1116.2 684.084 L1116.76 684.084 L1117.31 684.084 L1117.87 684.084 L1118.43 684.084 L1118.99 684.084 L1119.55 684.084 L1120.11 684.084 L1120.67 684.084 L1121.23 684.084 L1121.79 684.084 L1122.35 684.084 L1122.91 684.084 L1123.47 684.084 L1124.03 684.084 L1124.59 684.084 L1125.14 684.084 L1125.7 684.084 L1126.26 684.084 L1126.82 684.084 L1127.38 684.084 L1127.94 684.084 L1128.5 684.084 L1129.06 684.084 L1129.62 684.084 L1130.18 684.084 L1130.74 684.084 L1131.3 684.084 L1131.86 684.084 L1132.41 684.084 L1132.97 684.084 L1133.53 684.084 L1134.09 684.084 L1134.65 684.084 L1135.21 684.084 L1135.77 684.084 L1136.33 684.084 L1136.89 684.084 L1137.45 684.084 L1138.01 684.084 L1138.57 684.084 L1139.13 684.084 L1139.68 684.084 L1140.24 684.084 L1140.8 684.084 L1141.36 684.084 L1141.92 684.084 L1142.48 684.084 L1143.04 684.084 L1143.6 684.084 L1144.16 684.084 L1144.72 684.084 L1145.28 684.084 L1145.84 684.084 L1146.4 684.084 L1146.96 684.084 L1147.51 684.084 L1148.07 684.084 L1148.63 684.084 L1149.19 684.084 L1149.75 684.084 L1150.31 684.084 L1150.87 684.084 L1151.43 684.084 L1151.99 684.084 L1152.55 684.084 L1153.11 684.084 L1153.67 684.084 L1154.23 684.084 L1154.78 684.084 L1155.34 684.084 L1155.9 684.084 L1156.46 684.084 L1157.02 684.084 L1157.58 684.084 L1158.14 684.084 L1158.7 684.084 L1159.26 684.084 L1159.82 684.084 L1160.38 684.084 L1160.94 684.084 L1161.5 684.084 L1162.05 684.084 L1162.61 684.084 L1163.17 684.084 L1163.73 684.084 L1164.29 684.084 L1164.85 684.084 L1165.41 684.084 L1165.97 684.084 L1166.53 684.084 L1167.09 684.084 L1167.65 684.084 L1168.21 684.084 L1168.77 684.084 L1169.33 684.084 L1169.88 684.084 L1170.44 684.084 L1171 684.084 L1171.56 684.084 L1172.12 684.084 L1172.68 684.084 L1173.24 684.084 L1173.8 684.084 L1174.36 684.084 L1174.92 684.084 L1175.48 684.084 L1176.04 684.084 L1176.6 684.084 L1177.15 684.084 L1177.71 684.084 L1178.27 684.084 L1178.83 684.084 L1179.39 684.084 L1179.95 684.084 L1180.51 684.084 L1181.07 684.084 L1181.63 684.084 L1182.19 684.084 L1182.75 684.084 L1183.31 684.084 L1183.87 684.084 L1184.43 684.084 L1184.98 684.084 L1185.54 684.084 L1186.1 684.084 L1186.66 684.084 L1187.22 684.084 L1187.78 684.084 L1188.34 684.084 L1188.9 684.084 L1189.46 684.084 L1190.02 684.084 L1190.58 684.084 L1191.14 684.084 L1191.7 684.084 L1192.25 684.084 L1192.81 684.084 L1193.37 684.084 L1193.93 684.084 L1194.49 684.084 L1195.05 684.084 L1195.61 684.084 L1196.17 684.084 L1196.73 684.084 L1197.29 684.084 L1197.85 684.084 L1198.41 684.084 L1198.97 684.084 L1199.52 684.084 L1200.08 684.084 L1200.64 684.084 L1201.2 684.084 L1201.76 684.084 L1202.32 684.084 L1202.88 684.084 L1203.44 684.084 L1204 684.084 L1204.56 684.084 L1205.12 684.084 L1205.68 684.084 L1206.24 684.084 L1206.8 684.084 L1207.35 684.084 L1207.91 684.084 L1208.47 684.084 L1209.03 684.084 L1209.59 684.084 L1210.15 684.084 L1210.71 684.084 L1211.27 684.084 L1211.83 684.084 L1212.39 684.084 L1212.95 684.084 L1213.51 684.084 L1214.07 684.084 L1214.62 684.084 L1215.18 684.084 L1215.74 684.084 L1216.3 684.084 L1216.86 684.084 L1217.42 684.084 L1217.98 684.084 L1218.54 684.084 L1219.1 684.084 L1219.66 684.084 L1220.22 684.084 L1220.78 684.084 L1221.34 684.084 L1221.89 684.084 L1222.45 684.084 L1223.01 684.084 L1223.57 684.084 L1224.13 684.084 L1224.69 684.084 L1225.25 684.084 L1225.81 684.084 L1226.37 684.084 L1226.93 684.084 L1227.49 684.084 L1228.05 684.084 L1228.61 684.084 L1229.17 684.084 L1229.72 684.084 L1230.28 684.084 L1230.84 684.084 L1231.4 684.084 L1231.96 684.084 L1232.52 684.084 L1233.08 684.084 L1233.64 684.084 L1234.2 684.084 L1234.76 684.084 L1235.32 684.084 L1235.88 684.084 L1236.44 684.084 L1236.99 684.084 L1237.55 684.084 L1238.11 684.084 L1238.67 684.084 L1239.23 684.084 L1239.79 684.084 L1240.35 684.084 L1240.91 684.084 L1241.47 684.084 L1242.03 684.084 L1242.59 684.084 L1243.15 684.084 L1243.71 684.084 L1244.26 684.084 L1244.82 684.084 L1245.38 684.084 L1245.94 684.084 L1246.5 684.084 L1247.06 684.084 L1247.62 684.084 L1248.18 684.084 L1248.74 684.084 L1249.3 684.084 L1249.86 684.084 L1250.42 684.084 L1250.98 684.084 L1251.54 684.084 L1252.09 684.084 L1252.65 684.084 L1253.21 684.084 L1253.77 684.084 L1254.33 684.084 L1254.89 684.084 L1255.45 684.084 L1256.01 684.084 L1256.57 684.084 L1257.13 684.084 L1257.69 684.084 L1258.25 684.084 L1258.81 684.084 L1259.36 684.084 L1259.92 684.084 L1260.48 684.084 L1261.04 684.084 L1261.6 684.084 L1262.16 684.084 L1262.72 684.084 L1263.28 684.084 L1263.84 684.084 L1264.4 684.084 L1264.96 684.084 L1265.52 684.084 L1266.08 684.084 L1266.63 684.084 L1267.19 684.084 L1267.75 684.084 L1268.31 684.084 L1268.87 684.084 L1269.43 684.084 L1269.99 684.084 L1270.55 684.084 L1271.11 684.084 L1271.67 684.084 L1272.23 684.084 L1272.79 684.084 L1273.35 684.084 L1273.91 684.084 L1274.46 684.084 L1275.02 684.084 L1275.58 684.084 L1276.14 684.084 L1276.7 684.084 L1277.26 684.084 L1277.82 684.084 L1278.38 684.084 L1278.94 684.084 L1279.5 684.084 L1280.06 684.084 L1280.62 684.084 L1281.18 684.084 L1281.73 684.084 L1282.29 684.084 L1282.85 684.084 L1283.41 684.084 L1283.97 684.084 L1284.53 684.084 L1285.09 684.084 L1285.65 684.084 L1286.21 684.084 L1286.77 684.084 L1287.33 684.084 L1287.89 684.084 L1288.45 684.084 L1289 684.084 L1289.56 684.084 L1290.12 684.084 L1290.68 684.084 L1291.24 684.084 L1291.8 684.084 L1292.36 684.084 L1292.92 684.084 L1293.48 684.084 L1294.04 684.084 L1294.6 684.084 L1295.16 684.084 L1295.72 684.084 L1296.28 684.084 L1296.83 684.084 L1297.39 684.084 L1297.95 684.084 L1298.51 684.084 L1299.07 684.084 L1299.63 684.084 L1300.19 684.084 L1300.75 684.084 L1301.31 684.084 L1301.87 684.084 L1302.43 684.084 L1302.99 684.084 L1303.55 684.084 L1304.1 684.084 L1304.66 684.084 L1305.22 684.084 L1305.78 684.084 L1306.34 684.084 L1306.9 684.084 L1307.46 684.084 L1308.02 684.084 L1308.58 684.084 L1309.14 684.084 L1309.7 684.084 L1310.26 684.084 L1310.82 684.084 L1311.38 684.084 L1311.93 684.084 L1312.49 684.084 L1313.05 684.084 L1313.61 684.084 L1314.17 684.084 L1314.73 684.084 L1315.29 684.084 L1315.85 684.084 L1316.41 684.084 L1316.97 684.084 L1317.53 684.084 L1318.09 684.084 L1318.65 684.084 L1319.2 684.084 L1319.76 684.084 L1320.32 684.084 L1320.88 684.084 L1321.44 684.084 L1322 684.084 L1322.56 684.084 L1323.12 684.084 L1323.68 684.084 L1324.24 684.084 L1324.8 684.084 L1325.36 684.084 L1325.92 684.084 L1326.47 684.084 L1327.03 684.084 L1327.59 684.084 L1328.15 684.084 L1328.71 684.084 L1329.27 684.084 L1329.83 684.084 L1330.39 684.084 L1330.95 684.084 L1331.51 684.084 L1332.07 684.084 L1332.63 684.084 L1333.19 684.084 L1333.75 684.084 L1334.3 684.084 L1334.86 684.084 L1335.42 684.084 L1335.98 684.084 L1336.54 684.084 L1337.1 684.084 L1337.66 684.084 L1338.22 684.084 L1338.78 684.084 L1339.34 684.084 L1339.9 684.084 L1340.46 684.084 L1341.02 684.084 L1341.57 684.084 L1342.13 684.084 L1342.69 684.084 L1343.25 684.084 L1343.81 684.084 L1344.37 684.084 L1344.93 684.084 L1345.49 684.084 L1346.05 684.084 L1346.61 684.084 L1347.17 684.084 L1347.73 684.084 L1348.29 684.084 L1348.84 684.084 L1349.4 684.084 L1349.96 684.084 L1350.52 684.084 L1351.08 684.084 L1351.64 684.084 L1352.2 684.084 L1352.76 684.084 L1353.32 684.084 L1353.88 684.084 L1354.44 684.084 L1355 684.084 L1355.56 684.084 L1356.12 684.084 L1356.67 684.084 L1357.23 684.084 L1357.79 684.084 L1358.35 684.084 L1358.91 684.084 L1359.47 684.084 L1360.03 684.084 L1360.59 684.084 L1361.15 684.084 L1361.71 684.084 L1362.27 684.084 L1362.83 684.084 L1363.39 684.084 L1363.94 684.084 L1364.5 684.084 L1365.06 684.084 L1365.62 684.084 L1366.18 684.084 L1366.74 684.084 L1367.3 684.084 L1367.86 684.084 L1368.42 684.084 L1368.98 684.084 L1369.54 684.084 L1370.1 684.084 L1370.66 684.084 L1371.21 684.084 L1371.77 684.084 L1372.33 684.084 L1372.89 684.084 L1373.45 684.084 L1374.01 684.084 L1374.57 684.084 L1375.13 684.084 L1375.69 684.084 L1376.25 684.084 L1376.81 684.084 L1377.37 684.084 L1377.93 684.084 L1378.49 684.084 L1379.04 684.084 L1379.6 684.084 L1380.16 684.084 L1380.72 684.084 L1381.28 684.084 L1381.84 684.084 L1382.4 684.084 L1382.96 684.084 L1383.52 684.084 L1384.08 684.084 L1384.64 684.084 L1385.2 684.084 L1385.76 684.084 L1386.31 684.084 L1386.87 684.084 L1387.43 684.084 L1387.99 684.084 L1388.55 684.084 L1389.11 684.084 L1389.67 684.084 L1390.23 684.084 L1390.79 684.084 L1391.35 684.084 L1391.91 684.084 L1392.47 684.084 L1393.03 684.084 L1393.58 684.084 L1394.14 684.084 L1394.7 684.084 L1395.26 684.084 L1395.82 684.084 L1396.38 684.084 L1396.94 684.084 L1397.5 684.084 L1398.06 684.084 L1398.62 684.084 L1399.18 684.084 L1399.74 684.084 L1400.3 684.084 L1400.86 684.084 L1401.41 684.084 L1401.97 684.084 L1402.53 684.084 L1403.09 684.084 L1403.65 684.084 L1404.21 684.084 L1404.77 684.084 L1405.33 684.084 L1405.89 684.084 L1406.45 684.084 L1407.01 684.084 L1407.57 684.084 L1408.13 684.084 L1408.68 684.084 L1409.24 684.084 L1409.8 684.084 L1410.36 684.084 L1410.92 684.084 L1411.48 684.084 L1412.04 684.084 L1412.6 684.084 L1413.16 684.084 L1413.72 684.084 L1414.28 684.084 L1414.84 684.084 L1415.4 684.084 L1415.95 684.084 L1416.51 684.084 L1417.07 684.084 L1417.63 684.084 L1418.19 684.084 L1418.75 684.084 L1419.31 684.084 L1419.87 684.084 L1420.43 684.084 L1420.99 684.084 L1421.55 684.084 L1422.11 684.084 L1422.67 684.084 L1423.23 684.084 L1423.78 684.084 L1424.34 684.084 L1424.9 684.084 L1425.46 684.084 L1426.02 684.084 L1426.58 684.084 L1427.14 684.084 L1427.7 684.084 L1428.26 684.084 L1428.82 684.084 L1429.38 684.084 L1429.94 684.084 L1430.5 684.084 L1431.05 684.084 L1431.61 684.084 L1432.17 684.084 L1432.73 684.084 L1433.29 684.084 L1433.85 684.084 L1434.41 684.084 L1434.97 684.084 L1435.53 684.084 L1436.09 684.084 L1436.65 684.084 L1437.21 684.084 L1437.77 684.084 L1438.33 684.084 L1438.88 684.084 L1439.44 684.084 L1440 684.084 L1440.56 684.084 L1441.12 684.084 L1441.68 684.084 L1442.24 684.084 L1442.8 684.084 L1443.36 684.084 L1443.92 684.084 L1444.48 684.084 L1445.04 684.084 L1445.6 684.084 L1446.15 684.084 L1446.71 684.084 L1447.27 684.084 L1447.83 684.084 L1448.39 684.084 L1448.95 684.084 L1449.51 684.084 L1450.07 684.084 L1450.63 684.084 L1451.19 684.084 L1451.75 684.084 L1452.31 684.084 L1452.87 684.084 L1453.42 684.084 L1453.98 684.084 L1454.54 684.084 L1455.1 684.084 L1455.66 684.084 L1456.22 684.084 L1456.78 684.084 L1457.34 684.084 L1457.9 684.084 L1458.46 684.084 L1459.02 684.084 L1459.58 684.084 L1460.14 684.084 L1460.7 684.084 L1461.25 684.084 L1461.81 684.084 L1462.37 684.084 L1462.93 684.084 L1463.49 684.084 L1464.05 684.084 L1464.61 684.084 L1465.17 684.084 L1465.73 684.084 L1466.29 684.084 L1466.85 684.084 L1467.41 684.084 L1467.97 684.084 L1468.52 684.084 L1469.08 684.084 L1469.64 684.084 L1470.2 684.084 L1470.76 684.084 L1471.32 684.084 L1471.88 684.084 L1472.44 684.084 L1473 684.084 L1473.56 684.084 L1474.12 684.084 L1474.68 684.084 L1475.24 684.084 L1475.79 684.084 L1476.35 684.084 L1476.91 684.084 L1477.47 684.084 L1478.03 684.084 L1478.59 684.084 L1479.15 684.084 L1479.71 684.084 L1480.27 684.084 L1480.83 684.084 L1481.39 684.084 L1481.95 684.084 L1482.51 684.084 L1483.07 684.084 L1483.62 684.084 L1484.18 684.084 L1484.74 684.084 L1485.3 684.084 L1485.86 684.084 L1486.42 684.084 L1486.98 684.084 L1487.54 684.084 L1488.1 684.084 L1488.66 684.084 L1489.22 684.084 L1489.78 684.084 L1490.34 684.084 L1490.89 684.084 L1491.45 684.084 L1492.01 684.084 L1492.57 684.084 L1493.13 684.084 L1493.69 684.084 L1494.25 684.084 L1494.81 684.084 L1495.37 684.084 L1495.93 684.084 L1496.49 684.084 L1497.05 684.084 L1497.61 684.084 L1498.16 684.084 L1498.72 684.084 L1499.28 684.084 L1499.84 684.084 L1500.4 684.084 L1500.96 684.084 L1501.52 684.084 L1502.08 684.084 L1502.64 684.084 L1503.2 684.084 L1503.76 684.084 L1504.32 684.084 L1504.88 684.084 L1505.44 684.084 L1505.99 684.084 L1506.55 684.084 L1507.11 684.084 L1507.67 684.084 L1508.23 684.084 L1508.79 684.084 L1509.35 684.084 L1509.91 684.084 L1510.47 684.084 L1511.03 684.084 L1511.59 684.084 L1512.15 684.084 L1512.71 684.084 L1513.26 684.084 L1513.82 684.084 L1514.38 684.084 L1514.94 684.084 L1515.5 684.084 L1516.06 684.084 L1516.62 684.084 L1517.18 684.084 L1517.74 684.084 L1518.3 684.084 L1518.86 684.084 L1519.42 684.084 L1519.98 684.084 L1520.53 684.084 L1521.09 684.084 L1521.65 684.084 L1522.21 684.084 L1522.77 684.084 L1523.33 684.084 L1523.89 684.084 L1524.45 684.084 L1525.01 684.084 L1525.57 684.084 L1526.13 684.084 L1526.69 684.084 L1527.25 684.084 L1527.81 684.084 L1528.36 684.084 L1528.92 684.084 L1529.48 684.084 L1530.04 684.084 L1530.6 684.084 L1531.16 684.084 L1531.72 684.084 L1532.28 684.084 L1532.84 684.084 L1533.4 684.084 L1533.96 684.084 L1534.52 684.084 L1535.08 684.084 L1535.63 684.084 L1536.19 684.084 L1536.75 684.084 L1537.31 684.084 L1537.87 684.084 L1538.43 684.084 L1538.99 684.084 L1539.55 684.084 L1540.11 684.084 L1540.67 684.084 L1541.23 684.084 L1541.79 684.084 L1542.35 684.084 L1542.9 684.084 L1543.46 684.084 L1544.02 684.084 L1544.58 684.084 L1545.14 684.084 L1545.7 684.084 L1546.26 684.084 L1546.82 684.084 L1547.38 684.084 L1547.94 684.084 L1548.5 684.084 L1549.06 684.084 L1549.62 684.084 L1550.18 684.084 L1550.73 684.084 L1551.29 684.084 L1551.85 684.084 L1552.41 684.084 L1552.97 684.084 L1553.53 684.084 L1554.09 684.084 L1554.65 684.084 L1555.21 684.084 L1555.77 684.084 L1556.33 684.084 L1556.89 684.084 L1557.45 684.084 L1558 684.084 L1558.56 684.084 L1559.12 684.084 L1559.68 684.084 L1560.24 684.084 L1560.8 684.084 L1561.36 684.084 L1561.92 684.084 L1562.48 684.084 L1563.04 684.084 L1563.6 684.084 L1564.16 684.084 L1564.72 684.084 L1565.28 684.084 L1565.83 684.084 L1566.39 684.084 L1566.95 684.084 L1567.51 684.084 L1568.07 684.084 L1568.63 684.084 L1569.19 684.084 L1569.75 684.084 L1570.31 684.084 L1570.87 684.084 L1571.43 684.084 L1571.99 684.084 L1572.55 684.084 L1573.1 684.084 L1573.66 684.084 L1574.22 684.084 L1574.78 684.084 L1575.34 684.084 L1575.9 684.084 L1576.46 684.084 L1577.02 684.084 L1577.58 684.084 L1578.14 684.084 L1578.7 684.084 L1579.26 684.084 L1579.82 684.084 L1580.37 684.084 L1580.93 684.084 L1581.49 684.084 L1582.05 684.084 L1582.61 684.084 L1583.17 684.084 L1583.73 684.084 L1584.29 684.084 L1584.85 684.084 L1585.41 684.084 L1585.97 684.084 L1586.53 684.084 L1587.09 684.084 L1587.65 684.084 L1588.2 684.084 L1588.76 684.084 L1589.32 684.084 L1589.88 684.084 L1590.44 684.084 L1591 684.084 L1591.56 684.084 L1592.12 684.084 L1592.68 684.084 L1593.24 684.084 L1593.8 684.084 L1594.36 684.084 L1594.92 684.084 L1595.47 684.084 L1596.03 684.084 L1596.59 684.084 L1597.15 684.084 L1597.71 684.084 L1598.27 684.084 L1598.83 684.084 L1599.39 684.084 L1599.95 684.084 L1600.51 684.084 L1601.07 684.084 L1601.63 684.084 L1602.19 684.084 L1602.74 684.084 L1603.3 684.084 L1603.86 684.084 L1604.42 684.084 L1604.98 684.084 L1605.54 684.084 L1606.1 684.084 L1606.66 684.084 L1607.22 684.084 L1607.78 684.084 L1608.34 684.084 L1608.9 684.084 L1609.46 684.084 L1610.02 684.084 L1610.57 684.084 L1611.13 684.084 L1611.69 684.084 L1612.25 684.084 L1612.81 684.084 L1613.37 684.084 L1613.93 684.084 L1614.49 684.084 L1615.05 684.084 L1615.61 684.084 L1616.17 684.084 L1616.73 684.084 L1617.29 684.084 L1617.84 684.084 L1618.4 684.084 L1618.96 684.084 L1619.52 684.084 L1620.08 684.084 L1620.64 684.084 L1621.2 684.084 L1621.76 684.084 L1622.32 684.084 L1622.88 684.084 L1623.44 684.084 L1624 684.084 L1624.56 684.084 L1625.11 684.084 L1625.67 684.084 L1626.23 684.084 L1626.79 684.084 L1627.35 684.084 L1627.91 684.084 L1628.47 684.084 L1629.03 684.084 L1629.59 684.084 L1630.15 684.084 L1630.71 684.084 L1631.27 684.084 L1631.83 684.084 L1632.39 684.084 L1632.94 684.084 L1633.5 684.084 L1634.06 684.084 L1634.62 684.084 L1635.18 684.084 L1635.74 684.084 L1636.3 684.084 L1636.86 684.084 L1637.42 684.084 L1637.98 684.084 L1638.54 684.084 L1639.1 684.084 L1639.66 684.084 L1640.21 684.084 L1640.77 684.084 L1641.33 684.084 L1641.89 684.084 L1642.45 684.084 L1643.01 684.084 L1643.57 684.084 L1644.13 684.084 L1644.69 684.084 L1645.25 684.084 L1645.81 684.084 L1646.37 684.084 L1646.93 684.084 L1647.48 684.084 L1648.04 684.084 L1648.6 684.084 L1649.16 684.084 L1649.72 684.084 L1650.28 684.084 L1650.84 684.084 L1651.4 684.084 L1651.96 684.084 L1652.52 684.084 L1653.08 684.084 L1653.64 684.084 L1654.2 684.084 L1654.76 684.084 L1655.31 684.084 L1655.87 684.084 L1656.43 684.084 L1656.99 684.084 L1657.55 684.084 L1658.11 684.084 L1658.67 684.084 L1659.23 684.084 L1659.79 684.084 L1660.35 684.084 L1660.91 684.084 L1661.47 684.084 L1662.03 684.084 L1662.58 684.084 L1663.14 684.084 L1663.7 684.084 L1664.26 684.084 L1664.82 684.084 L1665.38 684.084 L1665.94 684.084 L1666.5 684.084 L1667.06 684.084 L1667.62 684.084 L1668.18 684.084 L1668.74 684.084 L1669.3 684.084 L1669.85 684.084 L1670.41 684.084 L1670.97 684.084 L1671.53 684.084 L1672.09 684.084 L1672.65 684.084 L1673.21 684.084 L1673.77 684.084 L1674.33 684.084 L1674.89 684.084 L1675.45 684.084 L1676.01 684.084 L1676.57 684.084 L1677.13 684.084 L1677.68 684.084 L1678.24 684.084 L1678.8 684.084 L1679.36 684.084 L1679.92 684.084 L1680.48 684.084 L1681.04 684.084 L1681.6 684.084 L1682.16 684.084 L1682.72 684.084 L1683.28 684.084 L1683.84 684.084 L1684.4 684.084 L1684.95 684.084 L1685.51 684.084 L1686.07 684.084 L1686.63 684.084 L1687.19 684.084 L1687.75 684.084 L1688.31 684.084 L1688.87 684.084 L1689.43 684.084 L1689.99 684.084 L1690.55 684.084 L1691.11 684.084 L1691.67 684.084 L1692.23 684.084 L1692.78 684.084 L1693.34 684.084 L1693.9 684.084 L1694.46 684.084 L1695.02 684.084 L1695.58 684.084 L1696.14 684.084 L1696.7 684.084 L1697.26 684.084 L1697.82 684.084 L1698.38 684.084 L1698.94 684.084 L1699.5 684.084 L1700.05 684.084 L1700.61 684.084 L1701.17 684.084 L1701.73 684.084 L1702.29 684.084 L1702.85 684.084 L1703.41 684.084 L1703.97 684.084 L1704.53 684.084 L1705.09 684.084 L1705.65 684.084 L1706.21 684.084 L1706.77 684.084 L1707.32 684.084 L1707.88 684.084 L1708.44 684.084 L1709 684.084 L1709.56 684.084 L1710.12 684.084 L1710.68 684.084 L1711.24 684.084 L1711.8 684.084 L1712.36 684.084 L1712.92 684.084 L1713.48 684.084 L1714.04 684.084 L1714.6 684.084 L1715.15 684.084 L1715.71 684.084 L1716.27 684.084 L1716.83 684.084 L1717.39 684.084 L1717.95 684.084 L1718.51 684.084 L1719.07 684.084 L1719.63 684.084 L1720.19 684.084 L1720.75 684.084 L1721.31 684.084 L1721.87 684.084 L1722.42 684.084 L1722.98 684.084 L1723.54 684.084 L1724.1 684.084 L1724.66 684.084 L1725.22 684.084 L1725.78 684.084 L1726.34 684.084 L1726.9 684.084 L1727.46 684.084 L1728.02 684.084 L1728.58 684.084 L1729.14 684.084 L1729.69 684.084 L1730.25 684.084 L1730.81 684.084 L1731.37 684.084 L1731.93 684.084 L1732.49 684.084 L1733.05 684.084 L1733.61 684.084 L1734.17 684.084 L1734.73 684.084 L1735.29 684.084 L1735.85 684.084 L1736.41 684.084 L1736.97 684.084 L1737.52 684.084 L1738.08 684.084 L1738.64 684.084 L1739.2 684.084 L1739.76 684.084 L1740.32 684.084 L1740.88 684.084 L1741.44 684.084 L1742 684.084 L1742.56 684.084 L1743.12 684.084 L1743.68 684.084 L1744.24 684.084 L1744.79 684.084 L1745.35 684.084 L1745.91 684.084 L1746.47 684.084 L1747.03 684.084 L1747.59 684.084 L1748.15 684.084 L1748.71 684.084 L1749.27 684.084 L1749.83 684.084 L1750.39 684.084 L1750.95 684.084 L1751.51 684.084 L1752.06 684.084 L1752.62 684.084 L1753.18 684.084 L1753.74 684.084 L1754.3 684.084 L1754.86 684.084 L1755.42 684.084 L1755.98 684.084 L1756.54 684.084 L1757.1 684.084 L1757.66 684.084 L1758.22 684.084 L1758.78 684.084 L1759.34 684.084 L1759.89 684.084 L1760.45 684.084 L1761.01 684.084 L1761.57 684.084 L1762.13 684.084 L1762.69 684.084 L1763.25 684.084 L1763.81 684.084 L1764.37 684.084 L1764.93 684.084 L1765.49 684.084 L1766.05 684.084 L1766.61 684.084 L1767.16 684.084 L1767.72 684.084 L1768.28 684.084 L1768.84 684.084 L1769.4 684.084 L1769.96 684.084 L1770.52 684.084 L1771.08 684.084 L1771.64 684.084 L1772.2 684.084 L1772.76 684.084 L1773.32 684.084 L1773.88 684.084 L1774.43 684.084 L1774.99 684.084 L1775.55 684.084 L1776.11 684.084 L1776.67 684.084 L1777.23 684.084 L1777.79 684.084 L1778.35 684.084 L1778.91 684.084 L1779.47 684.084 L1780.03 684.084 L1780.59 684.084 L1781.15 684.084 L1781.71 684.084 L1782.26 684.084 L1782.82 684.084 L1783.38 684.084 L1783.94 684.084 L1784.5 684.084 L1785.06 684.084 L1785.62 684.084 L1786.18 684.084 L1786.74 684.084 L1787.3 684.084 L1787.86 684.084 L1788.42 684.084 L1788.98 684.084 L1789.53 684.084 L1790.09 684.084 L1790.65 684.084 L1791.21 684.084 L1791.77 684.084 L1792.33 684.084 L1792.89 684.084 L1793.45 684.084 L1794.01 684.084 L1794.57 684.084 L1795.13 684.084 L1795.69 684.084 L1796.25 684.084 L1796.8 684.084 L1797.36 684.084 L1797.92 684.084 L1798.48 684.084 L1799.04 684.084 L1799.6 684.084 L1800.16 684.084 L1800.72 684.084 L1801.28 684.084 L1801.84 684.084 L1802.4 684.084 L1802.96 684.084 L1803.52 684.084 L1804.08 684.084 L1804.63 684.084 L1805.19 684.084 L1805.75 684.084 L1806.31 684.084 L1806.87 684.084 L1807.43 684.084 L1807.99 684.084 L1808.55 684.084 L1809.11 684.084 L1809.67 684.084 L1810.23 684.084 L1810.79 684.084 L1811.35 684.084 L1811.9 684.084 L1812.46 684.084 L1813.02 684.084 L1813.58 684.084 L1814.14 684.084 L1814.7 684.084 L1815.26 684.084 L1815.82 684.084 L1816.38 684.084 L1816.94 684.084 L1817.5 684.084 L1818.06 684.084 L1818.62 684.084 L1819.18 684.084 L1819.73 684.084 L1820.29 684.084 L1820.85 684.084 L1821.41 684.084 L1821.97 684.084 L1822.53 684.084 L1823.09 684.084 L1823.65 684.084 L1824.21 684.084 L1824.77 684.084 L1825.33 684.084 L1825.89 684.084 L1826.45 684.084 L1827 684.084 L1827.56 684.084 L1828.12 684.084 L1828.68 684.084 L1829.24 684.084 L1829.8 684.084 L1830.36 684.084 L1830.92 684.084 L1831.48 684.084 L1832.04 684.084 L1832.6 684.084 L1833.16 684.084 L1833.72 684.084 L1834.27 684.084 L1834.83 684.084 L1835.39 684.084 L1835.95 684.084 L1836.51 684.084 L1837.07 684.084 L1837.63 684.084 L1838.19 684.084 L1838.19 682.847 L1837.63 682.847 L1837.07 682.847 L1836.51 682.847 L1835.95 682.847 L1835.39 682.847 L1834.83 682.847 L1834.27 682.847 L1833.72 682.847 L1833.16 682.847 L1832.6 682.847 L1832.04 682.847 L1831.48 682.847 L1830.92 682.847 L1830.36 682.847 L1829.8 682.847 L1829.24 682.847 L1828.68 682.847 L1828.12 682.847 L1827.56 682.847 L1827 682.847 L1826.45 682.847 L1825.89 682.847 L1825.33 682.847 L1824.77 682.847 L1824.21 682.847 L1823.65 682.847 L1823.09 682.847 L1822.53 682.847 L1821.97 682.847 L1821.41 682.847 L1820.85 682.847 L1820.29 682.847 L1819.73 682.847 L1819.18 682.847 L1818.62 682.847 L1818.06 682.847 L1817.5 682.847 L1816.94 682.847 L1816.38 682.847 L1815.82 682.847 L1815.26 682.847 L1814.7 682.847 L1814.14 682.847 L1813.58 682.847 L1813.02 682.847 L1812.46 682.847 L1811.9 682.847 L1811.35 682.847 L1810.79 682.847 L1810.23 682.847 L1809.67 682.847 L1809.11 682.847 L1808.55 682.847 L1807.99 682.847 L1807.43 682.847 L1806.87 682.847 L1806.31 682.847 L1805.75 682.847 L1805.19 682.847 L1804.63 682.847 L1804.08 682.847 L1803.52 682.847 L1802.96 682.847 L1802.4 682.847 L1801.84 682.847 L1801.28 682.847 L1800.72 682.847 L1800.16 682.847 L1799.6 682.847 L1799.04 682.847 L1798.48 682.847 L1797.92 682.847 L1797.36 682.847 L1796.8 682.847 L1796.25 682.847 L1795.69 682.847 L1795.13 682.847 L1794.57 682.847 L1794.01 682.847 L1793.45 682.847 L1792.89 682.847 L1792.33 682.847 L1791.77 682.847 L1791.21 682.847 L1790.65 682.847 L1790.09 682.847 L1789.53 682.847 L1788.98 682.847 L1788.42 682.847 L1787.86 682.847 L1787.3 682.847 L1786.74 682.847 L1786.18 682.847 L1785.62 682.847 L1785.06 682.847 L1784.5 682.847 L1783.94 682.847 L1783.38 682.847 L1782.82 682.847 L1782.26 682.847 L1781.71 682.847 L1781.15 682.847 L1780.59 682.847 L1780.03 682.847 L1779.47 682.847 L1778.91 682.847 L1778.35 682.847 L1777.79 682.847 L1777.23 682.847 L1776.67 682.847 L1776.11 682.847 L1775.55 682.847 L1774.99 682.847 L1774.43 682.847 L1773.88 682.847 L1773.32 682.847 L1772.76 682.847 L1772.2 682.847 L1771.64 682.847 L1771.08 682.847 L1770.52 682.847 L1769.96 682.847 L1769.4 682.847 L1768.84 682.847 L1768.28 682.847 L1767.72 682.847 L1767.16 682.847 L1766.61 682.847 L1766.05 682.847 L1765.49 682.847 L1764.93 682.847 L1764.37 682.847 L1763.81 682.847 L1763.25 682.847 L1762.69 682.847 L1762.13 682.847 L1761.57 682.847 L1761.01 682.847 L1760.45 682.847 L1759.89 682.847 L1759.34 682.847 L1758.78 682.847 L1758.22 682.847 L1757.66 682.847 L1757.1 682.847 L1756.54 682.847 L1755.98 682.847 L1755.42 682.847 L1754.86 682.847 L1754.3 682.847 L1753.74 682.847 L1753.18 682.847 L1752.62 682.847 L1752.06 682.847 L1751.51 682.847 L1750.95 682.847 L1750.39 682.847 L1749.83 682.847 L1749.27 682.847 L1748.71 682.847 L1748.15 682.847 L1747.59 682.847 L1747.03 682.847 L1746.47 682.847 L1745.91 682.847 L1745.35 682.847 L1744.79 682.847 L1744.24 682.847 L1743.68 682.847 L1743.12 682.847 L1742.56 682.847 L1742 682.847 L1741.44 682.847 L1740.88 682.847 L1740.32 682.847 L1739.76 682.847 L1739.2 682.847 L1738.64 682.847 L1738.08 682.847 L1737.52 682.847 L1736.97 682.847 L1736.41 682.847 L1735.85 682.847 L1735.29 682.847 L1734.73 682.847 L1734.17 682.847 L1733.61 682.847 L1733.05 682.847 L1732.49 682.847 L1731.93 682.847 L1731.37 682.847 L1730.81 682.847 L1730.25 682.847 L1729.69 682.847 L1729.14 682.847 L1728.58 682.847 L1728.02 682.847 L1727.46 682.847 L1726.9 682.847 L1726.34 682.847 L1725.78 682.847 L1725.22 682.847 L1724.66 682.847 L1724.1 682.847 L1723.54 682.847 L1722.98 682.847 L1722.42 682.847 L1721.87 682.847 L1721.31 682.847 L1720.75 682.847 L1720.19 682.847 L1719.63 682.847 L1719.07 682.847 L1718.51 682.847 L1717.95 682.847 L1717.39 682.847 L1716.83 682.847 L1716.27 682.847 L1715.71 682.847 L1715.15 682.847 L1714.6 682.847 L1714.04 682.847 L1713.48 682.847 L1712.92 682.847 L1712.36 682.847 L1711.8 682.847 L1711.24 682.847 L1710.68 682.847 L1710.12 682.847 L1709.56 682.847 L1709 682.847 L1708.44 682.847 L1707.88 682.847 L1707.32 682.847 L1706.77 682.847 L1706.21 682.847 L1705.65 682.847 L1705.09 682.847 L1704.53 682.847 L1703.97 682.847 L1703.41 682.847 L1702.85 682.847 L1702.29 682.847 L1701.73 682.847 L1701.17 682.847 L1700.61 682.847 L1700.05 682.847 L1699.5 682.847 L1698.94 682.847 L1698.38 682.847 L1697.82 682.847 L1697.26 682.847 L1696.7 682.847 L1696.14 682.847 L1695.58 682.847 L1695.02 682.847 L1694.46 682.847 L1693.9 682.847 L1693.34 682.847 L1692.78 682.847 L1692.23 682.847 L1691.67 682.847 L1691.11 682.847 L1690.55 682.847 L1689.99 682.847 L1689.43 682.847 L1688.87 682.847 L1688.31 682.847 L1687.75 682.847 L1687.19 682.847 L1686.63 682.847 L1686.07 682.847 L1685.51 682.847 L1684.95 682.847 L1684.4 682.847 L1683.84 682.847 L1683.28 682.847 L1682.72 682.847 L1682.16 682.847 L1681.6 682.847 L1681.04 682.847 L1680.48 682.847 L1679.92 682.847 L1679.36 682.847 L1678.8 682.847 L1678.24 682.847 L1677.68 682.847 L1677.13 682.847 L1676.57 682.847 L1676.01 682.847 L1675.45 682.847 L1674.89 682.847 L1674.33 682.847 L1673.77 682.847 L1673.21 682.847 L1672.65 682.847 L1672.09 682.847 L1671.53 682.847 L1670.97 682.847 L1670.41 682.847 L1669.85 682.847 L1669.3 682.847 L1668.74 682.847 L1668.18 682.847 L1667.62 682.847 L1667.06 682.847 L1666.5 682.847 L1665.94 682.847 L1665.38 682.847 L1664.82 682.847 L1664.26 682.847 L1663.7 682.847 L1663.14 682.847 L1662.58 682.847 L1662.03 682.847 L1661.47 682.847 L1660.91 682.847 L1660.35 682.847 L1659.79 682.847 L1659.23 682.847 L1658.67 682.847 L1658.11 682.847 L1657.55 682.847 L1656.99 682.847 L1656.43 682.847 L1655.87 682.847 L1655.31 682.847 L1654.76 682.847 L1654.2 682.847 L1653.64 682.847 L1653.08 682.847 L1652.52 682.847 L1651.96 682.847 L1651.4 682.847 L1650.84 682.847 L1650.28 682.847 L1649.72 682.847 L1649.16 682.847 L1648.6 682.847 L1648.04 682.847 L1647.48 682.847 L1646.93 682.847 L1646.37 682.847 L1645.81 682.847 L1645.25 682.847 L1644.69 682.847 L1644.13 682.847 L1643.57 682.847 L1643.01 682.847 L1642.45 682.847 L1641.89 682.847 L1641.33 682.847 L1640.77 682.847 L1640.21 682.847 L1639.66 682.847 L1639.1 682.847 L1638.54 682.847 L1637.98 682.847 L1637.42 682.847 L1636.86 682.847 L1636.3 682.847 L1635.74 682.847 L1635.18 682.847 L1634.62 682.847 L1634.06 682.847 L1633.5 682.847 L1632.94 682.847 L1632.39 682.847 L1631.83 682.847 L1631.27 682.847 L1630.71 682.847 L1630.15 682.847 L1629.59 682.847 L1629.03 682.847 L1628.47 682.847 L1627.91 682.847 L1627.35 682.847 L1626.79 682.847 L1626.23 682.847 L1625.67 682.847 L1625.11 682.847 L1624.56 682.847 L1624 682.847 L1623.44 682.847 L1622.88 682.847 L1622.32 682.847 L1621.76 682.847 L1621.2 682.847 L1620.64 682.847 L1620.08 682.847 L1619.52 682.847 L1618.96 682.847 L1618.4 682.847 L1617.84 682.847 L1617.29 682.847 L1616.73 682.847 L1616.17 682.847 L1615.61 682.847 L1615.05 682.847 L1614.49 682.847 L1613.93 682.847 L1613.37 682.847 L1612.81 682.847 L1612.25 682.847 L1611.69 682.847 L1611.13 682.847 L1610.57 682.847 L1610.02 682.847 L1609.46 682.847 L1608.9 682.847 L1608.34 682.847 L1607.78 682.847 L1607.22 682.847 L1606.66 682.847 L1606.1 682.847 L1605.54 682.847 L1604.98 682.847 L1604.42 682.847 L1603.86 682.847 L1603.3 682.847 L1602.74 682.847 L1602.19 682.847 L1601.63 682.847 L1601.07 682.847 L1600.51 682.847 L1599.95 682.847 L1599.39 682.847 L1598.83 682.847 L1598.27 682.847 L1597.71 682.847 L1597.15 682.847 L1596.59 682.847 L1596.03 682.847 L1595.47 682.847 L1594.92 682.847 L1594.36 682.847 L1593.8 682.847 L1593.24 682.847 L1592.68 682.847 L1592.12 682.847 L1591.56 682.847 L1591 682.847 L1590.44 682.847 L1589.88 682.847 L1589.32 682.847 L1588.76 682.847 L1588.2 682.847 L1587.65 682.847 L1587.09 682.847 L1586.53 682.847 L1585.97 682.847 L1585.41 682.847 L1584.85 682.847 L1584.29 682.847 L1583.73 682.847 L1583.17 682.847 L1582.61 682.847 L1582.05 682.847 L1581.49 682.847 L1580.93 682.847 L1580.37 682.847 L1579.82 682.847 L1579.26 682.847 L1578.7 682.847 L1578.14 682.847 L1577.58 682.847 L1577.02 682.847 L1576.46 682.847 L1575.9 682.847 L1575.34 682.847 L1574.78 682.847 L1574.22 682.847 L1573.66 682.847 L1573.1 682.847 L1572.55 682.847 L1571.99 682.847 L1571.43 682.847 L1570.87 682.847 L1570.31 682.847 L1569.75 682.847 L1569.19 682.847 L1568.63 682.847 L1568.07 682.847 L1567.51 682.847 L1566.95 682.847 L1566.39 682.847 L1565.83 682.847 L1565.28 682.847 L1564.72 682.847 L1564.16 682.847 L1563.6 682.847 L1563.04 682.847 L1562.48 682.847 L1561.92 682.847 L1561.36 682.847 L1560.8 682.847 L1560.24 682.847 L1559.68 682.847 L1559.12 682.847 L1558.56 682.847 L1558 682.847 L1557.45 682.847 L1556.89 682.847 L1556.33 682.847 L1555.77 682.847 L1555.21 682.847 L1554.65 682.847 L1554.09 682.847 L1553.53 682.847 L1552.97 682.847 L1552.41 682.847 L1551.85 682.847 L1551.29 682.847 L1550.73 682.847 L1550.18 682.847 L1549.62 682.847 L1549.06 682.847 L1548.5 682.847 L1547.94 682.847 L1547.38 682.847 L1546.82 682.847 L1546.26 682.847 L1545.7 682.847 L1545.14 682.847 L1544.58 682.847 L1544.02 682.847 L1543.46 682.847 L1542.9 682.847 L1542.35 682.847 L1541.79 682.847 L1541.23 682.847 L1540.67 682.847 L1540.11 682.847 L1539.55 682.847 L1538.99 682.847 L1538.43 682.847 L1537.87 682.847 L1537.31 682.847 L1536.75 682.847 L1536.19 682.847 L1535.63 682.847 L1535.08 682.847 L1534.52 682.847 L1533.96 682.847 L1533.4 682.847 L1532.84 682.847 L1532.28 682.847 L1531.72 682.847 L1531.16 682.847 L1530.6 682.847 L1530.04 682.847 L1529.48 682.847 L1528.92 682.847 L1528.36 682.847 L1527.81 682.847 L1527.25 682.847 L1526.69 682.847 L1526.13 682.847 L1525.57 682.847 L1525.01 682.847 L1524.45 682.847 L1523.89 682.847 L1523.33 682.847 L1522.77 682.847 L1522.21 682.847 L1521.65 682.847 L1521.09 682.847 L1520.53 682.847 L1519.98 682.847 L1519.42 682.847 L1518.86 682.847 L1518.3 682.847 L1517.74 682.847 L1517.18 682.847 L1516.62 682.847 L1516.06 682.847 L1515.5 682.847 L1514.94 682.847 L1514.38 682.847 L1513.82 682.847 L1513.26 682.847 L1512.71 682.847 L1512.15 682.847 L1511.59 682.847 L1511.03 682.847 L1510.47 682.847 L1509.91 682.847 L1509.35 682.847 L1508.79 682.847 L1508.23 682.847 L1507.67 682.847 L1507.11 682.847 L1506.55 682.847 L1505.99 682.847 L1505.44 682.847 L1504.88 682.847 L1504.32 682.847 L1503.76 682.847 L1503.2 682.847 L1502.64 682.847 L1502.08 682.847 L1501.52 682.847 L1500.96 682.847 L1500.4 682.847 L1499.84 682.847 L1499.28 682.847 L1498.72 682.847 L1498.16 682.847 L1497.61 682.847 L1497.05 682.847 L1496.49 682.847 L1495.93 682.847 L1495.37 682.847 L1494.81 682.847 L1494.25 682.847 L1493.69 682.847 L1493.13 682.847 L1492.57 682.847 L1492.01 682.847 L1491.45 682.847 L1490.89 682.847 L1490.34 682.847 L1489.78 682.847 L1489.22 682.847 L1488.66 682.847 L1488.1 682.847 L1487.54 682.847 L1486.98 682.847 L1486.42 682.847 L1485.86 682.847 L1485.3 682.847 L1484.74 682.847 L1484.18 682.847 L1483.62 682.847 L1483.07 682.847 L1482.51 682.847 L1481.95 682.847 L1481.39 682.847 L1480.83 682.847 L1480.27 682.847 L1479.71 682.847 L1479.15 682.847 L1478.59 682.847 L1478.03 682.847 L1477.47 682.847 L1476.91 682.847 L1476.35 682.847 L1475.79 682.847 L1475.24 682.847 L1474.68 682.847 L1474.12 682.847 L1473.56 682.847 L1473 682.847 L1472.44 682.847 L1471.88 682.847 L1471.32 682.847 L1470.76 682.847 L1470.2 682.847 L1469.64 682.847 L1469.08 682.847 L1468.52 682.847 L1467.97 682.847 L1467.41 682.847 L1466.85 682.847 L1466.29 682.847 L1465.73 682.847 L1465.17 682.847 L1464.61 682.847 L1464.05 682.847 L1463.49 682.847 L1462.93 682.847 L1462.37 682.847 L1461.81 682.847 L1461.25 682.847 L1460.7 682.847 L1460.14 682.847 L1459.58 682.847 L1459.02 682.847 L1458.46 682.847 L1457.9 682.847 L1457.34 682.847 L1456.78 682.847 L1456.22 682.847 L1455.66 682.847 L1455.1 682.847 L1454.54 682.847 L1453.98 682.847 L1453.42 682.847 L1452.87 682.847 L1452.31 682.847 L1451.75 682.847 L1451.19 682.847 L1450.63 682.847 L1450.07 682.847 L1449.51 682.847 L1448.95 682.847 L1448.39 682.847 L1447.83 682.847 L1447.27 682.847 L1446.71 682.847 L1446.15 682.847 L1445.6 682.847 L1445.04 682.847 L1444.48 682.847 L1443.92 682.847 L1443.36 682.847 L1442.8 682.847 L1442.24 682.847 L1441.68 682.847 L1441.12 682.847 L1440.56 682.847 L1440 682.847 L1439.44 682.847 L1438.88 682.847 L1438.33 682.847 L1437.77 682.847 L1437.21 682.847 L1436.65 682.847 L1436.09 682.847 L1435.53 682.847 L1434.97 682.847 L1434.41 682.847 L1433.85 682.847 L1433.29 682.847 L1432.73 682.847 L1432.17 682.847 L1431.61 682.847 L1431.05 682.847 L1430.5 682.847 L1429.94 682.847 L1429.38 682.847 L1428.82 682.847 L1428.26 682.847 L1427.7 682.847 L1427.14 682.847 L1426.58 682.847 L1426.02 682.847 L1425.46 682.847 L1424.9 682.847 L1424.34 682.847 L1423.78 682.847 L1423.23 682.847 L1422.67 682.847 L1422.11 682.847 L1421.55 682.847 L1420.99 682.847 L1420.43 682.847 L1419.87 682.847 L1419.31 682.847 L1418.75 682.847 L1418.19 682.847 L1417.63 682.847 L1417.07 682.847 L1416.51 682.847 L1415.95 682.847 L1415.4 682.847 L1414.84 682.847 L1414.28 682.847 L1413.72 682.847 L1413.16 682.847 L1412.6 682.847 L1412.04 682.847 L1411.48 682.847 L1410.92 682.847 L1410.36 682.847 L1409.8 682.847 L1409.24 682.847 L1408.68 682.847 L1408.13 682.847 L1407.57 682.847 L1407.01 682.847 L1406.45 682.847 L1405.89 682.847 L1405.33 682.847 L1404.77 682.847 L1404.21 682.847 L1403.65 682.847 L1403.09 682.847 L1402.53 682.847 L1401.97 682.847 L1401.41 682.847 L1400.86 682.847 L1400.3 682.847 L1399.74 682.847 L1399.18 682.847 L1398.62 682.847 L1398.06 682.847 L1397.5 682.847 L1396.94 682.847 L1396.38 682.847 L1395.82 682.847 L1395.26 682.847 L1394.7 682.847 L1394.14 682.847 L1393.58 682.847 L1393.03 682.847 L1392.47 682.847 L1391.91 682.847 L1391.35 682.847 L1390.79 682.847 L1390.23 682.847 L1389.67 682.847 L1389.11 682.847 L1388.55 682.847 L1387.99 682.847 L1387.43 682.847 L1386.87 682.847 L1386.31 682.847 L1385.76 682.847 L1385.2 682.847 L1384.64 682.847 L1384.08 682.847 L1383.52 682.847 L1382.96 682.847 L1382.4 682.847 L1381.84 682.847 L1381.28 682.847 L1380.72 682.847 L1380.16 682.847 L1379.6 682.847 L1379.04 682.847 L1378.49 682.847 L1377.93 682.847 L1377.37 682.847 L1376.81 682.847 L1376.25 682.847 L1375.69 682.847 L1375.13 682.847 L1374.57 682.847 L1374.01 682.847 L1373.45 682.847 L1372.89 682.847 L1372.33 682.847 L1371.77 682.847 L1371.21 682.847 L1370.66 682.847 L1370.1 682.847 L1369.54 682.847 L1368.98 682.847 L1368.42 682.847 L1367.86 682.847 L1367.3 682.847 L1366.74 682.847 L1366.18 682.847 L1365.62 682.847 L1365.06 682.847 L1364.5 682.847 L1363.94 682.847 L1363.39 682.847 L1362.83 682.847 L1362.27 682.847 L1361.71 682.847 L1361.15 682.847 L1360.59 682.847 L1360.03 682.847 L1359.47 682.847 L1358.91 682.847 L1358.35 682.847 L1357.79 682.847 L1357.23 682.847 L1356.67 682.847 L1356.12 682.847 L1355.56 682.847 L1355 682.847 L1354.44 682.847 L1353.88 682.847 L1353.32 682.847 L1352.76 682.847 L1352.2 682.847 L1351.64 682.847 L1351.08 682.847 L1350.52 682.847 L1349.96 682.847 L1349.4 682.847 L1348.84 682.847 L1348.29 682.847 L1347.73 682.847 L1347.17 682.847 L1346.61 682.847 L1346.05 682.847 L1345.49 682.847 L1344.93 682.847 L1344.37 682.847 L1343.81 682.847 L1343.25 682.847 L1342.69 682.847 L1342.13 682.847 L1341.57 682.847 L1341.02 682.847 L1340.46 682.847 L1339.9 682.847 L1339.34 682.847 L1338.78 682.847 L1338.22 682.847 L1337.66 682.847 L1337.1 682.847 L1336.54 682.847 L1335.98 682.847 L1335.42 682.847 L1334.86 682.847 L1334.3 682.847 L1333.75 682.847 L1333.19 682.847 L1332.63 682.847 L1332.07 682.847 L1331.51 682.847 L1330.95 682.847 L1330.39 682.847 L1329.83 682.847 L1329.27 682.847 L1328.71 682.847 L1328.15 682.847 L1327.59 682.847 L1327.03 682.847 L1326.47 682.847 L1325.92 682.847 L1325.36 682.847 L1324.8 682.847 L1324.24 682.847 L1323.68 682.847 L1323.12 682.847 L1322.56 682.847 L1322 682.847 L1321.44 682.847 L1320.88 682.847 L1320.32 682.847 L1319.76 682.847 L1319.2 682.847 L1318.65 682.847 L1318.09 682.847 L1317.53 682.847 L1316.97 682.847 L1316.41 682.847 L1315.85 682.847 L1315.29 682.847 L1314.73 682.847 L1314.17 682.847 L1313.61 682.847 L1313.05 682.847 L1312.49 682.847 L1311.93 682.847 L1311.38 682.847 L1310.82 682.847 L1310.26 682.847 L1309.7 682.847 L1309.14 682.847 L1308.58 682.847 L1308.02 682.847 L1307.46 682.847 L1306.9 682.847 L1306.34 682.847 L1305.78 682.847 L1305.22 682.847 L1304.66 682.847 L1304.1 682.847 L1303.55 682.847 L1302.99 682.847 L1302.43 682.847 L1301.87 682.847 L1301.31 682.847 L1300.75 682.847 L1300.19 682.847 L1299.63 682.847 L1299.07 682.847 L1298.51 682.847 L1297.95 682.847 L1297.39 682.847 L1296.83 682.847 L1296.28 682.847 L1295.72 682.847 L1295.16 682.847 L1294.6 682.847 L1294.04 682.847 L1293.48 682.847 L1292.92 682.847 L1292.36 682.847 L1291.8 682.847 L1291.24 682.847 L1290.68 682.847 L1290.12 682.847 L1289.56 682.847 L1289 682.847 L1288.45 682.847 L1287.89 682.847 L1287.33 682.847 L1286.77 682.847 L1286.21 682.847 L1285.65 682.847 L1285.09 682.847 L1284.53 682.847 L1283.97 682.847 L1283.41 682.847 L1282.85 682.847 L1282.29 682.847 L1281.73 682.847 L1281.18 682.847 L1280.62 682.847 L1280.06 682.847 L1279.5 682.847 L1278.94 682.847 L1278.38 682.847 L1277.82 682.847 L1277.26 682.847 L1276.7 682.847 L1276.14 682.847 L1275.58 682.847 L1275.02 682.847 L1274.46 682.847 L1273.91 682.847 L1273.35 682.847 L1272.79 682.847 L1272.23 682.847 L1271.67 682.847 L1271.11 682.847 L1270.55 682.847 L1269.99 682.847 L1269.43 682.847 L1268.87 682.847 L1268.31 682.847 L1267.75 682.847 L1267.19 682.847 L1266.63 682.847 L1266.08 682.847 L1265.52 682.847 L1264.96 682.847 L1264.4 682.847 L1263.84 682.847 L1263.28 682.847 L1262.72 682.847 L1262.16 682.847 L1261.6 682.847 L1261.04 682.847 L1260.48 682.847 L1259.92 682.847 L1259.36 682.847 L1258.81 682.847 L1258.25 682.847 L1257.69 682.847 L1257.13 682.847 L1256.57 682.847 L1256.01 682.847 L1255.45 682.847 L1254.89 682.847 L1254.33 682.847 L1253.77 682.847 L1253.21 682.847 L1252.65 682.847 L1252.09 682.847 L1251.54 682.847 L1250.98 682.847 L1250.42 682.847 L1249.86 682.847 L1249.3 682.847 L1248.74 682.847 L1248.18 682.847 L1247.62 682.847 L1247.06 682.847 L1246.5 682.847 L1245.94 682.847 L1245.38 682.847 L1244.82 682.847 L1244.26 682.847 L1243.71 682.847 L1243.15 682.847 L1242.59 682.847 L1242.03 682.847 L1241.47 682.847 L1240.91 682.847 L1240.35 682.847 L1239.79 682.847 L1239.23 682.847 L1238.67 682.847 L1238.11 682.847 L1237.55 682.847 L1236.99 682.847 L1236.44 682.847 L1235.88 682.847 L1235.32 682.847 L1234.76 682.847 L1234.2 682.847 L1233.64 682.847 L1233.08 682.847 L1232.52 682.847 L1231.96 682.847 L1231.4 682.847 L1230.84 682.847 L1230.28 682.847 L1229.72 682.847 L1229.17 682.847 L1228.61 682.847 L1228.05 682.847 L1227.49 682.847 L1226.93 682.847 L1226.37 682.847 L1225.81 682.847 L1225.25 682.847 L1224.69 682.847 L1224.13 682.847 L1223.57 682.847 L1223.01 682.847 L1222.45 682.847 L1221.89 682.847 L1221.34 682.847 L1220.78 682.847 L1220.22 682.847 L1219.66 682.847 L1219.1 682.847 L1218.54 682.847 L1217.98 682.847 L1217.42 682.847 L1216.86 682.847 L1216.3 682.847 L1215.74 682.847 L1215.18 682.847 L1214.62 682.847 L1214.07 682.847 L1213.51 682.847 L1212.95 682.847 L1212.39 682.847 L1211.83 682.847 L1211.27 682.847 L1210.71 682.847 L1210.15 682.847 L1209.59 682.847 L1209.03 682.847 L1208.47 682.847 L1207.91 682.847 L1207.35 682.847 L1206.8 682.847 L1206.24 682.847 L1205.68 682.847 L1205.12 682.847 L1204.56 682.847 L1204 682.847 L1203.44 682.847 L1202.88 682.847 L1202.32 682.847 L1201.76 682.847 L1201.2 682.847 L1200.64 682.847 L1200.08 682.847 L1199.52 682.847 L1198.97 682.847 L1198.41 682.847 L1197.85 682.847 L1197.29 682.847 L1196.73 682.847 L1196.17 682.847 L1195.61 682.847 L1195.05 682.847 L1194.49 682.847 L1193.93 682.847 L1193.37 682.847 L1192.81 682.847 L1192.25 682.847 L1191.7 682.847 L1191.14 682.847 L1190.58 682.847 L1190.02 682.847 L1189.46 682.847 L1188.9 682.847 L1188.34 682.847 L1187.78 682.847 L1187.22 682.847 L1186.66 682.847 L1186.1 682.847 L1185.54 682.847 L1184.98 682.847 L1184.43 682.847 L1183.87 682.847 L1183.31 682.847 L1182.75 682.847 L1182.19 682.847 L1181.63 682.847 L1181.07 682.847 L1180.51 682.847 L1179.95 682.847 L1179.39 682.847 L1178.83 682.847 L1178.27 682.847 L1177.71 682.847 L1177.15 682.847 L1176.6 682.847 L1176.04 682.847 L1175.48 682.847 L1174.92 682.847 L1174.36 682.847 L1173.8 682.847 L1173.24 682.847 L1172.68 682.847 L1172.12 682.847 L1171.56 682.847 L1171 682.847 L1170.44 682.847 L1169.88 682.847 L1169.33 682.847 L1168.77 682.847 L1168.21 682.847 L1167.65 682.847 L1167.09 682.847 L1166.53 682.847 L1165.97 682.847 L1165.41 682.847 L1164.85 682.847 L1164.29 682.847 L1163.73 682.847 L1163.17 682.847 L1162.61 682.847 L1162.05 682.847 L1161.5 682.847 L1160.94 682.847 L1160.38 682.847 L1159.82 682.847 L1159.26 682.847 L1158.7 682.847 L1158.14 682.847 L1157.58 682.847 L1157.02 682.847 L1156.46 682.847 L1155.9 682.847 L1155.34 682.847 L1154.78 682.847 L1154.23 682.847 L1153.67 682.847 L1153.11 682.847 L1152.55 682.847 L1151.99 682.847 L1151.43 682.847 L1150.87 682.847 L1150.31 682.847 L1149.75 682.847 L1149.19 682.847 L1148.63 682.847 L1148.07 682.847 L1147.51 682.847 L1146.96 682.847 L1146.4 682.847 L1145.84 682.847 L1145.28 682.847 L1144.72 682.847 L1144.16 682.847 L1143.6 682.847 L1143.04 682.847 L1142.48 682.847 L1141.92 682.847 L1141.36 682.847 L1140.8 682.847 L1140.24 682.847 L1139.68 682.847 L1139.13 682.847 L1138.57 682.847 L1138.01 682.847 L1137.45 682.847 L1136.89 682.847 L1136.33 682.847 L1135.77 682.847 L1135.21 682.847 L1134.65 682.847 L1134.09 682.847 L1133.53 682.847 L1132.97 682.847 L1132.41 682.847 L1131.86 682.847 L1131.3 682.847 L1130.74 682.847 L1130.18 682.847 L1129.62 682.847 L1129.06 682.847 L1128.5 682.847 L1127.94 682.847 L1127.38 682.847 L1126.82 682.847 L1126.26 682.847 L1125.7 682.847 L1125.14 682.847 L1124.59 682.847 L1124.03 682.847 L1123.47 682.847 L1122.91 682.847 L1122.35 682.847 L1121.79 682.847 L1121.23 682.847 L1120.67 682.847 L1120.11 682.847 L1119.55 682.847 L1118.99 682.847 L1118.43 682.847 L1117.87 682.847 L1117.31 682.847 L1116.76 682.847 L1116.2 682.847 L1115.64 682.847 L1115.08 682.847 L1114.52 682.847 L1113.96 682.847 L1113.4 682.847 L1112.84 682.847 L1112.28 682.847 L1111.72 682.847 L1111.16 682.847 L1110.6 682.847 L1110.04 682.847 L1109.49 682.847 L1108.93 682.847 L1108.37 682.847 L1107.81 682.847 L1107.25 682.847 L1106.69 682.847 L1106.13 682.847 L1105.57 682.847 L1105.01 682.847 L1104.45 682.847 L1103.89 682.847 L1103.33 682.847 L1102.77 682.847 L1102.22 682.847 L1101.66 682.847 L1101.1 682.847 L1100.54 682.847 L1099.98 682.847 L1099.42 682.847 L1098.86 682.847 L1098.3 682.847 L1097.74 682.847 L1097.18 682.847 L1096.62 682.847 L1096.06 682.847 L1095.5 682.847 L1094.94 682.847 L1094.39 682.847 L1093.83 682.847 L1093.27 682.847 L1092.71 682.847 L1092.15 682.847 L1091.59 682.847 L1091.03 682.847 L1090.47 682.847 L1089.91 682.847 L1089.35 682.847 L1088.79 682.847 L1088.23 682.847 L1087.67 682.847 L1087.12 682.847 L1086.56 682.847 L1086 682.847 L1085.44 682.847 L1084.88 682.847 L1084.32 682.847 L1083.76 682.847 L1083.2 682.847 L1082.64 682.847 L1082.08 682.847 L1081.52 682.847 L1080.96 682.847 L1080.4 682.847 L1079.85 682.847 L1079.29 682.847 L1078.73 682.847 L1078.17 682.847 L1077.61 682.847 L1077.05 682.847 L1076.49 682.847 L1075.93 682.847 L1075.37 682.847 L1074.81 682.847 L1074.25 682.847 L1073.69 682.847 L1073.13 682.847 L1072.57 682.847 L1072.02 682.847 L1071.46 682.847 L1070.9 682.847 L1070.34 682.847 L1069.78 682.847 L1069.22 682.847 L1068.66 682.847 L1068.1 682.847 L1067.54 682.847 L1066.98 682.847 L1066.42 682.847 L1065.86 682.847 L1065.3 682.847 L1064.75 682.847 L1064.19 682.847 L1063.63 682.847 L1063.07 682.847 L1062.51 682.847 L1061.95 682.847 L1061.39 682.847 L1060.83 682.847 L1060.27 682.847 L1059.71 682.847 L1059.15 682.847 L1058.59 682.847 L1058.03 682.847 L1057.48 682.847 L1056.92 682.847 L1056.36 682.847 L1055.8 682.847 L1055.24 682.847 L1054.68 682.847 L1054.12 682.847 L1053.56 682.847 L1053 682.847 L1052.44 682.847 L1051.88 682.847 L1051.32 682.847 L1050.76 682.847 L1050.2 682.847 L1049.65 682.847 L1049.09 682.847 L1048.53 682.847 L1047.97 682.847 L1047.41 682.847 L1046.85 682.847 L1046.29 682.847 L1045.73 682.847 L1045.17 682.847 L1044.61 682.847 L1044.05 682.847 L1043.49 682.847 L1042.93 682.847 L1042.38 682.847 L1041.82 682.847 L1041.26 682.847 L1040.7 682.847 L1040.14 682.847 L1039.58 682.847 L1039.02 682.847 L1038.46 682.847 L1037.9 682.847 L1037.34 682.847 L1036.78 682.847 L1036.22 682.847 L1035.66 682.847 L1035.1 682.847 L1034.55 682.847 L1033.99 682.847 L1033.43 682.847 L1032.87 682.847 L1032.31 682.847 L1031.75 682.847 L1031.19 682.847 L1030.63 682.847 L1030.07 682.847 L1029.51 682.847 L1028.95 682.847 L1028.39 682.847 L1027.83 682.847 L1027.28 682.847 L1026.72 682.847 L1026.16 682.847 L1025.6 682.847 L1025.04 682.847 L1024.48 682.847 L1023.92 682.847 L1023.36 682.847 L1022.8 682.847 L1022.24 682.847 L1021.68 682.847 L1021.12 682.847 L1020.56 682.847 L1020.01 682.847 L1019.45 682.847 L1018.89 682.847 L1018.33 682.847 L1017.77 682.847 L1017.21 682.847 L1016.65 682.847 L1016.09 682.847 L1015.53 682.847 L1014.97 682.847 L1014.41 682.847 L1013.85 682.847 L1013.29 682.847 L1012.73 682.847 L1012.18 682.847 L1011.62 682.847 L1011.06 682.847 L1010.5 682.847 L1009.94 682.847 L1009.38 682.847 L1008.82 682.847 L1008.26 682.847 L1007.7 682.847 L1007.14 682.847 L1006.58 682.847 L1006.02 682.847 L1005.46 682.847 L1004.91 682.847 L1004.35 682.847 L1003.79 682.847 L1003.23 682.847 L1002.67 682.847 L1002.11 682.847 L1001.55 682.847 L1000.99 682.847 L1000.43 682.847 L999.872 682.847 L999.313 682.847 L998.754 682.847 L998.194 682.847 L997.635 682.847 L997.076 682.847 L996.517 682.847 L995.957 682.847 L995.398 682.847 L994.839 682.847 L994.28 682.847 L993.72 682.847 L993.161 682.847 L992.602 682.847 L992.043 682.847 L991.483 682.847 L990.924 682.847 L990.365 682.847 L989.806 682.847 L989.246 682.847 L988.687 682.847 L988.128 682.847 L987.569 682.847 L987.009 682.847 L986.45 682.847 L985.891 682.847 L985.332 682.847 L984.772 682.847 L984.213 682.847 L983.654 682.847 L983.095 682.847 L982.535 682.847 L981.976 682.847 L981.417 682.847 L980.858 682.847 L980.298 682.847 L979.739 682.847 L979.18 682.847 L978.621 682.847 L978.061 682.847 L977.502 682.847 L976.943 682.847 L976.384 682.847 L975.824 682.847 L975.265 682.847 L974.706 682.847 L974.147 682.847 L973.587 682.847 L973.028 682.847 L972.469 682.847 L971.91 682.847 L971.35 682.847 L970.791 682.847 L970.232 682.847 L969.673 682.847 L969.113 682.847 L968.554 682.847 L967.995 682.847 L967.436 682.847 L966.876 682.847 L966.317 682.847 L965.758 682.847 L965.199 682.847 L964.639 682.847 L964.08 682.847 L963.521 682.847 L962.962 682.847 L962.402 682.847 L961.843 682.847 L961.284 682.847 L960.725 682.847 L960.165 682.847 L959.606 682.847 L959.047 682.847 L958.488 682.847 L957.928 682.847 L957.369 682.847 L956.81 682.847 L956.251 682.847 L955.691 682.847 L955.132 682.847 L954.573 682.847 L954.014 682.847 L953.454 682.847 L952.895 682.847 L952.336 682.847 L951.777 682.847 L951.217 682.847 L950.658 682.847 L950.099 682.847 L949.54 682.847 L948.98 682.847 L948.421 682.847 L947.862 682.847 L947.303 682.847 L946.743 682.847 L946.184 682.847 L945.625 682.847 L945.066 682.847 L944.506 682.847 L943.947 682.847 L943.388 682.847 L942.829 682.847 L942.269 682.847 L941.71 682.847 L941.151 682.847 L940.592 682.847 L940.032 682.847 L939.473 682.847 L938.914 682.847 L938.355 682.847 L937.795 682.847 L937.236 682.847 L936.677 682.847 L936.118 682.847 L935.558 682.847 L934.999 682.847 L934.44 682.847 L933.881 682.847 L933.321 682.847 L932.762 682.847 L932.203 682.847 L931.644 682.847 L931.084 682.847 L930.525 682.847 L929.966 682.847 L929.406 682.847 L928.847 682.847 L928.288 682.847 L927.729 682.847 L927.169 682.847 L926.61 682.847 L926.051 682.847 L925.492 682.847 L924.932 682.847 L924.373 682.847 L923.814 682.847 L923.255 682.847 L922.695 682.847 L922.136 682.847 L921.577 682.847 L921.018 682.847 L920.458 682.847 L919.899 682.847 L919.34 682.847 L918.781 682.847 L918.221 682.847 L917.662 682.847 L917.103 682.847 L916.544 682.847 L915.984 682.847 L915.425 682.847 L914.866 682.847 L914.307 682.847 L913.747 682.847 L913.188 682.847 L912.629 682.847 L912.07 682.847 L911.51 682.847 L910.951 682.847 L910.392 682.847 L909.833 682.847 L909.273 682.847 L908.714 682.847 L908.155 682.847 L907.596 682.847 L907.036 682.847 L906.477 682.847 L905.918 682.847 L905.359 682.847 L904.799 682.847 L904.24 682.847 L903.681 682.847 L903.122 682.847 L902.562 682.847 L902.003 682.847 L901.444 682.847 L900.885 682.847 L900.325 682.847 L899.766 682.847 L899.207 682.847 L898.648 682.847 L898.088 682.847 L897.529 682.847 L896.97 682.847 L896.411 682.847 L895.851 682.847 L895.292 682.847 L894.733 682.847 L894.174 682.847 L893.614 682.847 L893.055 682.847 L892.496 682.847 L891.937 682.847 L891.377 682.847 L890.818 682.847 L890.259 682.847 L889.7 682.847 L889.14 682.847 L888.581 682.847 L888.022 682.847 L887.463 682.847 L886.903 682.847 L886.344 682.847 L885.785 682.847 L885.226 682.847 L884.666 682.847 L884.107 682.847 L883.548 682.847 L882.989 682.847 L882.429 682.847 L881.87 682.847 L881.311 682.847 L880.752 682.847 L880.192 682.847 L879.633 682.847 L879.074 682.847 L878.515 682.847 L877.955 682.847 L877.396 682.847 L876.837 682.847 L876.278 682.847 L875.718 682.847 L875.159 682.847 L874.6 682.847 L874.041 682.847 L873.481 682.847 L872.922 682.847 L872.363 682.847 L871.804 682.847 L871.244 682.847 L870.685 682.847 L870.126 682.847 L869.567 682.847 L869.007 682.847 L868.448 682.847 L867.889 682.847 L867.33 682.847 L866.77 682.847 L866.211 682.847 L865.652 682.847 L865.093 682.847 L864.533 682.847 L863.974 682.847 L863.415 682.847 L862.856 682.847 L862.296 682.847 L861.737 682.847 L861.178 682.847 L860.619 682.847 L860.059 682.847 L859.5 682.847 L858.941 682.847 L858.382 682.847 L857.822 682.847 L857.263 682.847 L856.704 682.847 L856.145 682.847 L855.585 682.847 L855.026 682.847 L854.467 682.847 L853.908 682.847 L853.348 682.847 L852.789 682.847 L852.23 682.847 L851.671 682.847 L851.111 682.847 L850.552 682.847 L849.993 682.847 L849.434 682.847 L848.874 682.847 L848.315 682.847 L847.756 682.847 L847.197 682.847 L846.637 682.847 L846.078 682.847 L845.519 682.847 L844.96 682.847 L844.4 682.847 L843.841 682.847 L843.282 682.847 L842.723 682.847 L842.163 682.847 L841.604 682.847 L841.045 682.847 L840.486 682.847 L839.926 682.847 L839.367 682.847 L838.808 682.847 L838.249 682.847 L837.689 682.847 L837.13 682.847 L836.571 682.847 L836.012 682.847 L835.452 682.847 L834.893 682.847 L834.334 682.847 L833.775 682.847 L833.215 682.847 L832.656 682.847 L832.097 682.847 L831.538 682.847 L830.978 682.847 L830.419 682.847 L829.86 682.847 L829.301 682.847 L828.741 682.847 L828.182 682.847 L827.623 682.847 L827.064 682.847 L826.504 682.847 L825.945 682.847 L825.386 682.847 L824.827 682.847 L824.267 682.847 L823.708 682.847 L823.149 682.847 L822.59 682.847 L822.03 682.847 L821.471 682.847 L820.912 682.847 L820.353 682.847 L819.793 682.847 L819.234 682.847 L818.675 682.847 L818.116 682.847 L817.556 682.847 L816.997 682.847 L816.438 682.847 L815.879 682.847 L815.319 682.847 L814.76 682.847 L814.201 682.847 L813.642 682.847 L813.082 682.847 L812.523 682.847 L811.964 682.847 L811.405 682.847 L810.845 682.847 L810.286 682.847 L809.727 682.847 L809.168 682.847 L808.608 682.847 L808.049 682.847 L807.49 682.847 L806.931 682.847 L806.371 682.847 L805.812 682.847 L805.253 682.847 L804.693 682.847 L804.134 682.847 L803.575 682.847 L803.016 682.847 L802.456 682.847 L801.897 682.847 L801.338 682.847 L800.779 682.847 L800.219 682.847 L799.66 682.847 L799.101 682.847 L798.542 682.847 L797.982 682.847 L797.423 682.847 L796.864 682.847 L796.305 682.847 L795.745 682.847 L795.186 682.847 L794.627 682.847 L794.068 682.847 L793.508 682.847 L792.949 682.847 L792.39 682.847 L791.831 682.847 L791.271 682.847 L790.712 682.847 L790.153 682.847 L789.594 682.847 L789.034 682.847 L788.475 682.847 L787.916 682.847 L787.357 682.847 L786.797 682.847 L786.238 682.847 L785.679 682.847 L785.12 682.847 L784.56 682.847 L784.001 682.847 L783.442 682.847 L782.883 682.847 L782.323 682.847 L781.764 682.847 L781.205 682.847 L780.646 682.847 L780.086 682.847 L779.527 682.847 L778.968 682.847 L778.409 682.847 L777.849 682.847 L777.29 682.847 L776.731 682.847 L776.172 682.847 L775.612 682.847 L775.053 682.847 L774.494 682.847 L773.935 682.847 L773.375 682.847 L772.816 682.847 L772.257 682.847 L771.698 682.847 L771.138 682.847 L770.579 682.847 L770.02 682.847 L769.461 682.847 L768.901 682.847 L768.342 682.847 L767.783 682.847 L767.224 682.847 L766.664 682.847 L766.105 682.847 L765.546 682.847 L764.987 682.847 L764.427 682.847 L763.868 682.847 L763.309 682.847 L762.75 682.847 L762.19 682.847 L761.631 682.847 L761.072 682.847 L760.513 682.847 L759.953 682.847 L759.394 682.847 L758.835 682.847 L758.276 682.847 L757.716 682.847 L757.157 682.847 L756.598 682.847 L756.039 682.847 L755.479 682.847 L754.92 682.847 L754.361 682.847 L753.802 682.847 L753.242 682.847 L752.683 682.847 L752.124 682.847 L751.565 682.847 L751.005 682.847 L750.446 682.847 L749.887 682.847 L749.328 682.847 L748.768 682.847 L748.209 682.847 L747.65 682.847 L747.091 682.847 L746.531 682.847 L745.972 682.847 L745.413 682.847 L744.854 682.847 L744.294 682.847 L743.735 682.847 L743.176 682.847 L742.617 682.847 L742.057 682.847 L741.498 682.847 L740.939 682.847 L740.38 682.847 L739.82 682.847 L739.261 682.847 L738.702 682.847 L738.143 682.847 L737.583 682.847 L737.024 682.847 L736.465 682.847 L735.906 682.847 L735.346 682.847 L734.787 682.847 L734.228 682.847 L733.669 682.847 L733.109 682.847 L732.55 682.847 L731.991 682.847 L731.432 682.847 L730.872 682.847 L730.313 682.847 L729.754 682.847 L729.195 682.847 L728.635 682.847 L728.076 682.847 L727.517 682.847 L726.958 682.847 L726.398 682.847 L725.839 682.847 L725.28 682.847 L724.721 682.847 L724.161 682.847 L723.602 682.847 L723.043 682.847 L722.484 682.847 L721.924 682.847 L721.365 682.847 L720.806 682.847 L720.247 682.847  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip083)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.471 720.806,683.471 721.365,683.471 721.924,683.471 722.484,683.471 723.043,683.471 723.602,683.471 724.161,683.471 724.721,683.471 725.28,683.471 725.839,683.471 726.398,683.471 726.958,683.471 727.517,683.471 728.076,683.471 728.635,683.471 729.195,683.471 729.754,683.471 730.313,683.471 730.872,683.471 731.432,683.471 731.991,683.471 732.55,683.471 733.109,683.471 733.669,683.471 734.228,683.471 734.787,683.471 735.346,683.471 735.906,683.471 736.465,683.471 737.024,683.471 737.583,683.471 738.143,683.471 738.702,683.471 739.261,683.471 739.82,683.471 740.38,683.471 740.939,683.471 741.498,683.471 742.057,683.471 742.617,683.471 743.176,683.471 743.735,683.471 744.294,683.471 744.854,683.471 745.413,683.471 745.972,683.471 746.531,683.471 747.091,683.471 747.65,683.471 748.209,683.471 748.768,683.471 749.328,683.471 749.887,683.471 750.446,683.471 751.005,683.471 751.565,683.471 752.124,683.471 752.683,683.471 753.242,683.471 753.802,683.471 754.361,683.471 754.92,683.471 755.479,683.471 756.039,683.471 756.598,683.471 757.157,683.471 757.716,683.471 758.276,683.471 758.835,683.471 759.394,683.471 759.953,683.471 760.513,683.471 761.072,683.471 761.631,683.471 762.19,683.471 762.75,683.471 763.309,683.471 763.868,683.471 764.427,683.471 764.987,683.471 765.546,683.471 766.105,683.471 766.664,683.471 767.224,683.471 767.783,683.471 768.342,683.471 768.901,683.471 769.461,683.471 770.02,683.471 770.579,683.471 771.138,683.471 771.698,683.471 772.257,683.471 772.816,683.471 773.375,683.471 773.935,683.471 774.494,683.471 775.053,683.471 775.612,683.471 776.172,683.471 776.731,683.471 777.29,683.471 777.849,683.471 778.409,683.471 778.968,683.471 779.527,683.471 780.086,683.471 780.646,683.471 781.205,683.471 781.764,683.471 782.323,683.471 782.883,683.471 783.442,683.471 784.001,683.471 784.56,683.471 785.12,683.471 785.679,683.471 786.238,683.471 786.797,683.471 787.357,683.471 787.916,683.471 788.475,683.471 789.034,683.471 789.594,683.471 790.153,683.471 790.712,683.471 791.271,683.471 791.831,683.471 792.39,683.471 792.949,683.471 793.508,683.471 794.068,683.471 794.627,683.471 795.186,683.471 795.745,683.471 796.305,683.471 796.864,683.471 797.423,683.471 797.982,683.471 798.542,683.471 799.101,683.471 799.66,683.471 800.219,683.471 800.779,683.471 801.338,683.471 801.897,683.471 802.456,683.471 803.016,683.471 803.575,683.471 804.134,683.471 804.693,683.471 805.253,683.471 805.812,683.471 806.371,683.471 806.931,683.471 807.49,683.471 808.049,683.471 808.608,683.471 809.168,683.471 809.727,683.471 810.286,683.471 810.845,683.471 811.405,683.471 811.964,683.471 812.523,683.471 813.082,683.471 813.642,683.471 814.201,683.471 814.76,683.471 815.319,683.471 815.879,683.471 816.438,683.471 816.997,683.471 817.556,683.471 818.116,683.471 818.675,683.471 819.234,683.471 819.793,683.471 820.353,683.471 820.912,683.471 821.471,683.471 822.03,683.471 822.59,683.471 823.149,683.471 823.708,683.471 824.267,683.471 824.827,683.471 825.386,683.471 825.945,683.471 826.504,683.471 827.064,683.471 827.623,683.471 828.182,683.471 828.741,683.471 829.301,683.471 829.86,683.471 830.419,683.471 830.978,683.471 831.538,683.471 832.097,683.471 832.656,683.471 833.215,683.471 833.775,683.471 834.334,683.471 834.893,683.471 835.452,683.471 836.012,683.471 836.571,683.471 837.13,683.471 837.689,683.471 838.249,683.471 838.808,683.471 839.367,683.471 839.926,683.471 840.486,683.471 841.045,683.471 841.604,683.471 842.163,683.471 842.723,683.471 843.282,683.471 843.841,683.471 844.4,683.471 844.96,683.471 845.519,683.471 846.078,683.471 846.637,683.471 847.197,683.471 847.756,683.471 848.315,683.471 848.874,683.471 849.434,683.471 849.993,683.471 850.552,683.471 851.111,683.471 851.671,683.471 852.23,683.471 852.789,683.471 853.348,683.471 853.908,683.471 854.467,683.471 855.026,683.471 855.585,683.471 856.145,683.471 856.704,683.471 857.263,683.471 857.822,683.471 858.382,683.471 858.941,683.471 859.5,683.471 860.059,683.471 860.619,683.471 861.178,683.471 861.737,683.471 862.296,683.471 862.856,683.471 863.415,683.471 863.974,683.471 864.533,683.471 865.093,683.471 865.652,683.471 866.211,683.471 866.77,683.471 867.33,683.471 867.889,683.471 868.448,683.471 869.007,683.471 869.567,683.471 870.126,683.471 870.685,683.471 871.244,683.471 871.804,683.471 872.363,683.471 872.922,683.471 873.481,683.471 874.041,683.471 874.6,683.471 875.159,683.471 875.718,683.471 876.278,683.471 876.837,683.471 877.396,683.471 877.955,683.471 878.515,683.471 879.074,683.471 879.633,683.471 880.192,683.471 880.752,683.471 881.311,683.471 881.87,683.471 882.429,683.471 882.989,683.471 883.548,683.471 884.107,683.471 884.666,683.471 885.226,683.471 885.785,683.471 886.344,683.471 886.903,683.471 887.463,683.471 888.022,683.471 888.581,683.471 889.14,683.471 889.7,683.471 890.259,683.471 890.818,683.471 891.377,683.471 891.937,683.471 892.496,683.471 893.055,683.471 893.614,683.471 894.174,683.471 894.733,683.471 895.292,683.471 895.851,683.471 896.411,683.471 896.97,683.471 897.529,683.471 898.088,683.471 898.648,683.471 899.207,683.471 899.766,683.471 900.325,683.471 900.885,683.471 901.444,683.471 902.003,683.471 902.562,683.471 903.122,683.471 903.681,683.471 904.24,683.471 904.799,683.471 905.359,683.471 905.918,683.471 906.477,683.471 907.036,683.471 907.596,683.471 908.155,683.471 908.714,683.471 909.273,683.471 909.833,683.471 910.392,683.471 910.951,683.471 911.51,683.471 912.07,683.471 912.629,683.471 913.188,683.471 913.747,683.471 914.307,683.471 914.866,683.471 915.425,683.471 915.984,683.471 916.544,683.471 917.103,683.471 917.662,683.471 918.221,683.471 918.781,683.471 919.34,683.471 919.899,683.471 920.458,683.471 921.018,683.471 921.577,683.471 922.136,683.471 922.695,683.471 923.255,683.471 923.814,683.471 924.373,683.471 924.932,683.471 925.492,683.471 926.051,683.471 926.61,683.471 927.169,683.471 927.729,683.471 928.288,683.471 928.847,683.471 929.406,683.471 929.966,683.471 930.525,683.471 931.084,683.471 931.644,683.471 932.203,683.471 932.762,683.471 933.321,683.471 933.881,683.471 934.44,683.471 934.999,683.471 935.558,683.471 936.118,683.471 936.677,683.471 937.236,683.471 937.795,683.471 938.355,683.471 938.914,683.471 939.473,683.471 940.032,683.471 940.592,683.471 941.151,683.471 941.71,683.471 942.269,683.471 942.829,683.471 943.388,683.471 943.947,683.471 944.506,683.471 945.066,683.471 945.625,683.471 946.184,683.471 946.743,683.471 947.303,683.471 947.862,683.471 948.421,683.471 948.98,683.471 949.54,683.471 950.099,683.471 950.658,683.471 951.217,683.471 951.777,683.471 952.336,683.471 952.895,683.471 953.454,683.471 954.014,683.471 954.573,683.471 955.132,683.471 955.691,683.471 956.251,683.471 956.81,683.471 957.369,683.471 957.928,683.471 958.488,683.471 959.047,683.471 959.606,683.471 960.165,683.471 960.725,683.471 961.284,683.471 961.843,683.471 962.402,683.471 962.962,683.471 963.521,683.471 964.08,683.471 964.639,683.471 965.199,683.471 965.758,683.471 966.317,683.471 966.876,683.471 967.436,683.471 967.995,683.471 968.554,683.471 969.113,683.471 969.673,683.471 970.232,683.471 970.791,683.471 971.35,683.471 971.91,683.471 972.469,683.471 973.028,683.471 973.587,683.471 974.147,683.471 974.706,683.471 975.265,683.471 975.824,683.471 976.384,683.471 976.943,683.471 977.502,683.471 978.061,683.471 978.621,683.471 979.18,683.471 979.739,683.471 980.298,683.471 980.858,683.471 981.417,683.471 981.976,683.471 982.535,683.471 983.095,683.471 983.654,683.471 984.213,683.471 984.772,683.471 985.332,683.471 985.891,683.471 986.45,683.471 987.009,683.471 987.569,683.471 988.128,683.471 988.687,683.471 989.246,683.471 989.806,683.471 990.365,683.471 990.924,683.471 991.483,683.471 992.043,683.471 992.602,683.471 993.161,683.471 993.72,683.471 994.28,683.471 994.839,683.471 995.398,683.471 995.957,683.471 996.517,683.471 997.076,683.471 997.635,683.471 998.194,683.471 998.754,683.471 999.313,683.471 999.872,683.471 1000.43,683.471 1000.99,683.471 1001.55,683.471 1002.11,683.471 1002.67,683.471 1003.23,683.471 1003.79,683.471 1004.35,683.471 1004.91,683.471 1005.46,683.471 1006.02,683.471 1006.58,683.471 1007.14,683.471 1007.7,683.471 1008.26,683.471 1008.82,683.471 1009.38,683.471 1009.94,683.471 1010.5,683.471 1011.06,683.471 1011.62,683.471 1012.18,683.471 1012.73,683.471 1013.29,683.471 1013.85,683.471 1014.41,683.471 1014.97,683.471 1015.53,683.471 1016.09,683.471 1016.65,683.471 1017.21,683.471 1017.77,683.471 1018.33,683.471 1018.89,683.471 1019.45,683.471 1020.01,683.471 1020.56,683.471 1021.12,683.471 1021.68,683.471 1022.24,683.471 1022.8,683.471 1023.36,683.471 1023.92,683.471 1024.48,683.471 1025.04,683.471 1025.6,683.471 1026.16,683.471 1026.72,683.471 1027.28,683.471 1027.83,683.471 1028.39,683.471 1028.95,683.471 1029.51,683.471 1030.07,683.471 1030.63,683.471 1031.19,683.471 1031.75,683.471 1032.31,683.471 1032.87,683.471 1033.43,683.471 1033.99,683.471 1034.55,683.471 1035.1,683.471 1035.66,683.471 1036.22,683.471 1036.78,683.471 1037.34,683.471 1037.9,683.471 1038.46,683.471 1039.02,683.471 1039.58,683.471 1040.14,683.471 1040.7,683.471 1041.26,683.471 1041.82,683.471 1042.38,683.471 1042.93,683.471 1043.49,683.471 1044.05,683.471 1044.61,683.471 1045.17,683.471 1045.73,683.471 1046.29,683.471 1046.85,683.471 1047.41,683.471 1047.97,683.471 1048.53,683.471 1049.09,683.471 1049.65,683.471 1050.2,683.471 1050.76,683.471 1051.32,683.471 1051.88,683.471 1052.44,683.471 1053,683.471 1053.56,683.471 1054.12,683.471 1054.68,683.471 1055.24,683.471 1055.8,683.471 1056.36,683.471 1056.92,683.471 1057.48,683.471 1058.03,683.471 1058.59,683.471 1059.15,683.471 1059.71,683.471 1060.27,683.471 1060.83,683.471 1061.39,683.471 1061.95,683.471 1062.51,683.471 1063.07,683.471 1063.63,683.471 1064.19,683.471 1064.75,683.471 1065.3,683.471 1065.86,683.471 1066.42,683.471 1066.98,683.471 1067.54,683.471 1068.1,683.471 1068.66,683.471 1069.22,683.471 1069.78,683.471 1070.34,683.471 1070.9,683.471 1071.46,683.471 1072.02,683.471 1072.57,683.471 1073.13,683.471 1073.69,683.471 1074.25,683.471 1074.81,683.471 1075.37,683.471 1075.93,683.471 1076.49,683.471 1077.05,683.471 1077.61,683.471 1078.17,683.471 1078.73,683.471 1079.29,683.471 1079.85,683.471 1080.4,683.471 1080.96,683.471 1081.52,683.471 1082.08,683.471 1082.64,683.471 1083.2,683.471 1083.76,683.471 1084.32,683.471 1084.88,683.471 1085.44,683.471 1086,683.471 1086.56,683.471 1087.12,683.471 1087.67,683.471 1088.23,683.471 1088.79,683.471 1089.35,683.471 1089.91,683.471 1090.47,683.471 1091.03,683.471 1091.59,683.471 1092.15,683.471 1092.71,683.471 1093.27,683.471 1093.83,683.471 1094.39,683.471 1094.94,683.471 1095.5,683.471 1096.06,683.471 1096.62,683.471 1097.18,683.471 1097.74,683.471 1098.3,683.471 1098.86,683.471 1099.42,683.471 1099.98,683.471 1100.54,683.471 1101.1,683.471 1101.66,683.471 1102.22,683.471 1102.77,683.471 1103.33,683.471 1103.89,683.471 1104.45,683.471 1105.01,683.471 1105.57,683.471 1106.13,683.471 1106.69,683.471 1107.25,683.471 1107.81,683.471 1108.37,683.471 1108.93,683.471 1109.49,683.471 1110.04,683.471 1110.6,683.471 1111.16,683.471 1111.72,683.471 1112.28,683.471 1112.84,683.471 1113.4,683.471 1113.96,683.471 1114.52,683.471 1115.08,683.471 1115.64,683.471 1116.2,683.471 1116.76,683.471 1117.31,683.471 1117.87,683.471 1118.43,683.471 1118.99,683.471 1119.55,683.471 1120.11,683.471 1120.67,683.471 1121.23,683.471 1121.79,683.471 1122.35,683.471 1122.91,683.471 1123.47,683.471 1124.03,683.471 1124.59,683.471 1125.14,683.471 1125.7,683.471 1126.26,683.471 1126.82,683.471 1127.38,683.471 1127.94,683.471 1128.5,683.471 1129.06,683.471 1129.62,683.471 1130.18,683.471 1130.74,683.471 1131.3,683.471 1131.86,683.471 1132.41,683.471 1132.97,683.471 1133.53,683.471 1134.09,683.471 1134.65,683.471 1135.21,683.471 1135.77,683.471 1136.33,683.471 1136.89,683.471 1137.45,683.471 1138.01,683.471 1138.57,683.471 1139.13,683.471 1139.68,683.471 1140.24,683.471 1140.8,683.471 1141.36,683.471 1141.92,683.471 1142.48,683.471 1143.04,683.471 1143.6,683.471 1144.16,683.471 1144.72,683.471 1145.28,683.471 1145.84,683.471 1146.4,683.471 1146.96,683.471 1147.51,683.471 1148.07,683.471 1148.63,683.471 1149.19,683.471 1149.75,683.471 1150.31,683.471 1150.87,683.471 1151.43,683.471 1151.99,683.471 1152.55,683.471 1153.11,683.471 1153.67,683.471 1154.23,683.471 1154.78,683.471 1155.34,683.471 1155.9,683.471 1156.46,683.471 1157.02,683.471 1157.58,683.471 1158.14,683.471 1158.7,683.471 1159.26,683.471 1159.82,683.471 1160.38,683.471 1160.94,683.471 1161.5,683.471 1162.05,683.471 1162.61,683.471 1163.17,683.471 1163.73,683.471 1164.29,683.471 1164.85,683.471 1165.41,683.471 1165.97,683.471 1166.53,683.471 1167.09,683.471 1167.65,683.471 1168.21,683.471 1168.77,683.471 1169.33,683.471 1169.88,683.471 1170.44,683.471 1171,683.471 1171.56,683.471 1172.12,683.471 1172.68,683.471 1173.24,683.471 1173.8,683.471 1174.36,683.471 1174.92,683.471 1175.48,683.471 1176.04,683.471 1176.6,683.471 1177.15,683.471 1177.71,683.471 1178.27,683.471 1178.83,683.471 1179.39,683.471 1179.95,683.471 1180.51,683.471 1181.07,683.471 1181.63,683.471 1182.19,683.471 1182.75,683.471 1183.31,683.471 1183.87,683.471 1184.43,683.471 1184.98,683.471 1185.54,683.471 1186.1,683.471 1186.66,683.471 1187.22,683.471 1187.78,683.471 1188.34,683.471 1188.9,683.471 1189.46,683.471 1190.02,683.471 1190.58,683.471 1191.14,683.471 1191.7,683.471 1192.25,683.471 1192.81,683.471 1193.37,683.471 1193.93,683.471 1194.49,683.471 1195.05,683.471 1195.61,683.471 1196.17,683.471 1196.73,683.471 1197.29,683.471 1197.85,683.471 1198.41,683.471 1198.97,683.471 1199.52,683.471 1200.08,683.471 1200.64,683.471 1201.2,683.471 1201.76,683.471 1202.32,683.471 1202.88,683.471 1203.44,683.471 1204,683.471 1204.56,683.471 1205.12,683.471 1205.68,683.471 1206.24,683.471 1206.8,683.471 1207.35,683.471 1207.91,683.471 1208.47,683.471 1209.03,683.471 1209.59,683.471 1210.15,683.471 1210.71,683.471 1211.27,683.471 1211.83,683.471 1212.39,683.471 1212.95,683.471 1213.51,683.471 1214.07,683.471 1214.62,683.471 1215.18,683.471 1215.74,683.471 1216.3,683.471 1216.86,683.471 1217.42,683.471 1217.98,683.471 1218.54,683.471 1219.1,683.471 1219.66,683.471 1220.22,683.471 1220.78,683.471 1221.34,683.471 1221.89,683.471 1222.45,683.471 1223.01,683.471 1223.57,683.471 1224.13,683.471 1224.69,683.471 1225.25,683.471 1225.81,683.471 1226.37,683.471 1226.93,683.471 1227.49,683.471 1228.05,683.471 1228.61,683.471 1229.17,683.471 1229.72,683.471 1230.28,683.471 1230.84,683.471 1231.4,683.471 1231.96,683.471 1232.52,683.471 1233.08,683.471 1233.64,683.471 1234.2,683.471 1234.76,683.471 1235.32,683.471 1235.88,683.471 1236.44,683.471 1236.99,683.471 1237.55,683.471 1238.11,683.471 1238.67,683.471 1239.23,683.471 1239.79,683.471 1240.35,683.471 1240.91,683.471 1241.47,683.471 1242.03,683.471 1242.59,683.471 1243.15,683.471 1243.71,683.471 1244.26,683.471 1244.82,683.471 1245.38,683.471 1245.94,683.471 1246.5,683.471 1247.06,683.471 1247.62,683.471 1248.18,683.471 1248.74,683.471 1249.3,683.471 1249.86,683.471 1250.42,683.471 1250.98,683.471 1251.54,683.471 1252.09,683.471 1252.65,683.471 1253.21,683.471 1253.77,683.471 1254.33,683.471 1254.89,683.471 1255.45,683.471 1256.01,683.471 1256.57,683.471 1257.13,683.471 1257.69,683.471 1258.25,683.471 1258.81,683.471 1259.36,683.471 1259.92,683.471 1260.48,683.471 1261.04,683.471 1261.6,683.471 1262.16,683.471 1262.72,683.471 1263.28,683.471 1263.84,683.471 1264.4,683.471 1264.96,683.471 1265.52,683.471 1266.08,683.471 1266.63,683.471 1267.19,683.471 1267.75,683.471 1268.31,683.471 1268.87,683.471 1269.43,683.471 1269.99,683.471 1270.55,683.471 1271.11,683.471 1271.67,683.471 1272.23,683.471 1272.79,683.471 1273.35,683.471 1273.91,683.471 1274.46,683.471 1275.02,683.471 1275.58,683.471 1276.14,683.471 1276.7,683.471 1277.26,683.471 1277.82,683.471 1278.38,683.471 1278.94,683.471 1279.5,683.471 1280.06,683.471 1280.62,683.471 1281.18,683.471 1281.73,683.471 1282.29,683.471 1282.85,683.471 1283.41,683.471 1283.97,683.471 1284.53,683.471 1285.09,683.471 1285.65,683.471 1286.21,683.471 1286.77,683.471 1287.33,683.471 1287.89,683.471 1288.45,683.471 1289,683.471 1289.56,683.471 1290.12,683.471 1290.68,683.471 1291.24,683.471 1291.8,683.471 1292.36,683.471 1292.92,683.471 1293.48,683.471 1294.04,683.471 1294.6,683.471 1295.16,683.471 1295.72,683.471 1296.28,683.471 1296.83,683.471 1297.39,683.471 1297.95,683.471 1298.51,683.471 1299.07,683.471 1299.63,683.471 1300.19,683.471 1300.75,683.471 1301.31,683.471 1301.87,683.471 1302.43,683.471 1302.99,683.471 1303.55,683.471 1304.1,683.471 1304.66,683.471 1305.22,683.471 1305.78,683.471 1306.34,683.471 1306.9,683.471 1307.46,683.471 1308.02,683.471 1308.58,683.471 1309.14,683.471 1309.7,683.471 1310.26,683.471 1310.82,683.471 1311.38,683.471 1311.93,683.471 1312.49,683.471 1313.05,683.471 1313.61,683.471 1314.17,683.471 1314.73,683.471 1315.29,683.471 1315.85,683.471 1316.41,683.471 1316.97,683.471 1317.53,683.471 1318.09,683.471 1318.65,683.471 1319.2,683.471 1319.76,683.471 1320.32,683.471 1320.88,683.471 1321.44,683.471 1322,683.471 1322.56,683.471 1323.12,683.471 1323.68,683.471 1324.24,683.471 1324.8,683.471 1325.36,683.471 1325.92,683.471 1326.47,683.471 1327.03,683.471 1327.59,683.471 1328.15,683.471 1328.71,683.471 1329.27,683.471 1329.83,683.471 1330.39,683.471 1330.95,683.471 1331.51,683.471 1332.07,683.471 1332.63,683.471 1333.19,683.471 1333.75,683.471 1334.3,683.471 1334.86,683.471 1335.42,683.471 1335.98,683.471 1336.54,683.471 1337.1,683.471 1337.66,683.471 1338.22,683.471 1338.78,683.471 1339.34,683.471 1339.9,683.471 1340.46,683.471 1341.02,683.471 1341.57,683.471 1342.13,683.471 1342.69,683.471 1343.25,683.471 1343.81,683.471 1344.37,683.471 1344.93,683.471 1345.49,683.471 1346.05,683.471 1346.61,683.471 1347.17,683.471 1347.73,683.471 1348.29,683.471 1348.84,683.471 1349.4,683.471 1349.96,683.471 1350.52,683.471 1351.08,683.471 1351.64,683.471 1352.2,683.471 1352.76,683.471 1353.32,683.471 1353.88,683.471 1354.44,683.471 1355,683.471 1355.56,683.471 1356.12,683.471 1356.67,683.471 1357.23,683.471 1357.79,683.471 1358.35,683.471 1358.91,683.471 1359.47,683.471 1360.03,683.471 1360.59,683.471 1361.15,683.471 1361.71,683.471 1362.27,683.471 1362.83,683.471 1363.39,683.471 1363.94,683.471 1364.5,683.471 1365.06,683.471 1365.62,683.471 1366.18,683.471 1366.74,683.471 1367.3,683.471 1367.86,683.471 1368.42,683.471 1368.98,683.471 1369.54,683.471 1370.1,683.471 1370.66,683.471 1371.21,683.471 1371.77,683.471 1372.33,683.471 1372.89,683.471 1373.45,683.471 1374.01,683.471 1374.57,683.471 1375.13,683.471 1375.69,683.471 1376.25,683.471 1376.81,683.471 1377.37,683.471 1377.93,683.471 1378.49,683.471 1379.04,683.471 1379.6,683.471 1380.16,683.471 1380.72,683.471 1381.28,683.471 1381.84,683.471 1382.4,683.471 1382.96,683.471 1383.52,683.471 1384.08,683.471 1384.64,683.471 1385.2,683.471 1385.76,683.471 1386.31,683.471 1386.87,683.471 1387.43,683.471 1387.99,683.471 1388.55,683.471 1389.11,683.471 1389.67,683.471 1390.23,683.471 1390.79,683.471 1391.35,683.471 1391.91,683.471 1392.47,683.471 1393.03,683.471 1393.58,683.471 1394.14,683.471 1394.7,683.471 1395.26,683.471 1395.82,683.471 1396.38,683.471 1396.94,683.471 1397.5,683.471 1398.06,683.471 1398.62,683.471 1399.18,683.471 1399.74,683.471 1400.3,683.471 1400.86,683.471 1401.41,683.471 1401.97,683.471 1402.53,683.471 1403.09,683.471 1403.65,683.471 1404.21,683.471 1404.77,683.471 1405.33,683.471 1405.89,683.471 1406.45,683.471 1407.01,683.471 1407.57,683.471 1408.13,683.471 1408.68,683.471 1409.24,683.471 1409.8,683.471 1410.36,683.471 1410.92,683.471 1411.48,683.471 1412.04,683.471 1412.6,683.471 1413.16,683.471 1413.72,683.471 1414.28,683.471 1414.84,683.471 1415.4,683.471 1415.95,683.471 1416.51,683.471 1417.07,683.471 1417.63,683.471 1418.19,683.471 1418.75,683.471 1419.31,683.471 1419.87,683.471 1420.43,683.471 1420.99,683.471 1421.55,683.471 1422.11,683.471 1422.67,683.471 1423.23,683.471 1423.78,683.471 1424.34,683.471 1424.9,683.471 1425.46,683.471 1426.02,683.471 1426.58,683.471 1427.14,683.471 1427.7,683.471 1428.26,683.471 1428.82,683.471 1429.38,683.471 1429.94,683.471 1430.5,683.471 1431.05,683.471 1431.61,683.471 1432.17,683.471 1432.73,683.471 1433.29,683.471 1433.85,683.471 1434.41,683.471 1434.97,683.471 1435.53,683.471 1436.09,683.471 1436.65,683.471 1437.21,683.471 1437.77,683.471 1438.33,683.471 1438.88,683.471 1439.44,683.471 1440,683.471 1440.56,683.471 1441.12,683.471 1441.68,683.471 1442.24,683.471 1442.8,683.471 1443.36,683.471 1443.92,683.471 1444.48,683.471 1445.04,683.471 1445.6,683.471 1446.15,683.471 1446.71,683.471 1447.27,683.471 1447.83,683.471 1448.39,683.471 1448.95,683.471 1449.51,683.471 1450.07,683.471 1450.63,683.471 1451.19,683.471 1451.75,683.471 1452.31,683.471 1452.87,683.471 1453.42,683.471 1453.98,683.471 1454.54,683.471 1455.1,683.471 1455.66,683.471 1456.22,683.471 1456.78,683.471 1457.34,683.471 1457.9,683.471 1458.46,683.471 1459.02,683.471 1459.58,683.471 1460.14,683.471 1460.7,683.471 1461.25,683.471 1461.81,683.471 1462.37,683.471 1462.93,683.471 1463.49,683.471 1464.05,683.471 1464.61,683.471 1465.17,683.471 1465.73,683.471 1466.29,683.471 1466.85,683.471 1467.41,683.471 1467.97,683.471 1468.52,683.471 1469.08,683.471 1469.64,683.471 1470.2,683.471 1470.76,683.471 1471.32,683.471 1471.88,683.471 1472.44,683.471 1473,683.471 1473.56,683.471 1474.12,683.471 1474.68,683.471 1475.24,683.471 1475.79,683.471 1476.35,683.471 1476.91,683.471 1477.47,683.471 1478.03,683.471 1478.59,683.471 1479.15,683.471 1479.71,683.471 1480.27,683.471 1480.83,683.471 1481.39,683.471 1481.95,683.471 1482.51,683.471 1483.07,683.471 1483.62,683.471 1484.18,683.471 1484.74,683.471 1485.3,683.471 1485.86,683.471 1486.42,683.471 1486.98,683.471 1487.54,683.471 1488.1,683.471 1488.66,683.471 1489.22,683.471 1489.78,683.471 1490.34,683.471 1490.89,683.471 1491.45,683.471 1492.01,683.471 1492.57,683.471 1493.13,683.471 1493.69,683.471 1494.25,683.471 1494.81,683.471 1495.37,683.471 1495.93,683.471 1496.49,683.471 1497.05,683.471 1497.61,683.471 1498.16,683.471 1498.72,683.471 1499.28,683.471 1499.84,683.471 1500.4,683.471 1500.96,683.471 1501.52,683.471 1502.08,683.471 1502.64,683.471 1503.2,683.471 1503.76,683.471 1504.32,683.471 1504.88,683.471 1505.44,683.471 1505.99,683.471 1506.55,683.471 1507.11,683.471 1507.67,683.471 1508.23,683.471 1508.79,683.471 1509.35,683.471 1509.91,683.471 1510.47,683.471 1511.03,683.471 1511.59,683.471 1512.15,683.471 1512.71,683.471 1513.26,683.471 1513.82,683.471 1514.38,683.471 1514.94,683.471 1515.5,683.471 1516.06,683.471 1516.62,683.471 1517.18,683.471 1517.74,683.471 1518.3,683.471 1518.86,683.471 1519.42,683.471 1519.98,683.471 1520.53,683.471 1521.09,683.471 1521.65,683.471 1522.21,683.471 1522.77,683.471 1523.33,683.471 1523.89,683.471 1524.45,683.471 1525.01,683.471 1525.57,683.471 1526.13,683.471 1526.69,683.471 1527.25,683.471 1527.81,683.471 1528.36,683.471 1528.92,683.471 1529.48,683.471 1530.04,683.471 1530.6,683.471 1531.16,683.471 1531.72,683.471 1532.28,683.471 1532.84,683.471 1533.4,683.471 1533.96,683.471 1534.52,683.471 1535.08,683.471 1535.63,683.471 1536.19,683.471 1536.75,683.471 1537.31,683.471 1537.87,683.471 1538.43,683.471 1538.99,683.471 1539.55,683.471 1540.11,683.471 1540.67,683.471 1541.23,683.471 1541.79,683.471 1542.35,683.471 1542.9,683.471 1543.46,683.471 1544.02,683.471 1544.58,683.471 1545.14,683.471 1545.7,683.471 1546.26,683.471 1546.82,683.471 1547.38,683.471 1547.94,683.471 1548.5,683.471 1549.06,683.471 1549.62,683.471 1550.18,683.471 1550.73,683.471 1551.29,683.471 1551.85,683.471 1552.41,683.471 1552.97,683.471 1553.53,683.471 1554.09,683.471 1554.65,683.471 1555.21,683.471 1555.77,683.471 1556.33,683.471 1556.89,683.471 1557.45,683.471 1558,683.471 1558.56,683.471 1559.12,683.471 1559.68,683.471 1560.24,683.471 1560.8,683.471 1561.36,683.471 1561.92,683.471 1562.48,683.471 1563.04,683.471 1563.6,683.471 1564.16,683.471 1564.72,683.471 1565.28,683.471 1565.83,683.471 1566.39,683.471 1566.95,683.471 1567.51,683.471 1568.07,683.471 1568.63,683.471 1569.19,683.471 1569.75,683.471 1570.31,683.471 1570.87,683.471 1571.43,683.471 1571.99,683.471 1572.55,683.471 1573.1,683.471 1573.66,683.471 1574.22,683.471 1574.78,683.471 1575.34,683.471 1575.9,683.471 1576.46,683.471 1577.02,683.471 1577.58,683.471 1578.14,683.471 1578.7,683.471 1579.26,683.471 1579.82,683.471 1580.37,683.471 1580.93,683.471 1581.49,683.471 1582.05,683.471 1582.61,683.471 1583.17,683.471 1583.73,683.471 1584.29,683.471 1584.85,683.471 1585.41,683.471 1585.97,683.471 1586.53,683.471 1587.09,683.471 1587.65,683.471 1588.2,683.471 1588.76,683.471 1589.32,683.471 1589.88,683.471 1590.44,683.471 1591,683.471 1591.56,683.471 1592.12,683.471 1592.68,683.471 1593.24,683.471 1593.8,683.471 1594.36,683.471 1594.92,683.471 1595.47,683.471 1596.03,683.471 1596.59,683.471 1597.15,683.471 1597.71,683.471 1598.27,683.471 1598.83,683.471 1599.39,683.471 1599.95,683.471 1600.51,683.471 1601.07,683.471 1601.63,683.471 1602.19,683.471 1602.74,683.471 1603.3,683.471 1603.86,683.471 1604.42,683.471 1604.98,683.471 1605.54,683.471 1606.1,683.471 1606.66,683.471 1607.22,683.471 1607.78,683.471 1608.34,683.471 1608.9,683.471 1609.46,683.471 1610.02,683.471 1610.57,683.471 1611.13,683.471 1611.69,683.471 1612.25,683.471 1612.81,683.471 1613.37,683.471 1613.93,683.471 1614.49,683.471 1615.05,683.471 1615.61,683.471 1616.17,683.471 1616.73,683.471 1617.29,683.471 1617.84,683.471 1618.4,683.471 1618.96,683.471 1619.52,683.471 1620.08,683.471 1620.64,683.471 1621.2,683.471 1621.76,683.471 1622.32,683.471 1622.88,683.471 1623.44,683.471 1624,683.471 1624.56,683.471 1625.11,683.471 1625.67,683.471 1626.23,683.471 1626.79,683.471 1627.35,683.471 1627.91,683.471 1628.47,683.471 1629.03,683.471 1629.59,683.471 1630.15,683.471 1630.71,683.471 1631.27,683.471 1631.83,683.471 1632.39,683.471 1632.94,683.471 1633.5,683.471 1634.06,683.471 1634.62,683.471 1635.18,683.471 1635.74,683.471 1636.3,683.471 1636.86,683.471 1637.42,683.471 1637.98,683.471 1638.54,683.471 1639.1,683.471 1639.66,683.471 1640.21,683.471 1640.77,683.471 1641.33,683.471 1641.89,683.471 1642.45,683.471 1643.01,683.471 1643.57,683.471 1644.13,683.471 1644.69,683.471 1645.25,683.471 1645.81,683.471 1646.37,683.471 1646.93,683.471 1647.48,683.471 1648.04,683.471 1648.6,683.471 1649.16,683.471 1649.72,683.471 1650.28,683.471 1650.84,683.471 1651.4,683.471 1651.96,683.471 1652.52,683.471 1653.08,683.471 1653.64,683.471 1654.2,683.471 1654.76,683.471 1655.31,683.471 1655.87,683.471 1656.43,683.471 1656.99,683.471 1657.55,683.471 1658.11,683.471 1658.67,683.471 1659.23,683.471 1659.79,683.471 1660.35,683.471 1660.91,683.471 1661.47,683.471 1662.03,683.471 1662.58,683.471 1663.14,683.471 1663.7,683.471 1664.26,683.471 1664.82,683.471 1665.38,683.471 1665.94,683.471 1666.5,683.471 1667.06,683.471 1667.62,683.471 1668.18,683.471 1668.74,683.471 1669.3,683.471 1669.85,683.471 1670.41,683.471 1670.97,683.471 1671.53,683.471 1672.09,683.471 1672.65,683.471 1673.21,683.471 1673.77,683.471 1674.33,683.471 1674.89,683.471 1675.45,683.471 1676.01,683.471 1676.57,683.471 1677.13,683.471 1677.68,683.471 1678.24,683.471 1678.8,683.471 1679.36,683.471 1679.92,683.471 1680.48,683.471 1681.04,683.471 1681.6,683.471 1682.16,683.471 1682.72,683.471 1683.28,683.471 1683.84,683.471 1684.4,683.471 1684.95,683.471 1685.51,683.471 1686.07,683.471 1686.63,683.471 1687.19,683.471 1687.75,683.471 1688.31,683.471 1688.87,683.471 1689.43,683.471 1689.99,683.471 1690.55,683.471 1691.11,683.471 1691.67,683.471 1692.23,683.471 1692.78,683.471 1693.34,683.471 1693.9,683.471 1694.46,683.471 1695.02,683.471 1695.58,683.471 1696.14,683.471 1696.7,683.471 1697.26,683.471 1697.82,683.471 1698.38,683.471 1698.94,683.471 1699.5,683.471 1700.05,683.471 1700.61,683.471 1701.17,683.471 1701.73,683.471 1702.29,683.471 1702.85,683.471 1703.41,683.471 1703.97,683.471 1704.53,683.471 1705.09,683.471 1705.65,683.471 1706.21,683.471 1706.77,683.471 1707.32,683.471 1707.88,683.471 1708.44,683.471 1709,683.471 1709.56,683.471 1710.12,683.471 1710.68,683.471 1711.24,683.471 1711.8,683.471 1712.36,683.471 1712.92,683.471 1713.48,683.471 1714.04,683.471 1714.6,683.471 1715.15,683.471 1715.71,683.471 1716.27,683.471 1716.83,683.471 1717.39,683.471 1717.95,683.471 1718.51,683.471 1719.07,683.471 1719.63,683.471 1720.19,683.471 1720.75,683.471 1721.31,683.471 1721.87,683.471 1722.42,683.471 1722.98,683.471 1723.54,683.471 1724.1,683.471 1724.66,683.471 1725.22,683.471 1725.78,683.471 1726.34,683.471 1726.9,683.471 1727.46,683.471 1728.02,683.471 1728.58,683.471 1729.14,683.471 1729.69,683.471 1730.25,683.471 1730.81,683.471 1731.37,683.471 1731.93,683.471 1732.49,683.471 1733.05,683.471 1733.61,683.471 1734.17,683.471 1734.73,683.471 1735.29,683.471 1735.85,683.471 1736.41,683.471 1736.97,683.471 1737.52,683.471 1738.08,683.471 1738.64,683.471 1739.2,683.471 1739.76,683.471 1740.32,683.471 1740.88,683.471 1741.44,683.471 1742,683.471 1742.56,683.471 1743.12,683.471 1743.68,683.471 1744.24,683.471 1744.79,683.471 1745.35,683.471 1745.91,683.471 1746.47,683.471 1747.03,683.471 1747.59,683.471 1748.15,683.471 1748.71,683.471 1749.27,683.471 1749.83,683.471 1750.39,683.471 1750.95,683.471 1751.51,683.471 1752.06,683.471 1752.62,683.471 1753.18,683.471 1753.74,683.471 1754.3,683.471 1754.86,683.471 1755.42,683.471 1755.98,683.471 1756.54,683.471 1757.1,683.471 1757.66,683.471 1758.22,683.471 1758.78,683.471 1759.34,683.471 1759.89,683.471 1760.45,683.471 1761.01,683.471 1761.57,683.471 1762.13,683.471 1762.69,683.471 1763.25,683.471 1763.81,683.471 1764.37,683.471 1764.93,683.471 1765.49,683.471 1766.05,683.471 1766.61,683.471 1767.16,683.471 1767.72,683.471 1768.28,683.471 1768.84,683.471 1769.4,683.471 1769.96,683.471 1770.52,683.471 1771.08,683.471 1771.64,683.471 1772.2,683.471 1772.76,683.471 1773.32,683.471 1773.88,683.471 1774.43,683.471 1774.99,683.471 1775.55,683.471 1776.11,683.471 1776.67,683.471 1777.23,683.471 1777.79,683.471 1778.35,683.471 1778.91,683.471 1779.47,683.471 1780.03,683.471 1780.59,683.471 1781.15,683.471 1781.71,683.471 1782.26,683.471 1782.82,683.471 1783.38,683.471 1783.94,683.471 1784.5,683.471 1785.06,683.471 1785.62,683.471 1786.18,683.471 1786.74,683.471 1787.3,683.471 1787.86,683.471 1788.42,683.471 1788.98,683.471 1789.53,683.471 1790.09,683.471 1790.65,683.471 1791.21,683.471 1791.77,683.471 1792.33,683.471 1792.89,683.471 1793.45,683.471 1794.01,683.471 1794.57,683.471 1795.13,683.471 1795.69,683.471 1796.25,683.471 1796.8,683.471 1797.36,683.471 1797.92,683.471 1798.48,683.471 1799.04,683.471 1799.6,683.471 1800.16,683.471 1800.72,683.471 1801.28,683.471 1801.84,683.471 1802.4,683.471 1802.96,683.471 1803.52,683.471 1804.08,683.471 1804.63,683.471 1805.19,683.471 1805.75,683.471 1806.31,683.471 1806.87,683.471 1807.43,683.471 1807.99,683.471 1808.55,683.471 1809.11,683.471 1809.67,683.471 1810.23,683.471 1810.79,683.471 1811.35,683.471 1811.9,683.471 1812.46,683.471 1813.02,683.471 1813.58,683.471 1814.14,683.471 1814.7,683.471 1815.26,683.471 1815.82,683.471 1816.38,683.471 1816.94,683.471 1817.5,683.471 1818.06,683.471 1818.62,683.471 1819.18,683.471 1819.73,683.471 1820.29,683.471 1820.85,683.471 1821.41,683.471 1821.97,683.471 1822.53,683.471 1823.09,683.471 1823.65,683.471 1824.21,683.471 1824.77,683.471 1825.33,683.471 1825.89,683.471 1826.45,683.471 1827,683.471 1827.56,683.471 1828.12,683.471 1828.68,683.471 1829.24,683.471 1829.8,683.471 1830.36,683.471 1830.92,683.471 1831.48,683.471 1832.04,683.471 1832.6,683.471 1833.16,683.471 1833.72,683.471 1834.27,683.471 1834.83,683.471 1835.39,683.471 1835.95,683.471 1836.51,683.471 1837.07,683.471 1837.63,683.471 1838.19,683.471 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ¬± $(se.err)\n    Projected Energy: $(v.val) ¬± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027806496562102 ¬± 0.02338778580237802\nProjected Energy: -4.014513659059263 ¬± (0.0030849480820727138, 0.0031405357011546897)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; Œ± = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-Œ±.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ¬± 0.0029\n  with uncertainty of ¬± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13√ó6 DataFrame\n Row ‚îÇ blocks  mean      std_err      std_err_err  p_cov       mj\n     ‚îÇ Int64   Float64   Float64      Float64      Float64     Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 ‚îÇ   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 ‚îÇ   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 ‚îÇ   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 ‚îÇ    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 ‚îÇ    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 ‚îÇ    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 ‚îÇ     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 ‚îÇ     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 ‚îÇ     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 ‚îÇ      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 ‚îÇ      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 ‚îÇ      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ästd err vs blocking steps‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n               ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n    0.00423501 ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ m test\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ std err\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°†‚¢∫‚†í‚†í‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ü‚£Ä‚†§‚°ó‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ß‚†§‚†î‚°ó‚†ä‚†â‚°è‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚¢£‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚°á‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£¶‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n   -0.00012335 ‚îÇ‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚îÇ\n               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n               ‚†Ä0.64‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äk‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä13.36‚†Ä\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; Œ± = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; Œ±=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.œÉ_f using x_by_y_linear. The standard error estimate r.œÉ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.Œ¥_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ¬± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*œÉ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3√ó3 DataFrame\n Row ‚îÇ res      res_l    res_u\n     ‚îÇ Float64  Float64  Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282\n   2 ‚îÇ    13.0  1.7282   1.7282\n   3 ‚îÇ    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dœÑ=df.dœÑ[end], skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ‚â• 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dœÑ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dœÑln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dœÑ=df.dœÑ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |œà‚ü© and |œï‚ü© is defined as\n\nF(œàœï) = fracœàœï^2œàœàœïœï \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v‚ãÖv == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ‚â• 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:¬±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ¬± 0.029\n  with uncertainty of ¬± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; Œ± = 0.01) -> k\nmtest(table::NamedTuple; Œ± = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-Œ± after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, œÉ_f, Œ¥_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nœÉ_f::T: std from linear propagation\nŒ¥_y::T: coefficient of variation for denominator (‚â§ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, Œº, œÉ)\nparticles(samples, Œº::AbstractVector, Œ£::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, œÉ_f, Œ¥_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nœÉ_f standard deviation of f from linear error propagation (normal approximation)\nŒ¥_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(Œº_x,Œº_y,œÉ_x,œÉ_y,œÅ) -> f, œÉ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013).\n\nœÉ_f = sqrtfracœÉ_xŒº_y^2 + fracŒº_x œÉ_yŒº_y^2^2 - frac2 œÅ Œº_xŒº_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3√ó7 DataFrame\n Row ‚îÇ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     ‚îÇ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 ‚îÇ    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 ‚îÇ    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1√ó9 DataFrame\n Row ‚îÇ val       val_l      val_u      val_f     val_œÉ_f    val_Œ¥_y    val_k  val_blocks  val_success\n     ‚îÇ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dœÑ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7√ó6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS‚Ä¶</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple‚Ä¶</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.469264</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4316e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.538e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.335e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.293e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.715e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.694e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ‚â† basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10√ó10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10√ó10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nŒîE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ŒîE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0‚ü©\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0‚ü©\"\n fs\"|0 1 2 1 0‚ü©\"\n fs\"|1 0 2 0 1‚ü©\"\n fs\"|1 0 1 2 0‚ü©\"\n fs\"|0 0 1 1 2‚ü©\"\n fs\"|0 2 1 0 1‚ü©\"\n fs\"|2 1 1 0 0‚ü©\"\n fs\"|0 2 0 2 0‚ü©\"\n fs\"|1 1 0 1 1‚ü©\"\n fs\"|2 0 0 0 2‚ü©\"\n fs\"|0 0 0 3 1‚ü©\"\n fs\"|3 0 0 1 0‚ü©\"\n fs\"|0 1 0 0 3‚ü©\"\n fs\"|1 3 0 0 0‚ü©\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ‚âà all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0‚ü©\" => -0.0214153\n  fs\"|2 0 0 0 2‚ü©\" => -0.00237613\n  fs\"|0 0 4 0 0‚ü©\" => -0.980348\n  fs\"|0 0 0 3 1‚ü©\" => 0.00363555\n  fs\"|2 1 1 0 0‚ü©\" => -0.0119687\n  fs\"|1 0 2 0 1‚ü©\" => 0.0768085\n  fs\"|1 3 0 0 0‚ü©\" => 0.00363555\n  fs\"|0 1 2 1 0‚ü©\" => 0.177701\n  fs\"|0 0 1 1 2‚ü©\" => -0.0119687\n  fs\"|3 0 0 1 0‚ü©\" => 0.00195478\n  fs\"|0 2 0 2 0‚ü©\" => -0.0138439\n  fs\"|1 1 0 1 1‚ü©\" => -0.00234782\n  fs\"|0 1 0 0 3‚ü©\" => 0.00195478\n  fs\"|0 2 1 0 1‚ü©\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i œµ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential œµ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleœÉ t_œÉ a^_iœÉ a_jœÉ +\n  frac12sum_iœÉ u_œÉœÉ n_iœÉ (n_iœÉ - 1) +\n  sum_iœÉœÑu_œÉœÑ n_iœÉ n_iœÑ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iœÉd v_œÉd x_di^2 n_iœÉ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C √ó D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, Œ∑, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, Œ∑, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i œµ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi œµ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nŒ∑s = (): a tuple of aspect ratios for the remaining dimensions (Œ∑_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/Œ∑_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kœÉk^2 n_kœÉ \n    quad + sum_pqkœÉœÉ T_pqk a^_p-kœÉ a^_q+kœÉ a_qœÉ a_pœÉ \n    quad + sum_pqskkœÉœÉ Q_kka^_p-kœÉ a^_q+kœÉ a^_s+k-kœÉ\n                                       a_sœÉ a_qœÉ a_pœÉ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + œâN - v Œ£‚Çñ(a‚Çñ^ + a‚Çñ)\n\nwhere p is the total momentum, p_f = Œ£_k k a‚Çñ^ a‚Çñ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2œÄl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons œâ.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0‚ü©{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M√∑2, M√∑2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M√∑2, M√∑2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address Œ± is replaced by frac12(Œ±  Œ±) for even and odd parity, respectively, where Œ±ÃÑ == reverse(Œ±).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1‚ü©\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ‚âà eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ‚âà eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ‚â§ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0‚ü©{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ‚â§ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, œÉ=1, œÑ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_œÉœÑ(d) = frac1M _i n_œÉi (n_œÑi+d - Œ¥_0dŒ¥_œÉœÑ)\n\nFor multicomponent addresses, œÉ and œÑ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s b^_p  b_q a_r Œ¥_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s a^_p  a_q a_r Œ¥_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ‚â§ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ‚â§ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iœÉ = hat a^_iœÉ hat a_iœÉ\n\nwhere i is the mode and œÉ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0‚ü©\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0‚ü©\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x‚ãÖ(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1‚ü©\", -3.0)\n (fs\"|2 2 2‚ü©\", -2.449489742783178)\n (fs\"|3 1 2‚ü©\", -2.0)\n (fs\"|4 1 1‚ü©\", -2.8284271247461903)\n (fs\"|4 2 0‚ü©\", -2.0)\n (fs\"|3 3 0‚ü©\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ‚Ä¶.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb‚ãÖ(1:7) == onr(b)‚ãÖ(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w‚ãÖop(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ‚ãÖ A ‚ãÖ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1‚ü©\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ‚âà values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3√ó3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2√ó2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1‚ü©\" => -0.57735   fs\"|0 1 0‚ü©\" => -0.57735   fs\"|1 0 0‚ü©\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nŒ±mathrmnaddrrangle\n\nReturns the new address naddr and the factor Œ±. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0‚ü©\" => 1\n\njulia> fs\"|0 1 2 0‚ü©\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3‚ü©‚äó|0 1 0‚ü©\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üë‚ü©\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0‚ü©{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0‚ü©{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ‚â§ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Œ£_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) √∑ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ‚â§ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|‚ãÖ‚Üë‚Üë‚Üë‚ãÖ‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üì‚ü©\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3‚ü©{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n‚Üí (nadd, Œ±)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3‚ü©{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, Œ± = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dœÑ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ after projecting onto projector.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracPŒ®^(n+1)PŒ®^(n)right)-fracŒædœÑlnleft(fracPŒ®^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4, Œ± = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracŒædœÑlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-Œ±)*walkernumber() + Œ±*UniformProjector()‚ãÖœà computed with walkernumber() and UniformProjector(). When Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)-fracŒædœÑlnleft(fracŒ®_1^n+1Œ®_1^texttargetright)\n\nWhen Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08, Œæ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, Œ∂ = 0.08,   Œæ = Œ∂^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dœÑ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\nùêì = 1 + dœÑ(S - ùêá)\n\nwhere ùêá is the hamiltonian and S is the shift.\n\nùêì represents the first order expansion of the exponential evolution operator of the imaginary-time Schr√∂dinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nŒ∂ = 0.08: Damping parameter for the shift update.\nŒæ = Œ∂^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, Œ∂, Œæ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dœÑ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(‚ãÖ,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dœÑ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndœÑ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3‚ü©\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nœÑ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, Œ∂ = 0.08, Œæ = Œ∂^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ‚âà num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0, fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5\n  fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dœÑ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dœÑ","text":"update_dœÑ(s<:TimeStepStrategy, dœÑ, tnorm) -> new dœÑ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    targetwalkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schr√∂dinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Bl√∂te PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schr√∂dinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija ƒåufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. ƒåufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelm√ºller, D. Huber, M. ƒåufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/œÄ^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => -1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -2.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 3.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 3.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()‚ãÖv == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
