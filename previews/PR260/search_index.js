var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndœÑ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dœÑ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ¬± $(r.œÉ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ¬± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ¬± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ¬± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ¬± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ¬± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ¬± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ¬± 0.13748856752861724\n   Replica 2: -3.974753826250174 ¬± 0.12466355058904417\n   Replica 3: -4.011054302602586 ¬± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1‚ü©\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1‚ü©\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1‚ü©\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0‚ü©\"=>-14.1421, fs\"|0 2 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 1 0 2‚ü©\"=>-14.1421, fs\"|1 2 0 1 1 1‚ü©\"=>-14.1421, fs\"|2 0 1 1 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 2 0 1‚ü©\"=>-14.1421, fs\"|1 1 2 0 1 1‚ü©\"=>-14.1421, fs\"|1 1 0 2 1 1‚ü©\"=>-14.1421, fs\"|1 1 1 0 2 1‚ü©\"=>-14.1421, fs\"|1 0 2 1 1 1‚ü©\"=>-14.1421, fs\"|2 1 1 1 1 0‚ü©\"=>-14.1421, fs\"|0 1 1 1 1 2‚ü©\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip130\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip131\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip130)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip132\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.96 2211.02,1002.96 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.074 2211.02,745.074 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.189 2211.02,487.189 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.304 2211.02,229.304 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.96 423.181,1002.96 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.074 423.181,745.074 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.189 423.181,487.189 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.304 423.181,229.304 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.21 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.21 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M290.043 1016.3 L306.363 1016.3 L306.363 1020.24 L284.418 1020.24 L284.418 1016.3 Q287.08 1013.55 291.664 1008.92 Q296.27 1004.27 297.451 1002.92 Q299.696 1000.4 300.576 998.665 Q301.478 996.906 301.478 995.216 Q301.478 992.461 299.534 990.725 Q297.613 988.989 294.511 988.989 Q292.312 988.989 289.858 989.753 Q287.427 990.517 284.65 992.068 L284.65 987.346 Q287.474 986.211 289.927 985.633 Q292.381 985.054 294.418 985.054 Q299.789 985.054 302.983 987.739 Q306.177 990.424 306.177 994.915 Q306.177 997.045 305.367 998.966 Q304.58 1000.86 302.474 1003.46 Q301.895 1004.13 298.793 1007.35 Q295.691 1010.54 290.043 1016.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 985.679 L334.58 985.679 L334.58 989.614 L320.506 989.614 L320.506 998.086 Q321.524 997.739 322.543 997.577 Q323.562 997.392 324.58 997.392 Q330.367 997.392 333.747 1000.56 Q337.126 1003.73 337.126 1009.15 Q337.126 1014.73 333.654 1017.83 Q330.182 1020.91 323.862 1020.91 Q321.687 1020.91 319.418 1020.54 Q317.173 1020.17 314.765 1019.43 L314.765 1014.73 Q316.849 1015.86 319.071 1016.42 Q321.293 1016.98 323.77 1016.98 Q327.774 1016.98 330.112 1014.87 Q332.45 1012.76 332.45 1009.15 Q332.45 1005.54 330.112 1003.43 Q327.774 1001.33 323.77 1001.33 Q321.895 1001.33 320.02 1001.74 Q318.168 1002.16 316.224 1003.04 L316.224 985.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 988.758 Q352.728 988.758 350.899 992.323 Q349.094 995.864 349.094 1002.99 Q349.094 1010.1 350.899 1013.67 Q352.728 1017.21 356.339 1017.21 Q359.973 1017.21 361.779 1013.67 Q363.608 1010.1 363.608 1002.99 Q363.608 995.864 361.779 992.323 Q359.973 988.758 356.339 988.758 M356.339 985.054 Q362.149 985.054 365.205 989.661 Q368.284 994.244 368.284 1002.99 Q368.284 1011.72 365.205 1016.33 Q362.149 1020.91 356.339 1020.91 Q350.529 1020.91 347.45 1016.33 Q344.395 1011.72 344.395 1002.99 Q344.395 994.244 347.45 989.661 Q350.529 985.054 356.339 985.054 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M286.062 727.794 L304.418 727.794 L304.418 731.729 L290.344 731.729 L290.344 740.202 Q291.363 739.854 292.381 739.692 Q293.4 739.507 294.418 739.507 Q300.205 739.507 303.585 742.678 Q306.964 745.85 306.964 751.266 Q306.964 756.845 303.492 759.947 Q300.02 763.025 293.701 763.025 Q291.525 763.025 289.256 762.655 Q287.011 762.285 284.603 761.544 L284.603 756.845 Q286.687 757.979 288.909 758.535 Q291.131 759.09 293.608 759.09 Q297.613 759.09 299.951 756.984 Q302.288 754.877 302.288 751.266 Q302.288 747.655 299.951 745.549 Q297.613 743.442 293.608 743.442 Q291.733 743.442 289.858 743.859 Q288.006 744.276 286.062 745.155 L286.062 727.794 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 730.873 Q322.566 730.873 320.737 734.438 Q318.932 737.979 318.932 745.109 Q318.932 752.215 320.737 755.78 Q322.566 759.322 326.177 759.322 Q329.811 759.322 331.617 755.78 Q333.446 752.215 333.446 745.109 Q333.446 737.979 331.617 734.438 Q329.811 730.873 326.177 730.873 M326.177 727.169 Q331.987 727.169 335.043 731.776 Q338.122 736.359 338.122 745.109 Q338.122 753.836 335.043 758.442 Q331.987 763.025 326.177 763.025 Q320.367 763.025 317.288 758.442 Q314.233 753.836 314.233 745.109 Q314.233 736.359 317.288 731.776 Q320.367 727.169 326.177 727.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 730.873 Q352.728 730.873 350.899 734.438 Q349.094 737.979 349.094 745.109 Q349.094 752.215 350.899 755.78 Q352.728 759.322 356.339 759.322 Q359.973 759.322 361.779 755.78 Q363.608 752.215 363.608 745.109 Q363.608 737.979 361.779 734.438 Q359.973 730.873 356.339 730.873 M356.339 727.169 Q362.149 727.169 365.205 731.776 Q368.284 736.359 368.284 745.109 Q368.284 753.836 365.205 758.442 Q362.149 763.025 356.339 763.025 Q350.529 763.025 347.45 758.442 Q344.395 753.836 344.395 745.109 Q344.395 736.359 347.45 731.776 Q350.529 727.169 356.339 727.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M284.835 469.909 L307.057 469.909 L307.057 471.9 L294.511 504.469 L289.627 504.469 L301.432 473.844 L284.835 473.844 L284.835 469.909 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M316.224 469.909 L334.58 469.909 L334.58 473.844 L320.506 473.844 L320.506 482.317 Q321.524 481.969 322.543 481.807 Q323.562 481.622 324.58 481.622 Q330.367 481.622 333.747 484.793 Q337.126 487.965 337.126 493.381 Q337.126 498.96 333.654 502.062 Q330.182 505.141 323.862 505.141 Q321.687 505.141 319.418 504.77 Q317.173 504.4 314.765 503.659 L314.765 498.96 Q316.849 500.094 319.071 500.65 Q321.293 501.205 323.77 501.205 Q327.774 501.205 330.112 499.099 Q332.45 496.992 332.45 493.381 Q332.45 489.77 330.112 487.664 Q327.774 485.557 323.77 485.557 Q321.895 485.557 320.02 485.974 Q318.168 486.391 316.224 487.27 L316.224 469.909 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 472.988 Q352.728 472.988 350.899 476.553 Q349.094 480.094 349.094 487.224 Q349.094 494.33 350.899 497.895 Q352.728 501.437 356.339 501.437 Q359.973 501.437 361.779 497.895 Q363.608 494.33 363.608 487.224 Q363.608 480.094 361.779 476.553 Q359.973 472.988 356.339 472.988 M356.339 469.284 Q362.149 469.284 365.205 473.891 Q368.284 478.474 368.284 487.224 Q368.284 495.951 365.205 500.557 Q362.149 505.141 356.339 505.141 Q350.529 505.141 347.45 500.557 Q344.395 495.951 344.395 487.224 Q344.395 478.474 347.45 473.891 Q350.529 469.284 356.339 469.284 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M256.664 242.649 L264.303 242.649 L264.303 216.284 L255.992 217.95 L255.992 213.691 L264.256 212.024 L268.932 212.024 L268.932 242.649 L276.571 242.649 L276.571 246.584 L256.664 246.584 L256.664 242.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M296.015 215.103 Q292.404 215.103 290.576 218.668 Q288.77 222.21 288.77 229.339 Q288.77 236.446 290.576 240.01 Q292.404 243.552 296.015 243.552 Q299.65 243.552 301.455 240.01 Q303.284 236.446 303.284 229.339 Q303.284 222.21 301.455 218.668 Q299.65 215.103 296.015 215.103 M296.015 211.399 Q301.826 211.399 304.881 216.006 Q307.96 220.589 307.96 229.339 Q307.96 238.066 304.881 242.672 Q301.826 247.256 296.015 247.256 Q290.205 247.256 287.127 242.672 Q284.071 238.066 284.071 229.339 Q284.071 220.589 287.127 216.006 Q290.205 211.399 296.015 211.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M326.177 215.103 Q322.566 215.103 320.737 218.668 Q318.932 222.21 318.932 229.339 Q318.932 236.446 320.737 240.01 Q322.566 243.552 326.177 243.552 Q329.811 243.552 331.617 240.01 Q333.446 236.446 333.446 229.339 Q333.446 222.21 331.617 218.668 Q329.811 215.103 326.177 215.103 M326.177 211.399 Q331.987 211.399 335.043 216.006 Q338.122 220.589 338.122 229.339 Q338.122 238.066 335.043 242.672 Q331.987 247.256 326.177 247.256 Q320.367 247.256 317.288 242.672 Q314.233 238.066 314.233 229.339 Q314.233 220.589 317.288 216.006 Q320.367 211.399 326.177 211.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M356.339 215.103 Q352.728 215.103 350.899 218.668 Q349.094 222.21 349.094 229.339 Q349.094 236.446 350.899 240.01 Q352.728 243.552 356.339 243.552 Q359.973 243.552 361.779 240.01 Q363.608 236.446 363.608 229.339 Q363.608 222.21 361.779 218.668 Q359.973 215.103 356.339 215.103 M356.339 211.399 Q362.149 211.399 365.205 216.006 Q368.284 220.589 368.284 229.339 Q368.284 238.066 365.205 242.672 Q362.149 247.256 356.339 247.256 Q350.529 247.256 347.45 242.672 Q344.395 238.066 344.395 229.339 Q344.395 220.589 347.45 216.006 Q350.529 211.399 356.339 211.399 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip132)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.304 4017.76,229.304 \"/>\n<polyline clip-path=\"url(#clip132)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1246.37 458.828,1246.09 459.396,1245.72 459.964,1243.2 460.533,1241.79 461.101,1241.31 461.669,1240.73 462.238,1240.08 462.806,1239.33 463.375,1238.48 463.943,1237.53 464.511,1236.47 465.08,1234.26 465.648,1232.95 466.216,1231.59 466.785,1230.08 467.353,1227.41 467.921,1224.65 468.49,1222.8 469.058,1220.82 469.626,1218.71 470.195,1216.44 470.763,1214.01 471.331,1209.34 471.9,1204.49 472.468,1201.62 473.036,1197.52 473.605,1194.27 474.173,1190.89 474.741,1186.29 475.31,1182.54 475.878,1178.55 476.446,1174.34 477.015,1168.89 477.583,1164.24 478.152,1159.47 478.72,1154.31 479.288,1149.05 479.857,1142.57 480.425,1134.9 480.993,1129.01 481.562,1120.85 482.13,1114.55 482.698,1107.01 483.267,1100.39 483.835,1093.62 484.403,1085.47 484.972,1077.21 485.54,1069.82 486.108,1060.02 486.677,1051.25 487.245,1041.3 487.813,1032.21 488.382,1020.85 488.95,1010.51 489.518,1001.1 490.087,992.685 490.655,983.069 491.224,971.278 491.792,959.541 492.36,949.876 492.929,938.973 493.497,928.01 494.065,918.054 494.634,907.081 495.202,895.947 495.77,884.827 496.339,875.661 496.907,865.27 497.475,854.125 498.044,843.978 498.612,833.837 499.18,822.639 499.749,812.399 500.317,799.929 500.885,790.798 501.454,781.603 502.022,772.431 502.59,761.065 503.159,750.011 503.727,739.941 504.295,728.877 504.864,718.036 505.432,704.271 506.001,694.846 506.569,684.629 507.137,676.609 507.706,667.663 508.274,653.451 508.842,644.611 509.411,636.965 509.979,629.25 510.547,620.704 511.116,613.136 511.684,603.585 512.252,589.05 512.821,581.35 513.389,572.735 513.957,566.445 514.526,558.868 515.094,552.577 515.662,544.455 516.231,538.541 516.799,530.579 517.367,523.676 517.936,519.121 518.504,512.315 519.072,506.74 519.641,502.425 520.209,496.882 520.778,490.393 521.346,484.894 521.914,479.275 522.483,474.931 523.051,468.354 523.619,462.955 524.188,457 524.756,447.057 525.324,440.483 525.893,436.14 526.461,428.617 527.029,422.519 527.598,416.681 528.166,411.964 528.734,408.418 529.303,402.655 529.871,396.225 530.439,389.824 531.008,385.882 531.576,379.278 532.144,376.652 532.713,374.036 533.281,370.65 533.85,367.071 534.418,364.626 534.986,359.204 535.555,354.909 536.123,353.819 536.691,350.682 537.26,349.478 537.828,346.147 538.396,343.117 538.965,342.018 539.533,338.936 540.101,336.939 540.67,333.847 541.238,329.849 541.806,324.061 542.375,321.736 542.943,321.466 543.511,320.082 544.08,316.665 544.648,316.544 545.216,312.98 545.785,311.656 546.353,309.353 546.921,309.225 547.49,306.769 548.058,304.192 548.627,300.052 549.195,298.173 549.763,296.348 550.332,293.453 550.9,294.832 551.468,294.768 552.037,292.849 552.605,292.042 553.173,291.055 553.742,289.017 554.31,289.482 554.878,288.296 555.447,286.244 556.015,286.392 556.583,285.484 557.152,283.507 557.72,281.526 558.288,281.754 558.857,276.661 559.425,275.22 559.993,273.762 560.562,271.288 561.13,269.086 561.698,268.719 562.267,268.405 562.835,270.285 563.404,268.868 563.972,268.456 564.54,267.072 565.109,265.678 565.677,267.404 566.245,265.927 566.814,265.554 567.382,263.275 567.95,263.028 568.519,262.466 569.087,263.25 569.655,258.645 570.224,256.651 570.792,255.748 571.36,255.555 571.929,255.487 572.497,253.306 573.065,252.407 573.634,253.669 574.202,253.673 574.77,252.653 575.339,253.767 575.907,253.74 576.476,252.704 577.044,251.674 577.612,250.888 578.181,250.269 578.749,247.401 579.317,247.904 579.886,248.185 580.454,248.425 581.022,248.474 581.591,248.892 582.159,250.077 582.727,248.84 583.296,248.909 583.864,249.04 584.432,250.104 585.001,250.296 585.569,248.219 586.137,247.138 586.706,247.423 587.274,248.458 587.842,248.185 588.411,248.177 588.979,246.077 589.547,247.375 590.116,245.413 590.684,245.428 591.253,246.548 591.821,246.774 592.389,242.544 592.958,241.838 593.526,240.023 594.094,241.764 594.663,244.034 595.231,244.046 595.799,243.165 596.368,245.529 596.936,246.568 597.504,247.46 598.073,249.132 598.641,248.755 599.209,246.498 599.778,246.317 600.346,246.971 600.914,248.708 601.483,247.471 602.051,247.258 602.619,246.798 603.188,246.552 603.756,243.97 604.325,243.91 604.893,243.782 605.461,241.623 606.03,241.636 606.598,239.546 607.166,236.566 607.735,236.899 608.303,237.132 608.871,236.548 609.44,236.927 610.008,236.996 610.576,237.429 611.145,238.649 611.713,238.719 612.281,236.846 612.85,239.198 613.418,237.223 613.986,235.267 614.555,232.578 615.123,233.187 615.691,233.692 616.26,236.004 616.828,236.343 617.396,237.44 617.965,237.631 618.533,238.895 619.102,238.009 619.67,237.981 620.238,238.084 620.807,237.351 621.375,236.521 621.943,236.627 622.512,236.748 623.08,235.071 623.648,234.368 624.217,236.698 624.785,237.867 625.353,236.768 625.922,236.934 626.49,234.816 627.058,236.981 627.627,236.057 628.195,230.994 628.763,232.478 629.332,229.806 629.9,230.289 630.468,230.769 631.037,229.264 631.605,230.033 632.173,230.435 632.742,229.883 633.31,229.565 633.879,229.15 634.447,230.846 635.015,230.417 635.584,230.908 636.152,232.395 636.72,234.86 637.289,235.275 637.857,235.532 638.425,234.681 638.994,233.96 639.562,234.317 640.13,233.758 640.699,234.112 641.267,236.344 641.835,237.459 642.404,237.677 642.972,236.539 643.54,234.833 644.109,237.069 644.677,239.993 645.245,239.87 645.814,242.518 646.382,241.143 646.951,241.902 647.519,241.505 648.087,239.998 648.656,239.601 649.224,240.546 649.792,238.301 650.361,235.958 650.929,234.716 651.497,235.728 652.066,234.956 652.634,234.07 653.202,234.176 653.771,234.204 654.339,233.207 654.907,233.437 655.476,232.48 656.044,234.813 656.612,232.961 657.181,234.213 657.749,234.516 658.317,234.682 658.886,236.83 659.454,233.753 660.022,234.776 660.591,236.789 661.159,238.782 661.728,236.6 662.296,235.569 662.864,233.655 663.433,232.81 664.001,232.969 664.569,233.295 665.138,233.35 665.706,232.465 666.274,235.052 666.843,234.961 667.411,235.998 667.979,237.021 668.548,237.724 669.116,236.535 669.684,236.528 670.253,235.467 670.821,236.319 671.389,234.127 671.958,234.006 672.526,237.173 673.094,234.717 673.663,236.58 674.231,236.504 674.799,238.216 675.368,234.784 675.936,234.595 676.505,234.606 677.073,234.836 677.641,234.645 678.21,232.41 678.778,231.539 679.346,230.508 679.915,230.635 680.483,229.687 681.051,228.846 681.62,229.015 682.188,229.174 682.756,229.585 683.325,228.892 683.893,229.236 684.461,229.557 685.03,229.918 685.598,231.194 686.166,230.286 686.735,229.456 687.303,230.882 687.871,230.02 688.44,229.103 689.008,228.579 689.577,229.931 690.145,231.319 690.713,231.505 691.282,232.555 691.85,231.549 692.418,231.499 692.987,231.9 693.555,231.999 694.123,232.118 694.692,231.12 695.26,231.19 695.828,234.496 696.397,234.405 696.965,233.246 697.533,234.108 698.102,231.811 698.67,230.925 699.238,232.105 699.807,230.988 700.375,231.884 700.943,231.795 701.512,232.053 702.08,231.333 702.648,230.627 703.217,228.773 703.785,227.842 704.354,227.08 704.922,226.452 705.49,225.765 706.059,226.245 706.627,228.907 707.195,230.171 707.764,231.616 708.332,232.459 708.9,233.738 709.469,233.922 710.037,235.96 710.605,235.816 711.174,236.542 711.742,237.4 712.31,238.198 712.879,236.676 713.447,238.281 714.015,240.04 714.584,238.439 715.152,236.497 715.72,236.105 716.289,235.892 716.857,232.448 717.425,232.61 717.994,232.478 718.562,232.359 719.131,234.537 719.699,234.415 720.267,235.319 720.836,235.112 721.404,234.836 721.972,230.517 722.541,231.447 723.109,230.309 723.677,230.268 724.246,229.3 724.814,229.451 725.382,229.506 725.951,230.59 726.519,229.447 727.087,230.663 727.656,230.945 728.224,231.157 728.792,229.177 729.361,230.38 729.929,229.574 730.497,228.681 731.066,227.68 731.634,227.887 732.203,230.071 732.771,233.298 733.339,233.329 733.908,234.158 734.476,233.884 735.044,233.884 735.613,233.627 736.181,233.452 736.749,232.372 737.318,233.559 737.886,232.365 738.454,229.018 739.023,229.153 739.591,228.26 740.159,227.555 740.728,226.916 741.296,227.231 741.864,226.365 742.433,227.89 743.001,227.002 743.569,229.138 744.138,229.643 744.706,230.837 745.274,229.706 745.843,228.858 746.411,226.89 746.98,227.536 747.548,229.854 748.116,230.155 748.685,231.575 749.253,230.719 749.821,229.788 750.39,229.247 750.958,230.466 751.526,230.598 752.095,229.641 752.663,231.933 753.231,233 753.8,233.957 754.368,234.8 754.936,234.687 755.505,234.484 756.073,232.292 756.641,231.988 757.21,233.133 757.778,231.959 758.346,229.796 758.915,227.906 759.483,227.088 760.052,229.717 760.62,229.75 761.188,231.861 761.757,231.812 762.325,231.903 762.893,231.813 763.462,233.837 764.03,232.947 764.598,232.712 765.167,234.677 765.735,232.315 766.303,232.212 766.872,232.021 767.44,233.136 768.008,231.776 768.577,230.521 769.145,230.396 769.713,230.397 770.282,231.51 770.85,231.646 771.418,231.528 771.987,231.744 772.555,230.571 773.123,228.618 773.692,228.818 774.26,227.862 774.829,228.822 775.397,229.245 775.965,230.507 776.534,230.764 777.102,230.531 777.67,232.706 778.239,233.565 778.807,233.291 779.375,235.328 779.944,234.966 780.512,235.688 781.08,237.302 781.649,236.752 782.217,234.242 782.785,232.818 783.354,233.644 783.922,231.574 784.49,231.601 785.059,232.381 785.627,233.331 786.195,233.173 786.764,232.935 787.332,234.65 787.9,236.531 788.469,238.225 789.037,238.537 789.606,235.73 790.174,236.219 790.742,235.763 791.311,235.432 791.879,233.849 792.447,233.684 793.016,234.413 793.584,233.113 794.152,231.983 794.721,230.864 795.289,230.769 795.857,230.517 796.426,231.391 796.994,232.011 797.562,231.91 798.131,231.59 798.699,231.333 799.267,231.162 799.836,226.773 800.404,226.974 800.972,225.001 801.541,223.226 802.109,225.683 802.678,225.08 803.246,225.414 803.814,227.777 804.383,228.755 804.951,227.78 805.519,228.018 806.088,226.148 806.656,227.4 807.224,229.539 807.793,231.542 808.361,231.392 808.929,231.474 809.498,230.223 810.066,230.968 810.634,230.071 811.203,233.03 811.771,231.638 812.339,230.24 812.908,230.055 813.476,228.842 814.044,228.75 814.613,229.943 815.181,227.523 815.749,226.649 816.318,227.038 816.886,228.275 817.455,226.261 818.023,228.531 818.591,226.884 819.16,226.959 819.728,227.194 820.296,227.396 820.865,226.348 821.433,226.443 822.001,228.85 822.57,229.77 823.138,230.9 823.706,233.851 824.275,232.212 824.843,231.95 825.411,231.675 825.98,229.323 826.548,227.467 827.116,227.728 827.685,227.887 828.253,229.08 828.821,226.813 829.39,228.943 829.958,229.966 830.526,229.861 831.095,230.748 831.663,230.633 832.232,229.307 832.8,228.326 833.368,228.531 833.937,229.706 834.505,232.759 835.073,231.59 835.642,230.347 836.21,228.375 836.778,229.628 837.347,229.757 837.915,229.825 838.483,229.975 839.052,228.981 839.62,230.108 840.188,230.19 840.757,229.969 841.325,231.149 841.893,231.071 842.462,230.895 843.03,230.03 843.598,228.848 844.167,229.773 844.735,229.601 845.304,229.623 845.872,229.651 846.44,229.532 847.009,229.389 847.577,230.349 848.145,229.178 848.714,229.362 849.282,228.208 849.85,228.249 850.419,228.258 850.987,229.527 851.555,230.534 852.124,230.532 852.692,228.49 853.26,228.673 853.829,227.792 854.397,228.131 854.965,229.257 855.534,228.41 856.102,227.431 856.67,225.418 857.239,225.604 857.807,225.968 858.375,226.214 858.944,225.336 859.512,226.846 860.081,228.343 860.649,226.605 861.217,227.101 861.786,227.216 862.354,227.603 862.922,227.963 863.491,228.292 864.059,228.374 864.627,228.623 865.196,230.668 865.764,230.386 866.332,230.416 866.901,229.271 867.469,227.347 868.037,226.652 868.606,226.096 869.174,226.419 869.742,227.967 870.311,228.162 870.879,228.405 871.447,227.617 872.016,226.834 872.584,225.785 873.152,227.978 873.721,228.358 874.289,228.509 874.858,230.831 875.426,231.878 875.994,232.991 876.563,234.003 877.131,233.688 877.699,233.392 878.268,231.449 878.836,231.411 879.404,230.165 879.973,231.231 880.541,230.144 881.109,230.981 881.678,231.864 882.246,231.76 882.814,232.615 883.383,232.278 883.951,233.197 884.519,231.844 885.088,232.737 885.656,233.345 886.224,233.375 886.793,234.074 887.361,232.809 887.93,233.669 888.498,233.623 889.066,233.364 889.635,233.094 890.203,230.717 890.771,230.71 891.34,228.455 891.908,228.591 892.476,228.665 893.045,228.734 893.613,229.549 894.181,228.576 894.75,228.686 895.318,227.827 895.886,228.012 896.455,227.091 897.023,228.261 897.591,228.171 898.16,228.15 898.728,228.408 899.296,227.604 899.865,228.124 900.433,227.353 901.001,228.281 901.57,228.566 902.138,228.693 902.707,227.67 903.275,228.801 903.843,227.802 904.412,228.902 904.98,228.948 905.548,228.833 906.117,230.951 906.685,227.65 907.253,230.068 907.822,230.075 908.39,230.057 908.958,228.063 909.527,227.239 910.095,227.292 910.663,227.441 911.232,228.489 911.8,228.402 912.368,227.616 912.937,227.707 913.505,227 914.073,225.314 914.642,225.764 915.21,224.067 915.779,225.601 916.347,228.132 916.915,226.239 917.484,228.149 918.052,225.052 918.62,224.541 919.189,224.094 919.757,225.529 920.325,225.948 920.894,225.394 921.462,225.757 922.03,225.113 922.599,225.52 923.167,227.119 923.735,227.439 924.304,227.535 924.872,229.969 925.44,229.023 926.009,227.93 926.577,227.27 927.145,225.54 927.714,226.04 928.282,225.361 928.85,227.767 929.419,227.791 929.987,228.227 930.556,229.342 931.124,230.595 931.692,230.827 932.261,234.013 932.829,233.976 933.397,235.997 933.966,235.683 934.534,235.49 935.102,238.32 935.671,238.849 936.239,237.274 936.807,236.77 937.376,237.539 937.944,235.999 938.512,236.622 939.081,235.235 939.649,234.721 940.217,234.443 940.786,233.136 941.354,228.816 941.922,230.916 942.491,230.789 943.059,230.841 943.627,229.991 944.196,229.05 944.764,229.159 945.333,231.107 945.901,232.948 946.469,234.748 947.038,234.477 947.606,234.025 948.174,234.826 948.743,234.595 949.311,234.153 949.879,235.123 950.448,234.723 951.016,235.42 951.584,234.147 952.153,233.888 952.721,233.822 953.289,233.393 953.858,232.863 954.426,233.774 954.994,234.316 955.563,235.025 956.131,234.626 956.699,233.219 957.268,230.752 957.836,229.452 958.405,228.549 958.973,227.464 959.541,227.365 960.11,226.312 960.678,224.326 961.246,223.806 961.815,223.129 962.383,223.674 962.951,222.892 963.52,224.239 964.088,224.53 964.656,224.92 965.225,224.087 965.793,222.433 966.361,223.837 966.93,223.298 967.498,222.652 968.066,222.878 968.635,222.249 969.203,223.766 969.771,224.098 970.34,224.586 970.908,223.807 971.476,225.513 972.045,226.719 972.613,224.86 973.182,224.63 973.75,224.925 974.318,227.288 974.887,225.445 975.455,223.943 976.023,223.52 976.592,225.08 977.16,226.344 977.728,226.639 978.297,225.813 978.865,221.962 979.433,223.558 980.002,224.12 980.57,225.838 981.138,226.265 981.707,228.578 982.275,228.482 982.843,229.689 983.412,229.651 983.98,228.531 984.548,228.832 985.117,227.191 985.685,226.272 986.253,228.642 986.822,231.072 987.39,233.458 987.959,234.392 988.527,235.308 989.095,235.202 989.664,234.96 990.232,234.855 990.8,233.579 991.369,234.382 991.937,235.206 992.505,234.827 993.074,234.299 993.642,233.161 994.21,232.155 994.779,231.068 995.347,231.041 995.915,231.181 996.484,231.028 997.052,227.984 997.62,228.07 998.189,230.259 998.757,230.333 999.325,229.542 999.894,229.856 1000.46,230.789 1001.03,229.905 1001.6,228.899 1002.17,229.977 1002.74,228.103 1003.3,231.243 1003.87,228.992 1004.44,230.33 1005.01,234.5 1005.58,233.36 1006.15,232.003 1006.71,232.957 1007.28,233.881 1007.85,234.643 1008.42,234.289 1008.99,233.906 1009.56,233.618 1010.12,233.557 1010.69,235.433 1011.26,235.076 1011.83,236.812 1012.4,237.328 1012.97,235.782 1013.53,235.336 1014.1,235.021 1014.67,232.496 1015.24,231.214 1015.81,231.232 1016.38,233.266 1016.94,231.059 1017.51,229.903 1018.08,227.865 1018.65,228.027 1019.22,226.939 1019.79,231.164 1020.35,231.059 1020.92,230.938 1021.49,231.951 1022.06,230.926 1022.63,233.039 1023.2,235.893 1023.76,235.213 1024.33,234.572 1024.9,233.263 1025.47,233.869 1026.04,234.615 1026.61,232.232 1027.17,230.917 1027.74,227.539 1028.31,226.464 1028.88,227.658 1029.45,226.732 1030.02,228.049 1030.58,229.951 1031.15,230.978 1031.72,231.685 1032.29,232.631 1032.86,231.382 1033.43,231.051 1033.99,230.899 1034.56,230.837 1035.13,230.662 1035.7,231.419 1036.27,232.382 1036.84,231.006 1037.4,230.726 1037.97,229.566 1038.54,229.354 1039.11,230.24 1039.68,231.189 1040.25,230.231 1040.81,231.279 1041.38,229.92 1041.95,227.533 1042.52,228.772 1043.09,228.734 1043.66,230.654 1044.22,229.533 1044.79,229.741 1045.36,230.318 1045.93,230.195 1046.5,228.765 1047.07,228.655 1047.63,230.32 1048.2,229.269 1048.77,228.376 1049.34,230.437 1049.91,230.334 1050.48,231.293 1051.05,231.05 1051.61,230.89 1052.18,230.869 1052.75,229.666 1053.32,228.698 1053.89,228.847 1054.46,227.794 1055.02,225.697 1055.59,224.601 1056.16,226.761 1056.73,229.009 1057.3,227.86 1057.87,229.89 1058.43,228.658 1059,228.821 1059.57,226.88 1060.14,225.692 1060.71,225.765 1061.28,226.87 1061.84,226.929 1062.41,226.832 1062.98,225.849 1063.55,224.967 1064.12,224.2 1064.69,224.54 1065.25,224.794 1065.82,225.289 1066.39,226.744 1066.96,226.072 1067.53,225.224 1068.1,225.469 1068.66,224.64 1069.23,226.303 1069.8,227.459 1070.37,226.223 1070.94,227.519 1071.51,226.412 1072.07,224.643 1072.64,223.931 1073.21,225.015 1073.78,225.433 1074.35,226.502 1074.92,228.894 1075.48,230.25 1076.05,230.172 1076.62,229.925 1077.19,230 1077.76,230.82 1078.33,230.589 1078.89,232.65 1079.46,233.359 1080.03,233.079 1080.6,234.049 1081.17,233.515 1081.74,233.234 1082.3,233.87 1082.87,235.657 1083.44,234.085 1084.01,234.894 1084.58,232.517 1085.15,231.453 1085.71,231.324 1086.28,232.12 1086.85,231.797 1087.42,230.526 1087.99,229.452 1088.56,229.306 1089.12,228.088 1089.69,228.232 1090.26,230.187 1090.83,229.97 1091.4,232.919 1091.97,232.522 1092.53,233.188 1093.1,232.908 1093.67,232.855 1094.24,230.615 1094.81,230.676 1095.38,230.501 1095.94,229.52 1096.51,227.503 1097.08,226.774 1097.65,226.717 1098.22,225.006 1098.79,226.293 1099.35,226.495 1099.92,225.305 1100.49,223.427 1101.06,225.886 1101.63,224.991 1102.2,224.366 1102.76,225.808 1103.33,226.073 1103.9,226.126 1104.47,225.434 1105.04,225.647 1105.61,226.088 1106.17,227.422 1106.74,226.739 1107.31,228.023 1107.88,229.13 1108.45,230.944 1109.02,232.84 1109.58,232.58 1110.15,231.557 1110.72,231.094 1111.29,229.986 1111.86,229.914 1112.43,230.073 1112.99,230.858 1113.56,230.726 1114.13,231.623 1114.7,233.402 1115.27,232.105 1115.84,233.745 1116.4,232.424 1116.97,233.182 1117.54,231.783 1118.11,231.51 1118.68,231.176 1119.25,231.024 1119.81,230.085 1120.38,229.959 1120.95,230.994 1121.52,231.973 1122.09,231.924 1122.66,228.416 1123.23,228.19 1123.79,228.531 1124.36,226.255 1124.93,227.481 1125.5,227.712 1126.07,225.847 1126.64,224.175 1127.2,223.568 1127.77,223.875 1128.34,224.217 1128.91,223.466 1129.48,222.812 1130.05,224.511 1130.61,228.045 1131.18,228.969 1131.75,227.792 1132.32,228.173 1132.89,228.436 1133.46,228.534 1134.02,229.761 1134.59,225.821 1135.16,224.96 1135.73,225.602 1136.3,228.077 1136.87,229.529 1137.43,229.684 1138,229.825 1138.57,230.765 1139.14,233.786 1139.71,233.401 1140.28,234.174 1140.84,232.833 1141.41,233.665 1141.98,230.608 1142.55,228.468 1143.12,228.682 1143.69,228.803 1144.25,229.874 1144.82,233.081 1145.39,232.972 1145.96,232.756 1146.53,231.526 1147.1,231.637 1147.66,233.436 1148.23,231.958 1148.8,229.707 1149.37,231.749 1149.94,232.496 1150.51,231.042 1151.07,230.083 1151.64,229.126 1152.21,229.38 1152.78,229.326 1153.35,230.385 1153.92,229.467 1154.48,229.4 1155.05,228.487 1155.62,229.621 1156.19,229.57 1156.76,229.718 1157.33,228.709 1157.89,227.767 1158.46,225.832 1159.03,228.458 1159.6,230.521 1160.17,233.42 1160.74,232.056 1161.3,231.96 1161.87,232.789 1162.44,233.661 1163.01,233.26 1163.58,233.969 1164.15,233.372 1164.71,230.817 1165.28,229.715 1165.85,230.445 1166.42,229.202 1166.99,231.051 1167.56,230.81 1168.12,229.641 1168.69,230.523 1169.26,232.516 1169.83,231.012 1170.4,232.956 1170.97,233.753 1171.53,232.525 1172.1,231.982 1172.67,232.837 1173.24,232.347 1173.81,232.082 1174.38,232.045 1174.94,231.78 1175.51,230.444 1176.08,228.198 1176.65,226.962 1177.22,226.779 1177.79,225.76 1178.35,225.77 1178.92,225.927 1179.49,226.035 1180.06,225.925 1180.63,224.986 1181.2,225.224 1181.76,224.632 1182.33,227.034 1182.9,226.139 1183.47,225.165 1184.04,223.309 1184.61,225.663 1185.17,225.004 1185.74,226.168 1186.31,224.271 1186.88,223.234 1187.45,223.774 1188.02,222.989 1188.58,226.525 1189.15,226.48 1189.72,227.586 1190.29,226.642 1190.86,225.783 1191.43,226.833 1192,222.841 1192.56,223.046 1193.13,223.661 1193.7,224.092 1194.27,225.426 1194.84,225.769 1195.41,223.209 1195.97,223.553 1196.54,221.871 1197.11,222.735 1197.68,224.262 1198.25,221.662 1198.82,221.344 1199.38,222.178 1199.95,222.963 1200.52,223.684 1201.09,225.304 1201.66,225.671 1202.23,227.052 1202.79,228.176 1203.36,229.27 1203.93,226.307 1204.5,226.635 1205.07,226.804 1205.64,225.201 1206.2,223.396 1206.77,227.095 1207.34,227.488 1207.91,227.813 1208.48,225.99 1209.05,227.389 1209.61,228.897 1210.18,228.382 1210.75,230.688 1211.32,230.733 1211.89,231.898 1212.46,231.849 1213.02,230.791 1213.59,232.021 1214.16,232.137 1214.73,232.292 1215.3,231.461 1215.87,232.677 1216.43,232.611 1217,232.522 1217.57,233.42 1218.14,233.436 1218.71,235.308 1219.28,232.744 1219.84,232.682 1220.41,233.645 1220.98,232.308 1221.55,232.116 1222.12,233.903 1222.69,233.643 1223.25,234.49 1223.82,234.028 1224.39,233.733 1224.96,232.529 1225.53,234.149 1226.1,235.916 1226.66,234.657 1227.23,233.181 1227.8,233.267 1228.37,231.831 1228.94,232.661 1229.51,231.179 1230.07,231.127 1230.64,228.738 1231.21,229.595 1231.78,225.565 1232.35,225.943 1232.92,227.277 1233.48,228.544 1234.05,227.493 1234.62,227.75 1235.19,226.945 1235.76,228.217 1236.33,227.164 1236.89,227.366 1237.46,227.53 1238.03,226.632 1238.6,226.949 1239.17,226.079 1239.74,227.332 1240.3,228.813 1240.87,229.879 1241.44,229.779 1242.01,229.957 1242.58,229.884 1243.15,229.768 1243.71,229.735 1244.28,228.413 1244.85,228.607 1245.42,229.47 1245.99,227.457 1246.56,227.734 1247.12,228.821 1247.69,230.014 1248.26,229.771 1248.83,229.839 1249.4,230.902 1249.97,230.802 1250.53,231.792 1251.1,233.598 1251.67,232.387 1252.24,230.195 1252.81,231.262 1253.38,231.067 1253.94,231.953 1254.51,232.66 1255.08,232.385 1255.65,232.3 1256.22,233.197 1256.79,230.849 1257.35,229.95 1257.92,227.907 1258.49,230.959 1259.06,229.86 1259.63,228.864 1260.2,229.838 1260.76,228.829 1261.33,225.898 1261.9,225.098 1262.47,224.482 1263.04,224.815 1263.61,225.263 1264.18,224.591 1264.74,225.814 1265.31,227.127 1265.88,229.733 1266.45,230.765 1267.02,230.683 1267.59,231.638 1268.15,232.833 1268.72,231.505 1269.29,231.323 1269.86,231.266 1270.43,232.279 1271,231.048 1271.56,228.756 1272.13,228.775 1272.7,226.665 1273.27,225.926 1273.84,224.271 1274.41,225.699 1274.97,225.948 1275.54,226.35 1276.11,224.812 1276.68,225.158 1277.25,228.461 1277.82,227.819 1278.38,228.091 1278.95,229.415 1279.52,228.642 1280.09,229.161 1280.66,229.37 1281.23,228.585 1281.79,227.71 1282.36,226.963 1282.93,226.31 1283.5,227.656 1284.07,227.926 1284.64,228.065 1285.2,228.003 1285.77,227.334 1286.34,226.354 1286.91,226.637 1287.48,227.995 1288.05,229.251 1288.61,229.456 1289.18,232.627 1289.75,231.301 1290.32,231.124 1290.89,233.365 1291.46,232.2 1292.02,231.992 1292.59,231.906 1293.16,233.958 1293.73,233.741 1294.3,236.458 1294.87,236.113 1295.43,236.828 1296,235.209 1296.57,235.856 1297.14,238.524 1297.71,237.84 1298.28,237.386 1298.84,236.603 1299.41,234.994 1299.98,234.579 1300.55,234.454 1301.12,235.078 1301.69,233.41 1302.25,231.029 1302.82,229.951 1303.39,229.902 1303.96,228.872 1304.53,228.724 1305.1,228.552 1305.66,230.622 1306.23,231.415 1306.8,230.237 1307.37,231.044 1307.94,230.947 1308.51,229.482 1309.07,227.206 1309.64,227.289 1310.21,228.109 1310.78,230.353 1311.35,229.18 1311.92,231.142 1312.48,232.058 1313.05,231.961 1313.62,232.816 1314.19,233.658 1314.76,232.404 1315.33,231.149 1315.89,229.372 1316.46,230.561 1317.03,229.305 1317.6,228.223 1318.17,225.411 1318.74,226.752 1319.3,225.726 1319.87,225.731 1320.44,225.227 1321.01,226.658 1321.58,228.968 1322.15,229.012 1322.71,231.183 1323.28,230.948 1323.85,230.918 1324.42,230.569 1324.99,230.361 1325.56,229.21 1326.12,228.294 1326.69,229.208 1327.26,230.351 1327.83,229.345 1328.4,229.23 1328.97,230.216 1329.53,231.497 1330.1,231.428 1330.67,230.251 1331.24,230.131 1331.81,228 1332.38,227.029 1332.94,227.172 1333.51,227.015 1334.08,231.184 1334.65,228.919 1335.22,229.719 1335.79,229.723 1336.36,229.56 1336.92,227.88 1337.49,226.964 1338.06,228.158 1338.63,229.181 1339.2,228.296 1339.77,228.242 1340.33,229.451 1340.9,229.378 1341.47,228.366 1342.04,227.635 1342.61,227.933 1343.18,227.07 1343.74,227.279 1344.31,228.39 1344.88,226.466 1345.45,228.028 1346.02,230.132 1346.59,228.916 1347.15,230.13 1347.72,228.867 1348.29,230.742 1348.86,226.598 1349.43,229.884 1350,229.697 1350.56,227.458 1351.13,227.466 1351.7,230.724 1352.27,230.799 1352.84,233.835 1353.41,234.581 1353.97,234.252 1354.54,234.01 1355.11,234.757 1355.68,236.478 1356.25,234.811 1356.82,234.517 1357.38,237.191 1357.95,234.252 1358.52,233.789 1359.09,230.596 1359.66,231.466 1360.23,231.372 1360.79,232.22 1361.36,231.939 1361.93,231.573 1362.5,227.329 1363.07,226.218 1363.64,224.358 1364.2,225.733 1364.77,224.72 1365.34,224.923 1365.91,225.221 1366.48,226.59 1367.05,226.658 1367.61,225.963 1368.18,225.422 1368.75,225.785 1369.32,227.092 1369.89,227.002 1370.46,228.1 1371.02,228.205 1371.59,227.054 1372.16,227.042 1372.73,226.996 1373.3,227.215 1373.87,227.518 1374.43,227.581 1375,226.627 1375.57,226.727 1376.14,227.99 1376.71,228.996 1377.28,230.015 1377.84,232.977 1378.41,232.682 1378.98,232.14 1379.55,232.125 1380.12,234.079 1380.69,233.695 1381.25,231.222 1381.82,230.899 1382.39,231.826 1382.96,231.627 1383.53,232.551 1384.1,230.967 1384.66,230.598 1385.23,228.466 1385.8,229.375 1386.37,229.053 1386.94,227.942 1387.51,227.798 1388.07,228.832 1388.64,224.896 1389.21,226.094 1389.78,224.228 1390.35,226.637 1390.92,225.609 1391.48,225.729 1392.05,225.967 1392.62,225.259 1393.19,224.602 1393.76,226.712 1394.33,228.073 1394.89,229.21 1395.46,228.063 1396.03,229.324 1396.6,230.545 1397.17,228.169 1397.74,229.104 1398.3,228.108 1398.87,227.267 1399.44,226.138 1400.01,226.076 1400.58,226.339 1401.15,224.58 1401.71,224.104 1402.28,224.517 1402.85,226.002 1403.42,225.363 1403.99,226.561 1404.56,224.597 1405.13,226.924 1405.69,228.158 1406.26,228.275 1406.83,226.403 1407.4,227.797 1407.97,230.061 1408.54,229.957 1409.1,227.9 1409.67,224.991 1410.24,224.472 1410.81,224.914 1411.38,226.445 1411.95,227.807 1412.51,225.154 1413.08,225.41 1413.65,227.766 1414.22,228.146 1414.79,227.159 1415.36,229.439 1415.92,228.6 1416.49,229.868 1417.06,226.517 1417.63,227.931 1418.2,227.164 1418.77,228.299 1419.33,229.378 1419.9,229.511 1420.47,229.489 1421.04,226.614 1421.61,229.851 1422.18,228.898 1422.74,228.974 1423.31,228.215 1423.88,231.152 1424.45,230.24 1425.02,230.191 1425.59,230.281 1426.15,231.465 1426.72,231.491 1427.29,230.496 1427.86,230.663 1428.43,230.809 1429,231.814 1429.56,231.687 1430.13,231.583 1430.7,229.513 1431.27,230.776 1431.84,231.725 1432.41,230.505 1432.97,229.595 1433.54,227.627 1434.11,227.801 1434.68,231.171 1435.25,233.242 1435.82,234.078 1436.38,232.678 1436.95,232.532 1437.52,234.507 1438.09,233.956 1438.66,233.618 1439.23,233.389 1439.79,232.928 1440.36,233.88 1440.93,234.561 1441.5,237.137 1442.07,237.512 1442.64,238.986 1443.2,239.448 1443.77,236.53 1444.34,236.773 1444.91,236.052 1445.48,236.509 1446.05,231.754 1446.61,232.356 1447.18,231.179 1447.75,231.934 1448.32,230.534 1448.89,230.465 1449.46,228.334 1450.02,227.439 1450.59,225.35 1451.16,225.577 1451.73,227.034 1452.3,226.131 1452.87,226.008 1453.43,225.984 1454,228.322 1454.57,227.345 1455.14,227.517 1455.71,225.634 1456.28,225.812 1456.84,226.049 1457.41,225.37 1457.98,227.668 1458.55,230.809 1459.12,229.38 1459.69,229.425 1460.25,227.419 1460.82,228.658 1461.39,227.728 1461.96,225.847 1462.53,226.063 1463.1,226.309 1463.66,227.555 1464.23,225.863 1464.8,227.315 1465.37,228.348 1465.94,228.254 1466.51,229.297 1467.07,228.268 1467.64,230.429 1468.21,229.283 1468.78,229.104 1469.35,231.105 1469.92,231.833 1470.48,232.85 1471.05,231.807 1471.62,229.586 1472.19,227.589 1472.76,229.954 1473.33,231.083 1473.89,230.897 1474.46,231.914 1475.03,231.72 1475.6,230.548 1476.17,227.401 1476.74,229.806 1477.31,230.726 1477.87,227.477 1478.44,228.698 1479.01,228.91 1479.58,228.81 1480.15,230.665 1480.72,231.486 1481.28,230.18 1481.85,229.992 1482.42,230.109 1482.99,231.093 1483.56,231.573 1484.13,233.379 1484.69,233.055 1485.26,233.703 1485.83,230.167 1486.4,229.053 1486.97,228.99 1487.54,228.846 1488.1,228.475 1488.67,227.308 1489.24,227.434 1489.81,226.581 1490.38,226.568 1490.95,228.95 1491.51,228.088 1492.08,228.178 1492.65,228.374 1493.22,227.531 1493.79,227.58 1494.36,227.601 1494.92,227.838 1495.49,231.135 1496.06,231.973 1496.63,233.807 1497.2,232.276 1497.77,230.956 1498.33,231.013 1498.9,228.913 1499.47,229.133 1500.04,228.194 1500.61,226.959 1501.18,226.005 1501.74,229.523 1502.31,229.531 1502.88,228.301 1503.45,230.425 1504.02,231.345 1504.59,231.141 1505.15,231.138 1505.72,229.855 1506.29,231.954 1506.86,231.682 1507.43,230.354 1508,229.39 1508.56,226.278 1509.13,225.411 1509.7,225.69 1510.27,226.81 1510.84,226.041 1511.41,226.281 1511.97,226.408 1512.54,227.561 1513.11,226.763 1513.68,226.015 1514.25,227.325 1514.82,227.495 1515.38,225.65 1515.95,226.921 1516.52,229.14 1517.09,227.135 1517.66,228.487 1518.23,228.488 1518.79,228.538 1519.36,230.603 1519.93,230.565 1520.5,230.245 1521.07,231.406 1521.64,232.322 1522.2,228.992 1522.77,229.867 1523.34,230.793 1523.91,231.621 1524.48,233.6 1525.05,233.261 1525.61,231.23 1526.18,232.108 1526.75,230.073 1527.32,230.892 1527.89,229.795 1528.46,228.728 1529.02,231.857 1529.59,232.478 1530.16,232.127 1530.73,233.032 1531.3,231.84 1531.87,233.201 1532.43,231.874 1533,229.512 1533.57,231.61 1534.14,231.311 1534.71,230.324 1535.28,230.22 1535.84,229.254 1536.41,230.244 1536.98,231.31 1537.55,229.003 1538.12,227.96 1538.69,228.993 1539.25,229.089 1539.82,228.162 1540.39,230.146 1540.96,231.035 1541.53,230.992 1542.1,230.908 1542.66,230.764 1543.23,228.854 1543.8,228.867 1544.37,227.95 1544.94,225.929 1545.51,228.212 1546.08,227.226 1546.64,227.324 1547.21,227.42 1547.78,228.766 1548.35,228.744 1548.92,229.942 1549.49,230.978 1550.05,231.063 1550.62,229.895 1551.19,229.857 1551.76,229.817 1552.33,227.78 1552.9,222.65 1553.46,223.144 1554.03,223.482 1554.6,224.905 1555.17,225.36 1555.74,225.938 1556.31,227.244 1556.87,226.504 1557.44,226.888 1558.01,225.125 1558.58,223.325 1559.15,225.895 1559.72,226.104 1560.28,226.267 1560.85,227.644 1561.42,228.95 1561.99,230.134 1562.56,230.179 1563.13,229.247 1563.69,231.184 1564.26,233.96 1564.83,234.734 1565.4,235.307 1565.97,233.838 1566.54,232.503 1567.1,233.072 1567.67,231.686 1568.24,230.52 1568.81,229.176 1569.38,226.18 1569.95,226.368 1570.51,228.749 1571.08,227.897 1571.65,230.085 1572.22,228.917 1572.79,227.699 1573.36,228.874 1573.92,227.816 1574.49,226.932 1575.06,226.089 1575.63,227.199 1576.2,225.342 1576.77,225.62 1577.33,223.827 1577.9,223.438 1578.47,225.088 1579.04,225.39 1579.61,225.712 1580.18,227.786 1580.74,229.946 1581.31,229.031 1581.88,230.979 1582.45,230.896 1583.02,230.633 1583.59,231.628 1584.15,230.53 1584.72,229.454 1585.29,228.533 1585.86,229.603 1586.43,229.508 1587,230.558 1587.56,230.614 1588.13,230.734 1588.7,231.475 1589.27,231.299 1589.84,231.037 1590.41,231.595 1590.97,230.552 1591.54,233.507 1592.11,235.081 1592.68,233.626 1593.25,231.368 1593.82,231.444 1594.38,230.175 1594.95,229.18 1595.52,230.219 1596.09,229.245 1596.66,228.435 1597.23,227.319 1597.79,228.541 1598.36,227.6 1598.93,229.648 1599.5,230.634 1600.07,230.741 1600.64,230.522 1601.2,230.503 1601.77,230.343 1602.34,230.113 1602.91,226.557 1603.48,227.883 1604.05,228.099 1604.61,231.465 1605.18,230.489 1605.75,229.386 1606.32,229.289 1606.89,229.194 1607.46,228.284 1608.02,229.438 1608.59,229.32 1609.16,229.32 1609.73,228.477 1610.3,230.631 1610.87,230.245 1611.43,226.974 1612,228.028 1612.57,225.964 1613.14,227.223 1613.71,227.44 1614.28,227.386 1614.84,227.294 1615.41,228.359 1615.98,231.423 1616.55,232.334 1617.12,232.064 1617.69,230.925 1618.26,230.743 1618.82,230.533 1619.39,228.338 1619.96,227.545 1620.53,227.598 1621.1,226.725 1621.67,225.897 1622.23,229.382 1622.8,231.484 1623.37,233.168 1623.94,232.576 1624.51,231.374 1625.08,232.406 1625.64,233.161 1626.21,231.814 1626.78,229.639 1627.35,229.619 1627.92,230.541 1628.49,229.573 1629.05,229.774 1629.62,228.586 1630.19,227.584 1630.76,228.969 1631.33,230.27 1631.9,229.313 1632.46,228.306 1633.03,228.255 1633.6,228.171 1634.17,230.344 1634.74,229.321 1635.31,231.048 1635.87,230.85 1636.44,231.684 1637.01,232.56 1637.58,230.154 1638.15,229.108 1638.72,228.963 1639.28,228.901 1639.85,228.594 1640.42,230.449 1640.99,231.09 1641.56,232.667 1642.13,232.55 1642.69,234.232 1643.26,232.679 1643.83,233.425 1644.4,231.179 1644.97,231.048 1645.54,229.61 1646.1,230.535 1646.67,231.511 1647.24,229.201 1647.81,228.046 1648.38,228.242 1648.95,226.376 1649.51,228.683 1650.08,227.691 1650.65,226.804 1651.22,226.022 1651.79,226.031 1652.36,226.16 1652.92,226.409 1653.49,225.609 1654.06,225.834 1654.63,227.901 1655.2,229.12 1655.77,229.035 1656.33,228.151 1656.9,228.019 1657.47,228.084 1658.04,227.265 1658.61,227.52 1659.18,226.74 1659.74,230.13 1660.31,229.834 1660.88,229.669 1661.45,228.415 1662.02,229.504 1662.59,230.473 1663.15,230.281 1663.72,228.313 1664.29,227.379 1664.86,228.653 1665.43,230.88 1666,231.667 1666.56,231.439 1667.13,230.22 1667.7,227.97 1668.27,229.33 1668.84,229.567 1669.41,229.307 1669.97,229.352 1670.54,231.593 1671.11,232.484 1671.68,230.232 1672.25,229.181 1672.82,227.064 1673.38,228.083 1673.95,228.018 1674.52,227.176 1675.09,229.262 1675.66,229.153 1676.23,233.225 1676.79,230.974 1677.36,230.915 1677.93,228.519 1678.5,228.54 1679.07,228.681 1679.64,228.463 1680.2,232.828 1680.77,232.555 1681.34,232.066 1681.91,232.944 1682.48,233.649 1683.05,232.432 1683.61,232.293 1684.18,233.04 1684.75,233.741 1685.32,232.207 1685.89,231.876 1686.46,231.541 1687.02,229.284 1687.59,228.276 1688.16,224.168 1688.73,223.268 1689.3,223.728 1689.87,224.182 1690.44,226.566 1691,228.816 1691.57,227.687 1692.14,230.776 1692.71,230.312 1693.28,229.167 1693.85,228.305 1694.41,229.252 1694.98,227.217 1695.55,228.294 1696.12,228.393 1696.69,227.293 1697.26,229.358 1697.82,229.293 1698.39,228.258 1698.96,229.426 1699.53,230.534 1700.1,230.344 1700.67,230.359 1701.23,231.367 1701.8,231.039 1702.37,229.744 1702.94,229.754 1703.51,227.497 1704.08,226.648 1704.64,226.736 1705.21,227.832 1705.78,227.892 1706.35,229.985 1706.92,229.046 1707.49,230.183 1708.05,227.809 1708.62,227.754 1709.19,226.846 1709.76,228.849 1710.33,227.637 1710.9,228.688 1711.46,229.63 1712.03,228.398 1712.6,228.427 1713.17,227.518 1713.74,227.717 1714.31,226.75 1714.87,225.053 1715.44,227.332 1716.01,227.443 1716.58,228.575 1717.15,226.795 1717.72,225.658 1718.28,225.928 1718.85,226.026 1719.42,225.279 1719.99,224.636 1720.56,225.08 1721.13,225.311 1721.69,225.75 1722.26,226.16 1722.83,226.526 1723.4,226.722 1723.97,228.065 1724.54,228.353 1725.1,225.49 1725.67,228.026 1726.24,227.213 1726.81,228.549 1727.38,231.887 1727.95,230.974 1728.51,230.981 1729.08,230.96 1729.65,231.8 1730.22,232.649 1730.79,233.489 1731.36,233.232 1731.92,231.019 1732.49,231.174 1733.06,230.111 1733.63,232.107 1734.2,229.754 1734.77,229.906 1735.33,229.833 1735.9,231.729 1736.47,230.725 1737.04,230.359 1737.61,229.41 1738.18,229.359 1738.74,230.2 1739.31,230.214 1739.88,230.174 1740.45,228.039 1741.02,225.985 1741.59,227.45 1742.15,228.896 1742.72,227.925 1743.29,228.144 1743.86,228.113 1744.43,229.129 1745,232.229 1745.56,231.036 1746.13,229.652 1746.7,228.641 1747.27,227.879 1747.84,228.353 1748.41,230.603 1748.97,231.677 1749.54,231.553 1750.11,231.583 1750.68,229.303 1751.25,229.337 1751.82,230.464 1752.38,230.403 1752.95,231.224 1753.52,231.142 1754.09,228.905 1754.66,227.83 1755.23,228.81 1755.79,227.752 1756.36,227.778 1756.93,227.974 1757.5,227.048 1758.07,227.287 1758.64,227.461 1759.21,227.71 1759.77,227.742 1760.34,227.918 1760.91,229.168 1761.48,228.252 1762.05,230.342 1762.62,230.314 1763.18,232.494 1763.75,231.222 1764.32,231.23 1764.89,231.119 1765.46,231.152 1766.03,233.069 1766.59,235.099 1767.16,232.731 1767.73,232.668 1768.3,231.35 1768.87,233.36 1769.44,233.188 1770,231.989 1770.57,229.884 1771.14,228.776 1771.71,227.507 1772.28,227.716 1772.85,227.66 1773.41,229.89 1773.98,231.788 1774.55,232.696 1775.12,232.087 1775.69,229.653 1776.26,229.759 1776.82,229.642 1777.39,229.373 1777.96,229.216 1778.53,229.051 1779.1,230.032 1779.67,229.931 1780.23,230.068 1780.8,231.164 1781.37,231.118 1781.94,231.114 1782.51,231.004 1783.08,232.074 1783.64,230.857 1784.21,230.81 1784.78,229.665 1785.35,228.493 1785.92,228.675 1786.49,229.794 1787.05,225.679 1787.62,228.158 1788.19,228.312 1788.76,228.112 1789.33,228.264 1789.9,227.102 1790.46,227.253 1791.03,227.48 1791.6,229.577 1792.17,228.41 1792.74,230.177 1793.31,231.147 1793.87,231.116 1794.44,230.873 1795.01,231.921 1795.58,229.706 1796.15,229.332 1796.72,229.209 1797.28,227.038 1797.85,226.186 1798.42,225.475 1798.99,225.745 1799.56,226.122 1800.13,227.364 1800.69,227.531 1801.26,226.785 1801.83,226.949 1802.4,230.287 1802.97,228.179 1803.54,228.265 1804.1,227.404 1804.67,227.734 1805.24,229.867 1805.81,229.792 1806.38,229.706 1806.95,229.82 1807.51,229.734 1808.08,230.821 1808.65,229.664 1809.22,228.731 1809.79,227.614 1810.36,225.551 1810.92,223.702 1811.49,225.898 1812.06,228.355 1812.63,225.234 1813.2,225.65 1813.77,226.819 1814.33,228.151 1814.9,231.605 1815.47,231.425 1816.04,230.048 1816.61,231.176 1817.18,232.027 1817.74,231.742 1818.31,231.546 1818.88,232.194 1819.45,233.115 1820.02,231.887 1820.59,231.715 1821.15,230.371 1821.72,232.312 1822.29,233.234 1822.86,232.919 1823.43,232.772 1824,233.323 1824.56,234.161 1825.13,230.771 1825.7,231.64 1826.27,233.517 1826.84,235.218 1827.41,234.581 1827.97,236.365 1828.54,234.774 1829.11,233.179 1829.68,232.866 1830.25,229.611 1830.82,228.519 1831.39,228.421 1831.95,227.39 1832.52,229.391 1833.09,228.331 1833.66,231.433 1834.23,231.049 1834.8,229.795 1835.36,230.795 1835.93,231.704 1836.5,231.605 1837.07,231.313 1837.64,231.165 1838.21,230.956 1838.77,230.859 1839.34,232.719 1839.91,232.242 1840.48,232.035 1841.05,230.687 1841.62,230.397 1842.18,229.145 1842.75,225.987 1843.32,224.025 1843.89,224.302 1844.46,223.701 1845.03,224.88 1845.59,224.337 1846.16,223.8 1846.73,224.293 1847.3,223.502 1847.87,224.784 1848.44,224.279 1849,224.646 1849.57,223.656 1850.14,223.039 1850.71,224.429 1851.28,225.579 1851.85,225.688 1852.41,225.625 1852.98,226.979 1853.55,226.237 1854.12,225.487 1854.69,221.486 1855.26,221.941 1855.82,223.344 1856.39,223.796 1856.96,225.279 1857.53,227.593 1858.1,228.719 1858.67,227.903 1859.23,227.913 1859.8,228.185 1860.37,230.607 1860.94,229.575 1861.51,228.57 1862.08,229.855 1862.64,229.825 1863.21,228.613 1863.78,228.702 1864.35,227.821 1864.92,228.086 1865.49,229.054 1866.05,229.306 1866.62,230.511 1867.19,230.411 1867.76,230.408 1868.33,229.495 1868.9,229.51 1869.46,229.644 1870.03,232.746 1870.6,233.713 1871.17,234.52 1871.74,234.146 1872.31,232.682 1872.87,232.405 1873.44,232.134 1874.01,231.952 1874.58,229.776 1875.15,231.92 1875.72,231.85 1876.28,229.676 1876.85,230.829 1877.42,229.636 1877.99,230.694 1878.56,230.538 1879.13,230.324 1879.69,228.205 1880.26,231.468 1880.83,231.332 1881.4,232.278 1881.97,232.199 1882.54,231.99 1883.1,234.904 1883.67,233.342 1884.24,233.189 1884.81,234.866 1885.38,234.31 1885.95,233.919 1886.51,234.51 1887.08,234.128 1887.65,232.564 1888.22,229.973 1888.79,227.697 1889.36,228.908 1889.92,228.933 1890.49,227.883 1891.06,230.067 1891.63,229.978 1892.2,230.001 1892.77,230.977 1893.33,230.464 1893.9,230.334 1894.47,229.076 1895.04,227.198 1895.61,226.276 1896.18,224.284 1896.74,223.423 1897.31,222.745 1897.88,222.114 1898.45,222.813 1899.02,223.311 1899.59,222.356 1900.16,222.832 1900.72,223.272 1901.29,222.662 1901.86,222.88 1902.43,223.3 1903,223.662 1903.57,224.918 1904.13,227.278 1904.7,228.531 1905.27,228.672 1905.84,227.624 1906.41,228.873 1906.98,228.711 1907.54,230.023 1908.11,227.917 1908.68,226.103 1909.25,225.323 1909.82,225.581 1910.39,225.868 1910.95,226.236 1911.52,225.666 1912.09,228.075 1912.66,227.371 1913.23,228.437 1913.8,227.775 1914.36,227.899 1914.93,228.047 1915.5,226.295 1916.07,227.773 1916.64,227.986 1917.21,230.96 1917.77,230.826 1918.34,229.907 1918.91,231.083 1919.48,231.966 1920.05,233.044 1920.62,234.04 1921.18,234.877 1921.75,234.552 1922.32,235.126 1922.89,234.761 1923.46,234.334 1924.03,231.038 1924.59,232.069 1925.16,232.115 1925.73,232.042 1926.3,230.801 1926.87,229.713 1927.44,228.593 1928,226.507 1928.57,227.738 1929.14,228.874 1929.71,227.866 1930.28,227.919 1930.85,229.066 1931.41,228.017 1931.98,230.353 1932.55,230.323 1933.12,230.496 1933.69,230.559 1934.26,230.745 1934.82,232.889 1935.39,232.793 1935.96,231.543 1936.53,232.424 1937.1,234.273 1937.67,233.887 1938.23,232.753 1938.8,233.415 1939.37,232.879 1939.94,233.766 1940.51,231.451 1941.08,231.311 1941.64,231.125 1942.21,230.885 1942.78,231.928 1943.35,231.779 1943.92,229.491 1944.49,229.466 1945.05,226.315 1945.62,226.53 1946.19,224.541 1946.76,225.952 1947.33,227.252 1947.9,228.452 1948.46,228.797 1949.03,228.661 1949.6,226.51 1950.17,226.652 1950.74,225.789 1951.31,228.059 1951.87,226.873 1952.44,227.178 1953.01,230.347 1953.58,230.325 1954.15,229.145 1954.72,228.062 1955.28,226.258 1955.85,225.447 1956.42,224.697 1956.99,224.992 1957.56,225.332 1958.13,226.508 1958.69,229.822 1959.26,231.722 1959.83,231.543 1960.4,231.331 1960.97,232.142 1961.54,233.797 1962.1,235.671 1962.67,237.177 1963.24,234.372 1963.81,233.154 1964.38,234.842 1964.95,233.397 1965.51,231.304 1966.08,231.232 1966.65,231.082 1967.22,230.987 1967.79,231.754 1968.36,231.728 1968.92,229.633 1969.49,230.812 1970.06,229.719 1970.63,229.503 1971.2,227.296 1971.77,227.563 1972.34,227.401 1972.9,227.427 1973.47,227.601 1974.04,230.581 1974.61,228.295 1975.18,231.418 1975.75,233.4 1976.31,234.847 1976.88,234.472 1977.45,232.108 1978.02,232.908 1978.59,230.701 1979.16,230.536 1979.72,228.31 1980.29,228.031 1980.86,226.976 1981.43,227.93 1982,231.165 1982.57,230.957 1983.13,229.612 1983.7,229.601 1984.27,231.776 1984.84,232.417 1985.41,232.145 1985.98,232.615 1986.54,232.28 1987.11,229.735 1987.68,230.636 1988.25,230.319 1988.82,226.876 1989.39,226.679 1989.95,226.846 1990.52,229.012 1991.09,230.014 1991.66,227.827 1992.23,228.734 1992.8,228.763 1993.36,227.684 1993.93,227.656 1994.5,228.94 1995.07,228.219 1995.64,226.264 1996.21,227.435 1996.77,226.547 1997.34,224.613 1997.91,222.92 1998.48,222.49 1999.05,223.961 1999.62,225.241 2000.18,225.794 2000.75,225.971 2001.32,226.057 2001.89,227.341 2002.46,227.466 2003.03,226.626 2003.59,226.956 2004.16,226.22 2004.73,225.414 2005.3,225.796 2005.87,229.116 2006.44,231.152 2007,229.12 2007.57,228.963 2008.14,230.995 2008.71,229 2009.28,225.912 2009.85,225.088 2010.41,224.463 2010.98,226.841 2011.55,229.203 2012.12,230.083 2012.69,230.043 2013.26,227.989 2013.82,228.891 2014.39,228.981 2014.96,228.889 2015.53,228.98 2016.1,231.136 2016.67,230.984 2017.23,230.091 2017.8,230.015 2018.37,229.828 2018.94,227.799 2019.51,226.833 2020.08,228.297 2020.64,228.411 2021.21,230.555 2021.78,229.384 2022.35,231.411 2022.92,231.256 2023.49,232.076 2024.05,230.608 2024.62,231.542 2025.19,229.06 2025.76,230.095 2026.33,228.855 2026.9,227.814 2027.46,226.948 2028.03,227.342 2028.6,228.593 2029.17,229.731 2029.74,229.486 2030.31,230.562 2030.87,229.5 2031.44,228.498 2032.01,232.431 2032.58,231.19 2033.15,231.079 2033.72,231.075 2034.28,231.944 2034.85,233.8 2035.42,229.399 2035.99,228.318 2036.56,226.482 2037.13,228.991 2037.69,230.083 2038.26,229.095 2038.83,228.123 2039.4,229.07 2039.97,227.005 2040.54,227.181 2041.11,227.19 2041.67,228.397 2042.24,228.326 2042.81,228.532 2043.38,227.876 2043.95,228.926 2044.52,227.703 2045.08,228.959 2045.65,229.216 2046.22,232.302 2046.79,231.861 2047.36,233.653 2047.93,234.477 2048.49,237.273 2049.06,236.604 2049.63,236.032 2050.2,236.536 2050.77,236.206 2051.34,234.582 2051.9,234.261 2052.47,229.79 2053.04,228.771 2053.61,227.749 2054.18,227.723 2054.75,225.979 2055.31,227.279 2055.88,227.422 2056.45,227.487 2057.02,226.826 2057.59,227.93 2058.16,229.12 2058.72,229.24 2059.29,230.272 2059.86,232.194 2060.43,229.903 2061,227.832 2061.57,228.854 2062.13,227.732 2062.7,228.752 2063.27,227.749 2063.84,228.98 2064.41,228.99 2064.98,228.924 2065.54,227.96 2066.11,228.981 2066.68,230.886 2067.25,229.767 2067.82,229.65 2068.39,232.644 2068.95,232.3 2069.52,231.116 2070.09,231.021 2070.66,231.833 2071.23,229.619 2071.8,228.428 2072.36,228.568 2072.93,229.749 2073.5,229.933 2074.07,229.724 2074.64,229.618 2075.21,230.587 2075.77,230.719 2076.34,230.613 2076.91,229.432 2077.48,228.49 2078.05,227.644 2078.62,229.886 2079.18,229.553 2079.75,229.581 2080.32,227.769 2080.89,225.825 2081.46,225.995 2082.03,224.116 2082.59,223.51 2083.16,222.758 2083.73,225.289 2084.3,225.71 2084.87,225.975 2085.44,226.352 2086,228.746 2086.57,229.014 2087.14,227.993 2087.71,228.126 2088.28,227.442 2088.85,226.754 2089.41,227.915 2089.98,230.184 2090.55,231.331 2091.12,231.196 2091.69,231.967 2092.26,231.772 2092.82,233.672 2093.39,233.535 2093.96,232.29 2094.53,230.028 2095.1,229.045 2095.67,227.915 2096.23,227.982 2096.8,228.095 2097.37,228.267 2097.94,231.273 2098.51,229.716 2099.08,229.77 2099.64,229.599 2100.21,228.763 2100.78,228.839 2101.35,230.709 2101.92,231.594 2102.49,232.33 2103.05,234.141 2103.62,231.701 2104.19,232.643 2104.76,233.365 2105.33,230.942 2105.9,231.967 2106.46,232.704 2107.03,232.361 2107.6,235.025 2108.17,235.396 2108.74,234.97 2109.31,234.613 2109.87,231.101 2110.44,229.899 2111.01,229.862 2111.58,229.777 2112.15,230.727 2112.72,229.555 2113.29,229.388 2113.85,226.056 2114.42,224.12 2114.99,222.4 2115.56,221.621 2116.13,221.146 2116.7,222.572 2117.26,219.895 2117.83,221.499 2118.4,220.725 2118.97,223.284 2119.54,223.739 2120.11,225.087 2120.67,226.46 2121.24,228.855 2121.81,231.816 2122.38,231.703 2122.95,229.462 2123.52,229.221 2124.08,228.09 2124.65,227.944 2125.22,226.115 2125.79,227.261 2126.36,229.467 2126.93,228.319 2127.49,227.329 2128.06,227.445 2128.63,228.586 2129.2,227.491 2129.77,228.634 2130.34,229.91 2130.9,228.957 2131.47,230.024 2132.04,228.869 2132.61,228.904 2133.18,229.018 2133.75,229.905 2134.31,229.747 2134.88,230.631 2135.45,230.485 2136.02,229.385 2136.59,229.089 2137.16,228.94 2137.72,229.071 2138.29,228.308 2138.86,224.362 2139.43,226.843 2140,227.063 2140.57,226.305 2141.13,226.641 2141.7,226.781 2142.27,230.33 2142.84,231.385 2143.41,231.336 2143.98,230.091 2144.54,230.146 2145.11,233.21 2145.68,231.094 2146.25,232.106 2146.82,229.952 2147.39,227.891 2147.95,225.94 2148.52,223.881 2149.09,225.458 2149.66,223.771 2150.23,225.098 2150.8,225.669 2151.36,224.89 2151.93,225.233 2152.5,224.697 2153.07,224.158 2153.64,224.742 2154.21,225.044 2154.77,224.999 2155.34,225.34 2155.91,223.635 2156.48,224.054 2157.05,223.5 2157.62,224.978 2158.18,225.406 2158.75,225.691 2159.32,227.125 2159.89,227.29 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip130)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip130)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip130)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip130)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ¬± 0.016\n  with uncertainty of ¬± 0.0010365772477981187\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0175 ¬± (0.002198, 0.00219019) (MC)\n  95% confidence interval: [-4.02187, -4.013]) (MC)\n  linear error propagation: -4.01808 ¬± 0.00231388\n  |Œ¥_y| = |0.00247131| (‚â§ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017500118670659, val_l = 0.004368844709730091, val_u = 0.0044979280579768854)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1141.61 2211.02,1141.61 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,962.658 2211.02,962.658 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,783.712 2211.02,783.712 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,604.765 2211.02,604.765 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,425.818 2211.02,425.818 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,246.871 2211.02,246.871 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1141.61 365.751,1141.61 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,962.658 365.751,962.658 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,783.712 365.751,783.712 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,604.765 365.751,604.765 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,425.818 365.751,425.818 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,246.871 365.751,246.871 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M298.909 1127.4 Q295.298 1127.4 293.469 1130.97 Q291.664 1134.51 291.664 1141.64 Q291.664 1148.75 293.469 1152.31 Q295.298 1155.85 298.909 1155.85 Q302.543 1155.85 304.349 1152.31 Q306.177 1148.75 306.177 1141.64 Q306.177 1134.51 304.349 1130.97 Q302.543 1127.4 298.909 1127.4 M298.909 1123.7 Q304.719 1123.7 307.775 1128.31 Q310.853 1132.89 310.853 1141.64 Q310.853 1150.37 307.775 1154.97 Q304.719 1159.56 298.909 1159.56 Q293.099 1159.56 290.02 1154.97 Q286.964 1150.37 286.964 1141.64 Q286.964 1132.89 290.02 1128.31 Q293.099 1123.7 298.909 1123.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M259.557 976.003 L267.196 976.003 L267.196 949.638 L258.886 951.304 L258.886 947.045 L267.15 945.378 L271.826 945.378 L271.826 976.003 L279.465 976.003 L279.465 979.938 L259.557 979.938 L259.557 976.003 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 948.457 Q295.298 948.457 293.469 952.022 Q291.664 955.564 291.664 962.693 Q291.664 969.8 293.469 973.364 Q295.298 976.906 298.909 976.906 Q302.543 976.906 304.349 973.364 Q306.177 969.8 306.177 962.693 Q306.177 955.564 304.349 952.022 Q302.543 948.457 298.909 948.457 M298.909 944.753 Q304.719 944.753 307.775 949.36 Q310.853 953.943 310.853 962.693 Q310.853 971.42 307.775 976.026 Q304.719 980.61 298.909 980.61 Q293.099 980.61 290.02 976.026 Q286.964 971.42 286.964 962.693 Q286.964 953.943 290.02 949.36 Q293.099 944.753 298.909 944.753 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M262.775 797.056 L279.094 797.056 L279.094 800.992 L257.15 800.992 L257.15 797.056 Q259.812 794.302 264.395 789.672 Q269.002 785.019 270.182 783.677 Q272.428 781.154 273.307 779.418 Q274.21 777.658 274.21 775.969 Q274.21 773.214 272.266 771.478 Q270.344 769.742 267.242 769.742 Q265.043 769.742 262.59 770.506 Q260.159 771.27 257.381 772.82 L257.381 768.098 Q260.205 766.964 262.659 766.385 Q265.113 765.807 267.15 765.807 Q272.52 765.807 275.715 768.492 Q278.909 771.177 278.909 775.668 Q278.909 777.797 278.099 779.719 Q277.312 781.617 275.205 784.209 Q274.627 784.881 271.525 788.098 Q268.423 791.293 262.775 797.056 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 769.51 Q295.298 769.51 293.469 773.075 Q291.664 776.617 291.664 783.746 Q291.664 790.853 293.469 794.418 Q295.298 797.959 298.909 797.959 Q302.543 797.959 304.349 794.418 Q306.177 790.853 306.177 783.746 Q306.177 776.617 304.349 773.075 Q302.543 769.51 298.909 769.51 M298.909 765.807 Q304.719 765.807 307.775 770.413 Q310.853 774.996 310.853 783.746 Q310.853 792.473 307.775 797.08 Q304.719 801.663 298.909 801.663 Q293.099 801.663 290.02 797.08 Q286.964 792.473 286.964 783.746 Q286.964 774.996 290.02 770.413 Q293.099 765.807 298.909 765.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M272.914 603.411 Q276.27 604.128 278.145 606.397 Q280.043 608.665 280.043 611.998 Q280.043 617.114 276.525 619.915 Q273.006 622.716 266.525 622.716 Q264.349 622.716 262.034 622.276 Q259.742 621.86 257.289 621.003 L257.289 616.489 Q259.233 617.623 261.548 618.202 Q263.863 618.781 266.386 618.781 Q270.784 618.781 273.076 617.045 Q275.39 615.309 275.39 611.998 Q275.39 608.943 273.238 607.23 Q271.108 605.494 267.289 605.494 L263.261 605.494 L263.261 601.651 L267.474 601.651 Q270.923 601.651 272.752 600.286 Q274.58 598.897 274.58 596.304 Q274.58 593.642 272.682 592.23 Q270.807 590.795 267.289 590.795 Q265.367 590.795 263.168 591.212 Q260.969 591.628 258.33 592.508 L258.33 588.341 Q260.992 587.6 263.307 587.23 Q265.645 586.86 267.705 586.86 Q273.029 586.86 276.131 589.29 Q279.233 591.698 279.233 595.818 Q279.233 598.688 277.59 600.679 Q275.946 602.647 272.914 603.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 590.563 Q295.298 590.563 293.469 594.128 Q291.664 597.67 291.664 604.799 Q291.664 611.906 293.469 615.471 Q295.298 619.012 298.909 619.012 Q302.543 619.012 304.349 615.471 Q306.177 611.906 306.177 604.799 Q306.177 597.67 304.349 594.128 Q302.543 590.563 298.909 590.563 M298.909 586.86 Q304.719 586.86 307.775 591.466 Q310.853 596.049 310.853 604.799 Q310.853 613.526 307.775 618.133 Q304.719 622.716 298.909 622.716 Q293.099 622.716 290.02 618.133 Q286.964 613.526 286.964 604.799 Q286.964 596.049 290.02 591.466 Q293.099 586.86 298.909 586.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M271.594 412.612 L259.789 431.061 L271.594 431.061 L271.594 412.612 M270.367 408.538 L276.247 408.538 L276.247 431.061 L281.177 431.061 L281.177 434.95 L276.247 434.95 L276.247 443.098 L271.594 443.098 L271.594 434.95 L255.992 434.95 L255.992 430.436 L270.367 408.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 411.617 Q295.298 411.617 293.469 415.181 Q291.664 418.723 291.664 425.853 Q291.664 432.959 293.469 436.524 Q295.298 440.065 298.909 440.065 Q302.543 440.065 304.349 436.524 Q306.177 432.959 306.177 425.853 Q306.177 418.723 304.349 415.181 Q302.543 411.617 298.909 411.617 M298.909 407.913 Q304.719 407.913 307.775 412.519 Q310.853 417.103 310.853 425.853 Q310.853 434.579 307.775 439.186 Q304.719 443.769 298.909 443.769 Q293.099 443.769 290.02 439.186 Q286.964 434.579 286.964 425.853 Q286.964 417.103 290.02 412.519 Q293.099 407.913 298.909 407.913 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M258.793 229.591 L277.15 229.591 L277.15 233.526 L263.076 233.526 L263.076 241.998 Q264.094 241.651 265.113 241.489 Q266.131 241.304 267.15 241.304 Q272.937 241.304 276.316 244.475 Q279.696 247.646 279.696 253.063 Q279.696 258.642 276.224 261.744 Q272.752 264.822 266.432 264.822 Q264.256 264.822 261.988 264.452 Q259.742 264.082 257.335 263.341 L257.335 258.642 Q259.418 259.776 261.641 260.332 Q263.863 260.887 266.34 260.887 Q270.344 260.887 272.682 258.781 Q275.02 256.674 275.02 253.063 Q275.02 249.452 272.682 247.346 Q270.344 245.239 266.34 245.239 Q264.465 245.239 262.59 245.656 Q260.738 246.072 258.793 246.952 L258.793 229.591 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M298.909 232.67 Q295.298 232.67 293.469 236.235 Q291.664 239.776 291.664 246.906 Q291.664 254.012 293.469 257.577 Q295.298 261.119 298.909 261.119 Q302.543 261.119 304.349 257.577 Q306.177 254.012 306.177 246.906 Q306.177 239.776 304.349 236.235 Q302.543 232.67 298.909 232.67 M298.909 228.966 Q304.719 228.966 307.775 233.572 Q310.853 238.156 310.853 246.906 Q310.853 255.633 307.775 260.239 Q304.719 264.822 298.909 264.822 Q293.099 264.822 290.02 260.239 Q286.964 255.633 286.964 246.906 Q286.964 238.156 290.02 233.572 Q293.099 228.966 298.909 228.966 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1009.75 400.199,888.619 400.786,777.476 401.372,675.65 401.958,582.521 402.545,848.823 403.131,755.187 403.718,669.847 404.304,773.298 404.891,769.7 405.477,691.614 406.063,620.367 406.65,554.336 407.236,494.387 407.823,440.126 408.409,391.186 408.995,347.221 409.582,366.935 410.168,332.447 410.755,298.796 411.341,270.309 411.927,291.162 412.514,308.741 413.1,285.401 413.687,265.187 414.273,247.297 414.86,232.275 415.446,219.895 416.032,270.112 416.619,315.799 417.205,305.018 417.792,321.062 418.378,314.221 418.964,308.073 419.551,324.115 420.137,320.428 420.724,319.137 421.31,319.702 421.896,337.962 422.483,340.713 423.069,343.363 423.656,349.427 424.242,354.818 424.829,373.424 425.415,403.193 426.001,409.707 426.588,438.443 427.174,445.543 427.761,463.039 428.347,470.028 428.933,477.103 429.52,494.525 430.106,511.026 430.693,519.228 431.279,543.962 431.865,559.497 432.452,581.635 433.038,596.559 433.625,624.25 434.211,644.102 434.798,657.426 435.384,664.49 435.97,677.362 436.557,700.499 437.143,722.144 437.73,733.014 438.316,749.001 438.902,764.562 439.489,775.212 440.075,789.681 440.662,804.287 441.248,818.367 441.835,824.642 442.421,835.308 443.007,848.437 443.594,857.772 444.18,866.929 444.767,879.474 445.353,888.691 445.939,904.892 446.526,910.469 447.112,916.255 447.699,921.988 448.285,934.174 448.871,945.371 449.458,953.753 450.044,964.882 450.631,975.381 451.217,993.566 451.804,1000.42 452.39,1009.36 452.976,1012.87 453.563,1018.78 454.149,1037.51 454.736,1043.44 455.322,1046.7 455.908,1050.25 456.495,1055.83 457.081,1059.33 457.668,1067.38 458.254,1086.42 458.84,1090.78 459.427,1097.22 460.013,1098.92 460.6,1103.43 461.186,1105.44 461.773,1111.33 462.359,1112.89 462.945,1118.7 463.532,1122.55 464.118,1121.92 464.705,1125.82 465.291,1127.47 465.877,1126.83 466.464,1128.66 467.05,1132.41 467.637,1134.44 468.223,1136.82 468.809,1136.97 469.396,1141.35 469.982,1143.72 470.569,1147.22 471.155,1158.03 471.742,1163 472.328,1164.15 472.914,1171 473.501,1175.51 474.087,1179.71 474.674,1182.1 475.26,1182.61 475.846,1186.99 476.433,1192.62 477.019,1198.34 477.606,1200.09 478.192,1206.35 478.778,1206.2 479.365,1206.1 479.951,1207.34 480.538,1208.98 481.124,1208.86 481.711,1213.64 482.297,1216.73 482.883,1214.77 483.47,1216.12 484.056,1214.47 484.643,1216.25 485.229,1217.64 485.815,1216.04 486.402,1217.62 486.988,1217.56 487.575,1219.28 488.161,1222.51 488.748,1228.62 489.334,1229.48 489.92,1227.21 490.507,1226.68 491.093,1229.34 491.68,1226.99 492.266,1229.96 492.852,1229.58 493.439,1230.74 494.025,1228.62 494.612,1230.07 495.198,1231.78 495.784,1235.93 496.371,1236.75 496.957,1237.53 497.544,1239.98 498.13,1236.06 498.717,1234.28 499.303,1235.3 499.889,1234.7 500.476,1234.39 501.062,1235.69 501.649,1233.28 502.235,1233.34 502.821,1234.73 503.408,1232.88 503.994,1232.61 504.581,1233.97 505.167,1235.38 505.753,1233.55 506.34,1239.63 506.926,1240.42 507.513,1241.28 508.099,1243.67 508.686,1245.73 509.272,1245.14 509.858,1244.49 510.445,1240.61 511.031,1241.54 511.618,1241.03 512.204,1241.96 512.79,1242.93 513.377,1239.37 513.963,1240.46 514.55,1239.98 515.136,1242.29 515.722,1241.69 516.309,1241.56 516.895,1239.48 517.482,1245.25 518.068,1247.33 518.655,1247.87 519.241,1247.4 519.827,1246.77 520.414,1249.19 521,1249.82 521.587,1247.35 522.173,1246.66 522.759,1247.45 523.346,1245.18 523.932,1244.53 524.519,1245.35 525.105,1246.18 525.691,1246.69 526.278,1246.98 526.864,1250.53 527.451,1249.3 528.037,1248.37 528.624,1247.5 529.21,1246.89 529.796,1245.75 530.383,1243.49 530.969,1244.69 531.556,1244.05 532.142,1243.31 532.728,1241.22 533.315,1240.36 533.901,1242.77 534.488,1243.79 535.074,1242.88 535.661,1240.89 536.247,1240.74 536.833,1240.23 537.42,1242.72 538.006,1240.38 538.593,1242.7 539.179,1242.23 539.765,1240.17 540.352,1239.36 540.938,1244.95 541.525,1245.59 542.111,1247.84 542.697,1245.05 543.284,1241.44 543.87,1241.01 544.457,1241.87 545.043,1238.08 545.63,1236.13 546.216,1234.37 546.802,1231.45 547.389,1231.43 547.975,1234.14 548.562,1233.92 549.148,1232.5 549.734,1229.51 550.321,1230.75 550.907,1230.54 551.494,1230.7 552.08,1230.57 552.666,1233.8 553.253,1233.47 553.839,1233.25 554.426,1235.94 555.012,1235.58 555.599,1238.22 556.185,1242.19 556.771,1241.52 557.358,1240.97 557.944,1241.59 558.531,1240.85 559.117,1240.53 559.703,1239.7 560.29,1237.73 560.876,1237.37 561.463,1239.79 562.049,1236.22 562.635,1238.76 563.222,1241.33 563.808,1244.99 564.395,1244.03 564.981,1243.2 565.568,1239.79 566.154,1239.12 566.74,1237.36 567.327,1236.86 567.913,1234.83 568.5,1235.82 569.086,1235.62 569.672,1235.23 570.259,1236.03 570.845,1236.99 571.432,1236.64 572.018,1236.26 572.605,1238.45 573.191,1239.29 573.777,1235.83 574.364,1233.95 574.95,1235.28 575.537,1234.84 576.123,1237.64 576.709,1234.4 577.296,1235.51 577.882,1242.52 578.469,1240.36 579.055,1244.06 579.641,1243.37 580.228,1242.66 580.814,1244.75 581.401,1243.66 581.987,1243.07 582.574,1243.82 583.16,1244.26 583.746,1244.84 584.333,1242.44 584.919,1243 585.506,1242.28 586.092,1240.12 586.678,1236.53 587.265,1235.79 587.851,1235.26 588.438,1236.29 589.024,1237.17 589.61,1236.53 590.197,1237.19 590.783,1236.56 591.37,1233.25 591.956,1231.46 592.543,1230.93 593.129,1232.32 593.715,1234.54 594.302,1231.2 594.888,1226.81 595.475,1226.69 596.061,1222.6 596.647,1224.2 597.234,1222.79 597.82,1223 598.407,1224.82 598.993,1225.09 599.579,1223.45 600.166,1226.34 600.752,1229.44 601.339,1231.02 601.925,1229.43 602.512,1230.35 603.098,1231.45 603.684,1231.17 604.271,1230.99 604.857,1232.27 605.444,1231.84 606.03,1233.08 606.616,1229.68 607.203,1232.16 607.789,1230.28 608.376,1229.71 608.962,1229.33 609.548,1226.12 610.135,1230.29 610.721,1228.71 611.308,1225.69 611.894,1222.64 612.481,1225.49 613.067,1226.75 613.653,1229.3 614.24,1230.38 614.826,1230.06 615.413,1229.49 615.999,1229.3 616.585,1230.45 617.172,1226.68 617.758,1226.65 618.345,1225.02 618.931,1223.37 619.518,1222.16 620.104,1223.62 620.69,1223.43 621.277,1224.74 621.863,1223.35 622.45,1226.28 623.036,1226.31 623.622,1221.67 624.209,1224.95 624.795,1222.15 625.382,1222.06 625.968,1219.41 626.554,1224.06 627.141,1224.17 627.727,1224.01 628.314,1223.54 628.9,1223.65 629.487,1226.68 630.073,1227.83 630.659,1229.23 631.246,1229.02 631.832,1230.32 632.419,1231.5 633.005,1231.28 633.591,1231.06 634.178,1230.48 634.764,1231.45 635.351,1230.98 635.937,1230.53 636.523,1230.01 637.11,1228.18 637.696,1229.42 638.283,1230.57 638.869,1228.54 639.456,1229.72 640.042,1231 640.628,1231.74 641.215,1229.85 641.801,1227.87 642.388,1227.55 642.974,1225.99 643.56,1227.33 644.147,1227.34 644.733,1226.71 645.32,1226.5 645.906,1226.25 646.492,1227.59 647.079,1227.44 647.665,1222.69 648.252,1222.68 648.838,1224.19 649.425,1222.85 650.011,1225.98 650.597,1227.17 651.184,1225.45 651.77,1226.95 652.357,1225.64 652.943,1225.69 653.529,1225.26 654.116,1226.2 654.702,1227.15 655.289,1229.73 655.875,1231.07 656.462,1232.18 657.048,1233.13 657.634,1234.18 658.221,1233.6 658.807,1229.92 659.394,1228.15 659.98,1226.07 660.566,1224.81 661.153,1222.91 661.739,1222.52 662.326,1219.49 662.912,1219.51 663.498,1218.3 664.085,1216.87 664.671,1215.51 665.258,1217.43 665.844,1214.94 666.431,1212.17 667.017,1214.16 667.603,1216.68 668.19,1217.03 668.776,1217.15 669.363,1221.86 669.949,1221.55 670.535,1221.64 671.122,1221.72 671.708,1218.54 672.295,1218.57 672.881,1217.14 673.467,1217.27 674.054,1217.5 674.64,1223.48 675.227,1222.13 675.813,1223.68 676.4,1223.71 676.986,1225.06 677.572,1224.84 678.159,1224.76 678.745,1223.22 679.332,1224.8 679.918,1223.07 680.504,1222.64 681.091,1222.29 681.677,1225.04 682.264,1223.34 682.85,1224.46 683.436,1225.71 684.023,1227.15 684.609,1226.9 685.196,1223.85 685.782,1219.25 686.369,1219.09 686.955,1217.8 687.541,1218.06 688.128,1217.93 688.714,1218.17 689.301,1218.29 689.887,1219.71 690.473,1217.94 691.06,1219.52 691.646,1224.18 692.233,1224 692.819,1225.26 693.405,1226.29 693.992,1227.24 694.578,1226.86 695.165,1228.14 695.751,1226.07 696.338,1227.36 696.924,1224.41 697.51,1223.7 698.097,1222 698.683,1223.56 699.27,1224.74 699.856,1227.54 700.442,1226.69 701.029,1223.46 701.615,1223.02 702.202,1220.99 702.788,1222.14 703.375,1223.42 703.961,1224.17 704.547,1222.44 705.134,1222.22 705.72,1223.54 706.307,1220.29 706.893,1218.7 707.479,1217.23 708.066,1215.91 708.652,1215.91 709.239,1216.05 709.825,1219.02 710.411,1219.37 710.998,1217.67 711.584,1219.23 712.171,1222.22 712.757,1224.89 713.344,1226.08 713.93,1222.42 714.516,1222.36 715.103,1219.36 715.689,1219.36 716.276,1219.16 716.862,1219.22 717.448,1216.27 718.035,1217.41 718.621,1217.64 719.208,1214.75 719.794,1217.96 720.38,1218.02 720.967,1218.21 721.553,1216.56 722.14,1218.38 722.726,1220.09 723.313,1220.23 723.899,1220.2 724.485,1218.59 725.072,1218.34 725.658,1218.44 726.245,1218.07 726.831,1219.67 727.417,1222.4 728.004,1222.14 728.59,1223.5 729.177,1222.18 729.763,1221.6 730.349,1219.81 730.936,1219.42 731.522,1219.71 732.109,1216.58 732.695,1215.27 733.282,1215.54 733.868,1212.53 734.454,1212.88 735.041,1211.69 735.627,1209.22 736.214,1209.78 736.8,1213.14 737.386,1215.03 737.973,1213.76 738.559,1216.58 739.146,1216.48 739.732,1215.31 740.318,1213.87 740.905,1213.98 741.491,1214.21 742.078,1211.68 742.664,1208.85 743.251,1206.23 743.837,1205.54 744.423,1209.28 745.01,1208.41 745.596,1208.86 746.183,1209.16 746.769,1211.24 747.355,1211.34 747.942,1210.19 748.528,1211.89 749.115,1213.39 749.701,1214.9 750.288,1215 750.874,1215.31 751.46,1214.04 752.047,1213.1 752.633,1213.17 753.22,1213.55 753.806,1213.85 754.392,1214.04 754.979,1220.2 755.565,1219.98 756.152,1222.83 756.738,1225.45 757.324,1222.16 757.911,1223.11 758.497,1222.76 759.084,1219.53 759.67,1218.19 760.257,1219.58 760.843,1219.29 761.429,1221.96 762.016,1220.28 762.602,1217.31 763.189,1214.46 763.775,1214.62 764.361,1214.44 764.948,1216.15 765.534,1215.07 766.121,1216.3 766.707,1212.08 767.293,1213.95 767.88,1215.87 768.466,1216.1 769.053,1217.8 769.639,1217.94 770.226,1216.27 770.812,1219.68 771.398,1220.96 771.985,1220.49 772.571,1218.8 773.158,1221.67 773.744,1218.55 774.33,1220.9 774.917,1220.86 775.503,1220.59 776.09,1220.37 776.676,1221.9 777.262,1221.85 777.849,1218.53 778.435,1217.24 779.022,1215.62 779.608,1211.39 780.195,1213.59 780.781,1213.88 781.367,1214.2 781.954,1217.46 782.54,1220.09 783.127,1219.77 783.713,1219.59 784.299,1217.94 784.886,1221.15 785.472,1218.21 786.059,1216.77 786.645,1216.9 787.232,1215.63 787.818,1215.75 788.404,1217.6 788.991,1218.98 789.577,1218.72 790.164,1217.08 790.75,1212.74 791.336,1214.3 791.923,1216 792.509,1218.76 793.096,1217.02 793.682,1216.82 794.268,1216.71 794.855,1216.49 795.441,1217.88 796.028,1216.29 796.614,1216.15 797.201,1216.44 797.787,1214.75 798.373,1214.81 798.96,1215.01 799.546,1216.19 800.133,1217.84 800.719,1216.55 801.305,1216.78 801.892,1216.74 802.478,1216.69 803.065,1216.85 803.651,1217.05 804.237,1215.68 804.824,1217.31 805.41,1217.06 805.997,1218.69 806.583,1218.66 807.17,1218.68 807.756,1216.91 808.342,1215.48 808.929,1215.45 809.515,1218.3 810.102,1218.07 810.688,1219.33 811.274,1218.89 811.861,1217.33 812.447,1218.53 813.034,1219.94 813.62,1222.83 814.206,1222.68 814.793,1222.27 815.379,1222.01 815.966,1223.34 816.552,1221.32 817.139,1219.27 817.725,1221.75 818.311,1221.13 818.898,1221.02 819.484,1220.54 820.071,1220.07 820.657,1219.65 821.243,1219.56 821.83,1219.23 822.416,1216.36 823.003,1216.72 823.589,1216.64 824.175,1218.23 824.762,1220.96 825.348,1221.99 825.935,1222.85 826.521,1222.48 827.108,1220.38 827.694,1220.14 828.28,1219.83 828.867,1220.97 829.453,1222.12 830.04,1223.67 830.626,1220.67 831.212,1220.17 831.799,1219.98 832.385,1216.71 832.972,1215.19 833.558,1213.54 834.145,1211.99 834.731,1212.31 835.317,1212.61 835.904,1215.25 836.49,1215.25 837.077,1216.96 837.663,1215.42 838.249,1216.91 838.836,1215.7 839.422,1214.4 840.009,1214.48 840.595,1213.2 841.181,1213.58 841.768,1212.19 842.354,1214.01 842.941,1212.67 843.527,1211.71 844.114,1211.55 844.7,1210.45 845.286,1212.11 845.873,1210.79 846.459,1210.74 847.046,1210.99 847.632,1211.26 848.218,1214.52 848.805,1214.49 849.391,1217.65 849.978,1217.48 850.564,1217.39 851.15,1217.32 851.737,1216.18 852.323,1217.55 852.91,1217.41 853.496,1218.64 854.083,1218.42 854.669,1219.76 855.255,1218.17 855.842,1218.33 856.428,1218.39 857.015,1218.05 857.601,1219.22 858.187,1218.53 858.774,1219.65 859.36,1218.39 859.947,1218.02 860.533,1217.86 861.119,1219.32 861.706,1217.77 862.292,1219.19 862.879,1217.68 863.465,1217.63 864.052,1217.8 864.638,1214.81 865.224,1219.44 865.811,1216.06 866.397,1216.03 866.984,1216.04 867.57,1218.84 868.156,1220.04 868.743,1220.02 869.329,1219.86 869.916,1218.43 870.502,1218.58 871.089,1219.72 871.675,1219.63 872.261,1220.68 872.848,1223.12 873.434,1222.6 874.021,1225.09 874.607,1223.07 875.193,1219.6 875.78,1222.31 876.366,1219.69 876.953,1224.1 877.539,1224.93 878.125,1225.7 878.712,1223.82 879.298,1223.33 879.885,1224.2 880.471,1223.8 881.058,1224.81 881.644,1224.35 882.23,1222.2 882.817,1221.81 883.403,1221.72 883.99,1218.33 884.576,1219.65 885.162,1221.2 885.749,1222.17 886.335,1224.67 886.922,1224.07 887.508,1225.12 888.094,1221.83 888.681,1221.84 889.267,1221.27 889.854,1219.72 890.44,1217.94 891.027,1217.58 891.613,1213.01 892.199,1212.93 892.786,1209.93 893.372,1210.19 893.959,1210.29 894.545,1206.08 895.131,1205.07 895.718,1207.05 896.304,1207.55 896.891,1206.24 897.477,1208.21 898.063,1207.14 898.65,1208.91 899.236,1209.47 899.823,1209.72 900.409,1211.44 900.996,1217.45 901.582,1214.49 902.168,1214.63 902.755,1214.51 903.341,1215.68 903.928,1216.99 904.514,1216.84 905.1,1214.09 905.687,1211.42 906.273,1208.76 906.86,1209 907.446,1209.49 908.032,1208.22 908.619,1208.4 909.205,1208.88 909.792,1207.37 910.378,1207.77 910.965,1206.63 911.551,1208.27 912.137,1208.5 912.724,1208.47 913.31,1208.96 913.897,1209.59 914.483,1208.2 915.069,1207.31 915.656,1206.16 916.242,1206.57 916.829,1208.42 917.415,1211.81 918.002,1213.61 918.588,1214.89 919.174,1216.44 919.761,1216.63 920.347,1218.17 920.934,1221.06 921.52,1221.93 922.106,1223.03 922.693,1222.44 923.279,1223.69 923.866,1221.97 924.452,1221.7 925.038,1221.29 925.625,1222.58 926.211,1225.05 926.798,1223.27 927.384,1224.18 927.971,1225.25 928.557,1225.12 929.143,1226.18 929.73,1224.24 930.316,1223.93 930.903,1223.39 931.489,1224.61 932.075,1222.36 932.662,1220.76 933.248,1223.46 933.835,1223.91 934.421,1223.62 935.007,1220.41 935.594,1223.06 936.18,1225.29 936.767,1226.03 937.353,1223.99 937.94,1222.33 938.526,1221.99 939.112,1223.23 939.699,1228.75 940.285,1226.71 940.872,1226.08 941.458,1223.8 942.044,1223.29 942.631,1220.11 943.217,1220.27 943.804,1218.58 944.39,1218.62 944.976,1220.2 945.563,1219.79 946.149,1222.13 946.736,1223.48 947.322,1220.22 947.909,1216.8 948.495,1213.36 949.081,1211.92 949.668,1210.47 950.254,1210.45 950.841,1210.64 951.427,1210.63 952.013,1212.29 952.6,1211.03 953.186,1209.71 953.773,1210.09 954.359,1210.68 954.945,1212.16 955.532,1213.49 956.118,1214.95 956.705,1214.94 957.291,1214.69 957.878,1214.86 958.464,1219.12 959.05,1219.03 959.637,1215.97 960.223,1215.84 960.81,1216.93 961.396,1216.48 961.982,1215.14 962.569,1216.35 963.155,1217.76 963.742,1216.24 964.328,1218.88 964.915,1214.46 965.501,1217.6 966.087,1215.71 966.674,1209.76 967.26,1211.24 967.847,1213.06 968.433,1211.63 969.019,1210.21 969.606,1209 970.192,1209.35 970.779,1209.76 971.365,1210.04 971.951,1210.01 972.538,1207.22 973.124,1207.56 973.711,1204.93 974.297,1203.98 974.884,1205.96 975.47,1206.42 976.056,1206.7 976.643,1210.13 977.229,1211.86 977.816,1211.78 978.402,1208.84 978.988,1211.86 979.575,1213.45 980.161,1216.32 980.748,1216.13 981.334,1217.7 981.92,1211.79 982.507,1211.88 983.093,1212.01 983.68,1210.53 984.266,1211.91 984.853,1208.86 985.439,1204.7 986.025,1205.48 986.612,1206.23 987.198,1207.94 987.785,1206.97 988.371,1205.79 988.957,1209.02 989.544,1210.81 990.13,1215.54 990.717,1217.11 991.303,1215.51 991.889,1216.86 992.476,1215.07 993.062,1212.41 993.649,1210.94 994.235,1209.89 994.822,1208.48 995.408,1210.16 995.994,1210.57 996.581,1210.74 997.167,1210.78 997.754,1210.99 998.34,1209.88 998.926,1208.45 999.513,1210.32 1000.1,1210.67 1000.69,1212.27 1001.27,1212.57 1001.86,1211.31 1002.44,1209.94 1003.03,1211.24 1003.62,1209.73 1004.2,1211.6 1004.79,1214.96 1005.38,1213.26 1005.96,1213.33 1006.55,1210.63 1007.14,1212.18 1007.72,1211.88 1008.31,1211.05 1008.9,1211.19 1009.48,1213.19 1010.07,1213.36 1010.65,1211.02 1011.24,1212.48 1011.83,1213.75 1012.41,1210.86 1013,1210.97 1013.59,1209.58 1014.17,1209.87 1014.76,1210.05 1015.35,1210.04 1015.93,1211.7 1016.52,1213.06 1017.11,1212.86 1017.69,1214.37 1018.28,1217.37 1018.86,1219.01 1019.45,1216.1 1020.04,1212.99 1020.62,1214.62 1021.21,1211.79 1021.8,1213.52 1022.38,1213.31 1022.97,1216.06 1023.56,1217.81 1024.14,1217.8 1024.73,1216.34 1025.32,1216.33 1025.9,1216.53 1026.49,1217.98 1027.07,1219.32 1027.66,1220.53 1028.25,1220.19 1028.83,1219.96 1029.42,1219.39 1030.01,1217.45 1030.59,1218.47 1031.18,1219.75 1031.77,1219.52 1032.35,1220.79 1032.94,1218.58 1033.52,1217.03 1034.11,1218.83 1034.7,1217.08 1035.28,1218.69 1035.87,1221.27 1036.46,1222.4 1037.04,1221.02 1037.63,1220.55 1038.22,1219.15 1038.8,1215.85 1039.39,1213.94 1039.98,1214.02 1040.56,1214.35 1041.15,1214.23 1041.73,1213.04 1042.32,1213.33 1042.91,1210.37 1043.49,1209.27 1044.08,1209.56 1044.67,1208.07 1045.25,1208.7 1045.84,1208.98 1046.43,1207.97 1047.01,1205.3 1047.6,1207.36 1048.19,1206.07 1048.77,1209.3 1049.36,1210.72 1049.94,1210.84 1050.53,1209.66 1051.12,1210.04 1051.7,1211.77 1052.29,1213.26 1052.88,1213.46 1053.46,1215.18 1054.05,1215.01 1054.64,1212.28 1055.22,1212.56 1055.81,1208.36 1056.39,1208.82 1056.98,1207.78 1057.57,1208.07 1058.15,1208.05 1058.74,1211.13 1059.33,1211.01 1059.91,1211.22 1060.5,1212.57 1061.09,1215.42 1061.67,1216.5 1062.26,1216.65 1062.85,1219.14 1063.43,1217.44 1064.02,1217.24 1064.6,1218.99 1065.19,1221.75 1065.78,1218.45 1066.36,1219.81 1066.95,1220.81 1067.54,1218.91 1068.12,1218.63 1068.71,1218.65 1069.3,1219.71 1069.88,1219.52 1070.47,1219 1071.06,1217.2 1071.64,1218.22 1072.23,1216.48 1072.81,1214.95 1073.4,1212.38 1073.99,1209.65 1074.57,1209.92 1075.16,1211.28 1075.75,1211.87 1076.33,1213.39 1076.92,1213.48 1077.51,1213.23 1078.09,1212.1 1078.68,1212.24 1079.26,1210.93 1079.85,1208.34 1080.44,1210.07 1081.02,1207.66 1081.61,1209.42 1082.2,1208.25 1082.78,1210.13 1083.37,1210.45 1083.96,1210.86 1084.54,1211.02 1085.13,1212.31 1085.72,1212.46 1086.3,1210.98 1086.89,1209.54 1087.47,1209.54 1088.06,1214.44 1088.65,1214.78 1089.23,1214.33 1089.82,1217.57 1090.41,1215.92 1090.99,1215.64 1091.58,1218.32 1092.17,1220.77 1092.75,1221.77 1093.34,1221.5 1093.93,1221.17 1094.51,1222.36 1095.1,1223.45 1095.68,1221.23 1096.27,1216.38 1096.86,1215.11 1097.44,1216.78 1098.03,1216.28 1098.62,1215.94 1099.2,1215.83 1099.79,1214.11 1100.38,1219.67 1100.96,1220.98 1101.55,1220.2 1102.14,1216.8 1102.72,1214.78 1103.31,1214.56 1103.89,1214.35 1104.48,1213 1105.07,1208.67 1105.65,1209.09 1106.24,1207.88 1106.83,1209.65 1107.41,1208.37 1108,1212.59 1108.59,1215.58 1109.17,1215.3 1109.76,1215.15 1110.34,1213.65 1110.93,1209.08 1111.52,1209.13 1112.1,1209.34 1112.69,1210.99 1113.28,1210.77 1113.86,1208.15 1114.45,1210.13 1115.04,1213.25 1115.62,1210.34 1116.21,1209.22 1116.8,1211.19 1117.38,1212.5 1117.97,1213.83 1118.55,1213.48 1119.14,1213.55 1119.73,1212.05 1120.31,1213.32 1120.9,1213.41 1121.49,1214.7 1122.07,1213.12 1122.66,1213.18 1123.25,1212.97 1123.83,1214.38 1124.42,1215.73 1125.01,1218.51 1125.59,1214.89 1126.18,1212 1126.76,1207.85 1127.35,1209.67 1127.94,1209.73 1128.52,1208.48 1129.11,1207.15 1129.7,1207.59 1130.28,1206.48 1130.87,1207.19 1131.46,1210.71 1132.04,1212.23 1132.63,1211.18 1133.21,1212.91 1133.8,1210.29 1134.39,1210.59 1134.97,1212.2 1135.56,1210.94 1136.15,1208.08 1136.73,1210.13 1137.32,1207.32 1137.91,1206.09 1138.49,1207.71 1139.08,1208.39 1139.67,1207.1 1140.25,1207.7 1140.84,1207.99 1141.42,1207.96 1142.01,1208.27 1142.6,1210.09 1143.18,1213.24 1143.77,1215.02 1144.36,1215.34 1144.94,1216.85 1145.53,1216.93 1146.12,1216.81 1146.7,1216.75 1147.29,1216.99 1147.88,1218.41 1148.46,1218.2 1149.05,1219.15 1149.63,1215.89 1150.22,1217.21 1150.81,1218.67 1151.39,1221.4 1151.98,1218.25 1152.57,1219.28 1153.15,1217.76 1153.74,1220.52 1154.33,1222.12 1154.91,1221.53 1155.5,1222.79 1156.09,1217.98 1156.67,1218.12 1157.26,1216.63 1157.84,1218.02 1158.43,1219.3 1159.02,1217.92 1159.6,1223.61 1160.19,1223.5 1160.78,1222.81 1161.36,1222.36 1161.95,1220.62 1162.54,1220.25 1163.12,1223.95 1163.71,1223.64 1164.29,1226.16 1164.88,1225.15 1165.47,1223.18 1166.05,1226.98 1166.64,1227.64 1167.23,1226.69 1167.81,1225.78 1168.4,1224.94 1168.99,1222.81 1169.57,1222.41 1170.16,1220.56 1170.75,1219.03 1171.33,1217.52 1171.92,1221.71 1172.5,1221.33 1173.09,1221.16 1173.68,1223.49 1174.26,1226.15 1174.85,1221.1 1175.44,1220.6 1176.02,1220.19 1176.61,1222.81 1177.2,1220.93 1177.78,1218.85 1178.37,1219.59 1178.96,1216.35 1179.54,1216.25 1180.13,1214.55 1180.71,1214.55 1181.3,1215.98 1181.89,1214.19 1182.47,1213.96 1183.06,1213.66 1183.65,1214.75 1184.23,1212.97 1184.82,1212.97 1185.41,1213 1185.99,1211.64 1186.58,1211.5 1187.16,1208.72 1187.75,1212.2 1188.34,1212.19 1188.92,1210.73 1189.51,1212.51 1190.1,1212.7 1190.68,1210.08 1191.27,1210.32 1191.86,1209 1192.44,1209.51 1193.03,1209.8 1193.62,1211.39 1194.2,1208.99 1194.79,1206.34 1195.37,1207.95 1195.96,1209.9 1196.55,1209.67 1197.13,1211.6 1197.72,1210.35 1198.31,1212.36 1198.89,1212.38 1199.48,1215.72 1200.07,1214.52 1200.65,1220.21 1201.24,1219.78 1201.83,1217.99 1202.41,1216.25 1203,1217.76 1203.58,1217.45 1204.17,1218.63 1204.76,1216.89 1205.34,1218.41 1205.93,1218.19 1206.52,1218.01 1207.1,1219.33 1207.69,1218.95 1208.28,1220.25 1208.86,1218.57 1209.45,1216.53 1210.03,1215.03 1210.62,1215.16 1211.21,1214.89 1211.79,1214.98 1212.38,1215.13 1212.97,1215.16 1213.55,1217.02 1214.14,1216.77 1214.73,1215.57 1215.31,1218.41 1215.9,1218.07 1216.49,1216.58 1217.07,1214.9 1217.66,1215.22 1218.24,1215.12 1218.83,1213.59 1219.42,1213.69 1220,1212.25 1220.59,1209.61 1221.18,1211.21 1221.76,1214.24 1222.35,1212.7 1222.94,1212.92 1223.52,1211.62 1224.11,1210.54 1224.7,1210.83 1225.28,1210.87 1225.87,1209.51 1226.45,1212.74 1227.04,1213.97 1227.63,1216.84 1228.21,1212.56 1228.8,1214.07 1229.39,1215.47 1229.97,1214.1 1230.56,1215.51 1231.15,1219.67 1231.73,1220.89 1232.32,1221.87 1232.91,1221.54 1233.49,1221.03 1234.08,1222.09 1234.66,1220.5 1235.25,1218.74 1235.84,1215.11 1236.42,1213.64 1237.01,1213.72 1237.6,1212.32 1238.18,1210.56 1238.77,1212.35 1239.36,1212.55 1239.94,1212.57 1240.53,1211.08 1241.11,1212.74 1241.7,1215.94 1242.29,1215.93 1242.87,1218.93 1243.46,1220.04 1244.05,1222.47 1244.63,1220.59 1245.22,1220.34 1245.81,1219.87 1246.39,1222.12 1246.98,1221.76 1247.57,1217.21 1248.15,1218.14 1248.74,1217.8 1249.32,1215.96 1249.91,1217.05 1250.5,1216.33 1251.08,1216.04 1251.67,1217.15 1252.26,1218.41 1252.84,1219.51 1253.43,1220.49 1254.02,1218.67 1254.6,1218.34 1255.19,1218.18 1255.78,1218.3 1256.36,1219.28 1256.95,1220.72 1257.53,1220.4 1258.12,1218.56 1258.71,1216.82 1259.29,1216.53 1259.88,1212.03 1260.47,1213.82 1261.05,1214.01 1261.64,1210.78 1262.23,1212.33 1262.81,1212.54 1263.4,1212.59 1263.98,1209.6 1264.57,1209.78 1265.16,1205.79 1265.74,1206.08 1266.33,1204.87 1266.92,1206.97 1267.5,1205.88 1268.09,1201.9 1268.68,1202.61 1269.26,1203.02 1269.85,1203.92 1270.44,1206 1271.02,1206.44 1271.61,1206.47 1272.19,1205.44 1272.78,1207.65 1273.37,1210.91 1273.95,1212.39 1274.54,1212.44 1275.13,1213.89 1275.71,1214.11 1276.3,1214.37 1276.89,1211.46 1277.47,1210.3 1278.06,1211.91 1278.65,1210.74 1279.23,1210.83 1279.82,1212.86 1280.4,1216.07 1280.99,1216.01 1281.58,1214.91 1282.16,1211.77 1282.75,1213.4 1283.34,1210.62 1283.92,1209.27 1284.51,1209.33 1285.1,1208.04 1285.68,1206.75 1286.27,1208.41 1286.86,1210.11 1287.44,1212.57 1288.03,1210.89 1288.61,1212.63 1289.2,1214.16 1289.79,1218.16 1290.37,1216.38 1290.96,1217.9 1291.55,1217.99 1292.13,1218.8 1292.72,1216.89 1293.31,1213.7 1293.89,1213.65 1294.48,1210.58 1295.06,1210.86 1295.65,1210.86 1296.24,1211.31 1296.82,1211.57 1297.41,1213.17 1298,1214.47 1298.58,1213.2 1299.17,1211.59 1299.76,1212.98 1300.34,1213.14 1300.93,1211.75 1301.52,1209.91 1302.1,1209.94 1302.69,1211.55 1303.27,1211.7 1303.86,1214.69 1304.45,1216.1 1305.03,1215.96 1305.62,1216.24 1306.21,1210.4 1306.79,1213.56 1307.38,1212.44 1307.97,1212.42 1308.55,1212.64 1309.14,1215.01 1309.73,1216.34 1310.31,1214.72 1310.9,1213.31 1311.48,1214.56 1312.07,1214.67 1312.66,1212.98 1313.24,1213.08 1313.83,1214.51 1314.42,1215.57 1315,1215.2 1315.59,1216.46 1316.18,1216.22 1316.76,1214.71 1317.35,1217.45 1317.93,1215.32 1318.52,1212.38 1319.11,1214.08 1319.69,1212.37 1320.28,1214.14 1320.87,1211.5 1321.45,1217.32 1322.04,1212.75 1322.63,1212.99 1323.21,1216.15 1323.8,1216.19 1324.39,1211.63 1324.97,1211.48 1325.56,1207.13 1326.14,1205.95 1326.73,1206.27 1327.32,1206.47 1327.9,1205.28 1328.49,1202.68 1329.08,1204.85 1329.66,1205.12 1330.25,1201.16 1330.84,1205.13 1331.42,1205.65 1332.01,1210.06 1332.6,1208.79 1333.18,1208.86 1333.77,1207.6 1334.35,1207.92 1334.94,1208.36 1335.53,1214.31 1336.11,1215.93 1336.7,1218.64 1337.29,1216.84 1337.87,1218.37 1338.46,1218.21 1339.05,1217.91 1339.63,1216.09 1340.22,1216.07 1340.8,1217.13 1341.39,1217.98 1341.98,1217.58 1342.56,1215.83 1343.15,1216.02 1343.74,1214.53 1344.32,1214.41 1344.91,1216.07 1345.5,1216.15 1346.08,1216.28 1346.67,1216.03 1347.26,1215.66 1347.84,1215.62 1348.43,1217.02 1349.01,1216.95 1349.6,1215.24 1350.19,1213.85 1350.77,1212.42 1351.36,1208.2 1351.95,1208.51 1352.53,1209.19 1353.12,1209.13 1353.71,1206.28 1354.29,1206.69 1354.88,1210.08 1355.47,1210.48 1356.05,1209.12 1356.64,1209.34 1357.22,1207.96 1357.81,1210.12 1358.4,1210.59 1358.98,1213.58 1359.57,1212.32 1360.16,1212.77 1360.74,1214.35 1361.33,1214.59 1361.92,1213.17 1362.5,1218.74 1363.09,1217.17 1363.68,1219.89 1364.26,1216.64 1364.85,1218.16 1365.43,1218.09 1366.02,1217.86 1366.61,1218.95 1367.19,1219.99 1367.78,1217.14 1368.37,1215.29 1368.95,1213.71 1369.54,1215.34 1370.13,1213.59 1370.71,1211.86 1371.3,1215.19 1371.88,1213.9 1372.47,1215.31 1373.06,1216.53 1373.64,1218.18 1374.23,1218.36 1374.82,1218.08 1375.4,1220.64 1375.99,1221.44 1376.58,1221 1377.16,1219.04 1377.75,1220.04 1378.34,1218.45 1378.92,1221.3 1379.51,1218.15 1380.09,1216.47 1380.68,1216.34 1381.27,1219.01 1381.85,1217.12 1382.44,1213.96 1383.03,1214.09 1383.61,1216.98 1384.2,1221.12 1384.79,1221.98 1385.37,1221.49 1385.96,1219.45 1386.55,1217.6 1387.13,1221.39 1387.72,1221.14 1388.3,1217.93 1388.89,1217.43 1389.48,1218.86 1390.06,1215.69 1390.65,1216.88 1391.24,1215.1 1391.82,1219.83 1392.41,1217.9 1393,1219.03 1393.58,1217.48 1394.17,1215.98 1394.75,1215.79 1395.34,1215.82 1395.93,1219.88 1396.51,1215.37 1397.1,1216.71 1397.69,1216.61 1398.27,1217.7 1398.86,1213.57 1399.45,1214.81 1400.03,1214.85 1400.62,1214.7 1401.21,1212.99 1401.79,1212.9 1402.38,1214.25 1402.96,1213.98 1403.55,1213.73 1404.14,1212.26 1404.72,1212.38 1405.31,1212.46 1405.9,1215.33 1406.48,1213.53 1407.07,1212.15 1407.66,1213.81 1408.24,1215.06 1408.83,1217.84 1409.42,1217.64 1410,1212.91 1410.59,1209.92 1411.17,1208.62 1411.76,1210.48 1412.35,1210.59 1412.93,1207.69 1413.52,1208.33 1414.11,1208.68 1414.69,1208.89 1415.28,1209.43 1415.87,1207.98 1416.45,1206.88 1417.04,1203.07 1417.63,1202.31 1418.21,1199.98 1418.8,1199.05 1419.38,1202.93 1419.97,1202.38 1420.56,1203.2 1421.14,1202.36 1421.73,1208.93 1422.32,1208 1422.9,1209.59 1423.49,1208.47 1424.08,1210.38 1424.66,1210.44 1425.25,1213.43 1425.83,1214.72 1426.42,1217.72 1427.01,1217.51 1427.59,1215.56 1428.18,1216.89 1428.77,1217.15 1429.35,1217.28 1429.94,1214.07 1430.53,1215.48 1431.11,1215.29 1431.7,1218 1432.29,1217.85 1432.87,1217.61 1433.46,1218.66 1434.04,1215.52 1434.63,1211.12 1435.22,1213.1 1435.8,1213.04 1436.39,1215.87 1436.98,1214.17 1437.56,1215.51 1438.15,1218.21 1438.74,1218 1439.32,1217.74 1439.91,1216.06 1440.5,1218.5 1441.08,1216.55 1441.67,1215.14 1442.25,1215.3 1442.84,1213.85 1443.43,1215.31 1444.01,1212.28 1444.6,1213.87 1445.19,1214.13 1445.77,1211.3 1446.36,1210.21 1446.95,1208.7 1447.53,1210.08 1448.12,1213.16 1448.7,1215.98 1449.29,1212.68 1449.88,1211.06 1450.46,1211.27 1451.05,1209.79 1451.64,1209.99 1452.22,1211.59 1452.81,1216 1453.4,1212.66 1453.98,1211.34 1454.57,1215.9 1455.16,1214.22 1455.74,1213.94 1456.33,1214.09 1456.91,1211.48 1457.5,1210.28 1458.09,1212.07 1458.67,1212.31 1459.26,1212.12 1459.85,1210.71 1460.43,1209.98 1461.02,1207.35 1461.61,1207.7 1462.19,1206.67 1462.78,1211.57 1463.37,1213.12 1463.95,1213.22 1464.54,1213.43 1465.12,1213.97 1465.71,1215.64 1466.3,1215.51 1466.88,1216.77 1467.47,1216.87 1468.06,1213.57 1468.64,1214.8 1469.23,1214.71 1469.82,1214.46 1470.4,1215.68 1470.99,1215.66 1471.57,1215.68 1472.16,1215.39 1472.75,1210.77 1473.33,1209.53 1473.92,1206.85 1474.51,1208.9 1475.09,1210.69 1475.68,1210.56 1476.27,1213.49 1476.85,1213.19 1477.44,1214.52 1478.03,1216.3 1478.61,1217.71 1479.2,1212.83 1479.78,1212.81 1480.37,1214.54 1480.96,1211.56 1481.54,1210.23 1482.13,1210.46 1482.72,1210.41 1483.3,1212.18 1483.89,1209.19 1484.48,1209.5 1485.06,1211.32 1485.65,1212.66 1486.24,1217.05 1486.82,1218.36 1487.41,1218.07 1487.99,1216.59 1488.58,1217.75 1489.17,1217.5 1489.75,1217.4 1490.34,1215.86 1490.93,1217.03 1491.51,1218.16 1492.1,1216.4 1492.69,1216.21 1493.27,1218.87 1493.86,1217.18 1494.45,1214.11 1495.03,1216.95 1495.62,1215.09 1496.2,1215.12 1496.79,1215.07 1497.38,1212.17 1497.96,1212.18 1498.55,1212.6 1499.14,1210.93 1499.72,1209.57 1500.31,1214.21 1500.9,1212.98 1501.48,1211.65 1502.07,1210.43 1502.65,1207.56 1503.24,1207.92 1503.83,1210.69 1504.41,1209.39 1505,1212.2 1505.59,1211.02 1506.17,1212.53 1506.76,1214.03 1507.35,1209.61 1507.93,1208.66 1508.52,1209.07 1509.11,1207.7 1509.69,1209.29 1510.28,1207.29 1510.86,1209.07 1511.45,1212.34 1512.04,1209.36 1512.62,1209.72 1513.21,1211.07 1513.8,1211.19 1514.38,1212.53 1514.97,1211.13 1515.56,1209.59 1516.14,1212.8 1516.73,1214.29 1517.32,1212.86 1517.9,1212.74 1518.49,1214.05 1519.07,1211.28 1519.66,1209.99 1520.25,1210.01 1520.83,1210.08 1521.42,1210.24 1522.01,1212.9 1522.59,1212.9 1523.18,1214.21 1523.77,1217.1 1524.35,1213.97 1524.94,1215.39 1525.52,1215.31 1526.11,1215.23 1526.7,1213.38 1527.28,1213.42 1527.87,1211.74 1528.46,1210.26 1529.04,1210.09 1529.63,1211.7 1530.22,1211.73 1530.8,1211.78 1531.39,1214.64 1531.98,1221.92 1532.56,1221.41 1533.15,1221.1 1533.73,1219.26 1534.32,1218.74 1534.91,1218.03 1535.49,1216.28 1536.08,1217.39 1536.67,1216.92 1537.25,1219.48 1537.84,1222.13 1538.43,1218.67 1539.01,1218.47 1539.6,1218.33 1540.19,1216.47 1540.77,1214.67 1541.36,1213 1541.94,1212.92 1542.53,1214.21 1543.12,1211.47 1543.7,1207.47 1544.29,1206.24 1544.88,1205.28 1545.46,1207.2 1546.05,1208.97 1546.64,1208.07 1547.22,1209.94 1547.81,1211.52 1548.4,1213.39 1548.98,1217.63 1549.57,1217.45 1550.15,1214.17 1550.74,1215.39 1551.33,1212.33 1551.91,1213.96 1552.5,1215.7 1553.09,1214.08 1553.67,1215.59 1554.26,1216.88 1554.85,1218.13 1555.43,1216.66 1556.02,1219.34 1556.6,1219.05 1557.19,1221.68 1557.78,1222.38 1558.36,1220.22 1558.95,1219.91 1559.54,1219.56 1560.12,1216.74 1560.71,1213.72 1561.3,1215 1561.88,1212.25 1562.47,1212.32 1563.06,1212.65 1563.64,1211.2 1564.23,1212.69 1564.81,1214.18 1565.4,1215.48 1565.99,1213.99 1566.57,1214.11 1567.16,1212.62 1567.75,1212.51 1568.33,1212.3 1568.92,1211.21 1569.51,1211.4 1570.09,1211.71 1570.68,1210.88 1571.27,1212.29 1571.85,1208.06 1572.44,1205.71 1573.02,1207.62 1573.61,1210.7 1574.2,1210.54 1574.78,1212.28 1575.37,1213.66 1575.96,1212.19 1576.54,1213.55 1577.13,1214.69 1577.72,1216.3 1578.3,1214.62 1578.89,1215.98 1579.47,1213.13 1580.06,1211.72 1580.65,1211.53 1581.23,1211.8 1581.82,1211.79 1582.41,1211.99 1582.99,1212.28 1583.58,1217.29 1584.17,1215.49 1584.75,1215.23 1585.34,1210.49 1585.93,1211.82 1586.51,1213.35 1587.1,1213.48 1587.68,1213.62 1588.27,1214.91 1588.86,1213.3 1589.44,1213.47 1590.03,1213.47 1590.62,1214.66 1591.2,1211.63 1591.79,1212.14 1592.38,1216.74 1592.96,1215.32 1593.55,1218.27 1594.14,1216.58 1594.72,1216.34 1595.31,1216.46 1595.89,1216.65 1596.48,1215.2 1597.07,1210.88 1597.65,1209.53 1598.24,1209.83 1598.83,1211.37 1599.41,1211.58 1600,1211.84 1600.59,1214.91 1601.17,1216.06 1601.76,1216.04 1602.34,1217.32 1602.93,1218.56 1603.52,1213.73 1604.1,1210.74 1604.69,1208.29 1605.28,1209.03 1605.86,1210.64 1606.45,1209.12 1607.04,1207.96 1607.62,1209.77 1608.21,1212.78 1608.8,1212.8 1609.38,1211.48 1609.97,1212.82 1610.55,1212.53 1611.14,1214.2 1611.73,1215.63 1612.31,1213.72 1612.9,1211.89 1613.49,1213.22 1614.07,1214.64 1614.66,1214.74 1615.25,1214.89 1615.83,1211.85 1616.42,1213.27 1617.01,1210.82 1617.59,1211.05 1618.18,1209.83 1618.76,1208.52 1619.35,1211.84 1619.94,1213.3 1620.52,1213.51 1621.11,1213.6 1621.7,1214.05 1622.28,1211.44 1622.87,1210.5 1623.46,1208.21 1624.04,1208.29 1624.63,1205.81 1625.22,1207.88 1625.8,1206.72 1626.39,1209.8 1626.97,1209.93 1627.56,1211.92 1628.15,1210.6 1628.73,1209.18 1629.32,1212.4 1629.91,1214.03 1630.49,1213.79 1631.08,1216.45 1631.67,1213.28 1632.25,1214.7 1632.84,1215.99 1633.42,1217.17 1634.01,1217.24 1634.6,1217.15 1635.18,1216.89 1635.77,1218.1 1636.36,1217.88 1636.94,1215.06 1637.53,1213.38 1638.12,1213.5 1638.7,1214.76 1639.29,1214.98 1639.88,1214.92 1640.46,1216.11 1641.05,1215.81 1641.63,1216.96 1642.22,1212.24 1642.81,1212.63 1643.39,1212.85 1643.98,1214.62 1644.57,1213.1 1645.15,1211.72 1645.74,1211.96 1646.33,1214.72 1646.91,1216.07 1647.5,1214.32 1648.09,1211.18 1648.67,1210.02 1649.26,1210.28 1649.84,1211.95 1650.43,1215.11 1651.02,1213.22 1651.6,1212.89 1652.19,1213.25 1652.78,1213.18 1653.36,1210.01 1653.95,1208.68 1654.54,1211.78 1655.12,1213.25 1655.71,1216.24 1656.29,1214.87 1656.88,1214.99 1657.47,1216.22 1658.05,1213.33 1658.64,1213.48 1659.23,1207.71 1659.81,1210.8 1660.4,1210.83 1660.99,1214.18 1661.57,1214.17 1662.16,1214 1662.75,1214.32 1663.33,1208.16 1663.92,1208.45 1664.5,1209.05 1665.09,1207.73 1665.68,1206.63 1666.26,1208.23 1666.85,1208.35 1667.44,1207.2 1668.02,1206.1 1668.61,1208.16 1669.2,1208.54 1669.78,1208.95 1670.37,1212.09 1670.96,1213.51 1671.54,1219.34 1672.13,1220.75 1672.71,1220.27 1673.3,1219.78 1673.89,1216.56 1674.47,1213.46 1675.06,1215.07 1675.65,1210.74 1676.23,1211.36 1676.82,1212.95 1677.41,1214.17 1677.99,1212.86 1678.58,1215.74 1679.17,1214.28 1679.75,1214.17 1680.34,1215.75 1680.92,1212.88 1681.51,1212.97 1682.1,1214.44 1682.68,1212.81 1683.27,1211.24 1683.86,1211.47 1684.44,1211.42 1685.03,1209.97 1685.62,1210.37 1686.2,1212.16 1686.79,1212.13 1687.37,1215.31 1687.96,1216.56 1688.55,1216.51 1689.13,1215.04 1689.72,1214.99 1690.31,1212.07 1690.89,1213.38 1691.48,1211.78 1692.07,1215.11 1692.65,1215.23 1693.24,1216.56 1693.83,1213.79 1694.41,1215.52 1695,1214.08 1695.58,1212.77 1696.17,1214.5 1696.76,1214.48 1697.34,1215.79 1697.93,1215.56 1698.52,1216.97 1699.1,1219.44 1699.69,1216.34 1700.28,1216.24 1700.86,1214.69 1701.45,1217.22 1702.04,1218.9 1702.62,1218.62 1703.21,1218.57 1703.79,1219.72 1704.38,1220.73 1704.97,1220.24 1705.55,1220.03 1706.14,1219.52 1706.73,1219.04 1707.31,1218.61 1707.9,1218.41 1708.49,1216.59 1709.07,1216.21 1709.66,1220.28 1710.24,1216.81 1710.83,1217.99 1711.42,1216.16 1712,1211.45 1712.59,1212.68 1713.18,1212.62 1713.76,1212.6 1714.35,1211.37 1714.94,1210.09 1715.52,1208.8 1716.11,1209.05 1716.7,1212.09 1717.28,1211.82 1717.87,1213.27 1718.45,1210.42 1719.04,1213.68 1719.63,1213.45 1720.21,1213.54 1720.8,1210.84 1721.39,1212.19 1721.97,1212.67 1722.56,1213.99 1723.15,1214.06 1723.73,1212.86 1724.32,1212.82 1724.91,1212.85 1725.49,1215.85 1726.08,1218.78 1726.66,1216.81 1727.25,1214.81 1727.84,1216.2 1728.42,1215.93 1729.01,1216 1729.6,1214.6 1730.18,1210.21 1730.77,1211.82 1731.36,1213.73 1731.94,1215.15 1732.53,1216.25 1733.11,1215.62 1733.7,1212.46 1734.29,1210.9 1734.87,1211.01 1735.46,1210.91 1736.05,1214.07 1736.63,1214.03 1737.22,1212.43 1737.81,1212.48 1738.39,1211.29 1738.98,1211.35 1739.57,1214.47 1740.15,1216 1740.74,1214.66 1741.32,1216.17 1741.91,1216.17 1742.5,1215.94 1743.08,1217.28 1743.67,1217.01 1744.26,1216.82 1744.84,1216.52 1745.43,1216.52 1746.02,1216.31 1746.6,1214.58 1747.19,1215.88 1747.78,1212.95 1748.36,1212.96 1748.95,1209.84 1749.53,1211.56 1750.12,1211.49 1750.71,1211.6 1751.29,1211.5 1751.88,1208.73 1752.47,1205.74 1753.05,1208.94 1753.64,1208.94 1754.23,1210.71 1754.81,1207.8 1755.4,1207.93 1755.99,1209.53 1756.57,1212.44 1757.16,1213.99 1757.74,1215.8 1758.33,1215.55 1758.92,1215.68 1759.5,1212.57 1760.09,1209.86 1760.68,1208.5 1761.26,1209.27 1761.85,1212.65 1762.44,1212.49 1763.02,1212.64 1763.61,1213.01 1764.19,1213.23 1764.78,1213.47 1765.37,1212.09 1765.95,1212.21 1766.54,1212 1767.13,1210.42 1767.71,1210.44 1768.3,1210.39 1768.89,1210.5 1769.47,1208.93 1770.06,1210.58 1770.65,1210.61 1771.23,1212.19 1771.82,1213.84 1772.4,1213.6 1772.99,1212.03 1773.58,1217.84 1774.16,1214.44 1774.75,1214.25 1775.34,1214.56 1775.92,1214.38 1776.51,1216.05 1777.1,1215.9 1777.68,1215.63 1778.27,1212.72 1778.86,1214.36 1779.44,1211.88 1780.03,1210.49 1780.61,1210.48 1781.2,1210.77 1781.79,1209.24 1782.37,1212.31 1782.96,1212.83 1783.55,1213 1784.13,1216.07 1784.72,1217.34 1785.31,1218.43 1785.89,1218.15 1786.48,1217.72 1787.06,1216.05 1787.65,1215.87 1788.24,1216.98 1788.82,1216.81 1789.41,1212.16 1790,1215.11 1790.58,1215.02 1791.17,1216.27 1791.76,1215.86 1792.34,1212.88 1792.93,1212.97 1793.52,1213.08 1794.1,1212.91 1794.69,1213.02 1795.27,1211.46 1795.86,1213.06 1796.45,1214.37 1797.03,1215.97 1797.62,1218.93 1798.21,1221.64 1798.79,1218.7 1799.38,1215.32 1799.97,1219.75 1800.55,1219.28 1801.14,1217.73 1801.73,1215.92 1802.31,1211.06 1802.9,1211.25 1803.48,1213.14 1804.07,1211.52 1804.66,1210.26 1805.24,1210.59 1805.83,1210.8 1806.42,1209.82 1807,1208.43 1807.59,1210.07 1808.18,1210.24 1808.76,1212.08 1809.35,1209.3 1809.94,1207.9 1810.52,1208.24 1811.11,1208.35 1811.69,1207.47 1812.28,1206.17 1812.87,1210.85 1813.45,1209.57 1814.04,1206.84 1814.63,1204.31 1815.21,1205.05 1815.8,1202.36 1816.39,1204.43 1816.97,1206.55 1817.56,1206.88 1818.14,1211.4 1818.73,1212.94 1819.32,1213.1 1819.9,1214.58 1820.49,1211.8 1821.08,1213.3 1821.66,1208.93 1822.25,1209.42 1822.84,1211.15 1823.42,1209.72 1824.01,1208.39 1824.6,1208.46 1825.18,1208.81 1825.77,1208.96 1826.35,1209.21 1826.94,1209.3 1827.53,1206.62 1828.11,1207.2 1828.7,1207.41 1829.29,1209.25 1829.87,1209.62 1830.46,1211.37 1831.05,1215.83 1831.63,1218.69 1832.22,1218.45 1832.81,1219.43 1833.39,1217.93 1833.98,1218.81 1834.56,1219.71 1835.15,1219.16 1835.74,1220.42 1836.32,1218.77 1836.91,1219.61 1837.5,1219.23 1838.08,1220.75 1838.67,1221.78 1839.26,1219.99 1839.84,1218.51 1840.43,1218.46 1841.01,1218.65 1841.6,1216.84 1842.19,1217.95 1842.77,1219.09 1843.36,1224.83 1843.95,1224.41 1844.53,1222.64 1845.12,1222.17 1845.71,1220.23 1846.29,1217.08 1846.88,1215.53 1847.47,1216.7 1848.05,1216.73 1848.64,1216.38 1849.22,1212.98 1849.81,1214.41 1850.4,1215.82 1850.98,1214.02 1851.57,1214.05 1852.16,1215.75 1852.74,1215.65 1853.33,1216.91 1853.92,1216.57 1854.5,1215.24 1855.09,1214.89 1855.68,1213.18 1856.26,1213.29 1856.85,1213.26 1857.43,1214.53 1858.02,1214.5 1858.61,1214.3 1859.19,1209.9 1859.78,1208.43 1860.37,1207.16 1860.95,1207.54 1861.54,1209.49 1862.13,1209.79 1862.71,1210.09 1863.3,1210.27 1863.88,1213.28 1864.47,1210.22 1865.06,1210.25 1865.64,1213.26 1866.23,1211.62 1866.82,1213.27 1867.4,1211.76 1867.99,1211.94 1868.58,1212.21 1869.16,1215.18 1869.75,1210.59 1870.34,1210.72 1870.92,1209.33 1871.51,1209.35 1872.09,1209.57 1872.68,1205.35 1873.27,1207.42 1873.85,1207.53 1874.44,1205.03 1875.03,1205.67 1875.61,1206.09 1876.2,1205.12 1876.79,1205.52 1877.37,1207.6 1877.96,1211.19 1878.55,1214.39 1879.13,1212.72 1879.72,1212.7 1880.3,1214.19 1880.89,1211.14 1881.48,1211.25 1882.06,1211.19 1882.65,1209.79 1883.24,1210.47 1883.82,1210.62 1884.41,1212.38 1885,1215.04 1885.58,1216.4 1886.17,1219.29 1886.76,1220.64 1887.34,1221.76 1887.93,1222.83 1888.51,1222.05 1889.1,1221.52 1889.69,1223.03 1890.27,1222.56 1890.86,1222.12 1891.45,1223.14 1892.03,1223.02 1892.62,1222.61 1893.21,1222.26 1893.79,1220.65 1894.38,1217.44 1894.96,1215.73 1895.55,1215.55 1896.14,1217.05 1896.72,1215.33 1897.31,1215.57 1897.9,1213.73 1898.48,1216.69 1899.07,1219.29 1899.66,1220.48 1900.24,1220.22 1900.83,1219.92 1901.42,1219.5 1902,1220.39 1902.59,1217.09 1903.17,1218.11 1903.76,1216.66 1904.35,1217.62 1904.93,1217.49 1905.52,1217.32 1906.11,1219.83 1906.69,1217.82 1907.28,1217.57 1907.87,1213.39 1908.45,1213.54 1909.04,1214.8 1909.63,1213.11 1910.21,1211.81 1910.8,1210.21 1911.38,1208.69 1911.97,1207.36 1912.56,1207.67 1913.14,1206.71 1913.73,1207.07 1914.32,1207.52 1914.9,1212.06 1915.49,1210.55 1916.08,1210.41 1916.66,1210.43 1917.25,1212.12 1917.83,1213.62 1918.42,1215.19 1919.01,1218.16 1919.59,1216.5 1920.18,1214.94 1920.77,1216.37 1921.35,1216.34 1921.94,1214.75 1922.53,1216.24 1923.11,1212.97 1923.7,1212.99 1924.29,1212.71 1924.87,1212.59 1925.46,1212.29 1926.04,1209.21 1926.63,1209.25 1927.22,1210.92 1927.8,1209.61 1928.39,1206.9 1928.98,1207.31 1929.56,1208.79 1930.15,1207.76 1930.74,1208.4 1931.32,1207.04 1931.91,1210.21 1932.5,1210.35 1933.08,1210.55 1933.67,1210.84 1934.25,1209.32 1934.84,1209.46 1935.43,1212.63 1936.01,1212.66 1936.6,1217.11 1937.19,1216.89 1937.77,1219.77 1938.36,1217.92 1938.95,1216.17 1939.53,1214.53 1940.12,1214.07 1940.71,1214.28 1941.29,1217.33 1941.88,1217.21 1942.46,1218.5 1943.05,1215.4 1943.64,1217.1 1944.22,1216.74 1944.81,1212.32 1945.4,1212.32 1945.98,1213.96 1946.57,1215.5 1947.16,1218.08 1947.74,1219.31 1948.33,1220.47 1948.91,1220.19 1949.5,1219.83 1950.09,1218.28 1950.67,1213.67 1951.26,1210.96 1951.85,1211.15 1952.43,1211.39 1953.02,1210.18 1953.61,1207.75 1954.19,1204.96 1954.78,1202.63 1955.37,1206.41 1955.95,1208 1956.54,1205.49 1957.12,1207.39 1957.71,1210.25 1958.3,1210.3 1958.88,1210.46 1959.47,1210.54 1960.06,1209.41 1960.64,1209.38 1961.23,1212.28 1961.82,1210.6 1962.4,1212.11 1962.99,1212.4 1963.58,1215.52 1964.16,1215.19 1964.75,1215.47 1965.33,1215.49 1965.92,1215.29 1966.51,1211.12 1967.09,1214.33 1967.68,1209.93 1968.27,1207.06 1968.85,1204.88 1969.44,1205.26 1970.03,1208.48 1970.61,1207.27 1971.2,1210.3 1971.78,1210.49 1972.37,1213.61 1972.96,1214.03 1973.54,1215.56 1974.13,1214.27 1974.72,1209.73 1975.3,1209.98 1975.89,1211.83 1976.48,1211.84 1977.06,1208.75 1977.65,1207.77 1978.24,1208.07 1978.82,1207.33 1979.41,1207.71 1979.99,1211.24 1980.58,1209.95 1981.17,1210.36 1981.75,1215.2 1982.34,1215.55 1982.93,1215.38 1983.51,1212.39 1984.1,1210.98 1984.69,1214.06 1985.27,1212.81 1985.86,1212.79 1986.45,1214.33 1987.03,1214.41 1987.62,1212.64 1988.2,1213.67 1988.79,1216.46 1989.38,1214.9 1989.96,1216.2 1990.55,1219.01 1991.14,1221.52 1991.72,1222.3 1992.31,1220.42 1992.9,1218.76 1993.48,1218.1 1994.07,1217.94 1994.65,1217.92 1995.24,1216.19 1995.83,1216.07 1996.41,1217.31 1997,1216.92 1997.59,1218.02 1998.17,1219.24 1998.76,1218.81 1999.35,1214.22 1999.93,1211.34 2000.52,1214.16 2001.11,1214.39 2001.69,1211.52 2002.28,1214.3 2002.86,1218.67 2003.45,1219.93 2004.04,1220.93 2004.62,1217.71 2005.21,1214.44 2005.8,1213.19 2006.38,1213.23 2006.97,1216.11 2007.56,1214.88 2008.14,1214.76 2008.73,1214.9 2009.32,1214.78 2009.9,1211.74 2010.49,1211.9 2011.07,1213.12 2011.66,1213.21 2012.25,1213.45 2012.83,1216.31 2013.42,1217.71 2014.01,1215.71 2014.59,1215.58 2015.18,1212.57 2015.77,1214.19 2016.35,1211.32 2016.94,1211.48 2017.53,1210.26 2018.11,1212.27 2018.7,1210.91 2019.28,1214.36 2019.87,1212.9 2020.46,1214.64 2021.04,1216.12 2021.63,1217.39 2022.22,1216.9 2022.8,1215.18 2023.39,1213.59 2023.98,1213.92 2024.56,1212.4 2025.15,1213.87 2025.73,1215.28 2026.32,1209.73 2026.91,1211.4 2027.49,1211.51 2028.08,1211.46 2028.67,1210.18 2029.25,1207.47 2029.84,1213.59 2030.43,1215.12 2031.01,1217.74 2031.6,1214.27 2032.19,1212.73 2032.77,1214.11 2033.36,1215.49 2033.94,1214.18 2034.53,1217.11 2035.12,1216.92 2035.7,1216.97 2036.29,1215.32 2036.88,1215.45 2037.46,1215.18 2038.05,1216.13 2038.64,1214.69 2039.22,1216.43 2039.81,1214.7 2040.4,1214.34 2040.98,1209.97 2041.57,1210.51 2042.15,1207.9 2042.74,1206.6 2043.33,1202.48 2043.91,1203.21 2044.5,1203.82 2045.09,1202.92 2045.67,1203.18 2046.26,1205.3 2046.85,1205.61 2047.43,1211.82 2048.02,1213.25 2048.6,1214.71 2049.19,1214.79 2049.78,1217.3 2050.36,1215.55 2050.95,1215.41 2051.54,1215.37 2052.12,1216.35 2052.71,1214.86 2053.3,1213.22 2053.88,1213.05 2054.47,1211.59 2055.06,1208.84 2055.64,1212.01 2056.23,1214.92 2056.81,1213.52 2057.4,1215.12 2057.99,1213.72 2058.57,1215.15 2059.16,1213.45 2059.75,1213.45 2060.33,1213.55 2060.92,1214.92 2061.51,1213.52 2062.09,1210.83 2062.68,1212.37 2063.27,1212.52 2063.85,1208.27 2064.44,1208.66 2065.02,1210.26 2065.61,1210.34 2066.2,1209.14 2066.78,1212.21 2067.37,1213.89 2067.96,1213.71 2068.54,1212.06 2069.13,1211.79 2069.72,1212.07 2070.3,1212.21 2070.89,1210.83 2071.48,1210.6 2072.06,1210.72 2072.65,1212.35 2073.23,1213.68 2073.82,1214.9 2074.41,1211.77 2074.99,1212.23 2075.58,1212.18 2076.17,1214.74 2076.75,1217.53 2077.34,1217.38 2077.93,1220.12 2078.51,1221.12 2079.1,1222.34 2079.68,1218.96 2080.27,1218.47 2080.86,1218.2 2081.44,1217.76 2082.03,1214.46 2082.62,1214.09 2083.2,1215.55 2083.79,1215.39 2084.38,1216.39 2084.96,1217.42 2085.55,1215.85 2086.14,1212.67 2086.72,1211.02 2087.31,1211.16 2087.89,1210.01 2088.48,1210.22 2089.07,1207.45 2089.65,1207.52 2090.24,1209.17 2090.83,1212.3 2091.41,1213.67 2092,1215.28 2092.59,1215.22 2093.17,1215.1 2093.76,1214.89 2094.35,1210.66 2094.93,1212.81 2095.52,1212.72 2096.1,1212.95 2096.69,1214.13 2097.28,1214.03 2097.86,1211.4 2098.45,1210.1 2099.04,1209 2099.62,1206.34 2100.21,1209.67 2100.8,1208.27 2101.38,1207.15 2101.97,1210.47 2102.55,1208.97 2103.14,1207.86 2103.73,1208.25 2104.31,1204.38 2104.9,1203.69 2105.49,1204.12 2106.07,1204.47 2106.66,1209.32 2107.25,1210.97 2107.83,1211.01 2108.42,1211.11 2109.01,1209.75 2109.59,1211.37 2110.18,1211.6 2110.76,1216.31 2111.35,1219.13 2111.94,1221.69 2112.52,1222.98 2113.11,1223.86 2113.7,1222.08 2114.28,1226.03 2114.87,1224.03 2115.46,1225.34 2116.04,1221.98 2116.63,1221.5 2117.22,1219.76 2117.8,1217.94 2118.39,1214.63 2118.97,1210.45 2119.56,1210.54 2120.15,1213.65 2120.73,1213.99 2121.32,1215.59 2121.91,1215.83 2122.49,1218.45 2123.08,1216.92 2123.67,1213.86 2124.25,1215.48 2124.84,1216.9 2125.42,1216.79 2126.01,1215.23 2126.6,1216.8 2127.18,1215.23 2127.77,1213.45 2128.36,1214.78 2128.94,1213.28 2129.53,1214.89 2130.12,1214.86 2130.7,1214.71 2131.29,1213.46 2131.88,1213.66 2132.46,1212.4 2133.05,1212.57 2133.63,1214.1 2134.22,1214.51 2134.81,1214.73 2135.39,1214.55 2135.98,1215.64 2136.57,1221.24 2137.15,1217.88 2137.74,1217.63 2138.33,1218.76 2138.91,1218.37 2139.5,1218.25 2140.09,1213.3 2140.67,1211.78 2141.26,1211.79 2141.84,1213.5 2142.43,1213.39 2143.02,1209.02 2143.6,1211.92 2144.19,1210.43 2144.78,1213.41 2145.36,1216.31 2145.95,1219.1 2146.54,1222.1 2147.12,1220.03 2147.71,1222.51 2148.3,1220.79 2148.88,1220.11 2149.47,1221.3 2150.05,1220.94 2150.64,1221.81 2151.23,1222.7 2151.81,1222.02 2152.4,1221.72 2152.99,1221.9 2153.57,1221.54 2154.16,1224.05 2154.75,1223.62 2155.33,1224.54 2155.92,1222.62 2156.5,1222.14 2157.09,1221.84 2157.68,1219.92 2158.26,1219.75 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1214.1 L986.612 1214.1 L987.198 1214.1 L987.785 1214.1 L988.371 1214.1 L988.957 1214.1 L989.544 1214.1 L990.13 1214.1 L990.717 1214.1 L991.303 1214.1 L991.889 1214.1 L992.476 1214.1 L993.062 1214.1 L993.649 1214.1 L994.235 1214.1 L994.822 1214.1 L995.408 1214.1 L995.994 1214.1 L996.581 1214.1 L997.167 1214.1 L997.754 1214.1 L998.34 1214.1 L998.926 1214.1 L999.513 1214.1 L1000.1 1214.1 L1000.69 1214.1 L1001.27 1214.1 L1001.86 1214.1 L1002.44 1214.1 L1003.03 1214.1 L1003.62 1214.1 L1004.2 1214.1 L1004.79 1214.1 L1005.38 1214.1 L1005.96 1214.1 L1006.55 1214.1 L1007.14 1214.1 L1007.72 1214.1 L1008.31 1214.1 L1008.9 1214.1 L1009.48 1214.1 L1010.07 1214.1 L1010.65 1214.1 L1011.24 1214.1 L1011.83 1214.1 L1012.41 1214.1 L1013 1214.1 L1013.59 1214.1 L1014.17 1214.1 L1014.76 1214.1 L1015.35 1214.1 L1015.93 1214.1 L1016.52 1214.1 L1017.11 1214.1 L1017.69 1214.1 L1018.28 1214.1 L1018.86 1214.1 L1019.45 1214.1 L1020.04 1214.1 L1020.62 1214.1 L1021.21 1214.1 L1021.8 1214.1 L1022.38 1214.1 L1022.97 1214.1 L1023.56 1214.1 L1024.14 1214.1 L1024.73 1214.1 L1025.32 1214.1 L1025.9 1214.1 L1026.49 1214.1 L1027.07 1214.1 L1027.66 1214.1 L1028.25 1214.1 L1028.83 1214.1 L1029.42 1214.1 L1030.01 1214.1 L1030.59 1214.1 L1031.18 1214.1 L1031.77 1214.1 L1032.35 1214.1 L1032.94 1214.1 L1033.52 1214.1 L1034.11 1214.1 L1034.7 1214.1 L1035.28 1214.1 L1035.87 1214.1 L1036.46 1214.1 L1037.04 1214.1 L1037.63 1214.1 L1038.22 1214.1 L1038.8 1214.1 L1039.39 1214.1 L1039.98 1214.1 L1040.56 1214.1 L1041.15 1214.1 L1041.73 1214.1 L1042.32 1214.1 L1042.91 1214.1 L1043.49 1214.1 L1044.08 1214.1 L1044.67 1214.1 L1045.25 1214.1 L1045.84 1214.1 L1046.43 1214.1 L1047.01 1214.1 L1047.6 1214.1 L1048.19 1214.1 L1048.77 1214.1 L1049.36 1214.1 L1049.94 1214.1 L1050.53 1214.1 L1051.12 1214.1 L1051.7 1214.1 L1052.29 1214.1 L1052.88 1214.1 L1053.46 1214.1 L1054.05 1214.1 L1054.64 1214.1 L1055.22 1214.1 L1055.81 1214.1 L1056.39 1214.1 L1056.98 1214.1 L1057.57 1214.1 L1058.15 1214.1 L1058.74 1214.1 L1059.33 1214.1 L1059.91 1214.1 L1060.5 1214.1 L1061.09 1214.1 L1061.67 1214.1 L1062.26 1214.1 L1062.85 1214.1 L1063.43 1214.1 L1064.02 1214.1 L1064.6 1214.1 L1065.19 1214.1 L1065.78 1214.1 L1066.36 1214.1 L1066.95 1214.1 L1067.54 1214.1 L1068.12 1214.1 L1068.71 1214.1 L1069.3 1214.1 L1069.88 1214.1 L1070.47 1214.1 L1071.06 1214.1 L1071.64 1214.1 L1072.23 1214.1 L1072.81 1214.1 L1073.4 1214.1 L1073.99 1214.1 L1074.57 1214.1 L1075.16 1214.1 L1075.75 1214.1 L1076.33 1214.1 L1076.92 1214.1 L1077.51 1214.1 L1078.09 1214.1 L1078.68 1214.1 L1079.26 1214.1 L1079.85 1214.1 L1080.44 1214.1 L1081.02 1214.1 L1081.61 1214.1 L1082.2 1214.1 L1082.78 1214.1 L1083.37 1214.1 L1083.96 1214.1 L1084.54 1214.1 L1085.13 1214.1 L1085.72 1214.1 L1086.3 1214.1 L1086.89 1214.1 L1087.47 1214.1 L1088.06 1214.1 L1088.65 1214.1 L1089.23 1214.1 L1089.82 1214.1 L1090.41 1214.1 L1090.99 1214.1 L1091.58 1214.1 L1092.17 1214.1 L1092.75 1214.1 L1093.34 1214.1 L1093.93 1214.1 L1094.51 1214.1 L1095.1 1214.1 L1095.68 1214.1 L1096.27 1214.1 L1096.86 1214.1 L1097.44 1214.1 L1098.03 1214.1 L1098.62 1214.1 L1099.2 1214.1 L1099.79 1214.1 L1100.38 1214.1 L1100.96 1214.1 L1101.55 1214.1 L1102.14 1214.1 L1102.72 1214.1 L1103.31 1214.1 L1103.89 1214.1 L1104.48 1214.1 L1105.07 1214.1 L1105.65 1214.1 L1106.24 1214.1 L1106.83 1214.1 L1107.41 1214.1 L1108 1214.1 L1108.59 1214.1 L1109.17 1214.1 L1109.76 1214.1 L1110.34 1214.1 L1110.93 1214.1 L1111.52 1214.1 L1112.1 1214.1 L1112.69 1214.1 L1113.28 1214.1 L1113.86 1214.1 L1114.45 1214.1 L1115.04 1214.1 L1115.62 1214.1 L1116.21 1214.1 L1116.8 1214.1 L1117.38 1214.1 L1117.97 1214.1 L1118.55 1214.1 L1119.14 1214.1 L1119.73 1214.1 L1120.31 1214.1 L1120.9 1214.1 L1121.49 1214.1 L1122.07 1214.1 L1122.66 1214.1 L1123.25 1214.1 L1123.83 1214.1 L1124.42 1214.1 L1125.01 1214.1 L1125.59 1214.1 L1126.18 1214.1 L1126.76 1214.1 L1127.35 1214.1 L1127.94 1214.1 L1128.52 1214.1 L1129.11 1214.1 L1129.7 1214.1 L1130.28 1214.1 L1130.87 1214.1 L1131.46 1214.1 L1132.04 1214.1 L1132.63 1214.1 L1133.21 1214.1 L1133.8 1214.1 L1134.39 1214.1 L1134.97 1214.1 L1135.56 1214.1 L1136.15 1214.1 L1136.73 1214.1 L1137.32 1214.1 L1137.91 1214.1 L1138.49 1214.1 L1139.08 1214.1 L1139.67 1214.1 L1140.25 1214.1 L1140.84 1214.1 L1141.42 1214.1 L1142.01 1214.1 L1142.6 1214.1 L1143.18 1214.1 L1143.77 1214.1 L1144.36 1214.1 L1144.94 1214.1 L1145.53 1214.1 L1146.12 1214.1 L1146.7 1214.1 L1147.29 1214.1 L1147.88 1214.1 L1148.46 1214.1 L1149.05 1214.1 L1149.63 1214.1 L1150.22 1214.1 L1150.81 1214.1 L1151.39 1214.1 L1151.98 1214.1 L1152.57 1214.1 L1153.15 1214.1 L1153.74 1214.1 L1154.33 1214.1 L1154.91 1214.1 L1155.5 1214.1 L1156.09 1214.1 L1156.67 1214.1 L1157.26 1214.1 L1157.84 1214.1 L1158.43 1214.1 L1159.02 1214.1 L1159.6 1214.1 L1160.19 1214.1 L1160.78 1214.1 L1161.36 1214.1 L1161.95 1214.1 L1162.54 1214.1 L1163.12 1214.1 L1163.71 1214.1 L1164.29 1214.1 L1164.88 1214.1 L1165.47 1214.1 L1166.05 1214.1 L1166.64 1214.1 L1167.23 1214.1 L1167.81 1214.1 L1168.4 1214.1 L1168.99 1214.1 L1169.57 1214.1 L1170.16 1214.1 L1170.75 1214.1 L1171.33 1214.1 L1171.92 1214.1 L1172.5 1214.1 L1173.09 1214.1 L1173.68 1214.1 L1174.26 1214.1 L1174.85 1214.1 L1175.44 1214.1 L1176.02 1214.1 L1176.61 1214.1 L1177.2 1214.1 L1177.78 1214.1 L1178.37 1214.1 L1178.96 1214.1 L1179.54 1214.1 L1180.13 1214.1 L1180.71 1214.1 L1181.3 1214.1 L1181.89 1214.1 L1182.47 1214.1 L1183.06 1214.1 L1183.65 1214.1 L1184.23 1214.1 L1184.82 1214.1 L1185.41 1214.1 L1185.99 1214.1 L1186.58 1214.1 L1187.16 1214.1 L1187.75 1214.1 L1188.34 1214.1 L1188.92 1214.1 L1189.51 1214.1 L1190.1 1214.1 L1190.68 1214.1 L1191.27 1214.1 L1191.86 1214.1 L1192.44 1214.1 L1193.03 1214.1 L1193.62 1214.1 L1194.2 1214.1 L1194.79 1214.1 L1195.37 1214.1 L1195.96 1214.1 L1196.55 1214.1 L1197.13 1214.1 L1197.72 1214.1 L1198.31 1214.1 L1198.89 1214.1 L1199.48 1214.1 L1200.07 1214.1 L1200.65 1214.1 L1201.24 1214.1 L1201.83 1214.1 L1202.41 1214.1 L1203 1214.1 L1203.58 1214.1 L1204.17 1214.1 L1204.76 1214.1 L1205.34 1214.1 L1205.93 1214.1 L1206.52 1214.1 L1207.1 1214.1 L1207.69 1214.1 L1208.28 1214.1 L1208.86 1214.1 L1209.45 1214.1 L1210.03 1214.1 L1210.62 1214.1 L1211.21 1214.1 L1211.79 1214.1 L1212.38 1214.1 L1212.97 1214.1 L1213.55 1214.1 L1214.14 1214.1 L1214.73 1214.1 L1215.31 1214.1 L1215.9 1214.1 L1216.49 1214.1 L1217.07 1214.1 L1217.66 1214.1 L1218.24 1214.1 L1218.83 1214.1 L1219.42 1214.1 L1220 1214.1 L1220.59 1214.1 L1221.18 1214.1 L1221.76 1214.1 L1222.35 1214.1 L1222.94 1214.1 L1223.52 1214.1 L1224.11 1214.1 L1224.7 1214.1 L1225.28 1214.1 L1225.87 1214.1 L1226.45 1214.1 L1227.04 1214.1 L1227.63 1214.1 L1228.21 1214.1 L1228.8 1214.1 L1229.39 1214.1 L1229.97 1214.1 L1230.56 1214.1 L1231.15 1214.1 L1231.73 1214.1 L1232.32 1214.1 L1232.91 1214.1 L1233.49 1214.1 L1234.08 1214.1 L1234.66 1214.1 L1235.25 1214.1 L1235.84 1214.1 L1236.42 1214.1 L1237.01 1214.1 L1237.6 1214.1 L1238.18 1214.1 L1238.77 1214.1 L1239.36 1214.1 L1239.94 1214.1 L1240.53 1214.1 L1241.11 1214.1 L1241.7 1214.1 L1242.29 1214.1 L1242.87 1214.1 L1243.46 1214.1 L1244.05 1214.1 L1244.63 1214.1 L1245.22 1214.1 L1245.81 1214.1 L1246.39 1214.1 L1246.98 1214.1 L1247.57 1214.1 L1248.15 1214.1 L1248.74 1214.1 L1249.32 1214.1 L1249.91 1214.1 L1250.5 1214.1 L1251.08 1214.1 L1251.67 1214.1 L1252.26 1214.1 L1252.84 1214.1 L1253.43 1214.1 L1254.02 1214.1 L1254.6 1214.1 L1255.19 1214.1 L1255.78 1214.1 L1256.36 1214.1 L1256.95 1214.1 L1257.53 1214.1 L1258.12 1214.1 L1258.71 1214.1 L1259.29 1214.1 L1259.88 1214.1 L1260.47 1214.1 L1261.05 1214.1 L1261.64 1214.1 L1262.23 1214.1 L1262.81 1214.1 L1263.4 1214.1 L1263.98 1214.1 L1264.57 1214.1 L1265.16 1214.1 L1265.74 1214.1 L1266.33 1214.1 L1266.92 1214.1 L1267.5 1214.1 L1268.09 1214.1 L1268.68 1214.1 L1269.26 1214.1 L1269.85 1214.1 L1270.44 1214.1 L1271.02 1214.1 L1271.61 1214.1 L1272.19 1214.1 L1272.78 1214.1 L1273.37 1214.1 L1273.95 1214.1 L1274.54 1214.1 L1275.13 1214.1 L1275.71 1214.1 L1276.3 1214.1 L1276.89 1214.1 L1277.47 1214.1 L1278.06 1214.1 L1278.65 1214.1 L1279.23 1214.1 L1279.82 1214.1 L1280.4 1214.1 L1280.99 1214.1 L1281.58 1214.1 L1282.16 1214.1 L1282.75 1214.1 L1283.34 1214.1 L1283.92 1214.1 L1284.51 1214.1 L1285.1 1214.1 L1285.68 1214.1 L1286.27 1214.1 L1286.86 1214.1 L1287.44 1214.1 L1288.03 1214.1 L1288.61 1214.1 L1289.2 1214.1 L1289.79 1214.1 L1290.37 1214.1 L1290.96 1214.1 L1291.55 1214.1 L1292.13 1214.1 L1292.72 1214.1 L1293.31 1214.1 L1293.89 1214.1 L1294.48 1214.1 L1295.06 1214.1 L1295.65 1214.1 L1296.24 1214.1 L1296.82 1214.1 L1297.41 1214.1 L1298 1214.1 L1298.58 1214.1 L1299.17 1214.1 L1299.76 1214.1 L1300.34 1214.1 L1300.93 1214.1 L1301.52 1214.1 L1302.1 1214.1 L1302.69 1214.1 L1303.27 1214.1 L1303.86 1214.1 L1304.45 1214.1 L1305.03 1214.1 L1305.62 1214.1 L1306.21 1214.1 L1306.79 1214.1 L1307.38 1214.1 L1307.97 1214.1 L1308.55 1214.1 L1309.14 1214.1 L1309.73 1214.1 L1310.31 1214.1 L1310.9 1214.1 L1311.48 1214.1 L1312.07 1214.1 L1312.66 1214.1 L1313.24 1214.1 L1313.83 1214.1 L1314.42 1214.1 L1315 1214.1 L1315.59 1214.1 L1316.18 1214.1 L1316.76 1214.1 L1317.35 1214.1 L1317.93 1214.1 L1318.52 1214.1 L1319.11 1214.1 L1319.69 1214.1 L1320.28 1214.1 L1320.87 1214.1 L1321.45 1214.1 L1322.04 1214.1 L1322.63 1214.1 L1323.21 1214.1 L1323.8 1214.1 L1324.39 1214.1 L1324.97 1214.1 L1325.56 1214.1 L1326.14 1214.1 L1326.73 1214.1 L1327.32 1214.1 L1327.9 1214.1 L1328.49 1214.1 L1329.08 1214.1 L1329.66 1214.1 L1330.25 1214.1 L1330.84 1214.1 L1331.42 1214.1 L1332.01 1214.1 L1332.6 1214.1 L1333.18 1214.1 L1333.77 1214.1 L1334.35 1214.1 L1334.94 1214.1 L1335.53 1214.1 L1336.11 1214.1 L1336.7 1214.1 L1337.29 1214.1 L1337.87 1214.1 L1338.46 1214.1 L1339.05 1214.1 L1339.63 1214.1 L1340.22 1214.1 L1340.8 1214.1 L1341.39 1214.1 L1341.98 1214.1 L1342.56 1214.1 L1343.15 1214.1 L1343.74 1214.1 L1344.32 1214.1 L1344.91 1214.1 L1345.5 1214.1 L1346.08 1214.1 L1346.67 1214.1 L1347.26 1214.1 L1347.84 1214.1 L1348.43 1214.1 L1349.01 1214.1 L1349.6 1214.1 L1350.19 1214.1 L1350.77 1214.1 L1351.36 1214.1 L1351.95 1214.1 L1352.53 1214.1 L1353.12 1214.1 L1353.71 1214.1 L1354.29 1214.1 L1354.88 1214.1 L1355.47 1214.1 L1356.05 1214.1 L1356.64 1214.1 L1357.22 1214.1 L1357.81 1214.1 L1358.4 1214.1 L1358.98 1214.1 L1359.57 1214.1 L1360.16 1214.1 L1360.74 1214.1 L1361.33 1214.1 L1361.92 1214.1 L1362.5 1214.1 L1363.09 1214.1 L1363.68 1214.1 L1364.26 1214.1 L1364.85 1214.1 L1365.43 1214.1 L1366.02 1214.1 L1366.61 1214.1 L1367.19 1214.1 L1367.78 1214.1 L1368.37 1214.1 L1368.95 1214.1 L1369.54 1214.1 L1370.13 1214.1 L1370.71 1214.1 L1371.3 1214.1 L1371.88 1214.1 L1372.47 1214.1 L1373.06 1214.1 L1373.64 1214.1 L1374.23 1214.1 L1374.82 1214.1 L1375.4 1214.1 L1375.99 1214.1 L1376.58 1214.1 L1377.16 1214.1 L1377.75 1214.1 L1378.34 1214.1 L1378.92 1214.1 L1379.51 1214.1 L1380.09 1214.1 L1380.68 1214.1 L1381.27 1214.1 L1381.85 1214.1 L1382.44 1214.1 L1383.03 1214.1 L1383.61 1214.1 L1384.2 1214.1 L1384.79 1214.1 L1385.37 1214.1 L1385.96 1214.1 L1386.55 1214.1 L1387.13 1214.1 L1387.72 1214.1 L1388.3 1214.1 L1388.89 1214.1 L1389.48 1214.1 L1390.06 1214.1 L1390.65 1214.1 L1391.24 1214.1 L1391.82 1214.1 L1392.41 1214.1 L1393 1214.1 L1393.58 1214.1 L1394.17 1214.1 L1394.75 1214.1 L1395.34 1214.1 L1395.93 1214.1 L1396.51 1214.1 L1397.1 1214.1 L1397.69 1214.1 L1398.27 1214.1 L1398.86 1214.1 L1399.45 1214.1 L1400.03 1214.1 L1400.62 1214.1 L1401.21 1214.1 L1401.79 1214.1 L1402.38 1214.1 L1402.96 1214.1 L1403.55 1214.1 L1404.14 1214.1 L1404.72 1214.1 L1405.31 1214.1 L1405.9 1214.1 L1406.48 1214.1 L1407.07 1214.1 L1407.66 1214.1 L1408.24 1214.1 L1408.83 1214.1 L1409.42 1214.1 L1410 1214.1 L1410.59 1214.1 L1411.17 1214.1 L1411.76 1214.1 L1412.35 1214.1 L1412.93 1214.1 L1413.52 1214.1 L1414.11 1214.1 L1414.69 1214.1 L1415.28 1214.1 L1415.87 1214.1 L1416.45 1214.1 L1417.04 1214.1 L1417.63 1214.1 L1418.21 1214.1 L1418.8 1214.1 L1419.38 1214.1 L1419.97 1214.1 L1420.56 1214.1 L1421.14 1214.1 L1421.73 1214.1 L1422.32 1214.1 L1422.9 1214.1 L1423.49 1214.1 L1424.08 1214.1 L1424.66 1214.1 L1425.25 1214.1 L1425.83 1214.1 L1426.42 1214.1 L1427.01 1214.1 L1427.59 1214.1 L1428.18 1214.1 L1428.77 1214.1 L1429.35 1214.1 L1429.94 1214.1 L1430.53 1214.1 L1431.11 1214.1 L1431.7 1214.1 L1432.29 1214.1 L1432.87 1214.1 L1433.46 1214.1 L1434.04 1214.1 L1434.63 1214.1 L1435.22 1214.1 L1435.8 1214.1 L1436.39 1214.1 L1436.98 1214.1 L1437.56 1214.1 L1438.15 1214.1 L1438.74 1214.1 L1439.32 1214.1 L1439.91 1214.1 L1440.5 1214.1 L1441.08 1214.1 L1441.67 1214.1 L1442.25 1214.1 L1442.84 1214.1 L1443.43 1214.1 L1444.01 1214.1 L1444.6 1214.1 L1445.19 1214.1 L1445.77 1214.1 L1446.36 1214.1 L1446.95 1214.1 L1447.53 1214.1 L1448.12 1214.1 L1448.7 1214.1 L1449.29 1214.1 L1449.88 1214.1 L1450.46 1214.1 L1451.05 1214.1 L1451.64 1214.1 L1452.22 1214.1 L1452.81 1214.1 L1453.4 1214.1 L1453.98 1214.1 L1454.57 1214.1 L1455.16 1214.1 L1455.74 1214.1 L1456.33 1214.1 L1456.91 1214.1 L1457.5 1214.1 L1458.09 1214.1 L1458.67 1214.1 L1459.26 1214.1 L1459.85 1214.1 L1460.43 1214.1 L1461.02 1214.1 L1461.61 1214.1 L1462.19 1214.1 L1462.78 1214.1 L1463.37 1214.1 L1463.95 1214.1 L1464.54 1214.1 L1465.12 1214.1 L1465.71 1214.1 L1466.3 1214.1 L1466.88 1214.1 L1467.47 1214.1 L1468.06 1214.1 L1468.64 1214.1 L1469.23 1214.1 L1469.82 1214.1 L1470.4 1214.1 L1470.99 1214.1 L1471.57 1214.1 L1472.16 1214.1 L1472.75 1214.1 L1473.33 1214.1 L1473.92 1214.1 L1474.51 1214.1 L1475.09 1214.1 L1475.68 1214.1 L1476.27 1214.1 L1476.85 1214.1 L1477.44 1214.1 L1478.03 1214.1 L1478.61 1214.1 L1479.2 1214.1 L1479.78 1214.1 L1480.37 1214.1 L1480.96 1214.1 L1481.54 1214.1 L1482.13 1214.1 L1482.72 1214.1 L1483.3 1214.1 L1483.89 1214.1 L1484.48 1214.1 L1485.06 1214.1 L1485.65 1214.1 L1486.24 1214.1 L1486.82 1214.1 L1487.41 1214.1 L1487.99 1214.1 L1488.58 1214.1 L1489.17 1214.1 L1489.75 1214.1 L1490.34 1214.1 L1490.93 1214.1 L1491.51 1214.1 L1492.1 1214.1 L1492.69 1214.1 L1493.27 1214.1 L1493.86 1214.1 L1494.45 1214.1 L1495.03 1214.1 L1495.62 1214.1 L1496.2 1214.1 L1496.79 1214.1 L1497.38 1214.1 L1497.96 1214.1 L1498.55 1214.1 L1499.14 1214.1 L1499.72 1214.1 L1500.31 1214.1 L1500.9 1214.1 L1501.48 1214.1 L1502.07 1214.1 L1502.65 1214.1 L1503.24 1214.1 L1503.83 1214.1 L1504.41 1214.1 L1505 1214.1 L1505.59 1214.1 L1506.17 1214.1 L1506.76 1214.1 L1507.35 1214.1 L1507.93 1214.1 L1508.52 1214.1 L1509.11 1214.1 L1509.69 1214.1 L1510.28 1214.1 L1510.86 1214.1 L1511.45 1214.1 L1512.04 1214.1 L1512.62 1214.1 L1513.21 1214.1 L1513.8 1214.1 L1514.38 1214.1 L1514.97 1214.1 L1515.56 1214.1 L1516.14 1214.1 L1516.73 1214.1 L1517.32 1214.1 L1517.9 1214.1 L1518.49 1214.1 L1519.07 1214.1 L1519.66 1214.1 L1520.25 1214.1 L1520.83 1214.1 L1521.42 1214.1 L1522.01 1214.1 L1522.59 1214.1 L1523.18 1214.1 L1523.77 1214.1 L1524.35 1214.1 L1524.94 1214.1 L1525.52 1214.1 L1526.11 1214.1 L1526.7 1214.1 L1527.28 1214.1 L1527.87 1214.1 L1528.46 1214.1 L1529.04 1214.1 L1529.63 1214.1 L1530.22 1214.1 L1530.8 1214.1 L1531.39 1214.1 L1531.98 1214.1 L1532.56 1214.1 L1533.15 1214.1 L1533.73 1214.1 L1534.32 1214.1 L1534.91 1214.1 L1535.49 1214.1 L1536.08 1214.1 L1536.67 1214.1 L1537.25 1214.1 L1537.84 1214.1 L1538.43 1214.1 L1539.01 1214.1 L1539.6 1214.1 L1540.19 1214.1 L1540.77 1214.1 L1541.36 1214.1 L1541.94 1214.1 L1542.53 1214.1 L1543.12 1214.1 L1543.7 1214.1 L1544.29 1214.1 L1544.88 1214.1 L1545.46 1214.1 L1546.05 1214.1 L1546.64 1214.1 L1547.22 1214.1 L1547.81 1214.1 L1548.4 1214.1 L1548.98 1214.1 L1549.57 1214.1 L1550.15 1214.1 L1550.74 1214.1 L1551.33 1214.1 L1551.91 1214.1 L1552.5 1214.1 L1553.09 1214.1 L1553.67 1214.1 L1554.26 1214.1 L1554.85 1214.1 L1555.43 1214.1 L1556.02 1214.1 L1556.6 1214.1 L1557.19 1214.1 L1557.78 1214.1 L1558.36 1214.1 L1558.95 1214.1 L1559.54 1214.1 L1560.12 1214.1 L1560.71 1214.1 L1561.3 1214.1 L1561.88 1214.1 L1562.47 1214.1 L1563.06 1214.1 L1563.64 1214.1 L1564.23 1214.1 L1564.81 1214.1 L1565.4 1214.1 L1565.99 1214.1 L1566.57 1214.1 L1567.16 1214.1 L1567.75 1214.1 L1568.33 1214.1 L1568.92 1214.1 L1569.51 1214.1 L1570.09 1214.1 L1570.68 1214.1 L1571.27 1214.1 L1571.85 1214.1 L1572.44 1214.1 L1573.02 1214.1 L1573.61 1214.1 L1574.2 1214.1 L1574.78 1214.1 L1575.37 1214.1 L1575.96 1214.1 L1576.54 1214.1 L1577.13 1214.1 L1577.72 1214.1 L1578.3 1214.1 L1578.89 1214.1 L1579.47 1214.1 L1580.06 1214.1 L1580.65 1214.1 L1581.23 1214.1 L1581.82 1214.1 L1582.41 1214.1 L1582.99 1214.1 L1583.58 1214.1 L1584.17 1214.1 L1584.75 1214.1 L1585.34 1214.1 L1585.93 1214.1 L1586.51 1214.1 L1587.1 1214.1 L1587.68 1214.1 L1588.27 1214.1 L1588.86 1214.1 L1589.44 1214.1 L1590.03 1214.1 L1590.62 1214.1 L1591.2 1214.1 L1591.79 1214.1 L1592.38 1214.1 L1592.96 1214.1 L1593.55 1214.1 L1594.14 1214.1 L1594.72 1214.1 L1595.31 1214.1 L1595.89 1214.1 L1596.48 1214.1 L1597.07 1214.1 L1597.65 1214.1 L1598.24 1214.1 L1598.83 1214.1 L1599.41 1214.1 L1600 1214.1 L1600.59 1214.1 L1601.17 1214.1 L1601.76 1214.1 L1602.34 1214.1 L1602.93 1214.1 L1603.52 1214.1 L1604.1 1214.1 L1604.69 1214.1 L1605.28 1214.1 L1605.86 1214.1 L1606.45 1214.1 L1607.04 1214.1 L1607.62 1214.1 L1608.21 1214.1 L1608.8 1214.1 L1609.38 1214.1 L1609.97 1214.1 L1610.55 1214.1 L1611.14 1214.1 L1611.73 1214.1 L1612.31 1214.1 L1612.9 1214.1 L1613.49 1214.1 L1614.07 1214.1 L1614.66 1214.1 L1615.25 1214.1 L1615.83 1214.1 L1616.42 1214.1 L1617.01 1214.1 L1617.59 1214.1 L1618.18 1214.1 L1618.76 1214.1 L1619.35 1214.1 L1619.94 1214.1 L1620.52 1214.1 L1621.11 1214.1 L1621.7 1214.1 L1622.28 1214.1 L1622.87 1214.1 L1623.46 1214.1 L1624.04 1214.1 L1624.63 1214.1 L1625.22 1214.1 L1625.8 1214.1 L1626.39 1214.1 L1626.97 1214.1 L1627.56 1214.1 L1628.15 1214.1 L1628.73 1214.1 L1629.32 1214.1 L1629.91 1214.1 L1630.49 1214.1 L1631.08 1214.1 L1631.67 1214.1 L1632.25 1214.1 L1632.84 1214.1 L1633.42 1214.1 L1634.01 1214.1 L1634.6 1214.1 L1635.18 1214.1 L1635.77 1214.1 L1636.36 1214.1 L1636.94 1214.1 L1637.53 1214.1 L1638.12 1214.1 L1638.7 1214.1 L1639.29 1214.1 L1639.88 1214.1 L1640.46 1214.1 L1641.05 1214.1 L1641.63 1214.1 L1642.22 1214.1 L1642.81 1214.1 L1643.39 1214.1 L1643.98 1214.1 L1644.57 1214.1 L1645.15 1214.1 L1645.74 1214.1 L1646.33 1214.1 L1646.91 1214.1 L1647.5 1214.1 L1648.09 1214.1 L1648.67 1214.1 L1649.26 1214.1 L1649.84 1214.1 L1650.43 1214.1 L1651.02 1214.1 L1651.6 1214.1 L1652.19 1214.1 L1652.78 1214.1 L1653.36 1214.1 L1653.95 1214.1 L1654.54 1214.1 L1655.12 1214.1 L1655.71 1214.1 L1656.29 1214.1 L1656.88 1214.1 L1657.47 1214.1 L1658.05 1214.1 L1658.64 1214.1 L1659.23 1214.1 L1659.81 1214.1 L1660.4 1214.1 L1660.99 1214.1 L1661.57 1214.1 L1662.16 1214.1 L1662.75 1214.1 L1663.33 1214.1 L1663.92 1214.1 L1664.5 1214.1 L1665.09 1214.1 L1665.68 1214.1 L1666.26 1214.1 L1666.85 1214.1 L1667.44 1214.1 L1668.02 1214.1 L1668.61 1214.1 L1669.2 1214.1 L1669.78 1214.1 L1670.37 1214.1 L1670.96 1214.1 L1671.54 1214.1 L1672.13 1214.1 L1672.71 1214.1 L1673.3 1214.1 L1673.89 1214.1 L1674.47 1214.1 L1675.06 1214.1 L1675.65 1214.1 L1676.23 1214.1 L1676.82 1214.1 L1677.41 1214.1 L1677.99 1214.1 L1678.58 1214.1 L1679.17 1214.1 L1679.75 1214.1 L1680.34 1214.1 L1680.92 1214.1 L1681.51 1214.1 L1682.1 1214.1 L1682.68 1214.1 L1683.27 1214.1 L1683.86 1214.1 L1684.44 1214.1 L1685.03 1214.1 L1685.62 1214.1 L1686.2 1214.1 L1686.79 1214.1 L1687.37 1214.1 L1687.96 1214.1 L1688.55 1214.1 L1689.13 1214.1 L1689.72 1214.1 L1690.31 1214.1 L1690.89 1214.1 L1691.48 1214.1 L1692.07 1214.1 L1692.65 1214.1 L1693.24 1214.1 L1693.83 1214.1 L1694.41 1214.1 L1695 1214.1 L1695.58 1214.1 L1696.17 1214.1 L1696.76 1214.1 L1697.34 1214.1 L1697.93 1214.1 L1698.52 1214.1 L1699.1 1214.1 L1699.69 1214.1 L1700.28 1214.1 L1700.86 1214.1 L1701.45 1214.1 L1702.04 1214.1 L1702.62 1214.1 L1703.21 1214.1 L1703.79 1214.1 L1704.38 1214.1 L1704.97 1214.1 L1705.55 1214.1 L1706.14 1214.1 L1706.73 1214.1 L1707.31 1214.1 L1707.9 1214.1 L1708.49 1214.1 L1709.07 1214.1 L1709.66 1214.1 L1710.24 1214.1 L1710.83 1214.1 L1711.42 1214.1 L1712 1214.1 L1712.59 1214.1 L1713.18 1214.1 L1713.76 1214.1 L1714.35 1214.1 L1714.94 1214.1 L1715.52 1214.1 L1716.11 1214.1 L1716.7 1214.1 L1717.28 1214.1 L1717.87 1214.1 L1718.45 1214.1 L1719.04 1214.1 L1719.63 1214.1 L1720.21 1214.1 L1720.8 1214.1 L1721.39 1214.1 L1721.97 1214.1 L1722.56 1214.1 L1723.15 1214.1 L1723.73 1214.1 L1724.32 1214.1 L1724.91 1214.1 L1725.49 1214.1 L1726.08 1214.1 L1726.66 1214.1 L1727.25 1214.1 L1727.84 1214.1 L1728.42 1214.1 L1729.01 1214.1 L1729.6 1214.1 L1730.18 1214.1 L1730.77 1214.1 L1731.36 1214.1 L1731.94 1214.1 L1732.53 1214.1 L1733.11 1214.1 L1733.7 1214.1 L1734.29 1214.1 L1734.87 1214.1 L1735.46 1214.1 L1736.05 1214.1 L1736.63 1214.1 L1737.22 1214.1 L1737.81 1214.1 L1738.39 1214.1 L1738.98 1214.1 L1739.57 1214.1 L1740.15 1214.1 L1740.74 1214.1 L1741.32 1214.1 L1741.91 1214.1 L1742.5 1214.1 L1743.08 1214.1 L1743.67 1214.1 L1744.26 1214.1 L1744.84 1214.1 L1745.43 1214.1 L1746.02 1214.1 L1746.6 1214.1 L1747.19 1214.1 L1747.78 1214.1 L1748.36 1214.1 L1748.95 1214.1 L1749.53 1214.1 L1750.12 1214.1 L1750.71 1214.1 L1751.29 1214.1 L1751.88 1214.1 L1752.47 1214.1 L1753.05 1214.1 L1753.64 1214.1 L1754.23 1214.1 L1754.81 1214.1 L1755.4 1214.1 L1755.99 1214.1 L1756.57 1214.1 L1757.16 1214.1 L1757.74 1214.1 L1758.33 1214.1 L1758.92 1214.1 L1759.5 1214.1 L1760.09 1214.1 L1760.68 1214.1 L1761.26 1214.1 L1761.85 1214.1 L1762.44 1214.1 L1763.02 1214.1 L1763.61 1214.1 L1764.19 1214.1 L1764.78 1214.1 L1765.37 1214.1 L1765.95 1214.1 L1766.54 1214.1 L1767.13 1214.1 L1767.71 1214.1 L1768.3 1214.1 L1768.89 1214.1 L1769.47 1214.1 L1770.06 1214.1 L1770.65 1214.1 L1771.23 1214.1 L1771.82 1214.1 L1772.4 1214.1 L1772.99 1214.1 L1773.58 1214.1 L1774.16 1214.1 L1774.75 1214.1 L1775.34 1214.1 L1775.92 1214.1 L1776.51 1214.1 L1777.1 1214.1 L1777.68 1214.1 L1778.27 1214.1 L1778.86 1214.1 L1779.44 1214.1 L1780.03 1214.1 L1780.61 1214.1 L1781.2 1214.1 L1781.79 1214.1 L1782.37 1214.1 L1782.96 1214.1 L1783.55 1214.1 L1784.13 1214.1 L1784.72 1214.1 L1785.31 1214.1 L1785.89 1214.1 L1786.48 1214.1 L1787.06 1214.1 L1787.65 1214.1 L1788.24 1214.1 L1788.82 1214.1 L1789.41 1214.1 L1790 1214.1 L1790.58 1214.1 L1791.17 1214.1 L1791.76 1214.1 L1792.34 1214.1 L1792.93 1214.1 L1793.52 1214.1 L1794.1 1214.1 L1794.69 1214.1 L1795.27 1214.1 L1795.86 1214.1 L1796.45 1214.1 L1797.03 1214.1 L1797.62 1214.1 L1798.21 1214.1 L1798.79 1214.1 L1799.38 1214.1 L1799.97 1214.1 L1800.55 1214.1 L1801.14 1214.1 L1801.73 1214.1 L1802.31 1214.1 L1802.9 1214.1 L1803.48 1214.1 L1804.07 1214.1 L1804.66 1214.1 L1805.24 1214.1 L1805.83 1214.1 L1806.42 1214.1 L1807 1214.1 L1807.59 1214.1 L1808.18 1214.1 L1808.76 1214.1 L1809.35 1214.1 L1809.94 1214.1 L1810.52 1214.1 L1811.11 1214.1 L1811.69 1214.1 L1812.28 1214.1 L1812.87 1214.1 L1813.45 1214.1 L1814.04 1214.1 L1814.63 1214.1 L1815.21 1214.1 L1815.8 1214.1 L1816.39 1214.1 L1816.97 1214.1 L1817.56 1214.1 L1818.14 1214.1 L1818.73 1214.1 L1819.32 1214.1 L1819.9 1214.1 L1820.49 1214.1 L1821.08 1214.1 L1821.66 1214.1 L1822.25 1214.1 L1822.84 1214.1 L1823.42 1214.1 L1824.01 1214.1 L1824.6 1214.1 L1825.18 1214.1 L1825.77 1214.1 L1826.35 1214.1 L1826.94 1214.1 L1827.53 1214.1 L1828.11 1214.1 L1828.7 1214.1 L1829.29 1214.1 L1829.87 1214.1 L1830.46 1214.1 L1831.05 1214.1 L1831.63 1214.1 L1832.22 1214.1 L1832.81 1214.1 L1833.39 1214.1 L1833.98 1214.1 L1834.56 1214.1 L1835.15 1214.1 L1835.74 1214.1 L1836.32 1214.1 L1836.91 1214.1 L1837.5 1214.1 L1838.08 1214.1 L1838.67 1214.1 L1839.26 1214.1 L1839.84 1214.1 L1840.43 1214.1 L1841.01 1214.1 L1841.6 1214.1 L1842.19 1214.1 L1842.77 1214.1 L1843.36 1214.1 L1843.95 1214.1 L1844.53 1214.1 L1845.12 1214.1 L1845.71 1214.1 L1846.29 1214.1 L1846.88 1214.1 L1847.47 1214.1 L1848.05 1214.1 L1848.64 1214.1 L1849.22 1214.1 L1849.81 1214.1 L1850.4 1214.1 L1850.98 1214.1 L1851.57 1214.1 L1852.16 1214.1 L1852.74 1214.1 L1853.33 1214.1 L1853.92 1214.1 L1854.5 1214.1 L1855.09 1214.1 L1855.68 1214.1 L1856.26 1214.1 L1856.85 1214.1 L1857.43 1214.1 L1858.02 1214.1 L1858.61 1214.1 L1859.19 1214.1 L1859.78 1214.1 L1860.37 1214.1 L1860.95 1214.1 L1861.54 1214.1 L1862.13 1214.1 L1862.71 1214.1 L1863.3 1214.1 L1863.88 1214.1 L1864.47 1214.1 L1865.06 1214.1 L1865.64 1214.1 L1866.23 1214.1 L1866.82 1214.1 L1867.4 1214.1 L1867.99 1214.1 L1868.58 1214.1 L1869.16 1214.1 L1869.75 1214.1 L1870.34 1214.1 L1870.92 1214.1 L1871.51 1214.1 L1872.09 1214.1 L1872.68 1214.1 L1873.27 1214.1 L1873.85 1214.1 L1874.44 1214.1 L1875.03 1214.1 L1875.61 1214.1 L1876.2 1214.1 L1876.79 1214.1 L1877.37 1214.1 L1877.96 1214.1 L1878.55 1214.1 L1879.13 1214.1 L1879.72 1214.1 L1880.3 1214.1 L1880.89 1214.1 L1881.48 1214.1 L1882.06 1214.1 L1882.65 1214.1 L1883.24 1214.1 L1883.82 1214.1 L1884.41 1214.1 L1885 1214.1 L1885.58 1214.1 L1886.17 1214.1 L1886.76 1214.1 L1887.34 1214.1 L1887.93 1214.1 L1888.51 1214.1 L1889.1 1214.1 L1889.69 1214.1 L1890.27 1214.1 L1890.86 1214.1 L1891.45 1214.1 L1892.03 1214.1 L1892.62 1214.1 L1893.21 1214.1 L1893.79 1214.1 L1894.38 1214.1 L1894.96 1214.1 L1895.55 1214.1 L1896.14 1214.1 L1896.72 1214.1 L1897.31 1214.1 L1897.9 1214.1 L1898.48 1214.1 L1899.07 1214.1 L1899.66 1214.1 L1900.24 1214.1 L1900.83 1214.1 L1901.42 1214.1 L1902 1214.1 L1902.59 1214.1 L1903.17 1214.1 L1903.76 1214.1 L1904.35 1214.1 L1904.93 1214.1 L1905.52 1214.1 L1906.11 1214.1 L1906.69 1214.1 L1907.28 1214.1 L1907.87 1214.1 L1908.45 1214.1 L1909.04 1214.1 L1909.63 1214.1 L1910.21 1214.1 L1910.8 1214.1 L1911.38 1214.1 L1911.97 1214.1 L1912.56 1214.1 L1913.14 1214.1 L1913.73 1214.1 L1914.32 1214.1 L1914.9 1214.1 L1915.49 1214.1 L1916.08 1214.1 L1916.66 1214.1 L1917.25 1214.1 L1917.83 1214.1 L1918.42 1214.1 L1919.01 1214.1 L1919.59 1214.1 L1920.18 1214.1 L1920.77 1214.1 L1921.35 1214.1 L1921.94 1214.1 L1922.53 1214.1 L1923.11 1214.1 L1923.7 1214.1 L1924.29 1214.1 L1924.87 1214.1 L1925.46 1214.1 L1926.04 1214.1 L1926.63 1214.1 L1927.22 1214.1 L1927.8 1214.1 L1928.39 1214.1 L1928.98 1214.1 L1929.56 1214.1 L1930.15 1214.1 L1930.74 1214.1 L1931.32 1214.1 L1931.91 1214.1 L1932.5 1214.1 L1933.08 1214.1 L1933.67 1214.1 L1934.25 1214.1 L1934.84 1214.1 L1935.43 1214.1 L1936.01 1214.1 L1936.6 1214.1 L1937.19 1214.1 L1937.77 1214.1 L1938.36 1214.1 L1938.95 1214.1 L1939.53 1214.1 L1940.12 1214.1 L1940.71 1214.1 L1941.29 1214.1 L1941.88 1214.1 L1942.46 1214.1 L1943.05 1214.1 L1943.64 1214.1 L1944.22 1214.1 L1944.81 1214.1 L1945.4 1214.1 L1945.98 1214.1 L1946.57 1214.1 L1947.16 1214.1 L1947.74 1214.1 L1948.33 1214.1 L1948.91 1214.1 L1949.5 1214.1 L1950.09 1214.1 L1950.67 1214.1 L1951.26 1214.1 L1951.85 1214.1 L1952.43 1214.1 L1953.02 1214.1 L1953.61 1214.1 L1954.19 1214.1 L1954.78 1214.1 L1955.37 1214.1 L1955.95 1214.1 L1956.54 1214.1 L1957.12 1214.1 L1957.71 1214.1 L1958.3 1214.1 L1958.88 1214.1 L1959.47 1214.1 L1960.06 1214.1 L1960.64 1214.1 L1961.23 1214.1 L1961.82 1214.1 L1962.4 1214.1 L1962.99 1214.1 L1963.58 1214.1 L1964.16 1214.1 L1964.75 1214.1 L1965.33 1214.1 L1965.92 1214.1 L1966.51 1214.1 L1967.09 1214.1 L1967.68 1214.1 L1968.27 1214.1 L1968.85 1214.1 L1969.44 1214.1 L1970.03 1214.1 L1970.61 1214.1 L1971.2 1214.1 L1971.78 1214.1 L1972.37 1214.1 L1972.96 1214.1 L1973.54 1214.1 L1974.13 1214.1 L1974.72 1214.1 L1975.3 1214.1 L1975.89 1214.1 L1976.48 1214.1 L1977.06 1214.1 L1977.65 1214.1 L1978.24 1214.1 L1978.82 1214.1 L1979.41 1214.1 L1979.99 1214.1 L1980.58 1214.1 L1981.17 1214.1 L1981.75 1214.1 L1982.34 1214.1 L1982.93 1214.1 L1983.51 1214.1 L1984.1 1214.1 L1984.69 1214.1 L1985.27 1214.1 L1985.86 1214.1 L1986.45 1214.1 L1987.03 1214.1 L1987.62 1214.1 L1988.2 1214.1 L1988.79 1214.1 L1989.38 1214.1 L1989.96 1214.1 L1990.55 1214.1 L1991.14 1214.1 L1991.72 1214.1 L1992.31 1214.1 L1992.9 1214.1 L1993.48 1214.1 L1994.07 1214.1 L1994.65 1214.1 L1995.24 1214.1 L1995.83 1214.1 L1996.41 1214.1 L1997 1214.1 L1997.59 1214.1 L1998.17 1214.1 L1998.76 1214.1 L1999.35 1214.1 L1999.93 1214.1 L2000.52 1214.1 L2001.11 1214.1 L2001.69 1214.1 L2002.28 1214.1 L2002.86 1214.1 L2003.45 1214.1 L2004.04 1214.1 L2004.62 1214.1 L2005.21 1214.1 L2005.8 1214.1 L2006.38 1214.1 L2006.97 1214.1 L2007.56 1214.1 L2008.14 1214.1 L2008.73 1214.1 L2009.32 1214.1 L2009.9 1214.1 L2010.49 1214.1 L2011.07 1214.1 L2011.66 1214.1 L2012.25 1214.1 L2012.83 1214.1 L2013.42 1214.1 L2014.01 1214.1 L2014.59 1214.1 L2015.18 1214.1 L2015.77 1214.1 L2016.35 1214.1 L2016.94 1214.1 L2017.53 1214.1 L2018.11 1214.1 L2018.7 1214.1 L2019.28 1214.1 L2019.87 1214.1 L2020.46 1214.1 L2021.04 1214.1 L2021.63 1214.1 L2022.22 1214.1 L2022.8 1214.1 L2023.39 1214.1 L2023.98 1214.1 L2024.56 1214.1 L2025.15 1214.1 L2025.73 1214.1 L2026.32 1214.1 L2026.91 1214.1 L2027.49 1214.1 L2028.08 1214.1 L2028.67 1214.1 L2029.25 1214.1 L2029.84 1214.1 L2030.43 1214.1 L2031.01 1214.1 L2031.6 1214.1 L2032.19 1214.1 L2032.77 1214.1 L2033.36 1214.1 L2033.94 1214.1 L2034.53 1214.1 L2035.12 1214.1 L2035.7 1214.1 L2036.29 1214.1 L2036.88 1214.1 L2037.46 1214.1 L2038.05 1214.1 L2038.64 1214.1 L2039.22 1214.1 L2039.81 1214.1 L2040.4 1214.1 L2040.98 1214.1 L2041.57 1214.1 L2042.15 1214.1 L2042.74 1214.1 L2043.33 1214.1 L2043.91 1214.1 L2044.5 1214.1 L2045.09 1214.1 L2045.67 1214.1 L2046.26 1214.1 L2046.85 1214.1 L2047.43 1214.1 L2048.02 1214.1 L2048.6 1214.1 L2049.19 1214.1 L2049.78 1214.1 L2050.36 1214.1 L2050.95 1214.1 L2051.54 1214.1 L2052.12 1214.1 L2052.71 1214.1 L2053.3 1214.1 L2053.88 1214.1 L2054.47 1214.1 L2055.06 1214.1 L2055.64 1214.1 L2056.23 1214.1 L2056.81 1214.1 L2057.4 1214.1 L2057.99 1214.1 L2058.57 1214.1 L2059.16 1214.1 L2059.75 1214.1 L2060.33 1214.1 L2060.92 1214.1 L2061.51 1214.1 L2062.09 1214.1 L2062.68 1214.1 L2063.27 1214.1 L2063.85 1214.1 L2064.44 1214.1 L2065.02 1214.1 L2065.61 1214.1 L2066.2 1214.1 L2066.78 1214.1 L2067.37 1214.1 L2067.96 1214.1 L2068.54 1214.1 L2069.13 1214.1 L2069.72 1214.1 L2070.3 1214.1 L2070.89 1214.1 L2071.48 1214.1 L2072.06 1214.1 L2072.65 1214.1 L2073.23 1214.1 L2073.82 1214.1 L2074.41 1214.1 L2074.99 1214.1 L2075.58 1214.1 L2076.17 1214.1 L2076.75 1214.1 L2077.34 1214.1 L2077.93 1214.1 L2078.51 1214.1 L2079.1 1214.1 L2079.68 1214.1 L2080.27 1214.1 L2080.86 1214.1 L2081.44 1214.1 L2082.03 1214.1 L2082.62 1214.1 L2083.2 1214.1 L2083.79 1214.1 L2084.38 1214.1 L2084.96 1214.1 L2085.55 1214.1 L2086.14 1214.1 L2086.72 1214.1 L2087.31 1214.1 L2087.89 1214.1 L2088.48 1214.1 L2089.07 1214.1 L2089.65 1214.1 L2090.24 1214.1 L2090.83 1214.1 L2091.41 1214.1 L2092 1214.1 L2092.59 1214.1 L2093.17 1214.1 L2093.76 1214.1 L2094.35 1214.1 L2094.93 1214.1 L2095.52 1214.1 L2096.1 1214.1 L2096.69 1214.1 L2097.28 1214.1 L2097.86 1214.1 L2098.45 1214.1 L2099.04 1214.1 L2099.62 1214.1 L2100.21 1214.1 L2100.8 1214.1 L2101.38 1214.1 L2101.97 1214.1 L2102.55 1214.1 L2103.14 1214.1 L2103.73 1214.1 L2104.31 1214.1 L2104.9 1214.1 L2105.49 1214.1 L2106.07 1214.1 L2106.66 1214.1 L2107.25 1214.1 L2107.83 1214.1 L2108.42 1214.1 L2109.01 1214.1 L2109.59 1214.1 L2110.18 1214.1 L2110.76 1214.1 L2111.35 1214.1 L2111.94 1214.1 L2112.52 1214.1 L2113.11 1214.1 L2113.7 1214.1 L2114.28 1214.1 L2114.87 1214.1 L2115.46 1214.1 L2116.04 1214.1 L2116.63 1214.1 L2117.22 1214.1 L2117.8 1214.1 L2118.39 1214.1 L2118.97 1214.1 L2119.56 1214.1 L2120.15 1214.1 L2120.73 1214.1 L2121.32 1214.1 L2121.91 1214.1 L2122.49 1214.1 L2123.08 1214.1 L2123.67 1214.1 L2124.25 1214.1 L2124.84 1214.1 L2125.42 1214.1 L2126.01 1214.1 L2126.6 1214.1 L2127.18 1214.1 L2127.77 1214.1 L2128.36 1214.1 L2128.94 1214.1 L2129.53 1214.1 L2130.12 1214.1 L2130.7 1214.1 L2131.29 1214.1 L2131.88 1214.1 L2132.46 1214.1 L2133.05 1214.1 L2133.63 1214.1 L2134.22 1214.1 L2134.81 1214.1 L2135.39 1214.1 L2135.98 1214.1 L2136.57 1214.1 L2137.15 1214.1 L2137.74 1214.1 L2138.33 1214.1 L2138.91 1214.1 L2139.5 1214.1 L2140.09 1214.1 L2140.67 1214.1 L2141.26 1214.1 L2141.84 1214.1 L2142.43 1214.1 L2143.02 1214.1 L2143.6 1214.1 L2144.19 1214.1 L2144.78 1214.1 L2145.36 1214.1 L2145.95 1214.1 L2146.54 1214.1 L2147.12 1214.1 L2147.71 1214.1 L2148.3 1214.1 L2148.88 1214.1 L2149.47 1214.1 L2150.05 1214.1 L2150.64 1214.1 L2151.23 1214.1 L2151.81 1214.1 L2152.4 1214.1 L2152.99 1214.1 L2153.57 1214.1 L2154.16 1214.1 L2154.75 1214.1 L2155.33 1214.1 L2155.92 1214.1 L2156.5 1214.1 L2157.09 1214.1 L2157.68 1214.1 L2158.26 1214.1 L2158.26 1213.52 L2157.68 1213.52 L2157.09 1213.52 L2156.5 1213.52 L2155.92 1213.52 L2155.33 1213.52 L2154.75 1213.52 L2154.16 1213.52 L2153.57 1213.52 L2152.99 1213.52 L2152.4 1213.52 L2151.81 1213.52 L2151.23 1213.52 L2150.64 1213.52 L2150.05 1213.52 L2149.47 1213.52 L2148.88 1213.52 L2148.3 1213.52 L2147.71 1213.52 L2147.12 1213.52 L2146.54 1213.52 L2145.95 1213.52 L2145.36 1213.52 L2144.78 1213.52 L2144.19 1213.52 L2143.6 1213.52 L2143.02 1213.52 L2142.43 1213.52 L2141.84 1213.52 L2141.26 1213.52 L2140.67 1213.52 L2140.09 1213.52 L2139.5 1213.52 L2138.91 1213.52 L2138.33 1213.52 L2137.74 1213.52 L2137.15 1213.52 L2136.57 1213.52 L2135.98 1213.52 L2135.39 1213.52 L2134.81 1213.52 L2134.22 1213.52 L2133.63 1213.52 L2133.05 1213.52 L2132.46 1213.52 L2131.88 1213.52 L2131.29 1213.52 L2130.7 1213.52 L2130.12 1213.52 L2129.53 1213.52 L2128.94 1213.52 L2128.36 1213.52 L2127.77 1213.52 L2127.18 1213.52 L2126.6 1213.52 L2126.01 1213.52 L2125.42 1213.52 L2124.84 1213.52 L2124.25 1213.52 L2123.67 1213.52 L2123.08 1213.52 L2122.49 1213.52 L2121.91 1213.52 L2121.32 1213.52 L2120.73 1213.52 L2120.15 1213.52 L2119.56 1213.52 L2118.97 1213.52 L2118.39 1213.52 L2117.8 1213.52 L2117.22 1213.52 L2116.63 1213.52 L2116.04 1213.52 L2115.46 1213.52 L2114.87 1213.52 L2114.28 1213.52 L2113.7 1213.52 L2113.11 1213.52 L2112.52 1213.52 L2111.94 1213.52 L2111.35 1213.52 L2110.76 1213.52 L2110.18 1213.52 L2109.59 1213.52 L2109.01 1213.52 L2108.42 1213.52 L2107.83 1213.52 L2107.25 1213.52 L2106.66 1213.52 L2106.07 1213.52 L2105.49 1213.52 L2104.9 1213.52 L2104.31 1213.52 L2103.73 1213.52 L2103.14 1213.52 L2102.55 1213.52 L2101.97 1213.52 L2101.38 1213.52 L2100.8 1213.52 L2100.21 1213.52 L2099.62 1213.52 L2099.04 1213.52 L2098.45 1213.52 L2097.86 1213.52 L2097.28 1213.52 L2096.69 1213.52 L2096.1 1213.52 L2095.52 1213.52 L2094.93 1213.52 L2094.35 1213.52 L2093.76 1213.52 L2093.17 1213.52 L2092.59 1213.52 L2092 1213.52 L2091.41 1213.52 L2090.83 1213.52 L2090.24 1213.52 L2089.65 1213.52 L2089.07 1213.52 L2088.48 1213.52 L2087.89 1213.52 L2087.31 1213.52 L2086.72 1213.52 L2086.14 1213.52 L2085.55 1213.52 L2084.96 1213.52 L2084.38 1213.52 L2083.79 1213.52 L2083.2 1213.52 L2082.62 1213.52 L2082.03 1213.52 L2081.44 1213.52 L2080.86 1213.52 L2080.27 1213.52 L2079.68 1213.52 L2079.1 1213.52 L2078.51 1213.52 L2077.93 1213.52 L2077.34 1213.52 L2076.75 1213.52 L2076.17 1213.52 L2075.58 1213.52 L2074.99 1213.52 L2074.41 1213.52 L2073.82 1213.52 L2073.23 1213.52 L2072.65 1213.52 L2072.06 1213.52 L2071.48 1213.52 L2070.89 1213.52 L2070.3 1213.52 L2069.72 1213.52 L2069.13 1213.52 L2068.54 1213.52 L2067.96 1213.52 L2067.37 1213.52 L2066.78 1213.52 L2066.2 1213.52 L2065.61 1213.52 L2065.02 1213.52 L2064.44 1213.52 L2063.85 1213.52 L2063.27 1213.52 L2062.68 1213.52 L2062.09 1213.52 L2061.51 1213.52 L2060.92 1213.52 L2060.33 1213.52 L2059.75 1213.52 L2059.16 1213.52 L2058.57 1213.52 L2057.99 1213.52 L2057.4 1213.52 L2056.81 1213.52 L2056.23 1213.52 L2055.64 1213.52 L2055.06 1213.52 L2054.47 1213.52 L2053.88 1213.52 L2053.3 1213.52 L2052.71 1213.52 L2052.12 1213.52 L2051.54 1213.52 L2050.95 1213.52 L2050.36 1213.52 L2049.78 1213.52 L2049.19 1213.52 L2048.6 1213.52 L2048.02 1213.52 L2047.43 1213.52 L2046.85 1213.52 L2046.26 1213.52 L2045.67 1213.52 L2045.09 1213.52 L2044.5 1213.52 L2043.91 1213.52 L2043.33 1213.52 L2042.74 1213.52 L2042.15 1213.52 L2041.57 1213.52 L2040.98 1213.52 L2040.4 1213.52 L2039.81 1213.52 L2039.22 1213.52 L2038.64 1213.52 L2038.05 1213.52 L2037.46 1213.52 L2036.88 1213.52 L2036.29 1213.52 L2035.7 1213.52 L2035.12 1213.52 L2034.53 1213.52 L2033.94 1213.52 L2033.36 1213.52 L2032.77 1213.52 L2032.19 1213.52 L2031.6 1213.52 L2031.01 1213.52 L2030.43 1213.52 L2029.84 1213.52 L2029.25 1213.52 L2028.67 1213.52 L2028.08 1213.52 L2027.49 1213.52 L2026.91 1213.52 L2026.32 1213.52 L2025.73 1213.52 L2025.15 1213.52 L2024.56 1213.52 L2023.98 1213.52 L2023.39 1213.52 L2022.8 1213.52 L2022.22 1213.52 L2021.63 1213.52 L2021.04 1213.52 L2020.46 1213.52 L2019.87 1213.52 L2019.28 1213.52 L2018.7 1213.52 L2018.11 1213.52 L2017.53 1213.52 L2016.94 1213.52 L2016.35 1213.52 L2015.77 1213.52 L2015.18 1213.52 L2014.59 1213.52 L2014.01 1213.52 L2013.42 1213.52 L2012.83 1213.52 L2012.25 1213.52 L2011.66 1213.52 L2011.07 1213.52 L2010.49 1213.52 L2009.9 1213.52 L2009.32 1213.52 L2008.73 1213.52 L2008.14 1213.52 L2007.56 1213.52 L2006.97 1213.52 L2006.38 1213.52 L2005.8 1213.52 L2005.21 1213.52 L2004.62 1213.52 L2004.04 1213.52 L2003.45 1213.52 L2002.86 1213.52 L2002.28 1213.52 L2001.69 1213.52 L2001.11 1213.52 L2000.52 1213.52 L1999.93 1213.52 L1999.35 1213.52 L1998.76 1213.52 L1998.17 1213.52 L1997.59 1213.52 L1997 1213.52 L1996.41 1213.52 L1995.83 1213.52 L1995.24 1213.52 L1994.65 1213.52 L1994.07 1213.52 L1993.48 1213.52 L1992.9 1213.52 L1992.31 1213.52 L1991.72 1213.52 L1991.14 1213.52 L1990.55 1213.52 L1989.96 1213.52 L1989.38 1213.52 L1988.79 1213.52 L1988.2 1213.52 L1987.62 1213.52 L1987.03 1213.52 L1986.45 1213.52 L1985.86 1213.52 L1985.27 1213.52 L1984.69 1213.52 L1984.1 1213.52 L1983.51 1213.52 L1982.93 1213.52 L1982.34 1213.52 L1981.75 1213.52 L1981.17 1213.52 L1980.58 1213.52 L1979.99 1213.52 L1979.41 1213.52 L1978.82 1213.52 L1978.24 1213.52 L1977.65 1213.52 L1977.06 1213.52 L1976.48 1213.52 L1975.89 1213.52 L1975.3 1213.52 L1974.72 1213.52 L1974.13 1213.52 L1973.54 1213.52 L1972.96 1213.52 L1972.37 1213.52 L1971.78 1213.52 L1971.2 1213.52 L1970.61 1213.52 L1970.03 1213.52 L1969.44 1213.52 L1968.85 1213.52 L1968.27 1213.52 L1967.68 1213.52 L1967.09 1213.52 L1966.51 1213.52 L1965.92 1213.52 L1965.33 1213.52 L1964.75 1213.52 L1964.16 1213.52 L1963.58 1213.52 L1962.99 1213.52 L1962.4 1213.52 L1961.82 1213.52 L1961.23 1213.52 L1960.64 1213.52 L1960.06 1213.52 L1959.47 1213.52 L1958.88 1213.52 L1958.3 1213.52 L1957.71 1213.52 L1957.12 1213.52 L1956.54 1213.52 L1955.95 1213.52 L1955.37 1213.52 L1954.78 1213.52 L1954.19 1213.52 L1953.61 1213.52 L1953.02 1213.52 L1952.43 1213.52 L1951.85 1213.52 L1951.26 1213.52 L1950.67 1213.52 L1950.09 1213.52 L1949.5 1213.52 L1948.91 1213.52 L1948.33 1213.52 L1947.74 1213.52 L1947.16 1213.52 L1946.57 1213.52 L1945.98 1213.52 L1945.4 1213.52 L1944.81 1213.52 L1944.22 1213.52 L1943.64 1213.52 L1943.05 1213.52 L1942.46 1213.52 L1941.88 1213.52 L1941.29 1213.52 L1940.71 1213.52 L1940.12 1213.52 L1939.53 1213.52 L1938.95 1213.52 L1938.36 1213.52 L1937.77 1213.52 L1937.19 1213.52 L1936.6 1213.52 L1936.01 1213.52 L1935.43 1213.52 L1934.84 1213.52 L1934.25 1213.52 L1933.67 1213.52 L1933.08 1213.52 L1932.5 1213.52 L1931.91 1213.52 L1931.32 1213.52 L1930.74 1213.52 L1930.15 1213.52 L1929.56 1213.52 L1928.98 1213.52 L1928.39 1213.52 L1927.8 1213.52 L1927.22 1213.52 L1926.63 1213.52 L1926.04 1213.52 L1925.46 1213.52 L1924.87 1213.52 L1924.29 1213.52 L1923.7 1213.52 L1923.11 1213.52 L1922.53 1213.52 L1921.94 1213.52 L1921.35 1213.52 L1920.77 1213.52 L1920.18 1213.52 L1919.59 1213.52 L1919.01 1213.52 L1918.42 1213.52 L1917.83 1213.52 L1917.25 1213.52 L1916.66 1213.52 L1916.08 1213.52 L1915.49 1213.52 L1914.9 1213.52 L1914.32 1213.52 L1913.73 1213.52 L1913.14 1213.52 L1912.56 1213.52 L1911.97 1213.52 L1911.38 1213.52 L1910.8 1213.52 L1910.21 1213.52 L1909.63 1213.52 L1909.04 1213.52 L1908.45 1213.52 L1907.87 1213.52 L1907.28 1213.52 L1906.69 1213.52 L1906.11 1213.52 L1905.52 1213.52 L1904.93 1213.52 L1904.35 1213.52 L1903.76 1213.52 L1903.17 1213.52 L1902.59 1213.52 L1902 1213.52 L1901.42 1213.52 L1900.83 1213.52 L1900.24 1213.52 L1899.66 1213.52 L1899.07 1213.52 L1898.48 1213.52 L1897.9 1213.52 L1897.31 1213.52 L1896.72 1213.52 L1896.14 1213.52 L1895.55 1213.52 L1894.96 1213.52 L1894.38 1213.52 L1893.79 1213.52 L1893.21 1213.52 L1892.62 1213.52 L1892.03 1213.52 L1891.45 1213.52 L1890.86 1213.52 L1890.27 1213.52 L1889.69 1213.52 L1889.1 1213.52 L1888.51 1213.52 L1887.93 1213.52 L1887.34 1213.52 L1886.76 1213.52 L1886.17 1213.52 L1885.58 1213.52 L1885 1213.52 L1884.41 1213.52 L1883.82 1213.52 L1883.24 1213.52 L1882.65 1213.52 L1882.06 1213.52 L1881.48 1213.52 L1880.89 1213.52 L1880.3 1213.52 L1879.72 1213.52 L1879.13 1213.52 L1878.55 1213.52 L1877.96 1213.52 L1877.37 1213.52 L1876.79 1213.52 L1876.2 1213.52 L1875.61 1213.52 L1875.03 1213.52 L1874.44 1213.52 L1873.85 1213.52 L1873.27 1213.52 L1872.68 1213.52 L1872.09 1213.52 L1871.51 1213.52 L1870.92 1213.52 L1870.34 1213.52 L1869.75 1213.52 L1869.16 1213.52 L1868.58 1213.52 L1867.99 1213.52 L1867.4 1213.52 L1866.82 1213.52 L1866.23 1213.52 L1865.64 1213.52 L1865.06 1213.52 L1864.47 1213.52 L1863.88 1213.52 L1863.3 1213.52 L1862.71 1213.52 L1862.13 1213.52 L1861.54 1213.52 L1860.95 1213.52 L1860.37 1213.52 L1859.78 1213.52 L1859.19 1213.52 L1858.61 1213.52 L1858.02 1213.52 L1857.43 1213.52 L1856.85 1213.52 L1856.26 1213.52 L1855.68 1213.52 L1855.09 1213.52 L1854.5 1213.52 L1853.92 1213.52 L1853.33 1213.52 L1852.74 1213.52 L1852.16 1213.52 L1851.57 1213.52 L1850.98 1213.52 L1850.4 1213.52 L1849.81 1213.52 L1849.22 1213.52 L1848.64 1213.52 L1848.05 1213.52 L1847.47 1213.52 L1846.88 1213.52 L1846.29 1213.52 L1845.71 1213.52 L1845.12 1213.52 L1844.53 1213.52 L1843.95 1213.52 L1843.36 1213.52 L1842.77 1213.52 L1842.19 1213.52 L1841.6 1213.52 L1841.01 1213.52 L1840.43 1213.52 L1839.84 1213.52 L1839.26 1213.52 L1838.67 1213.52 L1838.08 1213.52 L1837.5 1213.52 L1836.91 1213.52 L1836.32 1213.52 L1835.74 1213.52 L1835.15 1213.52 L1834.56 1213.52 L1833.98 1213.52 L1833.39 1213.52 L1832.81 1213.52 L1832.22 1213.52 L1831.63 1213.52 L1831.05 1213.52 L1830.46 1213.52 L1829.87 1213.52 L1829.29 1213.52 L1828.7 1213.52 L1828.11 1213.52 L1827.53 1213.52 L1826.94 1213.52 L1826.35 1213.52 L1825.77 1213.52 L1825.18 1213.52 L1824.6 1213.52 L1824.01 1213.52 L1823.42 1213.52 L1822.84 1213.52 L1822.25 1213.52 L1821.66 1213.52 L1821.08 1213.52 L1820.49 1213.52 L1819.9 1213.52 L1819.32 1213.52 L1818.73 1213.52 L1818.14 1213.52 L1817.56 1213.52 L1816.97 1213.52 L1816.39 1213.52 L1815.8 1213.52 L1815.21 1213.52 L1814.63 1213.52 L1814.04 1213.52 L1813.45 1213.52 L1812.87 1213.52 L1812.28 1213.52 L1811.69 1213.52 L1811.11 1213.52 L1810.52 1213.52 L1809.94 1213.52 L1809.35 1213.52 L1808.76 1213.52 L1808.18 1213.52 L1807.59 1213.52 L1807 1213.52 L1806.42 1213.52 L1805.83 1213.52 L1805.24 1213.52 L1804.66 1213.52 L1804.07 1213.52 L1803.48 1213.52 L1802.9 1213.52 L1802.31 1213.52 L1801.73 1213.52 L1801.14 1213.52 L1800.55 1213.52 L1799.97 1213.52 L1799.38 1213.52 L1798.79 1213.52 L1798.21 1213.52 L1797.62 1213.52 L1797.03 1213.52 L1796.45 1213.52 L1795.86 1213.52 L1795.27 1213.52 L1794.69 1213.52 L1794.1 1213.52 L1793.52 1213.52 L1792.93 1213.52 L1792.34 1213.52 L1791.76 1213.52 L1791.17 1213.52 L1790.58 1213.52 L1790 1213.52 L1789.41 1213.52 L1788.82 1213.52 L1788.24 1213.52 L1787.65 1213.52 L1787.06 1213.52 L1786.48 1213.52 L1785.89 1213.52 L1785.31 1213.52 L1784.72 1213.52 L1784.13 1213.52 L1783.55 1213.52 L1782.96 1213.52 L1782.37 1213.52 L1781.79 1213.52 L1781.2 1213.52 L1780.61 1213.52 L1780.03 1213.52 L1779.44 1213.52 L1778.86 1213.52 L1778.27 1213.52 L1777.68 1213.52 L1777.1 1213.52 L1776.51 1213.52 L1775.92 1213.52 L1775.34 1213.52 L1774.75 1213.52 L1774.16 1213.52 L1773.58 1213.52 L1772.99 1213.52 L1772.4 1213.52 L1771.82 1213.52 L1771.23 1213.52 L1770.65 1213.52 L1770.06 1213.52 L1769.47 1213.52 L1768.89 1213.52 L1768.3 1213.52 L1767.71 1213.52 L1767.13 1213.52 L1766.54 1213.52 L1765.95 1213.52 L1765.37 1213.52 L1764.78 1213.52 L1764.19 1213.52 L1763.61 1213.52 L1763.02 1213.52 L1762.44 1213.52 L1761.85 1213.52 L1761.26 1213.52 L1760.68 1213.52 L1760.09 1213.52 L1759.5 1213.52 L1758.92 1213.52 L1758.33 1213.52 L1757.74 1213.52 L1757.16 1213.52 L1756.57 1213.52 L1755.99 1213.52 L1755.4 1213.52 L1754.81 1213.52 L1754.23 1213.52 L1753.64 1213.52 L1753.05 1213.52 L1752.47 1213.52 L1751.88 1213.52 L1751.29 1213.52 L1750.71 1213.52 L1750.12 1213.52 L1749.53 1213.52 L1748.95 1213.52 L1748.36 1213.52 L1747.78 1213.52 L1747.19 1213.52 L1746.6 1213.52 L1746.02 1213.52 L1745.43 1213.52 L1744.84 1213.52 L1744.26 1213.52 L1743.67 1213.52 L1743.08 1213.52 L1742.5 1213.52 L1741.91 1213.52 L1741.32 1213.52 L1740.74 1213.52 L1740.15 1213.52 L1739.57 1213.52 L1738.98 1213.52 L1738.39 1213.52 L1737.81 1213.52 L1737.22 1213.52 L1736.63 1213.52 L1736.05 1213.52 L1735.46 1213.52 L1734.87 1213.52 L1734.29 1213.52 L1733.7 1213.52 L1733.11 1213.52 L1732.53 1213.52 L1731.94 1213.52 L1731.36 1213.52 L1730.77 1213.52 L1730.18 1213.52 L1729.6 1213.52 L1729.01 1213.52 L1728.42 1213.52 L1727.84 1213.52 L1727.25 1213.52 L1726.66 1213.52 L1726.08 1213.52 L1725.49 1213.52 L1724.91 1213.52 L1724.32 1213.52 L1723.73 1213.52 L1723.15 1213.52 L1722.56 1213.52 L1721.97 1213.52 L1721.39 1213.52 L1720.8 1213.52 L1720.21 1213.52 L1719.63 1213.52 L1719.04 1213.52 L1718.45 1213.52 L1717.87 1213.52 L1717.28 1213.52 L1716.7 1213.52 L1716.11 1213.52 L1715.52 1213.52 L1714.94 1213.52 L1714.35 1213.52 L1713.76 1213.52 L1713.18 1213.52 L1712.59 1213.52 L1712 1213.52 L1711.42 1213.52 L1710.83 1213.52 L1710.24 1213.52 L1709.66 1213.52 L1709.07 1213.52 L1708.49 1213.52 L1707.9 1213.52 L1707.31 1213.52 L1706.73 1213.52 L1706.14 1213.52 L1705.55 1213.52 L1704.97 1213.52 L1704.38 1213.52 L1703.79 1213.52 L1703.21 1213.52 L1702.62 1213.52 L1702.04 1213.52 L1701.45 1213.52 L1700.86 1213.52 L1700.28 1213.52 L1699.69 1213.52 L1699.1 1213.52 L1698.52 1213.52 L1697.93 1213.52 L1697.34 1213.52 L1696.76 1213.52 L1696.17 1213.52 L1695.58 1213.52 L1695 1213.52 L1694.41 1213.52 L1693.83 1213.52 L1693.24 1213.52 L1692.65 1213.52 L1692.07 1213.52 L1691.48 1213.52 L1690.89 1213.52 L1690.31 1213.52 L1689.72 1213.52 L1689.13 1213.52 L1688.55 1213.52 L1687.96 1213.52 L1687.37 1213.52 L1686.79 1213.52 L1686.2 1213.52 L1685.62 1213.52 L1685.03 1213.52 L1684.44 1213.52 L1683.86 1213.52 L1683.27 1213.52 L1682.68 1213.52 L1682.1 1213.52 L1681.51 1213.52 L1680.92 1213.52 L1680.34 1213.52 L1679.75 1213.52 L1679.17 1213.52 L1678.58 1213.52 L1677.99 1213.52 L1677.41 1213.52 L1676.82 1213.52 L1676.23 1213.52 L1675.65 1213.52 L1675.06 1213.52 L1674.47 1213.52 L1673.89 1213.52 L1673.3 1213.52 L1672.71 1213.52 L1672.13 1213.52 L1671.54 1213.52 L1670.96 1213.52 L1670.37 1213.52 L1669.78 1213.52 L1669.2 1213.52 L1668.61 1213.52 L1668.02 1213.52 L1667.44 1213.52 L1666.85 1213.52 L1666.26 1213.52 L1665.68 1213.52 L1665.09 1213.52 L1664.5 1213.52 L1663.92 1213.52 L1663.33 1213.52 L1662.75 1213.52 L1662.16 1213.52 L1661.57 1213.52 L1660.99 1213.52 L1660.4 1213.52 L1659.81 1213.52 L1659.23 1213.52 L1658.64 1213.52 L1658.05 1213.52 L1657.47 1213.52 L1656.88 1213.52 L1656.29 1213.52 L1655.71 1213.52 L1655.12 1213.52 L1654.54 1213.52 L1653.95 1213.52 L1653.36 1213.52 L1652.78 1213.52 L1652.19 1213.52 L1651.6 1213.52 L1651.02 1213.52 L1650.43 1213.52 L1649.84 1213.52 L1649.26 1213.52 L1648.67 1213.52 L1648.09 1213.52 L1647.5 1213.52 L1646.91 1213.52 L1646.33 1213.52 L1645.74 1213.52 L1645.15 1213.52 L1644.57 1213.52 L1643.98 1213.52 L1643.39 1213.52 L1642.81 1213.52 L1642.22 1213.52 L1641.63 1213.52 L1641.05 1213.52 L1640.46 1213.52 L1639.88 1213.52 L1639.29 1213.52 L1638.7 1213.52 L1638.12 1213.52 L1637.53 1213.52 L1636.94 1213.52 L1636.36 1213.52 L1635.77 1213.52 L1635.18 1213.52 L1634.6 1213.52 L1634.01 1213.52 L1633.42 1213.52 L1632.84 1213.52 L1632.25 1213.52 L1631.67 1213.52 L1631.08 1213.52 L1630.49 1213.52 L1629.91 1213.52 L1629.32 1213.52 L1628.73 1213.52 L1628.15 1213.52 L1627.56 1213.52 L1626.97 1213.52 L1626.39 1213.52 L1625.8 1213.52 L1625.22 1213.52 L1624.63 1213.52 L1624.04 1213.52 L1623.46 1213.52 L1622.87 1213.52 L1622.28 1213.52 L1621.7 1213.52 L1621.11 1213.52 L1620.52 1213.52 L1619.94 1213.52 L1619.35 1213.52 L1618.76 1213.52 L1618.18 1213.52 L1617.59 1213.52 L1617.01 1213.52 L1616.42 1213.52 L1615.83 1213.52 L1615.25 1213.52 L1614.66 1213.52 L1614.07 1213.52 L1613.49 1213.52 L1612.9 1213.52 L1612.31 1213.52 L1611.73 1213.52 L1611.14 1213.52 L1610.55 1213.52 L1609.97 1213.52 L1609.38 1213.52 L1608.8 1213.52 L1608.21 1213.52 L1607.62 1213.52 L1607.04 1213.52 L1606.45 1213.52 L1605.86 1213.52 L1605.28 1213.52 L1604.69 1213.52 L1604.1 1213.52 L1603.52 1213.52 L1602.93 1213.52 L1602.34 1213.52 L1601.76 1213.52 L1601.17 1213.52 L1600.59 1213.52 L1600 1213.52 L1599.41 1213.52 L1598.83 1213.52 L1598.24 1213.52 L1597.65 1213.52 L1597.07 1213.52 L1596.48 1213.52 L1595.89 1213.52 L1595.31 1213.52 L1594.72 1213.52 L1594.14 1213.52 L1593.55 1213.52 L1592.96 1213.52 L1592.38 1213.52 L1591.79 1213.52 L1591.2 1213.52 L1590.62 1213.52 L1590.03 1213.52 L1589.44 1213.52 L1588.86 1213.52 L1588.27 1213.52 L1587.68 1213.52 L1587.1 1213.52 L1586.51 1213.52 L1585.93 1213.52 L1585.34 1213.52 L1584.75 1213.52 L1584.17 1213.52 L1583.58 1213.52 L1582.99 1213.52 L1582.41 1213.52 L1581.82 1213.52 L1581.23 1213.52 L1580.65 1213.52 L1580.06 1213.52 L1579.47 1213.52 L1578.89 1213.52 L1578.3 1213.52 L1577.72 1213.52 L1577.13 1213.52 L1576.54 1213.52 L1575.96 1213.52 L1575.37 1213.52 L1574.78 1213.52 L1574.2 1213.52 L1573.61 1213.52 L1573.02 1213.52 L1572.44 1213.52 L1571.85 1213.52 L1571.27 1213.52 L1570.68 1213.52 L1570.09 1213.52 L1569.51 1213.52 L1568.92 1213.52 L1568.33 1213.52 L1567.75 1213.52 L1567.16 1213.52 L1566.57 1213.52 L1565.99 1213.52 L1565.4 1213.52 L1564.81 1213.52 L1564.23 1213.52 L1563.64 1213.52 L1563.06 1213.52 L1562.47 1213.52 L1561.88 1213.52 L1561.3 1213.52 L1560.71 1213.52 L1560.12 1213.52 L1559.54 1213.52 L1558.95 1213.52 L1558.36 1213.52 L1557.78 1213.52 L1557.19 1213.52 L1556.6 1213.52 L1556.02 1213.52 L1555.43 1213.52 L1554.85 1213.52 L1554.26 1213.52 L1553.67 1213.52 L1553.09 1213.52 L1552.5 1213.52 L1551.91 1213.52 L1551.33 1213.52 L1550.74 1213.52 L1550.15 1213.52 L1549.57 1213.52 L1548.98 1213.52 L1548.4 1213.52 L1547.81 1213.52 L1547.22 1213.52 L1546.64 1213.52 L1546.05 1213.52 L1545.46 1213.52 L1544.88 1213.52 L1544.29 1213.52 L1543.7 1213.52 L1543.12 1213.52 L1542.53 1213.52 L1541.94 1213.52 L1541.36 1213.52 L1540.77 1213.52 L1540.19 1213.52 L1539.6 1213.52 L1539.01 1213.52 L1538.43 1213.52 L1537.84 1213.52 L1537.25 1213.52 L1536.67 1213.52 L1536.08 1213.52 L1535.49 1213.52 L1534.91 1213.52 L1534.32 1213.52 L1533.73 1213.52 L1533.15 1213.52 L1532.56 1213.52 L1531.98 1213.52 L1531.39 1213.52 L1530.8 1213.52 L1530.22 1213.52 L1529.63 1213.52 L1529.04 1213.52 L1528.46 1213.52 L1527.87 1213.52 L1527.28 1213.52 L1526.7 1213.52 L1526.11 1213.52 L1525.52 1213.52 L1524.94 1213.52 L1524.35 1213.52 L1523.77 1213.52 L1523.18 1213.52 L1522.59 1213.52 L1522.01 1213.52 L1521.42 1213.52 L1520.83 1213.52 L1520.25 1213.52 L1519.66 1213.52 L1519.07 1213.52 L1518.49 1213.52 L1517.9 1213.52 L1517.32 1213.52 L1516.73 1213.52 L1516.14 1213.52 L1515.56 1213.52 L1514.97 1213.52 L1514.38 1213.52 L1513.8 1213.52 L1513.21 1213.52 L1512.62 1213.52 L1512.04 1213.52 L1511.45 1213.52 L1510.86 1213.52 L1510.28 1213.52 L1509.69 1213.52 L1509.11 1213.52 L1508.52 1213.52 L1507.93 1213.52 L1507.35 1213.52 L1506.76 1213.52 L1506.17 1213.52 L1505.59 1213.52 L1505 1213.52 L1504.41 1213.52 L1503.83 1213.52 L1503.24 1213.52 L1502.65 1213.52 L1502.07 1213.52 L1501.48 1213.52 L1500.9 1213.52 L1500.31 1213.52 L1499.72 1213.52 L1499.14 1213.52 L1498.55 1213.52 L1497.96 1213.52 L1497.38 1213.52 L1496.79 1213.52 L1496.2 1213.52 L1495.62 1213.52 L1495.03 1213.52 L1494.45 1213.52 L1493.86 1213.52 L1493.27 1213.52 L1492.69 1213.52 L1492.1 1213.52 L1491.51 1213.52 L1490.93 1213.52 L1490.34 1213.52 L1489.75 1213.52 L1489.17 1213.52 L1488.58 1213.52 L1487.99 1213.52 L1487.41 1213.52 L1486.82 1213.52 L1486.24 1213.52 L1485.65 1213.52 L1485.06 1213.52 L1484.48 1213.52 L1483.89 1213.52 L1483.3 1213.52 L1482.72 1213.52 L1482.13 1213.52 L1481.54 1213.52 L1480.96 1213.52 L1480.37 1213.52 L1479.78 1213.52 L1479.2 1213.52 L1478.61 1213.52 L1478.03 1213.52 L1477.44 1213.52 L1476.85 1213.52 L1476.27 1213.52 L1475.68 1213.52 L1475.09 1213.52 L1474.51 1213.52 L1473.92 1213.52 L1473.33 1213.52 L1472.75 1213.52 L1472.16 1213.52 L1471.57 1213.52 L1470.99 1213.52 L1470.4 1213.52 L1469.82 1213.52 L1469.23 1213.52 L1468.64 1213.52 L1468.06 1213.52 L1467.47 1213.52 L1466.88 1213.52 L1466.3 1213.52 L1465.71 1213.52 L1465.12 1213.52 L1464.54 1213.52 L1463.95 1213.52 L1463.37 1213.52 L1462.78 1213.52 L1462.19 1213.52 L1461.61 1213.52 L1461.02 1213.52 L1460.43 1213.52 L1459.85 1213.52 L1459.26 1213.52 L1458.67 1213.52 L1458.09 1213.52 L1457.5 1213.52 L1456.91 1213.52 L1456.33 1213.52 L1455.74 1213.52 L1455.16 1213.52 L1454.57 1213.52 L1453.98 1213.52 L1453.4 1213.52 L1452.81 1213.52 L1452.22 1213.52 L1451.64 1213.52 L1451.05 1213.52 L1450.46 1213.52 L1449.88 1213.52 L1449.29 1213.52 L1448.7 1213.52 L1448.12 1213.52 L1447.53 1213.52 L1446.95 1213.52 L1446.36 1213.52 L1445.77 1213.52 L1445.19 1213.52 L1444.6 1213.52 L1444.01 1213.52 L1443.43 1213.52 L1442.84 1213.52 L1442.25 1213.52 L1441.67 1213.52 L1441.08 1213.52 L1440.5 1213.52 L1439.91 1213.52 L1439.32 1213.52 L1438.74 1213.52 L1438.15 1213.52 L1437.56 1213.52 L1436.98 1213.52 L1436.39 1213.52 L1435.8 1213.52 L1435.22 1213.52 L1434.63 1213.52 L1434.04 1213.52 L1433.46 1213.52 L1432.87 1213.52 L1432.29 1213.52 L1431.7 1213.52 L1431.11 1213.52 L1430.53 1213.52 L1429.94 1213.52 L1429.35 1213.52 L1428.77 1213.52 L1428.18 1213.52 L1427.59 1213.52 L1427.01 1213.52 L1426.42 1213.52 L1425.83 1213.52 L1425.25 1213.52 L1424.66 1213.52 L1424.08 1213.52 L1423.49 1213.52 L1422.9 1213.52 L1422.32 1213.52 L1421.73 1213.52 L1421.14 1213.52 L1420.56 1213.52 L1419.97 1213.52 L1419.38 1213.52 L1418.8 1213.52 L1418.21 1213.52 L1417.63 1213.52 L1417.04 1213.52 L1416.45 1213.52 L1415.87 1213.52 L1415.28 1213.52 L1414.69 1213.52 L1414.11 1213.52 L1413.52 1213.52 L1412.93 1213.52 L1412.35 1213.52 L1411.76 1213.52 L1411.17 1213.52 L1410.59 1213.52 L1410 1213.52 L1409.42 1213.52 L1408.83 1213.52 L1408.24 1213.52 L1407.66 1213.52 L1407.07 1213.52 L1406.48 1213.52 L1405.9 1213.52 L1405.31 1213.52 L1404.72 1213.52 L1404.14 1213.52 L1403.55 1213.52 L1402.96 1213.52 L1402.38 1213.52 L1401.79 1213.52 L1401.21 1213.52 L1400.62 1213.52 L1400.03 1213.52 L1399.45 1213.52 L1398.86 1213.52 L1398.27 1213.52 L1397.69 1213.52 L1397.1 1213.52 L1396.51 1213.52 L1395.93 1213.52 L1395.34 1213.52 L1394.75 1213.52 L1394.17 1213.52 L1393.58 1213.52 L1393 1213.52 L1392.41 1213.52 L1391.82 1213.52 L1391.24 1213.52 L1390.65 1213.52 L1390.06 1213.52 L1389.48 1213.52 L1388.89 1213.52 L1388.3 1213.52 L1387.72 1213.52 L1387.13 1213.52 L1386.55 1213.52 L1385.96 1213.52 L1385.37 1213.52 L1384.79 1213.52 L1384.2 1213.52 L1383.61 1213.52 L1383.03 1213.52 L1382.44 1213.52 L1381.85 1213.52 L1381.27 1213.52 L1380.68 1213.52 L1380.09 1213.52 L1379.51 1213.52 L1378.92 1213.52 L1378.34 1213.52 L1377.75 1213.52 L1377.16 1213.52 L1376.58 1213.52 L1375.99 1213.52 L1375.4 1213.52 L1374.82 1213.52 L1374.23 1213.52 L1373.64 1213.52 L1373.06 1213.52 L1372.47 1213.52 L1371.88 1213.52 L1371.3 1213.52 L1370.71 1213.52 L1370.13 1213.52 L1369.54 1213.52 L1368.95 1213.52 L1368.37 1213.52 L1367.78 1213.52 L1367.19 1213.52 L1366.61 1213.52 L1366.02 1213.52 L1365.43 1213.52 L1364.85 1213.52 L1364.26 1213.52 L1363.68 1213.52 L1363.09 1213.52 L1362.5 1213.52 L1361.92 1213.52 L1361.33 1213.52 L1360.74 1213.52 L1360.16 1213.52 L1359.57 1213.52 L1358.98 1213.52 L1358.4 1213.52 L1357.81 1213.52 L1357.22 1213.52 L1356.64 1213.52 L1356.05 1213.52 L1355.47 1213.52 L1354.88 1213.52 L1354.29 1213.52 L1353.71 1213.52 L1353.12 1213.52 L1352.53 1213.52 L1351.95 1213.52 L1351.36 1213.52 L1350.77 1213.52 L1350.19 1213.52 L1349.6 1213.52 L1349.01 1213.52 L1348.43 1213.52 L1347.84 1213.52 L1347.26 1213.52 L1346.67 1213.52 L1346.08 1213.52 L1345.5 1213.52 L1344.91 1213.52 L1344.32 1213.52 L1343.74 1213.52 L1343.15 1213.52 L1342.56 1213.52 L1341.98 1213.52 L1341.39 1213.52 L1340.8 1213.52 L1340.22 1213.52 L1339.63 1213.52 L1339.05 1213.52 L1338.46 1213.52 L1337.87 1213.52 L1337.29 1213.52 L1336.7 1213.52 L1336.11 1213.52 L1335.53 1213.52 L1334.94 1213.52 L1334.35 1213.52 L1333.77 1213.52 L1333.18 1213.52 L1332.6 1213.52 L1332.01 1213.52 L1331.42 1213.52 L1330.84 1213.52 L1330.25 1213.52 L1329.66 1213.52 L1329.08 1213.52 L1328.49 1213.52 L1327.9 1213.52 L1327.32 1213.52 L1326.73 1213.52 L1326.14 1213.52 L1325.56 1213.52 L1324.97 1213.52 L1324.39 1213.52 L1323.8 1213.52 L1323.21 1213.52 L1322.63 1213.52 L1322.04 1213.52 L1321.45 1213.52 L1320.87 1213.52 L1320.28 1213.52 L1319.69 1213.52 L1319.11 1213.52 L1318.52 1213.52 L1317.93 1213.52 L1317.35 1213.52 L1316.76 1213.52 L1316.18 1213.52 L1315.59 1213.52 L1315 1213.52 L1314.42 1213.52 L1313.83 1213.52 L1313.24 1213.52 L1312.66 1213.52 L1312.07 1213.52 L1311.48 1213.52 L1310.9 1213.52 L1310.31 1213.52 L1309.73 1213.52 L1309.14 1213.52 L1308.55 1213.52 L1307.97 1213.52 L1307.38 1213.52 L1306.79 1213.52 L1306.21 1213.52 L1305.62 1213.52 L1305.03 1213.52 L1304.45 1213.52 L1303.86 1213.52 L1303.27 1213.52 L1302.69 1213.52 L1302.1 1213.52 L1301.52 1213.52 L1300.93 1213.52 L1300.34 1213.52 L1299.76 1213.52 L1299.17 1213.52 L1298.58 1213.52 L1298 1213.52 L1297.41 1213.52 L1296.82 1213.52 L1296.24 1213.52 L1295.65 1213.52 L1295.06 1213.52 L1294.48 1213.52 L1293.89 1213.52 L1293.31 1213.52 L1292.72 1213.52 L1292.13 1213.52 L1291.55 1213.52 L1290.96 1213.52 L1290.37 1213.52 L1289.79 1213.52 L1289.2 1213.52 L1288.61 1213.52 L1288.03 1213.52 L1287.44 1213.52 L1286.86 1213.52 L1286.27 1213.52 L1285.68 1213.52 L1285.1 1213.52 L1284.51 1213.52 L1283.92 1213.52 L1283.34 1213.52 L1282.75 1213.52 L1282.16 1213.52 L1281.58 1213.52 L1280.99 1213.52 L1280.4 1213.52 L1279.82 1213.52 L1279.23 1213.52 L1278.65 1213.52 L1278.06 1213.52 L1277.47 1213.52 L1276.89 1213.52 L1276.3 1213.52 L1275.71 1213.52 L1275.13 1213.52 L1274.54 1213.52 L1273.95 1213.52 L1273.37 1213.52 L1272.78 1213.52 L1272.19 1213.52 L1271.61 1213.52 L1271.02 1213.52 L1270.44 1213.52 L1269.85 1213.52 L1269.26 1213.52 L1268.68 1213.52 L1268.09 1213.52 L1267.5 1213.52 L1266.92 1213.52 L1266.33 1213.52 L1265.74 1213.52 L1265.16 1213.52 L1264.57 1213.52 L1263.98 1213.52 L1263.4 1213.52 L1262.81 1213.52 L1262.23 1213.52 L1261.64 1213.52 L1261.05 1213.52 L1260.47 1213.52 L1259.88 1213.52 L1259.29 1213.52 L1258.71 1213.52 L1258.12 1213.52 L1257.53 1213.52 L1256.95 1213.52 L1256.36 1213.52 L1255.78 1213.52 L1255.19 1213.52 L1254.6 1213.52 L1254.02 1213.52 L1253.43 1213.52 L1252.84 1213.52 L1252.26 1213.52 L1251.67 1213.52 L1251.08 1213.52 L1250.5 1213.52 L1249.91 1213.52 L1249.32 1213.52 L1248.74 1213.52 L1248.15 1213.52 L1247.57 1213.52 L1246.98 1213.52 L1246.39 1213.52 L1245.81 1213.52 L1245.22 1213.52 L1244.63 1213.52 L1244.05 1213.52 L1243.46 1213.52 L1242.87 1213.52 L1242.29 1213.52 L1241.7 1213.52 L1241.11 1213.52 L1240.53 1213.52 L1239.94 1213.52 L1239.36 1213.52 L1238.77 1213.52 L1238.18 1213.52 L1237.6 1213.52 L1237.01 1213.52 L1236.42 1213.52 L1235.84 1213.52 L1235.25 1213.52 L1234.66 1213.52 L1234.08 1213.52 L1233.49 1213.52 L1232.91 1213.52 L1232.32 1213.52 L1231.73 1213.52 L1231.15 1213.52 L1230.56 1213.52 L1229.97 1213.52 L1229.39 1213.52 L1228.8 1213.52 L1228.21 1213.52 L1227.63 1213.52 L1227.04 1213.52 L1226.45 1213.52 L1225.87 1213.52 L1225.28 1213.52 L1224.7 1213.52 L1224.11 1213.52 L1223.52 1213.52 L1222.94 1213.52 L1222.35 1213.52 L1221.76 1213.52 L1221.18 1213.52 L1220.59 1213.52 L1220 1213.52 L1219.42 1213.52 L1218.83 1213.52 L1218.24 1213.52 L1217.66 1213.52 L1217.07 1213.52 L1216.49 1213.52 L1215.9 1213.52 L1215.31 1213.52 L1214.73 1213.52 L1214.14 1213.52 L1213.55 1213.52 L1212.97 1213.52 L1212.38 1213.52 L1211.79 1213.52 L1211.21 1213.52 L1210.62 1213.52 L1210.03 1213.52 L1209.45 1213.52 L1208.86 1213.52 L1208.28 1213.52 L1207.69 1213.52 L1207.1 1213.52 L1206.52 1213.52 L1205.93 1213.52 L1205.34 1213.52 L1204.76 1213.52 L1204.17 1213.52 L1203.58 1213.52 L1203 1213.52 L1202.41 1213.52 L1201.83 1213.52 L1201.24 1213.52 L1200.65 1213.52 L1200.07 1213.52 L1199.48 1213.52 L1198.89 1213.52 L1198.31 1213.52 L1197.72 1213.52 L1197.13 1213.52 L1196.55 1213.52 L1195.96 1213.52 L1195.37 1213.52 L1194.79 1213.52 L1194.2 1213.52 L1193.62 1213.52 L1193.03 1213.52 L1192.44 1213.52 L1191.86 1213.52 L1191.27 1213.52 L1190.68 1213.52 L1190.1 1213.52 L1189.51 1213.52 L1188.92 1213.52 L1188.34 1213.52 L1187.75 1213.52 L1187.16 1213.52 L1186.58 1213.52 L1185.99 1213.52 L1185.41 1213.52 L1184.82 1213.52 L1184.23 1213.52 L1183.65 1213.52 L1183.06 1213.52 L1182.47 1213.52 L1181.89 1213.52 L1181.3 1213.52 L1180.71 1213.52 L1180.13 1213.52 L1179.54 1213.52 L1178.96 1213.52 L1178.37 1213.52 L1177.78 1213.52 L1177.2 1213.52 L1176.61 1213.52 L1176.02 1213.52 L1175.44 1213.52 L1174.85 1213.52 L1174.26 1213.52 L1173.68 1213.52 L1173.09 1213.52 L1172.5 1213.52 L1171.92 1213.52 L1171.33 1213.52 L1170.75 1213.52 L1170.16 1213.52 L1169.57 1213.52 L1168.99 1213.52 L1168.4 1213.52 L1167.81 1213.52 L1167.23 1213.52 L1166.64 1213.52 L1166.05 1213.52 L1165.47 1213.52 L1164.88 1213.52 L1164.29 1213.52 L1163.71 1213.52 L1163.12 1213.52 L1162.54 1213.52 L1161.95 1213.52 L1161.36 1213.52 L1160.78 1213.52 L1160.19 1213.52 L1159.6 1213.52 L1159.02 1213.52 L1158.43 1213.52 L1157.84 1213.52 L1157.26 1213.52 L1156.67 1213.52 L1156.09 1213.52 L1155.5 1213.52 L1154.91 1213.52 L1154.33 1213.52 L1153.74 1213.52 L1153.15 1213.52 L1152.57 1213.52 L1151.98 1213.52 L1151.39 1213.52 L1150.81 1213.52 L1150.22 1213.52 L1149.63 1213.52 L1149.05 1213.52 L1148.46 1213.52 L1147.88 1213.52 L1147.29 1213.52 L1146.7 1213.52 L1146.12 1213.52 L1145.53 1213.52 L1144.94 1213.52 L1144.36 1213.52 L1143.77 1213.52 L1143.18 1213.52 L1142.6 1213.52 L1142.01 1213.52 L1141.42 1213.52 L1140.84 1213.52 L1140.25 1213.52 L1139.67 1213.52 L1139.08 1213.52 L1138.49 1213.52 L1137.91 1213.52 L1137.32 1213.52 L1136.73 1213.52 L1136.15 1213.52 L1135.56 1213.52 L1134.97 1213.52 L1134.39 1213.52 L1133.8 1213.52 L1133.21 1213.52 L1132.63 1213.52 L1132.04 1213.52 L1131.46 1213.52 L1130.87 1213.52 L1130.28 1213.52 L1129.7 1213.52 L1129.11 1213.52 L1128.52 1213.52 L1127.94 1213.52 L1127.35 1213.52 L1126.76 1213.52 L1126.18 1213.52 L1125.59 1213.52 L1125.01 1213.52 L1124.42 1213.52 L1123.83 1213.52 L1123.25 1213.52 L1122.66 1213.52 L1122.07 1213.52 L1121.49 1213.52 L1120.9 1213.52 L1120.31 1213.52 L1119.73 1213.52 L1119.14 1213.52 L1118.55 1213.52 L1117.97 1213.52 L1117.38 1213.52 L1116.8 1213.52 L1116.21 1213.52 L1115.62 1213.52 L1115.04 1213.52 L1114.45 1213.52 L1113.86 1213.52 L1113.28 1213.52 L1112.69 1213.52 L1112.1 1213.52 L1111.52 1213.52 L1110.93 1213.52 L1110.34 1213.52 L1109.76 1213.52 L1109.17 1213.52 L1108.59 1213.52 L1108 1213.52 L1107.41 1213.52 L1106.83 1213.52 L1106.24 1213.52 L1105.65 1213.52 L1105.07 1213.52 L1104.48 1213.52 L1103.89 1213.52 L1103.31 1213.52 L1102.72 1213.52 L1102.14 1213.52 L1101.55 1213.52 L1100.96 1213.52 L1100.38 1213.52 L1099.79 1213.52 L1099.2 1213.52 L1098.62 1213.52 L1098.03 1213.52 L1097.44 1213.52 L1096.86 1213.52 L1096.27 1213.52 L1095.68 1213.52 L1095.1 1213.52 L1094.51 1213.52 L1093.93 1213.52 L1093.34 1213.52 L1092.75 1213.52 L1092.17 1213.52 L1091.58 1213.52 L1090.99 1213.52 L1090.41 1213.52 L1089.82 1213.52 L1089.23 1213.52 L1088.65 1213.52 L1088.06 1213.52 L1087.47 1213.52 L1086.89 1213.52 L1086.3 1213.52 L1085.72 1213.52 L1085.13 1213.52 L1084.54 1213.52 L1083.96 1213.52 L1083.37 1213.52 L1082.78 1213.52 L1082.2 1213.52 L1081.61 1213.52 L1081.02 1213.52 L1080.44 1213.52 L1079.85 1213.52 L1079.26 1213.52 L1078.68 1213.52 L1078.09 1213.52 L1077.51 1213.52 L1076.92 1213.52 L1076.33 1213.52 L1075.75 1213.52 L1075.16 1213.52 L1074.57 1213.52 L1073.99 1213.52 L1073.4 1213.52 L1072.81 1213.52 L1072.23 1213.52 L1071.64 1213.52 L1071.06 1213.52 L1070.47 1213.52 L1069.88 1213.52 L1069.3 1213.52 L1068.71 1213.52 L1068.12 1213.52 L1067.54 1213.52 L1066.95 1213.52 L1066.36 1213.52 L1065.78 1213.52 L1065.19 1213.52 L1064.6 1213.52 L1064.02 1213.52 L1063.43 1213.52 L1062.85 1213.52 L1062.26 1213.52 L1061.67 1213.52 L1061.09 1213.52 L1060.5 1213.52 L1059.91 1213.52 L1059.33 1213.52 L1058.74 1213.52 L1058.15 1213.52 L1057.57 1213.52 L1056.98 1213.52 L1056.39 1213.52 L1055.81 1213.52 L1055.22 1213.52 L1054.64 1213.52 L1054.05 1213.52 L1053.46 1213.52 L1052.88 1213.52 L1052.29 1213.52 L1051.7 1213.52 L1051.12 1213.52 L1050.53 1213.52 L1049.94 1213.52 L1049.36 1213.52 L1048.77 1213.52 L1048.19 1213.52 L1047.6 1213.52 L1047.01 1213.52 L1046.43 1213.52 L1045.84 1213.52 L1045.25 1213.52 L1044.67 1213.52 L1044.08 1213.52 L1043.49 1213.52 L1042.91 1213.52 L1042.32 1213.52 L1041.73 1213.52 L1041.15 1213.52 L1040.56 1213.52 L1039.98 1213.52 L1039.39 1213.52 L1038.8 1213.52 L1038.22 1213.52 L1037.63 1213.52 L1037.04 1213.52 L1036.46 1213.52 L1035.87 1213.52 L1035.28 1213.52 L1034.7 1213.52 L1034.11 1213.52 L1033.52 1213.52 L1032.94 1213.52 L1032.35 1213.52 L1031.77 1213.52 L1031.18 1213.52 L1030.59 1213.52 L1030.01 1213.52 L1029.42 1213.52 L1028.83 1213.52 L1028.25 1213.52 L1027.66 1213.52 L1027.07 1213.52 L1026.49 1213.52 L1025.9 1213.52 L1025.32 1213.52 L1024.73 1213.52 L1024.14 1213.52 L1023.56 1213.52 L1022.97 1213.52 L1022.38 1213.52 L1021.8 1213.52 L1021.21 1213.52 L1020.62 1213.52 L1020.04 1213.52 L1019.45 1213.52 L1018.86 1213.52 L1018.28 1213.52 L1017.69 1213.52 L1017.11 1213.52 L1016.52 1213.52 L1015.93 1213.52 L1015.35 1213.52 L1014.76 1213.52 L1014.17 1213.52 L1013.59 1213.52 L1013 1213.52 L1012.41 1213.52 L1011.83 1213.52 L1011.24 1213.52 L1010.65 1213.52 L1010.07 1213.52 L1009.48 1213.52 L1008.9 1213.52 L1008.31 1213.52 L1007.72 1213.52 L1007.14 1213.52 L1006.55 1213.52 L1005.96 1213.52 L1005.38 1213.52 L1004.79 1213.52 L1004.2 1213.52 L1003.62 1213.52 L1003.03 1213.52 L1002.44 1213.52 L1001.86 1213.52 L1001.27 1213.52 L1000.69 1213.52 L1000.1 1213.52 L999.513 1213.52 L998.926 1213.52 L998.34 1213.52 L997.754 1213.52 L997.167 1213.52 L996.581 1213.52 L995.994 1213.52 L995.408 1213.52 L994.822 1213.52 L994.235 1213.52 L993.649 1213.52 L993.062 1213.52 L992.476 1213.52 L991.889 1213.52 L991.303 1213.52 L990.717 1213.52 L990.13 1213.52 L989.544 1213.52 L988.957 1213.52 L988.371 1213.52 L987.785 1213.52 L987.198 1213.52 L986.612 1213.52 L986.025 1213.52  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.81 986.612,1213.81 987.198,1213.81 987.785,1213.81 988.371,1213.81 988.957,1213.81 989.544,1213.81 990.13,1213.81 990.717,1213.81 991.303,1213.81 991.889,1213.81 992.476,1213.81 993.062,1213.81 993.649,1213.81 994.235,1213.81 994.822,1213.81 995.408,1213.81 995.994,1213.81 996.581,1213.81 997.167,1213.81 997.754,1213.81 998.34,1213.81 998.926,1213.81 999.513,1213.81 1000.1,1213.81 1000.69,1213.81 1001.27,1213.81 1001.86,1213.81 1002.44,1213.81 1003.03,1213.81 1003.62,1213.81 1004.2,1213.81 1004.79,1213.81 1005.38,1213.81 1005.96,1213.81 1006.55,1213.81 1007.14,1213.81 1007.72,1213.81 1008.31,1213.81 1008.9,1213.81 1009.48,1213.81 1010.07,1213.81 1010.65,1213.81 1011.24,1213.81 1011.83,1213.81 1012.41,1213.81 1013,1213.81 1013.59,1213.81 1014.17,1213.81 1014.76,1213.81 1015.35,1213.81 1015.93,1213.81 1016.52,1213.81 1017.11,1213.81 1017.69,1213.81 1018.28,1213.81 1018.86,1213.81 1019.45,1213.81 1020.04,1213.81 1020.62,1213.81 1021.21,1213.81 1021.8,1213.81 1022.38,1213.81 1022.97,1213.81 1023.56,1213.81 1024.14,1213.81 1024.73,1213.81 1025.32,1213.81 1025.9,1213.81 1026.49,1213.81 1027.07,1213.81 1027.66,1213.81 1028.25,1213.81 1028.83,1213.81 1029.42,1213.81 1030.01,1213.81 1030.59,1213.81 1031.18,1213.81 1031.77,1213.81 1032.35,1213.81 1032.94,1213.81 1033.52,1213.81 1034.11,1213.81 1034.7,1213.81 1035.28,1213.81 1035.87,1213.81 1036.46,1213.81 1037.04,1213.81 1037.63,1213.81 1038.22,1213.81 1038.8,1213.81 1039.39,1213.81 1039.98,1213.81 1040.56,1213.81 1041.15,1213.81 1041.73,1213.81 1042.32,1213.81 1042.91,1213.81 1043.49,1213.81 1044.08,1213.81 1044.67,1213.81 1045.25,1213.81 1045.84,1213.81 1046.43,1213.81 1047.01,1213.81 1047.6,1213.81 1048.19,1213.81 1048.77,1213.81 1049.36,1213.81 1049.94,1213.81 1050.53,1213.81 1051.12,1213.81 1051.7,1213.81 1052.29,1213.81 1052.88,1213.81 1053.46,1213.81 1054.05,1213.81 1054.64,1213.81 1055.22,1213.81 1055.81,1213.81 1056.39,1213.81 1056.98,1213.81 1057.57,1213.81 1058.15,1213.81 1058.74,1213.81 1059.33,1213.81 1059.91,1213.81 1060.5,1213.81 1061.09,1213.81 1061.67,1213.81 1062.26,1213.81 1062.85,1213.81 1063.43,1213.81 1064.02,1213.81 1064.6,1213.81 1065.19,1213.81 1065.78,1213.81 1066.36,1213.81 1066.95,1213.81 1067.54,1213.81 1068.12,1213.81 1068.71,1213.81 1069.3,1213.81 1069.88,1213.81 1070.47,1213.81 1071.06,1213.81 1071.64,1213.81 1072.23,1213.81 1072.81,1213.81 1073.4,1213.81 1073.99,1213.81 1074.57,1213.81 1075.16,1213.81 1075.75,1213.81 1076.33,1213.81 1076.92,1213.81 1077.51,1213.81 1078.09,1213.81 1078.68,1213.81 1079.26,1213.81 1079.85,1213.81 1080.44,1213.81 1081.02,1213.81 1081.61,1213.81 1082.2,1213.81 1082.78,1213.81 1083.37,1213.81 1083.96,1213.81 1084.54,1213.81 1085.13,1213.81 1085.72,1213.81 1086.3,1213.81 1086.89,1213.81 1087.47,1213.81 1088.06,1213.81 1088.65,1213.81 1089.23,1213.81 1089.82,1213.81 1090.41,1213.81 1090.99,1213.81 1091.58,1213.81 1092.17,1213.81 1092.75,1213.81 1093.34,1213.81 1093.93,1213.81 1094.51,1213.81 1095.1,1213.81 1095.68,1213.81 1096.27,1213.81 1096.86,1213.81 1097.44,1213.81 1098.03,1213.81 1098.62,1213.81 1099.2,1213.81 1099.79,1213.81 1100.38,1213.81 1100.96,1213.81 1101.55,1213.81 1102.14,1213.81 1102.72,1213.81 1103.31,1213.81 1103.89,1213.81 1104.48,1213.81 1105.07,1213.81 1105.65,1213.81 1106.24,1213.81 1106.83,1213.81 1107.41,1213.81 1108,1213.81 1108.59,1213.81 1109.17,1213.81 1109.76,1213.81 1110.34,1213.81 1110.93,1213.81 1111.52,1213.81 1112.1,1213.81 1112.69,1213.81 1113.28,1213.81 1113.86,1213.81 1114.45,1213.81 1115.04,1213.81 1115.62,1213.81 1116.21,1213.81 1116.8,1213.81 1117.38,1213.81 1117.97,1213.81 1118.55,1213.81 1119.14,1213.81 1119.73,1213.81 1120.31,1213.81 1120.9,1213.81 1121.49,1213.81 1122.07,1213.81 1122.66,1213.81 1123.25,1213.81 1123.83,1213.81 1124.42,1213.81 1125.01,1213.81 1125.59,1213.81 1126.18,1213.81 1126.76,1213.81 1127.35,1213.81 1127.94,1213.81 1128.52,1213.81 1129.11,1213.81 1129.7,1213.81 1130.28,1213.81 1130.87,1213.81 1131.46,1213.81 1132.04,1213.81 1132.63,1213.81 1133.21,1213.81 1133.8,1213.81 1134.39,1213.81 1134.97,1213.81 1135.56,1213.81 1136.15,1213.81 1136.73,1213.81 1137.32,1213.81 1137.91,1213.81 1138.49,1213.81 1139.08,1213.81 1139.67,1213.81 1140.25,1213.81 1140.84,1213.81 1141.42,1213.81 1142.01,1213.81 1142.6,1213.81 1143.18,1213.81 1143.77,1213.81 1144.36,1213.81 1144.94,1213.81 1145.53,1213.81 1146.12,1213.81 1146.7,1213.81 1147.29,1213.81 1147.88,1213.81 1148.46,1213.81 1149.05,1213.81 1149.63,1213.81 1150.22,1213.81 1150.81,1213.81 1151.39,1213.81 1151.98,1213.81 1152.57,1213.81 1153.15,1213.81 1153.74,1213.81 1154.33,1213.81 1154.91,1213.81 1155.5,1213.81 1156.09,1213.81 1156.67,1213.81 1157.26,1213.81 1157.84,1213.81 1158.43,1213.81 1159.02,1213.81 1159.6,1213.81 1160.19,1213.81 1160.78,1213.81 1161.36,1213.81 1161.95,1213.81 1162.54,1213.81 1163.12,1213.81 1163.71,1213.81 1164.29,1213.81 1164.88,1213.81 1165.47,1213.81 1166.05,1213.81 1166.64,1213.81 1167.23,1213.81 1167.81,1213.81 1168.4,1213.81 1168.99,1213.81 1169.57,1213.81 1170.16,1213.81 1170.75,1213.81 1171.33,1213.81 1171.92,1213.81 1172.5,1213.81 1173.09,1213.81 1173.68,1213.81 1174.26,1213.81 1174.85,1213.81 1175.44,1213.81 1176.02,1213.81 1176.61,1213.81 1177.2,1213.81 1177.78,1213.81 1178.37,1213.81 1178.96,1213.81 1179.54,1213.81 1180.13,1213.81 1180.71,1213.81 1181.3,1213.81 1181.89,1213.81 1182.47,1213.81 1183.06,1213.81 1183.65,1213.81 1184.23,1213.81 1184.82,1213.81 1185.41,1213.81 1185.99,1213.81 1186.58,1213.81 1187.16,1213.81 1187.75,1213.81 1188.34,1213.81 1188.92,1213.81 1189.51,1213.81 1190.1,1213.81 1190.68,1213.81 1191.27,1213.81 1191.86,1213.81 1192.44,1213.81 1193.03,1213.81 1193.62,1213.81 1194.2,1213.81 1194.79,1213.81 1195.37,1213.81 1195.96,1213.81 1196.55,1213.81 1197.13,1213.81 1197.72,1213.81 1198.31,1213.81 1198.89,1213.81 1199.48,1213.81 1200.07,1213.81 1200.65,1213.81 1201.24,1213.81 1201.83,1213.81 1202.41,1213.81 1203,1213.81 1203.58,1213.81 1204.17,1213.81 1204.76,1213.81 1205.34,1213.81 1205.93,1213.81 1206.52,1213.81 1207.1,1213.81 1207.69,1213.81 1208.28,1213.81 1208.86,1213.81 1209.45,1213.81 1210.03,1213.81 1210.62,1213.81 1211.21,1213.81 1211.79,1213.81 1212.38,1213.81 1212.97,1213.81 1213.55,1213.81 1214.14,1213.81 1214.73,1213.81 1215.31,1213.81 1215.9,1213.81 1216.49,1213.81 1217.07,1213.81 1217.66,1213.81 1218.24,1213.81 1218.83,1213.81 1219.42,1213.81 1220,1213.81 1220.59,1213.81 1221.18,1213.81 1221.76,1213.81 1222.35,1213.81 1222.94,1213.81 1223.52,1213.81 1224.11,1213.81 1224.7,1213.81 1225.28,1213.81 1225.87,1213.81 1226.45,1213.81 1227.04,1213.81 1227.63,1213.81 1228.21,1213.81 1228.8,1213.81 1229.39,1213.81 1229.97,1213.81 1230.56,1213.81 1231.15,1213.81 1231.73,1213.81 1232.32,1213.81 1232.91,1213.81 1233.49,1213.81 1234.08,1213.81 1234.66,1213.81 1235.25,1213.81 1235.84,1213.81 1236.42,1213.81 1237.01,1213.81 1237.6,1213.81 1238.18,1213.81 1238.77,1213.81 1239.36,1213.81 1239.94,1213.81 1240.53,1213.81 1241.11,1213.81 1241.7,1213.81 1242.29,1213.81 1242.87,1213.81 1243.46,1213.81 1244.05,1213.81 1244.63,1213.81 1245.22,1213.81 1245.81,1213.81 1246.39,1213.81 1246.98,1213.81 1247.57,1213.81 1248.15,1213.81 1248.74,1213.81 1249.32,1213.81 1249.91,1213.81 1250.5,1213.81 1251.08,1213.81 1251.67,1213.81 1252.26,1213.81 1252.84,1213.81 1253.43,1213.81 1254.02,1213.81 1254.6,1213.81 1255.19,1213.81 1255.78,1213.81 1256.36,1213.81 1256.95,1213.81 1257.53,1213.81 1258.12,1213.81 1258.71,1213.81 1259.29,1213.81 1259.88,1213.81 1260.47,1213.81 1261.05,1213.81 1261.64,1213.81 1262.23,1213.81 1262.81,1213.81 1263.4,1213.81 1263.98,1213.81 1264.57,1213.81 1265.16,1213.81 1265.74,1213.81 1266.33,1213.81 1266.92,1213.81 1267.5,1213.81 1268.09,1213.81 1268.68,1213.81 1269.26,1213.81 1269.85,1213.81 1270.44,1213.81 1271.02,1213.81 1271.61,1213.81 1272.19,1213.81 1272.78,1213.81 1273.37,1213.81 1273.95,1213.81 1274.54,1213.81 1275.13,1213.81 1275.71,1213.81 1276.3,1213.81 1276.89,1213.81 1277.47,1213.81 1278.06,1213.81 1278.65,1213.81 1279.23,1213.81 1279.82,1213.81 1280.4,1213.81 1280.99,1213.81 1281.58,1213.81 1282.16,1213.81 1282.75,1213.81 1283.34,1213.81 1283.92,1213.81 1284.51,1213.81 1285.1,1213.81 1285.68,1213.81 1286.27,1213.81 1286.86,1213.81 1287.44,1213.81 1288.03,1213.81 1288.61,1213.81 1289.2,1213.81 1289.79,1213.81 1290.37,1213.81 1290.96,1213.81 1291.55,1213.81 1292.13,1213.81 1292.72,1213.81 1293.31,1213.81 1293.89,1213.81 1294.48,1213.81 1295.06,1213.81 1295.65,1213.81 1296.24,1213.81 1296.82,1213.81 1297.41,1213.81 1298,1213.81 1298.58,1213.81 1299.17,1213.81 1299.76,1213.81 1300.34,1213.81 1300.93,1213.81 1301.52,1213.81 1302.1,1213.81 1302.69,1213.81 1303.27,1213.81 1303.86,1213.81 1304.45,1213.81 1305.03,1213.81 1305.62,1213.81 1306.21,1213.81 1306.79,1213.81 1307.38,1213.81 1307.97,1213.81 1308.55,1213.81 1309.14,1213.81 1309.73,1213.81 1310.31,1213.81 1310.9,1213.81 1311.48,1213.81 1312.07,1213.81 1312.66,1213.81 1313.24,1213.81 1313.83,1213.81 1314.42,1213.81 1315,1213.81 1315.59,1213.81 1316.18,1213.81 1316.76,1213.81 1317.35,1213.81 1317.93,1213.81 1318.52,1213.81 1319.11,1213.81 1319.69,1213.81 1320.28,1213.81 1320.87,1213.81 1321.45,1213.81 1322.04,1213.81 1322.63,1213.81 1323.21,1213.81 1323.8,1213.81 1324.39,1213.81 1324.97,1213.81 1325.56,1213.81 1326.14,1213.81 1326.73,1213.81 1327.32,1213.81 1327.9,1213.81 1328.49,1213.81 1329.08,1213.81 1329.66,1213.81 1330.25,1213.81 1330.84,1213.81 1331.42,1213.81 1332.01,1213.81 1332.6,1213.81 1333.18,1213.81 1333.77,1213.81 1334.35,1213.81 1334.94,1213.81 1335.53,1213.81 1336.11,1213.81 1336.7,1213.81 1337.29,1213.81 1337.87,1213.81 1338.46,1213.81 1339.05,1213.81 1339.63,1213.81 1340.22,1213.81 1340.8,1213.81 1341.39,1213.81 1341.98,1213.81 1342.56,1213.81 1343.15,1213.81 1343.74,1213.81 1344.32,1213.81 1344.91,1213.81 1345.5,1213.81 1346.08,1213.81 1346.67,1213.81 1347.26,1213.81 1347.84,1213.81 1348.43,1213.81 1349.01,1213.81 1349.6,1213.81 1350.19,1213.81 1350.77,1213.81 1351.36,1213.81 1351.95,1213.81 1352.53,1213.81 1353.12,1213.81 1353.71,1213.81 1354.29,1213.81 1354.88,1213.81 1355.47,1213.81 1356.05,1213.81 1356.64,1213.81 1357.22,1213.81 1357.81,1213.81 1358.4,1213.81 1358.98,1213.81 1359.57,1213.81 1360.16,1213.81 1360.74,1213.81 1361.33,1213.81 1361.92,1213.81 1362.5,1213.81 1363.09,1213.81 1363.68,1213.81 1364.26,1213.81 1364.85,1213.81 1365.43,1213.81 1366.02,1213.81 1366.61,1213.81 1367.19,1213.81 1367.78,1213.81 1368.37,1213.81 1368.95,1213.81 1369.54,1213.81 1370.13,1213.81 1370.71,1213.81 1371.3,1213.81 1371.88,1213.81 1372.47,1213.81 1373.06,1213.81 1373.64,1213.81 1374.23,1213.81 1374.82,1213.81 1375.4,1213.81 1375.99,1213.81 1376.58,1213.81 1377.16,1213.81 1377.75,1213.81 1378.34,1213.81 1378.92,1213.81 1379.51,1213.81 1380.09,1213.81 1380.68,1213.81 1381.27,1213.81 1381.85,1213.81 1382.44,1213.81 1383.03,1213.81 1383.61,1213.81 1384.2,1213.81 1384.79,1213.81 1385.37,1213.81 1385.96,1213.81 1386.55,1213.81 1387.13,1213.81 1387.72,1213.81 1388.3,1213.81 1388.89,1213.81 1389.48,1213.81 1390.06,1213.81 1390.65,1213.81 1391.24,1213.81 1391.82,1213.81 1392.41,1213.81 1393,1213.81 1393.58,1213.81 1394.17,1213.81 1394.75,1213.81 1395.34,1213.81 1395.93,1213.81 1396.51,1213.81 1397.1,1213.81 1397.69,1213.81 1398.27,1213.81 1398.86,1213.81 1399.45,1213.81 1400.03,1213.81 1400.62,1213.81 1401.21,1213.81 1401.79,1213.81 1402.38,1213.81 1402.96,1213.81 1403.55,1213.81 1404.14,1213.81 1404.72,1213.81 1405.31,1213.81 1405.9,1213.81 1406.48,1213.81 1407.07,1213.81 1407.66,1213.81 1408.24,1213.81 1408.83,1213.81 1409.42,1213.81 1410,1213.81 1410.59,1213.81 1411.17,1213.81 1411.76,1213.81 1412.35,1213.81 1412.93,1213.81 1413.52,1213.81 1414.11,1213.81 1414.69,1213.81 1415.28,1213.81 1415.87,1213.81 1416.45,1213.81 1417.04,1213.81 1417.63,1213.81 1418.21,1213.81 1418.8,1213.81 1419.38,1213.81 1419.97,1213.81 1420.56,1213.81 1421.14,1213.81 1421.73,1213.81 1422.32,1213.81 1422.9,1213.81 1423.49,1213.81 1424.08,1213.81 1424.66,1213.81 1425.25,1213.81 1425.83,1213.81 1426.42,1213.81 1427.01,1213.81 1427.59,1213.81 1428.18,1213.81 1428.77,1213.81 1429.35,1213.81 1429.94,1213.81 1430.53,1213.81 1431.11,1213.81 1431.7,1213.81 1432.29,1213.81 1432.87,1213.81 1433.46,1213.81 1434.04,1213.81 1434.63,1213.81 1435.22,1213.81 1435.8,1213.81 1436.39,1213.81 1436.98,1213.81 1437.56,1213.81 1438.15,1213.81 1438.74,1213.81 1439.32,1213.81 1439.91,1213.81 1440.5,1213.81 1441.08,1213.81 1441.67,1213.81 1442.25,1213.81 1442.84,1213.81 1443.43,1213.81 1444.01,1213.81 1444.6,1213.81 1445.19,1213.81 1445.77,1213.81 1446.36,1213.81 1446.95,1213.81 1447.53,1213.81 1448.12,1213.81 1448.7,1213.81 1449.29,1213.81 1449.88,1213.81 1450.46,1213.81 1451.05,1213.81 1451.64,1213.81 1452.22,1213.81 1452.81,1213.81 1453.4,1213.81 1453.98,1213.81 1454.57,1213.81 1455.16,1213.81 1455.74,1213.81 1456.33,1213.81 1456.91,1213.81 1457.5,1213.81 1458.09,1213.81 1458.67,1213.81 1459.26,1213.81 1459.85,1213.81 1460.43,1213.81 1461.02,1213.81 1461.61,1213.81 1462.19,1213.81 1462.78,1213.81 1463.37,1213.81 1463.95,1213.81 1464.54,1213.81 1465.12,1213.81 1465.71,1213.81 1466.3,1213.81 1466.88,1213.81 1467.47,1213.81 1468.06,1213.81 1468.64,1213.81 1469.23,1213.81 1469.82,1213.81 1470.4,1213.81 1470.99,1213.81 1471.57,1213.81 1472.16,1213.81 1472.75,1213.81 1473.33,1213.81 1473.92,1213.81 1474.51,1213.81 1475.09,1213.81 1475.68,1213.81 1476.27,1213.81 1476.85,1213.81 1477.44,1213.81 1478.03,1213.81 1478.61,1213.81 1479.2,1213.81 1479.78,1213.81 1480.37,1213.81 1480.96,1213.81 1481.54,1213.81 1482.13,1213.81 1482.72,1213.81 1483.3,1213.81 1483.89,1213.81 1484.48,1213.81 1485.06,1213.81 1485.65,1213.81 1486.24,1213.81 1486.82,1213.81 1487.41,1213.81 1487.99,1213.81 1488.58,1213.81 1489.17,1213.81 1489.75,1213.81 1490.34,1213.81 1490.93,1213.81 1491.51,1213.81 1492.1,1213.81 1492.69,1213.81 1493.27,1213.81 1493.86,1213.81 1494.45,1213.81 1495.03,1213.81 1495.62,1213.81 1496.2,1213.81 1496.79,1213.81 1497.38,1213.81 1497.96,1213.81 1498.55,1213.81 1499.14,1213.81 1499.72,1213.81 1500.31,1213.81 1500.9,1213.81 1501.48,1213.81 1502.07,1213.81 1502.65,1213.81 1503.24,1213.81 1503.83,1213.81 1504.41,1213.81 1505,1213.81 1505.59,1213.81 1506.17,1213.81 1506.76,1213.81 1507.35,1213.81 1507.93,1213.81 1508.52,1213.81 1509.11,1213.81 1509.69,1213.81 1510.28,1213.81 1510.86,1213.81 1511.45,1213.81 1512.04,1213.81 1512.62,1213.81 1513.21,1213.81 1513.8,1213.81 1514.38,1213.81 1514.97,1213.81 1515.56,1213.81 1516.14,1213.81 1516.73,1213.81 1517.32,1213.81 1517.9,1213.81 1518.49,1213.81 1519.07,1213.81 1519.66,1213.81 1520.25,1213.81 1520.83,1213.81 1521.42,1213.81 1522.01,1213.81 1522.59,1213.81 1523.18,1213.81 1523.77,1213.81 1524.35,1213.81 1524.94,1213.81 1525.52,1213.81 1526.11,1213.81 1526.7,1213.81 1527.28,1213.81 1527.87,1213.81 1528.46,1213.81 1529.04,1213.81 1529.63,1213.81 1530.22,1213.81 1530.8,1213.81 1531.39,1213.81 1531.98,1213.81 1532.56,1213.81 1533.15,1213.81 1533.73,1213.81 1534.32,1213.81 1534.91,1213.81 1535.49,1213.81 1536.08,1213.81 1536.67,1213.81 1537.25,1213.81 1537.84,1213.81 1538.43,1213.81 1539.01,1213.81 1539.6,1213.81 1540.19,1213.81 1540.77,1213.81 1541.36,1213.81 1541.94,1213.81 1542.53,1213.81 1543.12,1213.81 1543.7,1213.81 1544.29,1213.81 1544.88,1213.81 1545.46,1213.81 1546.05,1213.81 1546.64,1213.81 1547.22,1213.81 1547.81,1213.81 1548.4,1213.81 1548.98,1213.81 1549.57,1213.81 1550.15,1213.81 1550.74,1213.81 1551.33,1213.81 1551.91,1213.81 1552.5,1213.81 1553.09,1213.81 1553.67,1213.81 1554.26,1213.81 1554.85,1213.81 1555.43,1213.81 1556.02,1213.81 1556.6,1213.81 1557.19,1213.81 1557.78,1213.81 1558.36,1213.81 1558.95,1213.81 1559.54,1213.81 1560.12,1213.81 1560.71,1213.81 1561.3,1213.81 1561.88,1213.81 1562.47,1213.81 1563.06,1213.81 1563.64,1213.81 1564.23,1213.81 1564.81,1213.81 1565.4,1213.81 1565.99,1213.81 1566.57,1213.81 1567.16,1213.81 1567.75,1213.81 1568.33,1213.81 1568.92,1213.81 1569.51,1213.81 1570.09,1213.81 1570.68,1213.81 1571.27,1213.81 1571.85,1213.81 1572.44,1213.81 1573.02,1213.81 1573.61,1213.81 1574.2,1213.81 1574.78,1213.81 1575.37,1213.81 1575.96,1213.81 1576.54,1213.81 1577.13,1213.81 1577.72,1213.81 1578.3,1213.81 1578.89,1213.81 1579.47,1213.81 1580.06,1213.81 1580.65,1213.81 1581.23,1213.81 1581.82,1213.81 1582.41,1213.81 1582.99,1213.81 1583.58,1213.81 1584.17,1213.81 1584.75,1213.81 1585.34,1213.81 1585.93,1213.81 1586.51,1213.81 1587.1,1213.81 1587.68,1213.81 1588.27,1213.81 1588.86,1213.81 1589.44,1213.81 1590.03,1213.81 1590.62,1213.81 1591.2,1213.81 1591.79,1213.81 1592.38,1213.81 1592.96,1213.81 1593.55,1213.81 1594.14,1213.81 1594.72,1213.81 1595.31,1213.81 1595.89,1213.81 1596.48,1213.81 1597.07,1213.81 1597.65,1213.81 1598.24,1213.81 1598.83,1213.81 1599.41,1213.81 1600,1213.81 1600.59,1213.81 1601.17,1213.81 1601.76,1213.81 1602.34,1213.81 1602.93,1213.81 1603.52,1213.81 1604.1,1213.81 1604.69,1213.81 1605.28,1213.81 1605.86,1213.81 1606.45,1213.81 1607.04,1213.81 1607.62,1213.81 1608.21,1213.81 1608.8,1213.81 1609.38,1213.81 1609.97,1213.81 1610.55,1213.81 1611.14,1213.81 1611.73,1213.81 1612.31,1213.81 1612.9,1213.81 1613.49,1213.81 1614.07,1213.81 1614.66,1213.81 1615.25,1213.81 1615.83,1213.81 1616.42,1213.81 1617.01,1213.81 1617.59,1213.81 1618.18,1213.81 1618.76,1213.81 1619.35,1213.81 1619.94,1213.81 1620.52,1213.81 1621.11,1213.81 1621.7,1213.81 1622.28,1213.81 1622.87,1213.81 1623.46,1213.81 1624.04,1213.81 1624.63,1213.81 1625.22,1213.81 1625.8,1213.81 1626.39,1213.81 1626.97,1213.81 1627.56,1213.81 1628.15,1213.81 1628.73,1213.81 1629.32,1213.81 1629.91,1213.81 1630.49,1213.81 1631.08,1213.81 1631.67,1213.81 1632.25,1213.81 1632.84,1213.81 1633.42,1213.81 1634.01,1213.81 1634.6,1213.81 1635.18,1213.81 1635.77,1213.81 1636.36,1213.81 1636.94,1213.81 1637.53,1213.81 1638.12,1213.81 1638.7,1213.81 1639.29,1213.81 1639.88,1213.81 1640.46,1213.81 1641.05,1213.81 1641.63,1213.81 1642.22,1213.81 1642.81,1213.81 1643.39,1213.81 1643.98,1213.81 1644.57,1213.81 1645.15,1213.81 1645.74,1213.81 1646.33,1213.81 1646.91,1213.81 1647.5,1213.81 1648.09,1213.81 1648.67,1213.81 1649.26,1213.81 1649.84,1213.81 1650.43,1213.81 1651.02,1213.81 1651.6,1213.81 1652.19,1213.81 1652.78,1213.81 1653.36,1213.81 1653.95,1213.81 1654.54,1213.81 1655.12,1213.81 1655.71,1213.81 1656.29,1213.81 1656.88,1213.81 1657.47,1213.81 1658.05,1213.81 1658.64,1213.81 1659.23,1213.81 1659.81,1213.81 1660.4,1213.81 1660.99,1213.81 1661.57,1213.81 1662.16,1213.81 1662.75,1213.81 1663.33,1213.81 1663.92,1213.81 1664.5,1213.81 1665.09,1213.81 1665.68,1213.81 1666.26,1213.81 1666.85,1213.81 1667.44,1213.81 1668.02,1213.81 1668.61,1213.81 1669.2,1213.81 1669.78,1213.81 1670.37,1213.81 1670.96,1213.81 1671.54,1213.81 1672.13,1213.81 1672.71,1213.81 1673.3,1213.81 1673.89,1213.81 1674.47,1213.81 1675.06,1213.81 1675.65,1213.81 1676.23,1213.81 1676.82,1213.81 1677.41,1213.81 1677.99,1213.81 1678.58,1213.81 1679.17,1213.81 1679.75,1213.81 1680.34,1213.81 1680.92,1213.81 1681.51,1213.81 1682.1,1213.81 1682.68,1213.81 1683.27,1213.81 1683.86,1213.81 1684.44,1213.81 1685.03,1213.81 1685.62,1213.81 1686.2,1213.81 1686.79,1213.81 1687.37,1213.81 1687.96,1213.81 1688.55,1213.81 1689.13,1213.81 1689.72,1213.81 1690.31,1213.81 1690.89,1213.81 1691.48,1213.81 1692.07,1213.81 1692.65,1213.81 1693.24,1213.81 1693.83,1213.81 1694.41,1213.81 1695,1213.81 1695.58,1213.81 1696.17,1213.81 1696.76,1213.81 1697.34,1213.81 1697.93,1213.81 1698.52,1213.81 1699.1,1213.81 1699.69,1213.81 1700.28,1213.81 1700.86,1213.81 1701.45,1213.81 1702.04,1213.81 1702.62,1213.81 1703.21,1213.81 1703.79,1213.81 1704.38,1213.81 1704.97,1213.81 1705.55,1213.81 1706.14,1213.81 1706.73,1213.81 1707.31,1213.81 1707.9,1213.81 1708.49,1213.81 1709.07,1213.81 1709.66,1213.81 1710.24,1213.81 1710.83,1213.81 1711.42,1213.81 1712,1213.81 1712.59,1213.81 1713.18,1213.81 1713.76,1213.81 1714.35,1213.81 1714.94,1213.81 1715.52,1213.81 1716.11,1213.81 1716.7,1213.81 1717.28,1213.81 1717.87,1213.81 1718.45,1213.81 1719.04,1213.81 1719.63,1213.81 1720.21,1213.81 1720.8,1213.81 1721.39,1213.81 1721.97,1213.81 1722.56,1213.81 1723.15,1213.81 1723.73,1213.81 1724.32,1213.81 1724.91,1213.81 1725.49,1213.81 1726.08,1213.81 1726.66,1213.81 1727.25,1213.81 1727.84,1213.81 1728.42,1213.81 1729.01,1213.81 1729.6,1213.81 1730.18,1213.81 1730.77,1213.81 1731.36,1213.81 1731.94,1213.81 1732.53,1213.81 1733.11,1213.81 1733.7,1213.81 1734.29,1213.81 1734.87,1213.81 1735.46,1213.81 1736.05,1213.81 1736.63,1213.81 1737.22,1213.81 1737.81,1213.81 1738.39,1213.81 1738.98,1213.81 1739.57,1213.81 1740.15,1213.81 1740.74,1213.81 1741.32,1213.81 1741.91,1213.81 1742.5,1213.81 1743.08,1213.81 1743.67,1213.81 1744.26,1213.81 1744.84,1213.81 1745.43,1213.81 1746.02,1213.81 1746.6,1213.81 1747.19,1213.81 1747.78,1213.81 1748.36,1213.81 1748.95,1213.81 1749.53,1213.81 1750.12,1213.81 1750.71,1213.81 1751.29,1213.81 1751.88,1213.81 1752.47,1213.81 1753.05,1213.81 1753.64,1213.81 1754.23,1213.81 1754.81,1213.81 1755.4,1213.81 1755.99,1213.81 1756.57,1213.81 1757.16,1213.81 1757.74,1213.81 1758.33,1213.81 1758.92,1213.81 1759.5,1213.81 1760.09,1213.81 1760.68,1213.81 1761.26,1213.81 1761.85,1213.81 1762.44,1213.81 1763.02,1213.81 1763.61,1213.81 1764.19,1213.81 1764.78,1213.81 1765.37,1213.81 1765.95,1213.81 1766.54,1213.81 1767.13,1213.81 1767.71,1213.81 1768.3,1213.81 1768.89,1213.81 1769.47,1213.81 1770.06,1213.81 1770.65,1213.81 1771.23,1213.81 1771.82,1213.81 1772.4,1213.81 1772.99,1213.81 1773.58,1213.81 1774.16,1213.81 1774.75,1213.81 1775.34,1213.81 1775.92,1213.81 1776.51,1213.81 1777.1,1213.81 1777.68,1213.81 1778.27,1213.81 1778.86,1213.81 1779.44,1213.81 1780.03,1213.81 1780.61,1213.81 1781.2,1213.81 1781.79,1213.81 1782.37,1213.81 1782.96,1213.81 1783.55,1213.81 1784.13,1213.81 1784.72,1213.81 1785.31,1213.81 1785.89,1213.81 1786.48,1213.81 1787.06,1213.81 1787.65,1213.81 1788.24,1213.81 1788.82,1213.81 1789.41,1213.81 1790,1213.81 1790.58,1213.81 1791.17,1213.81 1791.76,1213.81 1792.34,1213.81 1792.93,1213.81 1793.52,1213.81 1794.1,1213.81 1794.69,1213.81 1795.27,1213.81 1795.86,1213.81 1796.45,1213.81 1797.03,1213.81 1797.62,1213.81 1798.21,1213.81 1798.79,1213.81 1799.38,1213.81 1799.97,1213.81 1800.55,1213.81 1801.14,1213.81 1801.73,1213.81 1802.31,1213.81 1802.9,1213.81 1803.48,1213.81 1804.07,1213.81 1804.66,1213.81 1805.24,1213.81 1805.83,1213.81 1806.42,1213.81 1807,1213.81 1807.59,1213.81 1808.18,1213.81 1808.76,1213.81 1809.35,1213.81 1809.94,1213.81 1810.52,1213.81 1811.11,1213.81 1811.69,1213.81 1812.28,1213.81 1812.87,1213.81 1813.45,1213.81 1814.04,1213.81 1814.63,1213.81 1815.21,1213.81 1815.8,1213.81 1816.39,1213.81 1816.97,1213.81 1817.56,1213.81 1818.14,1213.81 1818.73,1213.81 1819.32,1213.81 1819.9,1213.81 1820.49,1213.81 1821.08,1213.81 1821.66,1213.81 1822.25,1213.81 1822.84,1213.81 1823.42,1213.81 1824.01,1213.81 1824.6,1213.81 1825.18,1213.81 1825.77,1213.81 1826.35,1213.81 1826.94,1213.81 1827.53,1213.81 1828.11,1213.81 1828.7,1213.81 1829.29,1213.81 1829.87,1213.81 1830.46,1213.81 1831.05,1213.81 1831.63,1213.81 1832.22,1213.81 1832.81,1213.81 1833.39,1213.81 1833.98,1213.81 1834.56,1213.81 1835.15,1213.81 1835.74,1213.81 1836.32,1213.81 1836.91,1213.81 1837.5,1213.81 1838.08,1213.81 1838.67,1213.81 1839.26,1213.81 1839.84,1213.81 1840.43,1213.81 1841.01,1213.81 1841.6,1213.81 1842.19,1213.81 1842.77,1213.81 1843.36,1213.81 1843.95,1213.81 1844.53,1213.81 1845.12,1213.81 1845.71,1213.81 1846.29,1213.81 1846.88,1213.81 1847.47,1213.81 1848.05,1213.81 1848.64,1213.81 1849.22,1213.81 1849.81,1213.81 1850.4,1213.81 1850.98,1213.81 1851.57,1213.81 1852.16,1213.81 1852.74,1213.81 1853.33,1213.81 1853.92,1213.81 1854.5,1213.81 1855.09,1213.81 1855.68,1213.81 1856.26,1213.81 1856.85,1213.81 1857.43,1213.81 1858.02,1213.81 1858.61,1213.81 1859.19,1213.81 1859.78,1213.81 1860.37,1213.81 1860.95,1213.81 1861.54,1213.81 1862.13,1213.81 1862.71,1213.81 1863.3,1213.81 1863.88,1213.81 1864.47,1213.81 1865.06,1213.81 1865.64,1213.81 1866.23,1213.81 1866.82,1213.81 1867.4,1213.81 1867.99,1213.81 1868.58,1213.81 1869.16,1213.81 1869.75,1213.81 1870.34,1213.81 1870.92,1213.81 1871.51,1213.81 1872.09,1213.81 1872.68,1213.81 1873.27,1213.81 1873.85,1213.81 1874.44,1213.81 1875.03,1213.81 1875.61,1213.81 1876.2,1213.81 1876.79,1213.81 1877.37,1213.81 1877.96,1213.81 1878.55,1213.81 1879.13,1213.81 1879.72,1213.81 1880.3,1213.81 1880.89,1213.81 1881.48,1213.81 1882.06,1213.81 1882.65,1213.81 1883.24,1213.81 1883.82,1213.81 1884.41,1213.81 1885,1213.81 1885.58,1213.81 1886.17,1213.81 1886.76,1213.81 1887.34,1213.81 1887.93,1213.81 1888.51,1213.81 1889.1,1213.81 1889.69,1213.81 1890.27,1213.81 1890.86,1213.81 1891.45,1213.81 1892.03,1213.81 1892.62,1213.81 1893.21,1213.81 1893.79,1213.81 1894.38,1213.81 1894.96,1213.81 1895.55,1213.81 1896.14,1213.81 1896.72,1213.81 1897.31,1213.81 1897.9,1213.81 1898.48,1213.81 1899.07,1213.81 1899.66,1213.81 1900.24,1213.81 1900.83,1213.81 1901.42,1213.81 1902,1213.81 1902.59,1213.81 1903.17,1213.81 1903.76,1213.81 1904.35,1213.81 1904.93,1213.81 1905.52,1213.81 1906.11,1213.81 1906.69,1213.81 1907.28,1213.81 1907.87,1213.81 1908.45,1213.81 1909.04,1213.81 1909.63,1213.81 1910.21,1213.81 1910.8,1213.81 1911.38,1213.81 1911.97,1213.81 1912.56,1213.81 1913.14,1213.81 1913.73,1213.81 1914.32,1213.81 1914.9,1213.81 1915.49,1213.81 1916.08,1213.81 1916.66,1213.81 1917.25,1213.81 1917.83,1213.81 1918.42,1213.81 1919.01,1213.81 1919.59,1213.81 1920.18,1213.81 1920.77,1213.81 1921.35,1213.81 1921.94,1213.81 1922.53,1213.81 1923.11,1213.81 1923.7,1213.81 1924.29,1213.81 1924.87,1213.81 1925.46,1213.81 1926.04,1213.81 1926.63,1213.81 1927.22,1213.81 1927.8,1213.81 1928.39,1213.81 1928.98,1213.81 1929.56,1213.81 1930.15,1213.81 1930.74,1213.81 1931.32,1213.81 1931.91,1213.81 1932.5,1213.81 1933.08,1213.81 1933.67,1213.81 1934.25,1213.81 1934.84,1213.81 1935.43,1213.81 1936.01,1213.81 1936.6,1213.81 1937.19,1213.81 1937.77,1213.81 1938.36,1213.81 1938.95,1213.81 1939.53,1213.81 1940.12,1213.81 1940.71,1213.81 1941.29,1213.81 1941.88,1213.81 1942.46,1213.81 1943.05,1213.81 1943.64,1213.81 1944.22,1213.81 1944.81,1213.81 1945.4,1213.81 1945.98,1213.81 1946.57,1213.81 1947.16,1213.81 1947.74,1213.81 1948.33,1213.81 1948.91,1213.81 1949.5,1213.81 1950.09,1213.81 1950.67,1213.81 1951.26,1213.81 1951.85,1213.81 1952.43,1213.81 1953.02,1213.81 1953.61,1213.81 1954.19,1213.81 1954.78,1213.81 1955.37,1213.81 1955.95,1213.81 1956.54,1213.81 1957.12,1213.81 1957.71,1213.81 1958.3,1213.81 1958.88,1213.81 1959.47,1213.81 1960.06,1213.81 1960.64,1213.81 1961.23,1213.81 1961.82,1213.81 1962.4,1213.81 1962.99,1213.81 1963.58,1213.81 1964.16,1213.81 1964.75,1213.81 1965.33,1213.81 1965.92,1213.81 1966.51,1213.81 1967.09,1213.81 1967.68,1213.81 1968.27,1213.81 1968.85,1213.81 1969.44,1213.81 1970.03,1213.81 1970.61,1213.81 1971.2,1213.81 1971.78,1213.81 1972.37,1213.81 1972.96,1213.81 1973.54,1213.81 1974.13,1213.81 1974.72,1213.81 1975.3,1213.81 1975.89,1213.81 1976.48,1213.81 1977.06,1213.81 1977.65,1213.81 1978.24,1213.81 1978.82,1213.81 1979.41,1213.81 1979.99,1213.81 1980.58,1213.81 1981.17,1213.81 1981.75,1213.81 1982.34,1213.81 1982.93,1213.81 1983.51,1213.81 1984.1,1213.81 1984.69,1213.81 1985.27,1213.81 1985.86,1213.81 1986.45,1213.81 1987.03,1213.81 1987.62,1213.81 1988.2,1213.81 1988.79,1213.81 1989.38,1213.81 1989.96,1213.81 1990.55,1213.81 1991.14,1213.81 1991.72,1213.81 1992.31,1213.81 1992.9,1213.81 1993.48,1213.81 1994.07,1213.81 1994.65,1213.81 1995.24,1213.81 1995.83,1213.81 1996.41,1213.81 1997,1213.81 1997.59,1213.81 1998.17,1213.81 1998.76,1213.81 1999.35,1213.81 1999.93,1213.81 2000.52,1213.81 2001.11,1213.81 2001.69,1213.81 2002.28,1213.81 2002.86,1213.81 2003.45,1213.81 2004.04,1213.81 2004.62,1213.81 2005.21,1213.81 2005.8,1213.81 2006.38,1213.81 2006.97,1213.81 2007.56,1213.81 2008.14,1213.81 2008.73,1213.81 2009.32,1213.81 2009.9,1213.81 2010.49,1213.81 2011.07,1213.81 2011.66,1213.81 2012.25,1213.81 2012.83,1213.81 2013.42,1213.81 2014.01,1213.81 2014.59,1213.81 2015.18,1213.81 2015.77,1213.81 2016.35,1213.81 2016.94,1213.81 2017.53,1213.81 2018.11,1213.81 2018.7,1213.81 2019.28,1213.81 2019.87,1213.81 2020.46,1213.81 2021.04,1213.81 2021.63,1213.81 2022.22,1213.81 2022.8,1213.81 2023.39,1213.81 2023.98,1213.81 2024.56,1213.81 2025.15,1213.81 2025.73,1213.81 2026.32,1213.81 2026.91,1213.81 2027.49,1213.81 2028.08,1213.81 2028.67,1213.81 2029.25,1213.81 2029.84,1213.81 2030.43,1213.81 2031.01,1213.81 2031.6,1213.81 2032.19,1213.81 2032.77,1213.81 2033.36,1213.81 2033.94,1213.81 2034.53,1213.81 2035.12,1213.81 2035.7,1213.81 2036.29,1213.81 2036.88,1213.81 2037.46,1213.81 2038.05,1213.81 2038.64,1213.81 2039.22,1213.81 2039.81,1213.81 2040.4,1213.81 2040.98,1213.81 2041.57,1213.81 2042.15,1213.81 2042.74,1213.81 2043.33,1213.81 2043.91,1213.81 2044.5,1213.81 2045.09,1213.81 2045.67,1213.81 2046.26,1213.81 2046.85,1213.81 2047.43,1213.81 2048.02,1213.81 2048.6,1213.81 2049.19,1213.81 2049.78,1213.81 2050.36,1213.81 2050.95,1213.81 2051.54,1213.81 2052.12,1213.81 2052.71,1213.81 2053.3,1213.81 2053.88,1213.81 2054.47,1213.81 2055.06,1213.81 2055.64,1213.81 2056.23,1213.81 2056.81,1213.81 2057.4,1213.81 2057.99,1213.81 2058.57,1213.81 2059.16,1213.81 2059.75,1213.81 2060.33,1213.81 2060.92,1213.81 2061.51,1213.81 2062.09,1213.81 2062.68,1213.81 2063.27,1213.81 2063.85,1213.81 2064.44,1213.81 2065.02,1213.81 2065.61,1213.81 2066.2,1213.81 2066.78,1213.81 2067.37,1213.81 2067.96,1213.81 2068.54,1213.81 2069.13,1213.81 2069.72,1213.81 2070.3,1213.81 2070.89,1213.81 2071.48,1213.81 2072.06,1213.81 2072.65,1213.81 2073.23,1213.81 2073.82,1213.81 2074.41,1213.81 2074.99,1213.81 2075.58,1213.81 2076.17,1213.81 2076.75,1213.81 2077.34,1213.81 2077.93,1213.81 2078.51,1213.81 2079.1,1213.81 2079.68,1213.81 2080.27,1213.81 2080.86,1213.81 2081.44,1213.81 2082.03,1213.81 2082.62,1213.81 2083.2,1213.81 2083.79,1213.81 2084.38,1213.81 2084.96,1213.81 2085.55,1213.81 2086.14,1213.81 2086.72,1213.81 2087.31,1213.81 2087.89,1213.81 2088.48,1213.81 2089.07,1213.81 2089.65,1213.81 2090.24,1213.81 2090.83,1213.81 2091.41,1213.81 2092,1213.81 2092.59,1213.81 2093.17,1213.81 2093.76,1213.81 2094.35,1213.81 2094.93,1213.81 2095.52,1213.81 2096.1,1213.81 2096.69,1213.81 2097.28,1213.81 2097.86,1213.81 2098.45,1213.81 2099.04,1213.81 2099.62,1213.81 2100.21,1213.81 2100.8,1213.81 2101.38,1213.81 2101.97,1213.81 2102.55,1213.81 2103.14,1213.81 2103.73,1213.81 2104.31,1213.81 2104.9,1213.81 2105.49,1213.81 2106.07,1213.81 2106.66,1213.81 2107.25,1213.81 2107.83,1213.81 2108.42,1213.81 2109.01,1213.81 2109.59,1213.81 2110.18,1213.81 2110.76,1213.81 2111.35,1213.81 2111.94,1213.81 2112.52,1213.81 2113.11,1213.81 2113.7,1213.81 2114.28,1213.81 2114.87,1213.81 2115.46,1213.81 2116.04,1213.81 2116.63,1213.81 2117.22,1213.81 2117.8,1213.81 2118.39,1213.81 2118.97,1213.81 2119.56,1213.81 2120.15,1213.81 2120.73,1213.81 2121.32,1213.81 2121.91,1213.81 2122.49,1213.81 2123.08,1213.81 2123.67,1213.81 2124.25,1213.81 2124.84,1213.81 2125.42,1213.81 2126.01,1213.81 2126.6,1213.81 2127.18,1213.81 2127.77,1213.81 2128.36,1213.81 2128.94,1213.81 2129.53,1213.81 2130.12,1213.81 2130.7,1213.81 2131.29,1213.81 2131.88,1213.81 2132.46,1213.81 2133.05,1213.81 2133.63,1213.81 2134.22,1213.81 2134.81,1213.81 2135.39,1213.81 2135.98,1213.81 2136.57,1213.81 2137.15,1213.81 2137.74,1213.81 2138.33,1213.81 2138.91,1213.81 2139.5,1213.81 2140.09,1213.81 2140.67,1213.81 2141.26,1213.81 2141.84,1213.81 2142.43,1213.81 2143.02,1213.81 2143.6,1213.81 2144.19,1213.81 2144.78,1213.81 2145.36,1213.81 2145.95,1213.81 2146.54,1213.81 2147.12,1213.81 2147.71,1213.81 2148.3,1213.81 2148.88,1213.81 2149.47,1213.81 2150.05,1213.81 2150.64,1213.81 2151.23,1213.81 2151.81,1213.81 2152.4,1213.81 2152.99,1213.81 2153.57,1213.81 2154.16,1213.81 2154.75,1213.81 2155.33,1213.81 2155.92,1213.81 2156.5,1213.81 2157.09,1213.81 2157.68,1213.81 2158.26,1213.81 \"/>\n<path clip-path=\"url(#clip162)\" d=\"M986.025 1213.58 L986.612 1213.58 L987.198 1213.58 L987.785 1213.58 L988.371 1213.58 L988.957 1213.58 L989.544 1213.58 L990.13 1213.58 L990.717 1213.58 L991.303 1213.58 L991.889 1213.58 L992.476 1213.58 L993.062 1213.58 L993.649 1213.58 L994.235 1213.58 L994.822 1213.58 L995.408 1213.58 L995.994 1213.58 L996.581 1213.58 L997.167 1213.58 L997.754 1213.58 L998.34 1213.58 L998.926 1213.58 L999.513 1213.58 L1000.1 1213.58 L1000.69 1213.58 L1001.27 1213.58 L1001.86 1213.58 L1002.44 1213.58 L1003.03 1213.58 L1003.62 1213.58 L1004.2 1213.58 L1004.79 1213.58 L1005.38 1213.58 L1005.96 1213.58 L1006.55 1213.58 L1007.14 1213.58 L1007.72 1213.58 L1008.31 1213.58 L1008.9 1213.58 L1009.48 1213.58 L1010.07 1213.58 L1010.65 1213.58 L1011.24 1213.58 L1011.83 1213.58 L1012.41 1213.58 L1013 1213.58 L1013.59 1213.58 L1014.17 1213.58 L1014.76 1213.58 L1015.35 1213.58 L1015.93 1213.58 L1016.52 1213.58 L1017.11 1213.58 L1017.69 1213.58 L1018.28 1213.58 L1018.86 1213.58 L1019.45 1213.58 L1020.04 1213.58 L1020.62 1213.58 L1021.21 1213.58 L1021.8 1213.58 L1022.38 1213.58 L1022.97 1213.58 L1023.56 1213.58 L1024.14 1213.58 L1024.73 1213.58 L1025.32 1213.58 L1025.9 1213.58 L1026.49 1213.58 L1027.07 1213.58 L1027.66 1213.58 L1028.25 1213.58 L1028.83 1213.58 L1029.42 1213.58 L1030.01 1213.58 L1030.59 1213.58 L1031.18 1213.58 L1031.77 1213.58 L1032.35 1213.58 L1032.94 1213.58 L1033.52 1213.58 L1034.11 1213.58 L1034.7 1213.58 L1035.28 1213.58 L1035.87 1213.58 L1036.46 1213.58 L1037.04 1213.58 L1037.63 1213.58 L1038.22 1213.58 L1038.8 1213.58 L1039.39 1213.58 L1039.98 1213.58 L1040.56 1213.58 L1041.15 1213.58 L1041.73 1213.58 L1042.32 1213.58 L1042.91 1213.58 L1043.49 1213.58 L1044.08 1213.58 L1044.67 1213.58 L1045.25 1213.58 L1045.84 1213.58 L1046.43 1213.58 L1047.01 1213.58 L1047.6 1213.58 L1048.19 1213.58 L1048.77 1213.58 L1049.36 1213.58 L1049.94 1213.58 L1050.53 1213.58 L1051.12 1213.58 L1051.7 1213.58 L1052.29 1213.58 L1052.88 1213.58 L1053.46 1213.58 L1054.05 1213.58 L1054.64 1213.58 L1055.22 1213.58 L1055.81 1213.58 L1056.39 1213.58 L1056.98 1213.58 L1057.57 1213.58 L1058.15 1213.58 L1058.74 1213.58 L1059.33 1213.58 L1059.91 1213.58 L1060.5 1213.58 L1061.09 1213.58 L1061.67 1213.58 L1062.26 1213.58 L1062.85 1213.58 L1063.43 1213.58 L1064.02 1213.58 L1064.6 1213.58 L1065.19 1213.58 L1065.78 1213.58 L1066.36 1213.58 L1066.95 1213.58 L1067.54 1213.58 L1068.12 1213.58 L1068.71 1213.58 L1069.3 1213.58 L1069.88 1213.58 L1070.47 1213.58 L1071.06 1213.58 L1071.64 1213.58 L1072.23 1213.58 L1072.81 1213.58 L1073.4 1213.58 L1073.99 1213.58 L1074.57 1213.58 L1075.16 1213.58 L1075.75 1213.58 L1076.33 1213.58 L1076.92 1213.58 L1077.51 1213.58 L1078.09 1213.58 L1078.68 1213.58 L1079.26 1213.58 L1079.85 1213.58 L1080.44 1213.58 L1081.02 1213.58 L1081.61 1213.58 L1082.2 1213.58 L1082.78 1213.58 L1083.37 1213.58 L1083.96 1213.58 L1084.54 1213.58 L1085.13 1213.58 L1085.72 1213.58 L1086.3 1213.58 L1086.89 1213.58 L1087.47 1213.58 L1088.06 1213.58 L1088.65 1213.58 L1089.23 1213.58 L1089.82 1213.58 L1090.41 1213.58 L1090.99 1213.58 L1091.58 1213.58 L1092.17 1213.58 L1092.75 1213.58 L1093.34 1213.58 L1093.93 1213.58 L1094.51 1213.58 L1095.1 1213.58 L1095.68 1213.58 L1096.27 1213.58 L1096.86 1213.58 L1097.44 1213.58 L1098.03 1213.58 L1098.62 1213.58 L1099.2 1213.58 L1099.79 1213.58 L1100.38 1213.58 L1100.96 1213.58 L1101.55 1213.58 L1102.14 1213.58 L1102.72 1213.58 L1103.31 1213.58 L1103.89 1213.58 L1104.48 1213.58 L1105.07 1213.58 L1105.65 1213.58 L1106.24 1213.58 L1106.83 1213.58 L1107.41 1213.58 L1108 1213.58 L1108.59 1213.58 L1109.17 1213.58 L1109.76 1213.58 L1110.34 1213.58 L1110.93 1213.58 L1111.52 1213.58 L1112.1 1213.58 L1112.69 1213.58 L1113.28 1213.58 L1113.86 1213.58 L1114.45 1213.58 L1115.04 1213.58 L1115.62 1213.58 L1116.21 1213.58 L1116.8 1213.58 L1117.38 1213.58 L1117.97 1213.58 L1118.55 1213.58 L1119.14 1213.58 L1119.73 1213.58 L1120.31 1213.58 L1120.9 1213.58 L1121.49 1213.58 L1122.07 1213.58 L1122.66 1213.58 L1123.25 1213.58 L1123.83 1213.58 L1124.42 1213.58 L1125.01 1213.58 L1125.59 1213.58 L1126.18 1213.58 L1126.76 1213.58 L1127.35 1213.58 L1127.94 1213.58 L1128.52 1213.58 L1129.11 1213.58 L1129.7 1213.58 L1130.28 1213.58 L1130.87 1213.58 L1131.46 1213.58 L1132.04 1213.58 L1132.63 1213.58 L1133.21 1213.58 L1133.8 1213.58 L1134.39 1213.58 L1134.97 1213.58 L1135.56 1213.58 L1136.15 1213.58 L1136.73 1213.58 L1137.32 1213.58 L1137.91 1213.58 L1138.49 1213.58 L1139.08 1213.58 L1139.67 1213.58 L1140.25 1213.58 L1140.84 1213.58 L1141.42 1213.58 L1142.01 1213.58 L1142.6 1213.58 L1143.18 1213.58 L1143.77 1213.58 L1144.36 1213.58 L1144.94 1213.58 L1145.53 1213.58 L1146.12 1213.58 L1146.7 1213.58 L1147.29 1213.58 L1147.88 1213.58 L1148.46 1213.58 L1149.05 1213.58 L1149.63 1213.58 L1150.22 1213.58 L1150.81 1213.58 L1151.39 1213.58 L1151.98 1213.58 L1152.57 1213.58 L1153.15 1213.58 L1153.74 1213.58 L1154.33 1213.58 L1154.91 1213.58 L1155.5 1213.58 L1156.09 1213.58 L1156.67 1213.58 L1157.26 1213.58 L1157.84 1213.58 L1158.43 1213.58 L1159.02 1213.58 L1159.6 1213.58 L1160.19 1213.58 L1160.78 1213.58 L1161.36 1213.58 L1161.95 1213.58 L1162.54 1213.58 L1163.12 1213.58 L1163.71 1213.58 L1164.29 1213.58 L1164.88 1213.58 L1165.47 1213.58 L1166.05 1213.58 L1166.64 1213.58 L1167.23 1213.58 L1167.81 1213.58 L1168.4 1213.58 L1168.99 1213.58 L1169.57 1213.58 L1170.16 1213.58 L1170.75 1213.58 L1171.33 1213.58 L1171.92 1213.58 L1172.5 1213.58 L1173.09 1213.58 L1173.68 1213.58 L1174.26 1213.58 L1174.85 1213.58 L1175.44 1213.58 L1176.02 1213.58 L1176.61 1213.58 L1177.2 1213.58 L1177.78 1213.58 L1178.37 1213.58 L1178.96 1213.58 L1179.54 1213.58 L1180.13 1213.58 L1180.71 1213.58 L1181.3 1213.58 L1181.89 1213.58 L1182.47 1213.58 L1183.06 1213.58 L1183.65 1213.58 L1184.23 1213.58 L1184.82 1213.58 L1185.41 1213.58 L1185.99 1213.58 L1186.58 1213.58 L1187.16 1213.58 L1187.75 1213.58 L1188.34 1213.58 L1188.92 1213.58 L1189.51 1213.58 L1190.1 1213.58 L1190.68 1213.58 L1191.27 1213.58 L1191.86 1213.58 L1192.44 1213.58 L1193.03 1213.58 L1193.62 1213.58 L1194.2 1213.58 L1194.79 1213.58 L1195.37 1213.58 L1195.96 1213.58 L1196.55 1213.58 L1197.13 1213.58 L1197.72 1213.58 L1198.31 1213.58 L1198.89 1213.58 L1199.48 1213.58 L1200.07 1213.58 L1200.65 1213.58 L1201.24 1213.58 L1201.83 1213.58 L1202.41 1213.58 L1203 1213.58 L1203.58 1213.58 L1204.17 1213.58 L1204.76 1213.58 L1205.34 1213.58 L1205.93 1213.58 L1206.52 1213.58 L1207.1 1213.58 L1207.69 1213.58 L1208.28 1213.58 L1208.86 1213.58 L1209.45 1213.58 L1210.03 1213.58 L1210.62 1213.58 L1211.21 1213.58 L1211.79 1213.58 L1212.38 1213.58 L1212.97 1213.58 L1213.55 1213.58 L1214.14 1213.58 L1214.73 1213.58 L1215.31 1213.58 L1215.9 1213.58 L1216.49 1213.58 L1217.07 1213.58 L1217.66 1213.58 L1218.24 1213.58 L1218.83 1213.58 L1219.42 1213.58 L1220 1213.58 L1220.59 1213.58 L1221.18 1213.58 L1221.76 1213.58 L1222.35 1213.58 L1222.94 1213.58 L1223.52 1213.58 L1224.11 1213.58 L1224.7 1213.58 L1225.28 1213.58 L1225.87 1213.58 L1226.45 1213.58 L1227.04 1213.58 L1227.63 1213.58 L1228.21 1213.58 L1228.8 1213.58 L1229.39 1213.58 L1229.97 1213.58 L1230.56 1213.58 L1231.15 1213.58 L1231.73 1213.58 L1232.32 1213.58 L1232.91 1213.58 L1233.49 1213.58 L1234.08 1213.58 L1234.66 1213.58 L1235.25 1213.58 L1235.84 1213.58 L1236.42 1213.58 L1237.01 1213.58 L1237.6 1213.58 L1238.18 1213.58 L1238.77 1213.58 L1239.36 1213.58 L1239.94 1213.58 L1240.53 1213.58 L1241.11 1213.58 L1241.7 1213.58 L1242.29 1213.58 L1242.87 1213.58 L1243.46 1213.58 L1244.05 1213.58 L1244.63 1213.58 L1245.22 1213.58 L1245.81 1213.58 L1246.39 1213.58 L1246.98 1213.58 L1247.57 1213.58 L1248.15 1213.58 L1248.74 1213.58 L1249.32 1213.58 L1249.91 1213.58 L1250.5 1213.58 L1251.08 1213.58 L1251.67 1213.58 L1252.26 1213.58 L1252.84 1213.58 L1253.43 1213.58 L1254.02 1213.58 L1254.6 1213.58 L1255.19 1213.58 L1255.78 1213.58 L1256.36 1213.58 L1256.95 1213.58 L1257.53 1213.58 L1258.12 1213.58 L1258.71 1213.58 L1259.29 1213.58 L1259.88 1213.58 L1260.47 1213.58 L1261.05 1213.58 L1261.64 1213.58 L1262.23 1213.58 L1262.81 1213.58 L1263.4 1213.58 L1263.98 1213.58 L1264.57 1213.58 L1265.16 1213.58 L1265.74 1213.58 L1266.33 1213.58 L1266.92 1213.58 L1267.5 1213.58 L1268.09 1213.58 L1268.68 1213.58 L1269.26 1213.58 L1269.85 1213.58 L1270.44 1213.58 L1271.02 1213.58 L1271.61 1213.58 L1272.19 1213.58 L1272.78 1213.58 L1273.37 1213.58 L1273.95 1213.58 L1274.54 1213.58 L1275.13 1213.58 L1275.71 1213.58 L1276.3 1213.58 L1276.89 1213.58 L1277.47 1213.58 L1278.06 1213.58 L1278.65 1213.58 L1279.23 1213.58 L1279.82 1213.58 L1280.4 1213.58 L1280.99 1213.58 L1281.58 1213.58 L1282.16 1213.58 L1282.75 1213.58 L1283.34 1213.58 L1283.92 1213.58 L1284.51 1213.58 L1285.1 1213.58 L1285.68 1213.58 L1286.27 1213.58 L1286.86 1213.58 L1287.44 1213.58 L1288.03 1213.58 L1288.61 1213.58 L1289.2 1213.58 L1289.79 1213.58 L1290.37 1213.58 L1290.96 1213.58 L1291.55 1213.58 L1292.13 1213.58 L1292.72 1213.58 L1293.31 1213.58 L1293.89 1213.58 L1294.48 1213.58 L1295.06 1213.58 L1295.65 1213.58 L1296.24 1213.58 L1296.82 1213.58 L1297.41 1213.58 L1298 1213.58 L1298.58 1213.58 L1299.17 1213.58 L1299.76 1213.58 L1300.34 1213.58 L1300.93 1213.58 L1301.52 1213.58 L1302.1 1213.58 L1302.69 1213.58 L1303.27 1213.58 L1303.86 1213.58 L1304.45 1213.58 L1305.03 1213.58 L1305.62 1213.58 L1306.21 1213.58 L1306.79 1213.58 L1307.38 1213.58 L1307.97 1213.58 L1308.55 1213.58 L1309.14 1213.58 L1309.73 1213.58 L1310.31 1213.58 L1310.9 1213.58 L1311.48 1213.58 L1312.07 1213.58 L1312.66 1213.58 L1313.24 1213.58 L1313.83 1213.58 L1314.42 1213.58 L1315 1213.58 L1315.59 1213.58 L1316.18 1213.58 L1316.76 1213.58 L1317.35 1213.58 L1317.93 1213.58 L1318.52 1213.58 L1319.11 1213.58 L1319.69 1213.58 L1320.28 1213.58 L1320.87 1213.58 L1321.45 1213.58 L1322.04 1213.58 L1322.63 1213.58 L1323.21 1213.58 L1323.8 1213.58 L1324.39 1213.58 L1324.97 1213.58 L1325.56 1213.58 L1326.14 1213.58 L1326.73 1213.58 L1327.32 1213.58 L1327.9 1213.58 L1328.49 1213.58 L1329.08 1213.58 L1329.66 1213.58 L1330.25 1213.58 L1330.84 1213.58 L1331.42 1213.58 L1332.01 1213.58 L1332.6 1213.58 L1333.18 1213.58 L1333.77 1213.58 L1334.35 1213.58 L1334.94 1213.58 L1335.53 1213.58 L1336.11 1213.58 L1336.7 1213.58 L1337.29 1213.58 L1337.87 1213.58 L1338.46 1213.58 L1339.05 1213.58 L1339.63 1213.58 L1340.22 1213.58 L1340.8 1213.58 L1341.39 1213.58 L1341.98 1213.58 L1342.56 1213.58 L1343.15 1213.58 L1343.74 1213.58 L1344.32 1213.58 L1344.91 1213.58 L1345.5 1213.58 L1346.08 1213.58 L1346.67 1213.58 L1347.26 1213.58 L1347.84 1213.58 L1348.43 1213.58 L1349.01 1213.58 L1349.6 1213.58 L1350.19 1213.58 L1350.77 1213.58 L1351.36 1213.58 L1351.95 1213.58 L1352.53 1213.58 L1353.12 1213.58 L1353.71 1213.58 L1354.29 1213.58 L1354.88 1213.58 L1355.47 1213.58 L1356.05 1213.58 L1356.64 1213.58 L1357.22 1213.58 L1357.81 1213.58 L1358.4 1213.58 L1358.98 1213.58 L1359.57 1213.58 L1360.16 1213.58 L1360.74 1213.58 L1361.33 1213.58 L1361.92 1213.58 L1362.5 1213.58 L1363.09 1213.58 L1363.68 1213.58 L1364.26 1213.58 L1364.85 1213.58 L1365.43 1213.58 L1366.02 1213.58 L1366.61 1213.58 L1367.19 1213.58 L1367.78 1213.58 L1368.37 1213.58 L1368.95 1213.58 L1369.54 1213.58 L1370.13 1213.58 L1370.71 1213.58 L1371.3 1213.58 L1371.88 1213.58 L1372.47 1213.58 L1373.06 1213.58 L1373.64 1213.58 L1374.23 1213.58 L1374.82 1213.58 L1375.4 1213.58 L1375.99 1213.58 L1376.58 1213.58 L1377.16 1213.58 L1377.75 1213.58 L1378.34 1213.58 L1378.92 1213.58 L1379.51 1213.58 L1380.09 1213.58 L1380.68 1213.58 L1381.27 1213.58 L1381.85 1213.58 L1382.44 1213.58 L1383.03 1213.58 L1383.61 1213.58 L1384.2 1213.58 L1384.79 1213.58 L1385.37 1213.58 L1385.96 1213.58 L1386.55 1213.58 L1387.13 1213.58 L1387.72 1213.58 L1388.3 1213.58 L1388.89 1213.58 L1389.48 1213.58 L1390.06 1213.58 L1390.65 1213.58 L1391.24 1213.58 L1391.82 1213.58 L1392.41 1213.58 L1393 1213.58 L1393.58 1213.58 L1394.17 1213.58 L1394.75 1213.58 L1395.34 1213.58 L1395.93 1213.58 L1396.51 1213.58 L1397.1 1213.58 L1397.69 1213.58 L1398.27 1213.58 L1398.86 1213.58 L1399.45 1213.58 L1400.03 1213.58 L1400.62 1213.58 L1401.21 1213.58 L1401.79 1213.58 L1402.38 1213.58 L1402.96 1213.58 L1403.55 1213.58 L1404.14 1213.58 L1404.72 1213.58 L1405.31 1213.58 L1405.9 1213.58 L1406.48 1213.58 L1407.07 1213.58 L1407.66 1213.58 L1408.24 1213.58 L1408.83 1213.58 L1409.42 1213.58 L1410 1213.58 L1410.59 1213.58 L1411.17 1213.58 L1411.76 1213.58 L1412.35 1213.58 L1412.93 1213.58 L1413.52 1213.58 L1414.11 1213.58 L1414.69 1213.58 L1415.28 1213.58 L1415.87 1213.58 L1416.45 1213.58 L1417.04 1213.58 L1417.63 1213.58 L1418.21 1213.58 L1418.8 1213.58 L1419.38 1213.58 L1419.97 1213.58 L1420.56 1213.58 L1421.14 1213.58 L1421.73 1213.58 L1422.32 1213.58 L1422.9 1213.58 L1423.49 1213.58 L1424.08 1213.58 L1424.66 1213.58 L1425.25 1213.58 L1425.83 1213.58 L1426.42 1213.58 L1427.01 1213.58 L1427.59 1213.58 L1428.18 1213.58 L1428.77 1213.58 L1429.35 1213.58 L1429.94 1213.58 L1430.53 1213.58 L1431.11 1213.58 L1431.7 1213.58 L1432.29 1213.58 L1432.87 1213.58 L1433.46 1213.58 L1434.04 1213.58 L1434.63 1213.58 L1435.22 1213.58 L1435.8 1213.58 L1436.39 1213.58 L1436.98 1213.58 L1437.56 1213.58 L1438.15 1213.58 L1438.74 1213.58 L1439.32 1213.58 L1439.91 1213.58 L1440.5 1213.58 L1441.08 1213.58 L1441.67 1213.58 L1442.25 1213.58 L1442.84 1213.58 L1443.43 1213.58 L1444.01 1213.58 L1444.6 1213.58 L1445.19 1213.58 L1445.77 1213.58 L1446.36 1213.58 L1446.95 1213.58 L1447.53 1213.58 L1448.12 1213.58 L1448.7 1213.58 L1449.29 1213.58 L1449.88 1213.58 L1450.46 1213.58 L1451.05 1213.58 L1451.64 1213.58 L1452.22 1213.58 L1452.81 1213.58 L1453.4 1213.58 L1453.98 1213.58 L1454.57 1213.58 L1455.16 1213.58 L1455.74 1213.58 L1456.33 1213.58 L1456.91 1213.58 L1457.5 1213.58 L1458.09 1213.58 L1458.67 1213.58 L1459.26 1213.58 L1459.85 1213.58 L1460.43 1213.58 L1461.02 1213.58 L1461.61 1213.58 L1462.19 1213.58 L1462.78 1213.58 L1463.37 1213.58 L1463.95 1213.58 L1464.54 1213.58 L1465.12 1213.58 L1465.71 1213.58 L1466.3 1213.58 L1466.88 1213.58 L1467.47 1213.58 L1468.06 1213.58 L1468.64 1213.58 L1469.23 1213.58 L1469.82 1213.58 L1470.4 1213.58 L1470.99 1213.58 L1471.57 1213.58 L1472.16 1213.58 L1472.75 1213.58 L1473.33 1213.58 L1473.92 1213.58 L1474.51 1213.58 L1475.09 1213.58 L1475.68 1213.58 L1476.27 1213.58 L1476.85 1213.58 L1477.44 1213.58 L1478.03 1213.58 L1478.61 1213.58 L1479.2 1213.58 L1479.78 1213.58 L1480.37 1213.58 L1480.96 1213.58 L1481.54 1213.58 L1482.13 1213.58 L1482.72 1213.58 L1483.3 1213.58 L1483.89 1213.58 L1484.48 1213.58 L1485.06 1213.58 L1485.65 1213.58 L1486.24 1213.58 L1486.82 1213.58 L1487.41 1213.58 L1487.99 1213.58 L1488.58 1213.58 L1489.17 1213.58 L1489.75 1213.58 L1490.34 1213.58 L1490.93 1213.58 L1491.51 1213.58 L1492.1 1213.58 L1492.69 1213.58 L1493.27 1213.58 L1493.86 1213.58 L1494.45 1213.58 L1495.03 1213.58 L1495.62 1213.58 L1496.2 1213.58 L1496.79 1213.58 L1497.38 1213.58 L1497.96 1213.58 L1498.55 1213.58 L1499.14 1213.58 L1499.72 1213.58 L1500.31 1213.58 L1500.9 1213.58 L1501.48 1213.58 L1502.07 1213.58 L1502.65 1213.58 L1503.24 1213.58 L1503.83 1213.58 L1504.41 1213.58 L1505 1213.58 L1505.59 1213.58 L1506.17 1213.58 L1506.76 1213.58 L1507.35 1213.58 L1507.93 1213.58 L1508.52 1213.58 L1509.11 1213.58 L1509.69 1213.58 L1510.28 1213.58 L1510.86 1213.58 L1511.45 1213.58 L1512.04 1213.58 L1512.62 1213.58 L1513.21 1213.58 L1513.8 1213.58 L1514.38 1213.58 L1514.97 1213.58 L1515.56 1213.58 L1516.14 1213.58 L1516.73 1213.58 L1517.32 1213.58 L1517.9 1213.58 L1518.49 1213.58 L1519.07 1213.58 L1519.66 1213.58 L1520.25 1213.58 L1520.83 1213.58 L1521.42 1213.58 L1522.01 1213.58 L1522.59 1213.58 L1523.18 1213.58 L1523.77 1213.58 L1524.35 1213.58 L1524.94 1213.58 L1525.52 1213.58 L1526.11 1213.58 L1526.7 1213.58 L1527.28 1213.58 L1527.87 1213.58 L1528.46 1213.58 L1529.04 1213.58 L1529.63 1213.58 L1530.22 1213.58 L1530.8 1213.58 L1531.39 1213.58 L1531.98 1213.58 L1532.56 1213.58 L1533.15 1213.58 L1533.73 1213.58 L1534.32 1213.58 L1534.91 1213.58 L1535.49 1213.58 L1536.08 1213.58 L1536.67 1213.58 L1537.25 1213.58 L1537.84 1213.58 L1538.43 1213.58 L1539.01 1213.58 L1539.6 1213.58 L1540.19 1213.58 L1540.77 1213.58 L1541.36 1213.58 L1541.94 1213.58 L1542.53 1213.58 L1543.12 1213.58 L1543.7 1213.58 L1544.29 1213.58 L1544.88 1213.58 L1545.46 1213.58 L1546.05 1213.58 L1546.64 1213.58 L1547.22 1213.58 L1547.81 1213.58 L1548.4 1213.58 L1548.98 1213.58 L1549.57 1213.58 L1550.15 1213.58 L1550.74 1213.58 L1551.33 1213.58 L1551.91 1213.58 L1552.5 1213.58 L1553.09 1213.58 L1553.67 1213.58 L1554.26 1213.58 L1554.85 1213.58 L1555.43 1213.58 L1556.02 1213.58 L1556.6 1213.58 L1557.19 1213.58 L1557.78 1213.58 L1558.36 1213.58 L1558.95 1213.58 L1559.54 1213.58 L1560.12 1213.58 L1560.71 1213.58 L1561.3 1213.58 L1561.88 1213.58 L1562.47 1213.58 L1563.06 1213.58 L1563.64 1213.58 L1564.23 1213.58 L1564.81 1213.58 L1565.4 1213.58 L1565.99 1213.58 L1566.57 1213.58 L1567.16 1213.58 L1567.75 1213.58 L1568.33 1213.58 L1568.92 1213.58 L1569.51 1213.58 L1570.09 1213.58 L1570.68 1213.58 L1571.27 1213.58 L1571.85 1213.58 L1572.44 1213.58 L1573.02 1213.58 L1573.61 1213.58 L1574.2 1213.58 L1574.78 1213.58 L1575.37 1213.58 L1575.96 1213.58 L1576.54 1213.58 L1577.13 1213.58 L1577.72 1213.58 L1578.3 1213.58 L1578.89 1213.58 L1579.47 1213.58 L1580.06 1213.58 L1580.65 1213.58 L1581.23 1213.58 L1581.82 1213.58 L1582.41 1213.58 L1582.99 1213.58 L1583.58 1213.58 L1584.17 1213.58 L1584.75 1213.58 L1585.34 1213.58 L1585.93 1213.58 L1586.51 1213.58 L1587.1 1213.58 L1587.68 1213.58 L1588.27 1213.58 L1588.86 1213.58 L1589.44 1213.58 L1590.03 1213.58 L1590.62 1213.58 L1591.2 1213.58 L1591.79 1213.58 L1592.38 1213.58 L1592.96 1213.58 L1593.55 1213.58 L1594.14 1213.58 L1594.72 1213.58 L1595.31 1213.58 L1595.89 1213.58 L1596.48 1213.58 L1597.07 1213.58 L1597.65 1213.58 L1598.24 1213.58 L1598.83 1213.58 L1599.41 1213.58 L1600 1213.58 L1600.59 1213.58 L1601.17 1213.58 L1601.76 1213.58 L1602.34 1213.58 L1602.93 1213.58 L1603.52 1213.58 L1604.1 1213.58 L1604.69 1213.58 L1605.28 1213.58 L1605.86 1213.58 L1606.45 1213.58 L1607.04 1213.58 L1607.62 1213.58 L1608.21 1213.58 L1608.8 1213.58 L1609.38 1213.58 L1609.97 1213.58 L1610.55 1213.58 L1611.14 1213.58 L1611.73 1213.58 L1612.31 1213.58 L1612.9 1213.58 L1613.49 1213.58 L1614.07 1213.58 L1614.66 1213.58 L1615.25 1213.58 L1615.83 1213.58 L1616.42 1213.58 L1617.01 1213.58 L1617.59 1213.58 L1618.18 1213.58 L1618.76 1213.58 L1619.35 1213.58 L1619.94 1213.58 L1620.52 1213.58 L1621.11 1213.58 L1621.7 1213.58 L1622.28 1213.58 L1622.87 1213.58 L1623.46 1213.58 L1624.04 1213.58 L1624.63 1213.58 L1625.22 1213.58 L1625.8 1213.58 L1626.39 1213.58 L1626.97 1213.58 L1627.56 1213.58 L1628.15 1213.58 L1628.73 1213.58 L1629.32 1213.58 L1629.91 1213.58 L1630.49 1213.58 L1631.08 1213.58 L1631.67 1213.58 L1632.25 1213.58 L1632.84 1213.58 L1633.42 1213.58 L1634.01 1213.58 L1634.6 1213.58 L1635.18 1213.58 L1635.77 1213.58 L1636.36 1213.58 L1636.94 1213.58 L1637.53 1213.58 L1638.12 1213.58 L1638.7 1213.58 L1639.29 1213.58 L1639.88 1213.58 L1640.46 1213.58 L1641.05 1213.58 L1641.63 1213.58 L1642.22 1213.58 L1642.81 1213.58 L1643.39 1213.58 L1643.98 1213.58 L1644.57 1213.58 L1645.15 1213.58 L1645.74 1213.58 L1646.33 1213.58 L1646.91 1213.58 L1647.5 1213.58 L1648.09 1213.58 L1648.67 1213.58 L1649.26 1213.58 L1649.84 1213.58 L1650.43 1213.58 L1651.02 1213.58 L1651.6 1213.58 L1652.19 1213.58 L1652.78 1213.58 L1653.36 1213.58 L1653.95 1213.58 L1654.54 1213.58 L1655.12 1213.58 L1655.71 1213.58 L1656.29 1213.58 L1656.88 1213.58 L1657.47 1213.58 L1658.05 1213.58 L1658.64 1213.58 L1659.23 1213.58 L1659.81 1213.58 L1660.4 1213.58 L1660.99 1213.58 L1661.57 1213.58 L1662.16 1213.58 L1662.75 1213.58 L1663.33 1213.58 L1663.92 1213.58 L1664.5 1213.58 L1665.09 1213.58 L1665.68 1213.58 L1666.26 1213.58 L1666.85 1213.58 L1667.44 1213.58 L1668.02 1213.58 L1668.61 1213.58 L1669.2 1213.58 L1669.78 1213.58 L1670.37 1213.58 L1670.96 1213.58 L1671.54 1213.58 L1672.13 1213.58 L1672.71 1213.58 L1673.3 1213.58 L1673.89 1213.58 L1674.47 1213.58 L1675.06 1213.58 L1675.65 1213.58 L1676.23 1213.58 L1676.82 1213.58 L1677.41 1213.58 L1677.99 1213.58 L1678.58 1213.58 L1679.17 1213.58 L1679.75 1213.58 L1680.34 1213.58 L1680.92 1213.58 L1681.51 1213.58 L1682.1 1213.58 L1682.68 1213.58 L1683.27 1213.58 L1683.86 1213.58 L1684.44 1213.58 L1685.03 1213.58 L1685.62 1213.58 L1686.2 1213.58 L1686.79 1213.58 L1687.37 1213.58 L1687.96 1213.58 L1688.55 1213.58 L1689.13 1213.58 L1689.72 1213.58 L1690.31 1213.58 L1690.89 1213.58 L1691.48 1213.58 L1692.07 1213.58 L1692.65 1213.58 L1693.24 1213.58 L1693.83 1213.58 L1694.41 1213.58 L1695 1213.58 L1695.58 1213.58 L1696.17 1213.58 L1696.76 1213.58 L1697.34 1213.58 L1697.93 1213.58 L1698.52 1213.58 L1699.1 1213.58 L1699.69 1213.58 L1700.28 1213.58 L1700.86 1213.58 L1701.45 1213.58 L1702.04 1213.58 L1702.62 1213.58 L1703.21 1213.58 L1703.79 1213.58 L1704.38 1213.58 L1704.97 1213.58 L1705.55 1213.58 L1706.14 1213.58 L1706.73 1213.58 L1707.31 1213.58 L1707.9 1213.58 L1708.49 1213.58 L1709.07 1213.58 L1709.66 1213.58 L1710.24 1213.58 L1710.83 1213.58 L1711.42 1213.58 L1712 1213.58 L1712.59 1213.58 L1713.18 1213.58 L1713.76 1213.58 L1714.35 1213.58 L1714.94 1213.58 L1715.52 1213.58 L1716.11 1213.58 L1716.7 1213.58 L1717.28 1213.58 L1717.87 1213.58 L1718.45 1213.58 L1719.04 1213.58 L1719.63 1213.58 L1720.21 1213.58 L1720.8 1213.58 L1721.39 1213.58 L1721.97 1213.58 L1722.56 1213.58 L1723.15 1213.58 L1723.73 1213.58 L1724.32 1213.58 L1724.91 1213.58 L1725.49 1213.58 L1726.08 1213.58 L1726.66 1213.58 L1727.25 1213.58 L1727.84 1213.58 L1728.42 1213.58 L1729.01 1213.58 L1729.6 1213.58 L1730.18 1213.58 L1730.77 1213.58 L1731.36 1213.58 L1731.94 1213.58 L1732.53 1213.58 L1733.11 1213.58 L1733.7 1213.58 L1734.29 1213.58 L1734.87 1213.58 L1735.46 1213.58 L1736.05 1213.58 L1736.63 1213.58 L1737.22 1213.58 L1737.81 1213.58 L1738.39 1213.58 L1738.98 1213.58 L1739.57 1213.58 L1740.15 1213.58 L1740.74 1213.58 L1741.32 1213.58 L1741.91 1213.58 L1742.5 1213.58 L1743.08 1213.58 L1743.67 1213.58 L1744.26 1213.58 L1744.84 1213.58 L1745.43 1213.58 L1746.02 1213.58 L1746.6 1213.58 L1747.19 1213.58 L1747.78 1213.58 L1748.36 1213.58 L1748.95 1213.58 L1749.53 1213.58 L1750.12 1213.58 L1750.71 1213.58 L1751.29 1213.58 L1751.88 1213.58 L1752.47 1213.58 L1753.05 1213.58 L1753.64 1213.58 L1754.23 1213.58 L1754.81 1213.58 L1755.4 1213.58 L1755.99 1213.58 L1756.57 1213.58 L1757.16 1213.58 L1757.74 1213.58 L1758.33 1213.58 L1758.92 1213.58 L1759.5 1213.58 L1760.09 1213.58 L1760.68 1213.58 L1761.26 1213.58 L1761.85 1213.58 L1762.44 1213.58 L1763.02 1213.58 L1763.61 1213.58 L1764.19 1213.58 L1764.78 1213.58 L1765.37 1213.58 L1765.95 1213.58 L1766.54 1213.58 L1767.13 1213.58 L1767.71 1213.58 L1768.3 1213.58 L1768.89 1213.58 L1769.47 1213.58 L1770.06 1213.58 L1770.65 1213.58 L1771.23 1213.58 L1771.82 1213.58 L1772.4 1213.58 L1772.99 1213.58 L1773.58 1213.58 L1774.16 1213.58 L1774.75 1213.58 L1775.34 1213.58 L1775.92 1213.58 L1776.51 1213.58 L1777.1 1213.58 L1777.68 1213.58 L1778.27 1213.58 L1778.86 1213.58 L1779.44 1213.58 L1780.03 1213.58 L1780.61 1213.58 L1781.2 1213.58 L1781.79 1213.58 L1782.37 1213.58 L1782.96 1213.58 L1783.55 1213.58 L1784.13 1213.58 L1784.72 1213.58 L1785.31 1213.58 L1785.89 1213.58 L1786.48 1213.58 L1787.06 1213.58 L1787.65 1213.58 L1788.24 1213.58 L1788.82 1213.58 L1789.41 1213.58 L1790 1213.58 L1790.58 1213.58 L1791.17 1213.58 L1791.76 1213.58 L1792.34 1213.58 L1792.93 1213.58 L1793.52 1213.58 L1794.1 1213.58 L1794.69 1213.58 L1795.27 1213.58 L1795.86 1213.58 L1796.45 1213.58 L1797.03 1213.58 L1797.62 1213.58 L1798.21 1213.58 L1798.79 1213.58 L1799.38 1213.58 L1799.97 1213.58 L1800.55 1213.58 L1801.14 1213.58 L1801.73 1213.58 L1802.31 1213.58 L1802.9 1213.58 L1803.48 1213.58 L1804.07 1213.58 L1804.66 1213.58 L1805.24 1213.58 L1805.83 1213.58 L1806.42 1213.58 L1807 1213.58 L1807.59 1213.58 L1808.18 1213.58 L1808.76 1213.58 L1809.35 1213.58 L1809.94 1213.58 L1810.52 1213.58 L1811.11 1213.58 L1811.69 1213.58 L1812.28 1213.58 L1812.87 1213.58 L1813.45 1213.58 L1814.04 1213.58 L1814.63 1213.58 L1815.21 1213.58 L1815.8 1213.58 L1816.39 1213.58 L1816.97 1213.58 L1817.56 1213.58 L1818.14 1213.58 L1818.73 1213.58 L1819.32 1213.58 L1819.9 1213.58 L1820.49 1213.58 L1821.08 1213.58 L1821.66 1213.58 L1822.25 1213.58 L1822.84 1213.58 L1823.42 1213.58 L1824.01 1213.58 L1824.6 1213.58 L1825.18 1213.58 L1825.77 1213.58 L1826.35 1213.58 L1826.94 1213.58 L1827.53 1213.58 L1828.11 1213.58 L1828.7 1213.58 L1829.29 1213.58 L1829.87 1213.58 L1830.46 1213.58 L1831.05 1213.58 L1831.63 1213.58 L1832.22 1213.58 L1832.81 1213.58 L1833.39 1213.58 L1833.98 1213.58 L1834.56 1213.58 L1835.15 1213.58 L1835.74 1213.58 L1836.32 1213.58 L1836.91 1213.58 L1837.5 1213.58 L1838.08 1213.58 L1838.67 1213.58 L1839.26 1213.58 L1839.84 1213.58 L1840.43 1213.58 L1841.01 1213.58 L1841.6 1213.58 L1842.19 1213.58 L1842.77 1213.58 L1843.36 1213.58 L1843.95 1213.58 L1844.53 1213.58 L1845.12 1213.58 L1845.71 1213.58 L1846.29 1213.58 L1846.88 1213.58 L1847.47 1213.58 L1848.05 1213.58 L1848.64 1213.58 L1849.22 1213.58 L1849.81 1213.58 L1850.4 1213.58 L1850.98 1213.58 L1851.57 1213.58 L1852.16 1213.58 L1852.74 1213.58 L1853.33 1213.58 L1853.92 1213.58 L1854.5 1213.58 L1855.09 1213.58 L1855.68 1213.58 L1856.26 1213.58 L1856.85 1213.58 L1857.43 1213.58 L1858.02 1213.58 L1858.61 1213.58 L1859.19 1213.58 L1859.78 1213.58 L1860.37 1213.58 L1860.95 1213.58 L1861.54 1213.58 L1862.13 1213.58 L1862.71 1213.58 L1863.3 1213.58 L1863.88 1213.58 L1864.47 1213.58 L1865.06 1213.58 L1865.64 1213.58 L1866.23 1213.58 L1866.82 1213.58 L1867.4 1213.58 L1867.99 1213.58 L1868.58 1213.58 L1869.16 1213.58 L1869.75 1213.58 L1870.34 1213.58 L1870.92 1213.58 L1871.51 1213.58 L1872.09 1213.58 L1872.68 1213.58 L1873.27 1213.58 L1873.85 1213.58 L1874.44 1213.58 L1875.03 1213.58 L1875.61 1213.58 L1876.2 1213.58 L1876.79 1213.58 L1877.37 1213.58 L1877.96 1213.58 L1878.55 1213.58 L1879.13 1213.58 L1879.72 1213.58 L1880.3 1213.58 L1880.89 1213.58 L1881.48 1213.58 L1882.06 1213.58 L1882.65 1213.58 L1883.24 1213.58 L1883.82 1213.58 L1884.41 1213.58 L1885 1213.58 L1885.58 1213.58 L1886.17 1213.58 L1886.76 1213.58 L1887.34 1213.58 L1887.93 1213.58 L1888.51 1213.58 L1889.1 1213.58 L1889.69 1213.58 L1890.27 1213.58 L1890.86 1213.58 L1891.45 1213.58 L1892.03 1213.58 L1892.62 1213.58 L1893.21 1213.58 L1893.79 1213.58 L1894.38 1213.58 L1894.96 1213.58 L1895.55 1213.58 L1896.14 1213.58 L1896.72 1213.58 L1897.31 1213.58 L1897.9 1213.58 L1898.48 1213.58 L1899.07 1213.58 L1899.66 1213.58 L1900.24 1213.58 L1900.83 1213.58 L1901.42 1213.58 L1902 1213.58 L1902.59 1213.58 L1903.17 1213.58 L1903.76 1213.58 L1904.35 1213.58 L1904.93 1213.58 L1905.52 1213.58 L1906.11 1213.58 L1906.69 1213.58 L1907.28 1213.58 L1907.87 1213.58 L1908.45 1213.58 L1909.04 1213.58 L1909.63 1213.58 L1910.21 1213.58 L1910.8 1213.58 L1911.38 1213.58 L1911.97 1213.58 L1912.56 1213.58 L1913.14 1213.58 L1913.73 1213.58 L1914.32 1213.58 L1914.9 1213.58 L1915.49 1213.58 L1916.08 1213.58 L1916.66 1213.58 L1917.25 1213.58 L1917.83 1213.58 L1918.42 1213.58 L1919.01 1213.58 L1919.59 1213.58 L1920.18 1213.58 L1920.77 1213.58 L1921.35 1213.58 L1921.94 1213.58 L1922.53 1213.58 L1923.11 1213.58 L1923.7 1213.58 L1924.29 1213.58 L1924.87 1213.58 L1925.46 1213.58 L1926.04 1213.58 L1926.63 1213.58 L1927.22 1213.58 L1927.8 1213.58 L1928.39 1213.58 L1928.98 1213.58 L1929.56 1213.58 L1930.15 1213.58 L1930.74 1213.58 L1931.32 1213.58 L1931.91 1213.58 L1932.5 1213.58 L1933.08 1213.58 L1933.67 1213.58 L1934.25 1213.58 L1934.84 1213.58 L1935.43 1213.58 L1936.01 1213.58 L1936.6 1213.58 L1937.19 1213.58 L1937.77 1213.58 L1938.36 1213.58 L1938.95 1213.58 L1939.53 1213.58 L1940.12 1213.58 L1940.71 1213.58 L1941.29 1213.58 L1941.88 1213.58 L1942.46 1213.58 L1943.05 1213.58 L1943.64 1213.58 L1944.22 1213.58 L1944.81 1213.58 L1945.4 1213.58 L1945.98 1213.58 L1946.57 1213.58 L1947.16 1213.58 L1947.74 1213.58 L1948.33 1213.58 L1948.91 1213.58 L1949.5 1213.58 L1950.09 1213.58 L1950.67 1213.58 L1951.26 1213.58 L1951.85 1213.58 L1952.43 1213.58 L1953.02 1213.58 L1953.61 1213.58 L1954.19 1213.58 L1954.78 1213.58 L1955.37 1213.58 L1955.95 1213.58 L1956.54 1213.58 L1957.12 1213.58 L1957.71 1213.58 L1958.3 1213.58 L1958.88 1213.58 L1959.47 1213.58 L1960.06 1213.58 L1960.64 1213.58 L1961.23 1213.58 L1961.82 1213.58 L1962.4 1213.58 L1962.99 1213.58 L1963.58 1213.58 L1964.16 1213.58 L1964.75 1213.58 L1965.33 1213.58 L1965.92 1213.58 L1966.51 1213.58 L1967.09 1213.58 L1967.68 1213.58 L1968.27 1213.58 L1968.85 1213.58 L1969.44 1213.58 L1970.03 1213.58 L1970.61 1213.58 L1971.2 1213.58 L1971.78 1213.58 L1972.37 1213.58 L1972.96 1213.58 L1973.54 1213.58 L1974.13 1213.58 L1974.72 1213.58 L1975.3 1213.58 L1975.89 1213.58 L1976.48 1213.58 L1977.06 1213.58 L1977.65 1213.58 L1978.24 1213.58 L1978.82 1213.58 L1979.41 1213.58 L1979.99 1213.58 L1980.58 1213.58 L1981.17 1213.58 L1981.75 1213.58 L1982.34 1213.58 L1982.93 1213.58 L1983.51 1213.58 L1984.1 1213.58 L1984.69 1213.58 L1985.27 1213.58 L1985.86 1213.58 L1986.45 1213.58 L1987.03 1213.58 L1987.62 1213.58 L1988.2 1213.58 L1988.79 1213.58 L1989.38 1213.58 L1989.96 1213.58 L1990.55 1213.58 L1991.14 1213.58 L1991.72 1213.58 L1992.31 1213.58 L1992.9 1213.58 L1993.48 1213.58 L1994.07 1213.58 L1994.65 1213.58 L1995.24 1213.58 L1995.83 1213.58 L1996.41 1213.58 L1997 1213.58 L1997.59 1213.58 L1998.17 1213.58 L1998.76 1213.58 L1999.35 1213.58 L1999.93 1213.58 L2000.52 1213.58 L2001.11 1213.58 L2001.69 1213.58 L2002.28 1213.58 L2002.86 1213.58 L2003.45 1213.58 L2004.04 1213.58 L2004.62 1213.58 L2005.21 1213.58 L2005.8 1213.58 L2006.38 1213.58 L2006.97 1213.58 L2007.56 1213.58 L2008.14 1213.58 L2008.73 1213.58 L2009.32 1213.58 L2009.9 1213.58 L2010.49 1213.58 L2011.07 1213.58 L2011.66 1213.58 L2012.25 1213.58 L2012.83 1213.58 L2013.42 1213.58 L2014.01 1213.58 L2014.59 1213.58 L2015.18 1213.58 L2015.77 1213.58 L2016.35 1213.58 L2016.94 1213.58 L2017.53 1213.58 L2018.11 1213.58 L2018.7 1213.58 L2019.28 1213.58 L2019.87 1213.58 L2020.46 1213.58 L2021.04 1213.58 L2021.63 1213.58 L2022.22 1213.58 L2022.8 1213.58 L2023.39 1213.58 L2023.98 1213.58 L2024.56 1213.58 L2025.15 1213.58 L2025.73 1213.58 L2026.32 1213.58 L2026.91 1213.58 L2027.49 1213.58 L2028.08 1213.58 L2028.67 1213.58 L2029.25 1213.58 L2029.84 1213.58 L2030.43 1213.58 L2031.01 1213.58 L2031.6 1213.58 L2032.19 1213.58 L2032.77 1213.58 L2033.36 1213.58 L2033.94 1213.58 L2034.53 1213.58 L2035.12 1213.58 L2035.7 1213.58 L2036.29 1213.58 L2036.88 1213.58 L2037.46 1213.58 L2038.05 1213.58 L2038.64 1213.58 L2039.22 1213.58 L2039.81 1213.58 L2040.4 1213.58 L2040.98 1213.58 L2041.57 1213.58 L2042.15 1213.58 L2042.74 1213.58 L2043.33 1213.58 L2043.91 1213.58 L2044.5 1213.58 L2045.09 1213.58 L2045.67 1213.58 L2046.26 1213.58 L2046.85 1213.58 L2047.43 1213.58 L2048.02 1213.58 L2048.6 1213.58 L2049.19 1213.58 L2049.78 1213.58 L2050.36 1213.58 L2050.95 1213.58 L2051.54 1213.58 L2052.12 1213.58 L2052.71 1213.58 L2053.3 1213.58 L2053.88 1213.58 L2054.47 1213.58 L2055.06 1213.58 L2055.64 1213.58 L2056.23 1213.58 L2056.81 1213.58 L2057.4 1213.58 L2057.99 1213.58 L2058.57 1213.58 L2059.16 1213.58 L2059.75 1213.58 L2060.33 1213.58 L2060.92 1213.58 L2061.51 1213.58 L2062.09 1213.58 L2062.68 1213.58 L2063.27 1213.58 L2063.85 1213.58 L2064.44 1213.58 L2065.02 1213.58 L2065.61 1213.58 L2066.2 1213.58 L2066.78 1213.58 L2067.37 1213.58 L2067.96 1213.58 L2068.54 1213.58 L2069.13 1213.58 L2069.72 1213.58 L2070.3 1213.58 L2070.89 1213.58 L2071.48 1213.58 L2072.06 1213.58 L2072.65 1213.58 L2073.23 1213.58 L2073.82 1213.58 L2074.41 1213.58 L2074.99 1213.58 L2075.58 1213.58 L2076.17 1213.58 L2076.75 1213.58 L2077.34 1213.58 L2077.93 1213.58 L2078.51 1213.58 L2079.1 1213.58 L2079.68 1213.58 L2080.27 1213.58 L2080.86 1213.58 L2081.44 1213.58 L2082.03 1213.58 L2082.62 1213.58 L2083.2 1213.58 L2083.79 1213.58 L2084.38 1213.58 L2084.96 1213.58 L2085.55 1213.58 L2086.14 1213.58 L2086.72 1213.58 L2087.31 1213.58 L2087.89 1213.58 L2088.48 1213.58 L2089.07 1213.58 L2089.65 1213.58 L2090.24 1213.58 L2090.83 1213.58 L2091.41 1213.58 L2092 1213.58 L2092.59 1213.58 L2093.17 1213.58 L2093.76 1213.58 L2094.35 1213.58 L2094.93 1213.58 L2095.52 1213.58 L2096.1 1213.58 L2096.69 1213.58 L2097.28 1213.58 L2097.86 1213.58 L2098.45 1213.58 L2099.04 1213.58 L2099.62 1213.58 L2100.21 1213.58 L2100.8 1213.58 L2101.38 1213.58 L2101.97 1213.58 L2102.55 1213.58 L2103.14 1213.58 L2103.73 1213.58 L2104.31 1213.58 L2104.9 1213.58 L2105.49 1213.58 L2106.07 1213.58 L2106.66 1213.58 L2107.25 1213.58 L2107.83 1213.58 L2108.42 1213.58 L2109.01 1213.58 L2109.59 1213.58 L2110.18 1213.58 L2110.76 1213.58 L2111.35 1213.58 L2111.94 1213.58 L2112.52 1213.58 L2113.11 1213.58 L2113.7 1213.58 L2114.28 1213.58 L2114.87 1213.58 L2115.46 1213.58 L2116.04 1213.58 L2116.63 1213.58 L2117.22 1213.58 L2117.8 1213.58 L2118.39 1213.58 L2118.97 1213.58 L2119.56 1213.58 L2120.15 1213.58 L2120.73 1213.58 L2121.32 1213.58 L2121.91 1213.58 L2122.49 1213.58 L2123.08 1213.58 L2123.67 1213.58 L2124.25 1213.58 L2124.84 1213.58 L2125.42 1213.58 L2126.01 1213.58 L2126.6 1213.58 L2127.18 1213.58 L2127.77 1213.58 L2128.36 1213.58 L2128.94 1213.58 L2129.53 1213.58 L2130.12 1213.58 L2130.7 1213.58 L2131.29 1213.58 L2131.88 1213.58 L2132.46 1213.58 L2133.05 1213.58 L2133.63 1213.58 L2134.22 1213.58 L2134.81 1213.58 L2135.39 1213.58 L2135.98 1213.58 L2136.57 1213.58 L2137.15 1213.58 L2137.74 1213.58 L2138.33 1213.58 L2138.91 1213.58 L2139.5 1213.58 L2140.09 1213.58 L2140.67 1213.58 L2141.26 1213.58 L2141.84 1213.58 L2142.43 1213.58 L2143.02 1213.58 L2143.6 1213.58 L2144.19 1213.58 L2144.78 1213.58 L2145.36 1213.58 L2145.95 1213.58 L2146.54 1213.58 L2147.12 1213.58 L2147.71 1213.58 L2148.3 1213.58 L2148.88 1213.58 L2149.47 1213.58 L2150.05 1213.58 L2150.64 1213.58 L2151.23 1213.58 L2151.81 1213.58 L2152.4 1213.58 L2152.99 1213.58 L2153.57 1213.58 L2154.16 1213.58 L2154.75 1213.58 L2155.33 1213.58 L2155.92 1213.58 L2156.5 1213.58 L2157.09 1213.58 L2157.68 1213.58 L2158.26 1213.58 L2158.26 1213.42 L2157.68 1213.42 L2157.09 1213.42 L2156.5 1213.42 L2155.92 1213.42 L2155.33 1213.42 L2154.75 1213.42 L2154.16 1213.42 L2153.57 1213.42 L2152.99 1213.42 L2152.4 1213.42 L2151.81 1213.42 L2151.23 1213.42 L2150.64 1213.42 L2150.05 1213.42 L2149.47 1213.42 L2148.88 1213.42 L2148.3 1213.42 L2147.71 1213.42 L2147.12 1213.42 L2146.54 1213.42 L2145.95 1213.42 L2145.36 1213.42 L2144.78 1213.42 L2144.19 1213.42 L2143.6 1213.42 L2143.02 1213.42 L2142.43 1213.42 L2141.84 1213.42 L2141.26 1213.42 L2140.67 1213.42 L2140.09 1213.42 L2139.5 1213.42 L2138.91 1213.42 L2138.33 1213.42 L2137.74 1213.42 L2137.15 1213.42 L2136.57 1213.42 L2135.98 1213.42 L2135.39 1213.42 L2134.81 1213.42 L2134.22 1213.42 L2133.63 1213.42 L2133.05 1213.42 L2132.46 1213.42 L2131.88 1213.42 L2131.29 1213.42 L2130.7 1213.42 L2130.12 1213.42 L2129.53 1213.42 L2128.94 1213.42 L2128.36 1213.42 L2127.77 1213.42 L2127.18 1213.42 L2126.6 1213.42 L2126.01 1213.42 L2125.42 1213.42 L2124.84 1213.42 L2124.25 1213.42 L2123.67 1213.42 L2123.08 1213.42 L2122.49 1213.42 L2121.91 1213.42 L2121.32 1213.42 L2120.73 1213.42 L2120.15 1213.42 L2119.56 1213.42 L2118.97 1213.42 L2118.39 1213.42 L2117.8 1213.42 L2117.22 1213.42 L2116.63 1213.42 L2116.04 1213.42 L2115.46 1213.42 L2114.87 1213.42 L2114.28 1213.42 L2113.7 1213.42 L2113.11 1213.42 L2112.52 1213.42 L2111.94 1213.42 L2111.35 1213.42 L2110.76 1213.42 L2110.18 1213.42 L2109.59 1213.42 L2109.01 1213.42 L2108.42 1213.42 L2107.83 1213.42 L2107.25 1213.42 L2106.66 1213.42 L2106.07 1213.42 L2105.49 1213.42 L2104.9 1213.42 L2104.31 1213.42 L2103.73 1213.42 L2103.14 1213.42 L2102.55 1213.42 L2101.97 1213.42 L2101.38 1213.42 L2100.8 1213.42 L2100.21 1213.42 L2099.62 1213.42 L2099.04 1213.42 L2098.45 1213.42 L2097.86 1213.42 L2097.28 1213.42 L2096.69 1213.42 L2096.1 1213.42 L2095.52 1213.42 L2094.93 1213.42 L2094.35 1213.42 L2093.76 1213.42 L2093.17 1213.42 L2092.59 1213.42 L2092 1213.42 L2091.41 1213.42 L2090.83 1213.42 L2090.24 1213.42 L2089.65 1213.42 L2089.07 1213.42 L2088.48 1213.42 L2087.89 1213.42 L2087.31 1213.42 L2086.72 1213.42 L2086.14 1213.42 L2085.55 1213.42 L2084.96 1213.42 L2084.38 1213.42 L2083.79 1213.42 L2083.2 1213.42 L2082.62 1213.42 L2082.03 1213.42 L2081.44 1213.42 L2080.86 1213.42 L2080.27 1213.42 L2079.68 1213.42 L2079.1 1213.42 L2078.51 1213.42 L2077.93 1213.42 L2077.34 1213.42 L2076.75 1213.42 L2076.17 1213.42 L2075.58 1213.42 L2074.99 1213.42 L2074.41 1213.42 L2073.82 1213.42 L2073.23 1213.42 L2072.65 1213.42 L2072.06 1213.42 L2071.48 1213.42 L2070.89 1213.42 L2070.3 1213.42 L2069.72 1213.42 L2069.13 1213.42 L2068.54 1213.42 L2067.96 1213.42 L2067.37 1213.42 L2066.78 1213.42 L2066.2 1213.42 L2065.61 1213.42 L2065.02 1213.42 L2064.44 1213.42 L2063.85 1213.42 L2063.27 1213.42 L2062.68 1213.42 L2062.09 1213.42 L2061.51 1213.42 L2060.92 1213.42 L2060.33 1213.42 L2059.75 1213.42 L2059.16 1213.42 L2058.57 1213.42 L2057.99 1213.42 L2057.4 1213.42 L2056.81 1213.42 L2056.23 1213.42 L2055.64 1213.42 L2055.06 1213.42 L2054.47 1213.42 L2053.88 1213.42 L2053.3 1213.42 L2052.71 1213.42 L2052.12 1213.42 L2051.54 1213.42 L2050.95 1213.42 L2050.36 1213.42 L2049.78 1213.42 L2049.19 1213.42 L2048.6 1213.42 L2048.02 1213.42 L2047.43 1213.42 L2046.85 1213.42 L2046.26 1213.42 L2045.67 1213.42 L2045.09 1213.42 L2044.5 1213.42 L2043.91 1213.42 L2043.33 1213.42 L2042.74 1213.42 L2042.15 1213.42 L2041.57 1213.42 L2040.98 1213.42 L2040.4 1213.42 L2039.81 1213.42 L2039.22 1213.42 L2038.64 1213.42 L2038.05 1213.42 L2037.46 1213.42 L2036.88 1213.42 L2036.29 1213.42 L2035.7 1213.42 L2035.12 1213.42 L2034.53 1213.42 L2033.94 1213.42 L2033.36 1213.42 L2032.77 1213.42 L2032.19 1213.42 L2031.6 1213.42 L2031.01 1213.42 L2030.43 1213.42 L2029.84 1213.42 L2029.25 1213.42 L2028.67 1213.42 L2028.08 1213.42 L2027.49 1213.42 L2026.91 1213.42 L2026.32 1213.42 L2025.73 1213.42 L2025.15 1213.42 L2024.56 1213.42 L2023.98 1213.42 L2023.39 1213.42 L2022.8 1213.42 L2022.22 1213.42 L2021.63 1213.42 L2021.04 1213.42 L2020.46 1213.42 L2019.87 1213.42 L2019.28 1213.42 L2018.7 1213.42 L2018.11 1213.42 L2017.53 1213.42 L2016.94 1213.42 L2016.35 1213.42 L2015.77 1213.42 L2015.18 1213.42 L2014.59 1213.42 L2014.01 1213.42 L2013.42 1213.42 L2012.83 1213.42 L2012.25 1213.42 L2011.66 1213.42 L2011.07 1213.42 L2010.49 1213.42 L2009.9 1213.42 L2009.32 1213.42 L2008.73 1213.42 L2008.14 1213.42 L2007.56 1213.42 L2006.97 1213.42 L2006.38 1213.42 L2005.8 1213.42 L2005.21 1213.42 L2004.62 1213.42 L2004.04 1213.42 L2003.45 1213.42 L2002.86 1213.42 L2002.28 1213.42 L2001.69 1213.42 L2001.11 1213.42 L2000.52 1213.42 L1999.93 1213.42 L1999.35 1213.42 L1998.76 1213.42 L1998.17 1213.42 L1997.59 1213.42 L1997 1213.42 L1996.41 1213.42 L1995.83 1213.42 L1995.24 1213.42 L1994.65 1213.42 L1994.07 1213.42 L1993.48 1213.42 L1992.9 1213.42 L1992.31 1213.42 L1991.72 1213.42 L1991.14 1213.42 L1990.55 1213.42 L1989.96 1213.42 L1989.38 1213.42 L1988.79 1213.42 L1988.2 1213.42 L1987.62 1213.42 L1987.03 1213.42 L1986.45 1213.42 L1985.86 1213.42 L1985.27 1213.42 L1984.69 1213.42 L1984.1 1213.42 L1983.51 1213.42 L1982.93 1213.42 L1982.34 1213.42 L1981.75 1213.42 L1981.17 1213.42 L1980.58 1213.42 L1979.99 1213.42 L1979.41 1213.42 L1978.82 1213.42 L1978.24 1213.42 L1977.65 1213.42 L1977.06 1213.42 L1976.48 1213.42 L1975.89 1213.42 L1975.3 1213.42 L1974.72 1213.42 L1974.13 1213.42 L1973.54 1213.42 L1972.96 1213.42 L1972.37 1213.42 L1971.78 1213.42 L1971.2 1213.42 L1970.61 1213.42 L1970.03 1213.42 L1969.44 1213.42 L1968.85 1213.42 L1968.27 1213.42 L1967.68 1213.42 L1967.09 1213.42 L1966.51 1213.42 L1965.92 1213.42 L1965.33 1213.42 L1964.75 1213.42 L1964.16 1213.42 L1963.58 1213.42 L1962.99 1213.42 L1962.4 1213.42 L1961.82 1213.42 L1961.23 1213.42 L1960.64 1213.42 L1960.06 1213.42 L1959.47 1213.42 L1958.88 1213.42 L1958.3 1213.42 L1957.71 1213.42 L1957.12 1213.42 L1956.54 1213.42 L1955.95 1213.42 L1955.37 1213.42 L1954.78 1213.42 L1954.19 1213.42 L1953.61 1213.42 L1953.02 1213.42 L1952.43 1213.42 L1951.85 1213.42 L1951.26 1213.42 L1950.67 1213.42 L1950.09 1213.42 L1949.5 1213.42 L1948.91 1213.42 L1948.33 1213.42 L1947.74 1213.42 L1947.16 1213.42 L1946.57 1213.42 L1945.98 1213.42 L1945.4 1213.42 L1944.81 1213.42 L1944.22 1213.42 L1943.64 1213.42 L1943.05 1213.42 L1942.46 1213.42 L1941.88 1213.42 L1941.29 1213.42 L1940.71 1213.42 L1940.12 1213.42 L1939.53 1213.42 L1938.95 1213.42 L1938.36 1213.42 L1937.77 1213.42 L1937.19 1213.42 L1936.6 1213.42 L1936.01 1213.42 L1935.43 1213.42 L1934.84 1213.42 L1934.25 1213.42 L1933.67 1213.42 L1933.08 1213.42 L1932.5 1213.42 L1931.91 1213.42 L1931.32 1213.42 L1930.74 1213.42 L1930.15 1213.42 L1929.56 1213.42 L1928.98 1213.42 L1928.39 1213.42 L1927.8 1213.42 L1927.22 1213.42 L1926.63 1213.42 L1926.04 1213.42 L1925.46 1213.42 L1924.87 1213.42 L1924.29 1213.42 L1923.7 1213.42 L1923.11 1213.42 L1922.53 1213.42 L1921.94 1213.42 L1921.35 1213.42 L1920.77 1213.42 L1920.18 1213.42 L1919.59 1213.42 L1919.01 1213.42 L1918.42 1213.42 L1917.83 1213.42 L1917.25 1213.42 L1916.66 1213.42 L1916.08 1213.42 L1915.49 1213.42 L1914.9 1213.42 L1914.32 1213.42 L1913.73 1213.42 L1913.14 1213.42 L1912.56 1213.42 L1911.97 1213.42 L1911.38 1213.42 L1910.8 1213.42 L1910.21 1213.42 L1909.63 1213.42 L1909.04 1213.42 L1908.45 1213.42 L1907.87 1213.42 L1907.28 1213.42 L1906.69 1213.42 L1906.11 1213.42 L1905.52 1213.42 L1904.93 1213.42 L1904.35 1213.42 L1903.76 1213.42 L1903.17 1213.42 L1902.59 1213.42 L1902 1213.42 L1901.42 1213.42 L1900.83 1213.42 L1900.24 1213.42 L1899.66 1213.42 L1899.07 1213.42 L1898.48 1213.42 L1897.9 1213.42 L1897.31 1213.42 L1896.72 1213.42 L1896.14 1213.42 L1895.55 1213.42 L1894.96 1213.42 L1894.38 1213.42 L1893.79 1213.42 L1893.21 1213.42 L1892.62 1213.42 L1892.03 1213.42 L1891.45 1213.42 L1890.86 1213.42 L1890.27 1213.42 L1889.69 1213.42 L1889.1 1213.42 L1888.51 1213.42 L1887.93 1213.42 L1887.34 1213.42 L1886.76 1213.42 L1886.17 1213.42 L1885.58 1213.42 L1885 1213.42 L1884.41 1213.42 L1883.82 1213.42 L1883.24 1213.42 L1882.65 1213.42 L1882.06 1213.42 L1881.48 1213.42 L1880.89 1213.42 L1880.3 1213.42 L1879.72 1213.42 L1879.13 1213.42 L1878.55 1213.42 L1877.96 1213.42 L1877.37 1213.42 L1876.79 1213.42 L1876.2 1213.42 L1875.61 1213.42 L1875.03 1213.42 L1874.44 1213.42 L1873.85 1213.42 L1873.27 1213.42 L1872.68 1213.42 L1872.09 1213.42 L1871.51 1213.42 L1870.92 1213.42 L1870.34 1213.42 L1869.75 1213.42 L1869.16 1213.42 L1868.58 1213.42 L1867.99 1213.42 L1867.4 1213.42 L1866.82 1213.42 L1866.23 1213.42 L1865.64 1213.42 L1865.06 1213.42 L1864.47 1213.42 L1863.88 1213.42 L1863.3 1213.42 L1862.71 1213.42 L1862.13 1213.42 L1861.54 1213.42 L1860.95 1213.42 L1860.37 1213.42 L1859.78 1213.42 L1859.19 1213.42 L1858.61 1213.42 L1858.02 1213.42 L1857.43 1213.42 L1856.85 1213.42 L1856.26 1213.42 L1855.68 1213.42 L1855.09 1213.42 L1854.5 1213.42 L1853.92 1213.42 L1853.33 1213.42 L1852.74 1213.42 L1852.16 1213.42 L1851.57 1213.42 L1850.98 1213.42 L1850.4 1213.42 L1849.81 1213.42 L1849.22 1213.42 L1848.64 1213.42 L1848.05 1213.42 L1847.47 1213.42 L1846.88 1213.42 L1846.29 1213.42 L1845.71 1213.42 L1845.12 1213.42 L1844.53 1213.42 L1843.95 1213.42 L1843.36 1213.42 L1842.77 1213.42 L1842.19 1213.42 L1841.6 1213.42 L1841.01 1213.42 L1840.43 1213.42 L1839.84 1213.42 L1839.26 1213.42 L1838.67 1213.42 L1838.08 1213.42 L1837.5 1213.42 L1836.91 1213.42 L1836.32 1213.42 L1835.74 1213.42 L1835.15 1213.42 L1834.56 1213.42 L1833.98 1213.42 L1833.39 1213.42 L1832.81 1213.42 L1832.22 1213.42 L1831.63 1213.42 L1831.05 1213.42 L1830.46 1213.42 L1829.87 1213.42 L1829.29 1213.42 L1828.7 1213.42 L1828.11 1213.42 L1827.53 1213.42 L1826.94 1213.42 L1826.35 1213.42 L1825.77 1213.42 L1825.18 1213.42 L1824.6 1213.42 L1824.01 1213.42 L1823.42 1213.42 L1822.84 1213.42 L1822.25 1213.42 L1821.66 1213.42 L1821.08 1213.42 L1820.49 1213.42 L1819.9 1213.42 L1819.32 1213.42 L1818.73 1213.42 L1818.14 1213.42 L1817.56 1213.42 L1816.97 1213.42 L1816.39 1213.42 L1815.8 1213.42 L1815.21 1213.42 L1814.63 1213.42 L1814.04 1213.42 L1813.45 1213.42 L1812.87 1213.42 L1812.28 1213.42 L1811.69 1213.42 L1811.11 1213.42 L1810.52 1213.42 L1809.94 1213.42 L1809.35 1213.42 L1808.76 1213.42 L1808.18 1213.42 L1807.59 1213.42 L1807 1213.42 L1806.42 1213.42 L1805.83 1213.42 L1805.24 1213.42 L1804.66 1213.42 L1804.07 1213.42 L1803.48 1213.42 L1802.9 1213.42 L1802.31 1213.42 L1801.73 1213.42 L1801.14 1213.42 L1800.55 1213.42 L1799.97 1213.42 L1799.38 1213.42 L1798.79 1213.42 L1798.21 1213.42 L1797.62 1213.42 L1797.03 1213.42 L1796.45 1213.42 L1795.86 1213.42 L1795.27 1213.42 L1794.69 1213.42 L1794.1 1213.42 L1793.52 1213.42 L1792.93 1213.42 L1792.34 1213.42 L1791.76 1213.42 L1791.17 1213.42 L1790.58 1213.42 L1790 1213.42 L1789.41 1213.42 L1788.82 1213.42 L1788.24 1213.42 L1787.65 1213.42 L1787.06 1213.42 L1786.48 1213.42 L1785.89 1213.42 L1785.31 1213.42 L1784.72 1213.42 L1784.13 1213.42 L1783.55 1213.42 L1782.96 1213.42 L1782.37 1213.42 L1781.79 1213.42 L1781.2 1213.42 L1780.61 1213.42 L1780.03 1213.42 L1779.44 1213.42 L1778.86 1213.42 L1778.27 1213.42 L1777.68 1213.42 L1777.1 1213.42 L1776.51 1213.42 L1775.92 1213.42 L1775.34 1213.42 L1774.75 1213.42 L1774.16 1213.42 L1773.58 1213.42 L1772.99 1213.42 L1772.4 1213.42 L1771.82 1213.42 L1771.23 1213.42 L1770.65 1213.42 L1770.06 1213.42 L1769.47 1213.42 L1768.89 1213.42 L1768.3 1213.42 L1767.71 1213.42 L1767.13 1213.42 L1766.54 1213.42 L1765.95 1213.42 L1765.37 1213.42 L1764.78 1213.42 L1764.19 1213.42 L1763.61 1213.42 L1763.02 1213.42 L1762.44 1213.42 L1761.85 1213.42 L1761.26 1213.42 L1760.68 1213.42 L1760.09 1213.42 L1759.5 1213.42 L1758.92 1213.42 L1758.33 1213.42 L1757.74 1213.42 L1757.16 1213.42 L1756.57 1213.42 L1755.99 1213.42 L1755.4 1213.42 L1754.81 1213.42 L1754.23 1213.42 L1753.64 1213.42 L1753.05 1213.42 L1752.47 1213.42 L1751.88 1213.42 L1751.29 1213.42 L1750.71 1213.42 L1750.12 1213.42 L1749.53 1213.42 L1748.95 1213.42 L1748.36 1213.42 L1747.78 1213.42 L1747.19 1213.42 L1746.6 1213.42 L1746.02 1213.42 L1745.43 1213.42 L1744.84 1213.42 L1744.26 1213.42 L1743.67 1213.42 L1743.08 1213.42 L1742.5 1213.42 L1741.91 1213.42 L1741.32 1213.42 L1740.74 1213.42 L1740.15 1213.42 L1739.57 1213.42 L1738.98 1213.42 L1738.39 1213.42 L1737.81 1213.42 L1737.22 1213.42 L1736.63 1213.42 L1736.05 1213.42 L1735.46 1213.42 L1734.87 1213.42 L1734.29 1213.42 L1733.7 1213.42 L1733.11 1213.42 L1732.53 1213.42 L1731.94 1213.42 L1731.36 1213.42 L1730.77 1213.42 L1730.18 1213.42 L1729.6 1213.42 L1729.01 1213.42 L1728.42 1213.42 L1727.84 1213.42 L1727.25 1213.42 L1726.66 1213.42 L1726.08 1213.42 L1725.49 1213.42 L1724.91 1213.42 L1724.32 1213.42 L1723.73 1213.42 L1723.15 1213.42 L1722.56 1213.42 L1721.97 1213.42 L1721.39 1213.42 L1720.8 1213.42 L1720.21 1213.42 L1719.63 1213.42 L1719.04 1213.42 L1718.45 1213.42 L1717.87 1213.42 L1717.28 1213.42 L1716.7 1213.42 L1716.11 1213.42 L1715.52 1213.42 L1714.94 1213.42 L1714.35 1213.42 L1713.76 1213.42 L1713.18 1213.42 L1712.59 1213.42 L1712 1213.42 L1711.42 1213.42 L1710.83 1213.42 L1710.24 1213.42 L1709.66 1213.42 L1709.07 1213.42 L1708.49 1213.42 L1707.9 1213.42 L1707.31 1213.42 L1706.73 1213.42 L1706.14 1213.42 L1705.55 1213.42 L1704.97 1213.42 L1704.38 1213.42 L1703.79 1213.42 L1703.21 1213.42 L1702.62 1213.42 L1702.04 1213.42 L1701.45 1213.42 L1700.86 1213.42 L1700.28 1213.42 L1699.69 1213.42 L1699.1 1213.42 L1698.52 1213.42 L1697.93 1213.42 L1697.34 1213.42 L1696.76 1213.42 L1696.17 1213.42 L1695.58 1213.42 L1695 1213.42 L1694.41 1213.42 L1693.83 1213.42 L1693.24 1213.42 L1692.65 1213.42 L1692.07 1213.42 L1691.48 1213.42 L1690.89 1213.42 L1690.31 1213.42 L1689.72 1213.42 L1689.13 1213.42 L1688.55 1213.42 L1687.96 1213.42 L1687.37 1213.42 L1686.79 1213.42 L1686.2 1213.42 L1685.62 1213.42 L1685.03 1213.42 L1684.44 1213.42 L1683.86 1213.42 L1683.27 1213.42 L1682.68 1213.42 L1682.1 1213.42 L1681.51 1213.42 L1680.92 1213.42 L1680.34 1213.42 L1679.75 1213.42 L1679.17 1213.42 L1678.58 1213.42 L1677.99 1213.42 L1677.41 1213.42 L1676.82 1213.42 L1676.23 1213.42 L1675.65 1213.42 L1675.06 1213.42 L1674.47 1213.42 L1673.89 1213.42 L1673.3 1213.42 L1672.71 1213.42 L1672.13 1213.42 L1671.54 1213.42 L1670.96 1213.42 L1670.37 1213.42 L1669.78 1213.42 L1669.2 1213.42 L1668.61 1213.42 L1668.02 1213.42 L1667.44 1213.42 L1666.85 1213.42 L1666.26 1213.42 L1665.68 1213.42 L1665.09 1213.42 L1664.5 1213.42 L1663.92 1213.42 L1663.33 1213.42 L1662.75 1213.42 L1662.16 1213.42 L1661.57 1213.42 L1660.99 1213.42 L1660.4 1213.42 L1659.81 1213.42 L1659.23 1213.42 L1658.64 1213.42 L1658.05 1213.42 L1657.47 1213.42 L1656.88 1213.42 L1656.29 1213.42 L1655.71 1213.42 L1655.12 1213.42 L1654.54 1213.42 L1653.95 1213.42 L1653.36 1213.42 L1652.78 1213.42 L1652.19 1213.42 L1651.6 1213.42 L1651.02 1213.42 L1650.43 1213.42 L1649.84 1213.42 L1649.26 1213.42 L1648.67 1213.42 L1648.09 1213.42 L1647.5 1213.42 L1646.91 1213.42 L1646.33 1213.42 L1645.74 1213.42 L1645.15 1213.42 L1644.57 1213.42 L1643.98 1213.42 L1643.39 1213.42 L1642.81 1213.42 L1642.22 1213.42 L1641.63 1213.42 L1641.05 1213.42 L1640.46 1213.42 L1639.88 1213.42 L1639.29 1213.42 L1638.7 1213.42 L1638.12 1213.42 L1637.53 1213.42 L1636.94 1213.42 L1636.36 1213.42 L1635.77 1213.42 L1635.18 1213.42 L1634.6 1213.42 L1634.01 1213.42 L1633.42 1213.42 L1632.84 1213.42 L1632.25 1213.42 L1631.67 1213.42 L1631.08 1213.42 L1630.49 1213.42 L1629.91 1213.42 L1629.32 1213.42 L1628.73 1213.42 L1628.15 1213.42 L1627.56 1213.42 L1626.97 1213.42 L1626.39 1213.42 L1625.8 1213.42 L1625.22 1213.42 L1624.63 1213.42 L1624.04 1213.42 L1623.46 1213.42 L1622.87 1213.42 L1622.28 1213.42 L1621.7 1213.42 L1621.11 1213.42 L1620.52 1213.42 L1619.94 1213.42 L1619.35 1213.42 L1618.76 1213.42 L1618.18 1213.42 L1617.59 1213.42 L1617.01 1213.42 L1616.42 1213.42 L1615.83 1213.42 L1615.25 1213.42 L1614.66 1213.42 L1614.07 1213.42 L1613.49 1213.42 L1612.9 1213.42 L1612.31 1213.42 L1611.73 1213.42 L1611.14 1213.42 L1610.55 1213.42 L1609.97 1213.42 L1609.38 1213.42 L1608.8 1213.42 L1608.21 1213.42 L1607.62 1213.42 L1607.04 1213.42 L1606.45 1213.42 L1605.86 1213.42 L1605.28 1213.42 L1604.69 1213.42 L1604.1 1213.42 L1603.52 1213.42 L1602.93 1213.42 L1602.34 1213.42 L1601.76 1213.42 L1601.17 1213.42 L1600.59 1213.42 L1600 1213.42 L1599.41 1213.42 L1598.83 1213.42 L1598.24 1213.42 L1597.65 1213.42 L1597.07 1213.42 L1596.48 1213.42 L1595.89 1213.42 L1595.31 1213.42 L1594.72 1213.42 L1594.14 1213.42 L1593.55 1213.42 L1592.96 1213.42 L1592.38 1213.42 L1591.79 1213.42 L1591.2 1213.42 L1590.62 1213.42 L1590.03 1213.42 L1589.44 1213.42 L1588.86 1213.42 L1588.27 1213.42 L1587.68 1213.42 L1587.1 1213.42 L1586.51 1213.42 L1585.93 1213.42 L1585.34 1213.42 L1584.75 1213.42 L1584.17 1213.42 L1583.58 1213.42 L1582.99 1213.42 L1582.41 1213.42 L1581.82 1213.42 L1581.23 1213.42 L1580.65 1213.42 L1580.06 1213.42 L1579.47 1213.42 L1578.89 1213.42 L1578.3 1213.42 L1577.72 1213.42 L1577.13 1213.42 L1576.54 1213.42 L1575.96 1213.42 L1575.37 1213.42 L1574.78 1213.42 L1574.2 1213.42 L1573.61 1213.42 L1573.02 1213.42 L1572.44 1213.42 L1571.85 1213.42 L1571.27 1213.42 L1570.68 1213.42 L1570.09 1213.42 L1569.51 1213.42 L1568.92 1213.42 L1568.33 1213.42 L1567.75 1213.42 L1567.16 1213.42 L1566.57 1213.42 L1565.99 1213.42 L1565.4 1213.42 L1564.81 1213.42 L1564.23 1213.42 L1563.64 1213.42 L1563.06 1213.42 L1562.47 1213.42 L1561.88 1213.42 L1561.3 1213.42 L1560.71 1213.42 L1560.12 1213.42 L1559.54 1213.42 L1558.95 1213.42 L1558.36 1213.42 L1557.78 1213.42 L1557.19 1213.42 L1556.6 1213.42 L1556.02 1213.42 L1555.43 1213.42 L1554.85 1213.42 L1554.26 1213.42 L1553.67 1213.42 L1553.09 1213.42 L1552.5 1213.42 L1551.91 1213.42 L1551.33 1213.42 L1550.74 1213.42 L1550.15 1213.42 L1549.57 1213.42 L1548.98 1213.42 L1548.4 1213.42 L1547.81 1213.42 L1547.22 1213.42 L1546.64 1213.42 L1546.05 1213.42 L1545.46 1213.42 L1544.88 1213.42 L1544.29 1213.42 L1543.7 1213.42 L1543.12 1213.42 L1542.53 1213.42 L1541.94 1213.42 L1541.36 1213.42 L1540.77 1213.42 L1540.19 1213.42 L1539.6 1213.42 L1539.01 1213.42 L1538.43 1213.42 L1537.84 1213.42 L1537.25 1213.42 L1536.67 1213.42 L1536.08 1213.42 L1535.49 1213.42 L1534.91 1213.42 L1534.32 1213.42 L1533.73 1213.42 L1533.15 1213.42 L1532.56 1213.42 L1531.98 1213.42 L1531.39 1213.42 L1530.8 1213.42 L1530.22 1213.42 L1529.63 1213.42 L1529.04 1213.42 L1528.46 1213.42 L1527.87 1213.42 L1527.28 1213.42 L1526.7 1213.42 L1526.11 1213.42 L1525.52 1213.42 L1524.94 1213.42 L1524.35 1213.42 L1523.77 1213.42 L1523.18 1213.42 L1522.59 1213.42 L1522.01 1213.42 L1521.42 1213.42 L1520.83 1213.42 L1520.25 1213.42 L1519.66 1213.42 L1519.07 1213.42 L1518.49 1213.42 L1517.9 1213.42 L1517.32 1213.42 L1516.73 1213.42 L1516.14 1213.42 L1515.56 1213.42 L1514.97 1213.42 L1514.38 1213.42 L1513.8 1213.42 L1513.21 1213.42 L1512.62 1213.42 L1512.04 1213.42 L1511.45 1213.42 L1510.86 1213.42 L1510.28 1213.42 L1509.69 1213.42 L1509.11 1213.42 L1508.52 1213.42 L1507.93 1213.42 L1507.35 1213.42 L1506.76 1213.42 L1506.17 1213.42 L1505.59 1213.42 L1505 1213.42 L1504.41 1213.42 L1503.83 1213.42 L1503.24 1213.42 L1502.65 1213.42 L1502.07 1213.42 L1501.48 1213.42 L1500.9 1213.42 L1500.31 1213.42 L1499.72 1213.42 L1499.14 1213.42 L1498.55 1213.42 L1497.96 1213.42 L1497.38 1213.42 L1496.79 1213.42 L1496.2 1213.42 L1495.62 1213.42 L1495.03 1213.42 L1494.45 1213.42 L1493.86 1213.42 L1493.27 1213.42 L1492.69 1213.42 L1492.1 1213.42 L1491.51 1213.42 L1490.93 1213.42 L1490.34 1213.42 L1489.75 1213.42 L1489.17 1213.42 L1488.58 1213.42 L1487.99 1213.42 L1487.41 1213.42 L1486.82 1213.42 L1486.24 1213.42 L1485.65 1213.42 L1485.06 1213.42 L1484.48 1213.42 L1483.89 1213.42 L1483.3 1213.42 L1482.72 1213.42 L1482.13 1213.42 L1481.54 1213.42 L1480.96 1213.42 L1480.37 1213.42 L1479.78 1213.42 L1479.2 1213.42 L1478.61 1213.42 L1478.03 1213.42 L1477.44 1213.42 L1476.85 1213.42 L1476.27 1213.42 L1475.68 1213.42 L1475.09 1213.42 L1474.51 1213.42 L1473.92 1213.42 L1473.33 1213.42 L1472.75 1213.42 L1472.16 1213.42 L1471.57 1213.42 L1470.99 1213.42 L1470.4 1213.42 L1469.82 1213.42 L1469.23 1213.42 L1468.64 1213.42 L1468.06 1213.42 L1467.47 1213.42 L1466.88 1213.42 L1466.3 1213.42 L1465.71 1213.42 L1465.12 1213.42 L1464.54 1213.42 L1463.95 1213.42 L1463.37 1213.42 L1462.78 1213.42 L1462.19 1213.42 L1461.61 1213.42 L1461.02 1213.42 L1460.43 1213.42 L1459.85 1213.42 L1459.26 1213.42 L1458.67 1213.42 L1458.09 1213.42 L1457.5 1213.42 L1456.91 1213.42 L1456.33 1213.42 L1455.74 1213.42 L1455.16 1213.42 L1454.57 1213.42 L1453.98 1213.42 L1453.4 1213.42 L1452.81 1213.42 L1452.22 1213.42 L1451.64 1213.42 L1451.05 1213.42 L1450.46 1213.42 L1449.88 1213.42 L1449.29 1213.42 L1448.7 1213.42 L1448.12 1213.42 L1447.53 1213.42 L1446.95 1213.42 L1446.36 1213.42 L1445.77 1213.42 L1445.19 1213.42 L1444.6 1213.42 L1444.01 1213.42 L1443.43 1213.42 L1442.84 1213.42 L1442.25 1213.42 L1441.67 1213.42 L1441.08 1213.42 L1440.5 1213.42 L1439.91 1213.42 L1439.32 1213.42 L1438.74 1213.42 L1438.15 1213.42 L1437.56 1213.42 L1436.98 1213.42 L1436.39 1213.42 L1435.8 1213.42 L1435.22 1213.42 L1434.63 1213.42 L1434.04 1213.42 L1433.46 1213.42 L1432.87 1213.42 L1432.29 1213.42 L1431.7 1213.42 L1431.11 1213.42 L1430.53 1213.42 L1429.94 1213.42 L1429.35 1213.42 L1428.77 1213.42 L1428.18 1213.42 L1427.59 1213.42 L1427.01 1213.42 L1426.42 1213.42 L1425.83 1213.42 L1425.25 1213.42 L1424.66 1213.42 L1424.08 1213.42 L1423.49 1213.42 L1422.9 1213.42 L1422.32 1213.42 L1421.73 1213.42 L1421.14 1213.42 L1420.56 1213.42 L1419.97 1213.42 L1419.38 1213.42 L1418.8 1213.42 L1418.21 1213.42 L1417.63 1213.42 L1417.04 1213.42 L1416.45 1213.42 L1415.87 1213.42 L1415.28 1213.42 L1414.69 1213.42 L1414.11 1213.42 L1413.52 1213.42 L1412.93 1213.42 L1412.35 1213.42 L1411.76 1213.42 L1411.17 1213.42 L1410.59 1213.42 L1410 1213.42 L1409.42 1213.42 L1408.83 1213.42 L1408.24 1213.42 L1407.66 1213.42 L1407.07 1213.42 L1406.48 1213.42 L1405.9 1213.42 L1405.31 1213.42 L1404.72 1213.42 L1404.14 1213.42 L1403.55 1213.42 L1402.96 1213.42 L1402.38 1213.42 L1401.79 1213.42 L1401.21 1213.42 L1400.62 1213.42 L1400.03 1213.42 L1399.45 1213.42 L1398.86 1213.42 L1398.27 1213.42 L1397.69 1213.42 L1397.1 1213.42 L1396.51 1213.42 L1395.93 1213.42 L1395.34 1213.42 L1394.75 1213.42 L1394.17 1213.42 L1393.58 1213.42 L1393 1213.42 L1392.41 1213.42 L1391.82 1213.42 L1391.24 1213.42 L1390.65 1213.42 L1390.06 1213.42 L1389.48 1213.42 L1388.89 1213.42 L1388.3 1213.42 L1387.72 1213.42 L1387.13 1213.42 L1386.55 1213.42 L1385.96 1213.42 L1385.37 1213.42 L1384.79 1213.42 L1384.2 1213.42 L1383.61 1213.42 L1383.03 1213.42 L1382.44 1213.42 L1381.85 1213.42 L1381.27 1213.42 L1380.68 1213.42 L1380.09 1213.42 L1379.51 1213.42 L1378.92 1213.42 L1378.34 1213.42 L1377.75 1213.42 L1377.16 1213.42 L1376.58 1213.42 L1375.99 1213.42 L1375.4 1213.42 L1374.82 1213.42 L1374.23 1213.42 L1373.64 1213.42 L1373.06 1213.42 L1372.47 1213.42 L1371.88 1213.42 L1371.3 1213.42 L1370.71 1213.42 L1370.13 1213.42 L1369.54 1213.42 L1368.95 1213.42 L1368.37 1213.42 L1367.78 1213.42 L1367.19 1213.42 L1366.61 1213.42 L1366.02 1213.42 L1365.43 1213.42 L1364.85 1213.42 L1364.26 1213.42 L1363.68 1213.42 L1363.09 1213.42 L1362.5 1213.42 L1361.92 1213.42 L1361.33 1213.42 L1360.74 1213.42 L1360.16 1213.42 L1359.57 1213.42 L1358.98 1213.42 L1358.4 1213.42 L1357.81 1213.42 L1357.22 1213.42 L1356.64 1213.42 L1356.05 1213.42 L1355.47 1213.42 L1354.88 1213.42 L1354.29 1213.42 L1353.71 1213.42 L1353.12 1213.42 L1352.53 1213.42 L1351.95 1213.42 L1351.36 1213.42 L1350.77 1213.42 L1350.19 1213.42 L1349.6 1213.42 L1349.01 1213.42 L1348.43 1213.42 L1347.84 1213.42 L1347.26 1213.42 L1346.67 1213.42 L1346.08 1213.42 L1345.5 1213.42 L1344.91 1213.42 L1344.32 1213.42 L1343.74 1213.42 L1343.15 1213.42 L1342.56 1213.42 L1341.98 1213.42 L1341.39 1213.42 L1340.8 1213.42 L1340.22 1213.42 L1339.63 1213.42 L1339.05 1213.42 L1338.46 1213.42 L1337.87 1213.42 L1337.29 1213.42 L1336.7 1213.42 L1336.11 1213.42 L1335.53 1213.42 L1334.94 1213.42 L1334.35 1213.42 L1333.77 1213.42 L1333.18 1213.42 L1332.6 1213.42 L1332.01 1213.42 L1331.42 1213.42 L1330.84 1213.42 L1330.25 1213.42 L1329.66 1213.42 L1329.08 1213.42 L1328.49 1213.42 L1327.9 1213.42 L1327.32 1213.42 L1326.73 1213.42 L1326.14 1213.42 L1325.56 1213.42 L1324.97 1213.42 L1324.39 1213.42 L1323.8 1213.42 L1323.21 1213.42 L1322.63 1213.42 L1322.04 1213.42 L1321.45 1213.42 L1320.87 1213.42 L1320.28 1213.42 L1319.69 1213.42 L1319.11 1213.42 L1318.52 1213.42 L1317.93 1213.42 L1317.35 1213.42 L1316.76 1213.42 L1316.18 1213.42 L1315.59 1213.42 L1315 1213.42 L1314.42 1213.42 L1313.83 1213.42 L1313.24 1213.42 L1312.66 1213.42 L1312.07 1213.42 L1311.48 1213.42 L1310.9 1213.42 L1310.31 1213.42 L1309.73 1213.42 L1309.14 1213.42 L1308.55 1213.42 L1307.97 1213.42 L1307.38 1213.42 L1306.79 1213.42 L1306.21 1213.42 L1305.62 1213.42 L1305.03 1213.42 L1304.45 1213.42 L1303.86 1213.42 L1303.27 1213.42 L1302.69 1213.42 L1302.1 1213.42 L1301.52 1213.42 L1300.93 1213.42 L1300.34 1213.42 L1299.76 1213.42 L1299.17 1213.42 L1298.58 1213.42 L1298 1213.42 L1297.41 1213.42 L1296.82 1213.42 L1296.24 1213.42 L1295.65 1213.42 L1295.06 1213.42 L1294.48 1213.42 L1293.89 1213.42 L1293.31 1213.42 L1292.72 1213.42 L1292.13 1213.42 L1291.55 1213.42 L1290.96 1213.42 L1290.37 1213.42 L1289.79 1213.42 L1289.2 1213.42 L1288.61 1213.42 L1288.03 1213.42 L1287.44 1213.42 L1286.86 1213.42 L1286.27 1213.42 L1285.68 1213.42 L1285.1 1213.42 L1284.51 1213.42 L1283.92 1213.42 L1283.34 1213.42 L1282.75 1213.42 L1282.16 1213.42 L1281.58 1213.42 L1280.99 1213.42 L1280.4 1213.42 L1279.82 1213.42 L1279.23 1213.42 L1278.65 1213.42 L1278.06 1213.42 L1277.47 1213.42 L1276.89 1213.42 L1276.3 1213.42 L1275.71 1213.42 L1275.13 1213.42 L1274.54 1213.42 L1273.95 1213.42 L1273.37 1213.42 L1272.78 1213.42 L1272.19 1213.42 L1271.61 1213.42 L1271.02 1213.42 L1270.44 1213.42 L1269.85 1213.42 L1269.26 1213.42 L1268.68 1213.42 L1268.09 1213.42 L1267.5 1213.42 L1266.92 1213.42 L1266.33 1213.42 L1265.74 1213.42 L1265.16 1213.42 L1264.57 1213.42 L1263.98 1213.42 L1263.4 1213.42 L1262.81 1213.42 L1262.23 1213.42 L1261.64 1213.42 L1261.05 1213.42 L1260.47 1213.42 L1259.88 1213.42 L1259.29 1213.42 L1258.71 1213.42 L1258.12 1213.42 L1257.53 1213.42 L1256.95 1213.42 L1256.36 1213.42 L1255.78 1213.42 L1255.19 1213.42 L1254.6 1213.42 L1254.02 1213.42 L1253.43 1213.42 L1252.84 1213.42 L1252.26 1213.42 L1251.67 1213.42 L1251.08 1213.42 L1250.5 1213.42 L1249.91 1213.42 L1249.32 1213.42 L1248.74 1213.42 L1248.15 1213.42 L1247.57 1213.42 L1246.98 1213.42 L1246.39 1213.42 L1245.81 1213.42 L1245.22 1213.42 L1244.63 1213.42 L1244.05 1213.42 L1243.46 1213.42 L1242.87 1213.42 L1242.29 1213.42 L1241.7 1213.42 L1241.11 1213.42 L1240.53 1213.42 L1239.94 1213.42 L1239.36 1213.42 L1238.77 1213.42 L1238.18 1213.42 L1237.6 1213.42 L1237.01 1213.42 L1236.42 1213.42 L1235.84 1213.42 L1235.25 1213.42 L1234.66 1213.42 L1234.08 1213.42 L1233.49 1213.42 L1232.91 1213.42 L1232.32 1213.42 L1231.73 1213.42 L1231.15 1213.42 L1230.56 1213.42 L1229.97 1213.42 L1229.39 1213.42 L1228.8 1213.42 L1228.21 1213.42 L1227.63 1213.42 L1227.04 1213.42 L1226.45 1213.42 L1225.87 1213.42 L1225.28 1213.42 L1224.7 1213.42 L1224.11 1213.42 L1223.52 1213.42 L1222.94 1213.42 L1222.35 1213.42 L1221.76 1213.42 L1221.18 1213.42 L1220.59 1213.42 L1220 1213.42 L1219.42 1213.42 L1218.83 1213.42 L1218.24 1213.42 L1217.66 1213.42 L1217.07 1213.42 L1216.49 1213.42 L1215.9 1213.42 L1215.31 1213.42 L1214.73 1213.42 L1214.14 1213.42 L1213.55 1213.42 L1212.97 1213.42 L1212.38 1213.42 L1211.79 1213.42 L1211.21 1213.42 L1210.62 1213.42 L1210.03 1213.42 L1209.45 1213.42 L1208.86 1213.42 L1208.28 1213.42 L1207.69 1213.42 L1207.1 1213.42 L1206.52 1213.42 L1205.93 1213.42 L1205.34 1213.42 L1204.76 1213.42 L1204.17 1213.42 L1203.58 1213.42 L1203 1213.42 L1202.41 1213.42 L1201.83 1213.42 L1201.24 1213.42 L1200.65 1213.42 L1200.07 1213.42 L1199.48 1213.42 L1198.89 1213.42 L1198.31 1213.42 L1197.72 1213.42 L1197.13 1213.42 L1196.55 1213.42 L1195.96 1213.42 L1195.37 1213.42 L1194.79 1213.42 L1194.2 1213.42 L1193.62 1213.42 L1193.03 1213.42 L1192.44 1213.42 L1191.86 1213.42 L1191.27 1213.42 L1190.68 1213.42 L1190.1 1213.42 L1189.51 1213.42 L1188.92 1213.42 L1188.34 1213.42 L1187.75 1213.42 L1187.16 1213.42 L1186.58 1213.42 L1185.99 1213.42 L1185.41 1213.42 L1184.82 1213.42 L1184.23 1213.42 L1183.65 1213.42 L1183.06 1213.42 L1182.47 1213.42 L1181.89 1213.42 L1181.3 1213.42 L1180.71 1213.42 L1180.13 1213.42 L1179.54 1213.42 L1178.96 1213.42 L1178.37 1213.42 L1177.78 1213.42 L1177.2 1213.42 L1176.61 1213.42 L1176.02 1213.42 L1175.44 1213.42 L1174.85 1213.42 L1174.26 1213.42 L1173.68 1213.42 L1173.09 1213.42 L1172.5 1213.42 L1171.92 1213.42 L1171.33 1213.42 L1170.75 1213.42 L1170.16 1213.42 L1169.57 1213.42 L1168.99 1213.42 L1168.4 1213.42 L1167.81 1213.42 L1167.23 1213.42 L1166.64 1213.42 L1166.05 1213.42 L1165.47 1213.42 L1164.88 1213.42 L1164.29 1213.42 L1163.71 1213.42 L1163.12 1213.42 L1162.54 1213.42 L1161.95 1213.42 L1161.36 1213.42 L1160.78 1213.42 L1160.19 1213.42 L1159.6 1213.42 L1159.02 1213.42 L1158.43 1213.42 L1157.84 1213.42 L1157.26 1213.42 L1156.67 1213.42 L1156.09 1213.42 L1155.5 1213.42 L1154.91 1213.42 L1154.33 1213.42 L1153.74 1213.42 L1153.15 1213.42 L1152.57 1213.42 L1151.98 1213.42 L1151.39 1213.42 L1150.81 1213.42 L1150.22 1213.42 L1149.63 1213.42 L1149.05 1213.42 L1148.46 1213.42 L1147.88 1213.42 L1147.29 1213.42 L1146.7 1213.42 L1146.12 1213.42 L1145.53 1213.42 L1144.94 1213.42 L1144.36 1213.42 L1143.77 1213.42 L1143.18 1213.42 L1142.6 1213.42 L1142.01 1213.42 L1141.42 1213.42 L1140.84 1213.42 L1140.25 1213.42 L1139.67 1213.42 L1139.08 1213.42 L1138.49 1213.42 L1137.91 1213.42 L1137.32 1213.42 L1136.73 1213.42 L1136.15 1213.42 L1135.56 1213.42 L1134.97 1213.42 L1134.39 1213.42 L1133.8 1213.42 L1133.21 1213.42 L1132.63 1213.42 L1132.04 1213.42 L1131.46 1213.42 L1130.87 1213.42 L1130.28 1213.42 L1129.7 1213.42 L1129.11 1213.42 L1128.52 1213.42 L1127.94 1213.42 L1127.35 1213.42 L1126.76 1213.42 L1126.18 1213.42 L1125.59 1213.42 L1125.01 1213.42 L1124.42 1213.42 L1123.83 1213.42 L1123.25 1213.42 L1122.66 1213.42 L1122.07 1213.42 L1121.49 1213.42 L1120.9 1213.42 L1120.31 1213.42 L1119.73 1213.42 L1119.14 1213.42 L1118.55 1213.42 L1117.97 1213.42 L1117.38 1213.42 L1116.8 1213.42 L1116.21 1213.42 L1115.62 1213.42 L1115.04 1213.42 L1114.45 1213.42 L1113.86 1213.42 L1113.28 1213.42 L1112.69 1213.42 L1112.1 1213.42 L1111.52 1213.42 L1110.93 1213.42 L1110.34 1213.42 L1109.76 1213.42 L1109.17 1213.42 L1108.59 1213.42 L1108 1213.42 L1107.41 1213.42 L1106.83 1213.42 L1106.24 1213.42 L1105.65 1213.42 L1105.07 1213.42 L1104.48 1213.42 L1103.89 1213.42 L1103.31 1213.42 L1102.72 1213.42 L1102.14 1213.42 L1101.55 1213.42 L1100.96 1213.42 L1100.38 1213.42 L1099.79 1213.42 L1099.2 1213.42 L1098.62 1213.42 L1098.03 1213.42 L1097.44 1213.42 L1096.86 1213.42 L1096.27 1213.42 L1095.68 1213.42 L1095.1 1213.42 L1094.51 1213.42 L1093.93 1213.42 L1093.34 1213.42 L1092.75 1213.42 L1092.17 1213.42 L1091.58 1213.42 L1090.99 1213.42 L1090.41 1213.42 L1089.82 1213.42 L1089.23 1213.42 L1088.65 1213.42 L1088.06 1213.42 L1087.47 1213.42 L1086.89 1213.42 L1086.3 1213.42 L1085.72 1213.42 L1085.13 1213.42 L1084.54 1213.42 L1083.96 1213.42 L1083.37 1213.42 L1082.78 1213.42 L1082.2 1213.42 L1081.61 1213.42 L1081.02 1213.42 L1080.44 1213.42 L1079.85 1213.42 L1079.26 1213.42 L1078.68 1213.42 L1078.09 1213.42 L1077.51 1213.42 L1076.92 1213.42 L1076.33 1213.42 L1075.75 1213.42 L1075.16 1213.42 L1074.57 1213.42 L1073.99 1213.42 L1073.4 1213.42 L1072.81 1213.42 L1072.23 1213.42 L1071.64 1213.42 L1071.06 1213.42 L1070.47 1213.42 L1069.88 1213.42 L1069.3 1213.42 L1068.71 1213.42 L1068.12 1213.42 L1067.54 1213.42 L1066.95 1213.42 L1066.36 1213.42 L1065.78 1213.42 L1065.19 1213.42 L1064.6 1213.42 L1064.02 1213.42 L1063.43 1213.42 L1062.85 1213.42 L1062.26 1213.42 L1061.67 1213.42 L1061.09 1213.42 L1060.5 1213.42 L1059.91 1213.42 L1059.33 1213.42 L1058.74 1213.42 L1058.15 1213.42 L1057.57 1213.42 L1056.98 1213.42 L1056.39 1213.42 L1055.81 1213.42 L1055.22 1213.42 L1054.64 1213.42 L1054.05 1213.42 L1053.46 1213.42 L1052.88 1213.42 L1052.29 1213.42 L1051.7 1213.42 L1051.12 1213.42 L1050.53 1213.42 L1049.94 1213.42 L1049.36 1213.42 L1048.77 1213.42 L1048.19 1213.42 L1047.6 1213.42 L1047.01 1213.42 L1046.43 1213.42 L1045.84 1213.42 L1045.25 1213.42 L1044.67 1213.42 L1044.08 1213.42 L1043.49 1213.42 L1042.91 1213.42 L1042.32 1213.42 L1041.73 1213.42 L1041.15 1213.42 L1040.56 1213.42 L1039.98 1213.42 L1039.39 1213.42 L1038.8 1213.42 L1038.22 1213.42 L1037.63 1213.42 L1037.04 1213.42 L1036.46 1213.42 L1035.87 1213.42 L1035.28 1213.42 L1034.7 1213.42 L1034.11 1213.42 L1033.52 1213.42 L1032.94 1213.42 L1032.35 1213.42 L1031.77 1213.42 L1031.18 1213.42 L1030.59 1213.42 L1030.01 1213.42 L1029.42 1213.42 L1028.83 1213.42 L1028.25 1213.42 L1027.66 1213.42 L1027.07 1213.42 L1026.49 1213.42 L1025.9 1213.42 L1025.32 1213.42 L1024.73 1213.42 L1024.14 1213.42 L1023.56 1213.42 L1022.97 1213.42 L1022.38 1213.42 L1021.8 1213.42 L1021.21 1213.42 L1020.62 1213.42 L1020.04 1213.42 L1019.45 1213.42 L1018.86 1213.42 L1018.28 1213.42 L1017.69 1213.42 L1017.11 1213.42 L1016.52 1213.42 L1015.93 1213.42 L1015.35 1213.42 L1014.76 1213.42 L1014.17 1213.42 L1013.59 1213.42 L1013 1213.42 L1012.41 1213.42 L1011.83 1213.42 L1011.24 1213.42 L1010.65 1213.42 L1010.07 1213.42 L1009.48 1213.42 L1008.9 1213.42 L1008.31 1213.42 L1007.72 1213.42 L1007.14 1213.42 L1006.55 1213.42 L1005.96 1213.42 L1005.38 1213.42 L1004.79 1213.42 L1004.2 1213.42 L1003.62 1213.42 L1003.03 1213.42 L1002.44 1213.42 L1001.86 1213.42 L1001.27 1213.42 L1000.69 1213.42 L1000.1 1213.42 L999.513 1213.42 L998.926 1213.42 L998.34 1213.42 L997.754 1213.42 L997.167 1213.42 L996.581 1213.42 L995.994 1213.42 L995.408 1213.42 L994.822 1213.42 L994.235 1213.42 L993.649 1213.42 L993.062 1213.42 L992.476 1213.42 L991.889 1213.42 L991.303 1213.42 L990.717 1213.42 L990.13 1213.42 L989.544 1213.42 L988.957 1213.42 L988.371 1213.42 L987.785 1213.42 L987.198 1213.42 L986.612 1213.42 L986.025 1213.42  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.5 986.612,1213.5 987.198,1213.5 987.785,1213.5 988.371,1213.5 988.957,1213.5 989.544,1213.5 990.13,1213.5 990.717,1213.5 991.303,1213.5 991.889,1213.5 992.476,1213.5 993.062,1213.5 993.649,1213.5 994.235,1213.5 994.822,1213.5 995.408,1213.5 995.994,1213.5 996.581,1213.5 997.167,1213.5 997.754,1213.5 998.34,1213.5 998.926,1213.5 999.513,1213.5 1000.1,1213.5 1000.69,1213.5 1001.27,1213.5 1001.86,1213.5 1002.44,1213.5 1003.03,1213.5 1003.62,1213.5 1004.2,1213.5 1004.79,1213.5 1005.38,1213.5 1005.96,1213.5 1006.55,1213.5 1007.14,1213.5 1007.72,1213.5 1008.31,1213.5 1008.9,1213.5 1009.48,1213.5 1010.07,1213.5 1010.65,1213.5 1011.24,1213.5 1011.83,1213.5 1012.41,1213.5 1013,1213.5 1013.59,1213.5 1014.17,1213.5 1014.76,1213.5 1015.35,1213.5 1015.93,1213.5 1016.52,1213.5 1017.11,1213.5 1017.69,1213.5 1018.28,1213.5 1018.86,1213.5 1019.45,1213.5 1020.04,1213.5 1020.62,1213.5 1021.21,1213.5 1021.8,1213.5 1022.38,1213.5 1022.97,1213.5 1023.56,1213.5 1024.14,1213.5 1024.73,1213.5 1025.32,1213.5 1025.9,1213.5 1026.49,1213.5 1027.07,1213.5 1027.66,1213.5 1028.25,1213.5 1028.83,1213.5 1029.42,1213.5 1030.01,1213.5 1030.59,1213.5 1031.18,1213.5 1031.77,1213.5 1032.35,1213.5 1032.94,1213.5 1033.52,1213.5 1034.11,1213.5 1034.7,1213.5 1035.28,1213.5 1035.87,1213.5 1036.46,1213.5 1037.04,1213.5 1037.63,1213.5 1038.22,1213.5 1038.8,1213.5 1039.39,1213.5 1039.98,1213.5 1040.56,1213.5 1041.15,1213.5 1041.73,1213.5 1042.32,1213.5 1042.91,1213.5 1043.49,1213.5 1044.08,1213.5 1044.67,1213.5 1045.25,1213.5 1045.84,1213.5 1046.43,1213.5 1047.01,1213.5 1047.6,1213.5 1048.19,1213.5 1048.77,1213.5 1049.36,1213.5 1049.94,1213.5 1050.53,1213.5 1051.12,1213.5 1051.7,1213.5 1052.29,1213.5 1052.88,1213.5 1053.46,1213.5 1054.05,1213.5 1054.64,1213.5 1055.22,1213.5 1055.81,1213.5 1056.39,1213.5 1056.98,1213.5 1057.57,1213.5 1058.15,1213.5 1058.74,1213.5 1059.33,1213.5 1059.91,1213.5 1060.5,1213.5 1061.09,1213.5 1061.67,1213.5 1062.26,1213.5 1062.85,1213.5 1063.43,1213.5 1064.02,1213.5 1064.6,1213.5 1065.19,1213.5 1065.78,1213.5 1066.36,1213.5 1066.95,1213.5 1067.54,1213.5 1068.12,1213.5 1068.71,1213.5 1069.3,1213.5 1069.88,1213.5 1070.47,1213.5 1071.06,1213.5 1071.64,1213.5 1072.23,1213.5 1072.81,1213.5 1073.4,1213.5 1073.99,1213.5 1074.57,1213.5 1075.16,1213.5 1075.75,1213.5 1076.33,1213.5 1076.92,1213.5 1077.51,1213.5 1078.09,1213.5 1078.68,1213.5 1079.26,1213.5 1079.85,1213.5 1080.44,1213.5 1081.02,1213.5 1081.61,1213.5 1082.2,1213.5 1082.78,1213.5 1083.37,1213.5 1083.96,1213.5 1084.54,1213.5 1085.13,1213.5 1085.72,1213.5 1086.3,1213.5 1086.89,1213.5 1087.47,1213.5 1088.06,1213.5 1088.65,1213.5 1089.23,1213.5 1089.82,1213.5 1090.41,1213.5 1090.99,1213.5 1091.58,1213.5 1092.17,1213.5 1092.75,1213.5 1093.34,1213.5 1093.93,1213.5 1094.51,1213.5 1095.1,1213.5 1095.68,1213.5 1096.27,1213.5 1096.86,1213.5 1097.44,1213.5 1098.03,1213.5 1098.62,1213.5 1099.2,1213.5 1099.79,1213.5 1100.38,1213.5 1100.96,1213.5 1101.55,1213.5 1102.14,1213.5 1102.72,1213.5 1103.31,1213.5 1103.89,1213.5 1104.48,1213.5 1105.07,1213.5 1105.65,1213.5 1106.24,1213.5 1106.83,1213.5 1107.41,1213.5 1108,1213.5 1108.59,1213.5 1109.17,1213.5 1109.76,1213.5 1110.34,1213.5 1110.93,1213.5 1111.52,1213.5 1112.1,1213.5 1112.69,1213.5 1113.28,1213.5 1113.86,1213.5 1114.45,1213.5 1115.04,1213.5 1115.62,1213.5 1116.21,1213.5 1116.8,1213.5 1117.38,1213.5 1117.97,1213.5 1118.55,1213.5 1119.14,1213.5 1119.73,1213.5 1120.31,1213.5 1120.9,1213.5 1121.49,1213.5 1122.07,1213.5 1122.66,1213.5 1123.25,1213.5 1123.83,1213.5 1124.42,1213.5 1125.01,1213.5 1125.59,1213.5 1126.18,1213.5 1126.76,1213.5 1127.35,1213.5 1127.94,1213.5 1128.52,1213.5 1129.11,1213.5 1129.7,1213.5 1130.28,1213.5 1130.87,1213.5 1131.46,1213.5 1132.04,1213.5 1132.63,1213.5 1133.21,1213.5 1133.8,1213.5 1134.39,1213.5 1134.97,1213.5 1135.56,1213.5 1136.15,1213.5 1136.73,1213.5 1137.32,1213.5 1137.91,1213.5 1138.49,1213.5 1139.08,1213.5 1139.67,1213.5 1140.25,1213.5 1140.84,1213.5 1141.42,1213.5 1142.01,1213.5 1142.6,1213.5 1143.18,1213.5 1143.77,1213.5 1144.36,1213.5 1144.94,1213.5 1145.53,1213.5 1146.12,1213.5 1146.7,1213.5 1147.29,1213.5 1147.88,1213.5 1148.46,1213.5 1149.05,1213.5 1149.63,1213.5 1150.22,1213.5 1150.81,1213.5 1151.39,1213.5 1151.98,1213.5 1152.57,1213.5 1153.15,1213.5 1153.74,1213.5 1154.33,1213.5 1154.91,1213.5 1155.5,1213.5 1156.09,1213.5 1156.67,1213.5 1157.26,1213.5 1157.84,1213.5 1158.43,1213.5 1159.02,1213.5 1159.6,1213.5 1160.19,1213.5 1160.78,1213.5 1161.36,1213.5 1161.95,1213.5 1162.54,1213.5 1163.12,1213.5 1163.71,1213.5 1164.29,1213.5 1164.88,1213.5 1165.47,1213.5 1166.05,1213.5 1166.64,1213.5 1167.23,1213.5 1167.81,1213.5 1168.4,1213.5 1168.99,1213.5 1169.57,1213.5 1170.16,1213.5 1170.75,1213.5 1171.33,1213.5 1171.92,1213.5 1172.5,1213.5 1173.09,1213.5 1173.68,1213.5 1174.26,1213.5 1174.85,1213.5 1175.44,1213.5 1176.02,1213.5 1176.61,1213.5 1177.2,1213.5 1177.78,1213.5 1178.37,1213.5 1178.96,1213.5 1179.54,1213.5 1180.13,1213.5 1180.71,1213.5 1181.3,1213.5 1181.89,1213.5 1182.47,1213.5 1183.06,1213.5 1183.65,1213.5 1184.23,1213.5 1184.82,1213.5 1185.41,1213.5 1185.99,1213.5 1186.58,1213.5 1187.16,1213.5 1187.75,1213.5 1188.34,1213.5 1188.92,1213.5 1189.51,1213.5 1190.1,1213.5 1190.68,1213.5 1191.27,1213.5 1191.86,1213.5 1192.44,1213.5 1193.03,1213.5 1193.62,1213.5 1194.2,1213.5 1194.79,1213.5 1195.37,1213.5 1195.96,1213.5 1196.55,1213.5 1197.13,1213.5 1197.72,1213.5 1198.31,1213.5 1198.89,1213.5 1199.48,1213.5 1200.07,1213.5 1200.65,1213.5 1201.24,1213.5 1201.83,1213.5 1202.41,1213.5 1203,1213.5 1203.58,1213.5 1204.17,1213.5 1204.76,1213.5 1205.34,1213.5 1205.93,1213.5 1206.52,1213.5 1207.1,1213.5 1207.69,1213.5 1208.28,1213.5 1208.86,1213.5 1209.45,1213.5 1210.03,1213.5 1210.62,1213.5 1211.21,1213.5 1211.79,1213.5 1212.38,1213.5 1212.97,1213.5 1213.55,1213.5 1214.14,1213.5 1214.73,1213.5 1215.31,1213.5 1215.9,1213.5 1216.49,1213.5 1217.07,1213.5 1217.66,1213.5 1218.24,1213.5 1218.83,1213.5 1219.42,1213.5 1220,1213.5 1220.59,1213.5 1221.18,1213.5 1221.76,1213.5 1222.35,1213.5 1222.94,1213.5 1223.52,1213.5 1224.11,1213.5 1224.7,1213.5 1225.28,1213.5 1225.87,1213.5 1226.45,1213.5 1227.04,1213.5 1227.63,1213.5 1228.21,1213.5 1228.8,1213.5 1229.39,1213.5 1229.97,1213.5 1230.56,1213.5 1231.15,1213.5 1231.73,1213.5 1232.32,1213.5 1232.91,1213.5 1233.49,1213.5 1234.08,1213.5 1234.66,1213.5 1235.25,1213.5 1235.84,1213.5 1236.42,1213.5 1237.01,1213.5 1237.6,1213.5 1238.18,1213.5 1238.77,1213.5 1239.36,1213.5 1239.94,1213.5 1240.53,1213.5 1241.11,1213.5 1241.7,1213.5 1242.29,1213.5 1242.87,1213.5 1243.46,1213.5 1244.05,1213.5 1244.63,1213.5 1245.22,1213.5 1245.81,1213.5 1246.39,1213.5 1246.98,1213.5 1247.57,1213.5 1248.15,1213.5 1248.74,1213.5 1249.32,1213.5 1249.91,1213.5 1250.5,1213.5 1251.08,1213.5 1251.67,1213.5 1252.26,1213.5 1252.84,1213.5 1253.43,1213.5 1254.02,1213.5 1254.6,1213.5 1255.19,1213.5 1255.78,1213.5 1256.36,1213.5 1256.95,1213.5 1257.53,1213.5 1258.12,1213.5 1258.71,1213.5 1259.29,1213.5 1259.88,1213.5 1260.47,1213.5 1261.05,1213.5 1261.64,1213.5 1262.23,1213.5 1262.81,1213.5 1263.4,1213.5 1263.98,1213.5 1264.57,1213.5 1265.16,1213.5 1265.74,1213.5 1266.33,1213.5 1266.92,1213.5 1267.5,1213.5 1268.09,1213.5 1268.68,1213.5 1269.26,1213.5 1269.85,1213.5 1270.44,1213.5 1271.02,1213.5 1271.61,1213.5 1272.19,1213.5 1272.78,1213.5 1273.37,1213.5 1273.95,1213.5 1274.54,1213.5 1275.13,1213.5 1275.71,1213.5 1276.3,1213.5 1276.89,1213.5 1277.47,1213.5 1278.06,1213.5 1278.65,1213.5 1279.23,1213.5 1279.82,1213.5 1280.4,1213.5 1280.99,1213.5 1281.58,1213.5 1282.16,1213.5 1282.75,1213.5 1283.34,1213.5 1283.92,1213.5 1284.51,1213.5 1285.1,1213.5 1285.68,1213.5 1286.27,1213.5 1286.86,1213.5 1287.44,1213.5 1288.03,1213.5 1288.61,1213.5 1289.2,1213.5 1289.79,1213.5 1290.37,1213.5 1290.96,1213.5 1291.55,1213.5 1292.13,1213.5 1292.72,1213.5 1293.31,1213.5 1293.89,1213.5 1294.48,1213.5 1295.06,1213.5 1295.65,1213.5 1296.24,1213.5 1296.82,1213.5 1297.41,1213.5 1298,1213.5 1298.58,1213.5 1299.17,1213.5 1299.76,1213.5 1300.34,1213.5 1300.93,1213.5 1301.52,1213.5 1302.1,1213.5 1302.69,1213.5 1303.27,1213.5 1303.86,1213.5 1304.45,1213.5 1305.03,1213.5 1305.62,1213.5 1306.21,1213.5 1306.79,1213.5 1307.38,1213.5 1307.97,1213.5 1308.55,1213.5 1309.14,1213.5 1309.73,1213.5 1310.31,1213.5 1310.9,1213.5 1311.48,1213.5 1312.07,1213.5 1312.66,1213.5 1313.24,1213.5 1313.83,1213.5 1314.42,1213.5 1315,1213.5 1315.59,1213.5 1316.18,1213.5 1316.76,1213.5 1317.35,1213.5 1317.93,1213.5 1318.52,1213.5 1319.11,1213.5 1319.69,1213.5 1320.28,1213.5 1320.87,1213.5 1321.45,1213.5 1322.04,1213.5 1322.63,1213.5 1323.21,1213.5 1323.8,1213.5 1324.39,1213.5 1324.97,1213.5 1325.56,1213.5 1326.14,1213.5 1326.73,1213.5 1327.32,1213.5 1327.9,1213.5 1328.49,1213.5 1329.08,1213.5 1329.66,1213.5 1330.25,1213.5 1330.84,1213.5 1331.42,1213.5 1332.01,1213.5 1332.6,1213.5 1333.18,1213.5 1333.77,1213.5 1334.35,1213.5 1334.94,1213.5 1335.53,1213.5 1336.11,1213.5 1336.7,1213.5 1337.29,1213.5 1337.87,1213.5 1338.46,1213.5 1339.05,1213.5 1339.63,1213.5 1340.22,1213.5 1340.8,1213.5 1341.39,1213.5 1341.98,1213.5 1342.56,1213.5 1343.15,1213.5 1343.74,1213.5 1344.32,1213.5 1344.91,1213.5 1345.5,1213.5 1346.08,1213.5 1346.67,1213.5 1347.26,1213.5 1347.84,1213.5 1348.43,1213.5 1349.01,1213.5 1349.6,1213.5 1350.19,1213.5 1350.77,1213.5 1351.36,1213.5 1351.95,1213.5 1352.53,1213.5 1353.12,1213.5 1353.71,1213.5 1354.29,1213.5 1354.88,1213.5 1355.47,1213.5 1356.05,1213.5 1356.64,1213.5 1357.22,1213.5 1357.81,1213.5 1358.4,1213.5 1358.98,1213.5 1359.57,1213.5 1360.16,1213.5 1360.74,1213.5 1361.33,1213.5 1361.92,1213.5 1362.5,1213.5 1363.09,1213.5 1363.68,1213.5 1364.26,1213.5 1364.85,1213.5 1365.43,1213.5 1366.02,1213.5 1366.61,1213.5 1367.19,1213.5 1367.78,1213.5 1368.37,1213.5 1368.95,1213.5 1369.54,1213.5 1370.13,1213.5 1370.71,1213.5 1371.3,1213.5 1371.88,1213.5 1372.47,1213.5 1373.06,1213.5 1373.64,1213.5 1374.23,1213.5 1374.82,1213.5 1375.4,1213.5 1375.99,1213.5 1376.58,1213.5 1377.16,1213.5 1377.75,1213.5 1378.34,1213.5 1378.92,1213.5 1379.51,1213.5 1380.09,1213.5 1380.68,1213.5 1381.27,1213.5 1381.85,1213.5 1382.44,1213.5 1383.03,1213.5 1383.61,1213.5 1384.2,1213.5 1384.79,1213.5 1385.37,1213.5 1385.96,1213.5 1386.55,1213.5 1387.13,1213.5 1387.72,1213.5 1388.3,1213.5 1388.89,1213.5 1389.48,1213.5 1390.06,1213.5 1390.65,1213.5 1391.24,1213.5 1391.82,1213.5 1392.41,1213.5 1393,1213.5 1393.58,1213.5 1394.17,1213.5 1394.75,1213.5 1395.34,1213.5 1395.93,1213.5 1396.51,1213.5 1397.1,1213.5 1397.69,1213.5 1398.27,1213.5 1398.86,1213.5 1399.45,1213.5 1400.03,1213.5 1400.62,1213.5 1401.21,1213.5 1401.79,1213.5 1402.38,1213.5 1402.96,1213.5 1403.55,1213.5 1404.14,1213.5 1404.72,1213.5 1405.31,1213.5 1405.9,1213.5 1406.48,1213.5 1407.07,1213.5 1407.66,1213.5 1408.24,1213.5 1408.83,1213.5 1409.42,1213.5 1410,1213.5 1410.59,1213.5 1411.17,1213.5 1411.76,1213.5 1412.35,1213.5 1412.93,1213.5 1413.52,1213.5 1414.11,1213.5 1414.69,1213.5 1415.28,1213.5 1415.87,1213.5 1416.45,1213.5 1417.04,1213.5 1417.63,1213.5 1418.21,1213.5 1418.8,1213.5 1419.38,1213.5 1419.97,1213.5 1420.56,1213.5 1421.14,1213.5 1421.73,1213.5 1422.32,1213.5 1422.9,1213.5 1423.49,1213.5 1424.08,1213.5 1424.66,1213.5 1425.25,1213.5 1425.83,1213.5 1426.42,1213.5 1427.01,1213.5 1427.59,1213.5 1428.18,1213.5 1428.77,1213.5 1429.35,1213.5 1429.94,1213.5 1430.53,1213.5 1431.11,1213.5 1431.7,1213.5 1432.29,1213.5 1432.87,1213.5 1433.46,1213.5 1434.04,1213.5 1434.63,1213.5 1435.22,1213.5 1435.8,1213.5 1436.39,1213.5 1436.98,1213.5 1437.56,1213.5 1438.15,1213.5 1438.74,1213.5 1439.32,1213.5 1439.91,1213.5 1440.5,1213.5 1441.08,1213.5 1441.67,1213.5 1442.25,1213.5 1442.84,1213.5 1443.43,1213.5 1444.01,1213.5 1444.6,1213.5 1445.19,1213.5 1445.77,1213.5 1446.36,1213.5 1446.95,1213.5 1447.53,1213.5 1448.12,1213.5 1448.7,1213.5 1449.29,1213.5 1449.88,1213.5 1450.46,1213.5 1451.05,1213.5 1451.64,1213.5 1452.22,1213.5 1452.81,1213.5 1453.4,1213.5 1453.98,1213.5 1454.57,1213.5 1455.16,1213.5 1455.74,1213.5 1456.33,1213.5 1456.91,1213.5 1457.5,1213.5 1458.09,1213.5 1458.67,1213.5 1459.26,1213.5 1459.85,1213.5 1460.43,1213.5 1461.02,1213.5 1461.61,1213.5 1462.19,1213.5 1462.78,1213.5 1463.37,1213.5 1463.95,1213.5 1464.54,1213.5 1465.12,1213.5 1465.71,1213.5 1466.3,1213.5 1466.88,1213.5 1467.47,1213.5 1468.06,1213.5 1468.64,1213.5 1469.23,1213.5 1469.82,1213.5 1470.4,1213.5 1470.99,1213.5 1471.57,1213.5 1472.16,1213.5 1472.75,1213.5 1473.33,1213.5 1473.92,1213.5 1474.51,1213.5 1475.09,1213.5 1475.68,1213.5 1476.27,1213.5 1476.85,1213.5 1477.44,1213.5 1478.03,1213.5 1478.61,1213.5 1479.2,1213.5 1479.78,1213.5 1480.37,1213.5 1480.96,1213.5 1481.54,1213.5 1482.13,1213.5 1482.72,1213.5 1483.3,1213.5 1483.89,1213.5 1484.48,1213.5 1485.06,1213.5 1485.65,1213.5 1486.24,1213.5 1486.82,1213.5 1487.41,1213.5 1487.99,1213.5 1488.58,1213.5 1489.17,1213.5 1489.75,1213.5 1490.34,1213.5 1490.93,1213.5 1491.51,1213.5 1492.1,1213.5 1492.69,1213.5 1493.27,1213.5 1493.86,1213.5 1494.45,1213.5 1495.03,1213.5 1495.62,1213.5 1496.2,1213.5 1496.79,1213.5 1497.38,1213.5 1497.96,1213.5 1498.55,1213.5 1499.14,1213.5 1499.72,1213.5 1500.31,1213.5 1500.9,1213.5 1501.48,1213.5 1502.07,1213.5 1502.65,1213.5 1503.24,1213.5 1503.83,1213.5 1504.41,1213.5 1505,1213.5 1505.59,1213.5 1506.17,1213.5 1506.76,1213.5 1507.35,1213.5 1507.93,1213.5 1508.52,1213.5 1509.11,1213.5 1509.69,1213.5 1510.28,1213.5 1510.86,1213.5 1511.45,1213.5 1512.04,1213.5 1512.62,1213.5 1513.21,1213.5 1513.8,1213.5 1514.38,1213.5 1514.97,1213.5 1515.56,1213.5 1516.14,1213.5 1516.73,1213.5 1517.32,1213.5 1517.9,1213.5 1518.49,1213.5 1519.07,1213.5 1519.66,1213.5 1520.25,1213.5 1520.83,1213.5 1521.42,1213.5 1522.01,1213.5 1522.59,1213.5 1523.18,1213.5 1523.77,1213.5 1524.35,1213.5 1524.94,1213.5 1525.52,1213.5 1526.11,1213.5 1526.7,1213.5 1527.28,1213.5 1527.87,1213.5 1528.46,1213.5 1529.04,1213.5 1529.63,1213.5 1530.22,1213.5 1530.8,1213.5 1531.39,1213.5 1531.98,1213.5 1532.56,1213.5 1533.15,1213.5 1533.73,1213.5 1534.32,1213.5 1534.91,1213.5 1535.49,1213.5 1536.08,1213.5 1536.67,1213.5 1537.25,1213.5 1537.84,1213.5 1538.43,1213.5 1539.01,1213.5 1539.6,1213.5 1540.19,1213.5 1540.77,1213.5 1541.36,1213.5 1541.94,1213.5 1542.53,1213.5 1543.12,1213.5 1543.7,1213.5 1544.29,1213.5 1544.88,1213.5 1545.46,1213.5 1546.05,1213.5 1546.64,1213.5 1547.22,1213.5 1547.81,1213.5 1548.4,1213.5 1548.98,1213.5 1549.57,1213.5 1550.15,1213.5 1550.74,1213.5 1551.33,1213.5 1551.91,1213.5 1552.5,1213.5 1553.09,1213.5 1553.67,1213.5 1554.26,1213.5 1554.85,1213.5 1555.43,1213.5 1556.02,1213.5 1556.6,1213.5 1557.19,1213.5 1557.78,1213.5 1558.36,1213.5 1558.95,1213.5 1559.54,1213.5 1560.12,1213.5 1560.71,1213.5 1561.3,1213.5 1561.88,1213.5 1562.47,1213.5 1563.06,1213.5 1563.64,1213.5 1564.23,1213.5 1564.81,1213.5 1565.4,1213.5 1565.99,1213.5 1566.57,1213.5 1567.16,1213.5 1567.75,1213.5 1568.33,1213.5 1568.92,1213.5 1569.51,1213.5 1570.09,1213.5 1570.68,1213.5 1571.27,1213.5 1571.85,1213.5 1572.44,1213.5 1573.02,1213.5 1573.61,1213.5 1574.2,1213.5 1574.78,1213.5 1575.37,1213.5 1575.96,1213.5 1576.54,1213.5 1577.13,1213.5 1577.72,1213.5 1578.3,1213.5 1578.89,1213.5 1579.47,1213.5 1580.06,1213.5 1580.65,1213.5 1581.23,1213.5 1581.82,1213.5 1582.41,1213.5 1582.99,1213.5 1583.58,1213.5 1584.17,1213.5 1584.75,1213.5 1585.34,1213.5 1585.93,1213.5 1586.51,1213.5 1587.1,1213.5 1587.68,1213.5 1588.27,1213.5 1588.86,1213.5 1589.44,1213.5 1590.03,1213.5 1590.62,1213.5 1591.2,1213.5 1591.79,1213.5 1592.38,1213.5 1592.96,1213.5 1593.55,1213.5 1594.14,1213.5 1594.72,1213.5 1595.31,1213.5 1595.89,1213.5 1596.48,1213.5 1597.07,1213.5 1597.65,1213.5 1598.24,1213.5 1598.83,1213.5 1599.41,1213.5 1600,1213.5 1600.59,1213.5 1601.17,1213.5 1601.76,1213.5 1602.34,1213.5 1602.93,1213.5 1603.52,1213.5 1604.1,1213.5 1604.69,1213.5 1605.28,1213.5 1605.86,1213.5 1606.45,1213.5 1607.04,1213.5 1607.62,1213.5 1608.21,1213.5 1608.8,1213.5 1609.38,1213.5 1609.97,1213.5 1610.55,1213.5 1611.14,1213.5 1611.73,1213.5 1612.31,1213.5 1612.9,1213.5 1613.49,1213.5 1614.07,1213.5 1614.66,1213.5 1615.25,1213.5 1615.83,1213.5 1616.42,1213.5 1617.01,1213.5 1617.59,1213.5 1618.18,1213.5 1618.76,1213.5 1619.35,1213.5 1619.94,1213.5 1620.52,1213.5 1621.11,1213.5 1621.7,1213.5 1622.28,1213.5 1622.87,1213.5 1623.46,1213.5 1624.04,1213.5 1624.63,1213.5 1625.22,1213.5 1625.8,1213.5 1626.39,1213.5 1626.97,1213.5 1627.56,1213.5 1628.15,1213.5 1628.73,1213.5 1629.32,1213.5 1629.91,1213.5 1630.49,1213.5 1631.08,1213.5 1631.67,1213.5 1632.25,1213.5 1632.84,1213.5 1633.42,1213.5 1634.01,1213.5 1634.6,1213.5 1635.18,1213.5 1635.77,1213.5 1636.36,1213.5 1636.94,1213.5 1637.53,1213.5 1638.12,1213.5 1638.7,1213.5 1639.29,1213.5 1639.88,1213.5 1640.46,1213.5 1641.05,1213.5 1641.63,1213.5 1642.22,1213.5 1642.81,1213.5 1643.39,1213.5 1643.98,1213.5 1644.57,1213.5 1645.15,1213.5 1645.74,1213.5 1646.33,1213.5 1646.91,1213.5 1647.5,1213.5 1648.09,1213.5 1648.67,1213.5 1649.26,1213.5 1649.84,1213.5 1650.43,1213.5 1651.02,1213.5 1651.6,1213.5 1652.19,1213.5 1652.78,1213.5 1653.36,1213.5 1653.95,1213.5 1654.54,1213.5 1655.12,1213.5 1655.71,1213.5 1656.29,1213.5 1656.88,1213.5 1657.47,1213.5 1658.05,1213.5 1658.64,1213.5 1659.23,1213.5 1659.81,1213.5 1660.4,1213.5 1660.99,1213.5 1661.57,1213.5 1662.16,1213.5 1662.75,1213.5 1663.33,1213.5 1663.92,1213.5 1664.5,1213.5 1665.09,1213.5 1665.68,1213.5 1666.26,1213.5 1666.85,1213.5 1667.44,1213.5 1668.02,1213.5 1668.61,1213.5 1669.2,1213.5 1669.78,1213.5 1670.37,1213.5 1670.96,1213.5 1671.54,1213.5 1672.13,1213.5 1672.71,1213.5 1673.3,1213.5 1673.89,1213.5 1674.47,1213.5 1675.06,1213.5 1675.65,1213.5 1676.23,1213.5 1676.82,1213.5 1677.41,1213.5 1677.99,1213.5 1678.58,1213.5 1679.17,1213.5 1679.75,1213.5 1680.34,1213.5 1680.92,1213.5 1681.51,1213.5 1682.1,1213.5 1682.68,1213.5 1683.27,1213.5 1683.86,1213.5 1684.44,1213.5 1685.03,1213.5 1685.62,1213.5 1686.2,1213.5 1686.79,1213.5 1687.37,1213.5 1687.96,1213.5 1688.55,1213.5 1689.13,1213.5 1689.72,1213.5 1690.31,1213.5 1690.89,1213.5 1691.48,1213.5 1692.07,1213.5 1692.65,1213.5 1693.24,1213.5 1693.83,1213.5 1694.41,1213.5 1695,1213.5 1695.58,1213.5 1696.17,1213.5 1696.76,1213.5 1697.34,1213.5 1697.93,1213.5 1698.52,1213.5 1699.1,1213.5 1699.69,1213.5 1700.28,1213.5 1700.86,1213.5 1701.45,1213.5 1702.04,1213.5 1702.62,1213.5 1703.21,1213.5 1703.79,1213.5 1704.38,1213.5 1704.97,1213.5 1705.55,1213.5 1706.14,1213.5 1706.73,1213.5 1707.31,1213.5 1707.9,1213.5 1708.49,1213.5 1709.07,1213.5 1709.66,1213.5 1710.24,1213.5 1710.83,1213.5 1711.42,1213.5 1712,1213.5 1712.59,1213.5 1713.18,1213.5 1713.76,1213.5 1714.35,1213.5 1714.94,1213.5 1715.52,1213.5 1716.11,1213.5 1716.7,1213.5 1717.28,1213.5 1717.87,1213.5 1718.45,1213.5 1719.04,1213.5 1719.63,1213.5 1720.21,1213.5 1720.8,1213.5 1721.39,1213.5 1721.97,1213.5 1722.56,1213.5 1723.15,1213.5 1723.73,1213.5 1724.32,1213.5 1724.91,1213.5 1725.49,1213.5 1726.08,1213.5 1726.66,1213.5 1727.25,1213.5 1727.84,1213.5 1728.42,1213.5 1729.01,1213.5 1729.6,1213.5 1730.18,1213.5 1730.77,1213.5 1731.36,1213.5 1731.94,1213.5 1732.53,1213.5 1733.11,1213.5 1733.7,1213.5 1734.29,1213.5 1734.87,1213.5 1735.46,1213.5 1736.05,1213.5 1736.63,1213.5 1737.22,1213.5 1737.81,1213.5 1738.39,1213.5 1738.98,1213.5 1739.57,1213.5 1740.15,1213.5 1740.74,1213.5 1741.32,1213.5 1741.91,1213.5 1742.5,1213.5 1743.08,1213.5 1743.67,1213.5 1744.26,1213.5 1744.84,1213.5 1745.43,1213.5 1746.02,1213.5 1746.6,1213.5 1747.19,1213.5 1747.78,1213.5 1748.36,1213.5 1748.95,1213.5 1749.53,1213.5 1750.12,1213.5 1750.71,1213.5 1751.29,1213.5 1751.88,1213.5 1752.47,1213.5 1753.05,1213.5 1753.64,1213.5 1754.23,1213.5 1754.81,1213.5 1755.4,1213.5 1755.99,1213.5 1756.57,1213.5 1757.16,1213.5 1757.74,1213.5 1758.33,1213.5 1758.92,1213.5 1759.5,1213.5 1760.09,1213.5 1760.68,1213.5 1761.26,1213.5 1761.85,1213.5 1762.44,1213.5 1763.02,1213.5 1763.61,1213.5 1764.19,1213.5 1764.78,1213.5 1765.37,1213.5 1765.95,1213.5 1766.54,1213.5 1767.13,1213.5 1767.71,1213.5 1768.3,1213.5 1768.89,1213.5 1769.47,1213.5 1770.06,1213.5 1770.65,1213.5 1771.23,1213.5 1771.82,1213.5 1772.4,1213.5 1772.99,1213.5 1773.58,1213.5 1774.16,1213.5 1774.75,1213.5 1775.34,1213.5 1775.92,1213.5 1776.51,1213.5 1777.1,1213.5 1777.68,1213.5 1778.27,1213.5 1778.86,1213.5 1779.44,1213.5 1780.03,1213.5 1780.61,1213.5 1781.2,1213.5 1781.79,1213.5 1782.37,1213.5 1782.96,1213.5 1783.55,1213.5 1784.13,1213.5 1784.72,1213.5 1785.31,1213.5 1785.89,1213.5 1786.48,1213.5 1787.06,1213.5 1787.65,1213.5 1788.24,1213.5 1788.82,1213.5 1789.41,1213.5 1790,1213.5 1790.58,1213.5 1791.17,1213.5 1791.76,1213.5 1792.34,1213.5 1792.93,1213.5 1793.52,1213.5 1794.1,1213.5 1794.69,1213.5 1795.27,1213.5 1795.86,1213.5 1796.45,1213.5 1797.03,1213.5 1797.62,1213.5 1798.21,1213.5 1798.79,1213.5 1799.38,1213.5 1799.97,1213.5 1800.55,1213.5 1801.14,1213.5 1801.73,1213.5 1802.31,1213.5 1802.9,1213.5 1803.48,1213.5 1804.07,1213.5 1804.66,1213.5 1805.24,1213.5 1805.83,1213.5 1806.42,1213.5 1807,1213.5 1807.59,1213.5 1808.18,1213.5 1808.76,1213.5 1809.35,1213.5 1809.94,1213.5 1810.52,1213.5 1811.11,1213.5 1811.69,1213.5 1812.28,1213.5 1812.87,1213.5 1813.45,1213.5 1814.04,1213.5 1814.63,1213.5 1815.21,1213.5 1815.8,1213.5 1816.39,1213.5 1816.97,1213.5 1817.56,1213.5 1818.14,1213.5 1818.73,1213.5 1819.32,1213.5 1819.9,1213.5 1820.49,1213.5 1821.08,1213.5 1821.66,1213.5 1822.25,1213.5 1822.84,1213.5 1823.42,1213.5 1824.01,1213.5 1824.6,1213.5 1825.18,1213.5 1825.77,1213.5 1826.35,1213.5 1826.94,1213.5 1827.53,1213.5 1828.11,1213.5 1828.7,1213.5 1829.29,1213.5 1829.87,1213.5 1830.46,1213.5 1831.05,1213.5 1831.63,1213.5 1832.22,1213.5 1832.81,1213.5 1833.39,1213.5 1833.98,1213.5 1834.56,1213.5 1835.15,1213.5 1835.74,1213.5 1836.32,1213.5 1836.91,1213.5 1837.5,1213.5 1838.08,1213.5 1838.67,1213.5 1839.26,1213.5 1839.84,1213.5 1840.43,1213.5 1841.01,1213.5 1841.6,1213.5 1842.19,1213.5 1842.77,1213.5 1843.36,1213.5 1843.95,1213.5 1844.53,1213.5 1845.12,1213.5 1845.71,1213.5 1846.29,1213.5 1846.88,1213.5 1847.47,1213.5 1848.05,1213.5 1848.64,1213.5 1849.22,1213.5 1849.81,1213.5 1850.4,1213.5 1850.98,1213.5 1851.57,1213.5 1852.16,1213.5 1852.74,1213.5 1853.33,1213.5 1853.92,1213.5 1854.5,1213.5 1855.09,1213.5 1855.68,1213.5 1856.26,1213.5 1856.85,1213.5 1857.43,1213.5 1858.02,1213.5 1858.61,1213.5 1859.19,1213.5 1859.78,1213.5 1860.37,1213.5 1860.95,1213.5 1861.54,1213.5 1862.13,1213.5 1862.71,1213.5 1863.3,1213.5 1863.88,1213.5 1864.47,1213.5 1865.06,1213.5 1865.64,1213.5 1866.23,1213.5 1866.82,1213.5 1867.4,1213.5 1867.99,1213.5 1868.58,1213.5 1869.16,1213.5 1869.75,1213.5 1870.34,1213.5 1870.92,1213.5 1871.51,1213.5 1872.09,1213.5 1872.68,1213.5 1873.27,1213.5 1873.85,1213.5 1874.44,1213.5 1875.03,1213.5 1875.61,1213.5 1876.2,1213.5 1876.79,1213.5 1877.37,1213.5 1877.96,1213.5 1878.55,1213.5 1879.13,1213.5 1879.72,1213.5 1880.3,1213.5 1880.89,1213.5 1881.48,1213.5 1882.06,1213.5 1882.65,1213.5 1883.24,1213.5 1883.82,1213.5 1884.41,1213.5 1885,1213.5 1885.58,1213.5 1886.17,1213.5 1886.76,1213.5 1887.34,1213.5 1887.93,1213.5 1888.51,1213.5 1889.1,1213.5 1889.69,1213.5 1890.27,1213.5 1890.86,1213.5 1891.45,1213.5 1892.03,1213.5 1892.62,1213.5 1893.21,1213.5 1893.79,1213.5 1894.38,1213.5 1894.96,1213.5 1895.55,1213.5 1896.14,1213.5 1896.72,1213.5 1897.31,1213.5 1897.9,1213.5 1898.48,1213.5 1899.07,1213.5 1899.66,1213.5 1900.24,1213.5 1900.83,1213.5 1901.42,1213.5 1902,1213.5 1902.59,1213.5 1903.17,1213.5 1903.76,1213.5 1904.35,1213.5 1904.93,1213.5 1905.52,1213.5 1906.11,1213.5 1906.69,1213.5 1907.28,1213.5 1907.87,1213.5 1908.45,1213.5 1909.04,1213.5 1909.63,1213.5 1910.21,1213.5 1910.8,1213.5 1911.38,1213.5 1911.97,1213.5 1912.56,1213.5 1913.14,1213.5 1913.73,1213.5 1914.32,1213.5 1914.9,1213.5 1915.49,1213.5 1916.08,1213.5 1916.66,1213.5 1917.25,1213.5 1917.83,1213.5 1918.42,1213.5 1919.01,1213.5 1919.59,1213.5 1920.18,1213.5 1920.77,1213.5 1921.35,1213.5 1921.94,1213.5 1922.53,1213.5 1923.11,1213.5 1923.7,1213.5 1924.29,1213.5 1924.87,1213.5 1925.46,1213.5 1926.04,1213.5 1926.63,1213.5 1927.22,1213.5 1927.8,1213.5 1928.39,1213.5 1928.98,1213.5 1929.56,1213.5 1930.15,1213.5 1930.74,1213.5 1931.32,1213.5 1931.91,1213.5 1932.5,1213.5 1933.08,1213.5 1933.67,1213.5 1934.25,1213.5 1934.84,1213.5 1935.43,1213.5 1936.01,1213.5 1936.6,1213.5 1937.19,1213.5 1937.77,1213.5 1938.36,1213.5 1938.95,1213.5 1939.53,1213.5 1940.12,1213.5 1940.71,1213.5 1941.29,1213.5 1941.88,1213.5 1942.46,1213.5 1943.05,1213.5 1943.64,1213.5 1944.22,1213.5 1944.81,1213.5 1945.4,1213.5 1945.98,1213.5 1946.57,1213.5 1947.16,1213.5 1947.74,1213.5 1948.33,1213.5 1948.91,1213.5 1949.5,1213.5 1950.09,1213.5 1950.67,1213.5 1951.26,1213.5 1951.85,1213.5 1952.43,1213.5 1953.02,1213.5 1953.61,1213.5 1954.19,1213.5 1954.78,1213.5 1955.37,1213.5 1955.95,1213.5 1956.54,1213.5 1957.12,1213.5 1957.71,1213.5 1958.3,1213.5 1958.88,1213.5 1959.47,1213.5 1960.06,1213.5 1960.64,1213.5 1961.23,1213.5 1961.82,1213.5 1962.4,1213.5 1962.99,1213.5 1963.58,1213.5 1964.16,1213.5 1964.75,1213.5 1965.33,1213.5 1965.92,1213.5 1966.51,1213.5 1967.09,1213.5 1967.68,1213.5 1968.27,1213.5 1968.85,1213.5 1969.44,1213.5 1970.03,1213.5 1970.61,1213.5 1971.2,1213.5 1971.78,1213.5 1972.37,1213.5 1972.96,1213.5 1973.54,1213.5 1974.13,1213.5 1974.72,1213.5 1975.3,1213.5 1975.89,1213.5 1976.48,1213.5 1977.06,1213.5 1977.65,1213.5 1978.24,1213.5 1978.82,1213.5 1979.41,1213.5 1979.99,1213.5 1980.58,1213.5 1981.17,1213.5 1981.75,1213.5 1982.34,1213.5 1982.93,1213.5 1983.51,1213.5 1984.1,1213.5 1984.69,1213.5 1985.27,1213.5 1985.86,1213.5 1986.45,1213.5 1987.03,1213.5 1987.62,1213.5 1988.2,1213.5 1988.79,1213.5 1989.38,1213.5 1989.96,1213.5 1990.55,1213.5 1991.14,1213.5 1991.72,1213.5 1992.31,1213.5 1992.9,1213.5 1993.48,1213.5 1994.07,1213.5 1994.65,1213.5 1995.24,1213.5 1995.83,1213.5 1996.41,1213.5 1997,1213.5 1997.59,1213.5 1998.17,1213.5 1998.76,1213.5 1999.35,1213.5 1999.93,1213.5 2000.52,1213.5 2001.11,1213.5 2001.69,1213.5 2002.28,1213.5 2002.86,1213.5 2003.45,1213.5 2004.04,1213.5 2004.62,1213.5 2005.21,1213.5 2005.8,1213.5 2006.38,1213.5 2006.97,1213.5 2007.56,1213.5 2008.14,1213.5 2008.73,1213.5 2009.32,1213.5 2009.9,1213.5 2010.49,1213.5 2011.07,1213.5 2011.66,1213.5 2012.25,1213.5 2012.83,1213.5 2013.42,1213.5 2014.01,1213.5 2014.59,1213.5 2015.18,1213.5 2015.77,1213.5 2016.35,1213.5 2016.94,1213.5 2017.53,1213.5 2018.11,1213.5 2018.7,1213.5 2019.28,1213.5 2019.87,1213.5 2020.46,1213.5 2021.04,1213.5 2021.63,1213.5 2022.22,1213.5 2022.8,1213.5 2023.39,1213.5 2023.98,1213.5 2024.56,1213.5 2025.15,1213.5 2025.73,1213.5 2026.32,1213.5 2026.91,1213.5 2027.49,1213.5 2028.08,1213.5 2028.67,1213.5 2029.25,1213.5 2029.84,1213.5 2030.43,1213.5 2031.01,1213.5 2031.6,1213.5 2032.19,1213.5 2032.77,1213.5 2033.36,1213.5 2033.94,1213.5 2034.53,1213.5 2035.12,1213.5 2035.7,1213.5 2036.29,1213.5 2036.88,1213.5 2037.46,1213.5 2038.05,1213.5 2038.64,1213.5 2039.22,1213.5 2039.81,1213.5 2040.4,1213.5 2040.98,1213.5 2041.57,1213.5 2042.15,1213.5 2042.74,1213.5 2043.33,1213.5 2043.91,1213.5 2044.5,1213.5 2045.09,1213.5 2045.67,1213.5 2046.26,1213.5 2046.85,1213.5 2047.43,1213.5 2048.02,1213.5 2048.6,1213.5 2049.19,1213.5 2049.78,1213.5 2050.36,1213.5 2050.95,1213.5 2051.54,1213.5 2052.12,1213.5 2052.71,1213.5 2053.3,1213.5 2053.88,1213.5 2054.47,1213.5 2055.06,1213.5 2055.64,1213.5 2056.23,1213.5 2056.81,1213.5 2057.4,1213.5 2057.99,1213.5 2058.57,1213.5 2059.16,1213.5 2059.75,1213.5 2060.33,1213.5 2060.92,1213.5 2061.51,1213.5 2062.09,1213.5 2062.68,1213.5 2063.27,1213.5 2063.85,1213.5 2064.44,1213.5 2065.02,1213.5 2065.61,1213.5 2066.2,1213.5 2066.78,1213.5 2067.37,1213.5 2067.96,1213.5 2068.54,1213.5 2069.13,1213.5 2069.72,1213.5 2070.3,1213.5 2070.89,1213.5 2071.48,1213.5 2072.06,1213.5 2072.65,1213.5 2073.23,1213.5 2073.82,1213.5 2074.41,1213.5 2074.99,1213.5 2075.58,1213.5 2076.17,1213.5 2076.75,1213.5 2077.34,1213.5 2077.93,1213.5 2078.51,1213.5 2079.1,1213.5 2079.68,1213.5 2080.27,1213.5 2080.86,1213.5 2081.44,1213.5 2082.03,1213.5 2082.62,1213.5 2083.2,1213.5 2083.79,1213.5 2084.38,1213.5 2084.96,1213.5 2085.55,1213.5 2086.14,1213.5 2086.72,1213.5 2087.31,1213.5 2087.89,1213.5 2088.48,1213.5 2089.07,1213.5 2089.65,1213.5 2090.24,1213.5 2090.83,1213.5 2091.41,1213.5 2092,1213.5 2092.59,1213.5 2093.17,1213.5 2093.76,1213.5 2094.35,1213.5 2094.93,1213.5 2095.52,1213.5 2096.1,1213.5 2096.69,1213.5 2097.28,1213.5 2097.86,1213.5 2098.45,1213.5 2099.04,1213.5 2099.62,1213.5 2100.21,1213.5 2100.8,1213.5 2101.38,1213.5 2101.97,1213.5 2102.55,1213.5 2103.14,1213.5 2103.73,1213.5 2104.31,1213.5 2104.9,1213.5 2105.49,1213.5 2106.07,1213.5 2106.66,1213.5 2107.25,1213.5 2107.83,1213.5 2108.42,1213.5 2109.01,1213.5 2109.59,1213.5 2110.18,1213.5 2110.76,1213.5 2111.35,1213.5 2111.94,1213.5 2112.52,1213.5 2113.11,1213.5 2113.7,1213.5 2114.28,1213.5 2114.87,1213.5 2115.46,1213.5 2116.04,1213.5 2116.63,1213.5 2117.22,1213.5 2117.8,1213.5 2118.39,1213.5 2118.97,1213.5 2119.56,1213.5 2120.15,1213.5 2120.73,1213.5 2121.32,1213.5 2121.91,1213.5 2122.49,1213.5 2123.08,1213.5 2123.67,1213.5 2124.25,1213.5 2124.84,1213.5 2125.42,1213.5 2126.01,1213.5 2126.6,1213.5 2127.18,1213.5 2127.77,1213.5 2128.36,1213.5 2128.94,1213.5 2129.53,1213.5 2130.12,1213.5 2130.7,1213.5 2131.29,1213.5 2131.88,1213.5 2132.46,1213.5 2133.05,1213.5 2133.63,1213.5 2134.22,1213.5 2134.81,1213.5 2135.39,1213.5 2135.98,1213.5 2136.57,1213.5 2137.15,1213.5 2137.74,1213.5 2138.33,1213.5 2138.91,1213.5 2139.5,1213.5 2140.09,1213.5 2140.67,1213.5 2141.26,1213.5 2141.84,1213.5 2142.43,1213.5 2143.02,1213.5 2143.6,1213.5 2144.19,1213.5 2144.78,1213.5 2145.36,1213.5 2145.95,1213.5 2146.54,1213.5 2147.12,1213.5 2147.71,1213.5 2148.3,1213.5 2148.88,1213.5 2149.47,1213.5 2150.05,1213.5 2150.64,1213.5 2151.23,1213.5 2151.81,1213.5 2152.4,1213.5 2152.99,1213.5 2153.57,1213.5 2154.16,1213.5 2154.75,1213.5 2155.33,1213.5 2155.92,1213.5 2156.5,1213.5 2157.09,1213.5 2157.68,1213.5 2158.26,1213.5 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.03,1193.5 1399.1,899.083 \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.87 985.439,1193.5 2158.26,1193.5 2158.26,1232.87 985.439,1232.87 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip160)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip163\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip160)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip163)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-3363.82 164.351,-4403.18 164.91,-5350.45 165.469,-4202.15 166.029,-4242.08 166.588,-5108.85 167.147,-5899.68 167.706,-6632.62 168.266,-7298.06 168.825,-7900.36 169.384,-8443.6 169.943,-8931.6 170.503,-8712.78 171.062,-9095.6 171.621,-9469.12 172.18,-9785.33 172.74,-9553.86 173.299,-9358.73 173.858,-9617.81 174.417,-9842.18 174.977,-10040.8 175.536,-10207.5 176.095,-10344.9 176.655,-9787.52 177.214,-9280.39 177.773,-9400.06 178.332,-9221.97 178.892,-9297.91 179.451,-9366.15 180.01,-9188.09 180.569,-9229.01 181.129,-9243.34 181.688,-9237.07 182.247,-9034.39 182.806,-9003.85 183.366,-8974.43 183.925,-8907.12 184.484,-8847.28 185.043,-8640.76 185.603,-8310.31 186.162,-8238.01 186.721,-7919.04 187.28,-7840.23 187.84,-7646.03 188.399,-7568.45 188.958,-7489.92 189.517,-7296.53 190.077,-7113.37 190.636,-7022.33 191.195,-6747.78 191.754,-6575.34 192.314,-6329.61 192.873,-6163.96 193.432,-5856.59 193.991,-5636.22 194.551,-5488.33 195.11,-5409.92 195.669,-5267.04 196.228,-5010.22 196.788,-4769.96 197.347,-4649.3 197.906,-4471.84 198.465,-4299.12 199.025,-4180.91 199.584,-4020.3 200.143,-3858.17 200.702,-3701.88 201.262,-3632.23 201.821,-3513.84 202.38,-3368.1 202.939,-3264.48 203.499,-3162.84 204.058,-3023.6 204.617,-2921.28 205.176,-2741.46 205.736,-2679.55 206.295,-2615.33 206.854,-2551.69 207.413,-2416.42 207.973,-2292.14 208.532,-2199.1 209.091,-2075.56 209.65,-1959.03 210.21,-1757.18 210.769,-1681.11 211.328,-1581.9 211.887,-1542.92 212.447,-1477.28 213.006,-1269.39 213.565,-1203.52 214.124,-1167.36 214.684,-1127.99 215.243,-1066.03 215.802,-1027.17 216.361,-937.824 216.921,-726.518 217.48,-678.105 218.039,-606.56 218.598,-587.74 219.158,-537.636 219.717,-515.344 220.276,-450.018 220.835,-432.638 221.395,-368.214 221.954,-325.481 222.513,-332.419 223.072,-289.195 223.632,-270.848 224.191,-277.925 224.75,-257.646 225.309,-215.993 225.869,-193.475 226.428,-167 226.987,-165.366 227.546,-116.715 228.106,-90.4486 228.665,-51.5638 229.224,68.4264 229.783,123.495 230.343,136.276 230.902,212.329 231.461,262.425 232.02,308.993 232.58,335.61 233.139,341.231 233.698,389.821 234.257,452.334 234.817,515.787 235.376,535.23 235.935,604.785 236.494,603.068 237.054,601.963 237.613,615.678 238.172,633.891 238.731,632.598 239.291,685.681 239.85,719.931 240.409,698.146 240.968,713.224 241.528,694.869 242.087,714.634 242.646,730.035 243.205,712.286 243.765,729.775 244.324,729.136 244.883,748.274 245.442,784.068 246.002,851.922 246.561,861.484 247.12,836.301 247.679,830.424 248.239,859.913 248.798,833.874 249.357,866.843 249.916,862.576 250.476,875.424 251.035,851.921 251.594,868.07 252.153,886.992 252.713,933.029 253.272,942.116 253.831,950.849 254.39,978.07 254.95,934.551 255.509,914.768 256.068,926.084 256.627,919.386 257.187,915.955 257.746,930.357 258.305,903.655 258.864,904.33 259.424,919.764 259.983,899.266 260.542,896.265 261.101,911.285 261.661,926.948 262.22,906.667 262.779,974.183 263.338,982.96 263.898,992.447 264.457,1019.02 265.016,1041.85 265.575,1035.33 266.135,1028.08 266.694,985.072 267.253,995.356 267.812,989.666 268.372,999.957 268.931,1010.82 269.49,971.275 270.049,983.384 270.609,977.979 271.168,1003.68 271.727,997.048 272.286,995.614 272.846,972.5 273.405,1036.52 273.964,1059.56 274.523,1065.59 275.083,1060.44 275.642,1053.35 276.201,1080.3 276.76,1087.27 277.32,1059.78 277.879,1052.12 278.438,1060.92 278.997,1035.73 279.557,1028.53 280.116,1037.58 280.675,1046.84 281.234,1052.49 281.794,1055.71 282.353,1095.11 282.912,1081.44 283.471,1071.15 284.031,1061.44 284.59,1054.72 285.149,1042.07 285.708,1016.97 286.268,1030.34 286.827,1023.16 287.386,1014.96 287.945,991.763 288.505,982.215 289.064,1008.96 289.623,1020.37 290.182,1010.26 290.742,988.073 291.301,986.49 291.86,980.749 292.419,1008.45 292.979,982.507 293.538,1008.24 294.097,1002.98 294.656,980.1 295.216,971.131 295.775,1033.16 296.334,1040.3 296.893,1065.26 297.453,1034.27 298.012,994.261 298.571,989.494 299.13,998.955 299.69,956.968 300.249,935.334 300.808,915.707 301.368,883.3 301.927,883.168 302.486,913.23 303.045,910.778 303.605,895.043 304.164,861.758 304.723,875.528 305.282,873.275 305.842,875.053 306.401,873.544 306.96,909.401 307.519,905.808 308.079,903.314 308.638,933.185 309.197,929.162 309.756,958.539 310.316,1002.61 310.875,995.083 311.434,989.039 311.993,995.869 312.553,987.627 313.112,984.179 313.671,974.94 314.23,953.1 314.79,949.097 315.349,975.865 315.908,936.255 316.467,964.499 317.027,992.982 317.586,1033.59 318.145,1022.98 318.704,1013.82 319.264,975.926 319.823,968.492 320.382,948.954 320.941,943.417 321.501,920.805 322.06,931.888 322.619,929.633 323.178,925.317 323.738,934.216 324.297,944.86 324.856,940.954 325.415,936.772 325.975,960.989 326.534,970.314 327.093,931.912 327.652,911.123 328.212,925.873 328.771,920.934 329.33,952.073 329.889,916.14 330.449,928.374 331.008,1006.18 331.567,982.282 332.126,1023.36 332.686,1015.61 333.245,1007.76 333.804,1030.96 334.363,1018.9 334.923,1012.34 335.482,1020.68 336.041,1025.5 336.6,1031.93 337.16,1005.31 337.719,1011.6 338.278,1003.53 338.837,979.622 339.397,939.768 339.956,931.498 340.515,925.581 341.074,937.114 341.634,946.832 342.193,939.757 342.752,947.033 343.311,940.079 343.871,903.309 344.43,883.489 344.989,877.519 345.548,892.946 346.108,917.677 346.667,880.605 347.226,831.845 347.785,830.489 348.345,785.124 348.904,802.893 349.463,787.163 350.022,789.563 350.582,809.729 351.141,812.718 351.7,794.533 352.259,826.675 352.819,860.982 353.378,878.564 353.937,860.899 354.496,871.115 355.056,883.358 355.615,880.214 356.174,878.267 356.733,892.488 357.293,887.658 357.852,901.469 358.411,863.669 358.97,891.205 359.53,870.317 360.089,864.012 360.648,859.781 361.207,824.156 361.767,870.457 362.326,852.946 362.885,819.421 363.444,785.524 364.004,817.159 364.563,831.21 365.122,859.51 365.681,871.487 366.241,867.898 366.8,861.635 367.359,859.528 367.918,872.24 368.478,830.432 369.037,830.101 369.596,811.962 370.155,793.707 370.715,780.178 371.274,796.402 371.833,794.279 372.392,808.818 372.952,793.452 373.511,825.917 374.07,826.337 374.629,774.826 375.189,811.23 375.748,780.1 376.307,779.058 376.866,749.715 377.426,801.271 377.985,802.556 378.544,800.756 379.103,795.487 379.663,796.792 380.222,830.401 380.781,843.161 381.34,858.708 381.9,856.328 382.459,870.826 383.018,883.93 383.577,881.413 384.137,879.011 384.696,872.594 385.255,883.383 385.814,878.108 386.374,873.082 386.933,867.329 387.492,847.076 388.051,860.772 388.611,873.522 389.17,851.054 389.729,864.131 390.288,878.313 390.848,886.611 391.407,865.583 391.966,843.555 392.525,840.006 393.085,822.784 393.644,837.64 394.203,837.734 394.762,830.731 395.322,828.372 395.881,825.676 396.44,840.521 396.999,838.864 397.559,786.144 398.118,785.979 398.677,802.7 399.236,787.881 399.796,822.625 400.355,835.792 400.914,816.715 401.473,833.442 402.033,818.81 402.592,819.419 403.151,814.591 403.71,825.081 404.27,835.563 404.829,864.291 405.388,879.072 405.947,891.48 406.507,901.998 407.066,913.651 407.625,907.21 408.184,866.404 408.744,846.656 409.303,823.645 409.862,809.647 410.421,788.504 410.981,784.244 411.54,750.61 412.099,750.84 412.658,737.334 413.218,721.512 413.777,706.377 414.336,727.715 414.895,700.026 415.455,669.344 416.014,691.408 416.573,719.346 417.132,723.318 417.692,724.59 418.251,776.926 418.81,773.401 419.369,774.469 419.929,775.357 420.488,740.054 421.047,740.374 421.606,724.514 422.166,725.915 422.725,728.492 423.284,794.87 423.843,779.846 424.403,797.106 424.962,797.442 425.521,812.36 426.08,809.979 426.64,809.079 427.199,791.972 427.758,809.547 428.318,790.372 428.877,785.517 429.436,781.68 429.995,812.239 430.555,793.373 431.114,805.723 431.673,819.663 432.232,835.559 432.792,832.82 433.351,798.947 433.91,747.892 434.469,746.163 435.029,731.839 435.588,734.662 436.147,733.258 436.706,735.899 437.266,737.32 437.825,753.077 438.384,733.402 438.943,750.916 439.503,802.633 440.062,800.598 440.621,814.67 441.18,826.061 441.74,836.625 442.299,832.412 442.858,846.622 443.417,823.622 443.977,837.977 444.536,805.168 445.095,797.279 445.654,778.401 446.214,795.715 446.773,808.915 447.332,839.928 447.891,830.551 448.451,794.69 449.01,789.787 449.569,767.182 450.128,779.956 450.688,794.167 451.247,802.521 451.806,783.361 452.365,780.933 452.925,795.579 453.484,759.411 454.043,741.788 454.602,725.548 455.162,710.793 455.721,710.888 456.28,712.429 456.839,745.406 457.399,749.286 457.958,730.402 458.517,747.728 459.076,780.943 459.636,810.482 460.195,823.735 460.754,783.142 461.313,782.494 461.873,749.146 462.432,749.134 462.991,746.921 463.55,747.544 464.11,714.855 464.669,727.497 465.228,730.081 465.787,698.023 466.347,733.618 466.906,734.314 467.465,736.426 468.024,718.017 468.584,738.261 469.143,757.252 469.702,758.853 470.261,758.497 470.821,740.643 471.38,737.83 471.939,738.951 472.498,734.864 473.058,752.582 473.617,782.882 474.176,779.963 474.735,795.12 475.295,780.482 475.854,773.987 476.413,754.176 476.972,749.764 477.532,752.974 478.091,718.339 478.65,703.753 479.209,706.749 479.769,673.352 480.328,677.225 480.887,664.059 481.446,636.541 482.006,642.774 482.565,680.152 483.124,701.103 483.683,686.99 484.243,718.281 484.802,717.154 485.361,704.152 485.92,688.22 486.48,689.477 487.039,692.026 487.598,663.843 488.157,632.456 488.717,603.398 489.276,595.688 489.835,637.283 490.394,627.564 490.954,632.626 491.513,635.875 492.072,658.978 492.631,660.173 493.191,647.315 493.75,666.256 494.309,682.892 494.868,699.69 495.428,700.699 495.987,704.219 496.546,690.081 497.105,679.673 497.665,680.432 498.224,684.672 498.783,688.007 499.342,690.071 499.902,758.449 500.461,756.071 501.02,787.685 501.579,816.77 502.139,780.199 502.698,790.759 503.257,786.836 503.816,750.989 504.376,736.111 504.935,751.587 505.494,748.323 506.053,778.032 506.613,759.385 507.172,726.392 507.731,694.797 508.29,696.483 508.85,694.544 509.409,713.562 509.968,701.55 510.527,715.152 511.087,668.325 511.646,689.113 512.205,710.388 512.764,713.01 513.324,731.844 513.883,733.429 514.442,714.855 515.001,752.665 515.561,766.907 516.12,761.638 516.679,742.923 517.238,774.816 517.798,740.15 518.357,766.235 518.916,765.798 519.475,762.845 520.035,760.316 520.594,777.33 521.153,776.765 521.712,739.883 522.272,725.557 522.831,707.641 523.39,660.651 523.949,685.088 524.509,688.316 525.068,691.84 525.627,728.098 526.186,757.241 526.746,753.704 527.305,751.703 527.864,733.401 528.423,769.05 528.983,736.393 529.542,720.419 530.101,721.878 530.66,707.758 531.22,709.123 531.779,729.553 532.338,744.963 532.897,742.05 533.457,723.823 534.016,675.634 534.575,692.998 535.134,711.844 535.694,742.513 536.253,723.124 536.812,720.996 537.371,719.78 537.931,717.272 538.49,732.675 539.049,715.065 539.608,713.533 540.168,716.727 540.727,697.97 541.286,698.618 541.845,700.854 542.405,713.96 542.964,732.315 543.523,717.918 544.082,720.478 544.642,720.045 545.201,719.509 545.76,721.261 546.319,723.45 546.879,708.33 547.438,726.412 547.997,723.562 548.556,741.671 549.116,741.355 549.675,741.545 550.234,721.927 550.793,706.033 551.353,705.686 551.912,737.405 552.471,734.775 553.031,748.802 553.59,743.944 554.149,726.624 554.708,739.94 555.268,755.585 555.827,787.703 556.386,785.982 556.945,781.419 557.505,778.593 558.064,793.297 558.623,770.861 559.182,748.126 559.742,775.686 560.301,768.744 560.86,767.62 561.419,762.189 561.979,757.065 562.538,752.323 563.097,751.336 563.656,747.714 564.216,715.788 564.775,719.793 565.334,718.995 565.893,736.653 566.453,766.858 567.012,778.369 567.571,787.894 568.13,783.821 568.69,760.433 569.249,757.781 569.808,754.324 570.367,766.959 570.927,779.761 571.486,796.95 572.045,763.667 572.604,758.104 573.164,756.035 573.723,719.771 574.282,702.821 574.841,684.485 575.401,667.374 575.96,670.897 576.519,674.217 577.078,703.575 577.638,703.507 578.197,722.478 578.756,705.426 579.315,721.944 579.875,708.518 580.434,694.094 580.993,694.942 581.552,680.712 582.112,685.007 582.671,669.599 583.23,689.716 583.789,674.861 584.349,664.22 584.908,662.498 585.467,650.209 586.026,668.701 586.586,654.054 587.145,653.433 587.704,656.187 588.263,659.186 588.823,695.464 589.382,695.133 589.941,730.14 590.5,728.277 591.06,727.33 591.619,726.445 592.178,713.809 592.737,729.019 593.297,727.527 593.856,741.2 594.415,738.742 594.974,753.587 595.534,735.92 596.093,737.654 596.652,738.325 597.211,734.629 597.771,747.535 598.33,739.89 598.889,752.348 599.448,738.395 600.008,734.231 600.567,732.463 601.126,748.712 601.685,731.455 602.245,747.294 602.804,730.497 603.363,729.886 603.922,731.812 604.482,698.658 605.041,750.012 605.6,712.546 606.159,712.208 606.719,712.255 607.278,743.333 607.837,756.655 608.396,756.456 608.956,754.73 609.515,738.869 610.074,740.479 610.633,753.099 611.193,752.181 611.752,763.767 612.311,790.889 612.87,785.061 613.43,812.715 613.989,790.316 614.548,751.787 615.107,781.833 615.667,752.819 616.226,801.714 616.785,811.011 617.344,819.465 617.904,798.616 618.463,793.213 619.022,802.917 619.581,798.436 620.141,809.617 620.7,804.535 621.259,780.644 621.818,776.307 622.378,775.369 622.937,737.686 623.496,752.349 624.055,769.59 624.615,780.38 625.174,808.113 625.733,801.439 626.292,813.076 626.852,776.575 627.411,776.678 627.97,770.299 628.529,753.116 629.089,733.41 629.648,729.366 630.207,678.671 630.766,677.803 631.326,644.43 631.885,647.338 632.444,648.411 633.003,601.7 633.563,590.524 634.122,612.532 634.681,618.043 635.24,603.564 635.8,625.382 636.359,613.46 636.918,633.129 637.477,639.418 638.037,642.136 638.596,661.183 639.155,727.98 639.714,695.116 640.274,696.62 640.833,695.346 641.392,708.24 641.951,722.814 642.511,721.186 643.07,690.601 643.629,661.039 644.188,631.499 644.748,634.096 645.307,639.637 645.866,625.528 646.425,627.479 646.985,632.825 647.544,616.001 648.103,620.522 648.662,607.841 649.222,626.059 649.781,628.646 650.34,628.281 650.899,633.65 651.459,640.745 652.018,625.279 652.577,615.338 653.136,602.602 653.696,607.14 654.255,627.702 654.814,665.348 655.373,685.355 655.933,699.483 656.492,716.741 657.051,718.86 657.61,735.967 658.17,767.974 658.729,777.638 659.288,789.902 659.847,783.284 660.407,797.231 660.966,778.152 661.525,775.161 662.084,770.522 662.644,784.9 663.203,812.338 663.762,792.517 664.321,802.627 664.881,814.557 665.44,813.068 665.999,824.87 666.558,803.338 667.118,799.854 667.677,793.828 668.236,807.448 668.795,782.46 669.355,764.727 669.914,794.633 670.473,799.604 671.032,796.423 671.592,760.747 672.151,790.255 672.71,814.938 673.269,823.185 673.829,800.574 674.388,782.075 674.947,778.367 675.506,792.13 676.066,853.403 676.625,830.74 677.184,823.707 677.743,798.429 678.303,792.798 678.862,757.463 679.421,759.193 679.981,740.483 680.54,740.969 681.099,758.447 681.658,753.965 682.218,779.865 682.777,794.918 683.336,758.677 683.895,720.673 684.455,682.526 685.014,666.503 685.573,650.47 686.132,650.286 686.692,652.297 687.251,652.203 687.81,670.624 688.369,656.643 688.929,642.05 689.488,646.223 690.047,652.843 690.606,669.271 691.166,683.933 691.725,700.173 692.284,700.049 692.843,697.318 693.403,699.145 693.962,746.456 694.521,745.508 695.08,711.499 695.64,710.046 696.199,722.165 696.758,717.152 697.317,702.307 697.877,715.751 698.436,731.372 698.995,714.559 699.554,743.785 700.114,694.807 700.673,729.604 701.232,708.662 701.791,642.637 702.351,659.017 702.91,679.166 703.469,663.295 704.028,647.584 704.588,634.142 705.147,638.079 705.706,642.597 706.265,645.71 706.825,645.341 707.384,614.404 707.943,618.152 708.502,588.919 709.062,578.431 709.621,600.416 710.18,605.466 710.739,608.566 711.299,646.651 711.858,665.863 712.417,664.994 712.976,632.351 713.536,665.901 714.095,683.543 714.654,715.364 715.213,713.261 715.773,730.722 716.332,665.085 716.891,666.158 717.45,667.52 718.01,651.078 718.569,666.398 719.128,632.606 719.687,586.39 720.247,595.093 720.806,603.398 721.365,622.432 721.924,611.652 722.484,598.464 723.043,634.417 723.602,654.216 724.161,706.788 724.721,724.188 725.28,706.353 725.839,721.378 726.398,701.513 726.958,672.018 727.517,655.668 728.076,644.015 728.635,628.37 729.195,647.029 729.754,651.597 730.313,653.45 730.872,653.937 731.432,656.211 731.991,643.878 732.55,628.067 733.109,648.789 733.669,652.667 734.228,670.465 734.787,673.724 735.346,659.782 735.906,644.559 736.465,659.048 737.024,642.278 737.583,663.051 738.143,700.332 738.702,681.432 739.261,682.192 739.82,652.19 740.38,669.403 740.939,666.063 741.498,656.861 742.057,658.481 742.617,680.674 743.176,682.565 743.735,656.6 744.294,672.813 744.854,686.843 745.413,654.757 745.972,656.025 746.531,640.608 747.091,643.83 747.65,645.798 748.209,645.641 748.768,664.076 749.328,679.183 749.887,677.028 750.446,693.705 751.005,727.023 751.565,745.288 752.124,712.919 752.683,678.429 753.242,696.556 753.802,665.114 754.361,684.3 754.92,681.941 755.479,712.543 756.039,731.891 756.598,731.871 757.157,715.635 757.716,715.467 758.276,717.719 758.835,733.875 759.394,748.74 759.953,762.075 760.513,758.33 761.072,755.814 761.631,749.464 762.19,727.902 762.75,739.231 763.309,753.495 763.868,750.91 764.427,765.064 764.987,740.471 765.546,723.272 766.105,743.209 766.664,723.842 767.224,741.752 767.783,770.332 768.342,782.905 768.901,767.603 769.461,762.377 770.02,746.828 770.579,710.165 771.138,688.979 771.698,689.909 772.257,693.519 772.816,692.147 773.375,679.041 773.935,682.208 774.494,649.353 775.053,637.139 775.612,640.315 776.172,623.836 776.731,630.804 777.29,633.927 777.849,622.692 778.409,593.043 778.968,615.915 779.527,601.666 780.086,637.454 780.646,653.226 781.205,654.582 781.764,641.425 782.323,645.65 782.883,664.888 783.442,681.4 784.001,683.645 784.56,702.767 785.12,700.882 785.679,670.505 786.238,673.638 786.797,627.008 787.357,632.153 787.916,620.659 788.475,623.869 789.034,623.596 789.594,657.782 790.153,656.414 790.712,658.749 791.271,673.805 791.831,705.403 792.39,717.386 792.949,719.059 793.508,746.651 794.068,727.82 794.627,725.575 795.186,745.084 795.745,775.672 796.305,739.026 796.864,754.083 797.423,765.182 797.982,744.135 798.542,741.068 799.101,741.223 799.66,753.048 800.219,750.894 800.779,745.12 801.338,725.189 801.897,736.482 802.456,717.139 803.016,700.149 803.575,671.682 804.134,641.307 804.693,644.315 805.253,659.414 805.812,666.013 806.371,682.892 806.931,683.823 807.49,681.128 808.049,668.546 808.608,670.14 809.168,655.583 809.727,626.822 810.286,646.007 810.845,619.292 811.405,638.755 811.964,625.842 812.523,646.682 813.082,650.228 813.642,654.796 814.201,656.622 814.76,670.852 815.319,672.597 815.879,656.114 816.438,640.175 816.997,640.129 817.556,694.49 818.116,698.311 818.675,693.301 819.234,729.236 819.793,710.953 820.353,707.891 820.912,737.614 821.471,764.835 822.03,775.9 822.59,772.874 823.149,769.188 823.708,782.487 824.267,794.494 824.827,769.938 825.386,716.048 825.945,701.93 826.504,720.514 827.064,714.998 827.623,711.217 828.182,709.94 828.741,690.908 829.301,752.589 829.86,767.129 830.419,758.416 830.978,720.759 831.538,698.338 832.097,695.827 832.656,693.503 833.215,678.549 833.775,630.495 834.334,635.195 834.893,621.722 835.452,641.375 836.012,627.159 836.571,673.979 837.13,707.223 837.689,704.114 838.249,702.405 838.808,685.725 839.367,635.053 839.926,635.615 840.486,637.883 841.045,656.193 841.604,653.768 842.163,624.691 842.723,646.712 843.282,681.312 843.841,649.064 844.4,636.547 844.96,658.454 845.519,673.012 846.078,687.805 846.637,683.874 847.197,684.697 847.756,668.038 848.315,682.136 848.874,683.142 849.434,697.454 849.993,679.892 850.552,680.592 851.111,678.184 851.671,693.913 852.23,708.878 852.789,739.683 853.348,699.578 853.908,667.413 854.467,621.373 855.026,641.609 855.585,642.28 856.145,628.383 856.704,613.561 857.263,618.535 857.822,606.137 858.382,614.11 858.941,653.109 859.5,669.983 860.059,658.37 860.619,677.56 861.178,648.514 861.737,651.768 862.296,669.684 862.856,655.725 863.415,623.964 863.974,646.663 864.533,615.512 865.093,601.808 865.652,619.804 866.211,627.364 866.77,613.063 867.33,619.699 867.889,622.928 868.448,622.653 869.007,625.994 869.567,646.249 870.126,681.186 870.685,700.928 871.244,704.509 871.804,721.25 872.363,722.187 872.922,720.821 873.481,720.164 874.041,722.885 874.6,738.63 875.159,736.234 875.718,746.757 876.278,710.57 876.837,725.296 877.396,741.515 877.955,771.812 878.515,736.846 879.074,748.269 879.633,731.377 880.192,762.028 880.752,779.785 881.311,773.21 881.87,787.168 882.429,733.787 882.989,735.358 883.548,718.884 884.107,734.213 884.666,748.484 885.226,733.118 885.785,796.337 886.344,795.114 886.903,787.43 887.463,782.427 888.022,763.171 888.581,758.984 889.14,800.106 889.7,796.617 890.259,824.646 890.818,813.436 891.377,791.589 891.937,833.75 892.496,841.052 893.055,830.48 893.614,820.421 894.174,811.112 894.733,787.491 895.292,782.975 895.851,762.462 896.411,745.524 896.97,728.692 897.529,775.18 898.088,770.975 898.648,769.147 899.207,795.015 899.766,824.512 900.325,768.421 900.885,762.945 901.444,758.399 902.003,787.445 902.562,766.54 903.122,743.463 903.681,751.673 904.24,715.713 904.799,714.576 905.359,695.788 905.918,695.771 906.477,711.646 907.036,691.807 907.596,689.151 908.155,685.827 908.714,698.001 909.273,678.169 909.833,678.182 910.392,678.56 910.951,663.409 911.51,661.878 912.07,631.053 912.629,669.664 913.188,669.575 913.747,653.347 914.307,673.088 914.866,675.187 915.425,646.14 915.984,648.831 916.544,634.119 917.103,639.805 917.662,643.015 918.221,660.634 918.781,634.073 919.34,604.668 919.899,622.519 920.458,644.166 921.018,641.61 921.577,663.024 922.136,649.168 922.695,671.471 923.255,671.715 923.814,708.702 924.373,695.417 924.932,758.551 925.492,753.775 926.051,733.899 926.61,714.647 927.169,731.371 927.729,727.898 928.288,741.01 928.847,721.779 929.406,738.635 929.966,736.119 930.525,734.155 931.084,748.767 931.644,744.632 932.203,758.993 932.762,740.345 933.321,717.7 933.881,701.107 934.44,702.495 934.999,699.561 935.558,700.495 936.118,702.145 936.677,702.524 937.236,723.152 937.795,720.393 938.355,707.041 938.914,738.597 939.473,734.814 940.032,718.242 940.592,699.646 941.151,703.241 941.71,702.033 942.269,685.142 942.829,686.22 943.388,670.177 943.947,640.937 944.506,658.709 945.066,692.277 945.625,675.206 946.184,677.669 946.743,663.184 947.303,651.224 947.862,654.512 948.421,654.911 948.98,639.845 949.54,675.639 950.099,689.303 950.658,721.192 951.217,673.66 951.777,690.434 952.336,705.909 952.895,690.743 953.454,706.435 954.014,752.539 954.573,766.118 955.132,777.05 955.691,773.323 956.251,767.693 956.81,779.45 957.369,761.758 957.928,742.25 958.488,702.017 959.047,685.65 959.606,686.485 960.165,671.026 960.725,651.485 961.284,671.316 961.843,673.5 962.402,673.781 962.962,657.225 963.521,675.683 964.08,711.186 964.639,711.054 965.199,744.32 965.758,756.709 966.317,783.655 966.876,762.849 967.436,760.062 967.995,754.795 968.554,779.781 969.113,775.76 969.673,725.253 970.232,735.597 970.791,731.782 971.35,711.362 971.91,723.465 972.469,715.525 973.028,712.287 973.587,724.595 974.147,738.551 974.706,750.757 975.265,761.71 975.824,741.523 976.384,737.799 976.943,736.042 977.502,737.399 978.061,748.294 978.621,764.253 979.18,760.737 979.739,740.258 980.298,720.936 980.858,717.734 981.417,667.782 981.976,687.648 982.535,689.81 983.095,653.933 983.654,671.056 984.213,673.437 984.772,673.962 985.332,640.801 985.891,642.79 986.45,598.495 987.009,601.728 987.569,588.31 988.128,611.593 988.687,599.536 989.246,555.281 989.806,563.268 990.365,567.819 990.924,577.708 991.483,600.891 992.043,605.697 992.602,606.042 993.161,594.583 993.72,619.139 994.28,655.397 994.839,671.822 995.398,672.381 995.957,688.382 996.517,690.852 997.076,693.725 997.635,661.43 998.194,648.541 998.754,666.425 999.313,653.435 999.872,654.432 1000.43,676.954 1000.99,712.629 1001.55,711.975 1002.11,699.738 1002.67,664.84 1003.23,682.964 1003.79,652.149 1004.35,637.161 1004.91,637.832 1005.46,623.533 1006.02,609.171 1006.58,627.604 1007.14,646.412 1007.7,673.79 1008.26,655.079 1008.82,674.443 1009.38,691.439 1009.94,735.841 1010.5,716.036 1011.06,732.891 1011.62,733.908 1012.18,742.901 1012.73,721.748 1013.29,686.31 1013.85,685.726 1014.41,651.676 1014.97,654.801 1015.53,654.758 1016.09,659.766 1016.65,662.64 1017.21,680.407 1017.77,694.819 1018.33,680.782 1018.89,662.845 1019.45,678.338 1020.01,680.126 1020.56,664.647 1021.12,644.208 1021.68,644.617 1022.24,662.492 1022.8,664.088 1023.36,697.302 1023.92,712.944 1024.48,711.397 1025.04,714.514 1025.6,649.733 1026.16,684.756 1026.72,672.313 1027.28,672.118 1027.83,674.549 1028.39,700.852 1028.95,715.665 1029.51,697.655 1030.07,681.945 1030.63,695.872 1031.19,697.035 1031.75,678.373 1032.31,679.469 1032.87,695.352 1033.43,707.106 1033.99,702.955 1034.55,716.903 1035.1,714.309 1035.66,697.506 1036.22,727.96 1036.78,704.349 1037.34,671.685 1037.9,690.544 1038.46,671.575 1039.02,691.172 1039.58,661.841 1040.14,726.463 1040.7,675.719 1041.26,678.476 1041.82,713.512 1042.38,713.953 1042.93,663.349 1043.49,661.721 1044.05,613.418 1044.61,600.248 1045.17,603.812 1045.73,606.1 1046.29,592.853 1046.85,563.955 1047.41,588.089 1047.97,591.037 1048.53,547.146 1049.09,591.169 1049.65,596.957 1050.2,645.88 1050.76,631.796 1051.32,632.599 1051.88,618.608 1052.44,622.144 1053,627.094 1053.56,693.085 1054.12,711.102 1054.68,741.172 1055.24,721.173 1055.8,738.131 1056.36,736.354 1056.92,733.036 1057.48,712.863 1058.03,712.627 1058.59,724.337 1059.15,733.827 1059.71,729.334 1060.27,709.942 1060.83,712.035 1061.39,695.518 1061.95,694.238 1062.51,712.64 1063.07,713.52 1063.63,714.938 1064.19,712.219 1064.75,708.103 1065.3,707.658 1065.86,723.145 1066.42,722.402 1066.98,703.398 1067.54,688.007 1068.1,672.083 1068.66,625.224 1069.22,628.745 1069.78,636.248 1070.34,635.608 1070.9,603.922 1071.46,608.505 1072.02,646.128 1072.57,650.62 1073.13,635.532 1073.69,637.881 1074.25,622.607 1074.81,646.556 1075.37,651.847 1075.93,684.967 1076.49,670.945 1077.05,675.982 1077.61,693.493 1078.17,696.173 1078.73,680.405 1079.29,742.256 1079.85,724.865 1080.4,755.044 1080.96,718.9 1081.52,735.826 1082.08,735.082 1082.64,732.447 1083.2,744.56 1083.76,756.085 1084.32,724.49 1084.88,703.942 1085.44,686.465 1086,704.508 1086.56,685.086 1087.12,665.882 1087.67,702.839 1088.23,688.505 1088.79,704.204 1089.35,717.776 1089.91,736.088 1090.47,738.032 1091.03,734.911 1091.59,763.362 1092.15,772.26 1092.71,767.395 1093.27,745.629 1093.83,756.648 1094.39,739.089 1094.94,770.691 1095.5,735.699 1096.06,717.066 1096.62,715.594 1097.18,745.268 1097.74,724.305 1098.3,689.197 1098.86,690.607 1099.42,722.721 1099.98,768.722 1100.54,778.173 1101.1,772.745 1101.66,750.121 1102.22,729.644 1102.77,771.685 1103.33,768.944 1103.89,733.232 1104.45,727.731 1105.01,743.572 1105.57,708.448 1106.13,721.585 1106.69,701.878 1107.25,754.306 1107.81,732.981 1108.37,745.447 1108.93,728.295 1109.49,711.649 1110.04,709.541 1110.6,709.827 1111.16,754.884 1111.72,704.905 1112.28,719.718 1112.84,718.65 1113.4,730.662 1113.96,684.837 1114.52,698.612 1115.08,699.09 1115.64,697.413 1116.2,678.469 1116.76,677.397 1117.31,692.377 1117.87,689.393 1118.43,686.669 1118.99,670.386 1119.55,671.614 1120.11,672.515 1120.67,704.371 1121.23,684.448 1121.79,669.056 1122.35,687.513 1122.91,701.447 1123.47,732.259 1124.03,730.049 1124.59,677.56 1125.14,644.339 1125.7,629.944 1126.26,650.553 1126.82,651.803 1127.38,619.655 1127.94,626.74 1128.5,630.641 1129.06,632.927 1129.62,638.931 1130.18,622.797 1130.74,610.638 1131.3,568.273 1131.86,559.917 1132.41,534.007 1132.97,523.682 1133.53,566.782 1134.09,560.706 1134.65,569.797 1135.21,560.492 1135.77,633.325 1136.33,623.086 1136.89,640.687 1137.45,628.209 1138.01,649.436 1138.57,650.147 1139.13,683.279 1139.68,697.622 1140.24,730.92 1140.8,728.582 1141.36,706.907 1141.92,721.752 1142.48,724.658 1143.04,726.054 1143.6,690.416 1144.16,706.038 1144.72,703.946 1145.28,734.002 1145.84,732.342 1146.4,729.714 1146.96,741.352 1147.51,706.544 1148.07,657.702 1148.63,679.702 1149.19,678.981 1149.75,710.437 1150.31,691.568 1150.87,706.358 1151.43,736.335 1151.99,734.006 1152.55,731.156 1153.11,712.545 1153.67,739.602 1154.23,717.903 1154.78,702.304 1155.34,704.08 1155.9,688.026 1156.46,704.188 1157.02,670.546 1157.58,688.211 1158.14,691.043 1158.7,659.633 1159.26,647.62 1159.82,630.804 1160.38,646.146 1160.94,680.322 1161.5,711.585 1162.05,674.978 1162.61,657.024 1163.17,659.395 1163.73,642.889 1164.29,645.152 1164.85,662.843 1165.41,711.891 1165.97,674.72 1166.53,660.089 1167.09,710.693 1167.65,692.099 1168.21,688.958 1168.77,690.647 1169.33,661.642 1169.88,648.299 1170.44,668.18 1171,670.864 1171.56,668.805 1172.12,653.08 1172.68,644.974 1173.24,615.805 1173.8,619.669 1174.36,608.281 1174.92,662.627 1175.48,679.871 1176.04,680.938 1176.6,683.291 1177.15,689.265 1177.71,707.825 1178.27,706.462 1178.83,720.411 1179.39,721.452 1179.95,684.925 1180.51,698.574 1181.07,697.53 1181.63,694.804 1182.19,708.325 1182.75,708.102 1183.31,708.304 1183.87,705.105 1184.43,653.742 1184.98,639.987 1185.54,610.234 1186.1,632.987 1186.66,652.871 1187.22,651.461 1187.78,683.951 1188.34,680.615 1188.9,695.417 1189.46,715.126 1190.02,730.791 1190.58,676.62 1191.14,676.427 1191.7,695.673 1192.25,662.612 1192.81,647.779 1193.37,650.366 1193.93,649.843 1194.49,669.462 1195.05,636.259 1195.61,639.733 1196.17,659.893 1196.73,674.729 1197.29,723.529 1197.85,738.045 1198.41,734.874 1198.97,718.436 1199.52,731.246 1200.08,728.501 1200.64,727.441 1201.2,710.253 1201.76,723.305 1202.32,735.804 1202.88,716.279 1203.44,714.227 1204,743.692 1204.56,724.914 1205.12,690.816 1205.68,722.343 1206.24,701.79 1206.8,702.026 1207.35,701.492 1207.91,669.281 1208.47,669.467 1209.03,674.114 1209.59,655.558 1210.15,640.477 1210.71,691.939 1211.27,678.285 1211.83,663.545 1212.39,650.056 1212.95,618.146 1213.51,622.164 1214.07,652.956 1214.62,638.525 1215.18,669.696 1215.74,656.58 1216.3,673.346 1216.86,689.948 1217.42,640.911 1217.98,630.347 1218.54,634.897 1219.1,619.762 1219.66,637.393 1220.22,615.161 1220.78,634.883 1221.34,671.253 1221.89,638.182 1222.45,642.172 1223.01,657.084 1223.57,658.41 1224.13,673.316 1224.69,657.758 1225.25,640.701 1225.81,676.363 1226.37,692.829 1226.93,677.03 1227.49,675.607 1228.05,690.242 1228.61,659.412 1229.17,645.172 1229.72,645.32 1230.28,646.115 1230.84,647.889 1231.4,677.463 1231.96,677.405 1232.52,691.926 1233.08,724.036 1233.64,689.267 1234.2,705.083 1234.76,704.177 1235.32,703.288 1235.88,682.748 1236.44,683.261 1236.99,664.601 1237.55,648.106 1238.11,646.252 1238.67,664.088 1239.23,664.496 1239.79,664.958 1240.35,696.8 1240.91,777.544 1241.47,771.883 1242.03,768.487 1242.59,748.037 1243.15,742.256 1243.71,734.42 1244.26,714.998 1244.82,727.233 1245.38,722.075 1245.94,750.43 1246.5,779.862 1247.06,741.49 1247.62,739.277 1248.18,737.707 1248.74,717.049 1249.3,697.053 1249.86,678.561 1250.42,677.603 1250.98,691.982 1251.54,661.531 1252.09,617.195 1252.65,603.538 1253.21,592.811 1253.77,614.146 1254.33,633.813 1254.89,623.848 1255.45,644.531 1256.01,662.146 1256.57,682.911 1257.13,729.94 1257.69,727.96 1258.25,691.519 1258.81,705.054 1259.36,671.124 1259.92,689.232 1260.48,708.474 1261.04,690.53 1261.6,707.265 1262.16,721.596 1262.72,735.529 1263.28,719.12 1263.84,748.872 1264.4,745.733 1264.96,774.921 1265.52,782.677 1266.08,758.678 1266.63,755.24 1267.19,751.413 1267.75,720.004 1268.31,686.549 1268.87,700.728 1269.43,670.187 1269.99,670.978 1270.55,674.619 1271.11,658.56 1271.67,675.111 1272.23,691.661 1272.79,706.084 1273.35,689.501 1273.91,690.913 1274.46,674.338 1275.02,673.071 1275.58,670.779 1276.14,658.672 1276.7,660.775 1277.26,664.28 1277.82,654.97 1278.38,670.681 1278.94,623.73 1279.5,597.587 1280.06,618.777 1280.62,653.027 1281.18,651.192 1281.73,670.506 1282.29,685.873 1282.85,669.583 1283.41,684.618 1283.97,697.352 1284.53,715.138 1285.09,696.572 1285.65,711.569 1286.21,679.944 1286.77,664.329 1287.33,662.227 1287.89,665.228 1288.45,665.165 1289,667.307 1289.56,670.603 1290.12,726.17 1290.68,706.223 1291.24,703.283 1291.8,650.735 1292.36,665.426 1292.92,682.409 1293.48,683.907 1294.04,685.401 1294.6,699.732 1295.16,681.916 1295.72,683.726 1296.28,683.727 1296.83,696.967 1297.39,663.368 1297.95,669.02 1298.51,720.089 1299.07,704.287 1299.63,737.026 1300.19,718.332 1300.75,715.571 1301.31,716.986 1301.87,719.018 1302.43,702.934 1302.99,655.05 1303.55,640.044 1304.1,643.362 1304.66,660.445 1305.22,662.811 1305.78,665.666 1306.34,699.791 1306.9,712.53 1307.46,712.24 1308.02,726.447 1308.58,740.213 1309.14,686.597 1309.7,653.504 1310.26,626.297 1310.82,634.448 1311.38,652.36 1311.93,635.472 1312.49,622.605 1313.05,642.652 1313.61,676.108 1314.17,676.309 1314.73,661.711 1315.29,676.553 1315.85,673.31 1316.41,691.832 1316.97,707.773 1317.53,686.575 1318.09,666.228 1318.65,680.969 1319.2,696.787 1319.76,697.896 1320.32,699.54 1320.88,665.746 1321.44,681.508 1322,654.337 1322.56,656.916 1323.12,643.31 1323.68,628.774 1324.24,665.65 1324.8,681.828 1325.36,684.173 1325.92,685.245 1326.47,690.189 1327.03,661.253 1327.59,650.813 1328.15,625.428 1328.71,626.229 1329.27,598.696 1329.83,621.677 1330.39,608.872 1330.95,642.986 1331.51,644.478 1332.07,666.56 1332.63,651.922 1333.19,636.178 1333.75,671.836 1334.3,689.99 1334.86,687.304 1335.42,716.895 1335.98,681.618 1336.54,697.373 1337.1,711.776 1337.66,724.799 1338.22,725.663 1338.78,724.661 1339.34,721.723 1339.9,735.146 1340.46,732.762 1341.02,701.431 1341.57,682.719 1342.13,684.102 1342.69,698.067 1343.25,700.502 1343.81,699.881 1344.37,713.102 1344.93,709.723 1345.49,722.499 1346.05,670.069 1346.61,674.468 1347.17,676.898 1347.73,696.489 1348.29,679.657 1348.84,664.36 1349.4,667.018 1349.96,697.642 1350.52,712.605 1351.08,693.198 1351.64,658.394 1352.2,645.523 1352.76,648.381 1353.32,666.912 1353.88,701.963 1354.44,681.024 1355,677.285 1355.56,681.299 1356.12,680.584 1356.67,645.323 1357.23,630.582 1357.79,665.054 1358.35,681.291 1358.91,714.552 1359.47,699.264 1360.03,700.65 1360.59,714.256 1361.15,682.175 1361.71,683.893 1362.27,619.837 1362.83,654.098 1363.39,654.514 1363.94,691.679 1364.5,691.586 1365.06,689.614 1365.62,693.231 1366.18,624.814 1366.74,628.026 1367.3,634.738 1367.86,620.042 1368.42,607.788 1368.98,625.641 1369.54,626.876 1370.1,614.18 1370.66,601.967 1371.21,624.777 1371.77,629.095 1372.33,633.576 1372.89,668.401 1373.45,684.228 1374.01,748.899 1374.57,764.544 1375.13,759.221 1375.69,753.832 1376.25,718.089 1376.81,683.633 1377.37,701.505 1377.93,653.471 1378.49,660.313 1379.04,678.004 1379.6,691.583 1380.16,677.016 1380.72,708.983 1381.28,692.715 1381.84,691.486 1382.4,709.017 1382.96,677.224 1383.52,678.23 1384.08,694.48 1384.64,676.466 1385.2,659.005 1385.76,661.614 1386.31,661.058 1386.87,644.871 1387.43,649.403 1387.99,669.225 1388.55,668.944 1389.11,704.241 1389.67,718.109 1390.23,717.543 1390.79,701.145 1391.35,700.667 1391.91,668.228 1392.47,682.77 1393.03,664.979 1393.58,701.998 1394.14,703.327 1394.7,718.04 1395.26,687.36 1395.82,706.528 1396.38,690.547 1396.94,675.94 1397.5,695.188 1398.06,695.01 1398.62,709.554 1399.18,706.976 1399.74,722.632 1400.3,749.998 1400.86,715.593 1401.41,714.463 1401.97,697.278 1402.53,725.426 1403.09,744.006 1403.65,740.899 1404.21,740.397 1404.77,753.102 1405.33,764.402 1405.89,758.898 1406.45,756.576 1407.01,750.933 1407.57,745.606 1408.13,740.833 1408.68,738.628 1409.24,718.349 1409.8,714.219 1410.36,759.385 1410.92,720.811 1411.48,733.965 1412.04,713.636 1412.6,661.378 1413.16,674.954 1413.72,674.335 1414.28,674.15 1414.84,660.415 1415.4,646.258 1415.95,631.975 1416.51,634.74 1417.07,668.402 1417.63,665.431 1418.19,681.578 1418.75,649.919 1419.31,686.083 1419.87,683.552 1420.43,684.511 1420.99,654.519 1421.55,669.573 1422.11,674.899 1422.67,689.483 1423.23,690.261 1423.78,677.012 1424.34,676.521 1424.9,676.865 1425.46,710.138 1426.02,742.732 1426.58,720.793 1427.14,698.674 1427.7,714.033 1428.26,711.034 1428.82,711.873 1429.38,696.277 1429.94,647.568 1430.5,665.45 1431.05,686.678 1431.61,702.452 1432.17,714.62 1432.73,707.625 1433.29,672.564 1433.85,655.248 1434.41,656.467 1434.97,655.309 1435.53,690.462 1436.09,689.942 1436.65,672.203 1437.21,672.808 1437.77,659.548 1438.33,660.249 1438.88,694.852 1439.44,711.85 1440,696.924 1440.56,713.689 1441.12,713.751 1441.68,711.155 1442.24,726.092 1442.8,723.033 1443.36,720.916 1443.92,717.591 1444.48,717.567 1445.04,715.294 1445.6,696.096 1446.15,710.526 1446.71,678.006 1447.27,678.118 1447.83,643.489 1448.39,662.537 1448.95,661.822 1449.51,662.985 1450.07,661.894 1450.63,631.131 1451.19,597.92 1451.75,633.507 1452.31,633.433 1452.87,653.172 1453.42,620.865 1453.98,622.312 1454.54,640.014 1455.1,672.324 1455.66,689.547 1456.22,709.631 1456.78,706.899 1457.34,708.28 1457.9,673.764 1458.46,643.705 1459.02,628.632 1459.58,637.183 1460.14,674.627 1460.7,672.857 1461.25,674.564 1461.81,678.679 1462.37,681.122 1462.93,683.752 1463.49,668.406 1464.05,669.77 1464.61,667.415 1465.17,649.94 1465.73,650.092 1466.29,649.605 1466.85,650.77 1467.41,633.405 1467.97,651.713 1468.52,651.965 1469.08,669.507 1469.64,687.818 1470.2,685.204 1470.76,667.822 1471.32,732.228 1471.88,694.476 1472.44,692.415 1473,695.857 1473.56,693.845 1474.12,712.393 1474.68,710.704 1475.24,707.767 1475.79,675.41 1476.35,693.651 1476.91,666.159 1477.47,650.643 1478.03,650.56 1478.59,653.82 1479.15,636.841 1479.71,670.88 1480.27,676.641 1480.83,678.569 1481.39,712.66 1481.95,726.716 1482.51,738.814 1483.07,735.766 1483.62,730.943 1484.18,712.456 1484.74,710.446 1485.3,722.688 1485.86,720.884 1486.42,669.199 1486.98,702.013 1487.54,701.011 1488.1,714.849 1488.66,710.246 1489.22,677.234 1489.78,678.239 1490.34,679.44 1490.89,677.529 1491.45,678.717 1492.01,661.494 1492.57,679.212 1493.13,693.769 1493.69,711.468 1494.25,744.32 1494.81,774.395 1495.37,741.761 1495.93,704.295 1496.49,753.511 1497.05,748.248 1497.61,731.058 1498.16,710.927 1498.72,656.976 1499.28,659.102 1499.84,680.119 1500.4,662.136 1500.96,648.165 1501.52,651.811 1502.08,654.153 1502.64,643.254 1503.2,627.841 1503.76,646.023 1504.32,647.924 1504.88,668.333 1505.44,637.448 1505.99,621.989 1506.55,625.743 1507.11,626.944 1507.67,617.185 1508.23,602.717 1508.79,654.658 1509.35,640.517 1509.91,610.214 1510.47,582.054 1511.03,590.282 1511.59,560.456 1512.15,583.422 1512.71,606.913 1513.26,610.647 1513.82,660.799 1514.38,677.853 1514.94,679.642 1515.5,696.079 1516.06,665.258 1516.62,681.876 1517.18,633.414 1517.74,638.798 1518.3,657.995 1518.86,642.104 1519.42,627.342 1519.98,628.159 1520.53,632.042 1521.09,633.752 1521.65,636.477 1522.21,637.494 1522.77,607.708 1523.33,614.173 1523.89,616.535 1524.45,636.921 1525.01,641.05 1525.57,660.399 1526.13,709.977 1526.69,741.699 1527.25,738.996 1527.81,749.927 1528.36,733.221 1528.92,743.066 1529.48,752.988 1530.04,746.969 1530.6,760.878 1531.16,742.624 1531.72,751.904 1532.28,747.712 1532.84,764.623 1533.4,775.996 1533.96,756.19 1534.52,739.698 1535.08,739.14 1535.63,741.23 1536.19,721.156 1536.75,733.505 1537.31,746.194 1537.87,809.883 1538.43,805.186 1538.99,785.53 1539.55,780.309 1540.11,758.807 1540.67,723.784 1541.23,706.633 1541.79,719.628 1542.35,719.9 1542.9,716.065 1543.46,678.345 1544.02,694.166 1544.58,709.881 1545.14,689.908 1545.7,690.212 1546.26,709.097 1546.82,707.91 1547.38,721.92 1547.94,718.22 1548.5,703.395 1549.06,699.516 1549.62,680.567 1550.18,681.769 1550.73,681.479 1551.29,695.488 1551.85,695.203 1552.41,693.023 1552.97,644.102 1553.53,627.773 1554.09,613.687 1554.65,617.972 1555.21,639.577 1555.77,642.904 1556.33,646.215 1556.89,648.213 1557.45,681.64 1558,647.741 1558.56,648.046 1559.12,681.461 1559.68,663.221 1560.24,681.51 1560.8,664.769 1561.36,666.797 1561.92,669.785 1562.48,702.766 1563.04,651.797 1563.6,653.272 1564.16,637.756 1564.72,638.081 1565.28,640.477 1565.83,593.679 1566.39,616.607 1566.95,617.774 1567.51,590.105 1568.07,597.171 1568.63,601.792 1569.19,591.031 1569.75,595.463 1570.31,618.638 1570.87,658.429 1571.43,693.971 1571.99,675.448 1572.55,675.178 1573.1,691.78 1573.66,657.918 1574.22,659.081 1574.78,658.5 1575.34,642.934 1575.9,650.503 1576.46,652.176 1577.02,671.634 1577.58,701.192 1578.14,716.28 1578.7,748.391 1579.26,763.39 1579.82,775.785 1580.37,787.651 1580.93,778.956 1581.49,773.166 1582.05,789.921 1582.61,784.617 1583.17,779.732 1583.73,791.12 1584.29,789.754 1584.85,785.169 1585.41,781.349 1585.97,763.446 1586.53,727.831 1587.09,708.797 1587.65,706.818 1588.2,723.459 1588.76,704.372 1589.32,707.045 1589.88,686.614 1590.44,719.472 1591,748.346 1591.56,761.536 1592.12,758.727 1592.68,755.373 1593.24,750.663 1593.8,760.543 1594.36,723.902 1594.92,735.321 1595.47,719.195 1596.03,729.846 1596.59,728.372 1597.15,726.478 1597.71,754.344 1598.27,732.094 1598.83,729.22 1599.39,682.891 1599.95,684.497 1600.51,698.48 1601.07,679.784 1601.63,665.333 1602.19,647.532 1602.74,630.66 1603.3,615.97 1603.86,619.383 1604.42,608.698 1604.98,612.672 1605.54,617.729 1606.1,668.138 1606.66,651.363 1607.22,649.787 1607.78,650.071 1608.34,668.758 1608.9,685.416 1609.46,702.89 1610.02,735.828 1610.57,717.379 1611.13,700.03 1611.69,715.986 1612.25,715.598 1612.81,698.016 1613.37,714.563 1613.93,678.26 1614.49,678.409 1615.05,675.363 1615.61,674.012 1616.17,670.695 1616.73,636.488 1617.29,636.894 1617.84,655.506 1618.4,640.944 1618.96,610.81 1619.52,615.37 1620.08,631.837 1620.64,620.341 1621.2,627.523 1621.76,612.421 1622.32,647.542 1622.88,649.087 1623.44,651.389 1624,654.612 1624.56,637.698 1625.11,639.231 1625.67,674.471 1626.23,674.806 1626.79,724.201 1627.35,721.749 1627.91,753.74 1628.47,733.124 1629.03,713.784 1629.59,695.582 1630.15,690.431 1630.71,692.723 1631.27,726.658 1631.83,725.299 1632.39,739.634 1632.94,705.133 1633.5,724.108 1634.06,720.085 1634.62,670.967 1635.18,670.984 1635.74,689.221 1636.3,706.282 1636.86,734.954 1637.42,748.589 1637.98,761.509 1638.54,758.304 1639.1,754.314 1639.66,737.118 1640.21,685.965 1640.77,655.909 1641.33,657.984 1641.89,660.629 1642.45,647.231 1643.01,620.264 1643.57,589.264 1644.13,563.475 1644.69,605.39 1645.25,623.043 1645.81,595.213 1646.37,616.309 1646.93,648.035 1647.48,648.557 1648.04,650.324 1648.6,651.264 1649.16,638.665 1649.72,638.319 1650.28,670.539 1650.84,651.902 1651.4,668.626 1651.96,671.897 1652.52,706.483 1653.08,702.902 1653.64,705.991 1654.2,706.169 1654.76,704.01 1655.31,657.714 1655.87,693.258 1656.43,644.469 1656.99,612.581 1657.55,588.469 1658.11,592.675 1658.67,628.366 1659.23,614.902 1659.79,648.542 1660.35,650.709 1660.91,685.319 1661.47,689.997 1662.03,706.942 1662.58,692.693 1663.14,642.276 1663.7,644.978 1664.26,665.613 1664.82,665.7 1665.38,631.391 1665.94,620.528 1666.5,623.843 1667.06,615.561 1667.62,619.828 1668.18,658.956 1668.74,644.662 1669.3,649.241 1669.85,702.991 1670.41,706.819 1670.97,705.005 1671.53,671.772 1672.09,656.124 1672.65,690.258 1673.21,676.467 1673.77,676.186 1674.33,693.292 1674.89,694.227 1675.45,674.577 1676.01,686.013 1676.57,716.999 1677.13,699.582 1677.68,714.078 1678.24,745.211 1678.8,773.111 1679.36,781.789 1679.92,760.895 1680.48,742.515 1681.04,735.121 1681.6,733.426 1682.16,733.104 1682.72,713.983 1683.28,712.62 1683.84,726.363 1684.4,722.008 1684.95,734.261 1685.51,747.834 1686.07,743.047 1686.63,692.05 1687.19,660.093 1687.75,691.475 1688.31,693.998 1688.87,662.167 1689.43,693.012 1689.99,741.533 1690.55,755.471 1691.11,766.555 1691.67,730.808 1692.23,694.5 1692.78,680.698 1693.34,681.093 1693.9,713.122 1694.46,699.374 1695.02,698.081 1695.58,699.621 1696.14,698.325 1696.7,664.529 1697.26,666.355 1697.82,679.883 1698.38,680.836 1698.94,683.549 1699.5,715.255 1700.05,730.877 1700.61,708.665 1701.17,707.196 1701.73,673.77 1702.29,691.791 1702.85,659.892 1703.41,661.674 1703.97,648.161 1704.53,670.418 1705.09,655.318 1705.65,693.667 1706.21,677.465 1706.77,696.711 1707.32,713.199 1707.88,727.238 1708.44,721.787 1709,702.763 1709.56,685.097 1710.12,688.809 1710.68,671.833 1711.24,688.155 1711.8,703.825 1712.36,642.217 1712.92,660.788 1713.48,661.965 1714.04,661.473 1714.6,647.245 1715.15,617.174 1715.71,685.082 1716.27,702.038 1716.83,731.14 1717.39,692.637 1717.95,675.575 1718.51,690.859 1719.07,706.19 1719.63,691.681 1720.19,724.159 1720.75,722.111 1721.31,722.616 1721.87,704.332 1722.42,705.726 1722.98,702.798 1723.54,713.329 1724.1,697.281 1724.66,716.603 1725.22,697.374 1725.78,693.447 1726.34,644.921 1726.9,650.938 1727.46,621.894 1728.02,607.542 1728.58,561.733 1729.14,569.858 1729.69,576.66 1730.25,566.608 1730.81,569.591 1731.37,593.125 1731.93,596.556 1732.49,665.469 1733.05,681.325 1733.61,697.533 1734.17,698.424 1734.73,726.253 1735.29,706.904 1735.85,705.281 1736.41,704.84 1736.97,715.754 1737.52,699.209 1738.08,680.952 1738.64,679.12 1739.2,662.92 1739.76,632.355 1740.32,667.527 1740.88,699.878 1741.44,684.287 1742,702.035 1742.56,686.503 1743.12,702.417 1743.68,683.578 1744.24,683.514 1744.79,684.648 1745.35,699.905 1745.91,684.291 1746.47,654.431 1747.03,671.542 1747.59,673.239 1748.15,626.005 1748.71,630.406 1749.27,648.129 1749.83,649.063 1750.39,635.752 1750.95,669.804 1751.51,688.413 1752.06,686.481 1752.62,668.158 1753.18,665.134 1753.74,668.222 1754.3,669.755 1754.86,654.431 1755.42,651.956 1755.98,653.184 1756.54,671.345 1757.1,686.1 1757.66,699.634 1758.22,664.928 1758.78,669.991 1759.34,669.473 1759.89,697.843 1760.45,728.791 1761.01,727.19 1761.57,757.613 1762.13,768.68 1762.69,782.202 1763.25,744.647 1763.81,739.298 1764.37,736.249 1764.93,731.364 1765.49,694.731 1766.05,690.691 1766.61,706.815 1767.16,705.124 1767.72,716.216 1768.28,727.575 1768.84,710.152 1769.4,674.937 1769.96,656.62 1770.52,658.128 1771.08,645.393 1771.64,647.655 1772.2,616.932 1772.76,617.75 1773.32,636.07 1773.88,670.759 1774.43,685.979 1774.99,703.806 1775.55,703.179 1776.11,701.815 1776.67,699.48 1777.23,652.547 1777.79,676.442 1778.35,675.456 1778.91,678.011 1779.47,691.047 1780.03,690.03 1780.59,660.765 1781.15,646.41 1781.71,634.101 1782.26,604.602 1782.82,641.581 1783.38,626.006 1783.94,613.59 1784.5,650.509 1785.06,633.867 1785.62,621.44 1786.18,625.798 1786.74,582.811 1787.3,575.175 1787.86,580.03 1788.42,583.916 1788.98,637.66 1789.53,656.012 1790.09,656.405 1790.65,657.572 1791.21,642.485 1791.77,660.473 1792.33,663.016 1792.89,715.277 1793.45,746.56 1794.01,775.025 1794.57,789.304 1795.13,799.072 1795.69,779.333 1796.25,823.124 1796.8,801.027 1797.36,815.485 1797.92,778.189 1798.48,772.936 1799.04,753.563 1799.6,733.356 1800.16,696.651 1800.72,650.225 1801.28,651.235 1801.84,685.747 1802.4,689.487 1802.96,707.269 1803.52,709.934 1804.08,739.028 1804.63,722.053 1805.19,688.055 1805.75,706.025 1806.31,721.869 1806.87,720.654 1807.43,703.316 1807.99,720.721 1808.55,703.352 1809.11,683.508 1809.67,698.298 1810.23,681.635 1810.79,699.557 1811.35,699.142 1811.9,697.471 1812.46,683.622 1813.02,685.924 1813.58,671.892 1814.14,673.78 1814.7,690.703 1815.26,695.328 1815.82,697.733 1816.38,695.798 1816.94,707.85 1817.5,769.975 1818.06,732.66 1818.62,729.96 1819.18,742.531 1819.73,738.188 1820.29,736.811 1820.85,681.867 1821.41,664.95 1821.97,665.073 1822.53,684.048 1823.09,682.927 1823.65,634.414 1824.21,666.555 1824.77,650.059 1825.33,683.101 1825.89,715.282 1826.45,746.296 1827,779.539 1827.56,756.538 1828.12,784.107 1828.68,765.055 1829.24,757.417 1829.8,770.723 1830.36,766.711 1830.92,776.354 1831.48,786.201 1832.04,778.642 1832.6,775.323 1833.16,777.338 1833.72,773.324 1834.27,801.213 1834.83,796.399 1835.39,806.672 1835.95,785.356 1836.51,779.989 1837.07,776.713 1837.63,755.362 1838.19,753.444 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 690.81 L720.806 690.81 L721.365 690.81 L721.924 690.81 L722.484 690.81 L723.043 690.81 L723.602 690.81 L724.161 690.81 L724.721 690.81 L725.28 690.81 L725.839 690.81 L726.398 690.81 L726.958 690.81 L727.517 690.81 L728.076 690.81 L728.635 690.81 L729.195 690.81 L729.754 690.81 L730.313 690.81 L730.872 690.81 L731.432 690.81 L731.991 690.81 L732.55 690.81 L733.109 690.81 L733.669 690.81 L734.228 690.81 L734.787 690.81 L735.346 690.81 L735.906 690.81 L736.465 690.81 L737.024 690.81 L737.583 690.81 L738.143 690.81 L738.702 690.81 L739.261 690.81 L739.82 690.81 L740.38 690.81 L740.939 690.81 L741.498 690.81 L742.057 690.81 L742.617 690.81 L743.176 690.81 L743.735 690.81 L744.294 690.81 L744.854 690.81 L745.413 690.81 L745.972 690.81 L746.531 690.81 L747.091 690.81 L747.65 690.81 L748.209 690.81 L748.768 690.81 L749.328 690.81 L749.887 690.81 L750.446 690.81 L751.005 690.81 L751.565 690.81 L752.124 690.81 L752.683 690.81 L753.242 690.81 L753.802 690.81 L754.361 690.81 L754.92 690.81 L755.479 690.81 L756.039 690.81 L756.598 690.81 L757.157 690.81 L757.716 690.81 L758.276 690.81 L758.835 690.81 L759.394 690.81 L759.953 690.81 L760.513 690.81 L761.072 690.81 L761.631 690.81 L762.19 690.81 L762.75 690.81 L763.309 690.81 L763.868 690.81 L764.427 690.81 L764.987 690.81 L765.546 690.81 L766.105 690.81 L766.664 690.81 L767.224 690.81 L767.783 690.81 L768.342 690.81 L768.901 690.81 L769.461 690.81 L770.02 690.81 L770.579 690.81 L771.138 690.81 L771.698 690.81 L772.257 690.81 L772.816 690.81 L773.375 690.81 L773.935 690.81 L774.494 690.81 L775.053 690.81 L775.612 690.81 L776.172 690.81 L776.731 690.81 L777.29 690.81 L777.849 690.81 L778.409 690.81 L778.968 690.81 L779.527 690.81 L780.086 690.81 L780.646 690.81 L781.205 690.81 L781.764 690.81 L782.323 690.81 L782.883 690.81 L783.442 690.81 L784.001 690.81 L784.56 690.81 L785.12 690.81 L785.679 690.81 L786.238 690.81 L786.797 690.81 L787.357 690.81 L787.916 690.81 L788.475 690.81 L789.034 690.81 L789.594 690.81 L790.153 690.81 L790.712 690.81 L791.271 690.81 L791.831 690.81 L792.39 690.81 L792.949 690.81 L793.508 690.81 L794.068 690.81 L794.627 690.81 L795.186 690.81 L795.745 690.81 L796.305 690.81 L796.864 690.81 L797.423 690.81 L797.982 690.81 L798.542 690.81 L799.101 690.81 L799.66 690.81 L800.219 690.81 L800.779 690.81 L801.338 690.81 L801.897 690.81 L802.456 690.81 L803.016 690.81 L803.575 690.81 L804.134 690.81 L804.693 690.81 L805.253 690.81 L805.812 690.81 L806.371 690.81 L806.931 690.81 L807.49 690.81 L808.049 690.81 L808.608 690.81 L809.168 690.81 L809.727 690.81 L810.286 690.81 L810.845 690.81 L811.405 690.81 L811.964 690.81 L812.523 690.81 L813.082 690.81 L813.642 690.81 L814.201 690.81 L814.76 690.81 L815.319 690.81 L815.879 690.81 L816.438 690.81 L816.997 690.81 L817.556 690.81 L818.116 690.81 L818.675 690.81 L819.234 690.81 L819.793 690.81 L820.353 690.81 L820.912 690.81 L821.471 690.81 L822.03 690.81 L822.59 690.81 L823.149 690.81 L823.708 690.81 L824.267 690.81 L824.827 690.81 L825.386 690.81 L825.945 690.81 L826.504 690.81 L827.064 690.81 L827.623 690.81 L828.182 690.81 L828.741 690.81 L829.301 690.81 L829.86 690.81 L830.419 690.81 L830.978 690.81 L831.538 690.81 L832.097 690.81 L832.656 690.81 L833.215 690.81 L833.775 690.81 L834.334 690.81 L834.893 690.81 L835.452 690.81 L836.012 690.81 L836.571 690.81 L837.13 690.81 L837.689 690.81 L838.249 690.81 L838.808 690.81 L839.367 690.81 L839.926 690.81 L840.486 690.81 L841.045 690.81 L841.604 690.81 L842.163 690.81 L842.723 690.81 L843.282 690.81 L843.841 690.81 L844.4 690.81 L844.96 690.81 L845.519 690.81 L846.078 690.81 L846.637 690.81 L847.197 690.81 L847.756 690.81 L848.315 690.81 L848.874 690.81 L849.434 690.81 L849.993 690.81 L850.552 690.81 L851.111 690.81 L851.671 690.81 L852.23 690.81 L852.789 690.81 L853.348 690.81 L853.908 690.81 L854.467 690.81 L855.026 690.81 L855.585 690.81 L856.145 690.81 L856.704 690.81 L857.263 690.81 L857.822 690.81 L858.382 690.81 L858.941 690.81 L859.5 690.81 L860.059 690.81 L860.619 690.81 L861.178 690.81 L861.737 690.81 L862.296 690.81 L862.856 690.81 L863.415 690.81 L863.974 690.81 L864.533 690.81 L865.093 690.81 L865.652 690.81 L866.211 690.81 L866.77 690.81 L867.33 690.81 L867.889 690.81 L868.448 690.81 L869.007 690.81 L869.567 690.81 L870.126 690.81 L870.685 690.81 L871.244 690.81 L871.804 690.81 L872.363 690.81 L872.922 690.81 L873.481 690.81 L874.041 690.81 L874.6 690.81 L875.159 690.81 L875.718 690.81 L876.278 690.81 L876.837 690.81 L877.396 690.81 L877.955 690.81 L878.515 690.81 L879.074 690.81 L879.633 690.81 L880.192 690.81 L880.752 690.81 L881.311 690.81 L881.87 690.81 L882.429 690.81 L882.989 690.81 L883.548 690.81 L884.107 690.81 L884.666 690.81 L885.226 690.81 L885.785 690.81 L886.344 690.81 L886.903 690.81 L887.463 690.81 L888.022 690.81 L888.581 690.81 L889.14 690.81 L889.7 690.81 L890.259 690.81 L890.818 690.81 L891.377 690.81 L891.937 690.81 L892.496 690.81 L893.055 690.81 L893.614 690.81 L894.174 690.81 L894.733 690.81 L895.292 690.81 L895.851 690.81 L896.411 690.81 L896.97 690.81 L897.529 690.81 L898.088 690.81 L898.648 690.81 L899.207 690.81 L899.766 690.81 L900.325 690.81 L900.885 690.81 L901.444 690.81 L902.003 690.81 L902.562 690.81 L903.122 690.81 L903.681 690.81 L904.24 690.81 L904.799 690.81 L905.359 690.81 L905.918 690.81 L906.477 690.81 L907.036 690.81 L907.596 690.81 L908.155 690.81 L908.714 690.81 L909.273 690.81 L909.833 690.81 L910.392 690.81 L910.951 690.81 L911.51 690.81 L912.07 690.81 L912.629 690.81 L913.188 690.81 L913.747 690.81 L914.307 690.81 L914.866 690.81 L915.425 690.81 L915.984 690.81 L916.544 690.81 L917.103 690.81 L917.662 690.81 L918.221 690.81 L918.781 690.81 L919.34 690.81 L919.899 690.81 L920.458 690.81 L921.018 690.81 L921.577 690.81 L922.136 690.81 L922.695 690.81 L923.255 690.81 L923.814 690.81 L924.373 690.81 L924.932 690.81 L925.492 690.81 L926.051 690.81 L926.61 690.81 L927.169 690.81 L927.729 690.81 L928.288 690.81 L928.847 690.81 L929.406 690.81 L929.966 690.81 L930.525 690.81 L931.084 690.81 L931.644 690.81 L932.203 690.81 L932.762 690.81 L933.321 690.81 L933.881 690.81 L934.44 690.81 L934.999 690.81 L935.558 690.81 L936.118 690.81 L936.677 690.81 L937.236 690.81 L937.795 690.81 L938.355 690.81 L938.914 690.81 L939.473 690.81 L940.032 690.81 L940.592 690.81 L941.151 690.81 L941.71 690.81 L942.269 690.81 L942.829 690.81 L943.388 690.81 L943.947 690.81 L944.506 690.81 L945.066 690.81 L945.625 690.81 L946.184 690.81 L946.743 690.81 L947.303 690.81 L947.862 690.81 L948.421 690.81 L948.98 690.81 L949.54 690.81 L950.099 690.81 L950.658 690.81 L951.217 690.81 L951.777 690.81 L952.336 690.81 L952.895 690.81 L953.454 690.81 L954.014 690.81 L954.573 690.81 L955.132 690.81 L955.691 690.81 L956.251 690.81 L956.81 690.81 L957.369 690.81 L957.928 690.81 L958.488 690.81 L959.047 690.81 L959.606 690.81 L960.165 690.81 L960.725 690.81 L961.284 690.81 L961.843 690.81 L962.402 690.81 L962.962 690.81 L963.521 690.81 L964.08 690.81 L964.639 690.81 L965.199 690.81 L965.758 690.81 L966.317 690.81 L966.876 690.81 L967.436 690.81 L967.995 690.81 L968.554 690.81 L969.113 690.81 L969.673 690.81 L970.232 690.81 L970.791 690.81 L971.35 690.81 L971.91 690.81 L972.469 690.81 L973.028 690.81 L973.587 690.81 L974.147 690.81 L974.706 690.81 L975.265 690.81 L975.824 690.81 L976.384 690.81 L976.943 690.81 L977.502 690.81 L978.061 690.81 L978.621 690.81 L979.18 690.81 L979.739 690.81 L980.298 690.81 L980.858 690.81 L981.417 690.81 L981.976 690.81 L982.535 690.81 L983.095 690.81 L983.654 690.81 L984.213 690.81 L984.772 690.81 L985.332 690.81 L985.891 690.81 L986.45 690.81 L987.009 690.81 L987.569 690.81 L988.128 690.81 L988.687 690.81 L989.246 690.81 L989.806 690.81 L990.365 690.81 L990.924 690.81 L991.483 690.81 L992.043 690.81 L992.602 690.81 L993.161 690.81 L993.72 690.81 L994.28 690.81 L994.839 690.81 L995.398 690.81 L995.957 690.81 L996.517 690.81 L997.076 690.81 L997.635 690.81 L998.194 690.81 L998.754 690.81 L999.313 690.81 L999.872 690.81 L1000.43 690.81 L1000.99 690.81 L1001.55 690.81 L1002.11 690.81 L1002.67 690.81 L1003.23 690.81 L1003.79 690.81 L1004.35 690.81 L1004.91 690.81 L1005.46 690.81 L1006.02 690.81 L1006.58 690.81 L1007.14 690.81 L1007.7 690.81 L1008.26 690.81 L1008.82 690.81 L1009.38 690.81 L1009.94 690.81 L1010.5 690.81 L1011.06 690.81 L1011.62 690.81 L1012.18 690.81 L1012.73 690.81 L1013.29 690.81 L1013.85 690.81 L1014.41 690.81 L1014.97 690.81 L1015.53 690.81 L1016.09 690.81 L1016.65 690.81 L1017.21 690.81 L1017.77 690.81 L1018.33 690.81 L1018.89 690.81 L1019.45 690.81 L1020.01 690.81 L1020.56 690.81 L1021.12 690.81 L1021.68 690.81 L1022.24 690.81 L1022.8 690.81 L1023.36 690.81 L1023.92 690.81 L1024.48 690.81 L1025.04 690.81 L1025.6 690.81 L1026.16 690.81 L1026.72 690.81 L1027.28 690.81 L1027.83 690.81 L1028.39 690.81 L1028.95 690.81 L1029.51 690.81 L1030.07 690.81 L1030.63 690.81 L1031.19 690.81 L1031.75 690.81 L1032.31 690.81 L1032.87 690.81 L1033.43 690.81 L1033.99 690.81 L1034.55 690.81 L1035.1 690.81 L1035.66 690.81 L1036.22 690.81 L1036.78 690.81 L1037.34 690.81 L1037.9 690.81 L1038.46 690.81 L1039.02 690.81 L1039.58 690.81 L1040.14 690.81 L1040.7 690.81 L1041.26 690.81 L1041.82 690.81 L1042.38 690.81 L1042.93 690.81 L1043.49 690.81 L1044.05 690.81 L1044.61 690.81 L1045.17 690.81 L1045.73 690.81 L1046.29 690.81 L1046.85 690.81 L1047.41 690.81 L1047.97 690.81 L1048.53 690.81 L1049.09 690.81 L1049.65 690.81 L1050.2 690.81 L1050.76 690.81 L1051.32 690.81 L1051.88 690.81 L1052.44 690.81 L1053 690.81 L1053.56 690.81 L1054.12 690.81 L1054.68 690.81 L1055.24 690.81 L1055.8 690.81 L1056.36 690.81 L1056.92 690.81 L1057.48 690.81 L1058.03 690.81 L1058.59 690.81 L1059.15 690.81 L1059.71 690.81 L1060.27 690.81 L1060.83 690.81 L1061.39 690.81 L1061.95 690.81 L1062.51 690.81 L1063.07 690.81 L1063.63 690.81 L1064.19 690.81 L1064.75 690.81 L1065.3 690.81 L1065.86 690.81 L1066.42 690.81 L1066.98 690.81 L1067.54 690.81 L1068.1 690.81 L1068.66 690.81 L1069.22 690.81 L1069.78 690.81 L1070.34 690.81 L1070.9 690.81 L1071.46 690.81 L1072.02 690.81 L1072.57 690.81 L1073.13 690.81 L1073.69 690.81 L1074.25 690.81 L1074.81 690.81 L1075.37 690.81 L1075.93 690.81 L1076.49 690.81 L1077.05 690.81 L1077.61 690.81 L1078.17 690.81 L1078.73 690.81 L1079.29 690.81 L1079.85 690.81 L1080.4 690.81 L1080.96 690.81 L1081.52 690.81 L1082.08 690.81 L1082.64 690.81 L1083.2 690.81 L1083.76 690.81 L1084.32 690.81 L1084.88 690.81 L1085.44 690.81 L1086 690.81 L1086.56 690.81 L1087.12 690.81 L1087.67 690.81 L1088.23 690.81 L1088.79 690.81 L1089.35 690.81 L1089.91 690.81 L1090.47 690.81 L1091.03 690.81 L1091.59 690.81 L1092.15 690.81 L1092.71 690.81 L1093.27 690.81 L1093.83 690.81 L1094.39 690.81 L1094.94 690.81 L1095.5 690.81 L1096.06 690.81 L1096.62 690.81 L1097.18 690.81 L1097.74 690.81 L1098.3 690.81 L1098.86 690.81 L1099.42 690.81 L1099.98 690.81 L1100.54 690.81 L1101.1 690.81 L1101.66 690.81 L1102.22 690.81 L1102.77 690.81 L1103.33 690.81 L1103.89 690.81 L1104.45 690.81 L1105.01 690.81 L1105.57 690.81 L1106.13 690.81 L1106.69 690.81 L1107.25 690.81 L1107.81 690.81 L1108.37 690.81 L1108.93 690.81 L1109.49 690.81 L1110.04 690.81 L1110.6 690.81 L1111.16 690.81 L1111.72 690.81 L1112.28 690.81 L1112.84 690.81 L1113.4 690.81 L1113.96 690.81 L1114.52 690.81 L1115.08 690.81 L1115.64 690.81 L1116.2 690.81 L1116.76 690.81 L1117.31 690.81 L1117.87 690.81 L1118.43 690.81 L1118.99 690.81 L1119.55 690.81 L1120.11 690.81 L1120.67 690.81 L1121.23 690.81 L1121.79 690.81 L1122.35 690.81 L1122.91 690.81 L1123.47 690.81 L1124.03 690.81 L1124.59 690.81 L1125.14 690.81 L1125.7 690.81 L1126.26 690.81 L1126.82 690.81 L1127.38 690.81 L1127.94 690.81 L1128.5 690.81 L1129.06 690.81 L1129.62 690.81 L1130.18 690.81 L1130.74 690.81 L1131.3 690.81 L1131.86 690.81 L1132.41 690.81 L1132.97 690.81 L1133.53 690.81 L1134.09 690.81 L1134.65 690.81 L1135.21 690.81 L1135.77 690.81 L1136.33 690.81 L1136.89 690.81 L1137.45 690.81 L1138.01 690.81 L1138.57 690.81 L1139.13 690.81 L1139.68 690.81 L1140.24 690.81 L1140.8 690.81 L1141.36 690.81 L1141.92 690.81 L1142.48 690.81 L1143.04 690.81 L1143.6 690.81 L1144.16 690.81 L1144.72 690.81 L1145.28 690.81 L1145.84 690.81 L1146.4 690.81 L1146.96 690.81 L1147.51 690.81 L1148.07 690.81 L1148.63 690.81 L1149.19 690.81 L1149.75 690.81 L1150.31 690.81 L1150.87 690.81 L1151.43 690.81 L1151.99 690.81 L1152.55 690.81 L1153.11 690.81 L1153.67 690.81 L1154.23 690.81 L1154.78 690.81 L1155.34 690.81 L1155.9 690.81 L1156.46 690.81 L1157.02 690.81 L1157.58 690.81 L1158.14 690.81 L1158.7 690.81 L1159.26 690.81 L1159.82 690.81 L1160.38 690.81 L1160.94 690.81 L1161.5 690.81 L1162.05 690.81 L1162.61 690.81 L1163.17 690.81 L1163.73 690.81 L1164.29 690.81 L1164.85 690.81 L1165.41 690.81 L1165.97 690.81 L1166.53 690.81 L1167.09 690.81 L1167.65 690.81 L1168.21 690.81 L1168.77 690.81 L1169.33 690.81 L1169.88 690.81 L1170.44 690.81 L1171 690.81 L1171.56 690.81 L1172.12 690.81 L1172.68 690.81 L1173.24 690.81 L1173.8 690.81 L1174.36 690.81 L1174.92 690.81 L1175.48 690.81 L1176.04 690.81 L1176.6 690.81 L1177.15 690.81 L1177.71 690.81 L1178.27 690.81 L1178.83 690.81 L1179.39 690.81 L1179.95 690.81 L1180.51 690.81 L1181.07 690.81 L1181.63 690.81 L1182.19 690.81 L1182.75 690.81 L1183.31 690.81 L1183.87 690.81 L1184.43 690.81 L1184.98 690.81 L1185.54 690.81 L1186.1 690.81 L1186.66 690.81 L1187.22 690.81 L1187.78 690.81 L1188.34 690.81 L1188.9 690.81 L1189.46 690.81 L1190.02 690.81 L1190.58 690.81 L1191.14 690.81 L1191.7 690.81 L1192.25 690.81 L1192.81 690.81 L1193.37 690.81 L1193.93 690.81 L1194.49 690.81 L1195.05 690.81 L1195.61 690.81 L1196.17 690.81 L1196.73 690.81 L1197.29 690.81 L1197.85 690.81 L1198.41 690.81 L1198.97 690.81 L1199.52 690.81 L1200.08 690.81 L1200.64 690.81 L1201.2 690.81 L1201.76 690.81 L1202.32 690.81 L1202.88 690.81 L1203.44 690.81 L1204 690.81 L1204.56 690.81 L1205.12 690.81 L1205.68 690.81 L1206.24 690.81 L1206.8 690.81 L1207.35 690.81 L1207.91 690.81 L1208.47 690.81 L1209.03 690.81 L1209.59 690.81 L1210.15 690.81 L1210.71 690.81 L1211.27 690.81 L1211.83 690.81 L1212.39 690.81 L1212.95 690.81 L1213.51 690.81 L1214.07 690.81 L1214.62 690.81 L1215.18 690.81 L1215.74 690.81 L1216.3 690.81 L1216.86 690.81 L1217.42 690.81 L1217.98 690.81 L1218.54 690.81 L1219.1 690.81 L1219.66 690.81 L1220.22 690.81 L1220.78 690.81 L1221.34 690.81 L1221.89 690.81 L1222.45 690.81 L1223.01 690.81 L1223.57 690.81 L1224.13 690.81 L1224.69 690.81 L1225.25 690.81 L1225.81 690.81 L1226.37 690.81 L1226.93 690.81 L1227.49 690.81 L1228.05 690.81 L1228.61 690.81 L1229.17 690.81 L1229.72 690.81 L1230.28 690.81 L1230.84 690.81 L1231.4 690.81 L1231.96 690.81 L1232.52 690.81 L1233.08 690.81 L1233.64 690.81 L1234.2 690.81 L1234.76 690.81 L1235.32 690.81 L1235.88 690.81 L1236.44 690.81 L1236.99 690.81 L1237.55 690.81 L1238.11 690.81 L1238.67 690.81 L1239.23 690.81 L1239.79 690.81 L1240.35 690.81 L1240.91 690.81 L1241.47 690.81 L1242.03 690.81 L1242.59 690.81 L1243.15 690.81 L1243.71 690.81 L1244.26 690.81 L1244.82 690.81 L1245.38 690.81 L1245.94 690.81 L1246.5 690.81 L1247.06 690.81 L1247.62 690.81 L1248.18 690.81 L1248.74 690.81 L1249.3 690.81 L1249.86 690.81 L1250.42 690.81 L1250.98 690.81 L1251.54 690.81 L1252.09 690.81 L1252.65 690.81 L1253.21 690.81 L1253.77 690.81 L1254.33 690.81 L1254.89 690.81 L1255.45 690.81 L1256.01 690.81 L1256.57 690.81 L1257.13 690.81 L1257.69 690.81 L1258.25 690.81 L1258.81 690.81 L1259.36 690.81 L1259.92 690.81 L1260.48 690.81 L1261.04 690.81 L1261.6 690.81 L1262.16 690.81 L1262.72 690.81 L1263.28 690.81 L1263.84 690.81 L1264.4 690.81 L1264.96 690.81 L1265.52 690.81 L1266.08 690.81 L1266.63 690.81 L1267.19 690.81 L1267.75 690.81 L1268.31 690.81 L1268.87 690.81 L1269.43 690.81 L1269.99 690.81 L1270.55 690.81 L1271.11 690.81 L1271.67 690.81 L1272.23 690.81 L1272.79 690.81 L1273.35 690.81 L1273.91 690.81 L1274.46 690.81 L1275.02 690.81 L1275.58 690.81 L1276.14 690.81 L1276.7 690.81 L1277.26 690.81 L1277.82 690.81 L1278.38 690.81 L1278.94 690.81 L1279.5 690.81 L1280.06 690.81 L1280.62 690.81 L1281.18 690.81 L1281.73 690.81 L1282.29 690.81 L1282.85 690.81 L1283.41 690.81 L1283.97 690.81 L1284.53 690.81 L1285.09 690.81 L1285.65 690.81 L1286.21 690.81 L1286.77 690.81 L1287.33 690.81 L1287.89 690.81 L1288.45 690.81 L1289 690.81 L1289.56 690.81 L1290.12 690.81 L1290.68 690.81 L1291.24 690.81 L1291.8 690.81 L1292.36 690.81 L1292.92 690.81 L1293.48 690.81 L1294.04 690.81 L1294.6 690.81 L1295.16 690.81 L1295.72 690.81 L1296.28 690.81 L1296.83 690.81 L1297.39 690.81 L1297.95 690.81 L1298.51 690.81 L1299.07 690.81 L1299.63 690.81 L1300.19 690.81 L1300.75 690.81 L1301.31 690.81 L1301.87 690.81 L1302.43 690.81 L1302.99 690.81 L1303.55 690.81 L1304.1 690.81 L1304.66 690.81 L1305.22 690.81 L1305.78 690.81 L1306.34 690.81 L1306.9 690.81 L1307.46 690.81 L1308.02 690.81 L1308.58 690.81 L1309.14 690.81 L1309.7 690.81 L1310.26 690.81 L1310.82 690.81 L1311.38 690.81 L1311.93 690.81 L1312.49 690.81 L1313.05 690.81 L1313.61 690.81 L1314.17 690.81 L1314.73 690.81 L1315.29 690.81 L1315.85 690.81 L1316.41 690.81 L1316.97 690.81 L1317.53 690.81 L1318.09 690.81 L1318.65 690.81 L1319.2 690.81 L1319.76 690.81 L1320.32 690.81 L1320.88 690.81 L1321.44 690.81 L1322 690.81 L1322.56 690.81 L1323.12 690.81 L1323.68 690.81 L1324.24 690.81 L1324.8 690.81 L1325.36 690.81 L1325.92 690.81 L1326.47 690.81 L1327.03 690.81 L1327.59 690.81 L1328.15 690.81 L1328.71 690.81 L1329.27 690.81 L1329.83 690.81 L1330.39 690.81 L1330.95 690.81 L1331.51 690.81 L1332.07 690.81 L1332.63 690.81 L1333.19 690.81 L1333.75 690.81 L1334.3 690.81 L1334.86 690.81 L1335.42 690.81 L1335.98 690.81 L1336.54 690.81 L1337.1 690.81 L1337.66 690.81 L1338.22 690.81 L1338.78 690.81 L1339.34 690.81 L1339.9 690.81 L1340.46 690.81 L1341.02 690.81 L1341.57 690.81 L1342.13 690.81 L1342.69 690.81 L1343.25 690.81 L1343.81 690.81 L1344.37 690.81 L1344.93 690.81 L1345.49 690.81 L1346.05 690.81 L1346.61 690.81 L1347.17 690.81 L1347.73 690.81 L1348.29 690.81 L1348.84 690.81 L1349.4 690.81 L1349.96 690.81 L1350.52 690.81 L1351.08 690.81 L1351.64 690.81 L1352.2 690.81 L1352.76 690.81 L1353.32 690.81 L1353.88 690.81 L1354.44 690.81 L1355 690.81 L1355.56 690.81 L1356.12 690.81 L1356.67 690.81 L1357.23 690.81 L1357.79 690.81 L1358.35 690.81 L1358.91 690.81 L1359.47 690.81 L1360.03 690.81 L1360.59 690.81 L1361.15 690.81 L1361.71 690.81 L1362.27 690.81 L1362.83 690.81 L1363.39 690.81 L1363.94 690.81 L1364.5 690.81 L1365.06 690.81 L1365.62 690.81 L1366.18 690.81 L1366.74 690.81 L1367.3 690.81 L1367.86 690.81 L1368.42 690.81 L1368.98 690.81 L1369.54 690.81 L1370.1 690.81 L1370.66 690.81 L1371.21 690.81 L1371.77 690.81 L1372.33 690.81 L1372.89 690.81 L1373.45 690.81 L1374.01 690.81 L1374.57 690.81 L1375.13 690.81 L1375.69 690.81 L1376.25 690.81 L1376.81 690.81 L1377.37 690.81 L1377.93 690.81 L1378.49 690.81 L1379.04 690.81 L1379.6 690.81 L1380.16 690.81 L1380.72 690.81 L1381.28 690.81 L1381.84 690.81 L1382.4 690.81 L1382.96 690.81 L1383.52 690.81 L1384.08 690.81 L1384.64 690.81 L1385.2 690.81 L1385.76 690.81 L1386.31 690.81 L1386.87 690.81 L1387.43 690.81 L1387.99 690.81 L1388.55 690.81 L1389.11 690.81 L1389.67 690.81 L1390.23 690.81 L1390.79 690.81 L1391.35 690.81 L1391.91 690.81 L1392.47 690.81 L1393.03 690.81 L1393.58 690.81 L1394.14 690.81 L1394.7 690.81 L1395.26 690.81 L1395.82 690.81 L1396.38 690.81 L1396.94 690.81 L1397.5 690.81 L1398.06 690.81 L1398.62 690.81 L1399.18 690.81 L1399.74 690.81 L1400.3 690.81 L1400.86 690.81 L1401.41 690.81 L1401.97 690.81 L1402.53 690.81 L1403.09 690.81 L1403.65 690.81 L1404.21 690.81 L1404.77 690.81 L1405.33 690.81 L1405.89 690.81 L1406.45 690.81 L1407.01 690.81 L1407.57 690.81 L1408.13 690.81 L1408.68 690.81 L1409.24 690.81 L1409.8 690.81 L1410.36 690.81 L1410.92 690.81 L1411.48 690.81 L1412.04 690.81 L1412.6 690.81 L1413.16 690.81 L1413.72 690.81 L1414.28 690.81 L1414.84 690.81 L1415.4 690.81 L1415.95 690.81 L1416.51 690.81 L1417.07 690.81 L1417.63 690.81 L1418.19 690.81 L1418.75 690.81 L1419.31 690.81 L1419.87 690.81 L1420.43 690.81 L1420.99 690.81 L1421.55 690.81 L1422.11 690.81 L1422.67 690.81 L1423.23 690.81 L1423.78 690.81 L1424.34 690.81 L1424.9 690.81 L1425.46 690.81 L1426.02 690.81 L1426.58 690.81 L1427.14 690.81 L1427.7 690.81 L1428.26 690.81 L1428.82 690.81 L1429.38 690.81 L1429.94 690.81 L1430.5 690.81 L1431.05 690.81 L1431.61 690.81 L1432.17 690.81 L1432.73 690.81 L1433.29 690.81 L1433.85 690.81 L1434.41 690.81 L1434.97 690.81 L1435.53 690.81 L1436.09 690.81 L1436.65 690.81 L1437.21 690.81 L1437.77 690.81 L1438.33 690.81 L1438.88 690.81 L1439.44 690.81 L1440 690.81 L1440.56 690.81 L1441.12 690.81 L1441.68 690.81 L1442.24 690.81 L1442.8 690.81 L1443.36 690.81 L1443.92 690.81 L1444.48 690.81 L1445.04 690.81 L1445.6 690.81 L1446.15 690.81 L1446.71 690.81 L1447.27 690.81 L1447.83 690.81 L1448.39 690.81 L1448.95 690.81 L1449.51 690.81 L1450.07 690.81 L1450.63 690.81 L1451.19 690.81 L1451.75 690.81 L1452.31 690.81 L1452.87 690.81 L1453.42 690.81 L1453.98 690.81 L1454.54 690.81 L1455.1 690.81 L1455.66 690.81 L1456.22 690.81 L1456.78 690.81 L1457.34 690.81 L1457.9 690.81 L1458.46 690.81 L1459.02 690.81 L1459.58 690.81 L1460.14 690.81 L1460.7 690.81 L1461.25 690.81 L1461.81 690.81 L1462.37 690.81 L1462.93 690.81 L1463.49 690.81 L1464.05 690.81 L1464.61 690.81 L1465.17 690.81 L1465.73 690.81 L1466.29 690.81 L1466.85 690.81 L1467.41 690.81 L1467.97 690.81 L1468.52 690.81 L1469.08 690.81 L1469.64 690.81 L1470.2 690.81 L1470.76 690.81 L1471.32 690.81 L1471.88 690.81 L1472.44 690.81 L1473 690.81 L1473.56 690.81 L1474.12 690.81 L1474.68 690.81 L1475.24 690.81 L1475.79 690.81 L1476.35 690.81 L1476.91 690.81 L1477.47 690.81 L1478.03 690.81 L1478.59 690.81 L1479.15 690.81 L1479.71 690.81 L1480.27 690.81 L1480.83 690.81 L1481.39 690.81 L1481.95 690.81 L1482.51 690.81 L1483.07 690.81 L1483.62 690.81 L1484.18 690.81 L1484.74 690.81 L1485.3 690.81 L1485.86 690.81 L1486.42 690.81 L1486.98 690.81 L1487.54 690.81 L1488.1 690.81 L1488.66 690.81 L1489.22 690.81 L1489.78 690.81 L1490.34 690.81 L1490.89 690.81 L1491.45 690.81 L1492.01 690.81 L1492.57 690.81 L1493.13 690.81 L1493.69 690.81 L1494.25 690.81 L1494.81 690.81 L1495.37 690.81 L1495.93 690.81 L1496.49 690.81 L1497.05 690.81 L1497.61 690.81 L1498.16 690.81 L1498.72 690.81 L1499.28 690.81 L1499.84 690.81 L1500.4 690.81 L1500.96 690.81 L1501.52 690.81 L1502.08 690.81 L1502.64 690.81 L1503.2 690.81 L1503.76 690.81 L1504.32 690.81 L1504.88 690.81 L1505.44 690.81 L1505.99 690.81 L1506.55 690.81 L1507.11 690.81 L1507.67 690.81 L1508.23 690.81 L1508.79 690.81 L1509.35 690.81 L1509.91 690.81 L1510.47 690.81 L1511.03 690.81 L1511.59 690.81 L1512.15 690.81 L1512.71 690.81 L1513.26 690.81 L1513.82 690.81 L1514.38 690.81 L1514.94 690.81 L1515.5 690.81 L1516.06 690.81 L1516.62 690.81 L1517.18 690.81 L1517.74 690.81 L1518.3 690.81 L1518.86 690.81 L1519.42 690.81 L1519.98 690.81 L1520.53 690.81 L1521.09 690.81 L1521.65 690.81 L1522.21 690.81 L1522.77 690.81 L1523.33 690.81 L1523.89 690.81 L1524.45 690.81 L1525.01 690.81 L1525.57 690.81 L1526.13 690.81 L1526.69 690.81 L1527.25 690.81 L1527.81 690.81 L1528.36 690.81 L1528.92 690.81 L1529.48 690.81 L1530.04 690.81 L1530.6 690.81 L1531.16 690.81 L1531.72 690.81 L1532.28 690.81 L1532.84 690.81 L1533.4 690.81 L1533.96 690.81 L1534.52 690.81 L1535.08 690.81 L1535.63 690.81 L1536.19 690.81 L1536.75 690.81 L1537.31 690.81 L1537.87 690.81 L1538.43 690.81 L1538.99 690.81 L1539.55 690.81 L1540.11 690.81 L1540.67 690.81 L1541.23 690.81 L1541.79 690.81 L1542.35 690.81 L1542.9 690.81 L1543.46 690.81 L1544.02 690.81 L1544.58 690.81 L1545.14 690.81 L1545.7 690.81 L1546.26 690.81 L1546.82 690.81 L1547.38 690.81 L1547.94 690.81 L1548.5 690.81 L1549.06 690.81 L1549.62 690.81 L1550.18 690.81 L1550.73 690.81 L1551.29 690.81 L1551.85 690.81 L1552.41 690.81 L1552.97 690.81 L1553.53 690.81 L1554.09 690.81 L1554.65 690.81 L1555.21 690.81 L1555.77 690.81 L1556.33 690.81 L1556.89 690.81 L1557.45 690.81 L1558 690.81 L1558.56 690.81 L1559.12 690.81 L1559.68 690.81 L1560.24 690.81 L1560.8 690.81 L1561.36 690.81 L1561.92 690.81 L1562.48 690.81 L1563.04 690.81 L1563.6 690.81 L1564.16 690.81 L1564.72 690.81 L1565.28 690.81 L1565.83 690.81 L1566.39 690.81 L1566.95 690.81 L1567.51 690.81 L1568.07 690.81 L1568.63 690.81 L1569.19 690.81 L1569.75 690.81 L1570.31 690.81 L1570.87 690.81 L1571.43 690.81 L1571.99 690.81 L1572.55 690.81 L1573.1 690.81 L1573.66 690.81 L1574.22 690.81 L1574.78 690.81 L1575.34 690.81 L1575.9 690.81 L1576.46 690.81 L1577.02 690.81 L1577.58 690.81 L1578.14 690.81 L1578.7 690.81 L1579.26 690.81 L1579.82 690.81 L1580.37 690.81 L1580.93 690.81 L1581.49 690.81 L1582.05 690.81 L1582.61 690.81 L1583.17 690.81 L1583.73 690.81 L1584.29 690.81 L1584.85 690.81 L1585.41 690.81 L1585.97 690.81 L1586.53 690.81 L1587.09 690.81 L1587.65 690.81 L1588.2 690.81 L1588.76 690.81 L1589.32 690.81 L1589.88 690.81 L1590.44 690.81 L1591 690.81 L1591.56 690.81 L1592.12 690.81 L1592.68 690.81 L1593.24 690.81 L1593.8 690.81 L1594.36 690.81 L1594.92 690.81 L1595.47 690.81 L1596.03 690.81 L1596.59 690.81 L1597.15 690.81 L1597.71 690.81 L1598.27 690.81 L1598.83 690.81 L1599.39 690.81 L1599.95 690.81 L1600.51 690.81 L1601.07 690.81 L1601.63 690.81 L1602.19 690.81 L1602.74 690.81 L1603.3 690.81 L1603.86 690.81 L1604.42 690.81 L1604.98 690.81 L1605.54 690.81 L1606.1 690.81 L1606.66 690.81 L1607.22 690.81 L1607.78 690.81 L1608.34 690.81 L1608.9 690.81 L1609.46 690.81 L1610.02 690.81 L1610.57 690.81 L1611.13 690.81 L1611.69 690.81 L1612.25 690.81 L1612.81 690.81 L1613.37 690.81 L1613.93 690.81 L1614.49 690.81 L1615.05 690.81 L1615.61 690.81 L1616.17 690.81 L1616.73 690.81 L1617.29 690.81 L1617.84 690.81 L1618.4 690.81 L1618.96 690.81 L1619.52 690.81 L1620.08 690.81 L1620.64 690.81 L1621.2 690.81 L1621.76 690.81 L1622.32 690.81 L1622.88 690.81 L1623.44 690.81 L1624 690.81 L1624.56 690.81 L1625.11 690.81 L1625.67 690.81 L1626.23 690.81 L1626.79 690.81 L1627.35 690.81 L1627.91 690.81 L1628.47 690.81 L1629.03 690.81 L1629.59 690.81 L1630.15 690.81 L1630.71 690.81 L1631.27 690.81 L1631.83 690.81 L1632.39 690.81 L1632.94 690.81 L1633.5 690.81 L1634.06 690.81 L1634.62 690.81 L1635.18 690.81 L1635.74 690.81 L1636.3 690.81 L1636.86 690.81 L1637.42 690.81 L1637.98 690.81 L1638.54 690.81 L1639.1 690.81 L1639.66 690.81 L1640.21 690.81 L1640.77 690.81 L1641.33 690.81 L1641.89 690.81 L1642.45 690.81 L1643.01 690.81 L1643.57 690.81 L1644.13 690.81 L1644.69 690.81 L1645.25 690.81 L1645.81 690.81 L1646.37 690.81 L1646.93 690.81 L1647.48 690.81 L1648.04 690.81 L1648.6 690.81 L1649.16 690.81 L1649.72 690.81 L1650.28 690.81 L1650.84 690.81 L1651.4 690.81 L1651.96 690.81 L1652.52 690.81 L1653.08 690.81 L1653.64 690.81 L1654.2 690.81 L1654.76 690.81 L1655.31 690.81 L1655.87 690.81 L1656.43 690.81 L1656.99 690.81 L1657.55 690.81 L1658.11 690.81 L1658.67 690.81 L1659.23 690.81 L1659.79 690.81 L1660.35 690.81 L1660.91 690.81 L1661.47 690.81 L1662.03 690.81 L1662.58 690.81 L1663.14 690.81 L1663.7 690.81 L1664.26 690.81 L1664.82 690.81 L1665.38 690.81 L1665.94 690.81 L1666.5 690.81 L1667.06 690.81 L1667.62 690.81 L1668.18 690.81 L1668.74 690.81 L1669.3 690.81 L1669.85 690.81 L1670.41 690.81 L1670.97 690.81 L1671.53 690.81 L1672.09 690.81 L1672.65 690.81 L1673.21 690.81 L1673.77 690.81 L1674.33 690.81 L1674.89 690.81 L1675.45 690.81 L1676.01 690.81 L1676.57 690.81 L1677.13 690.81 L1677.68 690.81 L1678.24 690.81 L1678.8 690.81 L1679.36 690.81 L1679.92 690.81 L1680.48 690.81 L1681.04 690.81 L1681.6 690.81 L1682.16 690.81 L1682.72 690.81 L1683.28 690.81 L1683.84 690.81 L1684.4 690.81 L1684.95 690.81 L1685.51 690.81 L1686.07 690.81 L1686.63 690.81 L1687.19 690.81 L1687.75 690.81 L1688.31 690.81 L1688.87 690.81 L1689.43 690.81 L1689.99 690.81 L1690.55 690.81 L1691.11 690.81 L1691.67 690.81 L1692.23 690.81 L1692.78 690.81 L1693.34 690.81 L1693.9 690.81 L1694.46 690.81 L1695.02 690.81 L1695.58 690.81 L1696.14 690.81 L1696.7 690.81 L1697.26 690.81 L1697.82 690.81 L1698.38 690.81 L1698.94 690.81 L1699.5 690.81 L1700.05 690.81 L1700.61 690.81 L1701.17 690.81 L1701.73 690.81 L1702.29 690.81 L1702.85 690.81 L1703.41 690.81 L1703.97 690.81 L1704.53 690.81 L1705.09 690.81 L1705.65 690.81 L1706.21 690.81 L1706.77 690.81 L1707.32 690.81 L1707.88 690.81 L1708.44 690.81 L1709 690.81 L1709.56 690.81 L1710.12 690.81 L1710.68 690.81 L1711.24 690.81 L1711.8 690.81 L1712.36 690.81 L1712.92 690.81 L1713.48 690.81 L1714.04 690.81 L1714.6 690.81 L1715.15 690.81 L1715.71 690.81 L1716.27 690.81 L1716.83 690.81 L1717.39 690.81 L1717.95 690.81 L1718.51 690.81 L1719.07 690.81 L1719.63 690.81 L1720.19 690.81 L1720.75 690.81 L1721.31 690.81 L1721.87 690.81 L1722.42 690.81 L1722.98 690.81 L1723.54 690.81 L1724.1 690.81 L1724.66 690.81 L1725.22 690.81 L1725.78 690.81 L1726.34 690.81 L1726.9 690.81 L1727.46 690.81 L1728.02 690.81 L1728.58 690.81 L1729.14 690.81 L1729.69 690.81 L1730.25 690.81 L1730.81 690.81 L1731.37 690.81 L1731.93 690.81 L1732.49 690.81 L1733.05 690.81 L1733.61 690.81 L1734.17 690.81 L1734.73 690.81 L1735.29 690.81 L1735.85 690.81 L1736.41 690.81 L1736.97 690.81 L1737.52 690.81 L1738.08 690.81 L1738.64 690.81 L1739.2 690.81 L1739.76 690.81 L1740.32 690.81 L1740.88 690.81 L1741.44 690.81 L1742 690.81 L1742.56 690.81 L1743.12 690.81 L1743.68 690.81 L1744.24 690.81 L1744.79 690.81 L1745.35 690.81 L1745.91 690.81 L1746.47 690.81 L1747.03 690.81 L1747.59 690.81 L1748.15 690.81 L1748.71 690.81 L1749.27 690.81 L1749.83 690.81 L1750.39 690.81 L1750.95 690.81 L1751.51 690.81 L1752.06 690.81 L1752.62 690.81 L1753.18 690.81 L1753.74 690.81 L1754.3 690.81 L1754.86 690.81 L1755.42 690.81 L1755.98 690.81 L1756.54 690.81 L1757.1 690.81 L1757.66 690.81 L1758.22 690.81 L1758.78 690.81 L1759.34 690.81 L1759.89 690.81 L1760.45 690.81 L1761.01 690.81 L1761.57 690.81 L1762.13 690.81 L1762.69 690.81 L1763.25 690.81 L1763.81 690.81 L1764.37 690.81 L1764.93 690.81 L1765.49 690.81 L1766.05 690.81 L1766.61 690.81 L1767.16 690.81 L1767.72 690.81 L1768.28 690.81 L1768.84 690.81 L1769.4 690.81 L1769.96 690.81 L1770.52 690.81 L1771.08 690.81 L1771.64 690.81 L1772.2 690.81 L1772.76 690.81 L1773.32 690.81 L1773.88 690.81 L1774.43 690.81 L1774.99 690.81 L1775.55 690.81 L1776.11 690.81 L1776.67 690.81 L1777.23 690.81 L1777.79 690.81 L1778.35 690.81 L1778.91 690.81 L1779.47 690.81 L1780.03 690.81 L1780.59 690.81 L1781.15 690.81 L1781.71 690.81 L1782.26 690.81 L1782.82 690.81 L1783.38 690.81 L1783.94 690.81 L1784.5 690.81 L1785.06 690.81 L1785.62 690.81 L1786.18 690.81 L1786.74 690.81 L1787.3 690.81 L1787.86 690.81 L1788.42 690.81 L1788.98 690.81 L1789.53 690.81 L1790.09 690.81 L1790.65 690.81 L1791.21 690.81 L1791.77 690.81 L1792.33 690.81 L1792.89 690.81 L1793.45 690.81 L1794.01 690.81 L1794.57 690.81 L1795.13 690.81 L1795.69 690.81 L1796.25 690.81 L1796.8 690.81 L1797.36 690.81 L1797.92 690.81 L1798.48 690.81 L1799.04 690.81 L1799.6 690.81 L1800.16 690.81 L1800.72 690.81 L1801.28 690.81 L1801.84 690.81 L1802.4 690.81 L1802.96 690.81 L1803.52 690.81 L1804.08 690.81 L1804.63 690.81 L1805.19 690.81 L1805.75 690.81 L1806.31 690.81 L1806.87 690.81 L1807.43 690.81 L1807.99 690.81 L1808.55 690.81 L1809.11 690.81 L1809.67 690.81 L1810.23 690.81 L1810.79 690.81 L1811.35 690.81 L1811.9 690.81 L1812.46 690.81 L1813.02 690.81 L1813.58 690.81 L1814.14 690.81 L1814.7 690.81 L1815.26 690.81 L1815.82 690.81 L1816.38 690.81 L1816.94 690.81 L1817.5 690.81 L1818.06 690.81 L1818.62 690.81 L1819.18 690.81 L1819.73 690.81 L1820.29 690.81 L1820.85 690.81 L1821.41 690.81 L1821.97 690.81 L1822.53 690.81 L1823.09 690.81 L1823.65 690.81 L1824.21 690.81 L1824.77 690.81 L1825.33 690.81 L1825.89 690.81 L1826.45 690.81 L1827 690.81 L1827.56 690.81 L1828.12 690.81 L1828.68 690.81 L1829.24 690.81 L1829.8 690.81 L1830.36 690.81 L1830.92 690.81 L1831.48 690.81 L1832.04 690.81 L1832.6 690.81 L1833.16 690.81 L1833.72 690.81 L1834.27 690.81 L1834.83 690.81 L1835.39 690.81 L1835.95 690.81 L1836.51 690.81 L1837.07 690.81 L1837.63 690.81 L1838.19 690.81 L1838.19 684.325 L1837.63 684.325 L1837.07 684.325 L1836.51 684.325 L1835.95 684.325 L1835.39 684.325 L1834.83 684.325 L1834.27 684.325 L1833.72 684.325 L1833.16 684.325 L1832.6 684.325 L1832.04 684.325 L1831.48 684.325 L1830.92 684.325 L1830.36 684.325 L1829.8 684.325 L1829.24 684.325 L1828.68 684.325 L1828.12 684.325 L1827.56 684.325 L1827 684.325 L1826.45 684.325 L1825.89 684.325 L1825.33 684.325 L1824.77 684.325 L1824.21 684.325 L1823.65 684.325 L1823.09 684.325 L1822.53 684.325 L1821.97 684.325 L1821.41 684.325 L1820.85 684.325 L1820.29 684.325 L1819.73 684.325 L1819.18 684.325 L1818.62 684.325 L1818.06 684.325 L1817.5 684.325 L1816.94 684.325 L1816.38 684.325 L1815.82 684.325 L1815.26 684.325 L1814.7 684.325 L1814.14 684.325 L1813.58 684.325 L1813.02 684.325 L1812.46 684.325 L1811.9 684.325 L1811.35 684.325 L1810.79 684.325 L1810.23 684.325 L1809.67 684.325 L1809.11 684.325 L1808.55 684.325 L1807.99 684.325 L1807.43 684.325 L1806.87 684.325 L1806.31 684.325 L1805.75 684.325 L1805.19 684.325 L1804.63 684.325 L1804.08 684.325 L1803.52 684.325 L1802.96 684.325 L1802.4 684.325 L1801.84 684.325 L1801.28 684.325 L1800.72 684.325 L1800.16 684.325 L1799.6 684.325 L1799.04 684.325 L1798.48 684.325 L1797.92 684.325 L1797.36 684.325 L1796.8 684.325 L1796.25 684.325 L1795.69 684.325 L1795.13 684.325 L1794.57 684.325 L1794.01 684.325 L1793.45 684.325 L1792.89 684.325 L1792.33 684.325 L1791.77 684.325 L1791.21 684.325 L1790.65 684.325 L1790.09 684.325 L1789.53 684.325 L1788.98 684.325 L1788.42 684.325 L1787.86 684.325 L1787.3 684.325 L1786.74 684.325 L1786.18 684.325 L1785.62 684.325 L1785.06 684.325 L1784.5 684.325 L1783.94 684.325 L1783.38 684.325 L1782.82 684.325 L1782.26 684.325 L1781.71 684.325 L1781.15 684.325 L1780.59 684.325 L1780.03 684.325 L1779.47 684.325 L1778.91 684.325 L1778.35 684.325 L1777.79 684.325 L1777.23 684.325 L1776.67 684.325 L1776.11 684.325 L1775.55 684.325 L1774.99 684.325 L1774.43 684.325 L1773.88 684.325 L1773.32 684.325 L1772.76 684.325 L1772.2 684.325 L1771.64 684.325 L1771.08 684.325 L1770.52 684.325 L1769.96 684.325 L1769.4 684.325 L1768.84 684.325 L1768.28 684.325 L1767.72 684.325 L1767.16 684.325 L1766.61 684.325 L1766.05 684.325 L1765.49 684.325 L1764.93 684.325 L1764.37 684.325 L1763.81 684.325 L1763.25 684.325 L1762.69 684.325 L1762.13 684.325 L1761.57 684.325 L1761.01 684.325 L1760.45 684.325 L1759.89 684.325 L1759.34 684.325 L1758.78 684.325 L1758.22 684.325 L1757.66 684.325 L1757.1 684.325 L1756.54 684.325 L1755.98 684.325 L1755.42 684.325 L1754.86 684.325 L1754.3 684.325 L1753.74 684.325 L1753.18 684.325 L1752.62 684.325 L1752.06 684.325 L1751.51 684.325 L1750.95 684.325 L1750.39 684.325 L1749.83 684.325 L1749.27 684.325 L1748.71 684.325 L1748.15 684.325 L1747.59 684.325 L1747.03 684.325 L1746.47 684.325 L1745.91 684.325 L1745.35 684.325 L1744.79 684.325 L1744.24 684.325 L1743.68 684.325 L1743.12 684.325 L1742.56 684.325 L1742 684.325 L1741.44 684.325 L1740.88 684.325 L1740.32 684.325 L1739.76 684.325 L1739.2 684.325 L1738.64 684.325 L1738.08 684.325 L1737.52 684.325 L1736.97 684.325 L1736.41 684.325 L1735.85 684.325 L1735.29 684.325 L1734.73 684.325 L1734.17 684.325 L1733.61 684.325 L1733.05 684.325 L1732.49 684.325 L1731.93 684.325 L1731.37 684.325 L1730.81 684.325 L1730.25 684.325 L1729.69 684.325 L1729.14 684.325 L1728.58 684.325 L1728.02 684.325 L1727.46 684.325 L1726.9 684.325 L1726.34 684.325 L1725.78 684.325 L1725.22 684.325 L1724.66 684.325 L1724.1 684.325 L1723.54 684.325 L1722.98 684.325 L1722.42 684.325 L1721.87 684.325 L1721.31 684.325 L1720.75 684.325 L1720.19 684.325 L1719.63 684.325 L1719.07 684.325 L1718.51 684.325 L1717.95 684.325 L1717.39 684.325 L1716.83 684.325 L1716.27 684.325 L1715.71 684.325 L1715.15 684.325 L1714.6 684.325 L1714.04 684.325 L1713.48 684.325 L1712.92 684.325 L1712.36 684.325 L1711.8 684.325 L1711.24 684.325 L1710.68 684.325 L1710.12 684.325 L1709.56 684.325 L1709 684.325 L1708.44 684.325 L1707.88 684.325 L1707.32 684.325 L1706.77 684.325 L1706.21 684.325 L1705.65 684.325 L1705.09 684.325 L1704.53 684.325 L1703.97 684.325 L1703.41 684.325 L1702.85 684.325 L1702.29 684.325 L1701.73 684.325 L1701.17 684.325 L1700.61 684.325 L1700.05 684.325 L1699.5 684.325 L1698.94 684.325 L1698.38 684.325 L1697.82 684.325 L1697.26 684.325 L1696.7 684.325 L1696.14 684.325 L1695.58 684.325 L1695.02 684.325 L1694.46 684.325 L1693.9 684.325 L1693.34 684.325 L1692.78 684.325 L1692.23 684.325 L1691.67 684.325 L1691.11 684.325 L1690.55 684.325 L1689.99 684.325 L1689.43 684.325 L1688.87 684.325 L1688.31 684.325 L1687.75 684.325 L1687.19 684.325 L1686.63 684.325 L1686.07 684.325 L1685.51 684.325 L1684.95 684.325 L1684.4 684.325 L1683.84 684.325 L1683.28 684.325 L1682.72 684.325 L1682.16 684.325 L1681.6 684.325 L1681.04 684.325 L1680.48 684.325 L1679.92 684.325 L1679.36 684.325 L1678.8 684.325 L1678.24 684.325 L1677.68 684.325 L1677.13 684.325 L1676.57 684.325 L1676.01 684.325 L1675.45 684.325 L1674.89 684.325 L1674.33 684.325 L1673.77 684.325 L1673.21 684.325 L1672.65 684.325 L1672.09 684.325 L1671.53 684.325 L1670.97 684.325 L1670.41 684.325 L1669.85 684.325 L1669.3 684.325 L1668.74 684.325 L1668.18 684.325 L1667.62 684.325 L1667.06 684.325 L1666.5 684.325 L1665.94 684.325 L1665.38 684.325 L1664.82 684.325 L1664.26 684.325 L1663.7 684.325 L1663.14 684.325 L1662.58 684.325 L1662.03 684.325 L1661.47 684.325 L1660.91 684.325 L1660.35 684.325 L1659.79 684.325 L1659.23 684.325 L1658.67 684.325 L1658.11 684.325 L1657.55 684.325 L1656.99 684.325 L1656.43 684.325 L1655.87 684.325 L1655.31 684.325 L1654.76 684.325 L1654.2 684.325 L1653.64 684.325 L1653.08 684.325 L1652.52 684.325 L1651.96 684.325 L1651.4 684.325 L1650.84 684.325 L1650.28 684.325 L1649.72 684.325 L1649.16 684.325 L1648.6 684.325 L1648.04 684.325 L1647.48 684.325 L1646.93 684.325 L1646.37 684.325 L1645.81 684.325 L1645.25 684.325 L1644.69 684.325 L1644.13 684.325 L1643.57 684.325 L1643.01 684.325 L1642.45 684.325 L1641.89 684.325 L1641.33 684.325 L1640.77 684.325 L1640.21 684.325 L1639.66 684.325 L1639.1 684.325 L1638.54 684.325 L1637.98 684.325 L1637.42 684.325 L1636.86 684.325 L1636.3 684.325 L1635.74 684.325 L1635.18 684.325 L1634.62 684.325 L1634.06 684.325 L1633.5 684.325 L1632.94 684.325 L1632.39 684.325 L1631.83 684.325 L1631.27 684.325 L1630.71 684.325 L1630.15 684.325 L1629.59 684.325 L1629.03 684.325 L1628.47 684.325 L1627.91 684.325 L1627.35 684.325 L1626.79 684.325 L1626.23 684.325 L1625.67 684.325 L1625.11 684.325 L1624.56 684.325 L1624 684.325 L1623.44 684.325 L1622.88 684.325 L1622.32 684.325 L1621.76 684.325 L1621.2 684.325 L1620.64 684.325 L1620.08 684.325 L1619.52 684.325 L1618.96 684.325 L1618.4 684.325 L1617.84 684.325 L1617.29 684.325 L1616.73 684.325 L1616.17 684.325 L1615.61 684.325 L1615.05 684.325 L1614.49 684.325 L1613.93 684.325 L1613.37 684.325 L1612.81 684.325 L1612.25 684.325 L1611.69 684.325 L1611.13 684.325 L1610.57 684.325 L1610.02 684.325 L1609.46 684.325 L1608.9 684.325 L1608.34 684.325 L1607.78 684.325 L1607.22 684.325 L1606.66 684.325 L1606.1 684.325 L1605.54 684.325 L1604.98 684.325 L1604.42 684.325 L1603.86 684.325 L1603.3 684.325 L1602.74 684.325 L1602.19 684.325 L1601.63 684.325 L1601.07 684.325 L1600.51 684.325 L1599.95 684.325 L1599.39 684.325 L1598.83 684.325 L1598.27 684.325 L1597.71 684.325 L1597.15 684.325 L1596.59 684.325 L1596.03 684.325 L1595.47 684.325 L1594.92 684.325 L1594.36 684.325 L1593.8 684.325 L1593.24 684.325 L1592.68 684.325 L1592.12 684.325 L1591.56 684.325 L1591 684.325 L1590.44 684.325 L1589.88 684.325 L1589.32 684.325 L1588.76 684.325 L1588.2 684.325 L1587.65 684.325 L1587.09 684.325 L1586.53 684.325 L1585.97 684.325 L1585.41 684.325 L1584.85 684.325 L1584.29 684.325 L1583.73 684.325 L1583.17 684.325 L1582.61 684.325 L1582.05 684.325 L1581.49 684.325 L1580.93 684.325 L1580.37 684.325 L1579.82 684.325 L1579.26 684.325 L1578.7 684.325 L1578.14 684.325 L1577.58 684.325 L1577.02 684.325 L1576.46 684.325 L1575.9 684.325 L1575.34 684.325 L1574.78 684.325 L1574.22 684.325 L1573.66 684.325 L1573.1 684.325 L1572.55 684.325 L1571.99 684.325 L1571.43 684.325 L1570.87 684.325 L1570.31 684.325 L1569.75 684.325 L1569.19 684.325 L1568.63 684.325 L1568.07 684.325 L1567.51 684.325 L1566.95 684.325 L1566.39 684.325 L1565.83 684.325 L1565.28 684.325 L1564.72 684.325 L1564.16 684.325 L1563.6 684.325 L1563.04 684.325 L1562.48 684.325 L1561.92 684.325 L1561.36 684.325 L1560.8 684.325 L1560.24 684.325 L1559.68 684.325 L1559.12 684.325 L1558.56 684.325 L1558 684.325 L1557.45 684.325 L1556.89 684.325 L1556.33 684.325 L1555.77 684.325 L1555.21 684.325 L1554.65 684.325 L1554.09 684.325 L1553.53 684.325 L1552.97 684.325 L1552.41 684.325 L1551.85 684.325 L1551.29 684.325 L1550.73 684.325 L1550.18 684.325 L1549.62 684.325 L1549.06 684.325 L1548.5 684.325 L1547.94 684.325 L1547.38 684.325 L1546.82 684.325 L1546.26 684.325 L1545.7 684.325 L1545.14 684.325 L1544.58 684.325 L1544.02 684.325 L1543.46 684.325 L1542.9 684.325 L1542.35 684.325 L1541.79 684.325 L1541.23 684.325 L1540.67 684.325 L1540.11 684.325 L1539.55 684.325 L1538.99 684.325 L1538.43 684.325 L1537.87 684.325 L1537.31 684.325 L1536.75 684.325 L1536.19 684.325 L1535.63 684.325 L1535.08 684.325 L1534.52 684.325 L1533.96 684.325 L1533.4 684.325 L1532.84 684.325 L1532.28 684.325 L1531.72 684.325 L1531.16 684.325 L1530.6 684.325 L1530.04 684.325 L1529.48 684.325 L1528.92 684.325 L1528.36 684.325 L1527.81 684.325 L1527.25 684.325 L1526.69 684.325 L1526.13 684.325 L1525.57 684.325 L1525.01 684.325 L1524.45 684.325 L1523.89 684.325 L1523.33 684.325 L1522.77 684.325 L1522.21 684.325 L1521.65 684.325 L1521.09 684.325 L1520.53 684.325 L1519.98 684.325 L1519.42 684.325 L1518.86 684.325 L1518.3 684.325 L1517.74 684.325 L1517.18 684.325 L1516.62 684.325 L1516.06 684.325 L1515.5 684.325 L1514.94 684.325 L1514.38 684.325 L1513.82 684.325 L1513.26 684.325 L1512.71 684.325 L1512.15 684.325 L1511.59 684.325 L1511.03 684.325 L1510.47 684.325 L1509.91 684.325 L1509.35 684.325 L1508.79 684.325 L1508.23 684.325 L1507.67 684.325 L1507.11 684.325 L1506.55 684.325 L1505.99 684.325 L1505.44 684.325 L1504.88 684.325 L1504.32 684.325 L1503.76 684.325 L1503.2 684.325 L1502.64 684.325 L1502.08 684.325 L1501.52 684.325 L1500.96 684.325 L1500.4 684.325 L1499.84 684.325 L1499.28 684.325 L1498.72 684.325 L1498.16 684.325 L1497.61 684.325 L1497.05 684.325 L1496.49 684.325 L1495.93 684.325 L1495.37 684.325 L1494.81 684.325 L1494.25 684.325 L1493.69 684.325 L1493.13 684.325 L1492.57 684.325 L1492.01 684.325 L1491.45 684.325 L1490.89 684.325 L1490.34 684.325 L1489.78 684.325 L1489.22 684.325 L1488.66 684.325 L1488.1 684.325 L1487.54 684.325 L1486.98 684.325 L1486.42 684.325 L1485.86 684.325 L1485.3 684.325 L1484.74 684.325 L1484.18 684.325 L1483.62 684.325 L1483.07 684.325 L1482.51 684.325 L1481.95 684.325 L1481.39 684.325 L1480.83 684.325 L1480.27 684.325 L1479.71 684.325 L1479.15 684.325 L1478.59 684.325 L1478.03 684.325 L1477.47 684.325 L1476.91 684.325 L1476.35 684.325 L1475.79 684.325 L1475.24 684.325 L1474.68 684.325 L1474.12 684.325 L1473.56 684.325 L1473 684.325 L1472.44 684.325 L1471.88 684.325 L1471.32 684.325 L1470.76 684.325 L1470.2 684.325 L1469.64 684.325 L1469.08 684.325 L1468.52 684.325 L1467.97 684.325 L1467.41 684.325 L1466.85 684.325 L1466.29 684.325 L1465.73 684.325 L1465.17 684.325 L1464.61 684.325 L1464.05 684.325 L1463.49 684.325 L1462.93 684.325 L1462.37 684.325 L1461.81 684.325 L1461.25 684.325 L1460.7 684.325 L1460.14 684.325 L1459.58 684.325 L1459.02 684.325 L1458.46 684.325 L1457.9 684.325 L1457.34 684.325 L1456.78 684.325 L1456.22 684.325 L1455.66 684.325 L1455.1 684.325 L1454.54 684.325 L1453.98 684.325 L1453.42 684.325 L1452.87 684.325 L1452.31 684.325 L1451.75 684.325 L1451.19 684.325 L1450.63 684.325 L1450.07 684.325 L1449.51 684.325 L1448.95 684.325 L1448.39 684.325 L1447.83 684.325 L1447.27 684.325 L1446.71 684.325 L1446.15 684.325 L1445.6 684.325 L1445.04 684.325 L1444.48 684.325 L1443.92 684.325 L1443.36 684.325 L1442.8 684.325 L1442.24 684.325 L1441.68 684.325 L1441.12 684.325 L1440.56 684.325 L1440 684.325 L1439.44 684.325 L1438.88 684.325 L1438.33 684.325 L1437.77 684.325 L1437.21 684.325 L1436.65 684.325 L1436.09 684.325 L1435.53 684.325 L1434.97 684.325 L1434.41 684.325 L1433.85 684.325 L1433.29 684.325 L1432.73 684.325 L1432.17 684.325 L1431.61 684.325 L1431.05 684.325 L1430.5 684.325 L1429.94 684.325 L1429.38 684.325 L1428.82 684.325 L1428.26 684.325 L1427.7 684.325 L1427.14 684.325 L1426.58 684.325 L1426.02 684.325 L1425.46 684.325 L1424.9 684.325 L1424.34 684.325 L1423.78 684.325 L1423.23 684.325 L1422.67 684.325 L1422.11 684.325 L1421.55 684.325 L1420.99 684.325 L1420.43 684.325 L1419.87 684.325 L1419.31 684.325 L1418.75 684.325 L1418.19 684.325 L1417.63 684.325 L1417.07 684.325 L1416.51 684.325 L1415.95 684.325 L1415.4 684.325 L1414.84 684.325 L1414.28 684.325 L1413.72 684.325 L1413.16 684.325 L1412.6 684.325 L1412.04 684.325 L1411.48 684.325 L1410.92 684.325 L1410.36 684.325 L1409.8 684.325 L1409.24 684.325 L1408.68 684.325 L1408.13 684.325 L1407.57 684.325 L1407.01 684.325 L1406.45 684.325 L1405.89 684.325 L1405.33 684.325 L1404.77 684.325 L1404.21 684.325 L1403.65 684.325 L1403.09 684.325 L1402.53 684.325 L1401.97 684.325 L1401.41 684.325 L1400.86 684.325 L1400.3 684.325 L1399.74 684.325 L1399.18 684.325 L1398.62 684.325 L1398.06 684.325 L1397.5 684.325 L1396.94 684.325 L1396.38 684.325 L1395.82 684.325 L1395.26 684.325 L1394.7 684.325 L1394.14 684.325 L1393.58 684.325 L1393.03 684.325 L1392.47 684.325 L1391.91 684.325 L1391.35 684.325 L1390.79 684.325 L1390.23 684.325 L1389.67 684.325 L1389.11 684.325 L1388.55 684.325 L1387.99 684.325 L1387.43 684.325 L1386.87 684.325 L1386.31 684.325 L1385.76 684.325 L1385.2 684.325 L1384.64 684.325 L1384.08 684.325 L1383.52 684.325 L1382.96 684.325 L1382.4 684.325 L1381.84 684.325 L1381.28 684.325 L1380.72 684.325 L1380.16 684.325 L1379.6 684.325 L1379.04 684.325 L1378.49 684.325 L1377.93 684.325 L1377.37 684.325 L1376.81 684.325 L1376.25 684.325 L1375.69 684.325 L1375.13 684.325 L1374.57 684.325 L1374.01 684.325 L1373.45 684.325 L1372.89 684.325 L1372.33 684.325 L1371.77 684.325 L1371.21 684.325 L1370.66 684.325 L1370.1 684.325 L1369.54 684.325 L1368.98 684.325 L1368.42 684.325 L1367.86 684.325 L1367.3 684.325 L1366.74 684.325 L1366.18 684.325 L1365.62 684.325 L1365.06 684.325 L1364.5 684.325 L1363.94 684.325 L1363.39 684.325 L1362.83 684.325 L1362.27 684.325 L1361.71 684.325 L1361.15 684.325 L1360.59 684.325 L1360.03 684.325 L1359.47 684.325 L1358.91 684.325 L1358.35 684.325 L1357.79 684.325 L1357.23 684.325 L1356.67 684.325 L1356.12 684.325 L1355.56 684.325 L1355 684.325 L1354.44 684.325 L1353.88 684.325 L1353.32 684.325 L1352.76 684.325 L1352.2 684.325 L1351.64 684.325 L1351.08 684.325 L1350.52 684.325 L1349.96 684.325 L1349.4 684.325 L1348.84 684.325 L1348.29 684.325 L1347.73 684.325 L1347.17 684.325 L1346.61 684.325 L1346.05 684.325 L1345.49 684.325 L1344.93 684.325 L1344.37 684.325 L1343.81 684.325 L1343.25 684.325 L1342.69 684.325 L1342.13 684.325 L1341.57 684.325 L1341.02 684.325 L1340.46 684.325 L1339.9 684.325 L1339.34 684.325 L1338.78 684.325 L1338.22 684.325 L1337.66 684.325 L1337.1 684.325 L1336.54 684.325 L1335.98 684.325 L1335.42 684.325 L1334.86 684.325 L1334.3 684.325 L1333.75 684.325 L1333.19 684.325 L1332.63 684.325 L1332.07 684.325 L1331.51 684.325 L1330.95 684.325 L1330.39 684.325 L1329.83 684.325 L1329.27 684.325 L1328.71 684.325 L1328.15 684.325 L1327.59 684.325 L1327.03 684.325 L1326.47 684.325 L1325.92 684.325 L1325.36 684.325 L1324.8 684.325 L1324.24 684.325 L1323.68 684.325 L1323.12 684.325 L1322.56 684.325 L1322 684.325 L1321.44 684.325 L1320.88 684.325 L1320.32 684.325 L1319.76 684.325 L1319.2 684.325 L1318.65 684.325 L1318.09 684.325 L1317.53 684.325 L1316.97 684.325 L1316.41 684.325 L1315.85 684.325 L1315.29 684.325 L1314.73 684.325 L1314.17 684.325 L1313.61 684.325 L1313.05 684.325 L1312.49 684.325 L1311.93 684.325 L1311.38 684.325 L1310.82 684.325 L1310.26 684.325 L1309.7 684.325 L1309.14 684.325 L1308.58 684.325 L1308.02 684.325 L1307.46 684.325 L1306.9 684.325 L1306.34 684.325 L1305.78 684.325 L1305.22 684.325 L1304.66 684.325 L1304.1 684.325 L1303.55 684.325 L1302.99 684.325 L1302.43 684.325 L1301.87 684.325 L1301.31 684.325 L1300.75 684.325 L1300.19 684.325 L1299.63 684.325 L1299.07 684.325 L1298.51 684.325 L1297.95 684.325 L1297.39 684.325 L1296.83 684.325 L1296.28 684.325 L1295.72 684.325 L1295.16 684.325 L1294.6 684.325 L1294.04 684.325 L1293.48 684.325 L1292.92 684.325 L1292.36 684.325 L1291.8 684.325 L1291.24 684.325 L1290.68 684.325 L1290.12 684.325 L1289.56 684.325 L1289 684.325 L1288.45 684.325 L1287.89 684.325 L1287.33 684.325 L1286.77 684.325 L1286.21 684.325 L1285.65 684.325 L1285.09 684.325 L1284.53 684.325 L1283.97 684.325 L1283.41 684.325 L1282.85 684.325 L1282.29 684.325 L1281.73 684.325 L1281.18 684.325 L1280.62 684.325 L1280.06 684.325 L1279.5 684.325 L1278.94 684.325 L1278.38 684.325 L1277.82 684.325 L1277.26 684.325 L1276.7 684.325 L1276.14 684.325 L1275.58 684.325 L1275.02 684.325 L1274.46 684.325 L1273.91 684.325 L1273.35 684.325 L1272.79 684.325 L1272.23 684.325 L1271.67 684.325 L1271.11 684.325 L1270.55 684.325 L1269.99 684.325 L1269.43 684.325 L1268.87 684.325 L1268.31 684.325 L1267.75 684.325 L1267.19 684.325 L1266.63 684.325 L1266.08 684.325 L1265.52 684.325 L1264.96 684.325 L1264.4 684.325 L1263.84 684.325 L1263.28 684.325 L1262.72 684.325 L1262.16 684.325 L1261.6 684.325 L1261.04 684.325 L1260.48 684.325 L1259.92 684.325 L1259.36 684.325 L1258.81 684.325 L1258.25 684.325 L1257.69 684.325 L1257.13 684.325 L1256.57 684.325 L1256.01 684.325 L1255.45 684.325 L1254.89 684.325 L1254.33 684.325 L1253.77 684.325 L1253.21 684.325 L1252.65 684.325 L1252.09 684.325 L1251.54 684.325 L1250.98 684.325 L1250.42 684.325 L1249.86 684.325 L1249.3 684.325 L1248.74 684.325 L1248.18 684.325 L1247.62 684.325 L1247.06 684.325 L1246.5 684.325 L1245.94 684.325 L1245.38 684.325 L1244.82 684.325 L1244.26 684.325 L1243.71 684.325 L1243.15 684.325 L1242.59 684.325 L1242.03 684.325 L1241.47 684.325 L1240.91 684.325 L1240.35 684.325 L1239.79 684.325 L1239.23 684.325 L1238.67 684.325 L1238.11 684.325 L1237.55 684.325 L1236.99 684.325 L1236.44 684.325 L1235.88 684.325 L1235.32 684.325 L1234.76 684.325 L1234.2 684.325 L1233.64 684.325 L1233.08 684.325 L1232.52 684.325 L1231.96 684.325 L1231.4 684.325 L1230.84 684.325 L1230.28 684.325 L1229.72 684.325 L1229.17 684.325 L1228.61 684.325 L1228.05 684.325 L1227.49 684.325 L1226.93 684.325 L1226.37 684.325 L1225.81 684.325 L1225.25 684.325 L1224.69 684.325 L1224.13 684.325 L1223.57 684.325 L1223.01 684.325 L1222.45 684.325 L1221.89 684.325 L1221.34 684.325 L1220.78 684.325 L1220.22 684.325 L1219.66 684.325 L1219.1 684.325 L1218.54 684.325 L1217.98 684.325 L1217.42 684.325 L1216.86 684.325 L1216.3 684.325 L1215.74 684.325 L1215.18 684.325 L1214.62 684.325 L1214.07 684.325 L1213.51 684.325 L1212.95 684.325 L1212.39 684.325 L1211.83 684.325 L1211.27 684.325 L1210.71 684.325 L1210.15 684.325 L1209.59 684.325 L1209.03 684.325 L1208.47 684.325 L1207.91 684.325 L1207.35 684.325 L1206.8 684.325 L1206.24 684.325 L1205.68 684.325 L1205.12 684.325 L1204.56 684.325 L1204 684.325 L1203.44 684.325 L1202.88 684.325 L1202.32 684.325 L1201.76 684.325 L1201.2 684.325 L1200.64 684.325 L1200.08 684.325 L1199.52 684.325 L1198.97 684.325 L1198.41 684.325 L1197.85 684.325 L1197.29 684.325 L1196.73 684.325 L1196.17 684.325 L1195.61 684.325 L1195.05 684.325 L1194.49 684.325 L1193.93 684.325 L1193.37 684.325 L1192.81 684.325 L1192.25 684.325 L1191.7 684.325 L1191.14 684.325 L1190.58 684.325 L1190.02 684.325 L1189.46 684.325 L1188.9 684.325 L1188.34 684.325 L1187.78 684.325 L1187.22 684.325 L1186.66 684.325 L1186.1 684.325 L1185.54 684.325 L1184.98 684.325 L1184.43 684.325 L1183.87 684.325 L1183.31 684.325 L1182.75 684.325 L1182.19 684.325 L1181.63 684.325 L1181.07 684.325 L1180.51 684.325 L1179.95 684.325 L1179.39 684.325 L1178.83 684.325 L1178.27 684.325 L1177.71 684.325 L1177.15 684.325 L1176.6 684.325 L1176.04 684.325 L1175.48 684.325 L1174.92 684.325 L1174.36 684.325 L1173.8 684.325 L1173.24 684.325 L1172.68 684.325 L1172.12 684.325 L1171.56 684.325 L1171 684.325 L1170.44 684.325 L1169.88 684.325 L1169.33 684.325 L1168.77 684.325 L1168.21 684.325 L1167.65 684.325 L1167.09 684.325 L1166.53 684.325 L1165.97 684.325 L1165.41 684.325 L1164.85 684.325 L1164.29 684.325 L1163.73 684.325 L1163.17 684.325 L1162.61 684.325 L1162.05 684.325 L1161.5 684.325 L1160.94 684.325 L1160.38 684.325 L1159.82 684.325 L1159.26 684.325 L1158.7 684.325 L1158.14 684.325 L1157.58 684.325 L1157.02 684.325 L1156.46 684.325 L1155.9 684.325 L1155.34 684.325 L1154.78 684.325 L1154.23 684.325 L1153.67 684.325 L1153.11 684.325 L1152.55 684.325 L1151.99 684.325 L1151.43 684.325 L1150.87 684.325 L1150.31 684.325 L1149.75 684.325 L1149.19 684.325 L1148.63 684.325 L1148.07 684.325 L1147.51 684.325 L1146.96 684.325 L1146.4 684.325 L1145.84 684.325 L1145.28 684.325 L1144.72 684.325 L1144.16 684.325 L1143.6 684.325 L1143.04 684.325 L1142.48 684.325 L1141.92 684.325 L1141.36 684.325 L1140.8 684.325 L1140.24 684.325 L1139.68 684.325 L1139.13 684.325 L1138.57 684.325 L1138.01 684.325 L1137.45 684.325 L1136.89 684.325 L1136.33 684.325 L1135.77 684.325 L1135.21 684.325 L1134.65 684.325 L1134.09 684.325 L1133.53 684.325 L1132.97 684.325 L1132.41 684.325 L1131.86 684.325 L1131.3 684.325 L1130.74 684.325 L1130.18 684.325 L1129.62 684.325 L1129.06 684.325 L1128.5 684.325 L1127.94 684.325 L1127.38 684.325 L1126.82 684.325 L1126.26 684.325 L1125.7 684.325 L1125.14 684.325 L1124.59 684.325 L1124.03 684.325 L1123.47 684.325 L1122.91 684.325 L1122.35 684.325 L1121.79 684.325 L1121.23 684.325 L1120.67 684.325 L1120.11 684.325 L1119.55 684.325 L1118.99 684.325 L1118.43 684.325 L1117.87 684.325 L1117.31 684.325 L1116.76 684.325 L1116.2 684.325 L1115.64 684.325 L1115.08 684.325 L1114.52 684.325 L1113.96 684.325 L1113.4 684.325 L1112.84 684.325 L1112.28 684.325 L1111.72 684.325 L1111.16 684.325 L1110.6 684.325 L1110.04 684.325 L1109.49 684.325 L1108.93 684.325 L1108.37 684.325 L1107.81 684.325 L1107.25 684.325 L1106.69 684.325 L1106.13 684.325 L1105.57 684.325 L1105.01 684.325 L1104.45 684.325 L1103.89 684.325 L1103.33 684.325 L1102.77 684.325 L1102.22 684.325 L1101.66 684.325 L1101.1 684.325 L1100.54 684.325 L1099.98 684.325 L1099.42 684.325 L1098.86 684.325 L1098.3 684.325 L1097.74 684.325 L1097.18 684.325 L1096.62 684.325 L1096.06 684.325 L1095.5 684.325 L1094.94 684.325 L1094.39 684.325 L1093.83 684.325 L1093.27 684.325 L1092.71 684.325 L1092.15 684.325 L1091.59 684.325 L1091.03 684.325 L1090.47 684.325 L1089.91 684.325 L1089.35 684.325 L1088.79 684.325 L1088.23 684.325 L1087.67 684.325 L1087.12 684.325 L1086.56 684.325 L1086 684.325 L1085.44 684.325 L1084.88 684.325 L1084.32 684.325 L1083.76 684.325 L1083.2 684.325 L1082.64 684.325 L1082.08 684.325 L1081.52 684.325 L1080.96 684.325 L1080.4 684.325 L1079.85 684.325 L1079.29 684.325 L1078.73 684.325 L1078.17 684.325 L1077.61 684.325 L1077.05 684.325 L1076.49 684.325 L1075.93 684.325 L1075.37 684.325 L1074.81 684.325 L1074.25 684.325 L1073.69 684.325 L1073.13 684.325 L1072.57 684.325 L1072.02 684.325 L1071.46 684.325 L1070.9 684.325 L1070.34 684.325 L1069.78 684.325 L1069.22 684.325 L1068.66 684.325 L1068.1 684.325 L1067.54 684.325 L1066.98 684.325 L1066.42 684.325 L1065.86 684.325 L1065.3 684.325 L1064.75 684.325 L1064.19 684.325 L1063.63 684.325 L1063.07 684.325 L1062.51 684.325 L1061.95 684.325 L1061.39 684.325 L1060.83 684.325 L1060.27 684.325 L1059.71 684.325 L1059.15 684.325 L1058.59 684.325 L1058.03 684.325 L1057.48 684.325 L1056.92 684.325 L1056.36 684.325 L1055.8 684.325 L1055.24 684.325 L1054.68 684.325 L1054.12 684.325 L1053.56 684.325 L1053 684.325 L1052.44 684.325 L1051.88 684.325 L1051.32 684.325 L1050.76 684.325 L1050.2 684.325 L1049.65 684.325 L1049.09 684.325 L1048.53 684.325 L1047.97 684.325 L1047.41 684.325 L1046.85 684.325 L1046.29 684.325 L1045.73 684.325 L1045.17 684.325 L1044.61 684.325 L1044.05 684.325 L1043.49 684.325 L1042.93 684.325 L1042.38 684.325 L1041.82 684.325 L1041.26 684.325 L1040.7 684.325 L1040.14 684.325 L1039.58 684.325 L1039.02 684.325 L1038.46 684.325 L1037.9 684.325 L1037.34 684.325 L1036.78 684.325 L1036.22 684.325 L1035.66 684.325 L1035.1 684.325 L1034.55 684.325 L1033.99 684.325 L1033.43 684.325 L1032.87 684.325 L1032.31 684.325 L1031.75 684.325 L1031.19 684.325 L1030.63 684.325 L1030.07 684.325 L1029.51 684.325 L1028.95 684.325 L1028.39 684.325 L1027.83 684.325 L1027.28 684.325 L1026.72 684.325 L1026.16 684.325 L1025.6 684.325 L1025.04 684.325 L1024.48 684.325 L1023.92 684.325 L1023.36 684.325 L1022.8 684.325 L1022.24 684.325 L1021.68 684.325 L1021.12 684.325 L1020.56 684.325 L1020.01 684.325 L1019.45 684.325 L1018.89 684.325 L1018.33 684.325 L1017.77 684.325 L1017.21 684.325 L1016.65 684.325 L1016.09 684.325 L1015.53 684.325 L1014.97 684.325 L1014.41 684.325 L1013.85 684.325 L1013.29 684.325 L1012.73 684.325 L1012.18 684.325 L1011.62 684.325 L1011.06 684.325 L1010.5 684.325 L1009.94 684.325 L1009.38 684.325 L1008.82 684.325 L1008.26 684.325 L1007.7 684.325 L1007.14 684.325 L1006.58 684.325 L1006.02 684.325 L1005.46 684.325 L1004.91 684.325 L1004.35 684.325 L1003.79 684.325 L1003.23 684.325 L1002.67 684.325 L1002.11 684.325 L1001.55 684.325 L1000.99 684.325 L1000.43 684.325 L999.872 684.325 L999.313 684.325 L998.754 684.325 L998.194 684.325 L997.635 684.325 L997.076 684.325 L996.517 684.325 L995.957 684.325 L995.398 684.325 L994.839 684.325 L994.28 684.325 L993.72 684.325 L993.161 684.325 L992.602 684.325 L992.043 684.325 L991.483 684.325 L990.924 684.325 L990.365 684.325 L989.806 684.325 L989.246 684.325 L988.687 684.325 L988.128 684.325 L987.569 684.325 L987.009 684.325 L986.45 684.325 L985.891 684.325 L985.332 684.325 L984.772 684.325 L984.213 684.325 L983.654 684.325 L983.095 684.325 L982.535 684.325 L981.976 684.325 L981.417 684.325 L980.858 684.325 L980.298 684.325 L979.739 684.325 L979.18 684.325 L978.621 684.325 L978.061 684.325 L977.502 684.325 L976.943 684.325 L976.384 684.325 L975.824 684.325 L975.265 684.325 L974.706 684.325 L974.147 684.325 L973.587 684.325 L973.028 684.325 L972.469 684.325 L971.91 684.325 L971.35 684.325 L970.791 684.325 L970.232 684.325 L969.673 684.325 L969.113 684.325 L968.554 684.325 L967.995 684.325 L967.436 684.325 L966.876 684.325 L966.317 684.325 L965.758 684.325 L965.199 684.325 L964.639 684.325 L964.08 684.325 L963.521 684.325 L962.962 684.325 L962.402 684.325 L961.843 684.325 L961.284 684.325 L960.725 684.325 L960.165 684.325 L959.606 684.325 L959.047 684.325 L958.488 684.325 L957.928 684.325 L957.369 684.325 L956.81 684.325 L956.251 684.325 L955.691 684.325 L955.132 684.325 L954.573 684.325 L954.014 684.325 L953.454 684.325 L952.895 684.325 L952.336 684.325 L951.777 684.325 L951.217 684.325 L950.658 684.325 L950.099 684.325 L949.54 684.325 L948.98 684.325 L948.421 684.325 L947.862 684.325 L947.303 684.325 L946.743 684.325 L946.184 684.325 L945.625 684.325 L945.066 684.325 L944.506 684.325 L943.947 684.325 L943.388 684.325 L942.829 684.325 L942.269 684.325 L941.71 684.325 L941.151 684.325 L940.592 684.325 L940.032 684.325 L939.473 684.325 L938.914 684.325 L938.355 684.325 L937.795 684.325 L937.236 684.325 L936.677 684.325 L936.118 684.325 L935.558 684.325 L934.999 684.325 L934.44 684.325 L933.881 684.325 L933.321 684.325 L932.762 684.325 L932.203 684.325 L931.644 684.325 L931.084 684.325 L930.525 684.325 L929.966 684.325 L929.406 684.325 L928.847 684.325 L928.288 684.325 L927.729 684.325 L927.169 684.325 L926.61 684.325 L926.051 684.325 L925.492 684.325 L924.932 684.325 L924.373 684.325 L923.814 684.325 L923.255 684.325 L922.695 684.325 L922.136 684.325 L921.577 684.325 L921.018 684.325 L920.458 684.325 L919.899 684.325 L919.34 684.325 L918.781 684.325 L918.221 684.325 L917.662 684.325 L917.103 684.325 L916.544 684.325 L915.984 684.325 L915.425 684.325 L914.866 684.325 L914.307 684.325 L913.747 684.325 L913.188 684.325 L912.629 684.325 L912.07 684.325 L911.51 684.325 L910.951 684.325 L910.392 684.325 L909.833 684.325 L909.273 684.325 L908.714 684.325 L908.155 684.325 L907.596 684.325 L907.036 684.325 L906.477 684.325 L905.918 684.325 L905.359 684.325 L904.799 684.325 L904.24 684.325 L903.681 684.325 L903.122 684.325 L902.562 684.325 L902.003 684.325 L901.444 684.325 L900.885 684.325 L900.325 684.325 L899.766 684.325 L899.207 684.325 L898.648 684.325 L898.088 684.325 L897.529 684.325 L896.97 684.325 L896.411 684.325 L895.851 684.325 L895.292 684.325 L894.733 684.325 L894.174 684.325 L893.614 684.325 L893.055 684.325 L892.496 684.325 L891.937 684.325 L891.377 684.325 L890.818 684.325 L890.259 684.325 L889.7 684.325 L889.14 684.325 L888.581 684.325 L888.022 684.325 L887.463 684.325 L886.903 684.325 L886.344 684.325 L885.785 684.325 L885.226 684.325 L884.666 684.325 L884.107 684.325 L883.548 684.325 L882.989 684.325 L882.429 684.325 L881.87 684.325 L881.311 684.325 L880.752 684.325 L880.192 684.325 L879.633 684.325 L879.074 684.325 L878.515 684.325 L877.955 684.325 L877.396 684.325 L876.837 684.325 L876.278 684.325 L875.718 684.325 L875.159 684.325 L874.6 684.325 L874.041 684.325 L873.481 684.325 L872.922 684.325 L872.363 684.325 L871.804 684.325 L871.244 684.325 L870.685 684.325 L870.126 684.325 L869.567 684.325 L869.007 684.325 L868.448 684.325 L867.889 684.325 L867.33 684.325 L866.77 684.325 L866.211 684.325 L865.652 684.325 L865.093 684.325 L864.533 684.325 L863.974 684.325 L863.415 684.325 L862.856 684.325 L862.296 684.325 L861.737 684.325 L861.178 684.325 L860.619 684.325 L860.059 684.325 L859.5 684.325 L858.941 684.325 L858.382 684.325 L857.822 684.325 L857.263 684.325 L856.704 684.325 L856.145 684.325 L855.585 684.325 L855.026 684.325 L854.467 684.325 L853.908 684.325 L853.348 684.325 L852.789 684.325 L852.23 684.325 L851.671 684.325 L851.111 684.325 L850.552 684.325 L849.993 684.325 L849.434 684.325 L848.874 684.325 L848.315 684.325 L847.756 684.325 L847.197 684.325 L846.637 684.325 L846.078 684.325 L845.519 684.325 L844.96 684.325 L844.4 684.325 L843.841 684.325 L843.282 684.325 L842.723 684.325 L842.163 684.325 L841.604 684.325 L841.045 684.325 L840.486 684.325 L839.926 684.325 L839.367 684.325 L838.808 684.325 L838.249 684.325 L837.689 684.325 L837.13 684.325 L836.571 684.325 L836.012 684.325 L835.452 684.325 L834.893 684.325 L834.334 684.325 L833.775 684.325 L833.215 684.325 L832.656 684.325 L832.097 684.325 L831.538 684.325 L830.978 684.325 L830.419 684.325 L829.86 684.325 L829.301 684.325 L828.741 684.325 L828.182 684.325 L827.623 684.325 L827.064 684.325 L826.504 684.325 L825.945 684.325 L825.386 684.325 L824.827 684.325 L824.267 684.325 L823.708 684.325 L823.149 684.325 L822.59 684.325 L822.03 684.325 L821.471 684.325 L820.912 684.325 L820.353 684.325 L819.793 684.325 L819.234 684.325 L818.675 684.325 L818.116 684.325 L817.556 684.325 L816.997 684.325 L816.438 684.325 L815.879 684.325 L815.319 684.325 L814.76 684.325 L814.201 684.325 L813.642 684.325 L813.082 684.325 L812.523 684.325 L811.964 684.325 L811.405 684.325 L810.845 684.325 L810.286 684.325 L809.727 684.325 L809.168 684.325 L808.608 684.325 L808.049 684.325 L807.49 684.325 L806.931 684.325 L806.371 684.325 L805.812 684.325 L805.253 684.325 L804.693 684.325 L804.134 684.325 L803.575 684.325 L803.016 684.325 L802.456 684.325 L801.897 684.325 L801.338 684.325 L800.779 684.325 L800.219 684.325 L799.66 684.325 L799.101 684.325 L798.542 684.325 L797.982 684.325 L797.423 684.325 L796.864 684.325 L796.305 684.325 L795.745 684.325 L795.186 684.325 L794.627 684.325 L794.068 684.325 L793.508 684.325 L792.949 684.325 L792.39 684.325 L791.831 684.325 L791.271 684.325 L790.712 684.325 L790.153 684.325 L789.594 684.325 L789.034 684.325 L788.475 684.325 L787.916 684.325 L787.357 684.325 L786.797 684.325 L786.238 684.325 L785.679 684.325 L785.12 684.325 L784.56 684.325 L784.001 684.325 L783.442 684.325 L782.883 684.325 L782.323 684.325 L781.764 684.325 L781.205 684.325 L780.646 684.325 L780.086 684.325 L779.527 684.325 L778.968 684.325 L778.409 684.325 L777.849 684.325 L777.29 684.325 L776.731 684.325 L776.172 684.325 L775.612 684.325 L775.053 684.325 L774.494 684.325 L773.935 684.325 L773.375 684.325 L772.816 684.325 L772.257 684.325 L771.698 684.325 L771.138 684.325 L770.579 684.325 L770.02 684.325 L769.461 684.325 L768.901 684.325 L768.342 684.325 L767.783 684.325 L767.224 684.325 L766.664 684.325 L766.105 684.325 L765.546 684.325 L764.987 684.325 L764.427 684.325 L763.868 684.325 L763.309 684.325 L762.75 684.325 L762.19 684.325 L761.631 684.325 L761.072 684.325 L760.513 684.325 L759.953 684.325 L759.394 684.325 L758.835 684.325 L758.276 684.325 L757.716 684.325 L757.157 684.325 L756.598 684.325 L756.039 684.325 L755.479 684.325 L754.92 684.325 L754.361 684.325 L753.802 684.325 L753.242 684.325 L752.683 684.325 L752.124 684.325 L751.565 684.325 L751.005 684.325 L750.446 684.325 L749.887 684.325 L749.328 684.325 L748.768 684.325 L748.209 684.325 L747.65 684.325 L747.091 684.325 L746.531 684.325 L745.972 684.325 L745.413 684.325 L744.854 684.325 L744.294 684.325 L743.735 684.325 L743.176 684.325 L742.617 684.325 L742.057 684.325 L741.498 684.325 L740.939 684.325 L740.38 684.325 L739.82 684.325 L739.261 684.325 L738.702 684.325 L738.143 684.325 L737.583 684.325 L737.024 684.325 L736.465 684.325 L735.906 684.325 L735.346 684.325 L734.787 684.325 L734.228 684.325 L733.669 684.325 L733.109 684.325 L732.55 684.325 L731.991 684.325 L731.432 684.325 L730.872 684.325 L730.313 684.325 L729.754 684.325 L729.195 684.325 L728.635 684.325 L728.076 684.325 L727.517 684.325 L726.958 684.325 L726.398 684.325 L725.839 684.325 L725.28 684.325 L724.721 684.325 L724.161 684.325 L723.602 684.325 L723.043 684.325 L722.484 684.325 L721.924 684.325 L721.365 684.325 L720.806 684.325 L720.247 684.325  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.567 720.806,687.567 721.365,687.567 721.924,687.567 722.484,687.567 723.043,687.567 723.602,687.567 724.161,687.567 724.721,687.567 725.28,687.567 725.839,687.567 726.398,687.567 726.958,687.567 727.517,687.567 728.076,687.567 728.635,687.567 729.195,687.567 729.754,687.567 730.313,687.567 730.872,687.567 731.432,687.567 731.991,687.567 732.55,687.567 733.109,687.567 733.669,687.567 734.228,687.567 734.787,687.567 735.346,687.567 735.906,687.567 736.465,687.567 737.024,687.567 737.583,687.567 738.143,687.567 738.702,687.567 739.261,687.567 739.82,687.567 740.38,687.567 740.939,687.567 741.498,687.567 742.057,687.567 742.617,687.567 743.176,687.567 743.735,687.567 744.294,687.567 744.854,687.567 745.413,687.567 745.972,687.567 746.531,687.567 747.091,687.567 747.65,687.567 748.209,687.567 748.768,687.567 749.328,687.567 749.887,687.567 750.446,687.567 751.005,687.567 751.565,687.567 752.124,687.567 752.683,687.567 753.242,687.567 753.802,687.567 754.361,687.567 754.92,687.567 755.479,687.567 756.039,687.567 756.598,687.567 757.157,687.567 757.716,687.567 758.276,687.567 758.835,687.567 759.394,687.567 759.953,687.567 760.513,687.567 761.072,687.567 761.631,687.567 762.19,687.567 762.75,687.567 763.309,687.567 763.868,687.567 764.427,687.567 764.987,687.567 765.546,687.567 766.105,687.567 766.664,687.567 767.224,687.567 767.783,687.567 768.342,687.567 768.901,687.567 769.461,687.567 770.02,687.567 770.579,687.567 771.138,687.567 771.698,687.567 772.257,687.567 772.816,687.567 773.375,687.567 773.935,687.567 774.494,687.567 775.053,687.567 775.612,687.567 776.172,687.567 776.731,687.567 777.29,687.567 777.849,687.567 778.409,687.567 778.968,687.567 779.527,687.567 780.086,687.567 780.646,687.567 781.205,687.567 781.764,687.567 782.323,687.567 782.883,687.567 783.442,687.567 784.001,687.567 784.56,687.567 785.12,687.567 785.679,687.567 786.238,687.567 786.797,687.567 787.357,687.567 787.916,687.567 788.475,687.567 789.034,687.567 789.594,687.567 790.153,687.567 790.712,687.567 791.271,687.567 791.831,687.567 792.39,687.567 792.949,687.567 793.508,687.567 794.068,687.567 794.627,687.567 795.186,687.567 795.745,687.567 796.305,687.567 796.864,687.567 797.423,687.567 797.982,687.567 798.542,687.567 799.101,687.567 799.66,687.567 800.219,687.567 800.779,687.567 801.338,687.567 801.897,687.567 802.456,687.567 803.016,687.567 803.575,687.567 804.134,687.567 804.693,687.567 805.253,687.567 805.812,687.567 806.371,687.567 806.931,687.567 807.49,687.567 808.049,687.567 808.608,687.567 809.168,687.567 809.727,687.567 810.286,687.567 810.845,687.567 811.405,687.567 811.964,687.567 812.523,687.567 813.082,687.567 813.642,687.567 814.201,687.567 814.76,687.567 815.319,687.567 815.879,687.567 816.438,687.567 816.997,687.567 817.556,687.567 818.116,687.567 818.675,687.567 819.234,687.567 819.793,687.567 820.353,687.567 820.912,687.567 821.471,687.567 822.03,687.567 822.59,687.567 823.149,687.567 823.708,687.567 824.267,687.567 824.827,687.567 825.386,687.567 825.945,687.567 826.504,687.567 827.064,687.567 827.623,687.567 828.182,687.567 828.741,687.567 829.301,687.567 829.86,687.567 830.419,687.567 830.978,687.567 831.538,687.567 832.097,687.567 832.656,687.567 833.215,687.567 833.775,687.567 834.334,687.567 834.893,687.567 835.452,687.567 836.012,687.567 836.571,687.567 837.13,687.567 837.689,687.567 838.249,687.567 838.808,687.567 839.367,687.567 839.926,687.567 840.486,687.567 841.045,687.567 841.604,687.567 842.163,687.567 842.723,687.567 843.282,687.567 843.841,687.567 844.4,687.567 844.96,687.567 845.519,687.567 846.078,687.567 846.637,687.567 847.197,687.567 847.756,687.567 848.315,687.567 848.874,687.567 849.434,687.567 849.993,687.567 850.552,687.567 851.111,687.567 851.671,687.567 852.23,687.567 852.789,687.567 853.348,687.567 853.908,687.567 854.467,687.567 855.026,687.567 855.585,687.567 856.145,687.567 856.704,687.567 857.263,687.567 857.822,687.567 858.382,687.567 858.941,687.567 859.5,687.567 860.059,687.567 860.619,687.567 861.178,687.567 861.737,687.567 862.296,687.567 862.856,687.567 863.415,687.567 863.974,687.567 864.533,687.567 865.093,687.567 865.652,687.567 866.211,687.567 866.77,687.567 867.33,687.567 867.889,687.567 868.448,687.567 869.007,687.567 869.567,687.567 870.126,687.567 870.685,687.567 871.244,687.567 871.804,687.567 872.363,687.567 872.922,687.567 873.481,687.567 874.041,687.567 874.6,687.567 875.159,687.567 875.718,687.567 876.278,687.567 876.837,687.567 877.396,687.567 877.955,687.567 878.515,687.567 879.074,687.567 879.633,687.567 880.192,687.567 880.752,687.567 881.311,687.567 881.87,687.567 882.429,687.567 882.989,687.567 883.548,687.567 884.107,687.567 884.666,687.567 885.226,687.567 885.785,687.567 886.344,687.567 886.903,687.567 887.463,687.567 888.022,687.567 888.581,687.567 889.14,687.567 889.7,687.567 890.259,687.567 890.818,687.567 891.377,687.567 891.937,687.567 892.496,687.567 893.055,687.567 893.614,687.567 894.174,687.567 894.733,687.567 895.292,687.567 895.851,687.567 896.411,687.567 896.97,687.567 897.529,687.567 898.088,687.567 898.648,687.567 899.207,687.567 899.766,687.567 900.325,687.567 900.885,687.567 901.444,687.567 902.003,687.567 902.562,687.567 903.122,687.567 903.681,687.567 904.24,687.567 904.799,687.567 905.359,687.567 905.918,687.567 906.477,687.567 907.036,687.567 907.596,687.567 908.155,687.567 908.714,687.567 909.273,687.567 909.833,687.567 910.392,687.567 910.951,687.567 911.51,687.567 912.07,687.567 912.629,687.567 913.188,687.567 913.747,687.567 914.307,687.567 914.866,687.567 915.425,687.567 915.984,687.567 916.544,687.567 917.103,687.567 917.662,687.567 918.221,687.567 918.781,687.567 919.34,687.567 919.899,687.567 920.458,687.567 921.018,687.567 921.577,687.567 922.136,687.567 922.695,687.567 923.255,687.567 923.814,687.567 924.373,687.567 924.932,687.567 925.492,687.567 926.051,687.567 926.61,687.567 927.169,687.567 927.729,687.567 928.288,687.567 928.847,687.567 929.406,687.567 929.966,687.567 930.525,687.567 931.084,687.567 931.644,687.567 932.203,687.567 932.762,687.567 933.321,687.567 933.881,687.567 934.44,687.567 934.999,687.567 935.558,687.567 936.118,687.567 936.677,687.567 937.236,687.567 937.795,687.567 938.355,687.567 938.914,687.567 939.473,687.567 940.032,687.567 940.592,687.567 941.151,687.567 941.71,687.567 942.269,687.567 942.829,687.567 943.388,687.567 943.947,687.567 944.506,687.567 945.066,687.567 945.625,687.567 946.184,687.567 946.743,687.567 947.303,687.567 947.862,687.567 948.421,687.567 948.98,687.567 949.54,687.567 950.099,687.567 950.658,687.567 951.217,687.567 951.777,687.567 952.336,687.567 952.895,687.567 953.454,687.567 954.014,687.567 954.573,687.567 955.132,687.567 955.691,687.567 956.251,687.567 956.81,687.567 957.369,687.567 957.928,687.567 958.488,687.567 959.047,687.567 959.606,687.567 960.165,687.567 960.725,687.567 961.284,687.567 961.843,687.567 962.402,687.567 962.962,687.567 963.521,687.567 964.08,687.567 964.639,687.567 965.199,687.567 965.758,687.567 966.317,687.567 966.876,687.567 967.436,687.567 967.995,687.567 968.554,687.567 969.113,687.567 969.673,687.567 970.232,687.567 970.791,687.567 971.35,687.567 971.91,687.567 972.469,687.567 973.028,687.567 973.587,687.567 974.147,687.567 974.706,687.567 975.265,687.567 975.824,687.567 976.384,687.567 976.943,687.567 977.502,687.567 978.061,687.567 978.621,687.567 979.18,687.567 979.739,687.567 980.298,687.567 980.858,687.567 981.417,687.567 981.976,687.567 982.535,687.567 983.095,687.567 983.654,687.567 984.213,687.567 984.772,687.567 985.332,687.567 985.891,687.567 986.45,687.567 987.009,687.567 987.569,687.567 988.128,687.567 988.687,687.567 989.246,687.567 989.806,687.567 990.365,687.567 990.924,687.567 991.483,687.567 992.043,687.567 992.602,687.567 993.161,687.567 993.72,687.567 994.28,687.567 994.839,687.567 995.398,687.567 995.957,687.567 996.517,687.567 997.076,687.567 997.635,687.567 998.194,687.567 998.754,687.567 999.313,687.567 999.872,687.567 1000.43,687.567 1000.99,687.567 1001.55,687.567 1002.11,687.567 1002.67,687.567 1003.23,687.567 1003.79,687.567 1004.35,687.567 1004.91,687.567 1005.46,687.567 1006.02,687.567 1006.58,687.567 1007.14,687.567 1007.7,687.567 1008.26,687.567 1008.82,687.567 1009.38,687.567 1009.94,687.567 1010.5,687.567 1011.06,687.567 1011.62,687.567 1012.18,687.567 1012.73,687.567 1013.29,687.567 1013.85,687.567 1014.41,687.567 1014.97,687.567 1015.53,687.567 1016.09,687.567 1016.65,687.567 1017.21,687.567 1017.77,687.567 1018.33,687.567 1018.89,687.567 1019.45,687.567 1020.01,687.567 1020.56,687.567 1021.12,687.567 1021.68,687.567 1022.24,687.567 1022.8,687.567 1023.36,687.567 1023.92,687.567 1024.48,687.567 1025.04,687.567 1025.6,687.567 1026.16,687.567 1026.72,687.567 1027.28,687.567 1027.83,687.567 1028.39,687.567 1028.95,687.567 1029.51,687.567 1030.07,687.567 1030.63,687.567 1031.19,687.567 1031.75,687.567 1032.31,687.567 1032.87,687.567 1033.43,687.567 1033.99,687.567 1034.55,687.567 1035.1,687.567 1035.66,687.567 1036.22,687.567 1036.78,687.567 1037.34,687.567 1037.9,687.567 1038.46,687.567 1039.02,687.567 1039.58,687.567 1040.14,687.567 1040.7,687.567 1041.26,687.567 1041.82,687.567 1042.38,687.567 1042.93,687.567 1043.49,687.567 1044.05,687.567 1044.61,687.567 1045.17,687.567 1045.73,687.567 1046.29,687.567 1046.85,687.567 1047.41,687.567 1047.97,687.567 1048.53,687.567 1049.09,687.567 1049.65,687.567 1050.2,687.567 1050.76,687.567 1051.32,687.567 1051.88,687.567 1052.44,687.567 1053,687.567 1053.56,687.567 1054.12,687.567 1054.68,687.567 1055.24,687.567 1055.8,687.567 1056.36,687.567 1056.92,687.567 1057.48,687.567 1058.03,687.567 1058.59,687.567 1059.15,687.567 1059.71,687.567 1060.27,687.567 1060.83,687.567 1061.39,687.567 1061.95,687.567 1062.51,687.567 1063.07,687.567 1063.63,687.567 1064.19,687.567 1064.75,687.567 1065.3,687.567 1065.86,687.567 1066.42,687.567 1066.98,687.567 1067.54,687.567 1068.1,687.567 1068.66,687.567 1069.22,687.567 1069.78,687.567 1070.34,687.567 1070.9,687.567 1071.46,687.567 1072.02,687.567 1072.57,687.567 1073.13,687.567 1073.69,687.567 1074.25,687.567 1074.81,687.567 1075.37,687.567 1075.93,687.567 1076.49,687.567 1077.05,687.567 1077.61,687.567 1078.17,687.567 1078.73,687.567 1079.29,687.567 1079.85,687.567 1080.4,687.567 1080.96,687.567 1081.52,687.567 1082.08,687.567 1082.64,687.567 1083.2,687.567 1083.76,687.567 1084.32,687.567 1084.88,687.567 1085.44,687.567 1086,687.567 1086.56,687.567 1087.12,687.567 1087.67,687.567 1088.23,687.567 1088.79,687.567 1089.35,687.567 1089.91,687.567 1090.47,687.567 1091.03,687.567 1091.59,687.567 1092.15,687.567 1092.71,687.567 1093.27,687.567 1093.83,687.567 1094.39,687.567 1094.94,687.567 1095.5,687.567 1096.06,687.567 1096.62,687.567 1097.18,687.567 1097.74,687.567 1098.3,687.567 1098.86,687.567 1099.42,687.567 1099.98,687.567 1100.54,687.567 1101.1,687.567 1101.66,687.567 1102.22,687.567 1102.77,687.567 1103.33,687.567 1103.89,687.567 1104.45,687.567 1105.01,687.567 1105.57,687.567 1106.13,687.567 1106.69,687.567 1107.25,687.567 1107.81,687.567 1108.37,687.567 1108.93,687.567 1109.49,687.567 1110.04,687.567 1110.6,687.567 1111.16,687.567 1111.72,687.567 1112.28,687.567 1112.84,687.567 1113.4,687.567 1113.96,687.567 1114.52,687.567 1115.08,687.567 1115.64,687.567 1116.2,687.567 1116.76,687.567 1117.31,687.567 1117.87,687.567 1118.43,687.567 1118.99,687.567 1119.55,687.567 1120.11,687.567 1120.67,687.567 1121.23,687.567 1121.79,687.567 1122.35,687.567 1122.91,687.567 1123.47,687.567 1124.03,687.567 1124.59,687.567 1125.14,687.567 1125.7,687.567 1126.26,687.567 1126.82,687.567 1127.38,687.567 1127.94,687.567 1128.5,687.567 1129.06,687.567 1129.62,687.567 1130.18,687.567 1130.74,687.567 1131.3,687.567 1131.86,687.567 1132.41,687.567 1132.97,687.567 1133.53,687.567 1134.09,687.567 1134.65,687.567 1135.21,687.567 1135.77,687.567 1136.33,687.567 1136.89,687.567 1137.45,687.567 1138.01,687.567 1138.57,687.567 1139.13,687.567 1139.68,687.567 1140.24,687.567 1140.8,687.567 1141.36,687.567 1141.92,687.567 1142.48,687.567 1143.04,687.567 1143.6,687.567 1144.16,687.567 1144.72,687.567 1145.28,687.567 1145.84,687.567 1146.4,687.567 1146.96,687.567 1147.51,687.567 1148.07,687.567 1148.63,687.567 1149.19,687.567 1149.75,687.567 1150.31,687.567 1150.87,687.567 1151.43,687.567 1151.99,687.567 1152.55,687.567 1153.11,687.567 1153.67,687.567 1154.23,687.567 1154.78,687.567 1155.34,687.567 1155.9,687.567 1156.46,687.567 1157.02,687.567 1157.58,687.567 1158.14,687.567 1158.7,687.567 1159.26,687.567 1159.82,687.567 1160.38,687.567 1160.94,687.567 1161.5,687.567 1162.05,687.567 1162.61,687.567 1163.17,687.567 1163.73,687.567 1164.29,687.567 1164.85,687.567 1165.41,687.567 1165.97,687.567 1166.53,687.567 1167.09,687.567 1167.65,687.567 1168.21,687.567 1168.77,687.567 1169.33,687.567 1169.88,687.567 1170.44,687.567 1171,687.567 1171.56,687.567 1172.12,687.567 1172.68,687.567 1173.24,687.567 1173.8,687.567 1174.36,687.567 1174.92,687.567 1175.48,687.567 1176.04,687.567 1176.6,687.567 1177.15,687.567 1177.71,687.567 1178.27,687.567 1178.83,687.567 1179.39,687.567 1179.95,687.567 1180.51,687.567 1181.07,687.567 1181.63,687.567 1182.19,687.567 1182.75,687.567 1183.31,687.567 1183.87,687.567 1184.43,687.567 1184.98,687.567 1185.54,687.567 1186.1,687.567 1186.66,687.567 1187.22,687.567 1187.78,687.567 1188.34,687.567 1188.9,687.567 1189.46,687.567 1190.02,687.567 1190.58,687.567 1191.14,687.567 1191.7,687.567 1192.25,687.567 1192.81,687.567 1193.37,687.567 1193.93,687.567 1194.49,687.567 1195.05,687.567 1195.61,687.567 1196.17,687.567 1196.73,687.567 1197.29,687.567 1197.85,687.567 1198.41,687.567 1198.97,687.567 1199.52,687.567 1200.08,687.567 1200.64,687.567 1201.2,687.567 1201.76,687.567 1202.32,687.567 1202.88,687.567 1203.44,687.567 1204,687.567 1204.56,687.567 1205.12,687.567 1205.68,687.567 1206.24,687.567 1206.8,687.567 1207.35,687.567 1207.91,687.567 1208.47,687.567 1209.03,687.567 1209.59,687.567 1210.15,687.567 1210.71,687.567 1211.27,687.567 1211.83,687.567 1212.39,687.567 1212.95,687.567 1213.51,687.567 1214.07,687.567 1214.62,687.567 1215.18,687.567 1215.74,687.567 1216.3,687.567 1216.86,687.567 1217.42,687.567 1217.98,687.567 1218.54,687.567 1219.1,687.567 1219.66,687.567 1220.22,687.567 1220.78,687.567 1221.34,687.567 1221.89,687.567 1222.45,687.567 1223.01,687.567 1223.57,687.567 1224.13,687.567 1224.69,687.567 1225.25,687.567 1225.81,687.567 1226.37,687.567 1226.93,687.567 1227.49,687.567 1228.05,687.567 1228.61,687.567 1229.17,687.567 1229.72,687.567 1230.28,687.567 1230.84,687.567 1231.4,687.567 1231.96,687.567 1232.52,687.567 1233.08,687.567 1233.64,687.567 1234.2,687.567 1234.76,687.567 1235.32,687.567 1235.88,687.567 1236.44,687.567 1236.99,687.567 1237.55,687.567 1238.11,687.567 1238.67,687.567 1239.23,687.567 1239.79,687.567 1240.35,687.567 1240.91,687.567 1241.47,687.567 1242.03,687.567 1242.59,687.567 1243.15,687.567 1243.71,687.567 1244.26,687.567 1244.82,687.567 1245.38,687.567 1245.94,687.567 1246.5,687.567 1247.06,687.567 1247.62,687.567 1248.18,687.567 1248.74,687.567 1249.3,687.567 1249.86,687.567 1250.42,687.567 1250.98,687.567 1251.54,687.567 1252.09,687.567 1252.65,687.567 1253.21,687.567 1253.77,687.567 1254.33,687.567 1254.89,687.567 1255.45,687.567 1256.01,687.567 1256.57,687.567 1257.13,687.567 1257.69,687.567 1258.25,687.567 1258.81,687.567 1259.36,687.567 1259.92,687.567 1260.48,687.567 1261.04,687.567 1261.6,687.567 1262.16,687.567 1262.72,687.567 1263.28,687.567 1263.84,687.567 1264.4,687.567 1264.96,687.567 1265.52,687.567 1266.08,687.567 1266.63,687.567 1267.19,687.567 1267.75,687.567 1268.31,687.567 1268.87,687.567 1269.43,687.567 1269.99,687.567 1270.55,687.567 1271.11,687.567 1271.67,687.567 1272.23,687.567 1272.79,687.567 1273.35,687.567 1273.91,687.567 1274.46,687.567 1275.02,687.567 1275.58,687.567 1276.14,687.567 1276.7,687.567 1277.26,687.567 1277.82,687.567 1278.38,687.567 1278.94,687.567 1279.5,687.567 1280.06,687.567 1280.62,687.567 1281.18,687.567 1281.73,687.567 1282.29,687.567 1282.85,687.567 1283.41,687.567 1283.97,687.567 1284.53,687.567 1285.09,687.567 1285.65,687.567 1286.21,687.567 1286.77,687.567 1287.33,687.567 1287.89,687.567 1288.45,687.567 1289,687.567 1289.56,687.567 1290.12,687.567 1290.68,687.567 1291.24,687.567 1291.8,687.567 1292.36,687.567 1292.92,687.567 1293.48,687.567 1294.04,687.567 1294.6,687.567 1295.16,687.567 1295.72,687.567 1296.28,687.567 1296.83,687.567 1297.39,687.567 1297.95,687.567 1298.51,687.567 1299.07,687.567 1299.63,687.567 1300.19,687.567 1300.75,687.567 1301.31,687.567 1301.87,687.567 1302.43,687.567 1302.99,687.567 1303.55,687.567 1304.1,687.567 1304.66,687.567 1305.22,687.567 1305.78,687.567 1306.34,687.567 1306.9,687.567 1307.46,687.567 1308.02,687.567 1308.58,687.567 1309.14,687.567 1309.7,687.567 1310.26,687.567 1310.82,687.567 1311.38,687.567 1311.93,687.567 1312.49,687.567 1313.05,687.567 1313.61,687.567 1314.17,687.567 1314.73,687.567 1315.29,687.567 1315.85,687.567 1316.41,687.567 1316.97,687.567 1317.53,687.567 1318.09,687.567 1318.65,687.567 1319.2,687.567 1319.76,687.567 1320.32,687.567 1320.88,687.567 1321.44,687.567 1322,687.567 1322.56,687.567 1323.12,687.567 1323.68,687.567 1324.24,687.567 1324.8,687.567 1325.36,687.567 1325.92,687.567 1326.47,687.567 1327.03,687.567 1327.59,687.567 1328.15,687.567 1328.71,687.567 1329.27,687.567 1329.83,687.567 1330.39,687.567 1330.95,687.567 1331.51,687.567 1332.07,687.567 1332.63,687.567 1333.19,687.567 1333.75,687.567 1334.3,687.567 1334.86,687.567 1335.42,687.567 1335.98,687.567 1336.54,687.567 1337.1,687.567 1337.66,687.567 1338.22,687.567 1338.78,687.567 1339.34,687.567 1339.9,687.567 1340.46,687.567 1341.02,687.567 1341.57,687.567 1342.13,687.567 1342.69,687.567 1343.25,687.567 1343.81,687.567 1344.37,687.567 1344.93,687.567 1345.49,687.567 1346.05,687.567 1346.61,687.567 1347.17,687.567 1347.73,687.567 1348.29,687.567 1348.84,687.567 1349.4,687.567 1349.96,687.567 1350.52,687.567 1351.08,687.567 1351.64,687.567 1352.2,687.567 1352.76,687.567 1353.32,687.567 1353.88,687.567 1354.44,687.567 1355,687.567 1355.56,687.567 1356.12,687.567 1356.67,687.567 1357.23,687.567 1357.79,687.567 1358.35,687.567 1358.91,687.567 1359.47,687.567 1360.03,687.567 1360.59,687.567 1361.15,687.567 1361.71,687.567 1362.27,687.567 1362.83,687.567 1363.39,687.567 1363.94,687.567 1364.5,687.567 1365.06,687.567 1365.62,687.567 1366.18,687.567 1366.74,687.567 1367.3,687.567 1367.86,687.567 1368.42,687.567 1368.98,687.567 1369.54,687.567 1370.1,687.567 1370.66,687.567 1371.21,687.567 1371.77,687.567 1372.33,687.567 1372.89,687.567 1373.45,687.567 1374.01,687.567 1374.57,687.567 1375.13,687.567 1375.69,687.567 1376.25,687.567 1376.81,687.567 1377.37,687.567 1377.93,687.567 1378.49,687.567 1379.04,687.567 1379.6,687.567 1380.16,687.567 1380.72,687.567 1381.28,687.567 1381.84,687.567 1382.4,687.567 1382.96,687.567 1383.52,687.567 1384.08,687.567 1384.64,687.567 1385.2,687.567 1385.76,687.567 1386.31,687.567 1386.87,687.567 1387.43,687.567 1387.99,687.567 1388.55,687.567 1389.11,687.567 1389.67,687.567 1390.23,687.567 1390.79,687.567 1391.35,687.567 1391.91,687.567 1392.47,687.567 1393.03,687.567 1393.58,687.567 1394.14,687.567 1394.7,687.567 1395.26,687.567 1395.82,687.567 1396.38,687.567 1396.94,687.567 1397.5,687.567 1398.06,687.567 1398.62,687.567 1399.18,687.567 1399.74,687.567 1400.3,687.567 1400.86,687.567 1401.41,687.567 1401.97,687.567 1402.53,687.567 1403.09,687.567 1403.65,687.567 1404.21,687.567 1404.77,687.567 1405.33,687.567 1405.89,687.567 1406.45,687.567 1407.01,687.567 1407.57,687.567 1408.13,687.567 1408.68,687.567 1409.24,687.567 1409.8,687.567 1410.36,687.567 1410.92,687.567 1411.48,687.567 1412.04,687.567 1412.6,687.567 1413.16,687.567 1413.72,687.567 1414.28,687.567 1414.84,687.567 1415.4,687.567 1415.95,687.567 1416.51,687.567 1417.07,687.567 1417.63,687.567 1418.19,687.567 1418.75,687.567 1419.31,687.567 1419.87,687.567 1420.43,687.567 1420.99,687.567 1421.55,687.567 1422.11,687.567 1422.67,687.567 1423.23,687.567 1423.78,687.567 1424.34,687.567 1424.9,687.567 1425.46,687.567 1426.02,687.567 1426.58,687.567 1427.14,687.567 1427.7,687.567 1428.26,687.567 1428.82,687.567 1429.38,687.567 1429.94,687.567 1430.5,687.567 1431.05,687.567 1431.61,687.567 1432.17,687.567 1432.73,687.567 1433.29,687.567 1433.85,687.567 1434.41,687.567 1434.97,687.567 1435.53,687.567 1436.09,687.567 1436.65,687.567 1437.21,687.567 1437.77,687.567 1438.33,687.567 1438.88,687.567 1439.44,687.567 1440,687.567 1440.56,687.567 1441.12,687.567 1441.68,687.567 1442.24,687.567 1442.8,687.567 1443.36,687.567 1443.92,687.567 1444.48,687.567 1445.04,687.567 1445.6,687.567 1446.15,687.567 1446.71,687.567 1447.27,687.567 1447.83,687.567 1448.39,687.567 1448.95,687.567 1449.51,687.567 1450.07,687.567 1450.63,687.567 1451.19,687.567 1451.75,687.567 1452.31,687.567 1452.87,687.567 1453.42,687.567 1453.98,687.567 1454.54,687.567 1455.1,687.567 1455.66,687.567 1456.22,687.567 1456.78,687.567 1457.34,687.567 1457.9,687.567 1458.46,687.567 1459.02,687.567 1459.58,687.567 1460.14,687.567 1460.7,687.567 1461.25,687.567 1461.81,687.567 1462.37,687.567 1462.93,687.567 1463.49,687.567 1464.05,687.567 1464.61,687.567 1465.17,687.567 1465.73,687.567 1466.29,687.567 1466.85,687.567 1467.41,687.567 1467.97,687.567 1468.52,687.567 1469.08,687.567 1469.64,687.567 1470.2,687.567 1470.76,687.567 1471.32,687.567 1471.88,687.567 1472.44,687.567 1473,687.567 1473.56,687.567 1474.12,687.567 1474.68,687.567 1475.24,687.567 1475.79,687.567 1476.35,687.567 1476.91,687.567 1477.47,687.567 1478.03,687.567 1478.59,687.567 1479.15,687.567 1479.71,687.567 1480.27,687.567 1480.83,687.567 1481.39,687.567 1481.95,687.567 1482.51,687.567 1483.07,687.567 1483.62,687.567 1484.18,687.567 1484.74,687.567 1485.3,687.567 1485.86,687.567 1486.42,687.567 1486.98,687.567 1487.54,687.567 1488.1,687.567 1488.66,687.567 1489.22,687.567 1489.78,687.567 1490.34,687.567 1490.89,687.567 1491.45,687.567 1492.01,687.567 1492.57,687.567 1493.13,687.567 1493.69,687.567 1494.25,687.567 1494.81,687.567 1495.37,687.567 1495.93,687.567 1496.49,687.567 1497.05,687.567 1497.61,687.567 1498.16,687.567 1498.72,687.567 1499.28,687.567 1499.84,687.567 1500.4,687.567 1500.96,687.567 1501.52,687.567 1502.08,687.567 1502.64,687.567 1503.2,687.567 1503.76,687.567 1504.32,687.567 1504.88,687.567 1505.44,687.567 1505.99,687.567 1506.55,687.567 1507.11,687.567 1507.67,687.567 1508.23,687.567 1508.79,687.567 1509.35,687.567 1509.91,687.567 1510.47,687.567 1511.03,687.567 1511.59,687.567 1512.15,687.567 1512.71,687.567 1513.26,687.567 1513.82,687.567 1514.38,687.567 1514.94,687.567 1515.5,687.567 1516.06,687.567 1516.62,687.567 1517.18,687.567 1517.74,687.567 1518.3,687.567 1518.86,687.567 1519.42,687.567 1519.98,687.567 1520.53,687.567 1521.09,687.567 1521.65,687.567 1522.21,687.567 1522.77,687.567 1523.33,687.567 1523.89,687.567 1524.45,687.567 1525.01,687.567 1525.57,687.567 1526.13,687.567 1526.69,687.567 1527.25,687.567 1527.81,687.567 1528.36,687.567 1528.92,687.567 1529.48,687.567 1530.04,687.567 1530.6,687.567 1531.16,687.567 1531.72,687.567 1532.28,687.567 1532.84,687.567 1533.4,687.567 1533.96,687.567 1534.52,687.567 1535.08,687.567 1535.63,687.567 1536.19,687.567 1536.75,687.567 1537.31,687.567 1537.87,687.567 1538.43,687.567 1538.99,687.567 1539.55,687.567 1540.11,687.567 1540.67,687.567 1541.23,687.567 1541.79,687.567 1542.35,687.567 1542.9,687.567 1543.46,687.567 1544.02,687.567 1544.58,687.567 1545.14,687.567 1545.7,687.567 1546.26,687.567 1546.82,687.567 1547.38,687.567 1547.94,687.567 1548.5,687.567 1549.06,687.567 1549.62,687.567 1550.18,687.567 1550.73,687.567 1551.29,687.567 1551.85,687.567 1552.41,687.567 1552.97,687.567 1553.53,687.567 1554.09,687.567 1554.65,687.567 1555.21,687.567 1555.77,687.567 1556.33,687.567 1556.89,687.567 1557.45,687.567 1558,687.567 1558.56,687.567 1559.12,687.567 1559.68,687.567 1560.24,687.567 1560.8,687.567 1561.36,687.567 1561.92,687.567 1562.48,687.567 1563.04,687.567 1563.6,687.567 1564.16,687.567 1564.72,687.567 1565.28,687.567 1565.83,687.567 1566.39,687.567 1566.95,687.567 1567.51,687.567 1568.07,687.567 1568.63,687.567 1569.19,687.567 1569.75,687.567 1570.31,687.567 1570.87,687.567 1571.43,687.567 1571.99,687.567 1572.55,687.567 1573.1,687.567 1573.66,687.567 1574.22,687.567 1574.78,687.567 1575.34,687.567 1575.9,687.567 1576.46,687.567 1577.02,687.567 1577.58,687.567 1578.14,687.567 1578.7,687.567 1579.26,687.567 1579.82,687.567 1580.37,687.567 1580.93,687.567 1581.49,687.567 1582.05,687.567 1582.61,687.567 1583.17,687.567 1583.73,687.567 1584.29,687.567 1584.85,687.567 1585.41,687.567 1585.97,687.567 1586.53,687.567 1587.09,687.567 1587.65,687.567 1588.2,687.567 1588.76,687.567 1589.32,687.567 1589.88,687.567 1590.44,687.567 1591,687.567 1591.56,687.567 1592.12,687.567 1592.68,687.567 1593.24,687.567 1593.8,687.567 1594.36,687.567 1594.92,687.567 1595.47,687.567 1596.03,687.567 1596.59,687.567 1597.15,687.567 1597.71,687.567 1598.27,687.567 1598.83,687.567 1599.39,687.567 1599.95,687.567 1600.51,687.567 1601.07,687.567 1601.63,687.567 1602.19,687.567 1602.74,687.567 1603.3,687.567 1603.86,687.567 1604.42,687.567 1604.98,687.567 1605.54,687.567 1606.1,687.567 1606.66,687.567 1607.22,687.567 1607.78,687.567 1608.34,687.567 1608.9,687.567 1609.46,687.567 1610.02,687.567 1610.57,687.567 1611.13,687.567 1611.69,687.567 1612.25,687.567 1612.81,687.567 1613.37,687.567 1613.93,687.567 1614.49,687.567 1615.05,687.567 1615.61,687.567 1616.17,687.567 1616.73,687.567 1617.29,687.567 1617.84,687.567 1618.4,687.567 1618.96,687.567 1619.52,687.567 1620.08,687.567 1620.64,687.567 1621.2,687.567 1621.76,687.567 1622.32,687.567 1622.88,687.567 1623.44,687.567 1624,687.567 1624.56,687.567 1625.11,687.567 1625.67,687.567 1626.23,687.567 1626.79,687.567 1627.35,687.567 1627.91,687.567 1628.47,687.567 1629.03,687.567 1629.59,687.567 1630.15,687.567 1630.71,687.567 1631.27,687.567 1631.83,687.567 1632.39,687.567 1632.94,687.567 1633.5,687.567 1634.06,687.567 1634.62,687.567 1635.18,687.567 1635.74,687.567 1636.3,687.567 1636.86,687.567 1637.42,687.567 1637.98,687.567 1638.54,687.567 1639.1,687.567 1639.66,687.567 1640.21,687.567 1640.77,687.567 1641.33,687.567 1641.89,687.567 1642.45,687.567 1643.01,687.567 1643.57,687.567 1644.13,687.567 1644.69,687.567 1645.25,687.567 1645.81,687.567 1646.37,687.567 1646.93,687.567 1647.48,687.567 1648.04,687.567 1648.6,687.567 1649.16,687.567 1649.72,687.567 1650.28,687.567 1650.84,687.567 1651.4,687.567 1651.96,687.567 1652.52,687.567 1653.08,687.567 1653.64,687.567 1654.2,687.567 1654.76,687.567 1655.31,687.567 1655.87,687.567 1656.43,687.567 1656.99,687.567 1657.55,687.567 1658.11,687.567 1658.67,687.567 1659.23,687.567 1659.79,687.567 1660.35,687.567 1660.91,687.567 1661.47,687.567 1662.03,687.567 1662.58,687.567 1663.14,687.567 1663.7,687.567 1664.26,687.567 1664.82,687.567 1665.38,687.567 1665.94,687.567 1666.5,687.567 1667.06,687.567 1667.62,687.567 1668.18,687.567 1668.74,687.567 1669.3,687.567 1669.85,687.567 1670.41,687.567 1670.97,687.567 1671.53,687.567 1672.09,687.567 1672.65,687.567 1673.21,687.567 1673.77,687.567 1674.33,687.567 1674.89,687.567 1675.45,687.567 1676.01,687.567 1676.57,687.567 1677.13,687.567 1677.68,687.567 1678.24,687.567 1678.8,687.567 1679.36,687.567 1679.92,687.567 1680.48,687.567 1681.04,687.567 1681.6,687.567 1682.16,687.567 1682.72,687.567 1683.28,687.567 1683.84,687.567 1684.4,687.567 1684.95,687.567 1685.51,687.567 1686.07,687.567 1686.63,687.567 1687.19,687.567 1687.75,687.567 1688.31,687.567 1688.87,687.567 1689.43,687.567 1689.99,687.567 1690.55,687.567 1691.11,687.567 1691.67,687.567 1692.23,687.567 1692.78,687.567 1693.34,687.567 1693.9,687.567 1694.46,687.567 1695.02,687.567 1695.58,687.567 1696.14,687.567 1696.7,687.567 1697.26,687.567 1697.82,687.567 1698.38,687.567 1698.94,687.567 1699.5,687.567 1700.05,687.567 1700.61,687.567 1701.17,687.567 1701.73,687.567 1702.29,687.567 1702.85,687.567 1703.41,687.567 1703.97,687.567 1704.53,687.567 1705.09,687.567 1705.65,687.567 1706.21,687.567 1706.77,687.567 1707.32,687.567 1707.88,687.567 1708.44,687.567 1709,687.567 1709.56,687.567 1710.12,687.567 1710.68,687.567 1711.24,687.567 1711.8,687.567 1712.36,687.567 1712.92,687.567 1713.48,687.567 1714.04,687.567 1714.6,687.567 1715.15,687.567 1715.71,687.567 1716.27,687.567 1716.83,687.567 1717.39,687.567 1717.95,687.567 1718.51,687.567 1719.07,687.567 1719.63,687.567 1720.19,687.567 1720.75,687.567 1721.31,687.567 1721.87,687.567 1722.42,687.567 1722.98,687.567 1723.54,687.567 1724.1,687.567 1724.66,687.567 1725.22,687.567 1725.78,687.567 1726.34,687.567 1726.9,687.567 1727.46,687.567 1728.02,687.567 1728.58,687.567 1729.14,687.567 1729.69,687.567 1730.25,687.567 1730.81,687.567 1731.37,687.567 1731.93,687.567 1732.49,687.567 1733.05,687.567 1733.61,687.567 1734.17,687.567 1734.73,687.567 1735.29,687.567 1735.85,687.567 1736.41,687.567 1736.97,687.567 1737.52,687.567 1738.08,687.567 1738.64,687.567 1739.2,687.567 1739.76,687.567 1740.32,687.567 1740.88,687.567 1741.44,687.567 1742,687.567 1742.56,687.567 1743.12,687.567 1743.68,687.567 1744.24,687.567 1744.79,687.567 1745.35,687.567 1745.91,687.567 1746.47,687.567 1747.03,687.567 1747.59,687.567 1748.15,687.567 1748.71,687.567 1749.27,687.567 1749.83,687.567 1750.39,687.567 1750.95,687.567 1751.51,687.567 1752.06,687.567 1752.62,687.567 1753.18,687.567 1753.74,687.567 1754.3,687.567 1754.86,687.567 1755.42,687.567 1755.98,687.567 1756.54,687.567 1757.1,687.567 1757.66,687.567 1758.22,687.567 1758.78,687.567 1759.34,687.567 1759.89,687.567 1760.45,687.567 1761.01,687.567 1761.57,687.567 1762.13,687.567 1762.69,687.567 1763.25,687.567 1763.81,687.567 1764.37,687.567 1764.93,687.567 1765.49,687.567 1766.05,687.567 1766.61,687.567 1767.16,687.567 1767.72,687.567 1768.28,687.567 1768.84,687.567 1769.4,687.567 1769.96,687.567 1770.52,687.567 1771.08,687.567 1771.64,687.567 1772.2,687.567 1772.76,687.567 1773.32,687.567 1773.88,687.567 1774.43,687.567 1774.99,687.567 1775.55,687.567 1776.11,687.567 1776.67,687.567 1777.23,687.567 1777.79,687.567 1778.35,687.567 1778.91,687.567 1779.47,687.567 1780.03,687.567 1780.59,687.567 1781.15,687.567 1781.71,687.567 1782.26,687.567 1782.82,687.567 1783.38,687.567 1783.94,687.567 1784.5,687.567 1785.06,687.567 1785.62,687.567 1786.18,687.567 1786.74,687.567 1787.3,687.567 1787.86,687.567 1788.42,687.567 1788.98,687.567 1789.53,687.567 1790.09,687.567 1790.65,687.567 1791.21,687.567 1791.77,687.567 1792.33,687.567 1792.89,687.567 1793.45,687.567 1794.01,687.567 1794.57,687.567 1795.13,687.567 1795.69,687.567 1796.25,687.567 1796.8,687.567 1797.36,687.567 1797.92,687.567 1798.48,687.567 1799.04,687.567 1799.6,687.567 1800.16,687.567 1800.72,687.567 1801.28,687.567 1801.84,687.567 1802.4,687.567 1802.96,687.567 1803.52,687.567 1804.08,687.567 1804.63,687.567 1805.19,687.567 1805.75,687.567 1806.31,687.567 1806.87,687.567 1807.43,687.567 1807.99,687.567 1808.55,687.567 1809.11,687.567 1809.67,687.567 1810.23,687.567 1810.79,687.567 1811.35,687.567 1811.9,687.567 1812.46,687.567 1813.02,687.567 1813.58,687.567 1814.14,687.567 1814.7,687.567 1815.26,687.567 1815.82,687.567 1816.38,687.567 1816.94,687.567 1817.5,687.567 1818.06,687.567 1818.62,687.567 1819.18,687.567 1819.73,687.567 1820.29,687.567 1820.85,687.567 1821.41,687.567 1821.97,687.567 1822.53,687.567 1823.09,687.567 1823.65,687.567 1824.21,687.567 1824.77,687.567 1825.33,687.567 1825.89,687.567 1826.45,687.567 1827,687.567 1827.56,687.567 1828.12,687.567 1828.68,687.567 1829.24,687.567 1829.8,687.567 1830.36,687.567 1830.92,687.567 1831.48,687.567 1832.04,687.567 1832.6,687.567 1833.16,687.567 1833.72,687.567 1834.27,687.567 1834.83,687.567 1835.39,687.567 1835.95,687.567 1836.51,687.567 1837.07,687.567 1837.63,687.567 1838.19,687.567 \"/>\n<path clip-path=\"url(#clip163)\" d=\"M720.247 684.932 L720.806 684.932 L721.365 684.932 L721.924 684.932 L722.484 684.932 L723.043 684.932 L723.602 684.932 L724.161 684.932 L724.721 684.932 L725.28 684.932 L725.839 684.932 L726.398 684.932 L726.958 684.932 L727.517 684.932 L728.076 684.932 L728.635 684.932 L729.195 684.932 L729.754 684.932 L730.313 684.932 L730.872 684.932 L731.432 684.932 L731.991 684.932 L732.55 684.932 L733.109 684.932 L733.669 684.932 L734.228 684.932 L734.787 684.932 L735.346 684.932 L735.906 684.932 L736.465 684.932 L737.024 684.932 L737.583 684.932 L738.143 684.932 L738.702 684.932 L739.261 684.932 L739.82 684.932 L740.38 684.932 L740.939 684.932 L741.498 684.932 L742.057 684.932 L742.617 684.932 L743.176 684.932 L743.735 684.932 L744.294 684.932 L744.854 684.932 L745.413 684.932 L745.972 684.932 L746.531 684.932 L747.091 684.932 L747.65 684.932 L748.209 684.932 L748.768 684.932 L749.328 684.932 L749.887 684.932 L750.446 684.932 L751.005 684.932 L751.565 684.932 L752.124 684.932 L752.683 684.932 L753.242 684.932 L753.802 684.932 L754.361 684.932 L754.92 684.932 L755.479 684.932 L756.039 684.932 L756.598 684.932 L757.157 684.932 L757.716 684.932 L758.276 684.932 L758.835 684.932 L759.394 684.932 L759.953 684.932 L760.513 684.932 L761.072 684.932 L761.631 684.932 L762.19 684.932 L762.75 684.932 L763.309 684.932 L763.868 684.932 L764.427 684.932 L764.987 684.932 L765.546 684.932 L766.105 684.932 L766.664 684.932 L767.224 684.932 L767.783 684.932 L768.342 684.932 L768.901 684.932 L769.461 684.932 L770.02 684.932 L770.579 684.932 L771.138 684.932 L771.698 684.932 L772.257 684.932 L772.816 684.932 L773.375 684.932 L773.935 684.932 L774.494 684.932 L775.053 684.932 L775.612 684.932 L776.172 684.932 L776.731 684.932 L777.29 684.932 L777.849 684.932 L778.409 684.932 L778.968 684.932 L779.527 684.932 L780.086 684.932 L780.646 684.932 L781.205 684.932 L781.764 684.932 L782.323 684.932 L782.883 684.932 L783.442 684.932 L784.001 684.932 L784.56 684.932 L785.12 684.932 L785.679 684.932 L786.238 684.932 L786.797 684.932 L787.357 684.932 L787.916 684.932 L788.475 684.932 L789.034 684.932 L789.594 684.932 L790.153 684.932 L790.712 684.932 L791.271 684.932 L791.831 684.932 L792.39 684.932 L792.949 684.932 L793.508 684.932 L794.068 684.932 L794.627 684.932 L795.186 684.932 L795.745 684.932 L796.305 684.932 L796.864 684.932 L797.423 684.932 L797.982 684.932 L798.542 684.932 L799.101 684.932 L799.66 684.932 L800.219 684.932 L800.779 684.932 L801.338 684.932 L801.897 684.932 L802.456 684.932 L803.016 684.932 L803.575 684.932 L804.134 684.932 L804.693 684.932 L805.253 684.932 L805.812 684.932 L806.371 684.932 L806.931 684.932 L807.49 684.932 L808.049 684.932 L808.608 684.932 L809.168 684.932 L809.727 684.932 L810.286 684.932 L810.845 684.932 L811.405 684.932 L811.964 684.932 L812.523 684.932 L813.082 684.932 L813.642 684.932 L814.201 684.932 L814.76 684.932 L815.319 684.932 L815.879 684.932 L816.438 684.932 L816.997 684.932 L817.556 684.932 L818.116 684.932 L818.675 684.932 L819.234 684.932 L819.793 684.932 L820.353 684.932 L820.912 684.932 L821.471 684.932 L822.03 684.932 L822.59 684.932 L823.149 684.932 L823.708 684.932 L824.267 684.932 L824.827 684.932 L825.386 684.932 L825.945 684.932 L826.504 684.932 L827.064 684.932 L827.623 684.932 L828.182 684.932 L828.741 684.932 L829.301 684.932 L829.86 684.932 L830.419 684.932 L830.978 684.932 L831.538 684.932 L832.097 684.932 L832.656 684.932 L833.215 684.932 L833.775 684.932 L834.334 684.932 L834.893 684.932 L835.452 684.932 L836.012 684.932 L836.571 684.932 L837.13 684.932 L837.689 684.932 L838.249 684.932 L838.808 684.932 L839.367 684.932 L839.926 684.932 L840.486 684.932 L841.045 684.932 L841.604 684.932 L842.163 684.932 L842.723 684.932 L843.282 684.932 L843.841 684.932 L844.4 684.932 L844.96 684.932 L845.519 684.932 L846.078 684.932 L846.637 684.932 L847.197 684.932 L847.756 684.932 L848.315 684.932 L848.874 684.932 L849.434 684.932 L849.993 684.932 L850.552 684.932 L851.111 684.932 L851.671 684.932 L852.23 684.932 L852.789 684.932 L853.348 684.932 L853.908 684.932 L854.467 684.932 L855.026 684.932 L855.585 684.932 L856.145 684.932 L856.704 684.932 L857.263 684.932 L857.822 684.932 L858.382 684.932 L858.941 684.932 L859.5 684.932 L860.059 684.932 L860.619 684.932 L861.178 684.932 L861.737 684.932 L862.296 684.932 L862.856 684.932 L863.415 684.932 L863.974 684.932 L864.533 684.932 L865.093 684.932 L865.652 684.932 L866.211 684.932 L866.77 684.932 L867.33 684.932 L867.889 684.932 L868.448 684.932 L869.007 684.932 L869.567 684.932 L870.126 684.932 L870.685 684.932 L871.244 684.932 L871.804 684.932 L872.363 684.932 L872.922 684.932 L873.481 684.932 L874.041 684.932 L874.6 684.932 L875.159 684.932 L875.718 684.932 L876.278 684.932 L876.837 684.932 L877.396 684.932 L877.955 684.932 L878.515 684.932 L879.074 684.932 L879.633 684.932 L880.192 684.932 L880.752 684.932 L881.311 684.932 L881.87 684.932 L882.429 684.932 L882.989 684.932 L883.548 684.932 L884.107 684.932 L884.666 684.932 L885.226 684.932 L885.785 684.932 L886.344 684.932 L886.903 684.932 L887.463 684.932 L888.022 684.932 L888.581 684.932 L889.14 684.932 L889.7 684.932 L890.259 684.932 L890.818 684.932 L891.377 684.932 L891.937 684.932 L892.496 684.932 L893.055 684.932 L893.614 684.932 L894.174 684.932 L894.733 684.932 L895.292 684.932 L895.851 684.932 L896.411 684.932 L896.97 684.932 L897.529 684.932 L898.088 684.932 L898.648 684.932 L899.207 684.932 L899.766 684.932 L900.325 684.932 L900.885 684.932 L901.444 684.932 L902.003 684.932 L902.562 684.932 L903.122 684.932 L903.681 684.932 L904.24 684.932 L904.799 684.932 L905.359 684.932 L905.918 684.932 L906.477 684.932 L907.036 684.932 L907.596 684.932 L908.155 684.932 L908.714 684.932 L909.273 684.932 L909.833 684.932 L910.392 684.932 L910.951 684.932 L911.51 684.932 L912.07 684.932 L912.629 684.932 L913.188 684.932 L913.747 684.932 L914.307 684.932 L914.866 684.932 L915.425 684.932 L915.984 684.932 L916.544 684.932 L917.103 684.932 L917.662 684.932 L918.221 684.932 L918.781 684.932 L919.34 684.932 L919.899 684.932 L920.458 684.932 L921.018 684.932 L921.577 684.932 L922.136 684.932 L922.695 684.932 L923.255 684.932 L923.814 684.932 L924.373 684.932 L924.932 684.932 L925.492 684.932 L926.051 684.932 L926.61 684.932 L927.169 684.932 L927.729 684.932 L928.288 684.932 L928.847 684.932 L929.406 684.932 L929.966 684.932 L930.525 684.932 L931.084 684.932 L931.644 684.932 L932.203 684.932 L932.762 684.932 L933.321 684.932 L933.881 684.932 L934.44 684.932 L934.999 684.932 L935.558 684.932 L936.118 684.932 L936.677 684.932 L937.236 684.932 L937.795 684.932 L938.355 684.932 L938.914 684.932 L939.473 684.932 L940.032 684.932 L940.592 684.932 L941.151 684.932 L941.71 684.932 L942.269 684.932 L942.829 684.932 L943.388 684.932 L943.947 684.932 L944.506 684.932 L945.066 684.932 L945.625 684.932 L946.184 684.932 L946.743 684.932 L947.303 684.932 L947.862 684.932 L948.421 684.932 L948.98 684.932 L949.54 684.932 L950.099 684.932 L950.658 684.932 L951.217 684.932 L951.777 684.932 L952.336 684.932 L952.895 684.932 L953.454 684.932 L954.014 684.932 L954.573 684.932 L955.132 684.932 L955.691 684.932 L956.251 684.932 L956.81 684.932 L957.369 684.932 L957.928 684.932 L958.488 684.932 L959.047 684.932 L959.606 684.932 L960.165 684.932 L960.725 684.932 L961.284 684.932 L961.843 684.932 L962.402 684.932 L962.962 684.932 L963.521 684.932 L964.08 684.932 L964.639 684.932 L965.199 684.932 L965.758 684.932 L966.317 684.932 L966.876 684.932 L967.436 684.932 L967.995 684.932 L968.554 684.932 L969.113 684.932 L969.673 684.932 L970.232 684.932 L970.791 684.932 L971.35 684.932 L971.91 684.932 L972.469 684.932 L973.028 684.932 L973.587 684.932 L974.147 684.932 L974.706 684.932 L975.265 684.932 L975.824 684.932 L976.384 684.932 L976.943 684.932 L977.502 684.932 L978.061 684.932 L978.621 684.932 L979.18 684.932 L979.739 684.932 L980.298 684.932 L980.858 684.932 L981.417 684.932 L981.976 684.932 L982.535 684.932 L983.095 684.932 L983.654 684.932 L984.213 684.932 L984.772 684.932 L985.332 684.932 L985.891 684.932 L986.45 684.932 L987.009 684.932 L987.569 684.932 L988.128 684.932 L988.687 684.932 L989.246 684.932 L989.806 684.932 L990.365 684.932 L990.924 684.932 L991.483 684.932 L992.043 684.932 L992.602 684.932 L993.161 684.932 L993.72 684.932 L994.28 684.932 L994.839 684.932 L995.398 684.932 L995.957 684.932 L996.517 684.932 L997.076 684.932 L997.635 684.932 L998.194 684.932 L998.754 684.932 L999.313 684.932 L999.872 684.932 L1000.43 684.932 L1000.99 684.932 L1001.55 684.932 L1002.11 684.932 L1002.67 684.932 L1003.23 684.932 L1003.79 684.932 L1004.35 684.932 L1004.91 684.932 L1005.46 684.932 L1006.02 684.932 L1006.58 684.932 L1007.14 684.932 L1007.7 684.932 L1008.26 684.932 L1008.82 684.932 L1009.38 684.932 L1009.94 684.932 L1010.5 684.932 L1011.06 684.932 L1011.62 684.932 L1012.18 684.932 L1012.73 684.932 L1013.29 684.932 L1013.85 684.932 L1014.41 684.932 L1014.97 684.932 L1015.53 684.932 L1016.09 684.932 L1016.65 684.932 L1017.21 684.932 L1017.77 684.932 L1018.33 684.932 L1018.89 684.932 L1019.45 684.932 L1020.01 684.932 L1020.56 684.932 L1021.12 684.932 L1021.68 684.932 L1022.24 684.932 L1022.8 684.932 L1023.36 684.932 L1023.92 684.932 L1024.48 684.932 L1025.04 684.932 L1025.6 684.932 L1026.16 684.932 L1026.72 684.932 L1027.28 684.932 L1027.83 684.932 L1028.39 684.932 L1028.95 684.932 L1029.51 684.932 L1030.07 684.932 L1030.63 684.932 L1031.19 684.932 L1031.75 684.932 L1032.31 684.932 L1032.87 684.932 L1033.43 684.932 L1033.99 684.932 L1034.55 684.932 L1035.1 684.932 L1035.66 684.932 L1036.22 684.932 L1036.78 684.932 L1037.34 684.932 L1037.9 684.932 L1038.46 684.932 L1039.02 684.932 L1039.58 684.932 L1040.14 684.932 L1040.7 684.932 L1041.26 684.932 L1041.82 684.932 L1042.38 684.932 L1042.93 684.932 L1043.49 684.932 L1044.05 684.932 L1044.61 684.932 L1045.17 684.932 L1045.73 684.932 L1046.29 684.932 L1046.85 684.932 L1047.41 684.932 L1047.97 684.932 L1048.53 684.932 L1049.09 684.932 L1049.65 684.932 L1050.2 684.932 L1050.76 684.932 L1051.32 684.932 L1051.88 684.932 L1052.44 684.932 L1053 684.932 L1053.56 684.932 L1054.12 684.932 L1054.68 684.932 L1055.24 684.932 L1055.8 684.932 L1056.36 684.932 L1056.92 684.932 L1057.48 684.932 L1058.03 684.932 L1058.59 684.932 L1059.15 684.932 L1059.71 684.932 L1060.27 684.932 L1060.83 684.932 L1061.39 684.932 L1061.95 684.932 L1062.51 684.932 L1063.07 684.932 L1063.63 684.932 L1064.19 684.932 L1064.75 684.932 L1065.3 684.932 L1065.86 684.932 L1066.42 684.932 L1066.98 684.932 L1067.54 684.932 L1068.1 684.932 L1068.66 684.932 L1069.22 684.932 L1069.78 684.932 L1070.34 684.932 L1070.9 684.932 L1071.46 684.932 L1072.02 684.932 L1072.57 684.932 L1073.13 684.932 L1073.69 684.932 L1074.25 684.932 L1074.81 684.932 L1075.37 684.932 L1075.93 684.932 L1076.49 684.932 L1077.05 684.932 L1077.61 684.932 L1078.17 684.932 L1078.73 684.932 L1079.29 684.932 L1079.85 684.932 L1080.4 684.932 L1080.96 684.932 L1081.52 684.932 L1082.08 684.932 L1082.64 684.932 L1083.2 684.932 L1083.76 684.932 L1084.32 684.932 L1084.88 684.932 L1085.44 684.932 L1086 684.932 L1086.56 684.932 L1087.12 684.932 L1087.67 684.932 L1088.23 684.932 L1088.79 684.932 L1089.35 684.932 L1089.91 684.932 L1090.47 684.932 L1091.03 684.932 L1091.59 684.932 L1092.15 684.932 L1092.71 684.932 L1093.27 684.932 L1093.83 684.932 L1094.39 684.932 L1094.94 684.932 L1095.5 684.932 L1096.06 684.932 L1096.62 684.932 L1097.18 684.932 L1097.74 684.932 L1098.3 684.932 L1098.86 684.932 L1099.42 684.932 L1099.98 684.932 L1100.54 684.932 L1101.1 684.932 L1101.66 684.932 L1102.22 684.932 L1102.77 684.932 L1103.33 684.932 L1103.89 684.932 L1104.45 684.932 L1105.01 684.932 L1105.57 684.932 L1106.13 684.932 L1106.69 684.932 L1107.25 684.932 L1107.81 684.932 L1108.37 684.932 L1108.93 684.932 L1109.49 684.932 L1110.04 684.932 L1110.6 684.932 L1111.16 684.932 L1111.72 684.932 L1112.28 684.932 L1112.84 684.932 L1113.4 684.932 L1113.96 684.932 L1114.52 684.932 L1115.08 684.932 L1115.64 684.932 L1116.2 684.932 L1116.76 684.932 L1117.31 684.932 L1117.87 684.932 L1118.43 684.932 L1118.99 684.932 L1119.55 684.932 L1120.11 684.932 L1120.67 684.932 L1121.23 684.932 L1121.79 684.932 L1122.35 684.932 L1122.91 684.932 L1123.47 684.932 L1124.03 684.932 L1124.59 684.932 L1125.14 684.932 L1125.7 684.932 L1126.26 684.932 L1126.82 684.932 L1127.38 684.932 L1127.94 684.932 L1128.5 684.932 L1129.06 684.932 L1129.62 684.932 L1130.18 684.932 L1130.74 684.932 L1131.3 684.932 L1131.86 684.932 L1132.41 684.932 L1132.97 684.932 L1133.53 684.932 L1134.09 684.932 L1134.65 684.932 L1135.21 684.932 L1135.77 684.932 L1136.33 684.932 L1136.89 684.932 L1137.45 684.932 L1138.01 684.932 L1138.57 684.932 L1139.13 684.932 L1139.68 684.932 L1140.24 684.932 L1140.8 684.932 L1141.36 684.932 L1141.92 684.932 L1142.48 684.932 L1143.04 684.932 L1143.6 684.932 L1144.16 684.932 L1144.72 684.932 L1145.28 684.932 L1145.84 684.932 L1146.4 684.932 L1146.96 684.932 L1147.51 684.932 L1148.07 684.932 L1148.63 684.932 L1149.19 684.932 L1149.75 684.932 L1150.31 684.932 L1150.87 684.932 L1151.43 684.932 L1151.99 684.932 L1152.55 684.932 L1153.11 684.932 L1153.67 684.932 L1154.23 684.932 L1154.78 684.932 L1155.34 684.932 L1155.9 684.932 L1156.46 684.932 L1157.02 684.932 L1157.58 684.932 L1158.14 684.932 L1158.7 684.932 L1159.26 684.932 L1159.82 684.932 L1160.38 684.932 L1160.94 684.932 L1161.5 684.932 L1162.05 684.932 L1162.61 684.932 L1163.17 684.932 L1163.73 684.932 L1164.29 684.932 L1164.85 684.932 L1165.41 684.932 L1165.97 684.932 L1166.53 684.932 L1167.09 684.932 L1167.65 684.932 L1168.21 684.932 L1168.77 684.932 L1169.33 684.932 L1169.88 684.932 L1170.44 684.932 L1171 684.932 L1171.56 684.932 L1172.12 684.932 L1172.68 684.932 L1173.24 684.932 L1173.8 684.932 L1174.36 684.932 L1174.92 684.932 L1175.48 684.932 L1176.04 684.932 L1176.6 684.932 L1177.15 684.932 L1177.71 684.932 L1178.27 684.932 L1178.83 684.932 L1179.39 684.932 L1179.95 684.932 L1180.51 684.932 L1181.07 684.932 L1181.63 684.932 L1182.19 684.932 L1182.75 684.932 L1183.31 684.932 L1183.87 684.932 L1184.43 684.932 L1184.98 684.932 L1185.54 684.932 L1186.1 684.932 L1186.66 684.932 L1187.22 684.932 L1187.78 684.932 L1188.34 684.932 L1188.9 684.932 L1189.46 684.932 L1190.02 684.932 L1190.58 684.932 L1191.14 684.932 L1191.7 684.932 L1192.25 684.932 L1192.81 684.932 L1193.37 684.932 L1193.93 684.932 L1194.49 684.932 L1195.05 684.932 L1195.61 684.932 L1196.17 684.932 L1196.73 684.932 L1197.29 684.932 L1197.85 684.932 L1198.41 684.932 L1198.97 684.932 L1199.52 684.932 L1200.08 684.932 L1200.64 684.932 L1201.2 684.932 L1201.76 684.932 L1202.32 684.932 L1202.88 684.932 L1203.44 684.932 L1204 684.932 L1204.56 684.932 L1205.12 684.932 L1205.68 684.932 L1206.24 684.932 L1206.8 684.932 L1207.35 684.932 L1207.91 684.932 L1208.47 684.932 L1209.03 684.932 L1209.59 684.932 L1210.15 684.932 L1210.71 684.932 L1211.27 684.932 L1211.83 684.932 L1212.39 684.932 L1212.95 684.932 L1213.51 684.932 L1214.07 684.932 L1214.62 684.932 L1215.18 684.932 L1215.74 684.932 L1216.3 684.932 L1216.86 684.932 L1217.42 684.932 L1217.98 684.932 L1218.54 684.932 L1219.1 684.932 L1219.66 684.932 L1220.22 684.932 L1220.78 684.932 L1221.34 684.932 L1221.89 684.932 L1222.45 684.932 L1223.01 684.932 L1223.57 684.932 L1224.13 684.932 L1224.69 684.932 L1225.25 684.932 L1225.81 684.932 L1226.37 684.932 L1226.93 684.932 L1227.49 684.932 L1228.05 684.932 L1228.61 684.932 L1229.17 684.932 L1229.72 684.932 L1230.28 684.932 L1230.84 684.932 L1231.4 684.932 L1231.96 684.932 L1232.52 684.932 L1233.08 684.932 L1233.64 684.932 L1234.2 684.932 L1234.76 684.932 L1235.32 684.932 L1235.88 684.932 L1236.44 684.932 L1236.99 684.932 L1237.55 684.932 L1238.11 684.932 L1238.67 684.932 L1239.23 684.932 L1239.79 684.932 L1240.35 684.932 L1240.91 684.932 L1241.47 684.932 L1242.03 684.932 L1242.59 684.932 L1243.15 684.932 L1243.71 684.932 L1244.26 684.932 L1244.82 684.932 L1245.38 684.932 L1245.94 684.932 L1246.5 684.932 L1247.06 684.932 L1247.62 684.932 L1248.18 684.932 L1248.74 684.932 L1249.3 684.932 L1249.86 684.932 L1250.42 684.932 L1250.98 684.932 L1251.54 684.932 L1252.09 684.932 L1252.65 684.932 L1253.21 684.932 L1253.77 684.932 L1254.33 684.932 L1254.89 684.932 L1255.45 684.932 L1256.01 684.932 L1256.57 684.932 L1257.13 684.932 L1257.69 684.932 L1258.25 684.932 L1258.81 684.932 L1259.36 684.932 L1259.92 684.932 L1260.48 684.932 L1261.04 684.932 L1261.6 684.932 L1262.16 684.932 L1262.72 684.932 L1263.28 684.932 L1263.84 684.932 L1264.4 684.932 L1264.96 684.932 L1265.52 684.932 L1266.08 684.932 L1266.63 684.932 L1267.19 684.932 L1267.75 684.932 L1268.31 684.932 L1268.87 684.932 L1269.43 684.932 L1269.99 684.932 L1270.55 684.932 L1271.11 684.932 L1271.67 684.932 L1272.23 684.932 L1272.79 684.932 L1273.35 684.932 L1273.91 684.932 L1274.46 684.932 L1275.02 684.932 L1275.58 684.932 L1276.14 684.932 L1276.7 684.932 L1277.26 684.932 L1277.82 684.932 L1278.38 684.932 L1278.94 684.932 L1279.5 684.932 L1280.06 684.932 L1280.62 684.932 L1281.18 684.932 L1281.73 684.932 L1282.29 684.932 L1282.85 684.932 L1283.41 684.932 L1283.97 684.932 L1284.53 684.932 L1285.09 684.932 L1285.65 684.932 L1286.21 684.932 L1286.77 684.932 L1287.33 684.932 L1287.89 684.932 L1288.45 684.932 L1289 684.932 L1289.56 684.932 L1290.12 684.932 L1290.68 684.932 L1291.24 684.932 L1291.8 684.932 L1292.36 684.932 L1292.92 684.932 L1293.48 684.932 L1294.04 684.932 L1294.6 684.932 L1295.16 684.932 L1295.72 684.932 L1296.28 684.932 L1296.83 684.932 L1297.39 684.932 L1297.95 684.932 L1298.51 684.932 L1299.07 684.932 L1299.63 684.932 L1300.19 684.932 L1300.75 684.932 L1301.31 684.932 L1301.87 684.932 L1302.43 684.932 L1302.99 684.932 L1303.55 684.932 L1304.1 684.932 L1304.66 684.932 L1305.22 684.932 L1305.78 684.932 L1306.34 684.932 L1306.9 684.932 L1307.46 684.932 L1308.02 684.932 L1308.58 684.932 L1309.14 684.932 L1309.7 684.932 L1310.26 684.932 L1310.82 684.932 L1311.38 684.932 L1311.93 684.932 L1312.49 684.932 L1313.05 684.932 L1313.61 684.932 L1314.17 684.932 L1314.73 684.932 L1315.29 684.932 L1315.85 684.932 L1316.41 684.932 L1316.97 684.932 L1317.53 684.932 L1318.09 684.932 L1318.65 684.932 L1319.2 684.932 L1319.76 684.932 L1320.32 684.932 L1320.88 684.932 L1321.44 684.932 L1322 684.932 L1322.56 684.932 L1323.12 684.932 L1323.68 684.932 L1324.24 684.932 L1324.8 684.932 L1325.36 684.932 L1325.92 684.932 L1326.47 684.932 L1327.03 684.932 L1327.59 684.932 L1328.15 684.932 L1328.71 684.932 L1329.27 684.932 L1329.83 684.932 L1330.39 684.932 L1330.95 684.932 L1331.51 684.932 L1332.07 684.932 L1332.63 684.932 L1333.19 684.932 L1333.75 684.932 L1334.3 684.932 L1334.86 684.932 L1335.42 684.932 L1335.98 684.932 L1336.54 684.932 L1337.1 684.932 L1337.66 684.932 L1338.22 684.932 L1338.78 684.932 L1339.34 684.932 L1339.9 684.932 L1340.46 684.932 L1341.02 684.932 L1341.57 684.932 L1342.13 684.932 L1342.69 684.932 L1343.25 684.932 L1343.81 684.932 L1344.37 684.932 L1344.93 684.932 L1345.49 684.932 L1346.05 684.932 L1346.61 684.932 L1347.17 684.932 L1347.73 684.932 L1348.29 684.932 L1348.84 684.932 L1349.4 684.932 L1349.96 684.932 L1350.52 684.932 L1351.08 684.932 L1351.64 684.932 L1352.2 684.932 L1352.76 684.932 L1353.32 684.932 L1353.88 684.932 L1354.44 684.932 L1355 684.932 L1355.56 684.932 L1356.12 684.932 L1356.67 684.932 L1357.23 684.932 L1357.79 684.932 L1358.35 684.932 L1358.91 684.932 L1359.47 684.932 L1360.03 684.932 L1360.59 684.932 L1361.15 684.932 L1361.71 684.932 L1362.27 684.932 L1362.83 684.932 L1363.39 684.932 L1363.94 684.932 L1364.5 684.932 L1365.06 684.932 L1365.62 684.932 L1366.18 684.932 L1366.74 684.932 L1367.3 684.932 L1367.86 684.932 L1368.42 684.932 L1368.98 684.932 L1369.54 684.932 L1370.1 684.932 L1370.66 684.932 L1371.21 684.932 L1371.77 684.932 L1372.33 684.932 L1372.89 684.932 L1373.45 684.932 L1374.01 684.932 L1374.57 684.932 L1375.13 684.932 L1375.69 684.932 L1376.25 684.932 L1376.81 684.932 L1377.37 684.932 L1377.93 684.932 L1378.49 684.932 L1379.04 684.932 L1379.6 684.932 L1380.16 684.932 L1380.72 684.932 L1381.28 684.932 L1381.84 684.932 L1382.4 684.932 L1382.96 684.932 L1383.52 684.932 L1384.08 684.932 L1384.64 684.932 L1385.2 684.932 L1385.76 684.932 L1386.31 684.932 L1386.87 684.932 L1387.43 684.932 L1387.99 684.932 L1388.55 684.932 L1389.11 684.932 L1389.67 684.932 L1390.23 684.932 L1390.79 684.932 L1391.35 684.932 L1391.91 684.932 L1392.47 684.932 L1393.03 684.932 L1393.58 684.932 L1394.14 684.932 L1394.7 684.932 L1395.26 684.932 L1395.82 684.932 L1396.38 684.932 L1396.94 684.932 L1397.5 684.932 L1398.06 684.932 L1398.62 684.932 L1399.18 684.932 L1399.74 684.932 L1400.3 684.932 L1400.86 684.932 L1401.41 684.932 L1401.97 684.932 L1402.53 684.932 L1403.09 684.932 L1403.65 684.932 L1404.21 684.932 L1404.77 684.932 L1405.33 684.932 L1405.89 684.932 L1406.45 684.932 L1407.01 684.932 L1407.57 684.932 L1408.13 684.932 L1408.68 684.932 L1409.24 684.932 L1409.8 684.932 L1410.36 684.932 L1410.92 684.932 L1411.48 684.932 L1412.04 684.932 L1412.6 684.932 L1413.16 684.932 L1413.72 684.932 L1414.28 684.932 L1414.84 684.932 L1415.4 684.932 L1415.95 684.932 L1416.51 684.932 L1417.07 684.932 L1417.63 684.932 L1418.19 684.932 L1418.75 684.932 L1419.31 684.932 L1419.87 684.932 L1420.43 684.932 L1420.99 684.932 L1421.55 684.932 L1422.11 684.932 L1422.67 684.932 L1423.23 684.932 L1423.78 684.932 L1424.34 684.932 L1424.9 684.932 L1425.46 684.932 L1426.02 684.932 L1426.58 684.932 L1427.14 684.932 L1427.7 684.932 L1428.26 684.932 L1428.82 684.932 L1429.38 684.932 L1429.94 684.932 L1430.5 684.932 L1431.05 684.932 L1431.61 684.932 L1432.17 684.932 L1432.73 684.932 L1433.29 684.932 L1433.85 684.932 L1434.41 684.932 L1434.97 684.932 L1435.53 684.932 L1436.09 684.932 L1436.65 684.932 L1437.21 684.932 L1437.77 684.932 L1438.33 684.932 L1438.88 684.932 L1439.44 684.932 L1440 684.932 L1440.56 684.932 L1441.12 684.932 L1441.68 684.932 L1442.24 684.932 L1442.8 684.932 L1443.36 684.932 L1443.92 684.932 L1444.48 684.932 L1445.04 684.932 L1445.6 684.932 L1446.15 684.932 L1446.71 684.932 L1447.27 684.932 L1447.83 684.932 L1448.39 684.932 L1448.95 684.932 L1449.51 684.932 L1450.07 684.932 L1450.63 684.932 L1451.19 684.932 L1451.75 684.932 L1452.31 684.932 L1452.87 684.932 L1453.42 684.932 L1453.98 684.932 L1454.54 684.932 L1455.1 684.932 L1455.66 684.932 L1456.22 684.932 L1456.78 684.932 L1457.34 684.932 L1457.9 684.932 L1458.46 684.932 L1459.02 684.932 L1459.58 684.932 L1460.14 684.932 L1460.7 684.932 L1461.25 684.932 L1461.81 684.932 L1462.37 684.932 L1462.93 684.932 L1463.49 684.932 L1464.05 684.932 L1464.61 684.932 L1465.17 684.932 L1465.73 684.932 L1466.29 684.932 L1466.85 684.932 L1467.41 684.932 L1467.97 684.932 L1468.52 684.932 L1469.08 684.932 L1469.64 684.932 L1470.2 684.932 L1470.76 684.932 L1471.32 684.932 L1471.88 684.932 L1472.44 684.932 L1473 684.932 L1473.56 684.932 L1474.12 684.932 L1474.68 684.932 L1475.24 684.932 L1475.79 684.932 L1476.35 684.932 L1476.91 684.932 L1477.47 684.932 L1478.03 684.932 L1478.59 684.932 L1479.15 684.932 L1479.71 684.932 L1480.27 684.932 L1480.83 684.932 L1481.39 684.932 L1481.95 684.932 L1482.51 684.932 L1483.07 684.932 L1483.62 684.932 L1484.18 684.932 L1484.74 684.932 L1485.3 684.932 L1485.86 684.932 L1486.42 684.932 L1486.98 684.932 L1487.54 684.932 L1488.1 684.932 L1488.66 684.932 L1489.22 684.932 L1489.78 684.932 L1490.34 684.932 L1490.89 684.932 L1491.45 684.932 L1492.01 684.932 L1492.57 684.932 L1493.13 684.932 L1493.69 684.932 L1494.25 684.932 L1494.81 684.932 L1495.37 684.932 L1495.93 684.932 L1496.49 684.932 L1497.05 684.932 L1497.61 684.932 L1498.16 684.932 L1498.72 684.932 L1499.28 684.932 L1499.84 684.932 L1500.4 684.932 L1500.96 684.932 L1501.52 684.932 L1502.08 684.932 L1502.64 684.932 L1503.2 684.932 L1503.76 684.932 L1504.32 684.932 L1504.88 684.932 L1505.44 684.932 L1505.99 684.932 L1506.55 684.932 L1507.11 684.932 L1507.67 684.932 L1508.23 684.932 L1508.79 684.932 L1509.35 684.932 L1509.91 684.932 L1510.47 684.932 L1511.03 684.932 L1511.59 684.932 L1512.15 684.932 L1512.71 684.932 L1513.26 684.932 L1513.82 684.932 L1514.38 684.932 L1514.94 684.932 L1515.5 684.932 L1516.06 684.932 L1516.62 684.932 L1517.18 684.932 L1517.74 684.932 L1518.3 684.932 L1518.86 684.932 L1519.42 684.932 L1519.98 684.932 L1520.53 684.932 L1521.09 684.932 L1521.65 684.932 L1522.21 684.932 L1522.77 684.932 L1523.33 684.932 L1523.89 684.932 L1524.45 684.932 L1525.01 684.932 L1525.57 684.932 L1526.13 684.932 L1526.69 684.932 L1527.25 684.932 L1527.81 684.932 L1528.36 684.932 L1528.92 684.932 L1529.48 684.932 L1530.04 684.932 L1530.6 684.932 L1531.16 684.932 L1531.72 684.932 L1532.28 684.932 L1532.84 684.932 L1533.4 684.932 L1533.96 684.932 L1534.52 684.932 L1535.08 684.932 L1535.63 684.932 L1536.19 684.932 L1536.75 684.932 L1537.31 684.932 L1537.87 684.932 L1538.43 684.932 L1538.99 684.932 L1539.55 684.932 L1540.11 684.932 L1540.67 684.932 L1541.23 684.932 L1541.79 684.932 L1542.35 684.932 L1542.9 684.932 L1543.46 684.932 L1544.02 684.932 L1544.58 684.932 L1545.14 684.932 L1545.7 684.932 L1546.26 684.932 L1546.82 684.932 L1547.38 684.932 L1547.94 684.932 L1548.5 684.932 L1549.06 684.932 L1549.62 684.932 L1550.18 684.932 L1550.73 684.932 L1551.29 684.932 L1551.85 684.932 L1552.41 684.932 L1552.97 684.932 L1553.53 684.932 L1554.09 684.932 L1554.65 684.932 L1555.21 684.932 L1555.77 684.932 L1556.33 684.932 L1556.89 684.932 L1557.45 684.932 L1558 684.932 L1558.56 684.932 L1559.12 684.932 L1559.68 684.932 L1560.24 684.932 L1560.8 684.932 L1561.36 684.932 L1561.92 684.932 L1562.48 684.932 L1563.04 684.932 L1563.6 684.932 L1564.16 684.932 L1564.72 684.932 L1565.28 684.932 L1565.83 684.932 L1566.39 684.932 L1566.95 684.932 L1567.51 684.932 L1568.07 684.932 L1568.63 684.932 L1569.19 684.932 L1569.75 684.932 L1570.31 684.932 L1570.87 684.932 L1571.43 684.932 L1571.99 684.932 L1572.55 684.932 L1573.1 684.932 L1573.66 684.932 L1574.22 684.932 L1574.78 684.932 L1575.34 684.932 L1575.9 684.932 L1576.46 684.932 L1577.02 684.932 L1577.58 684.932 L1578.14 684.932 L1578.7 684.932 L1579.26 684.932 L1579.82 684.932 L1580.37 684.932 L1580.93 684.932 L1581.49 684.932 L1582.05 684.932 L1582.61 684.932 L1583.17 684.932 L1583.73 684.932 L1584.29 684.932 L1584.85 684.932 L1585.41 684.932 L1585.97 684.932 L1586.53 684.932 L1587.09 684.932 L1587.65 684.932 L1588.2 684.932 L1588.76 684.932 L1589.32 684.932 L1589.88 684.932 L1590.44 684.932 L1591 684.932 L1591.56 684.932 L1592.12 684.932 L1592.68 684.932 L1593.24 684.932 L1593.8 684.932 L1594.36 684.932 L1594.92 684.932 L1595.47 684.932 L1596.03 684.932 L1596.59 684.932 L1597.15 684.932 L1597.71 684.932 L1598.27 684.932 L1598.83 684.932 L1599.39 684.932 L1599.95 684.932 L1600.51 684.932 L1601.07 684.932 L1601.63 684.932 L1602.19 684.932 L1602.74 684.932 L1603.3 684.932 L1603.86 684.932 L1604.42 684.932 L1604.98 684.932 L1605.54 684.932 L1606.1 684.932 L1606.66 684.932 L1607.22 684.932 L1607.78 684.932 L1608.34 684.932 L1608.9 684.932 L1609.46 684.932 L1610.02 684.932 L1610.57 684.932 L1611.13 684.932 L1611.69 684.932 L1612.25 684.932 L1612.81 684.932 L1613.37 684.932 L1613.93 684.932 L1614.49 684.932 L1615.05 684.932 L1615.61 684.932 L1616.17 684.932 L1616.73 684.932 L1617.29 684.932 L1617.84 684.932 L1618.4 684.932 L1618.96 684.932 L1619.52 684.932 L1620.08 684.932 L1620.64 684.932 L1621.2 684.932 L1621.76 684.932 L1622.32 684.932 L1622.88 684.932 L1623.44 684.932 L1624 684.932 L1624.56 684.932 L1625.11 684.932 L1625.67 684.932 L1626.23 684.932 L1626.79 684.932 L1627.35 684.932 L1627.91 684.932 L1628.47 684.932 L1629.03 684.932 L1629.59 684.932 L1630.15 684.932 L1630.71 684.932 L1631.27 684.932 L1631.83 684.932 L1632.39 684.932 L1632.94 684.932 L1633.5 684.932 L1634.06 684.932 L1634.62 684.932 L1635.18 684.932 L1635.74 684.932 L1636.3 684.932 L1636.86 684.932 L1637.42 684.932 L1637.98 684.932 L1638.54 684.932 L1639.1 684.932 L1639.66 684.932 L1640.21 684.932 L1640.77 684.932 L1641.33 684.932 L1641.89 684.932 L1642.45 684.932 L1643.01 684.932 L1643.57 684.932 L1644.13 684.932 L1644.69 684.932 L1645.25 684.932 L1645.81 684.932 L1646.37 684.932 L1646.93 684.932 L1647.48 684.932 L1648.04 684.932 L1648.6 684.932 L1649.16 684.932 L1649.72 684.932 L1650.28 684.932 L1650.84 684.932 L1651.4 684.932 L1651.96 684.932 L1652.52 684.932 L1653.08 684.932 L1653.64 684.932 L1654.2 684.932 L1654.76 684.932 L1655.31 684.932 L1655.87 684.932 L1656.43 684.932 L1656.99 684.932 L1657.55 684.932 L1658.11 684.932 L1658.67 684.932 L1659.23 684.932 L1659.79 684.932 L1660.35 684.932 L1660.91 684.932 L1661.47 684.932 L1662.03 684.932 L1662.58 684.932 L1663.14 684.932 L1663.7 684.932 L1664.26 684.932 L1664.82 684.932 L1665.38 684.932 L1665.94 684.932 L1666.5 684.932 L1667.06 684.932 L1667.62 684.932 L1668.18 684.932 L1668.74 684.932 L1669.3 684.932 L1669.85 684.932 L1670.41 684.932 L1670.97 684.932 L1671.53 684.932 L1672.09 684.932 L1672.65 684.932 L1673.21 684.932 L1673.77 684.932 L1674.33 684.932 L1674.89 684.932 L1675.45 684.932 L1676.01 684.932 L1676.57 684.932 L1677.13 684.932 L1677.68 684.932 L1678.24 684.932 L1678.8 684.932 L1679.36 684.932 L1679.92 684.932 L1680.48 684.932 L1681.04 684.932 L1681.6 684.932 L1682.16 684.932 L1682.72 684.932 L1683.28 684.932 L1683.84 684.932 L1684.4 684.932 L1684.95 684.932 L1685.51 684.932 L1686.07 684.932 L1686.63 684.932 L1687.19 684.932 L1687.75 684.932 L1688.31 684.932 L1688.87 684.932 L1689.43 684.932 L1689.99 684.932 L1690.55 684.932 L1691.11 684.932 L1691.67 684.932 L1692.23 684.932 L1692.78 684.932 L1693.34 684.932 L1693.9 684.932 L1694.46 684.932 L1695.02 684.932 L1695.58 684.932 L1696.14 684.932 L1696.7 684.932 L1697.26 684.932 L1697.82 684.932 L1698.38 684.932 L1698.94 684.932 L1699.5 684.932 L1700.05 684.932 L1700.61 684.932 L1701.17 684.932 L1701.73 684.932 L1702.29 684.932 L1702.85 684.932 L1703.41 684.932 L1703.97 684.932 L1704.53 684.932 L1705.09 684.932 L1705.65 684.932 L1706.21 684.932 L1706.77 684.932 L1707.32 684.932 L1707.88 684.932 L1708.44 684.932 L1709 684.932 L1709.56 684.932 L1710.12 684.932 L1710.68 684.932 L1711.24 684.932 L1711.8 684.932 L1712.36 684.932 L1712.92 684.932 L1713.48 684.932 L1714.04 684.932 L1714.6 684.932 L1715.15 684.932 L1715.71 684.932 L1716.27 684.932 L1716.83 684.932 L1717.39 684.932 L1717.95 684.932 L1718.51 684.932 L1719.07 684.932 L1719.63 684.932 L1720.19 684.932 L1720.75 684.932 L1721.31 684.932 L1721.87 684.932 L1722.42 684.932 L1722.98 684.932 L1723.54 684.932 L1724.1 684.932 L1724.66 684.932 L1725.22 684.932 L1725.78 684.932 L1726.34 684.932 L1726.9 684.932 L1727.46 684.932 L1728.02 684.932 L1728.58 684.932 L1729.14 684.932 L1729.69 684.932 L1730.25 684.932 L1730.81 684.932 L1731.37 684.932 L1731.93 684.932 L1732.49 684.932 L1733.05 684.932 L1733.61 684.932 L1734.17 684.932 L1734.73 684.932 L1735.29 684.932 L1735.85 684.932 L1736.41 684.932 L1736.97 684.932 L1737.52 684.932 L1738.08 684.932 L1738.64 684.932 L1739.2 684.932 L1739.76 684.932 L1740.32 684.932 L1740.88 684.932 L1741.44 684.932 L1742 684.932 L1742.56 684.932 L1743.12 684.932 L1743.68 684.932 L1744.24 684.932 L1744.79 684.932 L1745.35 684.932 L1745.91 684.932 L1746.47 684.932 L1747.03 684.932 L1747.59 684.932 L1748.15 684.932 L1748.71 684.932 L1749.27 684.932 L1749.83 684.932 L1750.39 684.932 L1750.95 684.932 L1751.51 684.932 L1752.06 684.932 L1752.62 684.932 L1753.18 684.932 L1753.74 684.932 L1754.3 684.932 L1754.86 684.932 L1755.42 684.932 L1755.98 684.932 L1756.54 684.932 L1757.1 684.932 L1757.66 684.932 L1758.22 684.932 L1758.78 684.932 L1759.34 684.932 L1759.89 684.932 L1760.45 684.932 L1761.01 684.932 L1761.57 684.932 L1762.13 684.932 L1762.69 684.932 L1763.25 684.932 L1763.81 684.932 L1764.37 684.932 L1764.93 684.932 L1765.49 684.932 L1766.05 684.932 L1766.61 684.932 L1767.16 684.932 L1767.72 684.932 L1768.28 684.932 L1768.84 684.932 L1769.4 684.932 L1769.96 684.932 L1770.52 684.932 L1771.08 684.932 L1771.64 684.932 L1772.2 684.932 L1772.76 684.932 L1773.32 684.932 L1773.88 684.932 L1774.43 684.932 L1774.99 684.932 L1775.55 684.932 L1776.11 684.932 L1776.67 684.932 L1777.23 684.932 L1777.79 684.932 L1778.35 684.932 L1778.91 684.932 L1779.47 684.932 L1780.03 684.932 L1780.59 684.932 L1781.15 684.932 L1781.71 684.932 L1782.26 684.932 L1782.82 684.932 L1783.38 684.932 L1783.94 684.932 L1784.5 684.932 L1785.06 684.932 L1785.62 684.932 L1786.18 684.932 L1786.74 684.932 L1787.3 684.932 L1787.86 684.932 L1788.42 684.932 L1788.98 684.932 L1789.53 684.932 L1790.09 684.932 L1790.65 684.932 L1791.21 684.932 L1791.77 684.932 L1792.33 684.932 L1792.89 684.932 L1793.45 684.932 L1794.01 684.932 L1794.57 684.932 L1795.13 684.932 L1795.69 684.932 L1796.25 684.932 L1796.8 684.932 L1797.36 684.932 L1797.92 684.932 L1798.48 684.932 L1799.04 684.932 L1799.6 684.932 L1800.16 684.932 L1800.72 684.932 L1801.28 684.932 L1801.84 684.932 L1802.4 684.932 L1802.96 684.932 L1803.52 684.932 L1804.08 684.932 L1804.63 684.932 L1805.19 684.932 L1805.75 684.932 L1806.31 684.932 L1806.87 684.932 L1807.43 684.932 L1807.99 684.932 L1808.55 684.932 L1809.11 684.932 L1809.67 684.932 L1810.23 684.932 L1810.79 684.932 L1811.35 684.932 L1811.9 684.932 L1812.46 684.932 L1813.02 684.932 L1813.58 684.932 L1814.14 684.932 L1814.7 684.932 L1815.26 684.932 L1815.82 684.932 L1816.38 684.932 L1816.94 684.932 L1817.5 684.932 L1818.06 684.932 L1818.62 684.932 L1819.18 684.932 L1819.73 684.932 L1820.29 684.932 L1820.85 684.932 L1821.41 684.932 L1821.97 684.932 L1822.53 684.932 L1823.09 684.932 L1823.65 684.932 L1824.21 684.932 L1824.77 684.932 L1825.33 684.932 L1825.89 684.932 L1826.45 684.932 L1827 684.932 L1827.56 684.932 L1828.12 684.932 L1828.68 684.932 L1829.24 684.932 L1829.8 684.932 L1830.36 684.932 L1830.92 684.932 L1831.48 684.932 L1832.04 684.932 L1832.6 684.932 L1833.16 684.932 L1833.72 684.932 L1834.27 684.932 L1834.83 684.932 L1835.39 684.932 L1835.95 684.932 L1836.51 684.932 L1837.07 684.932 L1837.63 684.932 L1838.19 684.932 L1838.19 683.171 L1837.63 683.171 L1837.07 683.171 L1836.51 683.171 L1835.95 683.171 L1835.39 683.171 L1834.83 683.171 L1834.27 683.171 L1833.72 683.171 L1833.16 683.171 L1832.6 683.171 L1832.04 683.171 L1831.48 683.171 L1830.92 683.171 L1830.36 683.171 L1829.8 683.171 L1829.24 683.171 L1828.68 683.171 L1828.12 683.171 L1827.56 683.171 L1827 683.171 L1826.45 683.171 L1825.89 683.171 L1825.33 683.171 L1824.77 683.171 L1824.21 683.171 L1823.65 683.171 L1823.09 683.171 L1822.53 683.171 L1821.97 683.171 L1821.41 683.171 L1820.85 683.171 L1820.29 683.171 L1819.73 683.171 L1819.18 683.171 L1818.62 683.171 L1818.06 683.171 L1817.5 683.171 L1816.94 683.171 L1816.38 683.171 L1815.82 683.171 L1815.26 683.171 L1814.7 683.171 L1814.14 683.171 L1813.58 683.171 L1813.02 683.171 L1812.46 683.171 L1811.9 683.171 L1811.35 683.171 L1810.79 683.171 L1810.23 683.171 L1809.67 683.171 L1809.11 683.171 L1808.55 683.171 L1807.99 683.171 L1807.43 683.171 L1806.87 683.171 L1806.31 683.171 L1805.75 683.171 L1805.19 683.171 L1804.63 683.171 L1804.08 683.171 L1803.52 683.171 L1802.96 683.171 L1802.4 683.171 L1801.84 683.171 L1801.28 683.171 L1800.72 683.171 L1800.16 683.171 L1799.6 683.171 L1799.04 683.171 L1798.48 683.171 L1797.92 683.171 L1797.36 683.171 L1796.8 683.171 L1796.25 683.171 L1795.69 683.171 L1795.13 683.171 L1794.57 683.171 L1794.01 683.171 L1793.45 683.171 L1792.89 683.171 L1792.33 683.171 L1791.77 683.171 L1791.21 683.171 L1790.65 683.171 L1790.09 683.171 L1789.53 683.171 L1788.98 683.171 L1788.42 683.171 L1787.86 683.171 L1787.3 683.171 L1786.74 683.171 L1786.18 683.171 L1785.62 683.171 L1785.06 683.171 L1784.5 683.171 L1783.94 683.171 L1783.38 683.171 L1782.82 683.171 L1782.26 683.171 L1781.71 683.171 L1781.15 683.171 L1780.59 683.171 L1780.03 683.171 L1779.47 683.171 L1778.91 683.171 L1778.35 683.171 L1777.79 683.171 L1777.23 683.171 L1776.67 683.171 L1776.11 683.171 L1775.55 683.171 L1774.99 683.171 L1774.43 683.171 L1773.88 683.171 L1773.32 683.171 L1772.76 683.171 L1772.2 683.171 L1771.64 683.171 L1771.08 683.171 L1770.52 683.171 L1769.96 683.171 L1769.4 683.171 L1768.84 683.171 L1768.28 683.171 L1767.72 683.171 L1767.16 683.171 L1766.61 683.171 L1766.05 683.171 L1765.49 683.171 L1764.93 683.171 L1764.37 683.171 L1763.81 683.171 L1763.25 683.171 L1762.69 683.171 L1762.13 683.171 L1761.57 683.171 L1761.01 683.171 L1760.45 683.171 L1759.89 683.171 L1759.34 683.171 L1758.78 683.171 L1758.22 683.171 L1757.66 683.171 L1757.1 683.171 L1756.54 683.171 L1755.98 683.171 L1755.42 683.171 L1754.86 683.171 L1754.3 683.171 L1753.74 683.171 L1753.18 683.171 L1752.62 683.171 L1752.06 683.171 L1751.51 683.171 L1750.95 683.171 L1750.39 683.171 L1749.83 683.171 L1749.27 683.171 L1748.71 683.171 L1748.15 683.171 L1747.59 683.171 L1747.03 683.171 L1746.47 683.171 L1745.91 683.171 L1745.35 683.171 L1744.79 683.171 L1744.24 683.171 L1743.68 683.171 L1743.12 683.171 L1742.56 683.171 L1742 683.171 L1741.44 683.171 L1740.88 683.171 L1740.32 683.171 L1739.76 683.171 L1739.2 683.171 L1738.64 683.171 L1738.08 683.171 L1737.52 683.171 L1736.97 683.171 L1736.41 683.171 L1735.85 683.171 L1735.29 683.171 L1734.73 683.171 L1734.17 683.171 L1733.61 683.171 L1733.05 683.171 L1732.49 683.171 L1731.93 683.171 L1731.37 683.171 L1730.81 683.171 L1730.25 683.171 L1729.69 683.171 L1729.14 683.171 L1728.58 683.171 L1728.02 683.171 L1727.46 683.171 L1726.9 683.171 L1726.34 683.171 L1725.78 683.171 L1725.22 683.171 L1724.66 683.171 L1724.1 683.171 L1723.54 683.171 L1722.98 683.171 L1722.42 683.171 L1721.87 683.171 L1721.31 683.171 L1720.75 683.171 L1720.19 683.171 L1719.63 683.171 L1719.07 683.171 L1718.51 683.171 L1717.95 683.171 L1717.39 683.171 L1716.83 683.171 L1716.27 683.171 L1715.71 683.171 L1715.15 683.171 L1714.6 683.171 L1714.04 683.171 L1713.48 683.171 L1712.92 683.171 L1712.36 683.171 L1711.8 683.171 L1711.24 683.171 L1710.68 683.171 L1710.12 683.171 L1709.56 683.171 L1709 683.171 L1708.44 683.171 L1707.88 683.171 L1707.32 683.171 L1706.77 683.171 L1706.21 683.171 L1705.65 683.171 L1705.09 683.171 L1704.53 683.171 L1703.97 683.171 L1703.41 683.171 L1702.85 683.171 L1702.29 683.171 L1701.73 683.171 L1701.17 683.171 L1700.61 683.171 L1700.05 683.171 L1699.5 683.171 L1698.94 683.171 L1698.38 683.171 L1697.82 683.171 L1697.26 683.171 L1696.7 683.171 L1696.14 683.171 L1695.58 683.171 L1695.02 683.171 L1694.46 683.171 L1693.9 683.171 L1693.34 683.171 L1692.78 683.171 L1692.23 683.171 L1691.67 683.171 L1691.11 683.171 L1690.55 683.171 L1689.99 683.171 L1689.43 683.171 L1688.87 683.171 L1688.31 683.171 L1687.75 683.171 L1687.19 683.171 L1686.63 683.171 L1686.07 683.171 L1685.51 683.171 L1684.95 683.171 L1684.4 683.171 L1683.84 683.171 L1683.28 683.171 L1682.72 683.171 L1682.16 683.171 L1681.6 683.171 L1681.04 683.171 L1680.48 683.171 L1679.92 683.171 L1679.36 683.171 L1678.8 683.171 L1678.24 683.171 L1677.68 683.171 L1677.13 683.171 L1676.57 683.171 L1676.01 683.171 L1675.45 683.171 L1674.89 683.171 L1674.33 683.171 L1673.77 683.171 L1673.21 683.171 L1672.65 683.171 L1672.09 683.171 L1671.53 683.171 L1670.97 683.171 L1670.41 683.171 L1669.85 683.171 L1669.3 683.171 L1668.74 683.171 L1668.18 683.171 L1667.62 683.171 L1667.06 683.171 L1666.5 683.171 L1665.94 683.171 L1665.38 683.171 L1664.82 683.171 L1664.26 683.171 L1663.7 683.171 L1663.14 683.171 L1662.58 683.171 L1662.03 683.171 L1661.47 683.171 L1660.91 683.171 L1660.35 683.171 L1659.79 683.171 L1659.23 683.171 L1658.67 683.171 L1658.11 683.171 L1657.55 683.171 L1656.99 683.171 L1656.43 683.171 L1655.87 683.171 L1655.31 683.171 L1654.76 683.171 L1654.2 683.171 L1653.64 683.171 L1653.08 683.171 L1652.52 683.171 L1651.96 683.171 L1651.4 683.171 L1650.84 683.171 L1650.28 683.171 L1649.72 683.171 L1649.16 683.171 L1648.6 683.171 L1648.04 683.171 L1647.48 683.171 L1646.93 683.171 L1646.37 683.171 L1645.81 683.171 L1645.25 683.171 L1644.69 683.171 L1644.13 683.171 L1643.57 683.171 L1643.01 683.171 L1642.45 683.171 L1641.89 683.171 L1641.33 683.171 L1640.77 683.171 L1640.21 683.171 L1639.66 683.171 L1639.1 683.171 L1638.54 683.171 L1637.98 683.171 L1637.42 683.171 L1636.86 683.171 L1636.3 683.171 L1635.74 683.171 L1635.18 683.171 L1634.62 683.171 L1634.06 683.171 L1633.5 683.171 L1632.94 683.171 L1632.39 683.171 L1631.83 683.171 L1631.27 683.171 L1630.71 683.171 L1630.15 683.171 L1629.59 683.171 L1629.03 683.171 L1628.47 683.171 L1627.91 683.171 L1627.35 683.171 L1626.79 683.171 L1626.23 683.171 L1625.67 683.171 L1625.11 683.171 L1624.56 683.171 L1624 683.171 L1623.44 683.171 L1622.88 683.171 L1622.32 683.171 L1621.76 683.171 L1621.2 683.171 L1620.64 683.171 L1620.08 683.171 L1619.52 683.171 L1618.96 683.171 L1618.4 683.171 L1617.84 683.171 L1617.29 683.171 L1616.73 683.171 L1616.17 683.171 L1615.61 683.171 L1615.05 683.171 L1614.49 683.171 L1613.93 683.171 L1613.37 683.171 L1612.81 683.171 L1612.25 683.171 L1611.69 683.171 L1611.13 683.171 L1610.57 683.171 L1610.02 683.171 L1609.46 683.171 L1608.9 683.171 L1608.34 683.171 L1607.78 683.171 L1607.22 683.171 L1606.66 683.171 L1606.1 683.171 L1605.54 683.171 L1604.98 683.171 L1604.42 683.171 L1603.86 683.171 L1603.3 683.171 L1602.74 683.171 L1602.19 683.171 L1601.63 683.171 L1601.07 683.171 L1600.51 683.171 L1599.95 683.171 L1599.39 683.171 L1598.83 683.171 L1598.27 683.171 L1597.71 683.171 L1597.15 683.171 L1596.59 683.171 L1596.03 683.171 L1595.47 683.171 L1594.92 683.171 L1594.36 683.171 L1593.8 683.171 L1593.24 683.171 L1592.68 683.171 L1592.12 683.171 L1591.56 683.171 L1591 683.171 L1590.44 683.171 L1589.88 683.171 L1589.32 683.171 L1588.76 683.171 L1588.2 683.171 L1587.65 683.171 L1587.09 683.171 L1586.53 683.171 L1585.97 683.171 L1585.41 683.171 L1584.85 683.171 L1584.29 683.171 L1583.73 683.171 L1583.17 683.171 L1582.61 683.171 L1582.05 683.171 L1581.49 683.171 L1580.93 683.171 L1580.37 683.171 L1579.82 683.171 L1579.26 683.171 L1578.7 683.171 L1578.14 683.171 L1577.58 683.171 L1577.02 683.171 L1576.46 683.171 L1575.9 683.171 L1575.34 683.171 L1574.78 683.171 L1574.22 683.171 L1573.66 683.171 L1573.1 683.171 L1572.55 683.171 L1571.99 683.171 L1571.43 683.171 L1570.87 683.171 L1570.31 683.171 L1569.75 683.171 L1569.19 683.171 L1568.63 683.171 L1568.07 683.171 L1567.51 683.171 L1566.95 683.171 L1566.39 683.171 L1565.83 683.171 L1565.28 683.171 L1564.72 683.171 L1564.16 683.171 L1563.6 683.171 L1563.04 683.171 L1562.48 683.171 L1561.92 683.171 L1561.36 683.171 L1560.8 683.171 L1560.24 683.171 L1559.68 683.171 L1559.12 683.171 L1558.56 683.171 L1558 683.171 L1557.45 683.171 L1556.89 683.171 L1556.33 683.171 L1555.77 683.171 L1555.21 683.171 L1554.65 683.171 L1554.09 683.171 L1553.53 683.171 L1552.97 683.171 L1552.41 683.171 L1551.85 683.171 L1551.29 683.171 L1550.73 683.171 L1550.18 683.171 L1549.62 683.171 L1549.06 683.171 L1548.5 683.171 L1547.94 683.171 L1547.38 683.171 L1546.82 683.171 L1546.26 683.171 L1545.7 683.171 L1545.14 683.171 L1544.58 683.171 L1544.02 683.171 L1543.46 683.171 L1542.9 683.171 L1542.35 683.171 L1541.79 683.171 L1541.23 683.171 L1540.67 683.171 L1540.11 683.171 L1539.55 683.171 L1538.99 683.171 L1538.43 683.171 L1537.87 683.171 L1537.31 683.171 L1536.75 683.171 L1536.19 683.171 L1535.63 683.171 L1535.08 683.171 L1534.52 683.171 L1533.96 683.171 L1533.4 683.171 L1532.84 683.171 L1532.28 683.171 L1531.72 683.171 L1531.16 683.171 L1530.6 683.171 L1530.04 683.171 L1529.48 683.171 L1528.92 683.171 L1528.36 683.171 L1527.81 683.171 L1527.25 683.171 L1526.69 683.171 L1526.13 683.171 L1525.57 683.171 L1525.01 683.171 L1524.45 683.171 L1523.89 683.171 L1523.33 683.171 L1522.77 683.171 L1522.21 683.171 L1521.65 683.171 L1521.09 683.171 L1520.53 683.171 L1519.98 683.171 L1519.42 683.171 L1518.86 683.171 L1518.3 683.171 L1517.74 683.171 L1517.18 683.171 L1516.62 683.171 L1516.06 683.171 L1515.5 683.171 L1514.94 683.171 L1514.38 683.171 L1513.82 683.171 L1513.26 683.171 L1512.71 683.171 L1512.15 683.171 L1511.59 683.171 L1511.03 683.171 L1510.47 683.171 L1509.91 683.171 L1509.35 683.171 L1508.79 683.171 L1508.23 683.171 L1507.67 683.171 L1507.11 683.171 L1506.55 683.171 L1505.99 683.171 L1505.44 683.171 L1504.88 683.171 L1504.32 683.171 L1503.76 683.171 L1503.2 683.171 L1502.64 683.171 L1502.08 683.171 L1501.52 683.171 L1500.96 683.171 L1500.4 683.171 L1499.84 683.171 L1499.28 683.171 L1498.72 683.171 L1498.16 683.171 L1497.61 683.171 L1497.05 683.171 L1496.49 683.171 L1495.93 683.171 L1495.37 683.171 L1494.81 683.171 L1494.25 683.171 L1493.69 683.171 L1493.13 683.171 L1492.57 683.171 L1492.01 683.171 L1491.45 683.171 L1490.89 683.171 L1490.34 683.171 L1489.78 683.171 L1489.22 683.171 L1488.66 683.171 L1488.1 683.171 L1487.54 683.171 L1486.98 683.171 L1486.42 683.171 L1485.86 683.171 L1485.3 683.171 L1484.74 683.171 L1484.18 683.171 L1483.62 683.171 L1483.07 683.171 L1482.51 683.171 L1481.95 683.171 L1481.39 683.171 L1480.83 683.171 L1480.27 683.171 L1479.71 683.171 L1479.15 683.171 L1478.59 683.171 L1478.03 683.171 L1477.47 683.171 L1476.91 683.171 L1476.35 683.171 L1475.79 683.171 L1475.24 683.171 L1474.68 683.171 L1474.12 683.171 L1473.56 683.171 L1473 683.171 L1472.44 683.171 L1471.88 683.171 L1471.32 683.171 L1470.76 683.171 L1470.2 683.171 L1469.64 683.171 L1469.08 683.171 L1468.52 683.171 L1467.97 683.171 L1467.41 683.171 L1466.85 683.171 L1466.29 683.171 L1465.73 683.171 L1465.17 683.171 L1464.61 683.171 L1464.05 683.171 L1463.49 683.171 L1462.93 683.171 L1462.37 683.171 L1461.81 683.171 L1461.25 683.171 L1460.7 683.171 L1460.14 683.171 L1459.58 683.171 L1459.02 683.171 L1458.46 683.171 L1457.9 683.171 L1457.34 683.171 L1456.78 683.171 L1456.22 683.171 L1455.66 683.171 L1455.1 683.171 L1454.54 683.171 L1453.98 683.171 L1453.42 683.171 L1452.87 683.171 L1452.31 683.171 L1451.75 683.171 L1451.19 683.171 L1450.63 683.171 L1450.07 683.171 L1449.51 683.171 L1448.95 683.171 L1448.39 683.171 L1447.83 683.171 L1447.27 683.171 L1446.71 683.171 L1446.15 683.171 L1445.6 683.171 L1445.04 683.171 L1444.48 683.171 L1443.92 683.171 L1443.36 683.171 L1442.8 683.171 L1442.24 683.171 L1441.68 683.171 L1441.12 683.171 L1440.56 683.171 L1440 683.171 L1439.44 683.171 L1438.88 683.171 L1438.33 683.171 L1437.77 683.171 L1437.21 683.171 L1436.65 683.171 L1436.09 683.171 L1435.53 683.171 L1434.97 683.171 L1434.41 683.171 L1433.85 683.171 L1433.29 683.171 L1432.73 683.171 L1432.17 683.171 L1431.61 683.171 L1431.05 683.171 L1430.5 683.171 L1429.94 683.171 L1429.38 683.171 L1428.82 683.171 L1428.26 683.171 L1427.7 683.171 L1427.14 683.171 L1426.58 683.171 L1426.02 683.171 L1425.46 683.171 L1424.9 683.171 L1424.34 683.171 L1423.78 683.171 L1423.23 683.171 L1422.67 683.171 L1422.11 683.171 L1421.55 683.171 L1420.99 683.171 L1420.43 683.171 L1419.87 683.171 L1419.31 683.171 L1418.75 683.171 L1418.19 683.171 L1417.63 683.171 L1417.07 683.171 L1416.51 683.171 L1415.95 683.171 L1415.4 683.171 L1414.84 683.171 L1414.28 683.171 L1413.72 683.171 L1413.16 683.171 L1412.6 683.171 L1412.04 683.171 L1411.48 683.171 L1410.92 683.171 L1410.36 683.171 L1409.8 683.171 L1409.24 683.171 L1408.68 683.171 L1408.13 683.171 L1407.57 683.171 L1407.01 683.171 L1406.45 683.171 L1405.89 683.171 L1405.33 683.171 L1404.77 683.171 L1404.21 683.171 L1403.65 683.171 L1403.09 683.171 L1402.53 683.171 L1401.97 683.171 L1401.41 683.171 L1400.86 683.171 L1400.3 683.171 L1399.74 683.171 L1399.18 683.171 L1398.62 683.171 L1398.06 683.171 L1397.5 683.171 L1396.94 683.171 L1396.38 683.171 L1395.82 683.171 L1395.26 683.171 L1394.7 683.171 L1394.14 683.171 L1393.58 683.171 L1393.03 683.171 L1392.47 683.171 L1391.91 683.171 L1391.35 683.171 L1390.79 683.171 L1390.23 683.171 L1389.67 683.171 L1389.11 683.171 L1388.55 683.171 L1387.99 683.171 L1387.43 683.171 L1386.87 683.171 L1386.31 683.171 L1385.76 683.171 L1385.2 683.171 L1384.64 683.171 L1384.08 683.171 L1383.52 683.171 L1382.96 683.171 L1382.4 683.171 L1381.84 683.171 L1381.28 683.171 L1380.72 683.171 L1380.16 683.171 L1379.6 683.171 L1379.04 683.171 L1378.49 683.171 L1377.93 683.171 L1377.37 683.171 L1376.81 683.171 L1376.25 683.171 L1375.69 683.171 L1375.13 683.171 L1374.57 683.171 L1374.01 683.171 L1373.45 683.171 L1372.89 683.171 L1372.33 683.171 L1371.77 683.171 L1371.21 683.171 L1370.66 683.171 L1370.1 683.171 L1369.54 683.171 L1368.98 683.171 L1368.42 683.171 L1367.86 683.171 L1367.3 683.171 L1366.74 683.171 L1366.18 683.171 L1365.62 683.171 L1365.06 683.171 L1364.5 683.171 L1363.94 683.171 L1363.39 683.171 L1362.83 683.171 L1362.27 683.171 L1361.71 683.171 L1361.15 683.171 L1360.59 683.171 L1360.03 683.171 L1359.47 683.171 L1358.91 683.171 L1358.35 683.171 L1357.79 683.171 L1357.23 683.171 L1356.67 683.171 L1356.12 683.171 L1355.56 683.171 L1355 683.171 L1354.44 683.171 L1353.88 683.171 L1353.32 683.171 L1352.76 683.171 L1352.2 683.171 L1351.64 683.171 L1351.08 683.171 L1350.52 683.171 L1349.96 683.171 L1349.4 683.171 L1348.84 683.171 L1348.29 683.171 L1347.73 683.171 L1347.17 683.171 L1346.61 683.171 L1346.05 683.171 L1345.49 683.171 L1344.93 683.171 L1344.37 683.171 L1343.81 683.171 L1343.25 683.171 L1342.69 683.171 L1342.13 683.171 L1341.57 683.171 L1341.02 683.171 L1340.46 683.171 L1339.9 683.171 L1339.34 683.171 L1338.78 683.171 L1338.22 683.171 L1337.66 683.171 L1337.1 683.171 L1336.54 683.171 L1335.98 683.171 L1335.42 683.171 L1334.86 683.171 L1334.3 683.171 L1333.75 683.171 L1333.19 683.171 L1332.63 683.171 L1332.07 683.171 L1331.51 683.171 L1330.95 683.171 L1330.39 683.171 L1329.83 683.171 L1329.27 683.171 L1328.71 683.171 L1328.15 683.171 L1327.59 683.171 L1327.03 683.171 L1326.47 683.171 L1325.92 683.171 L1325.36 683.171 L1324.8 683.171 L1324.24 683.171 L1323.68 683.171 L1323.12 683.171 L1322.56 683.171 L1322 683.171 L1321.44 683.171 L1320.88 683.171 L1320.32 683.171 L1319.76 683.171 L1319.2 683.171 L1318.65 683.171 L1318.09 683.171 L1317.53 683.171 L1316.97 683.171 L1316.41 683.171 L1315.85 683.171 L1315.29 683.171 L1314.73 683.171 L1314.17 683.171 L1313.61 683.171 L1313.05 683.171 L1312.49 683.171 L1311.93 683.171 L1311.38 683.171 L1310.82 683.171 L1310.26 683.171 L1309.7 683.171 L1309.14 683.171 L1308.58 683.171 L1308.02 683.171 L1307.46 683.171 L1306.9 683.171 L1306.34 683.171 L1305.78 683.171 L1305.22 683.171 L1304.66 683.171 L1304.1 683.171 L1303.55 683.171 L1302.99 683.171 L1302.43 683.171 L1301.87 683.171 L1301.31 683.171 L1300.75 683.171 L1300.19 683.171 L1299.63 683.171 L1299.07 683.171 L1298.51 683.171 L1297.95 683.171 L1297.39 683.171 L1296.83 683.171 L1296.28 683.171 L1295.72 683.171 L1295.16 683.171 L1294.6 683.171 L1294.04 683.171 L1293.48 683.171 L1292.92 683.171 L1292.36 683.171 L1291.8 683.171 L1291.24 683.171 L1290.68 683.171 L1290.12 683.171 L1289.56 683.171 L1289 683.171 L1288.45 683.171 L1287.89 683.171 L1287.33 683.171 L1286.77 683.171 L1286.21 683.171 L1285.65 683.171 L1285.09 683.171 L1284.53 683.171 L1283.97 683.171 L1283.41 683.171 L1282.85 683.171 L1282.29 683.171 L1281.73 683.171 L1281.18 683.171 L1280.62 683.171 L1280.06 683.171 L1279.5 683.171 L1278.94 683.171 L1278.38 683.171 L1277.82 683.171 L1277.26 683.171 L1276.7 683.171 L1276.14 683.171 L1275.58 683.171 L1275.02 683.171 L1274.46 683.171 L1273.91 683.171 L1273.35 683.171 L1272.79 683.171 L1272.23 683.171 L1271.67 683.171 L1271.11 683.171 L1270.55 683.171 L1269.99 683.171 L1269.43 683.171 L1268.87 683.171 L1268.31 683.171 L1267.75 683.171 L1267.19 683.171 L1266.63 683.171 L1266.08 683.171 L1265.52 683.171 L1264.96 683.171 L1264.4 683.171 L1263.84 683.171 L1263.28 683.171 L1262.72 683.171 L1262.16 683.171 L1261.6 683.171 L1261.04 683.171 L1260.48 683.171 L1259.92 683.171 L1259.36 683.171 L1258.81 683.171 L1258.25 683.171 L1257.69 683.171 L1257.13 683.171 L1256.57 683.171 L1256.01 683.171 L1255.45 683.171 L1254.89 683.171 L1254.33 683.171 L1253.77 683.171 L1253.21 683.171 L1252.65 683.171 L1252.09 683.171 L1251.54 683.171 L1250.98 683.171 L1250.42 683.171 L1249.86 683.171 L1249.3 683.171 L1248.74 683.171 L1248.18 683.171 L1247.62 683.171 L1247.06 683.171 L1246.5 683.171 L1245.94 683.171 L1245.38 683.171 L1244.82 683.171 L1244.26 683.171 L1243.71 683.171 L1243.15 683.171 L1242.59 683.171 L1242.03 683.171 L1241.47 683.171 L1240.91 683.171 L1240.35 683.171 L1239.79 683.171 L1239.23 683.171 L1238.67 683.171 L1238.11 683.171 L1237.55 683.171 L1236.99 683.171 L1236.44 683.171 L1235.88 683.171 L1235.32 683.171 L1234.76 683.171 L1234.2 683.171 L1233.64 683.171 L1233.08 683.171 L1232.52 683.171 L1231.96 683.171 L1231.4 683.171 L1230.84 683.171 L1230.28 683.171 L1229.72 683.171 L1229.17 683.171 L1228.61 683.171 L1228.05 683.171 L1227.49 683.171 L1226.93 683.171 L1226.37 683.171 L1225.81 683.171 L1225.25 683.171 L1224.69 683.171 L1224.13 683.171 L1223.57 683.171 L1223.01 683.171 L1222.45 683.171 L1221.89 683.171 L1221.34 683.171 L1220.78 683.171 L1220.22 683.171 L1219.66 683.171 L1219.1 683.171 L1218.54 683.171 L1217.98 683.171 L1217.42 683.171 L1216.86 683.171 L1216.3 683.171 L1215.74 683.171 L1215.18 683.171 L1214.62 683.171 L1214.07 683.171 L1213.51 683.171 L1212.95 683.171 L1212.39 683.171 L1211.83 683.171 L1211.27 683.171 L1210.71 683.171 L1210.15 683.171 L1209.59 683.171 L1209.03 683.171 L1208.47 683.171 L1207.91 683.171 L1207.35 683.171 L1206.8 683.171 L1206.24 683.171 L1205.68 683.171 L1205.12 683.171 L1204.56 683.171 L1204 683.171 L1203.44 683.171 L1202.88 683.171 L1202.32 683.171 L1201.76 683.171 L1201.2 683.171 L1200.64 683.171 L1200.08 683.171 L1199.52 683.171 L1198.97 683.171 L1198.41 683.171 L1197.85 683.171 L1197.29 683.171 L1196.73 683.171 L1196.17 683.171 L1195.61 683.171 L1195.05 683.171 L1194.49 683.171 L1193.93 683.171 L1193.37 683.171 L1192.81 683.171 L1192.25 683.171 L1191.7 683.171 L1191.14 683.171 L1190.58 683.171 L1190.02 683.171 L1189.46 683.171 L1188.9 683.171 L1188.34 683.171 L1187.78 683.171 L1187.22 683.171 L1186.66 683.171 L1186.1 683.171 L1185.54 683.171 L1184.98 683.171 L1184.43 683.171 L1183.87 683.171 L1183.31 683.171 L1182.75 683.171 L1182.19 683.171 L1181.63 683.171 L1181.07 683.171 L1180.51 683.171 L1179.95 683.171 L1179.39 683.171 L1178.83 683.171 L1178.27 683.171 L1177.71 683.171 L1177.15 683.171 L1176.6 683.171 L1176.04 683.171 L1175.48 683.171 L1174.92 683.171 L1174.36 683.171 L1173.8 683.171 L1173.24 683.171 L1172.68 683.171 L1172.12 683.171 L1171.56 683.171 L1171 683.171 L1170.44 683.171 L1169.88 683.171 L1169.33 683.171 L1168.77 683.171 L1168.21 683.171 L1167.65 683.171 L1167.09 683.171 L1166.53 683.171 L1165.97 683.171 L1165.41 683.171 L1164.85 683.171 L1164.29 683.171 L1163.73 683.171 L1163.17 683.171 L1162.61 683.171 L1162.05 683.171 L1161.5 683.171 L1160.94 683.171 L1160.38 683.171 L1159.82 683.171 L1159.26 683.171 L1158.7 683.171 L1158.14 683.171 L1157.58 683.171 L1157.02 683.171 L1156.46 683.171 L1155.9 683.171 L1155.34 683.171 L1154.78 683.171 L1154.23 683.171 L1153.67 683.171 L1153.11 683.171 L1152.55 683.171 L1151.99 683.171 L1151.43 683.171 L1150.87 683.171 L1150.31 683.171 L1149.75 683.171 L1149.19 683.171 L1148.63 683.171 L1148.07 683.171 L1147.51 683.171 L1146.96 683.171 L1146.4 683.171 L1145.84 683.171 L1145.28 683.171 L1144.72 683.171 L1144.16 683.171 L1143.6 683.171 L1143.04 683.171 L1142.48 683.171 L1141.92 683.171 L1141.36 683.171 L1140.8 683.171 L1140.24 683.171 L1139.68 683.171 L1139.13 683.171 L1138.57 683.171 L1138.01 683.171 L1137.45 683.171 L1136.89 683.171 L1136.33 683.171 L1135.77 683.171 L1135.21 683.171 L1134.65 683.171 L1134.09 683.171 L1133.53 683.171 L1132.97 683.171 L1132.41 683.171 L1131.86 683.171 L1131.3 683.171 L1130.74 683.171 L1130.18 683.171 L1129.62 683.171 L1129.06 683.171 L1128.5 683.171 L1127.94 683.171 L1127.38 683.171 L1126.82 683.171 L1126.26 683.171 L1125.7 683.171 L1125.14 683.171 L1124.59 683.171 L1124.03 683.171 L1123.47 683.171 L1122.91 683.171 L1122.35 683.171 L1121.79 683.171 L1121.23 683.171 L1120.67 683.171 L1120.11 683.171 L1119.55 683.171 L1118.99 683.171 L1118.43 683.171 L1117.87 683.171 L1117.31 683.171 L1116.76 683.171 L1116.2 683.171 L1115.64 683.171 L1115.08 683.171 L1114.52 683.171 L1113.96 683.171 L1113.4 683.171 L1112.84 683.171 L1112.28 683.171 L1111.72 683.171 L1111.16 683.171 L1110.6 683.171 L1110.04 683.171 L1109.49 683.171 L1108.93 683.171 L1108.37 683.171 L1107.81 683.171 L1107.25 683.171 L1106.69 683.171 L1106.13 683.171 L1105.57 683.171 L1105.01 683.171 L1104.45 683.171 L1103.89 683.171 L1103.33 683.171 L1102.77 683.171 L1102.22 683.171 L1101.66 683.171 L1101.1 683.171 L1100.54 683.171 L1099.98 683.171 L1099.42 683.171 L1098.86 683.171 L1098.3 683.171 L1097.74 683.171 L1097.18 683.171 L1096.62 683.171 L1096.06 683.171 L1095.5 683.171 L1094.94 683.171 L1094.39 683.171 L1093.83 683.171 L1093.27 683.171 L1092.71 683.171 L1092.15 683.171 L1091.59 683.171 L1091.03 683.171 L1090.47 683.171 L1089.91 683.171 L1089.35 683.171 L1088.79 683.171 L1088.23 683.171 L1087.67 683.171 L1087.12 683.171 L1086.56 683.171 L1086 683.171 L1085.44 683.171 L1084.88 683.171 L1084.32 683.171 L1083.76 683.171 L1083.2 683.171 L1082.64 683.171 L1082.08 683.171 L1081.52 683.171 L1080.96 683.171 L1080.4 683.171 L1079.85 683.171 L1079.29 683.171 L1078.73 683.171 L1078.17 683.171 L1077.61 683.171 L1077.05 683.171 L1076.49 683.171 L1075.93 683.171 L1075.37 683.171 L1074.81 683.171 L1074.25 683.171 L1073.69 683.171 L1073.13 683.171 L1072.57 683.171 L1072.02 683.171 L1071.46 683.171 L1070.9 683.171 L1070.34 683.171 L1069.78 683.171 L1069.22 683.171 L1068.66 683.171 L1068.1 683.171 L1067.54 683.171 L1066.98 683.171 L1066.42 683.171 L1065.86 683.171 L1065.3 683.171 L1064.75 683.171 L1064.19 683.171 L1063.63 683.171 L1063.07 683.171 L1062.51 683.171 L1061.95 683.171 L1061.39 683.171 L1060.83 683.171 L1060.27 683.171 L1059.71 683.171 L1059.15 683.171 L1058.59 683.171 L1058.03 683.171 L1057.48 683.171 L1056.92 683.171 L1056.36 683.171 L1055.8 683.171 L1055.24 683.171 L1054.68 683.171 L1054.12 683.171 L1053.56 683.171 L1053 683.171 L1052.44 683.171 L1051.88 683.171 L1051.32 683.171 L1050.76 683.171 L1050.2 683.171 L1049.65 683.171 L1049.09 683.171 L1048.53 683.171 L1047.97 683.171 L1047.41 683.171 L1046.85 683.171 L1046.29 683.171 L1045.73 683.171 L1045.17 683.171 L1044.61 683.171 L1044.05 683.171 L1043.49 683.171 L1042.93 683.171 L1042.38 683.171 L1041.82 683.171 L1041.26 683.171 L1040.7 683.171 L1040.14 683.171 L1039.58 683.171 L1039.02 683.171 L1038.46 683.171 L1037.9 683.171 L1037.34 683.171 L1036.78 683.171 L1036.22 683.171 L1035.66 683.171 L1035.1 683.171 L1034.55 683.171 L1033.99 683.171 L1033.43 683.171 L1032.87 683.171 L1032.31 683.171 L1031.75 683.171 L1031.19 683.171 L1030.63 683.171 L1030.07 683.171 L1029.51 683.171 L1028.95 683.171 L1028.39 683.171 L1027.83 683.171 L1027.28 683.171 L1026.72 683.171 L1026.16 683.171 L1025.6 683.171 L1025.04 683.171 L1024.48 683.171 L1023.92 683.171 L1023.36 683.171 L1022.8 683.171 L1022.24 683.171 L1021.68 683.171 L1021.12 683.171 L1020.56 683.171 L1020.01 683.171 L1019.45 683.171 L1018.89 683.171 L1018.33 683.171 L1017.77 683.171 L1017.21 683.171 L1016.65 683.171 L1016.09 683.171 L1015.53 683.171 L1014.97 683.171 L1014.41 683.171 L1013.85 683.171 L1013.29 683.171 L1012.73 683.171 L1012.18 683.171 L1011.62 683.171 L1011.06 683.171 L1010.5 683.171 L1009.94 683.171 L1009.38 683.171 L1008.82 683.171 L1008.26 683.171 L1007.7 683.171 L1007.14 683.171 L1006.58 683.171 L1006.02 683.171 L1005.46 683.171 L1004.91 683.171 L1004.35 683.171 L1003.79 683.171 L1003.23 683.171 L1002.67 683.171 L1002.11 683.171 L1001.55 683.171 L1000.99 683.171 L1000.43 683.171 L999.872 683.171 L999.313 683.171 L998.754 683.171 L998.194 683.171 L997.635 683.171 L997.076 683.171 L996.517 683.171 L995.957 683.171 L995.398 683.171 L994.839 683.171 L994.28 683.171 L993.72 683.171 L993.161 683.171 L992.602 683.171 L992.043 683.171 L991.483 683.171 L990.924 683.171 L990.365 683.171 L989.806 683.171 L989.246 683.171 L988.687 683.171 L988.128 683.171 L987.569 683.171 L987.009 683.171 L986.45 683.171 L985.891 683.171 L985.332 683.171 L984.772 683.171 L984.213 683.171 L983.654 683.171 L983.095 683.171 L982.535 683.171 L981.976 683.171 L981.417 683.171 L980.858 683.171 L980.298 683.171 L979.739 683.171 L979.18 683.171 L978.621 683.171 L978.061 683.171 L977.502 683.171 L976.943 683.171 L976.384 683.171 L975.824 683.171 L975.265 683.171 L974.706 683.171 L974.147 683.171 L973.587 683.171 L973.028 683.171 L972.469 683.171 L971.91 683.171 L971.35 683.171 L970.791 683.171 L970.232 683.171 L969.673 683.171 L969.113 683.171 L968.554 683.171 L967.995 683.171 L967.436 683.171 L966.876 683.171 L966.317 683.171 L965.758 683.171 L965.199 683.171 L964.639 683.171 L964.08 683.171 L963.521 683.171 L962.962 683.171 L962.402 683.171 L961.843 683.171 L961.284 683.171 L960.725 683.171 L960.165 683.171 L959.606 683.171 L959.047 683.171 L958.488 683.171 L957.928 683.171 L957.369 683.171 L956.81 683.171 L956.251 683.171 L955.691 683.171 L955.132 683.171 L954.573 683.171 L954.014 683.171 L953.454 683.171 L952.895 683.171 L952.336 683.171 L951.777 683.171 L951.217 683.171 L950.658 683.171 L950.099 683.171 L949.54 683.171 L948.98 683.171 L948.421 683.171 L947.862 683.171 L947.303 683.171 L946.743 683.171 L946.184 683.171 L945.625 683.171 L945.066 683.171 L944.506 683.171 L943.947 683.171 L943.388 683.171 L942.829 683.171 L942.269 683.171 L941.71 683.171 L941.151 683.171 L940.592 683.171 L940.032 683.171 L939.473 683.171 L938.914 683.171 L938.355 683.171 L937.795 683.171 L937.236 683.171 L936.677 683.171 L936.118 683.171 L935.558 683.171 L934.999 683.171 L934.44 683.171 L933.881 683.171 L933.321 683.171 L932.762 683.171 L932.203 683.171 L931.644 683.171 L931.084 683.171 L930.525 683.171 L929.966 683.171 L929.406 683.171 L928.847 683.171 L928.288 683.171 L927.729 683.171 L927.169 683.171 L926.61 683.171 L926.051 683.171 L925.492 683.171 L924.932 683.171 L924.373 683.171 L923.814 683.171 L923.255 683.171 L922.695 683.171 L922.136 683.171 L921.577 683.171 L921.018 683.171 L920.458 683.171 L919.899 683.171 L919.34 683.171 L918.781 683.171 L918.221 683.171 L917.662 683.171 L917.103 683.171 L916.544 683.171 L915.984 683.171 L915.425 683.171 L914.866 683.171 L914.307 683.171 L913.747 683.171 L913.188 683.171 L912.629 683.171 L912.07 683.171 L911.51 683.171 L910.951 683.171 L910.392 683.171 L909.833 683.171 L909.273 683.171 L908.714 683.171 L908.155 683.171 L907.596 683.171 L907.036 683.171 L906.477 683.171 L905.918 683.171 L905.359 683.171 L904.799 683.171 L904.24 683.171 L903.681 683.171 L903.122 683.171 L902.562 683.171 L902.003 683.171 L901.444 683.171 L900.885 683.171 L900.325 683.171 L899.766 683.171 L899.207 683.171 L898.648 683.171 L898.088 683.171 L897.529 683.171 L896.97 683.171 L896.411 683.171 L895.851 683.171 L895.292 683.171 L894.733 683.171 L894.174 683.171 L893.614 683.171 L893.055 683.171 L892.496 683.171 L891.937 683.171 L891.377 683.171 L890.818 683.171 L890.259 683.171 L889.7 683.171 L889.14 683.171 L888.581 683.171 L888.022 683.171 L887.463 683.171 L886.903 683.171 L886.344 683.171 L885.785 683.171 L885.226 683.171 L884.666 683.171 L884.107 683.171 L883.548 683.171 L882.989 683.171 L882.429 683.171 L881.87 683.171 L881.311 683.171 L880.752 683.171 L880.192 683.171 L879.633 683.171 L879.074 683.171 L878.515 683.171 L877.955 683.171 L877.396 683.171 L876.837 683.171 L876.278 683.171 L875.718 683.171 L875.159 683.171 L874.6 683.171 L874.041 683.171 L873.481 683.171 L872.922 683.171 L872.363 683.171 L871.804 683.171 L871.244 683.171 L870.685 683.171 L870.126 683.171 L869.567 683.171 L869.007 683.171 L868.448 683.171 L867.889 683.171 L867.33 683.171 L866.77 683.171 L866.211 683.171 L865.652 683.171 L865.093 683.171 L864.533 683.171 L863.974 683.171 L863.415 683.171 L862.856 683.171 L862.296 683.171 L861.737 683.171 L861.178 683.171 L860.619 683.171 L860.059 683.171 L859.5 683.171 L858.941 683.171 L858.382 683.171 L857.822 683.171 L857.263 683.171 L856.704 683.171 L856.145 683.171 L855.585 683.171 L855.026 683.171 L854.467 683.171 L853.908 683.171 L853.348 683.171 L852.789 683.171 L852.23 683.171 L851.671 683.171 L851.111 683.171 L850.552 683.171 L849.993 683.171 L849.434 683.171 L848.874 683.171 L848.315 683.171 L847.756 683.171 L847.197 683.171 L846.637 683.171 L846.078 683.171 L845.519 683.171 L844.96 683.171 L844.4 683.171 L843.841 683.171 L843.282 683.171 L842.723 683.171 L842.163 683.171 L841.604 683.171 L841.045 683.171 L840.486 683.171 L839.926 683.171 L839.367 683.171 L838.808 683.171 L838.249 683.171 L837.689 683.171 L837.13 683.171 L836.571 683.171 L836.012 683.171 L835.452 683.171 L834.893 683.171 L834.334 683.171 L833.775 683.171 L833.215 683.171 L832.656 683.171 L832.097 683.171 L831.538 683.171 L830.978 683.171 L830.419 683.171 L829.86 683.171 L829.301 683.171 L828.741 683.171 L828.182 683.171 L827.623 683.171 L827.064 683.171 L826.504 683.171 L825.945 683.171 L825.386 683.171 L824.827 683.171 L824.267 683.171 L823.708 683.171 L823.149 683.171 L822.59 683.171 L822.03 683.171 L821.471 683.171 L820.912 683.171 L820.353 683.171 L819.793 683.171 L819.234 683.171 L818.675 683.171 L818.116 683.171 L817.556 683.171 L816.997 683.171 L816.438 683.171 L815.879 683.171 L815.319 683.171 L814.76 683.171 L814.201 683.171 L813.642 683.171 L813.082 683.171 L812.523 683.171 L811.964 683.171 L811.405 683.171 L810.845 683.171 L810.286 683.171 L809.727 683.171 L809.168 683.171 L808.608 683.171 L808.049 683.171 L807.49 683.171 L806.931 683.171 L806.371 683.171 L805.812 683.171 L805.253 683.171 L804.693 683.171 L804.134 683.171 L803.575 683.171 L803.016 683.171 L802.456 683.171 L801.897 683.171 L801.338 683.171 L800.779 683.171 L800.219 683.171 L799.66 683.171 L799.101 683.171 L798.542 683.171 L797.982 683.171 L797.423 683.171 L796.864 683.171 L796.305 683.171 L795.745 683.171 L795.186 683.171 L794.627 683.171 L794.068 683.171 L793.508 683.171 L792.949 683.171 L792.39 683.171 L791.831 683.171 L791.271 683.171 L790.712 683.171 L790.153 683.171 L789.594 683.171 L789.034 683.171 L788.475 683.171 L787.916 683.171 L787.357 683.171 L786.797 683.171 L786.238 683.171 L785.679 683.171 L785.12 683.171 L784.56 683.171 L784.001 683.171 L783.442 683.171 L782.883 683.171 L782.323 683.171 L781.764 683.171 L781.205 683.171 L780.646 683.171 L780.086 683.171 L779.527 683.171 L778.968 683.171 L778.409 683.171 L777.849 683.171 L777.29 683.171 L776.731 683.171 L776.172 683.171 L775.612 683.171 L775.053 683.171 L774.494 683.171 L773.935 683.171 L773.375 683.171 L772.816 683.171 L772.257 683.171 L771.698 683.171 L771.138 683.171 L770.579 683.171 L770.02 683.171 L769.461 683.171 L768.901 683.171 L768.342 683.171 L767.783 683.171 L767.224 683.171 L766.664 683.171 L766.105 683.171 L765.546 683.171 L764.987 683.171 L764.427 683.171 L763.868 683.171 L763.309 683.171 L762.75 683.171 L762.19 683.171 L761.631 683.171 L761.072 683.171 L760.513 683.171 L759.953 683.171 L759.394 683.171 L758.835 683.171 L758.276 683.171 L757.716 683.171 L757.157 683.171 L756.598 683.171 L756.039 683.171 L755.479 683.171 L754.92 683.171 L754.361 683.171 L753.802 683.171 L753.242 683.171 L752.683 683.171 L752.124 683.171 L751.565 683.171 L751.005 683.171 L750.446 683.171 L749.887 683.171 L749.328 683.171 L748.768 683.171 L748.209 683.171 L747.65 683.171 L747.091 683.171 L746.531 683.171 L745.972 683.171 L745.413 683.171 L744.854 683.171 L744.294 683.171 L743.735 683.171 L743.176 683.171 L742.617 683.171 L742.057 683.171 L741.498 683.171 L740.939 683.171 L740.38 683.171 L739.82 683.171 L739.261 683.171 L738.702 683.171 L738.143 683.171 L737.583 683.171 L737.024 683.171 L736.465 683.171 L735.906 683.171 L735.346 683.171 L734.787 683.171 L734.228 683.171 L733.669 683.171 L733.109 683.171 L732.55 683.171 L731.991 683.171 L731.432 683.171 L730.872 683.171 L730.313 683.171 L729.754 683.171 L729.195 683.171 L728.635 683.171 L728.076 683.171 L727.517 683.171 L726.958 683.171 L726.398 683.171 L725.839 683.171 L725.28 683.171 L724.721 683.171 L724.161 683.171 L723.602 683.171 L723.043 683.171 L722.484 683.171 L721.924 683.171 L721.365 683.171 L720.806 683.171 L720.247 683.171  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip163)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.064 720.806,684.064 721.365,684.064 721.924,684.064 722.484,684.064 723.043,684.064 723.602,684.064 724.161,684.064 724.721,684.064 725.28,684.064 725.839,684.064 726.398,684.064 726.958,684.064 727.517,684.064 728.076,684.064 728.635,684.064 729.195,684.064 729.754,684.064 730.313,684.064 730.872,684.064 731.432,684.064 731.991,684.064 732.55,684.064 733.109,684.064 733.669,684.064 734.228,684.064 734.787,684.064 735.346,684.064 735.906,684.064 736.465,684.064 737.024,684.064 737.583,684.064 738.143,684.064 738.702,684.064 739.261,684.064 739.82,684.064 740.38,684.064 740.939,684.064 741.498,684.064 742.057,684.064 742.617,684.064 743.176,684.064 743.735,684.064 744.294,684.064 744.854,684.064 745.413,684.064 745.972,684.064 746.531,684.064 747.091,684.064 747.65,684.064 748.209,684.064 748.768,684.064 749.328,684.064 749.887,684.064 750.446,684.064 751.005,684.064 751.565,684.064 752.124,684.064 752.683,684.064 753.242,684.064 753.802,684.064 754.361,684.064 754.92,684.064 755.479,684.064 756.039,684.064 756.598,684.064 757.157,684.064 757.716,684.064 758.276,684.064 758.835,684.064 759.394,684.064 759.953,684.064 760.513,684.064 761.072,684.064 761.631,684.064 762.19,684.064 762.75,684.064 763.309,684.064 763.868,684.064 764.427,684.064 764.987,684.064 765.546,684.064 766.105,684.064 766.664,684.064 767.224,684.064 767.783,684.064 768.342,684.064 768.901,684.064 769.461,684.064 770.02,684.064 770.579,684.064 771.138,684.064 771.698,684.064 772.257,684.064 772.816,684.064 773.375,684.064 773.935,684.064 774.494,684.064 775.053,684.064 775.612,684.064 776.172,684.064 776.731,684.064 777.29,684.064 777.849,684.064 778.409,684.064 778.968,684.064 779.527,684.064 780.086,684.064 780.646,684.064 781.205,684.064 781.764,684.064 782.323,684.064 782.883,684.064 783.442,684.064 784.001,684.064 784.56,684.064 785.12,684.064 785.679,684.064 786.238,684.064 786.797,684.064 787.357,684.064 787.916,684.064 788.475,684.064 789.034,684.064 789.594,684.064 790.153,684.064 790.712,684.064 791.271,684.064 791.831,684.064 792.39,684.064 792.949,684.064 793.508,684.064 794.068,684.064 794.627,684.064 795.186,684.064 795.745,684.064 796.305,684.064 796.864,684.064 797.423,684.064 797.982,684.064 798.542,684.064 799.101,684.064 799.66,684.064 800.219,684.064 800.779,684.064 801.338,684.064 801.897,684.064 802.456,684.064 803.016,684.064 803.575,684.064 804.134,684.064 804.693,684.064 805.253,684.064 805.812,684.064 806.371,684.064 806.931,684.064 807.49,684.064 808.049,684.064 808.608,684.064 809.168,684.064 809.727,684.064 810.286,684.064 810.845,684.064 811.405,684.064 811.964,684.064 812.523,684.064 813.082,684.064 813.642,684.064 814.201,684.064 814.76,684.064 815.319,684.064 815.879,684.064 816.438,684.064 816.997,684.064 817.556,684.064 818.116,684.064 818.675,684.064 819.234,684.064 819.793,684.064 820.353,684.064 820.912,684.064 821.471,684.064 822.03,684.064 822.59,684.064 823.149,684.064 823.708,684.064 824.267,684.064 824.827,684.064 825.386,684.064 825.945,684.064 826.504,684.064 827.064,684.064 827.623,684.064 828.182,684.064 828.741,684.064 829.301,684.064 829.86,684.064 830.419,684.064 830.978,684.064 831.538,684.064 832.097,684.064 832.656,684.064 833.215,684.064 833.775,684.064 834.334,684.064 834.893,684.064 835.452,684.064 836.012,684.064 836.571,684.064 837.13,684.064 837.689,684.064 838.249,684.064 838.808,684.064 839.367,684.064 839.926,684.064 840.486,684.064 841.045,684.064 841.604,684.064 842.163,684.064 842.723,684.064 843.282,684.064 843.841,684.064 844.4,684.064 844.96,684.064 845.519,684.064 846.078,684.064 846.637,684.064 847.197,684.064 847.756,684.064 848.315,684.064 848.874,684.064 849.434,684.064 849.993,684.064 850.552,684.064 851.111,684.064 851.671,684.064 852.23,684.064 852.789,684.064 853.348,684.064 853.908,684.064 854.467,684.064 855.026,684.064 855.585,684.064 856.145,684.064 856.704,684.064 857.263,684.064 857.822,684.064 858.382,684.064 858.941,684.064 859.5,684.064 860.059,684.064 860.619,684.064 861.178,684.064 861.737,684.064 862.296,684.064 862.856,684.064 863.415,684.064 863.974,684.064 864.533,684.064 865.093,684.064 865.652,684.064 866.211,684.064 866.77,684.064 867.33,684.064 867.889,684.064 868.448,684.064 869.007,684.064 869.567,684.064 870.126,684.064 870.685,684.064 871.244,684.064 871.804,684.064 872.363,684.064 872.922,684.064 873.481,684.064 874.041,684.064 874.6,684.064 875.159,684.064 875.718,684.064 876.278,684.064 876.837,684.064 877.396,684.064 877.955,684.064 878.515,684.064 879.074,684.064 879.633,684.064 880.192,684.064 880.752,684.064 881.311,684.064 881.87,684.064 882.429,684.064 882.989,684.064 883.548,684.064 884.107,684.064 884.666,684.064 885.226,684.064 885.785,684.064 886.344,684.064 886.903,684.064 887.463,684.064 888.022,684.064 888.581,684.064 889.14,684.064 889.7,684.064 890.259,684.064 890.818,684.064 891.377,684.064 891.937,684.064 892.496,684.064 893.055,684.064 893.614,684.064 894.174,684.064 894.733,684.064 895.292,684.064 895.851,684.064 896.411,684.064 896.97,684.064 897.529,684.064 898.088,684.064 898.648,684.064 899.207,684.064 899.766,684.064 900.325,684.064 900.885,684.064 901.444,684.064 902.003,684.064 902.562,684.064 903.122,684.064 903.681,684.064 904.24,684.064 904.799,684.064 905.359,684.064 905.918,684.064 906.477,684.064 907.036,684.064 907.596,684.064 908.155,684.064 908.714,684.064 909.273,684.064 909.833,684.064 910.392,684.064 910.951,684.064 911.51,684.064 912.07,684.064 912.629,684.064 913.188,684.064 913.747,684.064 914.307,684.064 914.866,684.064 915.425,684.064 915.984,684.064 916.544,684.064 917.103,684.064 917.662,684.064 918.221,684.064 918.781,684.064 919.34,684.064 919.899,684.064 920.458,684.064 921.018,684.064 921.577,684.064 922.136,684.064 922.695,684.064 923.255,684.064 923.814,684.064 924.373,684.064 924.932,684.064 925.492,684.064 926.051,684.064 926.61,684.064 927.169,684.064 927.729,684.064 928.288,684.064 928.847,684.064 929.406,684.064 929.966,684.064 930.525,684.064 931.084,684.064 931.644,684.064 932.203,684.064 932.762,684.064 933.321,684.064 933.881,684.064 934.44,684.064 934.999,684.064 935.558,684.064 936.118,684.064 936.677,684.064 937.236,684.064 937.795,684.064 938.355,684.064 938.914,684.064 939.473,684.064 940.032,684.064 940.592,684.064 941.151,684.064 941.71,684.064 942.269,684.064 942.829,684.064 943.388,684.064 943.947,684.064 944.506,684.064 945.066,684.064 945.625,684.064 946.184,684.064 946.743,684.064 947.303,684.064 947.862,684.064 948.421,684.064 948.98,684.064 949.54,684.064 950.099,684.064 950.658,684.064 951.217,684.064 951.777,684.064 952.336,684.064 952.895,684.064 953.454,684.064 954.014,684.064 954.573,684.064 955.132,684.064 955.691,684.064 956.251,684.064 956.81,684.064 957.369,684.064 957.928,684.064 958.488,684.064 959.047,684.064 959.606,684.064 960.165,684.064 960.725,684.064 961.284,684.064 961.843,684.064 962.402,684.064 962.962,684.064 963.521,684.064 964.08,684.064 964.639,684.064 965.199,684.064 965.758,684.064 966.317,684.064 966.876,684.064 967.436,684.064 967.995,684.064 968.554,684.064 969.113,684.064 969.673,684.064 970.232,684.064 970.791,684.064 971.35,684.064 971.91,684.064 972.469,684.064 973.028,684.064 973.587,684.064 974.147,684.064 974.706,684.064 975.265,684.064 975.824,684.064 976.384,684.064 976.943,684.064 977.502,684.064 978.061,684.064 978.621,684.064 979.18,684.064 979.739,684.064 980.298,684.064 980.858,684.064 981.417,684.064 981.976,684.064 982.535,684.064 983.095,684.064 983.654,684.064 984.213,684.064 984.772,684.064 985.332,684.064 985.891,684.064 986.45,684.064 987.009,684.064 987.569,684.064 988.128,684.064 988.687,684.064 989.246,684.064 989.806,684.064 990.365,684.064 990.924,684.064 991.483,684.064 992.043,684.064 992.602,684.064 993.161,684.064 993.72,684.064 994.28,684.064 994.839,684.064 995.398,684.064 995.957,684.064 996.517,684.064 997.076,684.064 997.635,684.064 998.194,684.064 998.754,684.064 999.313,684.064 999.872,684.064 1000.43,684.064 1000.99,684.064 1001.55,684.064 1002.11,684.064 1002.67,684.064 1003.23,684.064 1003.79,684.064 1004.35,684.064 1004.91,684.064 1005.46,684.064 1006.02,684.064 1006.58,684.064 1007.14,684.064 1007.7,684.064 1008.26,684.064 1008.82,684.064 1009.38,684.064 1009.94,684.064 1010.5,684.064 1011.06,684.064 1011.62,684.064 1012.18,684.064 1012.73,684.064 1013.29,684.064 1013.85,684.064 1014.41,684.064 1014.97,684.064 1015.53,684.064 1016.09,684.064 1016.65,684.064 1017.21,684.064 1017.77,684.064 1018.33,684.064 1018.89,684.064 1019.45,684.064 1020.01,684.064 1020.56,684.064 1021.12,684.064 1021.68,684.064 1022.24,684.064 1022.8,684.064 1023.36,684.064 1023.92,684.064 1024.48,684.064 1025.04,684.064 1025.6,684.064 1026.16,684.064 1026.72,684.064 1027.28,684.064 1027.83,684.064 1028.39,684.064 1028.95,684.064 1029.51,684.064 1030.07,684.064 1030.63,684.064 1031.19,684.064 1031.75,684.064 1032.31,684.064 1032.87,684.064 1033.43,684.064 1033.99,684.064 1034.55,684.064 1035.1,684.064 1035.66,684.064 1036.22,684.064 1036.78,684.064 1037.34,684.064 1037.9,684.064 1038.46,684.064 1039.02,684.064 1039.58,684.064 1040.14,684.064 1040.7,684.064 1041.26,684.064 1041.82,684.064 1042.38,684.064 1042.93,684.064 1043.49,684.064 1044.05,684.064 1044.61,684.064 1045.17,684.064 1045.73,684.064 1046.29,684.064 1046.85,684.064 1047.41,684.064 1047.97,684.064 1048.53,684.064 1049.09,684.064 1049.65,684.064 1050.2,684.064 1050.76,684.064 1051.32,684.064 1051.88,684.064 1052.44,684.064 1053,684.064 1053.56,684.064 1054.12,684.064 1054.68,684.064 1055.24,684.064 1055.8,684.064 1056.36,684.064 1056.92,684.064 1057.48,684.064 1058.03,684.064 1058.59,684.064 1059.15,684.064 1059.71,684.064 1060.27,684.064 1060.83,684.064 1061.39,684.064 1061.95,684.064 1062.51,684.064 1063.07,684.064 1063.63,684.064 1064.19,684.064 1064.75,684.064 1065.3,684.064 1065.86,684.064 1066.42,684.064 1066.98,684.064 1067.54,684.064 1068.1,684.064 1068.66,684.064 1069.22,684.064 1069.78,684.064 1070.34,684.064 1070.9,684.064 1071.46,684.064 1072.02,684.064 1072.57,684.064 1073.13,684.064 1073.69,684.064 1074.25,684.064 1074.81,684.064 1075.37,684.064 1075.93,684.064 1076.49,684.064 1077.05,684.064 1077.61,684.064 1078.17,684.064 1078.73,684.064 1079.29,684.064 1079.85,684.064 1080.4,684.064 1080.96,684.064 1081.52,684.064 1082.08,684.064 1082.64,684.064 1083.2,684.064 1083.76,684.064 1084.32,684.064 1084.88,684.064 1085.44,684.064 1086,684.064 1086.56,684.064 1087.12,684.064 1087.67,684.064 1088.23,684.064 1088.79,684.064 1089.35,684.064 1089.91,684.064 1090.47,684.064 1091.03,684.064 1091.59,684.064 1092.15,684.064 1092.71,684.064 1093.27,684.064 1093.83,684.064 1094.39,684.064 1094.94,684.064 1095.5,684.064 1096.06,684.064 1096.62,684.064 1097.18,684.064 1097.74,684.064 1098.3,684.064 1098.86,684.064 1099.42,684.064 1099.98,684.064 1100.54,684.064 1101.1,684.064 1101.66,684.064 1102.22,684.064 1102.77,684.064 1103.33,684.064 1103.89,684.064 1104.45,684.064 1105.01,684.064 1105.57,684.064 1106.13,684.064 1106.69,684.064 1107.25,684.064 1107.81,684.064 1108.37,684.064 1108.93,684.064 1109.49,684.064 1110.04,684.064 1110.6,684.064 1111.16,684.064 1111.72,684.064 1112.28,684.064 1112.84,684.064 1113.4,684.064 1113.96,684.064 1114.52,684.064 1115.08,684.064 1115.64,684.064 1116.2,684.064 1116.76,684.064 1117.31,684.064 1117.87,684.064 1118.43,684.064 1118.99,684.064 1119.55,684.064 1120.11,684.064 1120.67,684.064 1121.23,684.064 1121.79,684.064 1122.35,684.064 1122.91,684.064 1123.47,684.064 1124.03,684.064 1124.59,684.064 1125.14,684.064 1125.7,684.064 1126.26,684.064 1126.82,684.064 1127.38,684.064 1127.94,684.064 1128.5,684.064 1129.06,684.064 1129.62,684.064 1130.18,684.064 1130.74,684.064 1131.3,684.064 1131.86,684.064 1132.41,684.064 1132.97,684.064 1133.53,684.064 1134.09,684.064 1134.65,684.064 1135.21,684.064 1135.77,684.064 1136.33,684.064 1136.89,684.064 1137.45,684.064 1138.01,684.064 1138.57,684.064 1139.13,684.064 1139.68,684.064 1140.24,684.064 1140.8,684.064 1141.36,684.064 1141.92,684.064 1142.48,684.064 1143.04,684.064 1143.6,684.064 1144.16,684.064 1144.72,684.064 1145.28,684.064 1145.84,684.064 1146.4,684.064 1146.96,684.064 1147.51,684.064 1148.07,684.064 1148.63,684.064 1149.19,684.064 1149.75,684.064 1150.31,684.064 1150.87,684.064 1151.43,684.064 1151.99,684.064 1152.55,684.064 1153.11,684.064 1153.67,684.064 1154.23,684.064 1154.78,684.064 1155.34,684.064 1155.9,684.064 1156.46,684.064 1157.02,684.064 1157.58,684.064 1158.14,684.064 1158.7,684.064 1159.26,684.064 1159.82,684.064 1160.38,684.064 1160.94,684.064 1161.5,684.064 1162.05,684.064 1162.61,684.064 1163.17,684.064 1163.73,684.064 1164.29,684.064 1164.85,684.064 1165.41,684.064 1165.97,684.064 1166.53,684.064 1167.09,684.064 1167.65,684.064 1168.21,684.064 1168.77,684.064 1169.33,684.064 1169.88,684.064 1170.44,684.064 1171,684.064 1171.56,684.064 1172.12,684.064 1172.68,684.064 1173.24,684.064 1173.8,684.064 1174.36,684.064 1174.92,684.064 1175.48,684.064 1176.04,684.064 1176.6,684.064 1177.15,684.064 1177.71,684.064 1178.27,684.064 1178.83,684.064 1179.39,684.064 1179.95,684.064 1180.51,684.064 1181.07,684.064 1181.63,684.064 1182.19,684.064 1182.75,684.064 1183.31,684.064 1183.87,684.064 1184.43,684.064 1184.98,684.064 1185.54,684.064 1186.1,684.064 1186.66,684.064 1187.22,684.064 1187.78,684.064 1188.34,684.064 1188.9,684.064 1189.46,684.064 1190.02,684.064 1190.58,684.064 1191.14,684.064 1191.7,684.064 1192.25,684.064 1192.81,684.064 1193.37,684.064 1193.93,684.064 1194.49,684.064 1195.05,684.064 1195.61,684.064 1196.17,684.064 1196.73,684.064 1197.29,684.064 1197.85,684.064 1198.41,684.064 1198.97,684.064 1199.52,684.064 1200.08,684.064 1200.64,684.064 1201.2,684.064 1201.76,684.064 1202.32,684.064 1202.88,684.064 1203.44,684.064 1204,684.064 1204.56,684.064 1205.12,684.064 1205.68,684.064 1206.24,684.064 1206.8,684.064 1207.35,684.064 1207.91,684.064 1208.47,684.064 1209.03,684.064 1209.59,684.064 1210.15,684.064 1210.71,684.064 1211.27,684.064 1211.83,684.064 1212.39,684.064 1212.95,684.064 1213.51,684.064 1214.07,684.064 1214.62,684.064 1215.18,684.064 1215.74,684.064 1216.3,684.064 1216.86,684.064 1217.42,684.064 1217.98,684.064 1218.54,684.064 1219.1,684.064 1219.66,684.064 1220.22,684.064 1220.78,684.064 1221.34,684.064 1221.89,684.064 1222.45,684.064 1223.01,684.064 1223.57,684.064 1224.13,684.064 1224.69,684.064 1225.25,684.064 1225.81,684.064 1226.37,684.064 1226.93,684.064 1227.49,684.064 1228.05,684.064 1228.61,684.064 1229.17,684.064 1229.72,684.064 1230.28,684.064 1230.84,684.064 1231.4,684.064 1231.96,684.064 1232.52,684.064 1233.08,684.064 1233.64,684.064 1234.2,684.064 1234.76,684.064 1235.32,684.064 1235.88,684.064 1236.44,684.064 1236.99,684.064 1237.55,684.064 1238.11,684.064 1238.67,684.064 1239.23,684.064 1239.79,684.064 1240.35,684.064 1240.91,684.064 1241.47,684.064 1242.03,684.064 1242.59,684.064 1243.15,684.064 1243.71,684.064 1244.26,684.064 1244.82,684.064 1245.38,684.064 1245.94,684.064 1246.5,684.064 1247.06,684.064 1247.62,684.064 1248.18,684.064 1248.74,684.064 1249.3,684.064 1249.86,684.064 1250.42,684.064 1250.98,684.064 1251.54,684.064 1252.09,684.064 1252.65,684.064 1253.21,684.064 1253.77,684.064 1254.33,684.064 1254.89,684.064 1255.45,684.064 1256.01,684.064 1256.57,684.064 1257.13,684.064 1257.69,684.064 1258.25,684.064 1258.81,684.064 1259.36,684.064 1259.92,684.064 1260.48,684.064 1261.04,684.064 1261.6,684.064 1262.16,684.064 1262.72,684.064 1263.28,684.064 1263.84,684.064 1264.4,684.064 1264.96,684.064 1265.52,684.064 1266.08,684.064 1266.63,684.064 1267.19,684.064 1267.75,684.064 1268.31,684.064 1268.87,684.064 1269.43,684.064 1269.99,684.064 1270.55,684.064 1271.11,684.064 1271.67,684.064 1272.23,684.064 1272.79,684.064 1273.35,684.064 1273.91,684.064 1274.46,684.064 1275.02,684.064 1275.58,684.064 1276.14,684.064 1276.7,684.064 1277.26,684.064 1277.82,684.064 1278.38,684.064 1278.94,684.064 1279.5,684.064 1280.06,684.064 1280.62,684.064 1281.18,684.064 1281.73,684.064 1282.29,684.064 1282.85,684.064 1283.41,684.064 1283.97,684.064 1284.53,684.064 1285.09,684.064 1285.65,684.064 1286.21,684.064 1286.77,684.064 1287.33,684.064 1287.89,684.064 1288.45,684.064 1289,684.064 1289.56,684.064 1290.12,684.064 1290.68,684.064 1291.24,684.064 1291.8,684.064 1292.36,684.064 1292.92,684.064 1293.48,684.064 1294.04,684.064 1294.6,684.064 1295.16,684.064 1295.72,684.064 1296.28,684.064 1296.83,684.064 1297.39,684.064 1297.95,684.064 1298.51,684.064 1299.07,684.064 1299.63,684.064 1300.19,684.064 1300.75,684.064 1301.31,684.064 1301.87,684.064 1302.43,684.064 1302.99,684.064 1303.55,684.064 1304.1,684.064 1304.66,684.064 1305.22,684.064 1305.78,684.064 1306.34,684.064 1306.9,684.064 1307.46,684.064 1308.02,684.064 1308.58,684.064 1309.14,684.064 1309.7,684.064 1310.26,684.064 1310.82,684.064 1311.38,684.064 1311.93,684.064 1312.49,684.064 1313.05,684.064 1313.61,684.064 1314.17,684.064 1314.73,684.064 1315.29,684.064 1315.85,684.064 1316.41,684.064 1316.97,684.064 1317.53,684.064 1318.09,684.064 1318.65,684.064 1319.2,684.064 1319.76,684.064 1320.32,684.064 1320.88,684.064 1321.44,684.064 1322,684.064 1322.56,684.064 1323.12,684.064 1323.68,684.064 1324.24,684.064 1324.8,684.064 1325.36,684.064 1325.92,684.064 1326.47,684.064 1327.03,684.064 1327.59,684.064 1328.15,684.064 1328.71,684.064 1329.27,684.064 1329.83,684.064 1330.39,684.064 1330.95,684.064 1331.51,684.064 1332.07,684.064 1332.63,684.064 1333.19,684.064 1333.75,684.064 1334.3,684.064 1334.86,684.064 1335.42,684.064 1335.98,684.064 1336.54,684.064 1337.1,684.064 1337.66,684.064 1338.22,684.064 1338.78,684.064 1339.34,684.064 1339.9,684.064 1340.46,684.064 1341.02,684.064 1341.57,684.064 1342.13,684.064 1342.69,684.064 1343.25,684.064 1343.81,684.064 1344.37,684.064 1344.93,684.064 1345.49,684.064 1346.05,684.064 1346.61,684.064 1347.17,684.064 1347.73,684.064 1348.29,684.064 1348.84,684.064 1349.4,684.064 1349.96,684.064 1350.52,684.064 1351.08,684.064 1351.64,684.064 1352.2,684.064 1352.76,684.064 1353.32,684.064 1353.88,684.064 1354.44,684.064 1355,684.064 1355.56,684.064 1356.12,684.064 1356.67,684.064 1357.23,684.064 1357.79,684.064 1358.35,684.064 1358.91,684.064 1359.47,684.064 1360.03,684.064 1360.59,684.064 1361.15,684.064 1361.71,684.064 1362.27,684.064 1362.83,684.064 1363.39,684.064 1363.94,684.064 1364.5,684.064 1365.06,684.064 1365.62,684.064 1366.18,684.064 1366.74,684.064 1367.3,684.064 1367.86,684.064 1368.42,684.064 1368.98,684.064 1369.54,684.064 1370.1,684.064 1370.66,684.064 1371.21,684.064 1371.77,684.064 1372.33,684.064 1372.89,684.064 1373.45,684.064 1374.01,684.064 1374.57,684.064 1375.13,684.064 1375.69,684.064 1376.25,684.064 1376.81,684.064 1377.37,684.064 1377.93,684.064 1378.49,684.064 1379.04,684.064 1379.6,684.064 1380.16,684.064 1380.72,684.064 1381.28,684.064 1381.84,684.064 1382.4,684.064 1382.96,684.064 1383.52,684.064 1384.08,684.064 1384.64,684.064 1385.2,684.064 1385.76,684.064 1386.31,684.064 1386.87,684.064 1387.43,684.064 1387.99,684.064 1388.55,684.064 1389.11,684.064 1389.67,684.064 1390.23,684.064 1390.79,684.064 1391.35,684.064 1391.91,684.064 1392.47,684.064 1393.03,684.064 1393.58,684.064 1394.14,684.064 1394.7,684.064 1395.26,684.064 1395.82,684.064 1396.38,684.064 1396.94,684.064 1397.5,684.064 1398.06,684.064 1398.62,684.064 1399.18,684.064 1399.74,684.064 1400.3,684.064 1400.86,684.064 1401.41,684.064 1401.97,684.064 1402.53,684.064 1403.09,684.064 1403.65,684.064 1404.21,684.064 1404.77,684.064 1405.33,684.064 1405.89,684.064 1406.45,684.064 1407.01,684.064 1407.57,684.064 1408.13,684.064 1408.68,684.064 1409.24,684.064 1409.8,684.064 1410.36,684.064 1410.92,684.064 1411.48,684.064 1412.04,684.064 1412.6,684.064 1413.16,684.064 1413.72,684.064 1414.28,684.064 1414.84,684.064 1415.4,684.064 1415.95,684.064 1416.51,684.064 1417.07,684.064 1417.63,684.064 1418.19,684.064 1418.75,684.064 1419.31,684.064 1419.87,684.064 1420.43,684.064 1420.99,684.064 1421.55,684.064 1422.11,684.064 1422.67,684.064 1423.23,684.064 1423.78,684.064 1424.34,684.064 1424.9,684.064 1425.46,684.064 1426.02,684.064 1426.58,684.064 1427.14,684.064 1427.7,684.064 1428.26,684.064 1428.82,684.064 1429.38,684.064 1429.94,684.064 1430.5,684.064 1431.05,684.064 1431.61,684.064 1432.17,684.064 1432.73,684.064 1433.29,684.064 1433.85,684.064 1434.41,684.064 1434.97,684.064 1435.53,684.064 1436.09,684.064 1436.65,684.064 1437.21,684.064 1437.77,684.064 1438.33,684.064 1438.88,684.064 1439.44,684.064 1440,684.064 1440.56,684.064 1441.12,684.064 1441.68,684.064 1442.24,684.064 1442.8,684.064 1443.36,684.064 1443.92,684.064 1444.48,684.064 1445.04,684.064 1445.6,684.064 1446.15,684.064 1446.71,684.064 1447.27,684.064 1447.83,684.064 1448.39,684.064 1448.95,684.064 1449.51,684.064 1450.07,684.064 1450.63,684.064 1451.19,684.064 1451.75,684.064 1452.31,684.064 1452.87,684.064 1453.42,684.064 1453.98,684.064 1454.54,684.064 1455.1,684.064 1455.66,684.064 1456.22,684.064 1456.78,684.064 1457.34,684.064 1457.9,684.064 1458.46,684.064 1459.02,684.064 1459.58,684.064 1460.14,684.064 1460.7,684.064 1461.25,684.064 1461.81,684.064 1462.37,684.064 1462.93,684.064 1463.49,684.064 1464.05,684.064 1464.61,684.064 1465.17,684.064 1465.73,684.064 1466.29,684.064 1466.85,684.064 1467.41,684.064 1467.97,684.064 1468.52,684.064 1469.08,684.064 1469.64,684.064 1470.2,684.064 1470.76,684.064 1471.32,684.064 1471.88,684.064 1472.44,684.064 1473,684.064 1473.56,684.064 1474.12,684.064 1474.68,684.064 1475.24,684.064 1475.79,684.064 1476.35,684.064 1476.91,684.064 1477.47,684.064 1478.03,684.064 1478.59,684.064 1479.15,684.064 1479.71,684.064 1480.27,684.064 1480.83,684.064 1481.39,684.064 1481.95,684.064 1482.51,684.064 1483.07,684.064 1483.62,684.064 1484.18,684.064 1484.74,684.064 1485.3,684.064 1485.86,684.064 1486.42,684.064 1486.98,684.064 1487.54,684.064 1488.1,684.064 1488.66,684.064 1489.22,684.064 1489.78,684.064 1490.34,684.064 1490.89,684.064 1491.45,684.064 1492.01,684.064 1492.57,684.064 1493.13,684.064 1493.69,684.064 1494.25,684.064 1494.81,684.064 1495.37,684.064 1495.93,684.064 1496.49,684.064 1497.05,684.064 1497.61,684.064 1498.16,684.064 1498.72,684.064 1499.28,684.064 1499.84,684.064 1500.4,684.064 1500.96,684.064 1501.52,684.064 1502.08,684.064 1502.64,684.064 1503.2,684.064 1503.76,684.064 1504.32,684.064 1504.88,684.064 1505.44,684.064 1505.99,684.064 1506.55,684.064 1507.11,684.064 1507.67,684.064 1508.23,684.064 1508.79,684.064 1509.35,684.064 1509.91,684.064 1510.47,684.064 1511.03,684.064 1511.59,684.064 1512.15,684.064 1512.71,684.064 1513.26,684.064 1513.82,684.064 1514.38,684.064 1514.94,684.064 1515.5,684.064 1516.06,684.064 1516.62,684.064 1517.18,684.064 1517.74,684.064 1518.3,684.064 1518.86,684.064 1519.42,684.064 1519.98,684.064 1520.53,684.064 1521.09,684.064 1521.65,684.064 1522.21,684.064 1522.77,684.064 1523.33,684.064 1523.89,684.064 1524.45,684.064 1525.01,684.064 1525.57,684.064 1526.13,684.064 1526.69,684.064 1527.25,684.064 1527.81,684.064 1528.36,684.064 1528.92,684.064 1529.48,684.064 1530.04,684.064 1530.6,684.064 1531.16,684.064 1531.72,684.064 1532.28,684.064 1532.84,684.064 1533.4,684.064 1533.96,684.064 1534.52,684.064 1535.08,684.064 1535.63,684.064 1536.19,684.064 1536.75,684.064 1537.31,684.064 1537.87,684.064 1538.43,684.064 1538.99,684.064 1539.55,684.064 1540.11,684.064 1540.67,684.064 1541.23,684.064 1541.79,684.064 1542.35,684.064 1542.9,684.064 1543.46,684.064 1544.02,684.064 1544.58,684.064 1545.14,684.064 1545.7,684.064 1546.26,684.064 1546.82,684.064 1547.38,684.064 1547.94,684.064 1548.5,684.064 1549.06,684.064 1549.62,684.064 1550.18,684.064 1550.73,684.064 1551.29,684.064 1551.85,684.064 1552.41,684.064 1552.97,684.064 1553.53,684.064 1554.09,684.064 1554.65,684.064 1555.21,684.064 1555.77,684.064 1556.33,684.064 1556.89,684.064 1557.45,684.064 1558,684.064 1558.56,684.064 1559.12,684.064 1559.68,684.064 1560.24,684.064 1560.8,684.064 1561.36,684.064 1561.92,684.064 1562.48,684.064 1563.04,684.064 1563.6,684.064 1564.16,684.064 1564.72,684.064 1565.28,684.064 1565.83,684.064 1566.39,684.064 1566.95,684.064 1567.51,684.064 1568.07,684.064 1568.63,684.064 1569.19,684.064 1569.75,684.064 1570.31,684.064 1570.87,684.064 1571.43,684.064 1571.99,684.064 1572.55,684.064 1573.1,684.064 1573.66,684.064 1574.22,684.064 1574.78,684.064 1575.34,684.064 1575.9,684.064 1576.46,684.064 1577.02,684.064 1577.58,684.064 1578.14,684.064 1578.7,684.064 1579.26,684.064 1579.82,684.064 1580.37,684.064 1580.93,684.064 1581.49,684.064 1582.05,684.064 1582.61,684.064 1583.17,684.064 1583.73,684.064 1584.29,684.064 1584.85,684.064 1585.41,684.064 1585.97,684.064 1586.53,684.064 1587.09,684.064 1587.65,684.064 1588.2,684.064 1588.76,684.064 1589.32,684.064 1589.88,684.064 1590.44,684.064 1591,684.064 1591.56,684.064 1592.12,684.064 1592.68,684.064 1593.24,684.064 1593.8,684.064 1594.36,684.064 1594.92,684.064 1595.47,684.064 1596.03,684.064 1596.59,684.064 1597.15,684.064 1597.71,684.064 1598.27,684.064 1598.83,684.064 1599.39,684.064 1599.95,684.064 1600.51,684.064 1601.07,684.064 1601.63,684.064 1602.19,684.064 1602.74,684.064 1603.3,684.064 1603.86,684.064 1604.42,684.064 1604.98,684.064 1605.54,684.064 1606.1,684.064 1606.66,684.064 1607.22,684.064 1607.78,684.064 1608.34,684.064 1608.9,684.064 1609.46,684.064 1610.02,684.064 1610.57,684.064 1611.13,684.064 1611.69,684.064 1612.25,684.064 1612.81,684.064 1613.37,684.064 1613.93,684.064 1614.49,684.064 1615.05,684.064 1615.61,684.064 1616.17,684.064 1616.73,684.064 1617.29,684.064 1617.84,684.064 1618.4,684.064 1618.96,684.064 1619.52,684.064 1620.08,684.064 1620.64,684.064 1621.2,684.064 1621.76,684.064 1622.32,684.064 1622.88,684.064 1623.44,684.064 1624,684.064 1624.56,684.064 1625.11,684.064 1625.67,684.064 1626.23,684.064 1626.79,684.064 1627.35,684.064 1627.91,684.064 1628.47,684.064 1629.03,684.064 1629.59,684.064 1630.15,684.064 1630.71,684.064 1631.27,684.064 1631.83,684.064 1632.39,684.064 1632.94,684.064 1633.5,684.064 1634.06,684.064 1634.62,684.064 1635.18,684.064 1635.74,684.064 1636.3,684.064 1636.86,684.064 1637.42,684.064 1637.98,684.064 1638.54,684.064 1639.1,684.064 1639.66,684.064 1640.21,684.064 1640.77,684.064 1641.33,684.064 1641.89,684.064 1642.45,684.064 1643.01,684.064 1643.57,684.064 1644.13,684.064 1644.69,684.064 1645.25,684.064 1645.81,684.064 1646.37,684.064 1646.93,684.064 1647.48,684.064 1648.04,684.064 1648.6,684.064 1649.16,684.064 1649.72,684.064 1650.28,684.064 1650.84,684.064 1651.4,684.064 1651.96,684.064 1652.52,684.064 1653.08,684.064 1653.64,684.064 1654.2,684.064 1654.76,684.064 1655.31,684.064 1655.87,684.064 1656.43,684.064 1656.99,684.064 1657.55,684.064 1658.11,684.064 1658.67,684.064 1659.23,684.064 1659.79,684.064 1660.35,684.064 1660.91,684.064 1661.47,684.064 1662.03,684.064 1662.58,684.064 1663.14,684.064 1663.7,684.064 1664.26,684.064 1664.82,684.064 1665.38,684.064 1665.94,684.064 1666.5,684.064 1667.06,684.064 1667.62,684.064 1668.18,684.064 1668.74,684.064 1669.3,684.064 1669.85,684.064 1670.41,684.064 1670.97,684.064 1671.53,684.064 1672.09,684.064 1672.65,684.064 1673.21,684.064 1673.77,684.064 1674.33,684.064 1674.89,684.064 1675.45,684.064 1676.01,684.064 1676.57,684.064 1677.13,684.064 1677.68,684.064 1678.24,684.064 1678.8,684.064 1679.36,684.064 1679.92,684.064 1680.48,684.064 1681.04,684.064 1681.6,684.064 1682.16,684.064 1682.72,684.064 1683.28,684.064 1683.84,684.064 1684.4,684.064 1684.95,684.064 1685.51,684.064 1686.07,684.064 1686.63,684.064 1687.19,684.064 1687.75,684.064 1688.31,684.064 1688.87,684.064 1689.43,684.064 1689.99,684.064 1690.55,684.064 1691.11,684.064 1691.67,684.064 1692.23,684.064 1692.78,684.064 1693.34,684.064 1693.9,684.064 1694.46,684.064 1695.02,684.064 1695.58,684.064 1696.14,684.064 1696.7,684.064 1697.26,684.064 1697.82,684.064 1698.38,684.064 1698.94,684.064 1699.5,684.064 1700.05,684.064 1700.61,684.064 1701.17,684.064 1701.73,684.064 1702.29,684.064 1702.85,684.064 1703.41,684.064 1703.97,684.064 1704.53,684.064 1705.09,684.064 1705.65,684.064 1706.21,684.064 1706.77,684.064 1707.32,684.064 1707.88,684.064 1708.44,684.064 1709,684.064 1709.56,684.064 1710.12,684.064 1710.68,684.064 1711.24,684.064 1711.8,684.064 1712.36,684.064 1712.92,684.064 1713.48,684.064 1714.04,684.064 1714.6,684.064 1715.15,684.064 1715.71,684.064 1716.27,684.064 1716.83,684.064 1717.39,684.064 1717.95,684.064 1718.51,684.064 1719.07,684.064 1719.63,684.064 1720.19,684.064 1720.75,684.064 1721.31,684.064 1721.87,684.064 1722.42,684.064 1722.98,684.064 1723.54,684.064 1724.1,684.064 1724.66,684.064 1725.22,684.064 1725.78,684.064 1726.34,684.064 1726.9,684.064 1727.46,684.064 1728.02,684.064 1728.58,684.064 1729.14,684.064 1729.69,684.064 1730.25,684.064 1730.81,684.064 1731.37,684.064 1731.93,684.064 1732.49,684.064 1733.05,684.064 1733.61,684.064 1734.17,684.064 1734.73,684.064 1735.29,684.064 1735.85,684.064 1736.41,684.064 1736.97,684.064 1737.52,684.064 1738.08,684.064 1738.64,684.064 1739.2,684.064 1739.76,684.064 1740.32,684.064 1740.88,684.064 1741.44,684.064 1742,684.064 1742.56,684.064 1743.12,684.064 1743.68,684.064 1744.24,684.064 1744.79,684.064 1745.35,684.064 1745.91,684.064 1746.47,684.064 1747.03,684.064 1747.59,684.064 1748.15,684.064 1748.71,684.064 1749.27,684.064 1749.83,684.064 1750.39,684.064 1750.95,684.064 1751.51,684.064 1752.06,684.064 1752.62,684.064 1753.18,684.064 1753.74,684.064 1754.3,684.064 1754.86,684.064 1755.42,684.064 1755.98,684.064 1756.54,684.064 1757.1,684.064 1757.66,684.064 1758.22,684.064 1758.78,684.064 1759.34,684.064 1759.89,684.064 1760.45,684.064 1761.01,684.064 1761.57,684.064 1762.13,684.064 1762.69,684.064 1763.25,684.064 1763.81,684.064 1764.37,684.064 1764.93,684.064 1765.49,684.064 1766.05,684.064 1766.61,684.064 1767.16,684.064 1767.72,684.064 1768.28,684.064 1768.84,684.064 1769.4,684.064 1769.96,684.064 1770.52,684.064 1771.08,684.064 1771.64,684.064 1772.2,684.064 1772.76,684.064 1773.32,684.064 1773.88,684.064 1774.43,684.064 1774.99,684.064 1775.55,684.064 1776.11,684.064 1776.67,684.064 1777.23,684.064 1777.79,684.064 1778.35,684.064 1778.91,684.064 1779.47,684.064 1780.03,684.064 1780.59,684.064 1781.15,684.064 1781.71,684.064 1782.26,684.064 1782.82,684.064 1783.38,684.064 1783.94,684.064 1784.5,684.064 1785.06,684.064 1785.62,684.064 1786.18,684.064 1786.74,684.064 1787.3,684.064 1787.86,684.064 1788.42,684.064 1788.98,684.064 1789.53,684.064 1790.09,684.064 1790.65,684.064 1791.21,684.064 1791.77,684.064 1792.33,684.064 1792.89,684.064 1793.45,684.064 1794.01,684.064 1794.57,684.064 1795.13,684.064 1795.69,684.064 1796.25,684.064 1796.8,684.064 1797.36,684.064 1797.92,684.064 1798.48,684.064 1799.04,684.064 1799.6,684.064 1800.16,684.064 1800.72,684.064 1801.28,684.064 1801.84,684.064 1802.4,684.064 1802.96,684.064 1803.52,684.064 1804.08,684.064 1804.63,684.064 1805.19,684.064 1805.75,684.064 1806.31,684.064 1806.87,684.064 1807.43,684.064 1807.99,684.064 1808.55,684.064 1809.11,684.064 1809.67,684.064 1810.23,684.064 1810.79,684.064 1811.35,684.064 1811.9,684.064 1812.46,684.064 1813.02,684.064 1813.58,684.064 1814.14,684.064 1814.7,684.064 1815.26,684.064 1815.82,684.064 1816.38,684.064 1816.94,684.064 1817.5,684.064 1818.06,684.064 1818.62,684.064 1819.18,684.064 1819.73,684.064 1820.29,684.064 1820.85,684.064 1821.41,684.064 1821.97,684.064 1822.53,684.064 1823.09,684.064 1823.65,684.064 1824.21,684.064 1824.77,684.064 1825.33,684.064 1825.89,684.064 1826.45,684.064 1827,684.064 1827.56,684.064 1828.12,684.064 1828.68,684.064 1829.24,684.064 1829.8,684.064 1830.36,684.064 1830.92,684.064 1831.48,684.064 1832.04,684.064 1832.6,684.064 1833.16,684.064 1833.72,684.064 1834.27,684.064 1834.83,684.064 1835.39,684.064 1835.95,684.064 1836.51,684.064 1837.07,684.064 1837.63,684.064 1838.19,684.064 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ¬± $(se.err)\n    Projected Energy: $(v.val) ¬± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.035134039099238 ¬± 0.01632403482236776\nProjected Energy: -4.017500118670659 ¬± (0.004368844709730091, 0.0044979280579768854)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; Œ± = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-Œ±.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ¬± 0.0029\n  with uncertainty of ¬± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13√ó6 DataFrame\n Row ‚îÇ blocks  mean      std_err      std_err_err  p_cov       mj\n     ‚îÇ Int64   Float64   Float64      Float64      Float64     Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 ‚îÇ   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 ‚îÇ   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 ‚îÇ   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 ‚îÇ    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 ‚îÇ    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 ‚îÇ    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 ‚îÇ     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 ‚îÇ     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 ‚îÇ     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 ‚îÇ      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 ‚îÇ      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 ‚îÇ      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ästd err vs blocking steps‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n               ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n    0.00423501 ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ m test\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ std err\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°†‚¢∫‚†í‚†í‚¢∫‚†Ä‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚°Ü‚£Ä‚†§‚°ó‚†â‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ß‚†§‚†î‚°ó‚†ä‚†â‚°è‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚¢£‚†Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚°á‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ä‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†Ä‚°á‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£¶‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†î‚†í‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†í‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n               ‚îÇ‚†Ä‚†í‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚îÇ\n   -0.00012335 ‚îÇ‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†ß‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚îÇ\n               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n               ‚†Ä0.64‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äk‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä13.36‚†Ä\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; Œ± = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; Œ±=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.œÉ_f using x_by_y_linear. The standard error estimate r.œÉ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.Œ¥_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ¬± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*œÉ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3√ó3 DataFrame\n Row ‚îÇ res      res_l    res_u\n     ‚îÇ Float64  Float64  Float64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282\n   2 ‚îÇ    13.0  1.7282   1.7282\n   3 ‚îÇ    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dœÑ=df.dœÑ[end], skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ‚â• 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dœÑ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dœÑln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dœÑ=df.dœÑ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dœÑ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dœÑ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. dœÑ is the time step and weights a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"‚ü®S‚ü©\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dœÑ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dœÑ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |œà‚ü© and |œï‚ü© is defined as\n\nF(œàœï) = fracœàœï^2œàœàœïœï \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v‚ãÖv == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ‚â• 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:¬±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ¬± 0.029\n  with uncertainty of ¬± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.¬±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; Œ± = 0.01) -> k\nmtest(table::NamedTuple; Œ± = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-Œ± after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, œÉ_f, Œ¥_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nœÉ_f::T: std from linear propagation\nŒ¥_y::T: coefficient of variation for denominator (‚â§ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, Œº, œÉ)\nparticles(samples, Œº::AbstractVector, Œ£::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, œÉ_f, Œ¥_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nœÉ_f standard deviation of f from linear error propagation (normal approximation)\nŒ¥_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(Œº_x,Œº_y,œÉ_x,œÉ_y,œÅ) -> f, œÉ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and D√≠az-Franc√©s, Rubio (2013).\n\nœÉ_f = sqrtfracœÉ_xŒº_y^2 + fracŒº_x œÉ_yŒº_y^2^2 - frac2 œÅ Œº_xŒº_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3√ó7 DataFrame\n Row ‚îÇ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     ‚îÇ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 ‚îÇ    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 ‚îÇ    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1√ó9 DataFrame\n Row ‚îÇ val       val_l      val_u      val_f     val_œÉ_f    val_Œ¥_y    val_k  val_blocks  val_success\n     ‚îÇ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n   1 ‚îÇ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dœÑ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7√ó6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS‚Ä¶</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple‚Ä¶</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.477932</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3886e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0299e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.876e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.342e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.846e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0‚ü©&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.007e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ‚â† basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10√ó10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10√ó10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nŒîE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ŒîE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0‚ü©\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0‚ü©\"\n fs\"|0 1 2 1 0‚ü©\"\n fs\"|1 0 2 0 1‚ü©\"\n fs\"|1 0 1 2 0‚ü©\"\n fs\"|0 0 1 1 2‚ü©\"\n fs\"|0 2 1 0 1‚ü©\"\n fs\"|2 1 1 0 0‚ü©\"\n fs\"|0 2 0 2 0‚ü©\"\n fs\"|1 1 0 1 1‚ü©\"\n fs\"|2 0 0 0 2‚ü©\"\n fs\"|0 0 0 3 1‚ü©\"\n fs\"|3 0 0 1 0‚ü©\"\n fs\"|0 1 0 0 3‚ü©\"\n fs\"|1 3 0 0 0‚ü©\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ          ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ‚ãÖ        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.8       0.4       0.581966  0.4        ‚ãÖ        0.4        0.282843  0.565685   ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ \n   ‚ãÖ        0.4       0.8       0.4       2.81803   0.4        ‚ãÖ          ‚ãÖ        0.565685  0.282843  0.69282    ‚ãÖ        0.69282    ‚ãÖ \n   ‚ãÖ        0.8       0.4        ‚ãÖ        0.4       0.581966  0.4        0.282843  0.565685   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282\n   ‚ãÖ        0.4       0.8       0.4        ‚ãÖ        0.4       2.81803     ‚ãÖ        0.565685  0.282843   ‚ãÖ        0.69282    ‚ãÖ        0.69282\n   ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843   ‚ãÖ        -0.472136  0.8        ‚ãÖ        0.489898   ‚ãÖ         ‚ãÖ        0.489898\n   ‚ãÖ        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ‚ãÖ         ‚ãÖ        0.565685   ‚ãÖ        0.282843   ‚ãÖ        0.282843    ‚ãÖ        0.8       8.47214    ‚ãÖ        0.489898  0.489898   ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ         ‚ãÖ         0.489898  0.489898   ‚ãÖ        1.56393    ‚ãÖ         ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282    ‚ãÖ         ‚ãÖ        0.69282     ‚ãÖ        0.489898  0.489898   ‚ãÖ        6.03607    ‚ãÖ         ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    ‚ãÖ          ‚ãÖ        0.489898  0.489898   ‚ãÖ         ‚ãÖ        6.03607    ‚ãÖ \n   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        0.69282   0.69282    0.489898  0.489898   ‚ãÖ         ‚ãÖ         ‚ãÖ         ‚ãÖ        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14√ó14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ‚âà all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0‚ü©\" => -0.0214153\n  fs\"|2 0 0 0 2‚ü©\" => -0.00237613\n  fs\"|0 0 4 0 0‚ü©\" => -0.980348\n  fs\"|0 0 0 3 1‚ü©\" => 0.00363555\n  fs\"|2 1 1 0 0‚ü©\" => -0.0119687\n  fs\"|1 0 2 0 1‚ü©\" => 0.0768085\n  fs\"|1 3 0 0 0‚ü©\" => 0.00363555\n  fs\"|0 1 2 1 0‚ü©\" => 0.177701\n  fs\"|0 0 1 1 2‚ü©\" => -0.0119687\n  fs\"|3 0 0 1 0‚ü©\" => 0.00195478\n  fs\"|0 2 0 2 0‚ü©\" => -0.0138439\n  fs\"|1 1 0 1 1‚ü©\" => -0.00234782\n  fs\"|0 1 0 0 3‚ü©\" => 0.00195478\n  fs\"|0 2 1 0 1‚ü©\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i œµ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential œµ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleœÉ t_œÉ a^_iœÉ a_jœÉ +\n  frac12sum_iœÉ u_œÉœÉ n_iœÉ (n_iœÉ - 1) +\n  sum_iœÉœÑu_œÉœÑ n_iœÉ n_iœÑ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iœÉd v_œÉd x_di^2 n_iœÉ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C √ó D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k Œ¥_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k œµ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k Œ¥_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines œµ_k =t*dispersion(k)\nhubbard_dispersion: œµ_k = -2t cos(k)\ncontinuum_dispersion: œµ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, Œ∑, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, Œ∑, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i œµ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nŒ∑: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi œµ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nŒ∑s = (): a tuple of aspect ratios for the remaining dimensions (Œ∑_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/Œ∑_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kœÉk^2 n_kœÉ \n    quad + sum_pqkœÉœÉ T_pqk a^_p-kœÉ a^_q+kœÉ a_qœÉ a_pœÉ \n    quad + sum_pqskkœÉœÉ Q_kka^_p-kœÉ a^_q+kœÉ a^_s+k-kœÉ\n                                       a_sœÉ a_qœÉ a_pœÉ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + œâN - v Œ£‚Çñ(a‚Çñ^ + a‚Çñ)\n\nwhere p is the total momentum, p_f = Œ£_k k a‚Çñ^ a‚Çñ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2œÄl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons œâ.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0‚ü©{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M√∑2, M√∑2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M√∑2, M√∑2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1‚ü©\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address Œ± is replaced by frac12(Œ±  Œ±) for even and odd parity, respectively, where Œ±ÃÑ == reverse(Œ±).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1‚ü©\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ‚âà eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ‚âà eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ‚â§ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0‚ü©{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ‚â§ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, œÉ=1, œÑ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_œÉœÑ(d) = frac1M _i n_œÉi (n_œÑi+d - Œ¥_0dŒ¥_œÉœÑ)\n\nFor multicomponent addresses, œÉ and œÑ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|‚áÖ‚ãÖ‚Üì‚Üë‚ü©\")\n2√ó2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)√óSOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s b^_p  b_q a_r Œ¥_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2œÄM a^_s a^_p  a_q a_r Œ¥_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ‚â§ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ‚â§ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iœÉ = hat a^_iœÉ hat a_iœÉ\n\nwhere i is the mode and œÉ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0‚ü©\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0‚ü©\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x‚ãÖ(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1‚ü©\", -3.0)\n (fs\"|2 2 2‚ü©\", -2.449489742783178)\n (fs\"|3 1 2‚ü©\", -2.0)\n (fs\"|4 1 1‚ü©\", -2.8284271247461903)\n (fs\"|4 2 0‚ü©\", -2.0)\n (fs\"|3 3 0‚ü©\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ‚Ä¶.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb‚ãÖ(1:7) == onr(b)‚ãÖ(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w‚ãÖop(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ‚ãÖ A ‚ãÖ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3√ó4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1‚ü©\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1‚ü©\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ‚âà values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3√ó3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0‚ü©\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2√ó2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1‚ü©\" => -0.57735   fs\"|0 1 0‚ü©\" => -0.57735   fs\"|1 0 0‚ü©\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nŒ±mathrmnaddrrangle\n\nReturns the new address naddr and the factor Œ±. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0‚ü©\" => 1\n\njulia> fs\"|0 1 2 0‚ü©\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3‚ü©‚äó|0 1 0‚ü©\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üë‚ü©\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0‚ü©{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0‚ü©{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ‚â§ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4‚ü©\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Œ£_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) √∑ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ‚â§ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|‚ãÖ‚Üë‚Üë‚Üë‚ãÖ‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4‚ü©\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|‚Üë‚Üì‚Üì‚ü©\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3‚ü©{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n‚Üí (nadd, Œ±)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of Œ± is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3‚ü©{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, Œ± = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dœÑ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ after projecting onto projector.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracPŒ®^(n+1)PŒ®^(n)right)-fracŒædœÑlnleft(fracPŒ®^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4, Œ± = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracŒædœÑlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-Œ±)*walkernumber() + Œ±*UniformProjector()‚ãÖœà computed with walkernumber() and UniformProjector(). When Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, Œ∂ = 0.08, Œæ = Œ∂^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)-fracŒædœÑlnleft(fracŒ®_1^n+1Œ®_1^texttargetright)\n\nWhen Œæ = Œ∂^2/4 this corresponds to critical damping with a damping time scale T = 2/Œ∂.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08, Œæ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂ and Œæ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, Œ∂ = 0.08,   Œæ = Œ∂^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dœÑ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\nùêì = 1 + dœÑ(S - ùêá)\n\nwhere ùêá is the hamiltonian and S is the shift.\n\nùêì represents the first order expansion of the exponential evolution operator of the imaginary-time Schr√∂dinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter Œ∂.\n\nS^n+1 = S^n -fracŒ∂dœÑlnleft(fracŒ®_1^n+1Œ®_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, Œ∂ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter Œ∂.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nŒ∂ = 0.08: Damping parameter for the shift update.\nŒæ = Œ∂^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, Œ∂, Œæ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dœÑ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(‚ãÖ,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dœÑ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndœÑ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3‚ü©\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nœÑ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, Œ∂ = 0.08, Œæ = Œ∂^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ‚âà num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0, fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|‚Üì‚Üì‚ãÖ‚Üë‚Üë‚ü©\" => 0.5\n  fs\"|‚ãÖ‚Üë‚áÖ‚Üì‚ãÖ‚ü©\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dœÑ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dœÑ","text":"update_dœÑ(s<:TimeStepStrategy, dœÑ, tnorm) -> new dœÑ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0‚ü©\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    targetwalkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schr√∂dinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Bl√∂te PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schr√∂dinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija ƒåufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. ƒåufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelm√ºller, D. Huber, M. ƒåufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/œÄ^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => 4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => -1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -4.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => -1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => -1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|‚Üë‚Üì‚Üë‚Üì‚ü©\" => 1.0\n  fs\"|‚Üë‚Üë‚Üì‚Üì‚ü©\" => -2.0\n  fs\"|‚Üì‚Üë‚Üì‚Üë‚ü©\" => 1.0\n  fs\"|‚Üì‚Üë‚Üë‚Üì‚ü©\" => 3.0\n  fs\"|‚áÖ‚ãÖ‚ãÖ‚áÖ‚ü©\" => 1.0\n  fs\"|‚Üë‚Üì‚Üì‚Üë‚ü©\" => 3.0\n  fs\"|‚ãÖ‚áÖ‚áÖ‚ãÖ‚ü©\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()‚ãÖv == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is nrows.\n\nUsed in the AllToAll communication strategy.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
