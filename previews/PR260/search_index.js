var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip720\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip721\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip720)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip722\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.21 2211.02,1003.21 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.589 2211.02,745.589 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.967 2211.02,487.967 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.344 2211.02,230.344 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.21 423.181,1003.21 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.589 423.181,745.589 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.967 423.181,487.967 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.344 423.181,230.344 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M290.043 1016.56 L306.363 1016.56 L306.363 1020.49 L284.418 1020.49 L284.418 1016.56 Q287.08 1013.8 291.664 1009.17 Q296.27 1004.52 297.451 1003.18 Q299.696 1000.65 300.576 998.917 Q301.478 997.158 301.478 995.468 Q301.478 992.714 299.534 990.977 Q297.613 989.241 294.511 989.241 Q292.312 989.241 289.858 990.005 Q287.427 990.769 284.65 992.32 L284.65 987.598 Q287.474 986.464 289.927 985.885 Q292.381 985.306 294.418 985.306 Q299.789 985.306 302.983 987.991 Q306.177 990.677 306.177 995.167 Q306.177 997.297 305.367 999.218 Q304.58 1001.12 302.474 1003.71 Q301.895 1004.38 298.793 1007.6 Q295.691 1010.79 290.043 1016.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M316.224 985.931 L334.58 985.931 L334.58 989.866 L320.506 989.866 L320.506 998.338 Q321.524 997.991 322.543 997.829 Q323.562 997.644 324.58 997.644 Q330.367 997.644 333.747 1000.82 Q337.126 1003.99 337.126 1009.4 Q337.126 1014.98 333.654 1018.08 Q330.182 1021.16 323.862 1021.16 Q321.687 1021.16 319.418 1020.79 Q317.173 1020.42 314.765 1019.68 L314.765 1014.98 Q316.849 1016.12 319.071 1016.67 Q321.293 1017.23 323.77 1017.23 Q327.774 1017.23 330.112 1015.12 Q332.45 1013.01 332.45 1009.4 Q332.45 1005.79 330.112 1003.69 Q327.774 1001.58 323.77 1001.58 Q321.895 1001.58 320.02 1002 Q318.168 1002.41 316.224 1003.29 L316.224 985.931 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 989.01 Q352.728 989.01 350.899 992.575 Q349.094 996.116 349.094 1003.25 Q349.094 1010.35 350.899 1013.92 Q352.728 1017.46 356.339 1017.46 Q359.973 1017.46 361.779 1013.92 Q363.608 1010.35 363.608 1003.25 Q363.608 996.116 361.779 992.575 Q359.973 989.01 356.339 989.01 M356.339 985.306 Q362.149 985.306 365.205 989.913 Q368.284 994.496 368.284 1003.25 Q368.284 1011.97 365.205 1016.58 Q362.149 1021.16 356.339 1021.16 Q350.529 1021.16 347.45 1016.58 Q344.395 1011.97 344.395 1003.25 Q344.395 994.496 347.45 989.913 Q350.529 985.306 356.339 985.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M286.062 728.309 L304.418 728.309 L304.418 732.244 L290.344 732.244 L290.344 740.716 Q291.363 740.369 292.381 740.207 Q293.4 740.022 294.418 740.022 Q300.205 740.022 303.585 743.193 Q306.964 746.364 306.964 751.781 Q306.964 757.36 303.492 760.461 Q300.02 763.54 293.701 763.54 Q291.525 763.54 289.256 763.17 Q287.011 762.799 284.603 762.059 L284.603 757.36 Q286.687 758.494 288.909 759.049 Q291.131 759.605 293.608 759.605 Q297.613 759.605 299.951 757.499 Q302.288 755.392 302.288 751.781 Q302.288 748.17 299.951 746.063 Q297.613 743.957 293.608 743.957 Q291.733 743.957 289.858 744.374 Q288.006 744.79 286.062 745.67 L286.062 728.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M326.177 731.388 Q322.566 731.388 320.737 734.952 Q318.932 738.494 318.932 745.624 Q318.932 752.73 320.737 756.295 Q322.566 759.836 326.177 759.836 Q329.811 759.836 331.617 756.295 Q333.446 752.73 333.446 745.624 Q333.446 738.494 331.617 734.952 Q329.811 731.388 326.177 731.388 M326.177 727.684 Q331.987 727.684 335.043 732.29 Q338.122 736.874 338.122 745.624 Q338.122 754.35 335.043 758.957 Q331.987 763.54 326.177 763.54 Q320.367 763.54 317.288 758.957 Q314.233 754.35 314.233 745.624 Q314.233 736.874 317.288 732.29 Q320.367 727.684 326.177 727.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 731.388 Q352.728 731.388 350.899 734.952 Q349.094 738.494 349.094 745.624 Q349.094 752.73 350.899 756.295 Q352.728 759.836 356.339 759.836 Q359.973 759.836 361.779 756.295 Q363.608 752.73 363.608 745.624 Q363.608 738.494 361.779 734.952 Q359.973 731.388 356.339 731.388 M356.339 727.684 Q362.149 727.684 365.205 732.29 Q368.284 736.874 368.284 745.624 Q368.284 754.35 365.205 758.957 Q362.149 763.54 356.339 763.54 Q350.529 763.54 347.45 758.957 Q344.395 754.35 344.395 745.624 Q344.395 736.874 347.45 732.29 Q350.529 727.684 356.339 727.684 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M284.835 470.687 L307.057 470.687 L307.057 472.677 L294.511 505.247 L289.627 505.247 L301.432 474.622 L284.835 474.622 L284.835 470.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M316.224 470.687 L334.58 470.687 L334.58 474.622 L320.506 474.622 L320.506 483.094 Q321.524 482.747 322.543 482.585 Q323.562 482.399 324.58 482.399 Q330.367 482.399 333.747 485.571 Q337.126 488.742 337.126 494.159 Q337.126 499.737 333.654 502.839 Q330.182 505.918 323.862 505.918 Q321.687 505.918 319.418 505.547 Q317.173 505.177 314.765 504.436 L314.765 499.737 Q316.849 500.872 319.071 501.427 Q321.293 501.983 323.77 501.983 Q327.774 501.983 330.112 499.876 Q332.45 497.77 332.45 494.159 Q332.45 490.548 330.112 488.441 Q327.774 486.335 323.77 486.335 Q321.895 486.335 320.02 486.751 Q318.168 487.168 316.224 488.048 L316.224 470.687 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 473.765 Q352.728 473.765 350.899 477.33 Q349.094 480.872 349.094 488.001 Q349.094 495.108 350.899 498.673 Q352.728 502.214 356.339 502.214 Q359.973 502.214 361.779 498.673 Q363.608 495.108 363.608 488.001 Q363.608 480.872 361.779 477.33 Q359.973 473.765 356.339 473.765 M356.339 470.062 Q362.149 470.062 365.205 474.668 Q368.284 479.251 368.284 488.001 Q368.284 496.728 365.205 501.335 Q362.149 505.918 356.339 505.918 Q350.529 505.918 347.45 501.335 Q344.395 496.728 344.395 488.001 Q344.395 479.251 347.45 474.668 Q350.529 470.062 356.339 470.062 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M256.664 243.689 L264.303 243.689 L264.303 217.323 L255.992 218.99 L255.992 214.731 L264.256 213.064 L268.932 213.064 L268.932 243.689 L276.571 243.689 L276.571 247.624 L256.664 247.624 L256.664 243.689 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M296.015 216.143 Q292.404 216.143 290.576 219.708 Q288.77 223.249 288.77 230.379 Q288.77 237.485 290.576 241.05 Q292.404 244.592 296.015 244.592 Q299.65 244.592 301.455 241.05 Q303.284 237.485 303.284 230.379 Q303.284 223.249 301.455 219.708 Q299.65 216.143 296.015 216.143 M296.015 212.439 Q301.826 212.439 304.881 217.046 Q307.96 221.629 307.96 230.379 Q307.96 239.106 304.881 243.712 Q301.826 248.296 296.015 248.296 Q290.205 248.296 287.127 243.712 Q284.071 239.106 284.071 230.379 Q284.071 221.629 287.127 217.046 Q290.205 212.439 296.015 212.439 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M326.177 216.143 Q322.566 216.143 320.737 219.708 Q318.932 223.249 318.932 230.379 Q318.932 237.485 320.737 241.05 Q322.566 244.592 326.177 244.592 Q329.811 244.592 331.617 241.05 Q333.446 237.485 333.446 230.379 Q333.446 223.249 331.617 219.708 Q329.811 216.143 326.177 216.143 M326.177 212.439 Q331.987 212.439 335.043 217.046 Q338.122 221.629 338.122 230.379 Q338.122 239.106 335.043 243.712 Q331.987 248.296 326.177 248.296 Q320.367 248.296 317.288 243.712 Q314.233 239.106 314.233 230.379 Q314.233 221.629 317.288 217.046 Q320.367 212.439 326.177 212.439 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M356.339 216.143 Q352.728 216.143 350.899 219.708 Q349.094 223.249 349.094 230.379 Q349.094 237.485 350.899 241.05 Q352.728 244.592 356.339 244.592 Q359.973 244.592 361.779 241.05 Q363.608 237.485 363.608 230.379 Q363.608 223.249 361.779 219.708 Q359.973 216.143 356.339 216.143 M356.339 212.439 Q362.149 212.439 365.205 217.046 Q368.284 221.629 368.284 230.379 Q368.284 239.106 365.205 243.712 Q362.149 248.296 356.339 248.296 Q350.529 248.296 347.45 243.712 Q344.395 239.106 344.395 230.379 Q344.395 221.629 347.45 217.046 Q350.529 212.439 356.339 212.439 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip722)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.344 4017.76,230.344 \"/>\n<polyline clip-path=\"url(#clip722)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.1 457.691,1248.89 458.259,1248.6 458.828,1248.25 459.396,1246.72 459.964,1246.27 460.533,1245.63 461.101,1245 461.669,1243.25 462.238,1241.46 462.806,1240.63 463.375,1239.72 463.943,1238.7 464.511,1237.59 465.08,1235.31 465.648,1234 466.216,1232.56 466.785,1231.01 467.353,1229.33 467.921,1227.49 468.49,1225.53 469.058,1222.38 469.626,1219.06 470.195,1216.59 470.763,1214.01 471.331,1210.23 471.9,1207.31 472.468,1204.18 473.036,1200.89 473.605,1197.37 474.173,1193.69 474.741,1188.74 475.31,1184.7 475.878,1178.32 476.446,1173.86 477.015,1169.22 477.583,1164.36 478.152,1158.2 478.72,1152.82 479.288,1147.2 479.857,1141.27 480.425,1135.22 480.993,1127.93 481.562,1120.31 482.13,1112.48 482.698,1104.36 483.267,1097.2 483.835,1087.7 484.403,1076.91 484.972,1068.24 485.54,1059.44 486.108,1051.34 486.677,1042.06 487.245,1031.58 487.813,1020.92 488.382,1012.35 488.95,1002.53 489.518,991.492 490.087,982.473 490.655,972.333 491.224,963.172 491.792,950.636 492.36,941.246 492.929,929.644 493.497,919.089 494.065,904.321 494.634,893.935 495.202,881.413 495.77,871.077 496.339,859.705 496.907,847.398 497.475,838.105 498.044,828.833 498.612,819.453 499.18,810.072 499.749,800.713 500.317,790.424 500.885,781.113 501.454,769.9 502.022,758.65 502.59,747.397 503.159,737.327 503.727,728.272 504.295,718.438 504.864,707.525 505.432,698.716 506.001,686.957 506.569,677.453 507.137,667.824 507.706,658.315 508.274,650.977 508.842,642.709 509.411,630.404 509.979,622.423 510.547,613.523 511.116,605.781 511.684,595.194 512.252,586.843 512.821,578.574 513.389,570.136 513.957,560.082 514.526,551.245 515.094,544.693 515.662,533.94 516.231,526.77 516.799,518.625 517.367,510.527 517.936,503.722 518.504,497.175 519.072,490.727 519.641,484.497 520.209,479.092 520.778,474.079 521.346,468.113 521.914,460.142 522.483,455.494 523.051,450.868 523.619,445.375 524.188,437.857 524.756,433.863 525.324,428.827 525.893,423.907 526.461,417.965 527.029,413.252 527.598,408.793 528.166,405.36 528.734,402.273 529.303,397.044 529.871,391.899 530.439,387.977 531.008,384.923 531.576,378.873 532.144,374.352 532.713,371.753 533.281,367.162 533.85,365.114 534.418,360.797 534.986,357.709 535.555,356.666 536.123,353.549 536.691,351.487 537.26,348.44 537.828,345.458 538.396,343.379 538.965,341.478 539.533,338.421 540.101,335.517 540.67,332.578 541.238,329.683 541.806,328.041 542.375,326.39 542.943,322.561 543.511,321.175 544.08,317.465 544.648,317.164 545.216,313.809 545.785,311.525 546.353,310.296 546.921,310.225 547.49,307.854 548.058,306.538 548.627,304.379 549.195,304.2 549.763,302.85 550.332,299.724 550.9,298.768 551.468,297.707 552.037,296.78 552.605,295.853 553.173,293.925 553.742,292.023 554.31,289.132 554.878,286.4 555.447,286.683 556.015,283.686 556.583,282.167 557.152,280.513 557.72,280.238 558.288,277.663 558.857,276.444 559.425,275.977 559.993,272.547 560.562,273.345 561.13,271.91 561.698,268.804 562.267,265.791 562.835,267.047 563.404,265.925 563.972,265.015 564.54,264.005 565.109,263.155 565.677,262.328 566.245,262.373 566.814,262.551 567.382,260.576 567.95,258.578 568.519,259.072 569.087,259.282 569.655,261.621 570.224,262.749 570.792,260.465 571.36,259.334 571.929,260.592 572.497,260.761 573.065,259.735 573.634,258.73 574.202,256.775 574.77,258.102 575.339,256.093 575.907,255.101 576.476,254.338 577.044,252.507 577.612,249.723 578.181,250.436 578.749,248.915 579.317,249.365 579.886,248.684 580.454,245.979 581.022,246.699 581.591,248.316 582.159,248.985 582.727,249.381 583.296,249.701 583.864,250.942 584.432,250.071 585.001,252.353 585.569,253.309 586.137,254.434 586.706,254.467 587.274,254.036 587.842,252.671 588.411,251.634 588.979,253.591 589.547,253.477 590.116,253.411 590.684,253.029 591.253,252.566 591.821,251.316 592.389,249.986 592.958,250.027 593.526,249.854 594.094,250.775 594.663,248.906 595.231,246.918 595.799,247.948 596.368,250.082 596.936,248.858 597.504,246.749 598.073,241.591 598.641,242.037 599.209,242.332 599.778,242.755 600.346,243.015 600.914,242.316 601.483,242.429 602.051,242.57 602.619,241.871 603.188,242.38 603.756,243.596 604.325,242.818 604.893,245.079 605.461,244.073 606.03,242.055 606.598,241.178 607.166,241.496 607.735,240.861 608.303,241.158 608.871,243.603 609.44,243.372 610.008,240.221 610.576,238.309 611.145,235.73 611.713,236.222 612.281,236.637 612.85,236.154 613.418,236.72 613.986,238.046 614.555,237.373 615.123,237.828 615.691,237.392 616.26,236.693 616.828,237.277 617.396,236.779 617.965,238.396 618.533,239.868 619.102,236.997 619.67,238.334 620.238,239.803 620.807,241.351 621.375,241.368 621.943,240.411 622.512,238.366 623.08,238.734 623.648,236.88 624.217,239.334 624.785,237.545 625.353,236.79 625.922,237.44 626.49,237.771 627.058,240.086 627.627,239.32 628.195,238.47 628.763,237.879 629.332,237.757 629.9,236.764 630.468,241.385 631.037,240.578 631.605,241.455 632.173,241.499 632.742,242.525 633.31,242.349 633.879,242.138 634.447,240.945 635.015,236.791 635.584,237.97 636.152,243.241 636.72,242.948 637.289,240.647 637.857,240.474 638.425,241.597 638.994,240.369 639.562,239.233 640.13,237.076 640.699,237.133 641.267,237.258 641.835,238.362 642.404,237.524 642.972,238.689 643.54,237.616 644.109,236.647 644.677,234.713 645.245,234.982 645.814,236.11 646.382,236.38 646.951,235.557 647.519,232.732 648.087,233.049 648.656,232.298 649.224,232.706 649.792,235.331 650.361,236.548 650.929,238.67 651.497,236.547 652.066,236.737 652.634,236.868 653.202,238.105 653.771,239.057 654.339,239.118 654.907,236.92 655.476,237.919 656.044,234.743 656.612,234.925 657.181,238.246 657.749,238.254 658.317,237.966 658.886,241.03 659.454,240.564 660.022,239.193 660.591,238.982 661.159,239.038 661.728,237.61 662.296,236.68 662.864,236.711 663.433,239.595 664.001,239.41 664.569,239.092 665.138,237.853 665.706,235.792 666.274,237.032 666.843,236.872 667.411,237.917 667.979,237.668 668.548,236.465 669.116,234.371 669.684,235.446 670.253,231.409 670.821,231.663 671.389,232.042 671.958,232.303 672.526,232.647 673.094,234.96 673.663,232.873 674.231,233.208 674.799,233.296 675.368,233.759 675.936,234.756 676.505,232.789 677.073,232.79 677.641,232.894 678.21,232.257 678.778,232.683 679.346,234.16 679.915,233.278 680.483,232.49 681.051,234.676 681.62,237.744 682.188,235.4 682.756,236.603 683.325,236.566 683.893,234.367 684.461,234.618 685.03,233.619 685.598,231.646 686.166,230.861 686.735,231.105 687.303,233.373 687.871,233.568 688.44,233.481 689.008,233.671 689.577,231.622 690.145,232.987 690.713,234.206 691.282,235.387 691.85,235.265 692.418,235.042 692.987,235.891 693.555,238.966 694.123,236.561 694.692,236.281 695.26,235.384 695.828,237.539 696.397,236.332 696.965,236.191 697.533,235.147 698.102,233.965 698.67,234.823 699.238,234.65 699.807,232.615 700.375,230.769 700.943,231.875 701.512,232.189 702.08,232.414 702.648,234.716 703.217,232.63 703.785,232.805 704.354,231.964 704.922,231.128 705.49,230.411 706.059,230.562 706.627,227.698 707.195,228.209 707.764,230.644 708.332,230.851 708.9,230.123 709.469,232.618 710.037,231.505 710.605,231.788 711.174,230.997 711.742,232.308 712.31,232.607 712.879,233.886 713.447,236.23 714.015,236.015 714.584,235.042 715.152,235.002 715.72,233.791 716.289,234.732 716.857,235.659 717.425,235.703 717.994,235.581 718.562,234.609 719.131,234.61 719.699,235.806 720.267,236.798 720.836,237.586 721.404,238.411 721.972,236.967 722.541,235.691 723.109,235.563 723.677,236.444 724.246,235.181 724.814,236.049 725.382,235.735 725.951,237.696 726.519,238.589 727.087,237.208 727.656,236.708 728.224,237.461 728.792,234.898 729.361,232.629 729.929,233.674 730.497,232.413 731.066,231.599 731.634,231.563 732.203,228.629 732.771,225.732 733.339,227.12 733.908,227.635 734.476,226.212 735.044,226.678 735.613,227.042 736.181,227.388 736.749,226.535 737.318,227.027 737.886,227.509 738.454,228.765 739.023,229.146 739.591,231.575 740.159,231.736 740.728,233.885 741.296,232.799 741.864,233.718 742.433,232.753 743.001,233.534 743.569,233.64 744.138,231.475 744.706,232.574 745.274,232.444 745.843,233.421 746.411,233.228 746.98,236.241 747.548,236.038 748.116,235.851 748.685,235.472 749.253,235.438 749.821,235.958 750.39,235.77 750.958,233.656 751.526,232.561 752.095,232.43 752.663,228.215 753.231,228.358 753.8,227.5 754.368,227.646 754.936,226.844 755.505,227.107 756.073,227.454 756.641,227.869 757.21,228.123 757.778,229.657 758.346,229.018 758.915,229.389 759.483,230.744 760.052,230.673 760.62,229.82 761.188,228.957 761.757,229.013 762.325,230.191 762.893,231.393 763.462,231.561 764.03,230.567 764.598,231.94 765.167,233.908 765.735,231.602 766.303,231.593 766.872,231.574 767.44,231.7 768.008,230.623 768.577,231.862 769.145,232.08 769.713,232.151 770.282,233.059 770.85,232.04 771.418,231.108 771.987,230.052 772.555,231.048 773.123,232.109 773.692,232.238 774.26,231.391 774.829,231.666 775.397,236.022 775.965,233.652 776.534,233.502 777.102,233.506 777.67,233.116 778.239,237.18 778.807,236.76 779.375,237.312 779.944,236.952 780.512,236.726 781.08,235.131 781.649,233.885 782.217,232.897 782.785,232.809 783.354,232.689 783.922,233.464 784.49,233.464 785.059,233.324 785.627,234.167 786.195,234.135 786.764,234.943 787.332,235.626 787.9,235.322 788.469,235.092 789.037,234.789 789.606,234.74 790.174,235.378 790.742,236.352 791.311,234.98 791.879,234.462 792.447,234.185 793.016,233.944 793.584,231.581 794.152,231.481 794.721,230.42 795.289,232.309 795.857,231.965 796.426,231.644 796.994,231.457 797.562,232.418 798.131,234.204 798.699,232.078 799.267,229.849 799.836,227.666 800.404,228.06 800.972,227.236 801.541,226.427 802.109,226.521 802.678,227.917 803.246,226.01 803.814,226.473 804.383,226.747 804.951,226.071 805.519,225.301 806.088,226.841 806.656,226.17 807.224,227.83 807.793,227.939 808.361,229.28 808.929,230.678 809.498,230.695 810.066,229.751 810.634,229.806 811.203,229.713 811.771,230.719 812.339,228.617 812.908,226.704 813.476,228.282 814.044,225.648 814.613,229.331 815.181,230.45 815.749,231.562 816.318,231.659 816.886,230.602 817.455,228.739 818.023,231.006 818.591,233.357 819.16,232.255 819.728,232.194 820.296,232.021 820.865,232.978 821.433,231.594 822.001,231.575 822.57,231.397 823.138,229.437 823.706,229.751 824.275,231.051 824.843,231.082 825.411,227.034 825.98,226.336 826.548,225.646 827.116,226.995 827.685,228.633 828.253,228.993 828.821,229.434 829.39,229.673 829.958,228.785 830.526,229.953 831.095,230.153 831.663,230.267 832.232,230.312 832.8,230.501 833.368,230.646 833.937,231.865 834.505,229.77 835.073,231.928 835.642,231.896 836.21,228.959 836.778,229.264 837.347,230.547 837.915,229.66 838.483,229.908 839.052,230.238 839.62,230.325 840.188,229.295 840.757,229.511 841.325,231.793 841.893,230.756 842.462,231.895 843.03,231.994 843.598,230.945 844.167,231.171 844.735,230.157 845.304,227.023 845.872,227.345 846.44,225.604 847.009,225.151 847.577,225.55 848.145,226.316 848.714,223.65 849.282,223.259 849.85,221.997 850.419,221.666 850.987,224.395 851.555,224.988 852.124,227.56 852.692,229.03 853.26,230.31 853.829,229.34 854.397,229.6 854.965,228.811 855.534,233.238 856.102,235.104 856.67,234.962 857.239,234.852 857.807,234.809 858.375,234.567 858.944,236.578 859.512,236.445 860.081,234.107 860.649,233.034 861.217,235.33 861.786,232.025 862.354,233.032 862.922,231.948 863.491,232.99 864.059,231.852 864.627,236.068 865.196,236.974 865.764,236.658 866.332,239.45 866.901,236.007 867.469,235.976 868.037,234.553 868.606,233.258 869.174,237.253 869.742,237.736 870.311,237.447 870.879,238.159 871.447,239.598 872.016,239.057 872.584,237.365 873.152,236.874 873.721,236.404 874.289,233.926 874.858,233.643 875.426,232.215 875.994,231.056 876.563,231.106 877.131,233.22 877.699,233.117 878.268,229.889 878.836,229.697 879.404,228.807 879.973,229.198 880.541,227.184 881.109,228.631 881.678,227.89 882.246,228.286 882.814,228.598 883.383,227.791 883.951,230.053 884.519,231.086 885.088,232.945 885.656,233.058 886.224,232.821 886.793,232.747 887.361,232.495 887.93,234.31 888.498,233.197 889.066,232.908 889.635,233.693 890.203,232.212 890.771,234.078 891.34,232.749 891.908,235.685 892.476,236.395 893.045,237.025 893.613,237.428 894.181,236.831 894.75,236.246 895.318,234.685 895.886,232.398 896.455,231.019 897.023,229.107 897.591,227.918 898.16,230.111 898.728,229.113 899.296,227.959 899.865,226.13 900.433,225.496 901.001,224.799 901.57,223.94 902.138,225.521 902.707,225.968 903.275,226.331 903.843,226.462 904.412,227.721 904.98,228.737 905.548,227.591 906.117,226.549 906.685,227.112 907.253,227.435 907.822,226.558 908.39,228.162 908.958,227.489 909.527,227.616 910.095,226.802 910.663,228.43 911.232,227.73 911.8,226.892 912.368,227.386 912.937,225.691 913.505,225.227 914.073,225.851 914.642,226.258 915.21,226.579 915.779,228.003 916.347,227.024 916.915,227.418 917.484,226.789 918.052,228.004 918.62,228.328 919.189,227.5 919.757,226.723 920.325,224.017 920.894,224.61 921.462,225.143 922.03,224.89 922.599,225.799 923.167,225.567 923.735,221.953 924.304,223.747 924.872,224.578 925.44,228.456 926.009,230.466 926.577,232.743 927.145,232.867 927.714,234.076 928.282,236.067 928.85,238.027 929.419,239.44 929.987,239.08 930.556,236.645 931.124,237.208 931.692,236.793 932.261,232.501 932.829,232.524 933.397,231.68 933.966,234.05 934.534,233.73 935.102,232.717 935.671,232.553 936.239,232.407 936.807,234.324 937.376,235.23 937.944,235.144 938.512,230.946 939.081,229.93 939.649,229.978 940.217,230.857 940.786,231.793 941.354,232.728 941.922,230.58 942.491,231.509 943.059,230.258 943.627,230.396 944.196,231.548 944.764,230.552 945.333,233.027 945.901,235.054 946.469,234.667 947.038,233.456 947.606,231.391 948.174,229.334 948.743,229.653 949.311,228.757 949.879,231.103 950.448,228.123 951.016,229.495 951.584,227.551 952.153,228.805 952.721,229.975 953.289,230.07 953.858,233.205 954.426,234.898 954.994,233.665 955.563,233.529 956.131,232.308 956.699,231.177 957.268,233.263 957.836,232.004 958.405,229.862 958.973,229.919 959.541,233.146 960.11,234.044 960.678,238.155 961.246,238.423 961.815,237.933 962.383,235.417 962.951,235.274 963.52,235.926 964.088,234.557 964.656,234.27 965.225,235.091 965.793,235.036 966.361,234.47 966.93,233.261 967.498,233.068 968.066,233.01 968.635,234.903 969.203,234.614 969.771,232.328 970.34,232.193 970.908,231.988 971.476,231.902 972.045,229.936 972.613,229.957 973.182,231.054 973.75,231.898 974.318,229.786 974.887,230.872 975.455,232.842 976.023,233.63 976.592,234.479 977.16,235.035 977.728,234.541 978.297,233.088 978.865,232.815 979.433,232.562 980.002,231.278 980.57,231.167 981.138,233.081 981.707,232.849 982.275,233.526 982.843,233.083 983.412,233.123 983.98,232.027 984.548,233.851 985.117,233.564 985.685,232.252 986.253,234.038 986.822,232.586 987.39,231.246 987.959,230.893 988.527,230.726 989.095,230.705 989.664,230.55 990.232,230.21 990.8,232.242 991.369,234.173 991.937,238.182 992.505,238.545 993.074,238.848 993.642,238.078 994.21,236.403 994.779,235.828 995.347,236.337 995.915,235.785 996.484,234.181 997.052,233.864 997.62,233.592 998.189,232.231 998.757,231.971 999.325,231.884 999.894,232.634 1000.46,230.389 1001.03,229.089 1001.6,227.826 1002.17,226.813 1002.74,226.619 1003.3,227.731 1003.87,225.533 1004.44,227.74 1005.01,228.687 1005.58,229.7 1006.15,225.665 1006.71,223.742 1007.28,224.026 1007.85,223.413 1008.42,223.955 1008.99,223.371 1009.56,225.192 1010.12,227.66 1010.69,227.892 1011.26,226.982 1011.83,226.189 1012.4,225.423 1012.97,225.768 1013.53,227.942 1014.1,232.073 1014.67,230.935 1015.24,230.811 1015.81,230.925 1016.38,229.947 1016.94,230.964 1017.51,230.874 1018.08,229.881 1018.65,228.959 1019.22,228.983 1019.79,227.225 1020.35,228.509 1020.92,227.517 1021.49,228.406 1022.06,229.534 1022.63,227.472 1023.2,227.805 1023.76,229.168 1024.33,228.148 1024.9,227.27 1025.47,228.475 1026.04,228.622 1026.61,228.725 1027.17,227.81 1027.74,228.998 1028.31,229.131 1028.88,230.219 1029.45,230.194 1030.02,231.116 1030.58,229.996 1031.15,227.836 1031.72,226.72 1032.29,227.088 1032.86,228.328 1033.43,228.612 1033.99,226.753 1034.56,227.138 1035.13,227.262 1035.7,227.418 1036.27,226.746 1036.84,227.117 1037.4,228.31 1037.97,228.31 1038.54,229.651 1039.11,232.822 1039.68,234.674 1040.25,235.442 1040.81,234.07 1041.38,233.809 1041.95,234.54 1042.52,234.362 1043.09,234.17 1043.66,231.647 1044.22,231.651 1044.79,235.619 1045.36,232.08 1045.93,229.837 1046.5,229.858 1047.07,230.804 1047.63,230.819 1048.2,229.607 1048.77,229.572 1049.34,229.449 1049.91,228.605 1050.48,229.676 1051.05,228.819 1051.61,227.791 1052.18,226.89 1052.75,227.082 1053.32,228.274 1053.89,226.421 1054.46,228.009 1055.02,228.109 1055.59,228.112 1056.16,227.378 1056.73,227.595 1057.3,228.846 1057.87,227.984 1058.43,228.122 1059,226.252 1059.57,225.673 1060.14,226.135 1060.71,225.428 1061.28,222.649 1061.84,226.453 1062.41,227.672 1062.98,227.853 1063.55,228.085 1064.12,227.345 1064.69,225.603 1065.25,227.853 1065.82,227.308 1066.39,229.68 1066.96,231.932 1067.53,232.064 1068.1,231.952 1068.66,235.137 1069.23,235.007 1069.8,233.636 1070.37,232.334 1070.94,235.217 1071.51,230.681 1072.07,232.842 1072.64,232.454 1073.21,231.222 1073.78,231.16 1074.35,232.084 1074.92,230.99 1075.48,232.199 1076.05,231.176 1076.62,230.988 1077.19,230.901 1077.76,229.972 1078.33,230.126 1078.89,230.273 1079.46,229.218 1080.03,225.291 1080.6,225.537 1081.17,226.079 1081.74,227.385 1082.3,227.84 1082.87,228.259 1083.44,226.216 1084.01,227.508 1084.58,228.627 1085.15,230.936 1085.71,231.931 1086.28,234.242 1086.85,232.042 1087.42,231.163 1087.99,230.066 1088.56,230.214 1089.12,229.159 1089.69,229.151 1090.26,229.287 1090.83,228.231 1091.4,228.485 1091.97,228.521 1092.53,227.919 1093.1,228.033 1093.67,228.242 1094.24,228.429 1094.81,230.759 1095.38,227.817 1095.94,226.974 1096.51,227.115 1097.08,226.214 1097.65,225.724 1098.22,224.183 1098.79,224.683 1099.35,223.006 1099.92,225.649 1100.49,225.982 1101.06,224.482 1101.63,221.82 1102.2,221.698 1102.76,222.608 1103.33,225.503 1103.9,226.942 1104.47,228.564 1105.04,227.897 1105.61,226.259 1106.17,228.004 1106.74,229.469 1107.31,228.782 1107.88,229.265 1108.45,231.469 1109.02,233.556 1109.58,233.568 1110.15,235.796 1110.72,236.698 1111.29,236.532 1111.86,237.213 1112.43,237.975 1112.99,236.49 1113.56,235.187 1114.13,237.167 1114.7,239.775 1115.27,237.093 1115.84,234.539 1116.4,234.378 1116.97,231.023 1117.54,230.057 1118.11,229.301 1118.68,232.421 1119.25,233.23 1119.81,233.035 1120.38,233.992 1120.95,233.011 1121.52,234.766 1122.09,234.563 1122.66,236.289 1123.23,238.888 1123.79,238.159 1124.36,238.634 1124.93,239.116 1125.5,238.716 1126.07,239.032 1126.64,239.518 1127.2,239.98 1127.77,239.218 1128.34,239.714 1128.91,239.214 1129.48,238.341 1130.05,236.585 1130.61,237.079 1131.18,236.306 1131.75,235.752 1132.32,234.223 1132.89,233.9 1133.46,234.716 1134.02,232.217 1134.59,229.165 1135.16,229.131 1135.73,231.382 1136.3,233.179 1136.87,231.825 1137.43,228.43 1138,229.489 1138.57,229.389 1139.14,229.225 1139.71,229.286 1140.28,228.363 1140.84,228.629 1141.41,229.767 1141.98,228.784 1142.55,228.897 1143.12,230.778 1143.69,231.746 1144.25,234.742 1144.82,231.123 1145.39,230.724 1145.96,229.52 1146.53,229.549 1147.1,228.32 1147.66,231.532 1148.23,231.432 1148.8,231.198 1149.37,231.129 1149.94,231.055 1150.51,231.034 1151.07,230.785 1151.64,229.717 1152.21,230.653 1152.78,228.558 1153.35,226.327 1153.92,226.461 1154.48,225.931 1155.05,227.303 1155.62,228.434 1156.19,228.604 1156.76,227.559 1157.33,227.48 1157.89,226.449 1158.46,225.472 1159.03,225.841 1159.6,226.022 1160.17,227.236 1160.74,228.486 1161.3,228.131 1161.87,228.153 1162.44,228.333 1163.01,228.618 1163.58,227.708 1164.15,226.986 1164.71,228.154 1165.28,229.426 1165.85,229.659 1166.42,229.761 1166.99,229.706 1167.56,228.782 1168.12,227.836 1168.69,228.863 1169.26,226.952 1169.83,227.147 1170.4,227.32 1170.97,227.637 1171.53,228.066 1172.1,229.243 1172.67,231.32 1173.24,233.442 1173.81,233.449 1174.38,233.082 1174.94,231.832 1175.51,233.731 1176.08,233.524 1176.65,232.317 1177.22,232.261 1177.79,232.198 1178.35,233.172 1178.92,234.134 1179.49,231.583 1180.06,229.398 1180.63,229.534 1181.2,229.379 1181.76,229.289 1182.33,230.328 1182.9,229.204 1183.47,229.315 1184.04,230.54 1184.61,230.379 1185.17,229.289 1185.74,230.41 1186.31,231.487 1186.88,231.355 1187.45,230.173 1188.02,231.306 1188.58,230.471 1189.15,229.347 1189.72,229.508 1190.29,229.803 1190.86,226.698 1191.43,227.03 1192,228.997 1192.56,229.204 1193.13,231.398 1193.7,232.43 1194.27,231.261 1194.84,229.321 1195.41,229.461 1195.97,229.437 1196.54,228.697 1197.11,229.959 1197.68,231.174 1198.25,231.338 1198.82,230.29 1199.38,231.222 1199.95,230.21 1200.52,229.289 1201.09,230.326 1201.66,231.231 1202.23,230.173 1202.79,227.273 1203.36,227.456 1203.93,228.697 1204.5,225.739 1205.07,226.035 1205.64,226.62 1206.2,225.31 1206.77,225.704 1207.34,226.161 1207.91,226.159 1208.48,227.446 1209.05,227.693 1209.61,227.937 1210.18,230.199 1210.75,230.359 1211.32,229.217 1211.89,231.175 1212.46,231.406 1213.02,231.339 1213.59,234.329 1214.16,232.9 1214.73,232.783 1215.3,234.704 1215.87,235.207 1216.43,234.583 1217,232.165 1217.57,237.089 1218.14,235.354 1218.71,237.963 1219.28,239.416 1219.84,237.679 1220.41,235.106 1220.98,233.859 1221.55,231.475 1222.12,232.503 1222.69,231.227 1223.25,229.994 1223.82,230.986 1224.39,230.968 1224.96,229.746 1225.53,231.224 1226.1,230.153 1226.66,228.137 1227.23,226.284 1227.8,225.281 1228.37,227.034 1228.94,228.473 1229.51,228.669 1230.07,229.712 1230.64,228.594 1231.21,227.729 1231.78,227.942 1232.35,230.189 1232.92,227.899 1233.48,226.96 1234.05,228.26 1234.62,227.254 1235.19,227.826 1235.76,225.968 1236.33,225.205 1236.89,224.519 1237.46,224.112 1238.03,225.656 1238.6,224.856 1239.17,225.252 1239.74,225.61 1240.3,227.155 1240.87,227.421 1241.44,226.668 1242.01,226.842 1242.58,228.204 1243.15,229.199 1243.71,231.563 1244.28,231.689 1244.85,233.738 1245.42,232.899 1245.99,232.82 1246.56,232.488 1247.12,232.445 1247.69,231.185 1248.26,230.529 1248.83,227.461 1249.4,226.852 1249.97,227.257 1250.53,226.494 1251.1,227.78 1251.67,229.015 1252.24,228.121 1252.81,226.497 1253.38,227.835 1253.94,228.072 1254.51,229.177 1255.08,233.508 1255.65,233.459 1256.22,232.409 1256.79,230.295 1257.35,231.574 1257.92,232.536 1258.49,233.437 1259.06,235.333 1259.63,232.088 1260.2,233.025 1260.76,234.004 1261.33,234.026 1261.9,233.933 1262.47,234.819 1263.04,233.438 1263.61,232.17 1264.18,232.171 1264.74,232.223 1265.31,233.285 1265.88,232.003 1266.45,231.951 1267.02,233.819 1267.59,233.401 1268.15,233.283 1268.72,231.074 1269.29,230.079 1269.86,228.994 1270.43,231.257 1271,231.527 1271.56,231.343 1272.13,232.388 1272.7,232.341 1273.27,232.318 1273.84,232.239 1274.41,233.154 1274.97,232.79 1275.54,234.597 1276.11,234.355 1276.68,235.102 1277.25,233.877 1277.82,236.811 1278.38,236.506 1278.95,235.78 1279.52,236.5 1280.09,232.914 1280.66,229.593 1281.23,225.365 1281.79,224.932 1282.36,225.261 1282.93,229.722 1283.5,226.844 1284.07,227.033 1284.64,227.187 1285.2,230.379 1285.77,232.35 1286.34,235.981 1286.91,237.512 1287.48,239.181 1288.05,237.477 1288.61,235.6 1289.18,236.309 1289.75,233.75 1290.32,232.526 1290.89,228.249 1291.46,232.519 1292.02,232.283 1292.59,230.883 1293.16,230.746 1293.73,232.645 1294.3,230.386 1294.87,231.358 1295.43,230.357 1296,232.19 1296.57,231.083 1297.14,231.087 1297.71,229.918 1298.28,232.094 1298.84,231.046 1299.41,231.075 1299.98,231.797 1300.55,234.636 1301.12,231.097 1301.69,230.023 1302.25,228.931 1302.82,227.865 1303.39,227.111 1303.96,226.12 1304.53,225.323 1305.1,224.828 1305.66,224.238 1306.23,222.693 1306.8,222.181 1307.37,223.809 1307.94,224.176 1308.51,222.558 1309.07,224.035 1309.64,226.553 1310.21,226.918 1310.78,226.846 1311.35,226.398 1311.92,225.772 1312.48,227.09 1313.05,227.435 1313.62,224.643 1314.19,226.081 1314.76,229.74 1315.33,228.925 1315.89,230.379 1316.46,232.499 1317.03,231.627 1317.6,229.441 1318.17,229.439 1318.74,231.669 1319.3,229.584 1319.87,229.85 1320.44,228.676 1321.01,227.727 1321.58,230.116 1322.15,230.166 1322.71,226.526 1323.28,226.837 1323.85,224.95 1324.42,226.497 1324.99,227.92 1325.56,229.529 1326.12,229.714 1326.69,229.845 1327.26,232.012 1327.83,233.964 1328.4,233.879 1328.97,231.93 1329.53,233.119 1330.1,230.823 1330.67,231.948 1331.24,229.917 1331.81,233.012 1332.38,233.006 1332.94,234.077 1333.51,230.709 1334.08,229.99 1334.65,230.08 1335.22,231.184 1335.79,232.372 1336.36,233.302 1336.92,237.144 1337.49,235.826 1338.06,236.623 1338.63,235 1339.2,235.671 1339.77,237.3 1340.33,236.665 1340.9,235.125 1341.47,236.756 1342.04,237.082 1342.61,239.659 1343.18,239.085 1343.74,238.518 1344.31,237.852 1344.88,240.195 1345.45,239.645 1346.02,240.809 1346.59,242.037 1347.15,239.093 1347.72,239.264 1348.29,240.574 1348.86,240.845 1349.43,239.683 1350,236.768 1350.56,237.092 1351.13,236.239 1351.7,234.745 1352.27,233.166 1352.84,231.637 1353.41,232.27 1353.97,231.815 1354.54,231.234 1355.11,231.847 1355.68,227.326 1356.25,227.485 1356.82,225.531 1357.38,227.734 1357.95,228.658 1358.52,229.353 1359.09,231.441 1359.66,230.115 1360.23,230.869 1360.79,230.779 1361.36,231.586 1361.93,228.056 1362.5,227.81 1363.07,227.76 1363.64,227.817 1364.2,226.4 1364.77,225.518 1365.34,225.781 1365.91,226.938 1366.48,227.879 1367.05,228.727 1367.61,225.562 1368.18,226.822 1368.75,225.934 1369.32,226.29 1369.89,226.375 1370.46,224.423 1371.02,223.761 1371.59,222.106 1372.16,222.704 1372.73,224.06 1373.3,223.022 1373.87,223.533 1374.43,225.987 1375,226.059 1375.57,225.486 1376.14,224.927 1376.71,225.036 1377.28,225.307 1377.84,226.832 1378.41,225.609 1378.98,226.161 1379.55,226.55 1380.12,227.57 1380.69,227.954 1381.25,229.282 1381.82,228.161 1382.39,229.41 1382.96,229.547 1383.53,228.513 1384.1,226.699 1384.66,227.073 1385.23,227.327 1385.8,227.474 1386.37,230.004 1386.94,232.251 1387.51,230.969 1388.07,230.964 1388.64,231.882 1389.21,232.959 1389.78,230.642 1390.35,232.517 1390.92,232.499 1391.48,231.482 1392.05,233.791 1392.62,231.403 1393.19,232.262 1393.76,233.281 1394.33,232.87 1394.89,228.468 1395.46,228.621 1396.03,228.65 1396.6,228.817 1397.17,228.035 1397.74,227.365 1398.3,229.811 1398.87,228.683 1399.44,227.724 1400.01,230.092 1400.58,229.117 1401.15,228.139 1401.71,228.446 1402.28,228.489 1402.85,228.57 1403.42,227.644 1403.99,228.854 1404.56,226.934 1405.13,226.153 1405.69,225.36 1406.26,225.75 1406.83,227.255 1407.4,228.523 1407.97,227.672 1408.54,230.085 1409.1,229.106 1409.67,229.961 1410.24,230.956 1410.81,233.142 1411.38,231.988 1411.95,234.004 1412.51,235.899 1413.08,234.576 1413.65,234.426 1414.22,235.205 1414.79,233.088 1415.36,231.904 1415.92,231.603 1416.49,233.631 1417.06,233.486 1417.63,234.485 1418.2,233.095 1418.77,231.994 1419.33,231.798 1419.9,228.528 1420.47,226.546 1421.04,226.697 1421.61,224.755 1422.18,227.052 1422.74,226.968 1423.31,229.314 1423.88,228.354 1424.45,228.48 1425.02,229.752 1425.59,227.448 1426.15,229.634 1426.72,229.739 1427.29,226.724 1427.86,228.093 1428.43,228.198 1429,229.417 1429.56,228.424 1430.13,227.361 1430.7,225.436 1431.27,225.865 1431.84,226.241 1432.41,226.451 1432.97,225.838 1433.54,226.101 1434.11,227.382 1434.68,229.784 1435.25,229.875 1435.82,233.119 1436.38,230.877 1436.95,232.82 1437.52,235.724 1438.09,237.523 1438.66,238.027 1439.23,236.545 1439.79,236.123 1440.36,235.544 1440.93,236.071 1441.5,238.766 1442.07,238.29 1442.64,237.658 1443.2,236.123 1443.77,236.656 1444.34,237.206 1444.91,237.789 1445.48,237.116 1446.05,236.421 1446.61,236.944 1447.18,236.45 1447.75,236.828 1448.32,236.262 1448.89,234.887 1449.46,234.627 1450.02,235.388 1450.59,235.042 1451.16,234.604 1451.73,233.958 1452.3,231.431 1452.87,231.299 1453.43,232.964 1454,233.717 1454.57,232.458 1455.14,231.25 1455.71,230.995 1456.28,232.068 1456.84,230.789 1457.41,231.488 1457.98,231.156 1458.55,230.912 1459.12,228.665 1459.69,227.695 1460.25,228.796 1460.82,231.076 1461.39,231.006 1461.96,229.922 1462.53,229.752 1463.1,229.553 1463.66,229.35 1464.23,229.079 1464.8,227.828 1465.37,227.998 1465.94,229.064 1466.51,227.881 1467.07,227.835 1467.64,227.044 1468.21,226.323 1468.78,226.452 1469.35,226.603 1469.92,226.908 1470.48,227.004 1471.05,227.232 1471.62,226.368 1472.19,227.524 1472.76,226.57 1473.33,230.874 1473.89,231.912 1474.46,231.794 1475.03,233.531 1475.6,231.906 1476.17,232.03 1476.74,232.961 1477.31,231.67 1477.87,228.56 1478.44,230.641 1479.01,229.668 1479.58,229.681 1480.15,229.714 1480.72,227.697 1481.28,228.772 1481.85,228.695 1482.42,230.632 1482.99,233.591 1483.56,232.351 1484.13,231.067 1484.69,230.911 1485.26,229.78 1485.83,229.656 1486.4,230.61 1486.97,230.553 1487.54,230.451 1488.1,227.41 1488.67,226.808 1489.24,227.22 1489.81,225.246 1490.38,226.725 1490.95,229.108 1491.51,227.2 1492.08,227.623 1492.65,226.63 1493.22,226.678 1493.79,224.799 1494.36,224.151 1494.92,224.51 1495.49,228.079 1496.06,226.332 1496.63,226.562 1497.2,224.82 1497.77,225.335 1498.33,224.626 1498.9,226.111 1499.47,226.4 1500.04,225.553 1500.61,227.997 1501.18,227.242 1501.74,228.585 1502.31,227.746 1502.88,227.066 1503.45,228.326 1504.02,228.508 1504.59,228.909 1505.15,231.147 1505.72,230.078 1506.29,231.149 1506.86,231.14 1507.43,231.362 1508,231.457 1508.56,231.383 1509.13,231.199 1509.7,231.165 1510.27,230.088 1510.84,231.416 1511.41,231.34 1511.97,231.515 1512.54,230.284 1513.11,228.08 1513.68,227.021 1514.25,227.36 1514.82,229.827 1515.38,229.993 1515.95,231.241 1516.52,231.163 1517.09,231.228 1517.66,230.203 1518.23,230.425 1518.79,230.597 1519.36,230.722 1519.93,230.835 1520.5,229.677 1521.07,232.039 1521.64,230.927 1522.2,230.015 1522.77,229.942 1523.34,231.239 1523.91,229.245 1524.48,228.302 1525.05,230.56 1525.61,229.642 1526.18,228.969 1526.75,229.105 1527.32,231.2 1527.89,230.464 1528.46,230.506 1529.02,228.643 1529.59,228.994 1530.16,228.187 1530.73,227.162 1531.3,228.658 1531.87,228.005 1532.43,229.25 1533,230.588 1533.57,230.712 1534.14,230.814 1534.71,232.941 1535.28,231.686 1535.84,231.483 1536.41,231.468 1536.98,231.506 1537.55,231.357 1538.12,231.414 1538.69,230.283 1539.25,230.427 1539.82,233.497 1540.39,233.403 1540.96,230.032 1541.53,229.86 1542.1,231.918 1542.66,230.658 1543.23,231.644 1543.8,229.569 1544.37,231.766 1544.94,232.757 1545.51,231.415 1546.08,232.303 1546.64,231.169 1547.21,232.135 1547.78,231.918 1548.35,234.888 1548.92,234.504 1549.49,234.296 1550.05,231.837 1550.62,230.713 1551.19,230.832 1551.76,229.64 1552.33,229.541 1552.9,227.519 1553.46,226.689 1554.03,226.908 1554.6,227.202 1555.17,228.042 1555.74,229.307 1556.31,228.224 1556.87,228.219 1557.44,229.606 1558.01,230.868 1558.58,230.555 1559.15,232.686 1559.72,231.525 1560.28,233.408 1560.85,233.062 1561.42,231.919 1561.99,231.909 1562.56,230.868 1563.13,231.67 1563.69,230.757 1564.26,229.493 1564.83,226.199 1565.4,224.598 1565.97,222.968 1566.54,225.766 1567.1,227.146 1567.67,228.492 1568.24,227.666 1568.81,229.74 1569.38,229.74 1569.95,231.748 1570.51,230.67 1571.08,229.707 1571.65,231.824 1572.22,229.864 1572.79,230.026 1573.36,229.211 1573.92,230.459 1574.49,230.372 1575.06,228.204 1575.63,229.481 1576.2,227.621 1576.77,228.011 1577.33,229.4 1577.9,229.841 1578.47,227.982 1579.04,227.231 1579.61,228.821 1580.18,227.928 1580.74,231.353 1581.31,233.428 1581.88,234.305 1582.45,230.948 1583.02,232.035 1583.59,231.853 1584.15,232.097 1584.72,231.095 1585.29,229.866 1585.86,229.972 1586.43,230.138 1587,230.156 1587.56,228.208 1588.13,230.386 1588.7,231.334 1589.27,229.214 1589.84,230.226 1590.41,229.476 1590.97,230.694 1591.54,229.674 1592.11,230.705 1592.68,230.627 1593.25,231.867 1593.82,230.803 1594.38,227.698 1594.95,229.117 1595.52,228.085 1596.09,230.565 1596.66,229.689 1597.23,229.542 1597.79,228.694 1598.36,226.773 1598.93,228.151 1599.5,230.387 1600.07,233.529 1600.64,234.456 1601.2,233.257 1601.77,230.888 1602.34,231.969 1602.91,234.98 1603.48,234.667 1604.05,234.262 1604.61,235.079 1605.18,233.768 1605.75,232.443 1606.32,231.195 1606.89,231.398 1607.46,232.057 1608.02,230.111 1608.59,229.86 1609.16,226.913 1609.73,224.019 1610.3,222.695 1610.87,223.271 1611.43,222.665 1612,223.588 1612.57,223.822 1613.14,223.305 1613.71,223.86 1614.28,224.441 1614.84,225.084 1615.41,222.798 1615.98,225.286 1616.55,227.84 1617.12,229.13 1617.69,227.506 1618.26,229.012 1618.82,229.294 1619.39,229.589 1619.96,230.858 1620.53,231.873 1621.1,231.988 1621.67,232.233 1622.23,231.162 1622.8,231.533 1623.37,232.626 1623.94,231.452 1624.51,230.362 1625.08,231.347 1625.64,232.45 1626.21,232.352 1626.78,233.51 1627.35,232.432 1627.92,232.325 1628.49,233.247 1629.05,232.857 1629.62,232.679 1630.19,233.686 1630.76,233.578 1631.33,234.367 1631.9,234.125 1632.46,233.009 1633.03,233.895 1633.6,232.409 1634.17,234.466 1634.74,235.188 1635.31,235.034 1635.87,234.706 1636.44,232.56 1637.01,232.349 1637.58,233.107 1638.15,232.967 1638.72,232.79 1639.28,231.584 1639.85,232.425 1640.42,233.329 1640.99,233.152 1641.56,233.258 1642.13,230.273 1642.69,228.241 1643.26,233.689 1643.83,234.508 1644.4,232.101 1644.97,233.05 1645.54,230.813 1646.1,230.837 1646.67,229.756 1647.24,230.022 1647.81,229.219 1648.38,228.274 1648.95,229.429 1649.51,227.266 1650.08,229.349 1650.65,229.662 1651.22,230.994 1651.79,229.893 1652.36,230.961 1652.92,231.725 1653.49,232.59 1654.06,233.538 1654.63,234.481 1655.2,234.077 1655.77,234.601 1656.33,234.449 1656.9,233.116 1657.47,232.911 1658.04,233.732 1658.61,234.267 1659.18,232.945 1659.74,232.618 1660.31,232.46 1660.88,231.222 1661.45,228.964 1662.02,225.97 1662.59,226.498 1663.15,225.78 1663.72,224.849 1664.29,224.045 1664.86,224.516 1665.43,222.918 1666,225.4 1666.56,225.871 1667.13,227.076 1667.7,227.077 1668.27,225.214 1668.84,225.705 1669.41,225.995 1669.97,226.347 1670.54,227.906 1671.11,230.21 1671.68,232.159 1672.25,232.102 1672.82,232.998 1673.38,233.792 1673.95,232.66 1674.52,232.82 1675.09,232.814 1675.66,229.657 1676.23,231.637 1676.79,231.511 1677.36,233.48 1677.93,232.456 1678.5,232.546 1679.07,231.495 1679.64,230.44 1680.2,231.569 1680.77,231.581 1681.34,232.552 1681.91,232.511 1682.48,232.442 1683.05,234.327 1683.61,233.84 1684.18,233.71 1684.75,233.413 1685.32,233.337 1685.89,234.276 1686.46,234.055 1687.02,232.791 1687.59,232.636 1688.16,232.534 1688.73,231.165 1689.3,233.139 1689.87,231.701 1690.44,232.673 1691,232.436 1691.57,232.097 1692.14,234.308 1692.71,232.798 1693.28,230.453 1693.85,231.361 1694.41,230.322 1694.98,230.255 1695.55,230.375 1696.12,230.444 1696.69,228.481 1697.26,228.675 1697.82,228.815 1698.39,229.086 1698.96,225.982 1699.53,227.197 1700.1,228.57 1700.67,229.685 1701.23,230.732 1701.8,233.542 1702.37,234.285 1702.94,233.85 1703.51,234.647 1704.08,234.145 1704.64,231.608 1705.21,229.629 1705.78,229.54 1706.35,227.581 1706.92,227.75 1707.49,227.006 1708.05,228.292 1708.62,228.645 1709.19,227.621 1709.76,228.875 1710.33,228.766 1710.9,228.997 1711.46,229.04 1712.03,231.056 1712.6,230.848 1713.17,231.581 1713.74,233.767 1714.31,233.266 1714.87,231.006 1715.44,230.729 1716.01,233.678 1716.58,232.322 1717.15,233.022 1717.72,230.917 1718.28,233.071 1718.85,235.004 1719.42,234.65 1719.99,237.557 1720.56,237.979 1721.13,237.383 1721.69,234.729 1722.26,234.579 1722.83,234.3 1723.4,234.801 1723.97,233.363 1724.54,231.828 1725.1,232.47 1725.67,231.262 1726.24,233.12 1726.81,231.884 1727.38,230.518 1727.95,230.425 1728.51,232.547 1729.08,232.437 1729.65,232.052 1730.22,230.68 1730.79,230.543 1731.36,229.525 1731.92,229.189 1732.49,230.01 1733.06,227.839 1733.63,225.933 1734.2,225.236 1734.77,225.584 1735.33,226.861 1735.9,229.148 1736.47,229.056 1737.04,228.051 1737.61,227.114 1738.18,226.372 1738.74,228.445 1739.31,229.698 1739.88,228.546 1740.45,230.707 1741.02,227.423 1741.59,224.541 1742.15,227.044 1742.72,227.196 1743.29,227.396 1743.86,228.624 1744.43,231.81 1745,233.81 1745.56,233.631 1746.13,230.348 1746.7,229.294 1747.27,229.234 1747.84,230.401 1748.41,233.602 1748.97,232.372 1749.54,233.246 1750.11,234.254 1750.68,234.998 1751.25,232.334 1751.82,230.931 1752.38,229.604 1752.95,231.596 1753.52,230.199 1754.09,228.302 1754.66,228.34 1755.23,227.463 1755.79,227.557 1756.36,228.614 1756.93,229.651 1757.5,229.657 1758.07,229.505 1758.64,229.457 1759.21,227.317 1759.77,227.292 1760.34,226.308 1760.91,226.901 1761.48,229.216 1762.05,228.366 1762.62,230.304 1763.18,230.157 1763.75,228.124 1764.32,229.181 1764.89,229.127 1765.46,229.31 1766.03,229.335 1766.59,229.53 1767.16,229.484 1767.73,229.554 1768.3,231.833 1768.87,229.894 1769.44,229.076 1770,230.234 1770.57,229.075 1771.14,229.385 1771.71,230.412 1772.28,230.423 1772.85,231.65 1773.41,229.467 1773.98,231.466 1774.55,229.277 1775.12,228.303 1775.69,227.154 1776.26,226.183 1776.82,224.081 1777.39,224.45 1777.96,225.834 1778.53,228.252 1779.1,229.674 1779.67,228.845 1780.23,227.845 1780.8,224.88 1781.37,227.161 1781.94,226.413 1782.51,225.704 1783.08,225.935 1783.64,226.285 1784.21,227.867 1784.78,228.2 1785.35,228.463 1785.92,229.695 1786.49,227.745 1787.05,225.105 1787.62,226.629 1788.19,225.933 1788.76,224.256 1789.33,225.063 1789.9,226.531 1790.46,227.013 1791.03,230.363 1791.6,229.492 1792.17,231.78 1792.74,232.942 1793.31,232.937 1793.87,232.947 1794.44,234.031 1795.01,235.956 1795.58,237.552 1796.15,240.202 1796.72,239.578 1797.28,239.058 1797.85,237.639 1798.42,234.153 1798.99,233.811 1799.56,233.693 1800.13,234.556 1800.69,235.227 1801.26,234.787 1801.83,234.608 1802.4,233.399 1802.97,231.216 1803.54,232.157 1804.1,232.018 1804.67,231.819 1805.24,230.8 1805.81,231.751 1806.38,234.776 1806.95,235.628 1807.51,234.27 1808.08,236.006 1808.65,235.378 1809.22,234.936 1809.79,235.336 1810.36,232.927 1810.92,230.807 1811.49,229.558 1812.06,230.269 1812.63,230.343 1813.2,232.25 1813.77,229.857 1814.33,227.44 1814.9,227.526 1815.47,227.562 1816.04,228.635 1816.61,228.7 1817.18,227.507 1817.74,226.557 1818.31,226.673 1818.88,225.723 1819.45,229.148 1820.02,229.208 1820.59,231.004 1821.15,232.092 1821.72,231.915 1822.29,229.811 1822.86,228.782 1823.43,228.851 1824,227.652 1824.56,229.722 1825.13,229.62 1825.7,231.598 1826.27,233.493 1826.84,234.069 1827.41,233.871 1827.97,235.535 1828.54,234.165 1829.11,234.947 1829.68,233.763 1830.25,235.463 1830.82,233.921 1831.39,233.838 1831.95,233.419 1832.52,232.103 1833.09,230.854 1833.66,230.825 1834.23,228.848 1834.8,228.784 1835.36,227.565 1835.93,229.663 1836.5,229.649 1837.07,231.688 1837.64,233.462 1838.21,232.188 1838.77,231.956 1839.34,231.931 1839.91,230.89 1840.48,229.416 1841.05,230.196 1841.62,230.208 1842.18,228.13 1842.75,228.185 1843.32,227.083 1843.89,228.271 1844.46,228.464 1845.03,230.486 1845.59,231.481 1846.16,230.604 1846.73,230.457 1847.3,232.578 1847.87,232.456 1848.44,234.308 1849,232.963 1849.57,232.786 1850.14,229.275 1850.71,229.092 1851.28,228.961 1851.85,230.21 1852.41,230.201 1852.98,231.394 1853.55,232.292 1854.12,232.179 1854.69,231.05 1855.26,230.949 1855.82,230.81 1856.39,229.658 1856.96,227.609 1857.53,226.728 1858.1,226.093 1858.67,227.234 1859.23,228.319 1859.8,230.295 1860.37,231.333 1860.94,231.048 1861.51,229.891 1862.08,229.7 1862.64,230.746 1863.21,231.425 1863.78,233.249 1864.35,233.138 1864.92,232.804 1865.49,233.603 1866.05,234.094 1866.62,235.62 1867.19,236.105 1867.76,235.606 1868.33,235.117 1868.9,233.522 1869.46,233.204 1870.03,233.89 1870.6,233.349 1871.17,233.971 1871.74,232.744 1872.31,229.43 1872.87,229.43 1873.44,230.321 1874.01,228.929 1874.58,228.779 1875.15,227.798 1875.72,231.032 1876.28,229.859 1876.85,230.776 1877.42,229.7 1877.99,229.676 1878.56,230.584 1879.13,229.497 1879.69,228.491 1880.26,229.594 1880.83,228.76 1881.4,228.853 1881.97,228.803 1882.54,227.763 1883.1,226.731 1883.67,227.895 1884.24,228.249 1884.81,227.299 1885.38,225.306 1885.95,228.954 1886.51,230.302 1887.08,227.145 1887.65,226.295 1888.22,226.273 1888.79,224.286 1889.36,222.404 1889.92,222.892 1890.49,222.21 1891.06,222.508 1891.63,221.941 1892.2,222.517 1892.77,221.942 1893.33,220.437 1893.9,219.895 1894.47,220.547 1895.04,220.074 1895.61,220.12 1896.18,221.957 1896.74,222.686 1897.31,224.275 1897.88,227.736 1898.45,228.109 1899.02,229.364 1899.59,228.483 1900.16,229.941 1900.72,229.81 1901.29,229.092 1901.86,232.32 1902.43,234.33 1903,233.238 1903.57,233.086 1904.13,230.86 1904.7,231.767 1905.27,232.63 1905.84,232.516 1906.41,232.226 1906.98,231.171 1907.54,230.076 1908.11,228.276 1908.68,228.418 1909.25,225.416 1909.82,226.619 1910.39,226.846 1910.95,227.013 1911.52,225.193 1912.09,223.54 1912.66,224.157 1913.23,225.584 1913.8,225.078 1914.36,225.789 1914.93,227.173 1915.5,227.514 1916.07,228.882 1916.64,230.239 1917.21,230.504 1917.77,229.761 1918.34,229.825 1918.91,229.898 1919.48,231.101 1920.05,231.085 1920.62,232.288 1921.18,231.119 1921.75,233.151 1922.32,233.155 1922.89,233.205 1923.46,235.07 1924.03,234.727 1924.59,234.398 1925.16,236.299 1925.73,235.79 1926.3,235.545 1926.87,235.241 1927.44,231.935 1928,234.038 1928.57,234.729 1929.14,233.782 1929.71,232.777 1930.28,231.699 1930.85,231.828 1931.41,230.653 1931.98,231.714 1932.55,230.496 1933.12,230.718 1933.69,229.97 1934.26,230.187 1934.82,231.214 1935.39,231.987 1935.96,231.718 1936.53,229.581 1937.1,229.753 1937.67,230.828 1938.23,231.883 1938.8,230.752 1939.37,229.83 1939.94,226.9 1940.51,226.96 1941.08,229.432 1941.64,230.567 1942.21,229.421 1942.78,229.669 1943.35,227.603 1943.92,227.924 1944.49,225.927 1945.05,226.251 1945.62,225.68 1946.19,227.054 1946.76,227.084 1947.33,227.242 1947.9,226.578 1948.46,226.908 1949.03,226.133 1949.6,228.574 1950.17,229.919 1950.74,230.885 1951.31,229.998 1951.87,227.995 1952.44,229.263 1953.01,231.457 1953.58,231.572 1954.15,231.638 1954.72,231.742 1955.28,233.506 1955.85,231.446 1956.42,233.317 1956.99,233.162 1957.56,235.17 1958.13,239.144 1958.69,238.651 1959.26,236.329 1959.83,235.121 1960.4,236.143 1960.97,234.812 1961.54,232.735 1962.1,233.616 1962.67,232.414 1963.24,231.17 1963.81,230.121 1964.38,231.256 1964.95,230.17 1965.51,230.283 1966.08,231.424 1966.65,229.32 1967.22,229.433 1967.79,230.384 1968.36,231.369 1968.92,232.424 1969.49,234.051 1970.06,232.621 1970.63,232.574 1971.2,233.619 1971.77,235.216 1972.34,234.859 1972.9,233.402 1973.47,230.148 1974.04,228.189 1974.61,229.417 1975.18,231.374 1975.75,234.318 1976.31,234.064 1976.88,234.921 1977.45,236.556 1978.02,236.255 1978.59,233.877 1979.16,234.549 1979.72,232.067 1980.29,230.942 1980.86,229.654 1981.43,227.783 1982,229.102 1982.57,228.269 1983.13,228.532 1983.7,229.63 1984.27,230.548 1984.84,230.618 1985.41,232.586 1985.98,232.347 1986.54,234.373 1987.11,234.162 1987.68,231.731 1988.25,231.54 1988.82,233.461 1989.39,233.015 1989.95,232.967 1990.52,232.883 1991.09,233.674 1991.66,233.249 1992.23,229.974 1992.8,226.672 1993.36,225.919 1993.93,226.181 1994.5,226.446 1995.07,226.76 1995.64,227.955 1996.21,228.172 1996.77,227.395 1997.34,229.878 1997.91,230.189 1998.48,229.153 1999.05,230.198 1999.62,230.196 2000.18,225.956 2000.75,224.328 2001.32,227.938 2001.89,229.146 2002.46,227.923 2003.03,227.067 2003.59,227.378 2004.16,228.647 2004.73,228.615 2005.3,226.654 2005.87,227.879 2006.44,229.106 2007,229.181 2007.57,229.348 2008.14,227.398 2008.71,225.597 2009.28,223.8 2009.85,224.326 2010.41,223.827 2010.98,221.977 2011.55,223.694 2012.12,224.245 2012.69,223.708 2013.26,224.563 2013.82,222.062 2014.39,224.741 2014.96,226.323 2015.53,225.697 2016.1,226.123 2016.67,224.642 2017.23,225.173 2017.8,223.824 2018.37,225.449 2018.94,230.946 2019.51,231.01 2020.08,230.103 2020.64,231.378 2021.21,235.586 2021.78,231.221 2022.35,230.444 2022.92,231.546 2023.49,233.652 2024.05,233.54 2024.62,234.62 2025.19,237.354 2025.76,234 2026.33,235.946 2026.9,236.65 2027.46,237.389 2028.03,239.04 2028.6,239.528 2029.17,238.753 2029.74,237.115 2030.31,238.782 2030.87,236.739 2031.44,235.223 2032.01,234.93 2032.58,233.485 2033.15,232.098 2033.72,231.015 2034.28,230.749 2034.85,230.972 2035.42,230.868 2035.99,231.697 2036.56,230.683 2037.13,229.659 2037.69,228.563 2038.26,227.639 2038.83,226.71 2039.4,226.918 2039.97,228.017 2040.54,230.185 2041.11,230.263 2041.67,230.292 2042.24,230.258 2042.81,230.313 2043.38,230.27 2043.95,232.507 2044.52,231.479 2045.08,231.381 2045.65,235.443 2046.22,236.987 2046.79,234.586 2047.36,233.965 2047.93,235.765 2048.49,235.193 2049.06,234.7 2049.63,236.447 2050.2,236.939 2050.77,236.437 2051.34,234.95 2051.9,235.425 2052.47,233.947 2053.04,231.591 2053.61,230.295 2054.18,230.213 2054.75,229.111 2055.31,229.194 2055.88,230.253 2056.45,230.47 2057.02,230.563 2057.59,230.594 2058.16,230.427 2058.72,231.223 2059.29,230.984 2059.86,230.761 2060.43,228.674 2061,230.634 2061.57,232.621 2062.13,230.256 2062.7,230.198 2063.27,231.363 2063.84,232.315 2064.41,232.096 2064.98,231.84 2065.54,233.873 2066.11,237.52 2066.68,237.95 2067.25,235.344 2067.82,232.861 2068.39,231.419 2068.95,230.053 2069.52,232.849 2070.09,231.648 2070.66,232.556 2071.23,232.274 2071.8,229.919 2072.36,230.739 2072.93,228.539 2073.5,228.605 2074.07,228.512 2074.64,227.614 2075.21,226.506 2075.77,226.923 2076.34,226.867 2076.91,226.003 2077.48,223.234 2078.05,223.776 2078.62,225.299 2079.18,224.646 2079.75,223.716 2080.32,225.175 2080.89,225.594 2081.46,225.784 2082.03,224.045 2082.59,224.567 2083.16,225.929 2083.73,225.103 2084.3,225.385 2084.87,225.823 2085.44,223.931 2086,221.605 2086.57,222.113 2087.14,223.712 2087.71,225.066 2088.28,226.359 2088.85,225.691 2089.41,225.926 2089.98,227.37 2090.55,227.915 2091.12,229.296 2091.69,229.422 2092.26,230.663 2092.82,230.769 2093.39,230.82 2093.96,230.71 2094.53,230.801 2095.1,231.933 2095.67,230.911 2096.23,230.904 2096.8,229.766 2097.37,228.783 2097.94,228.946 2098.51,230.323 2099.08,228.422 2099.64,228.513 2100.21,229.812 2100.78,230.931 2101.35,230.815 2101.92,231.793 2102.49,231.591 2103.05,231.592 2103.62,230.665 2104.19,231.871 2104.76,230.652 2105.33,230.622 2105.9,231.871 2106.46,231.854 2107.03,229.909 2107.6,229.996 2108.17,229.065 2108.74,231.24 2109.31,232.357 2109.87,231.906 2110.44,233.85 2111.01,233.394 2111.58,228.979 2112.15,230.206 2112.72,228.988 2113.29,229.095 2113.85,230.182 2114.42,230.18 2114.99,229.27 2115.56,230.308 2116.13,231.598 2116.7,235.608 2117.26,235.484 2117.83,236.038 2118.4,234.726 2118.97,234.225 2119.54,233.004 2120.11,232.799 2120.67,231.911 2121.24,232.049 2121.81,231.877 2122.38,227.657 2122.95,226.698 2123.52,226.958 2124.08,227.242 2124.65,228.643 2125.22,228.898 2125.79,228.835 2126.36,229.103 2126.93,229.937 2127.49,228.76 2128.06,228.866 2128.63,230.989 2129.2,231.009 2129.77,229.95 2130.34,228.158 2130.9,227.363 2131.47,226.747 2132.04,225.862 2132.61,225.016 2133.18,226.291 2133.75,226.704 2134.31,229.185 2134.88,229.294 2135.45,229.652 2136.02,228.71 2136.59,229.06 2137.16,229.03 2137.72,231.389 2138.29,232.478 2138.86,231.423 2139.43,231.408 2140,232.327 2140.57,232.321 2141.13,231.138 2141.7,231.195 2142.27,232.092 2142.84,230.909 2143.41,230.925 2143.98,231.981 2144.54,231.99 2145.11,232.877 2145.68,231.779 2146.25,229.656 2146.82,230.862 2147.39,232.041 2147.95,230.913 2148.52,231.826 2149.09,233.758 2149.66,233.643 2150.23,234.675 2150.8,234.391 2151.36,234.165 2151.93,234.601 2152.5,235.5 2153.07,235.273 2153.64,234.094 2154.21,234.746 2154.77,231.29 2155.34,230.15 2155.91,230.222 2156.48,229.029 2157.05,227.089 2157.62,228.248 2158.18,228.301 2158.75,228.318 2159.32,227.192 2159.89,226.333 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip720)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip720)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip720)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip720)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.02\n  with uncertainty of ± 0.0012773827436651324\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01333 ± (0.00183801, 0.00190639) (MC)\n  95% confidence interval: [-4.01697, -4.00963]) (MC)\n  linear error propagation: -4.0134 ± 0.00186893\n  |δ_y| = |0.00163831| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013331864951047, val_l = 0.0036334396536714664, val_u = 0.0037015138192844077)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip750\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip751\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip750)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip752\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.04 2211.02,1142.04 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,977.873 2211.02,977.873 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,813.708 2211.02,813.708 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,649.544 2211.02,649.544 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,485.379 2211.02,485.379 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,321.214 2211.02,321.214 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.04 365.751,1142.04 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,977.873 365.751,977.873 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,813.708 365.751,813.708 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,649.544 365.751,649.544 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,485.379 365.751,485.379 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,321.214 365.751,321.214 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M298.909 1127.84 Q295.298 1127.84 293.469 1131.4 Q291.664 1134.94 291.664 1142.07 Q291.664 1149.18 293.469 1152.74 Q295.298 1156.29 298.909 1156.29 Q302.543 1156.29 304.349 1152.74 Q306.177 1149.18 306.177 1142.07 Q306.177 1134.94 304.349 1131.4 Q302.543 1127.84 298.909 1127.84 M298.909 1124.13 Q304.719 1124.13 307.775 1128.74 Q310.853 1133.32 310.853 1142.07 Q310.853 1150.8 307.775 1155.41 Q304.719 1159.99 298.909 1159.99 Q293.099 1159.99 290.02 1155.41 Q286.964 1150.8 286.964 1142.07 Q286.964 1133.32 290.02 1128.74 Q293.099 1124.13 298.909 1124.13 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M259.557 991.218 L267.196 991.218 L267.196 964.853 L258.886 966.519 L258.886 962.26 L267.15 960.593 L271.826 960.593 L271.826 991.218 L279.465 991.218 L279.465 995.153 L259.557 995.153 L259.557 991.218 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 963.672 Q295.298 963.672 293.469 967.237 Q291.664 970.778 291.664 977.908 Q291.664 985.014 293.469 988.579 Q295.298 992.121 298.909 992.121 Q302.543 992.121 304.349 988.579 Q306.177 985.014 306.177 977.908 Q306.177 970.778 304.349 967.237 Q302.543 963.672 298.909 963.672 M298.909 959.968 Q304.719 959.968 307.775 964.575 Q310.853 969.158 310.853 977.908 Q310.853 986.635 307.775 991.241 Q304.719 995.825 298.909 995.825 Q293.099 995.825 290.02 991.241 Q286.964 986.635 286.964 977.908 Q286.964 969.158 290.02 964.575 Q293.099 959.968 298.909 959.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M262.775 827.053 L279.094 827.053 L279.094 830.988 L257.15 830.988 L257.15 827.053 Q259.812 824.299 264.395 819.669 Q269.002 815.016 270.182 813.674 Q272.428 811.151 273.307 809.415 Q274.21 807.655 274.21 805.965 Q274.21 803.211 272.266 801.475 Q270.344 799.739 267.242 799.739 Q265.043 799.739 262.59 800.503 Q260.159 801.266 257.381 802.817 L257.381 798.095 Q260.205 796.961 262.659 796.382 Q265.113 795.803 267.15 795.803 Q272.52 795.803 275.715 798.489 Q278.909 801.174 278.909 805.665 Q278.909 807.794 278.099 809.715 Q277.312 811.614 275.205 814.206 Q274.627 814.877 271.525 818.095 Q268.423 821.289 262.775 827.053 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 799.507 Q295.298 799.507 293.469 803.072 Q291.664 806.614 291.664 813.743 Q291.664 820.85 293.469 824.414 Q295.298 827.956 298.909 827.956 Q302.543 827.956 304.349 824.414 Q306.177 820.85 306.177 813.743 Q306.177 806.614 304.349 803.072 Q302.543 799.507 298.909 799.507 M298.909 795.803 Q304.719 795.803 307.775 800.41 Q310.853 804.993 310.853 813.743 Q310.853 822.47 307.775 827.076 Q304.719 831.66 298.909 831.66 Q293.099 831.66 290.02 827.076 Q286.964 822.47 286.964 813.743 Q286.964 804.993 290.02 800.41 Q293.099 795.803 298.909 795.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M272.914 648.189 Q276.27 648.907 278.145 651.176 Q280.043 653.444 280.043 656.777 Q280.043 661.893 276.525 664.694 Q273.006 667.495 266.525 667.495 Q264.349 667.495 262.034 667.055 Q259.742 666.638 257.289 665.782 L257.289 661.268 Q259.233 662.402 261.548 662.981 Q263.863 663.56 266.386 663.56 Q270.784 663.56 273.076 661.824 Q275.39 660.088 275.39 656.777 Q275.39 653.722 273.238 652.009 Q271.108 650.273 267.289 650.273 L263.261 650.273 L263.261 646.43 L267.474 646.43 Q270.923 646.43 272.752 645.064 Q274.58 643.676 274.58 641.083 Q274.58 638.421 272.682 637.009 Q270.807 635.574 267.289 635.574 Q265.367 635.574 263.168 635.99 Q260.969 636.407 258.33 637.287 L258.33 633.12 Q260.992 632.379 263.307 632.009 Q265.645 631.639 267.705 631.639 Q273.029 631.639 276.131 634.069 Q279.233 636.477 279.233 640.597 Q279.233 643.467 277.59 645.458 Q275.946 647.426 272.914 648.189 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 635.342 Q295.298 635.342 293.469 638.907 Q291.664 642.449 291.664 649.578 Q291.664 656.685 293.469 660.25 Q295.298 663.791 298.909 663.791 Q302.543 663.791 304.349 660.25 Q306.177 656.685 306.177 649.578 Q306.177 642.449 304.349 638.907 Q302.543 635.342 298.909 635.342 M298.909 631.639 Q304.719 631.639 307.775 636.245 Q310.853 640.828 310.853 649.578 Q310.853 658.305 307.775 662.912 Q304.719 667.495 298.909 667.495 Q293.099 667.495 290.02 662.912 Q286.964 658.305 286.964 649.578 Q286.964 640.828 290.02 636.245 Q293.099 631.639 298.909 631.639 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M271.594 472.173 L259.789 490.622 L271.594 490.622 L271.594 472.173 M270.367 468.099 L276.247 468.099 L276.247 490.622 L281.177 490.622 L281.177 494.511 L276.247 494.511 L276.247 502.659 L271.594 502.659 L271.594 494.511 L255.992 494.511 L255.992 489.997 L270.367 468.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 471.177 Q295.298 471.177 293.469 474.742 Q291.664 478.284 291.664 485.414 Q291.664 492.52 293.469 496.085 Q295.298 499.626 298.909 499.626 Q302.543 499.626 304.349 496.085 Q306.177 492.52 306.177 485.414 Q306.177 478.284 304.349 474.742 Q302.543 471.177 298.909 471.177 M298.909 467.474 Q304.719 467.474 307.775 472.08 Q310.853 476.664 310.853 485.414 Q310.853 494.14 307.775 498.747 Q304.719 503.33 298.909 503.33 Q293.099 503.33 290.02 498.747 Q286.964 494.14 286.964 485.414 Q286.964 476.664 290.02 472.08 Q293.099 467.474 298.909 467.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M258.793 303.934 L277.15 303.934 L277.15 307.869 L263.076 307.869 L263.076 316.341 Q264.094 315.994 265.113 315.832 Q266.131 315.647 267.15 315.647 Q272.937 315.647 276.316 318.818 Q279.696 321.989 279.696 327.406 Q279.696 332.985 276.224 336.087 Q272.752 339.165 266.432 339.165 Q264.256 339.165 261.988 338.795 Q259.742 338.425 257.335 337.684 L257.335 332.985 Q259.418 334.119 261.641 334.675 Q263.863 335.23 266.34 335.23 Q270.344 335.23 272.682 333.124 Q275.02 331.017 275.02 327.406 Q275.02 323.795 272.682 321.688 Q270.344 319.582 266.34 319.582 Q264.465 319.582 262.59 319.999 Q260.738 320.415 258.793 321.295 L258.793 303.934 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M298.909 307.013 Q295.298 307.013 293.469 310.577 Q291.664 314.119 291.664 321.249 Q291.664 328.355 293.469 331.92 Q295.298 335.462 298.909 335.462 Q302.543 335.462 304.349 331.92 Q306.177 328.355 306.177 321.249 Q306.177 314.119 304.349 310.577 Q302.543 307.013 298.909 307.013 M298.909 303.309 Q304.719 303.309 307.775 307.915 Q310.853 312.499 310.853 321.249 Q310.853 329.975 307.775 334.582 Q304.719 339.165 298.909 339.165 Q293.099 339.165 290.02 334.582 Q286.964 329.975 286.964 321.249 Q286.964 312.499 290.02 307.915 Q293.099 303.309 298.909 303.309 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip752)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.08 400.199,909.95 400.786,933.085 401.372,835.459 401.958,741.975 402.545,656.439 403.131,578.324 403.718,615.807 404.304,545.471 404.891,491.436 405.477,434.558 406.063,465.628 406.65,488.64 407.236,439.976 407.823,396.18 408.409,356.937 408.995,321.951 409.582,347.209 410.168,317.497 410.755,291.375 411.341,268.607 411.927,248.969 412.514,233.247 413.1,219.895 413.687,245.528 414.273,270.264 414.86,263.051 415.446,256.272 416.032,278.913 416.619,275.092 417.205,273.486 417.792,272.923 418.378,274.495 418.964,276.955 419.551,300.498 420.137,303.633 420.724,342.931 421.31,347.198 421.896,351.873 422.483,357.611 423.069,378.267 423.656,386.135 424.242,394.8 424.829,405.005 425.415,414.549 426.001,434.88 426.588,455.747 427.174,476.09 427.761,496.557 428.347,506.955 428.933,534.227 429.52,568.386 430.106,584.811 430.693,600.609 431.279,610.568 431.865,626.772 432.452,648.727 433.038,670.132 433.625,678.907 434.211,693.431 434.798,713.153 435.384,722.034 435.97,735.584 436.557,744.021 437.143,766.661 437.73,775.077 438.316,792.095 438.902,804.306 439.489,831.986 440.075,842.574 440.662,860.406 441.248,870.164 441.835,883.153 442.421,898.853 443.007,904.641 443.594,910.302 444.18,916.24 444.767,922.144 445.353,927.954 445.939,936.399 446.526,942.058 447.112,952.926 447.699,963.801 448.285,974.606 448.871,982.327 449.458,987.51 450.044,994.683 450.631,1004.51 451.217,1009.33 451.804,1021.15 452.39,1027.78 452.976,1034.76 453.563,1041.56 454.149,1043.68 454.736,1047.94 455.322,1060.92 455.908,1064.86 456.495,1070.83 457.081,1074.55 457.668,1084.12 458.254,1089.35 458.84,1094.53 459.427,1100.16 460.013,1109.01 460.6,1115.67 461.186,1118.18 461.773,1128.59 462.359,1132.57 462.945,1138.44 463.532,1144.36 464.118,1148.12 464.705,1151.56 465.291,1154.95 465.877,1158.09 466.464,1159.95 467.05,1161.26 467.637,1164.29 468.223,1170.8 468.809,1171.92 469.396,1173.12 469.982,1175.85 470.569,1182 471.155,1182.58 471.742,1184.93 472.328,1187.21 472.914,1191.22 473.501,1193.41 474.087,1195.31 474.674,1195.7 475.26,1195.64 475.846,1198.98 476.433,1202.3 477.019,1203.85 477.606,1204.17 478.192,1209.12 478.778,1211.88 479.365,1211.85 479.951,1214.87 480.538,1214.2 481.124,1216.96 481.711,1217.99 482.297,1216.07 482.883,1217.24 483.47,1216.94 484.056,1218.14 484.643,1219.31 485.229,1219.24 485.815,1218.96 486.402,1220.41 486.988,1221.71 487.575,1223.13 488.161,1224.56 488.748,1224.26 489.334,1224.01 489.92,1226.92 490.507,1226.43 491.093,1229.29 491.68,1227.39 492.266,1229.84 492.852,1230.84 493.439,1230.42 494.025,1228.4 494.612,1229.62 495.198,1229.41 495.784,1230.42 496.371,1228.71 496.957,1228.65 497.544,1231.1 498.13,1230.6 498.717,1230.27 499.303,1229.78 499.889,1229.32 500.476,1230.27 501.062,1231.23 501.649,1233.6 502.235,1235.82 502.821,1233.96 503.408,1236.6 503.994,1237.28 504.581,1238.19 505.167,1237.25 505.753,1239.46 506.34,1239.89 506.926,1239.32 507.513,1242.79 508.099,1240.61 508.686,1241.44 509.272,1244.55 509.858,1247.62 510.445,1245.01 511.031,1245.57 511.618,1245.87 512.204,1246.33 512.79,1246.6 513.377,1246.86 513.963,1245.97 514.55,1244.9 515.136,1246.71 515.722,1248.6 516.309,1247.21 516.895,1246.19 517.482,1242.31 518.068,1239.99 518.655,1242.21 519.241,1242.94 519.827,1240.51 520.414,1239.5 521,1240.09 521.587,1240.67 522.173,1242.55 522.759,1240.1 523.346,1242.06 523.932,1242.72 524.519,1243.09 525.105,1244.91 525.691,1248.03 526.278,1246.59 526.864,1248.09 527.451,1247.01 528.037,1247.43 528.624,1250.53 529.21,1249.18 529.796,1246.62 530.383,1245.27 530.969,1244.27 531.556,1243.35 532.142,1241.21 532.728,1241.84 533.315,1238.3 533.901,1236.46 534.488,1234.37 535.074,1233.71 535.661,1233.66 536.247,1234.86 536.833,1235.67 537.42,1232.52 538.006,1232.07 538.593,1231.56 539.179,1231.47 539.765,1231.5 540.352,1232.59 540.938,1233.82 541.525,1233.26 542.111,1232.98 542.697,1231.26 543.284,1233.21 543.87,1235.36 544.457,1233.57 545.043,1230.29 545.63,1231.41 546.216,1233.72 546.802,1240.09 547.389,1239.22 547.975,1238.53 548.562,1237.67 549.148,1237.01 549.734,1237.6 550.321,1237.15 550.907,1236.65 551.494,1237.26 552.08,1236.29 552.666,1234.38 553.253,1235.07 553.839,1231.77 554.426,1232.72 555.012,1235.02 555.599,1235.87 556.185,1235.18 556.771,1235.72 557.358,1235.07 557.944,1231.57 558.531,1231.54 559.117,1235.34 559.703,1237.6 560.29,1240.77 560.876,1239.99 561.463,1239.3 562.049,1239.77 562.635,1238.88 563.222,1236.98 563.808,1237.66 564.395,1236.89 564.981,1237.27 565.568,1238 566.154,1237.07 566.74,1237.55 567.327,1235.27 567.913,1233.13 568.5,1236.65 569.086,1234.73 569.672,1232.6 570.259,1230.32 570.845,1230.02 571.432,1230.99 572.018,1233.42 572.605,1232.73 573.191,1234.94 573.777,1231.56 574.364,1233.68 574.95,1234.48 575.537,1233.46 576.123,1232.85 576.709,1229.63 577.296,1230.38 577.882,1231.27 578.469,1231.83 579.055,1231.8 579.641,1232.91 580.228,1226.69 580.814,1227.46 581.401,1226.05 581.987,1225.71 582.574,1224.07 583.16,1223.99 583.746,1223.96 584.333,1225.23 584.919,1230.4 585.506,1228.69 586.092,1221.58 586.678,1221.63 587.265,1224.33 587.851,1224.29 588.438,1222.56 589.024,1223.88 589.61,1225.12 590.197,1227.72 590.783,1227.47 591.37,1227.13 591.956,1225.51 592.543,1226.4 593.129,1224.69 593.715,1225.88 594.302,1226.97 594.888,1229.33 595.475,1228.87 596.061,1227.28 596.647,1226.78 597.234,1227.7 597.82,1231.25 598.407,1230.78 598.993,1231.69 599.579,1231.1 600.166,1227.62 600.752,1225.9 601.339,1222.97 601.925,1225.53 602.512,1225.12 603.098,1224.79 603.684,1223 604.271,1221.56 604.857,1221.25 605.444,1223.91 606.03,1222.43 606.616,1226.39 607.203,1226.04 607.789,1221.58 608.376,1221.37 608.962,1221.54 609.548,1217.33 610.135,1217.67 610.721,1219.2 611.308,1219.26 611.894,1218.96 612.481,1220.61 613.067,1221.64 613.653,1221.44 614.24,1217.5 614.826,1217.5 615.413,1217.69 615.999,1219.09 616.585,1221.59 617.172,1219.83 617.758,1219.87 618.345,1218.33 618.931,1218.47 619.518,1219.85 620.104,1222.43 620.69,1220.93 621.277,1226.06 621.863,1225.7 622.45,1225.17 623.036,1224.79 623.622,1224.29 624.209,1221.22 624.795,1223.82 625.382,1223.32 625.968,1223.13 626.554,1222.45 627.141,1221.07 627.727,1223.52 628.314,1223.45 628.9,1223.26 629.487,1224.02 630.073,1223.42 630.659,1221.43 631.246,1222.48 631.832,1223.44 632.419,1220.53 633.005,1216.41 633.591,1219.29 634.178,1217.58 634.764,1217.47 635.351,1220.19 635.937,1219.76 636.523,1220.95 637.11,1223.44 637.696,1224.43 638.283,1224.1 638.869,1221.12 639.456,1220.79 640.042,1220.82 640.628,1220.49 641.215,1223.08 641.801,1221.27 642.388,1219.61 642.974,1217.97 643.56,1218 644.147,1218.17 644.733,1216.94 645.32,1212.77 645.906,1215.7 646.492,1215.91 647.079,1216.93 647.665,1213.98 648.252,1215.38 648.838,1215.41 649.425,1216.62 650.011,1218.04 650.597,1216.83 651.184,1216.94 651.77,1219.48 652.357,1221.83 652.943,1220.38 653.529,1219.93 654.116,1219.59 654.702,1216.54 655.289,1219.15 655.875,1218.86 656.462,1219.89 657.048,1220.94 657.634,1221.85 658.221,1221.65 658.807,1225.37 659.394,1224.77 659.98,1221.66 660.566,1221.39 661.153,1222.32 661.739,1219.08 662.326,1220.47 662.912,1220.07 663.498,1221.06 664.085,1219.34 664.671,1218.9 665.258,1217.18 665.844,1214.02 666.431,1214.16 667.017,1215.28 667.603,1215.21 668.19,1216.68 668.776,1215.36 669.363,1214.04 669.949,1213.84 670.535,1213.87 671.122,1215 671.708,1214.89 672.295,1213.22 672.881,1211.78 673.467,1210.59 674.054,1209.32 674.64,1211.01 675.227,1212.51 675.813,1212.54 676.4,1211.25 676.986,1212.74 677.572,1211.49 678.159,1211.75 678.745,1209.05 679.332,1207.69 679.918,1209.29 680.504,1209.77 681.091,1208.62 681.677,1211.79 682.264,1214.63 682.85,1213.21 683.436,1214.77 684.023,1215.78 684.609,1215.79 685.196,1219.57 685.782,1223.37 686.369,1221.69 686.955,1221.11 687.541,1223.02 688.128,1222.52 688.714,1222.14 689.301,1221.78 689.887,1222.96 690.473,1222.42 691.06,1221.88 691.646,1220.32 692.233,1219.87 692.819,1216.74 693.405,1216.5 693.992,1213.66 694.578,1214.99 695.165,1213.73 695.751,1214.9 696.338,1213.82 696.924,1213.6 697.51,1216.34 698.097,1214.88 698.683,1214.99 699.27,1213.66 699.856,1213.83 700.442,1209.83 701.029,1209.94 701.615,1210.04 702.202,1210.4 702.788,1210.31 703.375,1209.5 703.961,1209.6 704.547,1212.22 705.134,1213.57 705.72,1213.68 706.307,1219.11 706.893,1218.97 707.479,1220.14 708.066,1220.02 708.652,1221.13 709.239,1220.88 709.825,1220.51 710.411,1220.04 710.998,1219.78 711.584,1217.84 712.171,1218.69 712.757,1218.24 713.344,1216.51 713.93,1216.59 714.516,1217.69 715.103,1218.82 715.689,1218.79 716.276,1217.29 716.862,1215.73 717.448,1215.49 718.035,1216.75 718.621,1214.96 719.208,1212.35 719.794,1215.26 720.38,1215.24 720.967,1215.24 721.553,1215.04 722.14,1216.41 722.726,1214.79 723.313,1214.46 723.899,1214.33 724.485,1213.1 725.072,1214.36 725.658,1215.53 726.245,1216.88 726.831,1215.59 727.417,1214.19 728.004,1213.98 728.59,1215.04 729.177,1214.65 729.763,1208.94 730.349,1211.88 730.936,1212 731.522,1211.91 732.109,1212.34 732.695,1206.96 733.282,1207.33 733.868,1206.45 734.454,1206.74 735.041,1206.87 735.627,1208.79 736.214,1210.29 736.8,1211.49 737.386,1211.54 737.973,1211.63 738.559,1210.56 739.146,1210.48 739.732,1210.59 740.318,1209.41 740.905,1209.36 741.491,1208.2 742.078,1207.19 742.664,1207.46 743.251,1207.63 743.837,1207.9 744.423,1207.85 745.01,1206.91 745.596,1205.51 746.183,1207.15 746.769,1207.7 747.355,1207.96 747.942,1208.18 748.528,1211.16 749.115,1211.26 749.701,1212.61 750.288,1210.15 750.874,1210.55 751.46,1210.93 752.047,1211.14 752.633,1209.86 753.22,1207.48 753.806,1210.15 754.392,1213.01 754.979,1215.85 755.565,1215.41 756.152,1216.54 756.738,1217.66 757.324,1217.64 757.911,1215.93 758.497,1218.46 759.084,1217.97 759.67,1217.72 760.257,1218.68 760.843,1219.79 761.429,1217.92 762.016,1218.88 762.602,1216.84 763.189,1216.76 763.775,1215.08 764.361,1213.29 764.948,1213.26 765.534,1214.48 766.121,1214.42 766.707,1214.56 767.293,1213.26 767.88,1215.99 768.466,1218.51 769.053,1216.56 769.639,1220.02 770.226,1215.37 770.812,1213.94 771.398,1212.49 771.985,1212.33 772.571,1213.67 773.158,1216.09 773.744,1213.18 774.33,1210.1 774.917,1211.46 775.503,1211.49 776.09,1211.67 776.676,1210.38 777.262,1212.12 777.849,1212.11 778.435,1212.31 779.022,1214.83 779.608,1214.45 780.195,1212.77 780.781,1212.71 781.367,1217.95 781.954,1218.94 782.54,1219.93 783.127,1218.31 783.713,1216.27 784.299,1215.84 784.886,1215.31 785.472,1215.02 786.059,1216.19 786.645,1214.71 787.232,1214.46 787.818,1214.32 788.404,1214.26 788.991,1214.02 789.577,1213.82 790.164,1212.23 790.75,1214.92 791.336,1212.12 791.923,1212.13 792.509,1215.91 793.096,1215.54 793.682,1213.9 794.268,1215.05 794.855,1214.75 795.441,1214.33 796.028,1214.22 796.614,1215.56 797.201,1215.3 797.787,1212.36 798.373,1213.67 798.96,1212.18 799.546,1212.01 800.133,1213.33 800.719,1213.02 801.305,1214.32 801.892,1218.39 802.478,1218.06 803.065,1220.39 803.651,1221.1 804.237,1220.71 804.824,1219.84 805.41,1223.39 805.997,1224.07 806.583,1225.88 807.17,1226.52 807.756,1223.21 808.342,1222.6 808.929,1219.4 809.515,1217.57 810.102,1215.94 810.688,1217.2 811.274,1216.89 811.861,1217.93 812.447,1212.21 813.034,1209.7 813.62,1209.77 814.206,1209.79 814.793,1209.73 815.379,1209.93 815.966,1207.2 816.552,1207.21 817.139,1210.11 817.725,1211.41 818.311,1208.35 818.898,1212.53 819.484,1211.18 820.071,1212.52 820.657,1211.12 821.243,1212.54 821.83,1207 822.416,1205.67 823.003,1205.91 823.589,1202.09 824.175,1206.37 824.762,1206.27 825.348,1207.98 825.935,1209.56 826.521,1204.27 827.108,1203.46 827.694,1203.65 828.28,1202.54 828.867,1200.45 829.453,1200.92 830.04,1202.92 830.626,1203.38 831.212,1203.83 831.799,1206.91 832.385,1207.19 832.972,1208.96 833.558,1210.42 834.145,1210.34 834.731,1207.57 835.317,1207.63 835.904,1211.76 836.49,1212.02 837.077,1213.19 837.663,1212.72 838.249,1215.37 838.836,1213.57 839.422,1214.57 840.009,1214.12 840.595,1213.77 841.181,1214.86 841.768,1211.99 842.354,1210.65 842.941,1208.22 843.527,1208 844.114,1208.24 844.7,1208.27 845.286,1208.54 845.873,1206.12 846.459,1207.47 847.046,1207.77 847.632,1206.69 848.218,1208.53 848.805,1206.05 849.391,1207.69 849.978,1203.8 850.564,1202.73 851.15,1201.75 851.737,1201.05 852.323,1201.65 852.91,1202.25 853.496,1204.14 854.083,1207.01 854.669,1208.76 855.255,1211.22 855.842,1212.8 856.428,1210.01 857.015,1211.31 857.601,1212.84 858.187,1215.27 858.774,1216.2 859.36,1217.23 859.947,1218.48 860.533,1216.6 861.119,1216.14 861.706,1215.78 862.292,1215.71 862.879,1214.18 863.465,1212.93 864.052,1214.46 864.638,1215.88 865.224,1215.25 865.811,1214.91 866.397,1216.12 866.984,1214.14 867.57,1215.07 868.156,1214.97 868.743,1216.1 869.329,1214.08 869.916,1215.03 870.502,1216.19 871.089,1215.63 871.675,1217.9 872.261,1218.62 872.848,1217.95 873.434,1217.53 874.021,1217.22 874.607,1215.47 875.193,1216.8 875.78,1216.37 876.366,1217.26 876.953,1215.78 877.539,1215.42 878.125,1216.54 878.712,1217.62 879.298,1221.22 879.885,1220.61 880.471,1220.07 881.058,1220.53 881.644,1219.49 882.23,1219.9 882.817,1224.69 883.403,1222.59 883.99,1221.69 884.576,1216.81 885.162,1214.25 885.749,1211.28 886.335,1211.06 886.922,1209.42 887.508,1206.72 888.094,1204.01 888.681,1201.96 889.267,1202.2 889.854,1205.17 890.44,1204.27 891.027,1204.64 891.613,1210.08 892.199,1209.99 892.786,1211.03 893.372,1207.91 893.959,1208.23 894.545,1209.47 895.131,1209.62 895.718,1209.75 896.304,1207.2 896.891,1205.92 897.477,1205.91 898.063,1211.25 898.65,1212.56 899.236,1212.51 899.823,1211.38 900.409,1210.14 900.996,1208.89 901.582,1211.62 902.168,1210.41 902.755,1212.01 903.341,1211.83 903.928,1210.33 904.514,1211.6 905.1,1208.37 905.687,1205.65 906.273,1206.04 906.86,1207.51 907.446,1210.12 908.032,1212.77 908.619,1212.38 909.205,1213.56 909.792,1210.55 910.378,1214.4 910.965,1212.68 911.551,1215.22 912.137,1213.67 912.724,1212.19 913.31,1212.07 913.897,1208 914.483,1205.72 915.069,1207.21 915.656,1207.3 916.242,1208.81 916.829,1210.23 917.415,1207.5 918.002,1209.06 918.588,1211.81 919.174,1211.74 919.761,1207.56 920.347,1206.31 920.934,1200.84 921.52,1200.29 922.106,1200.73 922.693,1203.83 923.279,1203.88 923.866,1202.9 924.452,1204.55 925.038,1204.82 925.625,1203.65 926.211,1203.6 926.798,1204.22 927.384,1205.69 927.971,1205.86 928.557,1205.87 929.143,1203.33 929.73,1203.59 930.316,1206.47 930.903,1206.59 931.489,1206.81 932.075,1206.88 932.662,1209.4 933.248,1209.38 933.835,1207.96 934.421,1206.85 935.007,1209.55 935.594,1208.16 936.18,1205.58 936.767,1204.49 937.353,1203.3 937.94,1202.46 938.526,1202.99 939.112,1204.78 939.699,1205.06 940.285,1205.33 940.872,1206.95 941.458,1207.07 942.044,1204.55 942.631,1204.79 943.217,1203.84 943.804,1204.33 944.39,1204.21 944.976,1205.57 945.563,1203.15 946.149,1203.44 946.736,1205.06 947.322,1202.69 947.909,1204.48 948.495,1206.17 949.081,1206.61 949.668,1206.81 950.254,1206.83 950.841,1207.02 951.427,1207.46 952.013,1204.82 952.6,1202.25 953.186,1196.91 953.773,1196.24 954.359,1195.63 954.945,1196.42 955.532,1198.42 956.118,1199.01 956.705,1198.21 957.291,1198.78 957.878,1200.73 958.464,1201.05 959.05,1201.31 959.637,1203 960.223,1203.29 960.81,1203.36 961.396,1202.35 961.982,1205.21 962.569,1206.9 963.155,1208.57 963.742,1209.95 964.328,1210.29 964.915,1208.94 965.501,1211.86 966.087,1209.12 966.674,1207.96 967.26,1206.68 967.847,1211.93 968.433,1214.54 969.019,1214.34 969.606,1215.29 970.192,1214.77 970.779,1215.68 971.365,1213.51 971.951,1210.44 972.538,1210.21 973.124,1211.45 973.711,1212.56 974.297,1213.66 974.884,1213.34 975.47,1210.64 976.056,1205.33 976.643,1206.77 977.229,1206.92 977.816,1206.76 978.402,1208.01 978.988,1206.7 979.575,1206.8 980.161,1208.08 980.748,1209.29 981.334,1209.29 981.92,1211.61 982.507,1210.02 983.093,1211.35 983.68,1210.27 984.266,1208.86 984.853,1211.55 985.439,1211.2 986.025,1209.49 986.612,1210.85 987.198,1212.04 987.785,1210.56 988.371,1210.41 988.957,1210.32 989.544,1211.55 990.13,1210.07 990.717,1209.94 991.303,1208.55 991.889,1208.59 992.476,1207.39 993.062,1208.83 993.649,1211.64 994.235,1213.15 994.822,1212.77 995.408,1211.24 995.994,1210.93 996.581,1213.38 997.167,1212.97 997.754,1212.9 998.34,1212.77 998.926,1213.72 999.513,1213.33 1000.1,1211.86 1000.69,1211.91 1001.27,1210.23 1001.86,1206.12 1002.44,1203.64 1003.03,1202.52 1003.62,1204.19 1004.2,1204.43 1004.79,1203.39 1005.38,1203.51 1005.96,1203.66 1006.55,1206.85 1007.14,1206.81 1007.72,1201.61 1008.31,1206.09 1008.9,1208.96 1009.48,1208.95 1010.07,1207.73 1010.65,1207.7 1011.24,1209.26 1011.83,1209.33 1012.41,1209.5 1013,1210.62 1013.59,1209.28 1014.17,1210.41 1014.76,1211.78 1015.35,1213.01 1015.93,1212.85 1016.52,1211.39 1017.11,1213.84 1017.69,1211.88 1018.28,1211.82 1018.86,1211.87 1019.45,1212.88 1020.04,1212.67 1020.62,1211.12 1021.21,1212.27 1021.8,1212.15 1022.38,1214.64 1022.97,1215.49 1023.56,1215.01 1024.14,1216.03 1024.73,1219.75 1025.32,1215.03 1025.9,1213.55 1026.49,1213.38 1027.07,1213.14 1027.66,1214.16 1028.25,1216.49 1028.83,1213.7 1029.42,1214.47 1030.01,1211.47 1030.59,1208.55 1031.18,1208.34 1031.77,1208.44 1032.35,1204.25 1032.94,1204.3 1033.52,1205.97 1034.11,1207.58 1034.7,1203.77 1035.28,1209.56 1035.87,1206.73 1036.46,1207.18 1037.04,1208.73 1037.63,1208.78 1038.22,1207.56 1038.8,1208.94 1039.39,1207.35 1039.98,1208.63 1040.56,1208.86 1041.15,1208.95 1041.73,1210.15 1042.32,1209.96 1042.91,1209.77 1043.49,1211.14 1044.08,1216.26 1044.67,1216.07 1045.25,1215.49 1045.84,1213.91 1046.43,1213.4 1047.01,1212.92 1047.6,1215.62 1048.19,1214.05 1048.77,1212.67 1049.36,1209.71 1049.94,1208.4 1050.53,1205.35 1051.12,1208.12 1051.7,1209.22 1052.29,1210.62 1052.88,1210.44 1053.46,1211.81 1054.05,1211.85 1054.64,1211.71 1055.22,1213.1 1055.81,1212.83 1056.39,1212.83 1056.98,1213.66 1057.57,1213.57 1058.15,1213.36 1058.74,1213.17 1059.33,1210.19 1059.91,1214 1060.5,1215.16 1061.09,1215.06 1061.67,1216.31 1062.26,1217.05 1062.85,1219.16 1063.43,1218.67 1064.02,1220.98 1064.6,1217.75 1065.19,1217.44 1065.78,1219.49 1066.36,1223.08 1066.95,1223.45 1067.54,1222.5 1068.12,1218.95 1068.71,1217.21 1069.3,1215.2 1069.88,1216.11 1070.47,1218.29 1071.06,1216.13 1071.64,1214.29 1072.23,1215.21 1072.81,1214.62 1073.4,1211.78 1073.99,1209.03 1074.57,1208.94 1075.16,1205.94 1075.75,1204.63 1076.33,1204.68 1076.92,1203.63 1077.51,1202.46 1078.09,1204.21 1078.68,1205.75 1079.26,1203.04 1079.85,1199.45 1080.44,1202.72 1081.02,1205.89 1081.61,1205.99 1082.2,1210.26 1082.78,1211.5 1083.37,1212.49 1083.96,1208.45 1084.54,1207.35 1085.13,1207.53 1085.72,1206.21 1086.3,1207.4 1086.89,1205.04 1087.47,1205.19 1088.06,1202.83 1088.65,1199.27 1089.23,1200.01 1089.82,1199.19 1090.41,1198.35 1090.99,1198.65 1091.58,1198.02 1092.17,1197.16 1092.75,1196.32 1093.34,1197.07 1093.93,1196.19 1094.51,1196.61 1095.1,1197.52 1095.68,1199.62 1096.27,1198.81 1096.86,1199.65 1097.44,1200.22 1098.03,1202.08 1098.62,1202.4 1099.2,1201.25 1099.79,1204.4 1100.38,1208.32 1100.96,1208.39 1101.55,1205.5 1102.14,1203.13 1102.72,1204.82 1103.31,1209.19 1103.89,1207.87 1104.48,1208.02 1105.07,1208.26 1105.65,1208.21 1106.24,1209.43 1106.83,1209.14 1107.41,1207.7 1108,1208.99 1108.59,1208.89 1109.17,1206.48 1109.76,1205.21 1110.34,1201.27 1110.93,1205.87 1111.52,1206.37 1112.1,1207.93 1112.69,1207.91 1113.28,1209.53 1113.86,1205.4 1114.45,1205.5 1115.04,1205.78 1115.62,1205.85 1116.21,1205.92 1116.8,1205.93 1117.38,1206.24 1117.97,1207.62 1118.55,1206.42 1119.14,1209.13 1119.73,1212.07 1120.31,1212 1120.9,1212.78 1121.49,1211.12 1122.07,1209.73 1122.66,1209.55 1123.25,1210.95 1123.83,1211.13 1124.42,1212.54 1125.01,1213.9 1125.59,1213.55 1126.18,1213.43 1126.76,1211.96 1127.35,1210.42 1127.94,1210.93 1128.52,1210.96 1129.11,1210.78 1129.7,1210.46 1130.28,1211.69 1130.87,1212.69 1131.46,1211.26 1132.04,1209.66 1132.63,1209.39 1133.21,1209.27 1133.8,1209.36 1134.39,1210.57 1134.97,1211.84 1135.56,1210.57 1136.15,1213.09 1136.73,1212.92 1137.32,1212.78 1137.91,1212.45 1138.49,1211.96 1139.08,1210.49 1139.67,1207.82 1140.25,1205.03 1140.84,1204.94 1141.42,1205.34 1142.01,1206.9 1142.6,1204.38 1143.18,1204.57 1143.77,1206.06 1144.36,1206.08 1144.94,1206.11 1145.53,1204.8 1146.12,1203.47 1146.7,1206.7 1147.29,1209.51 1147.88,1209.36 1148.46,1209.58 1149.05,1209.72 1149.63,1208.4 1150.22,1209.86 1150.81,1209.74 1151.39,1208.18 1151.98,1208.38 1152.57,1209.8 1153.15,1208.37 1153.74,1206.96 1154.33,1207.11 1154.91,1208.62 1155.5,1207.15 1156.09,1208.21 1156.67,1209.67 1157.26,1209.48 1157.84,1209.12 1158.43,1213.16 1159.02,1212.83 1159.6,1210.36 1160.19,1210.13 1160.78,1207.3 1161.36,1205.93 1161.95,1207.4 1162.54,1209.9 1163.12,1209.74 1163.71,1209.8 1164.29,1210.78 1164.88,1209.18 1165.47,1207.61 1166.05,1207.38 1166.64,1208.72 1167.23,1207.51 1167.81,1208.8 1168.4,1210 1168.99,1208.68 1169.57,1207.5 1170.16,1208.86 1170.75,1212.62 1171.33,1212.47 1171.92,1210.93 1172.5,1214.8 1173.09,1214.54 1173.68,1213.89 1174.26,1215.68 1174.85,1215.3 1175.44,1214.83 1176.02,1214.94 1176.61,1213.37 1177.2,1213.13 1177.78,1212.88 1178.37,1210 1178.96,1209.8 1179.54,1211.28 1180.13,1208.77 1180.71,1208.44 1181.3,1208.5 1181.89,1204.58 1182.47,1206.35 1183.06,1206.43 1183.65,1203.86 1184.23,1203.1 1184.82,1203.79 1185.41,1206.83 1185.99,1200.36 1186.58,1202.45 1187.16,1198.91 1187.75,1196.81 1188.34,1198.86 1188.92,1202.03 1189.51,1203.54 1190.1,1206.56 1190.68,1205.19 1191.27,1206.79 1191.86,1208.38 1192.44,1207.09 1193.03,1207.1 1193.62,1208.67 1194.2,1206.77 1194.79,1208.14 1195.37,1210.76 1195.96,1213.22 1196.55,1214.62 1197.13,1212.48 1197.72,1210.7 1198.31,1210.49 1198.89,1209.18 1199.48,1210.65 1200.07,1211.81 1200.65,1211.6 1201.24,1208.75 1201.83,1211.73 1202.41,1213 1203,1211.4 1203.58,1212.76 1204.17,1212.1 1204.76,1214.57 1205.34,1215.67 1205.93,1216.69 1206.52,1217.36 1207.1,1215.52 1207.69,1216.68 1208.28,1216.3 1208.86,1215.97 1209.45,1214.09 1210.03,1213.83 1210.62,1214.88 1211.21,1214.75 1211.79,1213.07 1212.38,1211.83 1212.97,1208.79 1213.55,1208.59 1214.14,1205.89 1214.73,1206.9 1215.31,1206.93 1215.9,1207.3 1216.49,1207.3 1217.07,1208.89 1217.66,1209.72 1218.24,1213.7 1218.83,1214.56 1219.42,1214.13 1220,1215.19 1220.59,1213.63 1221.18,1212.09 1221.76,1213.28 1222.35,1215.44 1222.94,1213.81 1223.52,1213.56 1224.11,1212.19 1224.7,1206.58 1225.28,1206.57 1225.87,1207.86 1226.45,1210.55 1227.04,1208.89 1227.63,1207.61 1228.21,1206.38 1228.8,1203.82 1229.39,1207.93 1229.97,1206.66 1230.56,1205.32 1231.15,1205.2 1231.73,1205.22 1232.32,1203.97 1232.91,1205.66 1233.49,1207.24 1234.08,1207.19 1234.66,1207.07 1235.25,1205.64 1235.84,1207.24 1236.42,1207.26 1237.01,1204.79 1237.6,1205.24 1238.18,1205.32 1238.77,1208.12 1239.36,1209.4 1239.94,1210.81 1240.53,1207.91 1241.11,1207.53 1241.7,1207.74 1242.29,1206.35 1242.87,1206.36 1243.46,1206.34 1244.05,1206.39 1244.63,1205.15 1245.22,1205.56 1245.81,1203.14 1246.39,1203.34 1246.98,1202.27 1247.57,1203.74 1248.15,1199.82 1248.74,1200.06 1249.32,1200.85 1249.91,1199.77 1250.5,1204.29 1251.08,1208.55 1251.67,1214.05 1252.26,1214.73 1252.84,1214.45 1253.43,1208.79 1254.02,1212.54 1254.6,1212.38 1255.19,1212.27 1255.78,1208.21 1256.36,1205.64 1256.95,1200.85 1257.53,1198.71 1258.12,1196.34 1258.71,1198.34 1259.29,1200.61 1259.88,1199.55 1260.47,1202.74 1261.05,1204.25 1261.64,1209.76 1262.23,1204.26 1262.81,1204.51 1263.4,1206.28 1263.98,1206.45 1264.57,1203.97 1265.16,1206.85 1265.74,1205.58 1266.33,1206.86 1266.92,1204.47 1267.5,1205.86 1268.09,1205.84 1268.68,1207.34 1269.26,1204.52 1269.85,1205.84 1270.44,1205.79 1271.02,1204.83 1271.61,1201.09 1272.19,1205.59 1272.78,1206.97 1273.37,1208.4 1273.95,1209.82 1274.54,1210.86 1275.13,1212.22 1275.71,1213.36 1276.3,1214.13 1276.89,1215.03 1277.47,1217.18 1278.06,1218.04 1278.65,1216.14 1279.23,1215.83 1279.82,1218.08 1280.4,1216.37 1280.99,1213.27 1281.58,1212.9 1282.16,1213.08 1282.75,1213.75 1283.34,1214.66 1283.92,1213.07 1284.51,1212.7 1285.1,1216.39 1285.68,1214.68 1286.27,1210.04 1286.86,1211.11 1287.44,1209.26 1288.03,1206.5 1288.61,1207.58 1289.2,1210.39 1289.79,1210.42 1290.37,1207.54 1290.96,1210.22 1291.55,1209.89 1292.13,1211.43 1292.72,1212.7 1293.31,1209.67 1293.89,1209.61 1294.48,1214.33 1295.06,1214.03 1295.65,1216.56 1296.24,1214.7 1296.82,1212.95 1297.41,1210.92 1298,1210.7 1298.58,1210.55 1299.17,1207.74 1299.76,1205.16 1300.34,1205.18 1300.93,1207.63 1301.52,1206.04 1302.1,1208.95 1302.69,1207.48 1303.27,1210.08 1303.86,1206.06 1304.45,1206 1305.03,1204.54 1305.62,1208.83 1306.21,1209.75 1306.79,1209.65 1307.38,1208.22 1307.97,1206.65 1308.55,1205.39 1309.14,1200.29 1309.73,1201.84 1310.31,1200.66 1310.9,1202.62 1311.48,1201.63 1312.07,1199.36 1312.66,1200.01 1313.24,1201.86 1313.83,1199.61 1314.42,1199.02 1315,1195.47 1315.59,1195.98 1316.18,1196.5 1316.76,1197.17 1317.35,1193.9 1317.93,1194.37 1318.52,1192.61 1319.11,1190.73 1319.69,1194.29 1320.28,1193.84 1320.87,1191.9 1321.45,1191.28 1322.04,1192.53 1322.63,1196.11 1323.21,1195.52 1323.8,1196.47 1324.39,1198.27 1324.97,1200.22 1325.56,1202.14 1326.14,1201.28 1326.73,1201.82 1327.32,1202.54 1327.9,1201.72 1328.49,1207.56 1329.08,1207.43 1329.66,1210.03 1330.25,1207.3 1330.84,1206.17 1331.42,1205.31 1332.01,1202.62 1332.6,1204.31 1333.18,1203.34 1333.77,1203.44 1334.35,1202.38 1334.94,1206.94 1335.53,1207.31 1336.11,1207.44 1336.7,1207.44 1337.29,1209.34 1337.87,1210.58 1338.46,1210.36 1339.05,1208.98 1339.63,1207.84 1340.22,1206.81 1340.8,1210.95 1341.39,1209.44 1341.98,1210.68 1342.56,1210.33 1343.15,1210.32 1343.74,1212.95 1344.32,1213.96 1344.91,1216.26 1345.5,1215.7 1346.08,1214.14 1346.67,1215.64 1347.26,1215.17 1347.84,1212.17 1348.43,1212.19 1349.01,1213.04 1349.6,1213.88 1350.19,1213.88 1350.77,1213.66 1351.36,1211.82 1351.95,1213.49 1352.53,1212.9 1353.12,1212.5 1353.71,1211.27 1354.29,1210.85 1354.88,1209.18 1355.47,1210.67 1356.05,1209.1 1356.64,1208.95 1357.22,1210.31 1357.81,1212.71 1358.4,1212.32 1358.98,1212.07 1359.57,1211.96 1360.16,1208.75 1360.74,1205.83 1361.33,1207.45 1361.92,1207.44 1362.5,1206.23 1363.09,1204.79 1363.68,1207.74 1364.26,1205.29 1364.85,1205.26 1365.43,1206.53 1366.02,1203.49 1366.61,1206.51 1367.19,1205.37 1367.78,1203.99 1368.37,1204.45 1368.95,1210.11 1369.54,1209.96 1370.13,1209.97 1370.71,1209.79 1371.3,1210.85 1371.88,1211.77 1372.47,1208.68 1373.06,1210.15 1373.64,1211.44 1374.23,1208.43 1374.82,1209.71 1375.4,1211.01 1375.99,1210.66 1376.58,1210.66 1377.16,1210.6 1377.75,1211.85 1378.34,1210.34 1378.92,1212.87 1379.51,1213.97 1380.09,1215.1 1380.68,1214.73 1381.27,1212.89 1381.85,1211.33 1382.44,1212.48 1383.03,1209.41 1383.61,1210.69 1384.2,1209.61 1384.79,1208.33 1385.37,1205.47 1385.96,1206.9 1386.55,1204.23 1387.13,1201.66 1387.72,1203.25 1388.3,1203.34 1388.89,1202.21 1389.48,1204.85 1390.06,1206.33 1390.65,1206.68 1391.24,1204 1391.82,1204.11 1392.41,1202.73 1393,1204.43 1393.58,1205.8 1394.17,1206.01 1394.75,1210.22 1395.34,1212.84 1395.93,1212.74 1396.51,1215.34 1397.1,1212.51 1397.69,1212.71 1398.27,1209.75 1398.86,1211.02 1399.45,1210.91 1400.03,1209.3 1400.62,1212.31 1401.21,1209.55 1401.79,1209.43 1402.38,1213.36 1402.96,1211.67 1403.55,1211.59 1404.14,1210.07 1404.72,1211.38 1405.31,1212.81 1405.9,1215.37 1406.48,1214.94 1407.07,1214.57 1407.66,1214.4 1408.24,1215.3 1408.83,1215.07 1409.42,1213.52 1410,1210.48 1410.59,1210.37 1411.17,1206.16 1411.76,1209.01 1412.35,1206.47 1412.93,1202.62 1413.52,1200.13 1414.11,1199.28 1414.69,1201.03 1415.28,1201.42 1415.87,1202.03 1416.45,1201.21 1417.04,1197.53 1417.63,1197.94 1418.21,1198.56 1418.8,1200.39 1419.38,1199.54 1419.97,1198.66 1420.56,1197.72 1421.14,1198.41 1421.73,1199.15 1422.32,1198.31 1422.9,1198.79 1423.49,1198.14 1424.08,1198.71 1424.66,1200.35 1425.25,1200.58 1425.83,1199.48 1426.42,1199.8 1427.01,1200.25 1427.59,1200.98 1428.18,1204.19 1428.77,1204.33 1429.35,1202.14 1429.94,1201.09 1430.53,1202.64 1431.11,1204.16 1431.7,1204.47 1432.29,1203.06 1432.87,1204.68 1433.46,1203.76 1434.04,1204.16 1434.63,1204.46 1435.22,1207.36 1435.8,1208.66 1436.39,1207.3 1436.98,1204.38 1437.56,1204.45 1438.15,1205.84 1438.74,1206.07 1439.32,1206.35 1439.91,1206.63 1440.5,1207.01 1441.08,1208.66 1441.67,1208.51 1442.25,1207.18 1442.84,1208.75 1443.43,1208.88 1444.01,1209.96 1444.6,1210.98 1445.19,1210.92 1445.77,1210.82 1446.36,1210.52 1446.95,1210.48 1447.53,1210.27 1448.12,1211.47 1448.7,1210.08 1449.29,1211.38 1449.88,1205.89 1450.46,1204.53 1451.05,1204.64 1451.64,1202.34 1452.22,1204.38 1452.81,1204.18 1453.4,1202.92 1453.98,1204.54 1454.57,1208.54 1455.16,1205.89 1455.74,1207.14 1456.33,1207.14 1456.91,1207.12 1457.5,1209.75 1458.09,1208.43 1458.67,1208.56 1459.26,1206.09 1459.85,1202.23 1460.43,1203.76 1461.02,1205.38 1461.61,1205.57 1462.19,1207.02 1462.78,1207.2 1463.37,1205.98 1463.95,1206.04 1464.54,1206.17 1465.12,1210.12 1465.71,1210.97 1466.3,1210.53 1466.88,1213.16 1467.47,1211.38 1468.06,1208.38 1468.64,1210.89 1469.23,1210.42 1469.82,1211.77 1470.4,1211.81 1470.99,1214.33 1471.57,1215.31 1472.16,1215 1472.75,1210.53 1473.33,1212.85 1473.92,1212.66 1474.51,1215.01 1475.09,1214.48 1475.68,1215.52 1476.27,1213.75 1476.85,1213.48 1477.44,1214.68 1478.03,1211.63 1478.61,1212.67 1479.2,1211.01 1479.78,1212.14 1480.37,1213.09 1480.96,1211.54 1481.54,1211.36 1482.13,1210.88 1482.72,1208.01 1483.3,1209.38 1483.89,1207.99 1484.48,1207.99 1485.06,1207.68 1485.65,1207.53 1486.24,1207.59 1486.82,1207.81 1487.41,1207.83 1487.99,1209.21 1488.58,1207.49 1489.17,1207.56 1489.75,1207.31 1490.34,1208.88 1490.93,1211.74 1491.51,1213.17 1492.1,1212.82 1492.69,1209.69 1493.27,1209.49 1493.86,1207.88 1494.45,1207.95 1495.03,1207.85 1495.62,1209.16 1496.2,1208.87 1496.79,1208.65 1497.38,1208.48 1497.96,1208.32 1498.55,1209.82 1499.14,1206.76 1499.72,1208.16 1500.31,1209.34 1500.9,1209.44 1501.48,1207.76 1502.07,1210.33 1502.65,1211.58 1503.24,1208.7 1503.83,1209.89 1504.41,1210.78 1505,1210.64 1505.59,1207.95 1506.17,1208.89 1506.76,1208.83 1507.35,1211.24 1507.93,1210.83 1508.52,1211.91 1509.11,1213.3 1509.69,1211.44 1510.28,1212.33 1510.86,1210.77 1511.45,1209.06 1512.04,1208.89 1512.62,1208.75 1513.21,1205.97 1513.8,1207.54 1514.38,1207.77 1514.97,1207.76 1515.56,1207.68 1516.14,1207.85 1516.73,1207.75 1517.32,1209.19 1517.9,1209 1518.49,1205 1519.07,1205.05 1519.66,1209.36 1520.25,1209.59 1520.83,1206.92 1521.42,1208.52 1522.01,1207.23 1522.59,1209.9 1523.18,1207.06 1523.77,1205.73 1524.35,1207.42 1524.94,1206.24 1525.52,1207.66 1526.11,1206.38 1526.7,1206.62 1527.28,1202.71 1527.87,1203.09 1528.46,1203.26 1529.04,1206.36 1529.63,1207.79 1530.22,1207.62 1530.8,1209.16 1531.39,1209.31 1531.98,1211.95 1532.56,1213.1 1533.15,1212.91 1533.73,1212.61 1534.32,1211.6 1534.91,1210.02 1535.49,1211.45 1536.08,1211.51 1536.67,1209.77 1537.25,1208.15 1537.84,1208.54 1538.43,1205.76 1539.01,1207.21 1539.6,1204.73 1540.19,1205.1 1540.77,1206.52 1541.36,1206.5 1541.94,1207.81 1542.53,1206.75 1543.12,1207.91 1543.7,1209.54 1544.29,1213.83 1544.88,1216.01 1545.46,1218.26 1546.05,1214.83 1546.64,1213.16 1547.22,1211.5 1547.81,1212.62 1548.4,1209.99 1548.98,1210.01 1549.57,1207.41 1550.15,1208.78 1550.74,1210.02 1551.33,1207.28 1551.91,1209.8 1552.5,1209.6 1553.09,1210.66 1553.67,1209.07 1554.26,1209.18 1554.85,1212 1555.43,1210.39 1556.02,1212.83 1556.6,1212.39 1557.19,1210.65 1557.78,1210.1 1558.36,1212.53 1558.95,1213.56 1559.54,1211.58 1560.12,1212.78 1560.71,1208.39 1561.3,1205.66 1561.88,1204.44 1562.47,1208.71 1563.06,1207.28 1563.64,1207.47 1564.23,1207.12 1564.81,1208.38 1565.4,1209.95 1565.99,1209.83 1566.57,1209.62 1567.16,1209.6 1567.75,1212.14 1568.33,1209.36 1568.92,1208.13 1569.51,1210.86 1570.09,1209.57 1570.68,1210.55 1571.27,1208.99 1571.85,1210.31 1572.44,1208.99 1573.02,1209.08 1573.61,1207.46 1574.2,1208.8 1574.78,1212.82 1575.37,1211.05 1575.96,1212.42 1576.54,1209.26 1577.13,1210.39 1577.72,1210.6 1578.3,1211.72 1578.89,1214.25 1579.47,1212.56 1580.06,1209.71 1580.65,1205.62 1581.23,1204.33 1581.82,1205.78 1582.41,1208.8 1582.99,1207.37 1583.58,1203.41 1584.17,1203.7 1584.75,1204.12 1585.34,1202.95 1585.93,1204.54 1586.51,1206.18 1587.1,1207.75 1587.68,1207.46 1588.27,1206.58 1588.86,1209.07 1589.44,1209.4 1590.03,1213.23 1590.62,1217.07 1591.2,1218.94 1591.79,1218.39 1592.38,1219.35 1592.96,1218.35 1593.55,1218.22 1594.14,1219.06 1594.72,1218.52 1595.31,1217.93 1595.89,1217.25 1596.48,1220.34 1597.07,1217.32 1597.65,1214.14 1598.24,1212.53 1598.83,1214.66 1599.41,1212.78 1600,1212.45 1600.59,1212.09 1601.17,1210.46 1601.76,1209.13 1602.34,1208.94 1602.93,1208.58 1603.52,1209.93 1604.1,1209.42 1604.69,1207.97 1605.28,1209.44 1605.86,1210.83 1606.45,1209.55 1607.04,1208.09 1607.62,1208.16 1608.21,1206.6 1608.8,1207.92 1609.38,1208.01 1609.97,1206.76 1610.55,1207.19 1611.14,1207.36 1611.73,1205.99 1612.31,1206.04 1612.9,1204.93 1613.49,1205.14 1614.07,1206.5 1614.66,1205.28 1615.25,1207.13 1615.83,1204.39 1616.42,1203.34 1617.01,1203.42 1617.59,1203.73 1618.18,1206.42 1618.76,1206.63 1619.35,1205.6 1619.94,1205.71 1620.52,1205.87 1621.11,1207.38 1621.7,1206.25 1622.28,1205.02 1622.87,1205.18 1623.46,1204.97 1624.04,1208.78 1624.63,1211.42 1625.22,1204.38 1625.8,1203.23 1626.39,1206.26 1626.97,1204.98 1627.56,1207.83 1628.15,1207.78 1628.73,1209.17 1629.32,1208.84 1629.91,1209.9 1630.49,1211.15 1631.08,1209.7 1631.67,1212.53 1632.25,1209.91 1632.84,1209.53 1633.42,1207.81 1634.01,1209.23 1634.6,1207.85 1635.18,1206.84 1635.77,1205.68 1636.36,1204.39 1636.94,1203.08 1637.53,1203.5 1638.12,1202.72 1638.7,1202.81 1639.29,1204.44 1639.88,1204.64 1640.46,1203.5 1641.05,1202.72 1641.63,1204.34 1642.22,1204.7 1642.81,1204.85 1643.39,1206.41 1643.98,1209.32 1644.57,1213.23 1645.15,1212.66 1645.74,1213.69 1646.33,1215.01 1646.91,1216.19 1647.5,1215.74 1648.09,1217.95 1648.67,1214.94 1649.26,1214.45 1649.84,1213 1650.43,1213.09 1651.02,1215.58 1651.6,1215.08 1652.19,1214.82 1652.78,1214.47 1653.36,1212.56 1653.95,1209.63 1654.54,1207.09 1655.12,1207.12 1655.71,1205.91 1656.29,1204.81 1656.88,1206.19 1657.47,1205.93 1658.05,1205.87 1658.64,1209.92 1659.23,1207.36 1659.81,1207.49 1660.4,1204.9 1660.99,1206.15 1661.57,1205.98 1662.16,1207.29 1662.75,1208.63 1663.33,1207.16 1663.92,1207.12 1664.5,1205.82 1665.09,1205.82 1665.68,1205.85 1666.26,1203.34 1666.85,1203.87 1667.44,1203.95 1668.02,1204.26 1668.61,1204.28 1669.2,1202.98 1669.78,1203.16 1670.37,1204.72 1670.96,1204.86 1671.54,1204.93 1672.13,1206.66 1672.71,1204.06 1673.3,1205.87 1673.89,1204.57 1674.47,1204.82 1675.06,1205.2 1675.65,1202.28 1676.23,1204.15 1676.82,1207.13 1677.41,1205.95 1677.99,1207.28 1678.58,1207.36 1679.17,1207.21 1679.75,1207.12 1680.34,1209.67 1680.92,1209.46 1681.51,1209.32 1682.1,1209.01 1682.68,1213.07 1683.27,1211.6 1683.86,1209.9 1684.44,1208.5 1685.03,1207.16 1685.62,1203.49 1686.2,1202.44 1686.79,1202.9 1687.37,1201.77 1687.96,1202.32 1688.55,1205.53 1689.13,1208.07 1689.72,1208.2 1690.31,1210.77 1690.89,1210.62 1691.48,1211.65 1692.07,1210.07 1692.65,1209.66 1693.24,1211.03 1693.83,1209.47 1694.41,1209.65 1695,1209.39 1695.58,1209.37 1696.17,1206.78 1696.76,1207.04 1697.34,1206.07 1697.93,1203.19 1698.52,1203.76 1699.1,1206.63 1699.69,1206.97 1700.28,1203.12 1700.86,1204.8 1701.45,1203.84 1702.04,1206.51 1702.62,1203.69 1703.21,1201.1 1703.79,1201.44 1704.38,1197.53 1704.97,1196.8 1705.55,1197.38 1706.14,1200.67 1706.73,1200.75 1707.31,1201.01 1707.9,1200.25 1708.49,1202.02 1709.07,1203.94 1709.66,1203.07 1710.24,1204.58 1710.83,1202.14 1711.42,1203.68 1712,1205.42 1712.59,1205.53 1713.18,1202.77 1713.76,1202.86 1714.35,1203.31 1714.94,1205.05 1715.52,1205.22 1716.11,1206.54 1716.7,1206.99 1717.28,1205.96 1717.87,1208.78 1718.45,1211.32 1719.04,1212.33 1719.63,1212.01 1720.21,1210.48 1720.8,1207.6 1721.39,1207.75 1721.97,1209.09 1722.56,1210.36 1723.15,1211.4 1723.73,1208.82 1724.32,1207.24 1724.91,1208.75 1725.49,1205.99 1726.08,1210.24 1726.66,1214.05 1727.25,1210.96 1727.84,1210.84 1728.42,1210.66 1729.01,1209.15 1729.6,1205.05 1730.18,1202.41 1730.77,1202.55 1731.36,1206.74 1731.94,1208.11 1732.53,1208.22 1733.11,1206.73 1733.7,1202.56 1734.29,1204.08 1734.87,1202.89 1735.46,1201.5 1736.05,1200.43 1736.63,1203.78 1737.22,1205.56 1737.81,1207.27 1738.39,1204.7 1738.98,1206.48 1739.57,1208.95 1740.15,1208.95 1740.74,1210.14 1741.32,1210.09 1741.91,1208.79 1742.5,1207.49 1743.08,1207.5 1743.67,1207.71 1744.26,1207.8 1744.84,1210.6 1745.43,1210.71 1746.02,1212.06 1746.6,1211.39 1747.19,1208.48 1747.78,1209.61 1748.36,1207.14 1748.95,1207.34 1749.53,1209.98 1750.12,1208.67 1750.71,1208.76 1751.29,1208.56 1751.88,1208.55 1752.47,1208.33 1753.05,1208.41 1753.64,1208.34 1754.23,1205.39 1754.81,1207.88 1755.4,1208.95 1755.99,1207.48 1756.57,1208.99 1757.16,1208.62 1757.74,1207.31 1758.33,1207.29 1758.92,1205.69 1759.5,1208.5 1760.09,1205.92 1760.68,1208.74 1761.26,1210.03 1761.85,1211.57 1762.44,1212.91 1763.02,1215.74 1763.61,1215.42 1764.19,1213.78 1764.78,1210.76 1765.37,1208.97 1765.95,1210.06 1766.54,1211.39 1767.13,1215.3 1767.71,1212.48 1768.3,1213.53 1768.89,1214.55 1769.47,1214.37 1770.06,1214.03 1770.65,1212.08 1771.23,1211.71 1771.82,1211.43 1772.4,1209.88 1772.99,1212.42 1773.58,1215.91 1774.16,1214.07 1774.75,1215.07 1775.34,1217.35 1775.92,1216.46 1776.51,1214.69 1777.1,1214.16 1777.68,1209.9 1778.27,1211.03 1778.86,1208.08 1779.44,1206.53 1780.03,1206.47 1780.61,1206.39 1781.2,1204.91 1781.79,1202.3 1782.37,1200.07 1782.96,1196.41 1783.55,1196.98 1784.13,1197.43 1784.72,1199.06 1785.31,1203.43 1785.89,1203.78 1786.48,1203.84 1787.06,1202.63 1787.65,1201.65 1788.24,1202.1 1788.82,1202.22 1789.41,1203.69 1790,1206.45 1790.58,1205.21 1791.17,1205.34 1791.76,1205.56 1792.34,1206.85 1792.93,1205.6 1793.52,1201.62 1794.1,1200.39 1794.69,1202.03 1795.27,1199.66 1795.86,1200.34 1796.45,1200.79 1797.03,1200.15 1797.62,1203.16 1798.21,1205.86 1798.79,1207.47 1799.38,1206.57 1799.97,1206.47 1800.55,1203.99 1801.14,1207.05 1801.73,1210.2 1802.31,1210.17 1802.9,1210.19 1803.48,1208.87 1804.07,1208.83 1804.66,1210.42 1805.24,1211.72 1805.83,1211.67 1806.42,1212.99 1807,1208.67 1807.59,1208.62 1808.18,1206.31 1808.76,1204.88 1809.35,1205.07 1809.94,1207.77 1810.52,1209.12 1811.11,1209.07 1811.69,1210.66 1812.28,1208.04 1812.87,1208.19 1813.45,1205.64 1814.04,1203.13 1814.63,1202.3 1815.21,1202.47 1815.8,1200.2 1816.39,1201.86 1816.97,1200.74 1817.56,1202.17 1818.14,1199.86 1818.73,1201.75 1819.32,1201.76 1819.9,1202.22 1820.49,1203.86 1821.08,1205.44 1821.66,1205.46 1822.25,1208.02 1822.84,1208.14 1823.42,1209.76 1824.01,1207.11 1824.6,1207.14 1825.18,1204.51 1825.77,1202.16 1826.35,1203.74 1826.94,1204 1827.53,1203.99 1828.11,1205.3 1828.7,1207.21 1829.29,1206.22 1829.87,1206.21 1830.46,1208.91 1831.05,1208.89 1831.63,1210.38 1832.22,1208.92 1832.81,1208.72 1833.39,1206.14 1833.98,1204.84 1834.56,1205.96 1835.15,1206.14 1835.74,1203.38 1836.32,1203.48 1836.91,1201.01 1837.5,1202.66 1838.08,1202.83 1838.67,1207.33 1839.26,1207.6 1839.84,1207.8 1840.43,1206.21 1841.01,1206.23 1841.6,1204.68 1842.19,1203.48 1842.77,1203.58 1843.36,1205 1843.95,1205.12 1844.53,1205.28 1845.12,1206.77 1845.71,1209.44 1846.29,1210.66 1846.88,1211.57 1847.47,1210.2 1848.05,1208.87 1848.64,1206.36 1849.22,1205.01 1849.81,1205.35 1850.4,1206.84 1850.98,1207.1 1851.57,1205.76 1852.16,1204.86 1852.74,1202.46 1853.33,1202.53 1853.92,1202.9 1854.5,1201.79 1855.09,1201.07 1855.68,1198.98 1856.26,1198.21 1856.85,1198.72 1857.43,1199.22 1858.02,1201.18 1858.61,1201.51 1859.19,1200.55 1859.78,1201.16 1860.37,1200.27 1860.95,1201.78 1861.54,1206.03 1862.13,1206.05 1862.71,1204.92 1863.3,1206.73 1863.88,1206.96 1864.47,1208.27 1865.06,1204.14 1865.64,1205.64 1866.23,1204.46 1866.82,1205.85 1867.4,1205.9 1867.99,1204.74 1868.58,1206.14 1869.16,1207.47 1869.75,1206.08 1870.34,1207.19 1870.92,1207.11 1871.51,1207.21 1872.09,1208.6 1872.68,1210 1873.27,1208.58 1873.85,1208.19 1874.44,1209.47 1875.03,1212.13 1875.61,1207.53 1876.2,1205.82 1876.79,1209.91 1877.37,1211.1 1877.96,1211.23 1878.55,1213.9 1879.13,1216.49 1879.72,1216.06 1880.3,1217.13 1880.89,1216.95 1881.48,1217.88 1882.06,1217.35 1882.65,1218.29 1883.24,1220.44 1883.82,1221.39 1884.41,1220.82 1885,1221.68 1885.58,1221.88 1886.17,1219.77 1886.76,1219.04 1887.34,1217.18 1887.93,1212.86 1888.51,1212.44 1889.1,1210.87 1889.69,1212.04 1890.27,1210.19 1890.86,1210.37 1891.45,1211.32 1892.03,1207.15 1892.62,1204.48 1893.21,1205.8 1893.79,1205.93 1894.38,1208.76 1894.96,1207.56 1895.55,1206.4 1896.14,1206.49 1896.72,1206.82 1897.31,1208.14 1897.9,1209.54 1898.48,1211.89 1899.07,1211.76 1899.66,1215.69 1900.24,1214.26 1900.83,1214.06 1901.42,1213.94 1902,1216.38 1902.59,1218.64 1903.17,1218.02 1903.76,1216.33 1904.35,1217.11 1904.93,1216.32 1905.52,1214.65 1906.11,1214.28 1906.69,1212.58 1907.28,1210.86 1907.87,1210.51 1908.45,1211.48 1909.04,1211.41 1909.63,1211.33 1910.21,1209.77 1910.8,1209.78 1911.38,1208.19 1911.97,1209.66 1912.56,1207 1913.14,1206.92 1913.73,1206.78 1914.32,1204.28 1914.9,1204.6 1915.49,1204.92 1916.08,1202.33 1916.66,1202.85 1917.25,1203.03 1917.83,1203.29 1918.42,1207.48 1919.01,1204.7 1919.59,1203.7 1920.18,1204.83 1920.77,1206.05 1921.35,1207.39 1921.94,1207.19 1922.53,1208.68 1923.11,1207.29 1923.7,1208.84 1924.29,1208.55 1924.87,1209.51 1925.46,1209.24 1926.04,1207.91 1926.63,1206.88 1927.22,1207.19 1927.8,1209.93 1928.39,1209.72 1928.98,1208.34 1929.56,1206.96 1930.15,1208.39 1930.74,1209.58 1931.32,1213.39 1931.91,1213.4 1932.5,1210.28 1933.08,1208.83 1933.67,1210.31 1934.25,1210.02 1934.84,1212.71 1935.43,1212.37 1936.01,1215.02 1936.6,1214.71 1937.19,1215.55 1937.77,1213.89 1938.36,1213.94 1938.95,1213.81 1939.53,1214.75 1940.12,1214.42 1940.71,1215.51 1941.29,1212.46 1941.88,1210.76 1942.46,1209.51 1943.05,1210.65 1943.64,1213.26 1944.22,1211.67 1944.81,1208.85 1945.4,1208.67 1945.98,1208.55 1946.57,1208.38 1947.16,1206.05 1947.74,1208.65 1948.33,1206.19 1948.91,1206.31 1949.5,1203.62 1950.09,1198.3 1950.67,1198.72 1951.26,1201.55 1951.85,1202.97 1952.43,1201.51 1953.02,1203.11 1953.61,1205.7 1954.19,1204.49 1954.78,1205.97 1955.37,1207.54 1955.95,1208.88 1956.54,1207.41 1957.12,1208.8 1957.71,1208.66 1958.3,1207.18 1958.88,1209.89 1959.47,1209.76 1960.06,1208.55 1960.64,1207.27 1961.23,1205.87 1961.82,1203.7 1962.4,1205.47 1962.99,1205.47 1963.58,1204.05 1964.16,1201.88 1964.75,1202.22 1965.33,1204.01 1965.92,1208.17 1966.51,1210.72 1967.09,1209.18 1967.68,1206.66 1968.27,1202.79 1968.85,1203.02 1969.44,1201.81 1970.03,1199.56 1970.61,1199.79 1971.2,1202.75 1971.78,1201.78 1972.37,1204.91 1972.96,1206.33 1973.54,1207.99 1974.13,1210.43 1974.72,1208.79 1975.3,1209.9 1975.89,1209.61 1976.48,1208.23 1977.06,1207.06 1977.65,1206.96 1978.24,1204.39 1978.82,1204.65 1979.41,1201.95 1979.99,1202.13 1980.58,1205.2 1981.17,1205.41 1981.75,1202.88 1982.34,1203.38 1982.93,1203.37 1983.51,1203.42 1984.1,1202.32 1984.69,1202.79 1985.27,1206.98 1985.86,1211.27 1986.45,1212.34 1987.03,1212.11 1987.62,1211.88 1988.2,1211.57 1988.79,1210.11 1989.38,1209.89 1989.96,1210.95 1990.55,1207.8 1991.14,1207.41 1991.72,1208.76 1992.31,1207.44 1992.9,1207.44 1993.48,1212.94 1994.07,1215.16 1994.65,1210.64 1995.24,1209.13 1995.83,1210.75 1996.41,1211.92 1997,1211.6 1997.59,1210.03 1998.17,1210.12 1998.76,1212.7 1999.35,1211.21 1999.93,1209.68 2000.52,1209.62 2001.11,1209.43 2001.69,1211.98 2002.28,1214.39 2002.86,1216.84 2003.45,1216.32 2004.04,1217.12 2004.62,1219.67 2005.21,1217.67 2005.8,1217.13 2006.38,1217.98 2006.97,1217.04 2007.56,1220.42 2008.14,1217.17 2008.73,1215.26 2009.32,1216.18 2009.9,1215.74 2010.49,1217.77 2011.07,1217.22 2011.66,1219.1 2012.25,1217.16 2012.83,1210.16 2013.42,1210.06 2014.01,1211.22 2014.59,1209.57 2015.18,1204.06 2015.77,1209.61 2016.35,1210.6 2016.94,1209.17 2017.53,1206.39 2018.11,1206.45 2018.7,1204.96 2019.28,1201.28 2019.87,1205.48 2020.46,1202.85 2021.04,1201.78 2021.63,1200.66 2022.22,1198.31 2022.8,1197.45 2023.39,1198.23 2023.98,1200.16 2024.56,1197.81 2025.15,1200.26 2025.73,1202.08 2026.32,1202.34 2026.91,1204.11 2027.49,1205.84 2028.08,1207.2 2028.67,1207.53 2029.25,1207.23 2029.84,1207.35 2030.43,1206.26 2031.01,1207.54 2031.6,1208.86 2032.19,1210.3 2032.77,1211.55 2033.36,1212.82 2033.94,1212.64 2034.53,1211.31 2035.12,1208.55 2035.7,1208.45 2036.29,1208.42 2036.88,1208.46 2037.46,1208.39 2038.05,1208.45 2038.64,1205.54 2039.22,1206.83 2039.81,1206.92 2040.4,1201.6 2040.98,1199.45 2041.57,1202.42 2042.15,1203.12 2042.74,1200.68 2043.33,1201.29 2043.91,1201.81 2044.5,1199.41 2045.09,1198.61 2045.67,1199.1 2046.26,1200.89 2046.85,1200.15 2047.43,1201.95 2048.02,1204.93 2048.6,1206.58 2049.19,1206.69 2049.78,1208.13 2050.36,1208.05 2050.95,1206.7 2051.54,1206.42 2052.12,1206.3 2052.71,1206.25 2053.3,1206.46 2053.88,1205.43 2054.47,1205.71 2055.06,1205.99 2055.64,1208.69 2056.23,1206.19 2056.81,1203.59 2057.4,1206.61 2057.99,1206.69 2058.57,1205.18 2059.16,1203.91 2059.75,1204.15 2060.33,1204.44 2060.92,1201.75 2061.51,1196.89 2062.09,1196.15 2062.68,1199.36 2063.27,1202.47 2063.85,1204.29 2064.44,1206.03 2065.02,1202.4 2065.61,1203.9 2066.2,1202.69 2066.78,1203 2067.37,1206.01 2067.96,1204.96 2068.54,1207.81 2069.13,1207.77 2069.72,1207.93 2070.3,1209.14 2070.89,1210.65 2071.48,1210.21 2072.06,1210.37 2072.65,1211.57 2073.23,1215.26 2073.82,1214.74 2074.41,1212.94 2074.99,1213.91 2075.58,1215.26 2076.17,1213.54 2076.75,1213.13 2077.34,1213.01 2077.93,1215.37 2078.51,1214.86 2079.1,1213.24 2079.68,1214.42 2080.27,1214.19 2080.86,1213.75 2081.44,1216.31 2082.03,1219.48 2082.62,1219.05 2083.2,1217.19 2083.79,1215.61 2084.38,1214.07 2084.96,1215.04 2085.55,1214.85 2086.14,1213.09 2086.72,1212.46 2087.31,1210.73 2087.89,1210.59 2088.48,1209 2089.07,1208.86 2089.65,1208.78 2090.24,1208.91 2090.83,1208.78 2091.41,1207.3 2092,1208.59 2092.59,1208.58 2093.17,1210.05 2093.76,1211.34 2094.35,1211.17 2094.93,1209.42 2095.52,1211.89 2096.1,1211.82 2096.69,1210.17 2097.28,1208.73 2097.86,1208.87 2098.45,1207.59 2099.04,1207.81 2099.62,1207.78 2100.21,1208.95 2100.8,1207.38 2101.38,1208.92 2101.97,1208.95 2102.55,1207.32 2103.14,1207.3 2103.73,1209.8 2104.31,1209.69 2104.9,1210.91 2105.49,1208.12 2106.07,1206.64 2106.66,1207.18 2107.25,1204.6 2107.83,1205.11 2108.42,1210.77 2109.01,1209.22 2109.59,1210.8 2110.18,1210.7 2110.76,1209.32 2111.35,1209.32 2111.94,1210.51 2112.52,1209.19 2113.11,1207.51 2113.7,1202.25 2114.28,1202.28 2114.87,1201.42 2115.46,1202.99 2116.04,1203.53 2116.63,1205.03 2117.22,1205.23 2117.8,1206.32 2118.39,1206.1 2118.97,1206.28 2119.56,1211.72 2120.15,1213.04 2120.73,1212.79 2121.32,1212.51 2121.91,1210.77 2122.49,1210.48 2123.08,1210.6 2123.67,1210.29 2124.25,1209.24 2124.84,1210.78 2125.42,1210.68 2126.01,1207.96 2126.6,1207.92 2127.18,1209.28 2127.77,1211.62 2128.36,1212.7 2128.94,1213.58 2129.53,1214.81 2130.12,1216.02 2130.7,1214.51 2131.29,1214.08 2131.88,1210.95 2132.46,1210.84 2133.05,1210.4 2133.63,1211.64 2134.22,1211.23 2134.81,1211.3 2135.39,1208.27 2135.98,1206.82 2136.57,1208.14 2137.15,1208.14 2137.74,1206.91 2138.33,1206.87 2138.91,1208.36 2139.5,1208.26 2140.09,1207.07 2140.67,1208.57 2141.26,1208.53 2141.84,1207.15 2142.43,1207.09 2143.02,1205.89 2143.6,1207.26 2144.19,1209.98 2144.78,1208.43 2145.36,1206.89 2145.95,1208.31 2146.54,1207.11 2147.12,1204.55 2147.71,1204.62 2148.3,1203.19 2148.88,1203.45 2149.47,1203.64 2150.05,1202.97 2150.64,1201.69 2151.23,1201.85 2151.81,1203.27 2152.4,1202.32 2152.99,1206.71 2153.57,1208.17 2154.16,1208.08 2154.75,1209.63 2155.33,1212.18 2155.92,1210.76 2156.5,1210.75 2157.09,1210.78 2157.68,1212.29 2158.26,1213.48 \"/>\n<path clip-path=\"url(#clip752)\" d=\"M986.025 1208.59 L986.612 1208.59 L987.198 1208.59 L987.785 1208.59 L988.371 1208.59 L988.957 1208.59 L989.544 1208.59 L990.13 1208.59 L990.717 1208.59 L991.303 1208.59 L991.889 1208.59 L992.476 1208.59 L993.062 1208.59 L993.649 1208.59 L994.235 1208.59 L994.822 1208.59 L995.408 1208.59 L995.994 1208.59 L996.581 1208.59 L997.167 1208.59 L997.754 1208.59 L998.34 1208.59 L998.926 1208.59 L999.513 1208.59 L1000.1 1208.59 L1000.69 1208.59 L1001.27 1208.59 L1001.86 1208.59 L1002.44 1208.59 L1003.03 1208.59 L1003.62 1208.59 L1004.2 1208.59 L1004.79 1208.59 L1005.38 1208.59 L1005.96 1208.59 L1006.55 1208.59 L1007.14 1208.59 L1007.72 1208.59 L1008.31 1208.59 L1008.9 1208.59 L1009.48 1208.59 L1010.07 1208.59 L1010.65 1208.59 L1011.24 1208.59 L1011.83 1208.59 L1012.41 1208.59 L1013 1208.59 L1013.59 1208.59 L1014.17 1208.59 L1014.76 1208.59 L1015.35 1208.59 L1015.93 1208.59 L1016.52 1208.59 L1017.11 1208.59 L1017.69 1208.59 L1018.28 1208.59 L1018.86 1208.59 L1019.45 1208.59 L1020.04 1208.59 L1020.62 1208.59 L1021.21 1208.59 L1021.8 1208.59 L1022.38 1208.59 L1022.97 1208.59 L1023.56 1208.59 L1024.14 1208.59 L1024.73 1208.59 L1025.32 1208.59 L1025.9 1208.59 L1026.49 1208.59 L1027.07 1208.59 L1027.66 1208.59 L1028.25 1208.59 L1028.83 1208.59 L1029.42 1208.59 L1030.01 1208.59 L1030.59 1208.59 L1031.18 1208.59 L1031.77 1208.59 L1032.35 1208.59 L1032.94 1208.59 L1033.52 1208.59 L1034.11 1208.59 L1034.7 1208.59 L1035.28 1208.59 L1035.87 1208.59 L1036.46 1208.59 L1037.04 1208.59 L1037.63 1208.59 L1038.22 1208.59 L1038.8 1208.59 L1039.39 1208.59 L1039.98 1208.59 L1040.56 1208.59 L1041.15 1208.59 L1041.73 1208.59 L1042.32 1208.59 L1042.91 1208.59 L1043.49 1208.59 L1044.08 1208.59 L1044.67 1208.59 L1045.25 1208.59 L1045.84 1208.59 L1046.43 1208.59 L1047.01 1208.59 L1047.6 1208.59 L1048.19 1208.59 L1048.77 1208.59 L1049.36 1208.59 L1049.94 1208.59 L1050.53 1208.59 L1051.12 1208.59 L1051.7 1208.59 L1052.29 1208.59 L1052.88 1208.59 L1053.46 1208.59 L1054.05 1208.59 L1054.64 1208.59 L1055.22 1208.59 L1055.81 1208.59 L1056.39 1208.59 L1056.98 1208.59 L1057.57 1208.59 L1058.15 1208.59 L1058.74 1208.59 L1059.33 1208.59 L1059.91 1208.59 L1060.5 1208.59 L1061.09 1208.59 L1061.67 1208.59 L1062.26 1208.59 L1062.85 1208.59 L1063.43 1208.59 L1064.02 1208.59 L1064.6 1208.59 L1065.19 1208.59 L1065.78 1208.59 L1066.36 1208.59 L1066.95 1208.59 L1067.54 1208.59 L1068.12 1208.59 L1068.71 1208.59 L1069.3 1208.59 L1069.88 1208.59 L1070.47 1208.59 L1071.06 1208.59 L1071.64 1208.59 L1072.23 1208.59 L1072.81 1208.59 L1073.4 1208.59 L1073.99 1208.59 L1074.57 1208.59 L1075.16 1208.59 L1075.75 1208.59 L1076.33 1208.59 L1076.92 1208.59 L1077.51 1208.59 L1078.09 1208.59 L1078.68 1208.59 L1079.26 1208.59 L1079.85 1208.59 L1080.44 1208.59 L1081.02 1208.59 L1081.61 1208.59 L1082.2 1208.59 L1082.78 1208.59 L1083.37 1208.59 L1083.96 1208.59 L1084.54 1208.59 L1085.13 1208.59 L1085.72 1208.59 L1086.3 1208.59 L1086.89 1208.59 L1087.47 1208.59 L1088.06 1208.59 L1088.65 1208.59 L1089.23 1208.59 L1089.82 1208.59 L1090.41 1208.59 L1090.99 1208.59 L1091.58 1208.59 L1092.17 1208.59 L1092.75 1208.59 L1093.34 1208.59 L1093.93 1208.59 L1094.51 1208.59 L1095.1 1208.59 L1095.68 1208.59 L1096.27 1208.59 L1096.86 1208.59 L1097.44 1208.59 L1098.03 1208.59 L1098.62 1208.59 L1099.2 1208.59 L1099.79 1208.59 L1100.38 1208.59 L1100.96 1208.59 L1101.55 1208.59 L1102.14 1208.59 L1102.72 1208.59 L1103.31 1208.59 L1103.89 1208.59 L1104.48 1208.59 L1105.07 1208.59 L1105.65 1208.59 L1106.24 1208.59 L1106.83 1208.59 L1107.41 1208.59 L1108 1208.59 L1108.59 1208.59 L1109.17 1208.59 L1109.76 1208.59 L1110.34 1208.59 L1110.93 1208.59 L1111.52 1208.59 L1112.1 1208.59 L1112.69 1208.59 L1113.28 1208.59 L1113.86 1208.59 L1114.45 1208.59 L1115.04 1208.59 L1115.62 1208.59 L1116.21 1208.59 L1116.8 1208.59 L1117.38 1208.59 L1117.97 1208.59 L1118.55 1208.59 L1119.14 1208.59 L1119.73 1208.59 L1120.31 1208.59 L1120.9 1208.59 L1121.49 1208.59 L1122.07 1208.59 L1122.66 1208.59 L1123.25 1208.59 L1123.83 1208.59 L1124.42 1208.59 L1125.01 1208.59 L1125.59 1208.59 L1126.18 1208.59 L1126.76 1208.59 L1127.35 1208.59 L1127.94 1208.59 L1128.52 1208.59 L1129.11 1208.59 L1129.7 1208.59 L1130.28 1208.59 L1130.87 1208.59 L1131.46 1208.59 L1132.04 1208.59 L1132.63 1208.59 L1133.21 1208.59 L1133.8 1208.59 L1134.39 1208.59 L1134.97 1208.59 L1135.56 1208.59 L1136.15 1208.59 L1136.73 1208.59 L1137.32 1208.59 L1137.91 1208.59 L1138.49 1208.59 L1139.08 1208.59 L1139.67 1208.59 L1140.25 1208.59 L1140.84 1208.59 L1141.42 1208.59 L1142.01 1208.59 L1142.6 1208.59 L1143.18 1208.59 L1143.77 1208.59 L1144.36 1208.59 L1144.94 1208.59 L1145.53 1208.59 L1146.12 1208.59 L1146.7 1208.59 L1147.29 1208.59 L1147.88 1208.59 L1148.46 1208.59 L1149.05 1208.59 L1149.63 1208.59 L1150.22 1208.59 L1150.81 1208.59 L1151.39 1208.59 L1151.98 1208.59 L1152.57 1208.59 L1153.15 1208.59 L1153.74 1208.59 L1154.33 1208.59 L1154.91 1208.59 L1155.5 1208.59 L1156.09 1208.59 L1156.67 1208.59 L1157.26 1208.59 L1157.84 1208.59 L1158.43 1208.59 L1159.02 1208.59 L1159.6 1208.59 L1160.19 1208.59 L1160.78 1208.59 L1161.36 1208.59 L1161.95 1208.59 L1162.54 1208.59 L1163.12 1208.59 L1163.71 1208.59 L1164.29 1208.59 L1164.88 1208.59 L1165.47 1208.59 L1166.05 1208.59 L1166.64 1208.59 L1167.23 1208.59 L1167.81 1208.59 L1168.4 1208.59 L1168.99 1208.59 L1169.57 1208.59 L1170.16 1208.59 L1170.75 1208.59 L1171.33 1208.59 L1171.92 1208.59 L1172.5 1208.59 L1173.09 1208.59 L1173.68 1208.59 L1174.26 1208.59 L1174.85 1208.59 L1175.44 1208.59 L1176.02 1208.59 L1176.61 1208.59 L1177.2 1208.59 L1177.78 1208.59 L1178.37 1208.59 L1178.96 1208.59 L1179.54 1208.59 L1180.13 1208.59 L1180.71 1208.59 L1181.3 1208.59 L1181.89 1208.59 L1182.47 1208.59 L1183.06 1208.59 L1183.65 1208.59 L1184.23 1208.59 L1184.82 1208.59 L1185.41 1208.59 L1185.99 1208.59 L1186.58 1208.59 L1187.16 1208.59 L1187.75 1208.59 L1188.34 1208.59 L1188.92 1208.59 L1189.51 1208.59 L1190.1 1208.59 L1190.68 1208.59 L1191.27 1208.59 L1191.86 1208.59 L1192.44 1208.59 L1193.03 1208.59 L1193.62 1208.59 L1194.2 1208.59 L1194.79 1208.59 L1195.37 1208.59 L1195.96 1208.59 L1196.55 1208.59 L1197.13 1208.59 L1197.72 1208.59 L1198.31 1208.59 L1198.89 1208.59 L1199.48 1208.59 L1200.07 1208.59 L1200.65 1208.59 L1201.24 1208.59 L1201.83 1208.59 L1202.41 1208.59 L1203 1208.59 L1203.58 1208.59 L1204.17 1208.59 L1204.76 1208.59 L1205.34 1208.59 L1205.93 1208.59 L1206.52 1208.59 L1207.1 1208.59 L1207.69 1208.59 L1208.28 1208.59 L1208.86 1208.59 L1209.45 1208.59 L1210.03 1208.59 L1210.62 1208.59 L1211.21 1208.59 L1211.79 1208.59 L1212.38 1208.59 L1212.97 1208.59 L1213.55 1208.59 L1214.14 1208.59 L1214.73 1208.59 L1215.31 1208.59 L1215.9 1208.59 L1216.49 1208.59 L1217.07 1208.59 L1217.66 1208.59 L1218.24 1208.59 L1218.83 1208.59 L1219.42 1208.59 L1220 1208.59 L1220.59 1208.59 L1221.18 1208.59 L1221.76 1208.59 L1222.35 1208.59 L1222.94 1208.59 L1223.52 1208.59 L1224.11 1208.59 L1224.7 1208.59 L1225.28 1208.59 L1225.87 1208.59 L1226.45 1208.59 L1227.04 1208.59 L1227.63 1208.59 L1228.21 1208.59 L1228.8 1208.59 L1229.39 1208.59 L1229.97 1208.59 L1230.56 1208.59 L1231.15 1208.59 L1231.73 1208.59 L1232.32 1208.59 L1232.91 1208.59 L1233.49 1208.59 L1234.08 1208.59 L1234.66 1208.59 L1235.25 1208.59 L1235.84 1208.59 L1236.42 1208.59 L1237.01 1208.59 L1237.6 1208.59 L1238.18 1208.59 L1238.77 1208.59 L1239.36 1208.59 L1239.94 1208.59 L1240.53 1208.59 L1241.11 1208.59 L1241.7 1208.59 L1242.29 1208.59 L1242.87 1208.59 L1243.46 1208.59 L1244.05 1208.59 L1244.63 1208.59 L1245.22 1208.59 L1245.81 1208.59 L1246.39 1208.59 L1246.98 1208.59 L1247.57 1208.59 L1248.15 1208.59 L1248.74 1208.59 L1249.32 1208.59 L1249.91 1208.59 L1250.5 1208.59 L1251.08 1208.59 L1251.67 1208.59 L1252.26 1208.59 L1252.84 1208.59 L1253.43 1208.59 L1254.02 1208.59 L1254.6 1208.59 L1255.19 1208.59 L1255.78 1208.59 L1256.36 1208.59 L1256.95 1208.59 L1257.53 1208.59 L1258.12 1208.59 L1258.71 1208.59 L1259.29 1208.59 L1259.88 1208.59 L1260.47 1208.59 L1261.05 1208.59 L1261.64 1208.59 L1262.23 1208.59 L1262.81 1208.59 L1263.4 1208.59 L1263.98 1208.59 L1264.57 1208.59 L1265.16 1208.59 L1265.74 1208.59 L1266.33 1208.59 L1266.92 1208.59 L1267.5 1208.59 L1268.09 1208.59 L1268.68 1208.59 L1269.26 1208.59 L1269.85 1208.59 L1270.44 1208.59 L1271.02 1208.59 L1271.61 1208.59 L1272.19 1208.59 L1272.78 1208.59 L1273.37 1208.59 L1273.95 1208.59 L1274.54 1208.59 L1275.13 1208.59 L1275.71 1208.59 L1276.3 1208.59 L1276.89 1208.59 L1277.47 1208.59 L1278.06 1208.59 L1278.65 1208.59 L1279.23 1208.59 L1279.82 1208.59 L1280.4 1208.59 L1280.99 1208.59 L1281.58 1208.59 L1282.16 1208.59 L1282.75 1208.59 L1283.34 1208.59 L1283.92 1208.59 L1284.51 1208.59 L1285.1 1208.59 L1285.68 1208.59 L1286.27 1208.59 L1286.86 1208.59 L1287.44 1208.59 L1288.03 1208.59 L1288.61 1208.59 L1289.2 1208.59 L1289.79 1208.59 L1290.37 1208.59 L1290.96 1208.59 L1291.55 1208.59 L1292.13 1208.59 L1292.72 1208.59 L1293.31 1208.59 L1293.89 1208.59 L1294.48 1208.59 L1295.06 1208.59 L1295.65 1208.59 L1296.24 1208.59 L1296.82 1208.59 L1297.41 1208.59 L1298 1208.59 L1298.58 1208.59 L1299.17 1208.59 L1299.76 1208.59 L1300.34 1208.59 L1300.93 1208.59 L1301.52 1208.59 L1302.1 1208.59 L1302.69 1208.59 L1303.27 1208.59 L1303.86 1208.59 L1304.45 1208.59 L1305.03 1208.59 L1305.62 1208.59 L1306.21 1208.59 L1306.79 1208.59 L1307.38 1208.59 L1307.97 1208.59 L1308.55 1208.59 L1309.14 1208.59 L1309.73 1208.59 L1310.31 1208.59 L1310.9 1208.59 L1311.48 1208.59 L1312.07 1208.59 L1312.66 1208.59 L1313.24 1208.59 L1313.83 1208.59 L1314.42 1208.59 L1315 1208.59 L1315.59 1208.59 L1316.18 1208.59 L1316.76 1208.59 L1317.35 1208.59 L1317.93 1208.59 L1318.52 1208.59 L1319.11 1208.59 L1319.69 1208.59 L1320.28 1208.59 L1320.87 1208.59 L1321.45 1208.59 L1322.04 1208.59 L1322.63 1208.59 L1323.21 1208.59 L1323.8 1208.59 L1324.39 1208.59 L1324.97 1208.59 L1325.56 1208.59 L1326.14 1208.59 L1326.73 1208.59 L1327.32 1208.59 L1327.9 1208.59 L1328.49 1208.59 L1329.08 1208.59 L1329.66 1208.59 L1330.25 1208.59 L1330.84 1208.59 L1331.42 1208.59 L1332.01 1208.59 L1332.6 1208.59 L1333.18 1208.59 L1333.77 1208.59 L1334.35 1208.59 L1334.94 1208.59 L1335.53 1208.59 L1336.11 1208.59 L1336.7 1208.59 L1337.29 1208.59 L1337.87 1208.59 L1338.46 1208.59 L1339.05 1208.59 L1339.63 1208.59 L1340.22 1208.59 L1340.8 1208.59 L1341.39 1208.59 L1341.98 1208.59 L1342.56 1208.59 L1343.15 1208.59 L1343.74 1208.59 L1344.32 1208.59 L1344.91 1208.59 L1345.5 1208.59 L1346.08 1208.59 L1346.67 1208.59 L1347.26 1208.59 L1347.84 1208.59 L1348.43 1208.59 L1349.01 1208.59 L1349.6 1208.59 L1350.19 1208.59 L1350.77 1208.59 L1351.36 1208.59 L1351.95 1208.59 L1352.53 1208.59 L1353.12 1208.59 L1353.71 1208.59 L1354.29 1208.59 L1354.88 1208.59 L1355.47 1208.59 L1356.05 1208.59 L1356.64 1208.59 L1357.22 1208.59 L1357.81 1208.59 L1358.4 1208.59 L1358.98 1208.59 L1359.57 1208.59 L1360.16 1208.59 L1360.74 1208.59 L1361.33 1208.59 L1361.92 1208.59 L1362.5 1208.59 L1363.09 1208.59 L1363.68 1208.59 L1364.26 1208.59 L1364.85 1208.59 L1365.43 1208.59 L1366.02 1208.59 L1366.61 1208.59 L1367.19 1208.59 L1367.78 1208.59 L1368.37 1208.59 L1368.95 1208.59 L1369.54 1208.59 L1370.13 1208.59 L1370.71 1208.59 L1371.3 1208.59 L1371.88 1208.59 L1372.47 1208.59 L1373.06 1208.59 L1373.64 1208.59 L1374.23 1208.59 L1374.82 1208.59 L1375.4 1208.59 L1375.99 1208.59 L1376.58 1208.59 L1377.16 1208.59 L1377.75 1208.59 L1378.34 1208.59 L1378.92 1208.59 L1379.51 1208.59 L1380.09 1208.59 L1380.68 1208.59 L1381.27 1208.59 L1381.85 1208.59 L1382.44 1208.59 L1383.03 1208.59 L1383.61 1208.59 L1384.2 1208.59 L1384.79 1208.59 L1385.37 1208.59 L1385.96 1208.59 L1386.55 1208.59 L1387.13 1208.59 L1387.72 1208.59 L1388.3 1208.59 L1388.89 1208.59 L1389.48 1208.59 L1390.06 1208.59 L1390.65 1208.59 L1391.24 1208.59 L1391.82 1208.59 L1392.41 1208.59 L1393 1208.59 L1393.58 1208.59 L1394.17 1208.59 L1394.75 1208.59 L1395.34 1208.59 L1395.93 1208.59 L1396.51 1208.59 L1397.1 1208.59 L1397.69 1208.59 L1398.27 1208.59 L1398.86 1208.59 L1399.45 1208.59 L1400.03 1208.59 L1400.62 1208.59 L1401.21 1208.59 L1401.79 1208.59 L1402.38 1208.59 L1402.96 1208.59 L1403.55 1208.59 L1404.14 1208.59 L1404.72 1208.59 L1405.31 1208.59 L1405.9 1208.59 L1406.48 1208.59 L1407.07 1208.59 L1407.66 1208.59 L1408.24 1208.59 L1408.83 1208.59 L1409.42 1208.59 L1410 1208.59 L1410.59 1208.59 L1411.17 1208.59 L1411.76 1208.59 L1412.35 1208.59 L1412.93 1208.59 L1413.52 1208.59 L1414.11 1208.59 L1414.69 1208.59 L1415.28 1208.59 L1415.87 1208.59 L1416.45 1208.59 L1417.04 1208.59 L1417.63 1208.59 L1418.21 1208.59 L1418.8 1208.59 L1419.38 1208.59 L1419.97 1208.59 L1420.56 1208.59 L1421.14 1208.59 L1421.73 1208.59 L1422.32 1208.59 L1422.9 1208.59 L1423.49 1208.59 L1424.08 1208.59 L1424.66 1208.59 L1425.25 1208.59 L1425.83 1208.59 L1426.42 1208.59 L1427.01 1208.59 L1427.59 1208.59 L1428.18 1208.59 L1428.77 1208.59 L1429.35 1208.59 L1429.94 1208.59 L1430.53 1208.59 L1431.11 1208.59 L1431.7 1208.59 L1432.29 1208.59 L1432.87 1208.59 L1433.46 1208.59 L1434.04 1208.59 L1434.63 1208.59 L1435.22 1208.59 L1435.8 1208.59 L1436.39 1208.59 L1436.98 1208.59 L1437.56 1208.59 L1438.15 1208.59 L1438.74 1208.59 L1439.32 1208.59 L1439.91 1208.59 L1440.5 1208.59 L1441.08 1208.59 L1441.67 1208.59 L1442.25 1208.59 L1442.84 1208.59 L1443.43 1208.59 L1444.01 1208.59 L1444.6 1208.59 L1445.19 1208.59 L1445.77 1208.59 L1446.36 1208.59 L1446.95 1208.59 L1447.53 1208.59 L1448.12 1208.59 L1448.7 1208.59 L1449.29 1208.59 L1449.88 1208.59 L1450.46 1208.59 L1451.05 1208.59 L1451.64 1208.59 L1452.22 1208.59 L1452.81 1208.59 L1453.4 1208.59 L1453.98 1208.59 L1454.57 1208.59 L1455.16 1208.59 L1455.74 1208.59 L1456.33 1208.59 L1456.91 1208.59 L1457.5 1208.59 L1458.09 1208.59 L1458.67 1208.59 L1459.26 1208.59 L1459.85 1208.59 L1460.43 1208.59 L1461.02 1208.59 L1461.61 1208.59 L1462.19 1208.59 L1462.78 1208.59 L1463.37 1208.59 L1463.95 1208.59 L1464.54 1208.59 L1465.12 1208.59 L1465.71 1208.59 L1466.3 1208.59 L1466.88 1208.59 L1467.47 1208.59 L1468.06 1208.59 L1468.64 1208.59 L1469.23 1208.59 L1469.82 1208.59 L1470.4 1208.59 L1470.99 1208.59 L1471.57 1208.59 L1472.16 1208.59 L1472.75 1208.59 L1473.33 1208.59 L1473.92 1208.59 L1474.51 1208.59 L1475.09 1208.59 L1475.68 1208.59 L1476.27 1208.59 L1476.85 1208.59 L1477.44 1208.59 L1478.03 1208.59 L1478.61 1208.59 L1479.2 1208.59 L1479.78 1208.59 L1480.37 1208.59 L1480.96 1208.59 L1481.54 1208.59 L1482.13 1208.59 L1482.72 1208.59 L1483.3 1208.59 L1483.89 1208.59 L1484.48 1208.59 L1485.06 1208.59 L1485.65 1208.59 L1486.24 1208.59 L1486.82 1208.59 L1487.41 1208.59 L1487.99 1208.59 L1488.58 1208.59 L1489.17 1208.59 L1489.75 1208.59 L1490.34 1208.59 L1490.93 1208.59 L1491.51 1208.59 L1492.1 1208.59 L1492.69 1208.59 L1493.27 1208.59 L1493.86 1208.59 L1494.45 1208.59 L1495.03 1208.59 L1495.62 1208.59 L1496.2 1208.59 L1496.79 1208.59 L1497.38 1208.59 L1497.96 1208.59 L1498.55 1208.59 L1499.14 1208.59 L1499.72 1208.59 L1500.31 1208.59 L1500.9 1208.59 L1501.48 1208.59 L1502.07 1208.59 L1502.65 1208.59 L1503.24 1208.59 L1503.83 1208.59 L1504.41 1208.59 L1505 1208.59 L1505.59 1208.59 L1506.17 1208.59 L1506.76 1208.59 L1507.35 1208.59 L1507.93 1208.59 L1508.52 1208.59 L1509.11 1208.59 L1509.69 1208.59 L1510.28 1208.59 L1510.86 1208.59 L1511.45 1208.59 L1512.04 1208.59 L1512.62 1208.59 L1513.21 1208.59 L1513.8 1208.59 L1514.38 1208.59 L1514.97 1208.59 L1515.56 1208.59 L1516.14 1208.59 L1516.73 1208.59 L1517.32 1208.59 L1517.9 1208.59 L1518.49 1208.59 L1519.07 1208.59 L1519.66 1208.59 L1520.25 1208.59 L1520.83 1208.59 L1521.42 1208.59 L1522.01 1208.59 L1522.59 1208.59 L1523.18 1208.59 L1523.77 1208.59 L1524.35 1208.59 L1524.94 1208.59 L1525.52 1208.59 L1526.11 1208.59 L1526.7 1208.59 L1527.28 1208.59 L1527.87 1208.59 L1528.46 1208.59 L1529.04 1208.59 L1529.63 1208.59 L1530.22 1208.59 L1530.8 1208.59 L1531.39 1208.59 L1531.98 1208.59 L1532.56 1208.59 L1533.15 1208.59 L1533.73 1208.59 L1534.32 1208.59 L1534.91 1208.59 L1535.49 1208.59 L1536.08 1208.59 L1536.67 1208.59 L1537.25 1208.59 L1537.84 1208.59 L1538.43 1208.59 L1539.01 1208.59 L1539.6 1208.59 L1540.19 1208.59 L1540.77 1208.59 L1541.36 1208.59 L1541.94 1208.59 L1542.53 1208.59 L1543.12 1208.59 L1543.7 1208.59 L1544.29 1208.59 L1544.88 1208.59 L1545.46 1208.59 L1546.05 1208.59 L1546.64 1208.59 L1547.22 1208.59 L1547.81 1208.59 L1548.4 1208.59 L1548.98 1208.59 L1549.57 1208.59 L1550.15 1208.59 L1550.74 1208.59 L1551.33 1208.59 L1551.91 1208.59 L1552.5 1208.59 L1553.09 1208.59 L1553.67 1208.59 L1554.26 1208.59 L1554.85 1208.59 L1555.43 1208.59 L1556.02 1208.59 L1556.6 1208.59 L1557.19 1208.59 L1557.78 1208.59 L1558.36 1208.59 L1558.95 1208.59 L1559.54 1208.59 L1560.12 1208.59 L1560.71 1208.59 L1561.3 1208.59 L1561.88 1208.59 L1562.47 1208.59 L1563.06 1208.59 L1563.64 1208.59 L1564.23 1208.59 L1564.81 1208.59 L1565.4 1208.59 L1565.99 1208.59 L1566.57 1208.59 L1567.16 1208.59 L1567.75 1208.59 L1568.33 1208.59 L1568.92 1208.59 L1569.51 1208.59 L1570.09 1208.59 L1570.68 1208.59 L1571.27 1208.59 L1571.85 1208.59 L1572.44 1208.59 L1573.02 1208.59 L1573.61 1208.59 L1574.2 1208.59 L1574.78 1208.59 L1575.37 1208.59 L1575.96 1208.59 L1576.54 1208.59 L1577.13 1208.59 L1577.72 1208.59 L1578.3 1208.59 L1578.89 1208.59 L1579.47 1208.59 L1580.06 1208.59 L1580.65 1208.59 L1581.23 1208.59 L1581.82 1208.59 L1582.41 1208.59 L1582.99 1208.59 L1583.58 1208.59 L1584.17 1208.59 L1584.75 1208.59 L1585.34 1208.59 L1585.93 1208.59 L1586.51 1208.59 L1587.1 1208.59 L1587.68 1208.59 L1588.27 1208.59 L1588.86 1208.59 L1589.44 1208.59 L1590.03 1208.59 L1590.62 1208.59 L1591.2 1208.59 L1591.79 1208.59 L1592.38 1208.59 L1592.96 1208.59 L1593.55 1208.59 L1594.14 1208.59 L1594.72 1208.59 L1595.31 1208.59 L1595.89 1208.59 L1596.48 1208.59 L1597.07 1208.59 L1597.65 1208.59 L1598.24 1208.59 L1598.83 1208.59 L1599.41 1208.59 L1600 1208.59 L1600.59 1208.59 L1601.17 1208.59 L1601.76 1208.59 L1602.34 1208.59 L1602.93 1208.59 L1603.52 1208.59 L1604.1 1208.59 L1604.69 1208.59 L1605.28 1208.59 L1605.86 1208.59 L1606.45 1208.59 L1607.04 1208.59 L1607.62 1208.59 L1608.21 1208.59 L1608.8 1208.59 L1609.38 1208.59 L1609.97 1208.59 L1610.55 1208.59 L1611.14 1208.59 L1611.73 1208.59 L1612.31 1208.59 L1612.9 1208.59 L1613.49 1208.59 L1614.07 1208.59 L1614.66 1208.59 L1615.25 1208.59 L1615.83 1208.59 L1616.42 1208.59 L1617.01 1208.59 L1617.59 1208.59 L1618.18 1208.59 L1618.76 1208.59 L1619.35 1208.59 L1619.94 1208.59 L1620.52 1208.59 L1621.11 1208.59 L1621.7 1208.59 L1622.28 1208.59 L1622.87 1208.59 L1623.46 1208.59 L1624.04 1208.59 L1624.63 1208.59 L1625.22 1208.59 L1625.8 1208.59 L1626.39 1208.59 L1626.97 1208.59 L1627.56 1208.59 L1628.15 1208.59 L1628.73 1208.59 L1629.32 1208.59 L1629.91 1208.59 L1630.49 1208.59 L1631.08 1208.59 L1631.67 1208.59 L1632.25 1208.59 L1632.84 1208.59 L1633.42 1208.59 L1634.01 1208.59 L1634.6 1208.59 L1635.18 1208.59 L1635.77 1208.59 L1636.36 1208.59 L1636.94 1208.59 L1637.53 1208.59 L1638.12 1208.59 L1638.7 1208.59 L1639.29 1208.59 L1639.88 1208.59 L1640.46 1208.59 L1641.05 1208.59 L1641.63 1208.59 L1642.22 1208.59 L1642.81 1208.59 L1643.39 1208.59 L1643.98 1208.59 L1644.57 1208.59 L1645.15 1208.59 L1645.74 1208.59 L1646.33 1208.59 L1646.91 1208.59 L1647.5 1208.59 L1648.09 1208.59 L1648.67 1208.59 L1649.26 1208.59 L1649.84 1208.59 L1650.43 1208.59 L1651.02 1208.59 L1651.6 1208.59 L1652.19 1208.59 L1652.78 1208.59 L1653.36 1208.59 L1653.95 1208.59 L1654.54 1208.59 L1655.12 1208.59 L1655.71 1208.59 L1656.29 1208.59 L1656.88 1208.59 L1657.47 1208.59 L1658.05 1208.59 L1658.64 1208.59 L1659.23 1208.59 L1659.81 1208.59 L1660.4 1208.59 L1660.99 1208.59 L1661.57 1208.59 L1662.16 1208.59 L1662.75 1208.59 L1663.33 1208.59 L1663.92 1208.59 L1664.5 1208.59 L1665.09 1208.59 L1665.68 1208.59 L1666.26 1208.59 L1666.85 1208.59 L1667.44 1208.59 L1668.02 1208.59 L1668.61 1208.59 L1669.2 1208.59 L1669.78 1208.59 L1670.37 1208.59 L1670.96 1208.59 L1671.54 1208.59 L1672.13 1208.59 L1672.71 1208.59 L1673.3 1208.59 L1673.89 1208.59 L1674.47 1208.59 L1675.06 1208.59 L1675.65 1208.59 L1676.23 1208.59 L1676.82 1208.59 L1677.41 1208.59 L1677.99 1208.59 L1678.58 1208.59 L1679.17 1208.59 L1679.75 1208.59 L1680.34 1208.59 L1680.92 1208.59 L1681.51 1208.59 L1682.1 1208.59 L1682.68 1208.59 L1683.27 1208.59 L1683.86 1208.59 L1684.44 1208.59 L1685.03 1208.59 L1685.62 1208.59 L1686.2 1208.59 L1686.79 1208.59 L1687.37 1208.59 L1687.96 1208.59 L1688.55 1208.59 L1689.13 1208.59 L1689.72 1208.59 L1690.31 1208.59 L1690.89 1208.59 L1691.48 1208.59 L1692.07 1208.59 L1692.65 1208.59 L1693.24 1208.59 L1693.83 1208.59 L1694.41 1208.59 L1695 1208.59 L1695.58 1208.59 L1696.17 1208.59 L1696.76 1208.59 L1697.34 1208.59 L1697.93 1208.59 L1698.52 1208.59 L1699.1 1208.59 L1699.69 1208.59 L1700.28 1208.59 L1700.86 1208.59 L1701.45 1208.59 L1702.04 1208.59 L1702.62 1208.59 L1703.21 1208.59 L1703.79 1208.59 L1704.38 1208.59 L1704.97 1208.59 L1705.55 1208.59 L1706.14 1208.59 L1706.73 1208.59 L1707.31 1208.59 L1707.9 1208.59 L1708.49 1208.59 L1709.07 1208.59 L1709.66 1208.59 L1710.24 1208.59 L1710.83 1208.59 L1711.42 1208.59 L1712 1208.59 L1712.59 1208.59 L1713.18 1208.59 L1713.76 1208.59 L1714.35 1208.59 L1714.94 1208.59 L1715.52 1208.59 L1716.11 1208.59 L1716.7 1208.59 L1717.28 1208.59 L1717.87 1208.59 L1718.45 1208.59 L1719.04 1208.59 L1719.63 1208.59 L1720.21 1208.59 L1720.8 1208.59 L1721.39 1208.59 L1721.97 1208.59 L1722.56 1208.59 L1723.15 1208.59 L1723.73 1208.59 L1724.32 1208.59 L1724.91 1208.59 L1725.49 1208.59 L1726.08 1208.59 L1726.66 1208.59 L1727.25 1208.59 L1727.84 1208.59 L1728.42 1208.59 L1729.01 1208.59 L1729.6 1208.59 L1730.18 1208.59 L1730.77 1208.59 L1731.36 1208.59 L1731.94 1208.59 L1732.53 1208.59 L1733.11 1208.59 L1733.7 1208.59 L1734.29 1208.59 L1734.87 1208.59 L1735.46 1208.59 L1736.05 1208.59 L1736.63 1208.59 L1737.22 1208.59 L1737.81 1208.59 L1738.39 1208.59 L1738.98 1208.59 L1739.57 1208.59 L1740.15 1208.59 L1740.74 1208.59 L1741.32 1208.59 L1741.91 1208.59 L1742.5 1208.59 L1743.08 1208.59 L1743.67 1208.59 L1744.26 1208.59 L1744.84 1208.59 L1745.43 1208.59 L1746.02 1208.59 L1746.6 1208.59 L1747.19 1208.59 L1747.78 1208.59 L1748.36 1208.59 L1748.95 1208.59 L1749.53 1208.59 L1750.12 1208.59 L1750.71 1208.59 L1751.29 1208.59 L1751.88 1208.59 L1752.47 1208.59 L1753.05 1208.59 L1753.64 1208.59 L1754.23 1208.59 L1754.81 1208.59 L1755.4 1208.59 L1755.99 1208.59 L1756.57 1208.59 L1757.16 1208.59 L1757.74 1208.59 L1758.33 1208.59 L1758.92 1208.59 L1759.5 1208.59 L1760.09 1208.59 L1760.68 1208.59 L1761.26 1208.59 L1761.85 1208.59 L1762.44 1208.59 L1763.02 1208.59 L1763.61 1208.59 L1764.19 1208.59 L1764.78 1208.59 L1765.37 1208.59 L1765.95 1208.59 L1766.54 1208.59 L1767.13 1208.59 L1767.71 1208.59 L1768.3 1208.59 L1768.89 1208.59 L1769.47 1208.59 L1770.06 1208.59 L1770.65 1208.59 L1771.23 1208.59 L1771.82 1208.59 L1772.4 1208.59 L1772.99 1208.59 L1773.58 1208.59 L1774.16 1208.59 L1774.75 1208.59 L1775.34 1208.59 L1775.92 1208.59 L1776.51 1208.59 L1777.1 1208.59 L1777.68 1208.59 L1778.27 1208.59 L1778.86 1208.59 L1779.44 1208.59 L1780.03 1208.59 L1780.61 1208.59 L1781.2 1208.59 L1781.79 1208.59 L1782.37 1208.59 L1782.96 1208.59 L1783.55 1208.59 L1784.13 1208.59 L1784.72 1208.59 L1785.31 1208.59 L1785.89 1208.59 L1786.48 1208.59 L1787.06 1208.59 L1787.65 1208.59 L1788.24 1208.59 L1788.82 1208.59 L1789.41 1208.59 L1790 1208.59 L1790.58 1208.59 L1791.17 1208.59 L1791.76 1208.59 L1792.34 1208.59 L1792.93 1208.59 L1793.52 1208.59 L1794.1 1208.59 L1794.69 1208.59 L1795.27 1208.59 L1795.86 1208.59 L1796.45 1208.59 L1797.03 1208.59 L1797.62 1208.59 L1798.21 1208.59 L1798.79 1208.59 L1799.38 1208.59 L1799.97 1208.59 L1800.55 1208.59 L1801.14 1208.59 L1801.73 1208.59 L1802.31 1208.59 L1802.9 1208.59 L1803.48 1208.59 L1804.07 1208.59 L1804.66 1208.59 L1805.24 1208.59 L1805.83 1208.59 L1806.42 1208.59 L1807 1208.59 L1807.59 1208.59 L1808.18 1208.59 L1808.76 1208.59 L1809.35 1208.59 L1809.94 1208.59 L1810.52 1208.59 L1811.11 1208.59 L1811.69 1208.59 L1812.28 1208.59 L1812.87 1208.59 L1813.45 1208.59 L1814.04 1208.59 L1814.63 1208.59 L1815.21 1208.59 L1815.8 1208.59 L1816.39 1208.59 L1816.97 1208.59 L1817.56 1208.59 L1818.14 1208.59 L1818.73 1208.59 L1819.32 1208.59 L1819.9 1208.59 L1820.49 1208.59 L1821.08 1208.59 L1821.66 1208.59 L1822.25 1208.59 L1822.84 1208.59 L1823.42 1208.59 L1824.01 1208.59 L1824.6 1208.59 L1825.18 1208.59 L1825.77 1208.59 L1826.35 1208.59 L1826.94 1208.59 L1827.53 1208.59 L1828.11 1208.59 L1828.7 1208.59 L1829.29 1208.59 L1829.87 1208.59 L1830.46 1208.59 L1831.05 1208.59 L1831.63 1208.59 L1832.22 1208.59 L1832.81 1208.59 L1833.39 1208.59 L1833.98 1208.59 L1834.56 1208.59 L1835.15 1208.59 L1835.74 1208.59 L1836.32 1208.59 L1836.91 1208.59 L1837.5 1208.59 L1838.08 1208.59 L1838.67 1208.59 L1839.26 1208.59 L1839.84 1208.59 L1840.43 1208.59 L1841.01 1208.59 L1841.6 1208.59 L1842.19 1208.59 L1842.77 1208.59 L1843.36 1208.59 L1843.95 1208.59 L1844.53 1208.59 L1845.12 1208.59 L1845.71 1208.59 L1846.29 1208.59 L1846.88 1208.59 L1847.47 1208.59 L1848.05 1208.59 L1848.64 1208.59 L1849.22 1208.59 L1849.81 1208.59 L1850.4 1208.59 L1850.98 1208.59 L1851.57 1208.59 L1852.16 1208.59 L1852.74 1208.59 L1853.33 1208.59 L1853.92 1208.59 L1854.5 1208.59 L1855.09 1208.59 L1855.68 1208.59 L1856.26 1208.59 L1856.85 1208.59 L1857.43 1208.59 L1858.02 1208.59 L1858.61 1208.59 L1859.19 1208.59 L1859.78 1208.59 L1860.37 1208.59 L1860.95 1208.59 L1861.54 1208.59 L1862.13 1208.59 L1862.71 1208.59 L1863.3 1208.59 L1863.88 1208.59 L1864.47 1208.59 L1865.06 1208.59 L1865.64 1208.59 L1866.23 1208.59 L1866.82 1208.59 L1867.4 1208.59 L1867.99 1208.59 L1868.58 1208.59 L1869.16 1208.59 L1869.75 1208.59 L1870.34 1208.59 L1870.92 1208.59 L1871.51 1208.59 L1872.09 1208.59 L1872.68 1208.59 L1873.27 1208.59 L1873.85 1208.59 L1874.44 1208.59 L1875.03 1208.59 L1875.61 1208.59 L1876.2 1208.59 L1876.79 1208.59 L1877.37 1208.59 L1877.96 1208.59 L1878.55 1208.59 L1879.13 1208.59 L1879.72 1208.59 L1880.3 1208.59 L1880.89 1208.59 L1881.48 1208.59 L1882.06 1208.59 L1882.65 1208.59 L1883.24 1208.59 L1883.82 1208.59 L1884.41 1208.59 L1885 1208.59 L1885.58 1208.59 L1886.17 1208.59 L1886.76 1208.59 L1887.34 1208.59 L1887.93 1208.59 L1888.51 1208.59 L1889.1 1208.59 L1889.69 1208.59 L1890.27 1208.59 L1890.86 1208.59 L1891.45 1208.59 L1892.03 1208.59 L1892.62 1208.59 L1893.21 1208.59 L1893.79 1208.59 L1894.38 1208.59 L1894.96 1208.59 L1895.55 1208.59 L1896.14 1208.59 L1896.72 1208.59 L1897.31 1208.59 L1897.9 1208.59 L1898.48 1208.59 L1899.07 1208.59 L1899.66 1208.59 L1900.24 1208.59 L1900.83 1208.59 L1901.42 1208.59 L1902 1208.59 L1902.59 1208.59 L1903.17 1208.59 L1903.76 1208.59 L1904.35 1208.59 L1904.93 1208.59 L1905.52 1208.59 L1906.11 1208.59 L1906.69 1208.59 L1907.28 1208.59 L1907.87 1208.59 L1908.45 1208.59 L1909.04 1208.59 L1909.63 1208.59 L1910.21 1208.59 L1910.8 1208.59 L1911.38 1208.59 L1911.97 1208.59 L1912.56 1208.59 L1913.14 1208.59 L1913.73 1208.59 L1914.32 1208.59 L1914.9 1208.59 L1915.49 1208.59 L1916.08 1208.59 L1916.66 1208.59 L1917.25 1208.59 L1917.83 1208.59 L1918.42 1208.59 L1919.01 1208.59 L1919.59 1208.59 L1920.18 1208.59 L1920.77 1208.59 L1921.35 1208.59 L1921.94 1208.59 L1922.53 1208.59 L1923.11 1208.59 L1923.7 1208.59 L1924.29 1208.59 L1924.87 1208.59 L1925.46 1208.59 L1926.04 1208.59 L1926.63 1208.59 L1927.22 1208.59 L1927.8 1208.59 L1928.39 1208.59 L1928.98 1208.59 L1929.56 1208.59 L1930.15 1208.59 L1930.74 1208.59 L1931.32 1208.59 L1931.91 1208.59 L1932.5 1208.59 L1933.08 1208.59 L1933.67 1208.59 L1934.25 1208.59 L1934.84 1208.59 L1935.43 1208.59 L1936.01 1208.59 L1936.6 1208.59 L1937.19 1208.59 L1937.77 1208.59 L1938.36 1208.59 L1938.95 1208.59 L1939.53 1208.59 L1940.12 1208.59 L1940.71 1208.59 L1941.29 1208.59 L1941.88 1208.59 L1942.46 1208.59 L1943.05 1208.59 L1943.64 1208.59 L1944.22 1208.59 L1944.81 1208.59 L1945.4 1208.59 L1945.98 1208.59 L1946.57 1208.59 L1947.16 1208.59 L1947.74 1208.59 L1948.33 1208.59 L1948.91 1208.59 L1949.5 1208.59 L1950.09 1208.59 L1950.67 1208.59 L1951.26 1208.59 L1951.85 1208.59 L1952.43 1208.59 L1953.02 1208.59 L1953.61 1208.59 L1954.19 1208.59 L1954.78 1208.59 L1955.37 1208.59 L1955.95 1208.59 L1956.54 1208.59 L1957.12 1208.59 L1957.71 1208.59 L1958.3 1208.59 L1958.88 1208.59 L1959.47 1208.59 L1960.06 1208.59 L1960.64 1208.59 L1961.23 1208.59 L1961.82 1208.59 L1962.4 1208.59 L1962.99 1208.59 L1963.58 1208.59 L1964.16 1208.59 L1964.75 1208.59 L1965.33 1208.59 L1965.92 1208.59 L1966.51 1208.59 L1967.09 1208.59 L1967.68 1208.59 L1968.27 1208.59 L1968.85 1208.59 L1969.44 1208.59 L1970.03 1208.59 L1970.61 1208.59 L1971.2 1208.59 L1971.78 1208.59 L1972.37 1208.59 L1972.96 1208.59 L1973.54 1208.59 L1974.13 1208.59 L1974.72 1208.59 L1975.3 1208.59 L1975.89 1208.59 L1976.48 1208.59 L1977.06 1208.59 L1977.65 1208.59 L1978.24 1208.59 L1978.82 1208.59 L1979.41 1208.59 L1979.99 1208.59 L1980.58 1208.59 L1981.17 1208.59 L1981.75 1208.59 L1982.34 1208.59 L1982.93 1208.59 L1983.51 1208.59 L1984.1 1208.59 L1984.69 1208.59 L1985.27 1208.59 L1985.86 1208.59 L1986.45 1208.59 L1987.03 1208.59 L1987.62 1208.59 L1988.2 1208.59 L1988.79 1208.59 L1989.38 1208.59 L1989.96 1208.59 L1990.55 1208.59 L1991.14 1208.59 L1991.72 1208.59 L1992.31 1208.59 L1992.9 1208.59 L1993.48 1208.59 L1994.07 1208.59 L1994.65 1208.59 L1995.24 1208.59 L1995.83 1208.59 L1996.41 1208.59 L1997 1208.59 L1997.59 1208.59 L1998.17 1208.59 L1998.76 1208.59 L1999.35 1208.59 L1999.93 1208.59 L2000.52 1208.59 L2001.11 1208.59 L2001.69 1208.59 L2002.28 1208.59 L2002.86 1208.59 L2003.45 1208.59 L2004.04 1208.59 L2004.62 1208.59 L2005.21 1208.59 L2005.8 1208.59 L2006.38 1208.59 L2006.97 1208.59 L2007.56 1208.59 L2008.14 1208.59 L2008.73 1208.59 L2009.32 1208.59 L2009.9 1208.59 L2010.49 1208.59 L2011.07 1208.59 L2011.66 1208.59 L2012.25 1208.59 L2012.83 1208.59 L2013.42 1208.59 L2014.01 1208.59 L2014.59 1208.59 L2015.18 1208.59 L2015.77 1208.59 L2016.35 1208.59 L2016.94 1208.59 L2017.53 1208.59 L2018.11 1208.59 L2018.7 1208.59 L2019.28 1208.59 L2019.87 1208.59 L2020.46 1208.59 L2021.04 1208.59 L2021.63 1208.59 L2022.22 1208.59 L2022.8 1208.59 L2023.39 1208.59 L2023.98 1208.59 L2024.56 1208.59 L2025.15 1208.59 L2025.73 1208.59 L2026.32 1208.59 L2026.91 1208.59 L2027.49 1208.59 L2028.08 1208.59 L2028.67 1208.59 L2029.25 1208.59 L2029.84 1208.59 L2030.43 1208.59 L2031.01 1208.59 L2031.6 1208.59 L2032.19 1208.59 L2032.77 1208.59 L2033.36 1208.59 L2033.94 1208.59 L2034.53 1208.59 L2035.12 1208.59 L2035.7 1208.59 L2036.29 1208.59 L2036.88 1208.59 L2037.46 1208.59 L2038.05 1208.59 L2038.64 1208.59 L2039.22 1208.59 L2039.81 1208.59 L2040.4 1208.59 L2040.98 1208.59 L2041.57 1208.59 L2042.15 1208.59 L2042.74 1208.59 L2043.33 1208.59 L2043.91 1208.59 L2044.5 1208.59 L2045.09 1208.59 L2045.67 1208.59 L2046.26 1208.59 L2046.85 1208.59 L2047.43 1208.59 L2048.02 1208.59 L2048.6 1208.59 L2049.19 1208.59 L2049.78 1208.59 L2050.36 1208.59 L2050.95 1208.59 L2051.54 1208.59 L2052.12 1208.59 L2052.71 1208.59 L2053.3 1208.59 L2053.88 1208.59 L2054.47 1208.59 L2055.06 1208.59 L2055.64 1208.59 L2056.23 1208.59 L2056.81 1208.59 L2057.4 1208.59 L2057.99 1208.59 L2058.57 1208.59 L2059.16 1208.59 L2059.75 1208.59 L2060.33 1208.59 L2060.92 1208.59 L2061.51 1208.59 L2062.09 1208.59 L2062.68 1208.59 L2063.27 1208.59 L2063.85 1208.59 L2064.44 1208.59 L2065.02 1208.59 L2065.61 1208.59 L2066.2 1208.59 L2066.78 1208.59 L2067.37 1208.59 L2067.96 1208.59 L2068.54 1208.59 L2069.13 1208.59 L2069.72 1208.59 L2070.3 1208.59 L2070.89 1208.59 L2071.48 1208.59 L2072.06 1208.59 L2072.65 1208.59 L2073.23 1208.59 L2073.82 1208.59 L2074.41 1208.59 L2074.99 1208.59 L2075.58 1208.59 L2076.17 1208.59 L2076.75 1208.59 L2077.34 1208.59 L2077.93 1208.59 L2078.51 1208.59 L2079.1 1208.59 L2079.68 1208.59 L2080.27 1208.59 L2080.86 1208.59 L2081.44 1208.59 L2082.03 1208.59 L2082.62 1208.59 L2083.2 1208.59 L2083.79 1208.59 L2084.38 1208.59 L2084.96 1208.59 L2085.55 1208.59 L2086.14 1208.59 L2086.72 1208.59 L2087.31 1208.59 L2087.89 1208.59 L2088.48 1208.59 L2089.07 1208.59 L2089.65 1208.59 L2090.24 1208.59 L2090.83 1208.59 L2091.41 1208.59 L2092 1208.59 L2092.59 1208.59 L2093.17 1208.59 L2093.76 1208.59 L2094.35 1208.59 L2094.93 1208.59 L2095.52 1208.59 L2096.1 1208.59 L2096.69 1208.59 L2097.28 1208.59 L2097.86 1208.59 L2098.45 1208.59 L2099.04 1208.59 L2099.62 1208.59 L2100.21 1208.59 L2100.8 1208.59 L2101.38 1208.59 L2101.97 1208.59 L2102.55 1208.59 L2103.14 1208.59 L2103.73 1208.59 L2104.31 1208.59 L2104.9 1208.59 L2105.49 1208.59 L2106.07 1208.59 L2106.66 1208.59 L2107.25 1208.59 L2107.83 1208.59 L2108.42 1208.59 L2109.01 1208.59 L2109.59 1208.59 L2110.18 1208.59 L2110.76 1208.59 L2111.35 1208.59 L2111.94 1208.59 L2112.52 1208.59 L2113.11 1208.59 L2113.7 1208.59 L2114.28 1208.59 L2114.87 1208.59 L2115.46 1208.59 L2116.04 1208.59 L2116.63 1208.59 L2117.22 1208.59 L2117.8 1208.59 L2118.39 1208.59 L2118.97 1208.59 L2119.56 1208.59 L2120.15 1208.59 L2120.73 1208.59 L2121.32 1208.59 L2121.91 1208.59 L2122.49 1208.59 L2123.08 1208.59 L2123.67 1208.59 L2124.25 1208.59 L2124.84 1208.59 L2125.42 1208.59 L2126.01 1208.59 L2126.6 1208.59 L2127.18 1208.59 L2127.77 1208.59 L2128.36 1208.59 L2128.94 1208.59 L2129.53 1208.59 L2130.12 1208.59 L2130.7 1208.59 L2131.29 1208.59 L2131.88 1208.59 L2132.46 1208.59 L2133.05 1208.59 L2133.63 1208.59 L2134.22 1208.59 L2134.81 1208.59 L2135.39 1208.59 L2135.98 1208.59 L2136.57 1208.59 L2137.15 1208.59 L2137.74 1208.59 L2138.33 1208.59 L2138.91 1208.59 L2139.5 1208.59 L2140.09 1208.59 L2140.67 1208.59 L2141.26 1208.59 L2141.84 1208.59 L2142.43 1208.59 L2143.02 1208.59 L2143.6 1208.59 L2144.19 1208.59 L2144.78 1208.59 L2145.36 1208.59 L2145.95 1208.59 L2146.54 1208.59 L2147.12 1208.59 L2147.71 1208.59 L2148.3 1208.59 L2148.88 1208.59 L2149.47 1208.59 L2150.05 1208.59 L2150.64 1208.59 L2151.23 1208.59 L2151.81 1208.59 L2152.4 1208.59 L2152.99 1208.59 L2153.57 1208.59 L2154.16 1208.59 L2154.75 1208.59 L2155.33 1208.59 L2155.92 1208.59 L2156.5 1208.59 L2157.09 1208.59 L2157.68 1208.59 L2158.26 1208.59 L2158.26 1207.93 L2157.68 1207.93 L2157.09 1207.93 L2156.5 1207.93 L2155.92 1207.93 L2155.33 1207.93 L2154.75 1207.93 L2154.16 1207.93 L2153.57 1207.93 L2152.99 1207.93 L2152.4 1207.93 L2151.81 1207.93 L2151.23 1207.93 L2150.64 1207.93 L2150.05 1207.93 L2149.47 1207.93 L2148.88 1207.93 L2148.3 1207.93 L2147.71 1207.93 L2147.12 1207.93 L2146.54 1207.93 L2145.95 1207.93 L2145.36 1207.93 L2144.78 1207.93 L2144.19 1207.93 L2143.6 1207.93 L2143.02 1207.93 L2142.43 1207.93 L2141.84 1207.93 L2141.26 1207.93 L2140.67 1207.93 L2140.09 1207.93 L2139.5 1207.93 L2138.91 1207.93 L2138.33 1207.93 L2137.74 1207.93 L2137.15 1207.93 L2136.57 1207.93 L2135.98 1207.93 L2135.39 1207.93 L2134.81 1207.93 L2134.22 1207.93 L2133.63 1207.93 L2133.05 1207.93 L2132.46 1207.93 L2131.88 1207.93 L2131.29 1207.93 L2130.7 1207.93 L2130.12 1207.93 L2129.53 1207.93 L2128.94 1207.93 L2128.36 1207.93 L2127.77 1207.93 L2127.18 1207.93 L2126.6 1207.93 L2126.01 1207.93 L2125.42 1207.93 L2124.84 1207.93 L2124.25 1207.93 L2123.67 1207.93 L2123.08 1207.93 L2122.49 1207.93 L2121.91 1207.93 L2121.32 1207.93 L2120.73 1207.93 L2120.15 1207.93 L2119.56 1207.93 L2118.97 1207.93 L2118.39 1207.93 L2117.8 1207.93 L2117.22 1207.93 L2116.63 1207.93 L2116.04 1207.93 L2115.46 1207.93 L2114.87 1207.93 L2114.28 1207.93 L2113.7 1207.93 L2113.11 1207.93 L2112.52 1207.93 L2111.94 1207.93 L2111.35 1207.93 L2110.76 1207.93 L2110.18 1207.93 L2109.59 1207.93 L2109.01 1207.93 L2108.42 1207.93 L2107.83 1207.93 L2107.25 1207.93 L2106.66 1207.93 L2106.07 1207.93 L2105.49 1207.93 L2104.9 1207.93 L2104.31 1207.93 L2103.73 1207.93 L2103.14 1207.93 L2102.55 1207.93 L2101.97 1207.93 L2101.38 1207.93 L2100.8 1207.93 L2100.21 1207.93 L2099.62 1207.93 L2099.04 1207.93 L2098.45 1207.93 L2097.86 1207.93 L2097.28 1207.93 L2096.69 1207.93 L2096.1 1207.93 L2095.52 1207.93 L2094.93 1207.93 L2094.35 1207.93 L2093.76 1207.93 L2093.17 1207.93 L2092.59 1207.93 L2092 1207.93 L2091.41 1207.93 L2090.83 1207.93 L2090.24 1207.93 L2089.65 1207.93 L2089.07 1207.93 L2088.48 1207.93 L2087.89 1207.93 L2087.31 1207.93 L2086.72 1207.93 L2086.14 1207.93 L2085.55 1207.93 L2084.96 1207.93 L2084.38 1207.93 L2083.79 1207.93 L2083.2 1207.93 L2082.62 1207.93 L2082.03 1207.93 L2081.44 1207.93 L2080.86 1207.93 L2080.27 1207.93 L2079.68 1207.93 L2079.1 1207.93 L2078.51 1207.93 L2077.93 1207.93 L2077.34 1207.93 L2076.75 1207.93 L2076.17 1207.93 L2075.58 1207.93 L2074.99 1207.93 L2074.41 1207.93 L2073.82 1207.93 L2073.23 1207.93 L2072.65 1207.93 L2072.06 1207.93 L2071.48 1207.93 L2070.89 1207.93 L2070.3 1207.93 L2069.72 1207.93 L2069.13 1207.93 L2068.54 1207.93 L2067.96 1207.93 L2067.37 1207.93 L2066.78 1207.93 L2066.2 1207.93 L2065.61 1207.93 L2065.02 1207.93 L2064.44 1207.93 L2063.85 1207.93 L2063.27 1207.93 L2062.68 1207.93 L2062.09 1207.93 L2061.51 1207.93 L2060.92 1207.93 L2060.33 1207.93 L2059.75 1207.93 L2059.16 1207.93 L2058.57 1207.93 L2057.99 1207.93 L2057.4 1207.93 L2056.81 1207.93 L2056.23 1207.93 L2055.64 1207.93 L2055.06 1207.93 L2054.47 1207.93 L2053.88 1207.93 L2053.3 1207.93 L2052.71 1207.93 L2052.12 1207.93 L2051.54 1207.93 L2050.95 1207.93 L2050.36 1207.93 L2049.78 1207.93 L2049.19 1207.93 L2048.6 1207.93 L2048.02 1207.93 L2047.43 1207.93 L2046.85 1207.93 L2046.26 1207.93 L2045.67 1207.93 L2045.09 1207.93 L2044.5 1207.93 L2043.91 1207.93 L2043.33 1207.93 L2042.74 1207.93 L2042.15 1207.93 L2041.57 1207.93 L2040.98 1207.93 L2040.4 1207.93 L2039.81 1207.93 L2039.22 1207.93 L2038.64 1207.93 L2038.05 1207.93 L2037.46 1207.93 L2036.88 1207.93 L2036.29 1207.93 L2035.7 1207.93 L2035.12 1207.93 L2034.53 1207.93 L2033.94 1207.93 L2033.36 1207.93 L2032.77 1207.93 L2032.19 1207.93 L2031.6 1207.93 L2031.01 1207.93 L2030.43 1207.93 L2029.84 1207.93 L2029.25 1207.93 L2028.67 1207.93 L2028.08 1207.93 L2027.49 1207.93 L2026.91 1207.93 L2026.32 1207.93 L2025.73 1207.93 L2025.15 1207.93 L2024.56 1207.93 L2023.98 1207.93 L2023.39 1207.93 L2022.8 1207.93 L2022.22 1207.93 L2021.63 1207.93 L2021.04 1207.93 L2020.46 1207.93 L2019.87 1207.93 L2019.28 1207.93 L2018.7 1207.93 L2018.11 1207.93 L2017.53 1207.93 L2016.94 1207.93 L2016.35 1207.93 L2015.77 1207.93 L2015.18 1207.93 L2014.59 1207.93 L2014.01 1207.93 L2013.42 1207.93 L2012.83 1207.93 L2012.25 1207.93 L2011.66 1207.93 L2011.07 1207.93 L2010.49 1207.93 L2009.9 1207.93 L2009.32 1207.93 L2008.73 1207.93 L2008.14 1207.93 L2007.56 1207.93 L2006.97 1207.93 L2006.38 1207.93 L2005.8 1207.93 L2005.21 1207.93 L2004.62 1207.93 L2004.04 1207.93 L2003.45 1207.93 L2002.86 1207.93 L2002.28 1207.93 L2001.69 1207.93 L2001.11 1207.93 L2000.52 1207.93 L1999.93 1207.93 L1999.35 1207.93 L1998.76 1207.93 L1998.17 1207.93 L1997.59 1207.93 L1997 1207.93 L1996.41 1207.93 L1995.83 1207.93 L1995.24 1207.93 L1994.65 1207.93 L1994.07 1207.93 L1993.48 1207.93 L1992.9 1207.93 L1992.31 1207.93 L1991.72 1207.93 L1991.14 1207.93 L1990.55 1207.93 L1989.96 1207.93 L1989.38 1207.93 L1988.79 1207.93 L1988.2 1207.93 L1987.62 1207.93 L1987.03 1207.93 L1986.45 1207.93 L1985.86 1207.93 L1985.27 1207.93 L1984.69 1207.93 L1984.1 1207.93 L1983.51 1207.93 L1982.93 1207.93 L1982.34 1207.93 L1981.75 1207.93 L1981.17 1207.93 L1980.58 1207.93 L1979.99 1207.93 L1979.41 1207.93 L1978.82 1207.93 L1978.24 1207.93 L1977.65 1207.93 L1977.06 1207.93 L1976.48 1207.93 L1975.89 1207.93 L1975.3 1207.93 L1974.72 1207.93 L1974.13 1207.93 L1973.54 1207.93 L1972.96 1207.93 L1972.37 1207.93 L1971.78 1207.93 L1971.2 1207.93 L1970.61 1207.93 L1970.03 1207.93 L1969.44 1207.93 L1968.85 1207.93 L1968.27 1207.93 L1967.68 1207.93 L1967.09 1207.93 L1966.51 1207.93 L1965.92 1207.93 L1965.33 1207.93 L1964.75 1207.93 L1964.16 1207.93 L1963.58 1207.93 L1962.99 1207.93 L1962.4 1207.93 L1961.82 1207.93 L1961.23 1207.93 L1960.64 1207.93 L1960.06 1207.93 L1959.47 1207.93 L1958.88 1207.93 L1958.3 1207.93 L1957.71 1207.93 L1957.12 1207.93 L1956.54 1207.93 L1955.95 1207.93 L1955.37 1207.93 L1954.78 1207.93 L1954.19 1207.93 L1953.61 1207.93 L1953.02 1207.93 L1952.43 1207.93 L1951.85 1207.93 L1951.26 1207.93 L1950.67 1207.93 L1950.09 1207.93 L1949.5 1207.93 L1948.91 1207.93 L1948.33 1207.93 L1947.74 1207.93 L1947.16 1207.93 L1946.57 1207.93 L1945.98 1207.93 L1945.4 1207.93 L1944.81 1207.93 L1944.22 1207.93 L1943.64 1207.93 L1943.05 1207.93 L1942.46 1207.93 L1941.88 1207.93 L1941.29 1207.93 L1940.71 1207.93 L1940.12 1207.93 L1939.53 1207.93 L1938.95 1207.93 L1938.36 1207.93 L1937.77 1207.93 L1937.19 1207.93 L1936.6 1207.93 L1936.01 1207.93 L1935.43 1207.93 L1934.84 1207.93 L1934.25 1207.93 L1933.67 1207.93 L1933.08 1207.93 L1932.5 1207.93 L1931.91 1207.93 L1931.32 1207.93 L1930.74 1207.93 L1930.15 1207.93 L1929.56 1207.93 L1928.98 1207.93 L1928.39 1207.93 L1927.8 1207.93 L1927.22 1207.93 L1926.63 1207.93 L1926.04 1207.93 L1925.46 1207.93 L1924.87 1207.93 L1924.29 1207.93 L1923.7 1207.93 L1923.11 1207.93 L1922.53 1207.93 L1921.94 1207.93 L1921.35 1207.93 L1920.77 1207.93 L1920.18 1207.93 L1919.59 1207.93 L1919.01 1207.93 L1918.42 1207.93 L1917.83 1207.93 L1917.25 1207.93 L1916.66 1207.93 L1916.08 1207.93 L1915.49 1207.93 L1914.9 1207.93 L1914.32 1207.93 L1913.73 1207.93 L1913.14 1207.93 L1912.56 1207.93 L1911.97 1207.93 L1911.38 1207.93 L1910.8 1207.93 L1910.21 1207.93 L1909.63 1207.93 L1909.04 1207.93 L1908.45 1207.93 L1907.87 1207.93 L1907.28 1207.93 L1906.69 1207.93 L1906.11 1207.93 L1905.52 1207.93 L1904.93 1207.93 L1904.35 1207.93 L1903.76 1207.93 L1903.17 1207.93 L1902.59 1207.93 L1902 1207.93 L1901.42 1207.93 L1900.83 1207.93 L1900.24 1207.93 L1899.66 1207.93 L1899.07 1207.93 L1898.48 1207.93 L1897.9 1207.93 L1897.31 1207.93 L1896.72 1207.93 L1896.14 1207.93 L1895.55 1207.93 L1894.96 1207.93 L1894.38 1207.93 L1893.79 1207.93 L1893.21 1207.93 L1892.62 1207.93 L1892.03 1207.93 L1891.45 1207.93 L1890.86 1207.93 L1890.27 1207.93 L1889.69 1207.93 L1889.1 1207.93 L1888.51 1207.93 L1887.93 1207.93 L1887.34 1207.93 L1886.76 1207.93 L1886.17 1207.93 L1885.58 1207.93 L1885 1207.93 L1884.41 1207.93 L1883.82 1207.93 L1883.24 1207.93 L1882.65 1207.93 L1882.06 1207.93 L1881.48 1207.93 L1880.89 1207.93 L1880.3 1207.93 L1879.72 1207.93 L1879.13 1207.93 L1878.55 1207.93 L1877.96 1207.93 L1877.37 1207.93 L1876.79 1207.93 L1876.2 1207.93 L1875.61 1207.93 L1875.03 1207.93 L1874.44 1207.93 L1873.85 1207.93 L1873.27 1207.93 L1872.68 1207.93 L1872.09 1207.93 L1871.51 1207.93 L1870.92 1207.93 L1870.34 1207.93 L1869.75 1207.93 L1869.16 1207.93 L1868.58 1207.93 L1867.99 1207.93 L1867.4 1207.93 L1866.82 1207.93 L1866.23 1207.93 L1865.64 1207.93 L1865.06 1207.93 L1864.47 1207.93 L1863.88 1207.93 L1863.3 1207.93 L1862.71 1207.93 L1862.13 1207.93 L1861.54 1207.93 L1860.95 1207.93 L1860.37 1207.93 L1859.78 1207.93 L1859.19 1207.93 L1858.61 1207.93 L1858.02 1207.93 L1857.43 1207.93 L1856.85 1207.93 L1856.26 1207.93 L1855.68 1207.93 L1855.09 1207.93 L1854.5 1207.93 L1853.92 1207.93 L1853.33 1207.93 L1852.74 1207.93 L1852.16 1207.93 L1851.57 1207.93 L1850.98 1207.93 L1850.4 1207.93 L1849.81 1207.93 L1849.22 1207.93 L1848.64 1207.93 L1848.05 1207.93 L1847.47 1207.93 L1846.88 1207.93 L1846.29 1207.93 L1845.71 1207.93 L1845.12 1207.93 L1844.53 1207.93 L1843.95 1207.93 L1843.36 1207.93 L1842.77 1207.93 L1842.19 1207.93 L1841.6 1207.93 L1841.01 1207.93 L1840.43 1207.93 L1839.84 1207.93 L1839.26 1207.93 L1838.67 1207.93 L1838.08 1207.93 L1837.5 1207.93 L1836.91 1207.93 L1836.32 1207.93 L1835.74 1207.93 L1835.15 1207.93 L1834.56 1207.93 L1833.98 1207.93 L1833.39 1207.93 L1832.81 1207.93 L1832.22 1207.93 L1831.63 1207.93 L1831.05 1207.93 L1830.46 1207.93 L1829.87 1207.93 L1829.29 1207.93 L1828.7 1207.93 L1828.11 1207.93 L1827.53 1207.93 L1826.94 1207.93 L1826.35 1207.93 L1825.77 1207.93 L1825.18 1207.93 L1824.6 1207.93 L1824.01 1207.93 L1823.42 1207.93 L1822.84 1207.93 L1822.25 1207.93 L1821.66 1207.93 L1821.08 1207.93 L1820.49 1207.93 L1819.9 1207.93 L1819.32 1207.93 L1818.73 1207.93 L1818.14 1207.93 L1817.56 1207.93 L1816.97 1207.93 L1816.39 1207.93 L1815.8 1207.93 L1815.21 1207.93 L1814.63 1207.93 L1814.04 1207.93 L1813.45 1207.93 L1812.87 1207.93 L1812.28 1207.93 L1811.69 1207.93 L1811.11 1207.93 L1810.52 1207.93 L1809.94 1207.93 L1809.35 1207.93 L1808.76 1207.93 L1808.18 1207.93 L1807.59 1207.93 L1807 1207.93 L1806.42 1207.93 L1805.83 1207.93 L1805.24 1207.93 L1804.66 1207.93 L1804.07 1207.93 L1803.48 1207.93 L1802.9 1207.93 L1802.31 1207.93 L1801.73 1207.93 L1801.14 1207.93 L1800.55 1207.93 L1799.97 1207.93 L1799.38 1207.93 L1798.79 1207.93 L1798.21 1207.93 L1797.62 1207.93 L1797.03 1207.93 L1796.45 1207.93 L1795.86 1207.93 L1795.27 1207.93 L1794.69 1207.93 L1794.1 1207.93 L1793.52 1207.93 L1792.93 1207.93 L1792.34 1207.93 L1791.76 1207.93 L1791.17 1207.93 L1790.58 1207.93 L1790 1207.93 L1789.41 1207.93 L1788.82 1207.93 L1788.24 1207.93 L1787.65 1207.93 L1787.06 1207.93 L1786.48 1207.93 L1785.89 1207.93 L1785.31 1207.93 L1784.72 1207.93 L1784.13 1207.93 L1783.55 1207.93 L1782.96 1207.93 L1782.37 1207.93 L1781.79 1207.93 L1781.2 1207.93 L1780.61 1207.93 L1780.03 1207.93 L1779.44 1207.93 L1778.86 1207.93 L1778.27 1207.93 L1777.68 1207.93 L1777.1 1207.93 L1776.51 1207.93 L1775.92 1207.93 L1775.34 1207.93 L1774.75 1207.93 L1774.16 1207.93 L1773.58 1207.93 L1772.99 1207.93 L1772.4 1207.93 L1771.82 1207.93 L1771.23 1207.93 L1770.65 1207.93 L1770.06 1207.93 L1769.47 1207.93 L1768.89 1207.93 L1768.3 1207.93 L1767.71 1207.93 L1767.13 1207.93 L1766.54 1207.93 L1765.95 1207.93 L1765.37 1207.93 L1764.78 1207.93 L1764.19 1207.93 L1763.61 1207.93 L1763.02 1207.93 L1762.44 1207.93 L1761.85 1207.93 L1761.26 1207.93 L1760.68 1207.93 L1760.09 1207.93 L1759.5 1207.93 L1758.92 1207.93 L1758.33 1207.93 L1757.74 1207.93 L1757.16 1207.93 L1756.57 1207.93 L1755.99 1207.93 L1755.4 1207.93 L1754.81 1207.93 L1754.23 1207.93 L1753.64 1207.93 L1753.05 1207.93 L1752.47 1207.93 L1751.88 1207.93 L1751.29 1207.93 L1750.71 1207.93 L1750.12 1207.93 L1749.53 1207.93 L1748.95 1207.93 L1748.36 1207.93 L1747.78 1207.93 L1747.19 1207.93 L1746.6 1207.93 L1746.02 1207.93 L1745.43 1207.93 L1744.84 1207.93 L1744.26 1207.93 L1743.67 1207.93 L1743.08 1207.93 L1742.5 1207.93 L1741.91 1207.93 L1741.32 1207.93 L1740.74 1207.93 L1740.15 1207.93 L1739.57 1207.93 L1738.98 1207.93 L1738.39 1207.93 L1737.81 1207.93 L1737.22 1207.93 L1736.63 1207.93 L1736.05 1207.93 L1735.46 1207.93 L1734.87 1207.93 L1734.29 1207.93 L1733.7 1207.93 L1733.11 1207.93 L1732.53 1207.93 L1731.94 1207.93 L1731.36 1207.93 L1730.77 1207.93 L1730.18 1207.93 L1729.6 1207.93 L1729.01 1207.93 L1728.42 1207.93 L1727.84 1207.93 L1727.25 1207.93 L1726.66 1207.93 L1726.08 1207.93 L1725.49 1207.93 L1724.91 1207.93 L1724.32 1207.93 L1723.73 1207.93 L1723.15 1207.93 L1722.56 1207.93 L1721.97 1207.93 L1721.39 1207.93 L1720.8 1207.93 L1720.21 1207.93 L1719.63 1207.93 L1719.04 1207.93 L1718.45 1207.93 L1717.87 1207.93 L1717.28 1207.93 L1716.7 1207.93 L1716.11 1207.93 L1715.52 1207.93 L1714.94 1207.93 L1714.35 1207.93 L1713.76 1207.93 L1713.18 1207.93 L1712.59 1207.93 L1712 1207.93 L1711.42 1207.93 L1710.83 1207.93 L1710.24 1207.93 L1709.66 1207.93 L1709.07 1207.93 L1708.49 1207.93 L1707.9 1207.93 L1707.31 1207.93 L1706.73 1207.93 L1706.14 1207.93 L1705.55 1207.93 L1704.97 1207.93 L1704.38 1207.93 L1703.79 1207.93 L1703.21 1207.93 L1702.62 1207.93 L1702.04 1207.93 L1701.45 1207.93 L1700.86 1207.93 L1700.28 1207.93 L1699.69 1207.93 L1699.1 1207.93 L1698.52 1207.93 L1697.93 1207.93 L1697.34 1207.93 L1696.76 1207.93 L1696.17 1207.93 L1695.58 1207.93 L1695 1207.93 L1694.41 1207.93 L1693.83 1207.93 L1693.24 1207.93 L1692.65 1207.93 L1692.07 1207.93 L1691.48 1207.93 L1690.89 1207.93 L1690.31 1207.93 L1689.72 1207.93 L1689.13 1207.93 L1688.55 1207.93 L1687.96 1207.93 L1687.37 1207.93 L1686.79 1207.93 L1686.2 1207.93 L1685.62 1207.93 L1685.03 1207.93 L1684.44 1207.93 L1683.86 1207.93 L1683.27 1207.93 L1682.68 1207.93 L1682.1 1207.93 L1681.51 1207.93 L1680.92 1207.93 L1680.34 1207.93 L1679.75 1207.93 L1679.17 1207.93 L1678.58 1207.93 L1677.99 1207.93 L1677.41 1207.93 L1676.82 1207.93 L1676.23 1207.93 L1675.65 1207.93 L1675.06 1207.93 L1674.47 1207.93 L1673.89 1207.93 L1673.3 1207.93 L1672.71 1207.93 L1672.13 1207.93 L1671.54 1207.93 L1670.96 1207.93 L1670.37 1207.93 L1669.78 1207.93 L1669.2 1207.93 L1668.61 1207.93 L1668.02 1207.93 L1667.44 1207.93 L1666.85 1207.93 L1666.26 1207.93 L1665.68 1207.93 L1665.09 1207.93 L1664.5 1207.93 L1663.92 1207.93 L1663.33 1207.93 L1662.75 1207.93 L1662.16 1207.93 L1661.57 1207.93 L1660.99 1207.93 L1660.4 1207.93 L1659.81 1207.93 L1659.23 1207.93 L1658.64 1207.93 L1658.05 1207.93 L1657.47 1207.93 L1656.88 1207.93 L1656.29 1207.93 L1655.71 1207.93 L1655.12 1207.93 L1654.54 1207.93 L1653.95 1207.93 L1653.36 1207.93 L1652.78 1207.93 L1652.19 1207.93 L1651.6 1207.93 L1651.02 1207.93 L1650.43 1207.93 L1649.84 1207.93 L1649.26 1207.93 L1648.67 1207.93 L1648.09 1207.93 L1647.5 1207.93 L1646.91 1207.93 L1646.33 1207.93 L1645.74 1207.93 L1645.15 1207.93 L1644.57 1207.93 L1643.98 1207.93 L1643.39 1207.93 L1642.81 1207.93 L1642.22 1207.93 L1641.63 1207.93 L1641.05 1207.93 L1640.46 1207.93 L1639.88 1207.93 L1639.29 1207.93 L1638.7 1207.93 L1638.12 1207.93 L1637.53 1207.93 L1636.94 1207.93 L1636.36 1207.93 L1635.77 1207.93 L1635.18 1207.93 L1634.6 1207.93 L1634.01 1207.93 L1633.42 1207.93 L1632.84 1207.93 L1632.25 1207.93 L1631.67 1207.93 L1631.08 1207.93 L1630.49 1207.93 L1629.91 1207.93 L1629.32 1207.93 L1628.73 1207.93 L1628.15 1207.93 L1627.56 1207.93 L1626.97 1207.93 L1626.39 1207.93 L1625.8 1207.93 L1625.22 1207.93 L1624.63 1207.93 L1624.04 1207.93 L1623.46 1207.93 L1622.87 1207.93 L1622.28 1207.93 L1621.7 1207.93 L1621.11 1207.93 L1620.52 1207.93 L1619.94 1207.93 L1619.35 1207.93 L1618.76 1207.93 L1618.18 1207.93 L1617.59 1207.93 L1617.01 1207.93 L1616.42 1207.93 L1615.83 1207.93 L1615.25 1207.93 L1614.66 1207.93 L1614.07 1207.93 L1613.49 1207.93 L1612.9 1207.93 L1612.31 1207.93 L1611.73 1207.93 L1611.14 1207.93 L1610.55 1207.93 L1609.97 1207.93 L1609.38 1207.93 L1608.8 1207.93 L1608.21 1207.93 L1607.62 1207.93 L1607.04 1207.93 L1606.45 1207.93 L1605.86 1207.93 L1605.28 1207.93 L1604.69 1207.93 L1604.1 1207.93 L1603.52 1207.93 L1602.93 1207.93 L1602.34 1207.93 L1601.76 1207.93 L1601.17 1207.93 L1600.59 1207.93 L1600 1207.93 L1599.41 1207.93 L1598.83 1207.93 L1598.24 1207.93 L1597.65 1207.93 L1597.07 1207.93 L1596.48 1207.93 L1595.89 1207.93 L1595.31 1207.93 L1594.72 1207.93 L1594.14 1207.93 L1593.55 1207.93 L1592.96 1207.93 L1592.38 1207.93 L1591.79 1207.93 L1591.2 1207.93 L1590.62 1207.93 L1590.03 1207.93 L1589.44 1207.93 L1588.86 1207.93 L1588.27 1207.93 L1587.68 1207.93 L1587.1 1207.93 L1586.51 1207.93 L1585.93 1207.93 L1585.34 1207.93 L1584.75 1207.93 L1584.17 1207.93 L1583.58 1207.93 L1582.99 1207.93 L1582.41 1207.93 L1581.82 1207.93 L1581.23 1207.93 L1580.65 1207.93 L1580.06 1207.93 L1579.47 1207.93 L1578.89 1207.93 L1578.3 1207.93 L1577.72 1207.93 L1577.13 1207.93 L1576.54 1207.93 L1575.96 1207.93 L1575.37 1207.93 L1574.78 1207.93 L1574.2 1207.93 L1573.61 1207.93 L1573.02 1207.93 L1572.44 1207.93 L1571.85 1207.93 L1571.27 1207.93 L1570.68 1207.93 L1570.09 1207.93 L1569.51 1207.93 L1568.92 1207.93 L1568.33 1207.93 L1567.75 1207.93 L1567.16 1207.93 L1566.57 1207.93 L1565.99 1207.93 L1565.4 1207.93 L1564.81 1207.93 L1564.23 1207.93 L1563.64 1207.93 L1563.06 1207.93 L1562.47 1207.93 L1561.88 1207.93 L1561.3 1207.93 L1560.71 1207.93 L1560.12 1207.93 L1559.54 1207.93 L1558.95 1207.93 L1558.36 1207.93 L1557.78 1207.93 L1557.19 1207.93 L1556.6 1207.93 L1556.02 1207.93 L1555.43 1207.93 L1554.85 1207.93 L1554.26 1207.93 L1553.67 1207.93 L1553.09 1207.93 L1552.5 1207.93 L1551.91 1207.93 L1551.33 1207.93 L1550.74 1207.93 L1550.15 1207.93 L1549.57 1207.93 L1548.98 1207.93 L1548.4 1207.93 L1547.81 1207.93 L1547.22 1207.93 L1546.64 1207.93 L1546.05 1207.93 L1545.46 1207.93 L1544.88 1207.93 L1544.29 1207.93 L1543.7 1207.93 L1543.12 1207.93 L1542.53 1207.93 L1541.94 1207.93 L1541.36 1207.93 L1540.77 1207.93 L1540.19 1207.93 L1539.6 1207.93 L1539.01 1207.93 L1538.43 1207.93 L1537.84 1207.93 L1537.25 1207.93 L1536.67 1207.93 L1536.08 1207.93 L1535.49 1207.93 L1534.91 1207.93 L1534.32 1207.93 L1533.73 1207.93 L1533.15 1207.93 L1532.56 1207.93 L1531.98 1207.93 L1531.39 1207.93 L1530.8 1207.93 L1530.22 1207.93 L1529.63 1207.93 L1529.04 1207.93 L1528.46 1207.93 L1527.87 1207.93 L1527.28 1207.93 L1526.7 1207.93 L1526.11 1207.93 L1525.52 1207.93 L1524.94 1207.93 L1524.35 1207.93 L1523.77 1207.93 L1523.18 1207.93 L1522.59 1207.93 L1522.01 1207.93 L1521.42 1207.93 L1520.83 1207.93 L1520.25 1207.93 L1519.66 1207.93 L1519.07 1207.93 L1518.49 1207.93 L1517.9 1207.93 L1517.32 1207.93 L1516.73 1207.93 L1516.14 1207.93 L1515.56 1207.93 L1514.97 1207.93 L1514.38 1207.93 L1513.8 1207.93 L1513.21 1207.93 L1512.62 1207.93 L1512.04 1207.93 L1511.45 1207.93 L1510.86 1207.93 L1510.28 1207.93 L1509.69 1207.93 L1509.11 1207.93 L1508.52 1207.93 L1507.93 1207.93 L1507.35 1207.93 L1506.76 1207.93 L1506.17 1207.93 L1505.59 1207.93 L1505 1207.93 L1504.41 1207.93 L1503.83 1207.93 L1503.24 1207.93 L1502.65 1207.93 L1502.07 1207.93 L1501.48 1207.93 L1500.9 1207.93 L1500.31 1207.93 L1499.72 1207.93 L1499.14 1207.93 L1498.55 1207.93 L1497.96 1207.93 L1497.38 1207.93 L1496.79 1207.93 L1496.2 1207.93 L1495.62 1207.93 L1495.03 1207.93 L1494.45 1207.93 L1493.86 1207.93 L1493.27 1207.93 L1492.69 1207.93 L1492.1 1207.93 L1491.51 1207.93 L1490.93 1207.93 L1490.34 1207.93 L1489.75 1207.93 L1489.17 1207.93 L1488.58 1207.93 L1487.99 1207.93 L1487.41 1207.93 L1486.82 1207.93 L1486.24 1207.93 L1485.65 1207.93 L1485.06 1207.93 L1484.48 1207.93 L1483.89 1207.93 L1483.3 1207.93 L1482.72 1207.93 L1482.13 1207.93 L1481.54 1207.93 L1480.96 1207.93 L1480.37 1207.93 L1479.78 1207.93 L1479.2 1207.93 L1478.61 1207.93 L1478.03 1207.93 L1477.44 1207.93 L1476.85 1207.93 L1476.27 1207.93 L1475.68 1207.93 L1475.09 1207.93 L1474.51 1207.93 L1473.92 1207.93 L1473.33 1207.93 L1472.75 1207.93 L1472.16 1207.93 L1471.57 1207.93 L1470.99 1207.93 L1470.4 1207.93 L1469.82 1207.93 L1469.23 1207.93 L1468.64 1207.93 L1468.06 1207.93 L1467.47 1207.93 L1466.88 1207.93 L1466.3 1207.93 L1465.71 1207.93 L1465.12 1207.93 L1464.54 1207.93 L1463.95 1207.93 L1463.37 1207.93 L1462.78 1207.93 L1462.19 1207.93 L1461.61 1207.93 L1461.02 1207.93 L1460.43 1207.93 L1459.85 1207.93 L1459.26 1207.93 L1458.67 1207.93 L1458.09 1207.93 L1457.5 1207.93 L1456.91 1207.93 L1456.33 1207.93 L1455.74 1207.93 L1455.16 1207.93 L1454.57 1207.93 L1453.98 1207.93 L1453.4 1207.93 L1452.81 1207.93 L1452.22 1207.93 L1451.64 1207.93 L1451.05 1207.93 L1450.46 1207.93 L1449.88 1207.93 L1449.29 1207.93 L1448.7 1207.93 L1448.12 1207.93 L1447.53 1207.93 L1446.95 1207.93 L1446.36 1207.93 L1445.77 1207.93 L1445.19 1207.93 L1444.6 1207.93 L1444.01 1207.93 L1443.43 1207.93 L1442.84 1207.93 L1442.25 1207.93 L1441.67 1207.93 L1441.08 1207.93 L1440.5 1207.93 L1439.91 1207.93 L1439.32 1207.93 L1438.74 1207.93 L1438.15 1207.93 L1437.56 1207.93 L1436.98 1207.93 L1436.39 1207.93 L1435.8 1207.93 L1435.22 1207.93 L1434.63 1207.93 L1434.04 1207.93 L1433.46 1207.93 L1432.87 1207.93 L1432.29 1207.93 L1431.7 1207.93 L1431.11 1207.93 L1430.53 1207.93 L1429.94 1207.93 L1429.35 1207.93 L1428.77 1207.93 L1428.18 1207.93 L1427.59 1207.93 L1427.01 1207.93 L1426.42 1207.93 L1425.83 1207.93 L1425.25 1207.93 L1424.66 1207.93 L1424.08 1207.93 L1423.49 1207.93 L1422.9 1207.93 L1422.32 1207.93 L1421.73 1207.93 L1421.14 1207.93 L1420.56 1207.93 L1419.97 1207.93 L1419.38 1207.93 L1418.8 1207.93 L1418.21 1207.93 L1417.63 1207.93 L1417.04 1207.93 L1416.45 1207.93 L1415.87 1207.93 L1415.28 1207.93 L1414.69 1207.93 L1414.11 1207.93 L1413.52 1207.93 L1412.93 1207.93 L1412.35 1207.93 L1411.76 1207.93 L1411.17 1207.93 L1410.59 1207.93 L1410 1207.93 L1409.42 1207.93 L1408.83 1207.93 L1408.24 1207.93 L1407.66 1207.93 L1407.07 1207.93 L1406.48 1207.93 L1405.9 1207.93 L1405.31 1207.93 L1404.72 1207.93 L1404.14 1207.93 L1403.55 1207.93 L1402.96 1207.93 L1402.38 1207.93 L1401.79 1207.93 L1401.21 1207.93 L1400.62 1207.93 L1400.03 1207.93 L1399.45 1207.93 L1398.86 1207.93 L1398.27 1207.93 L1397.69 1207.93 L1397.1 1207.93 L1396.51 1207.93 L1395.93 1207.93 L1395.34 1207.93 L1394.75 1207.93 L1394.17 1207.93 L1393.58 1207.93 L1393 1207.93 L1392.41 1207.93 L1391.82 1207.93 L1391.24 1207.93 L1390.65 1207.93 L1390.06 1207.93 L1389.48 1207.93 L1388.89 1207.93 L1388.3 1207.93 L1387.72 1207.93 L1387.13 1207.93 L1386.55 1207.93 L1385.96 1207.93 L1385.37 1207.93 L1384.79 1207.93 L1384.2 1207.93 L1383.61 1207.93 L1383.03 1207.93 L1382.44 1207.93 L1381.85 1207.93 L1381.27 1207.93 L1380.68 1207.93 L1380.09 1207.93 L1379.51 1207.93 L1378.92 1207.93 L1378.34 1207.93 L1377.75 1207.93 L1377.16 1207.93 L1376.58 1207.93 L1375.99 1207.93 L1375.4 1207.93 L1374.82 1207.93 L1374.23 1207.93 L1373.64 1207.93 L1373.06 1207.93 L1372.47 1207.93 L1371.88 1207.93 L1371.3 1207.93 L1370.71 1207.93 L1370.13 1207.93 L1369.54 1207.93 L1368.95 1207.93 L1368.37 1207.93 L1367.78 1207.93 L1367.19 1207.93 L1366.61 1207.93 L1366.02 1207.93 L1365.43 1207.93 L1364.85 1207.93 L1364.26 1207.93 L1363.68 1207.93 L1363.09 1207.93 L1362.5 1207.93 L1361.92 1207.93 L1361.33 1207.93 L1360.74 1207.93 L1360.16 1207.93 L1359.57 1207.93 L1358.98 1207.93 L1358.4 1207.93 L1357.81 1207.93 L1357.22 1207.93 L1356.64 1207.93 L1356.05 1207.93 L1355.47 1207.93 L1354.88 1207.93 L1354.29 1207.93 L1353.71 1207.93 L1353.12 1207.93 L1352.53 1207.93 L1351.95 1207.93 L1351.36 1207.93 L1350.77 1207.93 L1350.19 1207.93 L1349.6 1207.93 L1349.01 1207.93 L1348.43 1207.93 L1347.84 1207.93 L1347.26 1207.93 L1346.67 1207.93 L1346.08 1207.93 L1345.5 1207.93 L1344.91 1207.93 L1344.32 1207.93 L1343.74 1207.93 L1343.15 1207.93 L1342.56 1207.93 L1341.98 1207.93 L1341.39 1207.93 L1340.8 1207.93 L1340.22 1207.93 L1339.63 1207.93 L1339.05 1207.93 L1338.46 1207.93 L1337.87 1207.93 L1337.29 1207.93 L1336.7 1207.93 L1336.11 1207.93 L1335.53 1207.93 L1334.94 1207.93 L1334.35 1207.93 L1333.77 1207.93 L1333.18 1207.93 L1332.6 1207.93 L1332.01 1207.93 L1331.42 1207.93 L1330.84 1207.93 L1330.25 1207.93 L1329.66 1207.93 L1329.08 1207.93 L1328.49 1207.93 L1327.9 1207.93 L1327.32 1207.93 L1326.73 1207.93 L1326.14 1207.93 L1325.56 1207.93 L1324.97 1207.93 L1324.39 1207.93 L1323.8 1207.93 L1323.21 1207.93 L1322.63 1207.93 L1322.04 1207.93 L1321.45 1207.93 L1320.87 1207.93 L1320.28 1207.93 L1319.69 1207.93 L1319.11 1207.93 L1318.52 1207.93 L1317.93 1207.93 L1317.35 1207.93 L1316.76 1207.93 L1316.18 1207.93 L1315.59 1207.93 L1315 1207.93 L1314.42 1207.93 L1313.83 1207.93 L1313.24 1207.93 L1312.66 1207.93 L1312.07 1207.93 L1311.48 1207.93 L1310.9 1207.93 L1310.31 1207.93 L1309.73 1207.93 L1309.14 1207.93 L1308.55 1207.93 L1307.97 1207.93 L1307.38 1207.93 L1306.79 1207.93 L1306.21 1207.93 L1305.62 1207.93 L1305.03 1207.93 L1304.45 1207.93 L1303.86 1207.93 L1303.27 1207.93 L1302.69 1207.93 L1302.1 1207.93 L1301.52 1207.93 L1300.93 1207.93 L1300.34 1207.93 L1299.76 1207.93 L1299.17 1207.93 L1298.58 1207.93 L1298 1207.93 L1297.41 1207.93 L1296.82 1207.93 L1296.24 1207.93 L1295.65 1207.93 L1295.06 1207.93 L1294.48 1207.93 L1293.89 1207.93 L1293.31 1207.93 L1292.72 1207.93 L1292.13 1207.93 L1291.55 1207.93 L1290.96 1207.93 L1290.37 1207.93 L1289.79 1207.93 L1289.2 1207.93 L1288.61 1207.93 L1288.03 1207.93 L1287.44 1207.93 L1286.86 1207.93 L1286.27 1207.93 L1285.68 1207.93 L1285.1 1207.93 L1284.51 1207.93 L1283.92 1207.93 L1283.34 1207.93 L1282.75 1207.93 L1282.16 1207.93 L1281.58 1207.93 L1280.99 1207.93 L1280.4 1207.93 L1279.82 1207.93 L1279.23 1207.93 L1278.65 1207.93 L1278.06 1207.93 L1277.47 1207.93 L1276.89 1207.93 L1276.3 1207.93 L1275.71 1207.93 L1275.13 1207.93 L1274.54 1207.93 L1273.95 1207.93 L1273.37 1207.93 L1272.78 1207.93 L1272.19 1207.93 L1271.61 1207.93 L1271.02 1207.93 L1270.44 1207.93 L1269.85 1207.93 L1269.26 1207.93 L1268.68 1207.93 L1268.09 1207.93 L1267.5 1207.93 L1266.92 1207.93 L1266.33 1207.93 L1265.74 1207.93 L1265.16 1207.93 L1264.57 1207.93 L1263.98 1207.93 L1263.4 1207.93 L1262.81 1207.93 L1262.23 1207.93 L1261.64 1207.93 L1261.05 1207.93 L1260.47 1207.93 L1259.88 1207.93 L1259.29 1207.93 L1258.71 1207.93 L1258.12 1207.93 L1257.53 1207.93 L1256.95 1207.93 L1256.36 1207.93 L1255.78 1207.93 L1255.19 1207.93 L1254.6 1207.93 L1254.02 1207.93 L1253.43 1207.93 L1252.84 1207.93 L1252.26 1207.93 L1251.67 1207.93 L1251.08 1207.93 L1250.5 1207.93 L1249.91 1207.93 L1249.32 1207.93 L1248.74 1207.93 L1248.15 1207.93 L1247.57 1207.93 L1246.98 1207.93 L1246.39 1207.93 L1245.81 1207.93 L1245.22 1207.93 L1244.63 1207.93 L1244.05 1207.93 L1243.46 1207.93 L1242.87 1207.93 L1242.29 1207.93 L1241.7 1207.93 L1241.11 1207.93 L1240.53 1207.93 L1239.94 1207.93 L1239.36 1207.93 L1238.77 1207.93 L1238.18 1207.93 L1237.6 1207.93 L1237.01 1207.93 L1236.42 1207.93 L1235.84 1207.93 L1235.25 1207.93 L1234.66 1207.93 L1234.08 1207.93 L1233.49 1207.93 L1232.91 1207.93 L1232.32 1207.93 L1231.73 1207.93 L1231.15 1207.93 L1230.56 1207.93 L1229.97 1207.93 L1229.39 1207.93 L1228.8 1207.93 L1228.21 1207.93 L1227.63 1207.93 L1227.04 1207.93 L1226.45 1207.93 L1225.87 1207.93 L1225.28 1207.93 L1224.7 1207.93 L1224.11 1207.93 L1223.52 1207.93 L1222.94 1207.93 L1222.35 1207.93 L1221.76 1207.93 L1221.18 1207.93 L1220.59 1207.93 L1220 1207.93 L1219.42 1207.93 L1218.83 1207.93 L1218.24 1207.93 L1217.66 1207.93 L1217.07 1207.93 L1216.49 1207.93 L1215.9 1207.93 L1215.31 1207.93 L1214.73 1207.93 L1214.14 1207.93 L1213.55 1207.93 L1212.97 1207.93 L1212.38 1207.93 L1211.79 1207.93 L1211.21 1207.93 L1210.62 1207.93 L1210.03 1207.93 L1209.45 1207.93 L1208.86 1207.93 L1208.28 1207.93 L1207.69 1207.93 L1207.1 1207.93 L1206.52 1207.93 L1205.93 1207.93 L1205.34 1207.93 L1204.76 1207.93 L1204.17 1207.93 L1203.58 1207.93 L1203 1207.93 L1202.41 1207.93 L1201.83 1207.93 L1201.24 1207.93 L1200.65 1207.93 L1200.07 1207.93 L1199.48 1207.93 L1198.89 1207.93 L1198.31 1207.93 L1197.72 1207.93 L1197.13 1207.93 L1196.55 1207.93 L1195.96 1207.93 L1195.37 1207.93 L1194.79 1207.93 L1194.2 1207.93 L1193.62 1207.93 L1193.03 1207.93 L1192.44 1207.93 L1191.86 1207.93 L1191.27 1207.93 L1190.68 1207.93 L1190.1 1207.93 L1189.51 1207.93 L1188.92 1207.93 L1188.34 1207.93 L1187.75 1207.93 L1187.16 1207.93 L1186.58 1207.93 L1185.99 1207.93 L1185.41 1207.93 L1184.82 1207.93 L1184.23 1207.93 L1183.65 1207.93 L1183.06 1207.93 L1182.47 1207.93 L1181.89 1207.93 L1181.3 1207.93 L1180.71 1207.93 L1180.13 1207.93 L1179.54 1207.93 L1178.96 1207.93 L1178.37 1207.93 L1177.78 1207.93 L1177.2 1207.93 L1176.61 1207.93 L1176.02 1207.93 L1175.44 1207.93 L1174.85 1207.93 L1174.26 1207.93 L1173.68 1207.93 L1173.09 1207.93 L1172.5 1207.93 L1171.92 1207.93 L1171.33 1207.93 L1170.75 1207.93 L1170.16 1207.93 L1169.57 1207.93 L1168.99 1207.93 L1168.4 1207.93 L1167.81 1207.93 L1167.23 1207.93 L1166.64 1207.93 L1166.05 1207.93 L1165.47 1207.93 L1164.88 1207.93 L1164.29 1207.93 L1163.71 1207.93 L1163.12 1207.93 L1162.54 1207.93 L1161.95 1207.93 L1161.36 1207.93 L1160.78 1207.93 L1160.19 1207.93 L1159.6 1207.93 L1159.02 1207.93 L1158.43 1207.93 L1157.84 1207.93 L1157.26 1207.93 L1156.67 1207.93 L1156.09 1207.93 L1155.5 1207.93 L1154.91 1207.93 L1154.33 1207.93 L1153.74 1207.93 L1153.15 1207.93 L1152.57 1207.93 L1151.98 1207.93 L1151.39 1207.93 L1150.81 1207.93 L1150.22 1207.93 L1149.63 1207.93 L1149.05 1207.93 L1148.46 1207.93 L1147.88 1207.93 L1147.29 1207.93 L1146.7 1207.93 L1146.12 1207.93 L1145.53 1207.93 L1144.94 1207.93 L1144.36 1207.93 L1143.77 1207.93 L1143.18 1207.93 L1142.6 1207.93 L1142.01 1207.93 L1141.42 1207.93 L1140.84 1207.93 L1140.25 1207.93 L1139.67 1207.93 L1139.08 1207.93 L1138.49 1207.93 L1137.91 1207.93 L1137.32 1207.93 L1136.73 1207.93 L1136.15 1207.93 L1135.56 1207.93 L1134.97 1207.93 L1134.39 1207.93 L1133.8 1207.93 L1133.21 1207.93 L1132.63 1207.93 L1132.04 1207.93 L1131.46 1207.93 L1130.87 1207.93 L1130.28 1207.93 L1129.7 1207.93 L1129.11 1207.93 L1128.52 1207.93 L1127.94 1207.93 L1127.35 1207.93 L1126.76 1207.93 L1126.18 1207.93 L1125.59 1207.93 L1125.01 1207.93 L1124.42 1207.93 L1123.83 1207.93 L1123.25 1207.93 L1122.66 1207.93 L1122.07 1207.93 L1121.49 1207.93 L1120.9 1207.93 L1120.31 1207.93 L1119.73 1207.93 L1119.14 1207.93 L1118.55 1207.93 L1117.97 1207.93 L1117.38 1207.93 L1116.8 1207.93 L1116.21 1207.93 L1115.62 1207.93 L1115.04 1207.93 L1114.45 1207.93 L1113.86 1207.93 L1113.28 1207.93 L1112.69 1207.93 L1112.1 1207.93 L1111.52 1207.93 L1110.93 1207.93 L1110.34 1207.93 L1109.76 1207.93 L1109.17 1207.93 L1108.59 1207.93 L1108 1207.93 L1107.41 1207.93 L1106.83 1207.93 L1106.24 1207.93 L1105.65 1207.93 L1105.07 1207.93 L1104.48 1207.93 L1103.89 1207.93 L1103.31 1207.93 L1102.72 1207.93 L1102.14 1207.93 L1101.55 1207.93 L1100.96 1207.93 L1100.38 1207.93 L1099.79 1207.93 L1099.2 1207.93 L1098.62 1207.93 L1098.03 1207.93 L1097.44 1207.93 L1096.86 1207.93 L1096.27 1207.93 L1095.68 1207.93 L1095.1 1207.93 L1094.51 1207.93 L1093.93 1207.93 L1093.34 1207.93 L1092.75 1207.93 L1092.17 1207.93 L1091.58 1207.93 L1090.99 1207.93 L1090.41 1207.93 L1089.82 1207.93 L1089.23 1207.93 L1088.65 1207.93 L1088.06 1207.93 L1087.47 1207.93 L1086.89 1207.93 L1086.3 1207.93 L1085.72 1207.93 L1085.13 1207.93 L1084.54 1207.93 L1083.96 1207.93 L1083.37 1207.93 L1082.78 1207.93 L1082.2 1207.93 L1081.61 1207.93 L1081.02 1207.93 L1080.44 1207.93 L1079.85 1207.93 L1079.26 1207.93 L1078.68 1207.93 L1078.09 1207.93 L1077.51 1207.93 L1076.92 1207.93 L1076.33 1207.93 L1075.75 1207.93 L1075.16 1207.93 L1074.57 1207.93 L1073.99 1207.93 L1073.4 1207.93 L1072.81 1207.93 L1072.23 1207.93 L1071.64 1207.93 L1071.06 1207.93 L1070.47 1207.93 L1069.88 1207.93 L1069.3 1207.93 L1068.71 1207.93 L1068.12 1207.93 L1067.54 1207.93 L1066.95 1207.93 L1066.36 1207.93 L1065.78 1207.93 L1065.19 1207.93 L1064.6 1207.93 L1064.02 1207.93 L1063.43 1207.93 L1062.85 1207.93 L1062.26 1207.93 L1061.67 1207.93 L1061.09 1207.93 L1060.5 1207.93 L1059.91 1207.93 L1059.33 1207.93 L1058.74 1207.93 L1058.15 1207.93 L1057.57 1207.93 L1056.98 1207.93 L1056.39 1207.93 L1055.81 1207.93 L1055.22 1207.93 L1054.64 1207.93 L1054.05 1207.93 L1053.46 1207.93 L1052.88 1207.93 L1052.29 1207.93 L1051.7 1207.93 L1051.12 1207.93 L1050.53 1207.93 L1049.94 1207.93 L1049.36 1207.93 L1048.77 1207.93 L1048.19 1207.93 L1047.6 1207.93 L1047.01 1207.93 L1046.43 1207.93 L1045.84 1207.93 L1045.25 1207.93 L1044.67 1207.93 L1044.08 1207.93 L1043.49 1207.93 L1042.91 1207.93 L1042.32 1207.93 L1041.73 1207.93 L1041.15 1207.93 L1040.56 1207.93 L1039.98 1207.93 L1039.39 1207.93 L1038.8 1207.93 L1038.22 1207.93 L1037.63 1207.93 L1037.04 1207.93 L1036.46 1207.93 L1035.87 1207.93 L1035.28 1207.93 L1034.7 1207.93 L1034.11 1207.93 L1033.52 1207.93 L1032.94 1207.93 L1032.35 1207.93 L1031.77 1207.93 L1031.18 1207.93 L1030.59 1207.93 L1030.01 1207.93 L1029.42 1207.93 L1028.83 1207.93 L1028.25 1207.93 L1027.66 1207.93 L1027.07 1207.93 L1026.49 1207.93 L1025.9 1207.93 L1025.32 1207.93 L1024.73 1207.93 L1024.14 1207.93 L1023.56 1207.93 L1022.97 1207.93 L1022.38 1207.93 L1021.8 1207.93 L1021.21 1207.93 L1020.62 1207.93 L1020.04 1207.93 L1019.45 1207.93 L1018.86 1207.93 L1018.28 1207.93 L1017.69 1207.93 L1017.11 1207.93 L1016.52 1207.93 L1015.93 1207.93 L1015.35 1207.93 L1014.76 1207.93 L1014.17 1207.93 L1013.59 1207.93 L1013 1207.93 L1012.41 1207.93 L1011.83 1207.93 L1011.24 1207.93 L1010.65 1207.93 L1010.07 1207.93 L1009.48 1207.93 L1008.9 1207.93 L1008.31 1207.93 L1007.72 1207.93 L1007.14 1207.93 L1006.55 1207.93 L1005.96 1207.93 L1005.38 1207.93 L1004.79 1207.93 L1004.2 1207.93 L1003.62 1207.93 L1003.03 1207.93 L1002.44 1207.93 L1001.86 1207.93 L1001.27 1207.93 L1000.69 1207.93 L1000.1 1207.93 L999.513 1207.93 L998.926 1207.93 L998.34 1207.93 L997.754 1207.93 L997.167 1207.93 L996.581 1207.93 L995.994 1207.93 L995.408 1207.93 L994.822 1207.93 L994.235 1207.93 L993.649 1207.93 L993.062 1207.93 L992.476 1207.93 L991.889 1207.93 L991.303 1207.93 L990.717 1207.93 L990.13 1207.93 L989.544 1207.93 L988.957 1207.93 L988.371 1207.93 L987.785 1207.93 L987.198 1207.93 L986.612 1207.93 L986.025 1207.93  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1208.26 986.612,1208.26 987.198,1208.26 987.785,1208.26 988.371,1208.26 988.957,1208.26 989.544,1208.26 990.13,1208.26 990.717,1208.26 991.303,1208.26 991.889,1208.26 992.476,1208.26 993.062,1208.26 993.649,1208.26 994.235,1208.26 994.822,1208.26 995.408,1208.26 995.994,1208.26 996.581,1208.26 997.167,1208.26 997.754,1208.26 998.34,1208.26 998.926,1208.26 999.513,1208.26 1000.1,1208.26 1000.69,1208.26 1001.27,1208.26 1001.86,1208.26 1002.44,1208.26 1003.03,1208.26 1003.62,1208.26 1004.2,1208.26 1004.79,1208.26 1005.38,1208.26 1005.96,1208.26 1006.55,1208.26 1007.14,1208.26 1007.72,1208.26 1008.31,1208.26 1008.9,1208.26 1009.48,1208.26 1010.07,1208.26 1010.65,1208.26 1011.24,1208.26 1011.83,1208.26 1012.41,1208.26 1013,1208.26 1013.59,1208.26 1014.17,1208.26 1014.76,1208.26 1015.35,1208.26 1015.93,1208.26 1016.52,1208.26 1017.11,1208.26 1017.69,1208.26 1018.28,1208.26 1018.86,1208.26 1019.45,1208.26 1020.04,1208.26 1020.62,1208.26 1021.21,1208.26 1021.8,1208.26 1022.38,1208.26 1022.97,1208.26 1023.56,1208.26 1024.14,1208.26 1024.73,1208.26 1025.32,1208.26 1025.9,1208.26 1026.49,1208.26 1027.07,1208.26 1027.66,1208.26 1028.25,1208.26 1028.83,1208.26 1029.42,1208.26 1030.01,1208.26 1030.59,1208.26 1031.18,1208.26 1031.77,1208.26 1032.35,1208.26 1032.94,1208.26 1033.52,1208.26 1034.11,1208.26 1034.7,1208.26 1035.28,1208.26 1035.87,1208.26 1036.46,1208.26 1037.04,1208.26 1037.63,1208.26 1038.22,1208.26 1038.8,1208.26 1039.39,1208.26 1039.98,1208.26 1040.56,1208.26 1041.15,1208.26 1041.73,1208.26 1042.32,1208.26 1042.91,1208.26 1043.49,1208.26 1044.08,1208.26 1044.67,1208.26 1045.25,1208.26 1045.84,1208.26 1046.43,1208.26 1047.01,1208.26 1047.6,1208.26 1048.19,1208.26 1048.77,1208.26 1049.36,1208.26 1049.94,1208.26 1050.53,1208.26 1051.12,1208.26 1051.7,1208.26 1052.29,1208.26 1052.88,1208.26 1053.46,1208.26 1054.05,1208.26 1054.64,1208.26 1055.22,1208.26 1055.81,1208.26 1056.39,1208.26 1056.98,1208.26 1057.57,1208.26 1058.15,1208.26 1058.74,1208.26 1059.33,1208.26 1059.91,1208.26 1060.5,1208.26 1061.09,1208.26 1061.67,1208.26 1062.26,1208.26 1062.85,1208.26 1063.43,1208.26 1064.02,1208.26 1064.6,1208.26 1065.19,1208.26 1065.78,1208.26 1066.36,1208.26 1066.95,1208.26 1067.54,1208.26 1068.12,1208.26 1068.71,1208.26 1069.3,1208.26 1069.88,1208.26 1070.47,1208.26 1071.06,1208.26 1071.64,1208.26 1072.23,1208.26 1072.81,1208.26 1073.4,1208.26 1073.99,1208.26 1074.57,1208.26 1075.16,1208.26 1075.75,1208.26 1076.33,1208.26 1076.92,1208.26 1077.51,1208.26 1078.09,1208.26 1078.68,1208.26 1079.26,1208.26 1079.85,1208.26 1080.44,1208.26 1081.02,1208.26 1081.61,1208.26 1082.2,1208.26 1082.78,1208.26 1083.37,1208.26 1083.96,1208.26 1084.54,1208.26 1085.13,1208.26 1085.72,1208.26 1086.3,1208.26 1086.89,1208.26 1087.47,1208.26 1088.06,1208.26 1088.65,1208.26 1089.23,1208.26 1089.82,1208.26 1090.41,1208.26 1090.99,1208.26 1091.58,1208.26 1092.17,1208.26 1092.75,1208.26 1093.34,1208.26 1093.93,1208.26 1094.51,1208.26 1095.1,1208.26 1095.68,1208.26 1096.27,1208.26 1096.86,1208.26 1097.44,1208.26 1098.03,1208.26 1098.62,1208.26 1099.2,1208.26 1099.79,1208.26 1100.38,1208.26 1100.96,1208.26 1101.55,1208.26 1102.14,1208.26 1102.72,1208.26 1103.31,1208.26 1103.89,1208.26 1104.48,1208.26 1105.07,1208.26 1105.65,1208.26 1106.24,1208.26 1106.83,1208.26 1107.41,1208.26 1108,1208.26 1108.59,1208.26 1109.17,1208.26 1109.76,1208.26 1110.34,1208.26 1110.93,1208.26 1111.52,1208.26 1112.1,1208.26 1112.69,1208.26 1113.28,1208.26 1113.86,1208.26 1114.45,1208.26 1115.04,1208.26 1115.62,1208.26 1116.21,1208.26 1116.8,1208.26 1117.38,1208.26 1117.97,1208.26 1118.55,1208.26 1119.14,1208.26 1119.73,1208.26 1120.31,1208.26 1120.9,1208.26 1121.49,1208.26 1122.07,1208.26 1122.66,1208.26 1123.25,1208.26 1123.83,1208.26 1124.42,1208.26 1125.01,1208.26 1125.59,1208.26 1126.18,1208.26 1126.76,1208.26 1127.35,1208.26 1127.94,1208.26 1128.52,1208.26 1129.11,1208.26 1129.7,1208.26 1130.28,1208.26 1130.87,1208.26 1131.46,1208.26 1132.04,1208.26 1132.63,1208.26 1133.21,1208.26 1133.8,1208.26 1134.39,1208.26 1134.97,1208.26 1135.56,1208.26 1136.15,1208.26 1136.73,1208.26 1137.32,1208.26 1137.91,1208.26 1138.49,1208.26 1139.08,1208.26 1139.67,1208.26 1140.25,1208.26 1140.84,1208.26 1141.42,1208.26 1142.01,1208.26 1142.6,1208.26 1143.18,1208.26 1143.77,1208.26 1144.36,1208.26 1144.94,1208.26 1145.53,1208.26 1146.12,1208.26 1146.7,1208.26 1147.29,1208.26 1147.88,1208.26 1148.46,1208.26 1149.05,1208.26 1149.63,1208.26 1150.22,1208.26 1150.81,1208.26 1151.39,1208.26 1151.98,1208.26 1152.57,1208.26 1153.15,1208.26 1153.74,1208.26 1154.33,1208.26 1154.91,1208.26 1155.5,1208.26 1156.09,1208.26 1156.67,1208.26 1157.26,1208.26 1157.84,1208.26 1158.43,1208.26 1159.02,1208.26 1159.6,1208.26 1160.19,1208.26 1160.78,1208.26 1161.36,1208.26 1161.95,1208.26 1162.54,1208.26 1163.12,1208.26 1163.71,1208.26 1164.29,1208.26 1164.88,1208.26 1165.47,1208.26 1166.05,1208.26 1166.64,1208.26 1167.23,1208.26 1167.81,1208.26 1168.4,1208.26 1168.99,1208.26 1169.57,1208.26 1170.16,1208.26 1170.75,1208.26 1171.33,1208.26 1171.92,1208.26 1172.5,1208.26 1173.09,1208.26 1173.68,1208.26 1174.26,1208.26 1174.85,1208.26 1175.44,1208.26 1176.02,1208.26 1176.61,1208.26 1177.2,1208.26 1177.78,1208.26 1178.37,1208.26 1178.96,1208.26 1179.54,1208.26 1180.13,1208.26 1180.71,1208.26 1181.3,1208.26 1181.89,1208.26 1182.47,1208.26 1183.06,1208.26 1183.65,1208.26 1184.23,1208.26 1184.82,1208.26 1185.41,1208.26 1185.99,1208.26 1186.58,1208.26 1187.16,1208.26 1187.75,1208.26 1188.34,1208.26 1188.92,1208.26 1189.51,1208.26 1190.1,1208.26 1190.68,1208.26 1191.27,1208.26 1191.86,1208.26 1192.44,1208.26 1193.03,1208.26 1193.62,1208.26 1194.2,1208.26 1194.79,1208.26 1195.37,1208.26 1195.96,1208.26 1196.55,1208.26 1197.13,1208.26 1197.72,1208.26 1198.31,1208.26 1198.89,1208.26 1199.48,1208.26 1200.07,1208.26 1200.65,1208.26 1201.24,1208.26 1201.83,1208.26 1202.41,1208.26 1203,1208.26 1203.58,1208.26 1204.17,1208.26 1204.76,1208.26 1205.34,1208.26 1205.93,1208.26 1206.52,1208.26 1207.1,1208.26 1207.69,1208.26 1208.28,1208.26 1208.86,1208.26 1209.45,1208.26 1210.03,1208.26 1210.62,1208.26 1211.21,1208.26 1211.79,1208.26 1212.38,1208.26 1212.97,1208.26 1213.55,1208.26 1214.14,1208.26 1214.73,1208.26 1215.31,1208.26 1215.9,1208.26 1216.49,1208.26 1217.07,1208.26 1217.66,1208.26 1218.24,1208.26 1218.83,1208.26 1219.42,1208.26 1220,1208.26 1220.59,1208.26 1221.18,1208.26 1221.76,1208.26 1222.35,1208.26 1222.94,1208.26 1223.52,1208.26 1224.11,1208.26 1224.7,1208.26 1225.28,1208.26 1225.87,1208.26 1226.45,1208.26 1227.04,1208.26 1227.63,1208.26 1228.21,1208.26 1228.8,1208.26 1229.39,1208.26 1229.97,1208.26 1230.56,1208.26 1231.15,1208.26 1231.73,1208.26 1232.32,1208.26 1232.91,1208.26 1233.49,1208.26 1234.08,1208.26 1234.66,1208.26 1235.25,1208.26 1235.84,1208.26 1236.42,1208.26 1237.01,1208.26 1237.6,1208.26 1238.18,1208.26 1238.77,1208.26 1239.36,1208.26 1239.94,1208.26 1240.53,1208.26 1241.11,1208.26 1241.7,1208.26 1242.29,1208.26 1242.87,1208.26 1243.46,1208.26 1244.05,1208.26 1244.63,1208.26 1245.22,1208.26 1245.81,1208.26 1246.39,1208.26 1246.98,1208.26 1247.57,1208.26 1248.15,1208.26 1248.74,1208.26 1249.32,1208.26 1249.91,1208.26 1250.5,1208.26 1251.08,1208.26 1251.67,1208.26 1252.26,1208.26 1252.84,1208.26 1253.43,1208.26 1254.02,1208.26 1254.6,1208.26 1255.19,1208.26 1255.78,1208.26 1256.36,1208.26 1256.95,1208.26 1257.53,1208.26 1258.12,1208.26 1258.71,1208.26 1259.29,1208.26 1259.88,1208.26 1260.47,1208.26 1261.05,1208.26 1261.64,1208.26 1262.23,1208.26 1262.81,1208.26 1263.4,1208.26 1263.98,1208.26 1264.57,1208.26 1265.16,1208.26 1265.74,1208.26 1266.33,1208.26 1266.92,1208.26 1267.5,1208.26 1268.09,1208.26 1268.68,1208.26 1269.26,1208.26 1269.85,1208.26 1270.44,1208.26 1271.02,1208.26 1271.61,1208.26 1272.19,1208.26 1272.78,1208.26 1273.37,1208.26 1273.95,1208.26 1274.54,1208.26 1275.13,1208.26 1275.71,1208.26 1276.3,1208.26 1276.89,1208.26 1277.47,1208.26 1278.06,1208.26 1278.65,1208.26 1279.23,1208.26 1279.82,1208.26 1280.4,1208.26 1280.99,1208.26 1281.58,1208.26 1282.16,1208.26 1282.75,1208.26 1283.34,1208.26 1283.92,1208.26 1284.51,1208.26 1285.1,1208.26 1285.68,1208.26 1286.27,1208.26 1286.86,1208.26 1287.44,1208.26 1288.03,1208.26 1288.61,1208.26 1289.2,1208.26 1289.79,1208.26 1290.37,1208.26 1290.96,1208.26 1291.55,1208.26 1292.13,1208.26 1292.72,1208.26 1293.31,1208.26 1293.89,1208.26 1294.48,1208.26 1295.06,1208.26 1295.65,1208.26 1296.24,1208.26 1296.82,1208.26 1297.41,1208.26 1298,1208.26 1298.58,1208.26 1299.17,1208.26 1299.76,1208.26 1300.34,1208.26 1300.93,1208.26 1301.52,1208.26 1302.1,1208.26 1302.69,1208.26 1303.27,1208.26 1303.86,1208.26 1304.45,1208.26 1305.03,1208.26 1305.62,1208.26 1306.21,1208.26 1306.79,1208.26 1307.38,1208.26 1307.97,1208.26 1308.55,1208.26 1309.14,1208.26 1309.73,1208.26 1310.31,1208.26 1310.9,1208.26 1311.48,1208.26 1312.07,1208.26 1312.66,1208.26 1313.24,1208.26 1313.83,1208.26 1314.42,1208.26 1315,1208.26 1315.59,1208.26 1316.18,1208.26 1316.76,1208.26 1317.35,1208.26 1317.93,1208.26 1318.52,1208.26 1319.11,1208.26 1319.69,1208.26 1320.28,1208.26 1320.87,1208.26 1321.45,1208.26 1322.04,1208.26 1322.63,1208.26 1323.21,1208.26 1323.8,1208.26 1324.39,1208.26 1324.97,1208.26 1325.56,1208.26 1326.14,1208.26 1326.73,1208.26 1327.32,1208.26 1327.9,1208.26 1328.49,1208.26 1329.08,1208.26 1329.66,1208.26 1330.25,1208.26 1330.84,1208.26 1331.42,1208.26 1332.01,1208.26 1332.6,1208.26 1333.18,1208.26 1333.77,1208.26 1334.35,1208.26 1334.94,1208.26 1335.53,1208.26 1336.11,1208.26 1336.7,1208.26 1337.29,1208.26 1337.87,1208.26 1338.46,1208.26 1339.05,1208.26 1339.63,1208.26 1340.22,1208.26 1340.8,1208.26 1341.39,1208.26 1341.98,1208.26 1342.56,1208.26 1343.15,1208.26 1343.74,1208.26 1344.32,1208.26 1344.91,1208.26 1345.5,1208.26 1346.08,1208.26 1346.67,1208.26 1347.26,1208.26 1347.84,1208.26 1348.43,1208.26 1349.01,1208.26 1349.6,1208.26 1350.19,1208.26 1350.77,1208.26 1351.36,1208.26 1351.95,1208.26 1352.53,1208.26 1353.12,1208.26 1353.71,1208.26 1354.29,1208.26 1354.88,1208.26 1355.47,1208.26 1356.05,1208.26 1356.64,1208.26 1357.22,1208.26 1357.81,1208.26 1358.4,1208.26 1358.98,1208.26 1359.57,1208.26 1360.16,1208.26 1360.74,1208.26 1361.33,1208.26 1361.92,1208.26 1362.5,1208.26 1363.09,1208.26 1363.68,1208.26 1364.26,1208.26 1364.85,1208.26 1365.43,1208.26 1366.02,1208.26 1366.61,1208.26 1367.19,1208.26 1367.78,1208.26 1368.37,1208.26 1368.95,1208.26 1369.54,1208.26 1370.13,1208.26 1370.71,1208.26 1371.3,1208.26 1371.88,1208.26 1372.47,1208.26 1373.06,1208.26 1373.64,1208.26 1374.23,1208.26 1374.82,1208.26 1375.4,1208.26 1375.99,1208.26 1376.58,1208.26 1377.16,1208.26 1377.75,1208.26 1378.34,1208.26 1378.92,1208.26 1379.51,1208.26 1380.09,1208.26 1380.68,1208.26 1381.27,1208.26 1381.85,1208.26 1382.44,1208.26 1383.03,1208.26 1383.61,1208.26 1384.2,1208.26 1384.79,1208.26 1385.37,1208.26 1385.96,1208.26 1386.55,1208.26 1387.13,1208.26 1387.72,1208.26 1388.3,1208.26 1388.89,1208.26 1389.48,1208.26 1390.06,1208.26 1390.65,1208.26 1391.24,1208.26 1391.82,1208.26 1392.41,1208.26 1393,1208.26 1393.58,1208.26 1394.17,1208.26 1394.75,1208.26 1395.34,1208.26 1395.93,1208.26 1396.51,1208.26 1397.1,1208.26 1397.69,1208.26 1398.27,1208.26 1398.86,1208.26 1399.45,1208.26 1400.03,1208.26 1400.62,1208.26 1401.21,1208.26 1401.79,1208.26 1402.38,1208.26 1402.96,1208.26 1403.55,1208.26 1404.14,1208.26 1404.72,1208.26 1405.31,1208.26 1405.9,1208.26 1406.48,1208.26 1407.07,1208.26 1407.66,1208.26 1408.24,1208.26 1408.83,1208.26 1409.42,1208.26 1410,1208.26 1410.59,1208.26 1411.17,1208.26 1411.76,1208.26 1412.35,1208.26 1412.93,1208.26 1413.52,1208.26 1414.11,1208.26 1414.69,1208.26 1415.28,1208.26 1415.87,1208.26 1416.45,1208.26 1417.04,1208.26 1417.63,1208.26 1418.21,1208.26 1418.8,1208.26 1419.38,1208.26 1419.97,1208.26 1420.56,1208.26 1421.14,1208.26 1421.73,1208.26 1422.32,1208.26 1422.9,1208.26 1423.49,1208.26 1424.08,1208.26 1424.66,1208.26 1425.25,1208.26 1425.83,1208.26 1426.42,1208.26 1427.01,1208.26 1427.59,1208.26 1428.18,1208.26 1428.77,1208.26 1429.35,1208.26 1429.94,1208.26 1430.53,1208.26 1431.11,1208.26 1431.7,1208.26 1432.29,1208.26 1432.87,1208.26 1433.46,1208.26 1434.04,1208.26 1434.63,1208.26 1435.22,1208.26 1435.8,1208.26 1436.39,1208.26 1436.98,1208.26 1437.56,1208.26 1438.15,1208.26 1438.74,1208.26 1439.32,1208.26 1439.91,1208.26 1440.5,1208.26 1441.08,1208.26 1441.67,1208.26 1442.25,1208.26 1442.84,1208.26 1443.43,1208.26 1444.01,1208.26 1444.6,1208.26 1445.19,1208.26 1445.77,1208.26 1446.36,1208.26 1446.95,1208.26 1447.53,1208.26 1448.12,1208.26 1448.7,1208.26 1449.29,1208.26 1449.88,1208.26 1450.46,1208.26 1451.05,1208.26 1451.64,1208.26 1452.22,1208.26 1452.81,1208.26 1453.4,1208.26 1453.98,1208.26 1454.57,1208.26 1455.16,1208.26 1455.74,1208.26 1456.33,1208.26 1456.91,1208.26 1457.5,1208.26 1458.09,1208.26 1458.67,1208.26 1459.26,1208.26 1459.85,1208.26 1460.43,1208.26 1461.02,1208.26 1461.61,1208.26 1462.19,1208.26 1462.78,1208.26 1463.37,1208.26 1463.95,1208.26 1464.54,1208.26 1465.12,1208.26 1465.71,1208.26 1466.3,1208.26 1466.88,1208.26 1467.47,1208.26 1468.06,1208.26 1468.64,1208.26 1469.23,1208.26 1469.82,1208.26 1470.4,1208.26 1470.99,1208.26 1471.57,1208.26 1472.16,1208.26 1472.75,1208.26 1473.33,1208.26 1473.92,1208.26 1474.51,1208.26 1475.09,1208.26 1475.68,1208.26 1476.27,1208.26 1476.85,1208.26 1477.44,1208.26 1478.03,1208.26 1478.61,1208.26 1479.2,1208.26 1479.78,1208.26 1480.37,1208.26 1480.96,1208.26 1481.54,1208.26 1482.13,1208.26 1482.72,1208.26 1483.3,1208.26 1483.89,1208.26 1484.48,1208.26 1485.06,1208.26 1485.65,1208.26 1486.24,1208.26 1486.82,1208.26 1487.41,1208.26 1487.99,1208.26 1488.58,1208.26 1489.17,1208.26 1489.75,1208.26 1490.34,1208.26 1490.93,1208.26 1491.51,1208.26 1492.1,1208.26 1492.69,1208.26 1493.27,1208.26 1493.86,1208.26 1494.45,1208.26 1495.03,1208.26 1495.62,1208.26 1496.2,1208.26 1496.79,1208.26 1497.38,1208.26 1497.96,1208.26 1498.55,1208.26 1499.14,1208.26 1499.72,1208.26 1500.31,1208.26 1500.9,1208.26 1501.48,1208.26 1502.07,1208.26 1502.65,1208.26 1503.24,1208.26 1503.83,1208.26 1504.41,1208.26 1505,1208.26 1505.59,1208.26 1506.17,1208.26 1506.76,1208.26 1507.35,1208.26 1507.93,1208.26 1508.52,1208.26 1509.11,1208.26 1509.69,1208.26 1510.28,1208.26 1510.86,1208.26 1511.45,1208.26 1512.04,1208.26 1512.62,1208.26 1513.21,1208.26 1513.8,1208.26 1514.38,1208.26 1514.97,1208.26 1515.56,1208.26 1516.14,1208.26 1516.73,1208.26 1517.32,1208.26 1517.9,1208.26 1518.49,1208.26 1519.07,1208.26 1519.66,1208.26 1520.25,1208.26 1520.83,1208.26 1521.42,1208.26 1522.01,1208.26 1522.59,1208.26 1523.18,1208.26 1523.77,1208.26 1524.35,1208.26 1524.94,1208.26 1525.52,1208.26 1526.11,1208.26 1526.7,1208.26 1527.28,1208.26 1527.87,1208.26 1528.46,1208.26 1529.04,1208.26 1529.63,1208.26 1530.22,1208.26 1530.8,1208.26 1531.39,1208.26 1531.98,1208.26 1532.56,1208.26 1533.15,1208.26 1533.73,1208.26 1534.32,1208.26 1534.91,1208.26 1535.49,1208.26 1536.08,1208.26 1536.67,1208.26 1537.25,1208.26 1537.84,1208.26 1538.43,1208.26 1539.01,1208.26 1539.6,1208.26 1540.19,1208.26 1540.77,1208.26 1541.36,1208.26 1541.94,1208.26 1542.53,1208.26 1543.12,1208.26 1543.7,1208.26 1544.29,1208.26 1544.88,1208.26 1545.46,1208.26 1546.05,1208.26 1546.64,1208.26 1547.22,1208.26 1547.81,1208.26 1548.4,1208.26 1548.98,1208.26 1549.57,1208.26 1550.15,1208.26 1550.74,1208.26 1551.33,1208.26 1551.91,1208.26 1552.5,1208.26 1553.09,1208.26 1553.67,1208.26 1554.26,1208.26 1554.85,1208.26 1555.43,1208.26 1556.02,1208.26 1556.6,1208.26 1557.19,1208.26 1557.78,1208.26 1558.36,1208.26 1558.95,1208.26 1559.54,1208.26 1560.12,1208.26 1560.71,1208.26 1561.3,1208.26 1561.88,1208.26 1562.47,1208.26 1563.06,1208.26 1563.64,1208.26 1564.23,1208.26 1564.81,1208.26 1565.4,1208.26 1565.99,1208.26 1566.57,1208.26 1567.16,1208.26 1567.75,1208.26 1568.33,1208.26 1568.92,1208.26 1569.51,1208.26 1570.09,1208.26 1570.68,1208.26 1571.27,1208.26 1571.85,1208.26 1572.44,1208.26 1573.02,1208.26 1573.61,1208.26 1574.2,1208.26 1574.78,1208.26 1575.37,1208.26 1575.96,1208.26 1576.54,1208.26 1577.13,1208.26 1577.72,1208.26 1578.3,1208.26 1578.89,1208.26 1579.47,1208.26 1580.06,1208.26 1580.65,1208.26 1581.23,1208.26 1581.82,1208.26 1582.41,1208.26 1582.99,1208.26 1583.58,1208.26 1584.17,1208.26 1584.75,1208.26 1585.34,1208.26 1585.93,1208.26 1586.51,1208.26 1587.1,1208.26 1587.68,1208.26 1588.27,1208.26 1588.86,1208.26 1589.44,1208.26 1590.03,1208.26 1590.62,1208.26 1591.2,1208.26 1591.79,1208.26 1592.38,1208.26 1592.96,1208.26 1593.55,1208.26 1594.14,1208.26 1594.72,1208.26 1595.31,1208.26 1595.89,1208.26 1596.48,1208.26 1597.07,1208.26 1597.65,1208.26 1598.24,1208.26 1598.83,1208.26 1599.41,1208.26 1600,1208.26 1600.59,1208.26 1601.17,1208.26 1601.76,1208.26 1602.34,1208.26 1602.93,1208.26 1603.52,1208.26 1604.1,1208.26 1604.69,1208.26 1605.28,1208.26 1605.86,1208.26 1606.45,1208.26 1607.04,1208.26 1607.62,1208.26 1608.21,1208.26 1608.8,1208.26 1609.38,1208.26 1609.97,1208.26 1610.55,1208.26 1611.14,1208.26 1611.73,1208.26 1612.31,1208.26 1612.9,1208.26 1613.49,1208.26 1614.07,1208.26 1614.66,1208.26 1615.25,1208.26 1615.83,1208.26 1616.42,1208.26 1617.01,1208.26 1617.59,1208.26 1618.18,1208.26 1618.76,1208.26 1619.35,1208.26 1619.94,1208.26 1620.52,1208.26 1621.11,1208.26 1621.7,1208.26 1622.28,1208.26 1622.87,1208.26 1623.46,1208.26 1624.04,1208.26 1624.63,1208.26 1625.22,1208.26 1625.8,1208.26 1626.39,1208.26 1626.97,1208.26 1627.56,1208.26 1628.15,1208.26 1628.73,1208.26 1629.32,1208.26 1629.91,1208.26 1630.49,1208.26 1631.08,1208.26 1631.67,1208.26 1632.25,1208.26 1632.84,1208.26 1633.42,1208.26 1634.01,1208.26 1634.6,1208.26 1635.18,1208.26 1635.77,1208.26 1636.36,1208.26 1636.94,1208.26 1637.53,1208.26 1638.12,1208.26 1638.7,1208.26 1639.29,1208.26 1639.88,1208.26 1640.46,1208.26 1641.05,1208.26 1641.63,1208.26 1642.22,1208.26 1642.81,1208.26 1643.39,1208.26 1643.98,1208.26 1644.57,1208.26 1645.15,1208.26 1645.74,1208.26 1646.33,1208.26 1646.91,1208.26 1647.5,1208.26 1648.09,1208.26 1648.67,1208.26 1649.26,1208.26 1649.84,1208.26 1650.43,1208.26 1651.02,1208.26 1651.6,1208.26 1652.19,1208.26 1652.78,1208.26 1653.36,1208.26 1653.95,1208.26 1654.54,1208.26 1655.12,1208.26 1655.71,1208.26 1656.29,1208.26 1656.88,1208.26 1657.47,1208.26 1658.05,1208.26 1658.64,1208.26 1659.23,1208.26 1659.81,1208.26 1660.4,1208.26 1660.99,1208.26 1661.57,1208.26 1662.16,1208.26 1662.75,1208.26 1663.33,1208.26 1663.92,1208.26 1664.5,1208.26 1665.09,1208.26 1665.68,1208.26 1666.26,1208.26 1666.85,1208.26 1667.44,1208.26 1668.02,1208.26 1668.61,1208.26 1669.2,1208.26 1669.78,1208.26 1670.37,1208.26 1670.96,1208.26 1671.54,1208.26 1672.13,1208.26 1672.71,1208.26 1673.3,1208.26 1673.89,1208.26 1674.47,1208.26 1675.06,1208.26 1675.65,1208.26 1676.23,1208.26 1676.82,1208.26 1677.41,1208.26 1677.99,1208.26 1678.58,1208.26 1679.17,1208.26 1679.75,1208.26 1680.34,1208.26 1680.92,1208.26 1681.51,1208.26 1682.1,1208.26 1682.68,1208.26 1683.27,1208.26 1683.86,1208.26 1684.44,1208.26 1685.03,1208.26 1685.62,1208.26 1686.2,1208.26 1686.79,1208.26 1687.37,1208.26 1687.96,1208.26 1688.55,1208.26 1689.13,1208.26 1689.72,1208.26 1690.31,1208.26 1690.89,1208.26 1691.48,1208.26 1692.07,1208.26 1692.65,1208.26 1693.24,1208.26 1693.83,1208.26 1694.41,1208.26 1695,1208.26 1695.58,1208.26 1696.17,1208.26 1696.76,1208.26 1697.34,1208.26 1697.93,1208.26 1698.52,1208.26 1699.1,1208.26 1699.69,1208.26 1700.28,1208.26 1700.86,1208.26 1701.45,1208.26 1702.04,1208.26 1702.62,1208.26 1703.21,1208.26 1703.79,1208.26 1704.38,1208.26 1704.97,1208.26 1705.55,1208.26 1706.14,1208.26 1706.73,1208.26 1707.31,1208.26 1707.9,1208.26 1708.49,1208.26 1709.07,1208.26 1709.66,1208.26 1710.24,1208.26 1710.83,1208.26 1711.42,1208.26 1712,1208.26 1712.59,1208.26 1713.18,1208.26 1713.76,1208.26 1714.35,1208.26 1714.94,1208.26 1715.52,1208.26 1716.11,1208.26 1716.7,1208.26 1717.28,1208.26 1717.87,1208.26 1718.45,1208.26 1719.04,1208.26 1719.63,1208.26 1720.21,1208.26 1720.8,1208.26 1721.39,1208.26 1721.97,1208.26 1722.56,1208.26 1723.15,1208.26 1723.73,1208.26 1724.32,1208.26 1724.91,1208.26 1725.49,1208.26 1726.08,1208.26 1726.66,1208.26 1727.25,1208.26 1727.84,1208.26 1728.42,1208.26 1729.01,1208.26 1729.6,1208.26 1730.18,1208.26 1730.77,1208.26 1731.36,1208.26 1731.94,1208.26 1732.53,1208.26 1733.11,1208.26 1733.7,1208.26 1734.29,1208.26 1734.87,1208.26 1735.46,1208.26 1736.05,1208.26 1736.63,1208.26 1737.22,1208.26 1737.81,1208.26 1738.39,1208.26 1738.98,1208.26 1739.57,1208.26 1740.15,1208.26 1740.74,1208.26 1741.32,1208.26 1741.91,1208.26 1742.5,1208.26 1743.08,1208.26 1743.67,1208.26 1744.26,1208.26 1744.84,1208.26 1745.43,1208.26 1746.02,1208.26 1746.6,1208.26 1747.19,1208.26 1747.78,1208.26 1748.36,1208.26 1748.95,1208.26 1749.53,1208.26 1750.12,1208.26 1750.71,1208.26 1751.29,1208.26 1751.88,1208.26 1752.47,1208.26 1753.05,1208.26 1753.64,1208.26 1754.23,1208.26 1754.81,1208.26 1755.4,1208.26 1755.99,1208.26 1756.57,1208.26 1757.16,1208.26 1757.74,1208.26 1758.33,1208.26 1758.92,1208.26 1759.5,1208.26 1760.09,1208.26 1760.68,1208.26 1761.26,1208.26 1761.85,1208.26 1762.44,1208.26 1763.02,1208.26 1763.61,1208.26 1764.19,1208.26 1764.78,1208.26 1765.37,1208.26 1765.95,1208.26 1766.54,1208.26 1767.13,1208.26 1767.71,1208.26 1768.3,1208.26 1768.89,1208.26 1769.47,1208.26 1770.06,1208.26 1770.65,1208.26 1771.23,1208.26 1771.82,1208.26 1772.4,1208.26 1772.99,1208.26 1773.58,1208.26 1774.16,1208.26 1774.75,1208.26 1775.34,1208.26 1775.92,1208.26 1776.51,1208.26 1777.1,1208.26 1777.68,1208.26 1778.27,1208.26 1778.86,1208.26 1779.44,1208.26 1780.03,1208.26 1780.61,1208.26 1781.2,1208.26 1781.79,1208.26 1782.37,1208.26 1782.96,1208.26 1783.55,1208.26 1784.13,1208.26 1784.72,1208.26 1785.31,1208.26 1785.89,1208.26 1786.48,1208.26 1787.06,1208.26 1787.65,1208.26 1788.24,1208.26 1788.82,1208.26 1789.41,1208.26 1790,1208.26 1790.58,1208.26 1791.17,1208.26 1791.76,1208.26 1792.34,1208.26 1792.93,1208.26 1793.52,1208.26 1794.1,1208.26 1794.69,1208.26 1795.27,1208.26 1795.86,1208.26 1796.45,1208.26 1797.03,1208.26 1797.62,1208.26 1798.21,1208.26 1798.79,1208.26 1799.38,1208.26 1799.97,1208.26 1800.55,1208.26 1801.14,1208.26 1801.73,1208.26 1802.31,1208.26 1802.9,1208.26 1803.48,1208.26 1804.07,1208.26 1804.66,1208.26 1805.24,1208.26 1805.83,1208.26 1806.42,1208.26 1807,1208.26 1807.59,1208.26 1808.18,1208.26 1808.76,1208.26 1809.35,1208.26 1809.94,1208.26 1810.52,1208.26 1811.11,1208.26 1811.69,1208.26 1812.28,1208.26 1812.87,1208.26 1813.45,1208.26 1814.04,1208.26 1814.63,1208.26 1815.21,1208.26 1815.8,1208.26 1816.39,1208.26 1816.97,1208.26 1817.56,1208.26 1818.14,1208.26 1818.73,1208.26 1819.32,1208.26 1819.9,1208.26 1820.49,1208.26 1821.08,1208.26 1821.66,1208.26 1822.25,1208.26 1822.84,1208.26 1823.42,1208.26 1824.01,1208.26 1824.6,1208.26 1825.18,1208.26 1825.77,1208.26 1826.35,1208.26 1826.94,1208.26 1827.53,1208.26 1828.11,1208.26 1828.7,1208.26 1829.29,1208.26 1829.87,1208.26 1830.46,1208.26 1831.05,1208.26 1831.63,1208.26 1832.22,1208.26 1832.81,1208.26 1833.39,1208.26 1833.98,1208.26 1834.56,1208.26 1835.15,1208.26 1835.74,1208.26 1836.32,1208.26 1836.91,1208.26 1837.5,1208.26 1838.08,1208.26 1838.67,1208.26 1839.26,1208.26 1839.84,1208.26 1840.43,1208.26 1841.01,1208.26 1841.6,1208.26 1842.19,1208.26 1842.77,1208.26 1843.36,1208.26 1843.95,1208.26 1844.53,1208.26 1845.12,1208.26 1845.71,1208.26 1846.29,1208.26 1846.88,1208.26 1847.47,1208.26 1848.05,1208.26 1848.64,1208.26 1849.22,1208.26 1849.81,1208.26 1850.4,1208.26 1850.98,1208.26 1851.57,1208.26 1852.16,1208.26 1852.74,1208.26 1853.33,1208.26 1853.92,1208.26 1854.5,1208.26 1855.09,1208.26 1855.68,1208.26 1856.26,1208.26 1856.85,1208.26 1857.43,1208.26 1858.02,1208.26 1858.61,1208.26 1859.19,1208.26 1859.78,1208.26 1860.37,1208.26 1860.95,1208.26 1861.54,1208.26 1862.13,1208.26 1862.71,1208.26 1863.3,1208.26 1863.88,1208.26 1864.47,1208.26 1865.06,1208.26 1865.64,1208.26 1866.23,1208.26 1866.82,1208.26 1867.4,1208.26 1867.99,1208.26 1868.58,1208.26 1869.16,1208.26 1869.75,1208.26 1870.34,1208.26 1870.92,1208.26 1871.51,1208.26 1872.09,1208.26 1872.68,1208.26 1873.27,1208.26 1873.85,1208.26 1874.44,1208.26 1875.03,1208.26 1875.61,1208.26 1876.2,1208.26 1876.79,1208.26 1877.37,1208.26 1877.96,1208.26 1878.55,1208.26 1879.13,1208.26 1879.72,1208.26 1880.3,1208.26 1880.89,1208.26 1881.48,1208.26 1882.06,1208.26 1882.65,1208.26 1883.24,1208.26 1883.82,1208.26 1884.41,1208.26 1885,1208.26 1885.58,1208.26 1886.17,1208.26 1886.76,1208.26 1887.34,1208.26 1887.93,1208.26 1888.51,1208.26 1889.1,1208.26 1889.69,1208.26 1890.27,1208.26 1890.86,1208.26 1891.45,1208.26 1892.03,1208.26 1892.62,1208.26 1893.21,1208.26 1893.79,1208.26 1894.38,1208.26 1894.96,1208.26 1895.55,1208.26 1896.14,1208.26 1896.72,1208.26 1897.31,1208.26 1897.9,1208.26 1898.48,1208.26 1899.07,1208.26 1899.66,1208.26 1900.24,1208.26 1900.83,1208.26 1901.42,1208.26 1902,1208.26 1902.59,1208.26 1903.17,1208.26 1903.76,1208.26 1904.35,1208.26 1904.93,1208.26 1905.52,1208.26 1906.11,1208.26 1906.69,1208.26 1907.28,1208.26 1907.87,1208.26 1908.45,1208.26 1909.04,1208.26 1909.63,1208.26 1910.21,1208.26 1910.8,1208.26 1911.38,1208.26 1911.97,1208.26 1912.56,1208.26 1913.14,1208.26 1913.73,1208.26 1914.32,1208.26 1914.9,1208.26 1915.49,1208.26 1916.08,1208.26 1916.66,1208.26 1917.25,1208.26 1917.83,1208.26 1918.42,1208.26 1919.01,1208.26 1919.59,1208.26 1920.18,1208.26 1920.77,1208.26 1921.35,1208.26 1921.94,1208.26 1922.53,1208.26 1923.11,1208.26 1923.7,1208.26 1924.29,1208.26 1924.87,1208.26 1925.46,1208.26 1926.04,1208.26 1926.63,1208.26 1927.22,1208.26 1927.8,1208.26 1928.39,1208.26 1928.98,1208.26 1929.56,1208.26 1930.15,1208.26 1930.74,1208.26 1931.32,1208.26 1931.91,1208.26 1932.5,1208.26 1933.08,1208.26 1933.67,1208.26 1934.25,1208.26 1934.84,1208.26 1935.43,1208.26 1936.01,1208.26 1936.6,1208.26 1937.19,1208.26 1937.77,1208.26 1938.36,1208.26 1938.95,1208.26 1939.53,1208.26 1940.12,1208.26 1940.71,1208.26 1941.29,1208.26 1941.88,1208.26 1942.46,1208.26 1943.05,1208.26 1943.64,1208.26 1944.22,1208.26 1944.81,1208.26 1945.4,1208.26 1945.98,1208.26 1946.57,1208.26 1947.16,1208.26 1947.74,1208.26 1948.33,1208.26 1948.91,1208.26 1949.5,1208.26 1950.09,1208.26 1950.67,1208.26 1951.26,1208.26 1951.85,1208.26 1952.43,1208.26 1953.02,1208.26 1953.61,1208.26 1954.19,1208.26 1954.78,1208.26 1955.37,1208.26 1955.95,1208.26 1956.54,1208.26 1957.12,1208.26 1957.71,1208.26 1958.3,1208.26 1958.88,1208.26 1959.47,1208.26 1960.06,1208.26 1960.64,1208.26 1961.23,1208.26 1961.82,1208.26 1962.4,1208.26 1962.99,1208.26 1963.58,1208.26 1964.16,1208.26 1964.75,1208.26 1965.33,1208.26 1965.92,1208.26 1966.51,1208.26 1967.09,1208.26 1967.68,1208.26 1968.27,1208.26 1968.85,1208.26 1969.44,1208.26 1970.03,1208.26 1970.61,1208.26 1971.2,1208.26 1971.78,1208.26 1972.37,1208.26 1972.96,1208.26 1973.54,1208.26 1974.13,1208.26 1974.72,1208.26 1975.3,1208.26 1975.89,1208.26 1976.48,1208.26 1977.06,1208.26 1977.65,1208.26 1978.24,1208.26 1978.82,1208.26 1979.41,1208.26 1979.99,1208.26 1980.58,1208.26 1981.17,1208.26 1981.75,1208.26 1982.34,1208.26 1982.93,1208.26 1983.51,1208.26 1984.1,1208.26 1984.69,1208.26 1985.27,1208.26 1985.86,1208.26 1986.45,1208.26 1987.03,1208.26 1987.62,1208.26 1988.2,1208.26 1988.79,1208.26 1989.38,1208.26 1989.96,1208.26 1990.55,1208.26 1991.14,1208.26 1991.72,1208.26 1992.31,1208.26 1992.9,1208.26 1993.48,1208.26 1994.07,1208.26 1994.65,1208.26 1995.24,1208.26 1995.83,1208.26 1996.41,1208.26 1997,1208.26 1997.59,1208.26 1998.17,1208.26 1998.76,1208.26 1999.35,1208.26 1999.93,1208.26 2000.52,1208.26 2001.11,1208.26 2001.69,1208.26 2002.28,1208.26 2002.86,1208.26 2003.45,1208.26 2004.04,1208.26 2004.62,1208.26 2005.21,1208.26 2005.8,1208.26 2006.38,1208.26 2006.97,1208.26 2007.56,1208.26 2008.14,1208.26 2008.73,1208.26 2009.32,1208.26 2009.9,1208.26 2010.49,1208.26 2011.07,1208.26 2011.66,1208.26 2012.25,1208.26 2012.83,1208.26 2013.42,1208.26 2014.01,1208.26 2014.59,1208.26 2015.18,1208.26 2015.77,1208.26 2016.35,1208.26 2016.94,1208.26 2017.53,1208.26 2018.11,1208.26 2018.7,1208.26 2019.28,1208.26 2019.87,1208.26 2020.46,1208.26 2021.04,1208.26 2021.63,1208.26 2022.22,1208.26 2022.8,1208.26 2023.39,1208.26 2023.98,1208.26 2024.56,1208.26 2025.15,1208.26 2025.73,1208.26 2026.32,1208.26 2026.91,1208.26 2027.49,1208.26 2028.08,1208.26 2028.67,1208.26 2029.25,1208.26 2029.84,1208.26 2030.43,1208.26 2031.01,1208.26 2031.6,1208.26 2032.19,1208.26 2032.77,1208.26 2033.36,1208.26 2033.94,1208.26 2034.53,1208.26 2035.12,1208.26 2035.7,1208.26 2036.29,1208.26 2036.88,1208.26 2037.46,1208.26 2038.05,1208.26 2038.64,1208.26 2039.22,1208.26 2039.81,1208.26 2040.4,1208.26 2040.98,1208.26 2041.57,1208.26 2042.15,1208.26 2042.74,1208.26 2043.33,1208.26 2043.91,1208.26 2044.5,1208.26 2045.09,1208.26 2045.67,1208.26 2046.26,1208.26 2046.85,1208.26 2047.43,1208.26 2048.02,1208.26 2048.6,1208.26 2049.19,1208.26 2049.78,1208.26 2050.36,1208.26 2050.95,1208.26 2051.54,1208.26 2052.12,1208.26 2052.71,1208.26 2053.3,1208.26 2053.88,1208.26 2054.47,1208.26 2055.06,1208.26 2055.64,1208.26 2056.23,1208.26 2056.81,1208.26 2057.4,1208.26 2057.99,1208.26 2058.57,1208.26 2059.16,1208.26 2059.75,1208.26 2060.33,1208.26 2060.92,1208.26 2061.51,1208.26 2062.09,1208.26 2062.68,1208.26 2063.27,1208.26 2063.85,1208.26 2064.44,1208.26 2065.02,1208.26 2065.61,1208.26 2066.2,1208.26 2066.78,1208.26 2067.37,1208.26 2067.96,1208.26 2068.54,1208.26 2069.13,1208.26 2069.72,1208.26 2070.3,1208.26 2070.89,1208.26 2071.48,1208.26 2072.06,1208.26 2072.65,1208.26 2073.23,1208.26 2073.82,1208.26 2074.41,1208.26 2074.99,1208.26 2075.58,1208.26 2076.17,1208.26 2076.75,1208.26 2077.34,1208.26 2077.93,1208.26 2078.51,1208.26 2079.1,1208.26 2079.68,1208.26 2080.27,1208.26 2080.86,1208.26 2081.44,1208.26 2082.03,1208.26 2082.62,1208.26 2083.2,1208.26 2083.79,1208.26 2084.38,1208.26 2084.96,1208.26 2085.55,1208.26 2086.14,1208.26 2086.72,1208.26 2087.31,1208.26 2087.89,1208.26 2088.48,1208.26 2089.07,1208.26 2089.65,1208.26 2090.24,1208.26 2090.83,1208.26 2091.41,1208.26 2092,1208.26 2092.59,1208.26 2093.17,1208.26 2093.76,1208.26 2094.35,1208.26 2094.93,1208.26 2095.52,1208.26 2096.1,1208.26 2096.69,1208.26 2097.28,1208.26 2097.86,1208.26 2098.45,1208.26 2099.04,1208.26 2099.62,1208.26 2100.21,1208.26 2100.8,1208.26 2101.38,1208.26 2101.97,1208.26 2102.55,1208.26 2103.14,1208.26 2103.73,1208.26 2104.31,1208.26 2104.9,1208.26 2105.49,1208.26 2106.07,1208.26 2106.66,1208.26 2107.25,1208.26 2107.83,1208.26 2108.42,1208.26 2109.01,1208.26 2109.59,1208.26 2110.18,1208.26 2110.76,1208.26 2111.35,1208.26 2111.94,1208.26 2112.52,1208.26 2113.11,1208.26 2113.7,1208.26 2114.28,1208.26 2114.87,1208.26 2115.46,1208.26 2116.04,1208.26 2116.63,1208.26 2117.22,1208.26 2117.8,1208.26 2118.39,1208.26 2118.97,1208.26 2119.56,1208.26 2120.15,1208.26 2120.73,1208.26 2121.32,1208.26 2121.91,1208.26 2122.49,1208.26 2123.08,1208.26 2123.67,1208.26 2124.25,1208.26 2124.84,1208.26 2125.42,1208.26 2126.01,1208.26 2126.6,1208.26 2127.18,1208.26 2127.77,1208.26 2128.36,1208.26 2128.94,1208.26 2129.53,1208.26 2130.12,1208.26 2130.7,1208.26 2131.29,1208.26 2131.88,1208.26 2132.46,1208.26 2133.05,1208.26 2133.63,1208.26 2134.22,1208.26 2134.81,1208.26 2135.39,1208.26 2135.98,1208.26 2136.57,1208.26 2137.15,1208.26 2137.74,1208.26 2138.33,1208.26 2138.91,1208.26 2139.5,1208.26 2140.09,1208.26 2140.67,1208.26 2141.26,1208.26 2141.84,1208.26 2142.43,1208.26 2143.02,1208.26 2143.6,1208.26 2144.19,1208.26 2144.78,1208.26 2145.36,1208.26 2145.95,1208.26 2146.54,1208.26 2147.12,1208.26 2147.71,1208.26 2148.3,1208.26 2148.88,1208.26 2149.47,1208.26 2150.05,1208.26 2150.64,1208.26 2151.23,1208.26 2151.81,1208.26 2152.4,1208.26 2152.99,1208.26 2153.57,1208.26 2154.16,1208.26 2154.75,1208.26 2155.33,1208.26 2155.92,1208.26 2156.5,1208.26 2157.09,1208.26 2157.68,1208.26 2158.26,1208.26 \"/>\n<path clip-path=\"url(#clip752)\" d=\"M986.025 1207.98 L986.612 1207.98 L987.198 1207.98 L987.785 1207.98 L988.371 1207.98 L988.957 1207.98 L989.544 1207.98 L990.13 1207.98 L990.717 1207.98 L991.303 1207.98 L991.889 1207.98 L992.476 1207.98 L993.062 1207.98 L993.649 1207.98 L994.235 1207.98 L994.822 1207.98 L995.408 1207.98 L995.994 1207.98 L996.581 1207.98 L997.167 1207.98 L997.754 1207.98 L998.34 1207.98 L998.926 1207.98 L999.513 1207.98 L1000.1 1207.98 L1000.69 1207.98 L1001.27 1207.98 L1001.86 1207.98 L1002.44 1207.98 L1003.03 1207.98 L1003.62 1207.98 L1004.2 1207.98 L1004.79 1207.98 L1005.38 1207.98 L1005.96 1207.98 L1006.55 1207.98 L1007.14 1207.98 L1007.72 1207.98 L1008.31 1207.98 L1008.9 1207.98 L1009.48 1207.98 L1010.07 1207.98 L1010.65 1207.98 L1011.24 1207.98 L1011.83 1207.98 L1012.41 1207.98 L1013 1207.98 L1013.59 1207.98 L1014.17 1207.98 L1014.76 1207.98 L1015.35 1207.98 L1015.93 1207.98 L1016.52 1207.98 L1017.11 1207.98 L1017.69 1207.98 L1018.28 1207.98 L1018.86 1207.98 L1019.45 1207.98 L1020.04 1207.98 L1020.62 1207.98 L1021.21 1207.98 L1021.8 1207.98 L1022.38 1207.98 L1022.97 1207.98 L1023.56 1207.98 L1024.14 1207.98 L1024.73 1207.98 L1025.32 1207.98 L1025.9 1207.98 L1026.49 1207.98 L1027.07 1207.98 L1027.66 1207.98 L1028.25 1207.98 L1028.83 1207.98 L1029.42 1207.98 L1030.01 1207.98 L1030.59 1207.98 L1031.18 1207.98 L1031.77 1207.98 L1032.35 1207.98 L1032.94 1207.98 L1033.52 1207.98 L1034.11 1207.98 L1034.7 1207.98 L1035.28 1207.98 L1035.87 1207.98 L1036.46 1207.98 L1037.04 1207.98 L1037.63 1207.98 L1038.22 1207.98 L1038.8 1207.98 L1039.39 1207.98 L1039.98 1207.98 L1040.56 1207.98 L1041.15 1207.98 L1041.73 1207.98 L1042.32 1207.98 L1042.91 1207.98 L1043.49 1207.98 L1044.08 1207.98 L1044.67 1207.98 L1045.25 1207.98 L1045.84 1207.98 L1046.43 1207.98 L1047.01 1207.98 L1047.6 1207.98 L1048.19 1207.98 L1048.77 1207.98 L1049.36 1207.98 L1049.94 1207.98 L1050.53 1207.98 L1051.12 1207.98 L1051.7 1207.98 L1052.29 1207.98 L1052.88 1207.98 L1053.46 1207.98 L1054.05 1207.98 L1054.64 1207.98 L1055.22 1207.98 L1055.81 1207.98 L1056.39 1207.98 L1056.98 1207.98 L1057.57 1207.98 L1058.15 1207.98 L1058.74 1207.98 L1059.33 1207.98 L1059.91 1207.98 L1060.5 1207.98 L1061.09 1207.98 L1061.67 1207.98 L1062.26 1207.98 L1062.85 1207.98 L1063.43 1207.98 L1064.02 1207.98 L1064.6 1207.98 L1065.19 1207.98 L1065.78 1207.98 L1066.36 1207.98 L1066.95 1207.98 L1067.54 1207.98 L1068.12 1207.98 L1068.71 1207.98 L1069.3 1207.98 L1069.88 1207.98 L1070.47 1207.98 L1071.06 1207.98 L1071.64 1207.98 L1072.23 1207.98 L1072.81 1207.98 L1073.4 1207.98 L1073.99 1207.98 L1074.57 1207.98 L1075.16 1207.98 L1075.75 1207.98 L1076.33 1207.98 L1076.92 1207.98 L1077.51 1207.98 L1078.09 1207.98 L1078.68 1207.98 L1079.26 1207.98 L1079.85 1207.98 L1080.44 1207.98 L1081.02 1207.98 L1081.61 1207.98 L1082.2 1207.98 L1082.78 1207.98 L1083.37 1207.98 L1083.96 1207.98 L1084.54 1207.98 L1085.13 1207.98 L1085.72 1207.98 L1086.3 1207.98 L1086.89 1207.98 L1087.47 1207.98 L1088.06 1207.98 L1088.65 1207.98 L1089.23 1207.98 L1089.82 1207.98 L1090.41 1207.98 L1090.99 1207.98 L1091.58 1207.98 L1092.17 1207.98 L1092.75 1207.98 L1093.34 1207.98 L1093.93 1207.98 L1094.51 1207.98 L1095.1 1207.98 L1095.68 1207.98 L1096.27 1207.98 L1096.86 1207.98 L1097.44 1207.98 L1098.03 1207.98 L1098.62 1207.98 L1099.2 1207.98 L1099.79 1207.98 L1100.38 1207.98 L1100.96 1207.98 L1101.55 1207.98 L1102.14 1207.98 L1102.72 1207.98 L1103.31 1207.98 L1103.89 1207.98 L1104.48 1207.98 L1105.07 1207.98 L1105.65 1207.98 L1106.24 1207.98 L1106.83 1207.98 L1107.41 1207.98 L1108 1207.98 L1108.59 1207.98 L1109.17 1207.98 L1109.76 1207.98 L1110.34 1207.98 L1110.93 1207.98 L1111.52 1207.98 L1112.1 1207.98 L1112.69 1207.98 L1113.28 1207.98 L1113.86 1207.98 L1114.45 1207.98 L1115.04 1207.98 L1115.62 1207.98 L1116.21 1207.98 L1116.8 1207.98 L1117.38 1207.98 L1117.97 1207.98 L1118.55 1207.98 L1119.14 1207.98 L1119.73 1207.98 L1120.31 1207.98 L1120.9 1207.98 L1121.49 1207.98 L1122.07 1207.98 L1122.66 1207.98 L1123.25 1207.98 L1123.83 1207.98 L1124.42 1207.98 L1125.01 1207.98 L1125.59 1207.98 L1126.18 1207.98 L1126.76 1207.98 L1127.35 1207.98 L1127.94 1207.98 L1128.52 1207.98 L1129.11 1207.98 L1129.7 1207.98 L1130.28 1207.98 L1130.87 1207.98 L1131.46 1207.98 L1132.04 1207.98 L1132.63 1207.98 L1133.21 1207.98 L1133.8 1207.98 L1134.39 1207.98 L1134.97 1207.98 L1135.56 1207.98 L1136.15 1207.98 L1136.73 1207.98 L1137.32 1207.98 L1137.91 1207.98 L1138.49 1207.98 L1139.08 1207.98 L1139.67 1207.98 L1140.25 1207.98 L1140.84 1207.98 L1141.42 1207.98 L1142.01 1207.98 L1142.6 1207.98 L1143.18 1207.98 L1143.77 1207.98 L1144.36 1207.98 L1144.94 1207.98 L1145.53 1207.98 L1146.12 1207.98 L1146.7 1207.98 L1147.29 1207.98 L1147.88 1207.98 L1148.46 1207.98 L1149.05 1207.98 L1149.63 1207.98 L1150.22 1207.98 L1150.81 1207.98 L1151.39 1207.98 L1151.98 1207.98 L1152.57 1207.98 L1153.15 1207.98 L1153.74 1207.98 L1154.33 1207.98 L1154.91 1207.98 L1155.5 1207.98 L1156.09 1207.98 L1156.67 1207.98 L1157.26 1207.98 L1157.84 1207.98 L1158.43 1207.98 L1159.02 1207.98 L1159.6 1207.98 L1160.19 1207.98 L1160.78 1207.98 L1161.36 1207.98 L1161.95 1207.98 L1162.54 1207.98 L1163.12 1207.98 L1163.71 1207.98 L1164.29 1207.98 L1164.88 1207.98 L1165.47 1207.98 L1166.05 1207.98 L1166.64 1207.98 L1167.23 1207.98 L1167.81 1207.98 L1168.4 1207.98 L1168.99 1207.98 L1169.57 1207.98 L1170.16 1207.98 L1170.75 1207.98 L1171.33 1207.98 L1171.92 1207.98 L1172.5 1207.98 L1173.09 1207.98 L1173.68 1207.98 L1174.26 1207.98 L1174.85 1207.98 L1175.44 1207.98 L1176.02 1207.98 L1176.61 1207.98 L1177.2 1207.98 L1177.78 1207.98 L1178.37 1207.98 L1178.96 1207.98 L1179.54 1207.98 L1180.13 1207.98 L1180.71 1207.98 L1181.3 1207.98 L1181.89 1207.98 L1182.47 1207.98 L1183.06 1207.98 L1183.65 1207.98 L1184.23 1207.98 L1184.82 1207.98 L1185.41 1207.98 L1185.99 1207.98 L1186.58 1207.98 L1187.16 1207.98 L1187.75 1207.98 L1188.34 1207.98 L1188.92 1207.98 L1189.51 1207.98 L1190.1 1207.98 L1190.68 1207.98 L1191.27 1207.98 L1191.86 1207.98 L1192.44 1207.98 L1193.03 1207.98 L1193.62 1207.98 L1194.2 1207.98 L1194.79 1207.98 L1195.37 1207.98 L1195.96 1207.98 L1196.55 1207.98 L1197.13 1207.98 L1197.72 1207.98 L1198.31 1207.98 L1198.89 1207.98 L1199.48 1207.98 L1200.07 1207.98 L1200.65 1207.98 L1201.24 1207.98 L1201.83 1207.98 L1202.41 1207.98 L1203 1207.98 L1203.58 1207.98 L1204.17 1207.98 L1204.76 1207.98 L1205.34 1207.98 L1205.93 1207.98 L1206.52 1207.98 L1207.1 1207.98 L1207.69 1207.98 L1208.28 1207.98 L1208.86 1207.98 L1209.45 1207.98 L1210.03 1207.98 L1210.62 1207.98 L1211.21 1207.98 L1211.79 1207.98 L1212.38 1207.98 L1212.97 1207.98 L1213.55 1207.98 L1214.14 1207.98 L1214.73 1207.98 L1215.31 1207.98 L1215.9 1207.98 L1216.49 1207.98 L1217.07 1207.98 L1217.66 1207.98 L1218.24 1207.98 L1218.83 1207.98 L1219.42 1207.98 L1220 1207.98 L1220.59 1207.98 L1221.18 1207.98 L1221.76 1207.98 L1222.35 1207.98 L1222.94 1207.98 L1223.52 1207.98 L1224.11 1207.98 L1224.7 1207.98 L1225.28 1207.98 L1225.87 1207.98 L1226.45 1207.98 L1227.04 1207.98 L1227.63 1207.98 L1228.21 1207.98 L1228.8 1207.98 L1229.39 1207.98 L1229.97 1207.98 L1230.56 1207.98 L1231.15 1207.98 L1231.73 1207.98 L1232.32 1207.98 L1232.91 1207.98 L1233.49 1207.98 L1234.08 1207.98 L1234.66 1207.98 L1235.25 1207.98 L1235.84 1207.98 L1236.42 1207.98 L1237.01 1207.98 L1237.6 1207.98 L1238.18 1207.98 L1238.77 1207.98 L1239.36 1207.98 L1239.94 1207.98 L1240.53 1207.98 L1241.11 1207.98 L1241.7 1207.98 L1242.29 1207.98 L1242.87 1207.98 L1243.46 1207.98 L1244.05 1207.98 L1244.63 1207.98 L1245.22 1207.98 L1245.81 1207.98 L1246.39 1207.98 L1246.98 1207.98 L1247.57 1207.98 L1248.15 1207.98 L1248.74 1207.98 L1249.32 1207.98 L1249.91 1207.98 L1250.5 1207.98 L1251.08 1207.98 L1251.67 1207.98 L1252.26 1207.98 L1252.84 1207.98 L1253.43 1207.98 L1254.02 1207.98 L1254.6 1207.98 L1255.19 1207.98 L1255.78 1207.98 L1256.36 1207.98 L1256.95 1207.98 L1257.53 1207.98 L1258.12 1207.98 L1258.71 1207.98 L1259.29 1207.98 L1259.88 1207.98 L1260.47 1207.98 L1261.05 1207.98 L1261.64 1207.98 L1262.23 1207.98 L1262.81 1207.98 L1263.4 1207.98 L1263.98 1207.98 L1264.57 1207.98 L1265.16 1207.98 L1265.74 1207.98 L1266.33 1207.98 L1266.92 1207.98 L1267.5 1207.98 L1268.09 1207.98 L1268.68 1207.98 L1269.26 1207.98 L1269.85 1207.98 L1270.44 1207.98 L1271.02 1207.98 L1271.61 1207.98 L1272.19 1207.98 L1272.78 1207.98 L1273.37 1207.98 L1273.95 1207.98 L1274.54 1207.98 L1275.13 1207.98 L1275.71 1207.98 L1276.3 1207.98 L1276.89 1207.98 L1277.47 1207.98 L1278.06 1207.98 L1278.65 1207.98 L1279.23 1207.98 L1279.82 1207.98 L1280.4 1207.98 L1280.99 1207.98 L1281.58 1207.98 L1282.16 1207.98 L1282.75 1207.98 L1283.34 1207.98 L1283.92 1207.98 L1284.51 1207.98 L1285.1 1207.98 L1285.68 1207.98 L1286.27 1207.98 L1286.86 1207.98 L1287.44 1207.98 L1288.03 1207.98 L1288.61 1207.98 L1289.2 1207.98 L1289.79 1207.98 L1290.37 1207.98 L1290.96 1207.98 L1291.55 1207.98 L1292.13 1207.98 L1292.72 1207.98 L1293.31 1207.98 L1293.89 1207.98 L1294.48 1207.98 L1295.06 1207.98 L1295.65 1207.98 L1296.24 1207.98 L1296.82 1207.98 L1297.41 1207.98 L1298 1207.98 L1298.58 1207.98 L1299.17 1207.98 L1299.76 1207.98 L1300.34 1207.98 L1300.93 1207.98 L1301.52 1207.98 L1302.1 1207.98 L1302.69 1207.98 L1303.27 1207.98 L1303.86 1207.98 L1304.45 1207.98 L1305.03 1207.98 L1305.62 1207.98 L1306.21 1207.98 L1306.79 1207.98 L1307.38 1207.98 L1307.97 1207.98 L1308.55 1207.98 L1309.14 1207.98 L1309.73 1207.98 L1310.31 1207.98 L1310.9 1207.98 L1311.48 1207.98 L1312.07 1207.98 L1312.66 1207.98 L1313.24 1207.98 L1313.83 1207.98 L1314.42 1207.98 L1315 1207.98 L1315.59 1207.98 L1316.18 1207.98 L1316.76 1207.98 L1317.35 1207.98 L1317.93 1207.98 L1318.52 1207.98 L1319.11 1207.98 L1319.69 1207.98 L1320.28 1207.98 L1320.87 1207.98 L1321.45 1207.98 L1322.04 1207.98 L1322.63 1207.98 L1323.21 1207.98 L1323.8 1207.98 L1324.39 1207.98 L1324.97 1207.98 L1325.56 1207.98 L1326.14 1207.98 L1326.73 1207.98 L1327.32 1207.98 L1327.9 1207.98 L1328.49 1207.98 L1329.08 1207.98 L1329.66 1207.98 L1330.25 1207.98 L1330.84 1207.98 L1331.42 1207.98 L1332.01 1207.98 L1332.6 1207.98 L1333.18 1207.98 L1333.77 1207.98 L1334.35 1207.98 L1334.94 1207.98 L1335.53 1207.98 L1336.11 1207.98 L1336.7 1207.98 L1337.29 1207.98 L1337.87 1207.98 L1338.46 1207.98 L1339.05 1207.98 L1339.63 1207.98 L1340.22 1207.98 L1340.8 1207.98 L1341.39 1207.98 L1341.98 1207.98 L1342.56 1207.98 L1343.15 1207.98 L1343.74 1207.98 L1344.32 1207.98 L1344.91 1207.98 L1345.5 1207.98 L1346.08 1207.98 L1346.67 1207.98 L1347.26 1207.98 L1347.84 1207.98 L1348.43 1207.98 L1349.01 1207.98 L1349.6 1207.98 L1350.19 1207.98 L1350.77 1207.98 L1351.36 1207.98 L1351.95 1207.98 L1352.53 1207.98 L1353.12 1207.98 L1353.71 1207.98 L1354.29 1207.98 L1354.88 1207.98 L1355.47 1207.98 L1356.05 1207.98 L1356.64 1207.98 L1357.22 1207.98 L1357.81 1207.98 L1358.4 1207.98 L1358.98 1207.98 L1359.57 1207.98 L1360.16 1207.98 L1360.74 1207.98 L1361.33 1207.98 L1361.92 1207.98 L1362.5 1207.98 L1363.09 1207.98 L1363.68 1207.98 L1364.26 1207.98 L1364.85 1207.98 L1365.43 1207.98 L1366.02 1207.98 L1366.61 1207.98 L1367.19 1207.98 L1367.78 1207.98 L1368.37 1207.98 L1368.95 1207.98 L1369.54 1207.98 L1370.13 1207.98 L1370.71 1207.98 L1371.3 1207.98 L1371.88 1207.98 L1372.47 1207.98 L1373.06 1207.98 L1373.64 1207.98 L1374.23 1207.98 L1374.82 1207.98 L1375.4 1207.98 L1375.99 1207.98 L1376.58 1207.98 L1377.16 1207.98 L1377.75 1207.98 L1378.34 1207.98 L1378.92 1207.98 L1379.51 1207.98 L1380.09 1207.98 L1380.68 1207.98 L1381.27 1207.98 L1381.85 1207.98 L1382.44 1207.98 L1383.03 1207.98 L1383.61 1207.98 L1384.2 1207.98 L1384.79 1207.98 L1385.37 1207.98 L1385.96 1207.98 L1386.55 1207.98 L1387.13 1207.98 L1387.72 1207.98 L1388.3 1207.98 L1388.89 1207.98 L1389.48 1207.98 L1390.06 1207.98 L1390.65 1207.98 L1391.24 1207.98 L1391.82 1207.98 L1392.41 1207.98 L1393 1207.98 L1393.58 1207.98 L1394.17 1207.98 L1394.75 1207.98 L1395.34 1207.98 L1395.93 1207.98 L1396.51 1207.98 L1397.1 1207.98 L1397.69 1207.98 L1398.27 1207.98 L1398.86 1207.98 L1399.45 1207.98 L1400.03 1207.98 L1400.62 1207.98 L1401.21 1207.98 L1401.79 1207.98 L1402.38 1207.98 L1402.96 1207.98 L1403.55 1207.98 L1404.14 1207.98 L1404.72 1207.98 L1405.31 1207.98 L1405.9 1207.98 L1406.48 1207.98 L1407.07 1207.98 L1407.66 1207.98 L1408.24 1207.98 L1408.83 1207.98 L1409.42 1207.98 L1410 1207.98 L1410.59 1207.98 L1411.17 1207.98 L1411.76 1207.98 L1412.35 1207.98 L1412.93 1207.98 L1413.52 1207.98 L1414.11 1207.98 L1414.69 1207.98 L1415.28 1207.98 L1415.87 1207.98 L1416.45 1207.98 L1417.04 1207.98 L1417.63 1207.98 L1418.21 1207.98 L1418.8 1207.98 L1419.38 1207.98 L1419.97 1207.98 L1420.56 1207.98 L1421.14 1207.98 L1421.73 1207.98 L1422.32 1207.98 L1422.9 1207.98 L1423.49 1207.98 L1424.08 1207.98 L1424.66 1207.98 L1425.25 1207.98 L1425.83 1207.98 L1426.42 1207.98 L1427.01 1207.98 L1427.59 1207.98 L1428.18 1207.98 L1428.77 1207.98 L1429.35 1207.98 L1429.94 1207.98 L1430.53 1207.98 L1431.11 1207.98 L1431.7 1207.98 L1432.29 1207.98 L1432.87 1207.98 L1433.46 1207.98 L1434.04 1207.98 L1434.63 1207.98 L1435.22 1207.98 L1435.8 1207.98 L1436.39 1207.98 L1436.98 1207.98 L1437.56 1207.98 L1438.15 1207.98 L1438.74 1207.98 L1439.32 1207.98 L1439.91 1207.98 L1440.5 1207.98 L1441.08 1207.98 L1441.67 1207.98 L1442.25 1207.98 L1442.84 1207.98 L1443.43 1207.98 L1444.01 1207.98 L1444.6 1207.98 L1445.19 1207.98 L1445.77 1207.98 L1446.36 1207.98 L1446.95 1207.98 L1447.53 1207.98 L1448.12 1207.98 L1448.7 1207.98 L1449.29 1207.98 L1449.88 1207.98 L1450.46 1207.98 L1451.05 1207.98 L1451.64 1207.98 L1452.22 1207.98 L1452.81 1207.98 L1453.4 1207.98 L1453.98 1207.98 L1454.57 1207.98 L1455.16 1207.98 L1455.74 1207.98 L1456.33 1207.98 L1456.91 1207.98 L1457.5 1207.98 L1458.09 1207.98 L1458.67 1207.98 L1459.26 1207.98 L1459.85 1207.98 L1460.43 1207.98 L1461.02 1207.98 L1461.61 1207.98 L1462.19 1207.98 L1462.78 1207.98 L1463.37 1207.98 L1463.95 1207.98 L1464.54 1207.98 L1465.12 1207.98 L1465.71 1207.98 L1466.3 1207.98 L1466.88 1207.98 L1467.47 1207.98 L1468.06 1207.98 L1468.64 1207.98 L1469.23 1207.98 L1469.82 1207.98 L1470.4 1207.98 L1470.99 1207.98 L1471.57 1207.98 L1472.16 1207.98 L1472.75 1207.98 L1473.33 1207.98 L1473.92 1207.98 L1474.51 1207.98 L1475.09 1207.98 L1475.68 1207.98 L1476.27 1207.98 L1476.85 1207.98 L1477.44 1207.98 L1478.03 1207.98 L1478.61 1207.98 L1479.2 1207.98 L1479.78 1207.98 L1480.37 1207.98 L1480.96 1207.98 L1481.54 1207.98 L1482.13 1207.98 L1482.72 1207.98 L1483.3 1207.98 L1483.89 1207.98 L1484.48 1207.98 L1485.06 1207.98 L1485.65 1207.98 L1486.24 1207.98 L1486.82 1207.98 L1487.41 1207.98 L1487.99 1207.98 L1488.58 1207.98 L1489.17 1207.98 L1489.75 1207.98 L1490.34 1207.98 L1490.93 1207.98 L1491.51 1207.98 L1492.1 1207.98 L1492.69 1207.98 L1493.27 1207.98 L1493.86 1207.98 L1494.45 1207.98 L1495.03 1207.98 L1495.62 1207.98 L1496.2 1207.98 L1496.79 1207.98 L1497.38 1207.98 L1497.96 1207.98 L1498.55 1207.98 L1499.14 1207.98 L1499.72 1207.98 L1500.31 1207.98 L1500.9 1207.98 L1501.48 1207.98 L1502.07 1207.98 L1502.65 1207.98 L1503.24 1207.98 L1503.83 1207.98 L1504.41 1207.98 L1505 1207.98 L1505.59 1207.98 L1506.17 1207.98 L1506.76 1207.98 L1507.35 1207.98 L1507.93 1207.98 L1508.52 1207.98 L1509.11 1207.98 L1509.69 1207.98 L1510.28 1207.98 L1510.86 1207.98 L1511.45 1207.98 L1512.04 1207.98 L1512.62 1207.98 L1513.21 1207.98 L1513.8 1207.98 L1514.38 1207.98 L1514.97 1207.98 L1515.56 1207.98 L1516.14 1207.98 L1516.73 1207.98 L1517.32 1207.98 L1517.9 1207.98 L1518.49 1207.98 L1519.07 1207.98 L1519.66 1207.98 L1520.25 1207.98 L1520.83 1207.98 L1521.42 1207.98 L1522.01 1207.98 L1522.59 1207.98 L1523.18 1207.98 L1523.77 1207.98 L1524.35 1207.98 L1524.94 1207.98 L1525.52 1207.98 L1526.11 1207.98 L1526.7 1207.98 L1527.28 1207.98 L1527.87 1207.98 L1528.46 1207.98 L1529.04 1207.98 L1529.63 1207.98 L1530.22 1207.98 L1530.8 1207.98 L1531.39 1207.98 L1531.98 1207.98 L1532.56 1207.98 L1533.15 1207.98 L1533.73 1207.98 L1534.32 1207.98 L1534.91 1207.98 L1535.49 1207.98 L1536.08 1207.98 L1536.67 1207.98 L1537.25 1207.98 L1537.84 1207.98 L1538.43 1207.98 L1539.01 1207.98 L1539.6 1207.98 L1540.19 1207.98 L1540.77 1207.98 L1541.36 1207.98 L1541.94 1207.98 L1542.53 1207.98 L1543.12 1207.98 L1543.7 1207.98 L1544.29 1207.98 L1544.88 1207.98 L1545.46 1207.98 L1546.05 1207.98 L1546.64 1207.98 L1547.22 1207.98 L1547.81 1207.98 L1548.4 1207.98 L1548.98 1207.98 L1549.57 1207.98 L1550.15 1207.98 L1550.74 1207.98 L1551.33 1207.98 L1551.91 1207.98 L1552.5 1207.98 L1553.09 1207.98 L1553.67 1207.98 L1554.26 1207.98 L1554.85 1207.98 L1555.43 1207.98 L1556.02 1207.98 L1556.6 1207.98 L1557.19 1207.98 L1557.78 1207.98 L1558.36 1207.98 L1558.95 1207.98 L1559.54 1207.98 L1560.12 1207.98 L1560.71 1207.98 L1561.3 1207.98 L1561.88 1207.98 L1562.47 1207.98 L1563.06 1207.98 L1563.64 1207.98 L1564.23 1207.98 L1564.81 1207.98 L1565.4 1207.98 L1565.99 1207.98 L1566.57 1207.98 L1567.16 1207.98 L1567.75 1207.98 L1568.33 1207.98 L1568.92 1207.98 L1569.51 1207.98 L1570.09 1207.98 L1570.68 1207.98 L1571.27 1207.98 L1571.85 1207.98 L1572.44 1207.98 L1573.02 1207.98 L1573.61 1207.98 L1574.2 1207.98 L1574.78 1207.98 L1575.37 1207.98 L1575.96 1207.98 L1576.54 1207.98 L1577.13 1207.98 L1577.72 1207.98 L1578.3 1207.98 L1578.89 1207.98 L1579.47 1207.98 L1580.06 1207.98 L1580.65 1207.98 L1581.23 1207.98 L1581.82 1207.98 L1582.41 1207.98 L1582.99 1207.98 L1583.58 1207.98 L1584.17 1207.98 L1584.75 1207.98 L1585.34 1207.98 L1585.93 1207.98 L1586.51 1207.98 L1587.1 1207.98 L1587.68 1207.98 L1588.27 1207.98 L1588.86 1207.98 L1589.44 1207.98 L1590.03 1207.98 L1590.62 1207.98 L1591.2 1207.98 L1591.79 1207.98 L1592.38 1207.98 L1592.96 1207.98 L1593.55 1207.98 L1594.14 1207.98 L1594.72 1207.98 L1595.31 1207.98 L1595.89 1207.98 L1596.48 1207.98 L1597.07 1207.98 L1597.65 1207.98 L1598.24 1207.98 L1598.83 1207.98 L1599.41 1207.98 L1600 1207.98 L1600.59 1207.98 L1601.17 1207.98 L1601.76 1207.98 L1602.34 1207.98 L1602.93 1207.98 L1603.52 1207.98 L1604.1 1207.98 L1604.69 1207.98 L1605.28 1207.98 L1605.86 1207.98 L1606.45 1207.98 L1607.04 1207.98 L1607.62 1207.98 L1608.21 1207.98 L1608.8 1207.98 L1609.38 1207.98 L1609.97 1207.98 L1610.55 1207.98 L1611.14 1207.98 L1611.73 1207.98 L1612.31 1207.98 L1612.9 1207.98 L1613.49 1207.98 L1614.07 1207.98 L1614.66 1207.98 L1615.25 1207.98 L1615.83 1207.98 L1616.42 1207.98 L1617.01 1207.98 L1617.59 1207.98 L1618.18 1207.98 L1618.76 1207.98 L1619.35 1207.98 L1619.94 1207.98 L1620.52 1207.98 L1621.11 1207.98 L1621.7 1207.98 L1622.28 1207.98 L1622.87 1207.98 L1623.46 1207.98 L1624.04 1207.98 L1624.63 1207.98 L1625.22 1207.98 L1625.8 1207.98 L1626.39 1207.98 L1626.97 1207.98 L1627.56 1207.98 L1628.15 1207.98 L1628.73 1207.98 L1629.32 1207.98 L1629.91 1207.98 L1630.49 1207.98 L1631.08 1207.98 L1631.67 1207.98 L1632.25 1207.98 L1632.84 1207.98 L1633.42 1207.98 L1634.01 1207.98 L1634.6 1207.98 L1635.18 1207.98 L1635.77 1207.98 L1636.36 1207.98 L1636.94 1207.98 L1637.53 1207.98 L1638.12 1207.98 L1638.7 1207.98 L1639.29 1207.98 L1639.88 1207.98 L1640.46 1207.98 L1641.05 1207.98 L1641.63 1207.98 L1642.22 1207.98 L1642.81 1207.98 L1643.39 1207.98 L1643.98 1207.98 L1644.57 1207.98 L1645.15 1207.98 L1645.74 1207.98 L1646.33 1207.98 L1646.91 1207.98 L1647.5 1207.98 L1648.09 1207.98 L1648.67 1207.98 L1649.26 1207.98 L1649.84 1207.98 L1650.43 1207.98 L1651.02 1207.98 L1651.6 1207.98 L1652.19 1207.98 L1652.78 1207.98 L1653.36 1207.98 L1653.95 1207.98 L1654.54 1207.98 L1655.12 1207.98 L1655.71 1207.98 L1656.29 1207.98 L1656.88 1207.98 L1657.47 1207.98 L1658.05 1207.98 L1658.64 1207.98 L1659.23 1207.98 L1659.81 1207.98 L1660.4 1207.98 L1660.99 1207.98 L1661.57 1207.98 L1662.16 1207.98 L1662.75 1207.98 L1663.33 1207.98 L1663.92 1207.98 L1664.5 1207.98 L1665.09 1207.98 L1665.68 1207.98 L1666.26 1207.98 L1666.85 1207.98 L1667.44 1207.98 L1668.02 1207.98 L1668.61 1207.98 L1669.2 1207.98 L1669.78 1207.98 L1670.37 1207.98 L1670.96 1207.98 L1671.54 1207.98 L1672.13 1207.98 L1672.71 1207.98 L1673.3 1207.98 L1673.89 1207.98 L1674.47 1207.98 L1675.06 1207.98 L1675.65 1207.98 L1676.23 1207.98 L1676.82 1207.98 L1677.41 1207.98 L1677.99 1207.98 L1678.58 1207.98 L1679.17 1207.98 L1679.75 1207.98 L1680.34 1207.98 L1680.92 1207.98 L1681.51 1207.98 L1682.1 1207.98 L1682.68 1207.98 L1683.27 1207.98 L1683.86 1207.98 L1684.44 1207.98 L1685.03 1207.98 L1685.62 1207.98 L1686.2 1207.98 L1686.79 1207.98 L1687.37 1207.98 L1687.96 1207.98 L1688.55 1207.98 L1689.13 1207.98 L1689.72 1207.98 L1690.31 1207.98 L1690.89 1207.98 L1691.48 1207.98 L1692.07 1207.98 L1692.65 1207.98 L1693.24 1207.98 L1693.83 1207.98 L1694.41 1207.98 L1695 1207.98 L1695.58 1207.98 L1696.17 1207.98 L1696.76 1207.98 L1697.34 1207.98 L1697.93 1207.98 L1698.52 1207.98 L1699.1 1207.98 L1699.69 1207.98 L1700.28 1207.98 L1700.86 1207.98 L1701.45 1207.98 L1702.04 1207.98 L1702.62 1207.98 L1703.21 1207.98 L1703.79 1207.98 L1704.38 1207.98 L1704.97 1207.98 L1705.55 1207.98 L1706.14 1207.98 L1706.73 1207.98 L1707.31 1207.98 L1707.9 1207.98 L1708.49 1207.98 L1709.07 1207.98 L1709.66 1207.98 L1710.24 1207.98 L1710.83 1207.98 L1711.42 1207.98 L1712 1207.98 L1712.59 1207.98 L1713.18 1207.98 L1713.76 1207.98 L1714.35 1207.98 L1714.94 1207.98 L1715.52 1207.98 L1716.11 1207.98 L1716.7 1207.98 L1717.28 1207.98 L1717.87 1207.98 L1718.45 1207.98 L1719.04 1207.98 L1719.63 1207.98 L1720.21 1207.98 L1720.8 1207.98 L1721.39 1207.98 L1721.97 1207.98 L1722.56 1207.98 L1723.15 1207.98 L1723.73 1207.98 L1724.32 1207.98 L1724.91 1207.98 L1725.49 1207.98 L1726.08 1207.98 L1726.66 1207.98 L1727.25 1207.98 L1727.84 1207.98 L1728.42 1207.98 L1729.01 1207.98 L1729.6 1207.98 L1730.18 1207.98 L1730.77 1207.98 L1731.36 1207.98 L1731.94 1207.98 L1732.53 1207.98 L1733.11 1207.98 L1733.7 1207.98 L1734.29 1207.98 L1734.87 1207.98 L1735.46 1207.98 L1736.05 1207.98 L1736.63 1207.98 L1737.22 1207.98 L1737.81 1207.98 L1738.39 1207.98 L1738.98 1207.98 L1739.57 1207.98 L1740.15 1207.98 L1740.74 1207.98 L1741.32 1207.98 L1741.91 1207.98 L1742.5 1207.98 L1743.08 1207.98 L1743.67 1207.98 L1744.26 1207.98 L1744.84 1207.98 L1745.43 1207.98 L1746.02 1207.98 L1746.6 1207.98 L1747.19 1207.98 L1747.78 1207.98 L1748.36 1207.98 L1748.95 1207.98 L1749.53 1207.98 L1750.12 1207.98 L1750.71 1207.98 L1751.29 1207.98 L1751.88 1207.98 L1752.47 1207.98 L1753.05 1207.98 L1753.64 1207.98 L1754.23 1207.98 L1754.81 1207.98 L1755.4 1207.98 L1755.99 1207.98 L1756.57 1207.98 L1757.16 1207.98 L1757.74 1207.98 L1758.33 1207.98 L1758.92 1207.98 L1759.5 1207.98 L1760.09 1207.98 L1760.68 1207.98 L1761.26 1207.98 L1761.85 1207.98 L1762.44 1207.98 L1763.02 1207.98 L1763.61 1207.98 L1764.19 1207.98 L1764.78 1207.98 L1765.37 1207.98 L1765.95 1207.98 L1766.54 1207.98 L1767.13 1207.98 L1767.71 1207.98 L1768.3 1207.98 L1768.89 1207.98 L1769.47 1207.98 L1770.06 1207.98 L1770.65 1207.98 L1771.23 1207.98 L1771.82 1207.98 L1772.4 1207.98 L1772.99 1207.98 L1773.58 1207.98 L1774.16 1207.98 L1774.75 1207.98 L1775.34 1207.98 L1775.92 1207.98 L1776.51 1207.98 L1777.1 1207.98 L1777.68 1207.98 L1778.27 1207.98 L1778.86 1207.98 L1779.44 1207.98 L1780.03 1207.98 L1780.61 1207.98 L1781.2 1207.98 L1781.79 1207.98 L1782.37 1207.98 L1782.96 1207.98 L1783.55 1207.98 L1784.13 1207.98 L1784.72 1207.98 L1785.31 1207.98 L1785.89 1207.98 L1786.48 1207.98 L1787.06 1207.98 L1787.65 1207.98 L1788.24 1207.98 L1788.82 1207.98 L1789.41 1207.98 L1790 1207.98 L1790.58 1207.98 L1791.17 1207.98 L1791.76 1207.98 L1792.34 1207.98 L1792.93 1207.98 L1793.52 1207.98 L1794.1 1207.98 L1794.69 1207.98 L1795.27 1207.98 L1795.86 1207.98 L1796.45 1207.98 L1797.03 1207.98 L1797.62 1207.98 L1798.21 1207.98 L1798.79 1207.98 L1799.38 1207.98 L1799.97 1207.98 L1800.55 1207.98 L1801.14 1207.98 L1801.73 1207.98 L1802.31 1207.98 L1802.9 1207.98 L1803.48 1207.98 L1804.07 1207.98 L1804.66 1207.98 L1805.24 1207.98 L1805.83 1207.98 L1806.42 1207.98 L1807 1207.98 L1807.59 1207.98 L1808.18 1207.98 L1808.76 1207.98 L1809.35 1207.98 L1809.94 1207.98 L1810.52 1207.98 L1811.11 1207.98 L1811.69 1207.98 L1812.28 1207.98 L1812.87 1207.98 L1813.45 1207.98 L1814.04 1207.98 L1814.63 1207.98 L1815.21 1207.98 L1815.8 1207.98 L1816.39 1207.98 L1816.97 1207.98 L1817.56 1207.98 L1818.14 1207.98 L1818.73 1207.98 L1819.32 1207.98 L1819.9 1207.98 L1820.49 1207.98 L1821.08 1207.98 L1821.66 1207.98 L1822.25 1207.98 L1822.84 1207.98 L1823.42 1207.98 L1824.01 1207.98 L1824.6 1207.98 L1825.18 1207.98 L1825.77 1207.98 L1826.35 1207.98 L1826.94 1207.98 L1827.53 1207.98 L1828.11 1207.98 L1828.7 1207.98 L1829.29 1207.98 L1829.87 1207.98 L1830.46 1207.98 L1831.05 1207.98 L1831.63 1207.98 L1832.22 1207.98 L1832.81 1207.98 L1833.39 1207.98 L1833.98 1207.98 L1834.56 1207.98 L1835.15 1207.98 L1835.74 1207.98 L1836.32 1207.98 L1836.91 1207.98 L1837.5 1207.98 L1838.08 1207.98 L1838.67 1207.98 L1839.26 1207.98 L1839.84 1207.98 L1840.43 1207.98 L1841.01 1207.98 L1841.6 1207.98 L1842.19 1207.98 L1842.77 1207.98 L1843.36 1207.98 L1843.95 1207.98 L1844.53 1207.98 L1845.12 1207.98 L1845.71 1207.98 L1846.29 1207.98 L1846.88 1207.98 L1847.47 1207.98 L1848.05 1207.98 L1848.64 1207.98 L1849.22 1207.98 L1849.81 1207.98 L1850.4 1207.98 L1850.98 1207.98 L1851.57 1207.98 L1852.16 1207.98 L1852.74 1207.98 L1853.33 1207.98 L1853.92 1207.98 L1854.5 1207.98 L1855.09 1207.98 L1855.68 1207.98 L1856.26 1207.98 L1856.85 1207.98 L1857.43 1207.98 L1858.02 1207.98 L1858.61 1207.98 L1859.19 1207.98 L1859.78 1207.98 L1860.37 1207.98 L1860.95 1207.98 L1861.54 1207.98 L1862.13 1207.98 L1862.71 1207.98 L1863.3 1207.98 L1863.88 1207.98 L1864.47 1207.98 L1865.06 1207.98 L1865.64 1207.98 L1866.23 1207.98 L1866.82 1207.98 L1867.4 1207.98 L1867.99 1207.98 L1868.58 1207.98 L1869.16 1207.98 L1869.75 1207.98 L1870.34 1207.98 L1870.92 1207.98 L1871.51 1207.98 L1872.09 1207.98 L1872.68 1207.98 L1873.27 1207.98 L1873.85 1207.98 L1874.44 1207.98 L1875.03 1207.98 L1875.61 1207.98 L1876.2 1207.98 L1876.79 1207.98 L1877.37 1207.98 L1877.96 1207.98 L1878.55 1207.98 L1879.13 1207.98 L1879.72 1207.98 L1880.3 1207.98 L1880.89 1207.98 L1881.48 1207.98 L1882.06 1207.98 L1882.65 1207.98 L1883.24 1207.98 L1883.82 1207.98 L1884.41 1207.98 L1885 1207.98 L1885.58 1207.98 L1886.17 1207.98 L1886.76 1207.98 L1887.34 1207.98 L1887.93 1207.98 L1888.51 1207.98 L1889.1 1207.98 L1889.69 1207.98 L1890.27 1207.98 L1890.86 1207.98 L1891.45 1207.98 L1892.03 1207.98 L1892.62 1207.98 L1893.21 1207.98 L1893.79 1207.98 L1894.38 1207.98 L1894.96 1207.98 L1895.55 1207.98 L1896.14 1207.98 L1896.72 1207.98 L1897.31 1207.98 L1897.9 1207.98 L1898.48 1207.98 L1899.07 1207.98 L1899.66 1207.98 L1900.24 1207.98 L1900.83 1207.98 L1901.42 1207.98 L1902 1207.98 L1902.59 1207.98 L1903.17 1207.98 L1903.76 1207.98 L1904.35 1207.98 L1904.93 1207.98 L1905.52 1207.98 L1906.11 1207.98 L1906.69 1207.98 L1907.28 1207.98 L1907.87 1207.98 L1908.45 1207.98 L1909.04 1207.98 L1909.63 1207.98 L1910.21 1207.98 L1910.8 1207.98 L1911.38 1207.98 L1911.97 1207.98 L1912.56 1207.98 L1913.14 1207.98 L1913.73 1207.98 L1914.32 1207.98 L1914.9 1207.98 L1915.49 1207.98 L1916.08 1207.98 L1916.66 1207.98 L1917.25 1207.98 L1917.83 1207.98 L1918.42 1207.98 L1919.01 1207.98 L1919.59 1207.98 L1920.18 1207.98 L1920.77 1207.98 L1921.35 1207.98 L1921.94 1207.98 L1922.53 1207.98 L1923.11 1207.98 L1923.7 1207.98 L1924.29 1207.98 L1924.87 1207.98 L1925.46 1207.98 L1926.04 1207.98 L1926.63 1207.98 L1927.22 1207.98 L1927.8 1207.98 L1928.39 1207.98 L1928.98 1207.98 L1929.56 1207.98 L1930.15 1207.98 L1930.74 1207.98 L1931.32 1207.98 L1931.91 1207.98 L1932.5 1207.98 L1933.08 1207.98 L1933.67 1207.98 L1934.25 1207.98 L1934.84 1207.98 L1935.43 1207.98 L1936.01 1207.98 L1936.6 1207.98 L1937.19 1207.98 L1937.77 1207.98 L1938.36 1207.98 L1938.95 1207.98 L1939.53 1207.98 L1940.12 1207.98 L1940.71 1207.98 L1941.29 1207.98 L1941.88 1207.98 L1942.46 1207.98 L1943.05 1207.98 L1943.64 1207.98 L1944.22 1207.98 L1944.81 1207.98 L1945.4 1207.98 L1945.98 1207.98 L1946.57 1207.98 L1947.16 1207.98 L1947.74 1207.98 L1948.33 1207.98 L1948.91 1207.98 L1949.5 1207.98 L1950.09 1207.98 L1950.67 1207.98 L1951.26 1207.98 L1951.85 1207.98 L1952.43 1207.98 L1953.02 1207.98 L1953.61 1207.98 L1954.19 1207.98 L1954.78 1207.98 L1955.37 1207.98 L1955.95 1207.98 L1956.54 1207.98 L1957.12 1207.98 L1957.71 1207.98 L1958.3 1207.98 L1958.88 1207.98 L1959.47 1207.98 L1960.06 1207.98 L1960.64 1207.98 L1961.23 1207.98 L1961.82 1207.98 L1962.4 1207.98 L1962.99 1207.98 L1963.58 1207.98 L1964.16 1207.98 L1964.75 1207.98 L1965.33 1207.98 L1965.92 1207.98 L1966.51 1207.98 L1967.09 1207.98 L1967.68 1207.98 L1968.27 1207.98 L1968.85 1207.98 L1969.44 1207.98 L1970.03 1207.98 L1970.61 1207.98 L1971.2 1207.98 L1971.78 1207.98 L1972.37 1207.98 L1972.96 1207.98 L1973.54 1207.98 L1974.13 1207.98 L1974.72 1207.98 L1975.3 1207.98 L1975.89 1207.98 L1976.48 1207.98 L1977.06 1207.98 L1977.65 1207.98 L1978.24 1207.98 L1978.82 1207.98 L1979.41 1207.98 L1979.99 1207.98 L1980.58 1207.98 L1981.17 1207.98 L1981.75 1207.98 L1982.34 1207.98 L1982.93 1207.98 L1983.51 1207.98 L1984.1 1207.98 L1984.69 1207.98 L1985.27 1207.98 L1985.86 1207.98 L1986.45 1207.98 L1987.03 1207.98 L1987.62 1207.98 L1988.2 1207.98 L1988.79 1207.98 L1989.38 1207.98 L1989.96 1207.98 L1990.55 1207.98 L1991.14 1207.98 L1991.72 1207.98 L1992.31 1207.98 L1992.9 1207.98 L1993.48 1207.98 L1994.07 1207.98 L1994.65 1207.98 L1995.24 1207.98 L1995.83 1207.98 L1996.41 1207.98 L1997 1207.98 L1997.59 1207.98 L1998.17 1207.98 L1998.76 1207.98 L1999.35 1207.98 L1999.93 1207.98 L2000.52 1207.98 L2001.11 1207.98 L2001.69 1207.98 L2002.28 1207.98 L2002.86 1207.98 L2003.45 1207.98 L2004.04 1207.98 L2004.62 1207.98 L2005.21 1207.98 L2005.8 1207.98 L2006.38 1207.98 L2006.97 1207.98 L2007.56 1207.98 L2008.14 1207.98 L2008.73 1207.98 L2009.32 1207.98 L2009.9 1207.98 L2010.49 1207.98 L2011.07 1207.98 L2011.66 1207.98 L2012.25 1207.98 L2012.83 1207.98 L2013.42 1207.98 L2014.01 1207.98 L2014.59 1207.98 L2015.18 1207.98 L2015.77 1207.98 L2016.35 1207.98 L2016.94 1207.98 L2017.53 1207.98 L2018.11 1207.98 L2018.7 1207.98 L2019.28 1207.98 L2019.87 1207.98 L2020.46 1207.98 L2021.04 1207.98 L2021.63 1207.98 L2022.22 1207.98 L2022.8 1207.98 L2023.39 1207.98 L2023.98 1207.98 L2024.56 1207.98 L2025.15 1207.98 L2025.73 1207.98 L2026.32 1207.98 L2026.91 1207.98 L2027.49 1207.98 L2028.08 1207.98 L2028.67 1207.98 L2029.25 1207.98 L2029.84 1207.98 L2030.43 1207.98 L2031.01 1207.98 L2031.6 1207.98 L2032.19 1207.98 L2032.77 1207.98 L2033.36 1207.98 L2033.94 1207.98 L2034.53 1207.98 L2035.12 1207.98 L2035.7 1207.98 L2036.29 1207.98 L2036.88 1207.98 L2037.46 1207.98 L2038.05 1207.98 L2038.64 1207.98 L2039.22 1207.98 L2039.81 1207.98 L2040.4 1207.98 L2040.98 1207.98 L2041.57 1207.98 L2042.15 1207.98 L2042.74 1207.98 L2043.33 1207.98 L2043.91 1207.98 L2044.5 1207.98 L2045.09 1207.98 L2045.67 1207.98 L2046.26 1207.98 L2046.85 1207.98 L2047.43 1207.98 L2048.02 1207.98 L2048.6 1207.98 L2049.19 1207.98 L2049.78 1207.98 L2050.36 1207.98 L2050.95 1207.98 L2051.54 1207.98 L2052.12 1207.98 L2052.71 1207.98 L2053.3 1207.98 L2053.88 1207.98 L2054.47 1207.98 L2055.06 1207.98 L2055.64 1207.98 L2056.23 1207.98 L2056.81 1207.98 L2057.4 1207.98 L2057.99 1207.98 L2058.57 1207.98 L2059.16 1207.98 L2059.75 1207.98 L2060.33 1207.98 L2060.92 1207.98 L2061.51 1207.98 L2062.09 1207.98 L2062.68 1207.98 L2063.27 1207.98 L2063.85 1207.98 L2064.44 1207.98 L2065.02 1207.98 L2065.61 1207.98 L2066.2 1207.98 L2066.78 1207.98 L2067.37 1207.98 L2067.96 1207.98 L2068.54 1207.98 L2069.13 1207.98 L2069.72 1207.98 L2070.3 1207.98 L2070.89 1207.98 L2071.48 1207.98 L2072.06 1207.98 L2072.65 1207.98 L2073.23 1207.98 L2073.82 1207.98 L2074.41 1207.98 L2074.99 1207.98 L2075.58 1207.98 L2076.17 1207.98 L2076.75 1207.98 L2077.34 1207.98 L2077.93 1207.98 L2078.51 1207.98 L2079.1 1207.98 L2079.68 1207.98 L2080.27 1207.98 L2080.86 1207.98 L2081.44 1207.98 L2082.03 1207.98 L2082.62 1207.98 L2083.2 1207.98 L2083.79 1207.98 L2084.38 1207.98 L2084.96 1207.98 L2085.55 1207.98 L2086.14 1207.98 L2086.72 1207.98 L2087.31 1207.98 L2087.89 1207.98 L2088.48 1207.98 L2089.07 1207.98 L2089.65 1207.98 L2090.24 1207.98 L2090.83 1207.98 L2091.41 1207.98 L2092 1207.98 L2092.59 1207.98 L2093.17 1207.98 L2093.76 1207.98 L2094.35 1207.98 L2094.93 1207.98 L2095.52 1207.98 L2096.1 1207.98 L2096.69 1207.98 L2097.28 1207.98 L2097.86 1207.98 L2098.45 1207.98 L2099.04 1207.98 L2099.62 1207.98 L2100.21 1207.98 L2100.8 1207.98 L2101.38 1207.98 L2101.97 1207.98 L2102.55 1207.98 L2103.14 1207.98 L2103.73 1207.98 L2104.31 1207.98 L2104.9 1207.98 L2105.49 1207.98 L2106.07 1207.98 L2106.66 1207.98 L2107.25 1207.98 L2107.83 1207.98 L2108.42 1207.98 L2109.01 1207.98 L2109.59 1207.98 L2110.18 1207.98 L2110.76 1207.98 L2111.35 1207.98 L2111.94 1207.98 L2112.52 1207.98 L2113.11 1207.98 L2113.7 1207.98 L2114.28 1207.98 L2114.87 1207.98 L2115.46 1207.98 L2116.04 1207.98 L2116.63 1207.98 L2117.22 1207.98 L2117.8 1207.98 L2118.39 1207.98 L2118.97 1207.98 L2119.56 1207.98 L2120.15 1207.98 L2120.73 1207.98 L2121.32 1207.98 L2121.91 1207.98 L2122.49 1207.98 L2123.08 1207.98 L2123.67 1207.98 L2124.25 1207.98 L2124.84 1207.98 L2125.42 1207.98 L2126.01 1207.98 L2126.6 1207.98 L2127.18 1207.98 L2127.77 1207.98 L2128.36 1207.98 L2128.94 1207.98 L2129.53 1207.98 L2130.12 1207.98 L2130.7 1207.98 L2131.29 1207.98 L2131.88 1207.98 L2132.46 1207.98 L2133.05 1207.98 L2133.63 1207.98 L2134.22 1207.98 L2134.81 1207.98 L2135.39 1207.98 L2135.98 1207.98 L2136.57 1207.98 L2137.15 1207.98 L2137.74 1207.98 L2138.33 1207.98 L2138.91 1207.98 L2139.5 1207.98 L2140.09 1207.98 L2140.67 1207.98 L2141.26 1207.98 L2141.84 1207.98 L2142.43 1207.98 L2143.02 1207.98 L2143.6 1207.98 L2144.19 1207.98 L2144.78 1207.98 L2145.36 1207.98 L2145.95 1207.98 L2146.54 1207.98 L2147.12 1207.98 L2147.71 1207.98 L2148.3 1207.98 L2148.88 1207.98 L2149.47 1207.98 L2150.05 1207.98 L2150.64 1207.98 L2151.23 1207.98 L2151.81 1207.98 L2152.4 1207.98 L2152.99 1207.98 L2153.57 1207.98 L2154.16 1207.98 L2154.75 1207.98 L2155.33 1207.98 L2155.92 1207.98 L2156.5 1207.98 L2157.09 1207.98 L2157.68 1207.98 L2158.26 1207.98 L2158.26 1207.86 L2157.68 1207.86 L2157.09 1207.86 L2156.5 1207.86 L2155.92 1207.86 L2155.33 1207.86 L2154.75 1207.86 L2154.16 1207.86 L2153.57 1207.86 L2152.99 1207.86 L2152.4 1207.86 L2151.81 1207.86 L2151.23 1207.86 L2150.64 1207.86 L2150.05 1207.86 L2149.47 1207.86 L2148.88 1207.86 L2148.3 1207.86 L2147.71 1207.86 L2147.12 1207.86 L2146.54 1207.86 L2145.95 1207.86 L2145.36 1207.86 L2144.78 1207.86 L2144.19 1207.86 L2143.6 1207.86 L2143.02 1207.86 L2142.43 1207.86 L2141.84 1207.86 L2141.26 1207.86 L2140.67 1207.86 L2140.09 1207.86 L2139.5 1207.86 L2138.91 1207.86 L2138.33 1207.86 L2137.74 1207.86 L2137.15 1207.86 L2136.57 1207.86 L2135.98 1207.86 L2135.39 1207.86 L2134.81 1207.86 L2134.22 1207.86 L2133.63 1207.86 L2133.05 1207.86 L2132.46 1207.86 L2131.88 1207.86 L2131.29 1207.86 L2130.7 1207.86 L2130.12 1207.86 L2129.53 1207.86 L2128.94 1207.86 L2128.36 1207.86 L2127.77 1207.86 L2127.18 1207.86 L2126.6 1207.86 L2126.01 1207.86 L2125.42 1207.86 L2124.84 1207.86 L2124.25 1207.86 L2123.67 1207.86 L2123.08 1207.86 L2122.49 1207.86 L2121.91 1207.86 L2121.32 1207.86 L2120.73 1207.86 L2120.15 1207.86 L2119.56 1207.86 L2118.97 1207.86 L2118.39 1207.86 L2117.8 1207.86 L2117.22 1207.86 L2116.63 1207.86 L2116.04 1207.86 L2115.46 1207.86 L2114.87 1207.86 L2114.28 1207.86 L2113.7 1207.86 L2113.11 1207.86 L2112.52 1207.86 L2111.94 1207.86 L2111.35 1207.86 L2110.76 1207.86 L2110.18 1207.86 L2109.59 1207.86 L2109.01 1207.86 L2108.42 1207.86 L2107.83 1207.86 L2107.25 1207.86 L2106.66 1207.86 L2106.07 1207.86 L2105.49 1207.86 L2104.9 1207.86 L2104.31 1207.86 L2103.73 1207.86 L2103.14 1207.86 L2102.55 1207.86 L2101.97 1207.86 L2101.38 1207.86 L2100.8 1207.86 L2100.21 1207.86 L2099.62 1207.86 L2099.04 1207.86 L2098.45 1207.86 L2097.86 1207.86 L2097.28 1207.86 L2096.69 1207.86 L2096.1 1207.86 L2095.52 1207.86 L2094.93 1207.86 L2094.35 1207.86 L2093.76 1207.86 L2093.17 1207.86 L2092.59 1207.86 L2092 1207.86 L2091.41 1207.86 L2090.83 1207.86 L2090.24 1207.86 L2089.65 1207.86 L2089.07 1207.86 L2088.48 1207.86 L2087.89 1207.86 L2087.31 1207.86 L2086.72 1207.86 L2086.14 1207.86 L2085.55 1207.86 L2084.96 1207.86 L2084.38 1207.86 L2083.79 1207.86 L2083.2 1207.86 L2082.62 1207.86 L2082.03 1207.86 L2081.44 1207.86 L2080.86 1207.86 L2080.27 1207.86 L2079.68 1207.86 L2079.1 1207.86 L2078.51 1207.86 L2077.93 1207.86 L2077.34 1207.86 L2076.75 1207.86 L2076.17 1207.86 L2075.58 1207.86 L2074.99 1207.86 L2074.41 1207.86 L2073.82 1207.86 L2073.23 1207.86 L2072.65 1207.86 L2072.06 1207.86 L2071.48 1207.86 L2070.89 1207.86 L2070.3 1207.86 L2069.72 1207.86 L2069.13 1207.86 L2068.54 1207.86 L2067.96 1207.86 L2067.37 1207.86 L2066.78 1207.86 L2066.2 1207.86 L2065.61 1207.86 L2065.02 1207.86 L2064.44 1207.86 L2063.85 1207.86 L2063.27 1207.86 L2062.68 1207.86 L2062.09 1207.86 L2061.51 1207.86 L2060.92 1207.86 L2060.33 1207.86 L2059.75 1207.86 L2059.16 1207.86 L2058.57 1207.86 L2057.99 1207.86 L2057.4 1207.86 L2056.81 1207.86 L2056.23 1207.86 L2055.64 1207.86 L2055.06 1207.86 L2054.47 1207.86 L2053.88 1207.86 L2053.3 1207.86 L2052.71 1207.86 L2052.12 1207.86 L2051.54 1207.86 L2050.95 1207.86 L2050.36 1207.86 L2049.78 1207.86 L2049.19 1207.86 L2048.6 1207.86 L2048.02 1207.86 L2047.43 1207.86 L2046.85 1207.86 L2046.26 1207.86 L2045.67 1207.86 L2045.09 1207.86 L2044.5 1207.86 L2043.91 1207.86 L2043.33 1207.86 L2042.74 1207.86 L2042.15 1207.86 L2041.57 1207.86 L2040.98 1207.86 L2040.4 1207.86 L2039.81 1207.86 L2039.22 1207.86 L2038.64 1207.86 L2038.05 1207.86 L2037.46 1207.86 L2036.88 1207.86 L2036.29 1207.86 L2035.7 1207.86 L2035.12 1207.86 L2034.53 1207.86 L2033.94 1207.86 L2033.36 1207.86 L2032.77 1207.86 L2032.19 1207.86 L2031.6 1207.86 L2031.01 1207.86 L2030.43 1207.86 L2029.84 1207.86 L2029.25 1207.86 L2028.67 1207.86 L2028.08 1207.86 L2027.49 1207.86 L2026.91 1207.86 L2026.32 1207.86 L2025.73 1207.86 L2025.15 1207.86 L2024.56 1207.86 L2023.98 1207.86 L2023.39 1207.86 L2022.8 1207.86 L2022.22 1207.86 L2021.63 1207.86 L2021.04 1207.86 L2020.46 1207.86 L2019.87 1207.86 L2019.28 1207.86 L2018.7 1207.86 L2018.11 1207.86 L2017.53 1207.86 L2016.94 1207.86 L2016.35 1207.86 L2015.77 1207.86 L2015.18 1207.86 L2014.59 1207.86 L2014.01 1207.86 L2013.42 1207.86 L2012.83 1207.86 L2012.25 1207.86 L2011.66 1207.86 L2011.07 1207.86 L2010.49 1207.86 L2009.9 1207.86 L2009.32 1207.86 L2008.73 1207.86 L2008.14 1207.86 L2007.56 1207.86 L2006.97 1207.86 L2006.38 1207.86 L2005.8 1207.86 L2005.21 1207.86 L2004.62 1207.86 L2004.04 1207.86 L2003.45 1207.86 L2002.86 1207.86 L2002.28 1207.86 L2001.69 1207.86 L2001.11 1207.86 L2000.52 1207.86 L1999.93 1207.86 L1999.35 1207.86 L1998.76 1207.86 L1998.17 1207.86 L1997.59 1207.86 L1997 1207.86 L1996.41 1207.86 L1995.83 1207.86 L1995.24 1207.86 L1994.65 1207.86 L1994.07 1207.86 L1993.48 1207.86 L1992.9 1207.86 L1992.31 1207.86 L1991.72 1207.86 L1991.14 1207.86 L1990.55 1207.86 L1989.96 1207.86 L1989.38 1207.86 L1988.79 1207.86 L1988.2 1207.86 L1987.62 1207.86 L1987.03 1207.86 L1986.45 1207.86 L1985.86 1207.86 L1985.27 1207.86 L1984.69 1207.86 L1984.1 1207.86 L1983.51 1207.86 L1982.93 1207.86 L1982.34 1207.86 L1981.75 1207.86 L1981.17 1207.86 L1980.58 1207.86 L1979.99 1207.86 L1979.41 1207.86 L1978.82 1207.86 L1978.24 1207.86 L1977.65 1207.86 L1977.06 1207.86 L1976.48 1207.86 L1975.89 1207.86 L1975.3 1207.86 L1974.72 1207.86 L1974.13 1207.86 L1973.54 1207.86 L1972.96 1207.86 L1972.37 1207.86 L1971.78 1207.86 L1971.2 1207.86 L1970.61 1207.86 L1970.03 1207.86 L1969.44 1207.86 L1968.85 1207.86 L1968.27 1207.86 L1967.68 1207.86 L1967.09 1207.86 L1966.51 1207.86 L1965.92 1207.86 L1965.33 1207.86 L1964.75 1207.86 L1964.16 1207.86 L1963.58 1207.86 L1962.99 1207.86 L1962.4 1207.86 L1961.82 1207.86 L1961.23 1207.86 L1960.64 1207.86 L1960.06 1207.86 L1959.47 1207.86 L1958.88 1207.86 L1958.3 1207.86 L1957.71 1207.86 L1957.12 1207.86 L1956.54 1207.86 L1955.95 1207.86 L1955.37 1207.86 L1954.78 1207.86 L1954.19 1207.86 L1953.61 1207.86 L1953.02 1207.86 L1952.43 1207.86 L1951.85 1207.86 L1951.26 1207.86 L1950.67 1207.86 L1950.09 1207.86 L1949.5 1207.86 L1948.91 1207.86 L1948.33 1207.86 L1947.74 1207.86 L1947.16 1207.86 L1946.57 1207.86 L1945.98 1207.86 L1945.4 1207.86 L1944.81 1207.86 L1944.22 1207.86 L1943.64 1207.86 L1943.05 1207.86 L1942.46 1207.86 L1941.88 1207.86 L1941.29 1207.86 L1940.71 1207.86 L1940.12 1207.86 L1939.53 1207.86 L1938.95 1207.86 L1938.36 1207.86 L1937.77 1207.86 L1937.19 1207.86 L1936.6 1207.86 L1936.01 1207.86 L1935.43 1207.86 L1934.84 1207.86 L1934.25 1207.86 L1933.67 1207.86 L1933.08 1207.86 L1932.5 1207.86 L1931.91 1207.86 L1931.32 1207.86 L1930.74 1207.86 L1930.15 1207.86 L1929.56 1207.86 L1928.98 1207.86 L1928.39 1207.86 L1927.8 1207.86 L1927.22 1207.86 L1926.63 1207.86 L1926.04 1207.86 L1925.46 1207.86 L1924.87 1207.86 L1924.29 1207.86 L1923.7 1207.86 L1923.11 1207.86 L1922.53 1207.86 L1921.94 1207.86 L1921.35 1207.86 L1920.77 1207.86 L1920.18 1207.86 L1919.59 1207.86 L1919.01 1207.86 L1918.42 1207.86 L1917.83 1207.86 L1917.25 1207.86 L1916.66 1207.86 L1916.08 1207.86 L1915.49 1207.86 L1914.9 1207.86 L1914.32 1207.86 L1913.73 1207.86 L1913.14 1207.86 L1912.56 1207.86 L1911.97 1207.86 L1911.38 1207.86 L1910.8 1207.86 L1910.21 1207.86 L1909.63 1207.86 L1909.04 1207.86 L1908.45 1207.86 L1907.87 1207.86 L1907.28 1207.86 L1906.69 1207.86 L1906.11 1207.86 L1905.52 1207.86 L1904.93 1207.86 L1904.35 1207.86 L1903.76 1207.86 L1903.17 1207.86 L1902.59 1207.86 L1902 1207.86 L1901.42 1207.86 L1900.83 1207.86 L1900.24 1207.86 L1899.66 1207.86 L1899.07 1207.86 L1898.48 1207.86 L1897.9 1207.86 L1897.31 1207.86 L1896.72 1207.86 L1896.14 1207.86 L1895.55 1207.86 L1894.96 1207.86 L1894.38 1207.86 L1893.79 1207.86 L1893.21 1207.86 L1892.62 1207.86 L1892.03 1207.86 L1891.45 1207.86 L1890.86 1207.86 L1890.27 1207.86 L1889.69 1207.86 L1889.1 1207.86 L1888.51 1207.86 L1887.93 1207.86 L1887.34 1207.86 L1886.76 1207.86 L1886.17 1207.86 L1885.58 1207.86 L1885 1207.86 L1884.41 1207.86 L1883.82 1207.86 L1883.24 1207.86 L1882.65 1207.86 L1882.06 1207.86 L1881.48 1207.86 L1880.89 1207.86 L1880.3 1207.86 L1879.72 1207.86 L1879.13 1207.86 L1878.55 1207.86 L1877.96 1207.86 L1877.37 1207.86 L1876.79 1207.86 L1876.2 1207.86 L1875.61 1207.86 L1875.03 1207.86 L1874.44 1207.86 L1873.85 1207.86 L1873.27 1207.86 L1872.68 1207.86 L1872.09 1207.86 L1871.51 1207.86 L1870.92 1207.86 L1870.34 1207.86 L1869.75 1207.86 L1869.16 1207.86 L1868.58 1207.86 L1867.99 1207.86 L1867.4 1207.86 L1866.82 1207.86 L1866.23 1207.86 L1865.64 1207.86 L1865.06 1207.86 L1864.47 1207.86 L1863.88 1207.86 L1863.3 1207.86 L1862.71 1207.86 L1862.13 1207.86 L1861.54 1207.86 L1860.95 1207.86 L1860.37 1207.86 L1859.78 1207.86 L1859.19 1207.86 L1858.61 1207.86 L1858.02 1207.86 L1857.43 1207.86 L1856.85 1207.86 L1856.26 1207.86 L1855.68 1207.86 L1855.09 1207.86 L1854.5 1207.86 L1853.92 1207.86 L1853.33 1207.86 L1852.74 1207.86 L1852.16 1207.86 L1851.57 1207.86 L1850.98 1207.86 L1850.4 1207.86 L1849.81 1207.86 L1849.22 1207.86 L1848.64 1207.86 L1848.05 1207.86 L1847.47 1207.86 L1846.88 1207.86 L1846.29 1207.86 L1845.71 1207.86 L1845.12 1207.86 L1844.53 1207.86 L1843.95 1207.86 L1843.36 1207.86 L1842.77 1207.86 L1842.19 1207.86 L1841.6 1207.86 L1841.01 1207.86 L1840.43 1207.86 L1839.84 1207.86 L1839.26 1207.86 L1838.67 1207.86 L1838.08 1207.86 L1837.5 1207.86 L1836.91 1207.86 L1836.32 1207.86 L1835.74 1207.86 L1835.15 1207.86 L1834.56 1207.86 L1833.98 1207.86 L1833.39 1207.86 L1832.81 1207.86 L1832.22 1207.86 L1831.63 1207.86 L1831.05 1207.86 L1830.46 1207.86 L1829.87 1207.86 L1829.29 1207.86 L1828.7 1207.86 L1828.11 1207.86 L1827.53 1207.86 L1826.94 1207.86 L1826.35 1207.86 L1825.77 1207.86 L1825.18 1207.86 L1824.6 1207.86 L1824.01 1207.86 L1823.42 1207.86 L1822.84 1207.86 L1822.25 1207.86 L1821.66 1207.86 L1821.08 1207.86 L1820.49 1207.86 L1819.9 1207.86 L1819.32 1207.86 L1818.73 1207.86 L1818.14 1207.86 L1817.56 1207.86 L1816.97 1207.86 L1816.39 1207.86 L1815.8 1207.86 L1815.21 1207.86 L1814.63 1207.86 L1814.04 1207.86 L1813.45 1207.86 L1812.87 1207.86 L1812.28 1207.86 L1811.69 1207.86 L1811.11 1207.86 L1810.52 1207.86 L1809.94 1207.86 L1809.35 1207.86 L1808.76 1207.86 L1808.18 1207.86 L1807.59 1207.86 L1807 1207.86 L1806.42 1207.86 L1805.83 1207.86 L1805.24 1207.86 L1804.66 1207.86 L1804.07 1207.86 L1803.48 1207.86 L1802.9 1207.86 L1802.31 1207.86 L1801.73 1207.86 L1801.14 1207.86 L1800.55 1207.86 L1799.97 1207.86 L1799.38 1207.86 L1798.79 1207.86 L1798.21 1207.86 L1797.62 1207.86 L1797.03 1207.86 L1796.45 1207.86 L1795.86 1207.86 L1795.27 1207.86 L1794.69 1207.86 L1794.1 1207.86 L1793.52 1207.86 L1792.93 1207.86 L1792.34 1207.86 L1791.76 1207.86 L1791.17 1207.86 L1790.58 1207.86 L1790 1207.86 L1789.41 1207.86 L1788.82 1207.86 L1788.24 1207.86 L1787.65 1207.86 L1787.06 1207.86 L1786.48 1207.86 L1785.89 1207.86 L1785.31 1207.86 L1784.72 1207.86 L1784.13 1207.86 L1783.55 1207.86 L1782.96 1207.86 L1782.37 1207.86 L1781.79 1207.86 L1781.2 1207.86 L1780.61 1207.86 L1780.03 1207.86 L1779.44 1207.86 L1778.86 1207.86 L1778.27 1207.86 L1777.68 1207.86 L1777.1 1207.86 L1776.51 1207.86 L1775.92 1207.86 L1775.34 1207.86 L1774.75 1207.86 L1774.16 1207.86 L1773.58 1207.86 L1772.99 1207.86 L1772.4 1207.86 L1771.82 1207.86 L1771.23 1207.86 L1770.65 1207.86 L1770.06 1207.86 L1769.47 1207.86 L1768.89 1207.86 L1768.3 1207.86 L1767.71 1207.86 L1767.13 1207.86 L1766.54 1207.86 L1765.95 1207.86 L1765.37 1207.86 L1764.78 1207.86 L1764.19 1207.86 L1763.61 1207.86 L1763.02 1207.86 L1762.44 1207.86 L1761.85 1207.86 L1761.26 1207.86 L1760.68 1207.86 L1760.09 1207.86 L1759.5 1207.86 L1758.92 1207.86 L1758.33 1207.86 L1757.74 1207.86 L1757.16 1207.86 L1756.57 1207.86 L1755.99 1207.86 L1755.4 1207.86 L1754.81 1207.86 L1754.23 1207.86 L1753.64 1207.86 L1753.05 1207.86 L1752.47 1207.86 L1751.88 1207.86 L1751.29 1207.86 L1750.71 1207.86 L1750.12 1207.86 L1749.53 1207.86 L1748.95 1207.86 L1748.36 1207.86 L1747.78 1207.86 L1747.19 1207.86 L1746.6 1207.86 L1746.02 1207.86 L1745.43 1207.86 L1744.84 1207.86 L1744.26 1207.86 L1743.67 1207.86 L1743.08 1207.86 L1742.5 1207.86 L1741.91 1207.86 L1741.32 1207.86 L1740.74 1207.86 L1740.15 1207.86 L1739.57 1207.86 L1738.98 1207.86 L1738.39 1207.86 L1737.81 1207.86 L1737.22 1207.86 L1736.63 1207.86 L1736.05 1207.86 L1735.46 1207.86 L1734.87 1207.86 L1734.29 1207.86 L1733.7 1207.86 L1733.11 1207.86 L1732.53 1207.86 L1731.94 1207.86 L1731.36 1207.86 L1730.77 1207.86 L1730.18 1207.86 L1729.6 1207.86 L1729.01 1207.86 L1728.42 1207.86 L1727.84 1207.86 L1727.25 1207.86 L1726.66 1207.86 L1726.08 1207.86 L1725.49 1207.86 L1724.91 1207.86 L1724.32 1207.86 L1723.73 1207.86 L1723.15 1207.86 L1722.56 1207.86 L1721.97 1207.86 L1721.39 1207.86 L1720.8 1207.86 L1720.21 1207.86 L1719.63 1207.86 L1719.04 1207.86 L1718.45 1207.86 L1717.87 1207.86 L1717.28 1207.86 L1716.7 1207.86 L1716.11 1207.86 L1715.52 1207.86 L1714.94 1207.86 L1714.35 1207.86 L1713.76 1207.86 L1713.18 1207.86 L1712.59 1207.86 L1712 1207.86 L1711.42 1207.86 L1710.83 1207.86 L1710.24 1207.86 L1709.66 1207.86 L1709.07 1207.86 L1708.49 1207.86 L1707.9 1207.86 L1707.31 1207.86 L1706.73 1207.86 L1706.14 1207.86 L1705.55 1207.86 L1704.97 1207.86 L1704.38 1207.86 L1703.79 1207.86 L1703.21 1207.86 L1702.62 1207.86 L1702.04 1207.86 L1701.45 1207.86 L1700.86 1207.86 L1700.28 1207.86 L1699.69 1207.86 L1699.1 1207.86 L1698.52 1207.86 L1697.93 1207.86 L1697.34 1207.86 L1696.76 1207.86 L1696.17 1207.86 L1695.58 1207.86 L1695 1207.86 L1694.41 1207.86 L1693.83 1207.86 L1693.24 1207.86 L1692.65 1207.86 L1692.07 1207.86 L1691.48 1207.86 L1690.89 1207.86 L1690.31 1207.86 L1689.72 1207.86 L1689.13 1207.86 L1688.55 1207.86 L1687.96 1207.86 L1687.37 1207.86 L1686.79 1207.86 L1686.2 1207.86 L1685.62 1207.86 L1685.03 1207.86 L1684.44 1207.86 L1683.86 1207.86 L1683.27 1207.86 L1682.68 1207.86 L1682.1 1207.86 L1681.51 1207.86 L1680.92 1207.86 L1680.34 1207.86 L1679.75 1207.86 L1679.17 1207.86 L1678.58 1207.86 L1677.99 1207.86 L1677.41 1207.86 L1676.82 1207.86 L1676.23 1207.86 L1675.65 1207.86 L1675.06 1207.86 L1674.47 1207.86 L1673.89 1207.86 L1673.3 1207.86 L1672.71 1207.86 L1672.13 1207.86 L1671.54 1207.86 L1670.96 1207.86 L1670.37 1207.86 L1669.78 1207.86 L1669.2 1207.86 L1668.61 1207.86 L1668.02 1207.86 L1667.44 1207.86 L1666.85 1207.86 L1666.26 1207.86 L1665.68 1207.86 L1665.09 1207.86 L1664.5 1207.86 L1663.92 1207.86 L1663.33 1207.86 L1662.75 1207.86 L1662.16 1207.86 L1661.57 1207.86 L1660.99 1207.86 L1660.4 1207.86 L1659.81 1207.86 L1659.23 1207.86 L1658.64 1207.86 L1658.05 1207.86 L1657.47 1207.86 L1656.88 1207.86 L1656.29 1207.86 L1655.71 1207.86 L1655.12 1207.86 L1654.54 1207.86 L1653.95 1207.86 L1653.36 1207.86 L1652.78 1207.86 L1652.19 1207.86 L1651.6 1207.86 L1651.02 1207.86 L1650.43 1207.86 L1649.84 1207.86 L1649.26 1207.86 L1648.67 1207.86 L1648.09 1207.86 L1647.5 1207.86 L1646.91 1207.86 L1646.33 1207.86 L1645.74 1207.86 L1645.15 1207.86 L1644.57 1207.86 L1643.98 1207.86 L1643.39 1207.86 L1642.81 1207.86 L1642.22 1207.86 L1641.63 1207.86 L1641.05 1207.86 L1640.46 1207.86 L1639.88 1207.86 L1639.29 1207.86 L1638.7 1207.86 L1638.12 1207.86 L1637.53 1207.86 L1636.94 1207.86 L1636.36 1207.86 L1635.77 1207.86 L1635.18 1207.86 L1634.6 1207.86 L1634.01 1207.86 L1633.42 1207.86 L1632.84 1207.86 L1632.25 1207.86 L1631.67 1207.86 L1631.08 1207.86 L1630.49 1207.86 L1629.91 1207.86 L1629.32 1207.86 L1628.73 1207.86 L1628.15 1207.86 L1627.56 1207.86 L1626.97 1207.86 L1626.39 1207.86 L1625.8 1207.86 L1625.22 1207.86 L1624.63 1207.86 L1624.04 1207.86 L1623.46 1207.86 L1622.87 1207.86 L1622.28 1207.86 L1621.7 1207.86 L1621.11 1207.86 L1620.52 1207.86 L1619.94 1207.86 L1619.35 1207.86 L1618.76 1207.86 L1618.18 1207.86 L1617.59 1207.86 L1617.01 1207.86 L1616.42 1207.86 L1615.83 1207.86 L1615.25 1207.86 L1614.66 1207.86 L1614.07 1207.86 L1613.49 1207.86 L1612.9 1207.86 L1612.31 1207.86 L1611.73 1207.86 L1611.14 1207.86 L1610.55 1207.86 L1609.97 1207.86 L1609.38 1207.86 L1608.8 1207.86 L1608.21 1207.86 L1607.62 1207.86 L1607.04 1207.86 L1606.45 1207.86 L1605.86 1207.86 L1605.28 1207.86 L1604.69 1207.86 L1604.1 1207.86 L1603.52 1207.86 L1602.93 1207.86 L1602.34 1207.86 L1601.76 1207.86 L1601.17 1207.86 L1600.59 1207.86 L1600 1207.86 L1599.41 1207.86 L1598.83 1207.86 L1598.24 1207.86 L1597.65 1207.86 L1597.07 1207.86 L1596.48 1207.86 L1595.89 1207.86 L1595.31 1207.86 L1594.72 1207.86 L1594.14 1207.86 L1593.55 1207.86 L1592.96 1207.86 L1592.38 1207.86 L1591.79 1207.86 L1591.2 1207.86 L1590.62 1207.86 L1590.03 1207.86 L1589.44 1207.86 L1588.86 1207.86 L1588.27 1207.86 L1587.68 1207.86 L1587.1 1207.86 L1586.51 1207.86 L1585.93 1207.86 L1585.34 1207.86 L1584.75 1207.86 L1584.17 1207.86 L1583.58 1207.86 L1582.99 1207.86 L1582.41 1207.86 L1581.82 1207.86 L1581.23 1207.86 L1580.65 1207.86 L1580.06 1207.86 L1579.47 1207.86 L1578.89 1207.86 L1578.3 1207.86 L1577.72 1207.86 L1577.13 1207.86 L1576.54 1207.86 L1575.96 1207.86 L1575.37 1207.86 L1574.78 1207.86 L1574.2 1207.86 L1573.61 1207.86 L1573.02 1207.86 L1572.44 1207.86 L1571.85 1207.86 L1571.27 1207.86 L1570.68 1207.86 L1570.09 1207.86 L1569.51 1207.86 L1568.92 1207.86 L1568.33 1207.86 L1567.75 1207.86 L1567.16 1207.86 L1566.57 1207.86 L1565.99 1207.86 L1565.4 1207.86 L1564.81 1207.86 L1564.23 1207.86 L1563.64 1207.86 L1563.06 1207.86 L1562.47 1207.86 L1561.88 1207.86 L1561.3 1207.86 L1560.71 1207.86 L1560.12 1207.86 L1559.54 1207.86 L1558.95 1207.86 L1558.36 1207.86 L1557.78 1207.86 L1557.19 1207.86 L1556.6 1207.86 L1556.02 1207.86 L1555.43 1207.86 L1554.85 1207.86 L1554.26 1207.86 L1553.67 1207.86 L1553.09 1207.86 L1552.5 1207.86 L1551.91 1207.86 L1551.33 1207.86 L1550.74 1207.86 L1550.15 1207.86 L1549.57 1207.86 L1548.98 1207.86 L1548.4 1207.86 L1547.81 1207.86 L1547.22 1207.86 L1546.64 1207.86 L1546.05 1207.86 L1545.46 1207.86 L1544.88 1207.86 L1544.29 1207.86 L1543.7 1207.86 L1543.12 1207.86 L1542.53 1207.86 L1541.94 1207.86 L1541.36 1207.86 L1540.77 1207.86 L1540.19 1207.86 L1539.6 1207.86 L1539.01 1207.86 L1538.43 1207.86 L1537.84 1207.86 L1537.25 1207.86 L1536.67 1207.86 L1536.08 1207.86 L1535.49 1207.86 L1534.91 1207.86 L1534.32 1207.86 L1533.73 1207.86 L1533.15 1207.86 L1532.56 1207.86 L1531.98 1207.86 L1531.39 1207.86 L1530.8 1207.86 L1530.22 1207.86 L1529.63 1207.86 L1529.04 1207.86 L1528.46 1207.86 L1527.87 1207.86 L1527.28 1207.86 L1526.7 1207.86 L1526.11 1207.86 L1525.52 1207.86 L1524.94 1207.86 L1524.35 1207.86 L1523.77 1207.86 L1523.18 1207.86 L1522.59 1207.86 L1522.01 1207.86 L1521.42 1207.86 L1520.83 1207.86 L1520.25 1207.86 L1519.66 1207.86 L1519.07 1207.86 L1518.49 1207.86 L1517.9 1207.86 L1517.32 1207.86 L1516.73 1207.86 L1516.14 1207.86 L1515.56 1207.86 L1514.97 1207.86 L1514.38 1207.86 L1513.8 1207.86 L1513.21 1207.86 L1512.62 1207.86 L1512.04 1207.86 L1511.45 1207.86 L1510.86 1207.86 L1510.28 1207.86 L1509.69 1207.86 L1509.11 1207.86 L1508.52 1207.86 L1507.93 1207.86 L1507.35 1207.86 L1506.76 1207.86 L1506.17 1207.86 L1505.59 1207.86 L1505 1207.86 L1504.41 1207.86 L1503.83 1207.86 L1503.24 1207.86 L1502.65 1207.86 L1502.07 1207.86 L1501.48 1207.86 L1500.9 1207.86 L1500.31 1207.86 L1499.72 1207.86 L1499.14 1207.86 L1498.55 1207.86 L1497.96 1207.86 L1497.38 1207.86 L1496.79 1207.86 L1496.2 1207.86 L1495.62 1207.86 L1495.03 1207.86 L1494.45 1207.86 L1493.86 1207.86 L1493.27 1207.86 L1492.69 1207.86 L1492.1 1207.86 L1491.51 1207.86 L1490.93 1207.86 L1490.34 1207.86 L1489.75 1207.86 L1489.17 1207.86 L1488.58 1207.86 L1487.99 1207.86 L1487.41 1207.86 L1486.82 1207.86 L1486.24 1207.86 L1485.65 1207.86 L1485.06 1207.86 L1484.48 1207.86 L1483.89 1207.86 L1483.3 1207.86 L1482.72 1207.86 L1482.13 1207.86 L1481.54 1207.86 L1480.96 1207.86 L1480.37 1207.86 L1479.78 1207.86 L1479.2 1207.86 L1478.61 1207.86 L1478.03 1207.86 L1477.44 1207.86 L1476.85 1207.86 L1476.27 1207.86 L1475.68 1207.86 L1475.09 1207.86 L1474.51 1207.86 L1473.92 1207.86 L1473.33 1207.86 L1472.75 1207.86 L1472.16 1207.86 L1471.57 1207.86 L1470.99 1207.86 L1470.4 1207.86 L1469.82 1207.86 L1469.23 1207.86 L1468.64 1207.86 L1468.06 1207.86 L1467.47 1207.86 L1466.88 1207.86 L1466.3 1207.86 L1465.71 1207.86 L1465.12 1207.86 L1464.54 1207.86 L1463.95 1207.86 L1463.37 1207.86 L1462.78 1207.86 L1462.19 1207.86 L1461.61 1207.86 L1461.02 1207.86 L1460.43 1207.86 L1459.85 1207.86 L1459.26 1207.86 L1458.67 1207.86 L1458.09 1207.86 L1457.5 1207.86 L1456.91 1207.86 L1456.33 1207.86 L1455.74 1207.86 L1455.16 1207.86 L1454.57 1207.86 L1453.98 1207.86 L1453.4 1207.86 L1452.81 1207.86 L1452.22 1207.86 L1451.64 1207.86 L1451.05 1207.86 L1450.46 1207.86 L1449.88 1207.86 L1449.29 1207.86 L1448.7 1207.86 L1448.12 1207.86 L1447.53 1207.86 L1446.95 1207.86 L1446.36 1207.86 L1445.77 1207.86 L1445.19 1207.86 L1444.6 1207.86 L1444.01 1207.86 L1443.43 1207.86 L1442.84 1207.86 L1442.25 1207.86 L1441.67 1207.86 L1441.08 1207.86 L1440.5 1207.86 L1439.91 1207.86 L1439.32 1207.86 L1438.74 1207.86 L1438.15 1207.86 L1437.56 1207.86 L1436.98 1207.86 L1436.39 1207.86 L1435.8 1207.86 L1435.22 1207.86 L1434.63 1207.86 L1434.04 1207.86 L1433.46 1207.86 L1432.87 1207.86 L1432.29 1207.86 L1431.7 1207.86 L1431.11 1207.86 L1430.53 1207.86 L1429.94 1207.86 L1429.35 1207.86 L1428.77 1207.86 L1428.18 1207.86 L1427.59 1207.86 L1427.01 1207.86 L1426.42 1207.86 L1425.83 1207.86 L1425.25 1207.86 L1424.66 1207.86 L1424.08 1207.86 L1423.49 1207.86 L1422.9 1207.86 L1422.32 1207.86 L1421.73 1207.86 L1421.14 1207.86 L1420.56 1207.86 L1419.97 1207.86 L1419.38 1207.86 L1418.8 1207.86 L1418.21 1207.86 L1417.63 1207.86 L1417.04 1207.86 L1416.45 1207.86 L1415.87 1207.86 L1415.28 1207.86 L1414.69 1207.86 L1414.11 1207.86 L1413.52 1207.86 L1412.93 1207.86 L1412.35 1207.86 L1411.76 1207.86 L1411.17 1207.86 L1410.59 1207.86 L1410 1207.86 L1409.42 1207.86 L1408.83 1207.86 L1408.24 1207.86 L1407.66 1207.86 L1407.07 1207.86 L1406.48 1207.86 L1405.9 1207.86 L1405.31 1207.86 L1404.72 1207.86 L1404.14 1207.86 L1403.55 1207.86 L1402.96 1207.86 L1402.38 1207.86 L1401.79 1207.86 L1401.21 1207.86 L1400.62 1207.86 L1400.03 1207.86 L1399.45 1207.86 L1398.86 1207.86 L1398.27 1207.86 L1397.69 1207.86 L1397.1 1207.86 L1396.51 1207.86 L1395.93 1207.86 L1395.34 1207.86 L1394.75 1207.86 L1394.17 1207.86 L1393.58 1207.86 L1393 1207.86 L1392.41 1207.86 L1391.82 1207.86 L1391.24 1207.86 L1390.65 1207.86 L1390.06 1207.86 L1389.48 1207.86 L1388.89 1207.86 L1388.3 1207.86 L1387.72 1207.86 L1387.13 1207.86 L1386.55 1207.86 L1385.96 1207.86 L1385.37 1207.86 L1384.79 1207.86 L1384.2 1207.86 L1383.61 1207.86 L1383.03 1207.86 L1382.44 1207.86 L1381.85 1207.86 L1381.27 1207.86 L1380.68 1207.86 L1380.09 1207.86 L1379.51 1207.86 L1378.92 1207.86 L1378.34 1207.86 L1377.75 1207.86 L1377.16 1207.86 L1376.58 1207.86 L1375.99 1207.86 L1375.4 1207.86 L1374.82 1207.86 L1374.23 1207.86 L1373.64 1207.86 L1373.06 1207.86 L1372.47 1207.86 L1371.88 1207.86 L1371.3 1207.86 L1370.71 1207.86 L1370.13 1207.86 L1369.54 1207.86 L1368.95 1207.86 L1368.37 1207.86 L1367.78 1207.86 L1367.19 1207.86 L1366.61 1207.86 L1366.02 1207.86 L1365.43 1207.86 L1364.85 1207.86 L1364.26 1207.86 L1363.68 1207.86 L1363.09 1207.86 L1362.5 1207.86 L1361.92 1207.86 L1361.33 1207.86 L1360.74 1207.86 L1360.16 1207.86 L1359.57 1207.86 L1358.98 1207.86 L1358.4 1207.86 L1357.81 1207.86 L1357.22 1207.86 L1356.64 1207.86 L1356.05 1207.86 L1355.47 1207.86 L1354.88 1207.86 L1354.29 1207.86 L1353.71 1207.86 L1353.12 1207.86 L1352.53 1207.86 L1351.95 1207.86 L1351.36 1207.86 L1350.77 1207.86 L1350.19 1207.86 L1349.6 1207.86 L1349.01 1207.86 L1348.43 1207.86 L1347.84 1207.86 L1347.26 1207.86 L1346.67 1207.86 L1346.08 1207.86 L1345.5 1207.86 L1344.91 1207.86 L1344.32 1207.86 L1343.74 1207.86 L1343.15 1207.86 L1342.56 1207.86 L1341.98 1207.86 L1341.39 1207.86 L1340.8 1207.86 L1340.22 1207.86 L1339.63 1207.86 L1339.05 1207.86 L1338.46 1207.86 L1337.87 1207.86 L1337.29 1207.86 L1336.7 1207.86 L1336.11 1207.86 L1335.53 1207.86 L1334.94 1207.86 L1334.35 1207.86 L1333.77 1207.86 L1333.18 1207.86 L1332.6 1207.86 L1332.01 1207.86 L1331.42 1207.86 L1330.84 1207.86 L1330.25 1207.86 L1329.66 1207.86 L1329.08 1207.86 L1328.49 1207.86 L1327.9 1207.86 L1327.32 1207.86 L1326.73 1207.86 L1326.14 1207.86 L1325.56 1207.86 L1324.97 1207.86 L1324.39 1207.86 L1323.8 1207.86 L1323.21 1207.86 L1322.63 1207.86 L1322.04 1207.86 L1321.45 1207.86 L1320.87 1207.86 L1320.28 1207.86 L1319.69 1207.86 L1319.11 1207.86 L1318.52 1207.86 L1317.93 1207.86 L1317.35 1207.86 L1316.76 1207.86 L1316.18 1207.86 L1315.59 1207.86 L1315 1207.86 L1314.42 1207.86 L1313.83 1207.86 L1313.24 1207.86 L1312.66 1207.86 L1312.07 1207.86 L1311.48 1207.86 L1310.9 1207.86 L1310.31 1207.86 L1309.73 1207.86 L1309.14 1207.86 L1308.55 1207.86 L1307.97 1207.86 L1307.38 1207.86 L1306.79 1207.86 L1306.21 1207.86 L1305.62 1207.86 L1305.03 1207.86 L1304.45 1207.86 L1303.86 1207.86 L1303.27 1207.86 L1302.69 1207.86 L1302.1 1207.86 L1301.52 1207.86 L1300.93 1207.86 L1300.34 1207.86 L1299.76 1207.86 L1299.17 1207.86 L1298.58 1207.86 L1298 1207.86 L1297.41 1207.86 L1296.82 1207.86 L1296.24 1207.86 L1295.65 1207.86 L1295.06 1207.86 L1294.48 1207.86 L1293.89 1207.86 L1293.31 1207.86 L1292.72 1207.86 L1292.13 1207.86 L1291.55 1207.86 L1290.96 1207.86 L1290.37 1207.86 L1289.79 1207.86 L1289.2 1207.86 L1288.61 1207.86 L1288.03 1207.86 L1287.44 1207.86 L1286.86 1207.86 L1286.27 1207.86 L1285.68 1207.86 L1285.1 1207.86 L1284.51 1207.86 L1283.92 1207.86 L1283.34 1207.86 L1282.75 1207.86 L1282.16 1207.86 L1281.58 1207.86 L1280.99 1207.86 L1280.4 1207.86 L1279.82 1207.86 L1279.23 1207.86 L1278.65 1207.86 L1278.06 1207.86 L1277.47 1207.86 L1276.89 1207.86 L1276.3 1207.86 L1275.71 1207.86 L1275.13 1207.86 L1274.54 1207.86 L1273.95 1207.86 L1273.37 1207.86 L1272.78 1207.86 L1272.19 1207.86 L1271.61 1207.86 L1271.02 1207.86 L1270.44 1207.86 L1269.85 1207.86 L1269.26 1207.86 L1268.68 1207.86 L1268.09 1207.86 L1267.5 1207.86 L1266.92 1207.86 L1266.33 1207.86 L1265.74 1207.86 L1265.16 1207.86 L1264.57 1207.86 L1263.98 1207.86 L1263.4 1207.86 L1262.81 1207.86 L1262.23 1207.86 L1261.64 1207.86 L1261.05 1207.86 L1260.47 1207.86 L1259.88 1207.86 L1259.29 1207.86 L1258.71 1207.86 L1258.12 1207.86 L1257.53 1207.86 L1256.95 1207.86 L1256.36 1207.86 L1255.78 1207.86 L1255.19 1207.86 L1254.6 1207.86 L1254.02 1207.86 L1253.43 1207.86 L1252.84 1207.86 L1252.26 1207.86 L1251.67 1207.86 L1251.08 1207.86 L1250.5 1207.86 L1249.91 1207.86 L1249.32 1207.86 L1248.74 1207.86 L1248.15 1207.86 L1247.57 1207.86 L1246.98 1207.86 L1246.39 1207.86 L1245.81 1207.86 L1245.22 1207.86 L1244.63 1207.86 L1244.05 1207.86 L1243.46 1207.86 L1242.87 1207.86 L1242.29 1207.86 L1241.7 1207.86 L1241.11 1207.86 L1240.53 1207.86 L1239.94 1207.86 L1239.36 1207.86 L1238.77 1207.86 L1238.18 1207.86 L1237.6 1207.86 L1237.01 1207.86 L1236.42 1207.86 L1235.84 1207.86 L1235.25 1207.86 L1234.66 1207.86 L1234.08 1207.86 L1233.49 1207.86 L1232.91 1207.86 L1232.32 1207.86 L1231.73 1207.86 L1231.15 1207.86 L1230.56 1207.86 L1229.97 1207.86 L1229.39 1207.86 L1228.8 1207.86 L1228.21 1207.86 L1227.63 1207.86 L1227.04 1207.86 L1226.45 1207.86 L1225.87 1207.86 L1225.28 1207.86 L1224.7 1207.86 L1224.11 1207.86 L1223.52 1207.86 L1222.94 1207.86 L1222.35 1207.86 L1221.76 1207.86 L1221.18 1207.86 L1220.59 1207.86 L1220 1207.86 L1219.42 1207.86 L1218.83 1207.86 L1218.24 1207.86 L1217.66 1207.86 L1217.07 1207.86 L1216.49 1207.86 L1215.9 1207.86 L1215.31 1207.86 L1214.73 1207.86 L1214.14 1207.86 L1213.55 1207.86 L1212.97 1207.86 L1212.38 1207.86 L1211.79 1207.86 L1211.21 1207.86 L1210.62 1207.86 L1210.03 1207.86 L1209.45 1207.86 L1208.86 1207.86 L1208.28 1207.86 L1207.69 1207.86 L1207.1 1207.86 L1206.52 1207.86 L1205.93 1207.86 L1205.34 1207.86 L1204.76 1207.86 L1204.17 1207.86 L1203.58 1207.86 L1203 1207.86 L1202.41 1207.86 L1201.83 1207.86 L1201.24 1207.86 L1200.65 1207.86 L1200.07 1207.86 L1199.48 1207.86 L1198.89 1207.86 L1198.31 1207.86 L1197.72 1207.86 L1197.13 1207.86 L1196.55 1207.86 L1195.96 1207.86 L1195.37 1207.86 L1194.79 1207.86 L1194.2 1207.86 L1193.62 1207.86 L1193.03 1207.86 L1192.44 1207.86 L1191.86 1207.86 L1191.27 1207.86 L1190.68 1207.86 L1190.1 1207.86 L1189.51 1207.86 L1188.92 1207.86 L1188.34 1207.86 L1187.75 1207.86 L1187.16 1207.86 L1186.58 1207.86 L1185.99 1207.86 L1185.41 1207.86 L1184.82 1207.86 L1184.23 1207.86 L1183.65 1207.86 L1183.06 1207.86 L1182.47 1207.86 L1181.89 1207.86 L1181.3 1207.86 L1180.71 1207.86 L1180.13 1207.86 L1179.54 1207.86 L1178.96 1207.86 L1178.37 1207.86 L1177.78 1207.86 L1177.2 1207.86 L1176.61 1207.86 L1176.02 1207.86 L1175.44 1207.86 L1174.85 1207.86 L1174.26 1207.86 L1173.68 1207.86 L1173.09 1207.86 L1172.5 1207.86 L1171.92 1207.86 L1171.33 1207.86 L1170.75 1207.86 L1170.16 1207.86 L1169.57 1207.86 L1168.99 1207.86 L1168.4 1207.86 L1167.81 1207.86 L1167.23 1207.86 L1166.64 1207.86 L1166.05 1207.86 L1165.47 1207.86 L1164.88 1207.86 L1164.29 1207.86 L1163.71 1207.86 L1163.12 1207.86 L1162.54 1207.86 L1161.95 1207.86 L1161.36 1207.86 L1160.78 1207.86 L1160.19 1207.86 L1159.6 1207.86 L1159.02 1207.86 L1158.43 1207.86 L1157.84 1207.86 L1157.26 1207.86 L1156.67 1207.86 L1156.09 1207.86 L1155.5 1207.86 L1154.91 1207.86 L1154.33 1207.86 L1153.74 1207.86 L1153.15 1207.86 L1152.57 1207.86 L1151.98 1207.86 L1151.39 1207.86 L1150.81 1207.86 L1150.22 1207.86 L1149.63 1207.86 L1149.05 1207.86 L1148.46 1207.86 L1147.88 1207.86 L1147.29 1207.86 L1146.7 1207.86 L1146.12 1207.86 L1145.53 1207.86 L1144.94 1207.86 L1144.36 1207.86 L1143.77 1207.86 L1143.18 1207.86 L1142.6 1207.86 L1142.01 1207.86 L1141.42 1207.86 L1140.84 1207.86 L1140.25 1207.86 L1139.67 1207.86 L1139.08 1207.86 L1138.49 1207.86 L1137.91 1207.86 L1137.32 1207.86 L1136.73 1207.86 L1136.15 1207.86 L1135.56 1207.86 L1134.97 1207.86 L1134.39 1207.86 L1133.8 1207.86 L1133.21 1207.86 L1132.63 1207.86 L1132.04 1207.86 L1131.46 1207.86 L1130.87 1207.86 L1130.28 1207.86 L1129.7 1207.86 L1129.11 1207.86 L1128.52 1207.86 L1127.94 1207.86 L1127.35 1207.86 L1126.76 1207.86 L1126.18 1207.86 L1125.59 1207.86 L1125.01 1207.86 L1124.42 1207.86 L1123.83 1207.86 L1123.25 1207.86 L1122.66 1207.86 L1122.07 1207.86 L1121.49 1207.86 L1120.9 1207.86 L1120.31 1207.86 L1119.73 1207.86 L1119.14 1207.86 L1118.55 1207.86 L1117.97 1207.86 L1117.38 1207.86 L1116.8 1207.86 L1116.21 1207.86 L1115.62 1207.86 L1115.04 1207.86 L1114.45 1207.86 L1113.86 1207.86 L1113.28 1207.86 L1112.69 1207.86 L1112.1 1207.86 L1111.52 1207.86 L1110.93 1207.86 L1110.34 1207.86 L1109.76 1207.86 L1109.17 1207.86 L1108.59 1207.86 L1108 1207.86 L1107.41 1207.86 L1106.83 1207.86 L1106.24 1207.86 L1105.65 1207.86 L1105.07 1207.86 L1104.48 1207.86 L1103.89 1207.86 L1103.31 1207.86 L1102.72 1207.86 L1102.14 1207.86 L1101.55 1207.86 L1100.96 1207.86 L1100.38 1207.86 L1099.79 1207.86 L1099.2 1207.86 L1098.62 1207.86 L1098.03 1207.86 L1097.44 1207.86 L1096.86 1207.86 L1096.27 1207.86 L1095.68 1207.86 L1095.1 1207.86 L1094.51 1207.86 L1093.93 1207.86 L1093.34 1207.86 L1092.75 1207.86 L1092.17 1207.86 L1091.58 1207.86 L1090.99 1207.86 L1090.41 1207.86 L1089.82 1207.86 L1089.23 1207.86 L1088.65 1207.86 L1088.06 1207.86 L1087.47 1207.86 L1086.89 1207.86 L1086.3 1207.86 L1085.72 1207.86 L1085.13 1207.86 L1084.54 1207.86 L1083.96 1207.86 L1083.37 1207.86 L1082.78 1207.86 L1082.2 1207.86 L1081.61 1207.86 L1081.02 1207.86 L1080.44 1207.86 L1079.85 1207.86 L1079.26 1207.86 L1078.68 1207.86 L1078.09 1207.86 L1077.51 1207.86 L1076.92 1207.86 L1076.33 1207.86 L1075.75 1207.86 L1075.16 1207.86 L1074.57 1207.86 L1073.99 1207.86 L1073.4 1207.86 L1072.81 1207.86 L1072.23 1207.86 L1071.64 1207.86 L1071.06 1207.86 L1070.47 1207.86 L1069.88 1207.86 L1069.3 1207.86 L1068.71 1207.86 L1068.12 1207.86 L1067.54 1207.86 L1066.95 1207.86 L1066.36 1207.86 L1065.78 1207.86 L1065.19 1207.86 L1064.6 1207.86 L1064.02 1207.86 L1063.43 1207.86 L1062.85 1207.86 L1062.26 1207.86 L1061.67 1207.86 L1061.09 1207.86 L1060.5 1207.86 L1059.91 1207.86 L1059.33 1207.86 L1058.74 1207.86 L1058.15 1207.86 L1057.57 1207.86 L1056.98 1207.86 L1056.39 1207.86 L1055.81 1207.86 L1055.22 1207.86 L1054.64 1207.86 L1054.05 1207.86 L1053.46 1207.86 L1052.88 1207.86 L1052.29 1207.86 L1051.7 1207.86 L1051.12 1207.86 L1050.53 1207.86 L1049.94 1207.86 L1049.36 1207.86 L1048.77 1207.86 L1048.19 1207.86 L1047.6 1207.86 L1047.01 1207.86 L1046.43 1207.86 L1045.84 1207.86 L1045.25 1207.86 L1044.67 1207.86 L1044.08 1207.86 L1043.49 1207.86 L1042.91 1207.86 L1042.32 1207.86 L1041.73 1207.86 L1041.15 1207.86 L1040.56 1207.86 L1039.98 1207.86 L1039.39 1207.86 L1038.8 1207.86 L1038.22 1207.86 L1037.63 1207.86 L1037.04 1207.86 L1036.46 1207.86 L1035.87 1207.86 L1035.28 1207.86 L1034.7 1207.86 L1034.11 1207.86 L1033.52 1207.86 L1032.94 1207.86 L1032.35 1207.86 L1031.77 1207.86 L1031.18 1207.86 L1030.59 1207.86 L1030.01 1207.86 L1029.42 1207.86 L1028.83 1207.86 L1028.25 1207.86 L1027.66 1207.86 L1027.07 1207.86 L1026.49 1207.86 L1025.9 1207.86 L1025.32 1207.86 L1024.73 1207.86 L1024.14 1207.86 L1023.56 1207.86 L1022.97 1207.86 L1022.38 1207.86 L1021.8 1207.86 L1021.21 1207.86 L1020.62 1207.86 L1020.04 1207.86 L1019.45 1207.86 L1018.86 1207.86 L1018.28 1207.86 L1017.69 1207.86 L1017.11 1207.86 L1016.52 1207.86 L1015.93 1207.86 L1015.35 1207.86 L1014.76 1207.86 L1014.17 1207.86 L1013.59 1207.86 L1013 1207.86 L1012.41 1207.86 L1011.83 1207.86 L1011.24 1207.86 L1010.65 1207.86 L1010.07 1207.86 L1009.48 1207.86 L1008.9 1207.86 L1008.31 1207.86 L1007.72 1207.86 L1007.14 1207.86 L1006.55 1207.86 L1005.96 1207.86 L1005.38 1207.86 L1004.79 1207.86 L1004.2 1207.86 L1003.62 1207.86 L1003.03 1207.86 L1002.44 1207.86 L1001.86 1207.86 L1001.27 1207.86 L1000.69 1207.86 L1000.1 1207.86 L999.513 1207.86 L998.926 1207.86 L998.34 1207.86 L997.754 1207.86 L997.167 1207.86 L996.581 1207.86 L995.994 1207.86 L995.408 1207.86 L994.822 1207.86 L994.235 1207.86 L993.649 1207.86 L993.062 1207.86 L992.476 1207.86 L991.889 1207.86 L991.303 1207.86 L990.717 1207.86 L990.13 1207.86 L989.544 1207.86 L988.957 1207.86 L988.371 1207.86 L987.785 1207.86 L987.198 1207.86 L986.612 1207.86 L986.025 1207.86  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.92 986.612,1207.92 987.198,1207.92 987.785,1207.92 988.371,1207.92 988.957,1207.92 989.544,1207.92 990.13,1207.92 990.717,1207.92 991.303,1207.92 991.889,1207.92 992.476,1207.92 993.062,1207.92 993.649,1207.92 994.235,1207.92 994.822,1207.92 995.408,1207.92 995.994,1207.92 996.581,1207.92 997.167,1207.92 997.754,1207.92 998.34,1207.92 998.926,1207.92 999.513,1207.92 1000.1,1207.92 1000.69,1207.92 1001.27,1207.92 1001.86,1207.92 1002.44,1207.92 1003.03,1207.92 1003.62,1207.92 1004.2,1207.92 1004.79,1207.92 1005.38,1207.92 1005.96,1207.92 1006.55,1207.92 1007.14,1207.92 1007.72,1207.92 1008.31,1207.92 1008.9,1207.92 1009.48,1207.92 1010.07,1207.92 1010.65,1207.92 1011.24,1207.92 1011.83,1207.92 1012.41,1207.92 1013,1207.92 1013.59,1207.92 1014.17,1207.92 1014.76,1207.92 1015.35,1207.92 1015.93,1207.92 1016.52,1207.92 1017.11,1207.92 1017.69,1207.92 1018.28,1207.92 1018.86,1207.92 1019.45,1207.92 1020.04,1207.92 1020.62,1207.92 1021.21,1207.92 1021.8,1207.92 1022.38,1207.92 1022.97,1207.92 1023.56,1207.92 1024.14,1207.92 1024.73,1207.92 1025.32,1207.92 1025.9,1207.92 1026.49,1207.92 1027.07,1207.92 1027.66,1207.92 1028.25,1207.92 1028.83,1207.92 1029.42,1207.92 1030.01,1207.92 1030.59,1207.92 1031.18,1207.92 1031.77,1207.92 1032.35,1207.92 1032.94,1207.92 1033.52,1207.92 1034.11,1207.92 1034.7,1207.92 1035.28,1207.92 1035.87,1207.92 1036.46,1207.92 1037.04,1207.92 1037.63,1207.92 1038.22,1207.92 1038.8,1207.92 1039.39,1207.92 1039.98,1207.92 1040.56,1207.92 1041.15,1207.92 1041.73,1207.92 1042.32,1207.92 1042.91,1207.92 1043.49,1207.92 1044.08,1207.92 1044.67,1207.92 1045.25,1207.92 1045.84,1207.92 1046.43,1207.92 1047.01,1207.92 1047.6,1207.92 1048.19,1207.92 1048.77,1207.92 1049.36,1207.92 1049.94,1207.92 1050.53,1207.92 1051.12,1207.92 1051.7,1207.92 1052.29,1207.92 1052.88,1207.92 1053.46,1207.92 1054.05,1207.92 1054.64,1207.92 1055.22,1207.92 1055.81,1207.92 1056.39,1207.92 1056.98,1207.92 1057.57,1207.92 1058.15,1207.92 1058.74,1207.92 1059.33,1207.92 1059.91,1207.92 1060.5,1207.92 1061.09,1207.92 1061.67,1207.92 1062.26,1207.92 1062.85,1207.92 1063.43,1207.92 1064.02,1207.92 1064.6,1207.92 1065.19,1207.92 1065.78,1207.92 1066.36,1207.92 1066.95,1207.92 1067.54,1207.92 1068.12,1207.92 1068.71,1207.92 1069.3,1207.92 1069.88,1207.92 1070.47,1207.92 1071.06,1207.92 1071.64,1207.92 1072.23,1207.92 1072.81,1207.92 1073.4,1207.92 1073.99,1207.92 1074.57,1207.92 1075.16,1207.92 1075.75,1207.92 1076.33,1207.92 1076.92,1207.92 1077.51,1207.92 1078.09,1207.92 1078.68,1207.92 1079.26,1207.92 1079.85,1207.92 1080.44,1207.92 1081.02,1207.92 1081.61,1207.92 1082.2,1207.92 1082.78,1207.92 1083.37,1207.92 1083.96,1207.92 1084.54,1207.92 1085.13,1207.92 1085.72,1207.92 1086.3,1207.92 1086.89,1207.92 1087.47,1207.92 1088.06,1207.92 1088.65,1207.92 1089.23,1207.92 1089.82,1207.92 1090.41,1207.92 1090.99,1207.92 1091.58,1207.92 1092.17,1207.92 1092.75,1207.92 1093.34,1207.92 1093.93,1207.92 1094.51,1207.92 1095.1,1207.92 1095.68,1207.92 1096.27,1207.92 1096.86,1207.92 1097.44,1207.92 1098.03,1207.92 1098.62,1207.92 1099.2,1207.92 1099.79,1207.92 1100.38,1207.92 1100.96,1207.92 1101.55,1207.92 1102.14,1207.92 1102.72,1207.92 1103.31,1207.92 1103.89,1207.92 1104.48,1207.92 1105.07,1207.92 1105.65,1207.92 1106.24,1207.92 1106.83,1207.92 1107.41,1207.92 1108,1207.92 1108.59,1207.92 1109.17,1207.92 1109.76,1207.92 1110.34,1207.92 1110.93,1207.92 1111.52,1207.92 1112.1,1207.92 1112.69,1207.92 1113.28,1207.92 1113.86,1207.92 1114.45,1207.92 1115.04,1207.92 1115.62,1207.92 1116.21,1207.92 1116.8,1207.92 1117.38,1207.92 1117.97,1207.92 1118.55,1207.92 1119.14,1207.92 1119.73,1207.92 1120.31,1207.92 1120.9,1207.92 1121.49,1207.92 1122.07,1207.92 1122.66,1207.92 1123.25,1207.92 1123.83,1207.92 1124.42,1207.92 1125.01,1207.92 1125.59,1207.92 1126.18,1207.92 1126.76,1207.92 1127.35,1207.92 1127.94,1207.92 1128.52,1207.92 1129.11,1207.92 1129.7,1207.92 1130.28,1207.92 1130.87,1207.92 1131.46,1207.92 1132.04,1207.92 1132.63,1207.92 1133.21,1207.92 1133.8,1207.92 1134.39,1207.92 1134.97,1207.92 1135.56,1207.92 1136.15,1207.92 1136.73,1207.92 1137.32,1207.92 1137.91,1207.92 1138.49,1207.92 1139.08,1207.92 1139.67,1207.92 1140.25,1207.92 1140.84,1207.92 1141.42,1207.92 1142.01,1207.92 1142.6,1207.92 1143.18,1207.92 1143.77,1207.92 1144.36,1207.92 1144.94,1207.92 1145.53,1207.92 1146.12,1207.92 1146.7,1207.92 1147.29,1207.92 1147.88,1207.92 1148.46,1207.92 1149.05,1207.92 1149.63,1207.92 1150.22,1207.92 1150.81,1207.92 1151.39,1207.92 1151.98,1207.92 1152.57,1207.92 1153.15,1207.92 1153.74,1207.92 1154.33,1207.92 1154.91,1207.92 1155.5,1207.92 1156.09,1207.92 1156.67,1207.92 1157.26,1207.92 1157.84,1207.92 1158.43,1207.92 1159.02,1207.92 1159.6,1207.92 1160.19,1207.92 1160.78,1207.92 1161.36,1207.92 1161.95,1207.92 1162.54,1207.92 1163.12,1207.92 1163.71,1207.92 1164.29,1207.92 1164.88,1207.92 1165.47,1207.92 1166.05,1207.92 1166.64,1207.92 1167.23,1207.92 1167.81,1207.92 1168.4,1207.92 1168.99,1207.92 1169.57,1207.92 1170.16,1207.92 1170.75,1207.92 1171.33,1207.92 1171.92,1207.92 1172.5,1207.92 1173.09,1207.92 1173.68,1207.92 1174.26,1207.92 1174.85,1207.92 1175.44,1207.92 1176.02,1207.92 1176.61,1207.92 1177.2,1207.92 1177.78,1207.92 1178.37,1207.92 1178.96,1207.92 1179.54,1207.92 1180.13,1207.92 1180.71,1207.92 1181.3,1207.92 1181.89,1207.92 1182.47,1207.92 1183.06,1207.92 1183.65,1207.92 1184.23,1207.92 1184.82,1207.92 1185.41,1207.92 1185.99,1207.92 1186.58,1207.92 1187.16,1207.92 1187.75,1207.92 1188.34,1207.92 1188.92,1207.92 1189.51,1207.92 1190.1,1207.92 1190.68,1207.92 1191.27,1207.92 1191.86,1207.92 1192.44,1207.92 1193.03,1207.92 1193.62,1207.92 1194.2,1207.92 1194.79,1207.92 1195.37,1207.92 1195.96,1207.92 1196.55,1207.92 1197.13,1207.92 1197.72,1207.92 1198.31,1207.92 1198.89,1207.92 1199.48,1207.92 1200.07,1207.92 1200.65,1207.92 1201.24,1207.92 1201.83,1207.92 1202.41,1207.92 1203,1207.92 1203.58,1207.92 1204.17,1207.92 1204.76,1207.92 1205.34,1207.92 1205.93,1207.92 1206.52,1207.92 1207.1,1207.92 1207.69,1207.92 1208.28,1207.92 1208.86,1207.92 1209.45,1207.92 1210.03,1207.92 1210.62,1207.92 1211.21,1207.92 1211.79,1207.92 1212.38,1207.92 1212.97,1207.92 1213.55,1207.92 1214.14,1207.92 1214.73,1207.92 1215.31,1207.92 1215.9,1207.92 1216.49,1207.92 1217.07,1207.92 1217.66,1207.92 1218.24,1207.92 1218.83,1207.92 1219.42,1207.92 1220,1207.92 1220.59,1207.92 1221.18,1207.92 1221.76,1207.92 1222.35,1207.92 1222.94,1207.92 1223.52,1207.92 1224.11,1207.92 1224.7,1207.92 1225.28,1207.92 1225.87,1207.92 1226.45,1207.92 1227.04,1207.92 1227.63,1207.92 1228.21,1207.92 1228.8,1207.92 1229.39,1207.92 1229.97,1207.92 1230.56,1207.92 1231.15,1207.92 1231.73,1207.92 1232.32,1207.92 1232.91,1207.92 1233.49,1207.92 1234.08,1207.92 1234.66,1207.92 1235.25,1207.92 1235.84,1207.92 1236.42,1207.92 1237.01,1207.92 1237.6,1207.92 1238.18,1207.92 1238.77,1207.92 1239.36,1207.92 1239.94,1207.92 1240.53,1207.92 1241.11,1207.92 1241.7,1207.92 1242.29,1207.92 1242.87,1207.92 1243.46,1207.92 1244.05,1207.92 1244.63,1207.92 1245.22,1207.92 1245.81,1207.92 1246.39,1207.92 1246.98,1207.92 1247.57,1207.92 1248.15,1207.92 1248.74,1207.92 1249.32,1207.92 1249.91,1207.92 1250.5,1207.92 1251.08,1207.92 1251.67,1207.92 1252.26,1207.92 1252.84,1207.92 1253.43,1207.92 1254.02,1207.92 1254.6,1207.92 1255.19,1207.92 1255.78,1207.92 1256.36,1207.92 1256.95,1207.92 1257.53,1207.92 1258.12,1207.92 1258.71,1207.92 1259.29,1207.92 1259.88,1207.92 1260.47,1207.92 1261.05,1207.92 1261.64,1207.92 1262.23,1207.92 1262.81,1207.92 1263.4,1207.92 1263.98,1207.92 1264.57,1207.92 1265.16,1207.92 1265.74,1207.92 1266.33,1207.92 1266.92,1207.92 1267.5,1207.92 1268.09,1207.92 1268.68,1207.92 1269.26,1207.92 1269.85,1207.92 1270.44,1207.92 1271.02,1207.92 1271.61,1207.92 1272.19,1207.92 1272.78,1207.92 1273.37,1207.92 1273.95,1207.92 1274.54,1207.92 1275.13,1207.92 1275.71,1207.92 1276.3,1207.92 1276.89,1207.92 1277.47,1207.92 1278.06,1207.92 1278.65,1207.92 1279.23,1207.92 1279.82,1207.92 1280.4,1207.92 1280.99,1207.92 1281.58,1207.92 1282.16,1207.92 1282.75,1207.92 1283.34,1207.92 1283.92,1207.92 1284.51,1207.92 1285.1,1207.92 1285.68,1207.92 1286.27,1207.92 1286.86,1207.92 1287.44,1207.92 1288.03,1207.92 1288.61,1207.92 1289.2,1207.92 1289.79,1207.92 1290.37,1207.92 1290.96,1207.92 1291.55,1207.92 1292.13,1207.92 1292.72,1207.92 1293.31,1207.92 1293.89,1207.92 1294.48,1207.92 1295.06,1207.92 1295.65,1207.92 1296.24,1207.92 1296.82,1207.92 1297.41,1207.92 1298,1207.92 1298.58,1207.92 1299.17,1207.92 1299.76,1207.92 1300.34,1207.92 1300.93,1207.92 1301.52,1207.92 1302.1,1207.92 1302.69,1207.92 1303.27,1207.92 1303.86,1207.92 1304.45,1207.92 1305.03,1207.92 1305.62,1207.92 1306.21,1207.92 1306.79,1207.92 1307.38,1207.92 1307.97,1207.92 1308.55,1207.92 1309.14,1207.92 1309.73,1207.92 1310.31,1207.92 1310.9,1207.92 1311.48,1207.92 1312.07,1207.92 1312.66,1207.92 1313.24,1207.92 1313.83,1207.92 1314.42,1207.92 1315,1207.92 1315.59,1207.92 1316.18,1207.92 1316.76,1207.92 1317.35,1207.92 1317.93,1207.92 1318.52,1207.92 1319.11,1207.92 1319.69,1207.92 1320.28,1207.92 1320.87,1207.92 1321.45,1207.92 1322.04,1207.92 1322.63,1207.92 1323.21,1207.92 1323.8,1207.92 1324.39,1207.92 1324.97,1207.92 1325.56,1207.92 1326.14,1207.92 1326.73,1207.92 1327.32,1207.92 1327.9,1207.92 1328.49,1207.92 1329.08,1207.92 1329.66,1207.92 1330.25,1207.92 1330.84,1207.92 1331.42,1207.92 1332.01,1207.92 1332.6,1207.92 1333.18,1207.92 1333.77,1207.92 1334.35,1207.92 1334.94,1207.92 1335.53,1207.92 1336.11,1207.92 1336.7,1207.92 1337.29,1207.92 1337.87,1207.92 1338.46,1207.92 1339.05,1207.92 1339.63,1207.92 1340.22,1207.92 1340.8,1207.92 1341.39,1207.92 1341.98,1207.92 1342.56,1207.92 1343.15,1207.92 1343.74,1207.92 1344.32,1207.92 1344.91,1207.92 1345.5,1207.92 1346.08,1207.92 1346.67,1207.92 1347.26,1207.92 1347.84,1207.92 1348.43,1207.92 1349.01,1207.92 1349.6,1207.92 1350.19,1207.92 1350.77,1207.92 1351.36,1207.92 1351.95,1207.92 1352.53,1207.92 1353.12,1207.92 1353.71,1207.92 1354.29,1207.92 1354.88,1207.92 1355.47,1207.92 1356.05,1207.92 1356.64,1207.92 1357.22,1207.92 1357.81,1207.92 1358.4,1207.92 1358.98,1207.92 1359.57,1207.92 1360.16,1207.92 1360.74,1207.92 1361.33,1207.92 1361.92,1207.92 1362.5,1207.92 1363.09,1207.92 1363.68,1207.92 1364.26,1207.92 1364.85,1207.92 1365.43,1207.92 1366.02,1207.92 1366.61,1207.92 1367.19,1207.92 1367.78,1207.92 1368.37,1207.92 1368.95,1207.92 1369.54,1207.92 1370.13,1207.92 1370.71,1207.92 1371.3,1207.92 1371.88,1207.92 1372.47,1207.92 1373.06,1207.92 1373.64,1207.92 1374.23,1207.92 1374.82,1207.92 1375.4,1207.92 1375.99,1207.92 1376.58,1207.92 1377.16,1207.92 1377.75,1207.92 1378.34,1207.92 1378.92,1207.92 1379.51,1207.92 1380.09,1207.92 1380.68,1207.92 1381.27,1207.92 1381.85,1207.92 1382.44,1207.92 1383.03,1207.92 1383.61,1207.92 1384.2,1207.92 1384.79,1207.92 1385.37,1207.92 1385.96,1207.92 1386.55,1207.92 1387.13,1207.92 1387.72,1207.92 1388.3,1207.92 1388.89,1207.92 1389.48,1207.92 1390.06,1207.92 1390.65,1207.92 1391.24,1207.92 1391.82,1207.92 1392.41,1207.92 1393,1207.92 1393.58,1207.92 1394.17,1207.92 1394.75,1207.92 1395.34,1207.92 1395.93,1207.92 1396.51,1207.92 1397.1,1207.92 1397.69,1207.92 1398.27,1207.92 1398.86,1207.92 1399.45,1207.92 1400.03,1207.92 1400.62,1207.92 1401.21,1207.92 1401.79,1207.92 1402.38,1207.92 1402.96,1207.92 1403.55,1207.92 1404.14,1207.92 1404.72,1207.92 1405.31,1207.92 1405.9,1207.92 1406.48,1207.92 1407.07,1207.92 1407.66,1207.92 1408.24,1207.92 1408.83,1207.92 1409.42,1207.92 1410,1207.92 1410.59,1207.92 1411.17,1207.92 1411.76,1207.92 1412.35,1207.92 1412.93,1207.92 1413.52,1207.92 1414.11,1207.92 1414.69,1207.92 1415.28,1207.92 1415.87,1207.92 1416.45,1207.92 1417.04,1207.92 1417.63,1207.92 1418.21,1207.92 1418.8,1207.92 1419.38,1207.92 1419.97,1207.92 1420.56,1207.92 1421.14,1207.92 1421.73,1207.92 1422.32,1207.92 1422.9,1207.92 1423.49,1207.92 1424.08,1207.92 1424.66,1207.92 1425.25,1207.92 1425.83,1207.92 1426.42,1207.92 1427.01,1207.92 1427.59,1207.92 1428.18,1207.92 1428.77,1207.92 1429.35,1207.92 1429.94,1207.92 1430.53,1207.92 1431.11,1207.92 1431.7,1207.92 1432.29,1207.92 1432.87,1207.92 1433.46,1207.92 1434.04,1207.92 1434.63,1207.92 1435.22,1207.92 1435.8,1207.92 1436.39,1207.92 1436.98,1207.92 1437.56,1207.92 1438.15,1207.92 1438.74,1207.92 1439.32,1207.92 1439.91,1207.92 1440.5,1207.92 1441.08,1207.92 1441.67,1207.92 1442.25,1207.92 1442.84,1207.92 1443.43,1207.92 1444.01,1207.92 1444.6,1207.92 1445.19,1207.92 1445.77,1207.92 1446.36,1207.92 1446.95,1207.92 1447.53,1207.92 1448.12,1207.92 1448.7,1207.92 1449.29,1207.92 1449.88,1207.92 1450.46,1207.92 1451.05,1207.92 1451.64,1207.92 1452.22,1207.92 1452.81,1207.92 1453.4,1207.92 1453.98,1207.92 1454.57,1207.92 1455.16,1207.92 1455.74,1207.92 1456.33,1207.92 1456.91,1207.92 1457.5,1207.92 1458.09,1207.92 1458.67,1207.92 1459.26,1207.92 1459.85,1207.92 1460.43,1207.92 1461.02,1207.92 1461.61,1207.92 1462.19,1207.92 1462.78,1207.92 1463.37,1207.92 1463.95,1207.92 1464.54,1207.92 1465.12,1207.92 1465.71,1207.92 1466.3,1207.92 1466.88,1207.92 1467.47,1207.92 1468.06,1207.92 1468.64,1207.92 1469.23,1207.92 1469.82,1207.92 1470.4,1207.92 1470.99,1207.92 1471.57,1207.92 1472.16,1207.92 1472.75,1207.92 1473.33,1207.92 1473.92,1207.92 1474.51,1207.92 1475.09,1207.92 1475.68,1207.92 1476.27,1207.92 1476.85,1207.92 1477.44,1207.92 1478.03,1207.92 1478.61,1207.92 1479.2,1207.92 1479.78,1207.92 1480.37,1207.92 1480.96,1207.92 1481.54,1207.92 1482.13,1207.92 1482.72,1207.92 1483.3,1207.92 1483.89,1207.92 1484.48,1207.92 1485.06,1207.92 1485.65,1207.92 1486.24,1207.92 1486.82,1207.92 1487.41,1207.92 1487.99,1207.92 1488.58,1207.92 1489.17,1207.92 1489.75,1207.92 1490.34,1207.92 1490.93,1207.92 1491.51,1207.92 1492.1,1207.92 1492.69,1207.92 1493.27,1207.92 1493.86,1207.92 1494.45,1207.92 1495.03,1207.92 1495.62,1207.92 1496.2,1207.92 1496.79,1207.92 1497.38,1207.92 1497.96,1207.92 1498.55,1207.92 1499.14,1207.92 1499.72,1207.92 1500.31,1207.92 1500.9,1207.92 1501.48,1207.92 1502.07,1207.92 1502.65,1207.92 1503.24,1207.92 1503.83,1207.92 1504.41,1207.92 1505,1207.92 1505.59,1207.92 1506.17,1207.92 1506.76,1207.92 1507.35,1207.92 1507.93,1207.92 1508.52,1207.92 1509.11,1207.92 1509.69,1207.92 1510.28,1207.92 1510.86,1207.92 1511.45,1207.92 1512.04,1207.92 1512.62,1207.92 1513.21,1207.92 1513.8,1207.92 1514.38,1207.92 1514.97,1207.92 1515.56,1207.92 1516.14,1207.92 1516.73,1207.92 1517.32,1207.92 1517.9,1207.92 1518.49,1207.92 1519.07,1207.92 1519.66,1207.92 1520.25,1207.92 1520.83,1207.92 1521.42,1207.92 1522.01,1207.92 1522.59,1207.92 1523.18,1207.92 1523.77,1207.92 1524.35,1207.92 1524.94,1207.92 1525.52,1207.92 1526.11,1207.92 1526.7,1207.92 1527.28,1207.92 1527.87,1207.92 1528.46,1207.92 1529.04,1207.92 1529.63,1207.92 1530.22,1207.92 1530.8,1207.92 1531.39,1207.92 1531.98,1207.92 1532.56,1207.92 1533.15,1207.92 1533.73,1207.92 1534.32,1207.92 1534.91,1207.92 1535.49,1207.92 1536.08,1207.92 1536.67,1207.92 1537.25,1207.92 1537.84,1207.92 1538.43,1207.92 1539.01,1207.92 1539.6,1207.92 1540.19,1207.92 1540.77,1207.92 1541.36,1207.92 1541.94,1207.92 1542.53,1207.92 1543.12,1207.92 1543.7,1207.92 1544.29,1207.92 1544.88,1207.92 1545.46,1207.92 1546.05,1207.92 1546.64,1207.92 1547.22,1207.92 1547.81,1207.92 1548.4,1207.92 1548.98,1207.92 1549.57,1207.92 1550.15,1207.92 1550.74,1207.92 1551.33,1207.92 1551.91,1207.92 1552.5,1207.92 1553.09,1207.92 1553.67,1207.92 1554.26,1207.92 1554.85,1207.92 1555.43,1207.92 1556.02,1207.92 1556.6,1207.92 1557.19,1207.92 1557.78,1207.92 1558.36,1207.92 1558.95,1207.92 1559.54,1207.92 1560.12,1207.92 1560.71,1207.92 1561.3,1207.92 1561.88,1207.92 1562.47,1207.92 1563.06,1207.92 1563.64,1207.92 1564.23,1207.92 1564.81,1207.92 1565.4,1207.92 1565.99,1207.92 1566.57,1207.92 1567.16,1207.92 1567.75,1207.92 1568.33,1207.92 1568.92,1207.92 1569.51,1207.92 1570.09,1207.92 1570.68,1207.92 1571.27,1207.92 1571.85,1207.92 1572.44,1207.92 1573.02,1207.92 1573.61,1207.92 1574.2,1207.92 1574.78,1207.92 1575.37,1207.92 1575.96,1207.92 1576.54,1207.92 1577.13,1207.92 1577.72,1207.92 1578.3,1207.92 1578.89,1207.92 1579.47,1207.92 1580.06,1207.92 1580.65,1207.92 1581.23,1207.92 1581.82,1207.92 1582.41,1207.92 1582.99,1207.92 1583.58,1207.92 1584.17,1207.92 1584.75,1207.92 1585.34,1207.92 1585.93,1207.92 1586.51,1207.92 1587.1,1207.92 1587.68,1207.92 1588.27,1207.92 1588.86,1207.92 1589.44,1207.92 1590.03,1207.92 1590.62,1207.92 1591.2,1207.92 1591.79,1207.92 1592.38,1207.92 1592.96,1207.92 1593.55,1207.92 1594.14,1207.92 1594.72,1207.92 1595.31,1207.92 1595.89,1207.92 1596.48,1207.92 1597.07,1207.92 1597.65,1207.92 1598.24,1207.92 1598.83,1207.92 1599.41,1207.92 1600,1207.92 1600.59,1207.92 1601.17,1207.92 1601.76,1207.92 1602.34,1207.92 1602.93,1207.92 1603.52,1207.92 1604.1,1207.92 1604.69,1207.92 1605.28,1207.92 1605.86,1207.92 1606.45,1207.92 1607.04,1207.92 1607.62,1207.92 1608.21,1207.92 1608.8,1207.92 1609.38,1207.92 1609.97,1207.92 1610.55,1207.92 1611.14,1207.92 1611.73,1207.92 1612.31,1207.92 1612.9,1207.92 1613.49,1207.92 1614.07,1207.92 1614.66,1207.92 1615.25,1207.92 1615.83,1207.92 1616.42,1207.92 1617.01,1207.92 1617.59,1207.92 1618.18,1207.92 1618.76,1207.92 1619.35,1207.92 1619.94,1207.92 1620.52,1207.92 1621.11,1207.92 1621.7,1207.92 1622.28,1207.92 1622.87,1207.92 1623.46,1207.92 1624.04,1207.92 1624.63,1207.92 1625.22,1207.92 1625.8,1207.92 1626.39,1207.92 1626.97,1207.92 1627.56,1207.92 1628.15,1207.92 1628.73,1207.92 1629.32,1207.92 1629.91,1207.92 1630.49,1207.92 1631.08,1207.92 1631.67,1207.92 1632.25,1207.92 1632.84,1207.92 1633.42,1207.92 1634.01,1207.92 1634.6,1207.92 1635.18,1207.92 1635.77,1207.92 1636.36,1207.92 1636.94,1207.92 1637.53,1207.92 1638.12,1207.92 1638.7,1207.92 1639.29,1207.92 1639.88,1207.92 1640.46,1207.92 1641.05,1207.92 1641.63,1207.92 1642.22,1207.92 1642.81,1207.92 1643.39,1207.92 1643.98,1207.92 1644.57,1207.92 1645.15,1207.92 1645.74,1207.92 1646.33,1207.92 1646.91,1207.92 1647.5,1207.92 1648.09,1207.92 1648.67,1207.92 1649.26,1207.92 1649.84,1207.92 1650.43,1207.92 1651.02,1207.92 1651.6,1207.92 1652.19,1207.92 1652.78,1207.92 1653.36,1207.92 1653.95,1207.92 1654.54,1207.92 1655.12,1207.92 1655.71,1207.92 1656.29,1207.92 1656.88,1207.92 1657.47,1207.92 1658.05,1207.92 1658.64,1207.92 1659.23,1207.92 1659.81,1207.92 1660.4,1207.92 1660.99,1207.92 1661.57,1207.92 1662.16,1207.92 1662.75,1207.92 1663.33,1207.92 1663.92,1207.92 1664.5,1207.92 1665.09,1207.92 1665.68,1207.92 1666.26,1207.92 1666.85,1207.92 1667.44,1207.92 1668.02,1207.92 1668.61,1207.92 1669.2,1207.92 1669.78,1207.92 1670.37,1207.92 1670.96,1207.92 1671.54,1207.92 1672.13,1207.92 1672.71,1207.92 1673.3,1207.92 1673.89,1207.92 1674.47,1207.92 1675.06,1207.92 1675.65,1207.92 1676.23,1207.92 1676.82,1207.92 1677.41,1207.92 1677.99,1207.92 1678.58,1207.92 1679.17,1207.92 1679.75,1207.92 1680.34,1207.92 1680.92,1207.92 1681.51,1207.92 1682.1,1207.92 1682.68,1207.92 1683.27,1207.92 1683.86,1207.92 1684.44,1207.92 1685.03,1207.92 1685.62,1207.92 1686.2,1207.92 1686.79,1207.92 1687.37,1207.92 1687.96,1207.92 1688.55,1207.92 1689.13,1207.92 1689.72,1207.92 1690.31,1207.92 1690.89,1207.92 1691.48,1207.92 1692.07,1207.92 1692.65,1207.92 1693.24,1207.92 1693.83,1207.92 1694.41,1207.92 1695,1207.92 1695.58,1207.92 1696.17,1207.92 1696.76,1207.92 1697.34,1207.92 1697.93,1207.92 1698.52,1207.92 1699.1,1207.92 1699.69,1207.92 1700.28,1207.92 1700.86,1207.92 1701.45,1207.92 1702.04,1207.92 1702.62,1207.92 1703.21,1207.92 1703.79,1207.92 1704.38,1207.92 1704.97,1207.92 1705.55,1207.92 1706.14,1207.92 1706.73,1207.92 1707.31,1207.92 1707.9,1207.92 1708.49,1207.92 1709.07,1207.92 1709.66,1207.92 1710.24,1207.92 1710.83,1207.92 1711.42,1207.92 1712,1207.92 1712.59,1207.92 1713.18,1207.92 1713.76,1207.92 1714.35,1207.92 1714.94,1207.92 1715.52,1207.92 1716.11,1207.92 1716.7,1207.92 1717.28,1207.92 1717.87,1207.92 1718.45,1207.92 1719.04,1207.92 1719.63,1207.92 1720.21,1207.92 1720.8,1207.92 1721.39,1207.92 1721.97,1207.92 1722.56,1207.92 1723.15,1207.92 1723.73,1207.92 1724.32,1207.92 1724.91,1207.92 1725.49,1207.92 1726.08,1207.92 1726.66,1207.92 1727.25,1207.92 1727.84,1207.92 1728.42,1207.92 1729.01,1207.92 1729.6,1207.92 1730.18,1207.92 1730.77,1207.92 1731.36,1207.92 1731.94,1207.92 1732.53,1207.92 1733.11,1207.92 1733.7,1207.92 1734.29,1207.92 1734.87,1207.92 1735.46,1207.92 1736.05,1207.92 1736.63,1207.92 1737.22,1207.92 1737.81,1207.92 1738.39,1207.92 1738.98,1207.92 1739.57,1207.92 1740.15,1207.92 1740.74,1207.92 1741.32,1207.92 1741.91,1207.92 1742.5,1207.92 1743.08,1207.92 1743.67,1207.92 1744.26,1207.92 1744.84,1207.92 1745.43,1207.92 1746.02,1207.92 1746.6,1207.92 1747.19,1207.92 1747.78,1207.92 1748.36,1207.92 1748.95,1207.92 1749.53,1207.92 1750.12,1207.92 1750.71,1207.92 1751.29,1207.92 1751.88,1207.92 1752.47,1207.92 1753.05,1207.92 1753.64,1207.92 1754.23,1207.92 1754.81,1207.92 1755.4,1207.92 1755.99,1207.92 1756.57,1207.92 1757.16,1207.92 1757.74,1207.92 1758.33,1207.92 1758.92,1207.92 1759.5,1207.92 1760.09,1207.92 1760.68,1207.92 1761.26,1207.92 1761.85,1207.92 1762.44,1207.92 1763.02,1207.92 1763.61,1207.92 1764.19,1207.92 1764.78,1207.92 1765.37,1207.92 1765.95,1207.92 1766.54,1207.92 1767.13,1207.92 1767.71,1207.92 1768.3,1207.92 1768.89,1207.92 1769.47,1207.92 1770.06,1207.92 1770.65,1207.92 1771.23,1207.92 1771.82,1207.92 1772.4,1207.92 1772.99,1207.92 1773.58,1207.92 1774.16,1207.92 1774.75,1207.92 1775.34,1207.92 1775.92,1207.92 1776.51,1207.92 1777.1,1207.92 1777.68,1207.92 1778.27,1207.92 1778.86,1207.92 1779.44,1207.92 1780.03,1207.92 1780.61,1207.92 1781.2,1207.92 1781.79,1207.92 1782.37,1207.92 1782.96,1207.92 1783.55,1207.92 1784.13,1207.92 1784.72,1207.92 1785.31,1207.92 1785.89,1207.92 1786.48,1207.92 1787.06,1207.92 1787.65,1207.92 1788.24,1207.92 1788.82,1207.92 1789.41,1207.92 1790,1207.92 1790.58,1207.92 1791.17,1207.92 1791.76,1207.92 1792.34,1207.92 1792.93,1207.92 1793.52,1207.92 1794.1,1207.92 1794.69,1207.92 1795.27,1207.92 1795.86,1207.92 1796.45,1207.92 1797.03,1207.92 1797.62,1207.92 1798.21,1207.92 1798.79,1207.92 1799.38,1207.92 1799.97,1207.92 1800.55,1207.92 1801.14,1207.92 1801.73,1207.92 1802.31,1207.92 1802.9,1207.92 1803.48,1207.92 1804.07,1207.92 1804.66,1207.92 1805.24,1207.92 1805.83,1207.92 1806.42,1207.92 1807,1207.92 1807.59,1207.92 1808.18,1207.92 1808.76,1207.92 1809.35,1207.92 1809.94,1207.92 1810.52,1207.92 1811.11,1207.92 1811.69,1207.92 1812.28,1207.92 1812.87,1207.92 1813.45,1207.92 1814.04,1207.92 1814.63,1207.92 1815.21,1207.92 1815.8,1207.92 1816.39,1207.92 1816.97,1207.92 1817.56,1207.92 1818.14,1207.92 1818.73,1207.92 1819.32,1207.92 1819.9,1207.92 1820.49,1207.92 1821.08,1207.92 1821.66,1207.92 1822.25,1207.92 1822.84,1207.92 1823.42,1207.92 1824.01,1207.92 1824.6,1207.92 1825.18,1207.92 1825.77,1207.92 1826.35,1207.92 1826.94,1207.92 1827.53,1207.92 1828.11,1207.92 1828.7,1207.92 1829.29,1207.92 1829.87,1207.92 1830.46,1207.92 1831.05,1207.92 1831.63,1207.92 1832.22,1207.92 1832.81,1207.92 1833.39,1207.92 1833.98,1207.92 1834.56,1207.92 1835.15,1207.92 1835.74,1207.92 1836.32,1207.92 1836.91,1207.92 1837.5,1207.92 1838.08,1207.92 1838.67,1207.92 1839.26,1207.92 1839.84,1207.92 1840.43,1207.92 1841.01,1207.92 1841.6,1207.92 1842.19,1207.92 1842.77,1207.92 1843.36,1207.92 1843.95,1207.92 1844.53,1207.92 1845.12,1207.92 1845.71,1207.92 1846.29,1207.92 1846.88,1207.92 1847.47,1207.92 1848.05,1207.92 1848.64,1207.92 1849.22,1207.92 1849.81,1207.92 1850.4,1207.92 1850.98,1207.92 1851.57,1207.92 1852.16,1207.92 1852.74,1207.92 1853.33,1207.92 1853.92,1207.92 1854.5,1207.92 1855.09,1207.92 1855.68,1207.92 1856.26,1207.92 1856.85,1207.92 1857.43,1207.92 1858.02,1207.92 1858.61,1207.92 1859.19,1207.92 1859.78,1207.92 1860.37,1207.92 1860.95,1207.92 1861.54,1207.92 1862.13,1207.92 1862.71,1207.92 1863.3,1207.92 1863.88,1207.92 1864.47,1207.92 1865.06,1207.92 1865.64,1207.92 1866.23,1207.92 1866.82,1207.92 1867.4,1207.92 1867.99,1207.92 1868.58,1207.92 1869.16,1207.92 1869.75,1207.92 1870.34,1207.92 1870.92,1207.92 1871.51,1207.92 1872.09,1207.92 1872.68,1207.92 1873.27,1207.92 1873.85,1207.92 1874.44,1207.92 1875.03,1207.92 1875.61,1207.92 1876.2,1207.92 1876.79,1207.92 1877.37,1207.92 1877.96,1207.92 1878.55,1207.92 1879.13,1207.92 1879.72,1207.92 1880.3,1207.92 1880.89,1207.92 1881.48,1207.92 1882.06,1207.92 1882.65,1207.92 1883.24,1207.92 1883.82,1207.92 1884.41,1207.92 1885,1207.92 1885.58,1207.92 1886.17,1207.92 1886.76,1207.92 1887.34,1207.92 1887.93,1207.92 1888.51,1207.92 1889.1,1207.92 1889.69,1207.92 1890.27,1207.92 1890.86,1207.92 1891.45,1207.92 1892.03,1207.92 1892.62,1207.92 1893.21,1207.92 1893.79,1207.92 1894.38,1207.92 1894.96,1207.92 1895.55,1207.92 1896.14,1207.92 1896.72,1207.92 1897.31,1207.92 1897.9,1207.92 1898.48,1207.92 1899.07,1207.92 1899.66,1207.92 1900.24,1207.92 1900.83,1207.92 1901.42,1207.92 1902,1207.92 1902.59,1207.92 1903.17,1207.92 1903.76,1207.92 1904.35,1207.92 1904.93,1207.92 1905.52,1207.92 1906.11,1207.92 1906.69,1207.92 1907.28,1207.92 1907.87,1207.92 1908.45,1207.92 1909.04,1207.92 1909.63,1207.92 1910.21,1207.92 1910.8,1207.92 1911.38,1207.92 1911.97,1207.92 1912.56,1207.92 1913.14,1207.92 1913.73,1207.92 1914.32,1207.92 1914.9,1207.92 1915.49,1207.92 1916.08,1207.92 1916.66,1207.92 1917.25,1207.92 1917.83,1207.92 1918.42,1207.92 1919.01,1207.92 1919.59,1207.92 1920.18,1207.92 1920.77,1207.92 1921.35,1207.92 1921.94,1207.92 1922.53,1207.92 1923.11,1207.92 1923.7,1207.92 1924.29,1207.92 1924.87,1207.92 1925.46,1207.92 1926.04,1207.92 1926.63,1207.92 1927.22,1207.92 1927.8,1207.92 1928.39,1207.92 1928.98,1207.92 1929.56,1207.92 1930.15,1207.92 1930.74,1207.92 1931.32,1207.92 1931.91,1207.92 1932.5,1207.92 1933.08,1207.92 1933.67,1207.92 1934.25,1207.92 1934.84,1207.92 1935.43,1207.92 1936.01,1207.92 1936.6,1207.92 1937.19,1207.92 1937.77,1207.92 1938.36,1207.92 1938.95,1207.92 1939.53,1207.92 1940.12,1207.92 1940.71,1207.92 1941.29,1207.92 1941.88,1207.92 1942.46,1207.92 1943.05,1207.92 1943.64,1207.92 1944.22,1207.92 1944.81,1207.92 1945.4,1207.92 1945.98,1207.92 1946.57,1207.92 1947.16,1207.92 1947.74,1207.92 1948.33,1207.92 1948.91,1207.92 1949.5,1207.92 1950.09,1207.92 1950.67,1207.92 1951.26,1207.92 1951.85,1207.92 1952.43,1207.92 1953.02,1207.92 1953.61,1207.92 1954.19,1207.92 1954.78,1207.92 1955.37,1207.92 1955.95,1207.92 1956.54,1207.92 1957.12,1207.92 1957.71,1207.92 1958.3,1207.92 1958.88,1207.92 1959.47,1207.92 1960.06,1207.92 1960.64,1207.92 1961.23,1207.92 1961.82,1207.92 1962.4,1207.92 1962.99,1207.92 1963.58,1207.92 1964.16,1207.92 1964.75,1207.92 1965.33,1207.92 1965.92,1207.92 1966.51,1207.92 1967.09,1207.92 1967.68,1207.92 1968.27,1207.92 1968.85,1207.92 1969.44,1207.92 1970.03,1207.92 1970.61,1207.92 1971.2,1207.92 1971.78,1207.92 1972.37,1207.92 1972.96,1207.92 1973.54,1207.92 1974.13,1207.92 1974.72,1207.92 1975.3,1207.92 1975.89,1207.92 1976.48,1207.92 1977.06,1207.92 1977.65,1207.92 1978.24,1207.92 1978.82,1207.92 1979.41,1207.92 1979.99,1207.92 1980.58,1207.92 1981.17,1207.92 1981.75,1207.92 1982.34,1207.92 1982.93,1207.92 1983.51,1207.92 1984.1,1207.92 1984.69,1207.92 1985.27,1207.92 1985.86,1207.92 1986.45,1207.92 1987.03,1207.92 1987.62,1207.92 1988.2,1207.92 1988.79,1207.92 1989.38,1207.92 1989.96,1207.92 1990.55,1207.92 1991.14,1207.92 1991.72,1207.92 1992.31,1207.92 1992.9,1207.92 1993.48,1207.92 1994.07,1207.92 1994.65,1207.92 1995.24,1207.92 1995.83,1207.92 1996.41,1207.92 1997,1207.92 1997.59,1207.92 1998.17,1207.92 1998.76,1207.92 1999.35,1207.92 1999.93,1207.92 2000.52,1207.92 2001.11,1207.92 2001.69,1207.92 2002.28,1207.92 2002.86,1207.92 2003.45,1207.92 2004.04,1207.92 2004.62,1207.92 2005.21,1207.92 2005.8,1207.92 2006.38,1207.92 2006.97,1207.92 2007.56,1207.92 2008.14,1207.92 2008.73,1207.92 2009.32,1207.92 2009.9,1207.92 2010.49,1207.92 2011.07,1207.92 2011.66,1207.92 2012.25,1207.92 2012.83,1207.92 2013.42,1207.92 2014.01,1207.92 2014.59,1207.92 2015.18,1207.92 2015.77,1207.92 2016.35,1207.92 2016.94,1207.92 2017.53,1207.92 2018.11,1207.92 2018.7,1207.92 2019.28,1207.92 2019.87,1207.92 2020.46,1207.92 2021.04,1207.92 2021.63,1207.92 2022.22,1207.92 2022.8,1207.92 2023.39,1207.92 2023.98,1207.92 2024.56,1207.92 2025.15,1207.92 2025.73,1207.92 2026.32,1207.92 2026.91,1207.92 2027.49,1207.92 2028.08,1207.92 2028.67,1207.92 2029.25,1207.92 2029.84,1207.92 2030.43,1207.92 2031.01,1207.92 2031.6,1207.92 2032.19,1207.92 2032.77,1207.92 2033.36,1207.92 2033.94,1207.92 2034.53,1207.92 2035.12,1207.92 2035.7,1207.92 2036.29,1207.92 2036.88,1207.92 2037.46,1207.92 2038.05,1207.92 2038.64,1207.92 2039.22,1207.92 2039.81,1207.92 2040.4,1207.92 2040.98,1207.92 2041.57,1207.92 2042.15,1207.92 2042.74,1207.92 2043.33,1207.92 2043.91,1207.92 2044.5,1207.92 2045.09,1207.92 2045.67,1207.92 2046.26,1207.92 2046.85,1207.92 2047.43,1207.92 2048.02,1207.92 2048.6,1207.92 2049.19,1207.92 2049.78,1207.92 2050.36,1207.92 2050.95,1207.92 2051.54,1207.92 2052.12,1207.92 2052.71,1207.92 2053.3,1207.92 2053.88,1207.92 2054.47,1207.92 2055.06,1207.92 2055.64,1207.92 2056.23,1207.92 2056.81,1207.92 2057.4,1207.92 2057.99,1207.92 2058.57,1207.92 2059.16,1207.92 2059.75,1207.92 2060.33,1207.92 2060.92,1207.92 2061.51,1207.92 2062.09,1207.92 2062.68,1207.92 2063.27,1207.92 2063.85,1207.92 2064.44,1207.92 2065.02,1207.92 2065.61,1207.92 2066.2,1207.92 2066.78,1207.92 2067.37,1207.92 2067.96,1207.92 2068.54,1207.92 2069.13,1207.92 2069.72,1207.92 2070.3,1207.92 2070.89,1207.92 2071.48,1207.92 2072.06,1207.92 2072.65,1207.92 2073.23,1207.92 2073.82,1207.92 2074.41,1207.92 2074.99,1207.92 2075.58,1207.92 2076.17,1207.92 2076.75,1207.92 2077.34,1207.92 2077.93,1207.92 2078.51,1207.92 2079.1,1207.92 2079.68,1207.92 2080.27,1207.92 2080.86,1207.92 2081.44,1207.92 2082.03,1207.92 2082.62,1207.92 2083.2,1207.92 2083.79,1207.92 2084.38,1207.92 2084.96,1207.92 2085.55,1207.92 2086.14,1207.92 2086.72,1207.92 2087.31,1207.92 2087.89,1207.92 2088.48,1207.92 2089.07,1207.92 2089.65,1207.92 2090.24,1207.92 2090.83,1207.92 2091.41,1207.92 2092,1207.92 2092.59,1207.92 2093.17,1207.92 2093.76,1207.92 2094.35,1207.92 2094.93,1207.92 2095.52,1207.92 2096.1,1207.92 2096.69,1207.92 2097.28,1207.92 2097.86,1207.92 2098.45,1207.92 2099.04,1207.92 2099.62,1207.92 2100.21,1207.92 2100.8,1207.92 2101.38,1207.92 2101.97,1207.92 2102.55,1207.92 2103.14,1207.92 2103.73,1207.92 2104.31,1207.92 2104.9,1207.92 2105.49,1207.92 2106.07,1207.92 2106.66,1207.92 2107.25,1207.92 2107.83,1207.92 2108.42,1207.92 2109.01,1207.92 2109.59,1207.92 2110.18,1207.92 2110.76,1207.92 2111.35,1207.92 2111.94,1207.92 2112.52,1207.92 2113.11,1207.92 2113.7,1207.92 2114.28,1207.92 2114.87,1207.92 2115.46,1207.92 2116.04,1207.92 2116.63,1207.92 2117.22,1207.92 2117.8,1207.92 2118.39,1207.92 2118.97,1207.92 2119.56,1207.92 2120.15,1207.92 2120.73,1207.92 2121.32,1207.92 2121.91,1207.92 2122.49,1207.92 2123.08,1207.92 2123.67,1207.92 2124.25,1207.92 2124.84,1207.92 2125.42,1207.92 2126.01,1207.92 2126.6,1207.92 2127.18,1207.92 2127.77,1207.92 2128.36,1207.92 2128.94,1207.92 2129.53,1207.92 2130.12,1207.92 2130.7,1207.92 2131.29,1207.92 2131.88,1207.92 2132.46,1207.92 2133.05,1207.92 2133.63,1207.92 2134.22,1207.92 2134.81,1207.92 2135.39,1207.92 2135.98,1207.92 2136.57,1207.92 2137.15,1207.92 2137.74,1207.92 2138.33,1207.92 2138.91,1207.92 2139.5,1207.92 2140.09,1207.92 2140.67,1207.92 2141.26,1207.92 2141.84,1207.92 2142.43,1207.92 2143.02,1207.92 2143.6,1207.92 2144.19,1207.92 2144.78,1207.92 2145.36,1207.92 2145.95,1207.92 2146.54,1207.92 2147.12,1207.92 2147.71,1207.92 2148.3,1207.92 2148.88,1207.92 2149.47,1207.92 2150.05,1207.92 2150.64,1207.92 2151.23,1207.92 2151.81,1207.92 2152.4,1207.92 2152.99,1207.92 2153.57,1207.92 2154.16,1207.92 2154.75,1207.92 2155.33,1207.92 2155.92,1207.92 2156.5,1207.92 2157.09,1207.92 2157.68,1207.92 2158.26,1207.92 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.82,1189.65 1400.35,899.083 \"/>\n<polyline clip-path=\"url(#clip752)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1225.76 985.439,1189.65 2158.26,1189.65 2158.26,1225.76 985.439,1225.76 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip750)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip753\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip750)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip750)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip750)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip753)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3823.39 163.232,-4954.5 163.792,-5989.44 164.351,-6934.59 164.91,-6481.07 165.469,-7332.1 166.029,-7985.89 166.588,-8674.09 167.147,-8298.15 167.706,-8019.73 168.266,-8608.53 168.825,-9138.44 169.384,-9613.26 169.943,-10036.6 170.503,-9730.97 171.062,-10090.5 171.621,-10406.5 172.18,-10682 172.74,-10919.6 173.299,-11109.9 173.858,-11271.4 174.417,-10961.3 174.977,-10662 175.536,-10749.2 176.095,-10831.3 176.655,-10557.3 177.214,-10603.5 177.773,-10623 178.332,-10629.8 178.892,-10610.8 179.451,-10581 180.01,-10296.1 180.569,-10258.2 181.129,-9782.73 181.688,-9731.1 182.247,-9674.53 182.806,-9605.11 183.366,-9355.18 183.925,-9259.98 184.484,-9155.14 185.043,-9031.67 185.603,-8916.19 186.162,-8670.19 186.721,-8417.72 187.28,-8171.57 187.84,-7923.93 188.399,-7798.12 188.958,-7468.14 189.517,-7054.84 190.077,-6856.11 190.636,-6664.96 191.195,-6544.45 191.754,-6348.4 192.314,-6082.75 192.873,-5823.77 193.432,-5717.58 193.991,-5541.86 194.551,-5303.22 195.11,-5195.77 195.669,-5031.82 196.228,-4929.74 196.788,-4655.8 197.347,-4553.98 197.906,-4348.07 198.465,-4200.33 199.025,-3865.4 199.584,-3737.3 200.143,-3521.55 200.702,-3403.48 201.262,-3246.31 201.821,-3056.35 202.38,-2986.32 202.939,-2917.83 203.499,-2845.98 204.058,-2774.54 204.617,-2704.24 205.176,-2602.06 205.736,-2533.59 206.295,-2402.1 206.854,-2270.52 207.413,-2139.79 207.973,-2046.37 208.532,-1983.65 209.091,-1896.85 209.65,-1777.96 210.21,-1719.58 210.769,-1576.63 211.328,-1496.44 211.887,-1411.91 212.447,-1329.69 213.006,-1304.04 213.565,-1252.5 214.124,-1095.44 214.684,-1047.7 215.243,-975.464 215.802,-930.526 216.361,-814.671 216.921,-751.47 217.48,-688.779 218.039,-620.591 218.598,-513.512 219.158,-432.946 219.717,-402.553 220.276,-276.654 220.835,-228.476 221.395,-157.425 221.954,-85.8245 222.513,-40.3372 223.072,1.24794 223.632,42.2918 224.191,80.3213 224.75,102.771 225.309,118.579 225.869,155.248 226.428,234.064 226.987,247.678 227.546,262.175 228.106,295.188 228.665,369.558 229.224,376.562 229.783,405.042 230.343,432.613 230.902,481.173 231.461,507.676 232.02,530.618 232.58,535.355 233.139,534.578 233.698,574.995 234.257,615.171 234.817,633.972 235.376,637.813 235.935,697.722 236.494,731.135 237.054,730.754 237.613,767.315 238.172,759.154 238.731,792.526 239.291,805.03 239.85,781.819 240.409,796.024 240.968,792.362 241.528,806.828 242.087,821.038 242.646,820.166 243.205,816.779 243.765,834.329 244.324,850.067 244.883,867.238 245.442,884.519 246.002,880.855 246.561,877.854 247.12,913.051 247.679,907.183 248.239,941.715 248.798,918.821 249.357,948.369 249.916,960.575 250.476,955.452 251.035,931.01 251.594,945.735 252.153,943.259 252.713,955.474 253.272,934.806 253.831,934.025 254.39,963.644 254.95,957.617 255.509,953.645 256.068,947.746 256.627,942.149 257.187,953.624 257.746,965.242 258.305,993.914 258.864,1020.76 259.424,998.265 259.983,1030.2 260.542,1038.47 261.101,1049.44 261.661,1038.13 262.22,1064.87 262.779,1070 263.338,1063.15 263.898,1105.1 264.457,1078.72 265.016,1088.72 265.575,1126.46 266.135,1163.52 266.694,1131.93 267.253,1138.69 267.812,1142.34 268.372,1147.89 268.931,1151.15 269.49,1154.3 270.049,1143.55 270.609,1130.63 271.168,1152.56 271.727,1175.44 272.286,1158.62 272.846,1146.25 273.405,1099.29 273.964,1071.2 274.523,1098.09 275.083,1106.98 275.642,1077.54 276.201,1065.33 276.76,1072.43 277.32,1079.49 277.879,1102.2 278.438,1072.51 278.997,1096.27 279.557,1104.23 280.116,1108.79 280.675,1130.76 281.234,1168.54 281.794,1151.07 282.353,1169.2 282.912,1156.21 283.471,1161.2 284.031,1198.74 284.59,1182.39 285.149,1151.43 285.708,1135.14 286.268,1122.99 286.827,1111.93 287.386,1086.01 287.945,1093.56 288.505,1050.78 289.064,1028.55 289.623,1003.28 290.182,995.228 290.742,994.647 291.301,1009.21 291.86,1018.9 292.419,980.818 292.979,975.403 293.538,969.238 294.097,968.195 294.656,968.56 295.216,981.717 295.775,996.526 296.334,989.748 296.893,986.388 297.453,965.547 298.012,989.147 298.571,1015.19 299.13,993.56 299.69,953.89 300.249,967.364 300.808,995.342 301.368,1072.48 301.927,1061.9 302.486,1053.57 303.045,1043.12 303.605,1035.12 304.164,1042.33 304.723,1036.82 305.282,1030.82 305.842,1038.15 306.401,1026.48 306.96,1003.39 307.519,1011.65 308.079,971.743 308.638,983.225 309.197,1011.1 309.756,1021.4 310.316,1012.99 310.875,1019.63 311.434,1011.65 311.993,969.388 312.553,968.944 313.112,1015.02 313.671,1042.3 314.23,1080.67 314.79,1071.22 315.349,1062.84 315.908,1068.53 316.467,1057.78 317.027,1034.8 317.586,1043.07 318.145,1033.7 318.704,1038.29 319.264,1047.18 319.823,1035.96 320.382,1041.71 320.941,1014.1 321.501,988.253 322.06,1030.82 322.619,1007.58 323.178,981.796 323.738,954.277 324.297,950.596 324.856,962.39 325.415,991.721 325.975,983.398 326.534,1010.18 327.093,969.253 327.652,994.84 328.212,1004.57 328.771,992.273 329.33,984.843 329.889,945.823 330.449,954.964 331.008,965.668 331.567,972.512 332.126,972.115 332.686,985.537 333.245,910.261 333.804,919.656 334.363,902.542 334.923,898.394 335.482,878.625 336.041,877.647 336.6,877.272 337.16,892.589 337.719,955.185 338.278,934.521 338.837,848.423 339.397,849.085 339.956,881.762 340.515,881.32 341.074,860.327 341.634,876.358 342.193,891.283 342.752,922.726 343.311,919.73 343.871,915.65 344.43,896.021 344.989,906.815 345.548,886.134 346.108,900.551 346.667,913.652 347.226,942.272 347.785,936.676 348.345,917.408 348.904,911.363 349.463,922.503 350.022,965.493 350.582,959.752 351.141,970.76 351.7,963.719 352.259,921.56 352.819,900.776 353.378,865.245 353.937,896.298 354.496,891.37 355.056,887.323 355.615,865.703 356.174,848.204 356.733,844.535 357.293,876.65 357.852,858.799 358.411,906.698 358.97,902.461 359.53,848.504 360.089,845.927 360.648,848.043 361.207,797.05 361.767,801.141 362.326,819.742 362.885,820.355 363.444,816.781 364.004,836.736 364.563,849.209 365.122,846.762 365.681,799.078 366.241,799.148 366.8,801.389 367.359,818.316 367.918,848.623 368.478,827.308 369.037,827.777 369.596,809.213 370.155,810.806 370.715,827.587 371.274,858.8 371.833,840.566 372.392,902.67 372.952,898.345 373.511,891.976 374.07,887.328 374.629,881.314 375.189,844.092 375.748,875.605 376.307,869.536 376.866,867.27 377.426,859.049 377.985,842.256 378.544,871.938 379.103,871.162 379.663,868.769 380.222,878.017 380.781,870.721 381.34,846.696 381.9,859.428 382.459,870.961 383.018,835.806 383.577,785.926 384.137,820.738 384.696,800.136 385.255,798.789 385.814,831.62 386.374,826.414 386.933,840.876 387.492,870.966 388.051,882.91 388.611,878.923 389.17,842.949 389.729,838.929 390.288,839.305 390.848,835.343 391.407,866.607 391.966,844.711 392.525,824.666 393.085,804.816 393.644,805.172 394.203,807.18 394.762,792.313 395.322,741.896 395.881,777.33 396.44,779.828 396.999,792.188 397.559,756.519 398.118,773.403 398.677,773.776 399.236,788.474 399.796,805.659 400.355,791.003 400.914,792.345 401.473,823.124 402.033,851.496 402.592,833.948 403.151,828.539 403.71,824.426 404.27,787.462 404.829,819.019 405.388,815.553 405.947,828.05 406.507,840.726 407.066,851.753 407.625,849.357 408.184,894.293 408.744,887.084 409.303,849.484 409.862,846.129 410.421,857.419 410.981,818.207 411.54,835.039 412.099,830.229 412.658,842.242 413.218,821.384 413.777,816.067 414.336,795.2 414.895,757.063 415.455,758.653 416.014,772.281 416.573,771.461 417.132,789.139 417.692,773.222 418.251,757.218 418.81,754.872 419.369,755.145 419.929,768.878 420.488,767.554 421.047,747.323 421.606,729.952 422.166,715.479 422.725,700.162 423.284,720.532 423.843,738.678 424.403,739.049 424.962,723.499 425.521,741.578 426.08,726.365 426.64,729.565 427.199,696.859 427.758,680.427 428.318,699.768 428.877,705.553 429.436,691.672 429.995,730.008 430.555,764.411 431.114,747.215 431.673,766.07 432.232,778.256 432.792,778.444 433.351,824.205 433.91,870.149 434.469,849.824 435.029,842.746 435.588,865.889 436.147,859.861 436.706,855.282 437.266,850.862 437.825,865.148 438.384,858.611 438.943,852.073 439.503,833.237 440.062,827.731 440.621,789.897 441.18,786.992 441.74,752.666 442.299,768.717 442.858,753.454 443.417,767.632 443.977,754.578 444.536,751.917 445.095,785.023 445.654,767.359 446.214,768.729 446.773,752.663 447.332,754.759 447.891,706.285 448.451,707.674 449.01,708.861 449.569,713.152 450.128,712.098 450.688,702.307 451.247,703.55 451.806,735.262 452.365,751.509 452.925,752.89 453.484,818.545 454.043,816.947 454.602,831.02 455.162,829.615 455.721,843.016 456.28,839.976 456.839,835.523 457.399,829.904 457.958,826.677 458.517,803.273 459.076,813.52 459.636,808.107 460.195,787.101 460.754,788.09 461.313,801.4 461.873,815.123 462.432,814.665 462.991,796.562 463.55,777.704 464.11,774.737 464.669,789.999 465.228,768.325 465.787,736.797 466.347,772.048 466.906,771.795 467.465,771.712 468.024,769.347 468.584,785.879 469.143,766.303 469.702,762.389 470.261,760.746 470.821,745.873 471.38,761.086 471.939,775.244 472.498,791.617 473.058,776.049 473.617,759.114 474.176,756.538 474.735,769.291 475.295,764.649 475.854,695.483 476.413,731.167 476.972,732.524 477.532,731.48 478.091,736.662 478.65,671.578 479.209,676.105 479.769,665.387 480.328,668.931 480.887,670.464 481.446,693.707 482.006,711.905 482.565,726.403 483.124,727 483.683,728.13 484.243,715.182 484.802,714.231 485.361,715.463 485.92,701.243 486.48,700.571 487.039,686.63 487.598,674.425 488.157,677.589 488.717,679.697 489.276,683.012 489.835,682.405 490.394,670.966 490.954,654.004 491.513,673.847 492.072,680.594 492.631,683.691 493.191,686.312 493.75,722.456 494.309,723.65 494.868,739.988 495.428,710.231 495.987,715.05 496.546,719.604 497.105,722.144 497.665,706.665 498.224,677.855 498.783,710.183 499.342,744.738 499.902,779.172 500.461,773.816 501.02,787.438 501.579,801.081 502.139,800.815 502.698,780.105 503.257,810.745 503.816,804.824 504.376,801.725 504.935,813.42 505.494,826.791 506.053,804.218 506.613,815.821 507.172,791.078 507.731,790.137 508.29,769.828 508.85,748.171 509.409,747.802 509.968,762.543 510.527,761.862 511.087,763.484 511.646,747.862 512.205,780.786 512.764,811.332 513.324,787.691 513.883,829.623 514.442,773.297 515.001,756.016 515.561,738.492 516.12,736.576 516.679,752.812 517.238,782.023 517.798,746.866 518.357,709.627 518.916,726.076 519.475,726.445 520.035,728.599 520.594,713 521.153,733.986 521.712,733.9 522.272,736.333 522.831,766.831 523.39,762.179 523.949,741.905 524.509,741.201 525.068,804.567 525.627,816.521 526.186,828.562 526.746,808.876 527.305,784.204 527.864,779.087 528.423,772.571 528.983,769.086 529.542,783.26 530.101,765.385 530.66,762.355 531.22,760.623 531.779,759.931 532.338,756.975 532.897,754.646 533.457,735.356 534.016,767.863 534.575,734.079 535.134,734.089 535.694,779.817 536.253,775.449 536.812,755.616 537.371,769.498 537.931,765.806 538.49,760.754 539.049,759.413 539.608,775.612 540.168,772.547 540.727,736.895 541.286,752.773 541.845,734.719 542.405,732.674 542.964,748.687 543.523,744.948 544.082,760.645 544.642,809.919 545.201,805.883 545.76,834.089 546.319,842.643 546.879,837.994 547.438,827.463 547.997,870.423 548.556,878.585 549.116,900.479 549.675,908.204 550.234,868.241 550.793,860.79 551.353,822.152 551.912,799.936 552.471,780.215 553.031,795.473 553.59,791.698 554.149,804.325 554.708,735.114 555.268,704.776 555.827,705.534 556.386,705.85 556.945,705.136 557.505,707.58 558.064,674.48 558.623,674.651 559.182,709.728 559.742,725.488 560.301,688.407 560.86,739.021 561.419,722.624 561.979,738.893 562.538,721.961 563.097,739.085 563.656,672.079 564.216,655.964 564.775,658.911 565.334,612.716 565.893,664.446 566.453,663.184 567.012,683.936 567.571,703.073 568.13,639.035 568.69,629.247 569.249,631.542 569.808,618.06 570.367,592.81 570.927,598.532 571.486,622.658 572.045,628.255 572.604,633.676 573.164,670.958 573.723,674.32 574.282,695.812 574.841,713.484 575.401,712.487 575.96,678.939 576.519,679.672 577.078,729.645 577.638,732.799 578.197,746.982 578.756,741.315 579.315,773.286 579.875,751.559 580.434,763.705 580.993,758.252 581.552,753.993 582.112,767.193 582.671,732.445 583.23,716.285 583.789,686.777 584.349,684.195 584.908,687.092 585.467,687.483 586.026,690.724 586.586,661.415 587.145,677.765 587.704,681.445 588.263,668.261 588.823,690.588 589.382,660.578 589.941,680.391 590.5,633.298 591.06,620.419 591.619,608.572 592.178,600.124 592.737,607.38 593.297,614.637 593.856,637.488 594.415,672.222 594.974,693.314 595.534,723.168 596.093,742.209 596.652,708.507 597.211,724.266 597.771,742.764 598.33,772.182 598.889,783.405 599.448,795.809 600.008,810.951 600.567,788.179 601.126,782.671 601.685,778.331 602.245,777.514 602.804,758.957 603.363,743.826 603.922,762.3 604.482,779.485 605.041,771.834 605.6,767.761 606.159,782.411 606.719,758.428 607.278,769.657 607.837,768.545 608.396,782.149 608.956,757.702 609.515,769.272 610.074,783.22 610.633,776.538 611.193,804.014 611.752,812.704 612.311,804.514 612.87,799.522 613.43,795.742 613.989,774.574 614.548,790.65 615.107,785.496 615.667,796.253 616.226,778.296 616.785,773.925 617.344,787.553 617.904,800.611 618.463,844.077 619.022,836.747 619.581,830.172 620.141,835.728 620.7,823.183 621.259,828.209 621.818,886.166 622.378,860.727 622.937,849.765 623.496,790.773 624.055,759.764 624.615,723.86 625.174,721.166 625.733,701.311 626.292,668.713 626.852,635.911 627.411,611.119 627.97,614.02 628.529,649.891 629.089,639.032 629.648,643.471 630.207,709.275 630.766,708.239 631.326,720.868 631.885,683.086 632.444,686.989 633.003,701.923 633.563,703.769 634.122,705.398 634.681,674.522 635.24,658.98 635.8,658.826 636.359,723.541 636.918,739.34 637.477,738.718 638.037,725.006 638.596,710.111 639.155,694.919 639.714,728.01 640.274,713.317 640.833,732.656 641.392,730.507 641.951,712.362 642.511,727.669 643.07,688.625 643.629,655.793 644.188,660.445 644.748,678.237 645.307,709.81 645.866,741.844 646.425,737.142 646.985,751.438 647.544,715.037 648.103,761.644 648.662,740.786 649.222,771.559 649.781,752.735 650.34,734.838 650.899,733.445 651.459,684.166 652.018,656.559 652.577,674.62 653.136,675.739 653.696,694.001 654.255,711.209 654.814,678.093 655.373,697.025 655.933,730.234 656.492,729.479 657.051,678.792 657.61,663.762 658.17,597.588 658.729,590.924 659.288,596.197 659.847,633.665 660.407,634.354 660.966,622.522 661.525,642.431 662.084,645.667 662.644,631.476 663.203,630.886 663.762,638.377 664.321,656.179 664.881,658.328 665.44,658.4 665.999,627.697 666.558,630.854 667.118,665.598 667.677,667.11 668.236,669.765 668.795,670.611 669.355,701.072 669.914,700.876 670.473,683.733 671.032,670.219 671.592,702.978 672.151,686.068 672.71,654.881 673.269,641.683 673.829,627.269 674.388,617.198 674.947,623.558 675.506,645.189 676.066,648.647 676.625,651.875 677.184,671.41 677.743,672.872 678.303,642.47 678.862,645.269 679.421,633.819 679.981,639.824 680.54,638.349 681.099,654.771 681.658,625.497 682.218,628.94 682.777,648.624 683.336,619.868 683.895,641.631 684.455,662.057 685.014,667.325 685.573,669.782 686.132,669.995 686.692,672.333 687.251,677.612 687.81,645.662 688.369,614.625 688.929,550.029 689.488,541.842 690.047,534.497 690.606,544.078 691.166,568.207 691.725,575.423 692.284,565.68 692.843,572.556 693.403,596.216 693.962,600.035 694.521,603.234 695.08,623.701 695.64,627.212 696.199,628.083 696.758,615.787 697.317,650.423 697.877,670.855 698.436,691.058 698.995,707.725 699.554,711.859 700.114,695.573 700.673,730.816 701.232,697.703 701.791,683.645 702.351,668.239 702.91,731.74 703.469,763.267 704.028,760.853 704.588,772.375 705.147,766.038 705.706,777.127 706.265,750.804 706.825,713.715 707.384,710.891 707.943,725.933 708.502,739.384 709.062,752.663 709.621,748.773 710.18,716.098 710.739,651.887 711.299,669.278 711.858,671.046 712.417,669.115 712.976,684.32 713.536,668.433 714.095,669.667 714.654,685.122 715.213,699.753 715.773,699.798 716.332,727.809 716.891,708.628 717.45,724.755 718.01,711.684 718.569,694.561 719.128,727.182 719.687,722.835 720.247,702.222 720.806,718.597 721.365,733.052 721.924,715.094 722.484,713.355 723.043,712.278 723.602,727.14 724.161,709.264 724.721,707.593 725.28,690.869 725.839,691.293 726.398,676.842 726.958,694.215 727.517,728.252 728.076,746.521 728.635,741.875 729.195,723.415 729.754,719.586 730.313,749.282 730.872,744.345 731.432,743.397 731.991,741.904 732.55,753.343 733.109,748.631 733.669,730.909 734.228,731.528 734.787,711.1 735.346,661.395 735.906,631.39 736.465,617.924 737.024,638.019 737.583,640.986 738.143,628.377 738.702,629.894 739.261,631.682 739.82,670.28 740.38,669.815 740.939,606.804 741.498,661.022 742.057,695.79 742.617,695.615 743.176,680.885 743.735,680.502 744.294,699.426 744.854,700.209 745.413,702.377 745.972,715.91 746.531,699.612 747.091,713.285 747.65,729.898 748.209,744.805 748.768,742.863 749.328,725.168 749.887,754.867 750.446,731.167 751.005,730.33 751.565,730.965 752.124,743.167 752.683,740.686 753.242,721.887 753.802,735.879 754.361,734.441 754.92,764.452 755.479,774.788 756.039,768.983 756.598,781.355 757.157,826.309 757.716,769.175 758.276,751.266 758.835,749.247 759.394,746.364 759.953,758.674 760.513,786.896 761.072,753.083 761.631,762.401 762.19,726.101 762.75,690.868 763.309,688.3 763.868,689.53 764.427,638.789 764.987,639.35 765.546,659.557 766.105,679.068 766.664,632.971 767.224,702.984 767.783,668.848 768.342,674.19 768.901,692.948 769.461,693.648 770.02,678.844 770.579,695.537 771.138,676.3 771.698,691.829 772.257,694.534 772.816,695.712 773.375,710.144 773.935,707.845 774.494,705.602 775.053,722.209 775.612,784.134 776.172,781.833 776.731,774.829 777.29,755.678 777.849,749.451 778.409,743.648 778.968,776.318 779.527,757.343 780.086,740.648 780.646,704.881 781.205,689.031 781.764,652.101 782.323,685.593 782.883,698.909 783.442,715.917 784.001,713.679 784.56,730.297 785.12,730.782 785.679,729.014 786.238,745.924 786.797,742.596 787.357,742.595 787.916,752.619 788.475,751.576 789.034,749.002 789.594,746.721 790.153,710.679 790.712,756.78 791.271,770.779 791.831,769.607 792.39,784.718 792.949,793.672 793.508,819.208 794.068,813.286 794.627,841.232 795.186,802.154 795.745,798.389 796.305,823.207 796.864,866.591 797.423,871.111 797.982,859.56 798.542,816.682 799.101,795.622 799.66,771.233 800.219,782.254 800.779,808.676 801.338,782.574 801.897,760.289 802.456,771.353 803.016,764.247 803.575,729.914 804.134,696.676 804.693,695.492 805.253,659.3 805.812,643.343 806.371,644.007 806.931,631.321 807.49,617.117 808.049,638.272 808.608,656.97 809.168,624.166 809.727,580.694 810.286,620.298 810.845,658.596 811.405,659.842 811.964,711.491 812.523,726.47 813.082,738.447 813.642,689.672 814.201,676.28 814.76,678.461 815.319,662.532 815.879,676.884 816.438,648.36 816.997,650.202 817.556,621.609 818.116,578.596 818.675,587.52 819.234,577.563 819.793,567.351 820.353,570.988 820.912,563.384 821.471,552.974 822.03,542.797 822.59,551.907 823.149,541.288 823.708,546.322 824.267,557.422 824.827,582.749 825.386,573.003 825.945,583.153 826.504,590.066 827.064,612.563 827.623,616.455 828.182,602.48 828.741,640.552 829.301,687.987 829.86,688.881 830.419,653.867 830.978,625.222 831.538,645.693 832.097,698.617 832.656,682.582 833.215,684.404 833.775,687.281 834.334,686.671 834.893,701.486 835.452,697.921 836.012,680.577 836.571,696.196 837.13,694.896 837.689,665.771 838.249,650.41 838.808,602.718 839.367,658.419 839.926,664.461 840.486,683.271 841.045,683.082 841.604,702.629 842.163,652.752 842.723,653.96 843.282,657.298 843.841,658.123 844.4,659.056 844.96,659.157 845.519,662.864 846.078,679.535 846.637,665.001 847.197,697.839 847.756,733.382 848.315,732.508 848.874,742.012 849.434,721.868 849.993,705.057 850.552,702.98 851.111,719.911 851.671,722.014 852.23,739.063 852.789,755.565 853.348,751.282 853.908,749.837 854.467,732.141 855.026,713.486 855.585,719.624 856.145,719.956 856.704,717.807 857.263,713.96 857.822,728.764 858.382,740.91 858.941,723.614 859.5,704.309 860.059,700.937 860.619,699.544 861.178,700.581 861.737,715.298 862.296,730.63 862.856,715.293 863.415,745.728 863.974,743.709 864.533,741.985 865.093,737.951 865.652,732.055 866.211,714.263 866.77,681.935 867.33,648.198 867.889,647.133 868.448,651.952 869.007,670.813 869.567,640.422 870.126,642.642 870.685,660.685 871.244,660.953 871.804,661.357 872.363,645.436 872.922,629.381 873.481,668.43 874.041,702.429 874.6,700.57 875.159,703.264 875.718,704.974 876.278,688.973 876.837,706.637 877.396,705.246 877.955,686.311 878.515,688.772 879.074,705.9 879.633,688.612 880.192,671.634 880.752,673.355 881.311,691.653 881.87,673.873 882.429,686.72 882.989,704.342 883.548,702.122 884.107,697.74 884.666,746.646 885.226,742.571 885.785,712.718 886.344,709.885 886.903,675.733 887.463,659.144 888.022,676.923 888.581,707.144 889.14,705.266 889.7,705.911 890.259,717.818 890.818,698.489 891.377,679.491 891.937,676.656 892.496,692.85 893.055,678.191 893.614,693.844 894.174,708.363 894.733,692.389 895.292,678.154 895.851,694.534 896.411,740.125 896.97,738.195 897.529,719.617 898.088,766.504 898.648,763.282 899.207,755.442 899.766,777.117 900.325,772.496 900.885,766.766 901.444,768.085 902.003,749.19 902.562,746.22 903.122,743.196 903.681,708.404 904.24,705.944 904.799,723.885 905.359,693.442 905.918,689.55 906.477,690.272 907.036,642.829 907.596,664.147 908.155,665.195 908.714,634.124 909.273,624.829 909.833,633.188 910.392,670.03 910.951,591.687 911.51,617.046 912.07,574.207 912.629,548.806 913.188,573.547 913.747,611.975 914.307,630.198 914.866,666.698 915.425,650.156 915.984,669.584 916.544,688.716 917.103,673.209 917.662,673.307 918.221,692.327 918.781,669.265 919.34,685.84 919.899,717.573 920.458,747.314 921.018,764.264 921.577,738.363 922.136,716.804 922.695,714.31 923.255,698.431 923.814,716.189 924.373,730.309 924.932,727.775 925.492,693.21 926.051,729.241 926.61,744.715 927.169,725.36 927.729,741.787 928.288,733.768 928.847,763.681 929.406,776.959 929.966,789.278 930.525,797.436 931.084,775.199 931.644,789.166 932.203,784.644 932.762,780.613 933.321,757.86 933.881,754.669 934.44,767.379 934.999,765.782 935.558,745.491 936.118,730.532 936.677,693.693 937.236,691.344 937.795,658.626 938.355,670.815 938.914,671.261 939.473,675.738 940.032,675.749 940.592,694.947 941.151,705.004 941.71,753.149 942.269,763.581 942.829,758.314 943.388,771.224 943.947,752.237 944.506,733.647 945.066,748.092 945.625,774.246 946.184,754.448 946.743,751.502 947.303,734.848 947.862,667.021 948.421,666.823 948.98,682.42 949.54,715.054 950.099,694.946 950.658,679.418 951.217,664.526 951.777,633.631 952.336,683.304 952.895,667.985 953.454,651.712 954.014,650.233 954.573,650.573 955.132,635.461 955.691,655.887 956.251,674.925 956.81,674.337 957.369,672.952 957.928,655.636 958.488,674.935 959.047,675.24 959.606,645.296 960.165,650.814 960.725,651.74 961.284,685.642 961.843,701.057 962.402,718.196 962.962,683.028 963.521,678.497 964.08,681.032 964.639,664.258 965.199,664.373 965.758,664.106 966.317,664.747 966.876,649.735 967.436,654.605 967.995,625.344 968.554,627.845 969.113,614.805 969.673,632.679 970.232,585.222 970.791,588.043 971.35,597.624 971.91,584.549 972.469,639.292 973.028,690.773 973.587,757.324 974.147,765.634 974.706,762.156 975.265,693.739 975.824,739.107 976.384,737.22 976.943,735.84 977.502,686.673 978.061,655.635 978.621,597.687 979.18,571.708 979.739,543.039 980.298,567.316 980.858,594.803 981.417,581.969 981.976,620.559 982.535,638.811 983.095,705.407 983.654,638.892 984.213,641.943 984.772,663.393 985.332,665.386 985.891,635.353 986.45,670.214 987.009,654.897 987.569,670.342 988.128,641.472 988.687,658.335 989.246,658.048 989.806,676.211 990.365,642.088 990.924,658.053 991.483,657.382 992.043,645.795 992.602,600.567 993.161,655.046 993.72,671.71 994.28,688.965 994.839,706.139 995.398,718.723 995.957,735.254 996.517,749.026 997.076,758.321 997.635,769.247 998.194,795.264 998.754,805.611 999.313,782.687 999.872,778.968 1000.43,806.136 1000.99,785.458 1001.55,747.984 1002.11,743.432 1002.67,745.618 1003.23,753.71 1003.79,764.737 1004.35,745.492 1004.91,741.074 1005.46,785.705 1006.02,764.946 1006.58,708.852 1007.14,721.842 1007.7,699.428 1008.26,666.034 1008.82,679.107 1009.38,713.094 1009.94,713.407 1010.5,678.601 1011.06,711.005 1011.62,707.046 1012.18,725.655 1012.73,741.061 1013.29,704.338 1013.85,703.632 1014.41,760.818 1014.97,757.129 1015.53,787.762 1016.09,765.188 1016.65,744.063 1017.21,719.548 1017.77,716.89 1018.33,715.026 1018.89,681.07 1019.45,649.78 1020.01,650.003 1020.56,679.638 1021.12,660.405 1021.68,695.715 1022.24,677.862 1022.8,709.329 1023.36,660.722 1023.92,659.998 1024.48,642.271 1025.04,694.212 1025.6,705.398 1026.16,704.091 1026.72,686.808 1027.28,667.842 1027.83,652.54 1028.39,590.916 1028.95,609.674 1029.51,595.358 1030.07,619.082 1030.63,607.045 1031.19,579.614 1031.75,587.518 1032.31,609.913 1032.87,582.64 1033.43,575.506 1033.99,532.57 1034.55,538.783 1035.1,545.078 1035.66,553.092 1036.22,513.611 1036.78,519.282 1037.34,497.924 1037.9,475.152 1038.46,518.29 1039.02,512.867 1039.58,489.313 1040.14,481.828 1040.7,497.028 1041.26,540.341 1041.82,533.219 1042.38,544.636 1042.93,566.433 1043.49,590 1044.05,613.218 1044.61,602.85 1045.17,609.428 1045.73,618.112 1046.29,608.188 1046.85,678.787 1047.41,677.213 1047.97,708.722 1048.53,675.679 1049.09,661.979 1049.65,651.583 1050.2,619.035 1050.76,639.569 1051.32,627.776 1051.88,629.039 1052.44,616.195 1053,671.303 1053.56,675.864 1054.12,677.431 1054.68,677.337 1055.24,700.338 1055.8,715.357 1056.36,712.727 1056.92,696.007 1057.48,682.289 1058.03,669.745 1058.59,719.863 1059.15,701.598 1059.71,716.603 1060.27,712.374 1060.83,712.293 1061.39,744.068 1061.95,756.243 1062.51,784.11 1063.07,777.308 1063.63,758.479 1064.19,776.628 1064.75,770.887 1065.3,734.599 1065.86,734.813 1066.42,745.108 1066.98,755.343 1067.54,755.306 1068.1,752.701 1068.66,730.354 1069.22,750.596 1069.78,743.41 1070.34,738.611 1070.9,723.777 1071.46,718.605 1072.02,698.492 1072.57,716.422 1073.13,697.484 1073.69,695.611 1074.25,712.104 1074.81,741.122 1075.37,736.392 1075.93,733.407 1076.49,732.032 1077.05,693.19 1077.61,657.915 1078.17,677.521 1078.73,677.411 1079.29,662.76 1079.85,645.308 1080.4,680.999 1080.96,651.38 1081.52,651.001 1082.08,666.345 1082.64,629.605 1083.2,666.186 1083.76,652.315 1084.32,635.671 1084.88,641.243 1085.44,709.723 1086,707.897 1086.56,707.974 1087.12,705.873 1087.67,718.616 1088.23,729.837 1088.79,692.351 1089.35,710.239 1089.91,725.808 1090.47,689.41 1091.03,704.813 1091.59,720.549 1092.15,716.412 1092.71,716.332 1093.27,715.618 1093.83,730.704 1094.39,712.538 1094.94,743.127 1095.5,756.416 1096.06,770.12 1096.62,765.554 1097.18,743.389 1097.74,724.436 1098.3,738.353 1098.86,701.271 1099.42,716.739 1099.98,703.694 1100.54,688.162 1101.1,653.529 1101.66,670.848 1102.22,638.558 1102.77,607.487 1103.33,626.681 1103.89,627.741 1104.45,614.169 1105.01,646.089 1105.57,663.902 1106.13,668.159 1106.69,635.801 1107.25,637.083 1107.81,620.346 1108.37,640.992 1108.93,657.505 1109.49,660.085 1110.04,711.051 1110.6,742.708 1111.16,741.504 1111.72,773.037 1112.28,738.778 1112.84,741.11 1113.4,705.333 1113.96,720.73 1114.52,719.358 1115.08,699.947 1115.64,736.312 1116.2,702.887 1116.76,701.444 1117.31,748.967 1117.87,728.607 1118.43,727.649 1118.99,709.166 1119.55,725.044 1120.11,742.326 1120.67,773.4 1121.23,768.195 1121.79,763.683 1122.35,761.665 1122.91,772.455 1123.47,769.728 1124.03,750.957 1124.59,714.15 1125.14,712.886 1125.7,661.955 1126.26,696.42 1126.82,665.656 1127.38,619.031 1127.94,588.897 1128.5,578.689 1129.06,599.777 1129.62,604.54 1130.18,611.904 1130.74,601.969 1131.3,557.519 1131.86,562.454 1132.41,570.003 1132.97,592.039 1133.53,581.821 1134.09,571.165 1134.65,559.815 1135.21,568.166 1135.77,577.073 1136.33,566.916 1136.89,572.694 1137.45,564.811 1138.01,571.762 1138.57,591.667 1139.13,594.378 1139.68,581.026 1140.24,584.938 1140.8,590.399 1141.36,599.287 1141.92,638.014 1142.48,639.749 1143.04,613.227 1143.6,600.529 1144.16,619.354 1144.72,637.721 1145.28,641.455 1145.84,624.361 1146.4,643.969 1146.96,632.827 1147.51,637.704 1148.07,641.294 1148.63,676.436 1149.19,692.176 1149.75,675.717 1150.31,640.347 1150.87,641.228 1151.43,658.066 1151.99,660.876 1152.55,664.187 1153.11,667.621 1153.67,672.19 1154.23,692.21 1154.78,690.32 1155.34,674.302 1155.9,693.276 1156.46,694.761 1157.02,707.93 1157.58,720.247 1158.14,719.471 1158.7,718.295 1159.26,714.665 1159.82,714.224 1160.38,711.676 1160.94,726.176 1161.5,709.281 1162.05,725.104 1162.61,658.684 1163.17,642.177 1163.73,643.544 1164.29,615.721 1164.85,640.344 1165.41,637.915 1165.97,622.712 1166.53,642.26 1167.09,690.745 1167.65,658.6 1168.21,673.809 1168.77,673.807 1169.33,673.49 1169.88,705.361 1170.44,689.312 1171,690.998 1171.56,661.057 1172.12,614.357 1172.68,632.894 1173.24,652.496 1173.8,654.733 1174.36,672.343 1174.92,674.479 1175.48,659.677 1176.04,660.503 1176.6,662.044 1177.15,709.776 1177.71,720.108 1178.27,714.746 1178.83,746.638 1179.39,725.031 1179.95,688.754 1180.51,719.078 1181.07,713.411 1181.63,729.819 1182.19,730.22 1182.75,760.771 1183.31,772.606 1183.87,768.891 1184.43,714.773 1184.98,742.872 1185.54,740.493 1186.1,768.936 1186.66,762.582 1187.22,775.213 1187.78,753.721 1188.34,750.496 1188.9,764.986 1189.46,728.145 1190.02,740.711 1190.58,720.598 1191.14,734.309 1191.7,745.777 1192.25,727.009 1192.81,724.781 1193.37,719.045 1193.93,684.305 1194.49,700.877 1195.05,684.099 1195.61,683.99 1196.17,680.263 1196.73,678.455 1197.29,679.263 1197.85,681.849 1198.41,682.117 1198.97,698.81 1199.52,677.991 1200.08,678.864 1200.64,675.788 1201.2,694.804 1201.76,729.449 1202.32,746.767 1202.88,742.465 1203.44,704.657 1204,702.195 1204.56,682.674 1205.12,683.621 1205.68,682.346 1206.24,698.208 1206.8,694.748 1207.35,692.029 1207.91,689.985 1208.47,688.082 1209.03,706.151 1209.59,669.18 1210.15,686.164 1210.71,700.336 1211.27,701.583 1211.83,681.296 1212.39,712.393 1212.95,727.537 1213.51,692.688 1214.07,707.056 1214.62,717.85 1215.18,716.136 1215.74,683.562 1216.3,694.882 1216.86,694.193 1217.42,723.424 1217.98,718.428 1218.54,731.515 1219.1,748.268 1219.66,725.769 1220.22,736.536 1220.78,717.709 1221.34,697.005 1221.89,694.985 1222.45,693.259 1223.01,659.614 1223.57,678.597 1224.13,681.37 1224.69,681.255 1225.25,680.316 1225.81,682.294 1226.37,681.091 1226.93,698.562 1227.49,696.31 1228.05,647.915 1228.61,648.426 1229.17,700.576 1229.72,703.377 1230.28,671.147 1230.84,690.489 1231.4,674.881 1231.96,707.116 1232.52,672.793 1233.08,656.742 1233.64,677.143 1234.2,662.814 1234.76,680.077 1235.32,664.608 1235.88,667.478 1236.44,620.137 1236.99,624.792 1237.55,626.788 1238.11,664.344 1238.67,681.586 1239.23,679.606 1239.79,698.196 1240.35,699.971 1240.91,731.967 1241.47,745.855 1242.03,743.546 1242.59,739.985 1243.15,727.785 1243.71,708.622 1244.26,725.955 1244.82,726.691 1245.38,705.551 1245.94,685.938 1246.5,690.702 1247.06,657.066 1247.62,674.638 1248.18,644.591 1248.74,649.115 1249.3,666.286 1249.86,665.96 1250.42,681.869 1250.98,669.077 1251.54,683.043 1252.09,702.789 1252.65,754.732 1253.21,781.069 1253.77,808.32 1254.33,766.836 1254.89,746.622 1255.45,726.476 1256.01,740.008 1256.57,708.276 1257.13,708.456 1257.69,677.048 1258.25,693.582 1258.81,708.632 1259.36,675.515 1259.92,705.903 1260.48,703.494 1261.04,716.404 1261.6,697.132 1262.16,698.465 1262.72,732.531 1263.28,713.135 1263.84,742.594 1264.4,737.314 1264.96,716.22 1265.52,709.582 1266.08,738.945 1266.63,751.452 1267.19,727.462 1267.75,741.949 1268.31,688.847 1268.87,655.845 1269.43,641.046 1269.99,692.742 1270.55,675.444 1271.11,677.779 1271.67,673.468 1272.23,688.713 1272.79,707.817 1273.35,706.289 1273.91,703.807 1274.46,703.587 1275.02,734.239 1275.58,700.678 1276.14,685.754 1276.7,718.787 1277.26,703.223 1277.82,715.047 1278.38,696.17 1278.94,712.097 1279.5,696.096 1280.06,697.205 1280.62,677.595 1281.18,693.879 1281.73,742.529 1282.29,721.072 1282.85,737.641 1283.41,699.377 1283.97,713.088 1284.53,715.59 1285.09,729.16 1285.65,759.808 1286.21,739.303 1286.77,704.848 1287.33,655.323 1287.89,639.715 1288.45,657.363 1289,693.798 1289.56,676.599 1290.12,628.595 1290.68,632.113 1291.24,637.175 1291.8,623.049 1292.36,642.286 1292.92,662.133 1293.48,681.137 1294.04,677.691 1294.6,666.975 1295.16,697.083 1295.72,701.106 1296.28,747.506 1296.83,793.869 1297.39,816.506 1297.95,809.865 1298.51,821.501 1299.07,809.447 1299.63,807.865 1300.19,817.935 1300.75,811.433 1301.31,804.341 1301.87,796.106 1302.43,833.451 1302.99,796.883 1303.55,758.414 1304.1,738.922 1304.66,764.8 1305.22,742.023 1305.78,738.002 1306.34,733.696 1306.9,713.964 1307.46,697.837 1308.02,695.552 1308.58,691.188 1309.14,707.47 1309.7,701.378 1310.26,683.781 1310.82,701.582 1311.38,718.393 1311.93,702.889 1312.49,685.203 1313.05,686.101 1313.61,667.215 1314.17,683.241 1314.73,684.273 1315.29,669.123 1315.85,674.384 1316.41,676.42 1316.97,659.804 1317.53,660.483 1318.09,647.036 1318.65,649.612 1319.2,666.054 1319.76,651.248 1320.32,673.59 1320.88,640.495 1321.44,627.814 1322,628.748 1322.56,632.481 1323.12,665.005 1323.68,667.641 1324.24,655.075 1324.8,656.426 1325.36,658.403 1325.92,676.661 1326.47,663.021 1327.03,648.122 1327.59,649.993 1328.15,647.462 1328.71,693.572 1329.27,725.515 1329.83,640.422 1330.39,626.468 1330.95,663.148 1331.51,647.641 1332.07,682.058 1332.63,681.53 1333.19,698.373 1333.75,694.375 1334.3,707.105 1334.86,722.292 1335.42,704.78 1335.98,739.019 1336.54,707.277 1337.1,702.655 1337.66,681.917 1338.22,699.036 1338.78,682.374 1339.34,670.155 1339.9,656.099 1340.46,640.457 1341.02,624.592 1341.57,629.695 1342.13,620.257 1342.69,621.339 1343.25,641.116 1343.81,643.493 1344.37,629.752 1344.93,620.261 1345.49,639.899 1346.05,644.261 1346.61,646.041 1347.17,664.897 1347.73,700.127 1348.29,747.507 1348.84,740.589 1349.4,753.02 1349.96,768.994 1350.52,783.267 1351.08,777.826 1351.64,804.6 1352.2,768.081 1352.76,762.215 1353.32,744.708 1353.88,745.705 1354.44,775.892 1355,769.788 1355.56,766.679 1356.12,762.499 1356.67,739.283 1357.23,703.846 1357.79,673.198 1358.35,673.547 1358.91,658.878 1359.47,645.525 1360.03,662.315 1360.59,659.086 1361.15,658.418 1361.71,707.35 1362.27,676.408 1362.83,677.991 1363.39,646.606 1363.94,661.782 1364.5,659.707 1365.06,675.587 1365.62,691.84 1366.18,674.039 1366.74,673.465 1367.3,657.792 1367.86,657.761 1368.42,658.166 1368.98,627.795 1369.54,634.247 1370.1,635.21 1370.66,638.869 1371.21,639.117 1371.77,623.372 1372.33,625.638 1372.89,644.433 1373.45,646.12 1374.01,647.034 1374.57,667.909 1375.13,636.555 1375.69,658.367 1376.25,642.621 1376.81,645.636 1377.37,650.336 1377.93,614.917 1378.49,637.531 1379.04,673.701 1379.6,659.378 1380.16,675.417 1380.72,676.474 1381.28,674.617 1381.84,673.512 1382.4,704.335 1382.96,701.864 1383.52,700.18 1384.08,696.388 1384.64,745.473 1385.2,727.769 1385.76,707.195 1386.31,690.218 1386.87,673.964 1387.43,629.576 1387.99,616.848 1388.55,622.497 1389.11,608.838 1389.67,615.43 1390.23,654.258 1390.79,685.007 1391.35,686.634 1391.91,717.633 1392.47,715.826 1393.03,728.306 1393.58,709.155 1394.14,704.241 1394.7,720.845 1395.26,701.99 1395.82,704.167 1396.38,701.015 1396.94,700.763 1397.5,669.463 1398.06,672.506 1398.62,660.813 1399.18,625.969 1399.74,632.824 1400.3,667.532 1400.86,671.678 1401.41,625.093 1401.97,645.447 1402.53,633.808 1403.09,666.136 1403.65,632.032 1404.21,600.67 1404.77,604.822 1405.33,557.521 1405.89,548.597 1406.45,555.682 1407.01,595.479 1407.57,596.487 1408.13,599.591 1408.68,590.456 1409.24,611.78 1409.8,635.031 1410.36,624.458 1410.92,642.841 1411.48,613.284 1412.04,631.899 1412.6,652.931 1413.16,654.332 1413.72,620.897 1414.28,621.954 1414.84,627.369 1415.4,648.452 1415.95,650.504 1416.51,666.45 1417.07,671.975 1417.63,659.433 1418.19,693.641 1418.75,724.279 1419.31,736.551 1419.87,732.675 1420.43,714.136 1420.99,679.324 1421.55,681.14 1422.11,697.318 1422.67,712.72 1423.23,725.334 1423.78,694.05 1424.34,674.951 1424.9,693.253 1425.46,659.831 1426.02,711.321 1426.58,757.358 1427.14,719.948 1427.7,718.575 1428.26,716.405 1428.82,698.039 1429.38,648.475 1429.94,616.49 1430.5,618.237 1431.05,668.942 1431.61,685.508 1432.17,686.773 1432.73,668.767 1433.29,618.334 1433.85,636.714 1434.41,622.307 1434.97,605.516 1435.53,592.555 1436.09,633.14 1436.65,654.623 1437.21,675.324 1437.77,644.205 1438.33,665.803 1438.88,695.657 1439.44,695.686 1440,710.068 1440.56,709.487 1441.12,693.745 1441.68,677.986 1442.24,678.108 1442.8,680.717 1443.36,681.731 1443.92,715.595 1444.48,716.92 1445.04,733.278 1445.6,725.227 1446.15,689.959 1446.71,703.664 1447.27,673.808 1447.83,676.135 1448.39,708.141 1448.95,692.222 1449.51,693.424 1450.07,690.93 1450.63,690.851 1451.19,688.109 1451.75,689.07 1452.31,688.237 1452.87,652.621 1453.42,682.674 1453.98,695.673 1454.54,677.86 1455.1,696.112 1455.66,691.635 1456.22,675.777 1456.78,675.587 1457.34,656.254 1457.9,690.195 1458.46,659.016 1459.02,693.108 1459.58,708.729 1460.14,727.378 1460.7,743.589 1461.25,777.763 1461.81,773.911 1462.37,754.07 1462.93,717.554 1463.49,695.851 1464.05,709.092 1464.61,725.245 1465.17,772.467 1465.73,738.434 1466.29,751.129 1466.85,763.444 1467.41,761.261 1467.97,757.131 1468.52,733.586 1469.08,729.112 1469.64,725.649 1470.2,706.87 1470.76,737.701 1471.32,779.871 1471.88,757.611 1472.44,769.654 1473,797.255 1473.56,786.508 1474.12,765.136 1474.68,758.755 1475.24,707.178 1475.79,720.869 1476.35,685.134 1476.91,666.381 1477.47,665.652 1478.03,664.696 1478.59,646.791 1479.15,615.231 1479.71,588.242 1480.27,543.982 1480.83,550.839 1481.39,556.229 1481.95,576.02 1482.51,628.881 1483.07,633.105 1483.62,633.895 1484.18,619.243 1484.74,607.336 1485.3,612.776 1485.86,614.235 1486.42,631.995 1486.98,665.463 1487.54,650.365 1488.1,651.994 1488.66,654.625 1489.22,670.21 1489.78,655.089 1490.34,606.938 1490.89,592.115 1491.45,611.93 1492.01,583.284 1492.57,591.469 1493.13,596.896 1493.69,589.157 1494.25,625.643 1494.81,658.24 1495.37,677.734 1495.93,666.808 1496.49,665.656 1497.05,635.631 1497.61,672.722 1498.16,710.824 1498.72,710.372 1499.28,710.668 1499.84,694.686 1500.4,694.184 1500.96,713.426 1501.52,729.19 1502.08,728.532 1502.64,744.557 1503.2,692.254 1503.76,691.68 1504.32,663.781 1504.88,646.454 1505.44,648.699 1505.99,681.331 1506.55,697.661 1507.11,697.062 1507.67,716.34 1508.23,684.664 1508.79,686.451 1509.35,655.566 1509.91,625.299 1510.47,615.242 1511.03,617.217 1511.59,589.848 1512.15,609.875 1512.71,596.343 1513.26,613.623 1513.82,585.707 1514.38,608.496 1514.94,608.695 1515.5,614.228 1516.06,634.018 1516.62,653.152 1517.18,653.452 1517.74,684.382 1518.3,685.838 1518.86,705.459 1519.42,673.365 1519.98,673.804 1520.53,641.935 1521.09,613.554 1521.65,632.685 1522.21,635.766 1522.77,635.67 1523.33,651.56 1523.89,674.569 1524.45,662.6 1525.01,662.46 1525.57,695.146 1526.13,694.96 1526.69,712.917 1527.25,695.281 1527.81,692.891 1528.36,661.692 1528.92,645.989 1529.48,659.451 1530.04,661.683 1530.6,628.239 1531.16,629.474 1531.72,599.61 1532.28,619.613 1532.84,621.59 1533.4,676.101 1533.96,679.295 1534.52,681.742 1535.08,662.536 1535.63,662.72 1536.19,643.997 1536.75,629.532 1537.31,630.712 1537.87,647.915 1538.43,649.289 1538.99,651.286 1539.55,669.273 1540.11,701.65 1540.67,716.316 1541.23,727.367 1541.79,710.8 1542.35,694.727 1542.9,664.311 1543.46,647.981 1544.02,652.163 1544.58,670.151 1545.14,673.294 1545.7,657.039 1546.26,646.228 1546.82,617.148 1547.38,618.005 1547.94,622.405 1548.5,609.05 1549.06,600.3 1549.62,575.033 1550.18,565.719 1550.73,571.831 1551.29,577.931 1551.85,601.654 1552.41,605.679 1552.97,593.975 1553.53,601.413 1554.09,590.676 1554.65,608.903 1555.21,660.327 1555.77,660.616 1556.33,646.886 1556.89,668.779 1557.45,671.56 1558,687.443 1558.56,637.405 1559.12,655.655 1559.68,641.368 1560.24,658.171 1560.8,658.742 1561.36,644.665 1561.92,661.683 1562.48,677.751 1563.04,660.991 1563.6,674.331 1564.16,673.357 1564.72,674.594 1565.28,691.408 1565.83,708.375 1566.39,691.234 1566.95,686.437 1567.51,701.984 1568.07,734.149 1568.63,678.497 1569.19,657.745 1569.75,707.33 1570.31,721.635 1570.87,723.235 1571.43,755.587 1571.99,786.846 1572.55,781.675 1573.1,794.61 1573.66,792.448 1574.22,803.708 1574.78,797.298 1575.34,808.678 1575.9,834.725 1576.46,846.2 1577.02,839.263 1577.58,849.636 1578.14,852.06 1578.7,826.567 1579.26,817.761 1579.82,795.293 1580.37,742.953 1580.93,737.903 1581.49,718.888 1582.05,733.024 1582.61,710.689 1583.17,712.868 1583.73,724.327 1584.29,673.908 1584.85,641.596 1585.41,657.607 1585.97,659.111 1586.53,693.329 1587.09,678.891 1587.65,664.849 1588.2,665.933 1588.76,669.843 1589.32,685.879 1589.88,702.842 1590.44,731.208 1591,729.619 1591.56,777.266 1592.12,759.943 1592.68,757.541 1593.24,755.987 1593.8,785.521 1594.36,812.956 1594.92,805.414 1595.47,784.983 1596.03,794.365 1596.59,784.866 1597.15,764.57 1597.71,760.203 1598.27,739.602 1598.83,718.727 1599.39,714.593 1599.95,726.226 1600.51,725.403 1601.07,724.414 1601.63,705.631 1602.19,705.648 1602.74,686.475 1603.3,704.286 1603.86,672.032 1604.42,671.089 1604.98,669.444 1605.54,639.106 1606.1,643.073 1606.66,646.915 1607.22,615.608 1607.78,621.829 1608.34,624.016 1608.9,627.208 1609.46,677.865 1610.02,644.213 1610.57,632.154 1611.13,645.756 1611.69,660.541 1612.25,676.769 1612.81,674.327 1613.37,692.358 1613.93,675.562 1614.49,694.316 1615.05,690.78 1615.61,702.435 1616.17,699.138 1616.73,683.021 1617.29,670.582 1617.84,674.309 1618.4,707.506 1618.96,705.036 1619.52,688.316 1620.08,671.547 1620.64,688.886 1621.2,703.258 1621.76,749.42 1622.32,749.535 1622.88,711.778 1623.44,694.209 1624,712.165 1624.56,708.553 1625.11,741.194 1625.67,737.004 1626.23,769.064 1626.79,765.337 1627.35,775.54 1627.91,755.461 1628.47,755.991 1629.03,754.524 1629.59,765.895 1630.15,761.872 1630.71,775.072 1631.27,738.089 1631.83,717.51 1632.39,702.44 1632.94,716.224 1633.5,747.791 1634.06,728.609 1634.62,694.429 1635.18,692.271 1635.74,690.856 1636.3,688.819 1636.86,660.588 1637.42,692.072 1637.98,662.256 1638.54,663.774 1639.1,631.211 1639.66,566.787 1640.21,571.89 1640.77,606.084 1641.33,623.333 1641.89,605.7 1642.45,624.957 1643.01,656.35 1643.57,641.707 1644.13,659.662 1644.69,678.615 1645.25,694.86 1645.81,677.078 1646.37,693.879 1646.93,692.16 1647.48,674.217 1648.04,706.984 1648.6,705.518 1649.16,690.854 1649.72,675.332 1650.28,658.406 1650.84,632.095 1651.4,653.503 1651.96,653.548 1652.52,636.386 1653.08,610.142 1653.64,614.279 1654.2,635.895 1654.76,686.204 1655.31,717.029 1655.87,698.421 1656.43,667.918 1656.99,621.18 1657.55,623.968 1658.11,609.278 1658.67,582.011 1659.23,584.853 1659.79,620.602 1660.35,608.895 1660.91,646.754 1661.47,663.93 1662.03,684.01 1662.58,713.61 1663.14,693.687 1663.7,707.144 1664.26,703.664 1664.82,686.972 1665.38,672.75 1665.94,671.583 1666.5,640.513 1667.06,643.594 1667.62,611.011 1668.18,613.092 1668.74,650.251 1669.3,652.822 1669.85,622.181 1670.41,628.246 1670.97,628.178 1671.53,628.702 1672.09,615.445 1672.65,621.111 1673.21,671.797 1673.77,723.738 1674.33,736.677 1674.89,733.937 1675.45,731.06 1676.01,727.333 1676.57,709.693 1677.13,707.026 1677.68,719.896 1678.24,681.804 1678.8,677.066 1679.36,693.398 1679.92,677.337 1680.48,677.417 1681.04,744 1681.6,770.832 1682.16,716.128 1682.72,697.9 1683.28,717.469 1683.84,731.648 1684.4,727.773 1684.95,708.775 1685.51,709.805 1686.07,741.097 1686.63,723.028 1687.19,704.518 1687.75,703.721 1688.31,701.466 1688.87,732.377 1689.43,761.515 1689.99,791.075 1690.55,784.866 1691.11,794.521 1691.67,825.421 1692.23,801.168 1692.78,794.607 1693.34,804.867 1693.9,793.553 1694.46,834.389 1695.02,795.088 1695.58,772.04 1696.14,783.083 1696.7,777.836 1697.26,802.321 1697.82,795.761 1698.38,818.453 1698.94,795.04 1699.5,710.261 1700.05,709.074 1700.61,723.138 1701.17,703.154 1701.73,636.445 1702.29,703.689 1702.85,715.634 1703.41,698.265 1703.97,664.704 1704.53,665.437 1705.09,647.41 1705.65,602.847 1706.21,653.699 1706.77,621.823 1707.32,608.954 1707.88,595.315 1708.44,566.962 1709,556.53 1709.56,565.978 1710.12,589.333 1710.68,560.816 1711.24,590.572 1711.8,612.562 1712.36,615.684 1712.92,637.085 1713.48,657.987 1714.04,674.501 1714.6,678.468 1715.15,674.84 1715.71,676.29 1716.27,663.078 1716.83,678.611 1717.39,694.614 1717.95,712.043 1718.51,727.1 1719.07,742.494 1719.63,740.358 1720.19,724.168 1720.75,690.835 1721.31,689.656 1721.87,689.214 1722.42,689.771 1722.98,688.939 1723.54,689.618 1724.1,654.419 1724.66,669.954 1725.22,671.145 1725.78,606.736 1726.34,580.733 1726.9,616.652 1727.46,625.151 1728.02,595.581 1728.58,602.954 1729.14,609.241 1729.69,580.275 1730.25,570.608 1730.81,576.51 1731.37,598.142 1731.93,589.212 1732.49,610.981 1733.05,647.01 1733.61,667.017 1734.17,668.321 1734.73,685.698 1735.29,684.765 1735.85,668.475 1736.41,665.087 1736.97,663.58 1737.52,663.035 1738.08,665.589 1738.64,653.028 1739.2,656.516 1739.76,659.828 1740.32,692.518 1740.88,662.214 1741.44,630.834 1742,667.37 1742.56,668.307 1743.12,650.017 1743.68,634.721 1744.24,637.564 1744.79,641.045 1745.35,608.541 1745.91,549.784 1746.47,540.749 1747.03,579.631 1747.59,617.281 1748.15,639.233 1748.71,660.39 1749.27,616.453 1749.83,634.606 1750.39,619.893 1750.95,623.669 1751.51,660.134 1752.06,647.37 1752.62,681.827 1753.18,681.34 1753.74,683.343 1754.3,698.001 1754.86,716.205 1755.42,710.864 1755.98,712.797 1756.54,727.404 1757.1,772.055 1757.66,765.761 1758.22,743.96 1758.78,755.737 1759.34,772.025 1759.89,751.245 1760.45,746.274 1761.01,744.759 1761.57,773.381 1762.13,767.149 1762.69,747.604 1763.25,761.906 1763.81,759.105 1764.37,753.774 1764.93,784.758 1765.49,823.043 1766.05,817.809 1766.61,795.368 1767.16,776.23 1767.72,757.613 1768.28,769.302 1768.84,767.055 1769.4,745.782 1769.96,738.144 1770.52,717.209 1771.08,715.546 1771.64,696.326 1772.2,694.555 1772.76,693.62 1773.32,695.203 1773.88,693.658 1774.43,675.699 1774.99,691.304 1775.55,691.23 1776.11,708.963 1776.67,724.586 1777.23,722.5 1777.79,701.295 1778.35,731.18 1778.91,730.334 1779.47,710.485 1780.03,693.052 1780.59,694.705 1781.15,679.159 1781.71,681.893 1782.26,681.489 1782.82,695.69 1783.38,676.617 1783.94,695.329 1784.5,695.71 1785.06,675.965 1785.62,675.759 1786.18,705.904 1786.74,704.661 1787.3,719.4 1787.86,685.602 1788.42,667.724 1788.98,674.205 1789.53,643.077 1790.09,649.182 1790.65,717.74 1791.21,698.879 1791.77,718.061 1792.33,716.8 1792.89,700.111 1793.45,700.19 1794.01,714.545 1794.57,698.552 1795.13,678.268 1795.69,614.601 1796.25,614.935 1796.8,604.591 1797.36,623.565 1797.92,630.121 1798.48,648.194 1799.04,650.603 1799.6,663.844 1800.16,661.181 1800.72,663.359 1801.28,729.233 1801.84,745.092 1802.4,742.146 1802.96,738.727 1803.52,717.699 1804.08,714.213 1804.63,715.655 1805.19,711.906 1805.75,699.182 1806.31,717.8 1806.87,716.631 1807.43,683.705 1807.99,683.185 1808.55,699.644 1809.11,727.914 1809.67,741.061 1810.23,751.635 1810.79,766.614 1811.35,781.234 1811.9,762.92 1812.46,757.683 1813.02,719.872 1813.58,718.525 1814.14,713.217 1814.7,728.235 1815.26,723.233 1815.82,724.1 1816.38,687.411 1816.94,669.93 1817.5,685.889 1818.06,685.803 1818.62,670.989 1819.18,670.484 1819.73,688.496 1820.29,687.353 1820.85,672.963 1821.41,691.054 1821.97,690.631 1822.53,673.828 1823.09,673.182 1823.65,658.689 1824.21,675.213 1824.77,708.17 1825.33,689.415 1825.89,670.693 1826.45,687.936 1827,673.387 1827.56,642.464 1828.12,643.219 1828.68,625.912 1829.24,629.059 1829.8,631.372 1830.36,623.307 1830.92,607.795 1831.48,609.785 1832.04,626.888 1832.6,615.427 1833.16,668.569 1833.72,686.206 1834.27,685.142 1834.83,703.927 1835.39,734.787 1835.95,717.596 1836.51,717.422 1837.07,717.774 1837.63,736.069 1838.19,750.501 \"/>\n<path clip-path=\"url(#clip753)\" d=\"M720.247 691.285 L720.806 691.285 L721.365 691.285 L721.924 691.285 L722.484 691.285 L723.043 691.285 L723.602 691.285 L724.161 691.285 L724.721 691.285 L725.28 691.285 L725.839 691.285 L726.398 691.285 L726.958 691.285 L727.517 691.285 L728.076 691.285 L728.635 691.285 L729.195 691.285 L729.754 691.285 L730.313 691.285 L730.872 691.285 L731.432 691.285 L731.991 691.285 L732.55 691.285 L733.109 691.285 L733.669 691.285 L734.228 691.285 L734.787 691.285 L735.346 691.285 L735.906 691.285 L736.465 691.285 L737.024 691.285 L737.583 691.285 L738.143 691.285 L738.702 691.285 L739.261 691.285 L739.82 691.285 L740.38 691.285 L740.939 691.285 L741.498 691.285 L742.057 691.285 L742.617 691.285 L743.176 691.285 L743.735 691.285 L744.294 691.285 L744.854 691.285 L745.413 691.285 L745.972 691.285 L746.531 691.285 L747.091 691.285 L747.65 691.285 L748.209 691.285 L748.768 691.285 L749.328 691.285 L749.887 691.285 L750.446 691.285 L751.005 691.285 L751.565 691.285 L752.124 691.285 L752.683 691.285 L753.242 691.285 L753.802 691.285 L754.361 691.285 L754.92 691.285 L755.479 691.285 L756.039 691.285 L756.598 691.285 L757.157 691.285 L757.716 691.285 L758.276 691.285 L758.835 691.285 L759.394 691.285 L759.953 691.285 L760.513 691.285 L761.072 691.285 L761.631 691.285 L762.19 691.285 L762.75 691.285 L763.309 691.285 L763.868 691.285 L764.427 691.285 L764.987 691.285 L765.546 691.285 L766.105 691.285 L766.664 691.285 L767.224 691.285 L767.783 691.285 L768.342 691.285 L768.901 691.285 L769.461 691.285 L770.02 691.285 L770.579 691.285 L771.138 691.285 L771.698 691.285 L772.257 691.285 L772.816 691.285 L773.375 691.285 L773.935 691.285 L774.494 691.285 L775.053 691.285 L775.612 691.285 L776.172 691.285 L776.731 691.285 L777.29 691.285 L777.849 691.285 L778.409 691.285 L778.968 691.285 L779.527 691.285 L780.086 691.285 L780.646 691.285 L781.205 691.285 L781.764 691.285 L782.323 691.285 L782.883 691.285 L783.442 691.285 L784.001 691.285 L784.56 691.285 L785.12 691.285 L785.679 691.285 L786.238 691.285 L786.797 691.285 L787.357 691.285 L787.916 691.285 L788.475 691.285 L789.034 691.285 L789.594 691.285 L790.153 691.285 L790.712 691.285 L791.271 691.285 L791.831 691.285 L792.39 691.285 L792.949 691.285 L793.508 691.285 L794.068 691.285 L794.627 691.285 L795.186 691.285 L795.745 691.285 L796.305 691.285 L796.864 691.285 L797.423 691.285 L797.982 691.285 L798.542 691.285 L799.101 691.285 L799.66 691.285 L800.219 691.285 L800.779 691.285 L801.338 691.285 L801.897 691.285 L802.456 691.285 L803.016 691.285 L803.575 691.285 L804.134 691.285 L804.693 691.285 L805.253 691.285 L805.812 691.285 L806.371 691.285 L806.931 691.285 L807.49 691.285 L808.049 691.285 L808.608 691.285 L809.168 691.285 L809.727 691.285 L810.286 691.285 L810.845 691.285 L811.405 691.285 L811.964 691.285 L812.523 691.285 L813.082 691.285 L813.642 691.285 L814.201 691.285 L814.76 691.285 L815.319 691.285 L815.879 691.285 L816.438 691.285 L816.997 691.285 L817.556 691.285 L818.116 691.285 L818.675 691.285 L819.234 691.285 L819.793 691.285 L820.353 691.285 L820.912 691.285 L821.471 691.285 L822.03 691.285 L822.59 691.285 L823.149 691.285 L823.708 691.285 L824.267 691.285 L824.827 691.285 L825.386 691.285 L825.945 691.285 L826.504 691.285 L827.064 691.285 L827.623 691.285 L828.182 691.285 L828.741 691.285 L829.301 691.285 L829.86 691.285 L830.419 691.285 L830.978 691.285 L831.538 691.285 L832.097 691.285 L832.656 691.285 L833.215 691.285 L833.775 691.285 L834.334 691.285 L834.893 691.285 L835.452 691.285 L836.012 691.285 L836.571 691.285 L837.13 691.285 L837.689 691.285 L838.249 691.285 L838.808 691.285 L839.367 691.285 L839.926 691.285 L840.486 691.285 L841.045 691.285 L841.604 691.285 L842.163 691.285 L842.723 691.285 L843.282 691.285 L843.841 691.285 L844.4 691.285 L844.96 691.285 L845.519 691.285 L846.078 691.285 L846.637 691.285 L847.197 691.285 L847.756 691.285 L848.315 691.285 L848.874 691.285 L849.434 691.285 L849.993 691.285 L850.552 691.285 L851.111 691.285 L851.671 691.285 L852.23 691.285 L852.789 691.285 L853.348 691.285 L853.908 691.285 L854.467 691.285 L855.026 691.285 L855.585 691.285 L856.145 691.285 L856.704 691.285 L857.263 691.285 L857.822 691.285 L858.382 691.285 L858.941 691.285 L859.5 691.285 L860.059 691.285 L860.619 691.285 L861.178 691.285 L861.737 691.285 L862.296 691.285 L862.856 691.285 L863.415 691.285 L863.974 691.285 L864.533 691.285 L865.093 691.285 L865.652 691.285 L866.211 691.285 L866.77 691.285 L867.33 691.285 L867.889 691.285 L868.448 691.285 L869.007 691.285 L869.567 691.285 L870.126 691.285 L870.685 691.285 L871.244 691.285 L871.804 691.285 L872.363 691.285 L872.922 691.285 L873.481 691.285 L874.041 691.285 L874.6 691.285 L875.159 691.285 L875.718 691.285 L876.278 691.285 L876.837 691.285 L877.396 691.285 L877.955 691.285 L878.515 691.285 L879.074 691.285 L879.633 691.285 L880.192 691.285 L880.752 691.285 L881.311 691.285 L881.87 691.285 L882.429 691.285 L882.989 691.285 L883.548 691.285 L884.107 691.285 L884.666 691.285 L885.226 691.285 L885.785 691.285 L886.344 691.285 L886.903 691.285 L887.463 691.285 L888.022 691.285 L888.581 691.285 L889.14 691.285 L889.7 691.285 L890.259 691.285 L890.818 691.285 L891.377 691.285 L891.937 691.285 L892.496 691.285 L893.055 691.285 L893.614 691.285 L894.174 691.285 L894.733 691.285 L895.292 691.285 L895.851 691.285 L896.411 691.285 L896.97 691.285 L897.529 691.285 L898.088 691.285 L898.648 691.285 L899.207 691.285 L899.766 691.285 L900.325 691.285 L900.885 691.285 L901.444 691.285 L902.003 691.285 L902.562 691.285 L903.122 691.285 L903.681 691.285 L904.24 691.285 L904.799 691.285 L905.359 691.285 L905.918 691.285 L906.477 691.285 L907.036 691.285 L907.596 691.285 L908.155 691.285 L908.714 691.285 L909.273 691.285 L909.833 691.285 L910.392 691.285 L910.951 691.285 L911.51 691.285 L912.07 691.285 L912.629 691.285 L913.188 691.285 L913.747 691.285 L914.307 691.285 L914.866 691.285 L915.425 691.285 L915.984 691.285 L916.544 691.285 L917.103 691.285 L917.662 691.285 L918.221 691.285 L918.781 691.285 L919.34 691.285 L919.899 691.285 L920.458 691.285 L921.018 691.285 L921.577 691.285 L922.136 691.285 L922.695 691.285 L923.255 691.285 L923.814 691.285 L924.373 691.285 L924.932 691.285 L925.492 691.285 L926.051 691.285 L926.61 691.285 L927.169 691.285 L927.729 691.285 L928.288 691.285 L928.847 691.285 L929.406 691.285 L929.966 691.285 L930.525 691.285 L931.084 691.285 L931.644 691.285 L932.203 691.285 L932.762 691.285 L933.321 691.285 L933.881 691.285 L934.44 691.285 L934.999 691.285 L935.558 691.285 L936.118 691.285 L936.677 691.285 L937.236 691.285 L937.795 691.285 L938.355 691.285 L938.914 691.285 L939.473 691.285 L940.032 691.285 L940.592 691.285 L941.151 691.285 L941.71 691.285 L942.269 691.285 L942.829 691.285 L943.388 691.285 L943.947 691.285 L944.506 691.285 L945.066 691.285 L945.625 691.285 L946.184 691.285 L946.743 691.285 L947.303 691.285 L947.862 691.285 L948.421 691.285 L948.98 691.285 L949.54 691.285 L950.099 691.285 L950.658 691.285 L951.217 691.285 L951.777 691.285 L952.336 691.285 L952.895 691.285 L953.454 691.285 L954.014 691.285 L954.573 691.285 L955.132 691.285 L955.691 691.285 L956.251 691.285 L956.81 691.285 L957.369 691.285 L957.928 691.285 L958.488 691.285 L959.047 691.285 L959.606 691.285 L960.165 691.285 L960.725 691.285 L961.284 691.285 L961.843 691.285 L962.402 691.285 L962.962 691.285 L963.521 691.285 L964.08 691.285 L964.639 691.285 L965.199 691.285 L965.758 691.285 L966.317 691.285 L966.876 691.285 L967.436 691.285 L967.995 691.285 L968.554 691.285 L969.113 691.285 L969.673 691.285 L970.232 691.285 L970.791 691.285 L971.35 691.285 L971.91 691.285 L972.469 691.285 L973.028 691.285 L973.587 691.285 L974.147 691.285 L974.706 691.285 L975.265 691.285 L975.824 691.285 L976.384 691.285 L976.943 691.285 L977.502 691.285 L978.061 691.285 L978.621 691.285 L979.18 691.285 L979.739 691.285 L980.298 691.285 L980.858 691.285 L981.417 691.285 L981.976 691.285 L982.535 691.285 L983.095 691.285 L983.654 691.285 L984.213 691.285 L984.772 691.285 L985.332 691.285 L985.891 691.285 L986.45 691.285 L987.009 691.285 L987.569 691.285 L988.128 691.285 L988.687 691.285 L989.246 691.285 L989.806 691.285 L990.365 691.285 L990.924 691.285 L991.483 691.285 L992.043 691.285 L992.602 691.285 L993.161 691.285 L993.72 691.285 L994.28 691.285 L994.839 691.285 L995.398 691.285 L995.957 691.285 L996.517 691.285 L997.076 691.285 L997.635 691.285 L998.194 691.285 L998.754 691.285 L999.313 691.285 L999.872 691.285 L1000.43 691.285 L1000.99 691.285 L1001.55 691.285 L1002.11 691.285 L1002.67 691.285 L1003.23 691.285 L1003.79 691.285 L1004.35 691.285 L1004.91 691.285 L1005.46 691.285 L1006.02 691.285 L1006.58 691.285 L1007.14 691.285 L1007.7 691.285 L1008.26 691.285 L1008.82 691.285 L1009.38 691.285 L1009.94 691.285 L1010.5 691.285 L1011.06 691.285 L1011.62 691.285 L1012.18 691.285 L1012.73 691.285 L1013.29 691.285 L1013.85 691.285 L1014.41 691.285 L1014.97 691.285 L1015.53 691.285 L1016.09 691.285 L1016.65 691.285 L1017.21 691.285 L1017.77 691.285 L1018.33 691.285 L1018.89 691.285 L1019.45 691.285 L1020.01 691.285 L1020.56 691.285 L1021.12 691.285 L1021.68 691.285 L1022.24 691.285 L1022.8 691.285 L1023.36 691.285 L1023.92 691.285 L1024.48 691.285 L1025.04 691.285 L1025.6 691.285 L1026.16 691.285 L1026.72 691.285 L1027.28 691.285 L1027.83 691.285 L1028.39 691.285 L1028.95 691.285 L1029.51 691.285 L1030.07 691.285 L1030.63 691.285 L1031.19 691.285 L1031.75 691.285 L1032.31 691.285 L1032.87 691.285 L1033.43 691.285 L1033.99 691.285 L1034.55 691.285 L1035.1 691.285 L1035.66 691.285 L1036.22 691.285 L1036.78 691.285 L1037.34 691.285 L1037.9 691.285 L1038.46 691.285 L1039.02 691.285 L1039.58 691.285 L1040.14 691.285 L1040.7 691.285 L1041.26 691.285 L1041.82 691.285 L1042.38 691.285 L1042.93 691.285 L1043.49 691.285 L1044.05 691.285 L1044.61 691.285 L1045.17 691.285 L1045.73 691.285 L1046.29 691.285 L1046.85 691.285 L1047.41 691.285 L1047.97 691.285 L1048.53 691.285 L1049.09 691.285 L1049.65 691.285 L1050.2 691.285 L1050.76 691.285 L1051.32 691.285 L1051.88 691.285 L1052.44 691.285 L1053 691.285 L1053.56 691.285 L1054.12 691.285 L1054.68 691.285 L1055.24 691.285 L1055.8 691.285 L1056.36 691.285 L1056.92 691.285 L1057.48 691.285 L1058.03 691.285 L1058.59 691.285 L1059.15 691.285 L1059.71 691.285 L1060.27 691.285 L1060.83 691.285 L1061.39 691.285 L1061.95 691.285 L1062.51 691.285 L1063.07 691.285 L1063.63 691.285 L1064.19 691.285 L1064.75 691.285 L1065.3 691.285 L1065.86 691.285 L1066.42 691.285 L1066.98 691.285 L1067.54 691.285 L1068.1 691.285 L1068.66 691.285 L1069.22 691.285 L1069.78 691.285 L1070.34 691.285 L1070.9 691.285 L1071.46 691.285 L1072.02 691.285 L1072.57 691.285 L1073.13 691.285 L1073.69 691.285 L1074.25 691.285 L1074.81 691.285 L1075.37 691.285 L1075.93 691.285 L1076.49 691.285 L1077.05 691.285 L1077.61 691.285 L1078.17 691.285 L1078.73 691.285 L1079.29 691.285 L1079.85 691.285 L1080.4 691.285 L1080.96 691.285 L1081.52 691.285 L1082.08 691.285 L1082.64 691.285 L1083.2 691.285 L1083.76 691.285 L1084.32 691.285 L1084.88 691.285 L1085.44 691.285 L1086 691.285 L1086.56 691.285 L1087.12 691.285 L1087.67 691.285 L1088.23 691.285 L1088.79 691.285 L1089.35 691.285 L1089.91 691.285 L1090.47 691.285 L1091.03 691.285 L1091.59 691.285 L1092.15 691.285 L1092.71 691.285 L1093.27 691.285 L1093.83 691.285 L1094.39 691.285 L1094.94 691.285 L1095.5 691.285 L1096.06 691.285 L1096.62 691.285 L1097.18 691.285 L1097.74 691.285 L1098.3 691.285 L1098.86 691.285 L1099.42 691.285 L1099.98 691.285 L1100.54 691.285 L1101.1 691.285 L1101.66 691.285 L1102.22 691.285 L1102.77 691.285 L1103.33 691.285 L1103.89 691.285 L1104.45 691.285 L1105.01 691.285 L1105.57 691.285 L1106.13 691.285 L1106.69 691.285 L1107.25 691.285 L1107.81 691.285 L1108.37 691.285 L1108.93 691.285 L1109.49 691.285 L1110.04 691.285 L1110.6 691.285 L1111.16 691.285 L1111.72 691.285 L1112.28 691.285 L1112.84 691.285 L1113.4 691.285 L1113.96 691.285 L1114.52 691.285 L1115.08 691.285 L1115.64 691.285 L1116.2 691.285 L1116.76 691.285 L1117.31 691.285 L1117.87 691.285 L1118.43 691.285 L1118.99 691.285 L1119.55 691.285 L1120.11 691.285 L1120.67 691.285 L1121.23 691.285 L1121.79 691.285 L1122.35 691.285 L1122.91 691.285 L1123.47 691.285 L1124.03 691.285 L1124.59 691.285 L1125.14 691.285 L1125.7 691.285 L1126.26 691.285 L1126.82 691.285 L1127.38 691.285 L1127.94 691.285 L1128.5 691.285 L1129.06 691.285 L1129.62 691.285 L1130.18 691.285 L1130.74 691.285 L1131.3 691.285 L1131.86 691.285 L1132.41 691.285 L1132.97 691.285 L1133.53 691.285 L1134.09 691.285 L1134.65 691.285 L1135.21 691.285 L1135.77 691.285 L1136.33 691.285 L1136.89 691.285 L1137.45 691.285 L1138.01 691.285 L1138.57 691.285 L1139.13 691.285 L1139.68 691.285 L1140.24 691.285 L1140.8 691.285 L1141.36 691.285 L1141.92 691.285 L1142.48 691.285 L1143.04 691.285 L1143.6 691.285 L1144.16 691.285 L1144.72 691.285 L1145.28 691.285 L1145.84 691.285 L1146.4 691.285 L1146.96 691.285 L1147.51 691.285 L1148.07 691.285 L1148.63 691.285 L1149.19 691.285 L1149.75 691.285 L1150.31 691.285 L1150.87 691.285 L1151.43 691.285 L1151.99 691.285 L1152.55 691.285 L1153.11 691.285 L1153.67 691.285 L1154.23 691.285 L1154.78 691.285 L1155.34 691.285 L1155.9 691.285 L1156.46 691.285 L1157.02 691.285 L1157.58 691.285 L1158.14 691.285 L1158.7 691.285 L1159.26 691.285 L1159.82 691.285 L1160.38 691.285 L1160.94 691.285 L1161.5 691.285 L1162.05 691.285 L1162.61 691.285 L1163.17 691.285 L1163.73 691.285 L1164.29 691.285 L1164.85 691.285 L1165.41 691.285 L1165.97 691.285 L1166.53 691.285 L1167.09 691.285 L1167.65 691.285 L1168.21 691.285 L1168.77 691.285 L1169.33 691.285 L1169.88 691.285 L1170.44 691.285 L1171 691.285 L1171.56 691.285 L1172.12 691.285 L1172.68 691.285 L1173.24 691.285 L1173.8 691.285 L1174.36 691.285 L1174.92 691.285 L1175.48 691.285 L1176.04 691.285 L1176.6 691.285 L1177.15 691.285 L1177.71 691.285 L1178.27 691.285 L1178.83 691.285 L1179.39 691.285 L1179.95 691.285 L1180.51 691.285 L1181.07 691.285 L1181.63 691.285 L1182.19 691.285 L1182.75 691.285 L1183.31 691.285 L1183.87 691.285 L1184.43 691.285 L1184.98 691.285 L1185.54 691.285 L1186.1 691.285 L1186.66 691.285 L1187.22 691.285 L1187.78 691.285 L1188.34 691.285 L1188.9 691.285 L1189.46 691.285 L1190.02 691.285 L1190.58 691.285 L1191.14 691.285 L1191.7 691.285 L1192.25 691.285 L1192.81 691.285 L1193.37 691.285 L1193.93 691.285 L1194.49 691.285 L1195.05 691.285 L1195.61 691.285 L1196.17 691.285 L1196.73 691.285 L1197.29 691.285 L1197.85 691.285 L1198.41 691.285 L1198.97 691.285 L1199.52 691.285 L1200.08 691.285 L1200.64 691.285 L1201.2 691.285 L1201.76 691.285 L1202.32 691.285 L1202.88 691.285 L1203.44 691.285 L1204 691.285 L1204.56 691.285 L1205.12 691.285 L1205.68 691.285 L1206.24 691.285 L1206.8 691.285 L1207.35 691.285 L1207.91 691.285 L1208.47 691.285 L1209.03 691.285 L1209.59 691.285 L1210.15 691.285 L1210.71 691.285 L1211.27 691.285 L1211.83 691.285 L1212.39 691.285 L1212.95 691.285 L1213.51 691.285 L1214.07 691.285 L1214.62 691.285 L1215.18 691.285 L1215.74 691.285 L1216.3 691.285 L1216.86 691.285 L1217.42 691.285 L1217.98 691.285 L1218.54 691.285 L1219.1 691.285 L1219.66 691.285 L1220.22 691.285 L1220.78 691.285 L1221.34 691.285 L1221.89 691.285 L1222.45 691.285 L1223.01 691.285 L1223.57 691.285 L1224.13 691.285 L1224.69 691.285 L1225.25 691.285 L1225.81 691.285 L1226.37 691.285 L1226.93 691.285 L1227.49 691.285 L1228.05 691.285 L1228.61 691.285 L1229.17 691.285 L1229.72 691.285 L1230.28 691.285 L1230.84 691.285 L1231.4 691.285 L1231.96 691.285 L1232.52 691.285 L1233.08 691.285 L1233.64 691.285 L1234.2 691.285 L1234.76 691.285 L1235.32 691.285 L1235.88 691.285 L1236.44 691.285 L1236.99 691.285 L1237.55 691.285 L1238.11 691.285 L1238.67 691.285 L1239.23 691.285 L1239.79 691.285 L1240.35 691.285 L1240.91 691.285 L1241.47 691.285 L1242.03 691.285 L1242.59 691.285 L1243.15 691.285 L1243.71 691.285 L1244.26 691.285 L1244.82 691.285 L1245.38 691.285 L1245.94 691.285 L1246.5 691.285 L1247.06 691.285 L1247.62 691.285 L1248.18 691.285 L1248.74 691.285 L1249.3 691.285 L1249.86 691.285 L1250.42 691.285 L1250.98 691.285 L1251.54 691.285 L1252.09 691.285 L1252.65 691.285 L1253.21 691.285 L1253.77 691.285 L1254.33 691.285 L1254.89 691.285 L1255.45 691.285 L1256.01 691.285 L1256.57 691.285 L1257.13 691.285 L1257.69 691.285 L1258.25 691.285 L1258.81 691.285 L1259.36 691.285 L1259.92 691.285 L1260.48 691.285 L1261.04 691.285 L1261.6 691.285 L1262.16 691.285 L1262.72 691.285 L1263.28 691.285 L1263.84 691.285 L1264.4 691.285 L1264.96 691.285 L1265.52 691.285 L1266.08 691.285 L1266.63 691.285 L1267.19 691.285 L1267.75 691.285 L1268.31 691.285 L1268.87 691.285 L1269.43 691.285 L1269.99 691.285 L1270.55 691.285 L1271.11 691.285 L1271.67 691.285 L1272.23 691.285 L1272.79 691.285 L1273.35 691.285 L1273.91 691.285 L1274.46 691.285 L1275.02 691.285 L1275.58 691.285 L1276.14 691.285 L1276.7 691.285 L1277.26 691.285 L1277.82 691.285 L1278.38 691.285 L1278.94 691.285 L1279.5 691.285 L1280.06 691.285 L1280.62 691.285 L1281.18 691.285 L1281.73 691.285 L1282.29 691.285 L1282.85 691.285 L1283.41 691.285 L1283.97 691.285 L1284.53 691.285 L1285.09 691.285 L1285.65 691.285 L1286.21 691.285 L1286.77 691.285 L1287.33 691.285 L1287.89 691.285 L1288.45 691.285 L1289 691.285 L1289.56 691.285 L1290.12 691.285 L1290.68 691.285 L1291.24 691.285 L1291.8 691.285 L1292.36 691.285 L1292.92 691.285 L1293.48 691.285 L1294.04 691.285 L1294.6 691.285 L1295.16 691.285 L1295.72 691.285 L1296.28 691.285 L1296.83 691.285 L1297.39 691.285 L1297.95 691.285 L1298.51 691.285 L1299.07 691.285 L1299.63 691.285 L1300.19 691.285 L1300.75 691.285 L1301.31 691.285 L1301.87 691.285 L1302.43 691.285 L1302.99 691.285 L1303.55 691.285 L1304.1 691.285 L1304.66 691.285 L1305.22 691.285 L1305.78 691.285 L1306.34 691.285 L1306.9 691.285 L1307.46 691.285 L1308.02 691.285 L1308.58 691.285 L1309.14 691.285 L1309.7 691.285 L1310.26 691.285 L1310.82 691.285 L1311.38 691.285 L1311.93 691.285 L1312.49 691.285 L1313.05 691.285 L1313.61 691.285 L1314.17 691.285 L1314.73 691.285 L1315.29 691.285 L1315.85 691.285 L1316.41 691.285 L1316.97 691.285 L1317.53 691.285 L1318.09 691.285 L1318.65 691.285 L1319.2 691.285 L1319.76 691.285 L1320.32 691.285 L1320.88 691.285 L1321.44 691.285 L1322 691.285 L1322.56 691.285 L1323.12 691.285 L1323.68 691.285 L1324.24 691.285 L1324.8 691.285 L1325.36 691.285 L1325.92 691.285 L1326.47 691.285 L1327.03 691.285 L1327.59 691.285 L1328.15 691.285 L1328.71 691.285 L1329.27 691.285 L1329.83 691.285 L1330.39 691.285 L1330.95 691.285 L1331.51 691.285 L1332.07 691.285 L1332.63 691.285 L1333.19 691.285 L1333.75 691.285 L1334.3 691.285 L1334.86 691.285 L1335.42 691.285 L1335.98 691.285 L1336.54 691.285 L1337.1 691.285 L1337.66 691.285 L1338.22 691.285 L1338.78 691.285 L1339.34 691.285 L1339.9 691.285 L1340.46 691.285 L1341.02 691.285 L1341.57 691.285 L1342.13 691.285 L1342.69 691.285 L1343.25 691.285 L1343.81 691.285 L1344.37 691.285 L1344.93 691.285 L1345.49 691.285 L1346.05 691.285 L1346.61 691.285 L1347.17 691.285 L1347.73 691.285 L1348.29 691.285 L1348.84 691.285 L1349.4 691.285 L1349.96 691.285 L1350.52 691.285 L1351.08 691.285 L1351.64 691.285 L1352.2 691.285 L1352.76 691.285 L1353.32 691.285 L1353.88 691.285 L1354.44 691.285 L1355 691.285 L1355.56 691.285 L1356.12 691.285 L1356.67 691.285 L1357.23 691.285 L1357.79 691.285 L1358.35 691.285 L1358.91 691.285 L1359.47 691.285 L1360.03 691.285 L1360.59 691.285 L1361.15 691.285 L1361.71 691.285 L1362.27 691.285 L1362.83 691.285 L1363.39 691.285 L1363.94 691.285 L1364.5 691.285 L1365.06 691.285 L1365.62 691.285 L1366.18 691.285 L1366.74 691.285 L1367.3 691.285 L1367.86 691.285 L1368.42 691.285 L1368.98 691.285 L1369.54 691.285 L1370.1 691.285 L1370.66 691.285 L1371.21 691.285 L1371.77 691.285 L1372.33 691.285 L1372.89 691.285 L1373.45 691.285 L1374.01 691.285 L1374.57 691.285 L1375.13 691.285 L1375.69 691.285 L1376.25 691.285 L1376.81 691.285 L1377.37 691.285 L1377.93 691.285 L1378.49 691.285 L1379.04 691.285 L1379.6 691.285 L1380.16 691.285 L1380.72 691.285 L1381.28 691.285 L1381.84 691.285 L1382.4 691.285 L1382.96 691.285 L1383.52 691.285 L1384.08 691.285 L1384.64 691.285 L1385.2 691.285 L1385.76 691.285 L1386.31 691.285 L1386.87 691.285 L1387.43 691.285 L1387.99 691.285 L1388.55 691.285 L1389.11 691.285 L1389.67 691.285 L1390.23 691.285 L1390.79 691.285 L1391.35 691.285 L1391.91 691.285 L1392.47 691.285 L1393.03 691.285 L1393.58 691.285 L1394.14 691.285 L1394.7 691.285 L1395.26 691.285 L1395.82 691.285 L1396.38 691.285 L1396.94 691.285 L1397.5 691.285 L1398.06 691.285 L1398.62 691.285 L1399.18 691.285 L1399.74 691.285 L1400.3 691.285 L1400.86 691.285 L1401.41 691.285 L1401.97 691.285 L1402.53 691.285 L1403.09 691.285 L1403.65 691.285 L1404.21 691.285 L1404.77 691.285 L1405.33 691.285 L1405.89 691.285 L1406.45 691.285 L1407.01 691.285 L1407.57 691.285 L1408.13 691.285 L1408.68 691.285 L1409.24 691.285 L1409.8 691.285 L1410.36 691.285 L1410.92 691.285 L1411.48 691.285 L1412.04 691.285 L1412.6 691.285 L1413.16 691.285 L1413.72 691.285 L1414.28 691.285 L1414.84 691.285 L1415.4 691.285 L1415.95 691.285 L1416.51 691.285 L1417.07 691.285 L1417.63 691.285 L1418.19 691.285 L1418.75 691.285 L1419.31 691.285 L1419.87 691.285 L1420.43 691.285 L1420.99 691.285 L1421.55 691.285 L1422.11 691.285 L1422.67 691.285 L1423.23 691.285 L1423.78 691.285 L1424.34 691.285 L1424.9 691.285 L1425.46 691.285 L1426.02 691.285 L1426.58 691.285 L1427.14 691.285 L1427.7 691.285 L1428.26 691.285 L1428.82 691.285 L1429.38 691.285 L1429.94 691.285 L1430.5 691.285 L1431.05 691.285 L1431.61 691.285 L1432.17 691.285 L1432.73 691.285 L1433.29 691.285 L1433.85 691.285 L1434.41 691.285 L1434.97 691.285 L1435.53 691.285 L1436.09 691.285 L1436.65 691.285 L1437.21 691.285 L1437.77 691.285 L1438.33 691.285 L1438.88 691.285 L1439.44 691.285 L1440 691.285 L1440.56 691.285 L1441.12 691.285 L1441.68 691.285 L1442.24 691.285 L1442.8 691.285 L1443.36 691.285 L1443.92 691.285 L1444.48 691.285 L1445.04 691.285 L1445.6 691.285 L1446.15 691.285 L1446.71 691.285 L1447.27 691.285 L1447.83 691.285 L1448.39 691.285 L1448.95 691.285 L1449.51 691.285 L1450.07 691.285 L1450.63 691.285 L1451.19 691.285 L1451.75 691.285 L1452.31 691.285 L1452.87 691.285 L1453.42 691.285 L1453.98 691.285 L1454.54 691.285 L1455.1 691.285 L1455.66 691.285 L1456.22 691.285 L1456.78 691.285 L1457.34 691.285 L1457.9 691.285 L1458.46 691.285 L1459.02 691.285 L1459.58 691.285 L1460.14 691.285 L1460.7 691.285 L1461.25 691.285 L1461.81 691.285 L1462.37 691.285 L1462.93 691.285 L1463.49 691.285 L1464.05 691.285 L1464.61 691.285 L1465.17 691.285 L1465.73 691.285 L1466.29 691.285 L1466.85 691.285 L1467.41 691.285 L1467.97 691.285 L1468.52 691.285 L1469.08 691.285 L1469.64 691.285 L1470.2 691.285 L1470.76 691.285 L1471.32 691.285 L1471.88 691.285 L1472.44 691.285 L1473 691.285 L1473.56 691.285 L1474.12 691.285 L1474.68 691.285 L1475.24 691.285 L1475.79 691.285 L1476.35 691.285 L1476.91 691.285 L1477.47 691.285 L1478.03 691.285 L1478.59 691.285 L1479.15 691.285 L1479.71 691.285 L1480.27 691.285 L1480.83 691.285 L1481.39 691.285 L1481.95 691.285 L1482.51 691.285 L1483.07 691.285 L1483.62 691.285 L1484.18 691.285 L1484.74 691.285 L1485.3 691.285 L1485.86 691.285 L1486.42 691.285 L1486.98 691.285 L1487.54 691.285 L1488.1 691.285 L1488.66 691.285 L1489.22 691.285 L1489.78 691.285 L1490.34 691.285 L1490.89 691.285 L1491.45 691.285 L1492.01 691.285 L1492.57 691.285 L1493.13 691.285 L1493.69 691.285 L1494.25 691.285 L1494.81 691.285 L1495.37 691.285 L1495.93 691.285 L1496.49 691.285 L1497.05 691.285 L1497.61 691.285 L1498.16 691.285 L1498.72 691.285 L1499.28 691.285 L1499.84 691.285 L1500.4 691.285 L1500.96 691.285 L1501.52 691.285 L1502.08 691.285 L1502.64 691.285 L1503.2 691.285 L1503.76 691.285 L1504.32 691.285 L1504.88 691.285 L1505.44 691.285 L1505.99 691.285 L1506.55 691.285 L1507.11 691.285 L1507.67 691.285 L1508.23 691.285 L1508.79 691.285 L1509.35 691.285 L1509.91 691.285 L1510.47 691.285 L1511.03 691.285 L1511.59 691.285 L1512.15 691.285 L1512.71 691.285 L1513.26 691.285 L1513.82 691.285 L1514.38 691.285 L1514.94 691.285 L1515.5 691.285 L1516.06 691.285 L1516.62 691.285 L1517.18 691.285 L1517.74 691.285 L1518.3 691.285 L1518.86 691.285 L1519.42 691.285 L1519.98 691.285 L1520.53 691.285 L1521.09 691.285 L1521.65 691.285 L1522.21 691.285 L1522.77 691.285 L1523.33 691.285 L1523.89 691.285 L1524.45 691.285 L1525.01 691.285 L1525.57 691.285 L1526.13 691.285 L1526.69 691.285 L1527.25 691.285 L1527.81 691.285 L1528.36 691.285 L1528.92 691.285 L1529.48 691.285 L1530.04 691.285 L1530.6 691.285 L1531.16 691.285 L1531.72 691.285 L1532.28 691.285 L1532.84 691.285 L1533.4 691.285 L1533.96 691.285 L1534.52 691.285 L1535.08 691.285 L1535.63 691.285 L1536.19 691.285 L1536.75 691.285 L1537.31 691.285 L1537.87 691.285 L1538.43 691.285 L1538.99 691.285 L1539.55 691.285 L1540.11 691.285 L1540.67 691.285 L1541.23 691.285 L1541.79 691.285 L1542.35 691.285 L1542.9 691.285 L1543.46 691.285 L1544.02 691.285 L1544.58 691.285 L1545.14 691.285 L1545.7 691.285 L1546.26 691.285 L1546.82 691.285 L1547.38 691.285 L1547.94 691.285 L1548.5 691.285 L1549.06 691.285 L1549.62 691.285 L1550.18 691.285 L1550.73 691.285 L1551.29 691.285 L1551.85 691.285 L1552.41 691.285 L1552.97 691.285 L1553.53 691.285 L1554.09 691.285 L1554.65 691.285 L1555.21 691.285 L1555.77 691.285 L1556.33 691.285 L1556.89 691.285 L1557.45 691.285 L1558 691.285 L1558.56 691.285 L1559.12 691.285 L1559.68 691.285 L1560.24 691.285 L1560.8 691.285 L1561.36 691.285 L1561.92 691.285 L1562.48 691.285 L1563.04 691.285 L1563.6 691.285 L1564.16 691.285 L1564.72 691.285 L1565.28 691.285 L1565.83 691.285 L1566.39 691.285 L1566.95 691.285 L1567.51 691.285 L1568.07 691.285 L1568.63 691.285 L1569.19 691.285 L1569.75 691.285 L1570.31 691.285 L1570.87 691.285 L1571.43 691.285 L1571.99 691.285 L1572.55 691.285 L1573.1 691.285 L1573.66 691.285 L1574.22 691.285 L1574.78 691.285 L1575.34 691.285 L1575.9 691.285 L1576.46 691.285 L1577.02 691.285 L1577.58 691.285 L1578.14 691.285 L1578.7 691.285 L1579.26 691.285 L1579.82 691.285 L1580.37 691.285 L1580.93 691.285 L1581.49 691.285 L1582.05 691.285 L1582.61 691.285 L1583.17 691.285 L1583.73 691.285 L1584.29 691.285 L1584.85 691.285 L1585.41 691.285 L1585.97 691.285 L1586.53 691.285 L1587.09 691.285 L1587.65 691.285 L1588.2 691.285 L1588.76 691.285 L1589.32 691.285 L1589.88 691.285 L1590.44 691.285 L1591 691.285 L1591.56 691.285 L1592.12 691.285 L1592.68 691.285 L1593.24 691.285 L1593.8 691.285 L1594.36 691.285 L1594.92 691.285 L1595.47 691.285 L1596.03 691.285 L1596.59 691.285 L1597.15 691.285 L1597.71 691.285 L1598.27 691.285 L1598.83 691.285 L1599.39 691.285 L1599.95 691.285 L1600.51 691.285 L1601.07 691.285 L1601.63 691.285 L1602.19 691.285 L1602.74 691.285 L1603.3 691.285 L1603.86 691.285 L1604.42 691.285 L1604.98 691.285 L1605.54 691.285 L1606.1 691.285 L1606.66 691.285 L1607.22 691.285 L1607.78 691.285 L1608.34 691.285 L1608.9 691.285 L1609.46 691.285 L1610.02 691.285 L1610.57 691.285 L1611.13 691.285 L1611.69 691.285 L1612.25 691.285 L1612.81 691.285 L1613.37 691.285 L1613.93 691.285 L1614.49 691.285 L1615.05 691.285 L1615.61 691.285 L1616.17 691.285 L1616.73 691.285 L1617.29 691.285 L1617.84 691.285 L1618.4 691.285 L1618.96 691.285 L1619.52 691.285 L1620.08 691.285 L1620.64 691.285 L1621.2 691.285 L1621.76 691.285 L1622.32 691.285 L1622.88 691.285 L1623.44 691.285 L1624 691.285 L1624.56 691.285 L1625.11 691.285 L1625.67 691.285 L1626.23 691.285 L1626.79 691.285 L1627.35 691.285 L1627.91 691.285 L1628.47 691.285 L1629.03 691.285 L1629.59 691.285 L1630.15 691.285 L1630.71 691.285 L1631.27 691.285 L1631.83 691.285 L1632.39 691.285 L1632.94 691.285 L1633.5 691.285 L1634.06 691.285 L1634.62 691.285 L1635.18 691.285 L1635.74 691.285 L1636.3 691.285 L1636.86 691.285 L1637.42 691.285 L1637.98 691.285 L1638.54 691.285 L1639.1 691.285 L1639.66 691.285 L1640.21 691.285 L1640.77 691.285 L1641.33 691.285 L1641.89 691.285 L1642.45 691.285 L1643.01 691.285 L1643.57 691.285 L1644.13 691.285 L1644.69 691.285 L1645.25 691.285 L1645.81 691.285 L1646.37 691.285 L1646.93 691.285 L1647.48 691.285 L1648.04 691.285 L1648.6 691.285 L1649.16 691.285 L1649.72 691.285 L1650.28 691.285 L1650.84 691.285 L1651.4 691.285 L1651.96 691.285 L1652.52 691.285 L1653.08 691.285 L1653.64 691.285 L1654.2 691.285 L1654.76 691.285 L1655.31 691.285 L1655.87 691.285 L1656.43 691.285 L1656.99 691.285 L1657.55 691.285 L1658.11 691.285 L1658.67 691.285 L1659.23 691.285 L1659.79 691.285 L1660.35 691.285 L1660.91 691.285 L1661.47 691.285 L1662.03 691.285 L1662.58 691.285 L1663.14 691.285 L1663.7 691.285 L1664.26 691.285 L1664.82 691.285 L1665.38 691.285 L1665.94 691.285 L1666.5 691.285 L1667.06 691.285 L1667.62 691.285 L1668.18 691.285 L1668.74 691.285 L1669.3 691.285 L1669.85 691.285 L1670.41 691.285 L1670.97 691.285 L1671.53 691.285 L1672.09 691.285 L1672.65 691.285 L1673.21 691.285 L1673.77 691.285 L1674.33 691.285 L1674.89 691.285 L1675.45 691.285 L1676.01 691.285 L1676.57 691.285 L1677.13 691.285 L1677.68 691.285 L1678.24 691.285 L1678.8 691.285 L1679.36 691.285 L1679.92 691.285 L1680.48 691.285 L1681.04 691.285 L1681.6 691.285 L1682.16 691.285 L1682.72 691.285 L1683.28 691.285 L1683.84 691.285 L1684.4 691.285 L1684.95 691.285 L1685.51 691.285 L1686.07 691.285 L1686.63 691.285 L1687.19 691.285 L1687.75 691.285 L1688.31 691.285 L1688.87 691.285 L1689.43 691.285 L1689.99 691.285 L1690.55 691.285 L1691.11 691.285 L1691.67 691.285 L1692.23 691.285 L1692.78 691.285 L1693.34 691.285 L1693.9 691.285 L1694.46 691.285 L1695.02 691.285 L1695.58 691.285 L1696.14 691.285 L1696.7 691.285 L1697.26 691.285 L1697.82 691.285 L1698.38 691.285 L1698.94 691.285 L1699.5 691.285 L1700.05 691.285 L1700.61 691.285 L1701.17 691.285 L1701.73 691.285 L1702.29 691.285 L1702.85 691.285 L1703.41 691.285 L1703.97 691.285 L1704.53 691.285 L1705.09 691.285 L1705.65 691.285 L1706.21 691.285 L1706.77 691.285 L1707.32 691.285 L1707.88 691.285 L1708.44 691.285 L1709 691.285 L1709.56 691.285 L1710.12 691.285 L1710.68 691.285 L1711.24 691.285 L1711.8 691.285 L1712.36 691.285 L1712.92 691.285 L1713.48 691.285 L1714.04 691.285 L1714.6 691.285 L1715.15 691.285 L1715.71 691.285 L1716.27 691.285 L1716.83 691.285 L1717.39 691.285 L1717.95 691.285 L1718.51 691.285 L1719.07 691.285 L1719.63 691.285 L1720.19 691.285 L1720.75 691.285 L1721.31 691.285 L1721.87 691.285 L1722.42 691.285 L1722.98 691.285 L1723.54 691.285 L1724.1 691.285 L1724.66 691.285 L1725.22 691.285 L1725.78 691.285 L1726.34 691.285 L1726.9 691.285 L1727.46 691.285 L1728.02 691.285 L1728.58 691.285 L1729.14 691.285 L1729.69 691.285 L1730.25 691.285 L1730.81 691.285 L1731.37 691.285 L1731.93 691.285 L1732.49 691.285 L1733.05 691.285 L1733.61 691.285 L1734.17 691.285 L1734.73 691.285 L1735.29 691.285 L1735.85 691.285 L1736.41 691.285 L1736.97 691.285 L1737.52 691.285 L1738.08 691.285 L1738.64 691.285 L1739.2 691.285 L1739.76 691.285 L1740.32 691.285 L1740.88 691.285 L1741.44 691.285 L1742 691.285 L1742.56 691.285 L1743.12 691.285 L1743.68 691.285 L1744.24 691.285 L1744.79 691.285 L1745.35 691.285 L1745.91 691.285 L1746.47 691.285 L1747.03 691.285 L1747.59 691.285 L1748.15 691.285 L1748.71 691.285 L1749.27 691.285 L1749.83 691.285 L1750.39 691.285 L1750.95 691.285 L1751.51 691.285 L1752.06 691.285 L1752.62 691.285 L1753.18 691.285 L1753.74 691.285 L1754.3 691.285 L1754.86 691.285 L1755.42 691.285 L1755.98 691.285 L1756.54 691.285 L1757.1 691.285 L1757.66 691.285 L1758.22 691.285 L1758.78 691.285 L1759.34 691.285 L1759.89 691.285 L1760.45 691.285 L1761.01 691.285 L1761.57 691.285 L1762.13 691.285 L1762.69 691.285 L1763.25 691.285 L1763.81 691.285 L1764.37 691.285 L1764.93 691.285 L1765.49 691.285 L1766.05 691.285 L1766.61 691.285 L1767.16 691.285 L1767.72 691.285 L1768.28 691.285 L1768.84 691.285 L1769.4 691.285 L1769.96 691.285 L1770.52 691.285 L1771.08 691.285 L1771.64 691.285 L1772.2 691.285 L1772.76 691.285 L1773.32 691.285 L1773.88 691.285 L1774.43 691.285 L1774.99 691.285 L1775.55 691.285 L1776.11 691.285 L1776.67 691.285 L1777.23 691.285 L1777.79 691.285 L1778.35 691.285 L1778.91 691.285 L1779.47 691.285 L1780.03 691.285 L1780.59 691.285 L1781.15 691.285 L1781.71 691.285 L1782.26 691.285 L1782.82 691.285 L1783.38 691.285 L1783.94 691.285 L1784.5 691.285 L1785.06 691.285 L1785.62 691.285 L1786.18 691.285 L1786.74 691.285 L1787.3 691.285 L1787.86 691.285 L1788.42 691.285 L1788.98 691.285 L1789.53 691.285 L1790.09 691.285 L1790.65 691.285 L1791.21 691.285 L1791.77 691.285 L1792.33 691.285 L1792.89 691.285 L1793.45 691.285 L1794.01 691.285 L1794.57 691.285 L1795.13 691.285 L1795.69 691.285 L1796.25 691.285 L1796.8 691.285 L1797.36 691.285 L1797.92 691.285 L1798.48 691.285 L1799.04 691.285 L1799.6 691.285 L1800.16 691.285 L1800.72 691.285 L1801.28 691.285 L1801.84 691.285 L1802.4 691.285 L1802.96 691.285 L1803.52 691.285 L1804.08 691.285 L1804.63 691.285 L1805.19 691.285 L1805.75 691.285 L1806.31 691.285 L1806.87 691.285 L1807.43 691.285 L1807.99 691.285 L1808.55 691.285 L1809.11 691.285 L1809.67 691.285 L1810.23 691.285 L1810.79 691.285 L1811.35 691.285 L1811.9 691.285 L1812.46 691.285 L1813.02 691.285 L1813.58 691.285 L1814.14 691.285 L1814.7 691.285 L1815.26 691.285 L1815.82 691.285 L1816.38 691.285 L1816.94 691.285 L1817.5 691.285 L1818.06 691.285 L1818.62 691.285 L1819.18 691.285 L1819.73 691.285 L1820.29 691.285 L1820.85 691.285 L1821.41 691.285 L1821.97 691.285 L1822.53 691.285 L1823.09 691.285 L1823.65 691.285 L1824.21 691.285 L1824.77 691.285 L1825.33 691.285 L1825.89 691.285 L1826.45 691.285 L1827 691.285 L1827.56 691.285 L1828.12 691.285 L1828.68 691.285 L1829.24 691.285 L1829.8 691.285 L1830.36 691.285 L1830.92 691.285 L1831.48 691.285 L1832.04 691.285 L1832.6 691.285 L1833.16 691.285 L1833.72 691.285 L1834.27 691.285 L1834.83 691.285 L1835.39 691.285 L1835.95 691.285 L1836.51 691.285 L1837.07 691.285 L1837.63 691.285 L1838.19 691.285 L1838.19 683.294 L1837.63 683.294 L1837.07 683.294 L1836.51 683.294 L1835.95 683.294 L1835.39 683.294 L1834.83 683.294 L1834.27 683.294 L1833.72 683.294 L1833.16 683.294 L1832.6 683.294 L1832.04 683.294 L1831.48 683.294 L1830.92 683.294 L1830.36 683.294 L1829.8 683.294 L1829.24 683.294 L1828.68 683.294 L1828.12 683.294 L1827.56 683.294 L1827 683.294 L1826.45 683.294 L1825.89 683.294 L1825.33 683.294 L1824.77 683.294 L1824.21 683.294 L1823.65 683.294 L1823.09 683.294 L1822.53 683.294 L1821.97 683.294 L1821.41 683.294 L1820.85 683.294 L1820.29 683.294 L1819.73 683.294 L1819.18 683.294 L1818.62 683.294 L1818.06 683.294 L1817.5 683.294 L1816.94 683.294 L1816.38 683.294 L1815.82 683.294 L1815.26 683.294 L1814.7 683.294 L1814.14 683.294 L1813.58 683.294 L1813.02 683.294 L1812.46 683.294 L1811.9 683.294 L1811.35 683.294 L1810.79 683.294 L1810.23 683.294 L1809.67 683.294 L1809.11 683.294 L1808.55 683.294 L1807.99 683.294 L1807.43 683.294 L1806.87 683.294 L1806.31 683.294 L1805.75 683.294 L1805.19 683.294 L1804.63 683.294 L1804.08 683.294 L1803.52 683.294 L1802.96 683.294 L1802.4 683.294 L1801.84 683.294 L1801.28 683.294 L1800.72 683.294 L1800.16 683.294 L1799.6 683.294 L1799.04 683.294 L1798.48 683.294 L1797.92 683.294 L1797.36 683.294 L1796.8 683.294 L1796.25 683.294 L1795.69 683.294 L1795.13 683.294 L1794.57 683.294 L1794.01 683.294 L1793.45 683.294 L1792.89 683.294 L1792.33 683.294 L1791.77 683.294 L1791.21 683.294 L1790.65 683.294 L1790.09 683.294 L1789.53 683.294 L1788.98 683.294 L1788.42 683.294 L1787.86 683.294 L1787.3 683.294 L1786.74 683.294 L1786.18 683.294 L1785.62 683.294 L1785.06 683.294 L1784.5 683.294 L1783.94 683.294 L1783.38 683.294 L1782.82 683.294 L1782.26 683.294 L1781.71 683.294 L1781.15 683.294 L1780.59 683.294 L1780.03 683.294 L1779.47 683.294 L1778.91 683.294 L1778.35 683.294 L1777.79 683.294 L1777.23 683.294 L1776.67 683.294 L1776.11 683.294 L1775.55 683.294 L1774.99 683.294 L1774.43 683.294 L1773.88 683.294 L1773.32 683.294 L1772.76 683.294 L1772.2 683.294 L1771.64 683.294 L1771.08 683.294 L1770.52 683.294 L1769.96 683.294 L1769.4 683.294 L1768.84 683.294 L1768.28 683.294 L1767.72 683.294 L1767.16 683.294 L1766.61 683.294 L1766.05 683.294 L1765.49 683.294 L1764.93 683.294 L1764.37 683.294 L1763.81 683.294 L1763.25 683.294 L1762.69 683.294 L1762.13 683.294 L1761.57 683.294 L1761.01 683.294 L1760.45 683.294 L1759.89 683.294 L1759.34 683.294 L1758.78 683.294 L1758.22 683.294 L1757.66 683.294 L1757.1 683.294 L1756.54 683.294 L1755.98 683.294 L1755.42 683.294 L1754.86 683.294 L1754.3 683.294 L1753.74 683.294 L1753.18 683.294 L1752.62 683.294 L1752.06 683.294 L1751.51 683.294 L1750.95 683.294 L1750.39 683.294 L1749.83 683.294 L1749.27 683.294 L1748.71 683.294 L1748.15 683.294 L1747.59 683.294 L1747.03 683.294 L1746.47 683.294 L1745.91 683.294 L1745.35 683.294 L1744.79 683.294 L1744.24 683.294 L1743.68 683.294 L1743.12 683.294 L1742.56 683.294 L1742 683.294 L1741.44 683.294 L1740.88 683.294 L1740.32 683.294 L1739.76 683.294 L1739.2 683.294 L1738.64 683.294 L1738.08 683.294 L1737.52 683.294 L1736.97 683.294 L1736.41 683.294 L1735.85 683.294 L1735.29 683.294 L1734.73 683.294 L1734.17 683.294 L1733.61 683.294 L1733.05 683.294 L1732.49 683.294 L1731.93 683.294 L1731.37 683.294 L1730.81 683.294 L1730.25 683.294 L1729.69 683.294 L1729.14 683.294 L1728.58 683.294 L1728.02 683.294 L1727.46 683.294 L1726.9 683.294 L1726.34 683.294 L1725.78 683.294 L1725.22 683.294 L1724.66 683.294 L1724.1 683.294 L1723.54 683.294 L1722.98 683.294 L1722.42 683.294 L1721.87 683.294 L1721.31 683.294 L1720.75 683.294 L1720.19 683.294 L1719.63 683.294 L1719.07 683.294 L1718.51 683.294 L1717.95 683.294 L1717.39 683.294 L1716.83 683.294 L1716.27 683.294 L1715.71 683.294 L1715.15 683.294 L1714.6 683.294 L1714.04 683.294 L1713.48 683.294 L1712.92 683.294 L1712.36 683.294 L1711.8 683.294 L1711.24 683.294 L1710.68 683.294 L1710.12 683.294 L1709.56 683.294 L1709 683.294 L1708.44 683.294 L1707.88 683.294 L1707.32 683.294 L1706.77 683.294 L1706.21 683.294 L1705.65 683.294 L1705.09 683.294 L1704.53 683.294 L1703.97 683.294 L1703.41 683.294 L1702.85 683.294 L1702.29 683.294 L1701.73 683.294 L1701.17 683.294 L1700.61 683.294 L1700.05 683.294 L1699.5 683.294 L1698.94 683.294 L1698.38 683.294 L1697.82 683.294 L1697.26 683.294 L1696.7 683.294 L1696.14 683.294 L1695.58 683.294 L1695.02 683.294 L1694.46 683.294 L1693.9 683.294 L1693.34 683.294 L1692.78 683.294 L1692.23 683.294 L1691.67 683.294 L1691.11 683.294 L1690.55 683.294 L1689.99 683.294 L1689.43 683.294 L1688.87 683.294 L1688.31 683.294 L1687.75 683.294 L1687.19 683.294 L1686.63 683.294 L1686.07 683.294 L1685.51 683.294 L1684.95 683.294 L1684.4 683.294 L1683.84 683.294 L1683.28 683.294 L1682.72 683.294 L1682.16 683.294 L1681.6 683.294 L1681.04 683.294 L1680.48 683.294 L1679.92 683.294 L1679.36 683.294 L1678.8 683.294 L1678.24 683.294 L1677.68 683.294 L1677.13 683.294 L1676.57 683.294 L1676.01 683.294 L1675.45 683.294 L1674.89 683.294 L1674.33 683.294 L1673.77 683.294 L1673.21 683.294 L1672.65 683.294 L1672.09 683.294 L1671.53 683.294 L1670.97 683.294 L1670.41 683.294 L1669.85 683.294 L1669.3 683.294 L1668.74 683.294 L1668.18 683.294 L1667.62 683.294 L1667.06 683.294 L1666.5 683.294 L1665.94 683.294 L1665.38 683.294 L1664.82 683.294 L1664.26 683.294 L1663.7 683.294 L1663.14 683.294 L1662.58 683.294 L1662.03 683.294 L1661.47 683.294 L1660.91 683.294 L1660.35 683.294 L1659.79 683.294 L1659.23 683.294 L1658.67 683.294 L1658.11 683.294 L1657.55 683.294 L1656.99 683.294 L1656.43 683.294 L1655.87 683.294 L1655.31 683.294 L1654.76 683.294 L1654.2 683.294 L1653.64 683.294 L1653.08 683.294 L1652.52 683.294 L1651.96 683.294 L1651.4 683.294 L1650.84 683.294 L1650.28 683.294 L1649.72 683.294 L1649.16 683.294 L1648.6 683.294 L1648.04 683.294 L1647.48 683.294 L1646.93 683.294 L1646.37 683.294 L1645.81 683.294 L1645.25 683.294 L1644.69 683.294 L1644.13 683.294 L1643.57 683.294 L1643.01 683.294 L1642.45 683.294 L1641.89 683.294 L1641.33 683.294 L1640.77 683.294 L1640.21 683.294 L1639.66 683.294 L1639.1 683.294 L1638.54 683.294 L1637.98 683.294 L1637.42 683.294 L1636.86 683.294 L1636.3 683.294 L1635.74 683.294 L1635.18 683.294 L1634.62 683.294 L1634.06 683.294 L1633.5 683.294 L1632.94 683.294 L1632.39 683.294 L1631.83 683.294 L1631.27 683.294 L1630.71 683.294 L1630.15 683.294 L1629.59 683.294 L1629.03 683.294 L1628.47 683.294 L1627.91 683.294 L1627.35 683.294 L1626.79 683.294 L1626.23 683.294 L1625.67 683.294 L1625.11 683.294 L1624.56 683.294 L1624 683.294 L1623.44 683.294 L1622.88 683.294 L1622.32 683.294 L1621.76 683.294 L1621.2 683.294 L1620.64 683.294 L1620.08 683.294 L1619.52 683.294 L1618.96 683.294 L1618.4 683.294 L1617.84 683.294 L1617.29 683.294 L1616.73 683.294 L1616.17 683.294 L1615.61 683.294 L1615.05 683.294 L1614.49 683.294 L1613.93 683.294 L1613.37 683.294 L1612.81 683.294 L1612.25 683.294 L1611.69 683.294 L1611.13 683.294 L1610.57 683.294 L1610.02 683.294 L1609.46 683.294 L1608.9 683.294 L1608.34 683.294 L1607.78 683.294 L1607.22 683.294 L1606.66 683.294 L1606.1 683.294 L1605.54 683.294 L1604.98 683.294 L1604.42 683.294 L1603.86 683.294 L1603.3 683.294 L1602.74 683.294 L1602.19 683.294 L1601.63 683.294 L1601.07 683.294 L1600.51 683.294 L1599.95 683.294 L1599.39 683.294 L1598.83 683.294 L1598.27 683.294 L1597.71 683.294 L1597.15 683.294 L1596.59 683.294 L1596.03 683.294 L1595.47 683.294 L1594.92 683.294 L1594.36 683.294 L1593.8 683.294 L1593.24 683.294 L1592.68 683.294 L1592.12 683.294 L1591.56 683.294 L1591 683.294 L1590.44 683.294 L1589.88 683.294 L1589.32 683.294 L1588.76 683.294 L1588.2 683.294 L1587.65 683.294 L1587.09 683.294 L1586.53 683.294 L1585.97 683.294 L1585.41 683.294 L1584.85 683.294 L1584.29 683.294 L1583.73 683.294 L1583.17 683.294 L1582.61 683.294 L1582.05 683.294 L1581.49 683.294 L1580.93 683.294 L1580.37 683.294 L1579.82 683.294 L1579.26 683.294 L1578.7 683.294 L1578.14 683.294 L1577.58 683.294 L1577.02 683.294 L1576.46 683.294 L1575.9 683.294 L1575.34 683.294 L1574.78 683.294 L1574.22 683.294 L1573.66 683.294 L1573.1 683.294 L1572.55 683.294 L1571.99 683.294 L1571.43 683.294 L1570.87 683.294 L1570.31 683.294 L1569.75 683.294 L1569.19 683.294 L1568.63 683.294 L1568.07 683.294 L1567.51 683.294 L1566.95 683.294 L1566.39 683.294 L1565.83 683.294 L1565.28 683.294 L1564.72 683.294 L1564.16 683.294 L1563.6 683.294 L1563.04 683.294 L1562.48 683.294 L1561.92 683.294 L1561.36 683.294 L1560.8 683.294 L1560.24 683.294 L1559.68 683.294 L1559.12 683.294 L1558.56 683.294 L1558 683.294 L1557.45 683.294 L1556.89 683.294 L1556.33 683.294 L1555.77 683.294 L1555.21 683.294 L1554.65 683.294 L1554.09 683.294 L1553.53 683.294 L1552.97 683.294 L1552.41 683.294 L1551.85 683.294 L1551.29 683.294 L1550.73 683.294 L1550.18 683.294 L1549.62 683.294 L1549.06 683.294 L1548.5 683.294 L1547.94 683.294 L1547.38 683.294 L1546.82 683.294 L1546.26 683.294 L1545.7 683.294 L1545.14 683.294 L1544.58 683.294 L1544.02 683.294 L1543.46 683.294 L1542.9 683.294 L1542.35 683.294 L1541.79 683.294 L1541.23 683.294 L1540.67 683.294 L1540.11 683.294 L1539.55 683.294 L1538.99 683.294 L1538.43 683.294 L1537.87 683.294 L1537.31 683.294 L1536.75 683.294 L1536.19 683.294 L1535.63 683.294 L1535.08 683.294 L1534.52 683.294 L1533.96 683.294 L1533.4 683.294 L1532.84 683.294 L1532.28 683.294 L1531.72 683.294 L1531.16 683.294 L1530.6 683.294 L1530.04 683.294 L1529.48 683.294 L1528.92 683.294 L1528.36 683.294 L1527.81 683.294 L1527.25 683.294 L1526.69 683.294 L1526.13 683.294 L1525.57 683.294 L1525.01 683.294 L1524.45 683.294 L1523.89 683.294 L1523.33 683.294 L1522.77 683.294 L1522.21 683.294 L1521.65 683.294 L1521.09 683.294 L1520.53 683.294 L1519.98 683.294 L1519.42 683.294 L1518.86 683.294 L1518.3 683.294 L1517.74 683.294 L1517.18 683.294 L1516.62 683.294 L1516.06 683.294 L1515.5 683.294 L1514.94 683.294 L1514.38 683.294 L1513.82 683.294 L1513.26 683.294 L1512.71 683.294 L1512.15 683.294 L1511.59 683.294 L1511.03 683.294 L1510.47 683.294 L1509.91 683.294 L1509.35 683.294 L1508.79 683.294 L1508.23 683.294 L1507.67 683.294 L1507.11 683.294 L1506.55 683.294 L1505.99 683.294 L1505.44 683.294 L1504.88 683.294 L1504.32 683.294 L1503.76 683.294 L1503.2 683.294 L1502.64 683.294 L1502.08 683.294 L1501.52 683.294 L1500.96 683.294 L1500.4 683.294 L1499.84 683.294 L1499.28 683.294 L1498.72 683.294 L1498.16 683.294 L1497.61 683.294 L1497.05 683.294 L1496.49 683.294 L1495.93 683.294 L1495.37 683.294 L1494.81 683.294 L1494.25 683.294 L1493.69 683.294 L1493.13 683.294 L1492.57 683.294 L1492.01 683.294 L1491.45 683.294 L1490.89 683.294 L1490.34 683.294 L1489.78 683.294 L1489.22 683.294 L1488.66 683.294 L1488.1 683.294 L1487.54 683.294 L1486.98 683.294 L1486.42 683.294 L1485.86 683.294 L1485.3 683.294 L1484.74 683.294 L1484.18 683.294 L1483.62 683.294 L1483.07 683.294 L1482.51 683.294 L1481.95 683.294 L1481.39 683.294 L1480.83 683.294 L1480.27 683.294 L1479.71 683.294 L1479.15 683.294 L1478.59 683.294 L1478.03 683.294 L1477.47 683.294 L1476.91 683.294 L1476.35 683.294 L1475.79 683.294 L1475.24 683.294 L1474.68 683.294 L1474.12 683.294 L1473.56 683.294 L1473 683.294 L1472.44 683.294 L1471.88 683.294 L1471.32 683.294 L1470.76 683.294 L1470.2 683.294 L1469.64 683.294 L1469.08 683.294 L1468.52 683.294 L1467.97 683.294 L1467.41 683.294 L1466.85 683.294 L1466.29 683.294 L1465.73 683.294 L1465.17 683.294 L1464.61 683.294 L1464.05 683.294 L1463.49 683.294 L1462.93 683.294 L1462.37 683.294 L1461.81 683.294 L1461.25 683.294 L1460.7 683.294 L1460.14 683.294 L1459.58 683.294 L1459.02 683.294 L1458.46 683.294 L1457.9 683.294 L1457.34 683.294 L1456.78 683.294 L1456.22 683.294 L1455.66 683.294 L1455.1 683.294 L1454.54 683.294 L1453.98 683.294 L1453.42 683.294 L1452.87 683.294 L1452.31 683.294 L1451.75 683.294 L1451.19 683.294 L1450.63 683.294 L1450.07 683.294 L1449.51 683.294 L1448.95 683.294 L1448.39 683.294 L1447.83 683.294 L1447.27 683.294 L1446.71 683.294 L1446.15 683.294 L1445.6 683.294 L1445.04 683.294 L1444.48 683.294 L1443.92 683.294 L1443.36 683.294 L1442.8 683.294 L1442.24 683.294 L1441.68 683.294 L1441.12 683.294 L1440.56 683.294 L1440 683.294 L1439.44 683.294 L1438.88 683.294 L1438.33 683.294 L1437.77 683.294 L1437.21 683.294 L1436.65 683.294 L1436.09 683.294 L1435.53 683.294 L1434.97 683.294 L1434.41 683.294 L1433.85 683.294 L1433.29 683.294 L1432.73 683.294 L1432.17 683.294 L1431.61 683.294 L1431.05 683.294 L1430.5 683.294 L1429.94 683.294 L1429.38 683.294 L1428.82 683.294 L1428.26 683.294 L1427.7 683.294 L1427.14 683.294 L1426.58 683.294 L1426.02 683.294 L1425.46 683.294 L1424.9 683.294 L1424.34 683.294 L1423.78 683.294 L1423.23 683.294 L1422.67 683.294 L1422.11 683.294 L1421.55 683.294 L1420.99 683.294 L1420.43 683.294 L1419.87 683.294 L1419.31 683.294 L1418.75 683.294 L1418.19 683.294 L1417.63 683.294 L1417.07 683.294 L1416.51 683.294 L1415.95 683.294 L1415.4 683.294 L1414.84 683.294 L1414.28 683.294 L1413.72 683.294 L1413.16 683.294 L1412.6 683.294 L1412.04 683.294 L1411.48 683.294 L1410.92 683.294 L1410.36 683.294 L1409.8 683.294 L1409.24 683.294 L1408.68 683.294 L1408.13 683.294 L1407.57 683.294 L1407.01 683.294 L1406.45 683.294 L1405.89 683.294 L1405.33 683.294 L1404.77 683.294 L1404.21 683.294 L1403.65 683.294 L1403.09 683.294 L1402.53 683.294 L1401.97 683.294 L1401.41 683.294 L1400.86 683.294 L1400.3 683.294 L1399.74 683.294 L1399.18 683.294 L1398.62 683.294 L1398.06 683.294 L1397.5 683.294 L1396.94 683.294 L1396.38 683.294 L1395.82 683.294 L1395.26 683.294 L1394.7 683.294 L1394.14 683.294 L1393.58 683.294 L1393.03 683.294 L1392.47 683.294 L1391.91 683.294 L1391.35 683.294 L1390.79 683.294 L1390.23 683.294 L1389.67 683.294 L1389.11 683.294 L1388.55 683.294 L1387.99 683.294 L1387.43 683.294 L1386.87 683.294 L1386.31 683.294 L1385.76 683.294 L1385.2 683.294 L1384.64 683.294 L1384.08 683.294 L1383.52 683.294 L1382.96 683.294 L1382.4 683.294 L1381.84 683.294 L1381.28 683.294 L1380.72 683.294 L1380.16 683.294 L1379.6 683.294 L1379.04 683.294 L1378.49 683.294 L1377.93 683.294 L1377.37 683.294 L1376.81 683.294 L1376.25 683.294 L1375.69 683.294 L1375.13 683.294 L1374.57 683.294 L1374.01 683.294 L1373.45 683.294 L1372.89 683.294 L1372.33 683.294 L1371.77 683.294 L1371.21 683.294 L1370.66 683.294 L1370.1 683.294 L1369.54 683.294 L1368.98 683.294 L1368.42 683.294 L1367.86 683.294 L1367.3 683.294 L1366.74 683.294 L1366.18 683.294 L1365.62 683.294 L1365.06 683.294 L1364.5 683.294 L1363.94 683.294 L1363.39 683.294 L1362.83 683.294 L1362.27 683.294 L1361.71 683.294 L1361.15 683.294 L1360.59 683.294 L1360.03 683.294 L1359.47 683.294 L1358.91 683.294 L1358.35 683.294 L1357.79 683.294 L1357.23 683.294 L1356.67 683.294 L1356.12 683.294 L1355.56 683.294 L1355 683.294 L1354.44 683.294 L1353.88 683.294 L1353.32 683.294 L1352.76 683.294 L1352.2 683.294 L1351.64 683.294 L1351.08 683.294 L1350.52 683.294 L1349.96 683.294 L1349.4 683.294 L1348.84 683.294 L1348.29 683.294 L1347.73 683.294 L1347.17 683.294 L1346.61 683.294 L1346.05 683.294 L1345.49 683.294 L1344.93 683.294 L1344.37 683.294 L1343.81 683.294 L1343.25 683.294 L1342.69 683.294 L1342.13 683.294 L1341.57 683.294 L1341.02 683.294 L1340.46 683.294 L1339.9 683.294 L1339.34 683.294 L1338.78 683.294 L1338.22 683.294 L1337.66 683.294 L1337.1 683.294 L1336.54 683.294 L1335.98 683.294 L1335.42 683.294 L1334.86 683.294 L1334.3 683.294 L1333.75 683.294 L1333.19 683.294 L1332.63 683.294 L1332.07 683.294 L1331.51 683.294 L1330.95 683.294 L1330.39 683.294 L1329.83 683.294 L1329.27 683.294 L1328.71 683.294 L1328.15 683.294 L1327.59 683.294 L1327.03 683.294 L1326.47 683.294 L1325.92 683.294 L1325.36 683.294 L1324.8 683.294 L1324.24 683.294 L1323.68 683.294 L1323.12 683.294 L1322.56 683.294 L1322 683.294 L1321.44 683.294 L1320.88 683.294 L1320.32 683.294 L1319.76 683.294 L1319.2 683.294 L1318.65 683.294 L1318.09 683.294 L1317.53 683.294 L1316.97 683.294 L1316.41 683.294 L1315.85 683.294 L1315.29 683.294 L1314.73 683.294 L1314.17 683.294 L1313.61 683.294 L1313.05 683.294 L1312.49 683.294 L1311.93 683.294 L1311.38 683.294 L1310.82 683.294 L1310.26 683.294 L1309.7 683.294 L1309.14 683.294 L1308.58 683.294 L1308.02 683.294 L1307.46 683.294 L1306.9 683.294 L1306.34 683.294 L1305.78 683.294 L1305.22 683.294 L1304.66 683.294 L1304.1 683.294 L1303.55 683.294 L1302.99 683.294 L1302.43 683.294 L1301.87 683.294 L1301.31 683.294 L1300.75 683.294 L1300.19 683.294 L1299.63 683.294 L1299.07 683.294 L1298.51 683.294 L1297.95 683.294 L1297.39 683.294 L1296.83 683.294 L1296.28 683.294 L1295.72 683.294 L1295.16 683.294 L1294.6 683.294 L1294.04 683.294 L1293.48 683.294 L1292.92 683.294 L1292.36 683.294 L1291.8 683.294 L1291.24 683.294 L1290.68 683.294 L1290.12 683.294 L1289.56 683.294 L1289 683.294 L1288.45 683.294 L1287.89 683.294 L1287.33 683.294 L1286.77 683.294 L1286.21 683.294 L1285.65 683.294 L1285.09 683.294 L1284.53 683.294 L1283.97 683.294 L1283.41 683.294 L1282.85 683.294 L1282.29 683.294 L1281.73 683.294 L1281.18 683.294 L1280.62 683.294 L1280.06 683.294 L1279.5 683.294 L1278.94 683.294 L1278.38 683.294 L1277.82 683.294 L1277.26 683.294 L1276.7 683.294 L1276.14 683.294 L1275.58 683.294 L1275.02 683.294 L1274.46 683.294 L1273.91 683.294 L1273.35 683.294 L1272.79 683.294 L1272.23 683.294 L1271.67 683.294 L1271.11 683.294 L1270.55 683.294 L1269.99 683.294 L1269.43 683.294 L1268.87 683.294 L1268.31 683.294 L1267.75 683.294 L1267.19 683.294 L1266.63 683.294 L1266.08 683.294 L1265.52 683.294 L1264.96 683.294 L1264.4 683.294 L1263.84 683.294 L1263.28 683.294 L1262.72 683.294 L1262.16 683.294 L1261.6 683.294 L1261.04 683.294 L1260.48 683.294 L1259.92 683.294 L1259.36 683.294 L1258.81 683.294 L1258.25 683.294 L1257.69 683.294 L1257.13 683.294 L1256.57 683.294 L1256.01 683.294 L1255.45 683.294 L1254.89 683.294 L1254.33 683.294 L1253.77 683.294 L1253.21 683.294 L1252.65 683.294 L1252.09 683.294 L1251.54 683.294 L1250.98 683.294 L1250.42 683.294 L1249.86 683.294 L1249.3 683.294 L1248.74 683.294 L1248.18 683.294 L1247.62 683.294 L1247.06 683.294 L1246.5 683.294 L1245.94 683.294 L1245.38 683.294 L1244.82 683.294 L1244.26 683.294 L1243.71 683.294 L1243.15 683.294 L1242.59 683.294 L1242.03 683.294 L1241.47 683.294 L1240.91 683.294 L1240.35 683.294 L1239.79 683.294 L1239.23 683.294 L1238.67 683.294 L1238.11 683.294 L1237.55 683.294 L1236.99 683.294 L1236.44 683.294 L1235.88 683.294 L1235.32 683.294 L1234.76 683.294 L1234.2 683.294 L1233.64 683.294 L1233.08 683.294 L1232.52 683.294 L1231.96 683.294 L1231.4 683.294 L1230.84 683.294 L1230.28 683.294 L1229.72 683.294 L1229.17 683.294 L1228.61 683.294 L1228.05 683.294 L1227.49 683.294 L1226.93 683.294 L1226.37 683.294 L1225.81 683.294 L1225.25 683.294 L1224.69 683.294 L1224.13 683.294 L1223.57 683.294 L1223.01 683.294 L1222.45 683.294 L1221.89 683.294 L1221.34 683.294 L1220.78 683.294 L1220.22 683.294 L1219.66 683.294 L1219.1 683.294 L1218.54 683.294 L1217.98 683.294 L1217.42 683.294 L1216.86 683.294 L1216.3 683.294 L1215.74 683.294 L1215.18 683.294 L1214.62 683.294 L1214.07 683.294 L1213.51 683.294 L1212.95 683.294 L1212.39 683.294 L1211.83 683.294 L1211.27 683.294 L1210.71 683.294 L1210.15 683.294 L1209.59 683.294 L1209.03 683.294 L1208.47 683.294 L1207.91 683.294 L1207.35 683.294 L1206.8 683.294 L1206.24 683.294 L1205.68 683.294 L1205.12 683.294 L1204.56 683.294 L1204 683.294 L1203.44 683.294 L1202.88 683.294 L1202.32 683.294 L1201.76 683.294 L1201.2 683.294 L1200.64 683.294 L1200.08 683.294 L1199.52 683.294 L1198.97 683.294 L1198.41 683.294 L1197.85 683.294 L1197.29 683.294 L1196.73 683.294 L1196.17 683.294 L1195.61 683.294 L1195.05 683.294 L1194.49 683.294 L1193.93 683.294 L1193.37 683.294 L1192.81 683.294 L1192.25 683.294 L1191.7 683.294 L1191.14 683.294 L1190.58 683.294 L1190.02 683.294 L1189.46 683.294 L1188.9 683.294 L1188.34 683.294 L1187.78 683.294 L1187.22 683.294 L1186.66 683.294 L1186.1 683.294 L1185.54 683.294 L1184.98 683.294 L1184.43 683.294 L1183.87 683.294 L1183.31 683.294 L1182.75 683.294 L1182.19 683.294 L1181.63 683.294 L1181.07 683.294 L1180.51 683.294 L1179.95 683.294 L1179.39 683.294 L1178.83 683.294 L1178.27 683.294 L1177.71 683.294 L1177.15 683.294 L1176.6 683.294 L1176.04 683.294 L1175.48 683.294 L1174.92 683.294 L1174.36 683.294 L1173.8 683.294 L1173.24 683.294 L1172.68 683.294 L1172.12 683.294 L1171.56 683.294 L1171 683.294 L1170.44 683.294 L1169.88 683.294 L1169.33 683.294 L1168.77 683.294 L1168.21 683.294 L1167.65 683.294 L1167.09 683.294 L1166.53 683.294 L1165.97 683.294 L1165.41 683.294 L1164.85 683.294 L1164.29 683.294 L1163.73 683.294 L1163.17 683.294 L1162.61 683.294 L1162.05 683.294 L1161.5 683.294 L1160.94 683.294 L1160.38 683.294 L1159.82 683.294 L1159.26 683.294 L1158.7 683.294 L1158.14 683.294 L1157.58 683.294 L1157.02 683.294 L1156.46 683.294 L1155.9 683.294 L1155.34 683.294 L1154.78 683.294 L1154.23 683.294 L1153.67 683.294 L1153.11 683.294 L1152.55 683.294 L1151.99 683.294 L1151.43 683.294 L1150.87 683.294 L1150.31 683.294 L1149.75 683.294 L1149.19 683.294 L1148.63 683.294 L1148.07 683.294 L1147.51 683.294 L1146.96 683.294 L1146.4 683.294 L1145.84 683.294 L1145.28 683.294 L1144.72 683.294 L1144.16 683.294 L1143.6 683.294 L1143.04 683.294 L1142.48 683.294 L1141.92 683.294 L1141.36 683.294 L1140.8 683.294 L1140.24 683.294 L1139.68 683.294 L1139.13 683.294 L1138.57 683.294 L1138.01 683.294 L1137.45 683.294 L1136.89 683.294 L1136.33 683.294 L1135.77 683.294 L1135.21 683.294 L1134.65 683.294 L1134.09 683.294 L1133.53 683.294 L1132.97 683.294 L1132.41 683.294 L1131.86 683.294 L1131.3 683.294 L1130.74 683.294 L1130.18 683.294 L1129.62 683.294 L1129.06 683.294 L1128.5 683.294 L1127.94 683.294 L1127.38 683.294 L1126.82 683.294 L1126.26 683.294 L1125.7 683.294 L1125.14 683.294 L1124.59 683.294 L1124.03 683.294 L1123.47 683.294 L1122.91 683.294 L1122.35 683.294 L1121.79 683.294 L1121.23 683.294 L1120.67 683.294 L1120.11 683.294 L1119.55 683.294 L1118.99 683.294 L1118.43 683.294 L1117.87 683.294 L1117.31 683.294 L1116.76 683.294 L1116.2 683.294 L1115.64 683.294 L1115.08 683.294 L1114.52 683.294 L1113.96 683.294 L1113.4 683.294 L1112.84 683.294 L1112.28 683.294 L1111.72 683.294 L1111.16 683.294 L1110.6 683.294 L1110.04 683.294 L1109.49 683.294 L1108.93 683.294 L1108.37 683.294 L1107.81 683.294 L1107.25 683.294 L1106.69 683.294 L1106.13 683.294 L1105.57 683.294 L1105.01 683.294 L1104.45 683.294 L1103.89 683.294 L1103.33 683.294 L1102.77 683.294 L1102.22 683.294 L1101.66 683.294 L1101.1 683.294 L1100.54 683.294 L1099.98 683.294 L1099.42 683.294 L1098.86 683.294 L1098.3 683.294 L1097.74 683.294 L1097.18 683.294 L1096.62 683.294 L1096.06 683.294 L1095.5 683.294 L1094.94 683.294 L1094.39 683.294 L1093.83 683.294 L1093.27 683.294 L1092.71 683.294 L1092.15 683.294 L1091.59 683.294 L1091.03 683.294 L1090.47 683.294 L1089.91 683.294 L1089.35 683.294 L1088.79 683.294 L1088.23 683.294 L1087.67 683.294 L1087.12 683.294 L1086.56 683.294 L1086 683.294 L1085.44 683.294 L1084.88 683.294 L1084.32 683.294 L1083.76 683.294 L1083.2 683.294 L1082.64 683.294 L1082.08 683.294 L1081.52 683.294 L1080.96 683.294 L1080.4 683.294 L1079.85 683.294 L1079.29 683.294 L1078.73 683.294 L1078.17 683.294 L1077.61 683.294 L1077.05 683.294 L1076.49 683.294 L1075.93 683.294 L1075.37 683.294 L1074.81 683.294 L1074.25 683.294 L1073.69 683.294 L1073.13 683.294 L1072.57 683.294 L1072.02 683.294 L1071.46 683.294 L1070.9 683.294 L1070.34 683.294 L1069.78 683.294 L1069.22 683.294 L1068.66 683.294 L1068.1 683.294 L1067.54 683.294 L1066.98 683.294 L1066.42 683.294 L1065.86 683.294 L1065.3 683.294 L1064.75 683.294 L1064.19 683.294 L1063.63 683.294 L1063.07 683.294 L1062.51 683.294 L1061.95 683.294 L1061.39 683.294 L1060.83 683.294 L1060.27 683.294 L1059.71 683.294 L1059.15 683.294 L1058.59 683.294 L1058.03 683.294 L1057.48 683.294 L1056.92 683.294 L1056.36 683.294 L1055.8 683.294 L1055.24 683.294 L1054.68 683.294 L1054.12 683.294 L1053.56 683.294 L1053 683.294 L1052.44 683.294 L1051.88 683.294 L1051.32 683.294 L1050.76 683.294 L1050.2 683.294 L1049.65 683.294 L1049.09 683.294 L1048.53 683.294 L1047.97 683.294 L1047.41 683.294 L1046.85 683.294 L1046.29 683.294 L1045.73 683.294 L1045.17 683.294 L1044.61 683.294 L1044.05 683.294 L1043.49 683.294 L1042.93 683.294 L1042.38 683.294 L1041.82 683.294 L1041.26 683.294 L1040.7 683.294 L1040.14 683.294 L1039.58 683.294 L1039.02 683.294 L1038.46 683.294 L1037.9 683.294 L1037.34 683.294 L1036.78 683.294 L1036.22 683.294 L1035.66 683.294 L1035.1 683.294 L1034.55 683.294 L1033.99 683.294 L1033.43 683.294 L1032.87 683.294 L1032.31 683.294 L1031.75 683.294 L1031.19 683.294 L1030.63 683.294 L1030.07 683.294 L1029.51 683.294 L1028.95 683.294 L1028.39 683.294 L1027.83 683.294 L1027.28 683.294 L1026.72 683.294 L1026.16 683.294 L1025.6 683.294 L1025.04 683.294 L1024.48 683.294 L1023.92 683.294 L1023.36 683.294 L1022.8 683.294 L1022.24 683.294 L1021.68 683.294 L1021.12 683.294 L1020.56 683.294 L1020.01 683.294 L1019.45 683.294 L1018.89 683.294 L1018.33 683.294 L1017.77 683.294 L1017.21 683.294 L1016.65 683.294 L1016.09 683.294 L1015.53 683.294 L1014.97 683.294 L1014.41 683.294 L1013.85 683.294 L1013.29 683.294 L1012.73 683.294 L1012.18 683.294 L1011.62 683.294 L1011.06 683.294 L1010.5 683.294 L1009.94 683.294 L1009.38 683.294 L1008.82 683.294 L1008.26 683.294 L1007.7 683.294 L1007.14 683.294 L1006.58 683.294 L1006.02 683.294 L1005.46 683.294 L1004.91 683.294 L1004.35 683.294 L1003.79 683.294 L1003.23 683.294 L1002.67 683.294 L1002.11 683.294 L1001.55 683.294 L1000.99 683.294 L1000.43 683.294 L999.872 683.294 L999.313 683.294 L998.754 683.294 L998.194 683.294 L997.635 683.294 L997.076 683.294 L996.517 683.294 L995.957 683.294 L995.398 683.294 L994.839 683.294 L994.28 683.294 L993.72 683.294 L993.161 683.294 L992.602 683.294 L992.043 683.294 L991.483 683.294 L990.924 683.294 L990.365 683.294 L989.806 683.294 L989.246 683.294 L988.687 683.294 L988.128 683.294 L987.569 683.294 L987.009 683.294 L986.45 683.294 L985.891 683.294 L985.332 683.294 L984.772 683.294 L984.213 683.294 L983.654 683.294 L983.095 683.294 L982.535 683.294 L981.976 683.294 L981.417 683.294 L980.858 683.294 L980.298 683.294 L979.739 683.294 L979.18 683.294 L978.621 683.294 L978.061 683.294 L977.502 683.294 L976.943 683.294 L976.384 683.294 L975.824 683.294 L975.265 683.294 L974.706 683.294 L974.147 683.294 L973.587 683.294 L973.028 683.294 L972.469 683.294 L971.91 683.294 L971.35 683.294 L970.791 683.294 L970.232 683.294 L969.673 683.294 L969.113 683.294 L968.554 683.294 L967.995 683.294 L967.436 683.294 L966.876 683.294 L966.317 683.294 L965.758 683.294 L965.199 683.294 L964.639 683.294 L964.08 683.294 L963.521 683.294 L962.962 683.294 L962.402 683.294 L961.843 683.294 L961.284 683.294 L960.725 683.294 L960.165 683.294 L959.606 683.294 L959.047 683.294 L958.488 683.294 L957.928 683.294 L957.369 683.294 L956.81 683.294 L956.251 683.294 L955.691 683.294 L955.132 683.294 L954.573 683.294 L954.014 683.294 L953.454 683.294 L952.895 683.294 L952.336 683.294 L951.777 683.294 L951.217 683.294 L950.658 683.294 L950.099 683.294 L949.54 683.294 L948.98 683.294 L948.421 683.294 L947.862 683.294 L947.303 683.294 L946.743 683.294 L946.184 683.294 L945.625 683.294 L945.066 683.294 L944.506 683.294 L943.947 683.294 L943.388 683.294 L942.829 683.294 L942.269 683.294 L941.71 683.294 L941.151 683.294 L940.592 683.294 L940.032 683.294 L939.473 683.294 L938.914 683.294 L938.355 683.294 L937.795 683.294 L937.236 683.294 L936.677 683.294 L936.118 683.294 L935.558 683.294 L934.999 683.294 L934.44 683.294 L933.881 683.294 L933.321 683.294 L932.762 683.294 L932.203 683.294 L931.644 683.294 L931.084 683.294 L930.525 683.294 L929.966 683.294 L929.406 683.294 L928.847 683.294 L928.288 683.294 L927.729 683.294 L927.169 683.294 L926.61 683.294 L926.051 683.294 L925.492 683.294 L924.932 683.294 L924.373 683.294 L923.814 683.294 L923.255 683.294 L922.695 683.294 L922.136 683.294 L921.577 683.294 L921.018 683.294 L920.458 683.294 L919.899 683.294 L919.34 683.294 L918.781 683.294 L918.221 683.294 L917.662 683.294 L917.103 683.294 L916.544 683.294 L915.984 683.294 L915.425 683.294 L914.866 683.294 L914.307 683.294 L913.747 683.294 L913.188 683.294 L912.629 683.294 L912.07 683.294 L911.51 683.294 L910.951 683.294 L910.392 683.294 L909.833 683.294 L909.273 683.294 L908.714 683.294 L908.155 683.294 L907.596 683.294 L907.036 683.294 L906.477 683.294 L905.918 683.294 L905.359 683.294 L904.799 683.294 L904.24 683.294 L903.681 683.294 L903.122 683.294 L902.562 683.294 L902.003 683.294 L901.444 683.294 L900.885 683.294 L900.325 683.294 L899.766 683.294 L899.207 683.294 L898.648 683.294 L898.088 683.294 L897.529 683.294 L896.97 683.294 L896.411 683.294 L895.851 683.294 L895.292 683.294 L894.733 683.294 L894.174 683.294 L893.614 683.294 L893.055 683.294 L892.496 683.294 L891.937 683.294 L891.377 683.294 L890.818 683.294 L890.259 683.294 L889.7 683.294 L889.14 683.294 L888.581 683.294 L888.022 683.294 L887.463 683.294 L886.903 683.294 L886.344 683.294 L885.785 683.294 L885.226 683.294 L884.666 683.294 L884.107 683.294 L883.548 683.294 L882.989 683.294 L882.429 683.294 L881.87 683.294 L881.311 683.294 L880.752 683.294 L880.192 683.294 L879.633 683.294 L879.074 683.294 L878.515 683.294 L877.955 683.294 L877.396 683.294 L876.837 683.294 L876.278 683.294 L875.718 683.294 L875.159 683.294 L874.6 683.294 L874.041 683.294 L873.481 683.294 L872.922 683.294 L872.363 683.294 L871.804 683.294 L871.244 683.294 L870.685 683.294 L870.126 683.294 L869.567 683.294 L869.007 683.294 L868.448 683.294 L867.889 683.294 L867.33 683.294 L866.77 683.294 L866.211 683.294 L865.652 683.294 L865.093 683.294 L864.533 683.294 L863.974 683.294 L863.415 683.294 L862.856 683.294 L862.296 683.294 L861.737 683.294 L861.178 683.294 L860.619 683.294 L860.059 683.294 L859.5 683.294 L858.941 683.294 L858.382 683.294 L857.822 683.294 L857.263 683.294 L856.704 683.294 L856.145 683.294 L855.585 683.294 L855.026 683.294 L854.467 683.294 L853.908 683.294 L853.348 683.294 L852.789 683.294 L852.23 683.294 L851.671 683.294 L851.111 683.294 L850.552 683.294 L849.993 683.294 L849.434 683.294 L848.874 683.294 L848.315 683.294 L847.756 683.294 L847.197 683.294 L846.637 683.294 L846.078 683.294 L845.519 683.294 L844.96 683.294 L844.4 683.294 L843.841 683.294 L843.282 683.294 L842.723 683.294 L842.163 683.294 L841.604 683.294 L841.045 683.294 L840.486 683.294 L839.926 683.294 L839.367 683.294 L838.808 683.294 L838.249 683.294 L837.689 683.294 L837.13 683.294 L836.571 683.294 L836.012 683.294 L835.452 683.294 L834.893 683.294 L834.334 683.294 L833.775 683.294 L833.215 683.294 L832.656 683.294 L832.097 683.294 L831.538 683.294 L830.978 683.294 L830.419 683.294 L829.86 683.294 L829.301 683.294 L828.741 683.294 L828.182 683.294 L827.623 683.294 L827.064 683.294 L826.504 683.294 L825.945 683.294 L825.386 683.294 L824.827 683.294 L824.267 683.294 L823.708 683.294 L823.149 683.294 L822.59 683.294 L822.03 683.294 L821.471 683.294 L820.912 683.294 L820.353 683.294 L819.793 683.294 L819.234 683.294 L818.675 683.294 L818.116 683.294 L817.556 683.294 L816.997 683.294 L816.438 683.294 L815.879 683.294 L815.319 683.294 L814.76 683.294 L814.201 683.294 L813.642 683.294 L813.082 683.294 L812.523 683.294 L811.964 683.294 L811.405 683.294 L810.845 683.294 L810.286 683.294 L809.727 683.294 L809.168 683.294 L808.608 683.294 L808.049 683.294 L807.49 683.294 L806.931 683.294 L806.371 683.294 L805.812 683.294 L805.253 683.294 L804.693 683.294 L804.134 683.294 L803.575 683.294 L803.016 683.294 L802.456 683.294 L801.897 683.294 L801.338 683.294 L800.779 683.294 L800.219 683.294 L799.66 683.294 L799.101 683.294 L798.542 683.294 L797.982 683.294 L797.423 683.294 L796.864 683.294 L796.305 683.294 L795.745 683.294 L795.186 683.294 L794.627 683.294 L794.068 683.294 L793.508 683.294 L792.949 683.294 L792.39 683.294 L791.831 683.294 L791.271 683.294 L790.712 683.294 L790.153 683.294 L789.594 683.294 L789.034 683.294 L788.475 683.294 L787.916 683.294 L787.357 683.294 L786.797 683.294 L786.238 683.294 L785.679 683.294 L785.12 683.294 L784.56 683.294 L784.001 683.294 L783.442 683.294 L782.883 683.294 L782.323 683.294 L781.764 683.294 L781.205 683.294 L780.646 683.294 L780.086 683.294 L779.527 683.294 L778.968 683.294 L778.409 683.294 L777.849 683.294 L777.29 683.294 L776.731 683.294 L776.172 683.294 L775.612 683.294 L775.053 683.294 L774.494 683.294 L773.935 683.294 L773.375 683.294 L772.816 683.294 L772.257 683.294 L771.698 683.294 L771.138 683.294 L770.579 683.294 L770.02 683.294 L769.461 683.294 L768.901 683.294 L768.342 683.294 L767.783 683.294 L767.224 683.294 L766.664 683.294 L766.105 683.294 L765.546 683.294 L764.987 683.294 L764.427 683.294 L763.868 683.294 L763.309 683.294 L762.75 683.294 L762.19 683.294 L761.631 683.294 L761.072 683.294 L760.513 683.294 L759.953 683.294 L759.394 683.294 L758.835 683.294 L758.276 683.294 L757.716 683.294 L757.157 683.294 L756.598 683.294 L756.039 683.294 L755.479 683.294 L754.92 683.294 L754.361 683.294 L753.802 683.294 L753.242 683.294 L752.683 683.294 L752.124 683.294 L751.565 683.294 L751.005 683.294 L750.446 683.294 L749.887 683.294 L749.328 683.294 L748.768 683.294 L748.209 683.294 L747.65 683.294 L747.091 683.294 L746.531 683.294 L745.972 683.294 L745.413 683.294 L744.854 683.294 L744.294 683.294 L743.735 683.294 L743.176 683.294 L742.617 683.294 L742.057 683.294 L741.498 683.294 L740.939 683.294 L740.38 683.294 L739.82 683.294 L739.261 683.294 L738.702 683.294 L738.143 683.294 L737.583 683.294 L737.024 683.294 L736.465 683.294 L735.906 683.294 L735.346 683.294 L734.787 683.294 L734.228 683.294 L733.669 683.294 L733.109 683.294 L732.55 683.294 L731.991 683.294 L731.432 683.294 L730.872 683.294 L730.313 683.294 L729.754 683.294 L729.195 683.294 L728.635 683.294 L728.076 683.294 L727.517 683.294 L726.958 683.294 L726.398 683.294 L725.839 683.294 L725.28 683.294 L724.721 683.294 L724.161 683.294 L723.602 683.294 L723.043 683.294 L722.484 683.294 L721.924 683.294 L721.365 683.294 L720.806 683.294 L720.247 683.294  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.289 720.806,687.289 721.365,687.289 721.924,687.289 722.484,687.289 723.043,687.289 723.602,687.289 724.161,687.289 724.721,687.289 725.28,687.289 725.839,687.289 726.398,687.289 726.958,687.289 727.517,687.289 728.076,687.289 728.635,687.289 729.195,687.289 729.754,687.289 730.313,687.289 730.872,687.289 731.432,687.289 731.991,687.289 732.55,687.289 733.109,687.289 733.669,687.289 734.228,687.289 734.787,687.289 735.346,687.289 735.906,687.289 736.465,687.289 737.024,687.289 737.583,687.289 738.143,687.289 738.702,687.289 739.261,687.289 739.82,687.289 740.38,687.289 740.939,687.289 741.498,687.289 742.057,687.289 742.617,687.289 743.176,687.289 743.735,687.289 744.294,687.289 744.854,687.289 745.413,687.289 745.972,687.289 746.531,687.289 747.091,687.289 747.65,687.289 748.209,687.289 748.768,687.289 749.328,687.289 749.887,687.289 750.446,687.289 751.005,687.289 751.565,687.289 752.124,687.289 752.683,687.289 753.242,687.289 753.802,687.289 754.361,687.289 754.92,687.289 755.479,687.289 756.039,687.289 756.598,687.289 757.157,687.289 757.716,687.289 758.276,687.289 758.835,687.289 759.394,687.289 759.953,687.289 760.513,687.289 761.072,687.289 761.631,687.289 762.19,687.289 762.75,687.289 763.309,687.289 763.868,687.289 764.427,687.289 764.987,687.289 765.546,687.289 766.105,687.289 766.664,687.289 767.224,687.289 767.783,687.289 768.342,687.289 768.901,687.289 769.461,687.289 770.02,687.289 770.579,687.289 771.138,687.289 771.698,687.289 772.257,687.289 772.816,687.289 773.375,687.289 773.935,687.289 774.494,687.289 775.053,687.289 775.612,687.289 776.172,687.289 776.731,687.289 777.29,687.289 777.849,687.289 778.409,687.289 778.968,687.289 779.527,687.289 780.086,687.289 780.646,687.289 781.205,687.289 781.764,687.289 782.323,687.289 782.883,687.289 783.442,687.289 784.001,687.289 784.56,687.289 785.12,687.289 785.679,687.289 786.238,687.289 786.797,687.289 787.357,687.289 787.916,687.289 788.475,687.289 789.034,687.289 789.594,687.289 790.153,687.289 790.712,687.289 791.271,687.289 791.831,687.289 792.39,687.289 792.949,687.289 793.508,687.289 794.068,687.289 794.627,687.289 795.186,687.289 795.745,687.289 796.305,687.289 796.864,687.289 797.423,687.289 797.982,687.289 798.542,687.289 799.101,687.289 799.66,687.289 800.219,687.289 800.779,687.289 801.338,687.289 801.897,687.289 802.456,687.289 803.016,687.289 803.575,687.289 804.134,687.289 804.693,687.289 805.253,687.289 805.812,687.289 806.371,687.289 806.931,687.289 807.49,687.289 808.049,687.289 808.608,687.289 809.168,687.289 809.727,687.289 810.286,687.289 810.845,687.289 811.405,687.289 811.964,687.289 812.523,687.289 813.082,687.289 813.642,687.289 814.201,687.289 814.76,687.289 815.319,687.289 815.879,687.289 816.438,687.289 816.997,687.289 817.556,687.289 818.116,687.289 818.675,687.289 819.234,687.289 819.793,687.289 820.353,687.289 820.912,687.289 821.471,687.289 822.03,687.289 822.59,687.289 823.149,687.289 823.708,687.289 824.267,687.289 824.827,687.289 825.386,687.289 825.945,687.289 826.504,687.289 827.064,687.289 827.623,687.289 828.182,687.289 828.741,687.289 829.301,687.289 829.86,687.289 830.419,687.289 830.978,687.289 831.538,687.289 832.097,687.289 832.656,687.289 833.215,687.289 833.775,687.289 834.334,687.289 834.893,687.289 835.452,687.289 836.012,687.289 836.571,687.289 837.13,687.289 837.689,687.289 838.249,687.289 838.808,687.289 839.367,687.289 839.926,687.289 840.486,687.289 841.045,687.289 841.604,687.289 842.163,687.289 842.723,687.289 843.282,687.289 843.841,687.289 844.4,687.289 844.96,687.289 845.519,687.289 846.078,687.289 846.637,687.289 847.197,687.289 847.756,687.289 848.315,687.289 848.874,687.289 849.434,687.289 849.993,687.289 850.552,687.289 851.111,687.289 851.671,687.289 852.23,687.289 852.789,687.289 853.348,687.289 853.908,687.289 854.467,687.289 855.026,687.289 855.585,687.289 856.145,687.289 856.704,687.289 857.263,687.289 857.822,687.289 858.382,687.289 858.941,687.289 859.5,687.289 860.059,687.289 860.619,687.289 861.178,687.289 861.737,687.289 862.296,687.289 862.856,687.289 863.415,687.289 863.974,687.289 864.533,687.289 865.093,687.289 865.652,687.289 866.211,687.289 866.77,687.289 867.33,687.289 867.889,687.289 868.448,687.289 869.007,687.289 869.567,687.289 870.126,687.289 870.685,687.289 871.244,687.289 871.804,687.289 872.363,687.289 872.922,687.289 873.481,687.289 874.041,687.289 874.6,687.289 875.159,687.289 875.718,687.289 876.278,687.289 876.837,687.289 877.396,687.289 877.955,687.289 878.515,687.289 879.074,687.289 879.633,687.289 880.192,687.289 880.752,687.289 881.311,687.289 881.87,687.289 882.429,687.289 882.989,687.289 883.548,687.289 884.107,687.289 884.666,687.289 885.226,687.289 885.785,687.289 886.344,687.289 886.903,687.289 887.463,687.289 888.022,687.289 888.581,687.289 889.14,687.289 889.7,687.289 890.259,687.289 890.818,687.289 891.377,687.289 891.937,687.289 892.496,687.289 893.055,687.289 893.614,687.289 894.174,687.289 894.733,687.289 895.292,687.289 895.851,687.289 896.411,687.289 896.97,687.289 897.529,687.289 898.088,687.289 898.648,687.289 899.207,687.289 899.766,687.289 900.325,687.289 900.885,687.289 901.444,687.289 902.003,687.289 902.562,687.289 903.122,687.289 903.681,687.289 904.24,687.289 904.799,687.289 905.359,687.289 905.918,687.289 906.477,687.289 907.036,687.289 907.596,687.289 908.155,687.289 908.714,687.289 909.273,687.289 909.833,687.289 910.392,687.289 910.951,687.289 911.51,687.289 912.07,687.289 912.629,687.289 913.188,687.289 913.747,687.289 914.307,687.289 914.866,687.289 915.425,687.289 915.984,687.289 916.544,687.289 917.103,687.289 917.662,687.289 918.221,687.289 918.781,687.289 919.34,687.289 919.899,687.289 920.458,687.289 921.018,687.289 921.577,687.289 922.136,687.289 922.695,687.289 923.255,687.289 923.814,687.289 924.373,687.289 924.932,687.289 925.492,687.289 926.051,687.289 926.61,687.289 927.169,687.289 927.729,687.289 928.288,687.289 928.847,687.289 929.406,687.289 929.966,687.289 930.525,687.289 931.084,687.289 931.644,687.289 932.203,687.289 932.762,687.289 933.321,687.289 933.881,687.289 934.44,687.289 934.999,687.289 935.558,687.289 936.118,687.289 936.677,687.289 937.236,687.289 937.795,687.289 938.355,687.289 938.914,687.289 939.473,687.289 940.032,687.289 940.592,687.289 941.151,687.289 941.71,687.289 942.269,687.289 942.829,687.289 943.388,687.289 943.947,687.289 944.506,687.289 945.066,687.289 945.625,687.289 946.184,687.289 946.743,687.289 947.303,687.289 947.862,687.289 948.421,687.289 948.98,687.289 949.54,687.289 950.099,687.289 950.658,687.289 951.217,687.289 951.777,687.289 952.336,687.289 952.895,687.289 953.454,687.289 954.014,687.289 954.573,687.289 955.132,687.289 955.691,687.289 956.251,687.289 956.81,687.289 957.369,687.289 957.928,687.289 958.488,687.289 959.047,687.289 959.606,687.289 960.165,687.289 960.725,687.289 961.284,687.289 961.843,687.289 962.402,687.289 962.962,687.289 963.521,687.289 964.08,687.289 964.639,687.289 965.199,687.289 965.758,687.289 966.317,687.289 966.876,687.289 967.436,687.289 967.995,687.289 968.554,687.289 969.113,687.289 969.673,687.289 970.232,687.289 970.791,687.289 971.35,687.289 971.91,687.289 972.469,687.289 973.028,687.289 973.587,687.289 974.147,687.289 974.706,687.289 975.265,687.289 975.824,687.289 976.384,687.289 976.943,687.289 977.502,687.289 978.061,687.289 978.621,687.289 979.18,687.289 979.739,687.289 980.298,687.289 980.858,687.289 981.417,687.289 981.976,687.289 982.535,687.289 983.095,687.289 983.654,687.289 984.213,687.289 984.772,687.289 985.332,687.289 985.891,687.289 986.45,687.289 987.009,687.289 987.569,687.289 988.128,687.289 988.687,687.289 989.246,687.289 989.806,687.289 990.365,687.289 990.924,687.289 991.483,687.289 992.043,687.289 992.602,687.289 993.161,687.289 993.72,687.289 994.28,687.289 994.839,687.289 995.398,687.289 995.957,687.289 996.517,687.289 997.076,687.289 997.635,687.289 998.194,687.289 998.754,687.289 999.313,687.289 999.872,687.289 1000.43,687.289 1000.99,687.289 1001.55,687.289 1002.11,687.289 1002.67,687.289 1003.23,687.289 1003.79,687.289 1004.35,687.289 1004.91,687.289 1005.46,687.289 1006.02,687.289 1006.58,687.289 1007.14,687.289 1007.7,687.289 1008.26,687.289 1008.82,687.289 1009.38,687.289 1009.94,687.289 1010.5,687.289 1011.06,687.289 1011.62,687.289 1012.18,687.289 1012.73,687.289 1013.29,687.289 1013.85,687.289 1014.41,687.289 1014.97,687.289 1015.53,687.289 1016.09,687.289 1016.65,687.289 1017.21,687.289 1017.77,687.289 1018.33,687.289 1018.89,687.289 1019.45,687.289 1020.01,687.289 1020.56,687.289 1021.12,687.289 1021.68,687.289 1022.24,687.289 1022.8,687.289 1023.36,687.289 1023.92,687.289 1024.48,687.289 1025.04,687.289 1025.6,687.289 1026.16,687.289 1026.72,687.289 1027.28,687.289 1027.83,687.289 1028.39,687.289 1028.95,687.289 1029.51,687.289 1030.07,687.289 1030.63,687.289 1031.19,687.289 1031.75,687.289 1032.31,687.289 1032.87,687.289 1033.43,687.289 1033.99,687.289 1034.55,687.289 1035.1,687.289 1035.66,687.289 1036.22,687.289 1036.78,687.289 1037.34,687.289 1037.9,687.289 1038.46,687.289 1039.02,687.289 1039.58,687.289 1040.14,687.289 1040.7,687.289 1041.26,687.289 1041.82,687.289 1042.38,687.289 1042.93,687.289 1043.49,687.289 1044.05,687.289 1044.61,687.289 1045.17,687.289 1045.73,687.289 1046.29,687.289 1046.85,687.289 1047.41,687.289 1047.97,687.289 1048.53,687.289 1049.09,687.289 1049.65,687.289 1050.2,687.289 1050.76,687.289 1051.32,687.289 1051.88,687.289 1052.44,687.289 1053,687.289 1053.56,687.289 1054.12,687.289 1054.68,687.289 1055.24,687.289 1055.8,687.289 1056.36,687.289 1056.92,687.289 1057.48,687.289 1058.03,687.289 1058.59,687.289 1059.15,687.289 1059.71,687.289 1060.27,687.289 1060.83,687.289 1061.39,687.289 1061.95,687.289 1062.51,687.289 1063.07,687.289 1063.63,687.289 1064.19,687.289 1064.75,687.289 1065.3,687.289 1065.86,687.289 1066.42,687.289 1066.98,687.289 1067.54,687.289 1068.1,687.289 1068.66,687.289 1069.22,687.289 1069.78,687.289 1070.34,687.289 1070.9,687.289 1071.46,687.289 1072.02,687.289 1072.57,687.289 1073.13,687.289 1073.69,687.289 1074.25,687.289 1074.81,687.289 1075.37,687.289 1075.93,687.289 1076.49,687.289 1077.05,687.289 1077.61,687.289 1078.17,687.289 1078.73,687.289 1079.29,687.289 1079.85,687.289 1080.4,687.289 1080.96,687.289 1081.52,687.289 1082.08,687.289 1082.64,687.289 1083.2,687.289 1083.76,687.289 1084.32,687.289 1084.88,687.289 1085.44,687.289 1086,687.289 1086.56,687.289 1087.12,687.289 1087.67,687.289 1088.23,687.289 1088.79,687.289 1089.35,687.289 1089.91,687.289 1090.47,687.289 1091.03,687.289 1091.59,687.289 1092.15,687.289 1092.71,687.289 1093.27,687.289 1093.83,687.289 1094.39,687.289 1094.94,687.289 1095.5,687.289 1096.06,687.289 1096.62,687.289 1097.18,687.289 1097.74,687.289 1098.3,687.289 1098.86,687.289 1099.42,687.289 1099.98,687.289 1100.54,687.289 1101.1,687.289 1101.66,687.289 1102.22,687.289 1102.77,687.289 1103.33,687.289 1103.89,687.289 1104.45,687.289 1105.01,687.289 1105.57,687.289 1106.13,687.289 1106.69,687.289 1107.25,687.289 1107.81,687.289 1108.37,687.289 1108.93,687.289 1109.49,687.289 1110.04,687.289 1110.6,687.289 1111.16,687.289 1111.72,687.289 1112.28,687.289 1112.84,687.289 1113.4,687.289 1113.96,687.289 1114.52,687.289 1115.08,687.289 1115.64,687.289 1116.2,687.289 1116.76,687.289 1117.31,687.289 1117.87,687.289 1118.43,687.289 1118.99,687.289 1119.55,687.289 1120.11,687.289 1120.67,687.289 1121.23,687.289 1121.79,687.289 1122.35,687.289 1122.91,687.289 1123.47,687.289 1124.03,687.289 1124.59,687.289 1125.14,687.289 1125.7,687.289 1126.26,687.289 1126.82,687.289 1127.38,687.289 1127.94,687.289 1128.5,687.289 1129.06,687.289 1129.62,687.289 1130.18,687.289 1130.74,687.289 1131.3,687.289 1131.86,687.289 1132.41,687.289 1132.97,687.289 1133.53,687.289 1134.09,687.289 1134.65,687.289 1135.21,687.289 1135.77,687.289 1136.33,687.289 1136.89,687.289 1137.45,687.289 1138.01,687.289 1138.57,687.289 1139.13,687.289 1139.68,687.289 1140.24,687.289 1140.8,687.289 1141.36,687.289 1141.92,687.289 1142.48,687.289 1143.04,687.289 1143.6,687.289 1144.16,687.289 1144.72,687.289 1145.28,687.289 1145.84,687.289 1146.4,687.289 1146.96,687.289 1147.51,687.289 1148.07,687.289 1148.63,687.289 1149.19,687.289 1149.75,687.289 1150.31,687.289 1150.87,687.289 1151.43,687.289 1151.99,687.289 1152.55,687.289 1153.11,687.289 1153.67,687.289 1154.23,687.289 1154.78,687.289 1155.34,687.289 1155.9,687.289 1156.46,687.289 1157.02,687.289 1157.58,687.289 1158.14,687.289 1158.7,687.289 1159.26,687.289 1159.82,687.289 1160.38,687.289 1160.94,687.289 1161.5,687.289 1162.05,687.289 1162.61,687.289 1163.17,687.289 1163.73,687.289 1164.29,687.289 1164.85,687.289 1165.41,687.289 1165.97,687.289 1166.53,687.289 1167.09,687.289 1167.65,687.289 1168.21,687.289 1168.77,687.289 1169.33,687.289 1169.88,687.289 1170.44,687.289 1171,687.289 1171.56,687.289 1172.12,687.289 1172.68,687.289 1173.24,687.289 1173.8,687.289 1174.36,687.289 1174.92,687.289 1175.48,687.289 1176.04,687.289 1176.6,687.289 1177.15,687.289 1177.71,687.289 1178.27,687.289 1178.83,687.289 1179.39,687.289 1179.95,687.289 1180.51,687.289 1181.07,687.289 1181.63,687.289 1182.19,687.289 1182.75,687.289 1183.31,687.289 1183.87,687.289 1184.43,687.289 1184.98,687.289 1185.54,687.289 1186.1,687.289 1186.66,687.289 1187.22,687.289 1187.78,687.289 1188.34,687.289 1188.9,687.289 1189.46,687.289 1190.02,687.289 1190.58,687.289 1191.14,687.289 1191.7,687.289 1192.25,687.289 1192.81,687.289 1193.37,687.289 1193.93,687.289 1194.49,687.289 1195.05,687.289 1195.61,687.289 1196.17,687.289 1196.73,687.289 1197.29,687.289 1197.85,687.289 1198.41,687.289 1198.97,687.289 1199.52,687.289 1200.08,687.289 1200.64,687.289 1201.2,687.289 1201.76,687.289 1202.32,687.289 1202.88,687.289 1203.44,687.289 1204,687.289 1204.56,687.289 1205.12,687.289 1205.68,687.289 1206.24,687.289 1206.8,687.289 1207.35,687.289 1207.91,687.289 1208.47,687.289 1209.03,687.289 1209.59,687.289 1210.15,687.289 1210.71,687.289 1211.27,687.289 1211.83,687.289 1212.39,687.289 1212.95,687.289 1213.51,687.289 1214.07,687.289 1214.62,687.289 1215.18,687.289 1215.74,687.289 1216.3,687.289 1216.86,687.289 1217.42,687.289 1217.98,687.289 1218.54,687.289 1219.1,687.289 1219.66,687.289 1220.22,687.289 1220.78,687.289 1221.34,687.289 1221.89,687.289 1222.45,687.289 1223.01,687.289 1223.57,687.289 1224.13,687.289 1224.69,687.289 1225.25,687.289 1225.81,687.289 1226.37,687.289 1226.93,687.289 1227.49,687.289 1228.05,687.289 1228.61,687.289 1229.17,687.289 1229.72,687.289 1230.28,687.289 1230.84,687.289 1231.4,687.289 1231.96,687.289 1232.52,687.289 1233.08,687.289 1233.64,687.289 1234.2,687.289 1234.76,687.289 1235.32,687.289 1235.88,687.289 1236.44,687.289 1236.99,687.289 1237.55,687.289 1238.11,687.289 1238.67,687.289 1239.23,687.289 1239.79,687.289 1240.35,687.289 1240.91,687.289 1241.47,687.289 1242.03,687.289 1242.59,687.289 1243.15,687.289 1243.71,687.289 1244.26,687.289 1244.82,687.289 1245.38,687.289 1245.94,687.289 1246.5,687.289 1247.06,687.289 1247.62,687.289 1248.18,687.289 1248.74,687.289 1249.3,687.289 1249.86,687.289 1250.42,687.289 1250.98,687.289 1251.54,687.289 1252.09,687.289 1252.65,687.289 1253.21,687.289 1253.77,687.289 1254.33,687.289 1254.89,687.289 1255.45,687.289 1256.01,687.289 1256.57,687.289 1257.13,687.289 1257.69,687.289 1258.25,687.289 1258.81,687.289 1259.36,687.289 1259.92,687.289 1260.48,687.289 1261.04,687.289 1261.6,687.289 1262.16,687.289 1262.72,687.289 1263.28,687.289 1263.84,687.289 1264.4,687.289 1264.96,687.289 1265.52,687.289 1266.08,687.289 1266.63,687.289 1267.19,687.289 1267.75,687.289 1268.31,687.289 1268.87,687.289 1269.43,687.289 1269.99,687.289 1270.55,687.289 1271.11,687.289 1271.67,687.289 1272.23,687.289 1272.79,687.289 1273.35,687.289 1273.91,687.289 1274.46,687.289 1275.02,687.289 1275.58,687.289 1276.14,687.289 1276.7,687.289 1277.26,687.289 1277.82,687.289 1278.38,687.289 1278.94,687.289 1279.5,687.289 1280.06,687.289 1280.62,687.289 1281.18,687.289 1281.73,687.289 1282.29,687.289 1282.85,687.289 1283.41,687.289 1283.97,687.289 1284.53,687.289 1285.09,687.289 1285.65,687.289 1286.21,687.289 1286.77,687.289 1287.33,687.289 1287.89,687.289 1288.45,687.289 1289,687.289 1289.56,687.289 1290.12,687.289 1290.68,687.289 1291.24,687.289 1291.8,687.289 1292.36,687.289 1292.92,687.289 1293.48,687.289 1294.04,687.289 1294.6,687.289 1295.16,687.289 1295.72,687.289 1296.28,687.289 1296.83,687.289 1297.39,687.289 1297.95,687.289 1298.51,687.289 1299.07,687.289 1299.63,687.289 1300.19,687.289 1300.75,687.289 1301.31,687.289 1301.87,687.289 1302.43,687.289 1302.99,687.289 1303.55,687.289 1304.1,687.289 1304.66,687.289 1305.22,687.289 1305.78,687.289 1306.34,687.289 1306.9,687.289 1307.46,687.289 1308.02,687.289 1308.58,687.289 1309.14,687.289 1309.7,687.289 1310.26,687.289 1310.82,687.289 1311.38,687.289 1311.93,687.289 1312.49,687.289 1313.05,687.289 1313.61,687.289 1314.17,687.289 1314.73,687.289 1315.29,687.289 1315.85,687.289 1316.41,687.289 1316.97,687.289 1317.53,687.289 1318.09,687.289 1318.65,687.289 1319.2,687.289 1319.76,687.289 1320.32,687.289 1320.88,687.289 1321.44,687.289 1322,687.289 1322.56,687.289 1323.12,687.289 1323.68,687.289 1324.24,687.289 1324.8,687.289 1325.36,687.289 1325.92,687.289 1326.47,687.289 1327.03,687.289 1327.59,687.289 1328.15,687.289 1328.71,687.289 1329.27,687.289 1329.83,687.289 1330.39,687.289 1330.95,687.289 1331.51,687.289 1332.07,687.289 1332.63,687.289 1333.19,687.289 1333.75,687.289 1334.3,687.289 1334.86,687.289 1335.42,687.289 1335.98,687.289 1336.54,687.289 1337.1,687.289 1337.66,687.289 1338.22,687.289 1338.78,687.289 1339.34,687.289 1339.9,687.289 1340.46,687.289 1341.02,687.289 1341.57,687.289 1342.13,687.289 1342.69,687.289 1343.25,687.289 1343.81,687.289 1344.37,687.289 1344.93,687.289 1345.49,687.289 1346.05,687.289 1346.61,687.289 1347.17,687.289 1347.73,687.289 1348.29,687.289 1348.84,687.289 1349.4,687.289 1349.96,687.289 1350.52,687.289 1351.08,687.289 1351.64,687.289 1352.2,687.289 1352.76,687.289 1353.32,687.289 1353.88,687.289 1354.44,687.289 1355,687.289 1355.56,687.289 1356.12,687.289 1356.67,687.289 1357.23,687.289 1357.79,687.289 1358.35,687.289 1358.91,687.289 1359.47,687.289 1360.03,687.289 1360.59,687.289 1361.15,687.289 1361.71,687.289 1362.27,687.289 1362.83,687.289 1363.39,687.289 1363.94,687.289 1364.5,687.289 1365.06,687.289 1365.62,687.289 1366.18,687.289 1366.74,687.289 1367.3,687.289 1367.86,687.289 1368.42,687.289 1368.98,687.289 1369.54,687.289 1370.1,687.289 1370.66,687.289 1371.21,687.289 1371.77,687.289 1372.33,687.289 1372.89,687.289 1373.45,687.289 1374.01,687.289 1374.57,687.289 1375.13,687.289 1375.69,687.289 1376.25,687.289 1376.81,687.289 1377.37,687.289 1377.93,687.289 1378.49,687.289 1379.04,687.289 1379.6,687.289 1380.16,687.289 1380.72,687.289 1381.28,687.289 1381.84,687.289 1382.4,687.289 1382.96,687.289 1383.52,687.289 1384.08,687.289 1384.64,687.289 1385.2,687.289 1385.76,687.289 1386.31,687.289 1386.87,687.289 1387.43,687.289 1387.99,687.289 1388.55,687.289 1389.11,687.289 1389.67,687.289 1390.23,687.289 1390.79,687.289 1391.35,687.289 1391.91,687.289 1392.47,687.289 1393.03,687.289 1393.58,687.289 1394.14,687.289 1394.7,687.289 1395.26,687.289 1395.82,687.289 1396.38,687.289 1396.94,687.289 1397.5,687.289 1398.06,687.289 1398.62,687.289 1399.18,687.289 1399.74,687.289 1400.3,687.289 1400.86,687.289 1401.41,687.289 1401.97,687.289 1402.53,687.289 1403.09,687.289 1403.65,687.289 1404.21,687.289 1404.77,687.289 1405.33,687.289 1405.89,687.289 1406.45,687.289 1407.01,687.289 1407.57,687.289 1408.13,687.289 1408.68,687.289 1409.24,687.289 1409.8,687.289 1410.36,687.289 1410.92,687.289 1411.48,687.289 1412.04,687.289 1412.6,687.289 1413.16,687.289 1413.72,687.289 1414.28,687.289 1414.84,687.289 1415.4,687.289 1415.95,687.289 1416.51,687.289 1417.07,687.289 1417.63,687.289 1418.19,687.289 1418.75,687.289 1419.31,687.289 1419.87,687.289 1420.43,687.289 1420.99,687.289 1421.55,687.289 1422.11,687.289 1422.67,687.289 1423.23,687.289 1423.78,687.289 1424.34,687.289 1424.9,687.289 1425.46,687.289 1426.02,687.289 1426.58,687.289 1427.14,687.289 1427.7,687.289 1428.26,687.289 1428.82,687.289 1429.38,687.289 1429.94,687.289 1430.5,687.289 1431.05,687.289 1431.61,687.289 1432.17,687.289 1432.73,687.289 1433.29,687.289 1433.85,687.289 1434.41,687.289 1434.97,687.289 1435.53,687.289 1436.09,687.289 1436.65,687.289 1437.21,687.289 1437.77,687.289 1438.33,687.289 1438.88,687.289 1439.44,687.289 1440,687.289 1440.56,687.289 1441.12,687.289 1441.68,687.289 1442.24,687.289 1442.8,687.289 1443.36,687.289 1443.92,687.289 1444.48,687.289 1445.04,687.289 1445.6,687.289 1446.15,687.289 1446.71,687.289 1447.27,687.289 1447.83,687.289 1448.39,687.289 1448.95,687.289 1449.51,687.289 1450.07,687.289 1450.63,687.289 1451.19,687.289 1451.75,687.289 1452.31,687.289 1452.87,687.289 1453.42,687.289 1453.98,687.289 1454.54,687.289 1455.1,687.289 1455.66,687.289 1456.22,687.289 1456.78,687.289 1457.34,687.289 1457.9,687.289 1458.46,687.289 1459.02,687.289 1459.58,687.289 1460.14,687.289 1460.7,687.289 1461.25,687.289 1461.81,687.289 1462.37,687.289 1462.93,687.289 1463.49,687.289 1464.05,687.289 1464.61,687.289 1465.17,687.289 1465.73,687.289 1466.29,687.289 1466.85,687.289 1467.41,687.289 1467.97,687.289 1468.52,687.289 1469.08,687.289 1469.64,687.289 1470.2,687.289 1470.76,687.289 1471.32,687.289 1471.88,687.289 1472.44,687.289 1473,687.289 1473.56,687.289 1474.12,687.289 1474.68,687.289 1475.24,687.289 1475.79,687.289 1476.35,687.289 1476.91,687.289 1477.47,687.289 1478.03,687.289 1478.59,687.289 1479.15,687.289 1479.71,687.289 1480.27,687.289 1480.83,687.289 1481.39,687.289 1481.95,687.289 1482.51,687.289 1483.07,687.289 1483.62,687.289 1484.18,687.289 1484.74,687.289 1485.3,687.289 1485.86,687.289 1486.42,687.289 1486.98,687.289 1487.54,687.289 1488.1,687.289 1488.66,687.289 1489.22,687.289 1489.78,687.289 1490.34,687.289 1490.89,687.289 1491.45,687.289 1492.01,687.289 1492.57,687.289 1493.13,687.289 1493.69,687.289 1494.25,687.289 1494.81,687.289 1495.37,687.289 1495.93,687.289 1496.49,687.289 1497.05,687.289 1497.61,687.289 1498.16,687.289 1498.72,687.289 1499.28,687.289 1499.84,687.289 1500.4,687.289 1500.96,687.289 1501.52,687.289 1502.08,687.289 1502.64,687.289 1503.2,687.289 1503.76,687.289 1504.32,687.289 1504.88,687.289 1505.44,687.289 1505.99,687.289 1506.55,687.289 1507.11,687.289 1507.67,687.289 1508.23,687.289 1508.79,687.289 1509.35,687.289 1509.91,687.289 1510.47,687.289 1511.03,687.289 1511.59,687.289 1512.15,687.289 1512.71,687.289 1513.26,687.289 1513.82,687.289 1514.38,687.289 1514.94,687.289 1515.5,687.289 1516.06,687.289 1516.62,687.289 1517.18,687.289 1517.74,687.289 1518.3,687.289 1518.86,687.289 1519.42,687.289 1519.98,687.289 1520.53,687.289 1521.09,687.289 1521.65,687.289 1522.21,687.289 1522.77,687.289 1523.33,687.289 1523.89,687.289 1524.45,687.289 1525.01,687.289 1525.57,687.289 1526.13,687.289 1526.69,687.289 1527.25,687.289 1527.81,687.289 1528.36,687.289 1528.92,687.289 1529.48,687.289 1530.04,687.289 1530.6,687.289 1531.16,687.289 1531.72,687.289 1532.28,687.289 1532.84,687.289 1533.4,687.289 1533.96,687.289 1534.52,687.289 1535.08,687.289 1535.63,687.289 1536.19,687.289 1536.75,687.289 1537.31,687.289 1537.87,687.289 1538.43,687.289 1538.99,687.289 1539.55,687.289 1540.11,687.289 1540.67,687.289 1541.23,687.289 1541.79,687.289 1542.35,687.289 1542.9,687.289 1543.46,687.289 1544.02,687.289 1544.58,687.289 1545.14,687.289 1545.7,687.289 1546.26,687.289 1546.82,687.289 1547.38,687.289 1547.94,687.289 1548.5,687.289 1549.06,687.289 1549.62,687.289 1550.18,687.289 1550.73,687.289 1551.29,687.289 1551.85,687.289 1552.41,687.289 1552.97,687.289 1553.53,687.289 1554.09,687.289 1554.65,687.289 1555.21,687.289 1555.77,687.289 1556.33,687.289 1556.89,687.289 1557.45,687.289 1558,687.289 1558.56,687.289 1559.12,687.289 1559.68,687.289 1560.24,687.289 1560.8,687.289 1561.36,687.289 1561.92,687.289 1562.48,687.289 1563.04,687.289 1563.6,687.289 1564.16,687.289 1564.72,687.289 1565.28,687.289 1565.83,687.289 1566.39,687.289 1566.95,687.289 1567.51,687.289 1568.07,687.289 1568.63,687.289 1569.19,687.289 1569.75,687.289 1570.31,687.289 1570.87,687.289 1571.43,687.289 1571.99,687.289 1572.55,687.289 1573.1,687.289 1573.66,687.289 1574.22,687.289 1574.78,687.289 1575.34,687.289 1575.9,687.289 1576.46,687.289 1577.02,687.289 1577.58,687.289 1578.14,687.289 1578.7,687.289 1579.26,687.289 1579.82,687.289 1580.37,687.289 1580.93,687.289 1581.49,687.289 1582.05,687.289 1582.61,687.289 1583.17,687.289 1583.73,687.289 1584.29,687.289 1584.85,687.289 1585.41,687.289 1585.97,687.289 1586.53,687.289 1587.09,687.289 1587.65,687.289 1588.2,687.289 1588.76,687.289 1589.32,687.289 1589.88,687.289 1590.44,687.289 1591,687.289 1591.56,687.289 1592.12,687.289 1592.68,687.289 1593.24,687.289 1593.8,687.289 1594.36,687.289 1594.92,687.289 1595.47,687.289 1596.03,687.289 1596.59,687.289 1597.15,687.289 1597.71,687.289 1598.27,687.289 1598.83,687.289 1599.39,687.289 1599.95,687.289 1600.51,687.289 1601.07,687.289 1601.63,687.289 1602.19,687.289 1602.74,687.289 1603.3,687.289 1603.86,687.289 1604.42,687.289 1604.98,687.289 1605.54,687.289 1606.1,687.289 1606.66,687.289 1607.22,687.289 1607.78,687.289 1608.34,687.289 1608.9,687.289 1609.46,687.289 1610.02,687.289 1610.57,687.289 1611.13,687.289 1611.69,687.289 1612.25,687.289 1612.81,687.289 1613.37,687.289 1613.93,687.289 1614.49,687.289 1615.05,687.289 1615.61,687.289 1616.17,687.289 1616.73,687.289 1617.29,687.289 1617.84,687.289 1618.4,687.289 1618.96,687.289 1619.52,687.289 1620.08,687.289 1620.64,687.289 1621.2,687.289 1621.76,687.289 1622.32,687.289 1622.88,687.289 1623.44,687.289 1624,687.289 1624.56,687.289 1625.11,687.289 1625.67,687.289 1626.23,687.289 1626.79,687.289 1627.35,687.289 1627.91,687.289 1628.47,687.289 1629.03,687.289 1629.59,687.289 1630.15,687.289 1630.71,687.289 1631.27,687.289 1631.83,687.289 1632.39,687.289 1632.94,687.289 1633.5,687.289 1634.06,687.289 1634.62,687.289 1635.18,687.289 1635.74,687.289 1636.3,687.289 1636.86,687.289 1637.42,687.289 1637.98,687.289 1638.54,687.289 1639.1,687.289 1639.66,687.289 1640.21,687.289 1640.77,687.289 1641.33,687.289 1641.89,687.289 1642.45,687.289 1643.01,687.289 1643.57,687.289 1644.13,687.289 1644.69,687.289 1645.25,687.289 1645.81,687.289 1646.37,687.289 1646.93,687.289 1647.48,687.289 1648.04,687.289 1648.6,687.289 1649.16,687.289 1649.72,687.289 1650.28,687.289 1650.84,687.289 1651.4,687.289 1651.96,687.289 1652.52,687.289 1653.08,687.289 1653.64,687.289 1654.2,687.289 1654.76,687.289 1655.31,687.289 1655.87,687.289 1656.43,687.289 1656.99,687.289 1657.55,687.289 1658.11,687.289 1658.67,687.289 1659.23,687.289 1659.79,687.289 1660.35,687.289 1660.91,687.289 1661.47,687.289 1662.03,687.289 1662.58,687.289 1663.14,687.289 1663.7,687.289 1664.26,687.289 1664.82,687.289 1665.38,687.289 1665.94,687.289 1666.5,687.289 1667.06,687.289 1667.62,687.289 1668.18,687.289 1668.74,687.289 1669.3,687.289 1669.85,687.289 1670.41,687.289 1670.97,687.289 1671.53,687.289 1672.09,687.289 1672.65,687.289 1673.21,687.289 1673.77,687.289 1674.33,687.289 1674.89,687.289 1675.45,687.289 1676.01,687.289 1676.57,687.289 1677.13,687.289 1677.68,687.289 1678.24,687.289 1678.8,687.289 1679.36,687.289 1679.92,687.289 1680.48,687.289 1681.04,687.289 1681.6,687.289 1682.16,687.289 1682.72,687.289 1683.28,687.289 1683.84,687.289 1684.4,687.289 1684.95,687.289 1685.51,687.289 1686.07,687.289 1686.63,687.289 1687.19,687.289 1687.75,687.289 1688.31,687.289 1688.87,687.289 1689.43,687.289 1689.99,687.289 1690.55,687.289 1691.11,687.289 1691.67,687.289 1692.23,687.289 1692.78,687.289 1693.34,687.289 1693.9,687.289 1694.46,687.289 1695.02,687.289 1695.58,687.289 1696.14,687.289 1696.7,687.289 1697.26,687.289 1697.82,687.289 1698.38,687.289 1698.94,687.289 1699.5,687.289 1700.05,687.289 1700.61,687.289 1701.17,687.289 1701.73,687.289 1702.29,687.289 1702.85,687.289 1703.41,687.289 1703.97,687.289 1704.53,687.289 1705.09,687.289 1705.65,687.289 1706.21,687.289 1706.77,687.289 1707.32,687.289 1707.88,687.289 1708.44,687.289 1709,687.289 1709.56,687.289 1710.12,687.289 1710.68,687.289 1711.24,687.289 1711.8,687.289 1712.36,687.289 1712.92,687.289 1713.48,687.289 1714.04,687.289 1714.6,687.289 1715.15,687.289 1715.71,687.289 1716.27,687.289 1716.83,687.289 1717.39,687.289 1717.95,687.289 1718.51,687.289 1719.07,687.289 1719.63,687.289 1720.19,687.289 1720.75,687.289 1721.31,687.289 1721.87,687.289 1722.42,687.289 1722.98,687.289 1723.54,687.289 1724.1,687.289 1724.66,687.289 1725.22,687.289 1725.78,687.289 1726.34,687.289 1726.9,687.289 1727.46,687.289 1728.02,687.289 1728.58,687.289 1729.14,687.289 1729.69,687.289 1730.25,687.289 1730.81,687.289 1731.37,687.289 1731.93,687.289 1732.49,687.289 1733.05,687.289 1733.61,687.289 1734.17,687.289 1734.73,687.289 1735.29,687.289 1735.85,687.289 1736.41,687.289 1736.97,687.289 1737.52,687.289 1738.08,687.289 1738.64,687.289 1739.2,687.289 1739.76,687.289 1740.32,687.289 1740.88,687.289 1741.44,687.289 1742,687.289 1742.56,687.289 1743.12,687.289 1743.68,687.289 1744.24,687.289 1744.79,687.289 1745.35,687.289 1745.91,687.289 1746.47,687.289 1747.03,687.289 1747.59,687.289 1748.15,687.289 1748.71,687.289 1749.27,687.289 1749.83,687.289 1750.39,687.289 1750.95,687.289 1751.51,687.289 1752.06,687.289 1752.62,687.289 1753.18,687.289 1753.74,687.289 1754.3,687.289 1754.86,687.289 1755.42,687.289 1755.98,687.289 1756.54,687.289 1757.1,687.289 1757.66,687.289 1758.22,687.289 1758.78,687.289 1759.34,687.289 1759.89,687.289 1760.45,687.289 1761.01,687.289 1761.57,687.289 1762.13,687.289 1762.69,687.289 1763.25,687.289 1763.81,687.289 1764.37,687.289 1764.93,687.289 1765.49,687.289 1766.05,687.289 1766.61,687.289 1767.16,687.289 1767.72,687.289 1768.28,687.289 1768.84,687.289 1769.4,687.289 1769.96,687.289 1770.52,687.289 1771.08,687.289 1771.64,687.289 1772.2,687.289 1772.76,687.289 1773.32,687.289 1773.88,687.289 1774.43,687.289 1774.99,687.289 1775.55,687.289 1776.11,687.289 1776.67,687.289 1777.23,687.289 1777.79,687.289 1778.35,687.289 1778.91,687.289 1779.47,687.289 1780.03,687.289 1780.59,687.289 1781.15,687.289 1781.71,687.289 1782.26,687.289 1782.82,687.289 1783.38,687.289 1783.94,687.289 1784.5,687.289 1785.06,687.289 1785.62,687.289 1786.18,687.289 1786.74,687.289 1787.3,687.289 1787.86,687.289 1788.42,687.289 1788.98,687.289 1789.53,687.289 1790.09,687.289 1790.65,687.289 1791.21,687.289 1791.77,687.289 1792.33,687.289 1792.89,687.289 1793.45,687.289 1794.01,687.289 1794.57,687.289 1795.13,687.289 1795.69,687.289 1796.25,687.289 1796.8,687.289 1797.36,687.289 1797.92,687.289 1798.48,687.289 1799.04,687.289 1799.6,687.289 1800.16,687.289 1800.72,687.289 1801.28,687.289 1801.84,687.289 1802.4,687.289 1802.96,687.289 1803.52,687.289 1804.08,687.289 1804.63,687.289 1805.19,687.289 1805.75,687.289 1806.31,687.289 1806.87,687.289 1807.43,687.289 1807.99,687.289 1808.55,687.289 1809.11,687.289 1809.67,687.289 1810.23,687.289 1810.79,687.289 1811.35,687.289 1811.9,687.289 1812.46,687.289 1813.02,687.289 1813.58,687.289 1814.14,687.289 1814.7,687.289 1815.26,687.289 1815.82,687.289 1816.38,687.289 1816.94,687.289 1817.5,687.289 1818.06,687.289 1818.62,687.289 1819.18,687.289 1819.73,687.289 1820.29,687.289 1820.85,687.289 1821.41,687.289 1821.97,687.289 1822.53,687.289 1823.09,687.289 1823.65,687.289 1824.21,687.289 1824.77,687.289 1825.33,687.289 1825.89,687.289 1826.45,687.289 1827,687.289 1827.56,687.289 1828.12,687.289 1828.68,687.289 1829.24,687.289 1829.8,687.289 1830.36,687.289 1830.92,687.289 1831.48,687.289 1832.04,687.289 1832.6,687.289 1833.16,687.289 1833.72,687.289 1834.27,687.289 1834.83,687.289 1835.39,687.289 1835.95,687.289 1836.51,687.289 1837.07,687.289 1837.63,687.289 1838.19,687.289 \"/>\n<path clip-path=\"url(#clip753)\" d=\"M720.247 683.958 L720.806 683.958 L721.365 683.958 L721.924 683.958 L722.484 683.958 L723.043 683.958 L723.602 683.958 L724.161 683.958 L724.721 683.958 L725.28 683.958 L725.839 683.958 L726.398 683.958 L726.958 683.958 L727.517 683.958 L728.076 683.958 L728.635 683.958 L729.195 683.958 L729.754 683.958 L730.313 683.958 L730.872 683.958 L731.432 683.958 L731.991 683.958 L732.55 683.958 L733.109 683.958 L733.669 683.958 L734.228 683.958 L734.787 683.958 L735.346 683.958 L735.906 683.958 L736.465 683.958 L737.024 683.958 L737.583 683.958 L738.143 683.958 L738.702 683.958 L739.261 683.958 L739.82 683.958 L740.38 683.958 L740.939 683.958 L741.498 683.958 L742.057 683.958 L742.617 683.958 L743.176 683.958 L743.735 683.958 L744.294 683.958 L744.854 683.958 L745.413 683.958 L745.972 683.958 L746.531 683.958 L747.091 683.958 L747.65 683.958 L748.209 683.958 L748.768 683.958 L749.328 683.958 L749.887 683.958 L750.446 683.958 L751.005 683.958 L751.565 683.958 L752.124 683.958 L752.683 683.958 L753.242 683.958 L753.802 683.958 L754.361 683.958 L754.92 683.958 L755.479 683.958 L756.039 683.958 L756.598 683.958 L757.157 683.958 L757.716 683.958 L758.276 683.958 L758.835 683.958 L759.394 683.958 L759.953 683.958 L760.513 683.958 L761.072 683.958 L761.631 683.958 L762.19 683.958 L762.75 683.958 L763.309 683.958 L763.868 683.958 L764.427 683.958 L764.987 683.958 L765.546 683.958 L766.105 683.958 L766.664 683.958 L767.224 683.958 L767.783 683.958 L768.342 683.958 L768.901 683.958 L769.461 683.958 L770.02 683.958 L770.579 683.958 L771.138 683.958 L771.698 683.958 L772.257 683.958 L772.816 683.958 L773.375 683.958 L773.935 683.958 L774.494 683.958 L775.053 683.958 L775.612 683.958 L776.172 683.958 L776.731 683.958 L777.29 683.958 L777.849 683.958 L778.409 683.958 L778.968 683.958 L779.527 683.958 L780.086 683.958 L780.646 683.958 L781.205 683.958 L781.764 683.958 L782.323 683.958 L782.883 683.958 L783.442 683.958 L784.001 683.958 L784.56 683.958 L785.12 683.958 L785.679 683.958 L786.238 683.958 L786.797 683.958 L787.357 683.958 L787.916 683.958 L788.475 683.958 L789.034 683.958 L789.594 683.958 L790.153 683.958 L790.712 683.958 L791.271 683.958 L791.831 683.958 L792.39 683.958 L792.949 683.958 L793.508 683.958 L794.068 683.958 L794.627 683.958 L795.186 683.958 L795.745 683.958 L796.305 683.958 L796.864 683.958 L797.423 683.958 L797.982 683.958 L798.542 683.958 L799.101 683.958 L799.66 683.958 L800.219 683.958 L800.779 683.958 L801.338 683.958 L801.897 683.958 L802.456 683.958 L803.016 683.958 L803.575 683.958 L804.134 683.958 L804.693 683.958 L805.253 683.958 L805.812 683.958 L806.371 683.958 L806.931 683.958 L807.49 683.958 L808.049 683.958 L808.608 683.958 L809.168 683.958 L809.727 683.958 L810.286 683.958 L810.845 683.958 L811.405 683.958 L811.964 683.958 L812.523 683.958 L813.082 683.958 L813.642 683.958 L814.201 683.958 L814.76 683.958 L815.319 683.958 L815.879 683.958 L816.438 683.958 L816.997 683.958 L817.556 683.958 L818.116 683.958 L818.675 683.958 L819.234 683.958 L819.793 683.958 L820.353 683.958 L820.912 683.958 L821.471 683.958 L822.03 683.958 L822.59 683.958 L823.149 683.958 L823.708 683.958 L824.267 683.958 L824.827 683.958 L825.386 683.958 L825.945 683.958 L826.504 683.958 L827.064 683.958 L827.623 683.958 L828.182 683.958 L828.741 683.958 L829.301 683.958 L829.86 683.958 L830.419 683.958 L830.978 683.958 L831.538 683.958 L832.097 683.958 L832.656 683.958 L833.215 683.958 L833.775 683.958 L834.334 683.958 L834.893 683.958 L835.452 683.958 L836.012 683.958 L836.571 683.958 L837.13 683.958 L837.689 683.958 L838.249 683.958 L838.808 683.958 L839.367 683.958 L839.926 683.958 L840.486 683.958 L841.045 683.958 L841.604 683.958 L842.163 683.958 L842.723 683.958 L843.282 683.958 L843.841 683.958 L844.4 683.958 L844.96 683.958 L845.519 683.958 L846.078 683.958 L846.637 683.958 L847.197 683.958 L847.756 683.958 L848.315 683.958 L848.874 683.958 L849.434 683.958 L849.993 683.958 L850.552 683.958 L851.111 683.958 L851.671 683.958 L852.23 683.958 L852.789 683.958 L853.348 683.958 L853.908 683.958 L854.467 683.958 L855.026 683.958 L855.585 683.958 L856.145 683.958 L856.704 683.958 L857.263 683.958 L857.822 683.958 L858.382 683.958 L858.941 683.958 L859.5 683.958 L860.059 683.958 L860.619 683.958 L861.178 683.958 L861.737 683.958 L862.296 683.958 L862.856 683.958 L863.415 683.958 L863.974 683.958 L864.533 683.958 L865.093 683.958 L865.652 683.958 L866.211 683.958 L866.77 683.958 L867.33 683.958 L867.889 683.958 L868.448 683.958 L869.007 683.958 L869.567 683.958 L870.126 683.958 L870.685 683.958 L871.244 683.958 L871.804 683.958 L872.363 683.958 L872.922 683.958 L873.481 683.958 L874.041 683.958 L874.6 683.958 L875.159 683.958 L875.718 683.958 L876.278 683.958 L876.837 683.958 L877.396 683.958 L877.955 683.958 L878.515 683.958 L879.074 683.958 L879.633 683.958 L880.192 683.958 L880.752 683.958 L881.311 683.958 L881.87 683.958 L882.429 683.958 L882.989 683.958 L883.548 683.958 L884.107 683.958 L884.666 683.958 L885.226 683.958 L885.785 683.958 L886.344 683.958 L886.903 683.958 L887.463 683.958 L888.022 683.958 L888.581 683.958 L889.14 683.958 L889.7 683.958 L890.259 683.958 L890.818 683.958 L891.377 683.958 L891.937 683.958 L892.496 683.958 L893.055 683.958 L893.614 683.958 L894.174 683.958 L894.733 683.958 L895.292 683.958 L895.851 683.958 L896.411 683.958 L896.97 683.958 L897.529 683.958 L898.088 683.958 L898.648 683.958 L899.207 683.958 L899.766 683.958 L900.325 683.958 L900.885 683.958 L901.444 683.958 L902.003 683.958 L902.562 683.958 L903.122 683.958 L903.681 683.958 L904.24 683.958 L904.799 683.958 L905.359 683.958 L905.918 683.958 L906.477 683.958 L907.036 683.958 L907.596 683.958 L908.155 683.958 L908.714 683.958 L909.273 683.958 L909.833 683.958 L910.392 683.958 L910.951 683.958 L911.51 683.958 L912.07 683.958 L912.629 683.958 L913.188 683.958 L913.747 683.958 L914.307 683.958 L914.866 683.958 L915.425 683.958 L915.984 683.958 L916.544 683.958 L917.103 683.958 L917.662 683.958 L918.221 683.958 L918.781 683.958 L919.34 683.958 L919.899 683.958 L920.458 683.958 L921.018 683.958 L921.577 683.958 L922.136 683.958 L922.695 683.958 L923.255 683.958 L923.814 683.958 L924.373 683.958 L924.932 683.958 L925.492 683.958 L926.051 683.958 L926.61 683.958 L927.169 683.958 L927.729 683.958 L928.288 683.958 L928.847 683.958 L929.406 683.958 L929.966 683.958 L930.525 683.958 L931.084 683.958 L931.644 683.958 L932.203 683.958 L932.762 683.958 L933.321 683.958 L933.881 683.958 L934.44 683.958 L934.999 683.958 L935.558 683.958 L936.118 683.958 L936.677 683.958 L937.236 683.958 L937.795 683.958 L938.355 683.958 L938.914 683.958 L939.473 683.958 L940.032 683.958 L940.592 683.958 L941.151 683.958 L941.71 683.958 L942.269 683.958 L942.829 683.958 L943.388 683.958 L943.947 683.958 L944.506 683.958 L945.066 683.958 L945.625 683.958 L946.184 683.958 L946.743 683.958 L947.303 683.958 L947.862 683.958 L948.421 683.958 L948.98 683.958 L949.54 683.958 L950.099 683.958 L950.658 683.958 L951.217 683.958 L951.777 683.958 L952.336 683.958 L952.895 683.958 L953.454 683.958 L954.014 683.958 L954.573 683.958 L955.132 683.958 L955.691 683.958 L956.251 683.958 L956.81 683.958 L957.369 683.958 L957.928 683.958 L958.488 683.958 L959.047 683.958 L959.606 683.958 L960.165 683.958 L960.725 683.958 L961.284 683.958 L961.843 683.958 L962.402 683.958 L962.962 683.958 L963.521 683.958 L964.08 683.958 L964.639 683.958 L965.199 683.958 L965.758 683.958 L966.317 683.958 L966.876 683.958 L967.436 683.958 L967.995 683.958 L968.554 683.958 L969.113 683.958 L969.673 683.958 L970.232 683.958 L970.791 683.958 L971.35 683.958 L971.91 683.958 L972.469 683.958 L973.028 683.958 L973.587 683.958 L974.147 683.958 L974.706 683.958 L975.265 683.958 L975.824 683.958 L976.384 683.958 L976.943 683.958 L977.502 683.958 L978.061 683.958 L978.621 683.958 L979.18 683.958 L979.739 683.958 L980.298 683.958 L980.858 683.958 L981.417 683.958 L981.976 683.958 L982.535 683.958 L983.095 683.958 L983.654 683.958 L984.213 683.958 L984.772 683.958 L985.332 683.958 L985.891 683.958 L986.45 683.958 L987.009 683.958 L987.569 683.958 L988.128 683.958 L988.687 683.958 L989.246 683.958 L989.806 683.958 L990.365 683.958 L990.924 683.958 L991.483 683.958 L992.043 683.958 L992.602 683.958 L993.161 683.958 L993.72 683.958 L994.28 683.958 L994.839 683.958 L995.398 683.958 L995.957 683.958 L996.517 683.958 L997.076 683.958 L997.635 683.958 L998.194 683.958 L998.754 683.958 L999.313 683.958 L999.872 683.958 L1000.43 683.958 L1000.99 683.958 L1001.55 683.958 L1002.11 683.958 L1002.67 683.958 L1003.23 683.958 L1003.79 683.958 L1004.35 683.958 L1004.91 683.958 L1005.46 683.958 L1006.02 683.958 L1006.58 683.958 L1007.14 683.958 L1007.7 683.958 L1008.26 683.958 L1008.82 683.958 L1009.38 683.958 L1009.94 683.958 L1010.5 683.958 L1011.06 683.958 L1011.62 683.958 L1012.18 683.958 L1012.73 683.958 L1013.29 683.958 L1013.85 683.958 L1014.41 683.958 L1014.97 683.958 L1015.53 683.958 L1016.09 683.958 L1016.65 683.958 L1017.21 683.958 L1017.77 683.958 L1018.33 683.958 L1018.89 683.958 L1019.45 683.958 L1020.01 683.958 L1020.56 683.958 L1021.12 683.958 L1021.68 683.958 L1022.24 683.958 L1022.8 683.958 L1023.36 683.958 L1023.92 683.958 L1024.48 683.958 L1025.04 683.958 L1025.6 683.958 L1026.16 683.958 L1026.72 683.958 L1027.28 683.958 L1027.83 683.958 L1028.39 683.958 L1028.95 683.958 L1029.51 683.958 L1030.07 683.958 L1030.63 683.958 L1031.19 683.958 L1031.75 683.958 L1032.31 683.958 L1032.87 683.958 L1033.43 683.958 L1033.99 683.958 L1034.55 683.958 L1035.1 683.958 L1035.66 683.958 L1036.22 683.958 L1036.78 683.958 L1037.34 683.958 L1037.9 683.958 L1038.46 683.958 L1039.02 683.958 L1039.58 683.958 L1040.14 683.958 L1040.7 683.958 L1041.26 683.958 L1041.82 683.958 L1042.38 683.958 L1042.93 683.958 L1043.49 683.958 L1044.05 683.958 L1044.61 683.958 L1045.17 683.958 L1045.73 683.958 L1046.29 683.958 L1046.85 683.958 L1047.41 683.958 L1047.97 683.958 L1048.53 683.958 L1049.09 683.958 L1049.65 683.958 L1050.2 683.958 L1050.76 683.958 L1051.32 683.958 L1051.88 683.958 L1052.44 683.958 L1053 683.958 L1053.56 683.958 L1054.12 683.958 L1054.68 683.958 L1055.24 683.958 L1055.8 683.958 L1056.36 683.958 L1056.92 683.958 L1057.48 683.958 L1058.03 683.958 L1058.59 683.958 L1059.15 683.958 L1059.71 683.958 L1060.27 683.958 L1060.83 683.958 L1061.39 683.958 L1061.95 683.958 L1062.51 683.958 L1063.07 683.958 L1063.63 683.958 L1064.19 683.958 L1064.75 683.958 L1065.3 683.958 L1065.86 683.958 L1066.42 683.958 L1066.98 683.958 L1067.54 683.958 L1068.1 683.958 L1068.66 683.958 L1069.22 683.958 L1069.78 683.958 L1070.34 683.958 L1070.9 683.958 L1071.46 683.958 L1072.02 683.958 L1072.57 683.958 L1073.13 683.958 L1073.69 683.958 L1074.25 683.958 L1074.81 683.958 L1075.37 683.958 L1075.93 683.958 L1076.49 683.958 L1077.05 683.958 L1077.61 683.958 L1078.17 683.958 L1078.73 683.958 L1079.29 683.958 L1079.85 683.958 L1080.4 683.958 L1080.96 683.958 L1081.52 683.958 L1082.08 683.958 L1082.64 683.958 L1083.2 683.958 L1083.76 683.958 L1084.32 683.958 L1084.88 683.958 L1085.44 683.958 L1086 683.958 L1086.56 683.958 L1087.12 683.958 L1087.67 683.958 L1088.23 683.958 L1088.79 683.958 L1089.35 683.958 L1089.91 683.958 L1090.47 683.958 L1091.03 683.958 L1091.59 683.958 L1092.15 683.958 L1092.71 683.958 L1093.27 683.958 L1093.83 683.958 L1094.39 683.958 L1094.94 683.958 L1095.5 683.958 L1096.06 683.958 L1096.62 683.958 L1097.18 683.958 L1097.74 683.958 L1098.3 683.958 L1098.86 683.958 L1099.42 683.958 L1099.98 683.958 L1100.54 683.958 L1101.1 683.958 L1101.66 683.958 L1102.22 683.958 L1102.77 683.958 L1103.33 683.958 L1103.89 683.958 L1104.45 683.958 L1105.01 683.958 L1105.57 683.958 L1106.13 683.958 L1106.69 683.958 L1107.25 683.958 L1107.81 683.958 L1108.37 683.958 L1108.93 683.958 L1109.49 683.958 L1110.04 683.958 L1110.6 683.958 L1111.16 683.958 L1111.72 683.958 L1112.28 683.958 L1112.84 683.958 L1113.4 683.958 L1113.96 683.958 L1114.52 683.958 L1115.08 683.958 L1115.64 683.958 L1116.2 683.958 L1116.76 683.958 L1117.31 683.958 L1117.87 683.958 L1118.43 683.958 L1118.99 683.958 L1119.55 683.958 L1120.11 683.958 L1120.67 683.958 L1121.23 683.958 L1121.79 683.958 L1122.35 683.958 L1122.91 683.958 L1123.47 683.958 L1124.03 683.958 L1124.59 683.958 L1125.14 683.958 L1125.7 683.958 L1126.26 683.958 L1126.82 683.958 L1127.38 683.958 L1127.94 683.958 L1128.5 683.958 L1129.06 683.958 L1129.62 683.958 L1130.18 683.958 L1130.74 683.958 L1131.3 683.958 L1131.86 683.958 L1132.41 683.958 L1132.97 683.958 L1133.53 683.958 L1134.09 683.958 L1134.65 683.958 L1135.21 683.958 L1135.77 683.958 L1136.33 683.958 L1136.89 683.958 L1137.45 683.958 L1138.01 683.958 L1138.57 683.958 L1139.13 683.958 L1139.68 683.958 L1140.24 683.958 L1140.8 683.958 L1141.36 683.958 L1141.92 683.958 L1142.48 683.958 L1143.04 683.958 L1143.6 683.958 L1144.16 683.958 L1144.72 683.958 L1145.28 683.958 L1145.84 683.958 L1146.4 683.958 L1146.96 683.958 L1147.51 683.958 L1148.07 683.958 L1148.63 683.958 L1149.19 683.958 L1149.75 683.958 L1150.31 683.958 L1150.87 683.958 L1151.43 683.958 L1151.99 683.958 L1152.55 683.958 L1153.11 683.958 L1153.67 683.958 L1154.23 683.958 L1154.78 683.958 L1155.34 683.958 L1155.9 683.958 L1156.46 683.958 L1157.02 683.958 L1157.58 683.958 L1158.14 683.958 L1158.7 683.958 L1159.26 683.958 L1159.82 683.958 L1160.38 683.958 L1160.94 683.958 L1161.5 683.958 L1162.05 683.958 L1162.61 683.958 L1163.17 683.958 L1163.73 683.958 L1164.29 683.958 L1164.85 683.958 L1165.41 683.958 L1165.97 683.958 L1166.53 683.958 L1167.09 683.958 L1167.65 683.958 L1168.21 683.958 L1168.77 683.958 L1169.33 683.958 L1169.88 683.958 L1170.44 683.958 L1171 683.958 L1171.56 683.958 L1172.12 683.958 L1172.68 683.958 L1173.24 683.958 L1173.8 683.958 L1174.36 683.958 L1174.92 683.958 L1175.48 683.958 L1176.04 683.958 L1176.6 683.958 L1177.15 683.958 L1177.71 683.958 L1178.27 683.958 L1178.83 683.958 L1179.39 683.958 L1179.95 683.958 L1180.51 683.958 L1181.07 683.958 L1181.63 683.958 L1182.19 683.958 L1182.75 683.958 L1183.31 683.958 L1183.87 683.958 L1184.43 683.958 L1184.98 683.958 L1185.54 683.958 L1186.1 683.958 L1186.66 683.958 L1187.22 683.958 L1187.78 683.958 L1188.34 683.958 L1188.9 683.958 L1189.46 683.958 L1190.02 683.958 L1190.58 683.958 L1191.14 683.958 L1191.7 683.958 L1192.25 683.958 L1192.81 683.958 L1193.37 683.958 L1193.93 683.958 L1194.49 683.958 L1195.05 683.958 L1195.61 683.958 L1196.17 683.958 L1196.73 683.958 L1197.29 683.958 L1197.85 683.958 L1198.41 683.958 L1198.97 683.958 L1199.52 683.958 L1200.08 683.958 L1200.64 683.958 L1201.2 683.958 L1201.76 683.958 L1202.32 683.958 L1202.88 683.958 L1203.44 683.958 L1204 683.958 L1204.56 683.958 L1205.12 683.958 L1205.68 683.958 L1206.24 683.958 L1206.8 683.958 L1207.35 683.958 L1207.91 683.958 L1208.47 683.958 L1209.03 683.958 L1209.59 683.958 L1210.15 683.958 L1210.71 683.958 L1211.27 683.958 L1211.83 683.958 L1212.39 683.958 L1212.95 683.958 L1213.51 683.958 L1214.07 683.958 L1214.62 683.958 L1215.18 683.958 L1215.74 683.958 L1216.3 683.958 L1216.86 683.958 L1217.42 683.958 L1217.98 683.958 L1218.54 683.958 L1219.1 683.958 L1219.66 683.958 L1220.22 683.958 L1220.78 683.958 L1221.34 683.958 L1221.89 683.958 L1222.45 683.958 L1223.01 683.958 L1223.57 683.958 L1224.13 683.958 L1224.69 683.958 L1225.25 683.958 L1225.81 683.958 L1226.37 683.958 L1226.93 683.958 L1227.49 683.958 L1228.05 683.958 L1228.61 683.958 L1229.17 683.958 L1229.72 683.958 L1230.28 683.958 L1230.84 683.958 L1231.4 683.958 L1231.96 683.958 L1232.52 683.958 L1233.08 683.958 L1233.64 683.958 L1234.2 683.958 L1234.76 683.958 L1235.32 683.958 L1235.88 683.958 L1236.44 683.958 L1236.99 683.958 L1237.55 683.958 L1238.11 683.958 L1238.67 683.958 L1239.23 683.958 L1239.79 683.958 L1240.35 683.958 L1240.91 683.958 L1241.47 683.958 L1242.03 683.958 L1242.59 683.958 L1243.15 683.958 L1243.71 683.958 L1244.26 683.958 L1244.82 683.958 L1245.38 683.958 L1245.94 683.958 L1246.5 683.958 L1247.06 683.958 L1247.62 683.958 L1248.18 683.958 L1248.74 683.958 L1249.3 683.958 L1249.86 683.958 L1250.42 683.958 L1250.98 683.958 L1251.54 683.958 L1252.09 683.958 L1252.65 683.958 L1253.21 683.958 L1253.77 683.958 L1254.33 683.958 L1254.89 683.958 L1255.45 683.958 L1256.01 683.958 L1256.57 683.958 L1257.13 683.958 L1257.69 683.958 L1258.25 683.958 L1258.81 683.958 L1259.36 683.958 L1259.92 683.958 L1260.48 683.958 L1261.04 683.958 L1261.6 683.958 L1262.16 683.958 L1262.72 683.958 L1263.28 683.958 L1263.84 683.958 L1264.4 683.958 L1264.96 683.958 L1265.52 683.958 L1266.08 683.958 L1266.63 683.958 L1267.19 683.958 L1267.75 683.958 L1268.31 683.958 L1268.87 683.958 L1269.43 683.958 L1269.99 683.958 L1270.55 683.958 L1271.11 683.958 L1271.67 683.958 L1272.23 683.958 L1272.79 683.958 L1273.35 683.958 L1273.91 683.958 L1274.46 683.958 L1275.02 683.958 L1275.58 683.958 L1276.14 683.958 L1276.7 683.958 L1277.26 683.958 L1277.82 683.958 L1278.38 683.958 L1278.94 683.958 L1279.5 683.958 L1280.06 683.958 L1280.62 683.958 L1281.18 683.958 L1281.73 683.958 L1282.29 683.958 L1282.85 683.958 L1283.41 683.958 L1283.97 683.958 L1284.53 683.958 L1285.09 683.958 L1285.65 683.958 L1286.21 683.958 L1286.77 683.958 L1287.33 683.958 L1287.89 683.958 L1288.45 683.958 L1289 683.958 L1289.56 683.958 L1290.12 683.958 L1290.68 683.958 L1291.24 683.958 L1291.8 683.958 L1292.36 683.958 L1292.92 683.958 L1293.48 683.958 L1294.04 683.958 L1294.6 683.958 L1295.16 683.958 L1295.72 683.958 L1296.28 683.958 L1296.83 683.958 L1297.39 683.958 L1297.95 683.958 L1298.51 683.958 L1299.07 683.958 L1299.63 683.958 L1300.19 683.958 L1300.75 683.958 L1301.31 683.958 L1301.87 683.958 L1302.43 683.958 L1302.99 683.958 L1303.55 683.958 L1304.1 683.958 L1304.66 683.958 L1305.22 683.958 L1305.78 683.958 L1306.34 683.958 L1306.9 683.958 L1307.46 683.958 L1308.02 683.958 L1308.58 683.958 L1309.14 683.958 L1309.7 683.958 L1310.26 683.958 L1310.82 683.958 L1311.38 683.958 L1311.93 683.958 L1312.49 683.958 L1313.05 683.958 L1313.61 683.958 L1314.17 683.958 L1314.73 683.958 L1315.29 683.958 L1315.85 683.958 L1316.41 683.958 L1316.97 683.958 L1317.53 683.958 L1318.09 683.958 L1318.65 683.958 L1319.2 683.958 L1319.76 683.958 L1320.32 683.958 L1320.88 683.958 L1321.44 683.958 L1322 683.958 L1322.56 683.958 L1323.12 683.958 L1323.68 683.958 L1324.24 683.958 L1324.8 683.958 L1325.36 683.958 L1325.92 683.958 L1326.47 683.958 L1327.03 683.958 L1327.59 683.958 L1328.15 683.958 L1328.71 683.958 L1329.27 683.958 L1329.83 683.958 L1330.39 683.958 L1330.95 683.958 L1331.51 683.958 L1332.07 683.958 L1332.63 683.958 L1333.19 683.958 L1333.75 683.958 L1334.3 683.958 L1334.86 683.958 L1335.42 683.958 L1335.98 683.958 L1336.54 683.958 L1337.1 683.958 L1337.66 683.958 L1338.22 683.958 L1338.78 683.958 L1339.34 683.958 L1339.9 683.958 L1340.46 683.958 L1341.02 683.958 L1341.57 683.958 L1342.13 683.958 L1342.69 683.958 L1343.25 683.958 L1343.81 683.958 L1344.37 683.958 L1344.93 683.958 L1345.49 683.958 L1346.05 683.958 L1346.61 683.958 L1347.17 683.958 L1347.73 683.958 L1348.29 683.958 L1348.84 683.958 L1349.4 683.958 L1349.96 683.958 L1350.52 683.958 L1351.08 683.958 L1351.64 683.958 L1352.2 683.958 L1352.76 683.958 L1353.32 683.958 L1353.88 683.958 L1354.44 683.958 L1355 683.958 L1355.56 683.958 L1356.12 683.958 L1356.67 683.958 L1357.23 683.958 L1357.79 683.958 L1358.35 683.958 L1358.91 683.958 L1359.47 683.958 L1360.03 683.958 L1360.59 683.958 L1361.15 683.958 L1361.71 683.958 L1362.27 683.958 L1362.83 683.958 L1363.39 683.958 L1363.94 683.958 L1364.5 683.958 L1365.06 683.958 L1365.62 683.958 L1366.18 683.958 L1366.74 683.958 L1367.3 683.958 L1367.86 683.958 L1368.42 683.958 L1368.98 683.958 L1369.54 683.958 L1370.1 683.958 L1370.66 683.958 L1371.21 683.958 L1371.77 683.958 L1372.33 683.958 L1372.89 683.958 L1373.45 683.958 L1374.01 683.958 L1374.57 683.958 L1375.13 683.958 L1375.69 683.958 L1376.25 683.958 L1376.81 683.958 L1377.37 683.958 L1377.93 683.958 L1378.49 683.958 L1379.04 683.958 L1379.6 683.958 L1380.16 683.958 L1380.72 683.958 L1381.28 683.958 L1381.84 683.958 L1382.4 683.958 L1382.96 683.958 L1383.52 683.958 L1384.08 683.958 L1384.64 683.958 L1385.2 683.958 L1385.76 683.958 L1386.31 683.958 L1386.87 683.958 L1387.43 683.958 L1387.99 683.958 L1388.55 683.958 L1389.11 683.958 L1389.67 683.958 L1390.23 683.958 L1390.79 683.958 L1391.35 683.958 L1391.91 683.958 L1392.47 683.958 L1393.03 683.958 L1393.58 683.958 L1394.14 683.958 L1394.7 683.958 L1395.26 683.958 L1395.82 683.958 L1396.38 683.958 L1396.94 683.958 L1397.5 683.958 L1398.06 683.958 L1398.62 683.958 L1399.18 683.958 L1399.74 683.958 L1400.3 683.958 L1400.86 683.958 L1401.41 683.958 L1401.97 683.958 L1402.53 683.958 L1403.09 683.958 L1403.65 683.958 L1404.21 683.958 L1404.77 683.958 L1405.33 683.958 L1405.89 683.958 L1406.45 683.958 L1407.01 683.958 L1407.57 683.958 L1408.13 683.958 L1408.68 683.958 L1409.24 683.958 L1409.8 683.958 L1410.36 683.958 L1410.92 683.958 L1411.48 683.958 L1412.04 683.958 L1412.6 683.958 L1413.16 683.958 L1413.72 683.958 L1414.28 683.958 L1414.84 683.958 L1415.4 683.958 L1415.95 683.958 L1416.51 683.958 L1417.07 683.958 L1417.63 683.958 L1418.19 683.958 L1418.75 683.958 L1419.31 683.958 L1419.87 683.958 L1420.43 683.958 L1420.99 683.958 L1421.55 683.958 L1422.11 683.958 L1422.67 683.958 L1423.23 683.958 L1423.78 683.958 L1424.34 683.958 L1424.9 683.958 L1425.46 683.958 L1426.02 683.958 L1426.58 683.958 L1427.14 683.958 L1427.7 683.958 L1428.26 683.958 L1428.82 683.958 L1429.38 683.958 L1429.94 683.958 L1430.5 683.958 L1431.05 683.958 L1431.61 683.958 L1432.17 683.958 L1432.73 683.958 L1433.29 683.958 L1433.85 683.958 L1434.41 683.958 L1434.97 683.958 L1435.53 683.958 L1436.09 683.958 L1436.65 683.958 L1437.21 683.958 L1437.77 683.958 L1438.33 683.958 L1438.88 683.958 L1439.44 683.958 L1440 683.958 L1440.56 683.958 L1441.12 683.958 L1441.68 683.958 L1442.24 683.958 L1442.8 683.958 L1443.36 683.958 L1443.92 683.958 L1444.48 683.958 L1445.04 683.958 L1445.6 683.958 L1446.15 683.958 L1446.71 683.958 L1447.27 683.958 L1447.83 683.958 L1448.39 683.958 L1448.95 683.958 L1449.51 683.958 L1450.07 683.958 L1450.63 683.958 L1451.19 683.958 L1451.75 683.958 L1452.31 683.958 L1452.87 683.958 L1453.42 683.958 L1453.98 683.958 L1454.54 683.958 L1455.1 683.958 L1455.66 683.958 L1456.22 683.958 L1456.78 683.958 L1457.34 683.958 L1457.9 683.958 L1458.46 683.958 L1459.02 683.958 L1459.58 683.958 L1460.14 683.958 L1460.7 683.958 L1461.25 683.958 L1461.81 683.958 L1462.37 683.958 L1462.93 683.958 L1463.49 683.958 L1464.05 683.958 L1464.61 683.958 L1465.17 683.958 L1465.73 683.958 L1466.29 683.958 L1466.85 683.958 L1467.41 683.958 L1467.97 683.958 L1468.52 683.958 L1469.08 683.958 L1469.64 683.958 L1470.2 683.958 L1470.76 683.958 L1471.32 683.958 L1471.88 683.958 L1472.44 683.958 L1473 683.958 L1473.56 683.958 L1474.12 683.958 L1474.68 683.958 L1475.24 683.958 L1475.79 683.958 L1476.35 683.958 L1476.91 683.958 L1477.47 683.958 L1478.03 683.958 L1478.59 683.958 L1479.15 683.958 L1479.71 683.958 L1480.27 683.958 L1480.83 683.958 L1481.39 683.958 L1481.95 683.958 L1482.51 683.958 L1483.07 683.958 L1483.62 683.958 L1484.18 683.958 L1484.74 683.958 L1485.3 683.958 L1485.86 683.958 L1486.42 683.958 L1486.98 683.958 L1487.54 683.958 L1488.1 683.958 L1488.66 683.958 L1489.22 683.958 L1489.78 683.958 L1490.34 683.958 L1490.89 683.958 L1491.45 683.958 L1492.01 683.958 L1492.57 683.958 L1493.13 683.958 L1493.69 683.958 L1494.25 683.958 L1494.81 683.958 L1495.37 683.958 L1495.93 683.958 L1496.49 683.958 L1497.05 683.958 L1497.61 683.958 L1498.16 683.958 L1498.72 683.958 L1499.28 683.958 L1499.84 683.958 L1500.4 683.958 L1500.96 683.958 L1501.52 683.958 L1502.08 683.958 L1502.64 683.958 L1503.2 683.958 L1503.76 683.958 L1504.32 683.958 L1504.88 683.958 L1505.44 683.958 L1505.99 683.958 L1506.55 683.958 L1507.11 683.958 L1507.67 683.958 L1508.23 683.958 L1508.79 683.958 L1509.35 683.958 L1509.91 683.958 L1510.47 683.958 L1511.03 683.958 L1511.59 683.958 L1512.15 683.958 L1512.71 683.958 L1513.26 683.958 L1513.82 683.958 L1514.38 683.958 L1514.94 683.958 L1515.5 683.958 L1516.06 683.958 L1516.62 683.958 L1517.18 683.958 L1517.74 683.958 L1518.3 683.958 L1518.86 683.958 L1519.42 683.958 L1519.98 683.958 L1520.53 683.958 L1521.09 683.958 L1521.65 683.958 L1522.21 683.958 L1522.77 683.958 L1523.33 683.958 L1523.89 683.958 L1524.45 683.958 L1525.01 683.958 L1525.57 683.958 L1526.13 683.958 L1526.69 683.958 L1527.25 683.958 L1527.81 683.958 L1528.36 683.958 L1528.92 683.958 L1529.48 683.958 L1530.04 683.958 L1530.6 683.958 L1531.16 683.958 L1531.72 683.958 L1532.28 683.958 L1532.84 683.958 L1533.4 683.958 L1533.96 683.958 L1534.52 683.958 L1535.08 683.958 L1535.63 683.958 L1536.19 683.958 L1536.75 683.958 L1537.31 683.958 L1537.87 683.958 L1538.43 683.958 L1538.99 683.958 L1539.55 683.958 L1540.11 683.958 L1540.67 683.958 L1541.23 683.958 L1541.79 683.958 L1542.35 683.958 L1542.9 683.958 L1543.46 683.958 L1544.02 683.958 L1544.58 683.958 L1545.14 683.958 L1545.7 683.958 L1546.26 683.958 L1546.82 683.958 L1547.38 683.958 L1547.94 683.958 L1548.5 683.958 L1549.06 683.958 L1549.62 683.958 L1550.18 683.958 L1550.73 683.958 L1551.29 683.958 L1551.85 683.958 L1552.41 683.958 L1552.97 683.958 L1553.53 683.958 L1554.09 683.958 L1554.65 683.958 L1555.21 683.958 L1555.77 683.958 L1556.33 683.958 L1556.89 683.958 L1557.45 683.958 L1558 683.958 L1558.56 683.958 L1559.12 683.958 L1559.68 683.958 L1560.24 683.958 L1560.8 683.958 L1561.36 683.958 L1561.92 683.958 L1562.48 683.958 L1563.04 683.958 L1563.6 683.958 L1564.16 683.958 L1564.72 683.958 L1565.28 683.958 L1565.83 683.958 L1566.39 683.958 L1566.95 683.958 L1567.51 683.958 L1568.07 683.958 L1568.63 683.958 L1569.19 683.958 L1569.75 683.958 L1570.31 683.958 L1570.87 683.958 L1571.43 683.958 L1571.99 683.958 L1572.55 683.958 L1573.1 683.958 L1573.66 683.958 L1574.22 683.958 L1574.78 683.958 L1575.34 683.958 L1575.9 683.958 L1576.46 683.958 L1577.02 683.958 L1577.58 683.958 L1578.14 683.958 L1578.7 683.958 L1579.26 683.958 L1579.82 683.958 L1580.37 683.958 L1580.93 683.958 L1581.49 683.958 L1582.05 683.958 L1582.61 683.958 L1583.17 683.958 L1583.73 683.958 L1584.29 683.958 L1584.85 683.958 L1585.41 683.958 L1585.97 683.958 L1586.53 683.958 L1587.09 683.958 L1587.65 683.958 L1588.2 683.958 L1588.76 683.958 L1589.32 683.958 L1589.88 683.958 L1590.44 683.958 L1591 683.958 L1591.56 683.958 L1592.12 683.958 L1592.68 683.958 L1593.24 683.958 L1593.8 683.958 L1594.36 683.958 L1594.92 683.958 L1595.47 683.958 L1596.03 683.958 L1596.59 683.958 L1597.15 683.958 L1597.71 683.958 L1598.27 683.958 L1598.83 683.958 L1599.39 683.958 L1599.95 683.958 L1600.51 683.958 L1601.07 683.958 L1601.63 683.958 L1602.19 683.958 L1602.74 683.958 L1603.3 683.958 L1603.86 683.958 L1604.42 683.958 L1604.98 683.958 L1605.54 683.958 L1606.1 683.958 L1606.66 683.958 L1607.22 683.958 L1607.78 683.958 L1608.34 683.958 L1608.9 683.958 L1609.46 683.958 L1610.02 683.958 L1610.57 683.958 L1611.13 683.958 L1611.69 683.958 L1612.25 683.958 L1612.81 683.958 L1613.37 683.958 L1613.93 683.958 L1614.49 683.958 L1615.05 683.958 L1615.61 683.958 L1616.17 683.958 L1616.73 683.958 L1617.29 683.958 L1617.84 683.958 L1618.4 683.958 L1618.96 683.958 L1619.52 683.958 L1620.08 683.958 L1620.64 683.958 L1621.2 683.958 L1621.76 683.958 L1622.32 683.958 L1622.88 683.958 L1623.44 683.958 L1624 683.958 L1624.56 683.958 L1625.11 683.958 L1625.67 683.958 L1626.23 683.958 L1626.79 683.958 L1627.35 683.958 L1627.91 683.958 L1628.47 683.958 L1629.03 683.958 L1629.59 683.958 L1630.15 683.958 L1630.71 683.958 L1631.27 683.958 L1631.83 683.958 L1632.39 683.958 L1632.94 683.958 L1633.5 683.958 L1634.06 683.958 L1634.62 683.958 L1635.18 683.958 L1635.74 683.958 L1636.3 683.958 L1636.86 683.958 L1637.42 683.958 L1637.98 683.958 L1638.54 683.958 L1639.1 683.958 L1639.66 683.958 L1640.21 683.958 L1640.77 683.958 L1641.33 683.958 L1641.89 683.958 L1642.45 683.958 L1643.01 683.958 L1643.57 683.958 L1644.13 683.958 L1644.69 683.958 L1645.25 683.958 L1645.81 683.958 L1646.37 683.958 L1646.93 683.958 L1647.48 683.958 L1648.04 683.958 L1648.6 683.958 L1649.16 683.958 L1649.72 683.958 L1650.28 683.958 L1650.84 683.958 L1651.4 683.958 L1651.96 683.958 L1652.52 683.958 L1653.08 683.958 L1653.64 683.958 L1654.2 683.958 L1654.76 683.958 L1655.31 683.958 L1655.87 683.958 L1656.43 683.958 L1656.99 683.958 L1657.55 683.958 L1658.11 683.958 L1658.67 683.958 L1659.23 683.958 L1659.79 683.958 L1660.35 683.958 L1660.91 683.958 L1661.47 683.958 L1662.03 683.958 L1662.58 683.958 L1663.14 683.958 L1663.7 683.958 L1664.26 683.958 L1664.82 683.958 L1665.38 683.958 L1665.94 683.958 L1666.5 683.958 L1667.06 683.958 L1667.62 683.958 L1668.18 683.958 L1668.74 683.958 L1669.3 683.958 L1669.85 683.958 L1670.41 683.958 L1670.97 683.958 L1671.53 683.958 L1672.09 683.958 L1672.65 683.958 L1673.21 683.958 L1673.77 683.958 L1674.33 683.958 L1674.89 683.958 L1675.45 683.958 L1676.01 683.958 L1676.57 683.958 L1677.13 683.958 L1677.68 683.958 L1678.24 683.958 L1678.8 683.958 L1679.36 683.958 L1679.92 683.958 L1680.48 683.958 L1681.04 683.958 L1681.6 683.958 L1682.16 683.958 L1682.72 683.958 L1683.28 683.958 L1683.84 683.958 L1684.4 683.958 L1684.95 683.958 L1685.51 683.958 L1686.07 683.958 L1686.63 683.958 L1687.19 683.958 L1687.75 683.958 L1688.31 683.958 L1688.87 683.958 L1689.43 683.958 L1689.99 683.958 L1690.55 683.958 L1691.11 683.958 L1691.67 683.958 L1692.23 683.958 L1692.78 683.958 L1693.34 683.958 L1693.9 683.958 L1694.46 683.958 L1695.02 683.958 L1695.58 683.958 L1696.14 683.958 L1696.7 683.958 L1697.26 683.958 L1697.82 683.958 L1698.38 683.958 L1698.94 683.958 L1699.5 683.958 L1700.05 683.958 L1700.61 683.958 L1701.17 683.958 L1701.73 683.958 L1702.29 683.958 L1702.85 683.958 L1703.41 683.958 L1703.97 683.958 L1704.53 683.958 L1705.09 683.958 L1705.65 683.958 L1706.21 683.958 L1706.77 683.958 L1707.32 683.958 L1707.88 683.958 L1708.44 683.958 L1709 683.958 L1709.56 683.958 L1710.12 683.958 L1710.68 683.958 L1711.24 683.958 L1711.8 683.958 L1712.36 683.958 L1712.92 683.958 L1713.48 683.958 L1714.04 683.958 L1714.6 683.958 L1715.15 683.958 L1715.71 683.958 L1716.27 683.958 L1716.83 683.958 L1717.39 683.958 L1717.95 683.958 L1718.51 683.958 L1719.07 683.958 L1719.63 683.958 L1720.19 683.958 L1720.75 683.958 L1721.31 683.958 L1721.87 683.958 L1722.42 683.958 L1722.98 683.958 L1723.54 683.958 L1724.1 683.958 L1724.66 683.958 L1725.22 683.958 L1725.78 683.958 L1726.34 683.958 L1726.9 683.958 L1727.46 683.958 L1728.02 683.958 L1728.58 683.958 L1729.14 683.958 L1729.69 683.958 L1730.25 683.958 L1730.81 683.958 L1731.37 683.958 L1731.93 683.958 L1732.49 683.958 L1733.05 683.958 L1733.61 683.958 L1734.17 683.958 L1734.73 683.958 L1735.29 683.958 L1735.85 683.958 L1736.41 683.958 L1736.97 683.958 L1737.52 683.958 L1738.08 683.958 L1738.64 683.958 L1739.2 683.958 L1739.76 683.958 L1740.32 683.958 L1740.88 683.958 L1741.44 683.958 L1742 683.958 L1742.56 683.958 L1743.12 683.958 L1743.68 683.958 L1744.24 683.958 L1744.79 683.958 L1745.35 683.958 L1745.91 683.958 L1746.47 683.958 L1747.03 683.958 L1747.59 683.958 L1748.15 683.958 L1748.71 683.958 L1749.27 683.958 L1749.83 683.958 L1750.39 683.958 L1750.95 683.958 L1751.51 683.958 L1752.06 683.958 L1752.62 683.958 L1753.18 683.958 L1753.74 683.958 L1754.3 683.958 L1754.86 683.958 L1755.42 683.958 L1755.98 683.958 L1756.54 683.958 L1757.1 683.958 L1757.66 683.958 L1758.22 683.958 L1758.78 683.958 L1759.34 683.958 L1759.89 683.958 L1760.45 683.958 L1761.01 683.958 L1761.57 683.958 L1762.13 683.958 L1762.69 683.958 L1763.25 683.958 L1763.81 683.958 L1764.37 683.958 L1764.93 683.958 L1765.49 683.958 L1766.05 683.958 L1766.61 683.958 L1767.16 683.958 L1767.72 683.958 L1768.28 683.958 L1768.84 683.958 L1769.4 683.958 L1769.96 683.958 L1770.52 683.958 L1771.08 683.958 L1771.64 683.958 L1772.2 683.958 L1772.76 683.958 L1773.32 683.958 L1773.88 683.958 L1774.43 683.958 L1774.99 683.958 L1775.55 683.958 L1776.11 683.958 L1776.67 683.958 L1777.23 683.958 L1777.79 683.958 L1778.35 683.958 L1778.91 683.958 L1779.47 683.958 L1780.03 683.958 L1780.59 683.958 L1781.15 683.958 L1781.71 683.958 L1782.26 683.958 L1782.82 683.958 L1783.38 683.958 L1783.94 683.958 L1784.5 683.958 L1785.06 683.958 L1785.62 683.958 L1786.18 683.958 L1786.74 683.958 L1787.3 683.958 L1787.86 683.958 L1788.42 683.958 L1788.98 683.958 L1789.53 683.958 L1790.09 683.958 L1790.65 683.958 L1791.21 683.958 L1791.77 683.958 L1792.33 683.958 L1792.89 683.958 L1793.45 683.958 L1794.01 683.958 L1794.57 683.958 L1795.13 683.958 L1795.69 683.958 L1796.25 683.958 L1796.8 683.958 L1797.36 683.958 L1797.92 683.958 L1798.48 683.958 L1799.04 683.958 L1799.6 683.958 L1800.16 683.958 L1800.72 683.958 L1801.28 683.958 L1801.84 683.958 L1802.4 683.958 L1802.96 683.958 L1803.52 683.958 L1804.08 683.958 L1804.63 683.958 L1805.19 683.958 L1805.75 683.958 L1806.31 683.958 L1806.87 683.958 L1807.43 683.958 L1807.99 683.958 L1808.55 683.958 L1809.11 683.958 L1809.67 683.958 L1810.23 683.958 L1810.79 683.958 L1811.35 683.958 L1811.9 683.958 L1812.46 683.958 L1813.02 683.958 L1813.58 683.958 L1814.14 683.958 L1814.7 683.958 L1815.26 683.958 L1815.82 683.958 L1816.38 683.958 L1816.94 683.958 L1817.5 683.958 L1818.06 683.958 L1818.62 683.958 L1819.18 683.958 L1819.73 683.958 L1820.29 683.958 L1820.85 683.958 L1821.41 683.958 L1821.97 683.958 L1822.53 683.958 L1823.09 683.958 L1823.65 683.958 L1824.21 683.958 L1824.77 683.958 L1825.33 683.958 L1825.89 683.958 L1826.45 683.958 L1827 683.958 L1827.56 683.958 L1828.12 683.958 L1828.68 683.958 L1829.24 683.958 L1829.8 683.958 L1830.36 683.958 L1830.92 683.958 L1831.48 683.958 L1832.04 683.958 L1832.6 683.958 L1833.16 683.958 L1833.72 683.958 L1834.27 683.958 L1834.83 683.958 L1835.39 683.958 L1835.95 683.958 L1836.51 683.958 L1837.07 683.958 L1837.63 683.958 L1838.19 683.958 L1838.19 682.501 L1837.63 682.501 L1837.07 682.501 L1836.51 682.501 L1835.95 682.501 L1835.39 682.501 L1834.83 682.501 L1834.27 682.501 L1833.72 682.501 L1833.16 682.501 L1832.6 682.501 L1832.04 682.501 L1831.48 682.501 L1830.92 682.501 L1830.36 682.501 L1829.8 682.501 L1829.24 682.501 L1828.68 682.501 L1828.12 682.501 L1827.56 682.501 L1827 682.501 L1826.45 682.501 L1825.89 682.501 L1825.33 682.501 L1824.77 682.501 L1824.21 682.501 L1823.65 682.501 L1823.09 682.501 L1822.53 682.501 L1821.97 682.501 L1821.41 682.501 L1820.85 682.501 L1820.29 682.501 L1819.73 682.501 L1819.18 682.501 L1818.62 682.501 L1818.06 682.501 L1817.5 682.501 L1816.94 682.501 L1816.38 682.501 L1815.82 682.501 L1815.26 682.501 L1814.7 682.501 L1814.14 682.501 L1813.58 682.501 L1813.02 682.501 L1812.46 682.501 L1811.9 682.501 L1811.35 682.501 L1810.79 682.501 L1810.23 682.501 L1809.67 682.501 L1809.11 682.501 L1808.55 682.501 L1807.99 682.501 L1807.43 682.501 L1806.87 682.501 L1806.31 682.501 L1805.75 682.501 L1805.19 682.501 L1804.63 682.501 L1804.08 682.501 L1803.52 682.501 L1802.96 682.501 L1802.4 682.501 L1801.84 682.501 L1801.28 682.501 L1800.72 682.501 L1800.16 682.501 L1799.6 682.501 L1799.04 682.501 L1798.48 682.501 L1797.92 682.501 L1797.36 682.501 L1796.8 682.501 L1796.25 682.501 L1795.69 682.501 L1795.13 682.501 L1794.57 682.501 L1794.01 682.501 L1793.45 682.501 L1792.89 682.501 L1792.33 682.501 L1791.77 682.501 L1791.21 682.501 L1790.65 682.501 L1790.09 682.501 L1789.53 682.501 L1788.98 682.501 L1788.42 682.501 L1787.86 682.501 L1787.3 682.501 L1786.74 682.501 L1786.18 682.501 L1785.62 682.501 L1785.06 682.501 L1784.5 682.501 L1783.94 682.501 L1783.38 682.501 L1782.82 682.501 L1782.26 682.501 L1781.71 682.501 L1781.15 682.501 L1780.59 682.501 L1780.03 682.501 L1779.47 682.501 L1778.91 682.501 L1778.35 682.501 L1777.79 682.501 L1777.23 682.501 L1776.67 682.501 L1776.11 682.501 L1775.55 682.501 L1774.99 682.501 L1774.43 682.501 L1773.88 682.501 L1773.32 682.501 L1772.76 682.501 L1772.2 682.501 L1771.64 682.501 L1771.08 682.501 L1770.52 682.501 L1769.96 682.501 L1769.4 682.501 L1768.84 682.501 L1768.28 682.501 L1767.72 682.501 L1767.16 682.501 L1766.61 682.501 L1766.05 682.501 L1765.49 682.501 L1764.93 682.501 L1764.37 682.501 L1763.81 682.501 L1763.25 682.501 L1762.69 682.501 L1762.13 682.501 L1761.57 682.501 L1761.01 682.501 L1760.45 682.501 L1759.89 682.501 L1759.34 682.501 L1758.78 682.501 L1758.22 682.501 L1757.66 682.501 L1757.1 682.501 L1756.54 682.501 L1755.98 682.501 L1755.42 682.501 L1754.86 682.501 L1754.3 682.501 L1753.74 682.501 L1753.18 682.501 L1752.62 682.501 L1752.06 682.501 L1751.51 682.501 L1750.95 682.501 L1750.39 682.501 L1749.83 682.501 L1749.27 682.501 L1748.71 682.501 L1748.15 682.501 L1747.59 682.501 L1747.03 682.501 L1746.47 682.501 L1745.91 682.501 L1745.35 682.501 L1744.79 682.501 L1744.24 682.501 L1743.68 682.501 L1743.12 682.501 L1742.56 682.501 L1742 682.501 L1741.44 682.501 L1740.88 682.501 L1740.32 682.501 L1739.76 682.501 L1739.2 682.501 L1738.64 682.501 L1738.08 682.501 L1737.52 682.501 L1736.97 682.501 L1736.41 682.501 L1735.85 682.501 L1735.29 682.501 L1734.73 682.501 L1734.17 682.501 L1733.61 682.501 L1733.05 682.501 L1732.49 682.501 L1731.93 682.501 L1731.37 682.501 L1730.81 682.501 L1730.25 682.501 L1729.69 682.501 L1729.14 682.501 L1728.58 682.501 L1728.02 682.501 L1727.46 682.501 L1726.9 682.501 L1726.34 682.501 L1725.78 682.501 L1725.22 682.501 L1724.66 682.501 L1724.1 682.501 L1723.54 682.501 L1722.98 682.501 L1722.42 682.501 L1721.87 682.501 L1721.31 682.501 L1720.75 682.501 L1720.19 682.501 L1719.63 682.501 L1719.07 682.501 L1718.51 682.501 L1717.95 682.501 L1717.39 682.501 L1716.83 682.501 L1716.27 682.501 L1715.71 682.501 L1715.15 682.501 L1714.6 682.501 L1714.04 682.501 L1713.48 682.501 L1712.92 682.501 L1712.36 682.501 L1711.8 682.501 L1711.24 682.501 L1710.68 682.501 L1710.12 682.501 L1709.56 682.501 L1709 682.501 L1708.44 682.501 L1707.88 682.501 L1707.32 682.501 L1706.77 682.501 L1706.21 682.501 L1705.65 682.501 L1705.09 682.501 L1704.53 682.501 L1703.97 682.501 L1703.41 682.501 L1702.85 682.501 L1702.29 682.501 L1701.73 682.501 L1701.17 682.501 L1700.61 682.501 L1700.05 682.501 L1699.5 682.501 L1698.94 682.501 L1698.38 682.501 L1697.82 682.501 L1697.26 682.501 L1696.7 682.501 L1696.14 682.501 L1695.58 682.501 L1695.02 682.501 L1694.46 682.501 L1693.9 682.501 L1693.34 682.501 L1692.78 682.501 L1692.23 682.501 L1691.67 682.501 L1691.11 682.501 L1690.55 682.501 L1689.99 682.501 L1689.43 682.501 L1688.87 682.501 L1688.31 682.501 L1687.75 682.501 L1687.19 682.501 L1686.63 682.501 L1686.07 682.501 L1685.51 682.501 L1684.95 682.501 L1684.4 682.501 L1683.84 682.501 L1683.28 682.501 L1682.72 682.501 L1682.16 682.501 L1681.6 682.501 L1681.04 682.501 L1680.48 682.501 L1679.92 682.501 L1679.36 682.501 L1678.8 682.501 L1678.24 682.501 L1677.68 682.501 L1677.13 682.501 L1676.57 682.501 L1676.01 682.501 L1675.45 682.501 L1674.89 682.501 L1674.33 682.501 L1673.77 682.501 L1673.21 682.501 L1672.65 682.501 L1672.09 682.501 L1671.53 682.501 L1670.97 682.501 L1670.41 682.501 L1669.85 682.501 L1669.3 682.501 L1668.74 682.501 L1668.18 682.501 L1667.62 682.501 L1667.06 682.501 L1666.5 682.501 L1665.94 682.501 L1665.38 682.501 L1664.82 682.501 L1664.26 682.501 L1663.7 682.501 L1663.14 682.501 L1662.58 682.501 L1662.03 682.501 L1661.47 682.501 L1660.91 682.501 L1660.35 682.501 L1659.79 682.501 L1659.23 682.501 L1658.67 682.501 L1658.11 682.501 L1657.55 682.501 L1656.99 682.501 L1656.43 682.501 L1655.87 682.501 L1655.31 682.501 L1654.76 682.501 L1654.2 682.501 L1653.64 682.501 L1653.08 682.501 L1652.52 682.501 L1651.96 682.501 L1651.4 682.501 L1650.84 682.501 L1650.28 682.501 L1649.72 682.501 L1649.16 682.501 L1648.6 682.501 L1648.04 682.501 L1647.48 682.501 L1646.93 682.501 L1646.37 682.501 L1645.81 682.501 L1645.25 682.501 L1644.69 682.501 L1644.13 682.501 L1643.57 682.501 L1643.01 682.501 L1642.45 682.501 L1641.89 682.501 L1641.33 682.501 L1640.77 682.501 L1640.21 682.501 L1639.66 682.501 L1639.1 682.501 L1638.54 682.501 L1637.98 682.501 L1637.42 682.501 L1636.86 682.501 L1636.3 682.501 L1635.74 682.501 L1635.18 682.501 L1634.62 682.501 L1634.06 682.501 L1633.5 682.501 L1632.94 682.501 L1632.39 682.501 L1631.83 682.501 L1631.27 682.501 L1630.71 682.501 L1630.15 682.501 L1629.59 682.501 L1629.03 682.501 L1628.47 682.501 L1627.91 682.501 L1627.35 682.501 L1626.79 682.501 L1626.23 682.501 L1625.67 682.501 L1625.11 682.501 L1624.56 682.501 L1624 682.501 L1623.44 682.501 L1622.88 682.501 L1622.32 682.501 L1621.76 682.501 L1621.2 682.501 L1620.64 682.501 L1620.08 682.501 L1619.52 682.501 L1618.96 682.501 L1618.4 682.501 L1617.84 682.501 L1617.29 682.501 L1616.73 682.501 L1616.17 682.501 L1615.61 682.501 L1615.05 682.501 L1614.49 682.501 L1613.93 682.501 L1613.37 682.501 L1612.81 682.501 L1612.25 682.501 L1611.69 682.501 L1611.13 682.501 L1610.57 682.501 L1610.02 682.501 L1609.46 682.501 L1608.9 682.501 L1608.34 682.501 L1607.78 682.501 L1607.22 682.501 L1606.66 682.501 L1606.1 682.501 L1605.54 682.501 L1604.98 682.501 L1604.42 682.501 L1603.86 682.501 L1603.3 682.501 L1602.74 682.501 L1602.19 682.501 L1601.63 682.501 L1601.07 682.501 L1600.51 682.501 L1599.95 682.501 L1599.39 682.501 L1598.83 682.501 L1598.27 682.501 L1597.71 682.501 L1597.15 682.501 L1596.59 682.501 L1596.03 682.501 L1595.47 682.501 L1594.92 682.501 L1594.36 682.501 L1593.8 682.501 L1593.24 682.501 L1592.68 682.501 L1592.12 682.501 L1591.56 682.501 L1591 682.501 L1590.44 682.501 L1589.88 682.501 L1589.32 682.501 L1588.76 682.501 L1588.2 682.501 L1587.65 682.501 L1587.09 682.501 L1586.53 682.501 L1585.97 682.501 L1585.41 682.501 L1584.85 682.501 L1584.29 682.501 L1583.73 682.501 L1583.17 682.501 L1582.61 682.501 L1582.05 682.501 L1581.49 682.501 L1580.93 682.501 L1580.37 682.501 L1579.82 682.501 L1579.26 682.501 L1578.7 682.501 L1578.14 682.501 L1577.58 682.501 L1577.02 682.501 L1576.46 682.501 L1575.9 682.501 L1575.34 682.501 L1574.78 682.501 L1574.22 682.501 L1573.66 682.501 L1573.1 682.501 L1572.55 682.501 L1571.99 682.501 L1571.43 682.501 L1570.87 682.501 L1570.31 682.501 L1569.75 682.501 L1569.19 682.501 L1568.63 682.501 L1568.07 682.501 L1567.51 682.501 L1566.95 682.501 L1566.39 682.501 L1565.83 682.501 L1565.28 682.501 L1564.72 682.501 L1564.16 682.501 L1563.6 682.501 L1563.04 682.501 L1562.48 682.501 L1561.92 682.501 L1561.36 682.501 L1560.8 682.501 L1560.24 682.501 L1559.68 682.501 L1559.12 682.501 L1558.56 682.501 L1558 682.501 L1557.45 682.501 L1556.89 682.501 L1556.33 682.501 L1555.77 682.501 L1555.21 682.501 L1554.65 682.501 L1554.09 682.501 L1553.53 682.501 L1552.97 682.501 L1552.41 682.501 L1551.85 682.501 L1551.29 682.501 L1550.73 682.501 L1550.18 682.501 L1549.62 682.501 L1549.06 682.501 L1548.5 682.501 L1547.94 682.501 L1547.38 682.501 L1546.82 682.501 L1546.26 682.501 L1545.7 682.501 L1545.14 682.501 L1544.58 682.501 L1544.02 682.501 L1543.46 682.501 L1542.9 682.501 L1542.35 682.501 L1541.79 682.501 L1541.23 682.501 L1540.67 682.501 L1540.11 682.501 L1539.55 682.501 L1538.99 682.501 L1538.43 682.501 L1537.87 682.501 L1537.31 682.501 L1536.75 682.501 L1536.19 682.501 L1535.63 682.501 L1535.08 682.501 L1534.52 682.501 L1533.96 682.501 L1533.4 682.501 L1532.84 682.501 L1532.28 682.501 L1531.72 682.501 L1531.16 682.501 L1530.6 682.501 L1530.04 682.501 L1529.48 682.501 L1528.92 682.501 L1528.36 682.501 L1527.81 682.501 L1527.25 682.501 L1526.69 682.501 L1526.13 682.501 L1525.57 682.501 L1525.01 682.501 L1524.45 682.501 L1523.89 682.501 L1523.33 682.501 L1522.77 682.501 L1522.21 682.501 L1521.65 682.501 L1521.09 682.501 L1520.53 682.501 L1519.98 682.501 L1519.42 682.501 L1518.86 682.501 L1518.3 682.501 L1517.74 682.501 L1517.18 682.501 L1516.62 682.501 L1516.06 682.501 L1515.5 682.501 L1514.94 682.501 L1514.38 682.501 L1513.82 682.501 L1513.26 682.501 L1512.71 682.501 L1512.15 682.501 L1511.59 682.501 L1511.03 682.501 L1510.47 682.501 L1509.91 682.501 L1509.35 682.501 L1508.79 682.501 L1508.23 682.501 L1507.67 682.501 L1507.11 682.501 L1506.55 682.501 L1505.99 682.501 L1505.44 682.501 L1504.88 682.501 L1504.32 682.501 L1503.76 682.501 L1503.2 682.501 L1502.64 682.501 L1502.08 682.501 L1501.52 682.501 L1500.96 682.501 L1500.4 682.501 L1499.84 682.501 L1499.28 682.501 L1498.72 682.501 L1498.16 682.501 L1497.61 682.501 L1497.05 682.501 L1496.49 682.501 L1495.93 682.501 L1495.37 682.501 L1494.81 682.501 L1494.25 682.501 L1493.69 682.501 L1493.13 682.501 L1492.57 682.501 L1492.01 682.501 L1491.45 682.501 L1490.89 682.501 L1490.34 682.501 L1489.78 682.501 L1489.22 682.501 L1488.66 682.501 L1488.1 682.501 L1487.54 682.501 L1486.98 682.501 L1486.42 682.501 L1485.86 682.501 L1485.3 682.501 L1484.74 682.501 L1484.18 682.501 L1483.62 682.501 L1483.07 682.501 L1482.51 682.501 L1481.95 682.501 L1481.39 682.501 L1480.83 682.501 L1480.27 682.501 L1479.71 682.501 L1479.15 682.501 L1478.59 682.501 L1478.03 682.501 L1477.47 682.501 L1476.91 682.501 L1476.35 682.501 L1475.79 682.501 L1475.24 682.501 L1474.68 682.501 L1474.12 682.501 L1473.56 682.501 L1473 682.501 L1472.44 682.501 L1471.88 682.501 L1471.32 682.501 L1470.76 682.501 L1470.2 682.501 L1469.64 682.501 L1469.08 682.501 L1468.52 682.501 L1467.97 682.501 L1467.41 682.501 L1466.85 682.501 L1466.29 682.501 L1465.73 682.501 L1465.17 682.501 L1464.61 682.501 L1464.05 682.501 L1463.49 682.501 L1462.93 682.501 L1462.37 682.501 L1461.81 682.501 L1461.25 682.501 L1460.7 682.501 L1460.14 682.501 L1459.58 682.501 L1459.02 682.501 L1458.46 682.501 L1457.9 682.501 L1457.34 682.501 L1456.78 682.501 L1456.22 682.501 L1455.66 682.501 L1455.1 682.501 L1454.54 682.501 L1453.98 682.501 L1453.42 682.501 L1452.87 682.501 L1452.31 682.501 L1451.75 682.501 L1451.19 682.501 L1450.63 682.501 L1450.07 682.501 L1449.51 682.501 L1448.95 682.501 L1448.39 682.501 L1447.83 682.501 L1447.27 682.501 L1446.71 682.501 L1446.15 682.501 L1445.6 682.501 L1445.04 682.501 L1444.48 682.501 L1443.92 682.501 L1443.36 682.501 L1442.8 682.501 L1442.24 682.501 L1441.68 682.501 L1441.12 682.501 L1440.56 682.501 L1440 682.501 L1439.44 682.501 L1438.88 682.501 L1438.33 682.501 L1437.77 682.501 L1437.21 682.501 L1436.65 682.501 L1436.09 682.501 L1435.53 682.501 L1434.97 682.501 L1434.41 682.501 L1433.85 682.501 L1433.29 682.501 L1432.73 682.501 L1432.17 682.501 L1431.61 682.501 L1431.05 682.501 L1430.5 682.501 L1429.94 682.501 L1429.38 682.501 L1428.82 682.501 L1428.26 682.501 L1427.7 682.501 L1427.14 682.501 L1426.58 682.501 L1426.02 682.501 L1425.46 682.501 L1424.9 682.501 L1424.34 682.501 L1423.78 682.501 L1423.23 682.501 L1422.67 682.501 L1422.11 682.501 L1421.55 682.501 L1420.99 682.501 L1420.43 682.501 L1419.87 682.501 L1419.31 682.501 L1418.75 682.501 L1418.19 682.501 L1417.63 682.501 L1417.07 682.501 L1416.51 682.501 L1415.95 682.501 L1415.4 682.501 L1414.84 682.501 L1414.28 682.501 L1413.72 682.501 L1413.16 682.501 L1412.6 682.501 L1412.04 682.501 L1411.48 682.501 L1410.92 682.501 L1410.36 682.501 L1409.8 682.501 L1409.24 682.501 L1408.68 682.501 L1408.13 682.501 L1407.57 682.501 L1407.01 682.501 L1406.45 682.501 L1405.89 682.501 L1405.33 682.501 L1404.77 682.501 L1404.21 682.501 L1403.65 682.501 L1403.09 682.501 L1402.53 682.501 L1401.97 682.501 L1401.41 682.501 L1400.86 682.501 L1400.3 682.501 L1399.74 682.501 L1399.18 682.501 L1398.62 682.501 L1398.06 682.501 L1397.5 682.501 L1396.94 682.501 L1396.38 682.501 L1395.82 682.501 L1395.26 682.501 L1394.7 682.501 L1394.14 682.501 L1393.58 682.501 L1393.03 682.501 L1392.47 682.501 L1391.91 682.501 L1391.35 682.501 L1390.79 682.501 L1390.23 682.501 L1389.67 682.501 L1389.11 682.501 L1388.55 682.501 L1387.99 682.501 L1387.43 682.501 L1386.87 682.501 L1386.31 682.501 L1385.76 682.501 L1385.2 682.501 L1384.64 682.501 L1384.08 682.501 L1383.52 682.501 L1382.96 682.501 L1382.4 682.501 L1381.84 682.501 L1381.28 682.501 L1380.72 682.501 L1380.16 682.501 L1379.6 682.501 L1379.04 682.501 L1378.49 682.501 L1377.93 682.501 L1377.37 682.501 L1376.81 682.501 L1376.25 682.501 L1375.69 682.501 L1375.13 682.501 L1374.57 682.501 L1374.01 682.501 L1373.45 682.501 L1372.89 682.501 L1372.33 682.501 L1371.77 682.501 L1371.21 682.501 L1370.66 682.501 L1370.1 682.501 L1369.54 682.501 L1368.98 682.501 L1368.42 682.501 L1367.86 682.501 L1367.3 682.501 L1366.74 682.501 L1366.18 682.501 L1365.62 682.501 L1365.06 682.501 L1364.5 682.501 L1363.94 682.501 L1363.39 682.501 L1362.83 682.501 L1362.27 682.501 L1361.71 682.501 L1361.15 682.501 L1360.59 682.501 L1360.03 682.501 L1359.47 682.501 L1358.91 682.501 L1358.35 682.501 L1357.79 682.501 L1357.23 682.501 L1356.67 682.501 L1356.12 682.501 L1355.56 682.501 L1355 682.501 L1354.44 682.501 L1353.88 682.501 L1353.32 682.501 L1352.76 682.501 L1352.2 682.501 L1351.64 682.501 L1351.08 682.501 L1350.52 682.501 L1349.96 682.501 L1349.4 682.501 L1348.84 682.501 L1348.29 682.501 L1347.73 682.501 L1347.17 682.501 L1346.61 682.501 L1346.05 682.501 L1345.49 682.501 L1344.93 682.501 L1344.37 682.501 L1343.81 682.501 L1343.25 682.501 L1342.69 682.501 L1342.13 682.501 L1341.57 682.501 L1341.02 682.501 L1340.46 682.501 L1339.9 682.501 L1339.34 682.501 L1338.78 682.501 L1338.22 682.501 L1337.66 682.501 L1337.1 682.501 L1336.54 682.501 L1335.98 682.501 L1335.42 682.501 L1334.86 682.501 L1334.3 682.501 L1333.75 682.501 L1333.19 682.501 L1332.63 682.501 L1332.07 682.501 L1331.51 682.501 L1330.95 682.501 L1330.39 682.501 L1329.83 682.501 L1329.27 682.501 L1328.71 682.501 L1328.15 682.501 L1327.59 682.501 L1327.03 682.501 L1326.47 682.501 L1325.92 682.501 L1325.36 682.501 L1324.8 682.501 L1324.24 682.501 L1323.68 682.501 L1323.12 682.501 L1322.56 682.501 L1322 682.501 L1321.44 682.501 L1320.88 682.501 L1320.32 682.501 L1319.76 682.501 L1319.2 682.501 L1318.65 682.501 L1318.09 682.501 L1317.53 682.501 L1316.97 682.501 L1316.41 682.501 L1315.85 682.501 L1315.29 682.501 L1314.73 682.501 L1314.17 682.501 L1313.61 682.501 L1313.05 682.501 L1312.49 682.501 L1311.93 682.501 L1311.38 682.501 L1310.82 682.501 L1310.26 682.501 L1309.7 682.501 L1309.14 682.501 L1308.58 682.501 L1308.02 682.501 L1307.46 682.501 L1306.9 682.501 L1306.34 682.501 L1305.78 682.501 L1305.22 682.501 L1304.66 682.501 L1304.1 682.501 L1303.55 682.501 L1302.99 682.501 L1302.43 682.501 L1301.87 682.501 L1301.31 682.501 L1300.75 682.501 L1300.19 682.501 L1299.63 682.501 L1299.07 682.501 L1298.51 682.501 L1297.95 682.501 L1297.39 682.501 L1296.83 682.501 L1296.28 682.501 L1295.72 682.501 L1295.16 682.501 L1294.6 682.501 L1294.04 682.501 L1293.48 682.501 L1292.92 682.501 L1292.36 682.501 L1291.8 682.501 L1291.24 682.501 L1290.68 682.501 L1290.12 682.501 L1289.56 682.501 L1289 682.501 L1288.45 682.501 L1287.89 682.501 L1287.33 682.501 L1286.77 682.501 L1286.21 682.501 L1285.65 682.501 L1285.09 682.501 L1284.53 682.501 L1283.97 682.501 L1283.41 682.501 L1282.85 682.501 L1282.29 682.501 L1281.73 682.501 L1281.18 682.501 L1280.62 682.501 L1280.06 682.501 L1279.5 682.501 L1278.94 682.501 L1278.38 682.501 L1277.82 682.501 L1277.26 682.501 L1276.7 682.501 L1276.14 682.501 L1275.58 682.501 L1275.02 682.501 L1274.46 682.501 L1273.91 682.501 L1273.35 682.501 L1272.79 682.501 L1272.23 682.501 L1271.67 682.501 L1271.11 682.501 L1270.55 682.501 L1269.99 682.501 L1269.43 682.501 L1268.87 682.501 L1268.31 682.501 L1267.75 682.501 L1267.19 682.501 L1266.63 682.501 L1266.08 682.501 L1265.52 682.501 L1264.96 682.501 L1264.4 682.501 L1263.84 682.501 L1263.28 682.501 L1262.72 682.501 L1262.16 682.501 L1261.6 682.501 L1261.04 682.501 L1260.48 682.501 L1259.92 682.501 L1259.36 682.501 L1258.81 682.501 L1258.25 682.501 L1257.69 682.501 L1257.13 682.501 L1256.57 682.501 L1256.01 682.501 L1255.45 682.501 L1254.89 682.501 L1254.33 682.501 L1253.77 682.501 L1253.21 682.501 L1252.65 682.501 L1252.09 682.501 L1251.54 682.501 L1250.98 682.501 L1250.42 682.501 L1249.86 682.501 L1249.3 682.501 L1248.74 682.501 L1248.18 682.501 L1247.62 682.501 L1247.06 682.501 L1246.5 682.501 L1245.94 682.501 L1245.38 682.501 L1244.82 682.501 L1244.26 682.501 L1243.71 682.501 L1243.15 682.501 L1242.59 682.501 L1242.03 682.501 L1241.47 682.501 L1240.91 682.501 L1240.35 682.501 L1239.79 682.501 L1239.23 682.501 L1238.67 682.501 L1238.11 682.501 L1237.55 682.501 L1236.99 682.501 L1236.44 682.501 L1235.88 682.501 L1235.32 682.501 L1234.76 682.501 L1234.2 682.501 L1233.64 682.501 L1233.08 682.501 L1232.52 682.501 L1231.96 682.501 L1231.4 682.501 L1230.84 682.501 L1230.28 682.501 L1229.72 682.501 L1229.17 682.501 L1228.61 682.501 L1228.05 682.501 L1227.49 682.501 L1226.93 682.501 L1226.37 682.501 L1225.81 682.501 L1225.25 682.501 L1224.69 682.501 L1224.13 682.501 L1223.57 682.501 L1223.01 682.501 L1222.45 682.501 L1221.89 682.501 L1221.34 682.501 L1220.78 682.501 L1220.22 682.501 L1219.66 682.501 L1219.1 682.501 L1218.54 682.501 L1217.98 682.501 L1217.42 682.501 L1216.86 682.501 L1216.3 682.501 L1215.74 682.501 L1215.18 682.501 L1214.62 682.501 L1214.07 682.501 L1213.51 682.501 L1212.95 682.501 L1212.39 682.501 L1211.83 682.501 L1211.27 682.501 L1210.71 682.501 L1210.15 682.501 L1209.59 682.501 L1209.03 682.501 L1208.47 682.501 L1207.91 682.501 L1207.35 682.501 L1206.8 682.501 L1206.24 682.501 L1205.68 682.501 L1205.12 682.501 L1204.56 682.501 L1204 682.501 L1203.44 682.501 L1202.88 682.501 L1202.32 682.501 L1201.76 682.501 L1201.2 682.501 L1200.64 682.501 L1200.08 682.501 L1199.52 682.501 L1198.97 682.501 L1198.41 682.501 L1197.85 682.501 L1197.29 682.501 L1196.73 682.501 L1196.17 682.501 L1195.61 682.501 L1195.05 682.501 L1194.49 682.501 L1193.93 682.501 L1193.37 682.501 L1192.81 682.501 L1192.25 682.501 L1191.7 682.501 L1191.14 682.501 L1190.58 682.501 L1190.02 682.501 L1189.46 682.501 L1188.9 682.501 L1188.34 682.501 L1187.78 682.501 L1187.22 682.501 L1186.66 682.501 L1186.1 682.501 L1185.54 682.501 L1184.98 682.501 L1184.43 682.501 L1183.87 682.501 L1183.31 682.501 L1182.75 682.501 L1182.19 682.501 L1181.63 682.501 L1181.07 682.501 L1180.51 682.501 L1179.95 682.501 L1179.39 682.501 L1178.83 682.501 L1178.27 682.501 L1177.71 682.501 L1177.15 682.501 L1176.6 682.501 L1176.04 682.501 L1175.48 682.501 L1174.92 682.501 L1174.36 682.501 L1173.8 682.501 L1173.24 682.501 L1172.68 682.501 L1172.12 682.501 L1171.56 682.501 L1171 682.501 L1170.44 682.501 L1169.88 682.501 L1169.33 682.501 L1168.77 682.501 L1168.21 682.501 L1167.65 682.501 L1167.09 682.501 L1166.53 682.501 L1165.97 682.501 L1165.41 682.501 L1164.85 682.501 L1164.29 682.501 L1163.73 682.501 L1163.17 682.501 L1162.61 682.501 L1162.05 682.501 L1161.5 682.501 L1160.94 682.501 L1160.38 682.501 L1159.82 682.501 L1159.26 682.501 L1158.7 682.501 L1158.14 682.501 L1157.58 682.501 L1157.02 682.501 L1156.46 682.501 L1155.9 682.501 L1155.34 682.501 L1154.78 682.501 L1154.23 682.501 L1153.67 682.501 L1153.11 682.501 L1152.55 682.501 L1151.99 682.501 L1151.43 682.501 L1150.87 682.501 L1150.31 682.501 L1149.75 682.501 L1149.19 682.501 L1148.63 682.501 L1148.07 682.501 L1147.51 682.501 L1146.96 682.501 L1146.4 682.501 L1145.84 682.501 L1145.28 682.501 L1144.72 682.501 L1144.16 682.501 L1143.6 682.501 L1143.04 682.501 L1142.48 682.501 L1141.92 682.501 L1141.36 682.501 L1140.8 682.501 L1140.24 682.501 L1139.68 682.501 L1139.13 682.501 L1138.57 682.501 L1138.01 682.501 L1137.45 682.501 L1136.89 682.501 L1136.33 682.501 L1135.77 682.501 L1135.21 682.501 L1134.65 682.501 L1134.09 682.501 L1133.53 682.501 L1132.97 682.501 L1132.41 682.501 L1131.86 682.501 L1131.3 682.501 L1130.74 682.501 L1130.18 682.501 L1129.62 682.501 L1129.06 682.501 L1128.5 682.501 L1127.94 682.501 L1127.38 682.501 L1126.82 682.501 L1126.26 682.501 L1125.7 682.501 L1125.14 682.501 L1124.59 682.501 L1124.03 682.501 L1123.47 682.501 L1122.91 682.501 L1122.35 682.501 L1121.79 682.501 L1121.23 682.501 L1120.67 682.501 L1120.11 682.501 L1119.55 682.501 L1118.99 682.501 L1118.43 682.501 L1117.87 682.501 L1117.31 682.501 L1116.76 682.501 L1116.2 682.501 L1115.64 682.501 L1115.08 682.501 L1114.52 682.501 L1113.96 682.501 L1113.4 682.501 L1112.84 682.501 L1112.28 682.501 L1111.72 682.501 L1111.16 682.501 L1110.6 682.501 L1110.04 682.501 L1109.49 682.501 L1108.93 682.501 L1108.37 682.501 L1107.81 682.501 L1107.25 682.501 L1106.69 682.501 L1106.13 682.501 L1105.57 682.501 L1105.01 682.501 L1104.45 682.501 L1103.89 682.501 L1103.33 682.501 L1102.77 682.501 L1102.22 682.501 L1101.66 682.501 L1101.1 682.501 L1100.54 682.501 L1099.98 682.501 L1099.42 682.501 L1098.86 682.501 L1098.3 682.501 L1097.74 682.501 L1097.18 682.501 L1096.62 682.501 L1096.06 682.501 L1095.5 682.501 L1094.94 682.501 L1094.39 682.501 L1093.83 682.501 L1093.27 682.501 L1092.71 682.501 L1092.15 682.501 L1091.59 682.501 L1091.03 682.501 L1090.47 682.501 L1089.91 682.501 L1089.35 682.501 L1088.79 682.501 L1088.23 682.501 L1087.67 682.501 L1087.12 682.501 L1086.56 682.501 L1086 682.501 L1085.44 682.501 L1084.88 682.501 L1084.32 682.501 L1083.76 682.501 L1083.2 682.501 L1082.64 682.501 L1082.08 682.501 L1081.52 682.501 L1080.96 682.501 L1080.4 682.501 L1079.85 682.501 L1079.29 682.501 L1078.73 682.501 L1078.17 682.501 L1077.61 682.501 L1077.05 682.501 L1076.49 682.501 L1075.93 682.501 L1075.37 682.501 L1074.81 682.501 L1074.25 682.501 L1073.69 682.501 L1073.13 682.501 L1072.57 682.501 L1072.02 682.501 L1071.46 682.501 L1070.9 682.501 L1070.34 682.501 L1069.78 682.501 L1069.22 682.501 L1068.66 682.501 L1068.1 682.501 L1067.54 682.501 L1066.98 682.501 L1066.42 682.501 L1065.86 682.501 L1065.3 682.501 L1064.75 682.501 L1064.19 682.501 L1063.63 682.501 L1063.07 682.501 L1062.51 682.501 L1061.95 682.501 L1061.39 682.501 L1060.83 682.501 L1060.27 682.501 L1059.71 682.501 L1059.15 682.501 L1058.59 682.501 L1058.03 682.501 L1057.48 682.501 L1056.92 682.501 L1056.36 682.501 L1055.8 682.501 L1055.24 682.501 L1054.68 682.501 L1054.12 682.501 L1053.56 682.501 L1053 682.501 L1052.44 682.501 L1051.88 682.501 L1051.32 682.501 L1050.76 682.501 L1050.2 682.501 L1049.65 682.501 L1049.09 682.501 L1048.53 682.501 L1047.97 682.501 L1047.41 682.501 L1046.85 682.501 L1046.29 682.501 L1045.73 682.501 L1045.17 682.501 L1044.61 682.501 L1044.05 682.501 L1043.49 682.501 L1042.93 682.501 L1042.38 682.501 L1041.82 682.501 L1041.26 682.501 L1040.7 682.501 L1040.14 682.501 L1039.58 682.501 L1039.02 682.501 L1038.46 682.501 L1037.9 682.501 L1037.34 682.501 L1036.78 682.501 L1036.22 682.501 L1035.66 682.501 L1035.1 682.501 L1034.55 682.501 L1033.99 682.501 L1033.43 682.501 L1032.87 682.501 L1032.31 682.501 L1031.75 682.501 L1031.19 682.501 L1030.63 682.501 L1030.07 682.501 L1029.51 682.501 L1028.95 682.501 L1028.39 682.501 L1027.83 682.501 L1027.28 682.501 L1026.72 682.501 L1026.16 682.501 L1025.6 682.501 L1025.04 682.501 L1024.48 682.501 L1023.92 682.501 L1023.36 682.501 L1022.8 682.501 L1022.24 682.501 L1021.68 682.501 L1021.12 682.501 L1020.56 682.501 L1020.01 682.501 L1019.45 682.501 L1018.89 682.501 L1018.33 682.501 L1017.77 682.501 L1017.21 682.501 L1016.65 682.501 L1016.09 682.501 L1015.53 682.501 L1014.97 682.501 L1014.41 682.501 L1013.85 682.501 L1013.29 682.501 L1012.73 682.501 L1012.18 682.501 L1011.62 682.501 L1011.06 682.501 L1010.5 682.501 L1009.94 682.501 L1009.38 682.501 L1008.82 682.501 L1008.26 682.501 L1007.7 682.501 L1007.14 682.501 L1006.58 682.501 L1006.02 682.501 L1005.46 682.501 L1004.91 682.501 L1004.35 682.501 L1003.79 682.501 L1003.23 682.501 L1002.67 682.501 L1002.11 682.501 L1001.55 682.501 L1000.99 682.501 L1000.43 682.501 L999.872 682.501 L999.313 682.501 L998.754 682.501 L998.194 682.501 L997.635 682.501 L997.076 682.501 L996.517 682.501 L995.957 682.501 L995.398 682.501 L994.839 682.501 L994.28 682.501 L993.72 682.501 L993.161 682.501 L992.602 682.501 L992.043 682.501 L991.483 682.501 L990.924 682.501 L990.365 682.501 L989.806 682.501 L989.246 682.501 L988.687 682.501 L988.128 682.501 L987.569 682.501 L987.009 682.501 L986.45 682.501 L985.891 682.501 L985.332 682.501 L984.772 682.501 L984.213 682.501 L983.654 682.501 L983.095 682.501 L982.535 682.501 L981.976 682.501 L981.417 682.501 L980.858 682.501 L980.298 682.501 L979.739 682.501 L979.18 682.501 L978.621 682.501 L978.061 682.501 L977.502 682.501 L976.943 682.501 L976.384 682.501 L975.824 682.501 L975.265 682.501 L974.706 682.501 L974.147 682.501 L973.587 682.501 L973.028 682.501 L972.469 682.501 L971.91 682.501 L971.35 682.501 L970.791 682.501 L970.232 682.501 L969.673 682.501 L969.113 682.501 L968.554 682.501 L967.995 682.501 L967.436 682.501 L966.876 682.501 L966.317 682.501 L965.758 682.501 L965.199 682.501 L964.639 682.501 L964.08 682.501 L963.521 682.501 L962.962 682.501 L962.402 682.501 L961.843 682.501 L961.284 682.501 L960.725 682.501 L960.165 682.501 L959.606 682.501 L959.047 682.501 L958.488 682.501 L957.928 682.501 L957.369 682.501 L956.81 682.501 L956.251 682.501 L955.691 682.501 L955.132 682.501 L954.573 682.501 L954.014 682.501 L953.454 682.501 L952.895 682.501 L952.336 682.501 L951.777 682.501 L951.217 682.501 L950.658 682.501 L950.099 682.501 L949.54 682.501 L948.98 682.501 L948.421 682.501 L947.862 682.501 L947.303 682.501 L946.743 682.501 L946.184 682.501 L945.625 682.501 L945.066 682.501 L944.506 682.501 L943.947 682.501 L943.388 682.501 L942.829 682.501 L942.269 682.501 L941.71 682.501 L941.151 682.501 L940.592 682.501 L940.032 682.501 L939.473 682.501 L938.914 682.501 L938.355 682.501 L937.795 682.501 L937.236 682.501 L936.677 682.501 L936.118 682.501 L935.558 682.501 L934.999 682.501 L934.44 682.501 L933.881 682.501 L933.321 682.501 L932.762 682.501 L932.203 682.501 L931.644 682.501 L931.084 682.501 L930.525 682.501 L929.966 682.501 L929.406 682.501 L928.847 682.501 L928.288 682.501 L927.729 682.501 L927.169 682.501 L926.61 682.501 L926.051 682.501 L925.492 682.501 L924.932 682.501 L924.373 682.501 L923.814 682.501 L923.255 682.501 L922.695 682.501 L922.136 682.501 L921.577 682.501 L921.018 682.501 L920.458 682.501 L919.899 682.501 L919.34 682.501 L918.781 682.501 L918.221 682.501 L917.662 682.501 L917.103 682.501 L916.544 682.501 L915.984 682.501 L915.425 682.501 L914.866 682.501 L914.307 682.501 L913.747 682.501 L913.188 682.501 L912.629 682.501 L912.07 682.501 L911.51 682.501 L910.951 682.501 L910.392 682.501 L909.833 682.501 L909.273 682.501 L908.714 682.501 L908.155 682.501 L907.596 682.501 L907.036 682.501 L906.477 682.501 L905.918 682.501 L905.359 682.501 L904.799 682.501 L904.24 682.501 L903.681 682.501 L903.122 682.501 L902.562 682.501 L902.003 682.501 L901.444 682.501 L900.885 682.501 L900.325 682.501 L899.766 682.501 L899.207 682.501 L898.648 682.501 L898.088 682.501 L897.529 682.501 L896.97 682.501 L896.411 682.501 L895.851 682.501 L895.292 682.501 L894.733 682.501 L894.174 682.501 L893.614 682.501 L893.055 682.501 L892.496 682.501 L891.937 682.501 L891.377 682.501 L890.818 682.501 L890.259 682.501 L889.7 682.501 L889.14 682.501 L888.581 682.501 L888.022 682.501 L887.463 682.501 L886.903 682.501 L886.344 682.501 L885.785 682.501 L885.226 682.501 L884.666 682.501 L884.107 682.501 L883.548 682.501 L882.989 682.501 L882.429 682.501 L881.87 682.501 L881.311 682.501 L880.752 682.501 L880.192 682.501 L879.633 682.501 L879.074 682.501 L878.515 682.501 L877.955 682.501 L877.396 682.501 L876.837 682.501 L876.278 682.501 L875.718 682.501 L875.159 682.501 L874.6 682.501 L874.041 682.501 L873.481 682.501 L872.922 682.501 L872.363 682.501 L871.804 682.501 L871.244 682.501 L870.685 682.501 L870.126 682.501 L869.567 682.501 L869.007 682.501 L868.448 682.501 L867.889 682.501 L867.33 682.501 L866.77 682.501 L866.211 682.501 L865.652 682.501 L865.093 682.501 L864.533 682.501 L863.974 682.501 L863.415 682.501 L862.856 682.501 L862.296 682.501 L861.737 682.501 L861.178 682.501 L860.619 682.501 L860.059 682.501 L859.5 682.501 L858.941 682.501 L858.382 682.501 L857.822 682.501 L857.263 682.501 L856.704 682.501 L856.145 682.501 L855.585 682.501 L855.026 682.501 L854.467 682.501 L853.908 682.501 L853.348 682.501 L852.789 682.501 L852.23 682.501 L851.671 682.501 L851.111 682.501 L850.552 682.501 L849.993 682.501 L849.434 682.501 L848.874 682.501 L848.315 682.501 L847.756 682.501 L847.197 682.501 L846.637 682.501 L846.078 682.501 L845.519 682.501 L844.96 682.501 L844.4 682.501 L843.841 682.501 L843.282 682.501 L842.723 682.501 L842.163 682.501 L841.604 682.501 L841.045 682.501 L840.486 682.501 L839.926 682.501 L839.367 682.501 L838.808 682.501 L838.249 682.501 L837.689 682.501 L837.13 682.501 L836.571 682.501 L836.012 682.501 L835.452 682.501 L834.893 682.501 L834.334 682.501 L833.775 682.501 L833.215 682.501 L832.656 682.501 L832.097 682.501 L831.538 682.501 L830.978 682.501 L830.419 682.501 L829.86 682.501 L829.301 682.501 L828.741 682.501 L828.182 682.501 L827.623 682.501 L827.064 682.501 L826.504 682.501 L825.945 682.501 L825.386 682.501 L824.827 682.501 L824.267 682.501 L823.708 682.501 L823.149 682.501 L822.59 682.501 L822.03 682.501 L821.471 682.501 L820.912 682.501 L820.353 682.501 L819.793 682.501 L819.234 682.501 L818.675 682.501 L818.116 682.501 L817.556 682.501 L816.997 682.501 L816.438 682.501 L815.879 682.501 L815.319 682.501 L814.76 682.501 L814.201 682.501 L813.642 682.501 L813.082 682.501 L812.523 682.501 L811.964 682.501 L811.405 682.501 L810.845 682.501 L810.286 682.501 L809.727 682.501 L809.168 682.501 L808.608 682.501 L808.049 682.501 L807.49 682.501 L806.931 682.501 L806.371 682.501 L805.812 682.501 L805.253 682.501 L804.693 682.501 L804.134 682.501 L803.575 682.501 L803.016 682.501 L802.456 682.501 L801.897 682.501 L801.338 682.501 L800.779 682.501 L800.219 682.501 L799.66 682.501 L799.101 682.501 L798.542 682.501 L797.982 682.501 L797.423 682.501 L796.864 682.501 L796.305 682.501 L795.745 682.501 L795.186 682.501 L794.627 682.501 L794.068 682.501 L793.508 682.501 L792.949 682.501 L792.39 682.501 L791.831 682.501 L791.271 682.501 L790.712 682.501 L790.153 682.501 L789.594 682.501 L789.034 682.501 L788.475 682.501 L787.916 682.501 L787.357 682.501 L786.797 682.501 L786.238 682.501 L785.679 682.501 L785.12 682.501 L784.56 682.501 L784.001 682.501 L783.442 682.501 L782.883 682.501 L782.323 682.501 L781.764 682.501 L781.205 682.501 L780.646 682.501 L780.086 682.501 L779.527 682.501 L778.968 682.501 L778.409 682.501 L777.849 682.501 L777.29 682.501 L776.731 682.501 L776.172 682.501 L775.612 682.501 L775.053 682.501 L774.494 682.501 L773.935 682.501 L773.375 682.501 L772.816 682.501 L772.257 682.501 L771.698 682.501 L771.138 682.501 L770.579 682.501 L770.02 682.501 L769.461 682.501 L768.901 682.501 L768.342 682.501 L767.783 682.501 L767.224 682.501 L766.664 682.501 L766.105 682.501 L765.546 682.501 L764.987 682.501 L764.427 682.501 L763.868 682.501 L763.309 682.501 L762.75 682.501 L762.19 682.501 L761.631 682.501 L761.072 682.501 L760.513 682.501 L759.953 682.501 L759.394 682.501 L758.835 682.501 L758.276 682.501 L757.716 682.501 L757.157 682.501 L756.598 682.501 L756.039 682.501 L755.479 682.501 L754.92 682.501 L754.361 682.501 L753.802 682.501 L753.242 682.501 L752.683 682.501 L752.124 682.501 L751.565 682.501 L751.005 682.501 L750.446 682.501 L749.887 682.501 L749.328 682.501 L748.768 682.501 L748.209 682.501 L747.65 682.501 L747.091 682.501 L746.531 682.501 L745.972 682.501 L745.413 682.501 L744.854 682.501 L744.294 682.501 L743.735 682.501 L743.176 682.501 L742.617 682.501 L742.057 682.501 L741.498 682.501 L740.939 682.501 L740.38 682.501 L739.82 682.501 L739.261 682.501 L738.702 682.501 L738.143 682.501 L737.583 682.501 L737.024 682.501 L736.465 682.501 L735.906 682.501 L735.346 682.501 L734.787 682.501 L734.228 682.501 L733.669 682.501 L733.109 682.501 L732.55 682.501 L731.991 682.501 L731.432 682.501 L730.872 682.501 L730.313 682.501 L729.754 682.501 L729.195 682.501 L728.635 682.501 L728.076 682.501 L727.517 682.501 L726.958 682.501 L726.398 682.501 L725.839 682.501 L725.28 682.501 L724.721 682.501 L724.161 682.501 L723.602 682.501 L723.043 682.501 L722.484 682.501 L721.924 682.501 L721.365 682.501 L720.806 682.501 L720.247 682.501  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip753)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.237 720.806,683.237 721.365,683.237 721.924,683.237 722.484,683.237 723.043,683.237 723.602,683.237 724.161,683.237 724.721,683.237 725.28,683.237 725.839,683.237 726.398,683.237 726.958,683.237 727.517,683.237 728.076,683.237 728.635,683.237 729.195,683.237 729.754,683.237 730.313,683.237 730.872,683.237 731.432,683.237 731.991,683.237 732.55,683.237 733.109,683.237 733.669,683.237 734.228,683.237 734.787,683.237 735.346,683.237 735.906,683.237 736.465,683.237 737.024,683.237 737.583,683.237 738.143,683.237 738.702,683.237 739.261,683.237 739.82,683.237 740.38,683.237 740.939,683.237 741.498,683.237 742.057,683.237 742.617,683.237 743.176,683.237 743.735,683.237 744.294,683.237 744.854,683.237 745.413,683.237 745.972,683.237 746.531,683.237 747.091,683.237 747.65,683.237 748.209,683.237 748.768,683.237 749.328,683.237 749.887,683.237 750.446,683.237 751.005,683.237 751.565,683.237 752.124,683.237 752.683,683.237 753.242,683.237 753.802,683.237 754.361,683.237 754.92,683.237 755.479,683.237 756.039,683.237 756.598,683.237 757.157,683.237 757.716,683.237 758.276,683.237 758.835,683.237 759.394,683.237 759.953,683.237 760.513,683.237 761.072,683.237 761.631,683.237 762.19,683.237 762.75,683.237 763.309,683.237 763.868,683.237 764.427,683.237 764.987,683.237 765.546,683.237 766.105,683.237 766.664,683.237 767.224,683.237 767.783,683.237 768.342,683.237 768.901,683.237 769.461,683.237 770.02,683.237 770.579,683.237 771.138,683.237 771.698,683.237 772.257,683.237 772.816,683.237 773.375,683.237 773.935,683.237 774.494,683.237 775.053,683.237 775.612,683.237 776.172,683.237 776.731,683.237 777.29,683.237 777.849,683.237 778.409,683.237 778.968,683.237 779.527,683.237 780.086,683.237 780.646,683.237 781.205,683.237 781.764,683.237 782.323,683.237 782.883,683.237 783.442,683.237 784.001,683.237 784.56,683.237 785.12,683.237 785.679,683.237 786.238,683.237 786.797,683.237 787.357,683.237 787.916,683.237 788.475,683.237 789.034,683.237 789.594,683.237 790.153,683.237 790.712,683.237 791.271,683.237 791.831,683.237 792.39,683.237 792.949,683.237 793.508,683.237 794.068,683.237 794.627,683.237 795.186,683.237 795.745,683.237 796.305,683.237 796.864,683.237 797.423,683.237 797.982,683.237 798.542,683.237 799.101,683.237 799.66,683.237 800.219,683.237 800.779,683.237 801.338,683.237 801.897,683.237 802.456,683.237 803.016,683.237 803.575,683.237 804.134,683.237 804.693,683.237 805.253,683.237 805.812,683.237 806.371,683.237 806.931,683.237 807.49,683.237 808.049,683.237 808.608,683.237 809.168,683.237 809.727,683.237 810.286,683.237 810.845,683.237 811.405,683.237 811.964,683.237 812.523,683.237 813.082,683.237 813.642,683.237 814.201,683.237 814.76,683.237 815.319,683.237 815.879,683.237 816.438,683.237 816.997,683.237 817.556,683.237 818.116,683.237 818.675,683.237 819.234,683.237 819.793,683.237 820.353,683.237 820.912,683.237 821.471,683.237 822.03,683.237 822.59,683.237 823.149,683.237 823.708,683.237 824.267,683.237 824.827,683.237 825.386,683.237 825.945,683.237 826.504,683.237 827.064,683.237 827.623,683.237 828.182,683.237 828.741,683.237 829.301,683.237 829.86,683.237 830.419,683.237 830.978,683.237 831.538,683.237 832.097,683.237 832.656,683.237 833.215,683.237 833.775,683.237 834.334,683.237 834.893,683.237 835.452,683.237 836.012,683.237 836.571,683.237 837.13,683.237 837.689,683.237 838.249,683.237 838.808,683.237 839.367,683.237 839.926,683.237 840.486,683.237 841.045,683.237 841.604,683.237 842.163,683.237 842.723,683.237 843.282,683.237 843.841,683.237 844.4,683.237 844.96,683.237 845.519,683.237 846.078,683.237 846.637,683.237 847.197,683.237 847.756,683.237 848.315,683.237 848.874,683.237 849.434,683.237 849.993,683.237 850.552,683.237 851.111,683.237 851.671,683.237 852.23,683.237 852.789,683.237 853.348,683.237 853.908,683.237 854.467,683.237 855.026,683.237 855.585,683.237 856.145,683.237 856.704,683.237 857.263,683.237 857.822,683.237 858.382,683.237 858.941,683.237 859.5,683.237 860.059,683.237 860.619,683.237 861.178,683.237 861.737,683.237 862.296,683.237 862.856,683.237 863.415,683.237 863.974,683.237 864.533,683.237 865.093,683.237 865.652,683.237 866.211,683.237 866.77,683.237 867.33,683.237 867.889,683.237 868.448,683.237 869.007,683.237 869.567,683.237 870.126,683.237 870.685,683.237 871.244,683.237 871.804,683.237 872.363,683.237 872.922,683.237 873.481,683.237 874.041,683.237 874.6,683.237 875.159,683.237 875.718,683.237 876.278,683.237 876.837,683.237 877.396,683.237 877.955,683.237 878.515,683.237 879.074,683.237 879.633,683.237 880.192,683.237 880.752,683.237 881.311,683.237 881.87,683.237 882.429,683.237 882.989,683.237 883.548,683.237 884.107,683.237 884.666,683.237 885.226,683.237 885.785,683.237 886.344,683.237 886.903,683.237 887.463,683.237 888.022,683.237 888.581,683.237 889.14,683.237 889.7,683.237 890.259,683.237 890.818,683.237 891.377,683.237 891.937,683.237 892.496,683.237 893.055,683.237 893.614,683.237 894.174,683.237 894.733,683.237 895.292,683.237 895.851,683.237 896.411,683.237 896.97,683.237 897.529,683.237 898.088,683.237 898.648,683.237 899.207,683.237 899.766,683.237 900.325,683.237 900.885,683.237 901.444,683.237 902.003,683.237 902.562,683.237 903.122,683.237 903.681,683.237 904.24,683.237 904.799,683.237 905.359,683.237 905.918,683.237 906.477,683.237 907.036,683.237 907.596,683.237 908.155,683.237 908.714,683.237 909.273,683.237 909.833,683.237 910.392,683.237 910.951,683.237 911.51,683.237 912.07,683.237 912.629,683.237 913.188,683.237 913.747,683.237 914.307,683.237 914.866,683.237 915.425,683.237 915.984,683.237 916.544,683.237 917.103,683.237 917.662,683.237 918.221,683.237 918.781,683.237 919.34,683.237 919.899,683.237 920.458,683.237 921.018,683.237 921.577,683.237 922.136,683.237 922.695,683.237 923.255,683.237 923.814,683.237 924.373,683.237 924.932,683.237 925.492,683.237 926.051,683.237 926.61,683.237 927.169,683.237 927.729,683.237 928.288,683.237 928.847,683.237 929.406,683.237 929.966,683.237 930.525,683.237 931.084,683.237 931.644,683.237 932.203,683.237 932.762,683.237 933.321,683.237 933.881,683.237 934.44,683.237 934.999,683.237 935.558,683.237 936.118,683.237 936.677,683.237 937.236,683.237 937.795,683.237 938.355,683.237 938.914,683.237 939.473,683.237 940.032,683.237 940.592,683.237 941.151,683.237 941.71,683.237 942.269,683.237 942.829,683.237 943.388,683.237 943.947,683.237 944.506,683.237 945.066,683.237 945.625,683.237 946.184,683.237 946.743,683.237 947.303,683.237 947.862,683.237 948.421,683.237 948.98,683.237 949.54,683.237 950.099,683.237 950.658,683.237 951.217,683.237 951.777,683.237 952.336,683.237 952.895,683.237 953.454,683.237 954.014,683.237 954.573,683.237 955.132,683.237 955.691,683.237 956.251,683.237 956.81,683.237 957.369,683.237 957.928,683.237 958.488,683.237 959.047,683.237 959.606,683.237 960.165,683.237 960.725,683.237 961.284,683.237 961.843,683.237 962.402,683.237 962.962,683.237 963.521,683.237 964.08,683.237 964.639,683.237 965.199,683.237 965.758,683.237 966.317,683.237 966.876,683.237 967.436,683.237 967.995,683.237 968.554,683.237 969.113,683.237 969.673,683.237 970.232,683.237 970.791,683.237 971.35,683.237 971.91,683.237 972.469,683.237 973.028,683.237 973.587,683.237 974.147,683.237 974.706,683.237 975.265,683.237 975.824,683.237 976.384,683.237 976.943,683.237 977.502,683.237 978.061,683.237 978.621,683.237 979.18,683.237 979.739,683.237 980.298,683.237 980.858,683.237 981.417,683.237 981.976,683.237 982.535,683.237 983.095,683.237 983.654,683.237 984.213,683.237 984.772,683.237 985.332,683.237 985.891,683.237 986.45,683.237 987.009,683.237 987.569,683.237 988.128,683.237 988.687,683.237 989.246,683.237 989.806,683.237 990.365,683.237 990.924,683.237 991.483,683.237 992.043,683.237 992.602,683.237 993.161,683.237 993.72,683.237 994.28,683.237 994.839,683.237 995.398,683.237 995.957,683.237 996.517,683.237 997.076,683.237 997.635,683.237 998.194,683.237 998.754,683.237 999.313,683.237 999.872,683.237 1000.43,683.237 1000.99,683.237 1001.55,683.237 1002.11,683.237 1002.67,683.237 1003.23,683.237 1003.79,683.237 1004.35,683.237 1004.91,683.237 1005.46,683.237 1006.02,683.237 1006.58,683.237 1007.14,683.237 1007.7,683.237 1008.26,683.237 1008.82,683.237 1009.38,683.237 1009.94,683.237 1010.5,683.237 1011.06,683.237 1011.62,683.237 1012.18,683.237 1012.73,683.237 1013.29,683.237 1013.85,683.237 1014.41,683.237 1014.97,683.237 1015.53,683.237 1016.09,683.237 1016.65,683.237 1017.21,683.237 1017.77,683.237 1018.33,683.237 1018.89,683.237 1019.45,683.237 1020.01,683.237 1020.56,683.237 1021.12,683.237 1021.68,683.237 1022.24,683.237 1022.8,683.237 1023.36,683.237 1023.92,683.237 1024.48,683.237 1025.04,683.237 1025.6,683.237 1026.16,683.237 1026.72,683.237 1027.28,683.237 1027.83,683.237 1028.39,683.237 1028.95,683.237 1029.51,683.237 1030.07,683.237 1030.63,683.237 1031.19,683.237 1031.75,683.237 1032.31,683.237 1032.87,683.237 1033.43,683.237 1033.99,683.237 1034.55,683.237 1035.1,683.237 1035.66,683.237 1036.22,683.237 1036.78,683.237 1037.34,683.237 1037.9,683.237 1038.46,683.237 1039.02,683.237 1039.58,683.237 1040.14,683.237 1040.7,683.237 1041.26,683.237 1041.82,683.237 1042.38,683.237 1042.93,683.237 1043.49,683.237 1044.05,683.237 1044.61,683.237 1045.17,683.237 1045.73,683.237 1046.29,683.237 1046.85,683.237 1047.41,683.237 1047.97,683.237 1048.53,683.237 1049.09,683.237 1049.65,683.237 1050.2,683.237 1050.76,683.237 1051.32,683.237 1051.88,683.237 1052.44,683.237 1053,683.237 1053.56,683.237 1054.12,683.237 1054.68,683.237 1055.24,683.237 1055.8,683.237 1056.36,683.237 1056.92,683.237 1057.48,683.237 1058.03,683.237 1058.59,683.237 1059.15,683.237 1059.71,683.237 1060.27,683.237 1060.83,683.237 1061.39,683.237 1061.95,683.237 1062.51,683.237 1063.07,683.237 1063.63,683.237 1064.19,683.237 1064.75,683.237 1065.3,683.237 1065.86,683.237 1066.42,683.237 1066.98,683.237 1067.54,683.237 1068.1,683.237 1068.66,683.237 1069.22,683.237 1069.78,683.237 1070.34,683.237 1070.9,683.237 1071.46,683.237 1072.02,683.237 1072.57,683.237 1073.13,683.237 1073.69,683.237 1074.25,683.237 1074.81,683.237 1075.37,683.237 1075.93,683.237 1076.49,683.237 1077.05,683.237 1077.61,683.237 1078.17,683.237 1078.73,683.237 1079.29,683.237 1079.85,683.237 1080.4,683.237 1080.96,683.237 1081.52,683.237 1082.08,683.237 1082.64,683.237 1083.2,683.237 1083.76,683.237 1084.32,683.237 1084.88,683.237 1085.44,683.237 1086,683.237 1086.56,683.237 1087.12,683.237 1087.67,683.237 1088.23,683.237 1088.79,683.237 1089.35,683.237 1089.91,683.237 1090.47,683.237 1091.03,683.237 1091.59,683.237 1092.15,683.237 1092.71,683.237 1093.27,683.237 1093.83,683.237 1094.39,683.237 1094.94,683.237 1095.5,683.237 1096.06,683.237 1096.62,683.237 1097.18,683.237 1097.74,683.237 1098.3,683.237 1098.86,683.237 1099.42,683.237 1099.98,683.237 1100.54,683.237 1101.1,683.237 1101.66,683.237 1102.22,683.237 1102.77,683.237 1103.33,683.237 1103.89,683.237 1104.45,683.237 1105.01,683.237 1105.57,683.237 1106.13,683.237 1106.69,683.237 1107.25,683.237 1107.81,683.237 1108.37,683.237 1108.93,683.237 1109.49,683.237 1110.04,683.237 1110.6,683.237 1111.16,683.237 1111.72,683.237 1112.28,683.237 1112.84,683.237 1113.4,683.237 1113.96,683.237 1114.52,683.237 1115.08,683.237 1115.64,683.237 1116.2,683.237 1116.76,683.237 1117.31,683.237 1117.87,683.237 1118.43,683.237 1118.99,683.237 1119.55,683.237 1120.11,683.237 1120.67,683.237 1121.23,683.237 1121.79,683.237 1122.35,683.237 1122.91,683.237 1123.47,683.237 1124.03,683.237 1124.59,683.237 1125.14,683.237 1125.7,683.237 1126.26,683.237 1126.82,683.237 1127.38,683.237 1127.94,683.237 1128.5,683.237 1129.06,683.237 1129.62,683.237 1130.18,683.237 1130.74,683.237 1131.3,683.237 1131.86,683.237 1132.41,683.237 1132.97,683.237 1133.53,683.237 1134.09,683.237 1134.65,683.237 1135.21,683.237 1135.77,683.237 1136.33,683.237 1136.89,683.237 1137.45,683.237 1138.01,683.237 1138.57,683.237 1139.13,683.237 1139.68,683.237 1140.24,683.237 1140.8,683.237 1141.36,683.237 1141.92,683.237 1142.48,683.237 1143.04,683.237 1143.6,683.237 1144.16,683.237 1144.72,683.237 1145.28,683.237 1145.84,683.237 1146.4,683.237 1146.96,683.237 1147.51,683.237 1148.07,683.237 1148.63,683.237 1149.19,683.237 1149.75,683.237 1150.31,683.237 1150.87,683.237 1151.43,683.237 1151.99,683.237 1152.55,683.237 1153.11,683.237 1153.67,683.237 1154.23,683.237 1154.78,683.237 1155.34,683.237 1155.9,683.237 1156.46,683.237 1157.02,683.237 1157.58,683.237 1158.14,683.237 1158.7,683.237 1159.26,683.237 1159.82,683.237 1160.38,683.237 1160.94,683.237 1161.5,683.237 1162.05,683.237 1162.61,683.237 1163.17,683.237 1163.73,683.237 1164.29,683.237 1164.85,683.237 1165.41,683.237 1165.97,683.237 1166.53,683.237 1167.09,683.237 1167.65,683.237 1168.21,683.237 1168.77,683.237 1169.33,683.237 1169.88,683.237 1170.44,683.237 1171,683.237 1171.56,683.237 1172.12,683.237 1172.68,683.237 1173.24,683.237 1173.8,683.237 1174.36,683.237 1174.92,683.237 1175.48,683.237 1176.04,683.237 1176.6,683.237 1177.15,683.237 1177.71,683.237 1178.27,683.237 1178.83,683.237 1179.39,683.237 1179.95,683.237 1180.51,683.237 1181.07,683.237 1181.63,683.237 1182.19,683.237 1182.75,683.237 1183.31,683.237 1183.87,683.237 1184.43,683.237 1184.98,683.237 1185.54,683.237 1186.1,683.237 1186.66,683.237 1187.22,683.237 1187.78,683.237 1188.34,683.237 1188.9,683.237 1189.46,683.237 1190.02,683.237 1190.58,683.237 1191.14,683.237 1191.7,683.237 1192.25,683.237 1192.81,683.237 1193.37,683.237 1193.93,683.237 1194.49,683.237 1195.05,683.237 1195.61,683.237 1196.17,683.237 1196.73,683.237 1197.29,683.237 1197.85,683.237 1198.41,683.237 1198.97,683.237 1199.52,683.237 1200.08,683.237 1200.64,683.237 1201.2,683.237 1201.76,683.237 1202.32,683.237 1202.88,683.237 1203.44,683.237 1204,683.237 1204.56,683.237 1205.12,683.237 1205.68,683.237 1206.24,683.237 1206.8,683.237 1207.35,683.237 1207.91,683.237 1208.47,683.237 1209.03,683.237 1209.59,683.237 1210.15,683.237 1210.71,683.237 1211.27,683.237 1211.83,683.237 1212.39,683.237 1212.95,683.237 1213.51,683.237 1214.07,683.237 1214.62,683.237 1215.18,683.237 1215.74,683.237 1216.3,683.237 1216.86,683.237 1217.42,683.237 1217.98,683.237 1218.54,683.237 1219.1,683.237 1219.66,683.237 1220.22,683.237 1220.78,683.237 1221.34,683.237 1221.89,683.237 1222.45,683.237 1223.01,683.237 1223.57,683.237 1224.13,683.237 1224.69,683.237 1225.25,683.237 1225.81,683.237 1226.37,683.237 1226.93,683.237 1227.49,683.237 1228.05,683.237 1228.61,683.237 1229.17,683.237 1229.72,683.237 1230.28,683.237 1230.84,683.237 1231.4,683.237 1231.96,683.237 1232.52,683.237 1233.08,683.237 1233.64,683.237 1234.2,683.237 1234.76,683.237 1235.32,683.237 1235.88,683.237 1236.44,683.237 1236.99,683.237 1237.55,683.237 1238.11,683.237 1238.67,683.237 1239.23,683.237 1239.79,683.237 1240.35,683.237 1240.91,683.237 1241.47,683.237 1242.03,683.237 1242.59,683.237 1243.15,683.237 1243.71,683.237 1244.26,683.237 1244.82,683.237 1245.38,683.237 1245.94,683.237 1246.5,683.237 1247.06,683.237 1247.62,683.237 1248.18,683.237 1248.74,683.237 1249.3,683.237 1249.86,683.237 1250.42,683.237 1250.98,683.237 1251.54,683.237 1252.09,683.237 1252.65,683.237 1253.21,683.237 1253.77,683.237 1254.33,683.237 1254.89,683.237 1255.45,683.237 1256.01,683.237 1256.57,683.237 1257.13,683.237 1257.69,683.237 1258.25,683.237 1258.81,683.237 1259.36,683.237 1259.92,683.237 1260.48,683.237 1261.04,683.237 1261.6,683.237 1262.16,683.237 1262.72,683.237 1263.28,683.237 1263.84,683.237 1264.4,683.237 1264.96,683.237 1265.52,683.237 1266.08,683.237 1266.63,683.237 1267.19,683.237 1267.75,683.237 1268.31,683.237 1268.87,683.237 1269.43,683.237 1269.99,683.237 1270.55,683.237 1271.11,683.237 1271.67,683.237 1272.23,683.237 1272.79,683.237 1273.35,683.237 1273.91,683.237 1274.46,683.237 1275.02,683.237 1275.58,683.237 1276.14,683.237 1276.7,683.237 1277.26,683.237 1277.82,683.237 1278.38,683.237 1278.94,683.237 1279.5,683.237 1280.06,683.237 1280.62,683.237 1281.18,683.237 1281.73,683.237 1282.29,683.237 1282.85,683.237 1283.41,683.237 1283.97,683.237 1284.53,683.237 1285.09,683.237 1285.65,683.237 1286.21,683.237 1286.77,683.237 1287.33,683.237 1287.89,683.237 1288.45,683.237 1289,683.237 1289.56,683.237 1290.12,683.237 1290.68,683.237 1291.24,683.237 1291.8,683.237 1292.36,683.237 1292.92,683.237 1293.48,683.237 1294.04,683.237 1294.6,683.237 1295.16,683.237 1295.72,683.237 1296.28,683.237 1296.83,683.237 1297.39,683.237 1297.95,683.237 1298.51,683.237 1299.07,683.237 1299.63,683.237 1300.19,683.237 1300.75,683.237 1301.31,683.237 1301.87,683.237 1302.43,683.237 1302.99,683.237 1303.55,683.237 1304.1,683.237 1304.66,683.237 1305.22,683.237 1305.78,683.237 1306.34,683.237 1306.9,683.237 1307.46,683.237 1308.02,683.237 1308.58,683.237 1309.14,683.237 1309.7,683.237 1310.26,683.237 1310.82,683.237 1311.38,683.237 1311.93,683.237 1312.49,683.237 1313.05,683.237 1313.61,683.237 1314.17,683.237 1314.73,683.237 1315.29,683.237 1315.85,683.237 1316.41,683.237 1316.97,683.237 1317.53,683.237 1318.09,683.237 1318.65,683.237 1319.2,683.237 1319.76,683.237 1320.32,683.237 1320.88,683.237 1321.44,683.237 1322,683.237 1322.56,683.237 1323.12,683.237 1323.68,683.237 1324.24,683.237 1324.8,683.237 1325.36,683.237 1325.92,683.237 1326.47,683.237 1327.03,683.237 1327.59,683.237 1328.15,683.237 1328.71,683.237 1329.27,683.237 1329.83,683.237 1330.39,683.237 1330.95,683.237 1331.51,683.237 1332.07,683.237 1332.63,683.237 1333.19,683.237 1333.75,683.237 1334.3,683.237 1334.86,683.237 1335.42,683.237 1335.98,683.237 1336.54,683.237 1337.1,683.237 1337.66,683.237 1338.22,683.237 1338.78,683.237 1339.34,683.237 1339.9,683.237 1340.46,683.237 1341.02,683.237 1341.57,683.237 1342.13,683.237 1342.69,683.237 1343.25,683.237 1343.81,683.237 1344.37,683.237 1344.93,683.237 1345.49,683.237 1346.05,683.237 1346.61,683.237 1347.17,683.237 1347.73,683.237 1348.29,683.237 1348.84,683.237 1349.4,683.237 1349.96,683.237 1350.52,683.237 1351.08,683.237 1351.64,683.237 1352.2,683.237 1352.76,683.237 1353.32,683.237 1353.88,683.237 1354.44,683.237 1355,683.237 1355.56,683.237 1356.12,683.237 1356.67,683.237 1357.23,683.237 1357.79,683.237 1358.35,683.237 1358.91,683.237 1359.47,683.237 1360.03,683.237 1360.59,683.237 1361.15,683.237 1361.71,683.237 1362.27,683.237 1362.83,683.237 1363.39,683.237 1363.94,683.237 1364.5,683.237 1365.06,683.237 1365.62,683.237 1366.18,683.237 1366.74,683.237 1367.3,683.237 1367.86,683.237 1368.42,683.237 1368.98,683.237 1369.54,683.237 1370.1,683.237 1370.66,683.237 1371.21,683.237 1371.77,683.237 1372.33,683.237 1372.89,683.237 1373.45,683.237 1374.01,683.237 1374.57,683.237 1375.13,683.237 1375.69,683.237 1376.25,683.237 1376.81,683.237 1377.37,683.237 1377.93,683.237 1378.49,683.237 1379.04,683.237 1379.6,683.237 1380.16,683.237 1380.72,683.237 1381.28,683.237 1381.84,683.237 1382.4,683.237 1382.96,683.237 1383.52,683.237 1384.08,683.237 1384.64,683.237 1385.2,683.237 1385.76,683.237 1386.31,683.237 1386.87,683.237 1387.43,683.237 1387.99,683.237 1388.55,683.237 1389.11,683.237 1389.67,683.237 1390.23,683.237 1390.79,683.237 1391.35,683.237 1391.91,683.237 1392.47,683.237 1393.03,683.237 1393.58,683.237 1394.14,683.237 1394.7,683.237 1395.26,683.237 1395.82,683.237 1396.38,683.237 1396.94,683.237 1397.5,683.237 1398.06,683.237 1398.62,683.237 1399.18,683.237 1399.74,683.237 1400.3,683.237 1400.86,683.237 1401.41,683.237 1401.97,683.237 1402.53,683.237 1403.09,683.237 1403.65,683.237 1404.21,683.237 1404.77,683.237 1405.33,683.237 1405.89,683.237 1406.45,683.237 1407.01,683.237 1407.57,683.237 1408.13,683.237 1408.68,683.237 1409.24,683.237 1409.8,683.237 1410.36,683.237 1410.92,683.237 1411.48,683.237 1412.04,683.237 1412.6,683.237 1413.16,683.237 1413.72,683.237 1414.28,683.237 1414.84,683.237 1415.4,683.237 1415.95,683.237 1416.51,683.237 1417.07,683.237 1417.63,683.237 1418.19,683.237 1418.75,683.237 1419.31,683.237 1419.87,683.237 1420.43,683.237 1420.99,683.237 1421.55,683.237 1422.11,683.237 1422.67,683.237 1423.23,683.237 1423.78,683.237 1424.34,683.237 1424.9,683.237 1425.46,683.237 1426.02,683.237 1426.58,683.237 1427.14,683.237 1427.7,683.237 1428.26,683.237 1428.82,683.237 1429.38,683.237 1429.94,683.237 1430.5,683.237 1431.05,683.237 1431.61,683.237 1432.17,683.237 1432.73,683.237 1433.29,683.237 1433.85,683.237 1434.41,683.237 1434.97,683.237 1435.53,683.237 1436.09,683.237 1436.65,683.237 1437.21,683.237 1437.77,683.237 1438.33,683.237 1438.88,683.237 1439.44,683.237 1440,683.237 1440.56,683.237 1441.12,683.237 1441.68,683.237 1442.24,683.237 1442.8,683.237 1443.36,683.237 1443.92,683.237 1444.48,683.237 1445.04,683.237 1445.6,683.237 1446.15,683.237 1446.71,683.237 1447.27,683.237 1447.83,683.237 1448.39,683.237 1448.95,683.237 1449.51,683.237 1450.07,683.237 1450.63,683.237 1451.19,683.237 1451.75,683.237 1452.31,683.237 1452.87,683.237 1453.42,683.237 1453.98,683.237 1454.54,683.237 1455.1,683.237 1455.66,683.237 1456.22,683.237 1456.78,683.237 1457.34,683.237 1457.9,683.237 1458.46,683.237 1459.02,683.237 1459.58,683.237 1460.14,683.237 1460.7,683.237 1461.25,683.237 1461.81,683.237 1462.37,683.237 1462.93,683.237 1463.49,683.237 1464.05,683.237 1464.61,683.237 1465.17,683.237 1465.73,683.237 1466.29,683.237 1466.85,683.237 1467.41,683.237 1467.97,683.237 1468.52,683.237 1469.08,683.237 1469.64,683.237 1470.2,683.237 1470.76,683.237 1471.32,683.237 1471.88,683.237 1472.44,683.237 1473,683.237 1473.56,683.237 1474.12,683.237 1474.68,683.237 1475.24,683.237 1475.79,683.237 1476.35,683.237 1476.91,683.237 1477.47,683.237 1478.03,683.237 1478.59,683.237 1479.15,683.237 1479.71,683.237 1480.27,683.237 1480.83,683.237 1481.39,683.237 1481.95,683.237 1482.51,683.237 1483.07,683.237 1483.62,683.237 1484.18,683.237 1484.74,683.237 1485.3,683.237 1485.86,683.237 1486.42,683.237 1486.98,683.237 1487.54,683.237 1488.1,683.237 1488.66,683.237 1489.22,683.237 1489.78,683.237 1490.34,683.237 1490.89,683.237 1491.45,683.237 1492.01,683.237 1492.57,683.237 1493.13,683.237 1493.69,683.237 1494.25,683.237 1494.81,683.237 1495.37,683.237 1495.93,683.237 1496.49,683.237 1497.05,683.237 1497.61,683.237 1498.16,683.237 1498.72,683.237 1499.28,683.237 1499.84,683.237 1500.4,683.237 1500.96,683.237 1501.52,683.237 1502.08,683.237 1502.64,683.237 1503.2,683.237 1503.76,683.237 1504.32,683.237 1504.88,683.237 1505.44,683.237 1505.99,683.237 1506.55,683.237 1507.11,683.237 1507.67,683.237 1508.23,683.237 1508.79,683.237 1509.35,683.237 1509.91,683.237 1510.47,683.237 1511.03,683.237 1511.59,683.237 1512.15,683.237 1512.71,683.237 1513.26,683.237 1513.82,683.237 1514.38,683.237 1514.94,683.237 1515.5,683.237 1516.06,683.237 1516.62,683.237 1517.18,683.237 1517.74,683.237 1518.3,683.237 1518.86,683.237 1519.42,683.237 1519.98,683.237 1520.53,683.237 1521.09,683.237 1521.65,683.237 1522.21,683.237 1522.77,683.237 1523.33,683.237 1523.89,683.237 1524.45,683.237 1525.01,683.237 1525.57,683.237 1526.13,683.237 1526.69,683.237 1527.25,683.237 1527.81,683.237 1528.36,683.237 1528.92,683.237 1529.48,683.237 1530.04,683.237 1530.6,683.237 1531.16,683.237 1531.72,683.237 1532.28,683.237 1532.84,683.237 1533.4,683.237 1533.96,683.237 1534.52,683.237 1535.08,683.237 1535.63,683.237 1536.19,683.237 1536.75,683.237 1537.31,683.237 1537.87,683.237 1538.43,683.237 1538.99,683.237 1539.55,683.237 1540.11,683.237 1540.67,683.237 1541.23,683.237 1541.79,683.237 1542.35,683.237 1542.9,683.237 1543.46,683.237 1544.02,683.237 1544.58,683.237 1545.14,683.237 1545.7,683.237 1546.26,683.237 1546.82,683.237 1547.38,683.237 1547.94,683.237 1548.5,683.237 1549.06,683.237 1549.62,683.237 1550.18,683.237 1550.73,683.237 1551.29,683.237 1551.85,683.237 1552.41,683.237 1552.97,683.237 1553.53,683.237 1554.09,683.237 1554.65,683.237 1555.21,683.237 1555.77,683.237 1556.33,683.237 1556.89,683.237 1557.45,683.237 1558,683.237 1558.56,683.237 1559.12,683.237 1559.68,683.237 1560.24,683.237 1560.8,683.237 1561.36,683.237 1561.92,683.237 1562.48,683.237 1563.04,683.237 1563.6,683.237 1564.16,683.237 1564.72,683.237 1565.28,683.237 1565.83,683.237 1566.39,683.237 1566.95,683.237 1567.51,683.237 1568.07,683.237 1568.63,683.237 1569.19,683.237 1569.75,683.237 1570.31,683.237 1570.87,683.237 1571.43,683.237 1571.99,683.237 1572.55,683.237 1573.1,683.237 1573.66,683.237 1574.22,683.237 1574.78,683.237 1575.34,683.237 1575.9,683.237 1576.46,683.237 1577.02,683.237 1577.58,683.237 1578.14,683.237 1578.7,683.237 1579.26,683.237 1579.82,683.237 1580.37,683.237 1580.93,683.237 1581.49,683.237 1582.05,683.237 1582.61,683.237 1583.17,683.237 1583.73,683.237 1584.29,683.237 1584.85,683.237 1585.41,683.237 1585.97,683.237 1586.53,683.237 1587.09,683.237 1587.65,683.237 1588.2,683.237 1588.76,683.237 1589.32,683.237 1589.88,683.237 1590.44,683.237 1591,683.237 1591.56,683.237 1592.12,683.237 1592.68,683.237 1593.24,683.237 1593.8,683.237 1594.36,683.237 1594.92,683.237 1595.47,683.237 1596.03,683.237 1596.59,683.237 1597.15,683.237 1597.71,683.237 1598.27,683.237 1598.83,683.237 1599.39,683.237 1599.95,683.237 1600.51,683.237 1601.07,683.237 1601.63,683.237 1602.19,683.237 1602.74,683.237 1603.3,683.237 1603.86,683.237 1604.42,683.237 1604.98,683.237 1605.54,683.237 1606.1,683.237 1606.66,683.237 1607.22,683.237 1607.78,683.237 1608.34,683.237 1608.9,683.237 1609.46,683.237 1610.02,683.237 1610.57,683.237 1611.13,683.237 1611.69,683.237 1612.25,683.237 1612.81,683.237 1613.37,683.237 1613.93,683.237 1614.49,683.237 1615.05,683.237 1615.61,683.237 1616.17,683.237 1616.73,683.237 1617.29,683.237 1617.84,683.237 1618.4,683.237 1618.96,683.237 1619.52,683.237 1620.08,683.237 1620.64,683.237 1621.2,683.237 1621.76,683.237 1622.32,683.237 1622.88,683.237 1623.44,683.237 1624,683.237 1624.56,683.237 1625.11,683.237 1625.67,683.237 1626.23,683.237 1626.79,683.237 1627.35,683.237 1627.91,683.237 1628.47,683.237 1629.03,683.237 1629.59,683.237 1630.15,683.237 1630.71,683.237 1631.27,683.237 1631.83,683.237 1632.39,683.237 1632.94,683.237 1633.5,683.237 1634.06,683.237 1634.62,683.237 1635.18,683.237 1635.74,683.237 1636.3,683.237 1636.86,683.237 1637.42,683.237 1637.98,683.237 1638.54,683.237 1639.1,683.237 1639.66,683.237 1640.21,683.237 1640.77,683.237 1641.33,683.237 1641.89,683.237 1642.45,683.237 1643.01,683.237 1643.57,683.237 1644.13,683.237 1644.69,683.237 1645.25,683.237 1645.81,683.237 1646.37,683.237 1646.93,683.237 1647.48,683.237 1648.04,683.237 1648.6,683.237 1649.16,683.237 1649.72,683.237 1650.28,683.237 1650.84,683.237 1651.4,683.237 1651.96,683.237 1652.52,683.237 1653.08,683.237 1653.64,683.237 1654.2,683.237 1654.76,683.237 1655.31,683.237 1655.87,683.237 1656.43,683.237 1656.99,683.237 1657.55,683.237 1658.11,683.237 1658.67,683.237 1659.23,683.237 1659.79,683.237 1660.35,683.237 1660.91,683.237 1661.47,683.237 1662.03,683.237 1662.58,683.237 1663.14,683.237 1663.7,683.237 1664.26,683.237 1664.82,683.237 1665.38,683.237 1665.94,683.237 1666.5,683.237 1667.06,683.237 1667.62,683.237 1668.18,683.237 1668.74,683.237 1669.3,683.237 1669.85,683.237 1670.41,683.237 1670.97,683.237 1671.53,683.237 1672.09,683.237 1672.65,683.237 1673.21,683.237 1673.77,683.237 1674.33,683.237 1674.89,683.237 1675.45,683.237 1676.01,683.237 1676.57,683.237 1677.13,683.237 1677.68,683.237 1678.24,683.237 1678.8,683.237 1679.36,683.237 1679.92,683.237 1680.48,683.237 1681.04,683.237 1681.6,683.237 1682.16,683.237 1682.72,683.237 1683.28,683.237 1683.84,683.237 1684.4,683.237 1684.95,683.237 1685.51,683.237 1686.07,683.237 1686.63,683.237 1687.19,683.237 1687.75,683.237 1688.31,683.237 1688.87,683.237 1689.43,683.237 1689.99,683.237 1690.55,683.237 1691.11,683.237 1691.67,683.237 1692.23,683.237 1692.78,683.237 1693.34,683.237 1693.9,683.237 1694.46,683.237 1695.02,683.237 1695.58,683.237 1696.14,683.237 1696.7,683.237 1697.26,683.237 1697.82,683.237 1698.38,683.237 1698.94,683.237 1699.5,683.237 1700.05,683.237 1700.61,683.237 1701.17,683.237 1701.73,683.237 1702.29,683.237 1702.85,683.237 1703.41,683.237 1703.97,683.237 1704.53,683.237 1705.09,683.237 1705.65,683.237 1706.21,683.237 1706.77,683.237 1707.32,683.237 1707.88,683.237 1708.44,683.237 1709,683.237 1709.56,683.237 1710.12,683.237 1710.68,683.237 1711.24,683.237 1711.8,683.237 1712.36,683.237 1712.92,683.237 1713.48,683.237 1714.04,683.237 1714.6,683.237 1715.15,683.237 1715.71,683.237 1716.27,683.237 1716.83,683.237 1717.39,683.237 1717.95,683.237 1718.51,683.237 1719.07,683.237 1719.63,683.237 1720.19,683.237 1720.75,683.237 1721.31,683.237 1721.87,683.237 1722.42,683.237 1722.98,683.237 1723.54,683.237 1724.1,683.237 1724.66,683.237 1725.22,683.237 1725.78,683.237 1726.34,683.237 1726.9,683.237 1727.46,683.237 1728.02,683.237 1728.58,683.237 1729.14,683.237 1729.69,683.237 1730.25,683.237 1730.81,683.237 1731.37,683.237 1731.93,683.237 1732.49,683.237 1733.05,683.237 1733.61,683.237 1734.17,683.237 1734.73,683.237 1735.29,683.237 1735.85,683.237 1736.41,683.237 1736.97,683.237 1737.52,683.237 1738.08,683.237 1738.64,683.237 1739.2,683.237 1739.76,683.237 1740.32,683.237 1740.88,683.237 1741.44,683.237 1742,683.237 1742.56,683.237 1743.12,683.237 1743.68,683.237 1744.24,683.237 1744.79,683.237 1745.35,683.237 1745.91,683.237 1746.47,683.237 1747.03,683.237 1747.59,683.237 1748.15,683.237 1748.71,683.237 1749.27,683.237 1749.83,683.237 1750.39,683.237 1750.95,683.237 1751.51,683.237 1752.06,683.237 1752.62,683.237 1753.18,683.237 1753.74,683.237 1754.3,683.237 1754.86,683.237 1755.42,683.237 1755.98,683.237 1756.54,683.237 1757.1,683.237 1757.66,683.237 1758.22,683.237 1758.78,683.237 1759.34,683.237 1759.89,683.237 1760.45,683.237 1761.01,683.237 1761.57,683.237 1762.13,683.237 1762.69,683.237 1763.25,683.237 1763.81,683.237 1764.37,683.237 1764.93,683.237 1765.49,683.237 1766.05,683.237 1766.61,683.237 1767.16,683.237 1767.72,683.237 1768.28,683.237 1768.84,683.237 1769.4,683.237 1769.96,683.237 1770.52,683.237 1771.08,683.237 1771.64,683.237 1772.2,683.237 1772.76,683.237 1773.32,683.237 1773.88,683.237 1774.43,683.237 1774.99,683.237 1775.55,683.237 1776.11,683.237 1776.67,683.237 1777.23,683.237 1777.79,683.237 1778.35,683.237 1778.91,683.237 1779.47,683.237 1780.03,683.237 1780.59,683.237 1781.15,683.237 1781.71,683.237 1782.26,683.237 1782.82,683.237 1783.38,683.237 1783.94,683.237 1784.5,683.237 1785.06,683.237 1785.62,683.237 1786.18,683.237 1786.74,683.237 1787.3,683.237 1787.86,683.237 1788.42,683.237 1788.98,683.237 1789.53,683.237 1790.09,683.237 1790.65,683.237 1791.21,683.237 1791.77,683.237 1792.33,683.237 1792.89,683.237 1793.45,683.237 1794.01,683.237 1794.57,683.237 1795.13,683.237 1795.69,683.237 1796.25,683.237 1796.8,683.237 1797.36,683.237 1797.92,683.237 1798.48,683.237 1799.04,683.237 1799.6,683.237 1800.16,683.237 1800.72,683.237 1801.28,683.237 1801.84,683.237 1802.4,683.237 1802.96,683.237 1803.52,683.237 1804.08,683.237 1804.63,683.237 1805.19,683.237 1805.75,683.237 1806.31,683.237 1806.87,683.237 1807.43,683.237 1807.99,683.237 1808.55,683.237 1809.11,683.237 1809.67,683.237 1810.23,683.237 1810.79,683.237 1811.35,683.237 1811.9,683.237 1812.46,683.237 1813.02,683.237 1813.58,683.237 1814.14,683.237 1814.7,683.237 1815.26,683.237 1815.82,683.237 1816.38,683.237 1816.94,683.237 1817.5,683.237 1818.06,683.237 1818.62,683.237 1819.18,683.237 1819.73,683.237 1820.29,683.237 1820.85,683.237 1821.41,683.237 1821.97,683.237 1822.53,683.237 1823.09,683.237 1823.65,683.237 1824.21,683.237 1824.77,683.237 1825.33,683.237 1825.89,683.237 1826.45,683.237 1827,683.237 1827.56,683.237 1828.12,683.237 1828.68,683.237 1829.24,683.237 1829.8,683.237 1830.36,683.237 1830.92,683.237 1831.48,683.237 1832.04,683.237 1832.6,683.237 1833.16,683.237 1833.72,683.237 1834.27,683.237 1834.83,683.237 1835.39,683.237 1835.95,683.237 1836.51,683.237 1837.07,683.237 1837.63,683.237 1838.19,683.237 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033736110255049 ± 0.020116243563492127\nProjected Energy: -4.013331864951047 ± (0.0036334396536714664, 0.0037015138192844077)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470117</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4457e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.62e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.148e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.054e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.625e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.336e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\nExtended Help\n\nA matrix-vector product is performed by the applying the following sequence of functions.\n\nSpawns are performed from each segment in the vector independently. The spawns from the p-th segment are collected in the p-th column of the working memory. (perform_spawns!)\nThe local segments are summed row-wise to the main (first) column. (collect_local!)\nThe remote segements are communicated using MPI and added to the main column. (synchronize_remote!)\nThe data is compressed copied to the next vector (move_and_compress!)\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is nrows.\n\nUsed in the AllToAll communication strategy.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
