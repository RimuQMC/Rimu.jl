var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip650\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip651\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip650)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip652\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.89 2211.02,1261.89 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.78 2211.02,1003.78 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.667 2211.02,745.667 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.557 2211.02,487.557 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.448 2211.02,229.448 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.89 423.181,1261.89 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.78 423.181,1003.78 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.667 423.181,745.667 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.557 423.181,487.557 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.448 423.181,229.448 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.25 Q349.094 1254.79 349.094 1261.92 Q349.094 1269.03 350.899 1272.59 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.59 Q363.608 1269.03 363.608 1261.92 Q363.608 1254.79 361.779 1251.25 Q359.973 1247.68 356.339 1247.68 M356.339 1243.98 Q362.149 1243.98 365.205 1248.59 Q368.284 1253.17 368.284 1261.92 Q368.284 1270.65 365.205 1275.25 Q362.149 1279.84 356.339 1279.84 Q350.529 1279.84 347.45 1275.25 Q344.395 1270.65 344.395 1261.92 Q344.395 1253.17 347.45 1248.59 Q350.529 1243.98 356.339 1243.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M290.043 1017.12 L306.363 1017.12 L306.363 1021.06 L284.418 1021.06 L284.418 1017.12 Q287.08 1014.37 291.664 1009.74 Q296.27 1005.08 297.451 1003.74 Q299.696 1001.22 300.576 999.482 Q301.478 997.723 301.478 996.033 Q301.478 993.278 299.534 991.542 Q297.613 989.806 294.511 989.806 Q292.312 989.806 289.858 990.57 Q287.427 991.334 284.65 992.885 L284.65 988.163 Q287.474 987.028 289.927 986.45 Q292.381 985.871 294.418 985.871 Q299.789 985.871 302.983 988.556 Q306.177 991.241 306.177 995.732 Q306.177 997.862 305.367 999.783 Q304.58 1001.68 302.474 1004.27 Q301.895 1004.95 298.793 1008.16 Q295.691 1011.36 290.043 1017.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M316.224 986.496 L334.58 986.496 L334.58 990.431 L320.506 990.431 L320.506 998.903 Q321.524 998.556 322.543 998.394 Q323.562 998.209 324.58 998.209 Q330.367 998.209 333.747 1001.38 Q337.126 1004.55 337.126 1009.97 Q337.126 1015.55 333.654 1018.65 Q330.182 1021.73 323.862 1021.73 Q321.687 1021.73 319.418 1021.36 Q317.173 1020.99 314.765 1020.25 L314.765 1015.55 Q316.849 1016.68 319.071 1017.24 Q321.293 1017.79 323.77 1017.79 Q327.774 1017.79 330.112 1015.69 Q332.45 1013.58 332.45 1009.97 Q332.45 1006.36 330.112 1004.25 Q327.774 1002.14 323.77 1002.14 Q321.895 1002.14 320.02 1002.56 Q318.168 1002.98 316.224 1003.86 L316.224 986.496 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 989.575 Q352.728 989.575 350.899 993.14 Q349.094 996.681 349.094 1003.81 Q349.094 1010.92 350.899 1014.48 Q352.728 1018.02 356.339 1018.02 Q359.973 1018.02 361.779 1014.48 Q363.608 1010.92 363.608 1003.81 Q363.608 996.681 361.779 993.14 Q359.973 989.575 356.339 989.575 M356.339 985.871 Q362.149 985.871 365.205 990.478 Q368.284 995.061 368.284 1003.81 Q368.284 1012.54 365.205 1017.14 Q362.149 1021.73 356.339 1021.73 Q350.529 1021.73 347.45 1017.14 Q344.395 1012.54 344.395 1003.81 Q344.395 995.061 347.45 990.478 Q350.529 985.871 356.339 985.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M286.062 728.387 L304.418 728.387 L304.418 732.322 L290.344 732.322 L290.344 740.794 Q291.363 740.447 292.381 740.285 Q293.4 740.1 294.418 740.1 Q300.205 740.1 303.585 743.271 Q306.964 746.442 306.964 751.859 Q306.964 757.438 303.492 760.539 Q300.02 763.618 293.701 763.618 Q291.525 763.618 289.256 763.248 Q287.011 762.877 284.603 762.137 L284.603 757.438 Q286.687 758.572 288.909 759.127 Q291.131 759.683 293.608 759.683 Q297.613 759.683 299.951 757.576 Q302.288 755.47 302.288 751.859 Q302.288 748.248 299.951 746.141 Q297.613 744.035 293.608 744.035 Q291.733 744.035 289.858 744.451 Q288.006 744.868 286.062 745.748 L286.062 728.387 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M326.177 731.465 Q322.566 731.465 320.737 735.03 Q318.932 738.572 318.932 745.701 Q318.932 752.808 320.737 756.373 Q322.566 759.914 326.177 759.914 Q329.811 759.914 331.617 756.373 Q333.446 752.808 333.446 745.701 Q333.446 738.572 331.617 735.03 Q329.811 731.465 326.177 731.465 M326.177 727.762 Q331.987 727.762 335.043 732.368 Q338.122 736.952 338.122 745.701 Q338.122 754.428 335.043 759.035 Q331.987 763.618 326.177 763.618 Q320.367 763.618 317.288 759.035 Q314.233 754.428 314.233 745.701 Q314.233 736.952 317.288 732.368 Q320.367 727.762 326.177 727.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 731.465 Q352.728 731.465 350.899 735.03 Q349.094 738.572 349.094 745.701 Q349.094 752.808 350.899 756.373 Q352.728 759.914 356.339 759.914 Q359.973 759.914 361.779 756.373 Q363.608 752.808 363.608 745.701 Q363.608 738.572 361.779 735.03 Q359.973 731.465 356.339 731.465 M356.339 727.762 Q362.149 727.762 365.205 732.368 Q368.284 736.952 368.284 745.701 Q368.284 754.428 365.205 759.035 Q362.149 763.618 356.339 763.618 Q350.529 763.618 347.45 759.035 Q344.395 754.428 344.395 745.701 Q344.395 736.952 347.45 732.368 Q350.529 727.762 356.339 727.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M284.835 470.277 L307.057 470.277 L307.057 472.268 L294.511 504.837 L289.627 504.837 L301.432 474.213 L284.835 474.213 L284.835 470.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M316.224 470.277 L334.58 470.277 L334.58 474.213 L320.506 474.213 L320.506 482.685 Q321.524 482.338 322.543 482.175 Q323.562 481.99 324.58 481.99 Q330.367 481.99 333.747 485.162 Q337.126 488.333 337.126 493.75 Q337.126 499.328 333.654 502.43 Q330.182 505.509 323.862 505.509 Q321.687 505.509 319.418 505.138 Q317.173 504.768 314.765 504.027 L314.765 499.328 Q316.849 500.462 319.071 501.018 Q321.293 501.574 323.77 501.574 Q327.774 501.574 330.112 499.467 Q332.45 497.361 332.45 493.75 Q332.45 490.138 330.112 488.032 Q327.774 485.925 323.77 485.925 Q321.895 485.925 320.02 486.342 Q318.168 486.759 316.224 487.638 L316.224 470.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 473.356 Q352.728 473.356 350.899 476.921 Q349.094 480.463 349.094 487.592 Q349.094 494.699 350.899 498.263 Q352.728 501.805 356.339 501.805 Q359.973 501.805 361.779 498.263 Q363.608 494.699 363.608 487.592 Q363.608 480.463 361.779 476.921 Q359.973 473.356 356.339 473.356 M356.339 469.652 Q362.149 469.652 365.205 474.259 Q368.284 478.842 368.284 487.592 Q368.284 496.319 365.205 500.925 Q362.149 505.509 356.339 505.509 Q350.529 505.509 347.45 500.925 Q344.395 496.319 344.395 487.592 Q344.395 478.842 347.45 474.259 Q350.529 469.652 356.339 469.652 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M256.664 242.793 L264.303 242.793 L264.303 216.427 L255.992 218.094 L255.992 213.835 L264.256 212.168 L268.932 212.168 L268.932 242.793 L276.571 242.793 L276.571 246.728 L256.664 246.728 L256.664 242.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M296.015 215.247 Q292.404 215.247 290.576 218.812 Q288.77 222.353 288.77 229.483 Q288.77 236.589 290.576 240.154 Q292.404 243.696 296.015 243.696 Q299.65 243.696 301.455 240.154 Q303.284 236.589 303.284 229.483 Q303.284 222.353 301.455 218.812 Q299.65 215.247 296.015 215.247 M296.015 211.543 Q301.826 211.543 304.881 216.15 Q307.96 220.733 307.96 229.483 Q307.96 238.21 304.881 242.816 Q301.826 247.399 296.015 247.399 Q290.205 247.399 287.127 242.816 Q284.071 238.21 284.071 229.483 Q284.071 220.733 287.127 216.15 Q290.205 211.543 296.015 211.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M326.177 215.247 Q322.566 215.247 320.737 218.812 Q318.932 222.353 318.932 229.483 Q318.932 236.589 320.737 240.154 Q322.566 243.696 326.177 243.696 Q329.811 243.696 331.617 240.154 Q333.446 236.589 333.446 229.483 Q333.446 222.353 331.617 218.812 Q329.811 215.247 326.177 215.247 M326.177 211.543 Q331.987 211.543 335.043 216.15 Q338.122 220.733 338.122 229.483 Q338.122 238.21 335.043 242.816 Q331.987 247.399 326.177 247.399 Q320.367 247.399 317.288 242.816 Q314.233 238.21 314.233 229.483 Q314.233 220.733 317.288 216.15 Q320.367 211.543 326.177 211.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M356.339 215.247 Q352.728 215.247 350.899 218.812 Q349.094 222.353 349.094 229.483 Q349.094 236.589 350.899 240.154 Q352.728 243.696 356.339 243.696 Q359.973 243.696 361.779 240.154 Q363.608 236.589 363.608 229.483 Q363.608 222.353 361.779 218.812 Q359.973 215.247 356.339 215.247 M356.339 211.543 Q362.149 211.543 365.205 216.15 Q368.284 220.733 368.284 229.483 Q368.284 238.21 365.205 242.816 Q362.149 247.399 356.339 247.399 Q350.529 247.399 347.45 242.816 Q344.395 238.21 344.395 229.483 Q344.395 220.733 347.45 216.15 Q350.529 211.543 356.339 211.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip652)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.448 4017.76,229.448 \"/>\n<polyline clip-path=\"url(#clip652)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.29 457.691,1250.07 458.259,1249.76 458.828,1249.4 459.396,1247.92 459.964,1247.42 460.533,1246.88 461.101,1246.23 461.669,1244.49 462.238,1243.7 462.806,1242.82 463.375,1241.88 463.943,1240.79 464.511,1238.62 465.08,1236.35 465.648,1235.02 466.216,1232.51 466.785,1229.89 467.353,1228.23 467.921,1226.42 468.49,1224.51 469.058,1222.42 469.626,1220.21 470.195,1217.84 470.763,1214.24 471.331,1211.54 471.9,1208.73 472.468,1205.7 473.036,1202.42 473.605,1199 474.173,1194.38 474.741,1190.58 475.31,1186.58 475.878,1182.41 476.446,1175.85 477.015,1171.1 477.583,1165.18 478.152,1160.03 478.72,1152.6 479.288,1146.95 479.857,1140.09 480.425,1131.95 480.993,1123.62 481.562,1117.15 482.13,1110.52 482.698,1102.62 483.267,1094.56 483.835,1086.36 484.403,1078.97 484.972,1071.48 485.54,1062.68 486.108,1054.69 486.677,1044.53 487.245,1036.2 487.813,1027.68 488.382,1017.88 488.95,1007.08 489.518,998.105 490.087,988.031 490.655,975.82 491.224,966.353 491.792,956.908 492.36,946.291 492.929,935.655 493.497,923.815 494.065,913.002 494.634,902.215 495.202,892.288 495.77,882.346 496.339,869.297 496.907,859.35 497.475,847.426 498.044,835.447 498.612,822.406 499.18,812.815 499.749,800.033 500.317,787.544 500.885,778.431 501.454,768.009 502.022,758.763 502.59,748.486 503.159,739.303 503.727,727.075 504.295,716.089 504.864,706.305 505.432,694.566 506.001,686.109 506.569,676.488 507.137,667.077 507.706,657.738 508.274,649.74 508.842,639.598 509.411,630.691 509.979,618.786 510.547,611.346 511.116,602.892 511.684,595.527 512.252,585.266 512.821,577.261 513.389,570.378 513.957,561.545 514.526,551.856 515.094,543.297 515.662,535.956 516.231,527.628 516.799,521.67 517.367,513.64 517.936,507.917 518.504,502.065 519.072,494.433 519.641,488.171 520.209,482.837 520.778,475.516 521.346,468.431 521.914,462.582 522.483,455.585 523.051,447.962 523.619,443.458 524.188,438.211 524.756,431.86 525.324,426.623 525.893,420.721 526.461,415.733 527.029,413.083 527.598,407.21 528.166,403.442 528.734,395.918 529.303,391.579 529.871,387.424 530.439,382.245 531.008,376.568 531.576,373.702 532.144,366.798 532.713,363.492 533.281,361.192 533.85,360.041 534.418,357.664 534.986,356.234 535.555,352.859 536.123,350.62 536.691,349.422 537.26,346.153 537.828,342.889 538.396,340.962 538.965,336.93 539.533,332.989 540.101,331.265 540.67,328.377 541.238,324.401 541.806,321.502 542.375,320.065 542.943,317.628 543.511,315.196 544.08,311.742 544.648,310.506 545.216,310.354 545.785,308.035 546.353,307.882 546.921,306.658 547.49,305.363 548.058,302.926 548.627,301.928 549.195,299.576 549.763,297.602 550.332,296.661 550.9,294.63 551.468,293.706 552.037,291.41 552.605,290.388 553.173,285.352 553.742,283.839 554.31,283.377 554.878,281.794 555.447,280.245 556.015,279.834 556.583,277.355 557.152,275.772 557.72,275.481 558.288,275.033 558.857,274.451 559.425,274.136 559.993,272.597 560.562,273.172 561.13,271.697 561.698,271.31 562.267,269.966 562.835,269.444 563.404,268.221 563.972,268.881 564.54,267.489 565.109,268.178 565.677,265.702 566.245,266.394 566.814,263.941 567.382,262.99 567.95,260.596 568.519,259.401 569.087,260.223 569.655,258.957 570.224,260.846 570.792,260.469 571.36,260.418 571.929,258.262 572.497,258.032 573.065,259.001 573.634,255.925 574.202,253.792 574.77,253.001 575.339,251.232 575.907,250.661 576.476,250.911 577.044,246.859 577.612,247.353 578.181,247.886 578.749,248.291 579.317,247.692 579.886,246.955 580.454,245.429 581.022,245.009 581.591,246.658 582.159,245.933 582.727,245.589 583.296,244.778 583.864,245.278 584.432,245.92 585.001,245.272 585.569,242.454 586.137,238.892 586.706,240.766 587.274,243.61 587.842,245.135 588.411,245.511 588.979,244.906 589.547,246.363 590.116,246.728 590.684,246.922 591.253,248.145 591.821,246.287 592.389,246.293 592.958,245.583 593.526,246.989 594.094,247.155 594.663,248.178 595.231,248.197 595.799,248.278 596.368,248.391 596.936,249.68 597.504,248.342 598.073,247.061 598.641,248.063 599.209,248.99 599.778,246.894 600.346,244.805 600.914,243.902 601.483,246.078 602.051,245.093 602.619,243.969 603.188,241.843 603.756,239.939 604.325,240.537 604.893,240.754 605.461,239.155 606.03,238.615 606.598,239.106 607.166,237.5 607.735,236.219 608.303,237.843 608.871,238.121 609.44,241.538 610.008,239.536 610.576,239.815 611.145,238.976 611.713,237.994 612.281,237.412 612.85,240.214 613.418,238.279 613.986,237.668 614.555,237.981 615.123,237.539 615.691,237.778 616.26,239.047 616.828,239.088 617.396,240.369 617.965,239.759 618.533,236.858 619.102,236.32 619.67,240.149 620.238,239.415 620.807,240.259 621.375,239.353 621.943,239.604 622.512,239.628 623.08,238.768 623.648,239.018 624.217,237.136 624.785,237.371 625.353,238.889 625.922,240.142 626.49,241.286 627.058,241.373 627.627,242.451 628.195,241.464 628.763,241.275 629.332,242.245 629.9,238.194 630.468,238.188 631.037,237.425 631.605,238.8 632.173,239.893 632.742,238.701 633.31,239.785 633.879,240.945 634.447,241.963 635.015,240.519 635.584,240.355 636.152,240.919 636.72,241.628 637.289,241.424 637.857,239.153 638.425,237.064 638.994,237.171 639.562,235.258 640.13,234.421 640.699,233.567 641.267,234.81 641.835,234.002 642.404,233.159 642.972,235.538 643.54,234.159 644.109,234.286 644.677,234.307 645.245,238.744 645.814,237.592 646.382,238.737 646.951,239.035 647.519,240.976 648.087,239.687 648.656,238.312 649.224,237.342 649.792,237.373 650.361,237.516 650.929,235.42 651.497,237.33 652.066,237.608 652.634,239.741 653.202,238.728 653.771,237.466 654.339,237.399 654.907,237.367 655.476,236.199 656.044,236.117 656.612,234.874 657.181,235.908 657.749,235.023 658.317,235.124 658.886,235.166 659.454,234.362 660.022,235.4 660.591,233.484 661.159,234.596 661.728,234.742 662.296,234.824 662.864,232.787 663.433,232.843 664.001,232.145 664.569,232.452 665.138,234.776 665.706,233.71 666.274,233.821 666.843,235.846 667.411,236.871 667.979,236.725 668.548,233.604 669.116,233.736 669.684,235.104 670.253,234.234 670.821,234.479 671.389,235.508 671.958,234.453 672.526,233.562 673.094,233.477 673.663,234.595 674.231,233.81 674.799,231.9 675.368,233.13 675.936,233.137 676.505,234.105 677.073,237.155 677.641,237.04 678.21,236.728 678.778,236.529 679.346,233.144 679.915,230.91 680.483,233.04 681.051,233.39 681.62,233.372 682.188,234.478 682.756,234.371 683.325,233.409 683.893,233.333 684.461,232.491 685.03,232.463 685.598,231.513 686.166,234.626 686.735,234.495 687.303,234.382 687.871,234.393 688.44,234.439 689.008,235.368 689.577,235.188 690.145,236.159 690.713,237.036 691.282,234.872 691.85,235.954 692.418,236.589 692.987,234.369 693.555,234.368 694.123,234.399 694.692,234.383 695.26,234.089 695.828,234.185 696.397,232.244 696.965,230.029 697.533,230.087 698.102,229.259 698.67,228.544 699.238,228.864 699.807,231.159 700.375,231.363 700.943,229.4 701.512,228.635 702.08,231.807 702.648,232.688 703.217,232.662 703.785,229.644 704.354,231.955 704.922,233.996 705.49,233.826 706.059,232.622 706.627,233.705 707.195,232.666 707.764,231.919 708.332,232.882 708.9,229.734 709.469,230.021 710.037,229.14 710.605,228.286 711.174,229.806 711.742,230.032 712.31,230.309 712.879,230.316 713.447,228.615 714.015,230.005 714.584,230.342 715.152,231.581 715.72,232.849 716.289,233.714 716.857,231.781 717.425,231.082 717.994,231.251 718.562,232.304 719.131,233.395 719.699,233.413 720.267,236.571 720.836,236.33 721.404,237.964 721.972,237.453 722.541,236.992 723.109,236.635 723.677,234.36 724.246,234.364 724.814,233.13 725.382,233.086 725.951,232.042 726.519,230.821 727.087,231.876 727.656,232.795 728.224,231.715 728.792,233.673 729.361,233.282 729.929,231.072 730.497,228.977 731.066,228.182 731.634,228.35 732.203,230.686 732.771,229.916 733.339,230.149 733.908,230.554 734.476,229.586 735.044,230.5 735.613,230.763 736.181,230.679 736.749,229.846 737.318,229.964 737.886,228.875 738.454,229.173 739.023,228.294 739.591,229.844 740.159,228.957 740.728,228.182 741.296,227.423 741.864,227.708 742.433,226.918 743.001,227.15 743.569,228.343 744.138,229.678 744.706,227.871 745.274,229.128 745.843,227.217 746.411,227.677 746.98,228.958 747.548,230.31 748.116,229.317 748.685,230.594 749.253,230.678 749.821,229.583 750.39,231.012 750.958,234.205 751.526,234.155 752.095,235.149 752.663,234.98 753.231,233.758 753.8,233.675 754.368,233.671 754.936,232.666 755.505,232.582 756.073,228.407 756.641,226.693 757.21,227.79 757.778,228.208 758.346,229.369 758.915,228.525 759.483,230.954 760.052,229.995 760.62,231.209 761.188,231.156 761.757,230.326 762.325,231.63 762.893,230.731 763.462,229.804 764.03,230.253 764.598,229.324 765.167,229.676 765.735,228.773 766.303,228.985 766.872,229.165 767.44,229.488 768.008,229.699 768.577,228.988 769.145,227.125 769.713,225.404 770.282,225.812 770.85,226.284 771.418,224.761 771.987,224.402 772.555,225.976 773.123,226.563 773.692,227.026 774.26,228.584 774.829,229.124 775.397,229.43 775.965,227.451 776.534,227.759 777.102,228.127 777.67,228.402 778.239,227.631 778.807,228.185 779.375,229.577 779.944,229.022 780.512,230.237 781.08,231.579 781.649,231.575 782.217,230.46 782.785,227.574 783.354,227.972 783.922,228.345 784.49,227.743 785.059,227.181 785.627,230.694 786.195,230.862 786.764,229.945 787.332,231.29 787.9,230.631 788.469,229.524 789.037,229.828 789.606,230.128 790.174,230.303 790.742,229.345 791.311,228.566 791.879,228.794 792.447,231.164 793.016,233.415 793.584,233.291 794.152,232.143 794.721,233.306 795.289,232.395 795.857,230.541 796.426,233.02 796.994,230.873 797.562,232.024 798.131,236.28 798.699,237.026 799.267,236.968 799.836,238.661 800.404,238.423 800.972,242.261 801.541,241.54 802.109,242.104 802.678,237.326 803.246,238.878 803.814,237.26 804.383,235.769 804.951,233.547 805.519,234.182 806.088,231.839 806.656,230.737 807.224,230.641 807.793,230.579 808.361,231.486 808.929,229.34 809.498,227.389 810.066,225.782 810.634,225.128 811.203,226.514 811.771,227.92 812.339,227.91 812.908,226.949 813.476,226.242 814.044,225.612 814.613,225.84 815.181,226.12 815.749,230.602 816.318,231.858 816.886,233.122 817.455,233.19 818.023,232.922 818.591,233.893 819.16,232.559 819.728,231.647 820.296,230.725 820.865,228.832 821.433,229.221 822.001,229.305 822.57,229.386 823.138,231.802 823.706,230.831 824.275,232.049 824.843,229.99 825.411,231.067 825.98,232.145 826.548,231.166 827.116,230.236 827.685,229.533 828.253,229.531 828.821,229.888 829.39,230.96 829.958,234.122 830.526,235.021 831.095,234.651 831.663,234.403 832.232,234.105 832.8,234.749 833.368,233.473 833.937,231.47 834.505,231.336 835.073,232.476 835.642,235.493 836.21,233.866 836.778,234.628 837.347,235.401 837.915,233.987 838.483,236.636 839.052,236.193 839.62,237.023 840.188,235.331 840.757,234.131 841.325,234.847 841.893,233.481 842.462,235.255 843.03,234.949 843.598,234.764 844.167,234.36 844.735,236.185 845.304,235.616 845.872,234.276 846.44,232.981 847.009,233.8 847.577,234.691 848.145,234.201 848.714,231.812 849.282,231.619 849.85,231.37 850.419,228.219 850.987,227.355 851.555,229.482 852.124,231.388 852.692,231.196 853.26,230.126 853.829,230.059 854.397,229.003 854.965,230.09 855.534,228.997 856.102,227.894 856.67,227.946 857.239,229.064 857.807,229.192 858.375,230.259 858.944,230.214 859.512,229.966 860.081,232.926 860.649,232.459 861.217,232.315 861.786,232.022 862.354,229.893 862.922,228.963 863.491,230.076 864.059,228.882 864.627,228.932 865.196,228.777 865.764,226.725 866.332,228.112 866.901,227.047 867.469,226.458 868.037,225.673 868.606,222.707 869.174,223.954 869.742,225.331 870.311,225.613 870.879,225.947 871.447,224.162 872.016,224.508 872.584,225.919 873.152,225.06 873.721,227.329 874.289,225.404 874.858,226.859 875.426,228.061 875.994,227.153 876.563,227.454 877.131,229.774 877.699,229.794 878.268,229.649 878.836,230.959 879.404,231.078 879.973,232.129 880.541,233.163 881.109,234.957 881.678,233.546 882.246,231.281 882.814,227.171 883.383,227.225 883.951,226.387 884.519,227.838 885.088,229.953 885.656,229.998 886.224,230.131 886.793,229.43 887.361,230.688 887.93,229.666 888.498,229.615 889.066,230.532 889.635,229.711 890.203,230.745 890.771,230.691 891.34,229.554 891.908,228.464 892.476,230.4 893.045,229.477 893.613,224.353 894.181,227.711 894.75,227.932 895.318,228.431 895.886,226.487 896.455,227.82 897.023,227.861 897.591,227.947 898.16,226.722 898.728,226.765 899.296,227.927 899.865,229.29 900.433,230.326 901.001,230.194 901.57,230.041 902.138,228.956 902.707,228.03 903.275,227.138 903.843,226.197 904.412,228.578 904.98,227.608 905.548,228.932 906.117,226.875 906.685,227.19 907.253,224.151 907.822,224.588 908.39,223.894 908.958,225.378 909.527,224.944 910.095,225.631 910.663,227.944 911.232,226.174 911.8,225.27 912.368,227.742 912.937,229.085 913.505,231.07 914.073,229.925 914.642,231.086 915.21,232.001 915.779,232.044 916.347,231.038 916.915,232.27 917.484,232.312 918.052,234.568 918.62,233.272 919.189,234.245 919.757,234.009 920.325,234.814 920.894,231.542 921.462,230.456 922.03,230.482 922.599,230.533 923.167,228.589 923.735,228.563 924.304,227.873 924.872,227.094 925.44,229.386 926.009,228.371 926.577,228.706 927.145,228.781 927.714,230.001 928.282,229.046 928.85,227.285 929.419,229.545 929.987,230.814 930.556,228.956 931.124,227.931 931.692,228.155 932.261,229.307 932.829,230.621 933.397,232.709 933.966,232.722 934.534,234.692 935.102,230.19 935.671,228.37 936.239,229.381 936.807,229.438 937.376,228.369 937.944,229.474 938.512,228.53 939.081,227.729 939.649,225.893 940.217,228.3 940.786,228.323 941.354,227.555 941.922,226.823 942.491,227.071 943.059,228.605 943.627,228.915 944.196,228.107 944.764,229.306 945.333,229.336 945.901,227.709 946.469,229.987 947.038,230.991 947.606,232.238 948.174,230.134 948.743,229.15 949.311,231.434 949.879,232.76 950.448,232.522 951.016,229.324 951.584,230.586 952.153,231.628 952.721,232.745 953.289,231.447 953.858,231.61 954.426,234.432 954.994,234.386 955.563,231.846 956.131,232.799 956.699,230.591 957.268,229.53 957.836,229.574 958.405,231.711 958.973,232.716 959.541,231.568 960.11,231.48 960.678,233.416 961.246,233.192 961.815,232.974 962.383,230.832 962.951,232.875 963.52,234.815 964.088,234.522 964.656,231.047 965.225,228.942 965.793,230.997 966.361,232.885 966.93,233.825 967.498,234.46 968.066,233.959 968.635,232.548 969.203,230.239 969.771,229.023 970.34,227.89 970.908,226.985 971.476,227.023 972.045,226.132 972.613,229.468 973.182,230.385 973.75,230.447 974.318,230.406 974.887,232.449 975.455,232.293 976.023,233.105 976.592,233.07 977.16,232.814 977.728,232.473 978.297,233.368 978.865,234.216 979.433,234.87 980.002,233.339 980.57,234.04 981.138,233.735 981.707,233.459 982.275,233.032 982.843,232.613 983.412,233.288 983.98,232.868 984.548,232.578 985.117,233.549 985.685,234.301 986.253,234.956 986.822,235.684 987.39,234.253 987.959,232.817 988.527,234.573 989.095,235.385 989.664,233.842 990.232,232.38 990.8,233.957 991.369,233.65 991.937,232.197 992.505,231.92 993.074,230.296 993.642,229.36 994.21,228.158 994.779,226.915 995.347,227.049 995.915,226.051 996.484,226.352 997.052,227.583 997.62,228.548 998.189,230.355 998.757,230.109 999.325,228.05 999.894,228 1000.46,230.005 1001.03,229.655 1001.6,229.832 1002.17,229.65 1002.74,229.462 1003.3,229.502 1003.87,229.437 1004.44,229.18 1005.01,228.998 1005.58,228.001 1006.15,227.037 1006.71,226.11 1007.28,228.489 1007.85,228.26 1008.42,226.181 1008.99,227.354 1009.56,228.386 1010.12,227.405 1010.69,227.287 1011.26,227.375 1011.83,227.653 1012.4,227.845 1012.97,230.759 1013.53,230.653 1014.1,231.578 1014.67,231.567 1015.24,232.209 1015.81,232.962 1016.38,233.906 1016.94,234.35 1017.51,231.921 1018.08,231.751 1018.65,228.431 1019.22,230.448 1019.79,229.084 1020.35,233.071 1020.92,231.773 1021.49,231.556 1022.06,232.312 1022.63,230.127 1023.2,230.878 1023.76,232.821 1024.33,231.486 1024.9,230.112 1025.47,234.142 1026.04,232.672 1026.61,234.56 1027.17,237.062 1027.74,235.196 1028.31,235.762 1028.88,235.274 1029.45,232.926 1030.02,234.646 1030.58,231.996 1031.15,231.811 1031.72,229.459 1032.29,228.108 1032.86,225.989 1033.43,224.048 1033.99,225.347 1034.56,225.356 1035.13,225.425 1035.7,225.615 1036.27,224.927 1036.84,224.069 1037.4,223.19 1037.97,221.428 1038.54,221.685 1039.11,223.088 1039.68,223.439 1040.25,223.673 1040.81,225.065 1041.38,224.275 1041.95,222.524 1042.52,223.159 1043.09,222.329 1043.66,222.957 1044.22,223.333 1044.79,223.764 1045.36,223.08 1045.93,221.527 1046.5,224.158 1047.07,228.71 1047.63,229.523 1048.2,229.591 1048.77,226.567 1049.34,227.672 1049.91,227.869 1050.48,227.992 1051.05,228.198 1051.61,227.302 1052.18,225.367 1052.75,223.832 1053.32,224.147 1053.89,222.615 1054.46,223.221 1055.02,222.548 1055.59,221.789 1056.16,224.495 1056.73,224.998 1057.3,225.403 1057.87,224.915 1058.43,225.303 1059,223.877 1059.57,226.505 1060.14,226.828 1060.71,227.935 1061.28,230.266 1061.84,230.222 1062.41,232.465 1062.98,232.626 1063.55,232.53 1064.12,232.475 1064.69,233.313 1065.25,229.056 1065.82,227.013 1066.39,232.377 1066.96,232.357 1067.53,234.376 1068.1,232.333 1068.66,231.157 1069.23,232.124 1069.8,229.982 1070.37,230.059 1070.94,232.209 1071.51,233.089 1072.07,234.878 1072.64,230.592 1073.21,230.381 1073.78,229.39 1074.35,230.332 1074.92,231.475 1075.48,230.173 1076.05,232.03 1076.62,231.966 1077.19,229.946 1077.76,227.903 1078.33,226.238 1078.89,223.53 1079.46,224.275 1080.03,226.626 1080.6,227.82 1081.17,228.067 1081.74,228.017 1082.3,226.37 1082.87,225.588 1083.44,226.822 1084.01,226.196 1084.58,226.444 1085.15,226.774 1085.71,228.105 1086.28,229.271 1086.85,229.164 1087.42,228.352 1087.99,228.61 1088.56,228.805 1089.12,230.127 1089.69,229.119 1090.26,227.912 1090.83,229.207 1091.4,229.253 1091.97,228.423 1092.53,230.482 1093.1,230.351 1093.67,230.625 1094.24,229.775 1094.81,231.876 1095.38,231.642 1095.94,232.59 1096.51,229.499 1097.08,230.773 1097.65,230.762 1098.22,234.842 1098.79,233.569 1099.35,233.196 1099.92,234.135 1100.49,233.925 1101.06,234.7 1101.63,234.492 1102.2,235.205 1102.76,233.738 1103.33,236.488 1103.9,235.191 1104.47,236.001 1105.04,235.397 1105.61,232.887 1106.17,229.559 1106.74,229.664 1107.31,226.619 1107.88,227.978 1108.45,226.941 1109.02,226.99 1109.58,224.121 1110.15,223.35 1110.72,224.8 1111.29,226.376 1111.86,226.7 1112.43,226.888 1112.99,228.479 1113.56,230.481 1114.13,230.372 1114.7,228.351 1115.27,227.357 1115.84,229.778 1116.4,230.773 1116.97,229.707 1117.54,231.844 1118.11,230.62 1118.68,229.623 1119.25,228.735 1119.81,226.891 1120.38,229.33 1120.95,229.323 1121.52,227.414 1122.09,228.66 1122.66,230.957 1123.23,230.935 1123.79,233.813 1124.36,230.577 1124.93,230.409 1125.5,231.341 1126.07,231.243 1126.64,231.054 1127.2,232.19 1127.77,230.973 1128.34,230.878 1128.91,229.837 1129.48,228.899 1130.05,230.053 1130.61,226.034 1131.18,226.164 1131.75,227.45 1132.32,227.654 1132.89,227.688 1133.46,227.722 1134.02,229.974 1134.59,228.735 1135.16,228.948 1135.73,227.944 1136.3,228.97 1136.87,229.966 1137.43,227.933 1138,227.199 1138.57,229.433 1139.14,232.336 1139.71,230.184 1140.28,229.146 1140.84,230.348 1141.41,228.225 1141.98,230.364 1142.55,231.16 1143.12,233.101 1143.69,230.842 1144.25,229.831 1144.82,230.694 1145.39,231.777 1145.96,233.924 1146.53,233.867 1147.1,235.725 1147.66,233.354 1148.23,233.088 1148.8,234.794 1149.37,234.287 1149.94,233.038 1150.51,231.909 1151.07,230.871 1151.64,231.664 1152.21,231.433 1152.78,229.134 1153.35,228.151 1153.92,226.039 1154.48,225.284 1155.05,225.566 1155.62,225.864 1156.19,227.265 1156.76,230.278 1157.33,231.117 1157.89,226.892 1158.46,227.279 1159.03,229.37 1159.6,227.571 1160.17,227.723 1160.74,228.012 1161.3,229.175 1161.87,228.424 1162.44,225.436 1163.01,228.036 1163.58,229.135 1164.15,230.284 1164.71,230.044 1165.28,228.815 1165.85,229.035 1166.42,226.978 1166.99,227.293 1167.56,229.331 1168.12,230.458 1168.69,231.588 1169.26,228.54 1169.83,230.429 1170.4,230.211 1170.97,228.851 1171.53,230.007 1172.1,231.304 1172.67,232.105 1173.24,230.042 1173.81,230.895 1174.38,229.689 1174.94,230.721 1175.51,230.605 1176.08,230.404 1176.65,232.393 1177.22,233.039 1177.79,233.841 1178.35,231.427 1178.92,231.22 1179.49,232.146 1180.06,232.986 1180.63,233.775 1181.2,231.444 1181.76,232.338 1182.33,232.143 1182.9,230.073 1183.47,228.938 1184.04,230.171 1184.61,228.118 1185.17,228.125 1185.74,228.271 1186.31,228.337 1186.88,227.377 1187.45,227.49 1188.02,228.621 1188.58,228.606 1189.15,229.575 1189.72,230.474 1190.29,230.377 1190.86,230.345 1191.43,229.172 1192,228.284 1192.56,229.504 1193.13,229.317 1193.7,232.522 1194.27,234.531 1194.84,233.053 1195.41,232.864 1195.97,233.425 1196.54,233.057 1197.11,232.862 1197.68,231.487 1198.25,231.388 1198.82,233.324 1199.38,231.916 1199.95,230.868 1200.52,229.599 1201.09,228.47 1201.66,229.317 1202.23,230.491 1202.79,229.48 1203.36,228.382 1203.93,228.458 1204.5,229.581 1205.07,229.591 1205.64,229.65 1206.2,228.712 1206.77,226.619 1207.34,225.813 1207.91,227.993 1208.48,228.122 1209.05,228.164 1209.61,229.528 1210.18,229.592 1210.75,229.638 1211.32,230.499 1211.89,229.33 1212.46,228.465 1213.02,226.531 1213.59,226.845 1214.16,226.041 1214.73,226.16 1215.3,226.279 1215.87,228.522 1216.43,228.883 1217,228.989 1217.57,231.09 1218.14,233.046 1218.71,232.611 1219.28,234.396 1219.84,235.086 1220.41,232.622 1220.98,233.142 1221.55,232.82 1222.12,232.595 1222.69,230.612 1223.25,231.479 1223.82,229.219 1224.39,231.148 1224.96,231.128 1225.53,232.874 1226.1,231.571 1226.66,229.122 1227.23,230.045 1227.8,230.02 1228.37,228.935 1228.94,232.08 1229.51,231.973 1230.07,231.704 1230.64,230.342 1231.21,231.438 1231.78,232.174 1232.35,230.862 1232.92,230.518 1233.48,230.506 1234.05,230.377 1234.62,230.072 1235.19,228.924 1235.76,227.823 1236.33,229.778 1236.89,229.53 1237.46,228.336 1238.03,228.288 1238.6,227.365 1239.17,228.67 1239.74,230.662 1240.3,229.144 1240.87,227.997 1241.44,229.212 1242.01,230.228 1242.58,229.004 1243.15,227.825 1243.71,229.169 1244.28,228.076 1244.85,230.181 1245.42,230.034 1245.99,230.903 1246.56,231.817 1247.12,231.629 1247.69,230.342 1248.26,230.231 1248.83,230.145 1249.4,231.135 1249.97,231.948 1250.53,229.51 1251.1,230.453 1251.67,229.231 1252.24,230.374 1252.81,230.461 1253.38,230.494 1253.94,229.251 1254.51,229.212 1255.08,227.293 1255.65,225.309 1256.22,224.615 1256.79,224.953 1257.35,226.291 1257.92,227.482 1258.49,224.718 1259.06,225.918 1259.63,226.095 1260.2,226.134 1260.76,226.621 1261.33,227.689 1261.9,229.722 1262.47,228.703 1263.04,227.594 1263.61,226.726 1264.18,226.86 1264.74,227.902 1265.31,227.982 1265.88,226.036 1266.45,227.437 1267.02,226.644 1267.59,227.932 1268.15,227 1268.72,228.187 1269.29,230.217 1269.86,230.081 1270.43,229.954 1271,229.714 1271.56,230.715 1272.13,230.376 1272.7,232.354 1273.27,232.964 1273.84,233.673 1274.41,233.346 1274.97,234.031 1275.54,233.807 1276.11,232.742 1276.68,232.446 1277.25,233.133 1277.82,232.793 1278.38,231.396 1278.95,230.268 1279.52,231.081 1280.09,231.019 1280.66,231.863 1281.23,231.602 1281.79,231.183 1282.36,232.009 1282.93,230.746 1283.5,231.357 1284.07,231.429 1284.64,230.138 1285.2,229.93 1285.77,228.745 1286.34,228.737 1286.91,228.602 1287.48,227.486 1288.05,227.513 1288.61,229.774 1289.18,229.769 1289.75,226.799 1290.32,225.962 1290.89,227.246 1291.46,228.282 1292.02,229.203 1292.59,230.033 1293.16,229.983 1293.73,229.962 1294.3,230.044 1294.87,229.765 1295.43,229.548 1296,227.363 1296.57,228.571 1297.14,227.522 1297.71,227.813 1298.28,227.074 1298.84,225.186 1299.41,225.349 1299.98,226.762 1300.55,225.87 1301.12,225.08 1301.69,225.33 1302.25,226.384 1302.82,226.648 1303.39,226.902 1303.96,226.947 1304.53,229.189 1305.1,229.111 1305.66,229.237 1306.23,229.149 1306.8,227.278 1307.37,225.151 1307.94,225.438 1308.51,225.89 1309.07,227.109 1309.64,226.345 1310.21,226.536 1310.78,227.786 1311.35,226.72 1311.92,228.021 1312.48,229.321 1313.05,228.334 1313.62,227.561 1314.19,226.48 1314.76,225.615 1315.33,224.909 1315.89,227.296 1316.46,228.408 1317.03,226.604 1317.6,226.773 1318.17,232.139 1318.74,230.837 1319.3,230.734 1319.87,232.978 1320.44,231.693 1321.01,233.739 1321.58,233.328 1322.15,233.036 1322.71,232.697 1323.28,233.768 1323.85,233.583 1324.42,232.217 1324.99,228.863 1325.56,226.865 1326.12,227.011 1326.69,228.075 1327.26,228.152 1327.83,226.18 1328.4,228.268 1328.97,228.413 1329.53,227.676 1330.1,228.884 1330.67,228.819 1331.24,229.848 1331.81,229.985 1332.38,229.847 1332.94,228.995 1333.51,230.054 1334.08,230.158 1334.65,230.945 1335.22,229.768 1335.79,229.775 1336.36,228.853 1336.92,227.902 1337.49,229.174 1338.06,228.261 1338.63,226.244 1339.2,225.422 1339.77,223.502 1340.33,222.754 1340.9,222.131 1341.47,222.807 1342.04,223.318 1342.61,224.841 1343.18,225.292 1343.74,226.502 1344.31,229.071 1344.88,230.27 1345.45,230.363 1346.02,229.13 1346.59,229.254 1347.15,229.451 1347.72,227.563 1348.29,228.738 1348.86,227.779 1349.43,226.011 1350,226.414 1350.56,225.705 1351.13,226.227 1351.7,224.505 1352.27,221.881 1352.84,223.548 1353.41,223.29 1353.97,226.944 1354.54,226.273 1355.11,228.603 1355.68,228.839 1356.25,229.932 1356.82,227.826 1357.38,227.091 1357.95,227.354 1358.52,226.427 1359.09,227.194 1359.66,227.351 1360.23,229.644 1360.79,230.052 1361.36,231.278 1361.93,231.378 1362.5,232.479 1363.07,232.527 1363.64,233.511 1364.2,233.495 1364.77,233.241 1365.34,232.028 1365.91,232.121 1366.48,232.911 1367.05,231.759 1367.61,234.92 1368.18,236.615 1368.75,236.257 1369.32,234.861 1369.89,235.596 1370.46,232.995 1371.02,231.747 1371.59,231.955 1372.16,232.76 1372.73,232.837 1373.3,233.629 1373.87,232.438 1374.43,230.191 1375,231.335 1375.57,233.35 1376.14,232.998 1376.71,233.709 1377.28,233.468 1377.84,235.268 1378.41,235.495 1378.98,237.089 1379.55,237.725 1380.12,235.923 1380.69,236.661 1381.25,238.037 1381.82,236.121 1382.39,235.737 1382.96,234.109 1383.53,234.719 1384.1,231.32 1384.66,230.159 1385.23,230.154 1385.8,227.914 1386.37,226.763 1386.94,226.888 1387.51,224.807 1388.07,224.862 1388.64,224.09 1389.21,225.365 1389.78,227.795 1390.35,228.945 1390.92,227.845 1391.48,228.045 1392.05,228.324 1392.62,224.397 1393.19,225.567 1393.76,227.039 1394.33,226.005 1394.89,227.105 1395.46,224.019 1396.03,225.474 1396.6,225.778 1397.17,226.886 1397.74,227.979 1398.3,225.861 1398.87,224.006 1399.44,225.219 1400.01,223.156 1400.58,225.523 1401.15,227.691 1401.71,228.79 1402.28,228.976 1402.85,228.032 1403.42,228.142 1403.99,226.215 1404.56,225.393 1405.13,228.968 1405.69,230.127 1406.26,233.366 1406.83,232.107 1407.4,231.897 1407.97,231.713 1408.54,230.683 1409.1,229.565 1409.67,229.434 1410.24,229.371 1410.81,229.462 1411.38,228.588 1411.95,231.78 1412.51,232.828 1413.08,233.735 1413.65,233.3 1414.22,233.109 1414.79,230.709 1415.36,230.752 1415.92,231.531 1416.49,232.5 1417.06,232.256 1417.63,231.188 1418.2,232.095 1418.77,231.857 1419.33,232.747 1419.9,231.636 1420.47,232.341 1421.04,231.078 1421.61,233.043 1422.18,231.764 1422.74,233.706 1423.31,234.645 1423.88,233.082 1424.45,233.762 1425.02,233.385 1425.59,230.986 1426.15,231.847 1426.72,232.866 1427.29,232.53 1427.86,232.22 1428.43,230.042 1429,230.034 1429.56,229.855 1430.13,232.728 1430.7,233.545 1431.27,233.233 1431.84,230.833 1432.41,231.717 1432.97,231.351 1433.54,230.046 1434.11,227.636 1434.68,230.669 1435.25,230.504 1435.82,233.564 1436.38,234.213 1436.95,233.822 1437.52,234.402 1438.09,233.823 1438.66,233.604 1439.23,232.051 1439.79,232.736 1440.36,232.326 1440.93,232.203 1441.5,229.888 1442.07,231.799 1442.64,232.403 1443.2,234.123 1443.77,233.672 1444.34,232.166 1444.91,228.828 1445.48,230.482 1446.05,229.166 1446.61,229.139 1447.18,230.057 1447.75,228.779 1448.32,228.52 1448.89,229.442 1449.46,228.241 1450.02,227.328 1450.59,227.574 1451.16,226.647 1451.73,226.539 1452.3,225.711 1452.87,226.63 1453.43,227.675 1454,227.707 1454.57,228.923 1455.14,227.912 1455.71,227.942 1456.28,227.979 1456.84,227.827 1457.41,228.892 1457.98,229.021 1458.55,229.014 1459.12,226.932 1459.69,226.123 1460.25,227.437 1460.82,226.346 1461.39,225.679 1461.96,225.71 1462.53,224.811 1463.1,221.814 1463.66,220.179 1464.23,221.778 1464.8,222.259 1465.37,224.819 1465.94,225.027 1466.51,226.328 1467.07,224.272 1467.64,225.833 1468.21,226.063 1468.78,225.204 1469.35,226.275 1469.92,227.452 1470.48,227.707 1471.05,227.825 1471.62,227.771 1472.19,228.737 1472.76,229.607 1473.33,230.62 1473.89,231.529 1474.46,230.41 1475.03,230.365 1475.6,230.404 1476.17,227.178 1476.74,227.581 1477.31,227.73 1477.87,226.849 1478.44,227.871 1479.01,228.083 1479.58,228.333 1480.15,228.208 1480.72,227.298 1481.28,226.333 1481.85,226.326 1482.42,226.688 1482.99,227.105 1483.56,228.346 1484.13,229.592 1484.69,228.62 1485.26,228.893 1485.83,230.184 1486.4,231.218 1486.97,230.782 1487.54,231.778 1488.1,232.639 1488.67,230.43 1489.24,231.332 1489.81,230.157 1490.38,229.992 1490.95,230.099 1491.51,229.953 1492.08,229.742 1492.65,227.736 1493.22,225.851 1493.79,227.053 1494.36,228.319 1494.92,231.144 1495.49,230.981 1496.06,229.656 1496.63,230.617 1497.2,229.566 1497.77,231.525 1498.33,230.283 1498.9,230.217 1499.47,231.142 1500.04,229.961 1500.61,231.061 1501.18,230.134 1501.74,230.247 1502.31,231.209 1502.88,230.18 1503.45,229.114 1504.02,229.387 1504.59,231.393 1505.15,231.351 1505.72,230.209 1506.29,228.179 1506.86,229.307 1507.43,229.521 1508,230.769 1508.56,230.884 1509.13,229.901 1509.7,229.612 1510.27,225.561 1510.84,225.02 1511.41,227.427 1511.97,227.806 1512.54,227.903 1513.11,226.027 1513.68,227.036 1514.25,226.505 1514.82,226.804 1515.38,230.093 1515.95,230.171 1516.52,230.124 1517.09,231.109 1517.66,230.964 1518.23,229.74 1518.79,230.903 1519.36,229.839 1519.93,226.548 1520.5,227.788 1521.07,228.863 1521.64,228.727 1522.2,226.725 1522.77,226.943 1523.34,228.214 1523.91,228.409 1524.48,226.542 1525.05,225.738 1525.61,225.133 1526.18,223.731 1526.75,225.007 1527.32,226.388 1527.89,225.631 1528.46,228.167 1529.02,227.324 1529.59,229.776 1530.16,228.773 1530.73,230.041 1531.3,230.328 1531.87,231.51 1532.43,229.573 1533,230.53 1533.57,230.57 1534.14,230.583 1534.71,230.593 1535.28,231.513 1535.84,232.466 1536.41,231.163 1536.98,227.987 1537.55,232.175 1538.12,231.153 1538.69,233.128 1539.25,234.086 1539.82,234.797 1540.39,235.408 1540.96,234.214 1541.53,231.827 1542.1,230.467 1542.66,226.409 1543.23,226.755 1543.8,228.043 1544.37,230.079 1544.94,232.37 1545.51,232.279 1546.08,231.394 1546.64,231.153 1547.21,231.143 1547.78,231.048 1548.35,228.958 1548.92,226.862 1549.49,226.018 1550.05,224.157 1550.62,225.679 1551.19,225.891 1551.76,226.116 1552.33,226.366 1552.9,227.679 1553.46,226.905 1554.03,227.109 1554.6,226.184 1555.17,224.368 1555.74,225.819 1556.31,225.089 1556.87,225.623 1557.44,225.901 1558.01,226.313 1558.58,227.537 1559.15,226.761 1559.72,226.83 1560.28,226.09 1560.85,225.27 1561.42,225.614 1561.99,226.856 1562.56,227.228 1563.13,226.499 1563.69,228.013 1564.26,228.164 1564.83,228.313 1565.4,228.436 1565.97,229.608 1566.54,227.981 1567.1,229.077 1567.67,230.268 1568.24,231.327 1568.81,231.158 1569.38,230.134 1569.95,231.317 1570.51,230.238 1571.08,229.378 1571.65,228.561 1572.22,230.431 1572.79,230.19 1573.36,232.033 1573.92,231.932 1574.49,229.698 1575.06,230.556 1575.63,229.689 1576.2,229.668 1576.77,231.97 1577.33,234.034 1577.9,233.769 1578.47,233.705 1579.04,231.427 1579.61,231.524 1580.18,231.295 1580.74,231.298 1581.31,233.094 1581.88,233.953 1582.45,234.832 1583.02,234.514 1583.59,234.202 1584.15,233.958 1584.72,234.741 1585.29,234.478 1585.86,234.145 1586.43,232.844 1587,233.633 1587.56,233.44 1588.13,233.072 1588.7,232.822 1589.27,233.654 1589.84,232.558 1590.41,233.531 1590.97,232.336 1591.54,232.22 1592.11,229.971 1592.68,230.084 1593.25,229.066 1593.82,228.165 1594.38,229.234 1594.95,229.219 1595.52,228.273 1596.09,229.344 1596.66,229.274 1597.23,229.187 1597.79,229.137 1598.36,229.195 1598.93,229.353 1599.5,228.226 1600.07,229.324 1600.64,229.365 1601.2,228.362 1601.77,229.623 1602.34,226.574 1602.91,227.694 1603.48,228.456 1604.05,229.522 1604.61,230.566 1605.18,231.448 1605.75,230.322 1606.32,233.142 1606.89,229.735 1607.46,229.656 1608.02,229.602 1608.59,230.563 1609.16,230.659 1609.73,230.718 1610.3,228.611 1610.87,228.652 1611.43,229.69 1612,229.555 1612.57,228.404 1613.14,228.517 1613.71,228.597 1614.28,229.807 1614.84,227.591 1615.41,229.606 1615.98,229.53 1616.55,230.495 1617.12,230.259 1617.69,229.255 1618.26,228.268 1618.82,229.275 1619.39,229.368 1619.96,229.377 1620.53,230.738 1621.1,229.516 1621.67,230.584 1622.23,230.62 1622.8,229.564 1623.37,229.472 1623.94,230.387 1624.51,230.204 1625.08,230.008 1625.64,232.874 1626.21,233.468 1626.78,233.167 1627.35,231.668 1627.92,234.317 1628.49,233.884 1629.05,232.244 1629.62,231.206 1630.19,230.857 1630.76,231.732 1631.33,232.438 1631.9,231.249 1632.46,229.957 1633.03,232.847 1633.6,231.638 1634.17,232.496 1634.74,231.401 1635.31,231.045 1635.87,228.836 1636.44,227.766 1637.01,226.966 1637.58,227.926 1638.15,231.127 1638.72,229.916 1639.28,229.583 1639.85,223.324 1640.42,223.72 1640.99,224.044 1641.56,222.286 1642.13,222.646 1642.69,222.048 1643.26,222.569 1643.83,224.005 1644.4,225.262 1644.97,226.664 1645.54,227.057 1646.1,227.209 1646.67,230.128 1647.24,230.237 1647.81,231.016 1648.38,230.994 1648.95,230.948 1649.51,233.074 1650.08,231.875 1650.65,232.487 1651.22,231.886 1651.79,231.581 1652.36,231.356 1652.92,229.822 1653.49,230.607 1654.06,228.454 1654.63,223.35 1655.2,224.944 1655.77,227.181 1656.33,227.347 1656.9,226.546 1657.47,226.641 1658.04,225.537 1658.61,225.897 1659.18,226.385 1659.74,226.63 1660.31,225.839 1660.88,225.148 1661.45,223.337 1662.02,224.861 1662.59,225.406 1663.15,225.713 1663.72,226.222 1664.29,224.238 1664.86,223.577 1665.43,225.069 1666,227.417 1666.56,228.791 1667.13,230.04 1667.7,230.963 1668.27,231.843 1668.84,230.839 1669.41,229.423 1669.97,231.539 1670.54,227.334 1671.11,227.467 1671.68,227.632 1672.25,230.038 1672.82,231.136 1673.38,231.976 1673.95,230.95 1674.52,231.93 1675.09,229.866 1675.66,229.742 1676.23,229.725 1676.79,229.727 1677.36,229.962 1677.93,229.077 1678.5,230.142 1679.07,230.167 1679.64,228.977 1680.2,225.97 1680.77,225.443 1681.34,225.014 1681.91,227.533 1682.48,227.909 1683.05,227.991 1683.61,228.229 1684.18,229.441 1684.75,228.632 1685.32,227.755 1685.89,229.989 1686.46,231.148 1687.02,231.191 1687.59,230.272 1688.16,231.39 1688.73,230.45 1689.3,230.325 1689.87,230.337 1690.44,227.457 1691,227.741 1691.57,228.916 1692.14,228.996 1692.71,229.155 1693.28,230.253 1693.85,231.326 1694.41,232.131 1694.98,229.683 1695.55,229.67 1696.12,229.637 1696.69,231.73 1697.26,231.637 1697.82,230.622 1698.39,229.585 1698.96,227.561 1699.53,227.813 1700.1,228.118 1700.67,226.438 1701.23,228.667 1701.8,226.717 1702.37,221.815 1702.94,220.507 1703.51,221.12 1704.08,222.689 1704.64,224.125 1705.21,224.766 1705.78,225.366 1706.35,223.635 1706.92,227.154 1707.49,228.283 1708.05,228.36 1708.62,226.324 1709.19,224.596 1709.76,225.101 1710.33,224.472 1710.9,222.948 1711.46,222.607 1712.03,224.268 1712.6,225.656 1713.17,226.321 1713.74,226.692 1714.31,225.971 1714.87,226.31 1715.44,226.738 1716.01,226.088 1716.58,227.479 1717.15,230.711 1717.72,231.827 1718.28,230.798 1718.85,234.051 1719.42,233.971 1719.99,233.936 1720.56,232.781 1721.13,232.756 1721.69,231.776 1722.26,234.927 1722.83,234.678 1723.4,234.314 1723.97,235.045 1724.54,234.69 1725.1,235.559 1725.67,234.168 1726.24,234.134 1726.81,235.005 1727.38,236.82 1727.95,235.078 1728.51,236.872 1729.08,238.486 1729.65,237.943 1730.22,238.531 1730.79,238.104 1731.36,239.582 1731.92,239.928 1732.49,242.29 1733.06,241.353 1733.63,239.392 1734.2,239.723 1734.77,242.047 1735.33,241.145 1735.9,241.131 1736.47,241.174 1737.04,240.164 1737.61,238.112 1738.18,237.374 1738.74,233.476 1739.31,230.912 1739.88,231.817 1740.45,229.345 1741.02,229.448 1741.59,228.236 1742.15,229.471 1742.72,228.289 1743.29,228.285 1743.86,227.192 1744.43,229.154 1745,230.004 1745.56,229.738 1746.13,228.703 1746.7,229.779 1747.27,229.638 1747.84,228.493 1748.41,227.467 1748.97,223.341 1749.54,223.589 1750.11,224.837 1750.68,225.041 1751.25,229.339 1751.82,230.057 1752.38,231.955 1752.95,232.659 1753.52,232.097 1754.09,234.908 1754.66,235.475 1755.23,234.066 1755.79,232.465 1756.36,232.148 1756.93,231.97 1757.5,229.771 1758.07,228.68 1758.64,227.292 1759.21,227.29 1759.77,227.348 1760.34,227.349 1760.91,227.251 1761.48,227.288 1762.05,227.408 1762.62,227.417 1763.18,228.467 1763.75,230.778 1764.32,230.582 1764.89,230.3 1765.46,231.246 1766.03,228.909 1766.59,227.676 1767.16,227.474 1767.73,227.454 1768.3,226.454 1768.87,225.769 1769.44,224.912 1770,226.353 1770.57,225.46 1771.14,224.802 1771.71,225.989 1772.28,225.29 1772.85,223.214 1773.41,223.642 1773.98,221.244 1774.55,219.895 1775.12,223.889 1775.69,225.453 1776.26,228.488 1776.82,228.544 1777.39,228.685 1777.96,228.805 1778.53,229.63 1779.1,229.807 1779.67,231.818 1780.23,230.65 1780.8,230.695 1781.37,231.596 1781.94,231.384 1782.51,231.015 1783.08,229.779 1783.64,228.664 1784.21,227.565 1784.78,226.541 1785.35,227.915 1785.92,230.141 1786.49,230.061 1787.05,229.825 1787.62,229.833 1788.19,227.781 1788.76,227.769 1789.33,229.025 1789.9,228.071 1790.46,228.197 1791.03,231.685 1791.6,230.424 1792.17,230.425 1792.74,231.471 1793.31,232.393 1793.87,231.975 1794.44,232.918 1795.01,230.881 1795.58,230.633 1796.15,230.363 1796.72,230.285 1797.28,230.345 1797.85,230.429 1798.42,231.362 1798.99,231.177 1799.56,230.931 1800.13,232.728 1800.69,232.339 1801.26,229.09 1801.83,228.112 1802.4,227.282 1802.97,227.447 1803.54,226.348 1804.1,225.513 1804.67,226.737 1805.24,224.866 1805.81,225.156 1806.38,225.668 1806.95,227.799 1807.51,225.874 1808.08,227.107 1808.65,226.256 1809.22,225.437 1809.79,225.632 1810.36,226.826 1810.92,229.034 1811.49,231.271 1812.06,231.003 1812.63,232.877 1813.2,233.616 1813.77,233.333 1814.33,232.833 1814.9,230.649 1815.47,228.437 1816.04,228.382 1816.61,229.596 1817.18,227.566 1817.74,228.744 1818.31,228.518 1818.88,229.561 1819.45,228.492 1820.02,229.48 1820.59,230.365 1821.15,232.359 1821.72,233.122 1822.29,234.006 1822.86,232.369 1823.43,231.264 1824,229.067 1824.56,229.188 1825.13,230.438 1825.7,229.348 1826.27,230.371 1826.84,230.202 1827.41,229.086 1827.97,227.118 1828.54,228.296 1829.11,229.348 1829.68,229.498 1830.25,228.35 1830.82,228.594 1831.39,228.589 1831.95,227.659 1832.52,225.647 1833.09,223.871 1833.66,224.285 1834.23,224.765 1834.8,226.239 1835.36,227.532 1835.93,227.446 1836.5,227.634 1837.07,227.83 1837.64,226.92 1838.21,228.274 1838.77,229.439 1839.34,232.309 1839.91,228.053 1840.48,229.149 1841.05,229.162 1841.62,229.183 1842.18,228.306 1842.75,228.249 1843.32,229.533 1843.89,230.564 1844.46,231.449 1845.03,230.398 1845.59,229.309 1846.16,231.23 1846.73,231.033 1847.3,229.782 1847.87,228.636 1848.44,227.778 1849,227.64 1849.57,227.628 1850.14,227.801 1850.71,228.071 1851.28,226.065 1851.85,226.37 1852.41,227.728 1852.98,229.842 1853.55,229.922 1854.12,228.723 1854.69,228.827 1855.26,227.968 1855.82,229.065 1856.39,229.129 1856.96,228.065 1857.53,229.262 1858.1,230.206 1858.67,230.152 1859.23,230.182 1859.8,228.057 1860.37,228.262 1860.94,228.435 1861.51,230.603 1862.08,231.505 1862.64,227.345 1863.21,227.553 1863.78,228.575 1864.35,228.913 1864.92,231.137 1865.49,231.003 1866.05,232.043 1866.62,231.929 1867.19,232.936 1867.76,232.478 1868.33,234.634 1868.9,231.131 1869.46,230.16 1870.03,230.173 1870.6,230.242 1871.17,229.097 1871.74,229.051 1872.31,229.997 1872.87,228.882 1873.44,226.923 1874.01,227.259 1874.58,228.368 1875.15,229.401 1875.72,229.62 1876.28,231.669 1876.85,229.529 1877.42,230.43 1877.99,230.513 1878.56,230.291 1879.13,229.201 1879.69,229.172 1880.26,227.237 1880.83,224.371 1881.4,222.714 1881.97,220.173 1882.54,222.862 1883.1,223.117 1883.67,221.899 1884.24,226.664 1884.81,229.147 1885.38,230.09 1885.95,230.116 1886.51,230.051 1887.08,231.186 1887.65,228.969 1888.22,229.276 1888.79,227.231 1889.36,227.372 1889.92,227.306 1890.49,226.719 1891.06,225.742 1891.63,228.083 1892.2,229.137 1892.77,228.456 1893.33,227.519 1893.9,225.827 1894.47,227.311 1895.04,225.799 1895.61,223.136 1896.18,222.693 1896.74,224.17 1897.31,225.86 1897.88,226.151 1898.45,229.587 1899.02,231.091 1899.59,231.978 1900.16,233.135 1900.72,234.241 1901.29,234.816 1901.86,236.762 1902.43,236.383 1903,238.98 1903.57,237.192 1904.13,235.514 1904.7,237.169 1905.27,236.763 1905.84,236.313 1906.41,235.685 1906.98,233.985 1907.54,231.531 1908.11,229.553 1908.68,228.38 1909.25,227.708 1909.82,229.949 1910.39,229.942 1910.95,231.063 1911.52,231.885 1912.09,231.754 1912.66,229.592 1913.23,228.593 1913.8,229.819 1914.36,228.723 1914.93,229.818 1915.5,227.683 1916.07,225.827 1916.64,227.338 1917.21,226.575 1917.77,228.576 1918.34,228.718 1918.91,230.855 1919.48,232.926 1920.05,230.634 1920.62,229.271 1921.18,229.268 1921.75,226.247 1922.32,228.394 1922.89,228.555 1923.46,229.812 1924.03,230.943 1924.59,229.72 1925.16,230.427 1925.73,229.276 1926.3,230.473 1926.87,230.243 1927.44,232.531 1928,234.384 1928.57,237.124 1929.14,237.525 1929.71,237.157 1930.28,236.417 1930.85,236.624 1931.41,236.11 1931.98,235.439 1932.55,233.664 1933.12,231.144 1933.69,232.969 1934.26,231.513 1934.82,227.191 1935.39,229.332 1935.96,230.334 1936.53,230.374 1937.1,229.227 1937.67,228.205 1938.23,229.299 1938.8,230.072 1939.37,232.082 1939.94,230.829 1940.51,229.325 1941.08,229.287 1941.64,231.288 1942.21,231.248 1942.78,233.101 1943.35,236.99 1943.92,235.134 1944.49,231.537 1945.05,230.439 1945.62,227.165 1946.19,227.153 1946.76,224.11 1947.33,225.385 1947.9,225.38 1948.46,226.468 1949.03,227.701 1949.6,228.825 1950.17,229.756 1950.74,228.573 1951.31,229.709 1951.87,229.69 1952.44,229.506 1953.01,228.575 1953.58,227.475 1954.15,227.723 1954.72,228.838 1955.28,229.758 1955.85,229.68 1956.42,230.653 1956.99,228.629 1957.56,228.593 1958.13,230.746 1958.69,228.783 1959.26,227.669 1959.83,225.435 1960.4,224.431 1960.97,223.579 1961.54,224.006 1962.1,225.195 1962.67,226.466 1963.24,226.499 1963.81,226.802 1964.38,225.887 1964.95,223.865 1965.51,225.473 1966.08,226.697 1966.65,227.023 1967.22,226.119 1967.79,231.67 1968.36,232.501 1968.92,231.022 1969.49,231.944 1970.06,230.573 1970.63,229.505 1971.2,228.587 1971.77,227.725 1972.34,230.106 1972.9,231.058 1973.47,231.919 1974.04,232.546 1974.61,232.53 1975.18,233.339 1975.75,231.857 1976.31,232.682 1976.88,231.336 1977.45,231.046 1978.02,230.806 1978.59,229.716 1979.16,228.53 1979.72,227.515 1980.29,226.565 1980.86,227.873 1981.43,229.974 1982,227.733 1982.57,227.78 1983.13,225.918 1983.7,229.253 1984.27,229.556 1984.84,231.503 1985.41,233.324 1985.98,233.002 1986.54,234.698 1987.11,234.273 1987.68,233.887 1988.25,232.449 1988.82,233.2 1989.39,231.821 1989.95,229.643 1990.52,229.65 1991.09,229.64 1991.66,229.481 1992.23,229.292 1992.8,228.201 1993.36,231.389 1993.93,230.204 1994.5,232.435 1995.07,233.3 1995.64,232.899 1996.21,233.418 1996.77,231.005 1997.34,230.738 1997.91,230.562 1998.48,227.195 1999.05,226.071 1999.62,225.302 2000.18,224.492 2000.75,224.78 2001.32,224.015 2001.89,221.356 2002.46,223.056 2003.03,223.639 2003.59,226.203 2004.16,226.655 2004.73,226.717 2005.3,226.937 2005.87,226.966 2006.44,226.22 2007,225.51 2007.57,227.834 2008.14,227.88 2008.71,227.927 2009.28,227.947 2009.85,227.273 2010.41,227.385 2010.98,225.434 2011.55,226.824 2012.12,224.997 2012.69,226.487 2013.26,226.869 2013.82,227.123 2014.39,226.109 2014.96,226.331 2015.53,226.537 2016.1,227.847 2016.67,230.11 2017.23,229.961 2017.8,230.126 2018.37,231.039 2018.94,231.874 2019.51,230.58 2020.08,230.531 2020.64,231.546 2021.21,233.605 2021.78,236.393 2022.35,237.098 2022.92,236.644 2023.49,234.905 2024.05,235.583 2024.62,235.23 2025.19,232.606 2025.76,233.672 2026.33,232.435 2026.9,232.439 2027.46,231.973 2028.03,231.748 2028.6,232.59 2029.17,234.498 2029.74,234.042 2030.31,234.643 2030.87,234.105 2031.44,232.527 2032.01,231.145 2032.58,232.748 2033.15,233.429 2033.72,233.062 2034.28,233.669 2034.85,233.307 2035.42,233.823 2035.99,231.403 2036.56,231.251 2037.13,229.966 2037.69,228.91 2038.26,227.631 2038.83,226.966 2039.4,227.13 2039.97,227.136 2040.54,226.118 2041.11,227.376 2041.67,228.437 2042.24,229.449 2042.81,230.373 2043.38,228.368 2043.95,228.181 2044.52,226.184 2045.08,227.735 2045.65,226.943 2046.22,227.045 2046.79,227.94 2047.36,226.119 2047.93,227.472 2048.49,227.257 2049.06,226.358 2049.63,225.748 2050.2,223.845 2050.77,221.945 2051.34,221.352 2051.9,222.745 2052.47,222.162 2053.04,223.656 2053.61,223.879 2054.18,225.241 2054.75,223.616 2055.31,225.972 2055.88,227.498 2056.45,229.692 2057.02,229.783 2057.59,229.971 2058.16,228.935 2058.72,231.073 2059.29,229.735 2059.86,229.666 2060.43,228.467 2061,227.838 2061.57,229.145 2062.13,228.116 2062.7,227.2 2063.27,227.43 2063.84,227.431 2064.41,227.442 2064.98,227.658 2065.54,228.766 2066.11,229.04 2066.68,229.201 2067.25,228.269 2067.82,229.372 2068.39,227.338 2068.95,227.537 2069.52,227.681 2070.09,227.977 2070.66,227.98 2071.23,228.393 2071.8,224.526 2072.36,224.143 2072.93,223.75 2073.5,224.065 2074.07,223.523 2074.64,226.503 2075.21,227.982 2075.77,228.095 2076.34,229.318 2076.91,230.492 2077.48,230.434 2078.05,231.553 2078.62,230.476 2079.18,230.487 2079.75,231.495 2080.32,231.336 2080.89,234.328 2081.46,234.669 2082.03,233.397 2082.59,232.009 2083.16,230.657 2083.73,229.538 2084.3,230.261 2084.87,229.238 2085.44,230.267 2086,230.301 2086.57,229.36 2087.14,230.469 2087.71,233.42 2088.28,231.207 2088.85,232.162 2089.41,233.177 2089.98,234.037 2090.55,234.89 2091.12,230.441 2091.69,234.575 2092.26,235.332 2092.82,236.952 2093.39,235.426 2093.96,233.994 2094.53,233.819 2095.1,234.567 2095.67,233.828 2096.23,232.427 2096.8,232.192 2097.37,233.081 2097.94,230.813 2098.51,231.789 2099.08,231.668 2099.64,229.493 2100.21,228.465 2100.78,228.293 2101.35,229.417 2101.92,229.428 2102.49,229.622 2103.05,230.685 2103.62,232.787 2104.19,230.276 2104.76,228.347 2105.33,229.522 2105.9,231.533 2106.46,232.396 2107.03,233.03 2107.6,233.644 2108.17,235.401 2108.74,234.942 2109.31,231.252 2109.87,230.905 2110.44,229.731 2111.01,228.476 2111.58,228.373 2112.15,225.471 2112.72,224.59 2113.29,225.8 2113.85,229.109 2114.42,226.908 2114.99,227.972 2115.56,228.069 2116.13,228.196 2116.7,227.263 2117.26,230.151 2117.83,232.049 2118.4,232 2118.97,229.707 2119.54,229.542 2120.11,229.652 2120.67,229.415 2121.24,230.399 2121.81,228.268 2122.38,228.372 2122.95,227.234 2123.52,230.194 2124.08,233.187 2124.65,233.08 2125.22,231.747 2125.79,231.763 2126.36,230.64 2126.93,231.596 2127.49,231.246 2128.06,229.826 2128.63,229.826 2129.2,227.649 2129.77,228.416 2130.34,228.479 2130.9,228.267 2131.47,228.276 2132.04,230.326 2132.61,230.093 2133.18,230.067 2133.75,229.917 2134.31,229.979 2134.88,229.807 2135.45,228.503 2136.02,227.203 2136.59,229.218 2137.16,229.127 2137.72,229.319 2138.29,229.293 2138.86,229.374 2139.43,227.427 2140,228.436 2140.57,227.405 2141.13,226.637 2141.7,227.768 2142.27,228.782 2142.84,227.782 2143.41,230.155 2143.98,231.076 2144.54,228.777 2145.11,226.545 2145.68,223.53 2146.25,227.144 2146.82,227.492 2147.39,228.984 2147.95,226.805 2148.52,226.76 2149.09,227.81 2149.66,226.736 2150.23,228.046 2150.8,227.093 2151.36,227.074 2151.93,227.538 2152.5,225.451 2153.07,224.587 2153.64,224.192 2154.21,223.545 2154.77,222.893 2155.34,221.368 2155.91,222.792 2156.48,222.452 2157.05,225.967 2157.62,227.425 2158.18,226.567 2158.75,224.639 2159.32,225.184 2159.89,226.592 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip650)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip650)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip650)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip650)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.021\n  with uncertainty of ± 0.0018855603170723522\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01784 ± (0.00189861, 0.00179281) (MC)\n  95% confidence interval: [-4.02141, -4.01442]) (MC)\n  linear error propagation: -4.01796 ± 0.00180145\n  |δ_y| = |0.00171122| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017838875938779, val_l = 0.003571791538719893, val_u = 0.0034199131607302036)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip680\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip680)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip681\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip680)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip682\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1134.87 2211.02,1134.87 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,964.947 2211.02,964.947 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,795.027 2211.02,795.027 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,625.107 2211.02,625.107 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,455.187 2211.02,455.187 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,285.266 2211.02,285.266 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1134.87 365.751,1134.87 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,964.947 365.751,964.947 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,795.027 365.751,795.027 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,625.107 365.751,625.107 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,455.187 365.751,455.187 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,285.266 365.751,285.266 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M298.909 1120.67 Q295.298 1120.67 293.469 1124.23 Q291.664 1127.77 291.664 1134.9 Q291.664 1142.01 293.469 1145.57 Q295.298 1149.12 298.909 1149.12 Q302.543 1149.12 304.349 1145.57 Q306.177 1142.01 306.177 1134.9 Q306.177 1127.77 304.349 1124.23 Q302.543 1120.67 298.909 1120.67 M298.909 1116.96 Q304.719 1116.96 307.775 1121.57 Q310.853 1126.15 310.853 1134.9 Q310.853 1143.63 307.775 1148.24 Q304.719 1152.82 298.909 1152.82 Q293.099 1152.82 290.02 1148.24 Q286.964 1143.63 286.964 1134.9 Q286.964 1126.15 290.02 1121.57 Q293.099 1116.96 298.909 1116.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M259.557 978.292 L267.196 978.292 L267.196 951.927 L258.886 953.593 L258.886 949.334 L267.15 947.667 L271.826 947.667 L271.826 978.292 L279.465 978.292 L279.465 982.227 L259.557 982.227 L259.557 978.292 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 950.746 Q295.298 950.746 293.469 954.311 Q291.664 957.852 291.664 964.982 Q291.664 972.088 293.469 975.653 Q295.298 979.195 298.909 979.195 Q302.543 979.195 304.349 975.653 Q306.177 972.088 306.177 964.982 Q306.177 957.852 304.349 954.311 Q302.543 950.746 298.909 950.746 M298.909 947.042 Q304.719 947.042 307.775 951.649 Q310.853 956.232 310.853 964.982 Q310.853 973.709 307.775 978.315 Q304.719 982.899 298.909 982.899 Q293.099 982.899 290.02 978.315 Q286.964 973.709 286.964 964.982 Q286.964 956.232 290.02 951.649 Q293.099 947.042 298.909 947.042 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M262.775 808.372 L279.094 808.372 L279.094 812.307 L257.15 812.307 L257.15 808.372 Q259.812 805.617 264.395 800.988 Q269.002 796.335 270.182 794.992 Q272.428 792.469 273.307 790.733 Q274.21 788.974 274.21 787.284 Q274.21 784.529 272.266 782.793 Q270.344 781.057 267.242 781.057 Q265.043 781.057 262.59 781.821 Q260.159 782.585 257.381 784.136 L257.381 779.414 Q260.205 778.279 262.659 777.701 Q265.113 777.122 267.15 777.122 Q272.52 777.122 275.715 779.807 Q278.909 782.492 278.909 786.983 Q278.909 789.113 278.099 791.034 Q277.312 792.932 275.205 795.525 Q274.627 796.196 271.525 799.414 Q268.423 802.608 262.775 808.372 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 780.826 Q295.298 780.826 293.469 784.391 Q291.664 787.932 291.664 795.062 Q291.664 802.168 293.469 805.733 Q295.298 809.275 298.909 809.275 Q302.543 809.275 304.349 805.733 Q306.177 802.168 306.177 795.062 Q306.177 787.932 304.349 784.391 Q302.543 780.826 298.909 780.826 M298.909 777.122 Q304.719 777.122 307.775 781.729 Q310.853 786.312 310.853 795.062 Q310.853 803.789 307.775 808.395 Q304.719 812.978 298.909 812.978 Q293.099 812.978 290.02 808.395 Q286.964 803.789 286.964 795.062 Q286.964 786.312 290.02 781.729 Q293.099 777.122 298.909 777.122 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M272.914 623.753 Q276.27 624.47 278.145 626.739 Q280.043 629.007 280.043 632.341 Q280.043 637.456 276.525 640.257 Q273.006 643.058 266.525 643.058 Q264.349 643.058 262.034 642.618 Q259.742 642.202 257.289 641.345 L257.289 636.831 Q259.233 637.966 261.548 638.544 Q263.863 639.123 266.386 639.123 Q270.784 639.123 273.076 637.387 Q275.39 635.651 275.39 632.341 Q275.39 629.285 273.238 627.572 Q271.108 625.836 267.289 625.836 L263.261 625.836 L263.261 621.993 L267.474 621.993 Q270.923 621.993 272.752 620.628 Q274.58 619.239 274.58 616.646 Q274.58 613.984 272.682 612.572 Q270.807 611.137 267.289 611.137 Q265.367 611.137 263.168 611.554 Q260.969 611.97 258.33 612.85 L258.33 608.683 Q260.992 607.943 263.307 607.572 Q265.645 607.202 267.705 607.202 Q273.029 607.202 276.131 609.632 Q279.233 612.04 279.233 616.16 Q279.233 619.03 277.59 621.021 Q275.946 622.989 272.914 623.753 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 610.906 Q295.298 610.906 293.469 614.47 Q291.664 618.012 291.664 625.142 Q291.664 632.248 293.469 635.813 Q295.298 639.354 298.909 639.354 Q302.543 639.354 304.349 635.813 Q306.177 632.248 306.177 625.142 Q306.177 618.012 304.349 614.47 Q302.543 610.906 298.909 610.906 M298.909 607.202 Q304.719 607.202 307.775 611.808 Q310.853 616.392 310.853 625.142 Q310.853 633.868 307.775 638.475 Q304.719 643.058 298.909 643.058 Q293.099 643.058 290.02 638.475 Q286.964 633.868 286.964 625.142 Q286.964 616.392 290.02 611.808 Q293.099 607.202 298.909 607.202 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M271.594 441.981 L259.789 460.43 L271.594 460.43 L271.594 441.981 M270.367 437.907 L276.247 437.907 L276.247 460.43 L281.177 460.43 L281.177 464.318 L276.247 464.318 L276.247 472.467 L271.594 472.467 L271.594 464.318 L255.992 464.318 L255.992 459.805 L270.367 437.907 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 440.985 Q295.298 440.985 293.469 444.55 Q291.664 448.092 291.664 455.221 Q291.664 462.328 293.469 465.893 Q295.298 469.434 298.909 469.434 Q302.543 469.434 304.349 465.893 Q306.177 462.328 306.177 455.221 Q306.177 448.092 304.349 444.55 Q302.543 440.985 298.909 440.985 M298.909 437.282 Q304.719 437.282 307.775 441.888 Q310.853 446.471 310.853 455.221 Q310.853 463.948 307.775 468.555 Q304.719 473.138 298.909 473.138 Q293.099 473.138 290.02 468.555 Q286.964 463.948 286.964 455.221 Q286.964 446.471 290.02 441.888 Q293.099 437.282 298.909 437.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M258.793 267.986 L277.15 267.986 L277.15 271.922 L263.076 271.922 L263.076 280.394 Q264.094 280.046 265.113 279.884 Q266.131 279.699 267.15 279.699 Q272.937 279.699 276.316 282.871 Q279.696 286.042 279.696 291.458 Q279.696 297.037 276.224 300.139 Q272.752 303.218 266.432 303.218 Q264.256 303.218 261.988 302.847 Q259.742 302.477 257.335 301.736 L257.335 297.037 Q259.418 298.171 261.641 298.727 Q263.863 299.282 266.34 299.282 Q270.344 299.282 272.682 297.176 Q275.02 295.07 275.02 291.458 Q275.02 287.847 272.682 285.741 Q270.344 283.634 266.34 283.634 Q264.465 283.634 262.59 284.051 Q260.738 284.468 258.793 285.347 L258.793 267.986 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M298.909 271.065 Q295.298 271.065 293.469 274.63 Q291.664 278.171 291.664 285.301 Q291.664 292.408 293.469 295.972 Q295.298 299.514 298.909 299.514 Q302.543 299.514 304.349 295.972 Q306.177 292.408 306.177 285.301 Q306.177 278.171 304.349 274.63 Q302.543 271.065 298.909 271.065 M298.909 267.361 Q304.719 267.361 307.775 271.968 Q310.853 276.551 310.853 285.301 Q310.853 294.028 307.775 298.634 Q304.719 303.218 298.909 303.218 Q293.099 303.218 290.02 298.634 Q286.964 294.028 286.964 285.301 Q286.964 276.551 290.02 271.968 Q293.099 267.361 298.909 267.361 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip682)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1141.82 400.199,1020.02 400.786,908.367 401.372,803.584 401.958,707.568 402.545,621.818 403.131,541.49 403.718,576.841 404.304,508.249 404.891,442.774 405.477,386.589 406.063,419.15 406.65,369.63 407.236,325.164 407.823,283.881 408.409,249.786 408.995,279.999 409.582,305.74 410.168,275.62 410.755,300.361 411.341,322.163 411.927,297.64 412.514,277.172 413.1,258.173 413.687,243.389 414.273,230.3 414.86,219.895 415.446,242.887 416.032,235.782 416.619,229.033 417.205,225.066 417.792,224.558 418.378,224.633 418.964,246.767 419.551,248.525 420.137,251.531 420.724,255.208 421.31,295.437 421.896,302.32 422.483,323.804 423.069,331.388 423.656,366.124 424.242,374.953 424.829,395.585 425.415,427.25 426.001,457.008 426.588,465.753 427.174,474.453 427.761,492.793 428.347,510.403 428.933,527.319 429.52,536.284 430.106,544.903 430.693,561.597 431.279,571.372 431.865,594.106 432.452,603.885 433.038,613.933 433.625,630.437 434.211,651.281 434.798,661.213 435.384,676.083 435.97,700.491 436.557,710.741 437.143,720.349 437.73,734.645 438.316,748.379 438.902,766.49 439.489,779.792 440.075,792.514 440.662,801.598 441.248,810.475 441.835,830.138 442.421,838.542 443.007,853.412 443.594,868.103 444.18,885.831 444.767,892.545 445.353,908.827 445.939,923.951 446.526,929.191 447.112,938.136 447.699,943.808 448.285,952.301 448.871,957.89 449.458,971.447 450.044,981.76 450.631,989.064 451.217,1001.21 451.804,1005.45 452.39,1012.55 452.976,1019.24 453.563,1025.84 454.149,1029.51 454.736,1038.08 455.322,1044.03 455.908,1056.55 456.495,1059.63 457.081,1064.98 457.668,1068.18 458.254,1077.47 458.84,1082.29 459.427,1084.99 460.013,1091.69 460.6,1100.19 461.186,1106.63 461.773,1110.87 462.359,1117.11 462.945,1119.05 463.532,1124.96 464.118,1126.77 464.705,1128.95 465.291,1134.47 465.877,1137.67 466.464,1139.36 467.05,1144.67 467.637,1149.71 468.223,1152.73 468.809,1157.86 469.396,1164.18 469.982,1165.37 470.569,1167.92 471.155,1172.42 471.742,1175.21 472.328,1179.21 472.914,1181.84 473.501,1180.77 474.087,1185 474.674,1185.96 475.26,1193.05 475.846,1195.2 476.433,1197.16 477.019,1200.83 477.606,1205.39 478.192,1205.7 478.778,1212.34 479.365,1213.57 479.951,1213.34 480.538,1211.39 481.124,1211.37 481.711,1209.95 482.297,1211.55 482.883,1211.5 483.47,1209.93 484.056,1211.53 484.643,1213.2 485.229,1212.94 485.815,1215.89 486.402,1218.8 486.988,1218.49 487.575,1219.97 488.161,1223.12 488.748,1224.78 489.334,1224.36 489.92,1225.44 490.507,1226.58 491.093,1229.27 491.68,1228.82 492.266,1226.82 492.852,1227.97 493.439,1226.04 494.025,1225.67 494.612,1225.44 495.198,1226.89 495.784,1226.33 496.371,1227.74 496.957,1228.67 497.544,1228.16 498.13,1229.25 498.717,1228.8 499.303,1230.34 499.889,1230.11 500.476,1235.63 501.062,1236.26 501.649,1235.44 502.235,1236.23 502.821,1237 503.408,1236.21 503.994,1238.35 504.581,1239.28 505.167,1238.44 505.753,1237.83 506.34,1237.42 506.926,1236.65 507.513,1237.61 508.099,1235.64 508.686,1236.53 509.272,1235.94 509.858,1236.69 510.445,1236.33 511.031,1236.97 511.618,1235.01 512.204,1235.89 512.79,1233.91 513.377,1236.32 513.963,1234.38 514.55,1236.81 515.136,1237.2 515.722,1239.62 516.309,1240.44 516.895,1238.51 517.482,1239.43 518.068,1236.03 518.655,1235.72 519.241,1234.96 519.827,1237.11 520.414,1236.66 521,1234.56 521.587,1238.01 522.173,1240.24 522.759,1240.68 523.346,1242.48 523.932,1242.69 524.519,1241.78 525.105,1246.76 525.691,1245.62 526.278,1244.41 526.864,1243.37 527.451,1243.69 528.037,1244.21 528.624,1245.83 529.21,1245.98 529.796,1243.31 530.383,1243.85 530.969,1243.88 531.556,1244.56 532.142,1243.47 532.728,1242.17 533.315,1242.62 533.901,1246.04 534.488,1250.53 535.074,1247.74 535.661,1243.57 536.247,1241.12 536.833,1240.19 537.42,1240.59 538.006,1238.19 538.593,1237.24 539.179,1236.52 539.765,1234.38 540.352,1236.42 540.938,1235.97 541.525,1236.49 542.111,1234.14 542.697,1233.45 543.284,1231.58 543.87,1231.06 544.457,1230.45 545.043,1229.79 545.63,1227.52 546.216,1228.82 546.802,1230.07 547.389,1228.23 547.975,1226.47 548.562,1228.81 549.148,1231.2 549.734,1232.02 550.321,1228.67 550.907,1229.58 551.494,1230.69 552.08,1233.2 552.666,1235.46 553.253,1234.37 553.839,1233.78 554.426,1235.65 555.012,1236.13 555.599,1235.22 556.185,1237.14 556.771,1238.66 557.358,1236.28 557.944,1235.68 558.531,1230.82 559.117,1233.22 559.703,1232.57 560.29,1233.43 560.876,1234.51 561.463,1235.07 562.049,1231.07 562.635,1233.4 563.222,1234 563.808,1233.36 564.395,1233.73 564.981,1233.19 565.568,1231.25 566.154,1230.94 566.74,1228.95 567.327,1229.49 567.913,1233.15 568.5,1233.68 569.086,1228.31 569.672,1229.02 570.259,1227.61 570.845,1228.56 571.432,1227.95 572.018,1227.65 572.605,1228.55 573.191,1227.96 573.777,1230.26 574.364,1229.74 574.95,1227.47 575.537,1225.52 576.123,1223.69 576.709,1223.26 577.296,1221.47 577.882,1222.47 578.469,1222.41 579.055,1220.78 579.641,1225.94 580.228,1225.71 580.814,1226.52 581.401,1224.44 581.987,1222.71 582.574,1224.05 583.16,1222.34 583.746,1220.49 584.333,1218.8 584.919,1220.43 585.506,1220.36 586.092,1219.31 586.678,1218.04 587.265,1217.99 587.851,1220.76 588.438,1223.33 589.024,1222.99 589.61,1225.37 590.197,1226.34 590.783,1227.37 591.37,1225.58 591.956,1226.53 592.543,1227.55 593.129,1224.24 593.715,1225.94 594.302,1225.64 594.888,1225.49 595.475,1219.36 596.061,1220.67 596.647,1218.91 597.234,1218.26 597.82,1215.37 598.407,1216.81 598.993,1218.41 599.579,1219.49 600.166,1219.24 600.752,1218.83 601.339,1221.45 601.925,1218.71 602.512,1218.13 603.098,1215.02 603.684,1216.12 604.271,1217.59 604.857,1217.47 605.444,1217.3 606.03,1218.67 606.616,1218.6 607.203,1220.1 607.789,1218.57 608.376,1219.59 608.962,1219.31 609.548,1219.1 610.135,1220.03 610.721,1218.5 611.308,1220.93 611.894,1219.32 612.481,1218.99 613.067,1218.74 613.653,1221.35 614.24,1221.18 614.826,1222.03 615.413,1221.55 615.999,1218.34 616.585,1219.63 617.172,1219.37 617.758,1216.52 618.345,1214.97 618.931,1214.97 619.518,1218.99 620.104,1218.7 620.69,1216.74 621.277,1217.77 621.863,1217.31 622.45,1215.79 623.036,1217.06 623.622,1218.12 624.209,1218.13 624.795,1216.52 625.382,1217.44 625.968,1219.9 626.554,1218.18 627.141,1218.07 627.727,1216.67 628.314,1212.42 628.9,1212.37 629.487,1212.6 630.073,1212.67 630.659,1217.06 631.246,1219.97 631.832,1217.06 632.419,1216.49 633.005,1216.41 633.591,1214.82 634.178,1214.83 634.764,1216 635.351,1216 635.937,1217.03 636.523,1216.99 637.11,1218.19 637.696,1213.93 638.283,1213.98 638.869,1213.99 639.456,1213.85 640.042,1213.66 640.628,1212.27 641.215,1212.36 641.801,1210.89 642.388,1209.53 642.974,1212.26 643.56,1210.65 644.147,1209.62 644.733,1212.43 645.32,1212.3 645.906,1212.13 646.492,1212.02 647.079,1212.29 647.665,1212.03 648.252,1214.53 648.838,1217.43 649.425,1217.34 650.011,1218.43 650.597,1219.4 651.184,1218.99 651.77,1215.93 652.357,1215.61 652.943,1218.19 653.529,1219.22 654.116,1214.98 654.702,1213.73 655.289,1213.68 655.875,1217.66 656.462,1214.54 657.048,1211.73 657.634,1211.84 658.221,1213.34 658.807,1211.8 659.394,1213.09 659.98,1214.01 660.566,1212.65 661.153,1216.79 661.739,1216.4 662.326,1217.57 662.912,1218.72 663.498,1216.71 664.085,1216.4 664.671,1216.01 665.258,1215.98 665.844,1218.24 666.431,1216.4 667.017,1215.93 667.603,1214.24 668.19,1212.47 668.776,1211.22 669.363,1213.71 669.949,1214.59 670.535,1214.32 671.122,1212.85 671.708,1211.31 672.295,1211.18 672.881,1206.81 673.467,1206.95 674.054,1204.56 674.64,1205.02 675.227,1205.43 675.813,1205.72 676.4,1208.6 676.986,1208.47 677.572,1210 678.159,1209.96 678.745,1211.27 679.332,1212.85 679.918,1211.39 680.504,1210.09 681.091,1211.46 681.677,1208.76 682.264,1209.18 682.85,1212.05 683.436,1214.82 684.023,1215.9 684.609,1215.71 685.196,1212.6 685.782,1213.6 686.369,1213.28 686.955,1212.71 687.541,1213.99 688.128,1212.76 688.714,1212.37 689.301,1212.45 689.887,1213.54 690.473,1213.37 691.06,1214.82 691.646,1214.43 692.233,1215.62 692.819,1213.57 693.405,1214.75 693.992,1215.8 694.578,1216.86 695.165,1216.53 695.751,1217.63 696.338,1217.39 696.924,1215.85 697.51,1214.08 698.097,1216.5 698.683,1214.86 699.27,1217.43 699.856,1216.87 700.442,1215.2 701.029,1213.4 701.615,1214.71 702.202,1213 702.788,1212.85 703.375,1214.29 703.961,1212.37 704.547,1208.03 705.134,1207.97 705.72,1206.5 706.307,1206.58 706.893,1208.08 707.479,1208.08 708.066,1207.97 708.652,1209.22 709.239,1209.25 709.825,1214.78 710.411,1217.1 710.998,1215.7 711.584,1215.19 712.171,1213.66 712.757,1214.8 713.344,1211.56 713.93,1212.81 714.516,1211.16 715.103,1211.18 715.689,1212.26 716.276,1210.48 716.862,1211.63 717.448,1212.84 718.035,1212.23 718.621,1213.46 719.208,1212.99 719.794,1214.19 720.38,1213.93 720.967,1213.7 721.553,1213.27 722.14,1212.99 722.726,1213.93 723.313,1216.45 723.899,1218.81 724.485,1218.37 725.072,1217.84 725.658,1219.96 726.245,1220.56 726.831,1218.59 727.417,1217.89 728.004,1217.35 728.59,1215.32 729.177,1214.62 729.763,1214.22 730.349,1216.87 730.936,1216.51 731.522,1216.06 732.109,1215.73 732.695,1216.79 733.282,1216.1 733.868,1214.26 734.454,1215 735.041,1213.38 735.627,1211.56 736.214,1211.51 736.8,1212.95 737.386,1216.8 737.973,1216.31 738.559,1215.85 739.146,1216.69 739.732,1217.49 740.318,1212.83 740.905,1212.57 741.491,1213.77 742.078,1211.95 742.664,1212.78 743.251,1214.24 743.837,1213.83 744.423,1213.42 745.01,1213.16 745.596,1214.43 746.183,1215.48 746.769,1215.19 747.355,1212.02 747.942,1208.95 748.528,1209.01 749.115,1210.46 749.701,1208.82 750.288,1209.94 750.874,1212.36 751.46,1209 752.047,1211.79 752.633,1210.21 753.22,1204.4 753.806,1203.21 754.392,1203.09 754.979,1200.59 755.565,1200.67 756.152,1195.23 756.738,1195.87 757.324,1194.78 757.911,1200.93 758.497,1198.62 759.084,1200.56 759.67,1202.37 760.257,1205.2 760.843,1204.23 761.429,1207.27 762.016,1208.69 762.602,1208.78 763.189,1208.83 763.775,1207.58 764.361,1210.41 764.948,1213.04 765.534,1215.24 766.121,1216.21 766.707,1214.47 767.293,1212.66 767.88,1212.72 768.466,1214.05 769.053,1215.06 769.639,1215.99 770.226,1215.78 770.812,1215.5 771.398,1209.58 771.985,1207.86 772.571,1206.09 773.158,1205.9 773.744,1206.16 774.33,1204.76 774.917,1206.44 775.503,1207.59 776.09,1208.77 776.676,1211.28 777.262,1210.78 777.849,1210.67 778.435,1210.56 779.022,1207.32 779.608,1208.56 780.195,1206.89 780.781,1209.59 781.367,1208.13 781.954,1206.63 782.54,1207.88 783.127,1209.08 783.713,1210.01 784.299,1210.01 784.886,1209.53 785.472,1208.07 786.059,1203.77 786.645,1202.44 787.232,1202.79 787.818,1202.99 788.404,1203.26 788.991,1202.27 789.577,1203.85 790.164,1206.44 790.75,1206.57 791.336,1204.98 791.923,1200.83 792.509,1202.87 793.096,1201.73 793.682,1200.55 794.268,1202.3 794.855,1198.6 795.441,1199.01 796.028,1197.71 796.614,1199.79 797.201,1201.26 797.787,1200.17 798.373,1201.87 798.96,1199.37 799.546,1199.63 800.133,1199.73 800.719,1200.14 801.305,1197.54 801.892,1198.13 802.478,1199.78 803.065,1201.4 803.651,1200.2 804.237,1198.89 804.824,1199.41 805.41,1202.5 805.997,1202.7 806.583,1202.98 807.17,1207.16 807.756,1208.35 808.342,1205.55 808.929,1202.99 809.515,1203.2 810.102,1204.59 810.688,1204.66 811.274,1206.06 811.861,1204.62 812.447,1206.07 813.034,1207.56 813.62,1207.53 814.206,1206.07 814.793,1205.91 815.379,1204.48 815.966,1204.52 816.552,1204.83 817.139,1200.84 817.725,1201.37 818.311,1201.49 818.898,1201.81 819.484,1204.6 820.071,1205.84 820.657,1204.36 821.243,1205.94 821.83,1205.89 822.416,1206.11 823.003,1208.88 823.589,1207.09 824.175,1208.56 824.762,1209.41 825.348,1210.54 825.935,1214.6 826.521,1213.11 827.108,1211.42 827.694,1211.15 828.28,1210.8 828.867,1213.28 829.453,1212.96 830.04,1211.2 830.626,1212.44 831.212,1209.52 831.799,1212.15 832.385,1210.31 832.972,1208.77 833.558,1210.02 834.145,1209.68 834.731,1206.62 835.317,1206.58 835.904,1206.77 836.49,1205 837.077,1204.8 837.663,1203.35 838.249,1201.88 838.836,1199.36 839.422,1201.12 840.009,1204.06 840.595,1209.53 841.181,1209.52 841.768,1210.7 842.354,1208.84 842.941,1206.04 843.527,1205.97 844.114,1205.78 844.7,1206.7 845.286,1205.01 845.873,1206.35 846.459,1206.41 847.046,1205.18 847.632,1206.25 848.218,1204.85 848.805,1204.89 849.391,1206.39 849.978,1207.85 850.564,1205.27 851.15,1206.49 851.737,1213.35 852.323,1208.99 852.91,1208.74 853.496,1208.11 854.083,1210.75 854.669,1209.04 855.255,1209.02 855.842,1208.95 856.428,1210.63 857.015,1210.65 857.601,1209.16 858.187,1207.37 858.774,1205.98 859.36,1206.14 859.947,1206.32 860.533,1207.77 861.119,1209.02 861.706,1210.25 862.292,1211.57 862.879,1208.47 863.465,1209.79 864.052,1208.06 864.638,1210.84 865.224,1210.48 865.811,1214.61 866.397,1214.16 866.984,1215.22 867.57,1213.38 868.156,1214.07 868.743,1213.27 869.329,1210.27 869.916,1212.68 870.502,1213.98 871.089,1210.78 871.675,1209.02 872.261,1206.36 872.848,1207.86 873.434,1206.28 874.021,1205.01 874.607,1204.88 875.193,1206.17 875.78,1204.47 876.366,1204.34 876.953,1201.22 877.539,1202.83 878.125,1201.42 878.712,1201.61 879.298,1200.41 879.885,1204.68 880.471,1206.08 881.058,1206.02 881.644,1205.92 882.23,1208.51 882.817,1208.56 883.403,1209.51 883.99,1210.6 884.576,1207.58 885.162,1208.95 885.749,1208.53 886.335,1208.45 886.922,1206.83 887.508,1208.09 888.094,1210.47 888.681,1207.49 889.267,1205.78 889.854,1208.24 890.44,1209.63 891.027,1209.37 891.613,1207.86 892.199,1206.1 892.786,1203.26 893.372,1203.15 893.959,1200.41 894.545,1206.34 895.131,1208.76 895.718,1207.43 896.304,1207.36 896.891,1208.79 897.477,1207.34 898.063,1208.6 898.65,1209.7 899.236,1212.21 899.823,1209.07 900.409,1209.07 900.996,1210.13 901.582,1211.16 902.168,1210.9 902.755,1208.91 903.341,1208.51 903.928,1209.61 904.514,1208.04 905.1,1208 905.687,1210.19 906.273,1207.18 906.86,1205.81 907.446,1204.09 908.032,1206.85 908.619,1208.15 909.205,1205.09 909.792,1203.25 910.378,1203.49 910.965,1207.71 911.551,1206.01 912.137,1204.58 912.724,1203.02 913.31,1204.68 913.897,1204.41 914.483,1200.55 915.069,1200.48 915.656,1203.77 916.242,1202.43 916.829,1205.31 917.415,1206.7 918.002,1206.64 918.588,1203.77 919.174,1202.35 919.761,1203.81 920.347,1203.88 920.934,1201.22 921.52,1201.41 922.106,1201.61 922.693,1204.4 923.279,1201.61 923.866,1198.9 924.452,1199.16 925.038,1203.71 925.625,1206.49 926.211,1203.75 926.798,1201.16 927.384,1199.8 927.971,1198.83 928.557,1199.38 929.143,1201.16 929.73,1204.18 930.316,1205.8 930.903,1207.33 931.489,1208.58 932.075,1208.6 932.662,1209.85 933.248,1205.47 933.835,1204.23 934.421,1204.13 935.007,1204.15 935.594,1201.38 936.18,1201.51 936.767,1200.34 937.353,1200.29 937.94,1200.54 938.526,1200.91 939.112,1199.63 939.699,1198.38 940.285,1197.37 940.872,1199.29 941.458,1198.25 942.044,1198.54 942.631,1198.8 943.217,1199.26 943.804,1199.74 944.39,1198.74 944.976,1199.21 945.563,1199.51 946.149,1198.12 946.736,1196.99 947.322,1195.98 947.909,1194.85 948.495,1196.62 949.081,1198.43 949.668,1195.97 950.254,1194.74 950.841,1196.67 951.427,1198.52 952.013,1196.32 952.6,1196.61 953.186,1198.46 953.773,1198.76 954.359,1200.88 954.945,1202.12 955.532,1203.73 956.118,1205.43 956.705,1205.32 957.291,1206.72 957.878,1206.4 958.464,1204.84 959.05,1203.59 959.637,1201.19 960.223,1201.5 960.81,1204.24 961.396,1204.35 961.982,1201.69 962.569,1202.15 963.155,1201.9 963.742,1202.14 964.328,1202.39 964.915,1202.33 965.501,1202.42 966.087,1202.76 966.674,1203.02 967.26,1204.36 967.847,1205.69 968.433,1207 969.019,1203.9 969.606,1204.23 970.192,1207.05 970.779,1205.56 971.365,1204.23 971.951,1205.58 972.538,1205.79 973.124,1205.73 973.711,1205.41 974.297,1205.2 974.884,1201.33 975.47,1201.44 976.056,1200.16 976.643,1200.12 977.229,1199.2 977.816,1198.11 978.402,1196.75 978.988,1196.03 979.575,1199.18 980.161,1199.34 980.748,1203.74 981.334,1201.06 981.92,1202.86 982.507,1197.51 983.093,1199.16 983.68,1199.39 984.266,1198.32 984.853,1201.18 985.439,1200.16 986.025,1197.5 986.612,1199.21 987.198,1201.01 987.785,1195.56 988.371,1197.42 988.957,1194.79 989.544,1191.27 990.13,1193.59 990.717,1192.68 991.303,1193.17 991.889,1196.19 992.476,1193.77 993.062,1197.21 993.649,1197.39 994.235,1200.49 994.822,1202.3 995.408,1205.18 995.994,1207.86 996.581,1206.27 997.167,1206.37 997.754,1206.38 998.34,1206.23 998.926,1207.25 999.513,1208.52 1000.1,1209.83 1000.69,1212.35 1001.27,1212.22 1001.86,1210.55 1002.44,1210.25 1003.03,1210.09 1003.62,1208.38 1004.2,1209.55 1004.79,1212.03 1005.38,1211.36 1005.96,1212.64 1006.55,1211.98 1007.14,1211.65 1007.72,1211.24 1008.31,1212.3 1008.9,1214.54 1009.48,1211.24 1010.07,1205.28 1010.65,1204.21 1011.24,1204.11 1011.83,1208.17 1012.41,1206.76 1013,1206.54 1013.59,1206.42 1014.17,1206.18 1014.76,1207.42 1015.35,1210.06 1015.93,1212.22 1016.52,1211.95 1017.11,1214.13 1017.69,1213.51 1018.28,1214.57 1018.86,1215.76 1019.45,1212.35 1020.04,1211.81 1020.62,1211.38 1021.21,1212.14 1021.8,1211.74 1022.38,1213.76 1022.97,1210.39 1023.56,1210.03 1024.14,1208.62 1024.73,1205.53 1025.32,1205.56 1025.9,1202.53 1026.49,1202.23 1027.07,1202.28 1027.66,1202.27 1028.25,1201.06 1028.83,1206.68 1029.42,1209.43 1030.01,1202.29 1030.59,1202.24 1031.18,1199.44 1031.77,1202.07 1032.35,1203.58 1032.94,1202.23 1033.52,1205.04 1034.11,1204.92 1034.7,1202.01 1035.28,1200.76 1035.87,1198.25 1036.46,1203.88 1037.04,1204.13 1037.63,1205.44 1038.22,1204.17 1038.8,1202.61 1039.39,1204.31 1039.98,1201.79 1040.56,1201.81 1041.15,1204.46 1041.73,1207.19 1042.32,1209.46 1042.91,1213.17 1043.49,1212.33 1044.08,1209.32 1044.67,1207.79 1045.25,1207.5 1045.84,1207.61 1046.43,1209.85 1047.01,1210.98 1047.6,1209.43 1048.19,1210.34 1048.77,1210.09 1049.36,1209.73 1049.94,1208.01 1050.53,1206.48 1051.12,1206.63 1051.7,1207.73 1052.29,1207.41 1052.88,1207.17 1053.46,1205.41 1054.05,1206.75 1054.64,1208.38 1055.22,1206.68 1055.81,1206.63 1056.39,1207.75 1056.98,1205.01 1057.57,1205.16 1058.15,1204.76 1058.74,1205.87 1059.33,1203.04 1059.91,1203.29 1060.5,1201.96 1061.09,1206.03 1061.67,1204.32 1062.26,1204.3 1062.85,1198.77 1063.43,1200.34 1064.02,1200.74 1064.6,1199.37 1065.19,1199.53 1065.78,1198.37 1066.36,1198.51 1066.95,1197.41 1067.54,1199.24 1068.12,1195.42 1068.71,1196.98 1069.3,1195.74 1069.88,1196.38 1070.47,1199.61 1071.06,1203.99 1071.64,1203.85 1072.23,1207.93 1072.81,1206.18 1073.4,1207.61 1073.99,1207.61 1074.57,1211.51 1075.16,1212.68 1075.75,1210.91 1076.33,1208.92 1076.92,1208.57 1077.51,1208.39 1078.09,1206.32 1078.68,1203.66 1079.26,1203.78 1079.85,1206.47 1080.44,1207.83 1081.02,1204.63 1081.61,1203.29 1082.2,1204.69 1082.78,1201.81 1083.37,1203.39 1083.96,1204.7 1084.54,1205.89 1085.13,1208.38 1085.72,1205.17 1086.3,1205.19 1086.89,1207.75 1087.47,1206.13 1088.06,1203.07 1088.65,1203.06 1089.23,1199.14 1089.82,1203.38 1090.41,1203.58 1090.99,1202.3 1091.58,1202.38 1092.17,1202.59 1092.75,1201.02 1093.34,1202.59 1093.93,1202.67 1094.51,1204.03 1095.1,1205.28 1095.68,1203.75 1096.27,1209.12 1096.86,1209.04 1097.44,1207.4 1098.03,1207.18 1098.62,1207.18 1099.2,1207.18 1099.79,1204.21 1100.38,1205.86 1100.96,1205.59 1101.55,1206.95 1102.14,1205.61 1102.72,1204.29 1103.31,1207 1103.89,1208.03 1104.48,1205.09 1105.07,1201.19 1105.65,1204 1106.24,1205.38 1106.83,1203.77 1107.41,1206.6 1108,1203.76 1108.59,1202.67 1109.17,1200.01 1109.76,1202.95 1110.34,1204.27 1110.93,1203.1 1111.52,1201.61 1112.1,1198.66 1112.69,1198.62 1113.28,1195.99 1113.86,1199.03 1114.45,1199.28 1115.04,1196.89 1115.62,1197.43 1116.21,1198.98 1116.8,1200.41 1117.38,1201.74 1117.97,1200.64 1118.55,1200.89 1119.14,1203.93 1119.73,1205.26 1120.31,1208.12 1120.9,1209.22 1121.49,1208.95 1122.07,1208.66 1122.66,1206.87 1123.25,1202.89 1123.83,1201.74 1124.42,1207.37 1125.01,1206.91 1125.59,1204.17 1126.18,1206.58 1126.76,1206.43 1127.35,1206.08 1127.94,1204.56 1128.52,1205.58 1129.11,1209.61 1129.7,1206.23 1130.28,1204.79 1130.87,1203.26 1131.46,1203.56 1132.04,1205.19 1132.63,1204.91 1133.21,1207.68 1133.8,1207.33 1134.39,1204.65 1134.97,1203.14 1135.56,1201.59 1136.15,1205.63 1136.73,1203.12 1137.32,1203.38 1137.91,1205.19 1138.49,1203.65 1139.08,1201.9 1139.67,1200.77 1140.25,1203.47 1140.84,1202.31 1141.42,1203.89 1142.01,1202.5 1142.6,1202.62 1143.18,1202.86 1143.77,1200.16 1144.36,1199.21 1144.94,1198.04 1145.53,1201.17 1146.12,1201.4 1146.7,1200.11 1147.29,1198.91 1147.88,1197.75 1148.46,1200.77 1149.05,1199.52 1149.63,1199.7 1150.22,1202.42 1150.81,1203.93 1151.39,1202.28 1151.98,1205.02 1152.57,1205.04 1153.15,1204.88 1153.74,1204.83 1154.33,1206.14 1154.91,1206.05 1155.5,1204.58 1156.09,1204.62 1156.67,1203.34 1157.26,1202.13 1157.84,1202.24 1158.43,1202.25 1159.02,1203.81 1159.6,1205.01 1160.19,1203.4 1160.78,1203.65 1161.36,1199.34 1161.95,1196.55 1162.54,1198.41 1163.12,1198.57 1163.71,1197.72 1164.29,1198.12 1164.88,1198.28 1165.47,1200.04 1166.05,1200.12 1166.64,1197.47 1167.23,1199.26 1167.81,1200.61 1168.4,1202.27 1168.99,1203.79 1169.57,1202.67 1170.16,1201.1 1170.75,1202.43 1171.33,1203.9 1171.92,1203.83 1172.5,1202.35 1173.09,1202.33 1173.68,1202.25 1174.26,1203.5 1174.85,1206.33 1175.44,1207.48 1176.02,1204.66 1176.61,1204.52 1177.2,1204.5 1177.78,1202.7 1178.37,1202.62 1178.96,1202.55 1179.54,1201.39 1180.13,1202.93 1180.71,1204.09 1181.3,1206.71 1181.89,1206.37 1182.47,1207.52 1183.06,1207.44 1183.65,1207.37 1184.23,1204.45 1184.82,1203.99 1185.41,1203.86 1185.99,1201.05 1186.58,1198.37 1187.16,1198.86 1187.75,1196.37 1188.34,1195.31 1188.92,1198.49 1189.51,1197.7 1190.1,1198.04 1190.68,1198.25 1191.27,1200.84 1191.86,1199.64 1192.44,1202.63 1193.03,1200.04 1193.62,1200.02 1194.2,1197.63 1194.79,1199.29 1195.37,1202.53 1195.96,1201.3 1196.55,1201.31 1197.13,1202.76 1197.72,1198.54 1198.31,1198.62 1198.89,1198.91 1199.48,1200.68 1200.07,1199.19 1200.65,1198.14 1201.24,1199.84 1201.83,1200.26 1202.41,1200.25 1203,1200.4 1203.58,1200.78 1204.17,1202.31 1204.76,1203.8 1205.34,1201.22 1205.93,1201.54 1206.52,1203.14 1207.1,1203.24 1207.69,1204.5 1208.28,1202.81 1208.86,1200.15 1209.45,1202.16 1210.03,1203.71 1210.62,1202.12 1211.21,1200.76 1211.79,1202.38 1212.38,1203.97 1212.97,1202.21 1213.55,1203.69 1214.14,1200.9 1214.73,1201.08 1215.31,1199.89 1215.9,1198.62 1216.49,1198.81 1217.07,1200.49 1217.66,1200.61 1218.24,1200.71 1218.83,1199.36 1219.42,1198.22 1220,1201.43 1220.59,1200.16 1221.18,1201.78 1221.76,1200.25 1222.35,1200.11 1222.94,1200.04 1223.52,1201.68 1224.11,1201.74 1224.7,1204.32 1225.28,1207.03 1225.87,1208.07 1226.45,1207.74 1227.04,1206.07 1227.63,1204.56 1228.21,1208.31 1228.8,1206.83 1229.39,1206.68 1229.97,1206.72 1230.56,1206.16 1231.15,1204.8 1231.73,1202.12 1232.32,1203.48 1232.91,1204.98 1233.49,1206.2 1234.08,1206.09 1234.66,1204.76 1235.25,1204.69 1235.84,1207.34 1236.42,1205.55 1237.01,1206.67 1237.6,1205.01 1238.18,1206.3 1238.77,1204.78 1239.36,1202.09 1239.94,1202.25 1240.53,1202.4 1241.11,1202.71 1241.7,1201.36 1242.29,1201.78 1242.87,1199.1 1243.46,1198.2 1244.05,1197.15 1244.63,1197.48 1245.22,1196.45 1245.81,1196.63 1246.39,1197.95 1246.98,1198.26 1247.57,1197.26 1248.15,1197.62 1248.74,1199.41 1249.32,1200.88 1249.91,1199.76 1250.5,1199.8 1251.08,1198.63 1251.67,1198.92 1252.26,1199.42 1252.84,1198.27 1253.43,1199.9 1254.02,1199.04 1254.6,1198.89 1255.19,1200.58 1255.78,1200.84 1256.36,1202.42 1256.95,1202.45 1257.53,1202.65 1258.12,1204.17 1258.71,1204.18 1259.29,1201.2 1259.88,1201.2 1260.47,1205.17 1261.05,1206.36 1261.64,1204.73 1262.23,1203.4 1262.81,1202.2 1263.4,1201.09 1263.98,1201.14 1264.57,1201.15 1265.16,1201.03 1265.74,1201.39 1266.33,1201.67 1266.92,1204.6 1267.5,1203.04 1268.09,1204.47 1268.68,1204.13 1269.26,1205.16 1269.85,1207.75 1270.44,1207.65 1271.02,1205.86 1271.61,1207.13 1272.19,1208.28 1272.78,1208.06 1273.37,1206.76 1273.95,1206.48 1274.54,1206.22 1275.13,1206.22 1275.71,1203.28 1276.3,1203.39 1276.89,1203.23 1277.47,1203.36 1278.06,1205.87 1278.65,1208.78 1279.23,1208.51 1279.82,1208.01 1280.4,1206.47 1280.99,1207.55 1281.58,1207.38 1282.16,1205.78 1282.75,1207.25 1283.34,1205.58 1283.92,1203.87 1284.51,1205.2 1285.1,1206.27 1285.68,1207.77 1286.27,1209 1286.86,1210.05 1287.44,1206.97 1288.03,1205.54 1288.61,1207.98 1289.2,1207.83 1289.79,1200.7 1290.37,1202.38 1290.96,1202.48 1291.55,1199.42 1292.13,1201.06 1292.72,1198.25 1293.31,1198.69 1293.89,1198.98 1294.48,1199.34 1295.06,1197.81 1295.65,1197.95 1296.24,1199.68 1296.82,1204.11 1297.41,1206.81 1298,1206.68 1298.58,1205.32 1299.17,1205.25 1299.76,1207.93 1300.34,1205.22 1300.93,1205.05 1301.52,1206.07 1302.1,1204.49 1302.69,1204.6 1303.27,1203.23 1303.86,1203.04 1304.45,1203.21 1305.03,1204.34 1305.62,1202.93 1306.21,1202.77 1306.79,1201.7 1307.38,1203.24 1307.97,1203.22 1308.55,1204.45 1309.14,1205.74 1309.73,1204.08 1310.31,1205.31 1310.9,1208.05 1311.48,1209.23 1312.07,1211.9 1312.66,1213.06 1313.24,1214.06 1313.83,1213.35 1314.42,1212.85 1315,1210.97 1315.59,1210.49 1316.18,1208.98 1316.76,1205.61 1317.35,1204.01 1317.93,1203.86 1318.52,1205.5 1319.11,1205.34 1319.69,1205.08 1320.28,1207.61 1320.87,1206.09 1321.45,1207.39 1322.04,1209.8 1322.63,1209.35 1323.21,1210.38 1323.8,1209.78 1324.39,1212.17 1324.97,1215.8 1325.56,1213.78 1326.14,1214.28 1326.73,1209.55 1327.32,1210.52 1327.9,1207.48 1328.49,1207.18 1329.08,1205.73 1329.66,1208.54 1330.25,1209.57 1330.84,1209.28 1331.42,1210.58 1332.01,1209.63 1332.6,1209.48 1333.18,1206.46 1333.77,1205.91 1334.35,1204.24 1334.94,1204.06 1335.53,1202.53 1336.11,1202.38 1336.7,1200.97 1337.29,1200.89 1337.87,1201.12 1338.46,1202.66 1339.05,1202.46 1339.63,1201.33 1340.22,1202.79 1340.8,1198.47 1341.39,1196.03 1341.98,1196.33 1342.56,1198.03 1343.15,1196.9 1343.74,1200.24 1344.32,1201.83 1344.91,1201.49 1345.5,1200.34 1346.08,1200.15 1346.67,1198.99 1347.26,1200.49 1347.84,1203.43 1348.43,1201.87 1349.01,1199.11 1349.6,1199.48 1350.19,1198.43 1350.77,1198.64 1351.36,1196.11 1351.95,1195.65 1352.53,1193.33 1353.12,1192.27 1353.71,1194.49 1354.29,1193.32 1354.88,1191.27 1355.47,1193.63 1356.05,1193.97 1356.64,1196.01 1357.22,1195.06 1357.81,1199.5 1358.4,1201.01 1358.98,1201 1359.57,1203.99 1360.16,1205.57 1360.74,1205.48 1361.33,1208.33 1361.92,1208.38 1362.5,1209.53 1363.09,1207.97 1363.68,1204.82 1364.26,1203.32 1364.85,1204.81 1365.43,1204.58 1366.02,1204.25 1366.61,1209.53 1367.19,1208.1 1367.78,1206.23 1368.37,1207.68 1368.95,1206.3 1369.54,1210.49 1370.13,1208.69 1370.71,1208.38 1371.3,1207 1371.88,1205.6 1372.47,1208.48 1373.06,1211.05 1373.64,1209.57 1374.23,1212.44 1374.82,1209.44 1375.4,1206.64 1375.99,1205.21 1376.58,1204.98 1377.16,1206.26 1377.75,1206.15 1378.34,1208.77 1378.92,1209.95 1379.51,1205.27 1380.09,1203.72 1380.68,1199.34 1381.27,1200.94 1381.85,1201.15 1382.44,1201.33 1383.03,1202.66 1383.61,1204.13 1384.2,1204.3 1384.79,1204.39 1385.37,1204.27 1385.96,1205.44 1386.55,1201.17 1387.13,1199.7 1387.72,1198.39 1388.3,1198.86 1388.89,1199.02 1389.48,1202.15 1390.06,1202.06 1390.65,1200.98 1391.24,1199.62 1391.82,1199.87 1392.41,1201.23 1393,1199.96 1393.58,1200.21 1394.17,1198.95 1394.75,1200.36 1395.34,1199.36 1395.93,1200.98 1396.51,1198.29 1397.1,1199.92 1397.69,1197.24 1398.27,1195.86 1398.86,1197.83 1399.45,1196.82 1400.03,1197.21 1400.62,1200.34 1401.21,1199.14 1401.79,1197.71 1402.38,1198.07 1402.96,1198.4 1403.55,1201.26 1404.14,1201.26 1404.72,1201.48 1405.31,1197.61 1405.9,1196.42 1406.48,1196.73 1407.07,1199.86 1407.66,1198.64 1408.24,1199.07 1408.83,1200.77 1409.42,1203.99 1410,1199.97 1410.59,1200.16 1411.17,1196.01 1411.76,1195.02 1412.35,1195.43 1412.93,1194.53 1413.52,1195.18 1414.11,1195.36 1414.69,1197.34 1415.28,1196.35 1415.87,1196.82 1416.45,1196.91 1417.04,1199.95 1417.63,1197.37 1418.21,1196.49 1418.8,1194.09 1419.38,1194.58 1419.97,1196.5 1420.56,1200.91 1421.14,1198.71 1421.73,1200.45 1422.32,1200.49 1422.9,1199.27 1423.49,1200.97 1424.08,1201.33 1424.66,1200.12 1425.25,1201.73 1425.83,1202.99 1426.42,1202.71 1427.01,1204 1427.59,1204.22 1428.18,1205.41 1428.77,1204.28 1429.35,1202.95 1429.94,1202.95 1430.53,1201.37 1431.11,1202.74 1431.7,1202.74 1432.29,1202.73 1432.87,1202.97 1433.46,1201.58 1434.04,1201.43 1434.63,1201.45 1435.22,1204.25 1435.8,1205.4 1436.39,1203.73 1436.98,1205.24 1437.56,1206.22 1438.15,1206.27 1438.74,1207.58 1439.32,1211.7 1439.91,1214.08 1440.5,1212.19 1441.08,1211.75 1441.67,1208.52 1442.25,1208.36 1442.84,1206.74 1443.43,1209.57 1444.01,1207.62 1444.6,1207.41 1445.19,1208.64 1445.77,1207.32 1446.36,1205.83 1446.95,1205.54 1447.53,1205.43 1448.12,1205.54 1448.7,1204.29 1449.29,1203.14 1449.88,1201.78 1450.46,1200.52 1451.05,1201.97 1451.64,1202.01 1452.22,1201.93 1452.81,1206.24 1453.4,1205.75 1453.98,1205.6 1454.57,1206.83 1455.16,1205.53 1455.74,1205.29 1456.33,1204.99 1456.91,1205.18 1457.5,1206.44 1458.09,1207.79 1458.67,1207.88 1459.26,1207.47 1459.85,1206.99 1460.43,1205.39 1461.02,1203.74 1461.61,1205.04 1462.19,1204.7 1462.78,1202.98 1463.37,1201.57 1463.95,1202.11 1464.54,1200.73 1465.12,1199.51 1465.71,1202.4 1466.3,1201.16 1466.88,1202.69 1467.47,1202.9 1468.06,1202.74 1468.64,1202.92 1469.23,1203.19 1469.82,1205.87 1470.4,1208.44 1470.99,1206.93 1471.57,1205.29 1472.16,1201.53 1472.75,1201.7 1473.33,1203.44 1473.92,1202.15 1474.51,1203.53 1475.09,1200.89 1475.68,1202.51 1476.27,1202.57 1476.85,1201.31 1477.44,1202.85 1478.03,1201.36 1478.61,1202.56 1479.2,1202.39 1479.78,1201.08 1480.37,1202.42 1480.96,1203.83 1481.54,1203.47 1482.13,1200.78 1482.72,1200.78 1483.3,1202.27 1483.89,1204.97 1484.48,1203.49 1485.06,1203.21 1485.65,1201.53 1486.24,1201.34 1486.82,1202.62 1487.41,1203 1487.99,1208.43 1488.58,1209.25 1489.17,1206.15 1489.75,1205.69 1490.34,1205.6 1490.93,1208.16 1491.51,1206.9 1492.1,1207.67 1492.69,1207.35 1493.27,1203 1493.86,1202.88 1494.45,1202.93 1495.03,1201.59 1495.62,1201.74 1496.2,1203.34 1496.79,1201.77 1497.38,1203.16 1497.96,1207.57 1498.55,1205.98 1499.14,1204.58 1499.72,1204.78 1500.31,1207.48 1500.9,1207.26 1501.48,1205.63 1502.07,1205.4 1502.65,1207.93 1503.24,1209.08 1503.83,1209.99 1504.41,1211.97 1505,1210.42 1505.59,1208.69 1506.17,1209.78 1506.76,1206.48 1507.35,1207.65 1507.93,1204.41 1508.52,1205.75 1509.11,1204.07 1509.69,1203.67 1510.28,1202.05 1510.86,1204.6 1511.45,1203.31 1512.04,1203.23 1512.62,1203.18 1513.21,1203.14 1513.8,1201.87 1514.38,1200.53 1514.97,1202.21 1515.56,1206.43 1516.14,1200.84 1516.73,1202.14 1517.32,1199.44 1517.9,1198.05 1518.49,1196.97 1519.07,1196 1519.66,1197.46 1520.25,1200.55 1520.83,1202.31 1521.42,1207.73 1522.01,1207.35 1522.59,1205.69 1523.18,1203 1523.77,1199.9 1524.35,1199.94 1524.94,1201.06 1525.52,1201.33 1526.11,1201.3 1526.7,1201.38 1527.28,1204.15 1527.87,1206.98 1528.46,1208.17 1529.04,1210.75 1529.63,1208.86 1530.22,1208.67 1530.8,1208.46 1531.39,1208.22 1531.98,1206.54 1532.56,1207.62 1533.15,1207.42 1533.73,1208.72 1534.32,1211.23 1534.91,1209.42 1535.49,1210.5 1536.08,1209.9 1536.67,1209.62 1537.25,1209.17 1537.84,1207.61 1538.43,1208.7 1539.01,1208.68 1539.6,1209.74 1540.19,1210.92 1540.77,1210.57 1541.36,1209.01 1541.94,1208.58 1542.53,1209.61 1543.12,1207.66 1543.7,1207.5 1544.29,1207.33 1544.88,1207.2 1545.46,1205.65 1546.05,1207.83 1546.64,1206.4 1547.22,1204.81 1547.81,1203.36 1548.4,1203.54 1548.98,1204.87 1549.57,1203.26 1550.15,1204.67 1550.74,1205.8 1551.33,1206.9 1551.91,1204.41 1552.5,1204.71 1553.09,1202.21 1553.67,1202.28 1554.26,1205.22 1554.85,1204.06 1555.43,1205.19 1556.02,1205.21 1556.6,1202.11 1557.19,1199.27 1557.78,1199.5 1558.36,1199.47 1558.95,1202.43 1559.54,1202.25 1560.12,1202.5 1560.71,1202.45 1561.3,1199.98 1561.88,1198.73 1562.47,1197.42 1563.06,1197.71 1563.64,1197.99 1564.23,1198.2 1564.81,1197.02 1565.4,1197.24 1565.99,1197.56 1566.57,1199.18 1567.16,1198.03 1567.75,1198.18 1568.33,1198.57 1568.92,1198.81 1569.51,1197.6 1570.09,1198.97 1570.68,1197.58 1571.27,1199.08 1571.85,1199.16 1572.44,1202.11 1573.02,1201.95 1573.61,1203.3 1574.2,1204.51 1574.78,1203.11 1575.37,1203.14 1575.96,1204.42 1576.54,1203.01 1577.13,1203.11 1577.72,1203.23 1578.3,1203.3 1578.89,1203.23 1579.47,1203.03 1580.06,1204.54 1580.65,1203.1 1581.23,1203.05 1581.82,1204.4 1582.41,1202.73 1582.99,1206.82 1583.58,1205.39 1584.17,1204.42 1584.75,1203.01 1585.34,1201.61 1585.93,1200.39 1586.51,1201.85 1587.1,1198.03 1587.68,1202.52 1588.27,1202.62 1588.86,1202.69 1589.44,1201.39 1590.03,1201.23 1590.62,1201.12 1591.2,1203.92 1591.79,1203.89 1592.38,1202.51 1592.96,1202.69 1593.55,1204.23 1594.14,1204.11 1594.72,1204.02 1595.31,1202.42 1595.89,1205.38 1596.48,1202.73 1597.07,1202.83 1597.65,1201.53 1598.24,1201.82 1598.83,1203.15 1599.41,1204.48 1600,1203.15 1600.59,1203.03 1601.17,1203.03 1601.76,1201.2 1602.34,1202.81 1602.93,1201.37 1603.52,1201.29 1604.1,1202.68 1604.69,1202.8 1605.28,1201.57 1605.86,1201.79 1606.45,1202.03 1607.04,1198.16 1607.62,1197.27 1608.21,1197.57 1608.8,1199.49 1609.38,1195.86 1609.97,1196.32 1610.55,1198.41 1611.14,1199.74 1611.73,1200.16 1612.31,1198.95 1612.9,1197.93 1613.49,1199.46 1614.07,1201.15 1614.66,1197.24 1615.25,1198.78 1615.83,1197.57 1616.42,1198.96 1617.01,1199.39 1617.59,1202.32 1618.18,1203.77 1618.76,1204.88 1619.35,1203.66 1619.94,1199.4 1620.52,1200.99 1621.11,1201.42 1621.7,1209.8 1622.28,1209.43 1622.87,1209.15 1623.46,1211.64 1624.04,1211.35 1624.63,1212.32 1625.22,1211.82 1625.8,1210.09 1626.39,1208.55 1626.97,1206.78 1627.56,1206.33 1628.15,1206.19 1628.73,1202.33 1629.32,1202.16 1629.91,1201.1 1630.49,1201.09 1631.08,1201.11 1631.67,1198.2 1632.25,1199.72 1632.84,1198.84 1633.42,1199.56 1634.01,1199.91 1634.6,1200.16 1635.18,1202.17 1635.77,1201.11 1636.36,1203.97 1636.94,1210.82 1637.53,1208.85 1638.12,1205.98 1638.7,1205.81 1639.29,1206.94 1639.88,1206.89 1640.46,1208.44 1641.05,1208.06 1641.63,1207.51 1642.22,1207.26 1642.81,1208.39 1643.39,1209.41 1643.98,1211.94 1644.57,1210.07 1645.15,1209.46 1645.74,1209.15 1646.33,1208.57 1646.91,1211.31 1647.5,1212.33 1648.09,1210.49 1648.67,1207.46 1649.26,1205.67 1649.84,1204.01 1650.43,1202.76 1651.02,1201.53 1651.6,1202.82 1652.19,1204.68 1652.78,1201.84 1653.36,1207.43 1653.95,1207.31 1654.54,1207.14 1655.12,1203.96 1655.71,1202.47 1656.29,1201.29 1656.88,1202.61 1657.47,1201.25 1658.05,1203.96 1658.64,1204.12 1659.23,1204.13 1659.81,1204.12 1660.4,1203.8 1660.99,1204.97 1661.57,1203.55 1662.16,1203.5 1662.75,1205.08 1663.33,1209.12 1663.92,1209.92 1664.5,1210.6 1665.09,1207.34 1665.68,1206.89 1666.26,1206.82 1666.85,1206.54 1667.44,1204.94 1668.02,1206.03 1668.61,1207.23 1669.2,1204.27 1669.78,1202.7 1670.37,1202.6 1670.96,1203.79 1671.54,1202.26 1672.13,1203.48 1672.71,1203.62 1673.3,1203.58 1673.89,1207.42 1674.47,1207.09 1675.06,1205.56 1675.65,1205.47 1676.23,1205.26 1676.82,1203.8 1677.41,1202.33 1677.99,1201.2 1678.58,1204.42 1679.17,1204.43 1679.75,1204.47 1680.34,1201.65 1680.92,1201.72 1681.51,1203.03 1682.1,1204.39 1682.68,1207.1 1683.27,1206.81 1683.86,1206.45 1684.44,1208.73 1685.03,1205.82 1685.62,1208.46 1686.2,1215.08 1686.79,1217.02 1687.37,1216.44 1687.96,1214.57 1688.55,1212.83 1689.13,1212.11 1689.72,1211.43 1690.31,1213.85 1690.89,1209.3 1691.48,1207.85 1692.07,1207.77 1692.65,1210.53 1693.24,1212.92 1693.83,1212.38 1694.41,1213.33 1695,1215.5 1695.58,1216.12 1696.17,1214.08 1696.76,1212.37 1697.34,1211.58 1697.93,1211.16 1698.52,1212.2 1699.1,1211.84 1699.69,1211.34 1700.28,1212.29 1700.86,1210.51 1701.45,1206.22 1702.04,1204.69 1702.62,1206.01 1703.21,1201.59 1703.79,1201.58 1704.38,1201.51 1704.97,1202.95 1705.55,1202.89 1706.14,1204.13 1706.73,1199.82 1707.31,1200.01 1707.9,1200.36 1708.49,1199.25 1709.07,1199.58 1709.66,1198.27 1710.24,1199.98 1710.83,1199.9 1711.42,1198.6 1712,1196 1712.59,1198.16 1713.18,1195.59 1713.76,1193.21 1714.35,1193.71 1714.94,1192.68 1715.52,1193.02 1716.11,1190.79 1716.7,1190.05 1717.28,1186.57 1717.87,1187.5 1718.45,1189.85 1719.04,1189.14 1719.63,1185.71 1720.21,1186.6 1720.8,1186.31 1721.39,1185.94 1721.97,1187 1722.56,1189.5 1723.15,1190.27 1723.73,1195.33 1724.32,1198.67 1724.91,1197.42 1725.49,1200.68 1726.08,1200.54 1726.66,1202.17 1727.25,1200.54 1727.84,1202.13 1728.42,1202.16 1729.01,1203.66 1729.6,1201.09 1730.18,1199.95 1730.77,1200.3 1731.36,1201.68 1731.94,1200.25 1732.53,1200.43 1733.11,1201.97 1733.7,1203.37 1734.29,1208.94 1734.87,1208.77 1735.46,1207.26 1736.05,1207.1 1736.63,1201.46 1737.22,1200.5 1737.81,1197.93 1738.39,1196.91 1738.98,1197.59 1739.57,1193.73 1740.15,1192.82 1740.74,1194.56 1741.32,1196.6 1741.91,1196.94 1742.5,1197.11 1743.08,1200 1743.67,1201.46 1744.26,1203.34 1744.84,1203.4 1745.43,1203.38 1746.02,1203.43 1746.6,1203.62 1747.19,1203.63 1747.78,1203.52 1748.36,1203.57 1748.95,1202.21 1749.53,1199.13 1750.12,1199.36 1750.71,1199.71 1751.29,1198.42 1751.88,1201.51 1752.47,1203.18 1753.05,1203.49 1753.64,1203.57 1754.23,1204.97 1754.81,1205.96 1755.4,1207.2 1755.99,1205.4 1756.57,1206.67 1757.16,1207.66 1757.74,1206.19 1758.33,1207.22 1758.92,1210.1 1759.5,1209.69 1760.09,1213.04 1760.68,1215.05 1761.26,1209.98 1761.85,1208.04 1762.44,1204.07 1763.02,1204.03 1763.61,1203.86 1764.19,1203.72 1764.78,1202.63 1765.37,1202.38 1765.95,1199.67 1766.54,1201.18 1767.13,1201.09 1767.71,1199.84 1768.3,1200.07 1768.89,1200.52 1769.47,1202.14 1770.06,1203.63 1770.65,1205.12 1771.23,1206.54 1771.82,1204.78 1772.4,1201.83 1772.99,1201.92 1773.58,1202.22 1774.16,1202.2 1774.75,1204.94 1775.34,1205 1775.92,1203.36 1776.51,1204.65 1777.1,1204.52 1777.68,1199.87 1778.27,1201.5 1778.86,1201.48 1779.44,1200.04 1780.03,1198.75 1780.61,1199.23 1781.2,1197.9 1781.79,1200.55 1782.37,1200.84 1782.96,1201.18 1783.55,1201.26 1784.13,1201.15 1784.72,1201.02 1785.31,1199.74 1785.89,1199.94 1786.48,1200.22 1787.06,1197.76 1787.65,1198.2 1788.24,1202.49 1788.82,1203.81 1789.41,1204.96 1790,1204.8 1790.58,1206.32 1791.17,1207.52 1791.76,1205.99 1792.34,1208.56 1792.93,1208.3 1793.52,1207.72 1794.1,1204.97 1794.69,1207.59 1795.27,1206.03 1795.86,1207.23 1796.45,1208.41 1797.03,1208.26 1797.62,1206.76 1798.21,1203.87 1798.79,1200.87 1799.38,1201.19 1799.97,1198.62 1800.55,1197.54 1801.14,1197.81 1801.73,1198.38 1802.31,1201.23 1802.9,1204.17 1803.48,1204.27 1804.07,1202.67 1804.66,1205.39 1805.24,1203.86 1805.83,1204.18 1806.42,1202.8 1807,1204.23 1807.59,1202.93 1808.18,1201.74 1808.76,1199.04 1809.35,1197.93 1809.94,1196.64 1810.52,1198.73 1811.11,1200.14 1811.69,1203.04 1812.28,1202.89 1812.87,1201.22 1813.45,1202.66 1814.04,1201.29 1814.63,1201.49 1815.21,1202.97 1815.8,1205.62 1816.39,1204.1 1816.97,1202.72 1817.56,1202.52 1818.14,1204.06 1818.73,1203.76 1819.32,1203.79 1819.9,1205.06 1820.49,1207.8 1821.08,1210.27 1821.66,1209.87 1822.25,1209.36 1822.84,1207.51 1823.42,1205.87 1824.01,1206.03 1824.6,1205.83 1825.18,1205.62 1825.77,1206.88 1826.35,1205.13 1826.94,1203.6 1827.53,1199.74 1828.11,1205.38 1828.7,1203.95 1829.29,1203.94 1829.87,1203.92 1830.46,1205.1 1831.05,1205.21 1831.63,1203.52 1832.22,1202.13 1832.81,1200.91 1833.39,1202.27 1833.98,1203.71 1834.56,1201.13 1835.15,1201.35 1835.74,1202.99 1836.32,1204.52 1836.91,1205.69 1837.5,1205.92 1838.08,1205.98 1838.67,1205.8 1839.26,1205.48 1839.84,1208.2 1840.43,1207.88 1841.01,1206.15 1841.6,1203.35 1842.19,1203.24 1842.77,1204.83 1843.36,1204.71 1843.95,1205.88 1844.53,1204.45 1845.12,1204.37 1845.71,1205.81 1846.29,1204.24 1846.88,1202.98 1847.47,1203.03 1848.05,1202.97 1848.64,1205.8 1849.22,1205.56 1849.81,1205.36 1850.4,1202.48 1850.98,1201.24 1851.57,1206.77 1852.16,1206.54 1852.74,1205.22 1853.33,1204.79 1853.92,1201.82 1854.5,1201.95 1855.09,1200.51 1855.68,1200.6 1856.26,1199.18 1856.85,1199.7 1857.43,1196.72 1858.02,1201.3 1858.61,1202.56 1859.19,1202.52 1859.78,1202.41 1860.37,1203.93 1860.95,1204 1861.54,1202.74 1862.13,1204.22 1862.71,1206.86 1863.3,1206.48 1863.88,1205.05 1864.47,1203.69 1865.06,1203.4 1865.64,1200.64 1866.23,1203.46 1866.82,1202.25 1867.4,1202.11 1867.99,1202.38 1868.58,1203.82 1869.16,1203.87 1869.75,1206.47 1870.34,1210.36 1870.92,1212.71 1871.51,1216.27 1872.09,1212.93 1872.68,1212.76 1873.27,1214.56 1873.85,1208.39 1874.44,1205.13 1875.03,1203.87 1875.61,1203.82 1876.2,1203.89 1876.79,1202.35 1877.37,1205.28 1877.96,1204.88 1878.55,1207.63 1879.13,1207.5 1879.72,1207.64 1880.3,1208.48 1880.89,1209.86 1881.48,1206.82 1882.06,1205.45 1882.65,1206.37 1883.24,1207.65 1883.82,1209.97 1884.41,1208.08 1885,1210.16 1885.58,1213.81 1886.17,1214.57 1886.76,1212.77 1887.34,1210.65 1887.93,1210.36 1888.51,1205.84 1889.1,1203.81 1889.69,1202.57 1890.27,1200.95 1890.86,1199.36 1891.45,1198.46 1892.03,1195.69 1892.62,1196.01 1893.21,1192.31 1893.79,1194.48 1894.38,1196.54 1894.96,1194.14 1895.55,1194.49 1896.14,1194.9 1896.72,1195.57 1897.31,1197.7 1897.9,1200.89 1898.48,1203.49 1899.07,1205.06 1899.66,1205.99 1900.24,1203.03 1900.83,1203.03 1901.42,1201.51 1902,1200.36 1902.59,1200.47 1903.17,1203.32 1903.76,1204.65 1904.35,1203.03 1904.93,1204.49 1905.52,1203.04 1906.11,1205.9 1906.69,1208.43 1907.28,1206.5 1907.87,1207.58 1908.45,1204.97 1909.04,1204.8 1909.63,1201.95 1910.21,1199.13 1910.8,1202.12 1911.38,1203.92 1911.97,1203.93 1912.56,1207.99 1913.14,1205.19 1913.73,1205 1914.32,1203.34 1914.9,1201.81 1915.49,1203.41 1916.08,1202.46 1916.66,1203.98 1917.25,1202.37 1917.83,1202.66 1918.42,1199.56 1919.01,1196.98 1919.59,1193.14 1920.18,1192.4 1920.77,1192.68 1921.35,1193.48 1921.94,1193.02 1922.53,1193.52 1923.11,1194.25 1923.7,1196.49 1924.29,1199.77 1924.87,1197.27 1925.46,1199.14 1926.04,1204.89 1926.63,1202.07 1927.22,1200.73 1927.8,1200.65 1928.39,1202.17 1928.98,1203.55 1929.56,1202.11 1930.15,1201.08 1930.74,1198.36 1931.32,1199.98 1931.91,1201.96 1932.5,1202.01 1933.08,1199.33 1933.67,1199.34 1934.25,1196.79 1934.84,1191.44 1935.43,1193.75 1936.01,1198.45 1936.6,1199.87 1937.19,1204.24 1937.77,1204.32 1938.36,1208.45 1938.95,1206.89 1939.53,1207 1940.12,1205.65 1940.71,1204.08 1941.29,1202.61 1941.88,1201.38 1942.46,1202.96 1943.05,1201.46 1943.64,1201.48 1944.22,1201.72 1944.81,1202.97 1945.4,1204.46 1945.98,1204.19 1946.57,1202.73 1947.16,1201.52 1947.74,1201.61 1948.33,1200.3 1948.91,1202.98 1949.5,1203.05 1950.09,1200.18 1950.67,1202.79 1951.26,1204.3 1951.85,1207.34 1952.43,1208.79 1953.02,1210.06 1953.61,1209.64 1954.19,1208.19 1954.78,1206.6 1955.37,1206.64 1955.95,1206.31 1956.54,1207.61 1957.12,1210.4 1957.71,1208.4 1958.3,1206.87 1958.88,1206.5 1959.47,1207.78 1960.06,1200.41 1960.64,1199.23 1961.23,1201.15 1961.82,1199.86 1962.4,1201.64 1962.99,1203.05 1963.58,1204.28 1964.16,1205.46 1964.75,1202.31 1965.33,1201.01 1965.92,1199.81 1966.51,1198.9 1967.09,1198.84 1967.68,1197.67 1968.27,1199.56 1968.85,1198.39 1969.44,1200.11 1970.03,1200.45 1970.61,1200.73 1971.2,1202.16 1971.78,1203.75 1972.37,1205.13 1972.96,1206.46 1973.54,1204.78 1974.13,1202 1974.72,1205 1975.3,1204.98 1975.89,1207.52 1976.48,1203.14 1977.06,1202.74 1977.65,1200.12 1978.24,1197.61 1978.82,1197.94 1979.41,1195.56 1979.99,1195.99 1980.58,1196.39 1981.17,1198.21 1981.75,1197.12 1982.34,1198.88 1982.93,1201.74 1983.51,1201.73 1984.1,1201.74 1984.69,1201.94 1985.27,1202.2 1985.86,1203.67 1986.45,1199.42 1987.03,1200.96 1987.62,1197.94 1988.2,1196.69 1988.79,1197.13 1989.38,1196.34 1989.96,1199.49 1990.55,1199.8 1991.14,1200.01 1991.72,1204.5 1992.31,1206.06 1992.9,1207.18 1993.48,1208.37 1994.07,1208.12 1994.65,1209.26 1995.24,1212.95 1995.83,1210.9 1996.41,1210.29 1997,1207.01 1997.59,1206.49 1998.17,1206.48 1998.76,1206.26 1999.35,1206.28 1999.93,1207.35 2000.52,1208.38 2001.11,1205.37 2001.69,1205.35 2002.28,1205.33 2002.86,1205.35 2003.45,1206.29 2004.04,1206.2 2004.62,1208.86 2005.21,1207.11 2005.8,1209.62 2006.38,1207.75 2006.97,1207.31 2007.56,1207.04 2008.14,1208.46 2008.73,1208.25 2009.32,1208.05 2009.9,1206.38 2010.49,1203.38 2011.07,1203.56 2011.66,1203.33 2012.25,1202.08 2012.83,1200.92 2013.42,1202.59 2014.01,1202.63 2014.59,1201.24 2015.18,1198.41 2015.77,1194.53 2016.35,1193.4 2016.94,1193.81 2017.53,1195.97 2018.11,1194.91 2018.7,1195.22 2019.28,1198.61 2019.87,1197.09 2020.46,1198.65 2021.04,1198.56 2021.63,1199.11 2022.22,1199.35 2022.8,1198.15 2023.39,1195.5 2023.98,1195.98 2024.56,1195.05 2025.15,1195.64 2025.73,1197.64 2026.32,1199.42 2026.91,1197.22 2027.49,1196.21 2028.08,1196.6 2028.67,1195.69 2029.25,1196.06 2029.84,1195.27 2030.43,1198.41 2031.01,1198.56 2031.6,1200.24 2032.19,1201.65 2032.77,1203.38 2033.36,1204.32 2033.94,1204.16 2034.53,1204.22 2035.12,1205.64 2035.7,1204.04 2036.29,1202.67 2036.88,1201.34 2037.46,1200.1 2038.05,1202.77 2038.64,1203.05 2039.22,1205.76 2039.81,1203.77 2040.4,1204.87 2040.98,1204.8 2041.57,1203.66 2042.15,1206.14 2042.74,1204.42 2043.33,1204.76 2043.91,1206.02 2044.5,1206.92 2045.09,1209.56 2045.67,1212.24 2046.26,1213.23 2046.85,1211.59 2047.43,1212.54 2048.02,1210.74 2048.6,1210.59 2049.19,1208.92 2049.78,1211.2 2050.36,1208.2 2050.95,1206.25 2051.54,1203.36 2052.12,1203.23 2052.71,1202.97 2053.3,1204.34 2053.88,1201.49 2054.47,1203.24 2055.06,1203.33 2055.64,1204.93 2056.23,1205.8 2056.81,1204.09 2057.4,1205.48 2057.99,1206.74 2058.57,1206.49 2059.16,1206.54 2059.75,1206.58 2060.33,1206.34 2060.92,1204.9 2061.51,1204.56 2062.09,1204.35 2062.68,1205.61 2063.27,1204.16 2063.85,1206.89 2064.44,1206.68 2065.02,1206.53 2065.61,1206.18 2066.2,1206.22 2066.78,1205.7 2067.37,1210.91 2067.96,1211.55 2068.54,1212.22 2069.13,1211.94 2069.72,1212.81 2070.3,1208.98 2070.89,1207.08 2071.48,1206.96 2072.06,1205.36 2072.65,1203.78 2073.23,1203.83 2073.82,1202.3 2074.41,1203.7 2074.99,1203.65 2075.58,1202.27 2076.17,1202.43 2076.75,1198.35 2077.34,1197.76 2077.93,1199.34 2078.51,1201.1 2079.1,1202.86 2079.68,1204.33 2080.27,1203.35 2080.86,1204.71 2081.44,1203.33 2082.03,1203.26 2082.62,1204.5 2083.2,1203.02 2083.79,1199.02 2084.38,1201.89 2084.96,1200.56 2085.55,1199.12 2086.14,1197.86 2086.72,1196.59 2087.31,1202.44 2087.89,1196.85 2088.48,1195.69 2089.07,1193.34 2089.65,1195.21 2090.24,1196.98 2090.83,1197.1 2091.41,1195.97 2092,1196.84 2092.59,1198.61 2093.17,1198.85 2093.76,1197.58 2094.35,1200.54 2094.93,1199.19 2095.52,1199.29 2096.1,1202.15 2096.69,1203.53 2097.28,1203.79 2097.86,1202.31 2098.45,1202.3 2099.04,1202.04 2099.62,1200.6 2100.21,1197.74 2100.8,1201.03 2101.38,1203.6 2101.97,1202.05 2102.55,1199.35 2103.14,1198.13 2103.73,1197.2 2104.31,1196.28 2104.9,1193.79 2105.49,1194.26 2106.07,1199.09 2106.66,1199.5 2107.25,1201.04 2107.83,1202.72 2108.42,1202.88 2109.01,1206.8 2109.59,1208.08 2110.18,1206.59 2110.76,1202.25 2111.35,1205.21 2111.94,1203.86 2112.52,1203.76 2113.11,1203.63 2113.7,1204.91 2114.28,1201.09 2114.87,1198.52 2115.46,1198.52 2116.04,1201.54 2116.63,1201.75 2117.22,1201.6 2117.8,1201.92 2118.39,1200.59 2118.97,1203.43 2119.56,1203.32 2120.15,1204.88 2120.73,1200.96 2121.32,1196.91 2121.91,1196.96 2122.49,1198.66 2123.08,1198.58 2123.67,1200.03 2124.25,1198.71 2124.84,1199.12 2125.42,1200.99 2126.01,1200.98 2126.6,1203.89 2127.18,1202.91 2127.77,1202.85 2128.36,1203.16 2128.94,1203.18 2129.53,1200.45 2130.12,1200.75 2130.7,1200.76 2131.29,1200.95 2131.88,1200.85 2132.46,1201.07 2133.05,1202.81 2133.63,1204.58 2134.22,1201.94 2134.81,1202.06 2135.39,1201.81 2135.98,1201.85 2136.57,1201.75 2137.15,1204.36 2137.74,1203.06 2138.33,1204.47 2138.91,1205.55 2139.5,1204.11 2140.09,1202.8 2140.67,1204.16 2141.26,1201.01 2141.84,1199.76 2142.43,1202.8 2143.02,1205.81 2143.6,1209.92 2144.19,1205.24 2144.78,1204.84 2145.36,1202.89 2145.95,1205.82 2146.54,1205.95 2147.12,1204.61 2147.71,1206.1 2148.3,1204.41 2148.88,1205.73 2149.47,1205.81 2150.05,1205.25 2150.64,1208.1 2151.23,1209.36 2151.81,1210.02 2152.4,1211.02 2152.99,1212.04 2153.57,1214.25 2154.16,1212.56 2154.75,1213.19 2155.33,1208.68 2155.92,1206.82 2156.5,1208.02 2157.09,1210.67 2157.68,1210.07 2158.26,1208.3 \"/>\n<path clip-path=\"url(#clip682)\" d=\"M986.025 1203.79 L986.612 1203.79 L987.198 1203.79 L987.785 1203.79 L988.371 1203.79 L988.957 1203.79 L989.544 1203.79 L990.13 1203.79 L990.717 1203.79 L991.303 1203.79 L991.889 1203.79 L992.476 1203.79 L993.062 1203.79 L993.649 1203.79 L994.235 1203.79 L994.822 1203.79 L995.408 1203.79 L995.994 1203.79 L996.581 1203.79 L997.167 1203.79 L997.754 1203.79 L998.34 1203.79 L998.926 1203.79 L999.513 1203.79 L1000.1 1203.79 L1000.69 1203.79 L1001.27 1203.79 L1001.86 1203.79 L1002.44 1203.79 L1003.03 1203.79 L1003.62 1203.79 L1004.2 1203.79 L1004.79 1203.79 L1005.38 1203.79 L1005.96 1203.79 L1006.55 1203.79 L1007.14 1203.79 L1007.72 1203.79 L1008.31 1203.79 L1008.9 1203.79 L1009.48 1203.79 L1010.07 1203.79 L1010.65 1203.79 L1011.24 1203.79 L1011.83 1203.79 L1012.41 1203.79 L1013 1203.79 L1013.59 1203.79 L1014.17 1203.79 L1014.76 1203.79 L1015.35 1203.79 L1015.93 1203.79 L1016.52 1203.79 L1017.11 1203.79 L1017.69 1203.79 L1018.28 1203.79 L1018.86 1203.79 L1019.45 1203.79 L1020.04 1203.79 L1020.62 1203.79 L1021.21 1203.79 L1021.8 1203.79 L1022.38 1203.79 L1022.97 1203.79 L1023.56 1203.79 L1024.14 1203.79 L1024.73 1203.79 L1025.32 1203.79 L1025.9 1203.79 L1026.49 1203.79 L1027.07 1203.79 L1027.66 1203.79 L1028.25 1203.79 L1028.83 1203.79 L1029.42 1203.79 L1030.01 1203.79 L1030.59 1203.79 L1031.18 1203.79 L1031.77 1203.79 L1032.35 1203.79 L1032.94 1203.79 L1033.52 1203.79 L1034.11 1203.79 L1034.7 1203.79 L1035.28 1203.79 L1035.87 1203.79 L1036.46 1203.79 L1037.04 1203.79 L1037.63 1203.79 L1038.22 1203.79 L1038.8 1203.79 L1039.39 1203.79 L1039.98 1203.79 L1040.56 1203.79 L1041.15 1203.79 L1041.73 1203.79 L1042.32 1203.79 L1042.91 1203.79 L1043.49 1203.79 L1044.08 1203.79 L1044.67 1203.79 L1045.25 1203.79 L1045.84 1203.79 L1046.43 1203.79 L1047.01 1203.79 L1047.6 1203.79 L1048.19 1203.79 L1048.77 1203.79 L1049.36 1203.79 L1049.94 1203.79 L1050.53 1203.79 L1051.12 1203.79 L1051.7 1203.79 L1052.29 1203.79 L1052.88 1203.79 L1053.46 1203.79 L1054.05 1203.79 L1054.64 1203.79 L1055.22 1203.79 L1055.81 1203.79 L1056.39 1203.79 L1056.98 1203.79 L1057.57 1203.79 L1058.15 1203.79 L1058.74 1203.79 L1059.33 1203.79 L1059.91 1203.79 L1060.5 1203.79 L1061.09 1203.79 L1061.67 1203.79 L1062.26 1203.79 L1062.85 1203.79 L1063.43 1203.79 L1064.02 1203.79 L1064.6 1203.79 L1065.19 1203.79 L1065.78 1203.79 L1066.36 1203.79 L1066.95 1203.79 L1067.54 1203.79 L1068.12 1203.79 L1068.71 1203.79 L1069.3 1203.79 L1069.88 1203.79 L1070.47 1203.79 L1071.06 1203.79 L1071.64 1203.79 L1072.23 1203.79 L1072.81 1203.79 L1073.4 1203.79 L1073.99 1203.79 L1074.57 1203.79 L1075.16 1203.79 L1075.75 1203.79 L1076.33 1203.79 L1076.92 1203.79 L1077.51 1203.79 L1078.09 1203.79 L1078.68 1203.79 L1079.26 1203.79 L1079.85 1203.79 L1080.44 1203.79 L1081.02 1203.79 L1081.61 1203.79 L1082.2 1203.79 L1082.78 1203.79 L1083.37 1203.79 L1083.96 1203.79 L1084.54 1203.79 L1085.13 1203.79 L1085.72 1203.79 L1086.3 1203.79 L1086.89 1203.79 L1087.47 1203.79 L1088.06 1203.79 L1088.65 1203.79 L1089.23 1203.79 L1089.82 1203.79 L1090.41 1203.79 L1090.99 1203.79 L1091.58 1203.79 L1092.17 1203.79 L1092.75 1203.79 L1093.34 1203.79 L1093.93 1203.79 L1094.51 1203.79 L1095.1 1203.79 L1095.68 1203.79 L1096.27 1203.79 L1096.86 1203.79 L1097.44 1203.79 L1098.03 1203.79 L1098.62 1203.79 L1099.2 1203.79 L1099.79 1203.79 L1100.38 1203.79 L1100.96 1203.79 L1101.55 1203.79 L1102.14 1203.79 L1102.72 1203.79 L1103.31 1203.79 L1103.89 1203.79 L1104.48 1203.79 L1105.07 1203.79 L1105.65 1203.79 L1106.24 1203.79 L1106.83 1203.79 L1107.41 1203.79 L1108 1203.79 L1108.59 1203.79 L1109.17 1203.79 L1109.76 1203.79 L1110.34 1203.79 L1110.93 1203.79 L1111.52 1203.79 L1112.1 1203.79 L1112.69 1203.79 L1113.28 1203.79 L1113.86 1203.79 L1114.45 1203.79 L1115.04 1203.79 L1115.62 1203.79 L1116.21 1203.79 L1116.8 1203.79 L1117.38 1203.79 L1117.97 1203.79 L1118.55 1203.79 L1119.14 1203.79 L1119.73 1203.79 L1120.31 1203.79 L1120.9 1203.79 L1121.49 1203.79 L1122.07 1203.79 L1122.66 1203.79 L1123.25 1203.79 L1123.83 1203.79 L1124.42 1203.79 L1125.01 1203.79 L1125.59 1203.79 L1126.18 1203.79 L1126.76 1203.79 L1127.35 1203.79 L1127.94 1203.79 L1128.52 1203.79 L1129.11 1203.79 L1129.7 1203.79 L1130.28 1203.79 L1130.87 1203.79 L1131.46 1203.79 L1132.04 1203.79 L1132.63 1203.79 L1133.21 1203.79 L1133.8 1203.79 L1134.39 1203.79 L1134.97 1203.79 L1135.56 1203.79 L1136.15 1203.79 L1136.73 1203.79 L1137.32 1203.79 L1137.91 1203.79 L1138.49 1203.79 L1139.08 1203.79 L1139.67 1203.79 L1140.25 1203.79 L1140.84 1203.79 L1141.42 1203.79 L1142.01 1203.79 L1142.6 1203.79 L1143.18 1203.79 L1143.77 1203.79 L1144.36 1203.79 L1144.94 1203.79 L1145.53 1203.79 L1146.12 1203.79 L1146.7 1203.79 L1147.29 1203.79 L1147.88 1203.79 L1148.46 1203.79 L1149.05 1203.79 L1149.63 1203.79 L1150.22 1203.79 L1150.81 1203.79 L1151.39 1203.79 L1151.98 1203.79 L1152.57 1203.79 L1153.15 1203.79 L1153.74 1203.79 L1154.33 1203.79 L1154.91 1203.79 L1155.5 1203.79 L1156.09 1203.79 L1156.67 1203.79 L1157.26 1203.79 L1157.84 1203.79 L1158.43 1203.79 L1159.02 1203.79 L1159.6 1203.79 L1160.19 1203.79 L1160.78 1203.79 L1161.36 1203.79 L1161.95 1203.79 L1162.54 1203.79 L1163.12 1203.79 L1163.71 1203.79 L1164.29 1203.79 L1164.88 1203.79 L1165.47 1203.79 L1166.05 1203.79 L1166.64 1203.79 L1167.23 1203.79 L1167.81 1203.79 L1168.4 1203.79 L1168.99 1203.79 L1169.57 1203.79 L1170.16 1203.79 L1170.75 1203.79 L1171.33 1203.79 L1171.92 1203.79 L1172.5 1203.79 L1173.09 1203.79 L1173.68 1203.79 L1174.26 1203.79 L1174.85 1203.79 L1175.44 1203.79 L1176.02 1203.79 L1176.61 1203.79 L1177.2 1203.79 L1177.78 1203.79 L1178.37 1203.79 L1178.96 1203.79 L1179.54 1203.79 L1180.13 1203.79 L1180.71 1203.79 L1181.3 1203.79 L1181.89 1203.79 L1182.47 1203.79 L1183.06 1203.79 L1183.65 1203.79 L1184.23 1203.79 L1184.82 1203.79 L1185.41 1203.79 L1185.99 1203.79 L1186.58 1203.79 L1187.16 1203.79 L1187.75 1203.79 L1188.34 1203.79 L1188.92 1203.79 L1189.51 1203.79 L1190.1 1203.79 L1190.68 1203.79 L1191.27 1203.79 L1191.86 1203.79 L1192.44 1203.79 L1193.03 1203.79 L1193.62 1203.79 L1194.2 1203.79 L1194.79 1203.79 L1195.37 1203.79 L1195.96 1203.79 L1196.55 1203.79 L1197.13 1203.79 L1197.72 1203.79 L1198.31 1203.79 L1198.89 1203.79 L1199.48 1203.79 L1200.07 1203.79 L1200.65 1203.79 L1201.24 1203.79 L1201.83 1203.79 L1202.41 1203.79 L1203 1203.79 L1203.58 1203.79 L1204.17 1203.79 L1204.76 1203.79 L1205.34 1203.79 L1205.93 1203.79 L1206.52 1203.79 L1207.1 1203.79 L1207.69 1203.79 L1208.28 1203.79 L1208.86 1203.79 L1209.45 1203.79 L1210.03 1203.79 L1210.62 1203.79 L1211.21 1203.79 L1211.79 1203.79 L1212.38 1203.79 L1212.97 1203.79 L1213.55 1203.79 L1214.14 1203.79 L1214.73 1203.79 L1215.31 1203.79 L1215.9 1203.79 L1216.49 1203.79 L1217.07 1203.79 L1217.66 1203.79 L1218.24 1203.79 L1218.83 1203.79 L1219.42 1203.79 L1220 1203.79 L1220.59 1203.79 L1221.18 1203.79 L1221.76 1203.79 L1222.35 1203.79 L1222.94 1203.79 L1223.52 1203.79 L1224.11 1203.79 L1224.7 1203.79 L1225.28 1203.79 L1225.87 1203.79 L1226.45 1203.79 L1227.04 1203.79 L1227.63 1203.79 L1228.21 1203.79 L1228.8 1203.79 L1229.39 1203.79 L1229.97 1203.79 L1230.56 1203.79 L1231.15 1203.79 L1231.73 1203.79 L1232.32 1203.79 L1232.91 1203.79 L1233.49 1203.79 L1234.08 1203.79 L1234.66 1203.79 L1235.25 1203.79 L1235.84 1203.79 L1236.42 1203.79 L1237.01 1203.79 L1237.6 1203.79 L1238.18 1203.79 L1238.77 1203.79 L1239.36 1203.79 L1239.94 1203.79 L1240.53 1203.79 L1241.11 1203.79 L1241.7 1203.79 L1242.29 1203.79 L1242.87 1203.79 L1243.46 1203.79 L1244.05 1203.79 L1244.63 1203.79 L1245.22 1203.79 L1245.81 1203.79 L1246.39 1203.79 L1246.98 1203.79 L1247.57 1203.79 L1248.15 1203.79 L1248.74 1203.79 L1249.32 1203.79 L1249.91 1203.79 L1250.5 1203.79 L1251.08 1203.79 L1251.67 1203.79 L1252.26 1203.79 L1252.84 1203.79 L1253.43 1203.79 L1254.02 1203.79 L1254.6 1203.79 L1255.19 1203.79 L1255.78 1203.79 L1256.36 1203.79 L1256.95 1203.79 L1257.53 1203.79 L1258.12 1203.79 L1258.71 1203.79 L1259.29 1203.79 L1259.88 1203.79 L1260.47 1203.79 L1261.05 1203.79 L1261.64 1203.79 L1262.23 1203.79 L1262.81 1203.79 L1263.4 1203.79 L1263.98 1203.79 L1264.57 1203.79 L1265.16 1203.79 L1265.74 1203.79 L1266.33 1203.79 L1266.92 1203.79 L1267.5 1203.79 L1268.09 1203.79 L1268.68 1203.79 L1269.26 1203.79 L1269.85 1203.79 L1270.44 1203.79 L1271.02 1203.79 L1271.61 1203.79 L1272.19 1203.79 L1272.78 1203.79 L1273.37 1203.79 L1273.95 1203.79 L1274.54 1203.79 L1275.13 1203.79 L1275.71 1203.79 L1276.3 1203.79 L1276.89 1203.79 L1277.47 1203.79 L1278.06 1203.79 L1278.65 1203.79 L1279.23 1203.79 L1279.82 1203.79 L1280.4 1203.79 L1280.99 1203.79 L1281.58 1203.79 L1282.16 1203.79 L1282.75 1203.79 L1283.34 1203.79 L1283.92 1203.79 L1284.51 1203.79 L1285.1 1203.79 L1285.68 1203.79 L1286.27 1203.79 L1286.86 1203.79 L1287.44 1203.79 L1288.03 1203.79 L1288.61 1203.79 L1289.2 1203.79 L1289.79 1203.79 L1290.37 1203.79 L1290.96 1203.79 L1291.55 1203.79 L1292.13 1203.79 L1292.72 1203.79 L1293.31 1203.79 L1293.89 1203.79 L1294.48 1203.79 L1295.06 1203.79 L1295.65 1203.79 L1296.24 1203.79 L1296.82 1203.79 L1297.41 1203.79 L1298 1203.79 L1298.58 1203.79 L1299.17 1203.79 L1299.76 1203.79 L1300.34 1203.79 L1300.93 1203.79 L1301.52 1203.79 L1302.1 1203.79 L1302.69 1203.79 L1303.27 1203.79 L1303.86 1203.79 L1304.45 1203.79 L1305.03 1203.79 L1305.62 1203.79 L1306.21 1203.79 L1306.79 1203.79 L1307.38 1203.79 L1307.97 1203.79 L1308.55 1203.79 L1309.14 1203.79 L1309.73 1203.79 L1310.31 1203.79 L1310.9 1203.79 L1311.48 1203.79 L1312.07 1203.79 L1312.66 1203.79 L1313.24 1203.79 L1313.83 1203.79 L1314.42 1203.79 L1315 1203.79 L1315.59 1203.79 L1316.18 1203.79 L1316.76 1203.79 L1317.35 1203.79 L1317.93 1203.79 L1318.52 1203.79 L1319.11 1203.79 L1319.69 1203.79 L1320.28 1203.79 L1320.87 1203.79 L1321.45 1203.79 L1322.04 1203.79 L1322.63 1203.79 L1323.21 1203.79 L1323.8 1203.79 L1324.39 1203.79 L1324.97 1203.79 L1325.56 1203.79 L1326.14 1203.79 L1326.73 1203.79 L1327.32 1203.79 L1327.9 1203.79 L1328.49 1203.79 L1329.08 1203.79 L1329.66 1203.79 L1330.25 1203.79 L1330.84 1203.79 L1331.42 1203.79 L1332.01 1203.79 L1332.6 1203.79 L1333.18 1203.79 L1333.77 1203.79 L1334.35 1203.79 L1334.94 1203.79 L1335.53 1203.79 L1336.11 1203.79 L1336.7 1203.79 L1337.29 1203.79 L1337.87 1203.79 L1338.46 1203.79 L1339.05 1203.79 L1339.63 1203.79 L1340.22 1203.79 L1340.8 1203.79 L1341.39 1203.79 L1341.98 1203.79 L1342.56 1203.79 L1343.15 1203.79 L1343.74 1203.79 L1344.32 1203.79 L1344.91 1203.79 L1345.5 1203.79 L1346.08 1203.79 L1346.67 1203.79 L1347.26 1203.79 L1347.84 1203.79 L1348.43 1203.79 L1349.01 1203.79 L1349.6 1203.79 L1350.19 1203.79 L1350.77 1203.79 L1351.36 1203.79 L1351.95 1203.79 L1352.53 1203.79 L1353.12 1203.79 L1353.71 1203.79 L1354.29 1203.79 L1354.88 1203.79 L1355.47 1203.79 L1356.05 1203.79 L1356.64 1203.79 L1357.22 1203.79 L1357.81 1203.79 L1358.4 1203.79 L1358.98 1203.79 L1359.57 1203.79 L1360.16 1203.79 L1360.74 1203.79 L1361.33 1203.79 L1361.92 1203.79 L1362.5 1203.79 L1363.09 1203.79 L1363.68 1203.79 L1364.26 1203.79 L1364.85 1203.79 L1365.43 1203.79 L1366.02 1203.79 L1366.61 1203.79 L1367.19 1203.79 L1367.78 1203.79 L1368.37 1203.79 L1368.95 1203.79 L1369.54 1203.79 L1370.13 1203.79 L1370.71 1203.79 L1371.3 1203.79 L1371.88 1203.79 L1372.47 1203.79 L1373.06 1203.79 L1373.64 1203.79 L1374.23 1203.79 L1374.82 1203.79 L1375.4 1203.79 L1375.99 1203.79 L1376.58 1203.79 L1377.16 1203.79 L1377.75 1203.79 L1378.34 1203.79 L1378.92 1203.79 L1379.51 1203.79 L1380.09 1203.79 L1380.68 1203.79 L1381.27 1203.79 L1381.85 1203.79 L1382.44 1203.79 L1383.03 1203.79 L1383.61 1203.79 L1384.2 1203.79 L1384.79 1203.79 L1385.37 1203.79 L1385.96 1203.79 L1386.55 1203.79 L1387.13 1203.79 L1387.72 1203.79 L1388.3 1203.79 L1388.89 1203.79 L1389.48 1203.79 L1390.06 1203.79 L1390.65 1203.79 L1391.24 1203.79 L1391.82 1203.79 L1392.41 1203.79 L1393 1203.79 L1393.58 1203.79 L1394.17 1203.79 L1394.75 1203.79 L1395.34 1203.79 L1395.93 1203.79 L1396.51 1203.79 L1397.1 1203.79 L1397.69 1203.79 L1398.27 1203.79 L1398.86 1203.79 L1399.45 1203.79 L1400.03 1203.79 L1400.62 1203.79 L1401.21 1203.79 L1401.79 1203.79 L1402.38 1203.79 L1402.96 1203.79 L1403.55 1203.79 L1404.14 1203.79 L1404.72 1203.79 L1405.31 1203.79 L1405.9 1203.79 L1406.48 1203.79 L1407.07 1203.79 L1407.66 1203.79 L1408.24 1203.79 L1408.83 1203.79 L1409.42 1203.79 L1410 1203.79 L1410.59 1203.79 L1411.17 1203.79 L1411.76 1203.79 L1412.35 1203.79 L1412.93 1203.79 L1413.52 1203.79 L1414.11 1203.79 L1414.69 1203.79 L1415.28 1203.79 L1415.87 1203.79 L1416.45 1203.79 L1417.04 1203.79 L1417.63 1203.79 L1418.21 1203.79 L1418.8 1203.79 L1419.38 1203.79 L1419.97 1203.79 L1420.56 1203.79 L1421.14 1203.79 L1421.73 1203.79 L1422.32 1203.79 L1422.9 1203.79 L1423.49 1203.79 L1424.08 1203.79 L1424.66 1203.79 L1425.25 1203.79 L1425.83 1203.79 L1426.42 1203.79 L1427.01 1203.79 L1427.59 1203.79 L1428.18 1203.79 L1428.77 1203.79 L1429.35 1203.79 L1429.94 1203.79 L1430.53 1203.79 L1431.11 1203.79 L1431.7 1203.79 L1432.29 1203.79 L1432.87 1203.79 L1433.46 1203.79 L1434.04 1203.79 L1434.63 1203.79 L1435.22 1203.79 L1435.8 1203.79 L1436.39 1203.79 L1436.98 1203.79 L1437.56 1203.79 L1438.15 1203.79 L1438.74 1203.79 L1439.32 1203.79 L1439.91 1203.79 L1440.5 1203.79 L1441.08 1203.79 L1441.67 1203.79 L1442.25 1203.79 L1442.84 1203.79 L1443.43 1203.79 L1444.01 1203.79 L1444.6 1203.79 L1445.19 1203.79 L1445.77 1203.79 L1446.36 1203.79 L1446.95 1203.79 L1447.53 1203.79 L1448.12 1203.79 L1448.7 1203.79 L1449.29 1203.79 L1449.88 1203.79 L1450.46 1203.79 L1451.05 1203.79 L1451.64 1203.79 L1452.22 1203.79 L1452.81 1203.79 L1453.4 1203.79 L1453.98 1203.79 L1454.57 1203.79 L1455.16 1203.79 L1455.74 1203.79 L1456.33 1203.79 L1456.91 1203.79 L1457.5 1203.79 L1458.09 1203.79 L1458.67 1203.79 L1459.26 1203.79 L1459.85 1203.79 L1460.43 1203.79 L1461.02 1203.79 L1461.61 1203.79 L1462.19 1203.79 L1462.78 1203.79 L1463.37 1203.79 L1463.95 1203.79 L1464.54 1203.79 L1465.12 1203.79 L1465.71 1203.79 L1466.3 1203.79 L1466.88 1203.79 L1467.47 1203.79 L1468.06 1203.79 L1468.64 1203.79 L1469.23 1203.79 L1469.82 1203.79 L1470.4 1203.79 L1470.99 1203.79 L1471.57 1203.79 L1472.16 1203.79 L1472.75 1203.79 L1473.33 1203.79 L1473.92 1203.79 L1474.51 1203.79 L1475.09 1203.79 L1475.68 1203.79 L1476.27 1203.79 L1476.85 1203.79 L1477.44 1203.79 L1478.03 1203.79 L1478.61 1203.79 L1479.2 1203.79 L1479.78 1203.79 L1480.37 1203.79 L1480.96 1203.79 L1481.54 1203.79 L1482.13 1203.79 L1482.72 1203.79 L1483.3 1203.79 L1483.89 1203.79 L1484.48 1203.79 L1485.06 1203.79 L1485.65 1203.79 L1486.24 1203.79 L1486.82 1203.79 L1487.41 1203.79 L1487.99 1203.79 L1488.58 1203.79 L1489.17 1203.79 L1489.75 1203.79 L1490.34 1203.79 L1490.93 1203.79 L1491.51 1203.79 L1492.1 1203.79 L1492.69 1203.79 L1493.27 1203.79 L1493.86 1203.79 L1494.45 1203.79 L1495.03 1203.79 L1495.62 1203.79 L1496.2 1203.79 L1496.79 1203.79 L1497.38 1203.79 L1497.96 1203.79 L1498.55 1203.79 L1499.14 1203.79 L1499.72 1203.79 L1500.31 1203.79 L1500.9 1203.79 L1501.48 1203.79 L1502.07 1203.79 L1502.65 1203.79 L1503.24 1203.79 L1503.83 1203.79 L1504.41 1203.79 L1505 1203.79 L1505.59 1203.79 L1506.17 1203.79 L1506.76 1203.79 L1507.35 1203.79 L1507.93 1203.79 L1508.52 1203.79 L1509.11 1203.79 L1509.69 1203.79 L1510.28 1203.79 L1510.86 1203.79 L1511.45 1203.79 L1512.04 1203.79 L1512.62 1203.79 L1513.21 1203.79 L1513.8 1203.79 L1514.38 1203.79 L1514.97 1203.79 L1515.56 1203.79 L1516.14 1203.79 L1516.73 1203.79 L1517.32 1203.79 L1517.9 1203.79 L1518.49 1203.79 L1519.07 1203.79 L1519.66 1203.79 L1520.25 1203.79 L1520.83 1203.79 L1521.42 1203.79 L1522.01 1203.79 L1522.59 1203.79 L1523.18 1203.79 L1523.77 1203.79 L1524.35 1203.79 L1524.94 1203.79 L1525.52 1203.79 L1526.11 1203.79 L1526.7 1203.79 L1527.28 1203.79 L1527.87 1203.79 L1528.46 1203.79 L1529.04 1203.79 L1529.63 1203.79 L1530.22 1203.79 L1530.8 1203.79 L1531.39 1203.79 L1531.98 1203.79 L1532.56 1203.79 L1533.15 1203.79 L1533.73 1203.79 L1534.32 1203.79 L1534.91 1203.79 L1535.49 1203.79 L1536.08 1203.79 L1536.67 1203.79 L1537.25 1203.79 L1537.84 1203.79 L1538.43 1203.79 L1539.01 1203.79 L1539.6 1203.79 L1540.19 1203.79 L1540.77 1203.79 L1541.36 1203.79 L1541.94 1203.79 L1542.53 1203.79 L1543.12 1203.79 L1543.7 1203.79 L1544.29 1203.79 L1544.88 1203.79 L1545.46 1203.79 L1546.05 1203.79 L1546.64 1203.79 L1547.22 1203.79 L1547.81 1203.79 L1548.4 1203.79 L1548.98 1203.79 L1549.57 1203.79 L1550.15 1203.79 L1550.74 1203.79 L1551.33 1203.79 L1551.91 1203.79 L1552.5 1203.79 L1553.09 1203.79 L1553.67 1203.79 L1554.26 1203.79 L1554.85 1203.79 L1555.43 1203.79 L1556.02 1203.79 L1556.6 1203.79 L1557.19 1203.79 L1557.78 1203.79 L1558.36 1203.79 L1558.95 1203.79 L1559.54 1203.79 L1560.12 1203.79 L1560.71 1203.79 L1561.3 1203.79 L1561.88 1203.79 L1562.47 1203.79 L1563.06 1203.79 L1563.64 1203.79 L1564.23 1203.79 L1564.81 1203.79 L1565.4 1203.79 L1565.99 1203.79 L1566.57 1203.79 L1567.16 1203.79 L1567.75 1203.79 L1568.33 1203.79 L1568.92 1203.79 L1569.51 1203.79 L1570.09 1203.79 L1570.68 1203.79 L1571.27 1203.79 L1571.85 1203.79 L1572.44 1203.79 L1573.02 1203.79 L1573.61 1203.79 L1574.2 1203.79 L1574.78 1203.79 L1575.37 1203.79 L1575.96 1203.79 L1576.54 1203.79 L1577.13 1203.79 L1577.72 1203.79 L1578.3 1203.79 L1578.89 1203.79 L1579.47 1203.79 L1580.06 1203.79 L1580.65 1203.79 L1581.23 1203.79 L1581.82 1203.79 L1582.41 1203.79 L1582.99 1203.79 L1583.58 1203.79 L1584.17 1203.79 L1584.75 1203.79 L1585.34 1203.79 L1585.93 1203.79 L1586.51 1203.79 L1587.1 1203.79 L1587.68 1203.79 L1588.27 1203.79 L1588.86 1203.79 L1589.44 1203.79 L1590.03 1203.79 L1590.62 1203.79 L1591.2 1203.79 L1591.79 1203.79 L1592.38 1203.79 L1592.96 1203.79 L1593.55 1203.79 L1594.14 1203.79 L1594.72 1203.79 L1595.31 1203.79 L1595.89 1203.79 L1596.48 1203.79 L1597.07 1203.79 L1597.65 1203.79 L1598.24 1203.79 L1598.83 1203.79 L1599.41 1203.79 L1600 1203.79 L1600.59 1203.79 L1601.17 1203.79 L1601.76 1203.79 L1602.34 1203.79 L1602.93 1203.79 L1603.52 1203.79 L1604.1 1203.79 L1604.69 1203.79 L1605.28 1203.79 L1605.86 1203.79 L1606.45 1203.79 L1607.04 1203.79 L1607.62 1203.79 L1608.21 1203.79 L1608.8 1203.79 L1609.38 1203.79 L1609.97 1203.79 L1610.55 1203.79 L1611.14 1203.79 L1611.73 1203.79 L1612.31 1203.79 L1612.9 1203.79 L1613.49 1203.79 L1614.07 1203.79 L1614.66 1203.79 L1615.25 1203.79 L1615.83 1203.79 L1616.42 1203.79 L1617.01 1203.79 L1617.59 1203.79 L1618.18 1203.79 L1618.76 1203.79 L1619.35 1203.79 L1619.94 1203.79 L1620.52 1203.79 L1621.11 1203.79 L1621.7 1203.79 L1622.28 1203.79 L1622.87 1203.79 L1623.46 1203.79 L1624.04 1203.79 L1624.63 1203.79 L1625.22 1203.79 L1625.8 1203.79 L1626.39 1203.79 L1626.97 1203.79 L1627.56 1203.79 L1628.15 1203.79 L1628.73 1203.79 L1629.32 1203.79 L1629.91 1203.79 L1630.49 1203.79 L1631.08 1203.79 L1631.67 1203.79 L1632.25 1203.79 L1632.84 1203.79 L1633.42 1203.79 L1634.01 1203.79 L1634.6 1203.79 L1635.18 1203.79 L1635.77 1203.79 L1636.36 1203.79 L1636.94 1203.79 L1637.53 1203.79 L1638.12 1203.79 L1638.7 1203.79 L1639.29 1203.79 L1639.88 1203.79 L1640.46 1203.79 L1641.05 1203.79 L1641.63 1203.79 L1642.22 1203.79 L1642.81 1203.79 L1643.39 1203.79 L1643.98 1203.79 L1644.57 1203.79 L1645.15 1203.79 L1645.74 1203.79 L1646.33 1203.79 L1646.91 1203.79 L1647.5 1203.79 L1648.09 1203.79 L1648.67 1203.79 L1649.26 1203.79 L1649.84 1203.79 L1650.43 1203.79 L1651.02 1203.79 L1651.6 1203.79 L1652.19 1203.79 L1652.78 1203.79 L1653.36 1203.79 L1653.95 1203.79 L1654.54 1203.79 L1655.12 1203.79 L1655.71 1203.79 L1656.29 1203.79 L1656.88 1203.79 L1657.47 1203.79 L1658.05 1203.79 L1658.64 1203.79 L1659.23 1203.79 L1659.81 1203.79 L1660.4 1203.79 L1660.99 1203.79 L1661.57 1203.79 L1662.16 1203.79 L1662.75 1203.79 L1663.33 1203.79 L1663.92 1203.79 L1664.5 1203.79 L1665.09 1203.79 L1665.68 1203.79 L1666.26 1203.79 L1666.85 1203.79 L1667.44 1203.79 L1668.02 1203.79 L1668.61 1203.79 L1669.2 1203.79 L1669.78 1203.79 L1670.37 1203.79 L1670.96 1203.79 L1671.54 1203.79 L1672.13 1203.79 L1672.71 1203.79 L1673.3 1203.79 L1673.89 1203.79 L1674.47 1203.79 L1675.06 1203.79 L1675.65 1203.79 L1676.23 1203.79 L1676.82 1203.79 L1677.41 1203.79 L1677.99 1203.79 L1678.58 1203.79 L1679.17 1203.79 L1679.75 1203.79 L1680.34 1203.79 L1680.92 1203.79 L1681.51 1203.79 L1682.1 1203.79 L1682.68 1203.79 L1683.27 1203.79 L1683.86 1203.79 L1684.44 1203.79 L1685.03 1203.79 L1685.62 1203.79 L1686.2 1203.79 L1686.79 1203.79 L1687.37 1203.79 L1687.96 1203.79 L1688.55 1203.79 L1689.13 1203.79 L1689.72 1203.79 L1690.31 1203.79 L1690.89 1203.79 L1691.48 1203.79 L1692.07 1203.79 L1692.65 1203.79 L1693.24 1203.79 L1693.83 1203.79 L1694.41 1203.79 L1695 1203.79 L1695.58 1203.79 L1696.17 1203.79 L1696.76 1203.79 L1697.34 1203.79 L1697.93 1203.79 L1698.52 1203.79 L1699.1 1203.79 L1699.69 1203.79 L1700.28 1203.79 L1700.86 1203.79 L1701.45 1203.79 L1702.04 1203.79 L1702.62 1203.79 L1703.21 1203.79 L1703.79 1203.79 L1704.38 1203.79 L1704.97 1203.79 L1705.55 1203.79 L1706.14 1203.79 L1706.73 1203.79 L1707.31 1203.79 L1707.9 1203.79 L1708.49 1203.79 L1709.07 1203.79 L1709.66 1203.79 L1710.24 1203.79 L1710.83 1203.79 L1711.42 1203.79 L1712 1203.79 L1712.59 1203.79 L1713.18 1203.79 L1713.76 1203.79 L1714.35 1203.79 L1714.94 1203.79 L1715.52 1203.79 L1716.11 1203.79 L1716.7 1203.79 L1717.28 1203.79 L1717.87 1203.79 L1718.45 1203.79 L1719.04 1203.79 L1719.63 1203.79 L1720.21 1203.79 L1720.8 1203.79 L1721.39 1203.79 L1721.97 1203.79 L1722.56 1203.79 L1723.15 1203.79 L1723.73 1203.79 L1724.32 1203.79 L1724.91 1203.79 L1725.49 1203.79 L1726.08 1203.79 L1726.66 1203.79 L1727.25 1203.79 L1727.84 1203.79 L1728.42 1203.79 L1729.01 1203.79 L1729.6 1203.79 L1730.18 1203.79 L1730.77 1203.79 L1731.36 1203.79 L1731.94 1203.79 L1732.53 1203.79 L1733.11 1203.79 L1733.7 1203.79 L1734.29 1203.79 L1734.87 1203.79 L1735.46 1203.79 L1736.05 1203.79 L1736.63 1203.79 L1737.22 1203.79 L1737.81 1203.79 L1738.39 1203.79 L1738.98 1203.79 L1739.57 1203.79 L1740.15 1203.79 L1740.74 1203.79 L1741.32 1203.79 L1741.91 1203.79 L1742.5 1203.79 L1743.08 1203.79 L1743.67 1203.79 L1744.26 1203.79 L1744.84 1203.79 L1745.43 1203.79 L1746.02 1203.79 L1746.6 1203.79 L1747.19 1203.79 L1747.78 1203.79 L1748.36 1203.79 L1748.95 1203.79 L1749.53 1203.79 L1750.12 1203.79 L1750.71 1203.79 L1751.29 1203.79 L1751.88 1203.79 L1752.47 1203.79 L1753.05 1203.79 L1753.64 1203.79 L1754.23 1203.79 L1754.81 1203.79 L1755.4 1203.79 L1755.99 1203.79 L1756.57 1203.79 L1757.16 1203.79 L1757.74 1203.79 L1758.33 1203.79 L1758.92 1203.79 L1759.5 1203.79 L1760.09 1203.79 L1760.68 1203.79 L1761.26 1203.79 L1761.85 1203.79 L1762.44 1203.79 L1763.02 1203.79 L1763.61 1203.79 L1764.19 1203.79 L1764.78 1203.79 L1765.37 1203.79 L1765.95 1203.79 L1766.54 1203.79 L1767.13 1203.79 L1767.71 1203.79 L1768.3 1203.79 L1768.89 1203.79 L1769.47 1203.79 L1770.06 1203.79 L1770.65 1203.79 L1771.23 1203.79 L1771.82 1203.79 L1772.4 1203.79 L1772.99 1203.79 L1773.58 1203.79 L1774.16 1203.79 L1774.75 1203.79 L1775.34 1203.79 L1775.92 1203.79 L1776.51 1203.79 L1777.1 1203.79 L1777.68 1203.79 L1778.27 1203.79 L1778.86 1203.79 L1779.44 1203.79 L1780.03 1203.79 L1780.61 1203.79 L1781.2 1203.79 L1781.79 1203.79 L1782.37 1203.79 L1782.96 1203.79 L1783.55 1203.79 L1784.13 1203.79 L1784.72 1203.79 L1785.31 1203.79 L1785.89 1203.79 L1786.48 1203.79 L1787.06 1203.79 L1787.65 1203.79 L1788.24 1203.79 L1788.82 1203.79 L1789.41 1203.79 L1790 1203.79 L1790.58 1203.79 L1791.17 1203.79 L1791.76 1203.79 L1792.34 1203.79 L1792.93 1203.79 L1793.52 1203.79 L1794.1 1203.79 L1794.69 1203.79 L1795.27 1203.79 L1795.86 1203.79 L1796.45 1203.79 L1797.03 1203.79 L1797.62 1203.79 L1798.21 1203.79 L1798.79 1203.79 L1799.38 1203.79 L1799.97 1203.79 L1800.55 1203.79 L1801.14 1203.79 L1801.73 1203.79 L1802.31 1203.79 L1802.9 1203.79 L1803.48 1203.79 L1804.07 1203.79 L1804.66 1203.79 L1805.24 1203.79 L1805.83 1203.79 L1806.42 1203.79 L1807 1203.79 L1807.59 1203.79 L1808.18 1203.79 L1808.76 1203.79 L1809.35 1203.79 L1809.94 1203.79 L1810.52 1203.79 L1811.11 1203.79 L1811.69 1203.79 L1812.28 1203.79 L1812.87 1203.79 L1813.45 1203.79 L1814.04 1203.79 L1814.63 1203.79 L1815.21 1203.79 L1815.8 1203.79 L1816.39 1203.79 L1816.97 1203.79 L1817.56 1203.79 L1818.14 1203.79 L1818.73 1203.79 L1819.32 1203.79 L1819.9 1203.79 L1820.49 1203.79 L1821.08 1203.79 L1821.66 1203.79 L1822.25 1203.79 L1822.84 1203.79 L1823.42 1203.79 L1824.01 1203.79 L1824.6 1203.79 L1825.18 1203.79 L1825.77 1203.79 L1826.35 1203.79 L1826.94 1203.79 L1827.53 1203.79 L1828.11 1203.79 L1828.7 1203.79 L1829.29 1203.79 L1829.87 1203.79 L1830.46 1203.79 L1831.05 1203.79 L1831.63 1203.79 L1832.22 1203.79 L1832.81 1203.79 L1833.39 1203.79 L1833.98 1203.79 L1834.56 1203.79 L1835.15 1203.79 L1835.74 1203.79 L1836.32 1203.79 L1836.91 1203.79 L1837.5 1203.79 L1838.08 1203.79 L1838.67 1203.79 L1839.26 1203.79 L1839.84 1203.79 L1840.43 1203.79 L1841.01 1203.79 L1841.6 1203.79 L1842.19 1203.79 L1842.77 1203.79 L1843.36 1203.79 L1843.95 1203.79 L1844.53 1203.79 L1845.12 1203.79 L1845.71 1203.79 L1846.29 1203.79 L1846.88 1203.79 L1847.47 1203.79 L1848.05 1203.79 L1848.64 1203.79 L1849.22 1203.79 L1849.81 1203.79 L1850.4 1203.79 L1850.98 1203.79 L1851.57 1203.79 L1852.16 1203.79 L1852.74 1203.79 L1853.33 1203.79 L1853.92 1203.79 L1854.5 1203.79 L1855.09 1203.79 L1855.68 1203.79 L1856.26 1203.79 L1856.85 1203.79 L1857.43 1203.79 L1858.02 1203.79 L1858.61 1203.79 L1859.19 1203.79 L1859.78 1203.79 L1860.37 1203.79 L1860.95 1203.79 L1861.54 1203.79 L1862.13 1203.79 L1862.71 1203.79 L1863.3 1203.79 L1863.88 1203.79 L1864.47 1203.79 L1865.06 1203.79 L1865.64 1203.79 L1866.23 1203.79 L1866.82 1203.79 L1867.4 1203.79 L1867.99 1203.79 L1868.58 1203.79 L1869.16 1203.79 L1869.75 1203.79 L1870.34 1203.79 L1870.92 1203.79 L1871.51 1203.79 L1872.09 1203.79 L1872.68 1203.79 L1873.27 1203.79 L1873.85 1203.79 L1874.44 1203.79 L1875.03 1203.79 L1875.61 1203.79 L1876.2 1203.79 L1876.79 1203.79 L1877.37 1203.79 L1877.96 1203.79 L1878.55 1203.79 L1879.13 1203.79 L1879.72 1203.79 L1880.3 1203.79 L1880.89 1203.79 L1881.48 1203.79 L1882.06 1203.79 L1882.65 1203.79 L1883.24 1203.79 L1883.82 1203.79 L1884.41 1203.79 L1885 1203.79 L1885.58 1203.79 L1886.17 1203.79 L1886.76 1203.79 L1887.34 1203.79 L1887.93 1203.79 L1888.51 1203.79 L1889.1 1203.79 L1889.69 1203.79 L1890.27 1203.79 L1890.86 1203.79 L1891.45 1203.79 L1892.03 1203.79 L1892.62 1203.79 L1893.21 1203.79 L1893.79 1203.79 L1894.38 1203.79 L1894.96 1203.79 L1895.55 1203.79 L1896.14 1203.79 L1896.72 1203.79 L1897.31 1203.79 L1897.9 1203.79 L1898.48 1203.79 L1899.07 1203.79 L1899.66 1203.79 L1900.24 1203.79 L1900.83 1203.79 L1901.42 1203.79 L1902 1203.79 L1902.59 1203.79 L1903.17 1203.79 L1903.76 1203.79 L1904.35 1203.79 L1904.93 1203.79 L1905.52 1203.79 L1906.11 1203.79 L1906.69 1203.79 L1907.28 1203.79 L1907.87 1203.79 L1908.45 1203.79 L1909.04 1203.79 L1909.63 1203.79 L1910.21 1203.79 L1910.8 1203.79 L1911.38 1203.79 L1911.97 1203.79 L1912.56 1203.79 L1913.14 1203.79 L1913.73 1203.79 L1914.32 1203.79 L1914.9 1203.79 L1915.49 1203.79 L1916.08 1203.79 L1916.66 1203.79 L1917.25 1203.79 L1917.83 1203.79 L1918.42 1203.79 L1919.01 1203.79 L1919.59 1203.79 L1920.18 1203.79 L1920.77 1203.79 L1921.35 1203.79 L1921.94 1203.79 L1922.53 1203.79 L1923.11 1203.79 L1923.7 1203.79 L1924.29 1203.79 L1924.87 1203.79 L1925.46 1203.79 L1926.04 1203.79 L1926.63 1203.79 L1927.22 1203.79 L1927.8 1203.79 L1928.39 1203.79 L1928.98 1203.79 L1929.56 1203.79 L1930.15 1203.79 L1930.74 1203.79 L1931.32 1203.79 L1931.91 1203.79 L1932.5 1203.79 L1933.08 1203.79 L1933.67 1203.79 L1934.25 1203.79 L1934.84 1203.79 L1935.43 1203.79 L1936.01 1203.79 L1936.6 1203.79 L1937.19 1203.79 L1937.77 1203.79 L1938.36 1203.79 L1938.95 1203.79 L1939.53 1203.79 L1940.12 1203.79 L1940.71 1203.79 L1941.29 1203.79 L1941.88 1203.79 L1942.46 1203.79 L1943.05 1203.79 L1943.64 1203.79 L1944.22 1203.79 L1944.81 1203.79 L1945.4 1203.79 L1945.98 1203.79 L1946.57 1203.79 L1947.16 1203.79 L1947.74 1203.79 L1948.33 1203.79 L1948.91 1203.79 L1949.5 1203.79 L1950.09 1203.79 L1950.67 1203.79 L1951.26 1203.79 L1951.85 1203.79 L1952.43 1203.79 L1953.02 1203.79 L1953.61 1203.79 L1954.19 1203.79 L1954.78 1203.79 L1955.37 1203.79 L1955.95 1203.79 L1956.54 1203.79 L1957.12 1203.79 L1957.71 1203.79 L1958.3 1203.79 L1958.88 1203.79 L1959.47 1203.79 L1960.06 1203.79 L1960.64 1203.79 L1961.23 1203.79 L1961.82 1203.79 L1962.4 1203.79 L1962.99 1203.79 L1963.58 1203.79 L1964.16 1203.79 L1964.75 1203.79 L1965.33 1203.79 L1965.92 1203.79 L1966.51 1203.79 L1967.09 1203.79 L1967.68 1203.79 L1968.27 1203.79 L1968.85 1203.79 L1969.44 1203.79 L1970.03 1203.79 L1970.61 1203.79 L1971.2 1203.79 L1971.78 1203.79 L1972.37 1203.79 L1972.96 1203.79 L1973.54 1203.79 L1974.13 1203.79 L1974.72 1203.79 L1975.3 1203.79 L1975.89 1203.79 L1976.48 1203.79 L1977.06 1203.79 L1977.65 1203.79 L1978.24 1203.79 L1978.82 1203.79 L1979.41 1203.79 L1979.99 1203.79 L1980.58 1203.79 L1981.17 1203.79 L1981.75 1203.79 L1982.34 1203.79 L1982.93 1203.79 L1983.51 1203.79 L1984.1 1203.79 L1984.69 1203.79 L1985.27 1203.79 L1985.86 1203.79 L1986.45 1203.79 L1987.03 1203.79 L1987.62 1203.79 L1988.2 1203.79 L1988.79 1203.79 L1989.38 1203.79 L1989.96 1203.79 L1990.55 1203.79 L1991.14 1203.79 L1991.72 1203.79 L1992.31 1203.79 L1992.9 1203.79 L1993.48 1203.79 L1994.07 1203.79 L1994.65 1203.79 L1995.24 1203.79 L1995.83 1203.79 L1996.41 1203.79 L1997 1203.79 L1997.59 1203.79 L1998.17 1203.79 L1998.76 1203.79 L1999.35 1203.79 L1999.93 1203.79 L2000.52 1203.79 L2001.11 1203.79 L2001.69 1203.79 L2002.28 1203.79 L2002.86 1203.79 L2003.45 1203.79 L2004.04 1203.79 L2004.62 1203.79 L2005.21 1203.79 L2005.8 1203.79 L2006.38 1203.79 L2006.97 1203.79 L2007.56 1203.79 L2008.14 1203.79 L2008.73 1203.79 L2009.32 1203.79 L2009.9 1203.79 L2010.49 1203.79 L2011.07 1203.79 L2011.66 1203.79 L2012.25 1203.79 L2012.83 1203.79 L2013.42 1203.79 L2014.01 1203.79 L2014.59 1203.79 L2015.18 1203.79 L2015.77 1203.79 L2016.35 1203.79 L2016.94 1203.79 L2017.53 1203.79 L2018.11 1203.79 L2018.7 1203.79 L2019.28 1203.79 L2019.87 1203.79 L2020.46 1203.79 L2021.04 1203.79 L2021.63 1203.79 L2022.22 1203.79 L2022.8 1203.79 L2023.39 1203.79 L2023.98 1203.79 L2024.56 1203.79 L2025.15 1203.79 L2025.73 1203.79 L2026.32 1203.79 L2026.91 1203.79 L2027.49 1203.79 L2028.08 1203.79 L2028.67 1203.79 L2029.25 1203.79 L2029.84 1203.79 L2030.43 1203.79 L2031.01 1203.79 L2031.6 1203.79 L2032.19 1203.79 L2032.77 1203.79 L2033.36 1203.79 L2033.94 1203.79 L2034.53 1203.79 L2035.12 1203.79 L2035.7 1203.79 L2036.29 1203.79 L2036.88 1203.79 L2037.46 1203.79 L2038.05 1203.79 L2038.64 1203.79 L2039.22 1203.79 L2039.81 1203.79 L2040.4 1203.79 L2040.98 1203.79 L2041.57 1203.79 L2042.15 1203.79 L2042.74 1203.79 L2043.33 1203.79 L2043.91 1203.79 L2044.5 1203.79 L2045.09 1203.79 L2045.67 1203.79 L2046.26 1203.79 L2046.85 1203.79 L2047.43 1203.79 L2048.02 1203.79 L2048.6 1203.79 L2049.19 1203.79 L2049.78 1203.79 L2050.36 1203.79 L2050.95 1203.79 L2051.54 1203.79 L2052.12 1203.79 L2052.71 1203.79 L2053.3 1203.79 L2053.88 1203.79 L2054.47 1203.79 L2055.06 1203.79 L2055.64 1203.79 L2056.23 1203.79 L2056.81 1203.79 L2057.4 1203.79 L2057.99 1203.79 L2058.57 1203.79 L2059.16 1203.79 L2059.75 1203.79 L2060.33 1203.79 L2060.92 1203.79 L2061.51 1203.79 L2062.09 1203.79 L2062.68 1203.79 L2063.27 1203.79 L2063.85 1203.79 L2064.44 1203.79 L2065.02 1203.79 L2065.61 1203.79 L2066.2 1203.79 L2066.78 1203.79 L2067.37 1203.79 L2067.96 1203.79 L2068.54 1203.79 L2069.13 1203.79 L2069.72 1203.79 L2070.3 1203.79 L2070.89 1203.79 L2071.48 1203.79 L2072.06 1203.79 L2072.65 1203.79 L2073.23 1203.79 L2073.82 1203.79 L2074.41 1203.79 L2074.99 1203.79 L2075.58 1203.79 L2076.17 1203.79 L2076.75 1203.79 L2077.34 1203.79 L2077.93 1203.79 L2078.51 1203.79 L2079.1 1203.79 L2079.68 1203.79 L2080.27 1203.79 L2080.86 1203.79 L2081.44 1203.79 L2082.03 1203.79 L2082.62 1203.79 L2083.2 1203.79 L2083.79 1203.79 L2084.38 1203.79 L2084.96 1203.79 L2085.55 1203.79 L2086.14 1203.79 L2086.72 1203.79 L2087.31 1203.79 L2087.89 1203.79 L2088.48 1203.79 L2089.07 1203.79 L2089.65 1203.79 L2090.24 1203.79 L2090.83 1203.79 L2091.41 1203.79 L2092 1203.79 L2092.59 1203.79 L2093.17 1203.79 L2093.76 1203.79 L2094.35 1203.79 L2094.93 1203.79 L2095.52 1203.79 L2096.1 1203.79 L2096.69 1203.79 L2097.28 1203.79 L2097.86 1203.79 L2098.45 1203.79 L2099.04 1203.79 L2099.62 1203.79 L2100.21 1203.79 L2100.8 1203.79 L2101.38 1203.79 L2101.97 1203.79 L2102.55 1203.79 L2103.14 1203.79 L2103.73 1203.79 L2104.31 1203.79 L2104.9 1203.79 L2105.49 1203.79 L2106.07 1203.79 L2106.66 1203.79 L2107.25 1203.79 L2107.83 1203.79 L2108.42 1203.79 L2109.01 1203.79 L2109.59 1203.79 L2110.18 1203.79 L2110.76 1203.79 L2111.35 1203.79 L2111.94 1203.79 L2112.52 1203.79 L2113.11 1203.79 L2113.7 1203.79 L2114.28 1203.79 L2114.87 1203.79 L2115.46 1203.79 L2116.04 1203.79 L2116.63 1203.79 L2117.22 1203.79 L2117.8 1203.79 L2118.39 1203.79 L2118.97 1203.79 L2119.56 1203.79 L2120.15 1203.79 L2120.73 1203.79 L2121.32 1203.79 L2121.91 1203.79 L2122.49 1203.79 L2123.08 1203.79 L2123.67 1203.79 L2124.25 1203.79 L2124.84 1203.79 L2125.42 1203.79 L2126.01 1203.79 L2126.6 1203.79 L2127.18 1203.79 L2127.77 1203.79 L2128.36 1203.79 L2128.94 1203.79 L2129.53 1203.79 L2130.12 1203.79 L2130.7 1203.79 L2131.29 1203.79 L2131.88 1203.79 L2132.46 1203.79 L2133.05 1203.79 L2133.63 1203.79 L2134.22 1203.79 L2134.81 1203.79 L2135.39 1203.79 L2135.98 1203.79 L2136.57 1203.79 L2137.15 1203.79 L2137.74 1203.79 L2138.33 1203.79 L2138.91 1203.79 L2139.5 1203.79 L2140.09 1203.79 L2140.67 1203.79 L2141.26 1203.79 L2141.84 1203.79 L2142.43 1203.79 L2143.02 1203.79 L2143.6 1203.79 L2144.19 1203.79 L2144.78 1203.79 L2145.36 1203.79 L2145.95 1203.79 L2146.54 1203.79 L2147.12 1203.79 L2147.71 1203.79 L2148.3 1203.79 L2148.88 1203.79 L2149.47 1203.79 L2150.05 1203.79 L2150.64 1203.79 L2151.23 1203.79 L2151.81 1203.79 L2152.4 1203.79 L2152.99 1203.79 L2153.57 1203.79 L2154.16 1203.79 L2154.75 1203.79 L2155.33 1203.79 L2155.92 1203.79 L2156.5 1203.79 L2157.09 1203.79 L2157.68 1203.79 L2158.26 1203.79 L2158.26 1203.08 L2157.68 1203.08 L2157.09 1203.08 L2156.5 1203.08 L2155.92 1203.08 L2155.33 1203.08 L2154.75 1203.08 L2154.16 1203.08 L2153.57 1203.08 L2152.99 1203.08 L2152.4 1203.08 L2151.81 1203.08 L2151.23 1203.08 L2150.64 1203.08 L2150.05 1203.08 L2149.47 1203.08 L2148.88 1203.08 L2148.3 1203.08 L2147.71 1203.08 L2147.12 1203.08 L2146.54 1203.08 L2145.95 1203.08 L2145.36 1203.08 L2144.78 1203.08 L2144.19 1203.08 L2143.6 1203.08 L2143.02 1203.08 L2142.43 1203.08 L2141.84 1203.08 L2141.26 1203.08 L2140.67 1203.08 L2140.09 1203.08 L2139.5 1203.08 L2138.91 1203.08 L2138.33 1203.08 L2137.74 1203.08 L2137.15 1203.08 L2136.57 1203.08 L2135.98 1203.08 L2135.39 1203.08 L2134.81 1203.08 L2134.22 1203.08 L2133.63 1203.08 L2133.05 1203.08 L2132.46 1203.08 L2131.88 1203.08 L2131.29 1203.08 L2130.7 1203.08 L2130.12 1203.08 L2129.53 1203.08 L2128.94 1203.08 L2128.36 1203.08 L2127.77 1203.08 L2127.18 1203.08 L2126.6 1203.08 L2126.01 1203.08 L2125.42 1203.08 L2124.84 1203.08 L2124.25 1203.08 L2123.67 1203.08 L2123.08 1203.08 L2122.49 1203.08 L2121.91 1203.08 L2121.32 1203.08 L2120.73 1203.08 L2120.15 1203.08 L2119.56 1203.08 L2118.97 1203.08 L2118.39 1203.08 L2117.8 1203.08 L2117.22 1203.08 L2116.63 1203.08 L2116.04 1203.08 L2115.46 1203.08 L2114.87 1203.08 L2114.28 1203.08 L2113.7 1203.08 L2113.11 1203.08 L2112.52 1203.08 L2111.94 1203.08 L2111.35 1203.08 L2110.76 1203.08 L2110.18 1203.08 L2109.59 1203.08 L2109.01 1203.08 L2108.42 1203.08 L2107.83 1203.08 L2107.25 1203.08 L2106.66 1203.08 L2106.07 1203.08 L2105.49 1203.08 L2104.9 1203.08 L2104.31 1203.08 L2103.73 1203.08 L2103.14 1203.08 L2102.55 1203.08 L2101.97 1203.08 L2101.38 1203.08 L2100.8 1203.08 L2100.21 1203.08 L2099.62 1203.08 L2099.04 1203.08 L2098.45 1203.08 L2097.86 1203.08 L2097.28 1203.08 L2096.69 1203.08 L2096.1 1203.08 L2095.52 1203.08 L2094.93 1203.08 L2094.35 1203.08 L2093.76 1203.08 L2093.17 1203.08 L2092.59 1203.08 L2092 1203.08 L2091.41 1203.08 L2090.83 1203.08 L2090.24 1203.08 L2089.65 1203.08 L2089.07 1203.08 L2088.48 1203.08 L2087.89 1203.08 L2087.31 1203.08 L2086.72 1203.08 L2086.14 1203.08 L2085.55 1203.08 L2084.96 1203.08 L2084.38 1203.08 L2083.79 1203.08 L2083.2 1203.08 L2082.62 1203.08 L2082.03 1203.08 L2081.44 1203.08 L2080.86 1203.08 L2080.27 1203.08 L2079.68 1203.08 L2079.1 1203.08 L2078.51 1203.08 L2077.93 1203.08 L2077.34 1203.08 L2076.75 1203.08 L2076.17 1203.08 L2075.58 1203.08 L2074.99 1203.08 L2074.41 1203.08 L2073.82 1203.08 L2073.23 1203.08 L2072.65 1203.08 L2072.06 1203.08 L2071.48 1203.08 L2070.89 1203.08 L2070.3 1203.08 L2069.72 1203.08 L2069.13 1203.08 L2068.54 1203.08 L2067.96 1203.08 L2067.37 1203.08 L2066.78 1203.08 L2066.2 1203.08 L2065.61 1203.08 L2065.02 1203.08 L2064.44 1203.08 L2063.85 1203.08 L2063.27 1203.08 L2062.68 1203.08 L2062.09 1203.08 L2061.51 1203.08 L2060.92 1203.08 L2060.33 1203.08 L2059.75 1203.08 L2059.16 1203.08 L2058.57 1203.08 L2057.99 1203.08 L2057.4 1203.08 L2056.81 1203.08 L2056.23 1203.08 L2055.64 1203.08 L2055.06 1203.08 L2054.47 1203.08 L2053.88 1203.08 L2053.3 1203.08 L2052.71 1203.08 L2052.12 1203.08 L2051.54 1203.08 L2050.95 1203.08 L2050.36 1203.08 L2049.78 1203.08 L2049.19 1203.08 L2048.6 1203.08 L2048.02 1203.08 L2047.43 1203.08 L2046.85 1203.08 L2046.26 1203.08 L2045.67 1203.08 L2045.09 1203.08 L2044.5 1203.08 L2043.91 1203.08 L2043.33 1203.08 L2042.74 1203.08 L2042.15 1203.08 L2041.57 1203.08 L2040.98 1203.08 L2040.4 1203.08 L2039.81 1203.08 L2039.22 1203.08 L2038.64 1203.08 L2038.05 1203.08 L2037.46 1203.08 L2036.88 1203.08 L2036.29 1203.08 L2035.7 1203.08 L2035.12 1203.08 L2034.53 1203.08 L2033.94 1203.08 L2033.36 1203.08 L2032.77 1203.08 L2032.19 1203.08 L2031.6 1203.08 L2031.01 1203.08 L2030.43 1203.08 L2029.84 1203.08 L2029.25 1203.08 L2028.67 1203.08 L2028.08 1203.08 L2027.49 1203.08 L2026.91 1203.08 L2026.32 1203.08 L2025.73 1203.08 L2025.15 1203.08 L2024.56 1203.08 L2023.98 1203.08 L2023.39 1203.08 L2022.8 1203.08 L2022.22 1203.08 L2021.63 1203.08 L2021.04 1203.08 L2020.46 1203.08 L2019.87 1203.08 L2019.28 1203.08 L2018.7 1203.08 L2018.11 1203.08 L2017.53 1203.08 L2016.94 1203.08 L2016.35 1203.08 L2015.77 1203.08 L2015.18 1203.08 L2014.59 1203.08 L2014.01 1203.08 L2013.42 1203.08 L2012.83 1203.08 L2012.25 1203.08 L2011.66 1203.08 L2011.07 1203.08 L2010.49 1203.08 L2009.9 1203.08 L2009.32 1203.08 L2008.73 1203.08 L2008.14 1203.08 L2007.56 1203.08 L2006.97 1203.08 L2006.38 1203.08 L2005.8 1203.08 L2005.21 1203.08 L2004.62 1203.08 L2004.04 1203.08 L2003.45 1203.08 L2002.86 1203.08 L2002.28 1203.08 L2001.69 1203.08 L2001.11 1203.08 L2000.52 1203.08 L1999.93 1203.08 L1999.35 1203.08 L1998.76 1203.08 L1998.17 1203.08 L1997.59 1203.08 L1997 1203.08 L1996.41 1203.08 L1995.83 1203.08 L1995.24 1203.08 L1994.65 1203.08 L1994.07 1203.08 L1993.48 1203.08 L1992.9 1203.08 L1992.31 1203.08 L1991.72 1203.08 L1991.14 1203.08 L1990.55 1203.08 L1989.96 1203.08 L1989.38 1203.08 L1988.79 1203.08 L1988.2 1203.08 L1987.62 1203.08 L1987.03 1203.08 L1986.45 1203.08 L1985.86 1203.08 L1985.27 1203.08 L1984.69 1203.08 L1984.1 1203.08 L1983.51 1203.08 L1982.93 1203.08 L1982.34 1203.08 L1981.75 1203.08 L1981.17 1203.08 L1980.58 1203.08 L1979.99 1203.08 L1979.41 1203.08 L1978.82 1203.08 L1978.24 1203.08 L1977.65 1203.08 L1977.06 1203.08 L1976.48 1203.08 L1975.89 1203.08 L1975.3 1203.08 L1974.72 1203.08 L1974.13 1203.08 L1973.54 1203.08 L1972.96 1203.08 L1972.37 1203.08 L1971.78 1203.08 L1971.2 1203.08 L1970.61 1203.08 L1970.03 1203.08 L1969.44 1203.08 L1968.85 1203.08 L1968.27 1203.08 L1967.68 1203.08 L1967.09 1203.08 L1966.51 1203.08 L1965.92 1203.08 L1965.33 1203.08 L1964.75 1203.08 L1964.16 1203.08 L1963.58 1203.08 L1962.99 1203.08 L1962.4 1203.08 L1961.82 1203.08 L1961.23 1203.08 L1960.64 1203.08 L1960.06 1203.08 L1959.47 1203.08 L1958.88 1203.08 L1958.3 1203.08 L1957.71 1203.08 L1957.12 1203.08 L1956.54 1203.08 L1955.95 1203.08 L1955.37 1203.08 L1954.78 1203.08 L1954.19 1203.08 L1953.61 1203.08 L1953.02 1203.08 L1952.43 1203.08 L1951.85 1203.08 L1951.26 1203.08 L1950.67 1203.08 L1950.09 1203.08 L1949.5 1203.08 L1948.91 1203.08 L1948.33 1203.08 L1947.74 1203.08 L1947.16 1203.08 L1946.57 1203.08 L1945.98 1203.08 L1945.4 1203.08 L1944.81 1203.08 L1944.22 1203.08 L1943.64 1203.08 L1943.05 1203.08 L1942.46 1203.08 L1941.88 1203.08 L1941.29 1203.08 L1940.71 1203.08 L1940.12 1203.08 L1939.53 1203.08 L1938.95 1203.08 L1938.36 1203.08 L1937.77 1203.08 L1937.19 1203.08 L1936.6 1203.08 L1936.01 1203.08 L1935.43 1203.08 L1934.84 1203.08 L1934.25 1203.08 L1933.67 1203.08 L1933.08 1203.08 L1932.5 1203.08 L1931.91 1203.08 L1931.32 1203.08 L1930.74 1203.08 L1930.15 1203.08 L1929.56 1203.08 L1928.98 1203.08 L1928.39 1203.08 L1927.8 1203.08 L1927.22 1203.08 L1926.63 1203.08 L1926.04 1203.08 L1925.46 1203.08 L1924.87 1203.08 L1924.29 1203.08 L1923.7 1203.08 L1923.11 1203.08 L1922.53 1203.08 L1921.94 1203.08 L1921.35 1203.08 L1920.77 1203.08 L1920.18 1203.08 L1919.59 1203.08 L1919.01 1203.08 L1918.42 1203.08 L1917.83 1203.08 L1917.25 1203.08 L1916.66 1203.08 L1916.08 1203.08 L1915.49 1203.08 L1914.9 1203.08 L1914.32 1203.08 L1913.73 1203.08 L1913.14 1203.08 L1912.56 1203.08 L1911.97 1203.08 L1911.38 1203.08 L1910.8 1203.08 L1910.21 1203.08 L1909.63 1203.08 L1909.04 1203.08 L1908.45 1203.08 L1907.87 1203.08 L1907.28 1203.08 L1906.69 1203.08 L1906.11 1203.08 L1905.52 1203.08 L1904.93 1203.08 L1904.35 1203.08 L1903.76 1203.08 L1903.17 1203.08 L1902.59 1203.08 L1902 1203.08 L1901.42 1203.08 L1900.83 1203.08 L1900.24 1203.08 L1899.66 1203.08 L1899.07 1203.08 L1898.48 1203.08 L1897.9 1203.08 L1897.31 1203.08 L1896.72 1203.08 L1896.14 1203.08 L1895.55 1203.08 L1894.96 1203.08 L1894.38 1203.08 L1893.79 1203.08 L1893.21 1203.08 L1892.62 1203.08 L1892.03 1203.08 L1891.45 1203.08 L1890.86 1203.08 L1890.27 1203.08 L1889.69 1203.08 L1889.1 1203.08 L1888.51 1203.08 L1887.93 1203.08 L1887.34 1203.08 L1886.76 1203.08 L1886.17 1203.08 L1885.58 1203.08 L1885 1203.08 L1884.41 1203.08 L1883.82 1203.08 L1883.24 1203.08 L1882.65 1203.08 L1882.06 1203.08 L1881.48 1203.08 L1880.89 1203.08 L1880.3 1203.08 L1879.72 1203.08 L1879.13 1203.08 L1878.55 1203.08 L1877.96 1203.08 L1877.37 1203.08 L1876.79 1203.08 L1876.2 1203.08 L1875.61 1203.08 L1875.03 1203.08 L1874.44 1203.08 L1873.85 1203.08 L1873.27 1203.08 L1872.68 1203.08 L1872.09 1203.08 L1871.51 1203.08 L1870.92 1203.08 L1870.34 1203.08 L1869.75 1203.08 L1869.16 1203.08 L1868.58 1203.08 L1867.99 1203.08 L1867.4 1203.08 L1866.82 1203.08 L1866.23 1203.08 L1865.64 1203.08 L1865.06 1203.08 L1864.47 1203.08 L1863.88 1203.08 L1863.3 1203.08 L1862.71 1203.08 L1862.13 1203.08 L1861.54 1203.08 L1860.95 1203.08 L1860.37 1203.08 L1859.78 1203.08 L1859.19 1203.08 L1858.61 1203.08 L1858.02 1203.08 L1857.43 1203.08 L1856.85 1203.08 L1856.26 1203.08 L1855.68 1203.08 L1855.09 1203.08 L1854.5 1203.08 L1853.92 1203.08 L1853.33 1203.08 L1852.74 1203.08 L1852.16 1203.08 L1851.57 1203.08 L1850.98 1203.08 L1850.4 1203.08 L1849.81 1203.08 L1849.22 1203.08 L1848.64 1203.08 L1848.05 1203.08 L1847.47 1203.08 L1846.88 1203.08 L1846.29 1203.08 L1845.71 1203.08 L1845.12 1203.08 L1844.53 1203.08 L1843.95 1203.08 L1843.36 1203.08 L1842.77 1203.08 L1842.19 1203.08 L1841.6 1203.08 L1841.01 1203.08 L1840.43 1203.08 L1839.84 1203.08 L1839.26 1203.08 L1838.67 1203.08 L1838.08 1203.08 L1837.5 1203.08 L1836.91 1203.08 L1836.32 1203.08 L1835.74 1203.08 L1835.15 1203.08 L1834.56 1203.08 L1833.98 1203.08 L1833.39 1203.08 L1832.81 1203.08 L1832.22 1203.08 L1831.63 1203.08 L1831.05 1203.08 L1830.46 1203.08 L1829.87 1203.08 L1829.29 1203.08 L1828.7 1203.08 L1828.11 1203.08 L1827.53 1203.08 L1826.94 1203.08 L1826.35 1203.08 L1825.77 1203.08 L1825.18 1203.08 L1824.6 1203.08 L1824.01 1203.08 L1823.42 1203.08 L1822.84 1203.08 L1822.25 1203.08 L1821.66 1203.08 L1821.08 1203.08 L1820.49 1203.08 L1819.9 1203.08 L1819.32 1203.08 L1818.73 1203.08 L1818.14 1203.08 L1817.56 1203.08 L1816.97 1203.08 L1816.39 1203.08 L1815.8 1203.08 L1815.21 1203.08 L1814.63 1203.08 L1814.04 1203.08 L1813.45 1203.08 L1812.87 1203.08 L1812.28 1203.08 L1811.69 1203.08 L1811.11 1203.08 L1810.52 1203.08 L1809.94 1203.08 L1809.35 1203.08 L1808.76 1203.08 L1808.18 1203.08 L1807.59 1203.08 L1807 1203.08 L1806.42 1203.08 L1805.83 1203.08 L1805.24 1203.08 L1804.66 1203.08 L1804.07 1203.08 L1803.48 1203.08 L1802.9 1203.08 L1802.31 1203.08 L1801.73 1203.08 L1801.14 1203.08 L1800.55 1203.08 L1799.97 1203.08 L1799.38 1203.08 L1798.79 1203.08 L1798.21 1203.08 L1797.62 1203.08 L1797.03 1203.08 L1796.45 1203.08 L1795.86 1203.08 L1795.27 1203.08 L1794.69 1203.08 L1794.1 1203.08 L1793.52 1203.08 L1792.93 1203.08 L1792.34 1203.08 L1791.76 1203.08 L1791.17 1203.08 L1790.58 1203.08 L1790 1203.08 L1789.41 1203.08 L1788.82 1203.08 L1788.24 1203.08 L1787.65 1203.08 L1787.06 1203.08 L1786.48 1203.08 L1785.89 1203.08 L1785.31 1203.08 L1784.72 1203.08 L1784.13 1203.08 L1783.55 1203.08 L1782.96 1203.08 L1782.37 1203.08 L1781.79 1203.08 L1781.2 1203.08 L1780.61 1203.08 L1780.03 1203.08 L1779.44 1203.08 L1778.86 1203.08 L1778.27 1203.08 L1777.68 1203.08 L1777.1 1203.08 L1776.51 1203.08 L1775.92 1203.08 L1775.34 1203.08 L1774.75 1203.08 L1774.16 1203.08 L1773.58 1203.08 L1772.99 1203.08 L1772.4 1203.08 L1771.82 1203.08 L1771.23 1203.08 L1770.65 1203.08 L1770.06 1203.08 L1769.47 1203.08 L1768.89 1203.08 L1768.3 1203.08 L1767.71 1203.08 L1767.13 1203.08 L1766.54 1203.08 L1765.95 1203.08 L1765.37 1203.08 L1764.78 1203.08 L1764.19 1203.08 L1763.61 1203.08 L1763.02 1203.08 L1762.44 1203.08 L1761.85 1203.08 L1761.26 1203.08 L1760.68 1203.08 L1760.09 1203.08 L1759.5 1203.08 L1758.92 1203.08 L1758.33 1203.08 L1757.74 1203.08 L1757.16 1203.08 L1756.57 1203.08 L1755.99 1203.08 L1755.4 1203.08 L1754.81 1203.08 L1754.23 1203.08 L1753.64 1203.08 L1753.05 1203.08 L1752.47 1203.08 L1751.88 1203.08 L1751.29 1203.08 L1750.71 1203.08 L1750.12 1203.08 L1749.53 1203.08 L1748.95 1203.08 L1748.36 1203.08 L1747.78 1203.08 L1747.19 1203.08 L1746.6 1203.08 L1746.02 1203.08 L1745.43 1203.08 L1744.84 1203.08 L1744.26 1203.08 L1743.67 1203.08 L1743.08 1203.08 L1742.5 1203.08 L1741.91 1203.08 L1741.32 1203.08 L1740.74 1203.08 L1740.15 1203.08 L1739.57 1203.08 L1738.98 1203.08 L1738.39 1203.08 L1737.81 1203.08 L1737.22 1203.08 L1736.63 1203.08 L1736.05 1203.08 L1735.46 1203.08 L1734.87 1203.08 L1734.29 1203.08 L1733.7 1203.08 L1733.11 1203.08 L1732.53 1203.08 L1731.94 1203.08 L1731.36 1203.08 L1730.77 1203.08 L1730.18 1203.08 L1729.6 1203.08 L1729.01 1203.08 L1728.42 1203.08 L1727.84 1203.08 L1727.25 1203.08 L1726.66 1203.08 L1726.08 1203.08 L1725.49 1203.08 L1724.91 1203.08 L1724.32 1203.08 L1723.73 1203.08 L1723.15 1203.08 L1722.56 1203.08 L1721.97 1203.08 L1721.39 1203.08 L1720.8 1203.08 L1720.21 1203.08 L1719.63 1203.08 L1719.04 1203.08 L1718.45 1203.08 L1717.87 1203.08 L1717.28 1203.08 L1716.7 1203.08 L1716.11 1203.08 L1715.52 1203.08 L1714.94 1203.08 L1714.35 1203.08 L1713.76 1203.08 L1713.18 1203.08 L1712.59 1203.08 L1712 1203.08 L1711.42 1203.08 L1710.83 1203.08 L1710.24 1203.08 L1709.66 1203.08 L1709.07 1203.08 L1708.49 1203.08 L1707.9 1203.08 L1707.31 1203.08 L1706.73 1203.08 L1706.14 1203.08 L1705.55 1203.08 L1704.97 1203.08 L1704.38 1203.08 L1703.79 1203.08 L1703.21 1203.08 L1702.62 1203.08 L1702.04 1203.08 L1701.45 1203.08 L1700.86 1203.08 L1700.28 1203.08 L1699.69 1203.08 L1699.1 1203.08 L1698.52 1203.08 L1697.93 1203.08 L1697.34 1203.08 L1696.76 1203.08 L1696.17 1203.08 L1695.58 1203.08 L1695 1203.08 L1694.41 1203.08 L1693.83 1203.08 L1693.24 1203.08 L1692.65 1203.08 L1692.07 1203.08 L1691.48 1203.08 L1690.89 1203.08 L1690.31 1203.08 L1689.72 1203.08 L1689.13 1203.08 L1688.55 1203.08 L1687.96 1203.08 L1687.37 1203.08 L1686.79 1203.08 L1686.2 1203.08 L1685.62 1203.08 L1685.03 1203.08 L1684.44 1203.08 L1683.86 1203.08 L1683.27 1203.08 L1682.68 1203.08 L1682.1 1203.08 L1681.51 1203.08 L1680.92 1203.08 L1680.34 1203.08 L1679.75 1203.08 L1679.17 1203.08 L1678.58 1203.08 L1677.99 1203.08 L1677.41 1203.08 L1676.82 1203.08 L1676.23 1203.08 L1675.65 1203.08 L1675.06 1203.08 L1674.47 1203.08 L1673.89 1203.08 L1673.3 1203.08 L1672.71 1203.08 L1672.13 1203.08 L1671.54 1203.08 L1670.96 1203.08 L1670.37 1203.08 L1669.78 1203.08 L1669.2 1203.08 L1668.61 1203.08 L1668.02 1203.08 L1667.44 1203.08 L1666.85 1203.08 L1666.26 1203.08 L1665.68 1203.08 L1665.09 1203.08 L1664.5 1203.08 L1663.92 1203.08 L1663.33 1203.08 L1662.75 1203.08 L1662.16 1203.08 L1661.57 1203.08 L1660.99 1203.08 L1660.4 1203.08 L1659.81 1203.08 L1659.23 1203.08 L1658.64 1203.08 L1658.05 1203.08 L1657.47 1203.08 L1656.88 1203.08 L1656.29 1203.08 L1655.71 1203.08 L1655.12 1203.08 L1654.54 1203.08 L1653.95 1203.08 L1653.36 1203.08 L1652.78 1203.08 L1652.19 1203.08 L1651.6 1203.08 L1651.02 1203.08 L1650.43 1203.08 L1649.84 1203.08 L1649.26 1203.08 L1648.67 1203.08 L1648.09 1203.08 L1647.5 1203.08 L1646.91 1203.08 L1646.33 1203.08 L1645.74 1203.08 L1645.15 1203.08 L1644.57 1203.08 L1643.98 1203.08 L1643.39 1203.08 L1642.81 1203.08 L1642.22 1203.08 L1641.63 1203.08 L1641.05 1203.08 L1640.46 1203.08 L1639.88 1203.08 L1639.29 1203.08 L1638.7 1203.08 L1638.12 1203.08 L1637.53 1203.08 L1636.94 1203.08 L1636.36 1203.08 L1635.77 1203.08 L1635.18 1203.08 L1634.6 1203.08 L1634.01 1203.08 L1633.42 1203.08 L1632.84 1203.08 L1632.25 1203.08 L1631.67 1203.08 L1631.08 1203.08 L1630.49 1203.08 L1629.91 1203.08 L1629.32 1203.08 L1628.73 1203.08 L1628.15 1203.08 L1627.56 1203.08 L1626.97 1203.08 L1626.39 1203.08 L1625.8 1203.08 L1625.22 1203.08 L1624.63 1203.08 L1624.04 1203.08 L1623.46 1203.08 L1622.87 1203.08 L1622.28 1203.08 L1621.7 1203.08 L1621.11 1203.08 L1620.52 1203.08 L1619.94 1203.08 L1619.35 1203.08 L1618.76 1203.08 L1618.18 1203.08 L1617.59 1203.08 L1617.01 1203.08 L1616.42 1203.08 L1615.83 1203.08 L1615.25 1203.08 L1614.66 1203.08 L1614.07 1203.08 L1613.49 1203.08 L1612.9 1203.08 L1612.31 1203.08 L1611.73 1203.08 L1611.14 1203.08 L1610.55 1203.08 L1609.97 1203.08 L1609.38 1203.08 L1608.8 1203.08 L1608.21 1203.08 L1607.62 1203.08 L1607.04 1203.08 L1606.45 1203.08 L1605.86 1203.08 L1605.28 1203.08 L1604.69 1203.08 L1604.1 1203.08 L1603.52 1203.08 L1602.93 1203.08 L1602.34 1203.08 L1601.76 1203.08 L1601.17 1203.08 L1600.59 1203.08 L1600 1203.08 L1599.41 1203.08 L1598.83 1203.08 L1598.24 1203.08 L1597.65 1203.08 L1597.07 1203.08 L1596.48 1203.08 L1595.89 1203.08 L1595.31 1203.08 L1594.72 1203.08 L1594.14 1203.08 L1593.55 1203.08 L1592.96 1203.08 L1592.38 1203.08 L1591.79 1203.08 L1591.2 1203.08 L1590.62 1203.08 L1590.03 1203.08 L1589.44 1203.08 L1588.86 1203.08 L1588.27 1203.08 L1587.68 1203.08 L1587.1 1203.08 L1586.51 1203.08 L1585.93 1203.08 L1585.34 1203.08 L1584.75 1203.08 L1584.17 1203.08 L1583.58 1203.08 L1582.99 1203.08 L1582.41 1203.08 L1581.82 1203.08 L1581.23 1203.08 L1580.65 1203.08 L1580.06 1203.08 L1579.47 1203.08 L1578.89 1203.08 L1578.3 1203.08 L1577.72 1203.08 L1577.13 1203.08 L1576.54 1203.08 L1575.96 1203.08 L1575.37 1203.08 L1574.78 1203.08 L1574.2 1203.08 L1573.61 1203.08 L1573.02 1203.08 L1572.44 1203.08 L1571.85 1203.08 L1571.27 1203.08 L1570.68 1203.08 L1570.09 1203.08 L1569.51 1203.08 L1568.92 1203.08 L1568.33 1203.08 L1567.75 1203.08 L1567.16 1203.08 L1566.57 1203.08 L1565.99 1203.08 L1565.4 1203.08 L1564.81 1203.08 L1564.23 1203.08 L1563.64 1203.08 L1563.06 1203.08 L1562.47 1203.08 L1561.88 1203.08 L1561.3 1203.08 L1560.71 1203.08 L1560.12 1203.08 L1559.54 1203.08 L1558.95 1203.08 L1558.36 1203.08 L1557.78 1203.08 L1557.19 1203.08 L1556.6 1203.08 L1556.02 1203.08 L1555.43 1203.08 L1554.85 1203.08 L1554.26 1203.08 L1553.67 1203.08 L1553.09 1203.08 L1552.5 1203.08 L1551.91 1203.08 L1551.33 1203.08 L1550.74 1203.08 L1550.15 1203.08 L1549.57 1203.08 L1548.98 1203.08 L1548.4 1203.08 L1547.81 1203.08 L1547.22 1203.08 L1546.64 1203.08 L1546.05 1203.08 L1545.46 1203.08 L1544.88 1203.08 L1544.29 1203.08 L1543.7 1203.08 L1543.12 1203.08 L1542.53 1203.08 L1541.94 1203.08 L1541.36 1203.08 L1540.77 1203.08 L1540.19 1203.08 L1539.6 1203.08 L1539.01 1203.08 L1538.43 1203.08 L1537.84 1203.08 L1537.25 1203.08 L1536.67 1203.08 L1536.08 1203.08 L1535.49 1203.08 L1534.91 1203.08 L1534.32 1203.08 L1533.73 1203.08 L1533.15 1203.08 L1532.56 1203.08 L1531.98 1203.08 L1531.39 1203.08 L1530.8 1203.08 L1530.22 1203.08 L1529.63 1203.08 L1529.04 1203.08 L1528.46 1203.08 L1527.87 1203.08 L1527.28 1203.08 L1526.7 1203.08 L1526.11 1203.08 L1525.52 1203.08 L1524.94 1203.08 L1524.35 1203.08 L1523.77 1203.08 L1523.18 1203.08 L1522.59 1203.08 L1522.01 1203.08 L1521.42 1203.08 L1520.83 1203.08 L1520.25 1203.08 L1519.66 1203.08 L1519.07 1203.08 L1518.49 1203.08 L1517.9 1203.08 L1517.32 1203.08 L1516.73 1203.08 L1516.14 1203.08 L1515.56 1203.08 L1514.97 1203.08 L1514.38 1203.08 L1513.8 1203.08 L1513.21 1203.08 L1512.62 1203.08 L1512.04 1203.08 L1511.45 1203.08 L1510.86 1203.08 L1510.28 1203.08 L1509.69 1203.08 L1509.11 1203.08 L1508.52 1203.08 L1507.93 1203.08 L1507.35 1203.08 L1506.76 1203.08 L1506.17 1203.08 L1505.59 1203.08 L1505 1203.08 L1504.41 1203.08 L1503.83 1203.08 L1503.24 1203.08 L1502.65 1203.08 L1502.07 1203.08 L1501.48 1203.08 L1500.9 1203.08 L1500.31 1203.08 L1499.72 1203.08 L1499.14 1203.08 L1498.55 1203.08 L1497.96 1203.08 L1497.38 1203.08 L1496.79 1203.08 L1496.2 1203.08 L1495.62 1203.08 L1495.03 1203.08 L1494.45 1203.08 L1493.86 1203.08 L1493.27 1203.08 L1492.69 1203.08 L1492.1 1203.08 L1491.51 1203.08 L1490.93 1203.08 L1490.34 1203.08 L1489.75 1203.08 L1489.17 1203.08 L1488.58 1203.08 L1487.99 1203.08 L1487.41 1203.08 L1486.82 1203.08 L1486.24 1203.08 L1485.65 1203.08 L1485.06 1203.08 L1484.48 1203.08 L1483.89 1203.08 L1483.3 1203.08 L1482.72 1203.08 L1482.13 1203.08 L1481.54 1203.08 L1480.96 1203.08 L1480.37 1203.08 L1479.78 1203.08 L1479.2 1203.08 L1478.61 1203.08 L1478.03 1203.08 L1477.44 1203.08 L1476.85 1203.08 L1476.27 1203.08 L1475.68 1203.08 L1475.09 1203.08 L1474.51 1203.08 L1473.92 1203.08 L1473.33 1203.08 L1472.75 1203.08 L1472.16 1203.08 L1471.57 1203.08 L1470.99 1203.08 L1470.4 1203.08 L1469.82 1203.08 L1469.23 1203.08 L1468.64 1203.08 L1468.06 1203.08 L1467.47 1203.08 L1466.88 1203.08 L1466.3 1203.08 L1465.71 1203.08 L1465.12 1203.08 L1464.54 1203.08 L1463.95 1203.08 L1463.37 1203.08 L1462.78 1203.08 L1462.19 1203.08 L1461.61 1203.08 L1461.02 1203.08 L1460.43 1203.08 L1459.85 1203.08 L1459.26 1203.08 L1458.67 1203.08 L1458.09 1203.08 L1457.5 1203.08 L1456.91 1203.08 L1456.33 1203.08 L1455.74 1203.08 L1455.16 1203.08 L1454.57 1203.08 L1453.98 1203.08 L1453.4 1203.08 L1452.81 1203.08 L1452.22 1203.08 L1451.64 1203.08 L1451.05 1203.08 L1450.46 1203.08 L1449.88 1203.08 L1449.29 1203.08 L1448.7 1203.08 L1448.12 1203.08 L1447.53 1203.08 L1446.95 1203.08 L1446.36 1203.08 L1445.77 1203.08 L1445.19 1203.08 L1444.6 1203.08 L1444.01 1203.08 L1443.43 1203.08 L1442.84 1203.08 L1442.25 1203.08 L1441.67 1203.08 L1441.08 1203.08 L1440.5 1203.08 L1439.91 1203.08 L1439.32 1203.08 L1438.74 1203.08 L1438.15 1203.08 L1437.56 1203.08 L1436.98 1203.08 L1436.39 1203.08 L1435.8 1203.08 L1435.22 1203.08 L1434.63 1203.08 L1434.04 1203.08 L1433.46 1203.08 L1432.87 1203.08 L1432.29 1203.08 L1431.7 1203.08 L1431.11 1203.08 L1430.53 1203.08 L1429.94 1203.08 L1429.35 1203.08 L1428.77 1203.08 L1428.18 1203.08 L1427.59 1203.08 L1427.01 1203.08 L1426.42 1203.08 L1425.83 1203.08 L1425.25 1203.08 L1424.66 1203.08 L1424.08 1203.08 L1423.49 1203.08 L1422.9 1203.08 L1422.32 1203.08 L1421.73 1203.08 L1421.14 1203.08 L1420.56 1203.08 L1419.97 1203.08 L1419.38 1203.08 L1418.8 1203.08 L1418.21 1203.08 L1417.63 1203.08 L1417.04 1203.08 L1416.45 1203.08 L1415.87 1203.08 L1415.28 1203.08 L1414.69 1203.08 L1414.11 1203.08 L1413.52 1203.08 L1412.93 1203.08 L1412.35 1203.08 L1411.76 1203.08 L1411.17 1203.08 L1410.59 1203.08 L1410 1203.08 L1409.42 1203.08 L1408.83 1203.08 L1408.24 1203.08 L1407.66 1203.08 L1407.07 1203.08 L1406.48 1203.08 L1405.9 1203.08 L1405.31 1203.08 L1404.72 1203.08 L1404.14 1203.08 L1403.55 1203.08 L1402.96 1203.08 L1402.38 1203.08 L1401.79 1203.08 L1401.21 1203.08 L1400.62 1203.08 L1400.03 1203.08 L1399.45 1203.08 L1398.86 1203.08 L1398.27 1203.08 L1397.69 1203.08 L1397.1 1203.08 L1396.51 1203.08 L1395.93 1203.08 L1395.34 1203.08 L1394.75 1203.08 L1394.17 1203.08 L1393.58 1203.08 L1393 1203.08 L1392.41 1203.08 L1391.82 1203.08 L1391.24 1203.08 L1390.65 1203.08 L1390.06 1203.08 L1389.48 1203.08 L1388.89 1203.08 L1388.3 1203.08 L1387.72 1203.08 L1387.13 1203.08 L1386.55 1203.08 L1385.96 1203.08 L1385.37 1203.08 L1384.79 1203.08 L1384.2 1203.08 L1383.61 1203.08 L1383.03 1203.08 L1382.44 1203.08 L1381.85 1203.08 L1381.27 1203.08 L1380.68 1203.08 L1380.09 1203.08 L1379.51 1203.08 L1378.92 1203.08 L1378.34 1203.08 L1377.75 1203.08 L1377.16 1203.08 L1376.58 1203.08 L1375.99 1203.08 L1375.4 1203.08 L1374.82 1203.08 L1374.23 1203.08 L1373.64 1203.08 L1373.06 1203.08 L1372.47 1203.08 L1371.88 1203.08 L1371.3 1203.08 L1370.71 1203.08 L1370.13 1203.08 L1369.54 1203.08 L1368.95 1203.08 L1368.37 1203.08 L1367.78 1203.08 L1367.19 1203.08 L1366.61 1203.08 L1366.02 1203.08 L1365.43 1203.08 L1364.85 1203.08 L1364.26 1203.08 L1363.68 1203.08 L1363.09 1203.08 L1362.5 1203.08 L1361.92 1203.08 L1361.33 1203.08 L1360.74 1203.08 L1360.16 1203.08 L1359.57 1203.08 L1358.98 1203.08 L1358.4 1203.08 L1357.81 1203.08 L1357.22 1203.08 L1356.64 1203.08 L1356.05 1203.08 L1355.47 1203.08 L1354.88 1203.08 L1354.29 1203.08 L1353.71 1203.08 L1353.12 1203.08 L1352.53 1203.08 L1351.95 1203.08 L1351.36 1203.08 L1350.77 1203.08 L1350.19 1203.08 L1349.6 1203.08 L1349.01 1203.08 L1348.43 1203.08 L1347.84 1203.08 L1347.26 1203.08 L1346.67 1203.08 L1346.08 1203.08 L1345.5 1203.08 L1344.91 1203.08 L1344.32 1203.08 L1343.74 1203.08 L1343.15 1203.08 L1342.56 1203.08 L1341.98 1203.08 L1341.39 1203.08 L1340.8 1203.08 L1340.22 1203.08 L1339.63 1203.08 L1339.05 1203.08 L1338.46 1203.08 L1337.87 1203.08 L1337.29 1203.08 L1336.7 1203.08 L1336.11 1203.08 L1335.53 1203.08 L1334.94 1203.08 L1334.35 1203.08 L1333.77 1203.08 L1333.18 1203.08 L1332.6 1203.08 L1332.01 1203.08 L1331.42 1203.08 L1330.84 1203.08 L1330.25 1203.08 L1329.66 1203.08 L1329.08 1203.08 L1328.49 1203.08 L1327.9 1203.08 L1327.32 1203.08 L1326.73 1203.08 L1326.14 1203.08 L1325.56 1203.08 L1324.97 1203.08 L1324.39 1203.08 L1323.8 1203.08 L1323.21 1203.08 L1322.63 1203.08 L1322.04 1203.08 L1321.45 1203.08 L1320.87 1203.08 L1320.28 1203.08 L1319.69 1203.08 L1319.11 1203.08 L1318.52 1203.08 L1317.93 1203.08 L1317.35 1203.08 L1316.76 1203.08 L1316.18 1203.08 L1315.59 1203.08 L1315 1203.08 L1314.42 1203.08 L1313.83 1203.08 L1313.24 1203.08 L1312.66 1203.08 L1312.07 1203.08 L1311.48 1203.08 L1310.9 1203.08 L1310.31 1203.08 L1309.73 1203.08 L1309.14 1203.08 L1308.55 1203.08 L1307.97 1203.08 L1307.38 1203.08 L1306.79 1203.08 L1306.21 1203.08 L1305.62 1203.08 L1305.03 1203.08 L1304.45 1203.08 L1303.86 1203.08 L1303.27 1203.08 L1302.69 1203.08 L1302.1 1203.08 L1301.52 1203.08 L1300.93 1203.08 L1300.34 1203.08 L1299.76 1203.08 L1299.17 1203.08 L1298.58 1203.08 L1298 1203.08 L1297.41 1203.08 L1296.82 1203.08 L1296.24 1203.08 L1295.65 1203.08 L1295.06 1203.08 L1294.48 1203.08 L1293.89 1203.08 L1293.31 1203.08 L1292.72 1203.08 L1292.13 1203.08 L1291.55 1203.08 L1290.96 1203.08 L1290.37 1203.08 L1289.79 1203.08 L1289.2 1203.08 L1288.61 1203.08 L1288.03 1203.08 L1287.44 1203.08 L1286.86 1203.08 L1286.27 1203.08 L1285.68 1203.08 L1285.1 1203.08 L1284.51 1203.08 L1283.92 1203.08 L1283.34 1203.08 L1282.75 1203.08 L1282.16 1203.08 L1281.58 1203.08 L1280.99 1203.08 L1280.4 1203.08 L1279.82 1203.08 L1279.23 1203.08 L1278.65 1203.08 L1278.06 1203.08 L1277.47 1203.08 L1276.89 1203.08 L1276.3 1203.08 L1275.71 1203.08 L1275.13 1203.08 L1274.54 1203.08 L1273.95 1203.08 L1273.37 1203.08 L1272.78 1203.08 L1272.19 1203.08 L1271.61 1203.08 L1271.02 1203.08 L1270.44 1203.08 L1269.85 1203.08 L1269.26 1203.08 L1268.68 1203.08 L1268.09 1203.08 L1267.5 1203.08 L1266.92 1203.08 L1266.33 1203.08 L1265.74 1203.08 L1265.16 1203.08 L1264.57 1203.08 L1263.98 1203.08 L1263.4 1203.08 L1262.81 1203.08 L1262.23 1203.08 L1261.64 1203.08 L1261.05 1203.08 L1260.47 1203.08 L1259.88 1203.08 L1259.29 1203.08 L1258.71 1203.08 L1258.12 1203.08 L1257.53 1203.08 L1256.95 1203.08 L1256.36 1203.08 L1255.78 1203.08 L1255.19 1203.08 L1254.6 1203.08 L1254.02 1203.08 L1253.43 1203.08 L1252.84 1203.08 L1252.26 1203.08 L1251.67 1203.08 L1251.08 1203.08 L1250.5 1203.08 L1249.91 1203.08 L1249.32 1203.08 L1248.74 1203.08 L1248.15 1203.08 L1247.57 1203.08 L1246.98 1203.08 L1246.39 1203.08 L1245.81 1203.08 L1245.22 1203.08 L1244.63 1203.08 L1244.05 1203.08 L1243.46 1203.08 L1242.87 1203.08 L1242.29 1203.08 L1241.7 1203.08 L1241.11 1203.08 L1240.53 1203.08 L1239.94 1203.08 L1239.36 1203.08 L1238.77 1203.08 L1238.18 1203.08 L1237.6 1203.08 L1237.01 1203.08 L1236.42 1203.08 L1235.84 1203.08 L1235.25 1203.08 L1234.66 1203.08 L1234.08 1203.08 L1233.49 1203.08 L1232.91 1203.08 L1232.32 1203.08 L1231.73 1203.08 L1231.15 1203.08 L1230.56 1203.08 L1229.97 1203.08 L1229.39 1203.08 L1228.8 1203.08 L1228.21 1203.08 L1227.63 1203.08 L1227.04 1203.08 L1226.45 1203.08 L1225.87 1203.08 L1225.28 1203.08 L1224.7 1203.08 L1224.11 1203.08 L1223.52 1203.08 L1222.94 1203.08 L1222.35 1203.08 L1221.76 1203.08 L1221.18 1203.08 L1220.59 1203.08 L1220 1203.08 L1219.42 1203.08 L1218.83 1203.08 L1218.24 1203.08 L1217.66 1203.08 L1217.07 1203.08 L1216.49 1203.08 L1215.9 1203.08 L1215.31 1203.08 L1214.73 1203.08 L1214.14 1203.08 L1213.55 1203.08 L1212.97 1203.08 L1212.38 1203.08 L1211.79 1203.08 L1211.21 1203.08 L1210.62 1203.08 L1210.03 1203.08 L1209.45 1203.08 L1208.86 1203.08 L1208.28 1203.08 L1207.69 1203.08 L1207.1 1203.08 L1206.52 1203.08 L1205.93 1203.08 L1205.34 1203.08 L1204.76 1203.08 L1204.17 1203.08 L1203.58 1203.08 L1203 1203.08 L1202.41 1203.08 L1201.83 1203.08 L1201.24 1203.08 L1200.65 1203.08 L1200.07 1203.08 L1199.48 1203.08 L1198.89 1203.08 L1198.31 1203.08 L1197.72 1203.08 L1197.13 1203.08 L1196.55 1203.08 L1195.96 1203.08 L1195.37 1203.08 L1194.79 1203.08 L1194.2 1203.08 L1193.62 1203.08 L1193.03 1203.08 L1192.44 1203.08 L1191.86 1203.08 L1191.27 1203.08 L1190.68 1203.08 L1190.1 1203.08 L1189.51 1203.08 L1188.92 1203.08 L1188.34 1203.08 L1187.75 1203.08 L1187.16 1203.08 L1186.58 1203.08 L1185.99 1203.08 L1185.41 1203.08 L1184.82 1203.08 L1184.23 1203.08 L1183.65 1203.08 L1183.06 1203.08 L1182.47 1203.08 L1181.89 1203.08 L1181.3 1203.08 L1180.71 1203.08 L1180.13 1203.08 L1179.54 1203.08 L1178.96 1203.08 L1178.37 1203.08 L1177.78 1203.08 L1177.2 1203.08 L1176.61 1203.08 L1176.02 1203.08 L1175.44 1203.08 L1174.85 1203.08 L1174.26 1203.08 L1173.68 1203.08 L1173.09 1203.08 L1172.5 1203.08 L1171.92 1203.08 L1171.33 1203.08 L1170.75 1203.08 L1170.16 1203.08 L1169.57 1203.08 L1168.99 1203.08 L1168.4 1203.08 L1167.81 1203.08 L1167.23 1203.08 L1166.64 1203.08 L1166.05 1203.08 L1165.47 1203.08 L1164.88 1203.08 L1164.29 1203.08 L1163.71 1203.08 L1163.12 1203.08 L1162.54 1203.08 L1161.95 1203.08 L1161.36 1203.08 L1160.78 1203.08 L1160.19 1203.08 L1159.6 1203.08 L1159.02 1203.08 L1158.43 1203.08 L1157.84 1203.08 L1157.26 1203.08 L1156.67 1203.08 L1156.09 1203.08 L1155.5 1203.08 L1154.91 1203.08 L1154.33 1203.08 L1153.74 1203.08 L1153.15 1203.08 L1152.57 1203.08 L1151.98 1203.08 L1151.39 1203.08 L1150.81 1203.08 L1150.22 1203.08 L1149.63 1203.08 L1149.05 1203.08 L1148.46 1203.08 L1147.88 1203.08 L1147.29 1203.08 L1146.7 1203.08 L1146.12 1203.08 L1145.53 1203.08 L1144.94 1203.08 L1144.36 1203.08 L1143.77 1203.08 L1143.18 1203.08 L1142.6 1203.08 L1142.01 1203.08 L1141.42 1203.08 L1140.84 1203.08 L1140.25 1203.08 L1139.67 1203.08 L1139.08 1203.08 L1138.49 1203.08 L1137.91 1203.08 L1137.32 1203.08 L1136.73 1203.08 L1136.15 1203.08 L1135.56 1203.08 L1134.97 1203.08 L1134.39 1203.08 L1133.8 1203.08 L1133.21 1203.08 L1132.63 1203.08 L1132.04 1203.08 L1131.46 1203.08 L1130.87 1203.08 L1130.28 1203.08 L1129.7 1203.08 L1129.11 1203.08 L1128.52 1203.08 L1127.94 1203.08 L1127.35 1203.08 L1126.76 1203.08 L1126.18 1203.08 L1125.59 1203.08 L1125.01 1203.08 L1124.42 1203.08 L1123.83 1203.08 L1123.25 1203.08 L1122.66 1203.08 L1122.07 1203.08 L1121.49 1203.08 L1120.9 1203.08 L1120.31 1203.08 L1119.73 1203.08 L1119.14 1203.08 L1118.55 1203.08 L1117.97 1203.08 L1117.38 1203.08 L1116.8 1203.08 L1116.21 1203.08 L1115.62 1203.08 L1115.04 1203.08 L1114.45 1203.08 L1113.86 1203.08 L1113.28 1203.08 L1112.69 1203.08 L1112.1 1203.08 L1111.52 1203.08 L1110.93 1203.08 L1110.34 1203.08 L1109.76 1203.08 L1109.17 1203.08 L1108.59 1203.08 L1108 1203.08 L1107.41 1203.08 L1106.83 1203.08 L1106.24 1203.08 L1105.65 1203.08 L1105.07 1203.08 L1104.48 1203.08 L1103.89 1203.08 L1103.31 1203.08 L1102.72 1203.08 L1102.14 1203.08 L1101.55 1203.08 L1100.96 1203.08 L1100.38 1203.08 L1099.79 1203.08 L1099.2 1203.08 L1098.62 1203.08 L1098.03 1203.08 L1097.44 1203.08 L1096.86 1203.08 L1096.27 1203.08 L1095.68 1203.08 L1095.1 1203.08 L1094.51 1203.08 L1093.93 1203.08 L1093.34 1203.08 L1092.75 1203.08 L1092.17 1203.08 L1091.58 1203.08 L1090.99 1203.08 L1090.41 1203.08 L1089.82 1203.08 L1089.23 1203.08 L1088.65 1203.08 L1088.06 1203.08 L1087.47 1203.08 L1086.89 1203.08 L1086.3 1203.08 L1085.72 1203.08 L1085.13 1203.08 L1084.54 1203.08 L1083.96 1203.08 L1083.37 1203.08 L1082.78 1203.08 L1082.2 1203.08 L1081.61 1203.08 L1081.02 1203.08 L1080.44 1203.08 L1079.85 1203.08 L1079.26 1203.08 L1078.68 1203.08 L1078.09 1203.08 L1077.51 1203.08 L1076.92 1203.08 L1076.33 1203.08 L1075.75 1203.08 L1075.16 1203.08 L1074.57 1203.08 L1073.99 1203.08 L1073.4 1203.08 L1072.81 1203.08 L1072.23 1203.08 L1071.64 1203.08 L1071.06 1203.08 L1070.47 1203.08 L1069.88 1203.08 L1069.3 1203.08 L1068.71 1203.08 L1068.12 1203.08 L1067.54 1203.08 L1066.95 1203.08 L1066.36 1203.08 L1065.78 1203.08 L1065.19 1203.08 L1064.6 1203.08 L1064.02 1203.08 L1063.43 1203.08 L1062.85 1203.08 L1062.26 1203.08 L1061.67 1203.08 L1061.09 1203.08 L1060.5 1203.08 L1059.91 1203.08 L1059.33 1203.08 L1058.74 1203.08 L1058.15 1203.08 L1057.57 1203.08 L1056.98 1203.08 L1056.39 1203.08 L1055.81 1203.08 L1055.22 1203.08 L1054.64 1203.08 L1054.05 1203.08 L1053.46 1203.08 L1052.88 1203.08 L1052.29 1203.08 L1051.7 1203.08 L1051.12 1203.08 L1050.53 1203.08 L1049.94 1203.08 L1049.36 1203.08 L1048.77 1203.08 L1048.19 1203.08 L1047.6 1203.08 L1047.01 1203.08 L1046.43 1203.08 L1045.84 1203.08 L1045.25 1203.08 L1044.67 1203.08 L1044.08 1203.08 L1043.49 1203.08 L1042.91 1203.08 L1042.32 1203.08 L1041.73 1203.08 L1041.15 1203.08 L1040.56 1203.08 L1039.98 1203.08 L1039.39 1203.08 L1038.8 1203.08 L1038.22 1203.08 L1037.63 1203.08 L1037.04 1203.08 L1036.46 1203.08 L1035.87 1203.08 L1035.28 1203.08 L1034.7 1203.08 L1034.11 1203.08 L1033.52 1203.08 L1032.94 1203.08 L1032.35 1203.08 L1031.77 1203.08 L1031.18 1203.08 L1030.59 1203.08 L1030.01 1203.08 L1029.42 1203.08 L1028.83 1203.08 L1028.25 1203.08 L1027.66 1203.08 L1027.07 1203.08 L1026.49 1203.08 L1025.9 1203.08 L1025.32 1203.08 L1024.73 1203.08 L1024.14 1203.08 L1023.56 1203.08 L1022.97 1203.08 L1022.38 1203.08 L1021.8 1203.08 L1021.21 1203.08 L1020.62 1203.08 L1020.04 1203.08 L1019.45 1203.08 L1018.86 1203.08 L1018.28 1203.08 L1017.69 1203.08 L1017.11 1203.08 L1016.52 1203.08 L1015.93 1203.08 L1015.35 1203.08 L1014.76 1203.08 L1014.17 1203.08 L1013.59 1203.08 L1013 1203.08 L1012.41 1203.08 L1011.83 1203.08 L1011.24 1203.08 L1010.65 1203.08 L1010.07 1203.08 L1009.48 1203.08 L1008.9 1203.08 L1008.31 1203.08 L1007.72 1203.08 L1007.14 1203.08 L1006.55 1203.08 L1005.96 1203.08 L1005.38 1203.08 L1004.79 1203.08 L1004.2 1203.08 L1003.62 1203.08 L1003.03 1203.08 L1002.44 1203.08 L1001.86 1203.08 L1001.27 1203.08 L1000.69 1203.08 L1000.1 1203.08 L999.513 1203.08 L998.926 1203.08 L998.34 1203.08 L997.754 1203.08 L997.167 1203.08 L996.581 1203.08 L995.994 1203.08 L995.408 1203.08 L994.822 1203.08 L994.235 1203.08 L993.649 1203.08 L993.062 1203.08 L992.476 1203.08 L991.889 1203.08 L991.303 1203.08 L990.717 1203.08 L990.13 1203.08 L989.544 1203.08 L988.957 1203.08 L988.371 1203.08 L987.785 1203.08 L987.198 1203.08 L986.612 1203.08 L986.025 1203.08  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1203.44 986.612,1203.44 987.198,1203.44 987.785,1203.44 988.371,1203.44 988.957,1203.44 989.544,1203.44 990.13,1203.44 990.717,1203.44 991.303,1203.44 991.889,1203.44 992.476,1203.44 993.062,1203.44 993.649,1203.44 994.235,1203.44 994.822,1203.44 995.408,1203.44 995.994,1203.44 996.581,1203.44 997.167,1203.44 997.754,1203.44 998.34,1203.44 998.926,1203.44 999.513,1203.44 1000.1,1203.44 1000.69,1203.44 1001.27,1203.44 1001.86,1203.44 1002.44,1203.44 1003.03,1203.44 1003.62,1203.44 1004.2,1203.44 1004.79,1203.44 1005.38,1203.44 1005.96,1203.44 1006.55,1203.44 1007.14,1203.44 1007.72,1203.44 1008.31,1203.44 1008.9,1203.44 1009.48,1203.44 1010.07,1203.44 1010.65,1203.44 1011.24,1203.44 1011.83,1203.44 1012.41,1203.44 1013,1203.44 1013.59,1203.44 1014.17,1203.44 1014.76,1203.44 1015.35,1203.44 1015.93,1203.44 1016.52,1203.44 1017.11,1203.44 1017.69,1203.44 1018.28,1203.44 1018.86,1203.44 1019.45,1203.44 1020.04,1203.44 1020.62,1203.44 1021.21,1203.44 1021.8,1203.44 1022.38,1203.44 1022.97,1203.44 1023.56,1203.44 1024.14,1203.44 1024.73,1203.44 1025.32,1203.44 1025.9,1203.44 1026.49,1203.44 1027.07,1203.44 1027.66,1203.44 1028.25,1203.44 1028.83,1203.44 1029.42,1203.44 1030.01,1203.44 1030.59,1203.44 1031.18,1203.44 1031.77,1203.44 1032.35,1203.44 1032.94,1203.44 1033.52,1203.44 1034.11,1203.44 1034.7,1203.44 1035.28,1203.44 1035.87,1203.44 1036.46,1203.44 1037.04,1203.44 1037.63,1203.44 1038.22,1203.44 1038.8,1203.44 1039.39,1203.44 1039.98,1203.44 1040.56,1203.44 1041.15,1203.44 1041.73,1203.44 1042.32,1203.44 1042.91,1203.44 1043.49,1203.44 1044.08,1203.44 1044.67,1203.44 1045.25,1203.44 1045.84,1203.44 1046.43,1203.44 1047.01,1203.44 1047.6,1203.44 1048.19,1203.44 1048.77,1203.44 1049.36,1203.44 1049.94,1203.44 1050.53,1203.44 1051.12,1203.44 1051.7,1203.44 1052.29,1203.44 1052.88,1203.44 1053.46,1203.44 1054.05,1203.44 1054.64,1203.44 1055.22,1203.44 1055.81,1203.44 1056.39,1203.44 1056.98,1203.44 1057.57,1203.44 1058.15,1203.44 1058.74,1203.44 1059.33,1203.44 1059.91,1203.44 1060.5,1203.44 1061.09,1203.44 1061.67,1203.44 1062.26,1203.44 1062.85,1203.44 1063.43,1203.44 1064.02,1203.44 1064.6,1203.44 1065.19,1203.44 1065.78,1203.44 1066.36,1203.44 1066.95,1203.44 1067.54,1203.44 1068.12,1203.44 1068.71,1203.44 1069.3,1203.44 1069.88,1203.44 1070.47,1203.44 1071.06,1203.44 1071.64,1203.44 1072.23,1203.44 1072.81,1203.44 1073.4,1203.44 1073.99,1203.44 1074.57,1203.44 1075.16,1203.44 1075.75,1203.44 1076.33,1203.44 1076.92,1203.44 1077.51,1203.44 1078.09,1203.44 1078.68,1203.44 1079.26,1203.44 1079.85,1203.44 1080.44,1203.44 1081.02,1203.44 1081.61,1203.44 1082.2,1203.44 1082.78,1203.44 1083.37,1203.44 1083.96,1203.44 1084.54,1203.44 1085.13,1203.44 1085.72,1203.44 1086.3,1203.44 1086.89,1203.44 1087.47,1203.44 1088.06,1203.44 1088.65,1203.44 1089.23,1203.44 1089.82,1203.44 1090.41,1203.44 1090.99,1203.44 1091.58,1203.44 1092.17,1203.44 1092.75,1203.44 1093.34,1203.44 1093.93,1203.44 1094.51,1203.44 1095.1,1203.44 1095.68,1203.44 1096.27,1203.44 1096.86,1203.44 1097.44,1203.44 1098.03,1203.44 1098.62,1203.44 1099.2,1203.44 1099.79,1203.44 1100.38,1203.44 1100.96,1203.44 1101.55,1203.44 1102.14,1203.44 1102.72,1203.44 1103.31,1203.44 1103.89,1203.44 1104.48,1203.44 1105.07,1203.44 1105.65,1203.44 1106.24,1203.44 1106.83,1203.44 1107.41,1203.44 1108,1203.44 1108.59,1203.44 1109.17,1203.44 1109.76,1203.44 1110.34,1203.44 1110.93,1203.44 1111.52,1203.44 1112.1,1203.44 1112.69,1203.44 1113.28,1203.44 1113.86,1203.44 1114.45,1203.44 1115.04,1203.44 1115.62,1203.44 1116.21,1203.44 1116.8,1203.44 1117.38,1203.44 1117.97,1203.44 1118.55,1203.44 1119.14,1203.44 1119.73,1203.44 1120.31,1203.44 1120.9,1203.44 1121.49,1203.44 1122.07,1203.44 1122.66,1203.44 1123.25,1203.44 1123.83,1203.44 1124.42,1203.44 1125.01,1203.44 1125.59,1203.44 1126.18,1203.44 1126.76,1203.44 1127.35,1203.44 1127.94,1203.44 1128.52,1203.44 1129.11,1203.44 1129.7,1203.44 1130.28,1203.44 1130.87,1203.44 1131.46,1203.44 1132.04,1203.44 1132.63,1203.44 1133.21,1203.44 1133.8,1203.44 1134.39,1203.44 1134.97,1203.44 1135.56,1203.44 1136.15,1203.44 1136.73,1203.44 1137.32,1203.44 1137.91,1203.44 1138.49,1203.44 1139.08,1203.44 1139.67,1203.44 1140.25,1203.44 1140.84,1203.44 1141.42,1203.44 1142.01,1203.44 1142.6,1203.44 1143.18,1203.44 1143.77,1203.44 1144.36,1203.44 1144.94,1203.44 1145.53,1203.44 1146.12,1203.44 1146.7,1203.44 1147.29,1203.44 1147.88,1203.44 1148.46,1203.44 1149.05,1203.44 1149.63,1203.44 1150.22,1203.44 1150.81,1203.44 1151.39,1203.44 1151.98,1203.44 1152.57,1203.44 1153.15,1203.44 1153.74,1203.44 1154.33,1203.44 1154.91,1203.44 1155.5,1203.44 1156.09,1203.44 1156.67,1203.44 1157.26,1203.44 1157.84,1203.44 1158.43,1203.44 1159.02,1203.44 1159.6,1203.44 1160.19,1203.44 1160.78,1203.44 1161.36,1203.44 1161.95,1203.44 1162.54,1203.44 1163.12,1203.44 1163.71,1203.44 1164.29,1203.44 1164.88,1203.44 1165.47,1203.44 1166.05,1203.44 1166.64,1203.44 1167.23,1203.44 1167.81,1203.44 1168.4,1203.44 1168.99,1203.44 1169.57,1203.44 1170.16,1203.44 1170.75,1203.44 1171.33,1203.44 1171.92,1203.44 1172.5,1203.44 1173.09,1203.44 1173.68,1203.44 1174.26,1203.44 1174.85,1203.44 1175.44,1203.44 1176.02,1203.44 1176.61,1203.44 1177.2,1203.44 1177.78,1203.44 1178.37,1203.44 1178.96,1203.44 1179.54,1203.44 1180.13,1203.44 1180.71,1203.44 1181.3,1203.44 1181.89,1203.44 1182.47,1203.44 1183.06,1203.44 1183.65,1203.44 1184.23,1203.44 1184.82,1203.44 1185.41,1203.44 1185.99,1203.44 1186.58,1203.44 1187.16,1203.44 1187.75,1203.44 1188.34,1203.44 1188.92,1203.44 1189.51,1203.44 1190.1,1203.44 1190.68,1203.44 1191.27,1203.44 1191.86,1203.44 1192.44,1203.44 1193.03,1203.44 1193.62,1203.44 1194.2,1203.44 1194.79,1203.44 1195.37,1203.44 1195.96,1203.44 1196.55,1203.44 1197.13,1203.44 1197.72,1203.44 1198.31,1203.44 1198.89,1203.44 1199.48,1203.44 1200.07,1203.44 1200.65,1203.44 1201.24,1203.44 1201.83,1203.44 1202.41,1203.44 1203,1203.44 1203.58,1203.44 1204.17,1203.44 1204.76,1203.44 1205.34,1203.44 1205.93,1203.44 1206.52,1203.44 1207.1,1203.44 1207.69,1203.44 1208.28,1203.44 1208.86,1203.44 1209.45,1203.44 1210.03,1203.44 1210.62,1203.44 1211.21,1203.44 1211.79,1203.44 1212.38,1203.44 1212.97,1203.44 1213.55,1203.44 1214.14,1203.44 1214.73,1203.44 1215.31,1203.44 1215.9,1203.44 1216.49,1203.44 1217.07,1203.44 1217.66,1203.44 1218.24,1203.44 1218.83,1203.44 1219.42,1203.44 1220,1203.44 1220.59,1203.44 1221.18,1203.44 1221.76,1203.44 1222.35,1203.44 1222.94,1203.44 1223.52,1203.44 1224.11,1203.44 1224.7,1203.44 1225.28,1203.44 1225.87,1203.44 1226.45,1203.44 1227.04,1203.44 1227.63,1203.44 1228.21,1203.44 1228.8,1203.44 1229.39,1203.44 1229.97,1203.44 1230.56,1203.44 1231.15,1203.44 1231.73,1203.44 1232.32,1203.44 1232.91,1203.44 1233.49,1203.44 1234.08,1203.44 1234.66,1203.44 1235.25,1203.44 1235.84,1203.44 1236.42,1203.44 1237.01,1203.44 1237.6,1203.44 1238.18,1203.44 1238.77,1203.44 1239.36,1203.44 1239.94,1203.44 1240.53,1203.44 1241.11,1203.44 1241.7,1203.44 1242.29,1203.44 1242.87,1203.44 1243.46,1203.44 1244.05,1203.44 1244.63,1203.44 1245.22,1203.44 1245.81,1203.44 1246.39,1203.44 1246.98,1203.44 1247.57,1203.44 1248.15,1203.44 1248.74,1203.44 1249.32,1203.44 1249.91,1203.44 1250.5,1203.44 1251.08,1203.44 1251.67,1203.44 1252.26,1203.44 1252.84,1203.44 1253.43,1203.44 1254.02,1203.44 1254.6,1203.44 1255.19,1203.44 1255.78,1203.44 1256.36,1203.44 1256.95,1203.44 1257.53,1203.44 1258.12,1203.44 1258.71,1203.44 1259.29,1203.44 1259.88,1203.44 1260.47,1203.44 1261.05,1203.44 1261.64,1203.44 1262.23,1203.44 1262.81,1203.44 1263.4,1203.44 1263.98,1203.44 1264.57,1203.44 1265.16,1203.44 1265.74,1203.44 1266.33,1203.44 1266.92,1203.44 1267.5,1203.44 1268.09,1203.44 1268.68,1203.44 1269.26,1203.44 1269.85,1203.44 1270.44,1203.44 1271.02,1203.44 1271.61,1203.44 1272.19,1203.44 1272.78,1203.44 1273.37,1203.44 1273.95,1203.44 1274.54,1203.44 1275.13,1203.44 1275.71,1203.44 1276.3,1203.44 1276.89,1203.44 1277.47,1203.44 1278.06,1203.44 1278.65,1203.44 1279.23,1203.44 1279.82,1203.44 1280.4,1203.44 1280.99,1203.44 1281.58,1203.44 1282.16,1203.44 1282.75,1203.44 1283.34,1203.44 1283.92,1203.44 1284.51,1203.44 1285.1,1203.44 1285.68,1203.44 1286.27,1203.44 1286.86,1203.44 1287.44,1203.44 1288.03,1203.44 1288.61,1203.44 1289.2,1203.44 1289.79,1203.44 1290.37,1203.44 1290.96,1203.44 1291.55,1203.44 1292.13,1203.44 1292.72,1203.44 1293.31,1203.44 1293.89,1203.44 1294.48,1203.44 1295.06,1203.44 1295.65,1203.44 1296.24,1203.44 1296.82,1203.44 1297.41,1203.44 1298,1203.44 1298.58,1203.44 1299.17,1203.44 1299.76,1203.44 1300.34,1203.44 1300.93,1203.44 1301.52,1203.44 1302.1,1203.44 1302.69,1203.44 1303.27,1203.44 1303.86,1203.44 1304.45,1203.44 1305.03,1203.44 1305.62,1203.44 1306.21,1203.44 1306.79,1203.44 1307.38,1203.44 1307.97,1203.44 1308.55,1203.44 1309.14,1203.44 1309.73,1203.44 1310.31,1203.44 1310.9,1203.44 1311.48,1203.44 1312.07,1203.44 1312.66,1203.44 1313.24,1203.44 1313.83,1203.44 1314.42,1203.44 1315,1203.44 1315.59,1203.44 1316.18,1203.44 1316.76,1203.44 1317.35,1203.44 1317.93,1203.44 1318.52,1203.44 1319.11,1203.44 1319.69,1203.44 1320.28,1203.44 1320.87,1203.44 1321.45,1203.44 1322.04,1203.44 1322.63,1203.44 1323.21,1203.44 1323.8,1203.44 1324.39,1203.44 1324.97,1203.44 1325.56,1203.44 1326.14,1203.44 1326.73,1203.44 1327.32,1203.44 1327.9,1203.44 1328.49,1203.44 1329.08,1203.44 1329.66,1203.44 1330.25,1203.44 1330.84,1203.44 1331.42,1203.44 1332.01,1203.44 1332.6,1203.44 1333.18,1203.44 1333.77,1203.44 1334.35,1203.44 1334.94,1203.44 1335.53,1203.44 1336.11,1203.44 1336.7,1203.44 1337.29,1203.44 1337.87,1203.44 1338.46,1203.44 1339.05,1203.44 1339.63,1203.44 1340.22,1203.44 1340.8,1203.44 1341.39,1203.44 1341.98,1203.44 1342.56,1203.44 1343.15,1203.44 1343.74,1203.44 1344.32,1203.44 1344.91,1203.44 1345.5,1203.44 1346.08,1203.44 1346.67,1203.44 1347.26,1203.44 1347.84,1203.44 1348.43,1203.44 1349.01,1203.44 1349.6,1203.44 1350.19,1203.44 1350.77,1203.44 1351.36,1203.44 1351.95,1203.44 1352.53,1203.44 1353.12,1203.44 1353.71,1203.44 1354.29,1203.44 1354.88,1203.44 1355.47,1203.44 1356.05,1203.44 1356.64,1203.44 1357.22,1203.44 1357.81,1203.44 1358.4,1203.44 1358.98,1203.44 1359.57,1203.44 1360.16,1203.44 1360.74,1203.44 1361.33,1203.44 1361.92,1203.44 1362.5,1203.44 1363.09,1203.44 1363.68,1203.44 1364.26,1203.44 1364.85,1203.44 1365.43,1203.44 1366.02,1203.44 1366.61,1203.44 1367.19,1203.44 1367.78,1203.44 1368.37,1203.44 1368.95,1203.44 1369.54,1203.44 1370.13,1203.44 1370.71,1203.44 1371.3,1203.44 1371.88,1203.44 1372.47,1203.44 1373.06,1203.44 1373.64,1203.44 1374.23,1203.44 1374.82,1203.44 1375.4,1203.44 1375.99,1203.44 1376.58,1203.44 1377.16,1203.44 1377.75,1203.44 1378.34,1203.44 1378.92,1203.44 1379.51,1203.44 1380.09,1203.44 1380.68,1203.44 1381.27,1203.44 1381.85,1203.44 1382.44,1203.44 1383.03,1203.44 1383.61,1203.44 1384.2,1203.44 1384.79,1203.44 1385.37,1203.44 1385.96,1203.44 1386.55,1203.44 1387.13,1203.44 1387.72,1203.44 1388.3,1203.44 1388.89,1203.44 1389.48,1203.44 1390.06,1203.44 1390.65,1203.44 1391.24,1203.44 1391.82,1203.44 1392.41,1203.44 1393,1203.44 1393.58,1203.44 1394.17,1203.44 1394.75,1203.44 1395.34,1203.44 1395.93,1203.44 1396.51,1203.44 1397.1,1203.44 1397.69,1203.44 1398.27,1203.44 1398.86,1203.44 1399.45,1203.44 1400.03,1203.44 1400.62,1203.44 1401.21,1203.44 1401.79,1203.44 1402.38,1203.44 1402.96,1203.44 1403.55,1203.44 1404.14,1203.44 1404.72,1203.44 1405.31,1203.44 1405.9,1203.44 1406.48,1203.44 1407.07,1203.44 1407.66,1203.44 1408.24,1203.44 1408.83,1203.44 1409.42,1203.44 1410,1203.44 1410.59,1203.44 1411.17,1203.44 1411.76,1203.44 1412.35,1203.44 1412.93,1203.44 1413.52,1203.44 1414.11,1203.44 1414.69,1203.44 1415.28,1203.44 1415.87,1203.44 1416.45,1203.44 1417.04,1203.44 1417.63,1203.44 1418.21,1203.44 1418.8,1203.44 1419.38,1203.44 1419.97,1203.44 1420.56,1203.44 1421.14,1203.44 1421.73,1203.44 1422.32,1203.44 1422.9,1203.44 1423.49,1203.44 1424.08,1203.44 1424.66,1203.44 1425.25,1203.44 1425.83,1203.44 1426.42,1203.44 1427.01,1203.44 1427.59,1203.44 1428.18,1203.44 1428.77,1203.44 1429.35,1203.44 1429.94,1203.44 1430.53,1203.44 1431.11,1203.44 1431.7,1203.44 1432.29,1203.44 1432.87,1203.44 1433.46,1203.44 1434.04,1203.44 1434.63,1203.44 1435.22,1203.44 1435.8,1203.44 1436.39,1203.44 1436.98,1203.44 1437.56,1203.44 1438.15,1203.44 1438.74,1203.44 1439.32,1203.44 1439.91,1203.44 1440.5,1203.44 1441.08,1203.44 1441.67,1203.44 1442.25,1203.44 1442.84,1203.44 1443.43,1203.44 1444.01,1203.44 1444.6,1203.44 1445.19,1203.44 1445.77,1203.44 1446.36,1203.44 1446.95,1203.44 1447.53,1203.44 1448.12,1203.44 1448.7,1203.44 1449.29,1203.44 1449.88,1203.44 1450.46,1203.44 1451.05,1203.44 1451.64,1203.44 1452.22,1203.44 1452.81,1203.44 1453.4,1203.44 1453.98,1203.44 1454.57,1203.44 1455.16,1203.44 1455.74,1203.44 1456.33,1203.44 1456.91,1203.44 1457.5,1203.44 1458.09,1203.44 1458.67,1203.44 1459.26,1203.44 1459.85,1203.44 1460.43,1203.44 1461.02,1203.44 1461.61,1203.44 1462.19,1203.44 1462.78,1203.44 1463.37,1203.44 1463.95,1203.44 1464.54,1203.44 1465.12,1203.44 1465.71,1203.44 1466.3,1203.44 1466.88,1203.44 1467.47,1203.44 1468.06,1203.44 1468.64,1203.44 1469.23,1203.44 1469.82,1203.44 1470.4,1203.44 1470.99,1203.44 1471.57,1203.44 1472.16,1203.44 1472.75,1203.44 1473.33,1203.44 1473.92,1203.44 1474.51,1203.44 1475.09,1203.44 1475.68,1203.44 1476.27,1203.44 1476.85,1203.44 1477.44,1203.44 1478.03,1203.44 1478.61,1203.44 1479.2,1203.44 1479.78,1203.44 1480.37,1203.44 1480.96,1203.44 1481.54,1203.44 1482.13,1203.44 1482.72,1203.44 1483.3,1203.44 1483.89,1203.44 1484.48,1203.44 1485.06,1203.44 1485.65,1203.44 1486.24,1203.44 1486.82,1203.44 1487.41,1203.44 1487.99,1203.44 1488.58,1203.44 1489.17,1203.44 1489.75,1203.44 1490.34,1203.44 1490.93,1203.44 1491.51,1203.44 1492.1,1203.44 1492.69,1203.44 1493.27,1203.44 1493.86,1203.44 1494.45,1203.44 1495.03,1203.44 1495.62,1203.44 1496.2,1203.44 1496.79,1203.44 1497.38,1203.44 1497.96,1203.44 1498.55,1203.44 1499.14,1203.44 1499.72,1203.44 1500.31,1203.44 1500.9,1203.44 1501.48,1203.44 1502.07,1203.44 1502.65,1203.44 1503.24,1203.44 1503.83,1203.44 1504.41,1203.44 1505,1203.44 1505.59,1203.44 1506.17,1203.44 1506.76,1203.44 1507.35,1203.44 1507.93,1203.44 1508.52,1203.44 1509.11,1203.44 1509.69,1203.44 1510.28,1203.44 1510.86,1203.44 1511.45,1203.44 1512.04,1203.44 1512.62,1203.44 1513.21,1203.44 1513.8,1203.44 1514.38,1203.44 1514.97,1203.44 1515.56,1203.44 1516.14,1203.44 1516.73,1203.44 1517.32,1203.44 1517.9,1203.44 1518.49,1203.44 1519.07,1203.44 1519.66,1203.44 1520.25,1203.44 1520.83,1203.44 1521.42,1203.44 1522.01,1203.44 1522.59,1203.44 1523.18,1203.44 1523.77,1203.44 1524.35,1203.44 1524.94,1203.44 1525.52,1203.44 1526.11,1203.44 1526.7,1203.44 1527.28,1203.44 1527.87,1203.44 1528.46,1203.44 1529.04,1203.44 1529.63,1203.44 1530.22,1203.44 1530.8,1203.44 1531.39,1203.44 1531.98,1203.44 1532.56,1203.44 1533.15,1203.44 1533.73,1203.44 1534.32,1203.44 1534.91,1203.44 1535.49,1203.44 1536.08,1203.44 1536.67,1203.44 1537.25,1203.44 1537.84,1203.44 1538.43,1203.44 1539.01,1203.44 1539.6,1203.44 1540.19,1203.44 1540.77,1203.44 1541.36,1203.44 1541.94,1203.44 1542.53,1203.44 1543.12,1203.44 1543.7,1203.44 1544.29,1203.44 1544.88,1203.44 1545.46,1203.44 1546.05,1203.44 1546.64,1203.44 1547.22,1203.44 1547.81,1203.44 1548.4,1203.44 1548.98,1203.44 1549.57,1203.44 1550.15,1203.44 1550.74,1203.44 1551.33,1203.44 1551.91,1203.44 1552.5,1203.44 1553.09,1203.44 1553.67,1203.44 1554.26,1203.44 1554.85,1203.44 1555.43,1203.44 1556.02,1203.44 1556.6,1203.44 1557.19,1203.44 1557.78,1203.44 1558.36,1203.44 1558.95,1203.44 1559.54,1203.44 1560.12,1203.44 1560.71,1203.44 1561.3,1203.44 1561.88,1203.44 1562.47,1203.44 1563.06,1203.44 1563.64,1203.44 1564.23,1203.44 1564.81,1203.44 1565.4,1203.44 1565.99,1203.44 1566.57,1203.44 1567.16,1203.44 1567.75,1203.44 1568.33,1203.44 1568.92,1203.44 1569.51,1203.44 1570.09,1203.44 1570.68,1203.44 1571.27,1203.44 1571.85,1203.44 1572.44,1203.44 1573.02,1203.44 1573.61,1203.44 1574.2,1203.44 1574.78,1203.44 1575.37,1203.44 1575.96,1203.44 1576.54,1203.44 1577.13,1203.44 1577.72,1203.44 1578.3,1203.44 1578.89,1203.44 1579.47,1203.44 1580.06,1203.44 1580.65,1203.44 1581.23,1203.44 1581.82,1203.44 1582.41,1203.44 1582.99,1203.44 1583.58,1203.44 1584.17,1203.44 1584.75,1203.44 1585.34,1203.44 1585.93,1203.44 1586.51,1203.44 1587.1,1203.44 1587.68,1203.44 1588.27,1203.44 1588.86,1203.44 1589.44,1203.44 1590.03,1203.44 1590.62,1203.44 1591.2,1203.44 1591.79,1203.44 1592.38,1203.44 1592.96,1203.44 1593.55,1203.44 1594.14,1203.44 1594.72,1203.44 1595.31,1203.44 1595.89,1203.44 1596.48,1203.44 1597.07,1203.44 1597.65,1203.44 1598.24,1203.44 1598.83,1203.44 1599.41,1203.44 1600,1203.44 1600.59,1203.44 1601.17,1203.44 1601.76,1203.44 1602.34,1203.44 1602.93,1203.44 1603.52,1203.44 1604.1,1203.44 1604.69,1203.44 1605.28,1203.44 1605.86,1203.44 1606.45,1203.44 1607.04,1203.44 1607.62,1203.44 1608.21,1203.44 1608.8,1203.44 1609.38,1203.44 1609.97,1203.44 1610.55,1203.44 1611.14,1203.44 1611.73,1203.44 1612.31,1203.44 1612.9,1203.44 1613.49,1203.44 1614.07,1203.44 1614.66,1203.44 1615.25,1203.44 1615.83,1203.44 1616.42,1203.44 1617.01,1203.44 1617.59,1203.44 1618.18,1203.44 1618.76,1203.44 1619.35,1203.44 1619.94,1203.44 1620.52,1203.44 1621.11,1203.44 1621.7,1203.44 1622.28,1203.44 1622.87,1203.44 1623.46,1203.44 1624.04,1203.44 1624.63,1203.44 1625.22,1203.44 1625.8,1203.44 1626.39,1203.44 1626.97,1203.44 1627.56,1203.44 1628.15,1203.44 1628.73,1203.44 1629.32,1203.44 1629.91,1203.44 1630.49,1203.44 1631.08,1203.44 1631.67,1203.44 1632.25,1203.44 1632.84,1203.44 1633.42,1203.44 1634.01,1203.44 1634.6,1203.44 1635.18,1203.44 1635.77,1203.44 1636.36,1203.44 1636.94,1203.44 1637.53,1203.44 1638.12,1203.44 1638.7,1203.44 1639.29,1203.44 1639.88,1203.44 1640.46,1203.44 1641.05,1203.44 1641.63,1203.44 1642.22,1203.44 1642.81,1203.44 1643.39,1203.44 1643.98,1203.44 1644.57,1203.44 1645.15,1203.44 1645.74,1203.44 1646.33,1203.44 1646.91,1203.44 1647.5,1203.44 1648.09,1203.44 1648.67,1203.44 1649.26,1203.44 1649.84,1203.44 1650.43,1203.44 1651.02,1203.44 1651.6,1203.44 1652.19,1203.44 1652.78,1203.44 1653.36,1203.44 1653.95,1203.44 1654.54,1203.44 1655.12,1203.44 1655.71,1203.44 1656.29,1203.44 1656.88,1203.44 1657.47,1203.44 1658.05,1203.44 1658.64,1203.44 1659.23,1203.44 1659.81,1203.44 1660.4,1203.44 1660.99,1203.44 1661.57,1203.44 1662.16,1203.44 1662.75,1203.44 1663.33,1203.44 1663.92,1203.44 1664.5,1203.44 1665.09,1203.44 1665.68,1203.44 1666.26,1203.44 1666.85,1203.44 1667.44,1203.44 1668.02,1203.44 1668.61,1203.44 1669.2,1203.44 1669.78,1203.44 1670.37,1203.44 1670.96,1203.44 1671.54,1203.44 1672.13,1203.44 1672.71,1203.44 1673.3,1203.44 1673.89,1203.44 1674.47,1203.44 1675.06,1203.44 1675.65,1203.44 1676.23,1203.44 1676.82,1203.44 1677.41,1203.44 1677.99,1203.44 1678.58,1203.44 1679.17,1203.44 1679.75,1203.44 1680.34,1203.44 1680.92,1203.44 1681.51,1203.44 1682.1,1203.44 1682.68,1203.44 1683.27,1203.44 1683.86,1203.44 1684.44,1203.44 1685.03,1203.44 1685.62,1203.44 1686.2,1203.44 1686.79,1203.44 1687.37,1203.44 1687.96,1203.44 1688.55,1203.44 1689.13,1203.44 1689.72,1203.44 1690.31,1203.44 1690.89,1203.44 1691.48,1203.44 1692.07,1203.44 1692.65,1203.44 1693.24,1203.44 1693.83,1203.44 1694.41,1203.44 1695,1203.44 1695.58,1203.44 1696.17,1203.44 1696.76,1203.44 1697.34,1203.44 1697.93,1203.44 1698.52,1203.44 1699.1,1203.44 1699.69,1203.44 1700.28,1203.44 1700.86,1203.44 1701.45,1203.44 1702.04,1203.44 1702.62,1203.44 1703.21,1203.44 1703.79,1203.44 1704.38,1203.44 1704.97,1203.44 1705.55,1203.44 1706.14,1203.44 1706.73,1203.44 1707.31,1203.44 1707.9,1203.44 1708.49,1203.44 1709.07,1203.44 1709.66,1203.44 1710.24,1203.44 1710.83,1203.44 1711.42,1203.44 1712,1203.44 1712.59,1203.44 1713.18,1203.44 1713.76,1203.44 1714.35,1203.44 1714.94,1203.44 1715.52,1203.44 1716.11,1203.44 1716.7,1203.44 1717.28,1203.44 1717.87,1203.44 1718.45,1203.44 1719.04,1203.44 1719.63,1203.44 1720.21,1203.44 1720.8,1203.44 1721.39,1203.44 1721.97,1203.44 1722.56,1203.44 1723.15,1203.44 1723.73,1203.44 1724.32,1203.44 1724.91,1203.44 1725.49,1203.44 1726.08,1203.44 1726.66,1203.44 1727.25,1203.44 1727.84,1203.44 1728.42,1203.44 1729.01,1203.44 1729.6,1203.44 1730.18,1203.44 1730.77,1203.44 1731.36,1203.44 1731.94,1203.44 1732.53,1203.44 1733.11,1203.44 1733.7,1203.44 1734.29,1203.44 1734.87,1203.44 1735.46,1203.44 1736.05,1203.44 1736.63,1203.44 1737.22,1203.44 1737.81,1203.44 1738.39,1203.44 1738.98,1203.44 1739.57,1203.44 1740.15,1203.44 1740.74,1203.44 1741.32,1203.44 1741.91,1203.44 1742.5,1203.44 1743.08,1203.44 1743.67,1203.44 1744.26,1203.44 1744.84,1203.44 1745.43,1203.44 1746.02,1203.44 1746.6,1203.44 1747.19,1203.44 1747.78,1203.44 1748.36,1203.44 1748.95,1203.44 1749.53,1203.44 1750.12,1203.44 1750.71,1203.44 1751.29,1203.44 1751.88,1203.44 1752.47,1203.44 1753.05,1203.44 1753.64,1203.44 1754.23,1203.44 1754.81,1203.44 1755.4,1203.44 1755.99,1203.44 1756.57,1203.44 1757.16,1203.44 1757.74,1203.44 1758.33,1203.44 1758.92,1203.44 1759.5,1203.44 1760.09,1203.44 1760.68,1203.44 1761.26,1203.44 1761.85,1203.44 1762.44,1203.44 1763.02,1203.44 1763.61,1203.44 1764.19,1203.44 1764.78,1203.44 1765.37,1203.44 1765.95,1203.44 1766.54,1203.44 1767.13,1203.44 1767.71,1203.44 1768.3,1203.44 1768.89,1203.44 1769.47,1203.44 1770.06,1203.44 1770.65,1203.44 1771.23,1203.44 1771.82,1203.44 1772.4,1203.44 1772.99,1203.44 1773.58,1203.44 1774.16,1203.44 1774.75,1203.44 1775.34,1203.44 1775.92,1203.44 1776.51,1203.44 1777.1,1203.44 1777.68,1203.44 1778.27,1203.44 1778.86,1203.44 1779.44,1203.44 1780.03,1203.44 1780.61,1203.44 1781.2,1203.44 1781.79,1203.44 1782.37,1203.44 1782.96,1203.44 1783.55,1203.44 1784.13,1203.44 1784.72,1203.44 1785.31,1203.44 1785.89,1203.44 1786.48,1203.44 1787.06,1203.44 1787.65,1203.44 1788.24,1203.44 1788.82,1203.44 1789.41,1203.44 1790,1203.44 1790.58,1203.44 1791.17,1203.44 1791.76,1203.44 1792.34,1203.44 1792.93,1203.44 1793.52,1203.44 1794.1,1203.44 1794.69,1203.44 1795.27,1203.44 1795.86,1203.44 1796.45,1203.44 1797.03,1203.44 1797.62,1203.44 1798.21,1203.44 1798.79,1203.44 1799.38,1203.44 1799.97,1203.44 1800.55,1203.44 1801.14,1203.44 1801.73,1203.44 1802.31,1203.44 1802.9,1203.44 1803.48,1203.44 1804.07,1203.44 1804.66,1203.44 1805.24,1203.44 1805.83,1203.44 1806.42,1203.44 1807,1203.44 1807.59,1203.44 1808.18,1203.44 1808.76,1203.44 1809.35,1203.44 1809.94,1203.44 1810.52,1203.44 1811.11,1203.44 1811.69,1203.44 1812.28,1203.44 1812.87,1203.44 1813.45,1203.44 1814.04,1203.44 1814.63,1203.44 1815.21,1203.44 1815.8,1203.44 1816.39,1203.44 1816.97,1203.44 1817.56,1203.44 1818.14,1203.44 1818.73,1203.44 1819.32,1203.44 1819.9,1203.44 1820.49,1203.44 1821.08,1203.44 1821.66,1203.44 1822.25,1203.44 1822.84,1203.44 1823.42,1203.44 1824.01,1203.44 1824.6,1203.44 1825.18,1203.44 1825.77,1203.44 1826.35,1203.44 1826.94,1203.44 1827.53,1203.44 1828.11,1203.44 1828.7,1203.44 1829.29,1203.44 1829.87,1203.44 1830.46,1203.44 1831.05,1203.44 1831.63,1203.44 1832.22,1203.44 1832.81,1203.44 1833.39,1203.44 1833.98,1203.44 1834.56,1203.44 1835.15,1203.44 1835.74,1203.44 1836.32,1203.44 1836.91,1203.44 1837.5,1203.44 1838.08,1203.44 1838.67,1203.44 1839.26,1203.44 1839.84,1203.44 1840.43,1203.44 1841.01,1203.44 1841.6,1203.44 1842.19,1203.44 1842.77,1203.44 1843.36,1203.44 1843.95,1203.44 1844.53,1203.44 1845.12,1203.44 1845.71,1203.44 1846.29,1203.44 1846.88,1203.44 1847.47,1203.44 1848.05,1203.44 1848.64,1203.44 1849.22,1203.44 1849.81,1203.44 1850.4,1203.44 1850.98,1203.44 1851.57,1203.44 1852.16,1203.44 1852.74,1203.44 1853.33,1203.44 1853.92,1203.44 1854.5,1203.44 1855.09,1203.44 1855.68,1203.44 1856.26,1203.44 1856.85,1203.44 1857.43,1203.44 1858.02,1203.44 1858.61,1203.44 1859.19,1203.44 1859.78,1203.44 1860.37,1203.44 1860.95,1203.44 1861.54,1203.44 1862.13,1203.44 1862.71,1203.44 1863.3,1203.44 1863.88,1203.44 1864.47,1203.44 1865.06,1203.44 1865.64,1203.44 1866.23,1203.44 1866.82,1203.44 1867.4,1203.44 1867.99,1203.44 1868.58,1203.44 1869.16,1203.44 1869.75,1203.44 1870.34,1203.44 1870.92,1203.44 1871.51,1203.44 1872.09,1203.44 1872.68,1203.44 1873.27,1203.44 1873.85,1203.44 1874.44,1203.44 1875.03,1203.44 1875.61,1203.44 1876.2,1203.44 1876.79,1203.44 1877.37,1203.44 1877.96,1203.44 1878.55,1203.44 1879.13,1203.44 1879.72,1203.44 1880.3,1203.44 1880.89,1203.44 1881.48,1203.44 1882.06,1203.44 1882.65,1203.44 1883.24,1203.44 1883.82,1203.44 1884.41,1203.44 1885,1203.44 1885.58,1203.44 1886.17,1203.44 1886.76,1203.44 1887.34,1203.44 1887.93,1203.44 1888.51,1203.44 1889.1,1203.44 1889.69,1203.44 1890.27,1203.44 1890.86,1203.44 1891.45,1203.44 1892.03,1203.44 1892.62,1203.44 1893.21,1203.44 1893.79,1203.44 1894.38,1203.44 1894.96,1203.44 1895.55,1203.44 1896.14,1203.44 1896.72,1203.44 1897.31,1203.44 1897.9,1203.44 1898.48,1203.44 1899.07,1203.44 1899.66,1203.44 1900.24,1203.44 1900.83,1203.44 1901.42,1203.44 1902,1203.44 1902.59,1203.44 1903.17,1203.44 1903.76,1203.44 1904.35,1203.44 1904.93,1203.44 1905.52,1203.44 1906.11,1203.44 1906.69,1203.44 1907.28,1203.44 1907.87,1203.44 1908.45,1203.44 1909.04,1203.44 1909.63,1203.44 1910.21,1203.44 1910.8,1203.44 1911.38,1203.44 1911.97,1203.44 1912.56,1203.44 1913.14,1203.44 1913.73,1203.44 1914.32,1203.44 1914.9,1203.44 1915.49,1203.44 1916.08,1203.44 1916.66,1203.44 1917.25,1203.44 1917.83,1203.44 1918.42,1203.44 1919.01,1203.44 1919.59,1203.44 1920.18,1203.44 1920.77,1203.44 1921.35,1203.44 1921.94,1203.44 1922.53,1203.44 1923.11,1203.44 1923.7,1203.44 1924.29,1203.44 1924.87,1203.44 1925.46,1203.44 1926.04,1203.44 1926.63,1203.44 1927.22,1203.44 1927.8,1203.44 1928.39,1203.44 1928.98,1203.44 1929.56,1203.44 1930.15,1203.44 1930.74,1203.44 1931.32,1203.44 1931.91,1203.44 1932.5,1203.44 1933.08,1203.44 1933.67,1203.44 1934.25,1203.44 1934.84,1203.44 1935.43,1203.44 1936.01,1203.44 1936.6,1203.44 1937.19,1203.44 1937.77,1203.44 1938.36,1203.44 1938.95,1203.44 1939.53,1203.44 1940.12,1203.44 1940.71,1203.44 1941.29,1203.44 1941.88,1203.44 1942.46,1203.44 1943.05,1203.44 1943.64,1203.44 1944.22,1203.44 1944.81,1203.44 1945.4,1203.44 1945.98,1203.44 1946.57,1203.44 1947.16,1203.44 1947.74,1203.44 1948.33,1203.44 1948.91,1203.44 1949.5,1203.44 1950.09,1203.44 1950.67,1203.44 1951.26,1203.44 1951.85,1203.44 1952.43,1203.44 1953.02,1203.44 1953.61,1203.44 1954.19,1203.44 1954.78,1203.44 1955.37,1203.44 1955.95,1203.44 1956.54,1203.44 1957.12,1203.44 1957.71,1203.44 1958.3,1203.44 1958.88,1203.44 1959.47,1203.44 1960.06,1203.44 1960.64,1203.44 1961.23,1203.44 1961.82,1203.44 1962.4,1203.44 1962.99,1203.44 1963.58,1203.44 1964.16,1203.44 1964.75,1203.44 1965.33,1203.44 1965.92,1203.44 1966.51,1203.44 1967.09,1203.44 1967.68,1203.44 1968.27,1203.44 1968.85,1203.44 1969.44,1203.44 1970.03,1203.44 1970.61,1203.44 1971.2,1203.44 1971.78,1203.44 1972.37,1203.44 1972.96,1203.44 1973.54,1203.44 1974.13,1203.44 1974.72,1203.44 1975.3,1203.44 1975.89,1203.44 1976.48,1203.44 1977.06,1203.44 1977.65,1203.44 1978.24,1203.44 1978.82,1203.44 1979.41,1203.44 1979.99,1203.44 1980.58,1203.44 1981.17,1203.44 1981.75,1203.44 1982.34,1203.44 1982.93,1203.44 1983.51,1203.44 1984.1,1203.44 1984.69,1203.44 1985.27,1203.44 1985.86,1203.44 1986.45,1203.44 1987.03,1203.44 1987.62,1203.44 1988.2,1203.44 1988.79,1203.44 1989.38,1203.44 1989.96,1203.44 1990.55,1203.44 1991.14,1203.44 1991.72,1203.44 1992.31,1203.44 1992.9,1203.44 1993.48,1203.44 1994.07,1203.44 1994.65,1203.44 1995.24,1203.44 1995.83,1203.44 1996.41,1203.44 1997,1203.44 1997.59,1203.44 1998.17,1203.44 1998.76,1203.44 1999.35,1203.44 1999.93,1203.44 2000.52,1203.44 2001.11,1203.44 2001.69,1203.44 2002.28,1203.44 2002.86,1203.44 2003.45,1203.44 2004.04,1203.44 2004.62,1203.44 2005.21,1203.44 2005.8,1203.44 2006.38,1203.44 2006.97,1203.44 2007.56,1203.44 2008.14,1203.44 2008.73,1203.44 2009.32,1203.44 2009.9,1203.44 2010.49,1203.44 2011.07,1203.44 2011.66,1203.44 2012.25,1203.44 2012.83,1203.44 2013.42,1203.44 2014.01,1203.44 2014.59,1203.44 2015.18,1203.44 2015.77,1203.44 2016.35,1203.44 2016.94,1203.44 2017.53,1203.44 2018.11,1203.44 2018.7,1203.44 2019.28,1203.44 2019.87,1203.44 2020.46,1203.44 2021.04,1203.44 2021.63,1203.44 2022.22,1203.44 2022.8,1203.44 2023.39,1203.44 2023.98,1203.44 2024.56,1203.44 2025.15,1203.44 2025.73,1203.44 2026.32,1203.44 2026.91,1203.44 2027.49,1203.44 2028.08,1203.44 2028.67,1203.44 2029.25,1203.44 2029.84,1203.44 2030.43,1203.44 2031.01,1203.44 2031.6,1203.44 2032.19,1203.44 2032.77,1203.44 2033.36,1203.44 2033.94,1203.44 2034.53,1203.44 2035.12,1203.44 2035.7,1203.44 2036.29,1203.44 2036.88,1203.44 2037.46,1203.44 2038.05,1203.44 2038.64,1203.44 2039.22,1203.44 2039.81,1203.44 2040.4,1203.44 2040.98,1203.44 2041.57,1203.44 2042.15,1203.44 2042.74,1203.44 2043.33,1203.44 2043.91,1203.44 2044.5,1203.44 2045.09,1203.44 2045.67,1203.44 2046.26,1203.44 2046.85,1203.44 2047.43,1203.44 2048.02,1203.44 2048.6,1203.44 2049.19,1203.44 2049.78,1203.44 2050.36,1203.44 2050.95,1203.44 2051.54,1203.44 2052.12,1203.44 2052.71,1203.44 2053.3,1203.44 2053.88,1203.44 2054.47,1203.44 2055.06,1203.44 2055.64,1203.44 2056.23,1203.44 2056.81,1203.44 2057.4,1203.44 2057.99,1203.44 2058.57,1203.44 2059.16,1203.44 2059.75,1203.44 2060.33,1203.44 2060.92,1203.44 2061.51,1203.44 2062.09,1203.44 2062.68,1203.44 2063.27,1203.44 2063.85,1203.44 2064.44,1203.44 2065.02,1203.44 2065.61,1203.44 2066.2,1203.44 2066.78,1203.44 2067.37,1203.44 2067.96,1203.44 2068.54,1203.44 2069.13,1203.44 2069.72,1203.44 2070.3,1203.44 2070.89,1203.44 2071.48,1203.44 2072.06,1203.44 2072.65,1203.44 2073.23,1203.44 2073.82,1203.44 2074.41,1203.44 2074.99,1203.44 2075.58,1203.44 2076.17,1203.44 2076.75,1203.44 2077.34,1203.44 2077.93,1203.44 2078.51,1203.44 2079.1,1203.44 2079.68,1203.44 2080.27,1203.44 2080.86,1203.44 2081.44,1203.44 2082.03,1203.44 2082.62,1203.44 2083.2,1203.44 2083.79,1203.44 2084.38,1203.44 2084.96,1203.44 2085.55,1203.44 2086.14,1203.44 2086.72,1203.44 2087.31,1203.44 2087.89,1203.44 2088.48,1203.44 2089.07,1203.44 2089.65,1203.44 2090.24,1203.44 2090.83,1203.44 2091.41,1203.44 2092,1203.44 2092.59,1203.44 2093.17,1203.44 2093.76,1203.44 2094.35,1203.44 2094.93,1203.44 2095.52,1203.44 2096.1,1203.44 2096.69,1203.44 2097.28,1203.44 2097.86,1203.44 2098.45,1203.44 2099.04,1203.44 2099.62,1203.44 2100.21,1203.44 2100.8,1203.44 2101.38,1203.44 2101.97,1203.44 2102.55,1203.44 2103.14,1203.44 2103.73,1203.44 2104.31,1203.44 2104.9,1203.44 2105.49,1203.44 2106.07,1203.44 2106.66,1203.44 2107.25,1203.44 2107.83,1203.44 2108.42,1203.44 2109.01,1203.44 2109.59,1203.44 2110.18,1203.44 2110.76,1203.44 2111.35,1203.44 2111.94,1203.44 2112.52,1203.44 2113.11,1203.44 2113.7,1203.44 2114.28,1203.44 2114.87,1203.44 2115.46,1203.44 2116.04,1203.44 2116.63,1203.44 2117.22,1203.44 2117.8,1203.44 2118.39,1203.44 2118.97,1203.44 2119.56,1203.44 2120.15,1203.44 2120.73,1203.44 2121.32,1203.44 2121.91,1203.44 2122.49,1203.44 2123.08,1203.44 2123.67,1203.44 2124.25,1203.44 2124.84,1203.44 2125.42,1203.44 2126.01,1203.44 2126.6,1203.44 2127.18,1203.44 2127.77,1203.44 2128.36,1203.44 2128.94,1203.44 2129.53,1203.44 2130.12,1203.44 2130.7,1203.44 2131.29,1203.44 2131.88,1203.44 2132.46,1203.44 2133.05,1203.44 2133.63,1203.44 2134.22,1203.44 2134.81,1203.44 2135.39,1203.44 2135.98,1203.44 2136.57,1203.44 2137.15,1203.44 2137.74,1203.44 2138.33,1203.44 2138.91,1203.44 2139.5,1203.44 2140.09,1203.44 2140.67,1203.44 2141.26,1203.44 2141.84,1203.44 2142.43,1203.44 2143.02,1203.44 2143.6,1203.44 2144.19,1203.44 2144.78,1203.44 2145.36,1203.44 2145.95,1203.44 2146.54,1203.44 2147.12,1203.44 2147.71,1203.44 2148.3,1203.44 2148.88,1203.44 2149.47,1203.44 2150.05,1203.44 2150.64,1203.44 2151.23,1203.44 2151.81,1203.44 2152.4,1203.44 2152.99,1203.44 2153.57,1203.44 2154.16,1203.44 2154.75,1203.44 2155.33,1203.44 2155.92,1203.44 2156.5,1203.44 2157.09,1203.44 2157.68,1203.44 2158.26,1203.44 \"/>\n<path clip-path=\"url(#clip682)\" d=\"M986.025 1203.2 L986.612 1203.2 L987.198 1203.2 L987.785 1203.2 L988.371 1203.2 L988.957 1203.2 L989.544 1203.2 L990.13 1203.2 L990.717 1203.2 L991.303 1203.2 L991.889 1203.2 L992.476 1203.2 L993.062 1203.2 L993.649 1203.2 L994.235 1203.2 L994.822 1203.2 L995.408 1203.2 L995.994 1203.2 L996.581 1203.2 L997.167 1203.2 L997.754 1203.2 L998.34 1203.2 L998.926 1203.2 L999.513 1203.2 L1000.1 1203.2 L1000.69 1203.2 L1001.27 1203.2 L1001.86 1203.2 L1002.44 1203.2 L1003.03 1203.2 L1003.62 1203.2 L1004.2 1203.2 L1004.79 1203.2 L1005.38 1203.2 L1005.96 1203.2 L1006.55 1203.2 L1007.14 1203.2 L1007.72 1203.2 L1008.31 1203.2 L1008.9 1203.2 L1009.48 1203.2 L1010.07 1203.2 L1010.65 1203.2 L1011.24 1203.2 L1011.83 1203.2 L1012.41 1203.2 L1013 1203.2 L1013.59 1203.2 L1014.17 1203.2 L1014.76 1203.2 L1015.35 1203.2 L1015.93 1203.2 L1016.52 1203.2 L1017.11 1203.2 L1017.69 1203.2 L1018.28 1203.2 L1018.86 1203.2 L1019.45 1203.2 L1020.04 1203.2 L1020.62 1203.2 L1021.21 1203.2 L1021.8 1203.2 L1022.38 1203.2 L1022.97 1203.2 L1023.56 1203.2 L1024.14 1203.2 L1024.73 1203.2 L1025.32 1203.2 L1025.9 1203.2 L1026.49 1203.2 L1027.07 1203.2 L1027.66 1203.2 L1028.25 1203.2 L1028.83 1203.2 L1029.42 1203.2 L1030.01 1203.2 L1030.59 1203.2 L1031.18 1203.2 L1031.77 1203.2 L1032.35 1203.2 L1032.94 1203.2 L1033.52 1203.2 L1034.11 1203.2 L1034.7 1203.2 L1035.28 1203.2 L1035.87 1203.2 L1036.46 1203.2 L1037.04 1203.2 L1037.63 1203.2 L1038.22 1203.2 L1038.8 1203.2 L1039.39 1203.2 L1039.98 1203.2 L1040.56 1203.2 L1041.15 1203.2 L1041.73 1203.2 L1042.32 1203.2 L1042.91 1203.2 L1043.49 1203.2 L1044.08 1203.2 L1044.67 1203.2 L1045.25 1203.2 L1045.84 1203.2 L1046.43 1203.2 L1047.01 1203.2 L1047.6 1203.2 L1048.19 1203.2 L1048.77 1203.2 L1049.36 1203.2 L1049.94 1203.2 L1050.53 1203.2 L1051.12 1203.2 L1051.7 1203.2 L1052.29 1203.2 L1052.88 1203.2 L1053.46 1203.2 L1054.05 1203.2 L1054.64 1203.2 L1055.22 1203.2 L1055.81 1203.2 L1056.39 1203.2 L1056.98 1203.2 L1057.57 1203.2 L1058.15 1203.2 L1058.74 1203.2 L1059.33 1203.2 L1059.91 1203.2 L1060.5 1203.2 L1061.09 1203.2 L1061.67 1203.2 L1062.26 1203.2 L1062.85 1203.2 L1063.43 1203.2 L1064.02 1203.2 L1064.6 1203.2 L1065.19 1203.2 L1065.78 1203.2 L1066.36 1203.2 L1066.95 1203.2 L1067.54 1203.2 L1068.12 1203.2 L1068.71 1203.2 L1069.3 1203.2 L1069.88 1203.2 L1070.47 1203.2 L1071.06 1203.2 L1071.64 1203.2 L1072.23 1203.2 L1072.81 1203.2 L1073.4 1203.2 L1073.99 1203.2 L1074.57 1203.2 L1075.16 1203.2 L1075.75 1203.2 L1076.33 1203.2 L1076.92 1203.2 L1077.51 1203.2 L1078.09 1203.2 L1078.68 1203.2 L1079.26 1203.2 L1079.85 1203.2 L1080.44 1203.2 L1081.02 1203.2 L1081.61 1203.2 L1082.2 1203.2 L1082.78 1203.2 L1083.37 1203.2 L1083.96 1203.2 L1084.54 1203.2 L1085.13 1203.2 L1085.72 1203.2 L1086.3 1203.2 L1086.89 1203.2 L1087.47 1203.2 L1088.06 1203.2 L1088.65 1203.2 L1089.23 1203.2 L1089.82 1203.2 L1090.41 1203.2 L1090.99 1203.2 L1091.58 1203.2 L1092.17 1203.2 L1092.75 1203.2 L1093.34 1203.2 L1093.93 1203.2 L1094.51 1203.2 L1095.1 1203.2 L1095.68 1203.2 L1096.27 1203.2 L1096.86 1203.2 L1097.44 1203.2 L1098.03 1203.2 L1098.62 1203.2 L1099.2 1203.2 L1099.79 1203.2 L1100.38 1203.2 L1100.96 1203.2 L1101.55 1203.2 L1102.14 1203.2 L1102.72 1203.2 L1103.31 1203.2 L1103.89 1203.2 L1104.48 1203.2 L1105.07 1203.2 L1105.65 1203.2 L1106.24 1203.2 L1106.83 1203.2 L1107.41 1203.2 L1108 1203.2 L1108.59 1203.2 L1109.17 1203.2 L1109.76 1203.2 L1110.34 1203.2 L1110.93 1203.2 L1111.52 1203.2 L1112.1 1203.2 L1112.69 1203.2 L1113.28 1203.2 L1113.86 1203.2 L1114.45 1203.2 L1115.04 1203.2 L1115.62 1203.2 L1116.21 1203.2 L1116.8 1203.2 L1117.38 1203.2 L1117.97 1203.2 L1118.55 1203.2 L1119.14 1203.2 L1119.73 1203.2 L1120.31 1203.2 L1120.9 1203.2 L1121.49 1203.2 L1122.07 1203.2 L1122.66 1203.2 L1123.25 1203.2 L1123.83 1203.2 L1124.42 1203.2 L1125.01 1203.2 L1125.59 1203.2 L1126.18 1203.2 L1126.76 1203.2 L1127.35 1203.2 L1127.94 1203.2 L1128.52 1203.2 L1129.11 1203.2 L1129.7 1203.2 L1130.28 1203.2 L1130.87 1203.2 L1131.46 1203.2 L1132.04 1203.2 L1132.63 1203.2 L1133.21 1203.2 L1133.8 1203.2 L1134.39 1203.2 L1134.97 1203.2 L1135.56 1203.2 L1136.15 1203.2 L1136.73 1203.2 L1137.32 1203.2 L1137.91 1203.2 L1138.49 1203.2 L1139.08 1203.2 L1139.67 1203.2 L1140.25 1203.2 L1140.84 1203.2 L1141.42 1203.2 L1142.01 1203.2 L1142.6 1203.2 L1143.18 1203.2 L1143.77 1203.2 L1144.36 1203.2 L1144.94 1203.2 L1145.53 1203.2 L1146.12 1203.2 L1146.7 1203.2 L1147.29 1203.2 L1147.88 1203.2 L1148.46 1203.2 L1149.05 1203.2 L1149.63 1203.2 L1150.22 1203.2 L1150.81 1203.2 L1151.39 1203.2 L1151.98 1203.2 L1152.57 1203.2 L1153.15 1203.2 L1153.74 1203.2 L1154.33 1203.2 L1154.91 1203.2 L1155.5 1203.2 L1156.09 1203.2 L1156.67 1203.2 L1157.26 1203.2 L1157.84 1203.2 L1158.43 1203.2 L1159.02 1203.2 L1159.6 1203.2 L1160.19 1203.2 L1160.78 1203.2 L1161.36 1203.2 L1161.95 1203.2 L1162.54 1203.2 L1163.12 1203.2 L1163.71 1203.2 L1164.29 1203.2 L1164.88 1203.2 L1165.47 1203.2 L1166.05 1203.2 L1166.64 1203.2 L1167.23 1203.2 L1167.81 1203.2 L1168.4 1203.2 L1168.99 1203.2 L1169.57 1203.2 L1170.16 1203.2 L1170.75 1203.2 L1171.33 1203.2 L1171.92 1203.2 L1172.5 1203.2 L1173.09 1203.2 L1173.68 1203.2 L1174.26 1203.2 L1174.85 1203.2 L1175.44 1203.2 L1176.02 1203.2 L1176.61 1203.2 L1177.2 1203.2 L1177.78 1203.2 L1178.37 1203.2 L1178.96 1203.2 L1179.54 1203.2 L1180.13 1203.2 L1180.71 1203.2 L1181.3 1203.2 L1181.89 1203.2 L1182.47 1203.2 L1183.06 1203.2 L1183.65 1203.2 L1184.23 1203.2 L1184.82 1203.2 L1185.41 1203.2 L1185.99 1203.2 L1186.58 1203.2 L1187.16 1203.2 L1187.75 1203.2 L1188.34 1203.2 L1188.92 1203.2 L1189.51 1203.2 L1190.1 1203.2 L1190.68 1203.2 L1191.27 1203.2 L1191.86 1203.2 L1192.44 1203.2 L1193.03 1203.2 L1193.62 1203.2 L1194.2 1203.2 L1194.79 1203.2 L1195.37 1203.2 L1195.96 1203.2 L1196.55 1203.2 L1197.13 1203.2 L1197.72 1203.2 L1198.31 1203.2 L1198.89 1203.2 L1199.48 1203.2 L1200.07 1203.2 L1200.65 1203.2 L1201.24 1203.2 L1201.83 1203.2 L1202.41 1203.2 L1203 1203.2 L1203.58 1203.2 L1204.17 1203.2 L1204.76 1203.2 L1205.34 1203.2 L1205.93 1203.2 L1206.52 1203.2 L1207.1 1203.2 L1207.69 1203.2 L1208.28 1203.2 L1208.86 1203.2 L1209.45 1203.2 L1210.03 1203.2 L1210.62 1203.2 L1211.21 1203.2 L1211.79 1203.2 L1212.38 1203.2 L1212.97 1203.2 L1213.55 1203.2 L1214.14 1203.2 L1214.73 1203.2 L1215.31 1203.2 L1215.9 1203.2 L1216.49 1203.2 L1217.07 1203.2 L1217.66 1203.2 L1218.24 1203.2 L1218.83 1203.2 L1219.42 1203.2 L1220 1203.2 L1220.59 1203.2 L1221.18 1203.2 L1221.76 1203.2 L1222.35 1203.2 L1222.94 1203.2 L1223.52 1203.2 L1224.11 1203.2 L1224.7 1203.2 L1225.28 1203.2 L1225.87 1203.2 L1226.45 1203.2 L1227.04 1203.2 L1227.63 1203.2 L1228.21 1203.2 L1228.8 1203.2 L1229.39 1203.2 L1229.97 1203.2 L1230.56 1203.2 L1231.15 1203.2 L1231.73 1203.2 L1232.32 1203.2 L1232.91 1203.2 L1233.49 1203.2 L1234.08 1203.2 L1234.66 1203.2 L1235.25 1203.2 L1235.84 1203.2 L1236.42 1203.2 L1237.01 1203.2 L1237.6 1203.2 L1238.18 1203.2 L1238.77 1203.2 L1239.36 1203.2 L1239.94 1203.2 L1240.53 1203.2 L1241.11 1203.2 L1241.7 1203.2 L1242.29 1203.2 L1242.87 1203.2 L1243.46 1203.2 L1244.05 1203.2 L1244.63 1203.2 L1245.22 1203.2 L1245.81 1203.2 L1246.39 1203.2 L1246.98 1203.2 L1247.57 1203.2 L1248.15 1203.2 L1248.74 1203.2 L1249.32 1203.2 L1249.91 1203.2 L1250.5 1203.2 L1251.08 1203.2 L1251.67 1203.2 L1252.26 1203.2 L1252.84 1203.2 L1253.43 1203.2 L1254.02 1203.2 L1254.6 1203.2 L1255.19 1203.2 L1255.78 1203.2 L1256.36 1203.2 L1256.95 1203.2 L1257.53 1203.2 L1258.12 1203.2 L1258.71 1203.2 L1259.29 1203.2 L1259.88 1203.2 L1260.47 1203.2 L1261.05 1203.2 L1261.64 1203.2 L1262.23 1203.2 L1262.81 1203.2 L1263.4 1203.2 L1263.98 1203.2 L1264.57 1203.2 L1265.16 1203.2 L1265.74 1203.2 L1266.33 1203.2 L1266.92 1203.2 L1267.5 1203.2 L1268.09 1203.2 L1268.68 1203.2 L1269.26 1203.2 L1269.85 1203.2 L1270.44 1203.2 L1271.02 1203.2 L1271.61 1203.2 L1272.19 1203.2 L1272.78 1203.2 L1273.37 1203.2 L1273.95 1203.2 L1274.54 1203.2 L1275.13 1203.2 L1275.71 1203.2 L1276.3 1203.2 L1276.89 1203.2 L1277.47 1203.2 L1278.06 1203.2 L1278.65 1203.2 L1279.23 1203.2 L1279.82 1203.2 L1280.4 1203.2 L1280.99 1203.2 L1281.58 1203.2 L1282.16 1203.2 L1282.75 1203.2 L1283.34 1203.2 L1283.92 1203.2 L1284.51 1203.2 L1285.1 1203.2 L1285.68 1203.2 L1286.27 1203.2 L1286.86 1203.2 L1287.44 1203.2 L1288.03 1203.2 L1288.61 1203.2 L1289.2 1203.2 L1289.79 1203.2 L1290.37 1203.2 L1290.96 1203.2 L1291.55 1203.2 L1292.13 1203.2 L1292.72 1203.2 L1293.31 1203.2 L1293.89 1203.2 L1294.48 1203.2 L1295.06 1203.2 L1295.65 1203.2 L1296.24 1203.2 L1296.82 1203.2 L1297.41 1203.2 L1298 1203.2 L1298.58 1203.2 L1299.17 1203.2 L1299.76 1203.2 L1300.34 1203.2 L1300.93 1203.2 L1301.52 1203.2 L1302.1 1203.2 L1302.69 1203.2 L1303.27 1203.2 L1303.86 1203.2 L1304.45 1203.2 L1305.03 1203.2 L1305.62 1203.2 L1306.21 1203.2 L1306.79 1203.2 L1307.38 1203.2 L1307.97 1203.2 L1308.55 1203.2 L1309.14 1203.2 L1309.73 1203.2 L1310.31 1203.2 L1310.9 1203.2 L1311.48 1203.2 L1312.07 1203.2 L1312.66 1203.2 L1313.24 1203.2 L1313.83 1203.2 L1314.42 1203.2 L1315 1203.2 L1315.59 1203.2 L1316.18 1203.2 L1316.76 1203.2 L1317.35 1203.2 L1317.93 1203.2 L1318.52 1203.2 L1319.11 1203.2 L1319.69 1203.2 L1320.28 1203.2 L1320.87 1203.2 L1321.45 1203.2 L1322.04 1203.2 L1322.63 1203.2 L1323.21 1203.2 L1323.8 1203.2 L1324.39 1203.2 L1324.97 1203.2 L1325.56 1203.2 L1326.14 1203.2 L1326.73 1203.2 L1327.32 1203.2 L1327.9 1203.2 L1328.49 1203.2 L1329.08 1203.2 L1329.66 1203.2 L1330.25 1203.2 L1330.84 1203.2 L1331.42 1203.2 L1332.01 1203.2 L1332.6 1203.2 L1333.18 1203.2 L1333.77 1203.2 L1334.35 1203.2 L1334.94 1203.2 L1335.53 1203.2 L1336.11 1203.2 L1336.7 1203.2 L1337.29 1203.2 L1337.87 1203.2 L1338.46 1203.2 L1339.05 1203.2 L1339.63 1203.2 L1340.22 1203.2 L1340.8 1203.2 L1341.39 1203.2 L1341.98 1203.2 L1342.56 1203.2 L1343.15 1203.2 L1343.74 1203.2 L1344.32 1203.2 L1344.91 1203.2 L1345.5 1203.2 L1346.08 1203.2 L1346.67 1203.2 L1347.26 1203.2 L1347.84 1203.2 L1348.43 1203.2 L1349.01 1203.2 L1349.6 1203.2 L1350.19 1203.2 L1350.77 1203.2 L1351.36 1203.2 L1351.95 1203.2 L1352.53 1203.2 L1353.12 1203.2 L1353.71 1203.2 L1354.29 1203.2 L1354.88 1203.2 L1355.47 1203.2 L1356.05 1203.2 L1356.64 1203.2 L1357.22 1203.2 L1357.81 1203.2 L1358.4 1203.2 L1358.98 1203.2 L1359.57 1203.2 L1360.16 1203.2 L1360.74 1203.2 L1361.33 1203.2 L1361.92 1203.2 L1362.5 1203.2 L1363.09 1203.2 L1363.68 1203.2 L1364.26 1203.2 L1364.85 1203.2 L1365.43 1203.2 L1366.02 1203.2 L1366.61 1203.2 L1367.19 1203.2 L1367.78 1203.2 L1368.37 1203.2 L1368.95 1203.2 L1369.54 1203.2 L1370.13 1203.2 L1370.71 1203.2 L1371.3 1203.2 L1371.88 1203.2 L1372.47 1203.2 L1373.06 1203.2 L1373.64 1203.2 L1374.23 1203.2 L1374.82 1203.2 L1375.4 1203.2 L1375.99 1203.2 L1376.58 1203.2 L1377.16 1203.2 L1377.75 1203.2 L1378.34 1203.2 L1378.92 1203.2 L1379.51 1203.2 L1380.09 1203.2 L1380.68 1203.2 L1381.27 1203.2 L1381.85 1203.2 L1382.44 1203.2 L1383.03 1203.2 L1383.61 1203.2 L1384.2 1203.2 L1384.79 1203.2 L1385.37 1203.2 L1385.96 1203.2 L1386.55 1203.2 L1387.13 1203.2 L1387.72 1203.2 L1388.3 1203.2 L1388.89 1203.2 L1389.48 1203.2 L1390.06 1203.2 L1390.65 1203.2 L1391.24 1203.2 L1391.82 1203.2 L1392.41 1203.2 L1393 1203.2 L1393.58 1203.2 L1394.17 1203.2 L1394.75 1203.2 L1395.34 1203.2 L1395.93 1203.2 L1396.51 1203.2 L1397.1 1203.2 L1397.69 1203.2 L1398.27 1203.2 L1398.86 1203.2 L1399.45 1203.2 L1400.03 1203.2 L1400.62 1203.2 L1401.21 1203.2 L1401.79 1203.2 L1402.38 1203.2 L1402.96 1203.2 L1403.55 1203.2 L1404.14 1203.2 L1404.72 1203.2 L1405.31 1203.2 L1405.9 1203.2 L1406.48 1203.2 L1407.07 1203.2 L1407.66 1203.2 L1408.24 1203.2 L1408.83 1203.2 L1409.42 1203.2 L1410 1203.2 L1410.59 1203.2 L1411.17 1203.2 L1411.76 1203.2 L1412.35 1203.2 L1412.93 1203.2 L1413.52 1203.2 L1414.11 1203.2 L1414.69 1203.2 L1415.28 1203.2 L1415.87 1203.2 L1416.45 1203.2 L1417.04 1203.2 L1417.63 1203.2 L1418.21 1203.2 L1418.8 1203.2 L1419.38 1203.2 L1419.97 1203.2 L1420.56 1203.2 L1421.14 1203.2 L1421.73 1203.2 L1422.32 1203.2 L1422.9 1203.2 L1423.49 1203.2 L1424.08 1203.2 L1424.66 1203.2 L1425.25 1203.2 L1425.83 1203.2 L1426.42 1203.2 L1427.01 1203.2 L1427.59 1203.2 L1428.18 1203.2 L1428.77 1203.2 L1429.35 1203.2 L1429.94 1203.2 L1430.53 1203.2 L1431.11 1203.2 L1431.7 1203.2 L1432.29 1203.2 L1432.87 1203.2 L1433.46 1203.2 L1434.04 1203.2 L1434.63 1203.2 L1435.22 1203.2 L1435.8 1203.2 L1436.39 1203.2 L1436.98 1203.2 L1437.56 1203.2 L1438.15 1203.2 L1438.74 1203.2 L1439.32 1203.2 L1439.91 1203.2 L1440.5 1203.2 L1441.08 1203.2 L1441.67 1203.2 L1442.25 1203.2 L1442.84 1203.2 L1443.43 1203.2 L1444.01 1203.2 L1444.6 1203.2 L1445.19 1203.2 L1445.77 1203.2 L1446.36 1203.2 L1446.95 1203.2 L1447.53 1203.2 L1448.12 1203.2 L1448.7 1203.2 L1449.29 1203.2 L1449.88 1203.2 L1450.46 1203.2 L1451.05 1203.2 L1451.64 1203.2 L1452.22 1203.2 L1452.81 1203.2 L1453.4 1203.2 L1453.98 1203.2 L1454.57 1203.2 L1455.16 1203.2 L1455.74 1203.2 L1456.33 1203.2 L1456.91 1203.2 L1457.5 1203.2 L1458.09 1203.2 L1458.67 1203.2 L1459.26 1203.2 L1459.85 1203.2 L1460.43 1203.2 L1461.02 1203.2 L1461.61 1203.2 L1462.19 1203.2 L1462.78 1203.2 L1463.37 1203.2 L1463.95 1203.2 L1464.54 1203.2 L1465.12 1203.2 L1465.71 1203.2 L1466.3 1203.2 L1466.88 1203.2 L1467.47 1203.2 L1468.06 1203.2 L1468.64 1203.2 L1469.23 1203.2 L1469.82 1203.2 L1470.4 1203.2 L1470.99 1203.2 L1471.57 1203.2 L1472.16 1203.2 L1472.75 1203.2 L1473.33 1203.2 L1473.92 1203.2 L1474.51 1203.2 L1475.09 1203.2 L1475.68 1203.2 L1476.27 1203.2 L1476.85 1203.2 L1477.44 1203.2 L1478.03 1203.2 L1478.61 1203.2 L1479.2 1203.2 L1479.78 1203.2 L1480.37 1203.2 L1480.96 1203.2 L1481.54 1203.2 L1482.13 1203.2 L1482.72 1203.2 L1483.3 1203.2 L1483.89 1203.2 L1484.48 1203.2 L1485.06 1203.2 L1485.65 1203.2 L1486.24 1203.2 L1486.82 1203.2 L1487.41 1203.2 L1487.99 1203.2 L1488.58 1203.2 L1489.17 1203.2 L1489.75 1203.2 L1490.34 1203.2 L1490.93 1203.2 L1491.51 1203.2 L1492.1 1203.2 L1492.69 1203.2 L1493.27 1203.2 L1493.86 1203.2 L1494.45 1203.2 L1495.03 1203.2 L1495.62 1203.2 L1496.2 1203.2 L1496.79 1203.2 L1497.38 1203.2 L1497.96 1203.2 L1498.55 1203.2 L1499.14 1203.2 L1499.72 1203.2 L1500.31 1203.2 L1500.9 1203.2 L1501.48 1203.2 L1502.07 1203.2 L1502.65 1203.2 L1503.24 1203.2 L1503.83 1203.2 L1504.41 1203.2 L1505 1203.2 L1505.59 1203.2 L1506.17 1203.2 L1506.76 1203.2 L1507.35 1203.2 L1507.93 1203.2 L1508.52 1203.2 L1509.11 1203.2 L1509.69 1203.2 L1510.28 1203.2 L1510.86 1203.2 L1511.45 1203.2 L1512.04 1203.2 L1512.62 1203.2 L1513.21 1203.2 L1513.8 1203.2 L1514.38 1203.2 L1514.97 1203.2 L1515.56 1203.2 L1516.14 1203.2 L1516.73 1203.2 L1517.32 1203.2 L1517.9 1203.2 L1518.49 1203.2 L1519.07 1203.2 L1519.66 1203.2 L1520.25 1203.2 L1520.83 1203.2 L1521.42 1203.2 L1522.01 1203.2 L1522.59 1203.2 L1523.18 1203.2 L1523.77 1203.2 L1524.35 1203.2 L1524.94 1203.2 L1525.52 1203.2 L1526.11 1203.2 L1526.7 1203.2 L1527.28 1203.2 L1527.87 1203.2 L1528.46 1203.2 L1529.04 1203.2 L1529.63 1203.2 L1530.22 1203.2 L1530.8 1203.2 L1531.39 1203.2 L1531.98 1203.2 L1532.56 1203.2 L1533.15 1203.2 L1533.73 1203.2 L1534.32 1203.2 L1534.91 1203.2 L1535.49 1203.2 L1536.08 1203.2 L1536.67 1203.2 L1537.25 1203.2 L1537.84 1203.2 L1538.43 1203.2 L1539.01 1203.2 L1539.6 1203.2 L1540.19 1203.2 L1540.77 1203.2 L1541.36 1203.2 L1541.94 1203.2 L1542.53 1203.2 L1543.12 1203.2 L1543.7 1203.2 L1544.29 1203.2 L1544.88 1203.2 L1545.46 1203.2 L1546.05 1203.2 L1546.64 1203.2 L1547.22 1203.2 L1547.81 1203.2 L1548.4 1203.2 L1548.98 1203.2 L1549.57 1203.2 L1550.15 1203.2 L1550.74 1203.2 L1551.33 1203.2 L1551.91 1203.2 L1552.5 1203.2 L1553.09 1203.2 L1553.67 1203.2 L1554.26 1203.2 L1554.85 1203.2 L1555.43 1203.2 L1556.02 1203.2 L1556.6 1203.2 L1557.19 1203.2 L1557.78 1203.2 L1558.36 1203.2 L1558.95 1203.2 L1559.54 1203.2 L1560.12 1203.2 L1560.71 1203.2 L1561.3 1203.2 L1561.88 1203.2 L1562.47 1203.2 L1563.06 1203.2 L1563.64 1203.2 L1564.23 1203.2 L1564.81 1203.2 L1565.4 1203.2 L1565.99 1203.2 L1566.57 1203.2 L1567.16 1203.2 L1567.75 1203.2 L1568.33 1203.2 L1568.92 1203.2 L1569.51 1203.2 L1570.09 1203.2 L1570.68 1203.2 L1571.27 1203.2 L1571.85 1203.2 L1572.44 1203.2 L1573.02 1203.2 L1573.61 1203.2 L1574.2 1203.2 L1574.78 1203.2 L1575.37 1203.2 L1575.96 1203.2 L1576.54 1203.2 L1577.13 1203.2 L1577.72 1203.2 L1578.3 1203.2 L1578.89 1203.2 L1579.47 1203.2 L1580.06 1203.2 L1580.65 1203.2 L1581.23 1203.2 L1581.82 1203.2 L1582.41 1203.2 L1582.99 1203.2 L1583.58 1203.2 L1584.17 1203.2 L1584.75 1203.2 L1585.34 1203.2 L1585.93 1203.2 L1586.51 1203.2 L1587.1 1203.2 L1587.68 1203.2 L1588.27 1203.2 L1588.86 1203.2 L1589.44 1203.2 L1590.03 1203.2 L1590.62 1203.2 L1591.2 1203.2 L1591.79 1203.2 L1592.38 1203.2 L1592.96 1203.2 L1593.55 1203.2 L1594.14 1203.2 L1594.72 1203.2 L1595.31 1203.2 L1595.89 1203.2 L1596.48 1203.2 L1597.07 1203.2 L1597.65 1203.2 L1598.24 1203.2 L1598.83 1203.2 L1599.41 1203.2 L1600 1203.2 L1600.59 1203.2 L1601.17 1203.2 L1601.76 1203.2 L1602.34 1203.2 L1602.93 1203.2 L1603.52 1203.2 L1604.1 1203.2 L1604.69 1203.2 L1605.28 1203.2 L1605.86 1203.2 L1606.45 1203.2 L1607.04 1203.2 L1607.62 1203.2 L1608.21 1203.2 L1608.8 1203.2 L1609.38 1203.2 L1609.97 1203.2 L1610.55 1203.2 L1611.14 1203.2 L1611.73 1203.2 L1612.31 1203.2 L1612.9 1203.2 L1613.49 1203.2 L1614.07 1203.2 L1614.66 1203.2 L1615.25 1203.2 L1615.83 1203.2 L1616.42 1203.2 L1617.01 1203.2 L1617.59 1203.2 L1618.18 1203.2 L1618.76 1203.2 L1619.35 1203.2 L1619.94 1203.2 L1620.52 1203.2 L1621.11 1203.2 L1621.7 1203.2 L1622.28 1203.2 L1622.87 1203.2 L1623.46 1203.2 L1624.04 1203.2 L1624.63 1203.2 L1625.22 1203.2 L1625.8 1203.2 L1626.39 1203.2 L1626.97 1203.2 L1627.56 1203.2 L1628.15 1203.2 L1628.73 1203.2 L1629.32 1203.2 L1629.91 1203.2 L1630.49 1203.2 L1631.08 1203.2 L1631.67 1203.2 L1632.25 1203.2 L1632.84 1203.2 L1633.42 1203.2 L1634.01 1203.2 L1634.6 1203.2 L1635.18 1203.2 L1635.77 1203.2 L1636.36 1203.2 L1636.94 1203.2 L1637.53 1203.2 L1638.12 1203.2 L1638.7 1203.2 L1639.29 1203.2 L1639.88 1203.2 L1640.46 1203.2 L1641.05 1203.2 L1641.63 1203.2 L1642.22 1203.2 L1642.81 1203.2 L1643.39 1203.2 L1643.98 1203.2 L1644.57 1203.2 L1645.15 1203.2 L1645.74 1203.2 L1646.33 1203.2 L1646.91 1203.2 L1647.5 1203.2 L1648.09 1203.2 L1648.67 1203.2 L1649.26 1203.2 L1649.84 1203.2 L1650.43 1203.2 L1651.02 1203.2 L1651.6 1203.2 L1652.19 1203.2 L1652.78 1203.2 L1653.36 1203.2 L1653.95 1203.2 L1654.54 1203.2 L1655.12 1203.2 L1655.71 1203.2 L1656.29 1203.2 L1656.88 1203.2 L1657.47 1203.2 L1658.05 1203.2 L1658.64 1203.2 L1659.23 1203.2 L1659.81 1203.2 L1660.4 1203.2 L1660.99 1203.2 L1661.57 1203.2 L1662.16 1203.2 L1662.75 1203.2 L1663.33 1203.2 L1663.92 1203.2 L1664.5 1203.2 L1665.09 1203.2 L1665.68 1203.2 L1666.26 1203.2 L1666.85 1203.2 L1667.44 1203.2 L1668.02 1203.2 L1668.61 1203.2 L1669.2 1203.2 L1669.78 1203.2 L1670.37 1203.2 L1670.96 1203.2 L1671.54 1203.2 L1672.13 1203.2 L1672.71 1203.2 L1673.3 1203.2 L1673.89 1203.2 L1674.47 1203.2 L1675.06 1203.2 L1675.65 1203.2 L1676.23 1203.2 L1676.82 1203.2 L1677.41 1203.2 L1677.99 1203.2 L1678.58 1203.2 L1679.17 1203.2 L1679.75 1203.2 L1680.34 1203.2 L1680.92 1203.2 L1681.51 1203.2 L1682.1 1203.2 L1682.68 1203.2 L1683.27 1203.2 L1683.86 1203.2 L1684.44 1203.2 L1685.03 1203.2 L1685.62 1203.2 L1686.2 1203.2 L1686.79 1203.2 L1687.37 1203.2 L1687.96 1203.2 L1688.55 1203.2 L1689.13 1203.2 L1689.72 1203.2 L1690.31 1203.2 L1690.89 1203.2 L1691.48 1203.2 L1692.07 1203.2 L1692.65 1203.2 L1693.24 1203.2 L1693.83 1203.2 L1694.41 1203.2 L1695 1203.2 L1695.58 1203.2 L1696.17 1203.2 L1696.76 1203.2 L1697.34 1203.2 L1697.93 1203.2 L1698.52 1203.2 L1699.1 1203.2 L1699.69 1203.2 L1700.28 1203.2 L1700.86 1203.2 L1701.45 1203.2 L1702.04 1203.2 L1702.62 1203.2 L1703.21 1203.2 L1703.79 1203.2 L1704.38 1203.2 L1704.97 1203.2 L1705.55 1203.2 L1706.14 1203.2 L1706.73 1203.2 L1707.31 1203.2 L1707.9 1203.2 L1708.49 1203.2 L1709.07 1203.2 L1709.66 1203.2 L1710.24 1203.2 L1710.83 1203.2 L1711.42 1203.2 L1712 1203.2 L1712.59 1203.2 L1713.18 1203.2 L1713.76 1203.2 L1714.35 1203.2 L1714.94 1203.2 L1715.52 1203.2 L1716.11 1203.2 L1716.7 1203.2 L1717.28 1203.2 L1717.87 1203.2 L1718.45 1203.2 L1719.04 1203.2 L1719.63 1203.2 L1720.21 1203.2 L1720.8 1203.2 L1721.39 1203.2 L1721.97 1203.2 L1722.56 1203.2 L1723.15 1203.2 L1723.73 1203.2 L1724.32 1203.2 L1724.91 1203.2 L1725.49 1203.2 L1726.08 1203.2 L1726.66 1203.2 L1727.25 1203.2 L1727.84 1203.2 L1728.42 1203.2 L1729.01 1203.2 L1729.6 1203.2 L1730.18 1203.2 L1730.77 1203.2 L1731.36 1203.2 L1731.94 1203.2 L1732.53 1203.2 L1733.11 1203.2 L1733.7 1203.2 L1734.29 1203.2 L1734.87 1203.2 L1735.46 1203.2 L1736.05 1203.2 L1736.63 1203.2 L1737.22 1203.2 L1737.81 1203.2 L1738.39 1203.2 L1738.98 1203.2 L1739.57 1203.2 L1740.15 1203.2 L1740.74 1203.2 L1741.32 1203.2 L1741.91 1203.2 L1742.5 1203.2 L1743.08 1203.2 L1743.67 1203.2 L1744.26 1203.2 L1744.84 1203.2 L1745.43 1203.2 L1746.02 1203.2 L1746.6 1203.2 L1747.19 1203.2 L1747.78 1203.2 L1748.36 1203.2 L1748.95 1203.2 L1749.53 1203.2 L1750.12 1203.2 L1750.71 1203.2 L1751.29 1203.2 L1751.88 1203.2 L1752.47 1203.2 L1753.05 1203.2 L1753.64 1203.2 L1754.23 1203.2 L1754.81 1203.2 L1755.4 1203.2 L1755.99 1203.2 L1756.57 1203.2 L1757.16 1203.2 L1757.74 1203.2 L1758.33 1203.2 L1758.92 1203.2 L1759.5 1203.2 L1760.09 1203.2 L1760.68 1203.2 L1761.26 1203.2 L1761.85 1203.2 L1762.44 1203.2 L1763.02 1203.2 L1763.61 1203.2 L1764.19 1203.2 L1764.78 1203.2 L1765.37 1203.2 L1765.95 1203.2 L1766.54 1203.2 L1767.13 1203.2 L1767.71 1203.2 L1768.3 1203.2 L1768.89 1203.2 L1769.47 1203.2 L1770.06 1203.2 L1770.65 1203.2 L1771.23 1203.2 L1771.82 1203.2 L1772.4 1203.2 L1772.99 1203.2 L1773.58 1203.2 L1774.16 1203.2 L1774.75 1203.2 L1775.34 1203.2 L1775.92 1203.2 L1776.51 1203.2 L1777.1 1203.2 L1777.68 1203.2 L1778.27 1203.2 L1778.86 1203.2 L1779.44 1203.2 L1780.03 1203.2 L1780.61 1203.2 L1781.2 1203.2 L1781.79 1203.2 L1782.37 1203.2 L1782.96 1203.2 L1783.55 1203.2 L1784.13 1203.2 L1784.72 1203.2 L1785.31 1203.2 L1785.89 1203.2 L1786.48 1203.2 L1787.06 1203.2 L1787.65 1203.2 L1788.24 1203.2 L1788.82 1203.2 L1789.41 1203.2 L1790 1203.2 L1790.58 1203.2 L1791.17 1203.2 L1791.76 1203.2 L1792.34 1203.2 L1792.93 1203.2 L1793.52 1203.2 L1794.1 1203.2 L1794.69 1203.2 L1795.27 1203.2 L1795.86 1203.2 L1796.45 1203.2 L1797.03 1203.2 L1797.62 1203.2 L1798.21 1203.2 L1798.79 1203.2 L1799.38 1203.2 L1799.97 1203.2 L1800.55 1203.2 L1801.14 1203.2 L1801.73 1203.2 L1802.31 1203.2 L1802.9 1203.2 L1803.48 1203.2 L1804.07 1203.2 L1804.66 1203.2 L1805.24 1203.2 L1805.83 1203.2 L1806.42 1203.2 L1807 1203.2 L1807.59 1203.2 L1808.18 1203.2 L1808.76 1203.2 L1809.35 1203.2 L1809.94 1203.2 L1810.52 1203.2 L1811.11 1203.2 L1811.69 1203.2 L1812.28 1203.2 L1812.87 1203.2 L1813.45 1203.2 L1814.04 1203.2 L1814.63 1203.2 L1815.21 1203.2 L1815.8 1203.2 L1816.39 1203.2 L1816.97 1203.2 L1817.56 1203.2 L1818.14 1203.2 L1818.73 1203.2 L1819.32 1203.2 L1819.9 1203.2 L1820.49 1203.2 L1821.08 1203.2 L1821.66 1203.2 L1822.25 1203.2 L1822.84 1203.2 L1823.42 1203.2 L1824.01 1203.2 L1824.6 1203.2 L1825.18 1203.2 L1825.77 1203.2 L1826.35 1203.2 L1826.94 1203.2 L1827.53 1203.2 L1828.11 1203.2 L1828.7 1203.2 L1829.29 1203.2 L1829.87 1203.2 L1830.46 1203.2 L1831.05 1203.2 L1831.63 1203.2 L1832.22 1203.2 L1832.81 1203.2 L1833.39 1203.2 L1833.98 1203.2 L1834.56 1203.2 L1835.15 1203.2 L1835.74 1203.2 L1836.32 1203.2 L1836.91 1203.2 L1837.5 1203.2 L1838.08 1203.2 L1838.67 1203.2 L1839.26 1203.2 L1839.84 1203.2 L1840.43 1203.2 L1841.01 1203.2 L1841.6 1203.2 L1842.19 1203.2 L1842.77 1203.2 L1843.36 1203.2 L1843.95 1203.2 L1844.53 1203.2 L1845.12 1203.2 L1845.71 1203.2 L1846.29 1203.2 L1846.88 1203.2 L1847.47 1203.2 L1848.05 1203.2 L1848.64 1203.2 L1849.22 1203.2 L1849.81 1203.2 L1850.4 1203.2 L1850.98 1203.2 L1851.57 1203.2 L1852.16 1203.2 L1852.74 1203.2 L1853.33 1203.2 L1853.92 1203.2 L1854.5 1203.2 L1855.09 1203.2 L1855.68 1203.2 L1856.26 1203.2 L1856.85 1203.2 L1857.43 1203.2 L1858.02 1203.2 L1858.61 1203.2 L1859.19 1203.2 L1859.78 1203.2 L1860.37 1203.2 L1860.95 1203.2 L1861.54 1203.2 L1862.13 1203.2 L1862.71 1203.2 L1863.3 1203.2 L1863.88 1203.2 L1864.47 1203.2 L1865.06 1203.2 L1865.64 1203.2 L1866.23 1203.2 L1866.82 1203.2 L1867.4 1203.2 L1867.99 1203.2 L1868.58 1203.2 L1869.16 1203.2 L1869.75 1203.2 L1870.34 1203.2 L1870.92 1203.2 L1871.51 1203.2 L1872.09 1203.2 L1872.68 1203.2 L1873.27 1203.2 L1873.85 1203.2 L1874.44 1203.2 L1875.03 1203.2 L1875.61 1203.2 L1876.2 1203.2 L1876.79 1203.2 L1877.37 1203.2 L1877.96 1203.2 L1878.55 1203.2 L1879.13 1203.2 L1879.72 1203.2 L1880.3 1203.2 L1880.89 1203.2 L1881.48 1203.2 L1882.06 1203.2 L1882.65 1203.2 L1883.24 1203.2 L1883.82 1203.2 L1884.41 1203.2 L1885 1203.2 L1885.58 1203.2 L1886.17 1203.2 L1886.76 1203.2 L1887.34 1203.2 L1887.93 1203.2 L1888.51 1203.2 L1889.1 1203.2 L1889.69 1203.2 L1890.27 1203.2 L1890.86 1203.2 L1891.45 1203.2 L1892.03 1203.2 L1892.62 1203.2 L1893.21 1203.2 L1893.79 1203.2 L1894.38 1203.2 L1894.96 1203.2 L1895.55 1203.2 L1896.14 1203.2 L1896.72 1203.2 L1897.31 1203.2 L1897.9 1203.2 L1898.48 1203.2 L1899.07 1203.2 L1899.66 1203.2 L1900.24 1203.2 L1900.83 1203.2 L1901.42 1203.2 L1902 1203.2 L1902.59 1203.2 L1903.17 1203.2 L1903.76 1203.2 L1904.35 1203.2 L1904.93 1203.2 L1905.52 1203.2 L1906.11 1203.2 L1906.69 1203.2 L1907.28 1203.2 L1907.87 1203.2 L1908.45 1203.2 L1909.04 1203.2 L1909.63 1203.2 L1910.21 1203.2 L1910.8 1203.2 L1911.38 1203.2 L1911.97 1203.2 L1912.56 1203.2 L1913.14 1203.2 L1913.73 1203.2 L1914.32 1203.2 L1914.9 1203.2 L1915.49 1203.2 L1916.08 1203.2 L1916.66 1203.2 L1917.25 1203.2 L1917.83 1203.2 L1918.42 1203.2 L1919.01 1203.2 L1919.59 1203.2 L1920.18 1203.2 L1920.77 1203.2 L1921.35 1203.2 L1921.94 1203.2 L1922.53 1203.2 L1923.11 1203.2 L1923.7 1203.2 L1924.29 1203.2 L1924.87 1203.2 L1925.46 1203.2 L1926.04 1203.2 L1926.63 1203.2 L1927.22 1203.2 L1927.8 1203.2 L1928.39 1203.2 L1928.98 1203.2 L1929.56 1203.2 L1930.15 1203.2 L1930.74 1203.2 L1931.32 1203.2 L1931.91 1203.2 L1932.5 1203.2 L1933.08 1203.2 L1933.67 1203.2 L1934.25 1203.2 L1934.84 1203.2 L1935.43 1203.2 L1936.01 1203.2 L1936.6 1203.2 L1937.19 1203.2 L1937.77 1203.2 L1938.36 1203.2 L1938.95 1203.2 L1939.53 1203.2 L1940.12 1203.2 L1940.71 1203.2 L1941.29 1203.2 L1941.88 1203.2 L1942.46 1203.2 L1943.05 1203.2 L1943.64 1203.2 L1944.22 1203.2 L1944.81 1203.2 L1945.4 1203.2 L1945.98 1203.2 L1946.57 1203.2 L1947.16 1203.2 L1947.74 1203.2 L1948.33 1203.2 L1948.91 1203.2 L1949.5 1203.2 L1950.09 1203.2 L1950.67 1203.2 L1951.26 1203.2 L1951.85 1203.2 L1952.43 1203.2 L1953.02 1203.2 L1953.61 1203.2 L1954.19 1203.2 L1954.78 1203.2 L1955.37 1203.2 L1955.95 1203.2 L1956.54 1203.2 L1957.12 1203.2 L1957.71 1203.2 L1958.3 1203.2 L1958.88 1203.2 L1959.47 1203.2 L1960.06 1203.2 L1960.64 1203.2 L1961.23 1203.2 L1961.82 1203.2 L1962.4 1203.2 L1962.99 1203.2 L1963.58 1203.2 L1964.16 1203.2 L1964.75 1203.2 L1965.33 1203.2 L1965.92 1203.2 L1966.51 1203.2 L1967.09 1203.2 L1967.68 1203.2 L1968.27 1203.2 L1968.85 1203.2 L1969.44 1203.2 L1970.03 1203.2 L1970.61 1203.2 L1971.2 1203.2 L1971.78 1203.2 L1972.37 1203.2 L1972.96 1203.2 L1973.54 1203.2 L1974.13 1203.2 L1974.72 1203.2 L1975.3 1203.2 L1975.89 1203.2 L1976.48 1203.2 L1977.06 1203.2 L1977.65 1203.2 L1978.24 1203.2 L1978.82 1203.2 L1979.41 1203.2 L1979.99 1203.2 L1980.58 1203.2 L1981.17 1203.2 L1981.75 1203.2 L1982.34 1203.2 L1982.93 1203.2 L1983.51 1203.2 L1984.1 1203.2 L1984.69 1203.2 L1985.27 1203.2 L1985.86 1203.2 L1986.45 1203.2 L1987.03 1203.2 L1987.62 1203.2 L1988.2 1203.2 L1988.79 1203.2 L1989.38 1203.2 L1989.96 1203.2 L1990.55 1203.2 L1991.14 1203.2 L1991.72 1203.2 L1992.31 1203.2 L1992.9 1203.2 L1993.48 1203.2 L1994.07 1203.2 L1994.65 1203.2 L1995.24 1203.2 L1995.83 1203.2 L1996.41 1203.2 L1997 1203.2 L1997.59 1203.2 L1998.17 1203.2 L1998.76 1203.2 L1999.35 1203.2 L1999.93 1203.2 L2000.52 1203.2 L2001.11 1203.2 L2001.69 1203.2 L2002.28 1203.2 L2002.86 1203.2 L2003.45 1203.2 L2004.04 1203.2 L2004.62 1203.2 L2005.21 1203.2 L2005.8 1203.2 L2006.38 1203.2 L2006.97 1203.2 L2007.56 1203.2 L2008.14 1203.2 L2008.73 1203.2 L2009.32 1203.2 L2009.9 1203.2 L2010.49 1203.2 L2011.07 1203.2 L2011.66 1203.2 L2012.25 1203.2 L2012.83 1203.2 L2013.42 1203.2 L2014.01 1203.2 L2014.59 1203.2 L2015.18 1203.2 L2015.77 1203.2 L2016.35 1203.2 L2016.94 1203.2 L2017.53 1203.2 L2018.11 1203.2 L2018.7 1203.2 L2019.28 1203.2 L2019.87 1203.2 L2020.46 1203.2 L2021.04 1203.2 L2021.63 1203.2 L2022.22 1203.2 L2022.8 1203.2 L2023.39 1203.2 L2023.98 1203.2 L2024.56 1203.2 L2025.15 1203.2 L2025.73 1203.2 L2026.32 1203.2 L2026.91 1203.2 L2027.49 1203.2 L2028.08 1203.2 L2028.67 1203.2 L2029.25 1203.2 L2029.84 1203.2 L2030.43 1203.2 L2031.01 1203.2 L2031.6 1203.2 L2032.19 1203.2 L2032.77 1203.2 L2033.36 1203.2 L2033.94 1203.2 L2034.53 1203.2 L2035.12 1203.2 L2035.7 1203.2 L2036.29 1203.2 L2036.88 1203.2 L2037.46 1203.2 L2038.05 1203.2 L2038.64 1203.2 L2039.22 1203.2 L2039.81 1203.2 L2040.4 1203.2 L2040.98 1203.2 L2041.57 1203.2 L2042.15 1203.2 L2042.74 1203.2 L2043.33 1203.2 L2043.91 1203.2 L2044.5 1203.2 L2045.09 1203.2 L2045.67 1203.2 L2046.26 1203.2 L2046.85 1203.2 L2047.43 1203.2 L2048.02 1203.2 L2048.6 1203.2 L2049.19 1203.2 L2049.78 1203.2 L2050.36 1203.2 L2050.95 1203.2 L2051.54 1203.2 L2052.12 1203.2 L2052.71 1203.2 L2053.3 1203.2 L2053.88 1203.2 L2054.47 1203.2 L2055.06 1203.2 L2055.64 1203.2 L2056.23 1203.2 L2056.81 1203.2 L2057.4 1203.2 L2057.99 1203.2 L2058.57 1203.2 L2059.16 1203.2 L2059.75 1203.2 L2060.33 1203.2 L2060.92 1203.2 L2061.51 1203.2 L2062.09 1203.2 L2062.68 1203.2 L2063.27 1203.2 L2063.85 1203.2 L2064.44 1203.2 L2065.02 1203.2 L2065.61 1203.2 L2066.2 1203.2 L2066.78 1203.2 L2067.37 1203.2 L2067.96 1203.2 L2068.54 1203.2 L2069.13 1203.2 L2069.72 1203.2 L2070.3 1203.2 L2070.89 1203.2 L2071.48 1203.2 L2072.06 1203.2 L2072.65 1203.2 L2073.23 1203.2 L2073.82 1203.2 L2074.41 1203.2 L2074.99 1203.2 L2075.58 1203.2 L2076.17 1203.2 L2076.75 1203.2 L2077.34 1203.2 L2077.93 1203.2 L2078.51 1203.2 L2079.1 1203.2 L2079.68 1203.2 L2080.27 1203.2 L2080.86 1203.2 L2081.44 1203.2 L2082.03 1203.2 L2082.62 1203.2 L2083.2 1203.2 L2083.79 1203.2 L2084.38 1203.2 L2084.96 1203.2 L2085.55 1203.2 L2086.14 1203.2 L2086.72 1203.2 L2087.31 1203.2 L2087.89 1203.2 L2088.48 1203.2 L2089.07 1203.2 L2089.65 1203.2 L2090.24 1203.2 L2090.83 1203.2 L2091.41 1203.2 L2092 1203.2 L2092.59 1203.2 L2093.17 1203.2 L2093.76 1203.2 L2094.35 1203.2 L2094.93 1203.2 L2095.52 1203.2 L2096.1 1203.2 L2096.69 1203.2 L2097.28 1203.2 L2097.86 1203.2 L2098.45 1203.2 L2099.04 1203.2 L2099.62 1203.2 L2100.21 1203.2 L2100.8 1203.2 L2101.38 1203.2 L2101.97 1203.2 L2102.55 1203.2 L2103.14 1203.2 L2103.73 1203.2 L2104.31 1203.2 L2104.9 1203.2 L2105.49 1203.2 L2106.07 1203.2 L2106.66 1203.2 L2107.25 1203.2 L2107.83 1203.2 L2108.42 1203.2 L2109.01 1203.2 L2109.59 1203.2 L2110.18 1203.2 L2110.76 1203.2 L2111.35 1203.2 L2111.94 1203.2 L2112.52 1203.2 L2113.11 1203.2 L2113.7 1203.2 L2114.28 1203.2 L2114.87 1203.2 L2115.46 1203.2 L2116.04 1203.2 L2116.63 1203.2 L2117.22 1203.2 L2117.8 1203.2 L2118.39 1203.2 L2118.97 1203.2 L2119.56 1203.2 L2120.15 1203.2 L2120.73 1203.2 L2121.32 1203.2 L2121.91 1203.2 L2122.49 1203.2 L2123.08 1203.2 L2123.67 1203.2 L2124.25 1203.2 L2124.84 1203.2 L2125.42 1203.2 L2126.01 1203.2 L2126.6 1203.2 L2127.18 1203.2 L2127.77 1203.2 L2128.36 1203.2 L2128.94 1203.2 L2129.53 1203.2 L2130.12 1203.2 L2130.7 1203.2 L2131.29 1203.2 L2131.88 1203.2 L2132.46 1203.2 L2133.05 1203.2 L2133.63 1203.2 L2134.22 1203.2 L2134.81 1203.2 L2135.39 1203.2 L2135.98 1203.2 L2136.57 1203.2 L2137.15 1203.2 L2137.74 1203.2 L2138.33 1203.2 L2138.91 1203.2 L2139.5 1203.2 L2140.09 1203.2 L2140.67 1203.2 L2141.26 1203.2 L2141.84 1203.2 L2142.43 1203.2 L2143.02 1203.2 L2143.6 1203.2 L2144.19 1203.2 L2144.78 1203.2 L2145.36 1203.2 L2145.95 1203.2 L2146.54 1203.2 L2147.12 1203.2 L2147.71 1203.2 L2148.3 1203.2 L2148.88 1203.2 L2149.47 1203.2 L2150.05 1203.2 L2150.64 1203.2 L2151.23 1203.2 L2151.81 1203.2 L2152.4 1203.2 L2152.99 1203.2 L2153.57 1203.2 L2154.16 1203.2 L2154.75 1203.2 L2155.33 1203.2 L2155.92 1203.2 L2156.5 1203.2 L2157.09 1203.2 L2157.68 1203.2 L2158.26 1203.2 L2158.26 1203.08 L2157.68 1203.08 L2157.09 1203.08 L2156.5 1203.08 L2155.92 1203.08 L2155.33 1203.08 L2154.75 1203.08 L2154.16 1203.08 L2153.57 1203.08 L2152.99 1203.08 L2152.4 1203.08 L2151.81 1203.08 L2151.23 1203.08 L2150.64 1203.08 L2150.05 1203.08 L2149.47 1203.08 L2148.88 1203.08 L2148.3 1203.08 L2147.71 1203.08 L2147.12 1203.08 L2146.54 1203.08 L2145.95 1203.08 L2145.36 1203.08 L2144.78 1203.08 L2144.19 1203.08 L2143.6 1203.08 L2143.02 1203.08 L2142.43 1203.08 L2141.84 1203.08 L2141.26 1203.08 L2140.67 1203.08 L2140.09 1203.08 L2139.5 1203.08 L2138.91 1203.08 L2138.33 1203.08 L2137.74 1203.08 L2137.15 1203.08 L2136.57 1203.08 L2135.98 1203.08 L2135.39 1203.08 L2134.81 1203.08 L2134.22 1203.08 L2133.63 1203.08 L2133.05 1203.08 L2132.46 1203.08 L2131.88 1203.08 L2131.29 1203.08 L2130.7 1203.08 L2130.12 1203.08 L2129.53 1203.08 L2128.94 1203.08 L2128.36 1203.08 L2127.77 1203.08 L2127.18 1203.08 L2126.6 1203.08 L2126.01 1203.08 L2125.42 1203.08 L2124.84 1203.08 L2124.25 1203.08 L2123.67 1203.08 L2123.08 1203.08 L2122.49 1203.08 L2121.91 1203.08 L2121.32 1203.08 L2120.73 1203.08 L2120.15 1203.08 L2119.56 1203.08 L2118.97 1203.08 L2118.39 1203.08 L2117.8 1203.08 L2117.22 1203.08 L2116.63 1203.08 L2116.04 1203.08 L2115.46 1203.08 L2114.87 1203.08 L2114.28 1203.08 L2113.7 1203.08 L2113.11 1203.08 L2112.52 1203.08 L2111.94 1203.08 L2111.35 1203.08 L2110.76 1203.08 L2110.18 1203.08 L2109.59 1203.08 L2109.01 1203.08 L2108.42 1203.08 L2107.83 1203.08 L2107.25 1203.08 L2106.66 1203.08 L2106.07 1203.08 L2105.49 1203.08 L2104.9 1203.08 L2104.31 1203.08 L2103.73 1203.08 L2103.14 1203.08 L2102.55 1203.08 L2101.97 1203.08 L2101.38 1203.08 L2100.8 1203.08 L2100.21 1203.08 L2099.62 1203.08 L2099.04 1203.08 L2098.45 1203.08 L2097.86 1203.08 L2097.28 1203.08 L2096.69 1203.08 L2096.1 1203.08 L2095.52 1203.08 L2094.93 1203.08 L2094.35 1203.08 L2093.76 1203.08 L2093.17 1203.08 L2092.59 1203.08 L2092 1203.08 L2091.41 1203.08 L2090.83 1203.08 L2090.24 1203.08 L2089.65 1203.08 L2089.07 1203.08 L2088.48 1203.08 L2087.89 1203.08 L2087.31 1203.08 L2086.72 1203.08 L2086.14 1203.08 L2085.55 1203.08 L2084.96 1203.08 L2084.38 1203.08 L2083.79 1203.08 L2083.2 1203.08 L2082.62 1203.08 L2082.03 1203.08 L2081.44 1203.08 L2080.86 1203.08 L2080.27 1203.08 L2079.68 1203.08 L2079.1 1203.08 L2078.51 1203.08 L2077.93 1203.08 L2077.34 1203.08 L2076.75 1203.08 L2076.17 1203.08 L2075.58 1203.08 L2074.99 1203.08 L2074.41 1203.08 L2073.82 1203.08 L2073.23 1203.08 L2072.65 1203.08 L2072.06 1203.08 L2071.48 1203.08 L2070.89 1203.08 L2070.3 1203.08 L2069.72 1203.08 L2069.13 1203.08 L2068.54 1203.08 L2067.96 1203.08 L2067.37 1203.08 L2066.78 1203.08 L2066.2 1203.08 L2065.61 1203.08 L2065.02 1203.08 L2064.44 1203.08 L2063.85 1203.08 L2063.27 1203.08 L2062.68 1203.08 L2062.09 1203.08 L2061.51 1203.08 L2060.92 1203.08 L2060.33 1203.08 L2059.75 1203.08 L2059.16 1203.08 L2058.57 1203.08 L2057.99 1203.08 L2057.4 1203.08 L2056.81 1203.08 L2056.23 1203.08 L2055.64 1203.08 L2055.06 1203.08 L2054.47 1203.08 L2053.88 1203.08 L2053.3 1203.08 L2052.71 1203.08 L2052.12 1203.08 L2051.54 1203.08 L2050.95 1203.08 L2050.36 1203.08 L2049.78 1203.08 L2049.19 1203.08 L2048.6 1203.08 L2048.02 1203.08 L2047.43 1203.08 L2046.85 1203.08 L2046.26 1203.08 L2045.67 1203.08 L2045.09 1203.08 L2044.5 1203.08 L2043.91 1203.08 L2043.33 1203.08 L2042.74 1203.08 L2042.15 1203.08 L2041.57 1203.08 L2040.98 1203.08 L2040.4 1203.08 L2039.81 1203.08 L2039.22 1203.08 L2038.64 1203.08 L2038.05 1203.08 L2037.46 1203.08 L2036.88 1203.08 L2036.29 1203.08 L2035.7 1203.08 L2035.12 1203.08 L2034.53 1203.08 L2033.94 1203.08 L2033.36 1203.08 L2032.77 1203.08 L2032.19 1203.08 L2031.6 1203.08 L2031.01 1203.08 L2030.43 1203.08 L2029.84 1203.08 L2029.25 1203.08 L2028.67 1203.08 L2028.08 1203.08 L2027.49 1203.08 L2026.91 1203.08 L2026.32 1203.08 L2025.73 1203.08 L2025.15 1203.08 L2024.56 1203.08 L2023.98 1203.08 L2023.39 1203.08 L2022.8 1203.08 L2022.22 1203.08 L2021.63 1203.08 L2021.04 1203.08 L2020.46 1203.08 L2019.87 1203.08 L2019.28 1203.08 L2018.7 1203.08 L2018.11 1203.08 L2017.53 1203.08 L2016.94 1203.08 L2016.35 1203.08 L2015.77 1203.08 L2015.18 1203.08 L2014.59 1203.08 L2014.01 1203.08 L2013.42 1203.08 L2012.83 1203.08 L2012.25 1203.08 L2011.66 1203.08 L2011.07 1203.08 L2010.49 1203.08 L2009.9 1203.08 L2009.32 1203.08 L2008.73 1203.08 L2008.14 1203.08 L2007.56 1203.08 L2006.97 1203.08 L2006.38 1203.08 L2005.8 1203.08 L2005.21 1203.08 L2004.62 1203.08 L2004.04 1203.08 L2003.45 1203.08 L2002.86 1203.08 L2002.28 1203.08 L2001.69 1203.08 L2001.11 1203.08 L2000.52 1203.08 L1999.93 1203.08 L1999.35 1203.08 L1998.76 1203.08 L1998.17 1203.08 L1997.59 1203.08 L1997 1203.08 L1996.41 1203.08 L1995.83 1203.08 L1995.24 1203.08 L1994.65 1203.08 L1994.07 1203.08 L1993.48 1203.08 L1992.9 1203.08 L1992.31 1203.08 L1991.72 1203.08 L1991.14 1203.08 L1990.55 1203.08 L1989.96 1203.08 L1989.38 1203.08 L1988.79 1203.08 L1988.2 1203.08 L1987.62 1203.08 L1987.03 1203.08 L1986.45 1203.08 L1985.86 1203.08 L1985.27 1203.08 L1984.69 1203.08 L1984.1 1203.08 L1983.51 1203.08 L1982.93 1203.08 L1982.34 1203.08 L1981.75 1203.08 L1981.17 1203.08 L1980.58 1203.08 L1979.99 1203.08 L1979.41 1203.08 L1978.82 1203.08 L1978.24 1203.08 L1977.65 1203.08 L1977.06 1203.08 L1976.48 1203.08 L1975.89 1203.08 L1975.3 1203.08 L1974.72 1203.08 L1974.13 1203.08 L1973.54 1203.08 L1972.96 1203.08 L1972.37 1203.08 L1971.78 1203.08 L1971.2 1203.08 L1970.61 1203.08 L1970.03 1203.08 L1969.44 1203.08 L1968.85 1203.08 L1968.27 1203.08 L1967.68 1203.08 L1967.09 1203.08 L1966.51 1203.08 L1965.92 1203.08 L1965.33 1203.08 L1964.75 1203.08 L1964.16 1203.08 L1963.58 1203.08 L1962.99 1203.08 L1962.4 1203.08 L1961.82 1203.08 L1961.23 1203.08 L1960.64 1203.08 L1960.06 1203.08 L1959.47 1203.08 L1958.88 1203.08 L1958.3 1203.08 L1957.71 1203.08 L1957.12 1203.08 L1956.54 1203.08 L1955.95 1203.08 L1955.37 1203.08 L1954.78 1203.08 L1954.19 1203.08 L1953.61 1203.08 L1953.02 1203.08 L1952.43 1203.08 L1951.85 1203.08 L1951.26 1203.08 L1950.67 1203.08 L1950.09 1203.08 L1949.5 1203.08 L1948.91 1203.08 L1948.33 1203.08 L1947.74 1203.08 L1947.16 1203.08 L1946.57 1203.08 L1945.98 1203.08 L1945.4 1203.08 L1944.81 1203.08 L1944.22 1203.08 L1943.64 1203.08 L1943.05 1203.08 L1942.46 1203.08 L1941.88 1203.08 L1941.29 1203.08 L1940.71 1203.08 L1940.12 1203.08 L1939.53 1203.08 L1938.95 1203.08 L1938.36 1203.08 L1937.77 1203.08 L1937.19 1203.08 L1936.6 1203.08 L1936.01 1203.08 L1935.43 1203.08 L1934.84 1203.08 L1934.25 1203.08 L1933.67 1203.08 L1933.08 1203.08 L1932.5 1203.08 L1931.91 1203.08 L1931.32 1203.08 L1930.74 1203.08 L1930.15 1203.08 L1929.56 1203.08 L1928.98 1203.08 L1928.39 1203.08 L1927.8 1203.08 L1927.22 1203.08 L1926.63 1203.08 L1926.04 1203.08 L1925.46 1203.08 L1924.87 1203.08 L1924.29 1203.08 L1923.7 1203.08 L1923.11 1203.08 L1922.53 1203.08 L1921.94 1203.08 L1921.35 1203.08 L1920.77 1203.08 L1920.18 1203.08 L1919.59 1203.08 L1919.01 1203.08 L1918.42 1203.08 L1917.83 1203.08 L1917.25 1203.08 L1916.66 1203.08 L1916.08 1203.08 L1915.49 1203.08 L1914.9 1203.08 L1914.32 1203.08 L1913.73 1203.08 L1913.14 1203.08 L1912.56 1203.08 L1911.97 1203.08 L1911.38 1203.08 L1910.8 1203.08 L1910.21 1203.08 L1909.63 1203.08 L1909.04 1203.08 L1908.45 1203.08 L1907.87 1203.08 L1907.28 1203.08 L1906.69 1203.08 L1906.11 1203.08 L1905.52 1203.08 L1904.93 1203.08 L1904.35 1203.08 L1903.76 1203.08 L1903.17 1203.08 L1902.59 1203.08 L1902 1203.08 L1901.42 1203.08 L1900.83 1203.08 L1900.24 1203.08 L1899.66 1203.08 L1899.07 1203.08 L1898.48 1203.08 L1897.9 1203.08 L1897.31 1203.08 L1896.72 1203.08 L1896.14 1203.08 L1895.55 1203.08 L1894.96 1203.08 L1894.38 1203.08 L1893.79 1203.08 L1893.21 1203.08 L1892.62 1203.08 L1892.03 1203.08 L1891.45 1203.08 L1890.86 1203.08 L1890.27 1203.08 L1889.69 1203.08 L1889.1 1203.08 L1888.51 1203.08 L1887.93 1203.08 L1887.34 1203.08 L1886.76 1203.08 L1886.17 1203.08 L1885.58 1203.08 L1885 1203.08 L1884.41 1203.08 L1883.82 1203.08 L1883.24 1203.08 L1882.65 1203.08 L1882.06 1203.08 L1881.48 1203.08 L1880.89 1203.08 L1880.3 1203.08 L1879.72 1203.08 L1879.13 1203.08 L1878.55 1203.08 L1877.96 1203.08 L1877.37 1203.08 L1876.79 1203.08 L1876.2 1203.08 L1875.61 1203.08 L1875.03 1203.08 L1874.44 1203.08 L1873.85 1203.08 L1873.27 1203.08 L1872.68 1203.08 L1872.09 1203.08 L1871.51 1203.08 L1870.92 1203.08 L1870.34 1203.08 L1869.75 1203.08 L1869.16 1203.08 L1868.58 1203.08 L1867.99 1203.08 L1867.4 1203.08 L1866.82 1203.08 L1866.23 1203.08 L1865.64 1203.08 L1865.06 1203.08 L1864.47 1203.08 L1863.88 1203.08 L1863.3 1203.08 L1862.71 1203.08 L1862.13 1203.08 L1861.54 1203.08 L1860.95 1203.08 L1860.37 1203.08 L1859.78 1203.08 L1859.19 1203.08 L1858.61 1203.08 L1858.02 1203.08 L1857.43 1203.08 L1856.85 1203.08 L1856.26 1203.08 L1855.68 1203.08 L1855.09 1203.08 L1854.5 1203.08 L1853.92 1203.08 L1853.33 1203.08 L1852.74 1203.08 L1852.16 1203.08 L1851.57 1203.08 L1850.98 1203.08 L1850.4 1203.08 L1849.81 1203.08 L1849.22 1203.08 L1848.64 1203.08 L1848.05 1203.08 L1847.47 1203.08 L1846.88 1203.08 L1846.29 1203.08 L1845.71 1203.08 L1845.12 1203.08 L1844.53 1203.08 L1843.95 1203.08 L1843.36 1203.08 L1842.77 1203.08 L1842.19 1203.08 L1841.6 1203.08 L1841.01 1203.08 L1840.43 1203.08 L1839.84 1203.08 L1839.26 1203.08 L1838.67 1203.08 L1838.08 1203.08 L1837.5 1203.08 L1836.91 1203.08 L1836.32 1203.08 L1835.74 1203.08 L1835.15 1203.08 L1834.56 1203.08 L1833.98 1203.08 L1833.39 1203.08 L1832.81 1203.08 L1832.22 1203.08 L1831.63 1203.08 L1831.05 1203.08 L1830.46 1203.08 L1829.87 1203.08 L1829.29 1203.08 L1828.7 1203.08 L1828.11 1203.08 L1827.53 1203.08 L1826.94 1203.08 L1826.35 1203.08 L1825.77 1203.08 L1825.18 1203.08 L1824.6 1203.08 L1824.01 1203.08 L1823.42 1203.08 L1822.84 1203.08 L1822.25 1203.08 L1821.66 1203.08 L1821.08 1203.08 L1820.49 1203.08 L1819.9 1203.08 L1819.32 1203.08 L1818.73 1203.08 L1818.14 1203.08 L1817.56 1203.08 L1816.97 1203.08 L1816.39 1203.08 L1815.8 1203.08 L1815.21 1203.08 L1814.63 1203.08 L1814.04 1203.08 L1813.45 1203.08 L1812.87 1203.08 L1812.28 1203.08 L1811.69 1203.08 L1811.11 1203.08 L1810.52 1203.08 L1809.94 1203.08 L1809.35 1203.08 L1808.76 1203.08 L1808.18 1203.08 L1807.59 1203.08 L1807 1203.08 L1806.42 1203.08 L1805.83 1203.08 L1805.24 1203.08 L1804.66 1203.08 L1804.07 1203.08 L1803.48 1203.08 L1802.9 1203.08 L1802.31 1203.08 L1801.73 1203.08 L1801.14 1203.08 L1800.55 1203.08 L1799.97 1203.08 L1799.38 1203.08 L1798.79 1203.08 L1798.21 1203.08 L1797.62 1203.08 L1797.03 1203.08 L1796.45 1203.08 L1795.86 1203.08 L1795.27 1203.08 L1794.69 1203.08 L1794.1 1203.08 L1793.52 1203.08 L1792.93 1203.08 L1792.34 1203.08 L1791.76 1203.08 L1791.17 1203.08 L1790.58 1203.08 L1790 1203.08 L1789.41 1203.08 L1788.82 1203.08 L1788.24 1203.08 L1787.65 1203.08 L1787.06 1203.08 L1786.48 1203.08 L1785.89 1203.08 L1785.31 1203.08 L1784.72 1203.08 L1784.13 1203.08 L1783.55 1203.08 L1782.96 1203.08 L1782.37 1203.08 L1781.79 1203.08 L1781.2 1203.08 L1780.61 1203.08 L1780.03 1203.08 L1779.44 1203.08 L1778.86 1203.08 L1778.27 1203.08 L1777.68 1203.08 L1777.1 1203.08 L1776.51 1203.08 L1775.92 1203.08 L1775.34 1203.08 L1774.75 1203.08 L1774.16 1203.08 L1773.58 1203.08 L1772.99 1203.08 L1772.4 1203.08 L1771.82 1203.08 L1771.23 1203.08 L1770.65 1203.08 L1770.06 1203.08 L1769.47 1203.08 L1768.89 1203.08 L1768.3 1203.08 L1767.71 1203.08 L1767.13 1203.08 L1766.54 1203.08 L1765.95 1203.08 L1765.37 1203.08 L1764.78 1203.08 L1764.19 1203.08 L1763.61 1203.08 L1763.02 1203.08 L1762.44 1203.08 L1761.85 1203.08 L1761.26 1203.08 L1760.68 1203.08 L1760.09 1203.08 L1759.5 1203.08 L1758.92 1203.08 L1758.33 1203.08 L1757.74 1203.08 L1757.16 1203.08 L1756.57 1203.08 L1755.99 1203.08 L1755.4 1203.08 L1754.81 1203.08 L1754.23 1203.08 L1753.64 1203.08 L1753.05 1203.08 L1752.47 1203.08 L1751.88 1203.08 L1751.29 1203.08 L1750.71 1203.08 L1750.12 1203.08 L1749.53 1203.08 L1748.95 1203.08 L1748.36 1203.08 L1747.78 1203.08 L1747.19 1203.08 L1746.6 1203.08 L1746.02 1203.08 L1745.43 1203.08 L1744.84 1203.08 L1744.26 1203.08 L1743.67 1203.08 L1743.08 1203.08 L1742.5 1203.08 L1741.91 1203.08 L1741.32 1203.08 L1740.74 1203.08 L1740.15 1203.08 L1739.57 1203.08 L1738.98 1203.08 L1738.39 1203.08 L1737.81 1203.08 L1737.22 1203.08 L1736.63 1203.08 L1736.05 1203.08 L1735.46 1203.08 L1734.87 1203.08 L1734.29 1203.08 L1733.7 1203.08 L1733.11 1203.08 L1732.53 1203.08 L1731.94 1203.08 L1731.36 1203.08 L1730.77 1203.08 L1730.18 1203.08 L1729.6 1203.08 L1729.01 1203.08 L1728.42 1203.08 L1727.84 1203.08 L1727.25 1203.08 L1726.66 1203.08 L1726.08 1203.08 L1725.49 1203.08 L1724.91 1203.08 L1724.32 1203.08 L1723.73 1203.08 L1723.15 1203.08 L1722.56 1203.08 L1721.97 1203.08 L1721.39 1203.08 L1720.8 1203.08 L1720.21 1203.08 L1719.63 1203.08 L1719.04 1203.08 L1718.45 1203.08 L1717.87 1203.08 L1717.28 1203.08 L1716.7 1203.08 L1716.11 1203.08 L1715.52 1203.08 L1714.94 1203.08 L1714.35 1203.08 L1713.76 1203.08 L1713.18 1203.08 L1712.59 1203.08 L1712 1203.08 L1711.42 1203.08 L1710.83 1203.08 L1710.24 1203.08 L1709.66 1203.08 L1709.07 1203.08 L1708.49 1203.08 L1707.9 1203.08 L1707.31 1203.08 L1706.73 1203.08 L1706.14 1203.08 L1705.55 1203.08 L1704.97 1203.08 L1704.38 1203.08 L1703.79 1203.08 L1703.21 1203.08 L1702.62 1203.08 L1702.04 1203.08 L1701.45 1203.08 L1700.86 1203.08 L1700.28 1203.08 L1699.69 1203.08 L1699.1 1203.08 L1698.52 1203.08 L1697.93 1203.08 L1697.34 1203.08 L1696.76 1203.08 L1696.17 1203.08 L1695.58 1203.08 L1695 1203.08 L1694.41 1203.08 L1693.83 1203.08 L1693.24 1203.08 L1692.65 1203.08 L1692.07 1203.08 L1691.48 1203.08 L1690.89 1203.08 L1690.31 1203.08 L1689.72 1203.08 L1689.13 1203.08 L1688.55 1203.08 L1687.96 1203.08 L1687.37 1203.08 L1686.79 1203.08 L1686.2 1203.08 L1685.62 1203.08 L1685.03 1203.08 L1684.44 1203.08 L1683.86 1203.08 L1683.27 1203.08 L1682.68 1203.08 L1682.1 1203.08 L1681.51 1203.08 L1680.92 1203.08 L1680.34 1203.08 L1679.75 1203.08 L1679.17 1203.08 L1678.58 1203.08 L1677.99 1203.08 L1677.41 1203.08 L1676.82 1203.08 L1676.23 1203.08 L1675.65 1203.08 L1675.06 1203.08 L1674.47 1203.08 L1673.89 1203.08 L1673.3 1203.08 L1672.71 1203.08 L1672.13 1203.08 L1671.54 1203.08 L1670.96 1203.08 L1670.37 1203.08 L1669.78 1203.08 L1669.2 1203.08 L1668.61 1203.08 L1668.02 1203.08 L1667.44 1203.08 L1666.85 1203.08 L1666.26 1203.08 L1665.68 1203.08 L1665.09 1203.08 L1664.5 1203.08 L1663.92 1203.08 L1663.33 1203.08 L1662.75 1203.08 L1662.16 1203.08 L1661.57 1203.08 L1660.99 1203.08 L1660.4 1203.08 L1659.81 1203.08 L1659.23 1203.08 L1658.64 1203.08 L1658.05 1203.08 L1657.47 1203.08 L1656.88 1203.08 L1656.29 1203.08 L1655.71 1203.08 L1655.12 1203.08 L1654.54 1203.08 L1653.95 1203.08 L1653.36 1203.08 L1652.78 1203.08 L1652.19 1203.08 L1651.6 1203.08 L1651.02 1203.08 L1650.43 1203.08 L1649.84 1203.08 L1649.26 1203.08 L1648.67 1203.08 L1648.09 1203.08 L1647.5 1203.08 L1646.91 1203.08 L1646.33 1203.08 L1645.74 1203.08 L1645.15 1203.08 L1644.57 1203.08 L1643.98 1203.08 L1643.39 1203.08 L1642.81 1203.08 L1642.22 1203.08 L1641.63 1203.08 L1641.05 1203.08 L1640.46 1203.08 L1639.88 1203.08 L1639.29 1203.08 L1638.7 1203.08 L1638.12 1203.08 L1637.53 1203.08 L1636.94 1203.08 L1636.36 1203.08 L1635.77 1203.08 L1635.18 1203.08 L1634.6 1203.08 L1634.01 1203.08 L1633.42 1203.08 L1632.84 1203.08 L1632.25 1203.08 L1631.67 1203.08 L1631.08 1203.08 L1630.49 1203.08 L1629.91 1203.08 L1629.32 1203.08 L1628.73 1203.08 L1628.15 1203.08 L1627.56 1203.08 L1626.97 1203.08 L1626.39 1203.08 L1625.8 1203.08 L1625.22 1203.08 L1624.63 1203.08 L1624.04 1203.08 L1623.46 1203.08 L1622.87 1203.08 L1622.28 1203.08 L1621.7 1203.08 L1621.11 1203.08 L1620.52 1203.08 L1619.94 1203.08 L1619.35 1203.08 L1618.76 1203.08 L1618.18 1203.08 L1617.59 1203.08 L1617.01 1203.08 L1616.42 1203.08 L1615.83 1203.08 L1615.25 1203.08 L1614.66 1203.08 L1614.07 1203.08 L1613.49 1203.08 L1612.9 1203.08 L1612.31 1203.08 L1611.73 1203.08 L1611.14 1203.08 L1610.55 1203.08 L1609.97 1203.08 L1609.38 1203.08 L1608.8 1203.08 L1608.21 1203.08 L1607.62 1203.08 L1607.04 1203.08 L1606.45 1203.08 L1605.86 1203.08 L1605.28 1203.08 L1604.69 1203.08 L1604.1 1203.08 L1603.52 1203.08 L1602.93 1203.08 L1602.34 1203.08 L1601.76 1203.08 L1601.17 1203.08 L1600.59 1203.08 L1600 1203.08 L1599.41 1203.08 L1598.83 1203.08 L1598.24 1203.08 L1597.65 1203.08 L1597.07 1203.08 L1596.48 1203.08 L1595.89 1203.08 L1595.31 1203.08 L1594.72 1203.08 L1594.14 1203.08 L1593.55 1203.08 L1592.96 1203.08 L1592.38 1203.08 L1591.79 1203.08 L1591.2 1203.08 L1590.62 1203.08 L1590.03 1203.08 L1589.44 1203.08 L1588.86 1203.08 L1588.27 1203.08 L1587.68 1203.08 L1587.1 1203.08 L1586.51 1203.08 L1585.93 1203.08 L1585.34 1203.08 L1584.75 1203.08 L1584.17 1203.08 L1583.58 1203.08 L1582.99 1203.08 L1582.41 1203.08 L1581.82 1203.08 L1581.23 1203.08 L1580.65 1203.08 L1580.06 1203.08 L1579.47 1203.08 L1578.89 1203.08 L1578.3 1203.08 L1577.72 1203.08 L1577.13 1203.08 L1576.54 1203.08 L1575.96 1203.08 L1575.37 1203.08 L1574.78 1203.08 L1574.2 1203.08 L1573.61 1203.08 L1573.02 1203.08 L1572.44 1203.08 L1571.85 1203.08 L1571.27 1203.08 L1570.68 1203.08 L1570.09 1203.08 L1569.51 1203.08 L1568.92 1203.08 L1568.33 1203.08 L1567.75 1203.08 L1567.16 1203.08 L1566.57 1203.08 L1565.99 1203.08 L1565.4 1203.08 L1564.81 1203.08 L1564.23 1203.08 L1563.64 1203.08 L1563.06 1203.08 L1562.47 1203.08 L1561.88 1203.08 L1561.3 1203.08 L1560.71 1203.08 L1560.12 1203.08 L1559.54 1203.08 L1558.95 1203.08 L1558.36 1203.08 L1557.78 1203.08 L1557.19 1203.08 L1556.6 1203.08 L1556.02 1203.08 L1555.43 1203.08 L1554.85 1203.08 L1554.26 1203.08 L1553.67 1203.08 L1553.09 1203.08 L1552.5 1203.08 L1551.91 1203.08 L1551.33 1203.08 L1550.74 1203.08 L1550.15 1203.08 L1549.57 1203.08 L1548.98 1203.08 L1548.4 1203.08 L1547.81 1203.08 L1547.22 1203.08 L1546.64 1203.08 L1546.05 1203.08 L1545.46 1203.08 L1544.88 1203.08 L1544.29 1203.08 L1543.7 1203.08 L1543.12 1203.08 L1542.53 1203.08 L1541.94 1203.08 L1541.36 1203.08 L1540.77 1203.08 L1540.19 1203.08 L1539.6 1203.08 L1539.01 1203.08 L1538.43 1203.08 L1537.84 1203.08 L1537.25 1203.08 L1536.67 1203.08 L1536.08 1203.08 L1535.49 1203.08 L1534.91 1203.08 L1534.32 1203.08 L1533.73 1203.08 L1533.15 1203.08 L1532.56 1203.08 L1531.98 1203.08 L1531.39 1203.08 L1530.8 1203.08 L1530.22 1203.08 L1529.63 1203.08 L1529.04 1203.08 L1528.46 1203.08 L1527.87 1203.08 L1527.28 1203.08 L1526.7 1203.08 L1526.11 1203.08 L1525.52 1203.08 L1524.94 1203.08 L1524.35 1203.08 L1523.77 1203.08 L1523.18 1203.08 L1522.59 1203.08 L1522.01 1203.08 L1521.42 1203.08 L1520.83 1203.08 L1520.25 1203.08 L1519.66 1203.08 L1519.07 1203.08 L1518.49 1203.08 L1517.9 1203.08 L1517.32 1203.08 L1516.73 1203.08 L1516.14 1203.08 L1515.56 1203.08 L1514.97 1203.08 L1514.38 1203.08 L1513.8 1203.08 L1513.21 1203.08 L1512.62 1203.08 L1512.04 1203.08 L1511.45 1203.08 L1510.86 1203.08 L1510.28 1203.08 L1509.69 1203.08 L1509.11 1203.08 L1508.52 1203.08 L1507.93 1203.08 L1507.35 1203.08 L1506.76 1203.08 L1506.17 1203.08 L1505.59 1203.08 L1505 1203.08 L1504.41 1203.08 L1503.83 1203.08 L1503.24 1203.08 L1502.65 1203.08 L1502.07 1203.08 L1501.48 1203.08 L1500.9 1203.08 L1500.31 1203.08 L1499.72 1203.08 L1499.14 1203.08 L1498.55 1203.08 L1497.96 1203.08 L1497.38 1203.08 L1496.79 1203.08 L1496.2 1203.08 L1495.62 1203.08 L1495.03 1203.08 L1494.45 1203.08 L1493.86 1203.08 L1493.27 1203.08 L1492.69 1203.08 L1492.1 1203.08 L1491.51 1203.08 L1490.93 1203.08 L1490.34 1203.08 L1489.75 1203.08 L1489.17 1203.08 L1488.58 1203.08 L1487.99 1203.08 L1487.41 1203.08 L1486.82 1203.08 L1486.24 1203.08 L1485.65 1203.08 L1485.06 1203.08 L1484.48 1203.08 L1483.89 1203.08 L1483.3 1203.08 L1482.72 1203.08 L1482.13 1203.08 L1481.54 1203.08 L1480.96 1203.08 L1480.37 1203.08 L1479.78 1203.08 L1479.2 1203.08 L1478.61 1203.08 L1478.03 1203.08 L1477.44 1203.08 L1476.85 1203.08 L1476.27 1203.08 L1475.68 1203.08 L1475.09 1203.08 L1474.51 1203.08 L1473.92 1203.08 L1473.33 1203.08 L1472.75 1203.08 L1472.16 1203.08 L1471.57 1203.08 L1470.99 1203.08 L1470.4 1203.08 L1469.82 1203.08 L1469.23 1203.08 L1468.64 1203.08 L1468.06 1203.08 L1467.47 1203.08 L1466.88 1203.08 L1466.3 1203.08 L1465.71 1203.08 L1465.12 1203.08 L1464.54 1203.08 L1463.95 1203.08 L1463.37 1203.08 L1462.78 1203.08 L1462.19 1203.08 L1461.61 1203.08 L1461.02 1203.08 L1460.43 1203.08 L1459.85 1203.08 L1459.26 1203.08 L1458.67 1203.08 L1458.09 1203.08 L1457.5 1203.08 L1456.91 1203.08 L1456.33 1203.08 L1455.74 1203.08 L1455.16 1203.08 L1454.57 1203.08 L1453.98 1203.08 L1453.4 1203.08 L1452.81 1203.08 L1452.22 1203.08 L1451.64 1203.08 L1451.05 1203.08 L1450.46 1203.08 L1449.88 1203.08 L1449.29 1203.08 L1448.7 1203.08 L1448.12 1203.08 L1447.53 1203.08 L1446.95 1203.08 L1446.36 1203.08 L1445.77 1203.08 L1445.19 1203.08 L1444.6 1203.08 L1444.01 1203.08 L1443.43 1203.08 L1442.84 1203.08 L1442.25 1203.08 L1441.67 1203.08 L1441.08 1203.08 L1440.5 1203.08 L1439.91 1203.08 L1439.32 1203.08 L1438.74 1203.08 L1438.15 1203.08 L1437.56 1203.08 L1436.98 1203.08 L1436.39 1203.08 L1435.8 1203.08 L1435.22 1203.08 L1434.63 1203.08 L1434.04 1203.08 L1433.46 1203.08 L1432.87 1203.08 L1432.29 1203.08 L1431.7 1203.08 L1431.11 1203.08 L1430.53 1203.08 L1429.94 1203.08 L1429.35 1203.08 L1428.77 1203.08 L1428.18 1203.08 L1427.59 1203.08 L1427.01 1203.08 L1426.42 1203.08 L1425.83 1203.08 L1425.25 1203.08 L1424.66 1203.08 L1424.08 1203.08 L1423.49 1203.08 L1422.9 1203.08 L1422.32 1203.08 L1421.73 1203.08 L1421.14 1203.08 L1420.56 1203.08 L1419.97 1203.08 L1419.38 1203.08 L1418.8 1203.08 L1418.21 1203.08 L1417.63 1203.08 L1417.04 1203.08 L1416.45 1203.08 L1415.87 1203.08 L1415.28 1203.08 L1414.69 1203.08 L1414.11 1203.08 L1413.52 1203.08 L1412.93 1203.08 L1412.35 1203.08 L1411.76 1203.08 L1411.17 1203.08 L1410.59 1203.08 L1410 1203.08 L1409.42 1203.08 L1408.83 1203.08 L1408.24 1203.08 L1407.66 1203.08 L1407.07 1203.08 L1406.48 1203.08 L1405.9 1203.08 L1405.31 1203.08 L1404.72 1203.08 L1404.14 1203.08 L1403.55 1203.08 L1402.96 1203.08 L1402.38 1203.08 L1401.79 1203.08 L1401.21 1203.08 L1400.62 1203.08 L1400.03 1203.08 L1399.45 1203.08 L1398.86 1203.08 L1398.27 1203.08 L1397.69 1203.08 L1397.1 1203.08 L1396.51 1203.08 L1395.93 1203.08 L1395.34 1203.08 L1394.75 1203.08 L1394.17 1203.08 L1393.58 1203.08 L1393 1203.08 L1392.41 1203.08 L1391.82 1203.08 L1391.24 1203.08 L1390.65 1203.08 L1390.06 1203.08 L1389.48 1203.08 L1388.89 1203.08 L1388.3 1203.08 L1387.72 1203.08 L1387.13 1203.08 L1386.55 1203.08 L1385.96 1203.08 L1385.37 1203.08 L1384.79 1203.08 L1384.2 1203.08 L1383.61 1203.08 L1383.03 1203.08 L1382.44 1203.08 L1381.85 1203.08 L1381.27 1203.08 L1380.68 1203.08 L1380.09 1203.08 L1379.51 1203.08 L1378.92 1203.08 L1378.34 1203.08 L1377.75 1203.08 L1377.16 1203.08 L1376.58 1203.08 L1375.99 1203.08 L1375.4 1203.08 L1374.82 1203.08 L1374.23 1203.08 L1373.64 1203.08 L1373.06 1203.08 L1372.47 1203.08 L1371.88 1203.08 L1371.3 1203.08 L1370.71 1203.08 L1370.13 1203.08 L1369.54 1203.08 L1368.95 1203.08 L1368.37 1203.08 L1367.78 1203.08 L1367.19 1203.08 L1366.61 1203.08 L1366.02 1203.08 L1365.43 1203.08 L1364.85 1203.08 L1364.26 1203.08 L1363.68 1203.08 L1363.09 1203.08 L1362.5 1203.08 L1361.92 1203.08 L1361.33 1203.08 L1360.74 1203.08 L1360.16 1203.08 L1359.57 1203.08 L1358.98 1203.08 L1358.4 1203.08 L1357.81 1203.08 L1357.22 1203.08 L1356.64 1203.08 L1356.05 1203.08 L1355.47 1203.08 L1354.88 1203.08 L1354.29 1203.08 L1353.71 1203.08 L1353.12 1203.08 L1352.53 1203.08 L1351.95 1203.08 L1351.36 1203.08 L1350.77 1203.08 L1350.19 1203.08 L1349.6 1203.08 L1349.01 1203.08 L1348.43 1203.08 L1347.84 1203.08 L1347.26 1203.08 L1346.67 1203.08 L1346.08 1203.08 L1345.5 1203.08 L1344.91 1203.08 L1344.32 1203.08 L1343.74 1203.08 L1343.15 1203.08 L1342.56 1203.08 L1341.98 1203.08 L1341.39 1203.08 L1340.8 1203.08 L1340.22 1203.08 L1339.63 1203.08 L1339.05 1203.08 L1338.46 1203.08 L1337.87 1203.08 L1337.29 1203.08 L1336.7 1203.08 L1336.11 1203.08 L1335.53 1203.08 L1334.94 1203.08 L1334.35 1203.08 L1333.77 1203.08 L1333.18 1203.08 L1332.6 1203.08 L1332.01 1203.08 L1331.42 1203.08 L1330.84 1203.08 L1330.25 1203.08 L1329.66 1203.08 L1329.08 1203.08 L1328.49 1203.08 L1327.9 1203.08 L1327.32 1203.08 L1326.73 1203.08 L1326.14 1203.08 L1325.56 1203.08 L1324.97 1203.08 L1324.39 1203.08 L1323.8 1203.08 L1323.21 1203.08 L1322.63 1203.08 L1322.04 1203.08 L1321.45 1203.08 L1320.87 1203.08 L1320.28 1203.08 L1319.69 1203.08 L1319.11 1203.08 L1318.52 1203.08 L1317.93 1203.08 L1317.35 1203.08 L1316.76 1203.08 L1316.18 1203.08 L1315.59 1203.08 L1315 1203.08 L1314.42 1203.08 L1313.83 1203.08 L1313.24 1203.08 L1312.66 1203.08 L1312.07 1203.08 L1311.48 1203.08 L1310.9 1203.08 L1310.31 1203.08 L1309.73 1203.08 L1309.14 1203.08 L1308.55 1203.08 L1307.97 1203.08 L1307.38 1203.08 L1306.79 1203.08 L1306.21 1203.08 L1305.62 1203.08 L1305.03 1203.08 L1304.45 1203.08 L1303.86 1203.08 L1303.27 1203.08 L1302.69 1203.08 L1302.1 1203.08 L1301.52 1203.08 L1300.93 1203.08 L1300.34 1203.08 L1299.76 1203.08 L1299.17 1203.08 L1298.58 1203.08 L1298 1203.08 L1297.41 1203.08 L1296.82 1203.08 L1296.24 1203.08 L1295.65 1203.08 L1295.06 1203.08 L1294.48 1203.08 L1293.89 1203.08 L1293.31 1203.08 L1292.72 1203.08 L1292.13 1203.08 L1291.55 1203.08 L1290.96 1203.08 L1290.37 1203.08 L1289.79 1203.08 L1289.2 1203.08 L1288.61 1203.08 L1288.03 1203.08 L1287.44 1203.08 L1286.86 1203.08 L1286.27 1203.08 L1285.68 1203.08 L1285.1 1203.08 L1284.51 1203.08 L1283.92 1203.08 L1283.34 1203.08 L1282.75 1203.08 L1282.16 1203.08 L1281.58 1203.08 L1280.99 1203.08 L1280.4 1203.08 L1279.82 1203.08 L1279.23 1203.08 L1278.65 1203.08 L1278.06 1203.08 L1277.47 1203.08 L1276.89 1203.08 L1276.3 1203.08 L1275.71 1203.08 L1275.13 1203.08 L1274.54 1203.08 L1273.95 1203.08 L1273.37 1203.08 L1272.78 1203.08 L1272.19 1203.08 L1271.61 1203.08 L1271.02 1203.08 L1270.44 1203.08 L1269.85 1203.08 L1269.26 1203.08 L1268.68 1203.08 L1268.09 1203.08 L1267.5 1203.08 L1266.92 1203.08 L1266.33 1203.08 L1265.74 1203.08 L1265.16 1203.08 L1264.57 1203.08 L1263.98 1203.08 L1263.4 1203.08 L1262.81 1203.08 L1262.23 1203.08 L1261.64 1203.08 L1261.05 1203.08 L1260.47 1203.08 L1259.88 1203.08 L1259.29 1203.08 L1258.71 1203.08 L1258.12 1203.08 L1257.53 1203.08 L1256.95 1203.08 L1256.36 1203.08 L1255.78 1203.08 L1255.19 1203.08 L1254.6 1203.08 L1254.02 1203.08 L1253.43 1203.08 L1252.84 1203.08 L1252.26 1203.08 L1251.67 1203.08 L1251.08 1203.08 L1250.5 1203.08 L1249.91 1203.08 L1249.32 1203.08 L1248.74 1203.08 L1248.15 1203.08 L1247.57 1203.08 L1246.98 1203.08 L1246.39 1203.08 L1245.81 1203.08 L1245.22 1203.08 L1244.63 1203.08 L1244.05 1203.08 L1243.46 1203.08 L1242.87 1203.08 L1242.29 1203.08 L1241.7 1203.08 L1241.11 1203.08 L1240.53 1203.08 L1239.94 1203.08 L1239.36 1203.08 L1238.77 1203.08 L1238.18 1203.08 L1237.6 1203.08 L1237.01 1203.08 L1236.42 1203.08 L1235.84 1203.08 L1235.25 1203.08 L1234.66 1203.08 L1234.08 1203.08 L1233.49 1203.08 L1232.91 1203.08 L1232.32 1203.08 L1231.73 1203.08 L1231.15 1203.08 L1230.56 1203.08 L1229.97 1203.08 L1229.39 1203.08 L1228.8 1203.08 L1228.21 1203.08 L1227.63 1203.08 L1227.04 1203.08 L1226.45 1203.08 L1225.87 1203.08 L1225.28 1203.08 L1224.7 1203.08 L1224.11 1203.08 L1223.52 1203.08 L1222.94 1203.08 L1222.35 1203.08 L1221.76 1203.08 L1221.18 1203.08 L1220.59 1203.08 L1220 1203.08 L1219.42 1203.08 L1218.83 1203.08 L1218.24 1203.08 L1217.66 1203.08 L1217.07 1203.08 L1216.49 1203.08 L1215.9 1203.08 L1215.31 1203.08 L1214.73 1203.08 L1214.14 1203.08 L1213.55 1203.08 L1212.97 1203.08 L1212.38 1203.08 L1211.79 1203.08 L1211.21 1203.08 L1210.62 1203.08 L1210.03 1203.08 L1209.45 1203.08 L1208.86 1203.08 L1208.28 1203.08 L1207.69 1203.08 L1207.1 1203.08 L1206.52 1203.08 L1205.93 1203.08 L1205.34 1203.08 L1204.76 1203.08 L1204.17 1203.08 L1203.58 1203.08 L1203 1203.08 L1202.41 1203.08 L1201.83 1203.08 L1201.24 1203.08 L1200.65 1203.08 L1200.07 1203.08 L1199.48 1203.08 L1198.89 1203.08 L1198.31 1203.08 L1197.72 1203.08 L1197.13 1203.08 L1196.55 1203.08 L1195.96 1203.08 L1195.37 1203.08 L1194.79 1203.08 L1194.2 1203.08 L1193.62 1203.08 L1193.03 1203.08 L1192.44 1203.08 L1191.86 1203.08 L1191.27 1203.08 L1190.68 1203.08 L1190.1 1203.08 L1189.51 1203.08 L1188.92 1203.08 L1188.34 1203.08 L1187.75 1203.08 L1187.16 1203.08 L1186.58 1203.08 L1185.99 1203.08 L1185.41 1203.08 L1184.82 1203.08 L1184.23 1203.08 L1183.65 1203.08 L1183.06 1203.08 L1182.47 1203.08 L1181.89 1203.08 L1181.3 1203.08 L1180.71 1203.08 L1180.13 1203.08 L1179.54 1203.08 L1178.96 1203.08 L1178.37 1203.08 L1177.78 1203.08 L1177.2 1203.08 L1176.61 1203.08 L1176.02 1203.08 L1175.44 1203.08 L1174.85 1203.08 L1174.26 1203.08 L1173.68 1203.08 L1173.09 1203.08 L1172.5 1203.08 L1171.92 1203.08 L1171.33 1203.08 L1170.75 1203.08 L1170.16 1203.08 L1169.57 1203.08 L1168.99 1203.08 L1168.4 1203.08 L1167.81 1203.08 L1167.23 1203.08 L1166.64 1203.08 L1166.05 1203.08 L1165.47 1203.08 L1164.88 1203.08 L1164.29 1203.08 L1163.71 1203.08 L1163.12 1203.08 L1162.54 1203.08 L1161.95 1203.08 L1161.36 1203.08 L1160.78 1203.08 L1160.19 1203.08 L1159.6 1203.08 L1159.02 1203.08 L1158.43 1203.08 L1157.84 1203.08 L1157.26 1203.08 L1156.67 1203.08 L1156.09 1203.08 L1155.5 1203.08 L1154.91 1203.08 L1154.33 1203.08 L1153.74 1203.08 L1153.15 1203.08 L1152.57 1203.08 L1151.98 1203.08 L1151.39 1203.08 L1150.81 1203.08 L1150.22 1203.08 L1149.63 1203.08 L1149.05 1203.08 L1148.46 1203.08 L1147.88 1203.08 L1147.29 1203.08 L1146.7 1203.08 L1146.12 1203.08 L1145.53 1203.08 L1144.94 1203.08 L1144.36 1203.08 L1143.77 1203.08 L1143.18 1203.08 L1142.6 1203.08 L1142.01 1203.08 L1141.42 1203.08 L1140.84 1203.08 L1140.25 1203.08 L1139.67 1203.08 L1139.08 1203.08 L1138.49 1203.08 L1137.91 1203.08 L1137.32 1203.08 L1136.73 1203.08 L1136.15 1203.08 L1135.56 1203.08 L1134.97 1203.08 L1134.39 1203.08 L1133.8 1203.08 L1133.21 1203.08 L1132.63 1203.08 L1132.04 1203.08 L1131.46 1203.08 L1130.87 1203.08 L1130.28 1203.08 L1129.7 1203.08 L1129.11 1203.08 L1128.52 1203.08 L1127.94 1203.08 L1127.35 1203.08 L1126.76 1203.08 L1126.18 1203.08 L1125.59 1203.08 L1125.01 1203.08 L1124.42 1203.08 L1123.83 1203.08 L1123.25 1203.08 L1122.66 1203.08 L1122.07 1203.08 L1121.49 1203.08 L1120.9 1203.08 L1120.31 1203.08 L1119.73 1203.08 L1119.14 1203.08 L1118.55 1203.08 L1117.97 1203.08 L1117.38 1203.08 L1116.8 1203.08 L1116.21 1203.08 L1115.62 1203.08 L1115.04 1203.08 L1114.45 1203.08 L1113.86 1203.08 L1113.28 1203.08 L1112.69 1203.08 L1112.1 1203.08 L1111.52 1203.08 L1110.93 1203.08 L1110.34 1203.08 L1109.76 1203.08 L1109.17 1203.08 L1108.59 1203.08 L1108 1203.08 L1107.41 1203.08 L1106.83 1203.08 L1106.24 1203.08 L1105.65 1203.08 L1105.07 1203.08 L1104.48 1203.08 L1103.89 1203.08 L1103.31 1203.08 L1102.72 1203.08 L1102.14 1203.08 L1101.55 1203.08 L1100.96 1203.08 L1100.38 1203.08 L1099.79 1203.08 L1099.2 1203.08 L1098.62 1203.08 L1098.03 1203.08 L1097.44 1203.08 L1096.86 1203.08 L1096.27 1203.08 L1095.68 1203.08 L1095.1 1203.08 L1094.51 1203.08 L1093.93 1203.08 L1093.34 1203.08 L1092.75 1203.08 L1092.17 1203.08 L1091.58 1203.08 L1090.99 1203.08 L1090.41 1203.08 L1089.82 1203.08 L1089.23 1203.08 L1088.65 1203.08 L1088.06 1203.08 L1087.47 1203.08 L1086.89 1203.08 L1086.3 1203.08 L1085.72 1203.08 L1085.13 1203.08 L1084.54 1203.08 L1083.96 1203.08 L1083.37 1203.08 L1082.78 1203.08 L1082.2 1203.08 L1081.61 1203.08 L1081.02 1203.08 L1080.44 1203.08 L1079.85 1203.08 L1079.26 1203.08 L1078.68 1203.08 L1078.09 1203.08 L1077.51 1203.08 L1076.92 1203.08 L1076.33 1203.08 L1075.75 1203.08 L1075.16 1203.08 L1074.57 1203.08 L1073.99 1203.08 L1073.4 1203.08 L1072.81 1203.08 L1072.23 1203.08 L1071.64 1203.08 L1071.06 1203.08 L1070.47 1203.08 L1069.88 1203.08 L1069.3 1203.08 L1068.71 1203.08 L1068.12 1203.08 L1067.54 1203.08 L1066.95 1203.08 L1066.36 1203.08 L1065.78 1203.08 L1065.19 1203.08 L1064.6 1203.08 L1064.02 1203.08 L1063.43 1203.08 L1062.85 1203.08 L1062.26 1203.08 L1061.67 1203.08 L1061.09 1203.08 L1060.5 1203.08 L1059.91 1203.08 L1059.33 1203.08 L1058.74 1203.08 L1058.15 1203.08 L1057.57 1203.08 L1056.98 1203.08 L1056.39 1203.08 L1055.81 1203.08 L1055.22 1203.08 L1054.64 1203.08 L1054.05 1203.08 L1053.46 1203.08 L1052.88 1203.08 L1052.29 1203.08 L1051.7 1203.08 L1051.12 1203.08 L1050.53 1203.08 L1049.94 1203.08 L1049.36 1203.08 L1048.77 1203.08 L1048.19 1203.08 L1047.6 1203.08 L1047.01 1203.08 L1046.43 1203.08 L1045.84 1203.08 L1045.25 1203.08 L1044.67 1203.08 L1044.08 1203.08 L1043.49 1203.08 L1042.91 1203.08 L1042.32 1203.08 L1041.73 1203.08 L1041.15 1203.08 L1040.56 1203.08 L1039.98 1203.08 L1039.39 1203.08 L1038.8 1203.08 L1038.22 1203.08 L1037.63 1203.08 L1037.04 1203.08 L1036.46 1203.08 L1035.87 1203.08 L1035.28 1203.08 L1034.7 1203.08 L1034.11 1203.08 L1033.52 1203.08 L1032.94 1203.08 L1032.35 1203.08 L1031.77 1203.08 L1031.18 1203.08 L1030.59 1203.08 L1030.01 1203.08 L1029.42 1203.08 L1028.83 1203.08 L1028.25 1203.08 L1027.66 1203.08 L1027.07 1203.08 L1026.49 1203.08 L1025.9 1203.08 L1025.32 1203.08 L1024.73 1203.08 L1024.14 1203.08 L1023.56 1203.08 L1022.97 1203.08 L1022.38 1203.08 L1021.8 1203.08 L1021.21 1203.08 L1020.62 1203.08 L1020.04 1203.08 L1019.45 1203.08 L1018.86 1203.08 L1018.28 1203.08 L1017.69 1203.08 L1017.11 1203.08 L1016.52 1203.08 L1015.93 1203.08 L1015.35 1203.08 L1014.76 1203.08 L1014.17 1203.08 L1013.59 1203.08 L1013 1203.08 L1012.41 1203.08 L1011.83 1203.08 L1011.24 1203.08 L1010.65 1203.08 L1010.07 1203.08 L1009.48 1203.08 L1008.9 1203.08 L1008.31 1203.08 L1007.72 1203.08 L1007.14 1203.08 L1006.55 1203.08 L1005.96 1203.08 L1005.38 1203.08 L1004.79 1203.08 L1004.2 1203.08 L1003.62 1203.08 L1003.03 1203.08 L1002.44 1203.08 L1001.86 1203.08 L1001.27 1203.08 L1000.69 1203.08 L1000.1 1203.08 L999.513 1203.08 L998.926 1203.08 L998.34 1203.08 L997.754 1203.08 L997.167 1203.08 L996.581 1203.08 L995.994 1203.08 L995.408 1203.08 L994.822 1203.08 L994.235 1203.08 L993.649 1203.08 L993.062 1203.08 L992.476 1203.08 L991.889 1203.08 L991.303 1203.08 L990.717 1203.08 L990.13 1203.08 L989.544 1203.08 L988.957 1203.08 L988.371 1203.08 L987.785 1203.08 L987.198 1203.08 L986.612 1203.08 L986.025 1203.08  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1203.14 986.612,1203.14 987.198,1203.14 987.785,1203.14 988.371,1203.14 988.957,1203.14 989.544,1203.14 990.13,1203.14 990.717,1203.14 991.303,1203.14 991.889,1203.14 992.476,1203.14 993.062,1203.14 993.649,1203.14 994.235,1203.14 994.822,1203.14 995.408,1203.14 995.994,1203.14 996.581,1203.14 997.167,1203.14 997.754,1203.14 998.34,1203.14 998.926,1203.14 999.513,1203.14 1000.1,1203.14 1000.69,1203.14 1001.27,1203.14 1001.86,1203.14 1002.44,1203.14 1003.03,1203.14 1003.62,1203.14 1004.2,1203.14 1004.79,1203.14 1005.38,1203.14 1005.96,1203.14 1006.55,1203.14 1007.14,1203.14 1007.72,1203.14 1008.31,1203.14 1008.9,1203.14 1009.48,1203.14 1010.07,1203.14 1010.65,1203.14 1011.24,1203.14 1011.83,1203.14 1012.41,1203.14 1013,1203.14 1013.59,1203.14 1014.17,1203.14 1014.76,1203.14 1015.35,1203.14 1015.93,1203.14 1016.52,1203.14 1017.11,1203.14 1017.69,1203.14 1018.28,1203.14 1018.86,1203.14 1019.45,1203.14 1020.04,1203.14 1020.62,1203.14 1021.21,1203.14 1021.8,1203.14 1022.38,1203.14 1022.97,1203.14 1023.56,1203.14 1024.14,1203.14 1024.73,1203.14 1025.32,1203.14 1025.9,1203.14 1026.49,1203.14 1027.07,1203.14 1027.66,1203.14 1028.25,1203.14 1028.83,1203.14 1029.42,1203.14 1030.01,1203.14 1030.59,1203.14 1031.18,1203.14 1031.77,1203.14 1032.35,1203.14 1032.94,1203.14 1033.52,1203.14 1034.11,1203.14 1034.7,1203.14 1035.28,1203.14 1035.87,1203.14 1036.46,1203.14 1037.04,1203.14 1037.63,1203.14 1038.22,1203.14 1038.8,1203.14 1039.39,1203.14 1039.98,1203.14 1040.56,1203.14 1041.15,1203.14 1041.73,1203.14 1042.32,1203.14 1042.91,1203.14 1043.49,1203.14 1044.08,1203.14 1044.67,1203.14 1045.25,1203.14 1045.84,1203.14 1046.43,1203.14 1047.01,1203.14 1047.6,1203.14 1048.19,1203.14 1048.77,1203.14 1049.36,1203.14 1049.94,1203.14 1050.53,1203.14 1051.12,1203.14 1051.7,1203.14 1052.29,1203.14 1052.88,1203.14 1053.46,1203.14 1054.05,1203.14 1054.64,1203.14 1055.22,1203.14 1055.81,1203.14 1056.39,1203.14 1056.98,1203.14 1057.57,1203.14 1058.15,1203.14 1058.74,1203.14 1059.33,1203.14 1059.91,1203.14 1060.5,1203.14 1061.09,1203.14 1061.67,1203.14 1062.26,1203.14 1062.85,1203.14 1063.43,1203.14 1064.02,1203.14 1064.6,1203.14 1065.19,1203.14 1065.78,1203.14 1066.36,1203.14 1066.95,1203.14 1067.54,1203.14 1068.12,1203.14 1068.71,1203.14 1069.3,1203.14 1069.88,1203.14 1070.47,1203.14 1071.06,1203.14 1071.64,1203.14 1072.23,1203.14 1072.81,1203.14 1073.4,1203.14 1073.99,1203.14 1074.57,1203.14 1075.16,1203.14 1075.75,1203.14 1076.33,1203.14 1076.92,1203.14 1077.51,1203.14 1078.09,1203.14 1078.68,1203.14 1079.26,1203.14 1079.85,1203.14 1080.44,1203.14 1081.02,1203.14 1081.61,1203.14 1082.2,1203.14 1082.78,1203.14 1083.37,1203.14 1083.96,1203.14 1084.54,1203.14 1085.13,1203.14 1085.72,1203.14 1086.3,1203.14 1086.89,1203.14 1087.47,1203.14 1088.06,1203.14 1088.65,1203.14 1089.23,1203.14 1089.82,1203.14 1090.41,1203.14 1090.99,1203.14 1091.58,1203.14 1092.17,1203.14 1092.75,1203.14 1093.34,1203.14 1093.93,1203.14 1094.51,1203.14 1095.1,1203.14 1095.68,1203.14 1096.27,1203.14 1096.86,1203.14 1097.44,1203.14 1098.03,1203.14 1098.62,1203.14 1099.2,1203.14 1099.79,1203.14 1100.38,1203.14 1100.96,1203.14 1101.55,1203.14 1102.14,1203.14 1102.72,1203.14 1103.31,1203.14 1103.89,1203.14 1104.48,1203.14 1105.07,1203.14 1105.65,1203.14 1106.24,1203.14 1106.83,1203.14 1107.41,1203.14 1108,1203.14 1108.59,1203.14 1109.17,1203.14 1109.76,1203.14 1110.34,1203.14 1110.93,1203.14 1111.52,1203.14 1112.1,1203.14 1112.69,1203.14 1113.28,1203.14 1113.86,1203.14 1114.45,1203.14 1115.04,1203.14 1115.62,1203.14 1116.21,1203.14 1116.8,1203.14 1117.38,1203.14 1117.97,1203.14 1118.55,1203.14 1119.14,1203.14 1119.73,1203.14 1120.31,1203.14 1120.9,1203.14 1121.49,1203.14 1122.07,1203.14 1122.66,1203.14 1123.25,1203.14 1123.83,1203.14 1124.42,1203.14 1125.01,1203.14 1125.59,1203.14 1126.18,1203.14 1126.76,1203.14 1127.35,1203.14 1127.94,1203.14 1128.52,1203.14 1129.11,1203.14 1129.7,1203.14 1130.28,1203.14 1130.87,1203.14 1131.46,1203.14 1132.04,1203.14 1132.63,1203.14 1133.21,1203.14 1133.8,1203.14 1134.39,1203.14 1134.97,1203.14 1135.56,1203.14 1136.15,1203.14 1136.73,1203.14 1137.32,1203.14 1137.91,1203.14 1138.49,1203.14 1139.08,1203.14 1139.67,1203.14 1140.25,1203.14 1140.84,1203.14 1141.42,1203.14 1142.01,1203.14 1142.6,1203.14 1143.18,1203.14 1143.77,1203.14 1144.36,1203.14 1144.94,1203.14 1145.53,1203.14 1146.12,1203.14 1146.7,1203.14 1147.29,1203.14 1147.88,1203.14 1148.46,1203.14 1149.05,1203.14 1149.63,1203.14 1150.22,1203.14 1150.81,1203.14 1151.39,1203.14 1151.98,1203.14 1152.57,1203.14 1153.15,1203.14 1153.74,1203.14 1154.33,1203.14 1154.91,1203.14 1155.5,1203.14 1156.09,1203.14 1156.67,1203.14 1157.26,1203.14 1157.84,1203.14 1158.43,1203.14 1159.02,1203.14 1159.6,1203.14 1160.19,1203.14 1160.78,1203.14 1161.36,1203.14 1161.95,1203.14 1162.54,1203.14 1163.12,1203.14 1163.71,1203.14 1164.29,1203.14 1164.88,1203.14 1165.47,1203.14 1166.05,1203.14 1166.64,1203.14 1167.23,1203.14 1167.81,1203.14 1168.4,1203.14 1168.99,1203.14 1169.57,1203.14 1170.16,1203.14 1170.75,1203.14 1171.33,1203.14 1171.92,1203.14 1172.5,1203.14 1173.09,1203.14 1173.68,1203.14 1174.26,1203.14 1174.85,1203.14 1175.44,1203.14 1176.02,1203.14 1176.61,1203.14 1177.2,1203.14 1177.78,1203.14 1178.37,1203.14 1178.96,1203.14 1179.54,1203.14 1180.13,1203.14 1180.71,1203.14 1181.3,1203.14 1181.89,1203.14 1182.47,1203.14 1183.06,1203.14 1183.65,1203.14 1184.23,1203.14 1184.82,1203.14 1185.41,1203.14 1185.99,1203.14 1186.58,1203.14 1187.16,1203.14 1187.75,1203.14 1188.34,1203.14 1188.92,1203.14 1189.51,1203.14 1190.1,1203.14 1190.68,1203.14 1191.27,1203.14 1191.86,1203.14 1192.44,1203.14 1193.03,1203.14 1193.62,1203.14 1194.2,1203.14 1194.79,1203.14 1195.37,1203.14 1195.96,1203.14 1196.55,1203.14 1197.13,1203.14 1197.72,1203.14 1198.31,1203.14 1198.89,1203.14 1199.48,1203.14 1200.07,1203.14 1200.65,1203.14 1201.24,1203.14 1201.83,1203.14 1202.41,1203.14 1203,1203.14 1203.58,1203.14 1204.17,1203.14 1204.76,1203.14 1205.34,1203.14 1205.93,1203.14 1206.52,1203.14 1207.1,1203.14 1207.69,1203.14 1208.28,1203.14 1208.86,1203.14 1209.45,1203.14 1210.03,1203.14 1210.62,1203.14 1211.21,1203.14 1211.79,1203.14 1212.38,1203.14 1212.97,1203.14 1213.55,1203.14 1214.14,1203.14 1214.73,1203.14 1215.31,1203.14 1215.9,1203.14 1216.49,1203.14 1217.07,1203.14 1217.66,1203.14 1218.24,1203.14 1218.83,1203.14 1219.42,1203.14 1220,1203.14 1220.59,1203.14 1221.18,1203.14 1221.76,1203.14 1222.35,1203.14 1222.94,1203.14 1223.52,1203.14 1224.11,1203.14 1224.7,1203.14 1225.28,1203.14 1225.87,1203.14 1226.45,1203.14 1227.04,1203.14 1227.63,1203.14 1228.21,1203.14 1228.8,1203.14 1229.39,1203.14 1229.97,1203.14 1230.56,1203.14 1231.15,1203.14 1231.73,1203.14 1232.32,1203.14 1232.91,1203.14 1233.49,1203.14 1234.08,1203.14 1234.66,1203.14 1235.25,1203.14 1235.84,1203.14 1236.42,1203.14 1237.01,1203.14 1237.6,1203.14 1238.18,1203.14 1238.77,1203.14 1239.36,1203.14 1239.94,1203.14 1240.53,1203.14 1241.11,1203.14 1241.7,1203.14 1242.29,1203.14 1242.87,1203.14 1243.46,1203.14 1244.05,1203.14 1244.63,1203.14 1245.22,1203.14 1245.81,1203.14 1246.39,1203.14 1246.98,1203.14 1247.57,1203.14 1248.15,1203.14 1248.74,1203.14 1249.32,1203.14 1249.91,1203.14 1250.5,1203.14 1251.08,1203.14 1251.67,1203.14 1252.26,1203.14 1252.84,1203.14 1253.43,1203.14 1254.02,1203.14 1254.6,1203.14 1255.19,1203.14 1255.78,1203.14 1256.36,1203.14 1256.95,1203.14 1257.53,1203.14 1258.12,1203.14 1258.71,1203.14 1259.29,1203.14 1259.88,1203.14 1260.47,1203.14 1261.05,1203.14 1261.64,1203.14 1262.23,1203.14 1262.81,1203.14 1263.4,1203.14 1263.98,1203.14 1264.57,1203.14 1265.16,1203.14 1265.74,1203.14 1266.33,1203.14 1266.92,1203.14 1267.5,1203.14 1268.09,1203.14 1268.68,1203.14 1269.26,1203.14 1269.85,1203.14 1270.44,1203.14 1271.02,1203.14 1271.61,1203.14 1272.19,1203.14 1272.78,1203.14 1273.37,1203.14 1273.95,1203.14 1274.54,1203.14 1275.13,1203.14 1275.71,1203.14 1276.3,1203.14 1276.89,1203.14 1277.47,1203.14 1278.06,1203.14 1278.65,1203.14 1279.23,1203.14 1279.82,1203.14 1280.4,1203.14 1280.99,1203.14 1281.58,1203.14 1282.16,1203.14 1282.75,1203.14 1283.34,1203.14 1283.92,1203.14 1284.51,1203.14 1285.1,1203.14 1285.68,1203.14 1286.27,1203.14 1286.86,1203.14 1287.44,1203.14 1288.03,1203.14 1288.61,1203.14 1289.2,1203.14 1289.79,1203.14 1290.37,1203.14 1290.96,1203.14 1291.55,1203.14 1292.13,1203.14 1292.72,1203.14 1293.31,1203.14 1293.89,1203.14 1294.48,1203.14 1295.06,1203.14 1295.65,1203.14 1296.24,1203.14 1296.82,1203.14 1297.41,1203.14 1298,1203.14 1298.58,1203.14 1299.17,1203.14 1299.76,1203.14 1300.34,1203.14 1300.93,1203.14 1301.52,1203.14 1302.1,1203.14 1302.69,1203.14 1303.27,1203.14 1303.86,1203.14 1304.45,1203.14 1305.03,1203.14 1305.62,1203.14 1306.21,1203.14 1306.79,1203.14 1307.38,1203.14 1307.97,1203.14 1308.55,1203.14 1309.14,1203.14 1309.73,1203.14 1310.31,1203.14 1310.9,1203.14 1311.48,1203.14 1312.07,1203.14 1312.66,1203.14 1313.24,1203.14 1313.83,1203.14 1314.42,1203.14 1315,1203.14 1315.59,1203.14 1316.18,1203.14 1316.76,1203.14 1317.35,1203.14 1317.93,1203.14 1318.52,1203.14 1319.11,1203.14 1319.69,1203.14 1320.28,1203.14 1320.87,1203.14 1321.45,1203.14 1322.04,1203.14 1322.63,1203.14 1323.21,1203.14 1323.8,1203.14 1324.39,1203.14 1324.97,1203.14 1325.56,1203.14 1326.14,1203.14 1326.73,1203.14 1327.32,1203.14 1327.9,1203.14 1328.49,1203.14 1329.08,1203.14 1329.66,1203.14 1330.25,1203.14 1330.84,1203.14 1331.42,1203.14 1332.01,1203.14 1332.6,1203.14 1333.18,1203.14 1333.77,1203.14 1334.35,1203.14 1334.94,1203.14 1335.53,1203.14 1336.11,1203.14 1336.7,1203.14 1337.29,1203.14 1337.87,1203.14 1338.46,1203.14 1339.05,1203.14 1339.63,1203.14 1340.22,1203.14 1340.8,1203.14 1341.39,1203.14 1341.98,1203.14 1342.56,1203.14 1343.15,1203.14 1343.74,1203.14 1344.32,1203.14 1344.91,1203.14 1345.5,1203.14 1346.08,1203.14 1346.67,1203.14 1347.26,1203.14 1347.84,1203.14 1348.43,1203.14 1349.01,1203.14 1349.6,1203.14 1350.19,1203.14 1350.77,1203.14 1351.36,1203.14 1351.95,1203.14 1352.53,1203.14 1353.12,1203.14 1353.71,1203.14 1354.29,1203.14 1354.88,1203.14 1355.47,1203.14 1356.05,1203.14 1356.64,1203.14 1357.22,1203.14 1357.81,1203.14 1358.4,1203.14 1358.98,1203.14 1359.57,1203.14 1360.16,1203.14 1360.74,1203.14 1361.33,1203.14 1361.92,1203.14 1362.5,1203.14 1363.09,1203.14 1363.68,1203.14 1364.26,1203.14 1364.85,1203.14 1365.43,1203.14 1366.02,1203.14 1366.61,1203.14 1367.19,1203.14 1367.78,1203.14 1368.37,1203.14 1368.95,1203.14 1369.54,1203.14 1370.13,1203.14 1370.71,1203.14 1371.3,1203.14 1371.88,1203.14 1372.47,1203.14 1373.06,1203.14 1373.64,1203.14 1374.23,1203.14 1374.82,1203.14 1375.4,1203.14 1375.99,1203.14 1376.58,1203.14 1377.16,1203.14 1377.75,1203.14 1378.34,1203.14 1378.92,1203.14 1379.51,1203.14 1380.09,1203.14 1380.68,1203.14 1381.27,1203.14 1381.85,1203.14 1382.44,1203.14 1383.03,1203.14 1383.61,1203.14 1384.2,1203.14 1384.79,1203.14 1385.37,1203.14 1385.96,1203.14 1386.55,1203.14 1387.13,1203.14 1387.72,1203.14 1388.3,1203.14 1388.89,1203.14 1389.48,1203.14 1390.06,1203.14 1390.65,1203.14 1391.24,1203.14 1391.82,1203.14 1392.41,1203.14 1393,1203.14 1393.58,1203.14 1394.17,1203.14 1394.75,1203.14 1395.34,1203.14 1395.93,1203.14 1396.51,1203.14 1397.1,1203.14 1397.69,1203.14 1398.27,1203.14 1398.86,1203.14 1399.45,1203.14 1400.03,1203.14 1400.62,1203.14 1401.21,1203.14 1401.79,1203.14 1402.38,1203.14 1402.96,1203.14 1403.55,1203.14 1404.14,1203.14 1404.72,1203.14 1405.31,1203.14 1405.9,1203.14 1406.48,1203.14 1407.07,1203.14 1407.66,1203.14 1408.24,1203.14 1408.83,1203.14 1409.42,1203.14 1410,1203.14 1410.59,1203.14 1411.17,1203.14 1411.76,1203.14 1412.35,1203.14 1412.93,1203.14 1413.52,1203.14 1414.11,1203.14 1414.69,1203.14 1415.28,1203.14 1415.87,1203.14 1416.45,1203.14 1417.04,1203.14 1417.63,1203.14 1418.21,1203.14 1418.8,1203.14 1419.38,1203.14 1419.97,1203.14 1420.56,1203.14 1421.14,1203.14 1421.73,1203.14 1422.32,1203.14 1422.9,1203.14 1423.49,1203.14 1424.08,1203.14 1424.66,1203.14 1425.25,1203.14 1425.83,1203.14 1426.42,1203.14 1427.01,1203.14 1427.59,1203.14 1428.18,1203.14 1428.77,1203.14 1429.35,1203.14 1429.94,1203.14 1430.53,1203.14 1431.11,1203.14 1431.7,1203.14 1432.29,1203.14 1432.87,1203.14 1433.46,1203.14 1434.04,1203.14 1434.63,1203.14 1435.22,1203.14 1435.8,1203.14 1436.39,1203.14 1436.98,1203.14 1437.56,1203.14 1438.15,1203.14 1438.74,1203.14 1439.32,1203.14 1439.91,1203.14 1440.5,1203.14 1441.08,1203.14 1441.67,1203.14 1442.25,1203.14 1442.84,1203.14 1443.43,1203.14 1444.01,1203.14 1444.6,1203.14 1445.19,1203.14 1445.77,1203.14 1446.36,1203.14 1446.95,1203.14 1447.53,1203.14 1448.12,1203.14 1448.7,1203.14 1449.29,1203.14 1449.88,1203.14 1450.46,1203.14 1451.05,1203.14 1451.64,1203.14 1452.22,1203.14 1452.81,1203.14 1453.4,1203.14 1453.98,1203.14 1454.57,1203.14 1455.16,1203.14 1455.74,1203.14 1456.33,1203.14 1456.91,1203.14 1457.5,1203.14 1458.09,1203.14 1458.67,1203.14 1459.26,1203.14 1459.85,1203.14 1460.43,1203.14 1461.02,1203.14 1461.61,1203.14 1462.19,1203.14 1462.78,1203.14 1463.37,1203.14 1463.95,1203.14 1464.54,1203.14 1465.12,1203.14 1465.71,1203.14 1466.3,1203.14 1466.88,1203.14 1467.47,1203.14 1468.06,1203.14 1468.64,1203.14 1469.23,1203.14 1469.82,1203.14 1470.4,1203.14 1470.99,1203.14 1471.57,1203.14 1472.16,1203.14 1472.75,1203.14 1473.33,1203.14 1473.92,1203.14 1474.51,1203.14 1475.09,1203.14 1475.68,1203.14 1476.27,1203.14 1476.85,1203.14 1477.44,1203.14 1478.03,1203.14 1478.61,1203.14 1479.2,1203.14 1479.78,1203.14 1480.37,1203.14 1480.96,1203.14 1481.54,1203.14 1482.13,1203.14 1482.72,1203.14 1483.3,1203.14 1483.89,1203.14 1484.48,1203.14 1485.06,1203.14 1485.65,1203.14 1486.24,1203.14 1486.82,1203.14 1487.41,1203.14 1487.99,1203.14 1488.58,1203.14 1489.17,1203.14 1489.75,1203.14 1490.34,1203.14 1490.93,1203.14 1491.51,1203.14 1492.1,1203.14 1492.69,1203.14 1493.27,1203.14 1493.86,1203.14 1494.45,1203.14 1495.03,1203.14 1495.62,1203.14 1496.2,1203.14 1496.79,1203.14 1497.38,1203.14 1497.96,1203.14 1498.55,1203.14 1499.14,1203.14 1499.72,1203.14 1500.31,1203.14 1500.9,1203.14 1501.48,1203.14 1502.07,1203.14 1502.65,1203.14 1503.24,1203.14 1503.83,1203.14 1504.41,1203.14 1505,1203.14 1505.59,1203.14 1506.17,1203.14 1506.76,1203.14 1507.35,1203.14 1507.93,1203.14 1508.52,1203.14 1509.11,1203.14 1509.69,1203.14 1510.28,1203.14 1510.86,1203.14 1511.45,1203.14 1512.04,1203.14 1512.62,1203.14 1513.21,1203.14 1513.8,1203.14 1514.38,1203.14 1514.97,1203.14 1515.56,1203.14 1516.14,1203.14 1516.73,1203.14 1517.32,1203.14 1517.9,1203.14 1518.49,1203.14 1519.07,1203.14 1519.66,1203.14 1520.25,1203.14 1520.83,1203.14 1521.42,1203.14 1522.01,1203.14 1522.59,1203.14 1523.18,1203.14 1523.77,1203.14 1524.35,1203.14 1524.94,1203.14 1525.52,1203.14 1526.11,1203.14 1526.7,1203.14 1527.28,1203.14 1527.87,1203.14 1528.46,1203.14 1529.04,1203.14 1529.63,1203.14 1530.22,1203.14 1530.8,1203.14 1531.39,1203.14 1531.98,1203.14 1532.56,1203.14 1533.15,1203.14 1533.73,1203.14 1534.32,1203.14 1534.91,1203.14 1535.49,1203.14 1536.08,1203.14 1536.67,1203.14 1537.25,1203.14 1537.84,1203.14 1538.43,1203.14 1539.01,1203.14 1539.6,1203.14 1540.19,1203.14 1540.77,1203.14 1541.36,1203.14 1541.94,1203.14 1542.53,1203.14 1543.12,1203.14 1543.7,1203.14 1544.29,1203.14 1544.88,1203.14 1545.46,1203.14 1546.05,1203.14 1546.64,1203.14 1547.22,1203.14 1547.81,1203.14 1548.4,1203.14 1548.98,1203.14 1549.57,1203.14 1550.15,1203.14 1550.74,1203.14 1551.33,1203.14 1551.91,1203.14 1552.5,1203.14 1553.09,1203.14 1553.67,1203.14 1554.26,1203.14 1554.85,1203.14 1555.43,1203.14 1556.02,1203.14 1556.6,1203.14 1557.19,1203.14 1557.78,1203.14 1558.36,1203.14 1558.95,1203.14 1559.54,1203.14 1560.12,1203.14 1560.71,1203.14 1561.3,1203.14 1561.88,1203.14 1562.47,1203.14 1563.06,1203.14 1563.64,1203.14 1564.23,1203.14 1564.81,1203.14 1565.4,1203.14 1565.99,1203.14 1566.57,1203.14 1567.16,1203.14 1567.75,1203.14 1568.33,1203.14 1568.92,1203.14 1569.51,1203.14 1570.09,1203.14 1570.68,1203.14 1571.27,1203.14 1571.85,1203.14 1572.44,1203.14 1573.02,1203.14 1573.61,1203.14 1574.2,1203.14 1574.78,1203.14 1575.37,1203.14 1575.96,1203.14 1576.54,1203.14 1577.13,1203.14 1577.72,1203.14 1578.3,1203.14 1578.89,1203.14 1579.47,1203.14 1580.06,1203.14 1580.65,1203.14 1581.23,1203.14 1581.82,1203.14 1582.41,1203.14 1582.99,1203.14 1583.58,1203.14 1584.17,1203.14 1584.75,1203.14 1585.34,1203.14 1585.93,1203.14 1586.51,1203.14 1587.1,1203.14 1587.68,1203.14 1588.27,1203.14 1588.86,1203.14 1589.44,1203.14 1590.03,1203.14 1590.62,1203.14 1591.2,1203.14 1591.79,1203.14 1592.38,1203.14 1592.96,1203.14 1593.55,1203.14 1594.14,1203.14 1594.72,1203.14 1595.31,1203.14 1595.89,1203.14 1596.48,1203.14 1597.07,1203.14 1597.65,1203.14 1598.24,1203.14 1598.83,1203.14 1599.41,1203.14 1600,1203.14 1600.59,1203.14 1601.17,1203.14 1601.76,1203.14 1602.34,1203.14 1602.93,1203.14 1603.52,1203.14 1604.1,1203.14 1604.69,1203.14 1605.28,1203.14 1605.86,1203.14 1606.45,1203.14 1607.04,1203.14 1607.62,1203.14 1608.21,1203.14 1608.8,1203.14 1609.38,1203.14 1609.97,1203.14 1610.55,1203.14 1611.14,1203.14 1611.73,1203.14 1612.31,1203.14 1612.9,1203.14 1613.49,1203.14 1614.07,1203.14 1614.66,1203.14 1615.25,1203.14 1615.83,1203.14 1616.42,1203.14 1617.01,1203.14 1617.59,1203.14 1618.18,1203.14 1618.76,1203.14 1619.35,1203.14 1619.94,1203.14 1620.52,1203.14 1621.11,1203.14 1621.7,1203.14 1622.28,1203.14 1622.87,1203.14 1623.46,1203.14 1624.04,1203.14 1624.63,1203.14 1625.22,1203.14 1625.8,1203.14 1626.39,1203.14 1626.97,1203.14 1627.56,1203.14 1628.15,1203.14 1628.73,1203.14 1629.32,1203.14 1629.91,1203.14 1630.49,1203.14 1631.08,1203.14 1631.67,1203.14 1632.25,1203.14 1632.84,1203.14 1633.42,1203.14 1634.01,1203.14 1634.6,1203.14 1635.18,1203.14 1635.77,1203.14 1636.36,1203.14 1636.94,1203.14 1637.53,1203.14 1638.12,1203.14 1638.7,1203.14 1639.29,1203.14 1639.88,1203.14 1640.46,1203.14 1641.05,1203.14 1641.63,1203.14 1642.22,1203.14 1642.81,1203.14 1643.39,1203.14 1643.98,1203.14 1644.57,1203.14 1645.15,1203.14 1645.74,1203.14 1646.33,1203.14 1646.91,1203.14 1647.5,1203.14 1648.09,1203.14 1648.67,1203.14 1649.26,1203.14 1649.84,1203.14 1650.43,1203.14 1651.02,1203.14 1651.6,1203.14 1652.19,1203.14 1652.78,1203.14 1653.36,1203.14 1653.95,1203.14 1654.54,1203.14 1655.12,1203.14 1655.71,1203.14 1656.29,1203.14 1656.88,1203.14 1657.47,1203.14 1658.05,1203.14 1658.64,1203.14 1659.23,1203.14 1659.81,1203.14 1660.4,1203.14 1660.99,1203.14 1661.57,1203.14 1662.16,1203.14 1662.75,1203.14 1663.33,1203.14 1663.92,1203.14 1664.5,1203.14 1665.09,1203.14 1665.68,1203.14 1666.26,1203.14 1666.85,1203.14 1667.44,1203.14 1668.02,1203.14 1668.61,1203.14 1669.2,1203.14 1669.78,1203.14 1670.37,1203.14 1670.96,1203.14 1671.54,1203.14 1672.13,1203.14 1672.71,1203.14 1673.3,1203.14 1673.89,1203.14 1674.47,1203.14 1675.06,1203.14 1675.65,1203.14 1676.23,1203.14 1676.82,1203.14 1677.41,1203.14 1677.99,1203.14 1678.58,1203.14 1679.17,1203.14 1679.75,1203.14 1680.34,1203.14 1680.92,1203.14 1681.51,1203.14 1682.1,1203.14 1682.68,1203.14 1683.27,1203.14 1683.86,1203.14 1684.44,1203.14 1685.03,1203.14 1685.62,1203.14 1686.2,1203.14 1686.79,1203.14 1687.37,1203.14 1687.96,1203.14 1688.55,1203.14 1689.13,1203.14 1689.72,1203.14 1690.31,1203.14 1690.89,1203.14 1691.48,1203.14 1692.07,1203.14 1692.65,1203.14 1693.24,1203.14 1693.83,1203.14 1694.41,1203.14 1695,1203.14 1695.58,1203.14 1696.17,1203.14 1696.76,1203.14 1697.34,1203.14 1697.93,1203.14 1698.52,1203.14 1699.1,1203.14 1699.69,1203.14 1700.28,1203.14 1700.86,1203.14 1701.45,1203.14 1702.04,1203.14 1702.62,1203.14 1703.21,1203.14 1703.79,1203.14 1704.38,1203.14 1704.97,1203.14 1705.55,1203.14 1706.14,1203.14 1706.73,1203.14 1707.31,1203.14 1707.9,1203.14 1708.49,1203.14 1709.07,1203.14 1709.66,1203.14 1710.24,1203.14 1710.83,1203.14 1711.42,1203.14 1712,1203.14 1712.59,1203.14 1713.18,1203.14 1713.76,1203.14 1714.35,1203.14 1714.94,1203.14 1715.52,1203.14 1716.11,1203.14 1716.7,1203.14 1717.28,1203.14 1717.87,1203.14 1718.45,1203.14 1719.04,1203.14 1719.63,1203.14 1720.21,1203.14 1720.8,1203.14 1721.39,1203.14 1721.97,1203.14 1722.56,1203.14 1723.15,1203.14 1723.73,1203.14 1724.32,1203.14 1724.91,1203.14 1725.49,1203.14 1726.08,1203.14 1726.66,1203.14 1727.25,1203.14 1727.84,1203.14 1728.42,1203.14 1729.01,1203.14 1729.6,1203.14 1730.18,1203.14 1730.77,1203.14 1731.36,1203.14 1731.94,1203.14 1732.53,1203.14 1733.11,1203.14 1733.7,1203.14 1734.29,1203.14 1734.87,1203.14 1735.46,1203.14 1736.05,1203.14 1736.63,1203.14 1737.22,1203.14 1737.81,1203.14 1738.39,1203.14 1738.98,1203.14 1739.57,1203.14 1740.15,1203.14 1740.74,1203.14 1741.32,1203.14 1741.91,1203.14 1742.5,1203.14 1743.08,1203.14 1743.67,1203.14 1744.26,1203.14 1744.84,1203.14 1745.43,1203.14 1746.02,1203.14 1746.6,1203.14 1747.19,1203.14 1747.78,1203.14 1748.36,1203.14 1748.95,1203.14 1749.53,1203.14 1750.12,1203.14 1750.71,1203.14 1751.29,1203.14 1751.88,1203.14 1752.47,1203.14 1753.05,1203.14 1753.64,1203.14 1754.23,1203.14 1754.81,1203.14 1755.4,1203.14 1755.99,1203.14 1756.57,1203.14 1757.16,1203.14 1757.74,1203.14 1758.33,1203.14 1758.92,1203.14 1759.5,1203.14 1760.09,1203.14 1760.68,1203.14 1761.26,1203.14 1761.85,1203.14 1762.44,1203.14 1763.02,1203.14 1763.61,1203.14 1764.19,1203.14 1764.78,1203.14 1765.37,1203.14 1765.95,1203.14 1766.54,1203.14 1767.13,1203.14 1767.71,1203.14 1768.3,1203.14 1768.89,1203.14 1769.47,1203.14 1770.06,1203.14 1770.65,1203.14 1771.23,1203.14 1771.82,1203.14 1772.4,1203.14 1772.99,1203.14 1773.58,1203.14 1774.16,1203.14 1774.75,1203.14 1775.34,1203.14 1775.92,1203.14 1776.51,1203.14 1777.1,1203.14 1777.68,1203.14 1778.27,1203.14 1778.86,1203.14 1779.44,1203.14 1780.03,1203.14 1780.61,1203.14 1781.2,1203.14 1781.79,1203.14 1782.37,1203.14 1782.96,1203.14 1783.55,1203.14 1784.13,1203.14 1784.72,1203.14 1785.31,1203.14 1785.89,1203.14 1786.48,1203.14 1787.06,1203.14 1787.65,1203.14 1788.24,1203.14 1788.82,1203.14 1789.41,1203.14 1790,1203.14 1790.58,1203.14 1791.17,1203.14 1791.76,1203.14 1792.34,1203.14 1792.93,1203.14 1793.52,1203.14 1794.1,1203.14 1794.69,1203.14 1795.27,1203.14 1795.86,1203.14 1796.45,1203.14 1797.03,1203.14 1797.62,1203.14 1798.21,1203.14 1798.79,1203.14 1799.38,1203.14 1799.97,1203.14 1800.55,1203.14 1801.14,1203.14 1801.73,1203.14 1802.31,1203.14 1802.9,1203.14 1803.48,1203.14 1804.07,1203.14 1804.66,1203.14 1805.24,1203.14 1805.83,1203.14 1806.42,1203.14 1807,1203.14 1807.59,1203.14 1808.18,1203.14 1808.76,1203.14 1809.35,1203.14 1809.94,1203.14 1810.52,1203.14 1811.11,1203.14 1811.69,1203.14 1812.28,1203.14 1812.87,1203.14 1813.45,1203.14 1814.04,1203.14 1814.63,1203.14 1815.21,1203.14 1815.8,1203.14 1816.39,1203.14 1816.97,1203.14 1817.56,1203.14 1818.14,1203.14 1818.73,1203.14 1819.32,1203.14 1819.9,1203.14 1820.49,1203.14 1821.08,1203.14 1821.66,1203.14 1822.25,1203.14 1822.84,1203.14 1823.42,1203.14 1824.01,1203.14 1824.6,1203.14 1825.18,1203.14 1825.77,1203.14 1826.35,1203.14 1826.94,1203.14 1827.53,1203.14 1828.11,1203.14 1828.7,1203.14 1829.29,1203.14 1829.87,1203.14 1830.46,1203.14 1831.05,1203.14 1831.63,1203.14 1832.22,1203.14 1832.81,1203.14 1833.39,1203.14 1833.98,1203.14 1834.56,1203.14 1835.15,1203.14 1835.74,1203.14 1836.32,1203.14 1836.91,1203.14 1837.5,1203.14 1838.08,1203.14 1838.67,1203.14 1839.26,1203.14 1839.84,1203.14 1840.43,1203.14 1841.01,1203.14 1841.6,1203.14 1842.19,1203.14 1842.77,1203.14 1843.36,1203.14 1843.95,1203.14 1844.53,1203.14 1845.12,1203.14 1845.71,1203.14 1846.29,1203.14 1846.88,1203.14 1847.47,1203.14 1848.05,1203.14 1848.64,1203.14 1849.22,1203.14 1849.81,1203.14 1850.4,1203.14 1850.98,1203.14 1851.57,1203.14 1852.16,1203.14 1852.74,1203.14 1853.33,1203.14 1853.92,1203.14 1854.5,1203.14 1855.09,1203.14 1855.68,1203.14 1856.26,1203.14 1856.85,1203.14 1857.43,1203.14 1858.02,1203.14 1858.61,1203.14 1859.19,1203.14 1859.78,1203.14 1860.37,1203.14 1860.95,1203.14 1861.54,1203.14 1862.13,1203.14 1862.71,1203.14 1863.3,1203.14 1863.88,1203.14 1864.47,1203.14 1865.06,1203.14 1865.64,1203.14 1866.23,1203.14 1866.82,1203.14 1867.4,1203.14 1867.99,1203.14 1868.58,1203.14 1869.16,1203.14 1869.75,1203.14 1870.34,1203.14 1870.92,1203.14 1871.51,1203.14 1872.09,1203.14 1872.68,1203.14 1873.27,1203.14 1873.85,1203.14 1874.44,1203.14 1875.03,1203.14 1875.61,1203.14 1876.2,1203.14 1876.79,1203.14 1877.37,1203.14 1877.96,1203.14 1878.55,1203.14 1879.13,1203.14 1879.72,1203.14 1880.3,1203.14 1880.89,1203.14 1881.48,1203.14 1882.06,1203.14 1882.65,1203.14 1883.24,1203.14 1883.82,1203.14 1884.41,1203.14 1885,1203.14 1885.58,1203.14 1886.17,1203.14 1886.76,1203.14 1887.34,1203.14 1887.93,1203.14 1888.51,1203.14 1889.1,1203.14 1889.69,1203.14 1890.27,1203.14 1890.86,1203.14 1891.45,1203.14 1892.03,1203.14 1892.62,1203.14 1893.21,1203.14 1893.79,1203.14 1894.38,1203.14 1894.96,1203.14 1895.55,1203.14 1896.14,1203.14 1896.72,1203.14 1897.31,1203.14 1897.9,1203.14 1898.48,1203.14 1899.07,1203.14 1899.66,1203.14 1900.24,1203.14 1900.83,1203.14 1901.42,1203.14 1902,1203.14 1902.59,1203.14 1903.17,1203.14 1903.76,1203.14 1904.35,1203.14 1904.93,1203.14 1905.52,1203.14 1906.11,1203.14 1906.69,1203.14 1907.28,1203.14 1907.87,1203.14 1908.45,1203.14 1909.04,1203.14 1909.63,1203.14 1910.21,1203.14 1910.8,1203.14 1911.38,1203.14 1911.97,1203.14 1912.56,1203.14 1913.14,1203.14 1913.73,1203.14 1914.32,1203.14 1914.9,1203.14 1915.49,1203.14 1916.08,1203.14 1916.66,1203.14 1917.25,1203.14 1917.83,1203.14 1918.42,1203.14 1919.01,1203.14 1919.59,1203.14 1920.18,1203.14 1920.77,1203.14 1921.35,1203.14 1921.94,1203.14 1922.53,1203.14 1923.11,1203.14 1923.7,1203.14 1924.29,1203.14 1924.87,1203.14 1925.46,1203.14 1926.04,1203.14 1926.63,1203.14 1927.22,1203.14 1927.8,1203.14 1928.39,1203.14 1928.98,1203.14 1929.56,1203.14 1930.15,1203.14 1930.74,1203.14 1931.32,1203.14 1931.91,1203.14 1932.5,1203.14 1933.08,1203.14 1933.67,1203.14 1934.25,1203.14 1934.84,1203.14 1935.43,1203.14 1936.01,1203.14 1936.6,1203.14 1937.19,1203.14 1937.77,1203.14 1938.36,1203.14 1938.95,1203.14 1939.53,1203.14 1940.12,1203.14 1940.71,1203.14 1941.29,1203.14 1941.88,1203.14 1942.46,1203.14 1943.05,1203.14 1943.64,1203.14 1944.22,1203.14 1944.81,1203.14 1945.4,1203.14 1945.98,1203.14 1946.57,1203.14 1947.16,1203.14 1947.74,1203.14 1948.33,1203.14 1948.91,1203.14 1949.5,1203.14 1950.09,1203.14 1950.67,1203.14 1951.26,1203.14 1951.85,1203.14 1952.43,1203.14 1953.02,1203.14 1953.61,1203.14 1954.19,1203.14 1954.78,1203.14 1955.37,1203.14 1955.95,1203.14 1956.54,1203.14 1957.12,1203.14 1957.71,1203.14 1958.3,1203.14 1958.88,1203.14 1959.47,1203.14 1960.06,1203.14 1960.64,1203.14 1961.23,1203.14 1961.82,1203.14 1962.4,1203.14 1962.99,1203.14 1963.58,1203.14 1964.16,1203.14 1964.75,1203.14 1965.33,1203.14 1965.92,1203.14 1966.51,1203.14 1967.09,1203.14 1967.68,1203.14 1968.27,1203.14 1968.85,1203.14 1969.44,1203.14 1970.03,1203.14 1970.61,1203.14 1971.2,1203.14 1971.78,1203.14 1972.37,1203.14 1972.96,1203.14 1973.54,1203.14 1974.13,1203.14 1974.72,1203.14 1975.3,1203.14 1975.89,1203.14 1976.48,1203.14 1977.06,1203.14 1977.65,1203.14 1978.24,1203.14 1978.82,1203.14 1979.41,1203.14 1979.99,1203.14 1980.58,1203.14 1981.17,1203.14 1981.75,1203.14 1982.34,1203.14 1982.93,1203.14 1983.51,1203.14 1984.1,1203.14 1984.69,1203.14 1985.27,1203.14 1985.86,1203.14 1986.45,1203.14 1987.03,1203.14 1987.62,1203.14 1988.2,1203.14 1988.79,1203.14 1989.38,1203.14 1989.96,1203.14 1990.55,1203.14 1991.14,1203.14 1991.72,1203.14 1992.31,1203.14 1992.9,1203.14 1993.48,1203.14 1994.07,1203.14 1994.65,1203.14 1995.24,1203.14 1995.83,1203.14 1996.41,1203.14 1997,1203.14 1997.59,1203.14 1998.17,1203.14 1998.76,1203.14 1999.35,1203.14 1999.93,1203.14 2000.52,1203.14 2001.11,1203.14 2001.69,1203.14 2002.28,1203.14 2002.86,1203.14 2003.45,1203.14 2004.04,1203.14 2004.62,1203.14 2005.21,1203.14 2005.8,1203.14 2006.38,1203.14 2006.97,1203.14 2007.56,1203.14 2008.14,1203.14 2008.73,1203.14 2009.32,1203.14 2009.9,1203.14 2010.49,1203.14 2011.07,1203.14 2011.66,1203.14 2012.25,1203.14 2012.83,1203.14 2013.42,1203.14 2014.01,1203.14 2014.59,1203.14 2015.18,1203.14 2015.77,1203.14 2016.35,1203.14 2016.94,1203.14 2017.53,1203.14 2018.11,1203.14 2018.7,1203.14 2019.28,1203.14 2019.87,1203.14 2020.46,1203.14 2021.04,1203.14 2021.63,1203.14 2022.22,1203.14 2022.8,1203.14 2023.39,1203.14 2023.98,1203.14 2024.56,1203.14 2025.15,1203.14 2025.73,1203.14 2026.32,1203.14 2026.91,1203.14 2027.49,1203.14 2028.08,1203.14 2028.67,1203.14 2029.25,1203.14 2029.84,1203.14 2030.43,1203.14 2031.01,1203.14 2031.6,1203.14 2032.19,1203.14 2032.77,1203.14 2033.36,1203.14 2033.94,1203.14 2034.53,1203.14 2035.12,1203.14 2035.7,1203.14 2036.29,1203.14 2036.88,1203.14 2037.46,1203.14 2038.05,1203.14 2038.64,1203.14 2039.22,1203.14 2039.81,1203.14 2040.4,1203.14 2040.98,1203.14 2041.57,1203.14 2042.15,1203.14 2042.74,1203.14 2043.33,1203.14 2043.91,1203.14 2044.5,1203.14 2045.09,1203.14 2045.67,1203.14 2046.26,1203.14 2046.85,1203.14 2047.43,1203.14 2048.02,1203.14 2048.6,1203.14 2049.19,1203.14 2049.78,1203.14 2050.36,1203.14 2050.95,1203.14 2051.54,1203.14 2052.12,1203.14 2052.71,1203.14 2053.3,1203.14 2053.88,1203.14 2054.47,1203.14 2055.06,1203.14 2055.64,1203.14 2056.23,1203.14 2056.81,1203.14 2057.4,1203.14 2057.99,1203.14 2058.57,1203.14 2059.16,1203.14 2059.75,1203.14 2060.33,1203.14 2060.92,1203.14 2061.51,1203.14 2062.09,1203.14 2062.68,1203.14 2063.27,1203.14 2063.85,1203.14 2064.44,1203.14 2065.02,1203.14 2065.61,1203.14 2066.2,1203.14 2066.78,1203.14 2067.37,1203.14 2067.96,1203.14 2068.54,1203.14 2069.13,1203.14 2069.72,1203.14 2070.3,1203.14 2070.89,1203.14 2071.48,1203.14 2072.06,1203.14 2072.65,1203.14 2073.23,1203.14 2073.82,1203.14 2074.41,1203.14 2074.99,1203.14 2075.58,1203.14 2076.17,1203.14 2076.75,1203.14 2077.34,1203.14 2077.93,1203.14 2078.51,1203.14 2079.1,1203.14 2079.68,1203.14 2080.27,1203.14 2080.86,1203.14 2081.44,1203.14 2082.03,1203.14 2082.62,1203.14 2083.2,1203.14 2083.79,1203.14 2084.38,1203.14 2084.96,1203.14 2085.55,1203.14 2086.14,1203.14 2086.72,1203.14 2087.31,1203.14 2087.89,1203.14 2088.48,1203.14 2089.07,1203.14 2089.65,1203.14 2090.24,1203.14 2090.83,1203.14 2091.41,1203.14 2092,1203.14 2092.59,1203.14 2093.17,1203.14 2093.76,1203.14 2094.35,1203.14 2094.93,1203.14 2095.52,1203.14 2096.1,1203.14 2096.69,1203.14 2097.28,1203.14 2097.86,1203.14 2098.45,1203.14 2099.04,1203.14 2099.62,1203.14 2100.21,1203.14 2100.8,1203.14 2101.38,1203.14 2101.97,1203.14 2102.55,1203.14 2103.14,1203.14 2103.73,1203.14 2104.31,1203.14 2104.9,1203.14 2105.49,1203.14 2106.07,1203.14 2106.66,1203.14 2107.25,1203.14 2107.83,1203.14 2108.42,1203.14 2109.01,1203.14 2109.59,1203.14 2110.18,1203.14 2110.76,1203.14 2111.35,1203.14 2111.94,1203.14 2112.52,1203.14 2113.11,1203.14 2113.7,1203.14 2114.28,1203.14 2114.87,1203.14 2115.46,1203.14 2116.04,1203.14 2116.63,1203.14 2117.22,1203.14 2117.8,1203.14 2118.39,1203.14 2118.97,1203.14 2119.56,1203.14 2120.15,1203.14 2120.73,1203.14 2121.32,1203.14 2121.91,1203.14 2122.49,1203.14 2123.08,1203.14 2123.67,1203.14 2124.25,1203.14 2124.84,1203.14 2125.42,1203.14 2126.01,1203.14 2126.6,1203.14 2127.18,1203.14 2127.77,1203.14 2128.36,1203.14 2128.94,1203.14 2129.53,1203.14 2130.12,1203.14 2130.7,1203.14 2131.29,1203.14 2131.88,1203.14 2132.46,1203.14 2133.05,1203.14 2133.63,1203.14 2134.22,1203.14 2134.81,1203.14 2135.39,1203.14 2135.98,1203.14 2136.57,1203.14 2137.15,1203.14 2137.74,1203.14 2138.33,1203.14 2138.91,1203.14 2139.5,1203.14 2140.09,1203.14 2140.67,1203.14 2141.26,1203.14 2141.84,1203.14 2142.43,1203.14 2143.02,1203.14 2143.6,1203.14 2144.19,1203.14 2144.78,1203.14 2145.36,1203.14 2145.95,1203.14 2146.54,1203.14 2147.12,1203.14 2147.71,1203.14 2148.3,1203.14 2148.88,1203.14 2149.47,1203.14 2150.05,1203.14 2150.64,1203.14 2151.23,1203.14 2151.81,1203.14 2152.4,1203.14 2152.99,1203.14 2153.57,1203.14 2154.16,1203.14 2154.75,1203.14 2155.33,1203.14 2155.92,1203.14 2156.5,1203.14 2157.09,1203.14 2157.68,1203.14 2158.26,1203.14 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.37,1184.14 1401.49,899.083 \"/>\n<polyline clip-path=\"url(#clip682)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1221.53 985.439,1184.14 2158.26,1184.14 2158.26,1221.53 985.439,1221.53 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip680)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip683\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip680)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip680)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip680)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip683)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-3986.53 163.232,-5108.93 163.792,-6111.32 164.351,-7050.32 164.91,-6637.08 165.469,-7438.9 166.029,-8204.28 166.588,-8861.06 167.147,-8480.44 167.706,-9059.31 168.266,-9579.1 168.825,-10061.7 169.384,-10460.2 169.943,-10107.1 170.503,-9806.17 171.062,-10158.3 171.621,-9869.04 172.18,-9614.18 172.74,-9900.85 173.299,-10140.1 173.858,-10362.2 174.417,-10535 174.977,-10688 175.536,-10809.7 176.095,-10540.9 176.655,-10623.9 177.214,-10702.8 177.773,-10749.2 178.332,-10755.2 178.892,-10754.3 179.451,-10495.5 180.01,-10475 180.569,-10439.9 181.129,-10396.9 181.688,-9926.6 182.247,-9846.14 182.806,-9595 183.366,-9506.35 183.925,-9100.29 184.484,-8997.08 185.043,-8755.9 185.603,-8385.76 186.162,-8037.89 186.721,-7935.66 187.28,-7833.97 187.84,-7619.57 188.399,-7413.72 188.958,-7215.97 189.517,-7111.18 190.077,-7010.42 190.636,-6815.28 191.195,-6701.01 191.754,-6435.26 192.314,-6320.95 192.873,-6203.48 193.432,-6010.57 193.991,-5766.91 194.551,-5650.8 195.11,-5476.98 195.669,-5191.66 196.228,-5071.84 196.788,-4959.52 197.347,-4792.41 197.906,-4631.85 198.465,-4420.15 199.025,-4264.65 199.584,-4115.94 200.143,-4009.75 200.702,-3905.98 201.262,-3676.12 201.821,-3577.89 202.38,-3404.06 202.939,-3232.33 203.499,-3025.09 204.058,-2946.6 204.617,-2756.27 205.176,-2579.48 205.736,-2518.23 206.295,-2413.66 206.854,-2347.36 207.413,-2248.07 207.973,-2182.74 208.532,-2024.27 209.091,-1903.72 209.65,-1818.33 210.21,-1676.36 210.769,-1626.83 211.328,-1543.82 211.887,-1465.64 212.447,-1388.39 213.006,-1345.52 213.565,-1245.31 214.124,-1175.84 214.684,-1029.38 215.243,-993.383 215.802,-930.901 216.361,-893.434 216.921,-784.911 217.48,-728.562 218.039,-696.999 218.598,-618.635 219.158,-519.288 219.717,-444.062 220.276,-394.483 220.835,-321.539 221.395,-298.868 221.954,-229.723 222.513,-208.547 223.072,-183.127 223.632,-118.578 224.191,-81.123 224.75,-61.4511 225.309,0.665539 225.869,59.5123 226.428,94.8776 226.987,154.819 227.546,228.759 228.106,242.632 228.665,272.382 229.224,325.087 229.783,357.671 230.343,404.443 230.902,435.163 231.461,422.616 232.02,472.131 232.58,483.374 233.139,566.159 233.698,591.288 234.257,614.197 234.817,657.134 235.376,710.488 235.935,714.022 236.494,791.702 237.054,806.085 237.613,803.331 238.172,780.64 238.731,780.326 239.291,763.789 239.85,782.45 240.409,781.865 240.968,763.471 241.528,782.192 242.087,801.73 242.646,798.692 243.205,833.169 243.765,867.149 244.324,863.614 244.883,880.841 245.442,917.723 246.002,937.1 246.561,932.173 247.12,944.851 247.679,958.182 248.239,989.642 248.798,984.325 249.357,960.916 249.916,974.438 250.476,951.88 251.035,947.55 251.594,944.801 252.153,961.786 252.713,955.178 253.272,971.698 253.831,982.57 254.39,976.67 254.95,989.343 255.509,984.097 256.068,1002.06 256.627,999.456 257.187,1063.92 257.746,1071.32 258.305,1061.77 258.864,1070.94 259.424,1079.99 259.983,1070.74 260.542,1095.7 261.101,1106.64 261.661,1096.83 262.22,1089.7 262.779,1084.9 263.338,1075.91 263.898,1087.08 264.457,1064.09 265.016,1074.49 265.575,1067.55 266.135,1076.37 266.694,1072.18 267.253,1079.58 267.812,1056.64 268.372,1066.97 268.931,1043.81 269.49,1071.99 270.049,1049.36 270.609,1077.68 271.168,1082.33 271.727,1110.62 272.286,1120.22 272.846,1097.56 273.405,1108.42 273.964,1068.65 274.523,1064.94 275.083,1056.06 275.642,1081.25 276.201,1075.96 276.76,1051.39 277.32,1091.79 277.879,1117.86 278.438,1122.99 278.997,1144.06 279.557,1146.44 280.116,1135.83 280.675,1193.99 281.234,1180.69 281.794,1166.62 282.353,1154.41 282.912,1158.13 283.471,1164.24 284.031,1183.16 284.59,1184.89 285.149,1153.77 285.708,1159.99 286.268,1160.36 286.827,1168.28 287.386,1155.57 287.945,1140.42 288.505,1145.64 289.064,1185.6 289.623,1238.1 290.182,1205.46 290.742,1156.75 291.301,1128.07 291.86,1117.21 292.419,1121.87 292.979,1093.84 293.538,1082.77 294.097,1074.3 294.656,1049.32 295.216,1073.21 295.775,1067.89 296.334,1073.98 296.893,1046.54 297.453,1038.43 298.012,1016.59 298.571,1010.48 299.13,1003.36 299.69,995.701 300.249,969.174 300.808,984.301 301.368,998.909 301.927,977.433 302.486,956.813 303.045,984.242 303.605,1012.16 304.164,1021.77 304.723,982.62 305.282,993.17 305.842,1006.22 306.401,1035.53 306.96,1061.93 307.519,1049.18 308.079,1042.32 308.638,1064.17 309.197,1069.73 309.756,1059.12 310.316,1081.55 310.875,1099.32 311.434,1071.55 311.993,1064.55 312.553,1007.69 313.112,1035.72 313.671,1028.17 314.23,1038.26 314.79,1050.87 315.349,1057.43 315.908,1010.59 316.467,1037.92 317.027,1044.87 317.586,1037.36 318.145,1041.73 318.704,1035.44 319.264,1012.77 319.823,1009.16 320.382,985.853 320.941,992.149 321.501,1034.9 322.06,1041.12 322.619,978.371 323.178,986.695 323.738,970.232 324.297,981.249 324.856,974.214 325.415,970.678 325.975,981.167 326.534,974.326 327.093,1001.16 327.652,995.064 328.212,968.585 328.771,945.798 329.33,924.333 329.889,919.291 330.449,898.457 331.008,910.124 331.567,909.398 332.126,890.336 332.686,950.639 333.245,948.018 333.804,957.405 334.363,933.163 334.923,912.953 335.482,928.604 336.041,908.563 336.6,886.967 337.16,867.234 337.719,886.29 338.278,885.459 338.837,873.147 339.397,858.331 339.956,857.791 340.515,890.126 341.074,920.185 341.634,916.139 342.193,943.998 342.752,955.4 343.311,967.341 343.871,946.459 344.43,957.555 344.989,969.435 345.548,930.766 346.108,950.652 346.667,947.188 347.226,945.369 347.785,873.73 348.345,889.105 348.904,868.452 349.463,860.853 350.022,827.106 350.582,843.987 351.141,862.608 351.7,875.217 352.259,872.299 352.819,867.576 353.378,898.225 353.937,866.191 354.496,859.346 355.056,823.04 355.615,835.909 356.174,853.026 356.733,851.604 357.293,849.65 357.852,865.672 358.411,864.884 358.97,882.454 359.53,864.461 360.089,876.433 360.648,873.115 361.207,870.71 361.767,881.624 362.326,863.732 362.885,892.122 363.444,873.336 364.004,869.446 364.563,866.525 365.122,896.978 365.681,895.067 366.241,905.01 366.8,899.335 367.359,861.781 367.918,876.957 368.478,873.881 369.037,840.58 369.596,822.409 370.155,822.422 370.715,869.442 371.274,866.083 371.833,843.184 372.392,855.165 372.952,849.815 373.511,832.029 374.07,846.809 374.629,859.313 375.189,859.388 375.748,840.503 376.307,851.295 376.866,880.045 377.426,859.92 377.985,858.665 378.544,842.272 379.103,792.67 379.663,792.098 380.222,794.694 380.781,795.596 381.34,846.82 381.9,880.842 382.459,846.878 383.018,840.242 383.577,839.311 384.137,820.665 384.696,820.802 385.255,834.452 385.814,834.433 386.374,846.495 386.933,846.004 387.492,860.021 388.051,810.333 388.611,810.814 389.17,811.025 389.729,809.336 390.288,807.082 390.848,790.885 391.407,791.89 391.966,774.79 392.525,758.849 393.085,790.699 393.644,771.936 394.203,759.891 394.762,792.739 395.322,791.235 395.881,789.238 396.44,787.952 396.999,791.07 397.559,788.122 398.118,817.242 398.677,851.21 399.236,850.13 399.796,862.937 400.355,874.208 400.914,869.471 401.473,833.601 402.033,829.863 402.592,860.116 403.151,872.141 403.71,822.56 404.27,807.96 404.829,807.368 405.388,853.836 405.947,817.45 406.507,784.529 407.066,785.8 407.625,803.429 408.184,785.373 408.744,800.439 409.303,811.197 409.862,795.283 410.421,843.739 410.981,839.134 411.54,852.792 412.099,866.287 412.658,842.788 413.218,839.125 413.777,834.6 414.336,834.229 414.895,860.663 415.455,839.102 416.014,833.635 416.573,813.878 417.132,793.262 417.692,778.575 418.251,807.714 418.81,817.992 419.369,814.828 419.929,797.7 420.488,779.637 421.047,778.136 421.606,727.072 422.166,728.678 422.725,700.707 423.284,706.16 423.843,710.971 424.403,714.29 424.962,748 425.521,746.414 426.08,764.35 426.64,763.914 427.199,779.239 427.758,797.645 428.318,780.626 428.877,765.41 429.436,781.374 429.995,749.848 430.555,754.695 431.114,788.304 431.673,820.706 432.232,833.321 432.792,831.09 433.351,794.747 433.91,806.468 434.469,802.661 435.029,796.073 435.588,810.949 436.147,796.543 436.706,792.086 437.266,793.004 437.825,805.706 438.384,803.735 438.943,820.674 439.503,816.169 440.062,830.046 440.621,806.08 441.18,819.879 441.74,832.19 442.299,844.472 442.858,840.636 443.417,853.535 443.977,850.689 444.536,832.696 445.095,812.086 445.654,840.359 446.214,821.138 446.773,851.19 447.332,844.669 447.891,825.132 448.451,804.049 449.01,819.384 449.569,799.36 450.128,797.698 450.688,814.509 451.247,792.026 451.806,741.26 452.365,740.583 452.925,723.439 453.484,724.347 454.043,741.924 454.602,741.895 455.162,740.649 455.721,755.189 456.28,755.524 456.839,820.158 457.399,847.344 457.958,830.998 458.517,824.967 459.076,807.127 459.636,820.399 460.195,782.537 460.754,797.149 461.313,777.887 461.873,778.182 462.432,790.7 462.991,769.938 463.55,783.394 464.11,797.563 464.669,790.407 465.228,804.754 465.787,799.253 466.347,813.356 466.906,810.237 467.465,807.568 468.024,802.583 468.584,799.248 469.143,810.331 469.702,839.687 470.261,867.337 470.821,862.19 471.38,855.93 471.939,880.725 472.498,887.761 473.058,864.703 473.617,856.583 474.176,850.226 474.735,826.543 475.295,818.343 475.854,813.641 476.413,844.679 476.972,840.472 477.532,835.217 478.091,831.308 478.65,843.719 479.209,835.604 479.769,814.142 480.328,822.823 480.887,803.866 481.446,782.528 482.006,781.934 482.565,798.814 483.124,843.792 483.683,838.129 484.243,832.736 484.802,842.516 485.361,851.841 485.92,797.411 486.48,794.395 487.039,808.365 487.598,787.08 488.157,796.864 488.717,813.892 489.276,809.098 489.835,804.261 490.394,801.312 490.954,816.086 491.513,828.34 492.072,825.037 492.631,788.006 493.191,752.048 493.75,752.775 494.309,769.681 494.868,750.521 495.428,763.694 495.987,791.943 496.546,752.598 497.105,785.285 497.665,766.737 498.224,698.83 498.783,684.928 499.342,683.504 499.902,654.374 500.461,655.304 501.02,591.627 501.579,599.126 502.139,586.419 502.698,658.264 503.257,631.257 503.816,653.957 504.376,675.106 504.935,708.214 505.494,696.939 506.053,732.388 506.613,748.979 507.172,750.091 507.731,750.699 508.29,736.086 508.85,769.178 509.409,799.815 509.968,825.614 510.527,836.965 511.087,816.603 511.646,795.477 512.205,796.105 512.764,811.636 513.324,823.468 513.883,834.315 514.442,831.93 515.001,828.664 515.561,759.388 516.12,739.279 516.679,718.641 517.238,716.44 517.798,719.499 518.357,703.124 518.916,722.772 519.475,736.166 520.035,749.993 520.594,779.322 521.153,773.407 521.712,772.165 522.272,770.932 522.831,732.979 523.39,747.527 523.949,727.953 524.509,759.526 525.068,742.426 525.627,724.976 526.186,739.533 526.746,753.626 527.305,764.433 527.864,764.43 528.423,758.797 528.983,741.821 529.542,691.559 530.101,675.936 530.66,680.059 531.22,682.364 531.779,685.536 532.338,673.941 532.897,692.427 533.457,722.72 534.016,724.212 534.575,705.683 535.134,657.186 535.694,680.992 536.253,667.611 536.812,653.812 537.371,674.276 537.931,631.048 538.49,635.839 539.049,620.626 539.608,645.025 540.168,662.146 540.727,649.412 541.286,669.277 541.845,640.062 542.405,643.097 542.964,644.315 543.523,649.05 544.082,618.727 544.642,625.625 545.201,644.879 545.76,663.795 546.319,649.795 546.879,634.412 547.438,640.515 547.997,676.683 548.556,678.997 549.116,682.246 549.675,731.129 550.234,745.051 550.793,712.334 551.353,682.375 551.912,684.802 552.471,701.083 553.031,701.924 553.59,718.313 554.149,701.389 554.708,718.351 555.268,735.78 555.827,735.451 556.386,718.376 556.945,716.486 557.505,699.813 558.064,700.269 558.623,703.92 559.182,657.207 559.742,663.495 560.301,664.823 560.86,668.561 561.419,701.24 561.979,715.703 562.538,698.368 563.097,716.924 563.656,716.313 564.216,718.909 564.775,751.273 565.334,730.374 565.893,747.475 566.453,757.434 567.012,770.646 567.571,818.131 568.13,800.73 568.69,780.907 569.249,777.758 569.808,773.715 570.367,802.691 570.927,798.917 571.486,778.365 572.045,792.887 572.604,758.727 573.164,789.51 573.723,767.977 574.282,749.947 574.841,764.605 575.401,760.594 575.96,724.807 576.519,724.402 577.078,726.567 577.638,705.925 578.197,703.586 578.756,686.545 579.315,669.445 579.875,640.002 580.434,660.559 580.993,694.952 581.552,758.897 582.112,758.748 582.671,772.555 583.23,750.778 583.789,718.082 584.349,717.222 584.908,714.966 585.467,725.763 586.026,706.007 586.586,721.677 587.145,722.41 587.704,707.958 588.263,720.519 588.823,704.19 589.382,704.645 589.941,722.128 590.5,739.195 591.06,709.098 591.619,723.3 592.178,803.546 592.737,752.561 593.297,749.64 593.856,742.272 594.415,773.057 594.974,753.086 595.534,752.933 596.093,752.084 596.652,771.727 597.211,771.899 597.771,754.516 598.33,733.608 598.889,717.386 599.448,719.185 600.008,721.366 600.567,738.217 601.126,752.88 601.685,767.298 602.245,782.737 602.804,746.433 603.363,761.907 603.922,741.715 604.482,774.123 605.041,769.979 605.6,818.202 606.159,813.008 606.719,825.344 607.278,803.852 607.837,811.899 608.396,802.533 608.956,767.497 609.515,795.676 610.074,810.829 610.633,773.403 611.193,752.862 611.752,721.794 612.311,739.294 612.87,720.897 613.43,706.007 613.989,704.537 614.548,719.558 615.107,699.698 615.667,698.155 616.226,661.721 616.785,680.577 617.344,664.058 617.904,666.307 618.463,652.188 619.022,702.093 619.581,718.517 620.141,717.806 620.7,716.686 621.259,746.879 621.818,747.548 622.378,758.637 622.937,771.324 623.496,736.105 624.055,752.05 624.615,747.129 625.174,746.18 625.733,727.232 626.292,742.058 626.852,769.79 627.411,735.014 627.97,715.057 628.529,743.814 629.089,760.041 629.648,756.991 630.207,739.316 630.766,718.719 631.326,685.519 631.885,684.299 632.444,652.239 633.003,721.508 633.563,749.846 634.122,734.305 634.681,733.436 635.24,750.219 635.8,733.211 636.359,748.011 636.918,760.853 637.477,790.134 638.037,753.52 638.596,753.517 639.155,765.899 639.714,777.951 640.274,774.87 640.833,751.556 641.392,746.951 641.951,759.794 642.511,741.386 643.07,740.963 643.629,766.527 644.188,731.319 644.748,715.37 645.307,695.277 645.866,727.502 646.425,742.736 646.985,706.944 647.544,685.46 648.103,688.188 648.662,737.525 649.222,717.733 649.781,700.998 650.34,682.744 650.899,702.161 651.459,698.985 652.018,653.858 652.577,653.051 653.136,691.535 653.696,675.793 654.255,709.502 654.814,725.815 655.373,725.1 655.933,691.48 656.492,674.955 657.051,692.025 657.61,692.748 658.17,661.646 658.729,663.954 659.288,666.235 659.847,698.858 660.407,666.277 660.966,634.637 661.525,637.599 662.084,690.762 662.644,723.334 663.203,691.219 663.762,661.021 664.321,645.151 664.881,633.795 665.44,640.139 665.999,660.993 666.558,696.354 667.118,715.203 667.677,733.106 668.236,747.759 668.795,747.925 669.355,762.611 669.914,711.338 670.473,696.935 671.032,695.671 671.592,696.005 672.151,663.579 672.71,665.117 673.269,651.445 673.829,650.876 674.388,653.782 674.947,658.122 675.506,643.096 676.066,628.512 676.625,616.715 677.184,639.184 677.743,626.934 678.303,630.334 678.862,633.365 679.421,638.846 679.981,644.352 680.54,632.741 681.099,638.17 681.658,641.679 682.218,625.418 682.777,612.302 683.336,600.468 683.895,587.272 684.455,607.928 685.014,629.082 685.573,600.36 686.132,585.96 686.692,608.485 687.251,630.152 687.81,604.406 688.369,607.852 688.929,629.45 689.488,632.958 690.047,657.736 690.606,672.174 691.166,691.05 691.725,710.928 692.284,709.605 692.843,725.975 693.403,722.302 693.962,703.985 694.521,689.423 695.08,661.331 695.64,664.921 696.199,697.029 696.758,698.241 697.317,667.23 697.877,672.554 698.436,669.703 698.995,672.445 699.554,675.328 700.114,674.7 700.673,675.711 701.232,679.739 701.791,682.685 702.351,698.465 702.91,714.007 703.469,729.263 704.028,693.018 704.588,696.913 705.147,729.839 705.706,712.472 706.265,696.945 706.825,712.644 707.384,715.126 707.943,714.412 708.502,710.691 709.062,708.237 709.621,662.99 710.18,664.25 710.739,649.33 711.299,648.854 711.858,638.098 712.417,625.38 712.976,609.431 713.536,601.045 714.095,637.804 714.654,639.71 715.213,691.154 715.773,659.805 716.332,680.915 716.891,618.342 717.45,637.669 718.01,640.352 718.569,627.808 719.128,661.286 719.687,649.279 720.247,618.257 720.806,638.238 721.365,659.208 721.924,595.578 722.484,617.297 723.043,586.537 723.602,545.441 724.161,572.563 724.721,561.854 725.28,567.611 725.839,602.844 726.398,574.658 726.958,614.814 727.517,616.934 728.076,653.17 728.635,674.373 729.195,707.975 729.754,739.379 730.313,720.725 730.872,721.856 731.432,722.035 731.991,720.301 732.55,732.232 733.109,747.019 733.669,762.401 734.228,791.794 734.787,790.247 735.346,770.748 735.906,767.227 736.465,765.418 737.024,745.443 737.583,759.129 738.143,788.044 738.702,780.274 739.261,795.143 739.82,787.532 740.38,783.653 740.939,778.807 741.498,791.228 742.057,817.404 742.617,778.779 743.176,709.158 743.735,696.623 744.294,695.527 744.854,742.899 745.413,726.473 745.972,723.938 746.531,722.489 747.091,719.705 747.65,734.138 748.209,765.086 748.768,790.323 749.328,787.127 749.887,812.665 750.446,805.315 751.005,817.724 751.565,831.669 752.124,791.789 752.683,785.455 753.242,780.49 753.802,789.36 754.361,784.688 754.92,808.248 755.479,768.864 756.039,764.709 756.598,748.172 757.157,712.064 757.716,712.492 758.276,676.977 758.835,673.517 759.394,674.042 759.953,673.97 760.513,659.826 761.072,725.575 761.631,757.732 762.19,674.253 762.75,673.667 763.309,640.948 763.868,671.621 764.427,689.237 764.987,673.499 765.546,706.354 766.105,704.984 766.664,670.987 767.224,656.278 767.783,626.941 768.342,692.766 768.901,695.735 769.461,711.009 770.02,696.229 770.579,677.987 771.138,697.828 771.698,668.411 772.257,668.624 772.816,699.606 773.375,731.511 773.935,758.055 774.494,801.379 775.053,791.559 775.612,756.386 776.172,738.536 776.731,735.167 777.29,736.386 777.849,762.622 778.409,775.797 778.968,757.67 779.527,768.28 780.086,765.394 780.646,761.151 781.205,741.128 781.764,723.241 782.323,724.986 782.883,737.813 783.442,734.097 784.001,731.3 784.56,710.733 785.12,726.362 785.679,745.387 786.238,725.554 786.797,724.901 787.357,737.977 787.916,705.973 788.475,707.715 789.034,703.128 789.594,716.116 790.153,682.996 790.712,685.929 791.271,670.324 791.831,717.958 792.39,697.927 792.949,697.693 793.508,633.037 794.068,651.439 794.627,656.046 795.186,640.089 795.745,641.963 796.305,628.353 796.864,630.011 797.423,617.198 797.982,638.573 798.542,593.845 799.101,612.16 799.66,597.585 800.219,605.103 800.779,642.853 801.338,694.133 801.897,692.445 802.456,740.12 803.016,719.706 803.575,736.397 804.134,736.4 804.693,782.035 805.253,795.698 805.812,774.929 806.371,751.714 806.931,747.582 807.49,745.485 808.049,721.329 808.608,690.202 809.168,691.597 809.727,723.041 810.286,738.963 810.845,701.619 811.405,685.897 811.964,702.235 812.523,668.564 813.082,687.076 813.642,702.375 814.201,716.253 814.76,745.375 815.319,707.918 815.879,708.066 816.438,738.051 816.997,719.129 817.556,683.305 818.116,683.181 818.675,637.417 819.234,687.009 819.793,689.303 820.353,674.355 820.912,675.313 821.471,677.736 822.03,659.368 822.59,677.668 823.149,678.695 823.708,694.597 824.267,709.209 824.827,691.255 825.386,754.084 825.945,753.094 826.504,733.968 827.064,731.394 827.623,731.407 828.182,731.423 828.741,696.613 829.301,715.898 829.86,712.773 830.419,728.673 830.978,713.054 831.538,697.562 832.097,729.296 832.656,741.265 833.215,706.927 833.775,661.3 834.334,694.255 834.893,710.328 835.452,691.534 836.012,724.582 836.571,691.392 837.13,678.598 837.689,647.513 838.249,681.936 838.808,697.397 839.367,683.722 839.926,666.306 840.486,631.761 841.045,631.283 841.604,600.6 842.163,636.073 842.723,639.051 843.282,611.037 843.841,617.385 844.4,635.575 844.96,652.242 845.519,667.815 846.078,654.911 846.637,657.852 847.197,693.371 847.756,708.876 848.315,742.367 848.874,755.228 849.434,752.088 849.993,748.615 850.552,727.786 851.111,681.188 851.671,667.746 852.23,733.536 852.789,728.26 853.348,696.139 853.908,724.366 854.467,722.574 855.026,718.571 855.585,700.774 856.145,712.636 856.704,759.737 857.263,720.273 857.822,703.458 858.382,685.515 858.941,689.024 859.5,708.132 860.059,704.874 860.619,737.25 861.178,733.084 861.737,701.79 862.296,684.116 862.856,666.041 863.415,713.256 863.974,683.889 864.533,687.008 865.093,708.133 865.652,690.162 866.211,669.608 866.77,656.432 867.33,688.05 867.889,674.454 868.448,692.968 869.007,676.677 869.567,678.109 870.126,680.916 870.685,649.331 871.244,638.251 871.804,624.508 872.363,661.163 872.922,663.803 873.481,648.701 874.041,634.641 874.6,621.118 875.159,656.48 875.718,641.803 876.278,643.977 876.837,675.696 877.396,693.332 877.955,674.124 878.515,706.118 879.074,706.413 879.633,704.543 880.192,703.87 880.752,719.255 881.311,718.128 881.87,700.994 882.429,701.485 882.989,686.537 883.548,672.376 884.107,673.58 884.666,673.797 885.226,691.938 885.785,705.957 886.344,687.17 886.903,690.099 887.463,639.753 888.022,607.129 888.581,628.861 889.14,630.727 889.7,620.835 890.259,625.41 890.818,627.375 891.377,647.966 891.937,648.894 892.496,617.816 893.055,638.787 893.614,654.515 894.174,674.019 894.733,691.687 895.292,678.698 895.851,660.293 896.411,675.849 896.97,693.081 897.529,692.206 898.088,674.896 898.648,674.689 899.207,673.724 899.766,688.385 900.325,721.418 900.885,734.888 901.444,701.872 902.003,700.294 902.562,700.047 903.122,679.04 903.681,678.017 904.24,677.251 904.799,663.668 905.359,681.703 905.918,695.309 906.477,725.919 907.036,721.895 907.596,735.289 908.155,734.468 908.714,733.614 909.273,699.447 909.833,694.07 910.392,692.58 910.951,659.718 911.51,628.433 912.07,634.166 912.629,605.059 913.188,592.649 913.747,629.746 914.307,620.578 914.866,624.51 915.425,627.014 915.984,657.239 916.544,643.249 917.103,678.14 917.662,647.902 918.221,647.703 918.781,619.698 919.34,639.151 919.899,676.988 920.458,662.584 921.018,662.805 921.577,679.658 922.136,630.389 922.695,631.263 923.255,634.721 923.814,655.44 924.373,637.929 924.932,625.739 925.492,645.531 926.051,650.501 926.61,650.372 927.169,652.07 927.729,656.578 928.288,674.408 928.847,691.839 929.406,661.667 929.966,665.454 930.525,684.169 931.084,685.266 931.644,700.079 932.203,680.271 932.762,649.218 933.321,672.698 933.881,690.773 934.44,672.167 934.999,656.285 935.558,675.262 936.118,693.886 936.677,673.302 937.236,690.533 937.795,657.923 938.355,660.01 938.914,646.17 939.473,631.345 940.032,633.569 940.592,653.141 941.151,654.608 941.71,655.711 942.269,639.938 942.829,626.635 943.388,664.191 943.947,649.352 944.506,668.232 945.066,650.348 945.625,648.694 946.184,647.87 946.743,667.077 947.303,667.736 947.862,697.91 948.421,729.617 948.98,741.739 949.54,737.936 950.099,718.395 950.658,700.72 951.217,744.572 951.777,727.261 952.336,725.577 952.895,726 953.454,719.395 954.014,703.539 954.573,672.184 955.132,688.083 955.691,705.704 956.251,719.874 956.81,718.619 957.369,703.077 957.928,702.296 958.488,733.239 959.047,712.339 959.606,725.381 960.165,706.06 960.725,721.134 961.284,703.289 961.843,671.816 962.402,673.713 962.962,675.517 963.521,679.127 964.08,663.322 964.639,668.263 965.199,636.867 965.758,626.365 966.317,614.099 966.876,617.954 967.436,605.95 967.995,608.066 968.554,623.505 969.113,627.156 969.673,615.404 970.232,619.626 970.791,640.579 971.35,657.724 971.91,644.678 972.469,645.153 973.028,631.394 973.587,634.758 974.147,640.693 974.706,627.166 975.265,646.237 975.824,636.231 976.384,634.514 976.943,654.188 977.502,657.237 978.061,675.704 978.621,676.044 979.18,678.37 979.739,696.134 980.298,696.316 980.858,661.447 981.417,661.426 981.976,707.893 982.535,721.803 983.095,702.777 983.654,687.221 984.213,673.134 984.772,660.168 985.332,660.778 985.891,660.937 986.45,659.491 987.009,663.693 987.569,667 988.128,701.238 988.687,682.944 989.246,699.659 989.806,695.69 990.365,707.774 990.924,738.052 991.483,736.815 992.043,715.954 992.602,730.753 993.161,744.196 993.72,741.639 994.28,726.414 994.839,723.216 995.398,720.098 995.957,720.18 996.517,685.795 997.076,687.096 997.635,685.233 998.194,686.673 998.754,716.099 999.313,750.057 999.872,746.889 1000.43,741.047 1000.99,723.072 1001.55,735.749 1002.11,733.705 1002.67,715.028 1003.23,732.237 1003.79,712.684 1004.35,692.731 1004.91,708.262 1005.46,720.727 1006.02,738.229 1006.58,752.688 1007.14,764.9 1007.7,728.946 1008.26,712.173 1008.82,740.756 1009.38,738.99 1009.94,655.571 1010.5,675.224 1011.06,676.414 1011.62,640.697 1012.18,659.847 1012.73,626.932 1013.29,632.084 1013.85,635.485 1014.41,639.721 1014.97,621.845 1015.53,623.43 1016.09,643.67 1016.65,695.529 1017.21,727.031 1017.77,725.535 1018.33,709.611 1018.89,708.832 1019.45,740.113 1020.01,708.408 1020.56,706.502 1021.12,718.376 1021.68,699.968 1022.24,701.165 1022.8,685.212 1023.36,682.931 1023.92,684.93 1024.48,698.193 1025.04,681.705 1025.6,679.875 1026.16,667.291 1026.72,685.324 1027.28,685.119 1027.83,699.492 1028.39,714.583 1028.95,695.115 1029.51,709.511 1030.07,741.489 1030.63,755.327 1031.19,786.567 1031.75,800.062 1032.31,811.83 1032.87,803.536 1033.43,797.599 1033.99,775.689 1034.55,770.051 1035.1,752.404 1035.66,713.04 1036.22,694.332 1036.78,692.617 1037.34,711.699 1037.9,709.851 1038.46,706.814 1039.02,736.427 1039.58,718.587 1040.14,733.832 1040.7,762.036 1041.26,756.781 1041.82,768.811 1042.38,761.802 1042.93,789.715 1043.49,832.18 1044.05,808.494 1044.61,814.339 1045.17,759.105 1045.73,770.384 1046.29,734.851 1046.85,731.405 1047.41,714.432 1047.97,747.327 1048.53,759.347 1049.09,755.95 1049.65,771.103 1050.2,760.027 1050.76,758.257 1051.32,722.935 1051.88,716.478 1052.44,697.023 1053,694.884 1053.56,676.968 1054.12,675.275 1054.68,658.817 1055.24,657.826 1055.8,660.567 1056.36,678.507 1056.92,676.248 1057.48,662.987 1058.03,680.051 1058.59,629.525 1059.15,601.068 1059.71,604.516 1060.27,624.453 1060.83,611.184 1061.39,650.301 1061.95,668.858 1062.51,664.887 1063.07,651.427 1063.63,649.192 1064.19,635.682 1064.75,653.145 1065.3,687.56 1065.86,669.35 1066.42,637.055 1066.98,641.387 1067.54,629.095 1068.1,631.579 1068.66,601.938 1069.22,596.568 1069.78,569.505 1070.34,557.078 1070.9,583.013 1071.46,569.352 1072.02,545.359 1072.57,573.007 1073.13,577.009 1073.69,600.762 1074.25,589.706 1074.81,641.632 1075.37,659.29 1075.93,659.16 1076.49,694.097 1077.05,712.599 1077.61,711.461 1078.17,744.803 1078.73,745.377 1079.29,758.84 1079.85,740.558 1080.4,703.77 1080.96,686.251 1081.52,703.656 1082.08,701.015 1082.64,697.072 1083.2,758.88 1083.76,742.147 1084.32,720.29 1084.88,737.227 1085.44,721.062 1086,770.055 1086.56,748.983 1087.12,745.439 1087.67,729.228 1088.23,712.885 1088.79,746.517 1089.35,776.615 1089.91,759.329 1090.47,792.846 1091.03,757.802 1091.59,725.066 1092.15,708.367 1092.71,705.66 1093.27,720.615 1093.83,719.322 1094.39,749.91 1094.94,763.756 1095.5,709.004 1096.06,690.952 1096.62,639.783 1097.18,658.411 1097.74,660.896 1098.3,663.022 1098.86,678.532 1099.42,695.712 1099.98,697.731 1100.54,698.73 1101.1,697.32 1101.66,711.028 1102.22,661.143 1102.77,643.932 1103.33,628.605 1103.89,634.125 1104.45,635.947 1105.01,672.59 1105.57,671.533 1106.13,658.879 1106.69,642.979 1107.25,645.885 1107.81,661.829 1108.37,647.016 1108.93,649.942 1109.49,635.192 1110.04,651.661 1110.6,639.901 1111.16,658.872 1111.72,627.443 1112.28,646.471 1112.84,615.17 1113.4,599.055 1113.96,622.085 1114.52,610.26 1115.08,614.861 1115.64,651.409 1116.2,637.404 1116.76,620.616 1117.31,624.851 1117.87,628.792 1118.43,662.184 1118.99,662.114 1119.55,664.745 1120.11,619.446 1120.67,605.558 1121.23,609.216 1121.79,645.818 1122.35,631.496 1122.91,636.548 1123.47,656.472 1124.03,694.095 1124.59,647.054 1125.14,649.269 1125.7,600.785 1126.26,589.279 1126.82,593.989 1127.38,583.491 1127.94,591.083 1128.5,593.198 1129.06,616.37 1129.62,604.791 1130.18,610.219 1130.74,611.27 1131.3,646.827 1131.86,616.655 1132.41,606.416 1132.97,578.407 1133.53,584.068 1134.09,606.494 1134.65,658.113 1135.21,632.323 1135.77,652.678 1136.33,653.191 1136.89,638.868 1137.45,658.745 1138.01,663.019 1138.57,648.834 1139.13,667.673 1139.68,682.363 1140.24,679.161 1140.8,694.255 1141.36,696.813 1141.92,710.659 1142.48,697.424 1143.04,681.927 1143.6,681.965 1144.16,663.428 1144.72,679.442 1145.28,679.446 1145.84,679.334 1146.4,682.174 1146.96,665.963 1147.51,664.109 1148.07,664.352 1148.63,697.128 1149.19,710.568 1149.75,691.008 1150.31,708.714 1150.87,720.103 1151.43,720.781 1151.99,735.99 1152.55,784.172 1153.11,811.985 1153.67,789.917 1154.23,784.778 1154.78,747.02 1155.34,745.193 1155.9,726.202 1156.46,759.302 1157.02,736.499 1157.58,734.011 1158.14,748.479 1158.7,733.034 1159.26,715.578 1159.82,712.194 1160.38,710.882 1160.94,712.222 1161.5,697.595 1162.05,684.16 1162.61,668.201 1163.17,653.535 1163.73,670.5 1164.29,670.909 1164.85,670.007 1165.41,720.329 1165.97,714.713 1166.53,712.956 1167.09,727.282 1167.65,712.068 1168.21,709.232 1168.77,705.734 1169.33,708.036 1169.88,722.674 1170.44,738.445 1171,739.52 1171.56,734.806 1172.12,729.134 1172.68,710.396 1173.24,691.178 1173.8,706.401 1174.36,702.375 1174.92,682.264 1175.48,665.796 1176.04,672.095 1176.6,656.022 1177.15,641.751 1177.71,675.522 1178.27,661.03 1178.83,678.929 1179.39,681.303 1179.95,679.446 1180.51,681.545 1181.07,684.696 1181.63,716.082 1182.19,746.123 1182.75,728.422 1183.31,709.308 1183.87,665.293 1184.43,667.329 1184.98,687.678 1185.54,672.518 1186.1,688.665 1186.66,657.853 1187.22,676.734 1187.78,677.514 1188.34,662.741 1188.9,680.774 1189.46,663.328 1190.02,677.399 1190.58,675.412 1191.14,660.058 1191.7,675.687 1192.25,692.192 1192.81,688.009 1193.37,656.517 1193.93,656.569 1194.49,673.944 1195.05,705.563 1195.61,688.256 1196.17,684.937 1196.73,665.307 1197.29,663.103 1197.85,678.101 1198.41,682.501 1198.97,745.933 1199.52,755.583 1200.08,719.281 1200.64,713.956 1201.2,712.946 1201.76,742.796 1202.32,728.061 1202.88,737.117 1203.44,733.339 1204,682.561 1204.56,681.144 1205.12,681.657 1205.68,665.97 1206.24,667.731 1206.8,686.501 1207.35,668.142 1207.91,684.415 1208.47,735.893 1209.03,717.36 1209.59,701.013 1210.15,703.321 1210.71,734.927 1211.27,732.342 1211.83,713.201 1212.39,710.525 1212.95,740.095 1213.51,753.564 1214.07,764.172 1214.62,787.396 1215.18,769.226 1215.74,748.981 1216.3,761.762 1216.86,723.225 1217.42,736.831 1217.98,699.032 1218.54,714.672 1219.1,694.974 1219.66,690.287 1220.22,671.428 1220.78,701.226 1221.34,686.161 1221.89,685.196 1222.45,684.645 1223.01,684.139 1223.57,669.327 1224.13,653.685 1224.69,673.261 1225.25,722.6 1225.81,657.264 1226.37,672.494 1226.93,640.88 1227.49,624.659 1228.05,612.004 1228.61,600.709 1229.17,617.706 1229.72,653.852 1230.28,674.501 1230.84,737.828 1231.4,733.342 1231.96,713.998 1232.52,682.472 1233.08,646.246 1233.64,646.779 1234.2,659.836 1234.76,663.032 1235.32,662.664 1235.88,663.624 1236.44,695.972 1236.99,728.981 1237.55,742.974 1238.11,773.126 1238.67,750.97 1239.23,748.802 1239.79,746.384 1240.35,743.488 1240.91,723.866 1241.47,736.548 1242.03,734.133 1242.59,749.332 1243.15,778.727 1243.71,757.61 1244.26,770.13 1244.82,763.12 1245.38,759.953 1245.94,754.589 1246.5,736.385 1247.06,749.125 1247.62,748.883 1248.18,761.262 1248.74,775.122 1249.3,771.022 1249.86,752.763 1250.42,747.738 1250.98,759.835 1251.54,737.023 1252.09,735.105 1252.65,733.152 1253.21,731.572 1253.77,713.495 1254.33,738.982 1254.89,722.237 1255.45,703.653 1256.01,686.754 1256.57,688.832 1257.13,704.399 1257.69,685.584 1258.25,701.973 1258.81,715.23 1259.36,728.083 1259.92,698.999 1260.48,702.478 1261.04,673.274 1261.6,674.069 1262.16,708.413 1262.72,694.852 1263.28,708.143 1263.84,708.389 1264.4,672.144 1264.96,638.849 1265.52,641.606 1266.08,641.281 1266.63,675.845 1267.19,673.713 1267.75,676.677 1268.31,676.047 1268.87,647.22 1269.43,632.543 1269.99,617.292 1270.55,620.644 1271.11,624.002 1271.67,626.394 1272.23,612.644 1272.79,615.167 1273.35,618.861 1273.91,637.912 1274.46,624.446 1275.02,626.196 1275.58,630.751 1276.14,633.584 1276.7,619.437 1277.26,635.401 1277.82,619.109 1278.38,636.683 1278.94,637.606 1279.5,672.123 1280.06,670.179 1280.62,685.977 1281.18,700.218 1281.73,683.849 1282.29,684.156 1282.85,699.064 1283.41,682.615 1283.97,683.749 1284.53,685.175 1285.09,686.034 1285.65,685.221 1286.21,682.819 1286.77,700.526 1287.33,683.672 1287.89,683.08 1288.45,698.844 1289,679.386 1289.56,727.138 1290.12,710.48 1290.68,699.063 1291.24,682.646 1291.8,666.228 1292.36,652.006 1292.92,669.097 1293.48,624.453 1294.04,676.907 1294.6,678.063 1295.16,678.838 1295.72,663.694 1296.28,661.848 1296.83,660.552 1297.39,693.24 1297.95,692.859 1298.51,676.806 1299.07,678.849 1299.63,696.889 1300.19,695.427 1300.75,694.468 1301.31,675.729 1301.87,710.387 1302.43,679.359 1302.99,680.499 1303.55,665.315 1304.1,668.706 1304.66,684.21 1305.22,699.76 1305.78,684.32 1306.34,682.912 1306.9,682.806 1307.46,661.44 1308.02,680.24 1308.58,663.443 1309.14,662.524 1309.7,678.763 1310.26,680.169 1310.82,665.792 1311.38,668.373 1311.93,671.219 1312.49,625.974 1313.05,615.552 1313.61,619.05 1314.17,641.507 1314.73,599.099 1315.29,604.429 1315.85,628.882 1316.41,644.355 1316.97,649.3 1317.53,635.112 1318.09,623.288 1318.65,641.079 1319.2,660.828 1319.76,615.215 1320.32,633.209 1320.88,619.025 1321.44,635.321 1322,640.313 1322.56,674.522 1323.12,691.488 1323.68,704.533 1324.24,690.265 1324.8,640.463 1325.36,658.981 1325.92,664.071 1326.47,762.002 1327.03,757.696 1327.59,754.408 1328.15,783.485 1328.71,780.076 1329.27,791.493 1329.83,785.641 1330.39,765.341 1330.95,747.368 1331.51,726.71 1332.07,721.409 1332.63,719.772 1333.19,674.667 1333.75,672.748 1334.3,660.264 1334.86,660.128 1335.42,660.37 1335.98,626.441 1336.54,644.206 1337.1,633.828 1337.66,642.351 1338.22,646.402 1338.78,649.273 1339.34,672.806 1339.9,660.358 1340.46,693.792 1341.02,773.961 1341.57,750.936 1342.13,717.312 1342.69,715.412 1343.25,728.597 1343.81,728.001 1344.37,746.145 1344.93,741.707 1345.49,735.173 1346.05,732.274 1346.61,745.519 1347.17,757.441 1347.73,787.05 1348.29,765.124 1348.84,758.009 1349.4,754.453 1349.96,747.636 1350.52,779.644 1351.08,791.567 1351.64,770.058 1352.2,734.664 1352.76,713.746 1353.32,694.338 1353.88,679.654 1354.44,665.34 1355,680.393 1355.56,702.205 1356.12,668.964 1356.67,734.326 1357.23,732.903 1357.79,730.925 1358.35,693.728 1358.91,676.296 1359.47,662.557 1360.03,677.919 1360.59,662.043 1361.15,693.729 1361.71,695.545 1362.27,695.722 1362.83,695.61 1363.39,691.83 1363.94,705.567 1364.5,688.954 1365.06,688.349 1365.62,706.807 1366.18,754.072 1366.74,763.39 1367.3,771.326 1367.86,733.257 1368.42,727.956 1368.98,727.139 1369.54,723.866 1370.1,705.216 1370.66,717.92 1371.21,731.929 1371.77,697.386 1372.33,679.014 1372.89,677.811 1373.45,691.716 1374.01,673.888 1374.57,688.069 1375.13,689.722 1375.69,689.268 1376.25,734.188 1376.81,730.338 1377.37,712.437 1377.93,711.351 1378.49,708.986 1379.04,691.842 1379.6,674.731 1380.16,661.485 1380.72,699.148 1381.28,699.274 1381.84,699.719 1382.4,666.765 1382.96,667.523 1383.52,682.82 1384.08,698.747 1384.64,730.441 1385.2,727.076 1385.76,722.803 1386.31,749.523 1386.87,715.523 1387.43,746.331 1387.99,823.745 1388.55,846.449 1389.11,839.653 1389.67,817.741 1390.23,797.403 1390.79,789.029 1391.35,781.082 1391.91,809.383 1392.47,756.137 1393.03,739.154 1393.58,738.311 1394.14,770.533 1394.7,798.521 1395.26,792.11 1395.82,803.279 1396.38,828.603 1396.94,835.911 1397.5,812.086 1398.06,791.986 1398.62,782.751 1399.18,777.904 1399.74,790.036 1400.3,785.791 1400.86,780.055 1401.41,791.065 1401.97,770.316 1402.53,720.203 1403.09,702.254 1403.65,717.713 1404.21,666.081 1404.77,665.918 1405.33,665.075 1405.89,681.898 1406.45,681.267 1407.01,695.664 1407.57,645.294 1408.13,647.534 1408.68,651.66 1409.24,638.626 1409.8,642.507 1410.36,627.168 1410.92,647.226 1411.48,646.308 1412.04,631.125 1412.6,600.73 1413.16,625.975 1413.72,595.89 1414.28,568.069 1414.84,573.868 1415.4,561.93 1415.95,565.888 1416.51,539.792 1417.07,531.166 1417.63,490.416 1418.19,501.329 1418.75,528.767 1419.31,520.434 1419.87,480.358 1420.43,490.793 1420.99,487.392 1421.55,483.096 1422.11,495.496 1422.67,524.693 1423.23,533.707 1423.78,592.808 1424.34,631.912 1424.9,617.24 1425.46,655.351 1426.02,653.776 1426.58,672.78 1427.14,653.78 1427.7,672.317 1428.26,672.742 1428.82,690.233 1429.38,660.159 1429.94,646.904 1430.5,650.911 1431.05,667.061 1431.61,650.405 1432.17,652.522 1432.73,670.426 1433.29,686.807 1433.85,751.942 1434.41,749.948 1434.97,732.25 1435.53,730.476 1436.09,664.498 1436.65,653.257 1437.21,623.233 1437.77,611.367 1438.33,619.238 1438.88,574.114 1439.44,563.481 1440,583.843 1440.56,607.657 1441.12,611.713 1441.68,613.676 1442.24,647.473 1442.8,664.499 1443.36,686.5 1443.92,687.182 1444.48,686.951 1445.04,687.571 1445.6,689.756 1446.15,689.856 1446.71,688.632 1447.27,689.121 1447.83,673.286 1448.39,637.299 1448.95,639.969 1449.51,644.059 1450.07,628.917 1450.63,665.075 1451.19,684.585 1451.75,688.29 1452.31,689.208 1452.87,705.487 1453.42,717.132 1453.98,731.653 1454.54,710.512 1455.1,725.437 1455.66,736.943 1456.22,719.808 1456.78,731.808 1457.34,765.509 1457.9,760.752 1458.46,799.924 1459.02,823.428 1459.58,764.106 1460.14,741.375 1460.7,695.07 1461.25,694.496 1461.81,692.552 1462.37,690.909 1462.93,678.163 1463.49,675.319 1464.05,643.605 1464.61,661.234 1465.17,660.155 1465.73,645.605 1466.29,648.284 1466.85,653.484 1467.41,672.432 1467.97,689.833 1468.52,707.305 1469.08,723.909 1469.64,703.278 1470.2,668.827 1470.76,669.865 1471.32,673.387 1471.88,673.151 1472.44,705.213 1473,705.921 1473.56,686.739 1474.12,701.835 1474.68,700.28 1475.24,645.879 1475.79,665.018 1476.35,664.702 1476.91,647.957 1477.47,632.822 1478.03,638.495 1478.59,622.867 1479.15,653.854 1479.71,657.308 1480.27,661.191 1480.83,662.138 1481.39,660.936 1481.95,659.335 1482.51,644.365 1483.07,646.691 1483.62,650.021 1484.18,621.286 1484.74,626.397 1485.3,676.576 1485.86,692.033 1486.42,705.456 1486.98,703.539 1487.54,721.36 1488.1,735.379 1488.66,717.432 1489.22,747.542 1489.78,744.407 1490.34,737.725 1490.89,705.521 1491.45,736.171 1492.01,717.96 1492.57,732.004 1493.13,745.807 1493.69,743.979 1494.25,726.474 1494.81,692.663 1495.37,657.652 1495.93,661.307 1496.49,631.334 1497.05,618.631 1497.61,621.811 1498.16,628.49 1498.72,661.8 1499.28,696.158 1499.84,697.332 1500.4,678.617 1500.96,710.409 1501.52,692.518 1502.08,696.287 1502.64,680.193 1503.2,696.946 1503.76,681.729 1504.32,667.824 1504.88,636.182 1505.44,623.266 1505.99,608.202 1506.55,632.589 1507.11,649.065 1507.67,683.019 1508.23,681.239 1508.79,661.699 1509.35,678.503 1509.91,662.469 1510.47,664.846 1511.03,682.136 1511.59,713.101 1512.15,695.359 1512.71,679.2 1513.26,676.884 1513.82,694.875 1514.38,691.39 1514.94,691.731 1515.5,706.579 1516.06,738.626 1516.62,767.552 1517.18,762.803 1517.74,756.886 1518.3,735.275 1518.86,716.013 1519.42,717.936 1519.98,715.617 1520.53,713.103 1521.09,727.854 1521.65,707.41 1522.21,689.491 1522.77,644.378 1523.33,710.366 1523.89,693.599 1524.45,693.485 1525.01,693.242 1525.57,707.085 1526.13,708.329 1526.69,688.556 1527.25,672.332 1527.81,658.08 1528.36,673.98 1528.92,690.792 1529.48,660.646 1530.04,663.192 1530.6,682.373 1531.16,700.247 1531.72,713.949 1532.28,716.634 1532.84,717.375 1533.4,715.221 1533.96,711.492 1534.52,743.338 1535.08,739.612 1535.63,719.287 1536.19,686.643 1536.75,685.277 1537.31,703.947 1537.87,702.536 1538.43,716.193 1538.99,699.451 1539.55,698.562 1540.11,715.344 1540.67,697.006 1541.23,682.233 1541.79,682.851 1542.35,682.157 1542.9,715.285 1543.46,712.492 1544.02,710.144 1544.58,676.427 1545.14,661.885 1545.7,726.554 1546.26,723.94 1546.82,708.502 1547.38,703.472 1547.94,668.698 1548.5,670.291 1549.06,653.451 1549.62,654.45 1550.18,637.827 1550.73,643.953 1551.29,609.051 1551.85,662.616 1552.41,677.369 1552.97,676.944 1553.53,675.631 1554.09,693.368 1554.65,694.198 1555.21,679.461 1555.77,696.803 1556.33,727.689 1556.89,723.204 1557.45,706.491 1558,690.614 1558.56,687.193 1559.12,654.927 1559.68,687.875 1560.24,673.701 1560.8,672.093 1561.36,675.26 1561.92,692.12 1562.48,692.648 1563.04,723.071 1563.6,768.583 1564.16,796.014 1564.72,837.655 1565.28,798.608 1565.83,796.648 1566.39,817.595 1566.95,745.467 1567.51,707.407 1568.07,692.693 1568.63,692.082 1569.19,692.895 1569.75,674.882 1570.31,709.166 1570.87,704.49 1571.43,736.616 1571.99,735.097 1572.55,736.767 1573.1,746.622 1573.66,762.747 1574.22,727.218 1574.78,711.114 1575.34,721.886 1575.9,736.876 1576.46,763.97 1577.02,741.852 1577.58,766.175 1578.14,808.902 1578.7,817.759 1579.26,796.766 1579.82,771.977 1580.37,768.53 1580.93,715.669 1581.49,691.999 1582.05,677.537 1582.61,658.537 1583.17,639.978 1583.73,629.414 1584.29,597.033 1584.85,600.765 1585.41,557.515 1585.97,582.876 1586.53,607.01 1587.09,578.977 1587.65,583.008 1588.2,587.861 1588.76,595.673 1589.32,620.568 1589.88,657.822 1590.44,688.262 1591,706.637 1591.56,717.498 1592.12,682.872 1592.68,682.835 1593.24,665.057 1593.8,651.64 1594.36,652.944 1594.92,686.216 1595.47,701.853 1596.03,682.874 1596.59,699.965 1597.15,683.001 1597.71,716.378 1598.27,745.977 1598.83,723.438 1599.39,736.032 1599.95,705.567 1600.51,703.602 1601.07,670.268 1601.63,637.237 1602.19,672.241 1602.74,693.279 1603.3,693.373 1603.86,740.787 1604.42,708.131 1604.98,705.927 1605.54,686.481 1606.1,668.594 1606.66,687.352 1607.22,676.163 1607.78,693.936 1608.34,675.192 1608.9,678.483 1609.46,642.252 1610.02,612.107 1610.57,567.298 1611.13,558.58 1611.69,561.902 1612.25,571.234 1612.81,565.805 1613.37,571.704 1613.93,580.251 1614.49,606.412 1615.05,644.785 1615.61,615.538 1616.17,637.363 1616.73,704.585 1617.29,671.692 1617.84,655.998 1618.4,655.093 1618.96,672.82 1619.52,688.923 1620.08,672.145 1620.64,660.05 1621.2,628.251 1621.76,647.157 1622.32,670.358 1622.88,670.986 1623.44,639.599 1624,639.668 1624.56,609.942 1625.11,547.431 1625.67,574.427 1626.23,629.345 1626.79,645.963 1627.35,697.034 1627.91,697.922 1628.47,746.23 1629.03,727.942 1629.59,729.264 1630.15,713.486 1630.71,695.088 1631.27,678.008 1631.83,663.59 1632.39,682.059 1632.94,664.498 1633.5,664.71 1634.06,667.534 1634.62,682.127 1635.18,699.635 1635.74,696.362 1636.3,679.407 1636.86,665.155 1637.42,666.284 1637.98,650.926 1638.54,682.325 1639.1,683.15 1639.66,649.599 1640.21,680.034 1640.77,697.706 1641.33,733.22 1641.89,750.156 1642.45,765.002 1643.01,760.126 1643.57,743.222 1644.13,724.638 1644.69,725.041 1645.25,721.207 1645.81,736.342 1646.37,769.042 1646.93,745.623 1647.48,727.691 1648.04,723.428 1648.6,738.332 1649.16,652.259 1649.72,638.493 1650.28,660.83 1650.84,645.838 1651.4,666.622 1651.96,683.056 1652.52,697.439 1653.08,711.218 1653.64,674.396 1654.2,659.23 1654.76,645.195 1655.31,634.563 1655.87,633.849 1656.43,620.165 1656.99,642.3 1657.55,628.577 1658.11,648.753 1658.67,652.729 1659.23,656.016 1659.79,672.731 1660.35,691.261 1660.91,707.449 1661.47,722.925 1662.03,703.318 1662.58,670.839 1663.14,705.844 1663.7,705.628 1664.26,735.297 1664.82,684.126 1665.38,679.427 1665.94,648.791 1666.5,619.49 1667.06,623.375 1667.62,595.527 1668.18,600.616 1668.74,605.221 1669.3,626.502 1669.85,613.751 1670.41,634.31 1670.97,667.805 1671.53,667.638 1672.09,667.733 1672.65,670.174 1673.21,673.126 1673.77,690.291 1674.33,640.616 1674.89,658.647 1675.45,623.321 1676.01,608.778 1676.57,613.905 1677.13,604.656 1677.68,641.421 1678.24,645.134 1678.8,647.508 1679.36,699.999 1679.92,718.284 1680.48,731.357 1681.04,745.294 1681.6,742.303 1682.16,755.687 1682.72,798.828 1683.28,774.81 1683.84,767.67 1684.4,729.385 1684.95,723.301 1685.51,723.194 1686.07,720.591 1686.63,720.9 1687.19,733.349 1687.75,745.441 1688.31,710.27 1688.87,710.037 1689.43,709.786 1689.99,709.944 1690.55,720.965 1691.11,719.882 1691.67,751.062 1692.23,730.538 1692.78,759.935 1693.34,737.993 1693.9,732.911 1694.46,729.736 1695.02,746.329 1695.58,743.869 1696.14,741.6 1696.7,721.975 1697.26,686.961 1697.82,689.101 1698.38,686.343 1698.94,671.79 1699.5,658.175 1700.05,677.769 1700.61,678.196 1701.17,661.899 1701.73,628.826 1702.29,583.542 1702.85,570.256 1703.41,575.073 1703.97,600.305 1704.53,587.919 1705.09,591.6 1705.65,631.185 1706.21,613.43 1706.77,631.615 1707.32,630.625 1707.88,637.045 1708.44,639.796 1709,625.834 1709.56,594.801 1710.12,600.436 1710.68,589.538 1711.24,596.424 1711.8,619.843 1712.36,640.649 1712.92,614.894 1713.48,603.141 1714.04,607.699 1714.6,597.015 1715.15,601.421 1715.71,592.099 1716.27,628.866 1716.83,630.651 1717.39,650.295 1717.95,666.717 1718.51,686.938 1719.07,697.907 1719.63,696.107 1720.19,696.726 1720.75,713.365 1721.31,694.701 1721.87,678.695 1722.42,663.126 1722.98,648.613 1723.54,679.813 1724.1,683.072 1724.66,714.741 1725.22,691.458 1725.78,704.393 1726.34,703.571 1726.9,690.278 1727.46,719.264 1728.02,699.11 1728.58,703.079 1729.14,717.823 1729.69,728.322 1730.25,759.21 1730.81,790.558 1731.37,802.098 1731.93,782.879 1732.49,794.024 1733.05,772.953 1733.61,771.245 1734.17,751.676 1734.73,778.357 1735.29,743.331 1735.85,720.505 1736.41,686.69 1736.97,685.185 1737.52,682.12 1738.08,698.231 1738.64,664.803 1739.2,685.332 1739.76,686.323 1740.32,705.074 1740.88,715.24 1741.44,695.232 1742,711.457 1742.56,726.224 1743.12,723.317 1743.68,723.92 1744.24,724.364 1744.79,721.6 1745.35,704.772 1745.91,700.696 1746.47,698.293 1747.03,712.989 1747.59,696.049 1748.15,727.967 1748.71,725.489 1749.27,723.824 1749.83,719.727 1750.39,720.138 1750.95,714.119 1751.51,774.978 1752.06,782.463 1752.62,790.232 1753.18,787.066 1753.74,797.179 1754.3,752.414 1754.86,730.153 1755.42,728.83 1755.98,710.057 1756.54,691.663 1757.1,692.249 1757.66,674.357 1758.22,690.636 1758.78,690.154 1759.34,673.973 1759.89,675.843 1760.45,628.138 1761.01,621.252 1761.57,639.699 1762.13,660.343 1762.69,680.824 1763.25,698.019 1763.81,686.648 1764.37,702.451 1764.93,686.368 1765.49,685.576 1766.05,700.085 1766.61,682.697 1767.16,635.945 1767.72,669.552 1768.28,653.991 1768.84,637.175 1769.4,622.47 1769.96,607.594 1770.52,675.98 1771.08,610.571 1771.64,597.052 1772.2,569.632 1772.76,591.434 1773.32,612.172 1773.88,613.538 1774.43,600.386 1774.99,610.465 1775.55,631.193 1776.11,633.968 1776.67,619.132 1777.23,653.696 1777.79,637.932 1778.35,639.104 1778.91,672.608 1779.47,688.727 1780.03,691.717 1780.59,674.445 1781.15,674.28 1781.71,671.249 1782.26,654.496 1782.82,621.043 1783.38,659.501 1783.94,689.525 1784.5,671.435 1785.06,639.8 1785.62,625.588 1786.18,614.689 1786.74,603.906 1787.3,574.901 1787.86,580.307 1788.42,636.746 1788.98,641.642 1789.53,659.64 1790.09,679.249 1790.65,681.162 1791.21,726.938 1791.77,741.941 1792.33,724.505 1792.89,673.776 1793.45,708.385 1794.01,692.508 1794.57,691.427 1795.13,689.865 1795.69,704.875 1796.25,660.237 1796.8,630.182 1797.36,630.156 1797.92,665.407 1798.48,667.92 1799.04,666.167 1799.6,669.828 1800.16,654.377 1800.72,687.533 1801.28,686.274 1801.84,704.431 1802.4,658.686 1802.96,611.36 1803.52,611.902 1804.08,631.755 1804.63,630.807 1805.19,647.751 1805.75,632.343 1806.31,637.185 1806.87,658.962 1807.43,658.838 1807.99,692.874 1808.55,681.408 1809.11,680.734 1809.67,684.355 1810.23,684.585 1810.79,652.754 1811.35,656.155 1811.9,656.355 1812.46,658.524 1813.02,657.411 1813.58,659.94 1814.14,680.307 1814.7,700.977 1815.26,670.07 1815.82,671.567 1816.38,668.656 1816.94,669.1 1817.5,667.875 1818.06,698.43 1818.62,683.237 1819.18,699.708 1819.73,712.364 1820.29,695.511 1820.85,680.127 1821.41,696.016 1821.97,659.292 1822.53,644.592 1823.09,680.204 1823.65,715.39 1824.21,763.408 1824.77,708.717 1825.33,703.978 1825.89,681.176 1826.45,715.481 1827,717.004 1827.56,701.381 1828.12,718.708 1828.68,699.008 1829.24,714.373 1829.8,715.394 1830.36,708.862 1830.92,742.126 1831.48,756.855 1832.04,764.517 1832.6,776.229 1833.16,788.22 1833.72,814.006 1834.27,794.292 1834.83,801.627 1835.39,748.872 1835.95,727.113 1836.51,741.171 1837.07,772.217 1837.63,765.166 1838.19,744.461 \"/>\n<path clip-path=\"url(#clip683)\" d=\"M720.247 691.77 L720.806 691.77 L721.365 691.77 L721.924 691.77 L722.484 691.77 L723.043 691.77 L723.602 691.77 L724.161 691.77 L724.721 691.77 L725.28 691.77 L725.839 691.77 L726.398 691.77 L726.958 691.77 L727.517 691.77 L728.076 691.77 L728.635 691.77 L729.195 691.77 L729.754 691.77 L730.313 691.77 L730.872 691.77 L731.432 691.77 L731.991 691.77 L732.55 691.77 L733.109 691.77 L733.669 691.77 L734.228 691.77 L734.787 691.77 L735.346 691.77 L735.906 691.77 L736.465 691.77 L737.024 691.77 L737.583 691.77 L738.143 691.77 L738.702 691.77 L739.261 691.77 L739.82 691.77 L740.38 691.77 L740.939 691.77 L741.498 691.77 L742.057 691.77 L742.617 691.77 L743.176 691.77 L743.735 691.77 L744.294 691.77 L744.854 691.77 L745.413 691.77 L745.972 691.77 L746.531 691.77 L747.091 691.77 L747.65 691.77 L748.209 691.77 L748.768 691.77 L749.328 691.77 L749.887 691.77 L750.446 691.77 L751.005 691.77 L751.565 691.77 L752.124 691.77 L752.683 691.77 L753.242 691.77 L753.802 691.77 L754.361 691.77 L754.92 691.77 L755.479 691.77 L756.039 691.77 L756.598 691.77 L757.157 691.77 L757.716 691.77 L758.276 691.77 L758.835 691.77 L759.394 691.77 L759.953 691.77 L760.513 691.77 L761.072 691.77 L761.631 691.77 L762.19 691.77 L762.75 691.77 L763.309 691.77 L763.868 691.77 L764.427 691.77 L764.987 691.77 L765.546 691.77 L766.105 691.77 L766.664 691.77 L767.224 691.77 L767.783 691.77 L768.342 691.77 L768.901 691.77 L769.461 691.77 L770.02 691.77 L770.579 691.77 L771.138 691.77 L771.698 691.77 L772.257 691.77 L772.816 691.77 L773.375 691.77 L773.935 691.77 L774.494 691.77 L775.053 691.77 L775.612 691.77 L776.172 691.77 L776.731 691.77 L777.29 691.77 L777.849 691.77 L778.409 691.77 L778.968 691.77 L779.527 691.77 L780.086 691.77 L780.646 691.77 L781.205 691.77 L781.764 691.77 L782.323 691.77 L782.883 691.77 L783.442 691.77 L784.001 691.77 L784.56 691.77 L785.12 691.77 L785.679 691.77 L786.238 691.77 L786.797 691.77 L787.357 691.77 L787.916 691.77 L788.475 691.77 L789.034 691.77 L789.594 691.77 L790.153 691.77 L790.712 691.77 L791.271 691.77 L791.831 691.77 L792.39 691.77 L792.949 691.77 L793.508 691.77 L794.068 691.77 L794.627 691.77 L795.186 691.77 L795.745 691.77 L796.305 691.77 L796.864 691.77 L797.423 691.77 L797.982 691.77 L798.542 691.77 L799.101 691.77 L799.66 691.77 L800.219 691.77 L800.779 691.77 L801.338 691.77 L801.897 691.77 L802.456 691.77 L803.016 691.77 L803.575 691.77 L804.134 691.77 L804.693 691.77 L805.253 691.77 L805.812 691.77 L806.371 691.77 L806.931 691.77 L807.49 691.77 L808.049 691.77 L808.608 691.77 L809.168 691.77 L809.727 691.77 L810.286 691.77 L810.845 691.77 L811.405 691.77 L811.964 691.77 L812.523 691.77 L813.082 691.77 L813.642 691.77 L814.201 691.77 L814.76 691.77 L815.319 691.77 L815.879 691.77 L816.438 691.77 L816.997 691.77 L817.556 691.77 L818.116 691.77 L818.675 691.77 L819.234 691.77 L819.793 691.77 L820.353 691.77 L820.912 691.77 L821.471 691.77 L822.03 691.77 L822.59 691.77 L823.149 691.77 L823.708 691.77 L824.267 691.77 L824.827 691.77 L825.386 691.77 L825.945 691.77 L826.504 691.77 L827.064 691.77 L827.623 691.77 L828.182 691.77 L828.741 691.77 L829.301 691.77 L829.86 691.77 L830.419 691.77 L830.978 691.77 L831.538 691.77 L832.097 691.77 L832.656 691.77 L833.215 691.77 L833.775 691.77 L834.334 691.77 L834.893 691.77 L835.452 691.77 L836.012 691.77 L836.571 691.77 L837.13 691.77 L837.689 691.77 L838.249 691.77 L838.808 691.77 L839.367 691.77 L839.926 691.77 L840.486 691.77 L841.045 691.77 L841.604 691.77 L842.163 691.77 L842.723 691.77 L843.282 691.77 L843.841 691.77 L844.4 691.77 L844.96 691.77 L845.519 691.77 L846.078 691.77 L846.637 691.77 L847.197 691.77 L847.756 691.77 L848.315 691.77 L848.874 691.77 L849.434 691.77 L849.993 691.77 L850.552 691.77 L851.111 691.77 L851.671 691.77 L852.23 691.77 L852.789 691.77 L853.348 691.77 L853.908 691.77 L854.467 691.77 L855.026 691.77 L855.585 691.77 L856.145 691.77 L856.704 691.77 L857.263 691.77 L857.822 691.77 L858.382 691.77 L858.941 691.77 L859.5 691.77 L860.059 691.77 L860.619 691.77 L861.178 691.77 L861.737 691.77 L862.296 691.77 L862.856 691.77 L863.415 691.77 L863.974 691.77 L864.533 691.77 L865.093 691.77 L865.652 691.77 L866.211 691.77 L866.77 691.77 L867.33 691.77 L867.889 691.77 L868.448 691.77 L869.007 691.77 L869.567 691.77 L870.126 691.77 L870.685 691.77 L871.244 691.77 L871.804 691.77 L872.363 691.77 L872.922 691.77 L873.481 691.77 L874.041 691.77 L874.6 691.77 L875.159 691.77 L875.718 691.77 L876.278 691.77 L876.837 691.77 L877.396 691.77 L877.955 691.77 L878.515 691.77 L879.074 691.77 L879.633 691.77 L880.192 691.77 L880.752 691.77 L881.311 691.77 L881.87 691.77 L882.429 691.77 L882.989 691.77 L883.548 691.77 L884.107 691.77 L884.666 691.77 L885.226 691.77 L885.785 691.77 L886.344 691.77 L886.903 691.77 L887.463 691.77 L888.022 691.77 L888.581 691.77 L889.14 691.77 L889.7 691.77 L890.259 691.77 L890.818 691.77 L891.377 691.77 L891.937 691.77 L892.496 691.77 L893.055 691.77 L893.614 691.77 L894.174 691.77 L894.733 691.77 L895.292 691.77 L895.851 691.77 L896.411 691.77 L896.97 691.77 L897.529 691.77 L898.088 691.77 L898.648 691.77 L899.207 691.77 L899.766 691.77 L900.325 691.77 L900.885 691.77 L901.444 691.77 L902.003 691.77 L902.562 691.77 L903.122 691.77 L903.681 691.77 L904.24 691.77 L904.799 691.77 L905.359 691.77 L905.918 691.77 L906.477 691.77 L907.036 691.77 L907.596 691.77 L908.155 691.77 L908.714 691.77 L909.273 691.77 L909.833 691.77 L910.392 691.77 L910.951 691.77 L911.51 691.77 L912.07 691.77 L912.629 691.77 L913.188 691.77 L913.747 691.77 L914.307 691.77 L914.866 691.77 L915.425 691.77 L915.984 691.77 L916.544 691.77 L917.103 691.77 L917.662 691.77 L918.221 691.77 L918.781 691.77 L919.34 691.77 L919.899 691.77 L920.458 691.77 L921.018 691.77 L921.577 691.77 L922.136 691.77 L922.695 691.77 L923.255 691.77 L923.814 691.77 L924.373 691.77 L924.932 691.77 L925.492 691.77 L926.051 691.77 L926.61 691.77 L927.169 691.77 L927.729 691.77 L928.288 691.77 L928.847 691.77 L929.406 691.77 L929.966 691.77 L930.525 691.77 L931.084 691.77 L931.644 691.77 L932.203 691.77 L932.762 691.77 L933.321 691.77 L933.881 691.77 L934.44 691.77 L934.999 691.77 L935.558 691.77 L936.118 691.77 L936.677 691.77 L937.236 691.77 L937.795 691.77 L938.355 691.77 L938.914 691.77 L939.473 691.77 L940.032 691.77 L940.592 691.77 L941.151 691.77 L941.71 691.77 L942.269 691.77 L942.829 691.77 L943.388 691.77 L943.947 691.77 L944.506 691.77 L945.066 691.77 L945.625 691.77 L946.184 691.77 L946.743 691.77 L947.303 691.77 L947.862 691.77 L948.421 691.77 L948.98 691.77 L949.54 691.77 L950.099 691.77 L950.658 691.77 L951.217 691.77 L951.777 691.77 L952.336 691.77 L952.895 691.77 L953.454 691.77 L954.014 691.77 L954.573 691.77 L955.132 691.77 L955.691 691.77 L956.251 691.77 L956.81 691.77 L957.369 691.77 L957.928 691.77 L958.488 691.77 L959.047 691.77 L959.606 691.77 L960.165 691.77 L960.725 691.77 L961.284 691.77 L961.843 691.77 L962.402 691.77 L962.962 691.77 L963.521 691.77 L964.08 691.77 L964.639 691.77 L965.199 691.77 L965.758 691.77 L966.317 691.77 L966.876 691.77 L967.436 691.77 L967.995 691.77 L968.554 691.77 L969.113 691.77 L969.673 691.77 L970.232 691.77 L970.791 691.77 L971.35 691.77 L971.91 691.77 L972.469 691.77 L973.028 691.77 L973.587 691.77 L974.147 691.77 L974.706 691.77 L975.265 691.77 L975.824 691.77 L976.384 691.77 L976.943 691.77 L977.502 691.77 L978.061 691.77 L978.621 691.77 L979.18 691.77 L979.739 691.77 L980.298 691.77 L980.858 691.77 L981.417 691.77 L981.976 691.77 L982.535 691.77 L983.095 691.77 L983.654 691.77 L984.213 691.77 L984.772 691.77 L985.332 691.77 L985.891 691.77 L986.45 691.77 L987.009 691.77 L987.569 691.77 L988.128 691.77 L988.687 691.77 L989.246 691.77 L989.806 691.77 L990.365 691.77 L990.924 691.77 L991.483 691.77 L992.043 691.77 L992.602 691.77 L993.161 691.77 L993.72 691.77 L994.28 691.77 L994.839 691.77 L995.398 691.77 L995.957 691.77 L996.517 691.77 L997.076 691.77 L997.635 691.77 L998.194 691.77 L998.754 691.77 L999.313 691.77 L999.872 691.77 L1000.43 691.77 L1000.99 691.77 L1001.55 691.77 L1002.11 691.77 L1002.67 691.77 L1003.23 691.77 L1003.79 691.77 L1004.35 691.77 L1004.91 691.77 L1005.46 691.77 L1006.02 691.77 L1006.58 691.77 L1007.14 691.77 L1007.7 691.77 L1008.26 691.77 L1008.82 691.77 L1009.38 691.77 L1009.94 691.77 L1010.5 691.77 L1011.06 691.77 L1011.62 691.77 L1012.18 691.77 L1012.73 691.77 L1013.29 691.77 L1013.85 691.77 L1014.41 691.77 L1014.97 691.77 L1015.53 691.77 L1016.09 691.77 L1016.65 691.77 L1017.21 691.77 L1017.77 691.77 L1018.33 691.77 L1018.89 691.77 L1019.45 691.77 L1020.01 691.77 L1020.56 691.77 L1021.12 691.77 L1021.68 691.77 L1022.24 691.77 L1022.8 691.77 L1023.36 691.77 L1023.92 691.77 L1024.48 691.77 L1025.04 691.77 L1025.6 691.77 L1026.16 691.77 L1026.72 691.77 L1027.28 691.77 L1027.83 691.77 L1028.39 691.77 L1028.95 691.77 L1029.51 691.77 L1030.07 691.77 L1030.63 691.77 L1031.19 691.77 L1031.75 691.77 L1032.31 691.77 L1032.87 691.77 L1033.43 691.77 L1033.99 691.77 L1034.55 691.77 L1035.1 691.77 L1035.66 691.77 L1036.22 691.77 L1036.78 691.77 L1037.34 691.77 L1037.9 691.77 L1038.46 691.77 L1039.02 691.77 L1039.58 691.77 L1040.14 691.77 L1040.7 691.77 L1041.26 691.77 L1041.82 691.77 L1042.38 691.77 L1042.93 691.77 L1043.49 691.77 L1044.05 691.77 L1044.61 691.77 L1045.17 691.77 L1045.73 691.77 L1046.29 691.77 L1046.85 691.77 L1047.41 691.77 L1047.97 691.77 L1048.53 691.77 L1049.09 691.77 L1049.65 691.77 L1050.2 691.77 L1050.76 691.77 L1051.32 691.77 L1051.88 691.77 L1052.44 691.77 L1053 691.77 L1053.56 691.77 L1054.12 691.77 L1054.68 691.77 L1055.24 691.77 L1055.8 691.77 L1056.36 691.77 L1056.92 691.77 L1057.48 691.77 L1058.03 691.77 L1058.59 691.77 L1059.15 691.77 L1059.71 691.77 L1060.27 691.77 L1060.83 691.77 L1061.39 691.77 L1061.95 691.77 L1062.51 691.77 L1063.07 691.77 L1063.63 691.77 L1064.19 691.77 L1064.75 691.77 L1065.3 691.77 L1065.86 691.77 L1066.42 691.77 L1066.98 691.77 L1067.54 691.77 L1068.1 691.77 L1068.66 691.77 L1069.22 691.77 L1069.78 691.77 L1070.34 691.77 L1070.9 691.77 L1071.46 691.77 L1072.02 691.77 L1072.57 691.77 L1073.13 691.77 L1073.69 691.77 L1074.25 691.77 L1074.81 691.77 L1075.37 691.77 L1075.93 691.77 L1076.49 691.77 L1077.05 691.77 L1077.61 691.77 L1078.17 691.77 L1078.73 691.77 L1079.29 691.77 L1079.85 691.77 L1080.4 691.77 L1080.96 691.77 L1081.52 691.77 L1082.08 691.77 L1082.64 691.77 L1083.2 691.77 L1083.76 691.77 L1084.32 691.77 L1084.88 691.77 L1085.44 691.77 L1086 691.77 L1086.56 691.77 L1087.12 691.77 L1087.67 691.77 L1088.23 691.77 L1088.79 691.77 L1089.35 691.77 L1089.91 691.77 L1090.47 691.77 L1091.03 691.77 L1091.59 691.77 L1092.15 691.77 L1092.71 691.77 L1093.27 691.77 L1093.83 691.77 L1094.39 691.77 L1094.94 691.77 L1095.5 691.77 L1096.06 691.77 L1096.62 691.77 L1097.18 691.77 L1097.74 691.77 L1098.3 691.77 L1098.86 691.77 L1099.42 691.77 L1099.98 691.77 L1100.54 691.77 L1101.1 691.77 L1101.66 691.77 L1102.22 691.77 L1102.77 691.77 L1103.33 691.77 L1103.89 691.77 L1104.45 691.77 L1105.01 691.77 L1105.57 691.77 L1106.13 691.77 L1106.69 691.77 L1107.25 691.77 L1107.81 691.77 L1108.37 691.77 L1108.93 691.77 L1109.49 691.77 L1110.04 691.77 L1110.6 691.77 L1111.16 691.77 L1111.72 691.77 L1112.28 691.77 L1112.84 691.77 L1113.4 691.77 L1113.96 691.77 L1114.52 691.77 L1115.08 691.77 L1115.64 691.77 L1116.2 691.77 L1116.76 691.77 L1117.31 691.77 L1117.87 691.77 L1118.43 691.77 L1118.99 691.77 L1119.55 691.77 L1120.11 691.77 L1120.67 691.77 L1121.23 691.77 L1121.79 691.77 L1122.35 691.77 L1122.91 691.77 L1123.47 691.77 L1124.03 691.77 L1124.59 691.77 L1125.14 691.77 L1125.7 691.77 L1126.26 691.77 L1126.82 691.77 L1127.38 691.77 L1127.94 691.77 L1128.5 691.77 L1129.06 691.77 L1129.62 691.77 L1130.18 691.77 L1130.74 691.77 L1131.3 691.77 L1131.86 691.77 L1132.41 691.77 L1132.97 691.77 L1133.53 691.77 L1134.09 691.77 L1134.65 691.77 L1135.21 691.77 L1135.77 691.77 L1136.33 691.77 L1136.89 691.77 L1137.45 691.77 L1138.01 691.77 L1138.57 691.77 L1139.13 691.77 L1139.68 691.77 L1140.24 691.77 L1140.8 691.77 L1141.36 691.77 L1141.92 691.77 L1142.48 691.77 L1143.04 691.77 L1143.6 691.77 L1144.16 691.77 L1144.72 691.77 L1145.28 691.77 L1145.84 691.77 L1146.4 691.77 L1146.96 691.77 L1147.51 691.77 L1148.07 691.77 L1148.63 691.77 L1149.19 691.77 L1149.75 691.77 L1150.31 691.77 L1150.87 691.77 L1151.43 691.77 L1151.99 691.77 L1152.55 691.77 L1153.11 691.77 L1153.67 691.77 L1154.23 691.77 L1154.78 691.77 L1155.34 691.77 L1155.9 691.77 L1156.46 691.77 L1157.02 691.77 L1157.58 691.77 L1158.14 691.77 L1158.7 691.77 L1159.26 691.77 L1159.82 691.77 L1160.38 691.77 L1160.94 691.77 L1161.5 691.77 L1162.05 691.77 L1162.61 691.77 L1163.17 691.77 L1163.73 691.77 L1164.29 691.77 L1164.85 691.77 L1165.41 691.77 L1165.97 691.77 L1166.53 691.77 L1167.09 691.77 L1167.65 691.77 L1168.21 691.77 L1168.77 691.77 L1169.33 691.77 L1169.88 691.77 L1170.44 691.77 L1171 691.77 L1171.56 691.77 L1172.12 691.77 L1172.68 691.77 L1173.24 691.77 L1173.8 691.77 L1174.36 691.77 L1174.92 691.77 L1175.48 691.77 L1176.04 691.77 L1176.6 691.77 L1177.15 691.77 L1177.71 691.77 L1178.27 691.77 L1178.83 691.77 L1179.39 691.77 L1179.95 691.77 L1180.51 691.77 L1181.07 691.77 L1181.63 691.77 L1182.19 691.77 L1182.75 691.77 L1183.31 691.77 L1183.87 691.77 L1184.43 691.77 L1184.98 691.77 L1185.54 691.77 L1186.1 691.77 L1186.66 691.77 L1187.22 691.77 L1187.78 691.77 L1188.34 691.77 L1188.9 691.77 L1189.46 691.77 L1190.02 691.77 L1190.58 691.77 L1191.14 691.77 L1191.7 691.77 L1192.25 691.77 L1192.81 691.77 L1193.37 691.77 L1193.93 691.77 L1194.49 691.77 L1195.05 691.77 L1195.61 691.77 L1196.17 691.77 L1196.73 691.77 L1197.29 691.77 L1197.85 691.77 L1198.41 691.77 L1198.97 691.77 L1199.52 691.77 L1200.08 691.77 L1200.64 691.77 L1201.2 691.77 L1201.76 691.77 L1202.32 691.77 L1202.88 691.77 L1203.44 691.77 L1204 691.77 L1204.56 691.77 L1205.12 691.77 L1205.68 691.77 L1206.24 691.77 L1206.8 691.77 L1207.35 691.77 L1207.91 691.77 L1208.47 691.77 L1209.03 691.77 L1209.59 691.77 L1210.15 691.77 L1210.71 691.77 L1211.27 691.77 L1211.83 691.77 L1212.39 691.77 L1212.95 691.77 L1213.51 691.77 L1214.07 691.77 L1214.62 691.77 L1215.18 691.77 L1215.74 691.77 L1216.3 691.77 L1216.86 691.77 L1217.42 691.77 L1217.98 691.77 L1218.54 691.77 L1219.1 691.77 L1219.66 691.77 L1220.22 691.77 L1220.78 691.77 L1221.34 691.77 L1221.89 691.77 L1222.45 691.77 L1223.01 691.77 L1223.57 691.77 L1224.13 691.77 L1224.69 691.77 L1225.25 691.77 L1225.81 691.77 L1226.37 691.77 L1226.93 691.77 L1227.49 691.77 L1228.05 691.77 L1228.61 691.77 L1229.17 691.77 L1229.72 691.77 L1230.28 691.77 L1230.84 691.77 L1231.4 691.77 L1231.96 691.77 L1232.52 691.77 L1233.08 691.77 L1233.64 691.77 L1234.2 691.77 L1234.76 691.77 L1235.32 691.77 L1235.88 691.77 L1236.44 691.77 L1236.99 691.77 L1237.55 691.77 L1238.11 691.77 L1238.67 691.77 L1239.23 691.77 L1239.79 691.77 L1240.35 691.77 L1240.91 691.77 L1241.47 691.77 L1242.03 691.77 L1242.59 691.77 L1243.15 691.77 L1243.71 691.77 L1244.26 691.77 L1244.82 691.77 L1245.38 691.77 L1245.94 691.77 L1246.5 691.77 L1247.06 691.77 L1247.62 691.77 L1248.18 691.77 L1248.74 691.77 L1249.3 691.77 L1249.86 691.77 L1250.42 691.77 L1250.98 691.77 L1251.54 691.77 L1252.09 691.77 L1252.65 691.77 L1253.21 691.77 L1253.77 691.77 L1254.33 691.77 L1254.89 691.77 L1255.45 691.77 L1256.01 691.77 L1256.57 691.77 L1257.13 691.77 L1257.69 691.77 L1258.25 691.77 L1258.81 691.77 L1259.36 691.77 L1259.92 691.77 L1260.48 691.77 L1261.04 691.77 L1261.6 691.77 L1262.16 691.77 L1262.72 691.77 L1263.28 691.77 L1263.84 691.77 L1264.4 691.77 L1264.96 691.77 L1265.52 691.77 L1266.08 691.77 L1266.63 691.77 L1267.19 691.77 L1267.75 691.77 L1268.31 691.77 L1268.87 691.77 L1269.43 691.77 L1269.99 691.77 L1270.55 691.77 L1271.11 691.77 L1271.67 691.77 L1272.23 691.77 L1272.79 691.77 L1273.35 691.77 L1273.91 691.77 L1274.46 691.77 L1275.02 691.77 L1275.58 691.77 L1276.14 691.77 L1276.7 691.77 L1277.26 691.77 L1277.82 691.77 L1278.38 691.77 L1278.94 691.77 L1279.5 691.77 L1280.06 691.77 L1280.62 691.77 L1281.18 691.77 L1281.73 691.77 L1282.29 691.77 L1282.85 691.77 L1283.41 691.77 L1283.97 691.77 L1284.53 691.77 L1285.09 691.77 L1285.65 691.77 L1286.21 691.77 L1286.77 691.77 L1287.33 691.77 L1287.89 691.77 L1288.45 691.77 L1289 691.77 L1289.56 691.77 L1290.12 691.77 L1290.68 691.77 L1291.24 691.77 L1291.8 691.77 L1292.36 691.77 L1292.92 691.77 L1293.48 691.77 L1294.04 691.77 L1294.6 691.77 L1295.16 691.77 L1295.72 691.77 L1296.28 691.77 L1296.83 691.77 L1297.39 691.77 L1297.95 691.77 L1298.51 691.77 L1299.07 691.77 L1299.63 691.77 L1300.19 691.77 L1300.75 691.77 L1301.31 691.77 L1301.87 691.77 L1302.43 691.77 L1302.99 691.77 L1303.55 691.77 L1304.1 691.77 L1304.66 691.77 L1305.22 691.77 L1305.78 691.77 L1306.34 691.77 L1306.9 691.77 L1307.46 691.77 L1308.02 691.77 L1308.58 691.77 L1309.14 691.77 L1309.7 691.77 L1310.26 691.77 L1310.82 691.77 L1311.38 691.77 L1311.93 691.77 L1312.49 691.77 L1313.05 691.77 L1313.61 691.77 L1314.17 691.77 L1314.73 691.77 L1315.29 691.77 L1315.85 691.77 L1316.41 691.77 L1316.97 691.77 L1317.53 691.77 L1318.09 691.77 L1318.65 691.77 L1319.2 691.77 L1319.76 691.77 L1320.32 691.77 L1320.88 691.77 L1321.44 691.77 L1322 691.77 L1322.56 691.77 L1323.12 691.77 L1323.68 691.77 L1324.24 691.77 L1324.8 691.77 L1325.36 691.77 L1325.92 691.77 L1326.47 691.77 L1327.03 691.77 L1327.59 691.77 L1328.15 691.77 L1328.71 691.77 L1329.27 691.77 L1329.83 691.77 L1330.39 691.77 L1330.95 691.77 L1331.51 691.77 L1332.07 691.77 L1332.63 691.77 L1333.19 691.77 L1333.75 691.77 L1334.3 691.77 L1334.86 691.77 L1335.42 691.77 L1335.98 691.77 L1336.54 691.77 L1337.1 691.77 L1337.66 691.77 L1338.22 691.77 L1338.78 691.77 L1339.34 691.77 L1339.9 691.77 L1340.46 691.77 L1341.02 691.77 L1341.57 691.77 L1342.13 691.77 L1342.69 691.77 L1343.25 691.77 L1343.81 691.77 L1344.37 691.77 L1344.93 691.77 L1345.49 691.77 L1346.05 691.77 L1346.61 691.77 L1347.17 691.77 L1347.73 691.77 L1348.29 691.77 L1348.84 691.77 L1349.4 691.77 L1349.96 691.77 L1350.52 691.77 L1351.08 691.77 L1351.64 691.77 L1352.2 691.77 L1352.76 691.77 L1353.32 691.77 L1353.88 691.77 L1354.44 691.77 L1355 691.77 L1355.56 691.77 L1356.12 691.77 L1356.67 691.77 L1357.23 691.77 L1357.79 691.77 L1358.35 691.77 L1358.91 691.77 L1359.47 691.77 L1360.03 691.77 L1360.59 691.77 L1361.15 691.77 L1361.71 691.77 L1362.27 691.77 L1362.83 691.77 L1363.39 691.77 L1363.94 691.77 L1364.5 691.77 L1365.06 691.77 L1365.62 691.77 L1366.18 691.77 L1366.74 691.77 L1367.3 691.77 L1367.86 691.77 L1368.42 691.77 L1368.98 691.77 L1369.54 691.77 L1370.1 691.77 L1370.66 691.77 L1371.21 691.77 L1371.77 691.77 L1372.33 691.77 L1372.89 691.77 L1373.45 691.77 L1374.01 691.77 L1374.57 691.77 L1375.13 691.77 L1375.69 691.77 L1376.25 691.77 L1376.81 691.77 L1377.37 691.77 L1377.93 691.77 L1378.49 691.77 L1379.04 691.77 L1379.6 691.77 L1380.16 691.77 L1380.72 691.77 L1381.28 691.77 L1381.84 691.77 L1382.4 691.77 L1382.96 691.77 L1383.52 691.77 L1384.08 691.77 L1384.64 691.77 L1385.2 691.77 L1385.76 691.77 L1386.31 691.77 L1386.87 691.77 L1387.43 691.77 L1387.99 691.77 L1388.55 691.77 L1389.11 691.77 L1389.67 691.77 L1390.23 691.77 L1390.79 691.77 L1391.35 691.77 L1391.91 691.77 L1392.47 691.77 L1393.03 691.77 L1393.58 691.77 L1394.14 691.77 L1394.7 691.77 L1395.26 691.77 L1395.82 691.77 L1396.38 691.77 L1396.94 691.77 L1397.5 691.77 L1398.06 691.77 L1398.62 691.77 L1399.18 691.77 L1399.74 691.77 L1400.3 691.77 L1400.86 691.77 L1401.41 691.77 L1401.97 691.77 L1402.53 691.77 L1403.09 691.77 L1403.65 691.77 L1404.21 691.77 L1404.77 691.77 L1405.33 691.77 L1405.89 691.77 L1406.45 691.77 L1407.01 691.77 L1407.57 691.77 L1408.13 691.77 L1408.68 691.77 L1409.24 691.77 L1409.8 691.77 L1410.36 691.77 L1410.92 691.77 L1411.48 691.77 L1412.04 691.77 L1412.6 691.77 L1413.16 691.77 L1413.72 691.77 L1414.28 691.77 L1414.84 691.77 L1415.4 691.77 L1415.95 691.77 L1416.51 691.77 L1417.07 691.77 L1417.63 691.77 L1418.19 691.77 L1418.75 691.77 L1419.31 691.77 L1419.87 691.77 L1420.43 691.77 L1420.99 691.77 L1421.55 691.77 L1422.11 691.77 L1422.67 691.77 L1423.23 691.77 L1423.78 691.77 L1424.34 691.77 L1424.9 691.77 L1425.46 691.77 L1426.02 691.77 L1426.58 691.77 L1427.14 691.77 L1427.7 691.77 L1428.26 691.77 L1428.82 691.77 L1429.38 691.77 L1429.94 691.77 L1430.5 691.77 L1431.05 691.77 L1431.61 691.77 L1432.17 691.77 L1432.73 691.77 L1433.29 691.77 L1433.85 691.77 L1434.41 691.77 L1434.97 691.77 L1435.53 691.77 L1436.09 691.77 L1436.65 691.77 L1437.21 691.77 L1437.77 691.77 L1438.33 691.77 L1438.88 691.77 L1439.44 691.77 L1440 691.77 L1440.56 691.77 L1441.12 691.77 L1441.68 691.77 L1442.24 691.77 L1442.8 691.77 L1443.36 691.77 L1443.92 691.77 L1444.48 691.77 L1445.04 691.77 L1445.6 691.77 L1446.15 691.77 L1446.71 691.77 L1447.27 691.77 L1447.83 691.77 L1448.39 691.77 L1448.95 691.77 L1449.51 691.77 L1450.07 691.77 L1450.63 691.77 L1451.19 691.77 L1451.75 691.77 L1452.31 691.77 L1452.87 691.77 L1453.42 691.77 L1453.98 691.77 L1454.54 691.77 L1455.1 691.77 L1455.66 691.77 L1456.22 691.77 L1456.78 691.77 L1457.34 691.77 L1457.9 691.77 L1458.46 691.77 L1459.02 691.77 L1459.58 691.77 L1460.14 691.77 L1460.7 691.77 L1461.25 691.77 L1461.81 691.77 L1462.37 691.77 L1462.93 691.77 L1463.49 691.77 L1464.05 691.77 L1464.61 691.77 L1465.17 691.77 L1465.73 691.77 L1466.29 691.77 L1466.85 691.77 L1467.41 691.77 L1467.97 691.77 L1468.52 691.77 L1469.08 691.77 L1469.64 691.77 L1470.2 691.77 L1470.76 691.77 L1471.32 691.77 L1471.88 691.77 L1472.44 691.77 L1473 691.77 L1473.56 691.77 L1474.12 691.77 L1474.68 691.77 L1475.24 691.77 L1475.79 691.77 L1476.35 691.77 L1476.91 691.77 L1477.47 691.77 L1478.03 691.77 L1478.59 691.77 L1479.15 691.77 L1479.71 691.77 L1480.27 691.77 L1480.83 691.77 L1481.39 691.77 L1481.95 691.77 L1482.51 691.77 L1483.07 691.77 L1483.62 691.77 L1484.18 691.77 L1484.74 691.77 L1485.3 691.77 L1485.86 691.77 L1486.42 691.77 L1486.98 691.77 L1487.54 691.77 L1488.1 691.77 L1488.66 691.77 L1489.22 691.77 L1489.78 691.77 L1490.34 691.77 L1490.89 691.77 L1491.45 691.77 L1492.01 691.77 L1492.57 691.77 L1493.13 691.77 L1493.69 691.77 L1494.25 691.77 L1494.81 691.77 L1495.37 691.77 L1495.93 691.77 L1496.49 691.77 L1497.05 691.77 L1497.61 691.77 L1498.16 691.77 L1498.72 691.77 L1499.28 691.77 L1499.84 691.77 L1500.4 691.77 L1500.96 691.77 L1501.52 691.77 L1502.08 691.77 L1502.64 691.77 L1503.2 691.77 L1503.76 691.77 L1504.32 691.77 L1504.88 691.77 L1505.44 691.77 L1505.99 691.77 L1506.55 691.77 L1507.11 691.77 L1507.67 691.77 L1508.23 691.77 L1508.79 691.77 L1509.35 691.77 L1509.91 691.77 L1510.47 691.77 L1511.03 691.77 L1511.59 691.77 L1512.15 691.77 L1512.71 691.77 L1513.26 691.77 L1513.82 691.77 L1514.38 691.77 L1514.94 691.77 L1515.5 691.77 L1516.06 691.77 L1516.62 691.77 L1517.18 691.77 L1517.74 691.77 L1518.3 691.77 L1518.86 691.77 L1519.42 691.77 L1519.98 691.77 L1520.53 691.77 L1521.09 691.77 L1521.65 691.77 L1522.21 691.77 L1522.77 691.77 L1523.33 691.77 L1523.89 691.77 L1524.45 691.77 L1525.01 691.77 L1525.57 691.77 L1526.13 691.77 L1526.69 691.77 L1527.25 691.77 L1527.81 691.77 L1528.36 691.77 L1528.92 691.77 L1529.48 691.77 L1530.04 691.77 L1530.6 691.77 L1531.16 691.77 L1531.72 691.77 L1532.28 691.77 L1532.84 691.77 L1533.4 691.77 L1533.96 691.77 L1534.52 691.77 L1535.08 691.77 L1535.63 691.77 L1536.19 691.77 L1536.75 691.77 L1537.31 691.77 L1537.87 691.77 L1538.43 691.77 L1538.99 691.77 L1539.55 691.77 L1540.11 691.77 L1540.67 691.77 L1541.23 691.77 L1541.79 691.77 L1542.35 691.77 L1542.9 691.77 L1543.46 691.77 L1544.02 691.77 L1544.58 691.77 L1545.14 691.77 L1545.7 691.77 L1546.26 691.77 L1546.82 691.77 L1547.38 691.77 L1547.94 691.77 L1548.5 691.77 L1549.06 691.77 L1549.62 691.77 L1550.18 691.77 L1550.73 691.77 L1551.29 691.77 L1551.85 691.77 L1552.41 691.77 L1552.97 691.77 L1553.53 691.77 L1554.09 691.77 L1554.65 691.77 L1555.21 691.77 L1555.77 691.77 L1556.33 691.77 L1556.89 691.77 L1557.45 691.77 L1558 691.77 L1558.56 691.77 L1559.12 691.77 L1559.68 691.77 L1560.24 691.77 L1560.8 691.77 L1561.36 691.77 L1561.92 691.77 L1562.48 691.77 L1563.04 691.77 L1563.6 691.77 L1564.16 691.77 L1564.72 691.77 L1565.28 691.77 L1565.83 691.77 L1566.39 691.77 L1566.95 691.77 L1567.51 691.77 L1568.07 691.77 L1568.63 691.77 L1569.19 691.77 L1569.75 691.77 L1570.31 691.77 L1570.87 691.77 L1571.43 691.77 L1571.99 691.77 L1572.55 691.77 L1573.1 691.77 L1573.66 691.77 L1574.22 691.77 L1574.78 691.77 L1575.34 691.77 L1575.9 691.77 L1576.46 691.77 L1577.02 691.77 L1577.58 691.77 L1578.14 691.77 L1578.7 691.77 L1579.26 691.77 L1579.82 691.77 L1580.37 691.77 L1580.93 691.77 L1581.49 691.77 L1582.05 691.77 L1582.61 691.77 L1583.17 691.77 L1583.73 691.77 L1584.29 691.77 L1584.85 691.77 L1585.41 691.77 L1585.97 691.77 L1586.53 691.77 L1587.09 691.77 L1587.65 691.77 L1588.2 691.77 L1588.76 691.77 L1589.32 691.77 L1589.88 691.77 L1590.44 691.77 L1591 691.77 L1591.56 691.77 L1592.12 691.77 L1592.68 691.77 L1593.24 691.77 L1593.8 691.77 L1594.36 691.77 L1594.92 691.77 L1595.47 691.77 L1596.03 691.77 L1596.59 691.77 L1597.15 691.77 L1597.71 691.77 L1598.27 691.77 L1598.83 691.77 L1599.39 691.77 L1599.95 691.77 L1600.51 691.77 L1601.07 691.77 L1601.63 691.77 L1602.19 691.77 L1602.74 691.77 L1603.3 691.77 L1603.86 691.77 L1604.42 691.77 L1604.98 691.77 L1605.54 691.77 L1606.1 691.77 L1606.66 691.77 L1607.22 691.77 L1607.78 691.77 L1608.34 691.77 L1608.9 691.77 L1609.46 691.77 L1610.02 691.77 L1610.57 691.77 L1611.13 691.77 L1611.69 691.77 L1612.25 691.77 L1612.81 691.77 L1613.37 691.77 L1613.93 691.77 L1614.49 691.77 L1615.05 691.77 L1615.61 691.77 L1616.17 691.77 L1616.73 691.77 L1617.29 691.77 L1617.84 691.77 L1618.4 691.77 L1618.96 691.77 L1619.52 691.77 L1620.08 691.77 L1620.64 691.77 L1621.2 691.77 L1621.76 691.77 L1622.32 691.77 L1622.88 691.77 L1623.44 691.77 L1624 691.77 L1624.56 691.77 L1625.11 691.77 L1625.67 691.77 L1626.23 691.77 L1626.79 691.77 L1627.35 691.77 L1627.91 691.77 L1628.47 691.77 L1629.03 691.77 L1629.59 691.77 L1630.15 691.77 L1630.71 691.77 L1631.27 691.77 L1631.83 691.77 L1632.39 691.77 L1632.94 691.77 L1633.5 691.77 L1634.06 691.77 L1634.62 691.77 L1635.18 691.77 L1635.74 691.77 L1636.3 691.77 L1636.86 691.77 L1637.42 691.77 L1637.98 691.77 L1638.54 691.77 L1639.1 691.77 L1639.66 691.77 L1640.21 691.77 L1640.77 691.77 L1641.33 691.77 L1641.89 691.77 L1642.45 691.77 L1643.01 691.77 L1643.57 691.77 L1644.13 691.77 L1644.69 691.77 L1645.25 691.77 L1645.81 691.77 L1646.37 691.77 L1646.93 691.77 L1647.48 691.77 L1648.04 691.77 L1648.6 691.77 L1649.16 691.77 L1649.72 691.77 L1650.28 691.77 L1650.84 691.77 L1651.4 691.77 L1651.96 691.77 L1652.52 691.77 L1653.08 691.77 L1653.64 691.77 L1654.2 691.77 L1654.76 691.77 L1655.31 691.77 L1655.87 691.77 L1656.43 691.77 L1656.99 691.77 L1657.55 691.77 L1658.11 691.77 L1658.67 691.77 L1659.23 691.77 L1659.79 691.77 L1660.35 691.77 L1660.91 691.77 L1661.47 691.77 L1662.03 691.77 L1662.58 691.77 L1663.14 691.77 L1663.7 691.77 L1664.26 691.77 L1664.82 691.77 L1665.38 691.77 L1665.94 691.77 L1666.5 691.77 L1667.06 691.77 L1667.62 691.77 L1668.18 691.77 L1668.74 691.77 L1669.3 691.77 L1669.85 691.77 L1670.41 691.77 L1670.97 691.77 L1671.53 691.77 L1672.09 691.77 L1672.65 691.77 L1673.21 691.77 L1673.77 691.77 L1674.33 691.77 L1674.89 691.77 L1675.45 691.77 L1676.01 691.77 L1676.57 691.77 L1677.13 691.77 L1677.68 691.77 L1678.24 691.77 L1678.8 691.77 L1679.36 691.77 L1679.92 691.77 L1680.48 691.77 L1681.04 691.77 L1681.6 691.77 L1682.16 691.77 L1682.72 691.77 L1683.28 691.77 L1683.84 691.77 L1684.4 691.77 L1684.95 691.77 L1685.51 691.77 L1686.07 691.77 L1686.63 691.77 L1687.19 691.77 L1687.75 691.77 L1688.31 691.77 L1688.87 691.77 L1689.43 691.77 L1689.99 691.77 L1690.55 691.77 L1691.11 691.77 L1691.67 691.77 L1692.23 691.77 L1692.78 691.77 L1693.34 691.77 L1693.9 691.77 L1694.46 691.77 L1695.02 691.77 L1695.58 691.77 L1696.14 691.77 L1696.7 691.77 L1697.26 691.77 L1697.82 691.77 L1698.38 691.77 L1698.94 691.77 L1699.5 691.77 L1700.05 691.77 L1700.61 691.77 L1701.17 691.77 L1701.73 691.77 L1702.29 691.77 L1702.85 691.77 L1703.41 691.77 L1703.97 691.77 L1704.53 691.77 L1705.09 691.77 L1705.65 691.77 L1706.21 691.77 L1706.77 691.77 L1707.32 691.77 L1707.88 691.77 L1708.44 691.77 L1709 691.77 L1709.56 691.77 L1710.12 691.77 L1710.68 691.77 L1711.24 691.77 L1711.8 691.77 L1712.36 691.77 L1712.92 691.77 L1713.48 691.77 L1714.04 691.77 L1714.6 691.77 L1715.15 691.77 L1715.71 691.77 L1716.27 691.77 L1716.83 691.77 L1717.39 691.77 L1717.95 691.77 L1718.51 691.77 L1719.07 691.77 L1719.63 691.77 L1720.19 691.77 L1720.75 691.77 L1721.31 691.77 L1721.87 691.77 L1722.42 691.77 L1722.98 691.77 L1723.54 691.77 L1724.1 691.77 L1724.66 691.77 L1725.22 691.77 L1725.78 691.77 L1726.34 691.77 L1726.9 691.77 L1727.46 691.77 L1728.02 691.77 L1728.58 691.77 L1729.14 691.77 L1729.69 691.77 L1730.25 691.77 L1730.81 691.77 L1731.37 691.77 L1731.93 691.77 L1732.49 691.77 L1733.05 691.77 L1733.61 691.77 L1734.17 691.77 L1734.73 691.77 L1735.29 691.77 L1735.85 691.77 L1736.41 691.77 L1736.97 691.77 L1737.52 691.77 L1738.08 691.77 L1738.64 691.77 L1739.2 691.77 L1739.76 691.77 L1740.32 691.77 L1740.88 691.77 L1741.44 691.77 L1742 691.77 L1742.56 691.77 L1743.12 691.77 L1743.68 691.77 L1744.24 691.77 L1744.79 691.77 L1745.35 691.77 L1745.91 691.77 L1746.47 691.77 L1747.03 691.77 L1747.59 691.77 L1748.15 691.77 L1748.71 691.77 L1749.27 691.77 L1749.83 691.77 L1750.39 691.77 L1750.95 691.77 L1751.51 691.77 L1752.06 691.77 L1752.62 691.77 L1753.18 691.77 L1753.74 691.77 L1754.3 691.77 L1754.86 691.77 L1755.42 691.77 L1755.98 691.77 L1756.54 691.77 L1757.1 691.77 L1757.66 691.77 L1758.22 691.77 L1758.78 691.77 L1759.34 691.77 L1759.89 691.77 L1760.45 691.77 L1761.01 691.77 L1761.57 691.77 L1762.13 691.77 L1762.69 691.77 L1763.25 691.77 L1763.81 691.77 L1764.37 691.77 L1764.93 691.77 L1765.49 691.77 L1766.05 691.77 L1766.61 691.77 L1767.16 691.77 L1767.72 691.77 L1768.28 691.77 L1768.84 691.77 L1769.4 691.77 L1769.96 691.77 L1770.52 691.77 L1771.08 691.77 L1771.64 691.77 L1772.2 691.77 L1772.76 691.77 L1773.32 691.77 L1773.88 691.77 L1774.43 691.77 L1774.99 691.77 L1775.55 691.77 L1776.11 691.77 L1776.67 691.77 L1777.23 691.77 L1777.79 691.77 L1778.35 691.77 L1778.91 691.77 L1779.47 691.77 L1780.03 691.77 L1780.59 691.77 L1781.15 691.77 L1781.71 691.77 L1782.26 691.77 L1782.82 691.77 L1783.38 691.77 L1783.94 691.77 L1784.5 691.77 L1785.06 691.77 L1785.62 691.77 L1786.18 691.77 L1786.74 691.77 L1787.3 691.77 L1787.86 691.77 L1788.42 691.77 L1788.98 691.77 L1789.53 691.77 L1790.09 691.77 L1790.65 691.77 L1791.21 691.77 L1791.77 691.77 L1792.33 691.77 L1792.89 691.77 L1793.45 691.77 L1794.01 691.77 L1794.57 691.77 L1795.13 691.77 L1795.69 691.77 L1796.25 691.77 L1796.8 691.77 L1797.36 691.77 L1797.92 691.77 L1798.48 691.77 L1799.04 691.77 L1799.6 691.77 L1800.16 691.77 L1800.72 691.77 L1801.28 691.77 L1801.84 691.77 L1802.4 691.77 L1802.96 691.77 L1803.52 691.77 L1804.08 691.77 L1804.63 691.77 L1805.19 691.77 L1805.75 691.77 L1806.31 691.77 L1806.87 691.77 L1807.43 691.77 L1807.99 691.77 L1808.55 691.77 L1809.11 691.77 L1809.67 691.77 L1810.23 691.77 L1810.79 691.77 L1811.35 691.77 L1811.9 691.77 L1812.46 691.77 L1813.02 691.77 L1813.58 691.77 L1814.14 691.77 L1814.7 691.77 L1815.26 691.77 L1815.82 691.77 L1816.38 691.77 L1816.94 691.77 L1817.5 691.77 L1818.06 691.77 L1818.62 691.77 L1819.18 691.77 L1819.73 691.77 L1820.29 691.77 L1820.85 691.77 L1821.41 691.77 L1821.97 691.77 L1822.53 691.77 L1823.09 691.77 L1823.65 691.77 L1824.21 691.77 L1824.77 691.77 L1825.33 691.77 L1825.89 691.77 L1826.45 691.77 L1827 691.77 L1827.56 691.77 L1828.12 691.77 L1828.68 691.77 L1829.24 691.77 L1829.8 691.77 L1830.36 691.77 L1830.92 691.77 L1831.48 691.77 L1832.04 691.77 L1832.6 691.77 L1833.16 691.77 L1833.72 691.77 L1834.27 691.77 L1834.83 691.77 L1835.39 691.77 L1835.95 691.77 L1836.51 691.77 L1837.07 691.77 L1837.63 691.77 L1838.19 691.77 L1838.19 683.496 L1837.63 683.496 L1837.07 683.496 L1836.51 683.496 L1835.95 683.496 L1835.39 683.496 L1834.83 683.496 L1834.27 683.496 L1833.72 683.496 L1833.16 683.496 L1832.6 683.496 L1832.04 683.496 L1831.48 683.496 L1830.92 683.496 L1830.36 683.496 L1829.8 683.496 L1829.24 683.496 L1828.68 683.496 L1828.12 683.496 L1827.56 683.496 L1827 683.496 L1826.45 683.496 L1825.89 683.496 L1825.33 683.496 L1824.77 683.496 L1824.21 683.496 L1823.65 683.496 L1823.09 683.496 L1822.53 683.496 L1821.97 683.496 L1821.41 683.496 L1820.85 683.496 L1820.29 683.496 L1819.73 683.496 L1819.18 683.496 L1818.62 683.496 L1818.06 683.496 L1817.5 683.496 L1816.94 683.496 L1816.38 683.496 L1815.82 683.496 L1815.26 683.496 L1814.7 683.496 L1814.14 683.496 L1813.58 683.496 L1813.02 683.496 L1812.46 683.496 L1811.9 683.496 L1811.35 683.496 L1810.79 683.496 L1810.23 683.496 L1809.67 683.496 L1809.11 683.496 L1808.55 683.496 L1807.99 683.496 L1807.43 683.496 L1806.87 683.496 L1806.31 683.496 L1805.75 683.496 L1805.19 683.496 L1804.63 683.496 L1804.08 683.496 L1803.52 683.496 L1802.96 683.496 L1802.4 683.496 L1801.84 683.496 L1801.28 683.496 L1800.72 683.496 L1800.16 683.496 L1799.6 683.496 L1799.04 683.496 L1798.48 683.496 L1797.92 683.496 L1797.36 683.496 L1796.8 683.496 L1796.25 683.496 L1795.69 683.496 L1795.13 683.496 L1794.57 683.496 L1794.01 683.496 L1793.45 683.496 L1792.89 683.496 L1792.33 683.496 L1791.77 683.496 L1791.21 683.496 L1790.65 683.496 L1790.09 683.496 L1789.53 683.496 L1788.98 683.496 L1788.42 683.496 L1787.86 683.496 L1787.3 683.496 L1786.74 683.496 L1786.18 683.496 L1785.62 683.496 L1785.06 683.496 L1784.5 683.496 L1783.94 683.496 L1783.38 683.496 L1782.82 683.496 L1782.26 683.496 L1781.71 683.496 L1781.15 683.496 L1780.59 683.496 L1780.03 683.496 L1779.47 683.496 L1778.91 683.496 L1778.35 683.496 L1777.79 683.496 L1777.23 683.496 L1776.67 683.496 L1776.11 683.496 L1775.55 683.496 L1774.99 683.496 L1774.43 683.496 L1773.88 683.496 L1773.32 683.496 L1772.76 683.496 L1772.2 683.496 L1771.64 683.496 L1771.08 683.496 L1770.52 683.496 L1769.96 683.496 L1769.4 683.496 L1768.84 683.496 L1768.28 683.496 L1767.72 683.496 L1767.16 683.496 L1766.61 683.496 L1766.05 683.496 L1765.49 683.496 L1764.93 683.496 L1764.37 683.496 L1763.81 683.496 L1763.25 683.496 L1762.69 683.496 L1762.13 683.496 L1761.57 683.496 L1761.01 683.496 L1760.45 683.496 L1759.89 683.496 L1759.34 683.496 L1758.78 683.496 L1758.22 683.496 L1757.66 683.496 L1757.1 683.496 L1756.54 683.496 L1755.98 683.496 L1755.42 683.496 L1754.86 683.496 L1754.3 683.496 L1753.74 683.496 L1753.18 683.496 L1752.62 683.496 L1752.06 683.496 L1751.51 683.496 L1750.95 683.496 L1750.39 683.496 L1749.83 683.496 L1749.27 683.496 L1748.71 683.496 L1748.15 683.496 L1747.59 683.496 L1747.03 683.496 L1746.47 683.496 L1745.91 683.496 L1745.35 683.496 L1744.79 683.496 L1744.24 683.496 L1743.68 683.496 L1743.12 683.496 L1742.56 683.496 L1742 683.496 L1741.44 683.496 L1740.88 683.496 L1740.32 683.496 L1739.76 683.496 L1739.2 683.496 L1738.64 683.496 L1738.08 683.496 L1737.52 683.496 L1736.97 683.496 L1736.41 683.496 L1735.85 683.496 L1735.29 683.496 L1734.73 683.496 L1734.17 683.496 L1733.61 683.496 L1733.05 683.496 L1732.49 683.496 L1731.93 683.496 L1731.37 683.496 L1730.81 683.496 L1730.25 683.496 L1729.69 683.496 L1729.14 683.496 L1728.58 683.496 L1728.02 683.496 L1727.46 683.496 L1726.9 683.496 L1726.34 683.496 L1725.78 683.496 L1725.22 683.496 L1724.66 683.496 L1724.1 683.496 L1723.54 683.496 L1722.98 683.496 L1722.42 683.496 L1721.87 683.496 L1721.31 683.496 L1720.75 683.496 L1720.19 683.496 L1719.63 683.496 L1719.07 683.496 L1718.51 683.496 L1717.95 683.496 L1717.39 683.496 L1716.83 683.496 L1716.27 683.496 L1715.71 683.496 L1715.15 683.496 L1714.6 683.496 L1714.04 683.496 L1713.48 683.496 L1712.92 683.496 L1712.36 683.496 L1711.8 683.496 L1711.24 683.496 L1710.68 683.496 L1710.12 683.496 L1709.56 683.496 L1709 683.496 L1708.44 683.496 L1707.88 683.496 L1707.32 683.496 L1706.77 683.496 L1706.21 683.496 L1705.65 683.496 L1705.09 683.496 L1704.53 683.496 L1703.97 683.496 L1703.41 683.496 L1702.85 683.496 L1702.29 683.496 L1701.73 683.496 L1701.17 683.496 L1700.61 683.496 L1700.05 683.496 L1699.5 683.496 L1698.94 683.496 L1698.38 683.496 L1697.82 683.496 L1697.26 683.496 L1696.7 683.496 L1696.14 683.496 L1695.58 683.496 L1695.02 683.496 L1694.46 683.496 L1693.9 683.496 L1693.34 683.496 L1692.78 683.496 L1692.23 683.496 L1691.67 683.496 L1691.11 683.496 L1690.55 683.496 L1689.99 683.496 L1689.43 683.496 L1688.87 683.496 L1688.31 683.496 L1687.75 683.496 L1687.19 683.496 L1686.63 683.496 L1686.07 683.496 L1685.51 683.496 L1684.95 683.496 L1684.4 683.496 L1683.84 683.496 L1683.28 683.496 L1682.72 683.496 L1682.16 683.496 L1681.6 683.496 L1681.04 683.496 L1680.48 683.496 L1679.92 683.496 L1679.36 683.496 L1678.8 683.496 L1678.24 683.496 L1677.68 683.496 L1677.13 683.496 L1676.57 683.496 L1676.01 683.496 L1675.45 683.496 L1674.89 683.496 L1674.33 683.496 L1673.77 683.496 L1673.21 683.496 L1672.65 683.496 L1672.09 683.496 L1671.53 683.496 L1670.97 683.496 L1670.41 683.496 L1669.85 683.496 L1669.3 683.496 L1668.74 683.496 L1668.18 683.496 L1667.62 683.496 L1667.06 683.496 L1666.5 683.496 L1665.94 683.496 L1665.38 683.496 L1664.82 683.496 L1664.26 683.496 L1663.7 683.496 L1663.14 683.496 L1662.58 683.496 L1662.03 683.496 L1661.47 683.496 L1660.91 683.496 L1660.35 683.496 L1659.79 683.496 L1659.23 683.496 L1658.67 683.496 L1658.11 683.496 L1657.55 683.496 L1656.99 683.496 L1656.43 683.496 L1655.87 683.496 L1655.31 683.496 L1654.76 683.496 L1654.2 683.496 L1653.64 683.496 L1653.08 683.496 L1652.52 683.496 L1651.96 683.496 L1651.4 683.496 L1650.84 683.496 L1650.28 683.496 L1649.72 683.496 L1649.16 683.496 L1648.6 683.496 L1648.04 683.496 L1647.48 683.496 L1646.93 683.496 L1646.37 683.496 L1645.81 683.496 L1645.25 683.496 L1644.69 683.496 L1644.13 683.496 L1643.57 683.496 L1643.01 683.496 L1642.45 683.496 L1641.89 683.496 L1641.33 683.496 L1640.77 683.496 L1640.21 683.496 L1639.66 683.496 L1639.1 683.496 L1638.54 683.496 L1637.98 683.496 L1637.42 683.496 L1636.86 683.496 L1636.3 683.496 L1635.74 683.496 L1635.18 683.496 L1634.62 683.496 L1634.06 683.496 L1633.5 683.496 L1632.94 683.496 L1632.39 683.496 L1631.83 683.496 L1631.27 683.496 L1630.71 683.496 L1630.15 683.496 L1629.59 683.496 L1629.03 683.496 L1628.47 683.496 L1627.91 683.496 L1627.35 683.496 L1626.79 683.496 L1626.23 683.496 L1625.67 683.496 L1625.11 683.496 L1624.56 683.496 L1624 683.496 L1623.44 683.496 L1622.88 683.496 L1622.32 683.496 L1621.76 683.496 L1621.2 683.496 L1620.64 683.496 L1620.08 683.496 L1619.52 683.496 L1618.96 683.496 L1618.4 683.496 L1617.84 683.496 L1617.29 683.496 L1616.73 683.496 L1616.17 683.496 L1615.61 683.496 L1615.05 683.496 L1614.49 683.496 L1613.93 683.496 L1613.37 683.496 L1612.81 683.496 L1612.25 683.496 L1611.69 683.496 L1611.13 683.496 L1610.57 683.496 L1610.02 683.496 L1609.46 683.496 L1608.9 683.496 L1608.34 683.496 L1607.78 683.496 L1607.22 683.496 L1606.66 683.496 L1606.1 683.496 L1605.54 683.496 L1604.98 683.496 L1604.42 683.496 L1603.86 683.496 L1603.3 683.496 L1602.74 683.496 L1602.19 683.496 L1601.63 683.496 L1601.07 683.496 L1600.51 683.496 L1599.95 683.496 L1599.39 683.496 L1598.83 683.496 L1598.27 683.496 L1597.71 683.496 L1597.15 683.496 L1596.59 683.496 L1596.03 683.496 L1595.47 683.496 L1594.92 683.496 L1594.36 683.496 L1593.8 683.496 L1593.24 683.496 L1592.68 683.496 L1592.12 683.496 L1591.56 683.496 L1591 683.496 L1590.44 683.496 L1589.88 683.496 L1589.32 683.496 L1588.76 683.496 L1588.2 683.496 L1587.65 683.496 L1587.09 683.496 L1586.53 683.496 L1585.97 683.496 L1585.41 683.496 L1584.85 683.496 L1584.29 683.496 L1583.73 683.496 L1583.17 683.496 L1582.61 683.496 L1582.05 683.496 L1581.49 683.496 L1580.93 683.496 L1580.37 683.496 L1579.82 683.496 L1579.26 683.496 L1578.7 683.496 L1578.14 683.496 L1577.58 683.496 L1577.02 683.496 L1576.46 683.496 L1575.9 683.496 L1575.34 683.496 L1574.78 683.496 L1574.22 683.496 L1573.66 683.496 L1573.1 683.496 L1572.55 683.496 L1571.99 683.496 L1571.43 683.496 L1570.87 683.496 L1570.31 683.496 L1569.75 683.496 L1569.19 683.496 L1568.63 683.496 L1568.07 683.496 L1567.51 683.496 L1566.95 683.496 L1566.39 683.496 L1565.83 683.496 L1565.28 683.496 L1564.72 683.496 L1564.16 683.496 L1563.6 683.496 L1563.04 683.496 L1562.48 683.496 L1561.92 683.496 L1561.36 683.496 L1560.8 683.496 L1560.24 683.496 L1559.68 683.496 L1559.12 683.496 L1558.56 683.496 L1558 683.496 L1557.45 683.496 L1556.89 683.496 L1556.33 683.496 L1555.77 683.496 L1555.21 683.496 L1554.65 683.496 L1554.09 683.496 L1553.53 683.496 L1552.97 683.496 L1552.41 683.496 L1551.85 683.496 L1551.29 683.496 L1550.73 683.496 L1550.18 683.496 L1549.62 683.496 L1549.06 683.496 L1548.5 683.496 L1547.94 683.496 L1547.38 683.496 L1546.82 683.496 L1546.26 683.496 L1545.7 683.496 L1545.14 683.496 L1544.58 683.496 L1544.02 683.496 L1543.46 683.496 L1542.9 683.496 L1542.35 683.496 L1541.79 683.496 L1541.23 683.496 L1540.67 683.496 L1540.11 683.496 L1539.55 683.496 L1538.99 683.496 L1538.43 683.496 L1537.87 683.496 L1537.31 683.496 L1536.75 683.496 L1536.19 683.496 L1535.63 683.496 L1535.08 683.496 L1534.52 683.496 L1533.96 683.496 L1533.4 683.496 L1532.84 683.496 L1532.28 683.496 L1531.72 683.496 L1531.16 683.496 L1530.6 683.496 L1530.04 683.496 L1529.48 683.496 L1528.92 683.496 L1528.36 683.496 L1527.81 683.496 L1527.25 683.496 L1526.69 683.496 L1526.13 683.496 L1525.57 683.496 L1525.01 683.496 L1524.45 683.496 L1523.89 683.496 L1523.33 683.496 L1522.77 683.496 L1522.21 683.496 L1521.65 683.496 L1521.09 683.496 L1520.53 683.496 L1519.98 683.496 L1519.42 683.496 L1518.86 683.496 L1518.3 683.496 L1517.74 683.496 L1517.18 683.496 L1516.62 683.496 L1516.06 683.496 L1515.5 683.496 L1514.94 683.496 L1514.38 683.496 L1513.82 683.496 L1513.26 683.496 L1512.71 683.496 L1512.15 683.496 L1511.59 683.496 L1511.03 683.496 L1510.47 683.496 L1509.91 683.496 L1509.35 683.496 L1508.79 683.496 L1508.23 683.496 L1507.67 683.496 L1507.11 683.496 L1506.55 683.496 L1505.99 683.496 L1505.44 683.496 L1504.88 683.496 L1504.32 683.496 L1503.76 683.496 L1503.2 683.496 L1502.64 683.496 L1502.08 683.496 L1501.52 683.496 L1500.96 683.496 L1500.4 683.496 L1499.84 683.496 L1499.28 683.496 L1498.72 683.496 L1498.16 683.496 L1497.61 683.496 L1497.05 683.496 L1496.49 683.496 L1495.93 683.496 L1495.37 683.496 L1494.81 683.496 L1494.25 683.496 L1493.69 683.496 L1493.13 683.496 L1492.57 683.496 L1492.01 683.496 L1491.45 683.496 L1490.89 683.496 L1490.34 683.496 L1489.78 683.496 L1489.22 683.496 L1488.66 683.496 L1488.1 683.496 L1487.54 683.496 L1486.98 683.496 L1486.42 683.496 L1485.86 683.496 L1485.3 683.496 L1484.74 683.496 L1484.18 683.496 L1483.62 683.496 L1483.07 683.496 L1482.51 683.496 L1481.95 683.496 L1481.39 683.496 L1480.83 683.496 L1480.27 683.496 L1479.71 683.496 L1479.15 683.496 L1478.59 683.496 L1478.03 683.496 L1477.47 683.496 L1476.91 683.496 L1476.35 683.496 L1475.79 683.496 L1475.24 683.496 L1474.68 683.496 L1474.12 683.496 L1473.56 683.496 L1473 683.496 L1472.44 683.496 L1471.88 683.496 L1471.32 683.496 L1470.76 683.496 L1470.2 683.496 L1469.64 683.496 L1469.08 683.496 L1468.52 683.496 L1467.97 683.496 L1467.41 683.496 L1466.85 683.496 L1466.29 683.496 L1465.73 683.496 L1465.17 683.496 L1464.61 683.496 L1464.05 683.496 L1463.49 683.496 L1462.93 683.496 L1462.37 683.496 L1461.81 683.496 L1461.25 683.496 L1460.7 683.496 L1460.14 683.496 L1459.58 683.496 L1459.02 683.496 L1458.46 683.496 L1457.9 683.496 L1457.34 683.496 L1456.78 683.496 L1456.22 683.496 L1455.66 683.496 L1455.1 683.496 L1454.54 683.496 L1453.98 683.496 L1453.42 683.496 L1452.87 683.496 L1452.31 683.496 L1451.75 683.496 L1451.19 683.496 L1450.63 683.496 L1450.07 683.496 L1449.51 683.496 L1448.95 683.496 L1448.39 683.496 L1447.83 683.496 L1447.27 683.496 L1446.71 683.496 L1446.15 683.496 L1445.6 683.496 L1445.04 683.496 L1444.48 683.496 L1443.92 683.496 L1443.36 683.496 L1442.8 683.496 L1442.24 683.496 L1441.68 683.496 L1441.12 683.496 L1440.56 683.496 L1440 683.496 L1439.44 683.496 L1438.88 683.496 L1438.33 683.496 L1437.77 683.496 L1437.21 683.496 L1436.65 683.496 L1436.09 683.496 L1435.53 683.496 L1434.97 683.496 L1434.41 683.496 L1433.85 683.496 L1433.29 683.496 L1432.73 683.496 L1432.17 683.496 L1431.61 683.496 L1431.05 683.496 L1430.5 683.496 L1429.94 683.496 L1429.38 683.496 L1428.82 683.496 L1428.26 683.496 L1427.7 683.496 L1427.14 683.496 L1426.58 683.496 L1426.02 683.496 L1425.46 683.496 L1424.9 683.496 L1424.34 683.496 L1423.78 683.496 L1423.23 683.496 L1422.67 683.496 L1422.11 683.496 L1421.55 683.496 L1420.99 683.496 L1420.43 683.496 L1419.87 683.496 L1419.31 683.496 L1418.75 683.496 L1418.19 683.496 L1417.63 683.496 L1417.07 683.496 L1416.51 683.496 L1415.95 683.496 L1415.4 683.496 L1414.84 683.496 L1414.28 683.496 L1413.72 683.496 L1413.16 683.496 L1412.6 683.496 L1412.04 683.496 L1411.48 683.496 L1410.92 683.496 L1410.36 683.496 L1409.8 683.496 L1409.24 683.496 L1408.68 683.496 L1408.13 683.496 L1407.57 683.496 L1407.01 683.496 L1406.45 683.496 L1405.89 683.496 L1405.33 683.496 L1404.77 683.496 L1404.21 683.496 L1403.65 683.496 L1403.09 683.496 L1402.53 683.496 L1401.97 683.496 L1401.41 683.496 L1400.86 683.496 L1400.3 683.496 L1399.74 683.496 L1399.18 683.496 L1398.62 683.496 L1398.06 683.496 L1397.5 683.496 L1396.94 683.496 L1396.38 683.496 L1395.82 683.496 L1395.26 683.496 L1394.7 683.496 L1394.14 683.496 L1393.58 683.496 L1393.03 683.496 L1392.47 683.496 L1391.91 683.496 L1391.35 683.496 L1390.79 683.496 L1390.23 683.496 L1389.67 683.496 L1389.11 683.496 L1388.55 683.496 L1387.99 683.496 L1387.43 683.496 L1386.87 683.496 L1386.31 683.496 L1385.76 683.496 L1385.2 683.496 L1384.64 683.496 L1384.08 683.496 L1383.52 683.496 L1382.96 683.496 L1382.4 683.496 L1381.84 683.496 L1381.28 683.496 L1380.72 683.496 L1380.16 683.496 L1379.6 683.496 L1379.04 683.496 L1378.49 683.496 L1377.93 683.496 L1377.37 683.496 L1376.81 683.496 L1376.25 683.496 L1375.69 683.496 L1375.13 683.496 L1374.57 683.496 L1374.01 683.496 L1373.45 683.496 L1372.89 683.496 L1372.33 683.496 L1371.77 683.496 L1371.21 683.496 L1370.66 683.496 L1370.1 683.496 L1369.54 683.496 L1368.98 683.496 L1368.42 683.496 L1367.86 683.496 L1367.3 683.496 L1366.74 683.496 L1366.18 683.496 L1365.62 683.496 L1365.06 683.496 L1364.5 683.496 L1363.94 683.496 L1363.39 683.496 L1362.83 683.496 L1362.27 683.496 L1361.71 683.496 L1361.15 683.496 L1360.59 683.496 L1360.03 683.496 L1359.47 683.496 L1358.91 683.496 L1358.35 683.496 L1357.79 683.496 L1357.23 683.496 L1356.67 683.496 L1356.12 683.496 L1355.56 683.496 L1355 683.496 L1354.44 683.496 L1353.88 683.496 L1353.32 683.496 L1352.76 683.496 L1352.2 683.496 L1351.64 683.496 L1351.08 683.496 L1350.52 683.496 L1349.96 683.496 L1349.4 683.496 L1348.84 683.496 L1348.29 683.496 L1347.73 683.496 L1347.17 683.496 L1346.61 683.496 L1346.05 683.496 L1345.49 683.496 L1344.93 683.496 L1344.37 683.496 L1343.81 683.496 L1343.25 683.496 L1342.69 683.496 L1342.13 683.496 L1341.57 683.496 L1341.02 683.496 L1340.46 683.496 L1339.9 683.496 L1339.34 683.496 L1338.78 683.496 L1338.22 683.496 L1337.66 683.496 L1337.1 683.496 L1336.54 683.496 L1335.98 683.496 L1335.42 683.496 L1334.86 683.496 L1334.3 683.496 L1333.75 683.496 L1333.19 683.496 L1332.63 683.496 L1332.07 683.496 L1331.51 683.496 L1330.95 683.496 L1330.39 683.496 L1329.83 683.496 L1329.27 683.496 L1328.71 683.496 L1328.15 683.496 L1327.59 683.496 L1327.03 683.496 L1326.47 683.496 L1325.92 683.496 L1325.36 683.496 L1324.8 683.496 L1324.24 683.496 L1323.68 683.496 L1323.12 683.496 L1322.56 683.496 L1322 683.496 L1321.44 683.496 L1320.88 683.496 L1320.32 683.496 L1319.76 683.496 L1319.2 683.496 L1318.65 683.496 L1318.09 683.496 L1317.53 683.496 L1316.97 683.496 L1316.41 683.496 L1315.85 683.496 L1315.29 683.496 L1314.73 683.496 L1314.17 683.496 L1313.61 683.496 L1313.05 683.496 L1312.49 683.496 L1311.93 683.496 L1311.38 683.496 L1310.82 683.496 L1310.26 683.496 L1309.7 683.496 L1309.14 683.496 L1308.58 683.496 L1308.02 683.496 L1307.46 683.496 L1306.9 683.496 L1306.34 683.496 L1305.78 683.496 L1305.22 683.496 L1304.66 683.496 L1304.1 683.496 L1303.55 683.496 L1302.99 683.496 L1302.43 683.496 L1301.87 683.496 L1301.31 683.496 L1300.75 683.496 L1300.19 683.496 L1299.63 683.496 L1299.07 683.496 L1298.51 683.496 L1297.95 683.496 L1297.39 683.496 L1296.83 683.496 L1296.28 683.496 L1295.72 683.496 L1295.16 683.496 L1294.6 683.496 L1294.04 683.496 L1293.48 683.496 L1292.92 683.496 L1292.36 683.496 L1291.8 683.496 L1291.24 683.496 L1290.68 683.496 L1290.12 683.496 L1289.56 683.496 L1289 683.496 L1288.45 683.496 L1287.89 683.496 L1287.33 683.496 L1286.77 683.496 L1286.21 683.496 L1285.65 683.496 L1285.09 683.496 L1284.53 683.496 L1283.97 683.496 L1283.41 683.496 L1282.85 683.496 L1282.29 683.496 L1281.73 683.496 L1281.18 683.496 L1280.62 683.496 L1280.06 683.496 L1279.5 683.496 L1278.94 683.496 L1278.38 683.496 L1277.82 683.496 L1277.26 683.496 L1276.7 683.496 L1276.14 683.496 L1275.58 683.496 L1275.02 683.496 L1274.46 683.496 L1273.91 683.496 L1273.35 683.496 L1272.79 683.496 L1272.23 683.496 L1271.67 683.496 L1271.11 683.496 L1270.55 683.496 L1269.99 683.496 L1269.43 683.496 L1268.87 683.496 L1268.31 683.496 L1267.75 683.496 L1267.19 683.496 L1266.63 683.496 L1266.08 683.496 L1265.52 683.496 L1264.96 683.496 L1264.4 683.496 L1263.84 683.496 L1263.28 683.496 L1262.72 683.496 L1262.16 683.496 L1261.6 683.496 L1261.04 683.496 L1260.48 683.496 L1259.92 683.496 L1259.36 683.496 L1258.81 683.496 L1258.25 683.496 L1257.69 683.496 L1257.13 683.496 L1256.57 683.496 L1256.01 683.496 L1255.45 683.496 L1254.89 683.496 L1254.33 683.496 L1253.77 683.496 L1253.21 683.496 L1252.65 683.496 L1252.09 683.496 L1251.54 683.496 L1250.98 683.496 L1250.42 683.496 L1249.86 683.496 L1249.3 683.496 L1248.74 683.496 L1248.18 683.496 L1247.62 683.496 L1247.06 683.496 L1246.5 683.496 L1245.94 683.496 L1245.38 683.496 L1244.82 683.496 L1244.26 683.496 L1243.71 683.496 L1243.15 683.496 L1242.59 683.496 L1242.03 683.496 L1241.47 683.496 L1240.91 683.496 L1240.35 683.496 L1239.79 683.496 L1239.23 683.496 L1238.67 683.496 L1238.11 683.496 L1237.55 683.496 L1236.99 683.496 L1236.44 683.496 L1235.88 683.496 L1235.32 683.496 L1234.76 683.496 L1234.2 683.496 L1233.64 683.496 L1233.08 683.496 L1232.52 683.496 L1231.96 683.496 L1231.4 683.496 L1230.84 683.496 L1230.28 683.496 L1229.72 683.496 L1229.17 683.496 L1228.61 683.496 L1228.05 683.496 L1227.49 683.496 L1226.93 683.496 L1226.37 683.496 L1225.81 683.496 L1225.25 683.496 L1224.69 683.496 L1224.13 683.496 L1223.57 683.496 L1223.01 683.496 L1222.45 683.496 L1221.89 683.496 L1221.34 683.496 L1220.78 683.496 L1220.22 683.496 L1219.66 683.496 L1219.1 683.496 L1218.54 683.496 L1217.98 683.496 L1217.42 683.496 L1216.86 683.496 L1216.3 683.496 L1215.74 683.496 L1215.18 683.496 L1214.62 683.496 L1214.07 683.496 L1213.51 683.496 L1212.95 683.496 L1212.39 683.496 L1211.83 683.496 L1211.27 683.496 L1210.71 683.496 L1210.15 683.496 L1209.59 683.496 L1209.03 683.496 L1208.47 683.496 L1207.91 683.496 L1207.35 683.496 L1206.8 683.496 L1206.24 683.496 L1205.68 683.496 L1205.12 683.496 L1204.56 683.496 L1204 683.496 L1203.44 683.496 L1202.88 683.496 L1202.32 683.496 L1201.76 683.496 L1201.2 683.496 L1200.64 683.496 L1200.08 683.496 L1199.52 683.496 L1198.97 683.496 L1198.41 683.496 L1197.85 683.496 L1197.29 683.496 L1196.73 683.496 L1196.17 683.496 L1195.61 683.496 L1195.05 683.496 L1194.49 683.496 L1193.93 683.496 L1193.37 683.496 L1192.81 683.496 L1192.25 683.496 L1191.7 683.496 L1191.14 683.496 L1190.58 683.496 L1190.02 683.496 L1189.46 683.496 L1188.9 683.496 L1188.34 683.496 L1187.78 683.496 L1187.22 683.496 L1186.66 683.496 L1186.1 683.496 L1185.54 683.496 L1184.98 683.496 L1184.43 683.496 L1183.87 683.496 L1183.31 683.496 L1182.75 683.496 L1182.19 683.496 L1181.63 683.496 L1181.07 683.496 L1180.51 683.496 L1179.95 683.496 L1179.39 683.496 L1178.83 683.496 L1178.27 683.496 L1177.71 683.496 L1177.15 683.496 L1176.6 683.496 L1176.04 683.496 L1175.48 683.496 L1174.92 683.496 L1174.36 683.496 L1173.8 683.496 L1173.24 683.496 L1172.68 683.496 L1172.12 683.496 L1171.56 683.496 L1171 683.496 L1170.44 683.496 L1169.88 683.496 L1169.33 683.496 L1168.77 683.496 L1168.21 683.496 L1167.65 683.496 L1167.09 683.496 L1166.53 683.496 L1165.97 683.496 L1165.41 683.496 L1164.85 683.496 L1164.29 683.496 L1163.73 683.496 L1163.17 683.496 L1162.61 683.496 L1162.05 683.496 L1161.5 683.496 L1160.94 683.496 L1160.38 683.496 L1159.82 683.496 L1159.26 683.496 L1158.7 683.496 L1158.14 683.496 L1157.58 683.496 L1157.02 683.496 L1156.46 683.496 L1155.9 683.496 L1155.34 683.496 L1154.78 683.496 L1154.23 683.496 L1153.67 683.496 L1153.11 683.496 L1152.55 683.496 L1151.99 683.496 L1151.43 683.496 L1150.87 683.496 L1150.31 683.496 L1149.75 683.496 L1149.19 683.496 L1148.63 683.496 L1148.07 683.496 L1147.51 683.496 L1146.96 683.496 L1146.4 683.496 L1145.84 683.496 L1145.28 683.496 L1144.72 683.496 L1144.16 683.496 L1143.6 683.496 L1143.04 683.496 L1142.48 683.496 L1141.92 683.496 L1141.36 683.496 L1140.8 683.496 L1140.24 683.496 L1139.68 683.496 L1139.13 683.496 L1138.57 683.496 L1138.01 683.496 L1137.45 683.496 L1136.89 683.496 L1136.33 683.496 L1135.77 683.496 L1135.21 683.496 L1134.65 683.496 L1134.09 683.496 L1133.53 683.496 L1132.97 683.496 L1132.41 683.496 L1131.86 683.496 L1131.3 683.496 L1130.74 683.496 L1130.18 683.496 L1129.62 683.496 L1129.06 683.496 L1128.5 683.496 L1127.94 683.496 L1127.38 683.496 L1126.82 683.496 L1126.26 683.496 L1125.7 683.496 L1125.14 683.496 L1124.59 683.496 L1124.03 683.496 L1123.47 683.496 L1122.91 683.496 L1122.35 683.496 L1121.79 683.496 L1121.23 683.496 L1120.67 683.496 L1120.11 683.496 L1119.55 683.496 L1118.99 683.496 L1118.43 683.496 L1117.87 683.496 L1117.31 683.496 L1116.76 683.496 L1116.2 683.496 L1115.64 683.496 L1115.08 683.496 L1114.52 683.496 L1113.96 683.496 L1113.4 683.496 L1112.84 683.496 L1112.28 683.496 L1111.72 683.496 L1111.16 683.496 L1110.6 683.496 L1110.04 683.496 L1109.49 683.496 L1108.93 683.496 L1108.37 683.496 L1107.81 683.496 L1107.25 683.496 L1106.69 683.496 L1106.13 683.496 L1105.57 683.496 L1105.01 683.496 L1104.45 683.496 L1103.89 683.496 L1103.33 683.496 L1102.77 683.496 L1102.22 683.496 L1101.66 683.496 L1101.1 683.496 L1100.54 683.496 L1099.98 683.496 L1099.42 683.496 L1098.86 683.496 L1098.3 683.496 L1097.74 683.496 L1097.18 683.496 L1096.62 683.496 L1096.06 683.496 L1095.5 683.496 L1094.94 683.496 L1094.39 683.496 L1093.83 683.496 L1093.27 683.496 L1092.71 683.496 L1092.15 683.496 L1091.59 683.496 L1091.03 683.496 L1090.47 683.496 L1089.91 683.496 L1089.35 683.496 L1088.79 683.496 L1088.23 683.496 L1087.67 683.496 L1087.12 683.496 L1086.56 683.496 L1086 683.496 L1085.44 683.496 L1084.88 683.496 L1084.32 683.496 L1083.76 683.496 L1083.2 683.496 L1082.64 683.496 L1082.08 683.496 L1081.52 683.496 L1080.96 683.496 L1080.4 683.496 L1079.85 683.496 L1079.29 683.496 L1078.73 683.496 L1078.17 683.496 L1077.61 683.496 L1077.05 683.496 L1076.49 683.496 L1075.93 683.496 L1075.37 683.496 L1074.81 683.496 L1074.25 683.496 L1073.69 683.496 L1073.13 683.496 L1072.57 683.496 L1072.02 683.496 L1071.46 683.496 L1070.9 683.496 L1070.34 683.496 L1069.78 683.496 L1069.22 683.496 L1068.66 683.496 L1068.1 683.496 L1067.54 683.496 L1066.98 683.496 L1066.42 683.496 L1065.86 683.496 L1065.3 683.496 L1064.75 683.496 L1064.19 683.496 L1063.63 683.496 L1063.07 683.496 L1062.51 683.496 L1061.95 683.496 L1061.39 683.496 L1060.83 683.496 L1060.27 683.496 L1059.71 683.496 L1059.15 683.496 L1058.59 683.496 L1058.03 683.496 L1057.48 683.496 L1056.92 683.496 L1056.36 683.496 L1055.8 683.496 L1055.24 683.496 L1054.68 683.496 L1054.12 683.496 L1053.56 683.496 L1053 683.496 L1052.44 683.496 L1051.88 683.496 L1051.32 683.496 L1050.76 683.496 L1050.2 683.496 L1049.65 683.496 L1049.09 683.496 L1048.53 683.496 L1047.97 683.496 L1047.41 683.496 L1046.85 683.496 L1046.29 683.496 L1045.73 683.496 L1045.17 683.496 L1044.61 683.496 L1044.05 683.496 L1043.49 683.496 L1042.93 683.496 L1042.38 683.496 L1041.82 683.496 L1041.26 683.496 L1040.7 683.496 L1040.14 683.496 L1039.58 683.496 L1039.02 683.496 L1038.46 683.496 L1037.9 683.496 L1037.34 683.496 L1036.78 683.496 L1036.22 683.496 L1035.66 683.496 L1035.1 683.496 L1034.55 683.496 L1033.99 683.496 L1033.43 683.496 L1032.87 683.496 L1032.31 683.496 L1031.75 683.496 L1031.19 683.496 L1030.63 683.496 L1030.07 683.496 L1029.51 683.496 L1028.95 683.496 L1028.39 683.496 L1027.83 683.496 L1027.28 683.496 L1026.72 683.496 L1026.16 683.496 L1025.6 683.496 L1025.04 683.496 L1024.48 683.496 L1023.92 683.496 L1023.36 683.496 L1022.8 683.496 L1022.24 683.496 L1021.68 683.496 L1021.12 683.496 L1020.56 683.496 L1020.01 683.496 L1019.45 683.496 L1018.89 683.496 L1018.33 683.496 L1017.77 683.496 L1017.21 683.496 L1016.65 683.496 L1016.09 683.496 L1015.53 683.496 L1014.97 683.496 L1014.41 683.496 L1013.85 683.496 L1013.29 683.496 L1012.73 683.496 L1012.18 683.496 L1011.62 683.496 L1011.06 683.496 L1010.5 683.496 L1009.94 683.496 L1009.38 683.496 L1008.82 683.496 L1008.26 683.496 L1007.7 683.496 L1007.14 683.496 L1006.58 683.496 L1006.02 683.496 L1005.46 683.496 L1004.91 683.496 L1004.35 683.496 L1003.79 683.496 L1003.23 683.496 L1002.67 683.496 L1002.11 683.496 L1001.55 683.496 L1000.99 683.496 L1000.43 683.496 L999.872 683.496 L999.313 683.496 L998.754 683.496 L998.194 683.496 L997.635 683.496 L997.076 683.496 L996.517 683.496 L995.957 683.496 L995.398 683.496 L994.839 683.496 L994.28 683.496 L993.72 683.496 L993.161 683.496 L992.602 683.496 L992.043 683.496 L991.483 683.496 L990.924 683.496 L990.365 683.496 L989.806 683.496 L989.246 683.496 L988.687 683.496 L988.128 683.496 L987.569 683.496 L987.009 683.496 L986.45 683.496 L985.891 683.496 L985.332 683.496 L984.772 683.496 L984.213 683.496 L983.654 683.496 L983.095 683.496 L982.535 683.496 L981.976 683.496 L981.417 683.496 L980.858 683.496 L980.298 683.496 L979.739 683.496 L979.18 683.496 L978.621 683.496 L978.061 683.496 L977.502 683.496 L976.943 683.496 L976.384 683.496 L975.824 683.496 L975.265 683.496 L974.706 683.496 L974.147 683.496 L973.587 683.496 L973.028 683.496 L972.469 683.496 L971.91 683.496 L971.35 683.496 L970.791 683.496 L970.232 683.496 L969.673 683.496 L969.113 683.496 L968.554 683.496 L967.995 683.496 L967.436 683.496 L966.876 683.496 L966.317 683.496 L965.758 683.496 L965.199 683.496 L964.639 683.496 L964.08 683.496 L963.521 683.496 L962.962 683.496 L962.402 683.496 L961.843 683.496 L961.284 683.496 L960.725 683.496 L960.165 683.496 L959.606 683.496 L959.047 683.496 L958.488 683.496 L957.928 683.496 L957.369 683.496 L956.81 683.496 L956.251 683.496 L955.691 683.496 L955.132 683.496 L954.573 683.496 L954.014 683.496 L953.454 683.496 L952.895 683.496 L952.336 683.496 L951.777 683.496 L951.217 683.496 L950.658 683.496 L950.099 683.496 L949.54 683.496 L948.98 683.496 L948.421 683.496 L947.862 683.496 L947.303 683.496 L946.743 683.496 L946.184 683.496 L945.625 683.496 L945.066 683.496 L944.506 683.496 L943.947 683.496 L943.388 683.496 L942.829 683.496 L942.269 683.496 L941.71 683.496 L941.151 683.496 L940.592 683.496 L940.032 683.496 L939.473 683.496 L938.914 683.496 L938.355 683.496 L937.795 683.496 L937.236 683.496 L936.677 683.496 L936.118 683.496 L935.558 683.496 L934.999 683.496 L934.44 683.496 L933.881 683.496 L933.321 683.496 L932.762 683.496 L932.203 683.496 L931.644 683.496 L931.084 683.496 L930.525 683.496 L929.966 683.496 L929.406 683.496 L928.847 683.496 L928.288 683.496 L927.729 683.496 L927.169 683.496 L926.61 683.496 L926.051 683.496 L925.492 683.496 L924.932 683.496 L924.373 683.496 L923.814 683.496 L923.255 683.496 L922.695 683.496 L922.136 683.496 L921.577 683.496 L921.018 683.496 L920.458 683.496 L919.899 683.496 L919.34 683.496 L918.781 683.496 L918.221 683.496 L917.662 683.496 L917.103 683.496 L916.544 683.496 L915.984 683.496 L915.425 683.496 L914.866 683.496 L914.307 683.496 L913.747 683.496 L913.188 683.496 L912.629 683.496 L912.07 683.496 L911.51 683.496 L910.951 683.496 L910.392 683.496 L909.833 683.496 L909.273 683.496 L908.714 683.496 L908.155 683.496 L907.596 683.496 L907.036 683.496 L906.477 683.496 L905.918 683.496 L905.359 683.496 L904.799 683.496 L904.24 683.496 L903.681 683.496 L903.122 683.496 L902.562 683.496 L902.003 683.496 L901.444 683.496 L900.885 683.496 L900.325 683.496 L899.766 683.496 L899.207 683.496 L898.648 683.496 L898.088 683.496 L897.529 683.496 L896.97 683.496 L896.411 683.496 L895.851 683.496 L895.292 683.496 L894.733 683.496 L894.174 683.496 L893.614 683.496 L893.055 683.496 L892.496 683.496 L891.937 683.496 L891.377 683.496 L890.818 683.496 L890.259 683.496 L889.7 683.496 L889.14 683.496 L888.581 683.496 L888.022 683.496 L887.463 683.496 L886.903 683.496 L886.344 683.496 L885.785 683.496 L885.226 683.496 L884.666 683.496 L884.107 683.496 L883.548 683.496 L882.989 683.496 L882.429 683.496 L881.87 683.496 L881.311 683.496 L880.752 683.496 L880.192 683.496 L879.633 683.496 L879.074 683.496 L878.515 683.496 L877.955 683.496 L877.396 683.496 L876.837 683.496 L876.278 683.496 L875.718 683.496 L875.159 683.496 L874.6 683.496 L874.041 683.496 L873.481 683.496 L872.922 683.496 L872.363 683.496 L871.804 683.496 L871.244 683.496 L870.685 683.496 L870.126 683.496 L869.567 683.496 L869.007 683.496 L868.448 683.496 L867.889 683.496 L867.33 683.496 L866.77 683.496 L866.211 683.496 L865.652 683.496 L865.093 683.496 L864.533 683.496 L863.974 683.496 L863.415 683.496 L862.856 683.496 L862.296 683.496 L861.737 683.496 L861.178 683.496 L860.619 683.496 L860.059 683.496 L859.5 683.496 L858.941 683.496 L858.382 683.496 L857.822 683.496 L857.263 683.496 L856.704 683.496 L856.145 683.496 L855.585 683.496 L855.026 683.496 L854.467 683.496 L853.908 683.496 L853.348 683.496 L852.789 683.496 L852.23 683.496 L851.671 683.496 L851.111 683.496 L850.552 683.496 L849.993 683.496 L849.434 683.496 L848.874 683.496 L848.315 683.496 L847.756 683.496 L847.197 683.496 L846.637 683.496 L846.078 683.496 L845.519 683.496 L844.96 683.496 L844.4 683.496 L843.841 683.496 L843.282 683.496 L842.723 683.496 L842.163 683.496 L841.604 683.496 L841.045 683.496 L840.486 683.496 L839.926 683.496 L839.367 683.496 L838.808 683.496 L838.249 683.496 L837.689 683.496 L837.13 683.496 L836.571 683.496 L836.012 683.496 L835.452 683.496 L834.893 683.496 L834.334 683.496 L833.775 683.496 L833.215 683.496 L832.656 683.496 L832.097 683.496 L831.538 683.496 L830.978 683.496 L830.419 683.496 L829.86 683.496 L829.301 683.496 L828.741 683.496 L828.182 683.496 L827.623 683.496 L827.064 683.496 L826.504 683.496 L825.945 683.496 L825.386 683.496 L824.827 683.496 L824.267 683.496 L823.708 683.496 L823.149 683.496 L822.59 683.496 L822.03 683.496 L821.471 683.496 L820.912 683.496 L820.353 683.496 L819.793 683.496 L819.234 683.496 L818.675 683.496 L818.116 683.496 L817.556 683.496 L816.997 683.496 L816.438 683.496 L815.879 683.496 L815.319 683.496 L814.76 683.496 L814.201 683.496 L813.642 683.496 L813.082 683.496 L812.523 683.496 L811.964 683.496 L811.405 683.496 L810.845 683.496 L810.286 683.496 L809.727 683.496 L809.168 683.496 L808.608 683.496 L808.049 683.496 L807.49 683.496 L806.931 683.496 L806.371 683.496 L805.812 683.496 L805.253 683.496 L804.693 683.496 L804.134 683.496 L803.575 683.496 L803.016 683.496 L802.456 683.496 L801.897 683.496 L801.338 683.496 L800.779 683.496 L800.219 683.496 L799.66 683.496 L799.101 683.496 L798.542 683.496 L797.982 683.496 L797.423 683.496 L796.864 683.496 L796.305 683.496 L795.745 683.496 L795.186 683.496 L794.627 683.496 L794.068 683.496 L793.508 683.496 L792.949 683.496 L792.39 683.496 L791.831 683.496 L791.271 683.496 L790.712 683.496 L790.153 683.496 L789.594 683.496 L789.034 683.496 L788.475 683.496 L787.916 683.496 L787.357 683.496 L786.797 683.496 L786.238 683.496 L785.679 683.496 L785.12 683.496 L784.56 683.496 L784.001 683.496 L783.442 683.496 L782.883 683.496 L782.323 683.496 L781.764 683.496 L781.205 683.496 L780.646 683.496 L780.086 683.496 L779.527 683.496 L778.968 683.496 L778.409 683.496 L777.849 683.496 L777.29 683.496 L776.731 683.496 L776.172 683.496 L775.612 683.496 L775.053 683.496 L774.494 683.496 L773.935 683.496 L773.375 683.496 L772.816 683.496 L772.257 683.496 L771.698 683.496 L771.138 683.496 L770.579 683.496 L770.02 683.496 L769.461 683.496 L768.901 683.496 L768.342 683.496 L767.783 683.496 L767.224 683.496 L766.664 683.496 L766.105 683.496 L765.546 683.496 L764.987 683.496 L764.427 683.496 L763.868 683.496 L763.309 683.496 L762.75 683.496 L762.19 683.496 L761.631 683.496 L761.072 683.496 L760.513 683.496 L759.953 683.496 L759.394 683.496 L758.835 683.496 L758.276 683.496 L757.716 683.496 L757.157 683.496 L756.598 683.496 L756.039 683.496 L755.479 683.496 L754.92 683.496 L754.361 683.496 L753.802 683.496 L753.242 683.496 L752.683 683.496 L752.124 683.496 L751.565 683.496 L751.005 683.496 L750.446 683.496 L749.887 683.496 L749.328 683.496 L748.768 683.496 L748.209 683.496 L747.65 683.496 L747.091 683.496 L746.531 683.496 L745.972 683.496 L745.413 683.496 L744.854 683.496 L744.294 683.496 L743.735 683.496 L743.176 683.496 L742.617 683.496 L742.057 683.496 L741.498 683.496 L740.939 683.496 L740.38 683.496 L739.82 683.496 L739.261 683.496 L738.702 683.496 L738.143 683.496 L737.583 683.496 L737.024 683.496 L736.465 683.496 L735.906 683.496 L735.346 683.496 L734.787 683.496 L734.228 683.496 L733.669 683.496 L733.109 683.496 L732.55 683.496 L731.991 683.496 L731.432 683.496 L730.872 683.496 L730.313 683.496 L729.754 683.496 L729.195 683.496 L728.635 683.496 L728.076 683.496 L727.517 683.496 L726.958 683.496 L726.398 683.496 L725.839 683.496 L725.28 683.496 L724.721 683.496 L724.161 683.496 L723.602 683.496 L723.043 683.496 L722.484 683.496 L721.924 683.496 L721.365 683.496 L720.806 683.496 L720.247 683.496  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.633 720.806,687.633 721.365,687.633 721.924,687.633 722.484,687.633 723.043,687.633 723.602,687.633 724.161,687.633 724.721,687.633 725.28,687.633 725.839,687.633 726.398,687.633 726.958,687.633 727.517,687.633 728.076,687.633 728.635,687.633 729.195,687.633 729.754,687.633 730.313,687.633 730.872,687.633 731.432,687.633 731.991,687.633 732.55,687.633 733.109,687.633 733.669,687.633 734.228,687.633 734.787,687.633 735.346,687.633 735.906,687.633 736.465,687.633 737.024,687.633 737.583,687.633 738.143,687.633 738.702,687.633 739.261,687.633 739.82,687.633 740.38,687.633 740.939,687.633 741.498,687.633 742.057,687.633 742.617,687.633 743.176,687.633 743.735,687.633 744.294,687.633 744.854,687.633 745.413,687.633 745.972,687.633 746.531,687.633 747.091,687.633 747.65,687.633 748.209,687.633 748.768,687.633 749.328,687.633 749.887,687.633 750.446,687.633 751.005,687.633 751.565,687.633 752.124,687.633 752.683,687.633 753.242,687.633 753.802,687.633 754.361,687.633 754.92,687.633 755.479,687.633 756.039,687.633 756.598,687.633 757.157,687.633 757.716,687.633 758.276,687.633 758.835,687.633 759.394,687.633 759.953,687.633 760.513,687.633 761.072,687.633 761.631,687.633 762.19,687.633 762.75,687.633 763.309,687.633 763.868,687.633 764.427,687.633 764.987,687.633 765.546,687.633 766.105,687.633 766.664,687.633 767.224,687.633 767.783,687.633 768.342,687.633 768.901,687.633 769.461,687.633 770.02,687.633 770.579,687.633 771.138,687.633 771.698,687.633 772.257,687.633 772.816,687.633 773.375,687.633 773.935,687.633 774.494,687.633 775.053,687.633 775.612,687.633 776.172,687.633 776.731,687.633 777.29,687.633 777.849,687.633 778.409,687.633 778.968,687.633 779.527,687.633 780.086,687.633 780.646,687.633 781.205,687.633 781.764,687.633 782.323,687.633 782.883,687.633 783.442,687.633 784.001,687.633 784.56,687.633 785.12,687.633 785.679,687.633 786.238,687.633 786.797,687.633 787.357,687.633 787.916,687.633 788.475,687.633 789.034,687.633 789.594,687.633 790.153,687.633 790.712,687.633 791.271,687.633 791.831,687.633 792.39,687.633 792.949,687.633 793.508,687.633 794.068,687.633 794.627,687.633 795.186,687.633 795.745,687.633 796.305,687.633 796.864,687.633 797.423,687.633 797.982,687.633 798.542,687.633 799.101,687.633 799.66,687.633 800.219,687.633 800.779,687.633 801.338,687.633 801.897,687.633 802.456,687.633 803.016,687.633 803.575,687.633 804.134,687.633 804.693,687.633 805.253,687.633 805.812,687.633 806.371,687.633 806.931,687.633 807.49,687.633 808.049,687.633 808.608,687.633 809.168,687.633 809.727,687.633 810.286,687.633 810.845,687.633 811.405,687.633 811.964,687.633 812.523,687.633 813.082,687.633 813.642,687.633 814.201,687.633 814.76,687.633 815.319,687.633 815.879,687.633 816.438,687.633 816.997,687.633 817.556,687.633 818.116,687.633 818.675,687.633 819.234,687.633 819.793,687.633 820.353,687.633 820.912,687.633 821.471,687.633 822.03,687.633 822.59,687.633 823.149,687.633 823.708,687.633 824.267,687.633 824.827,687.633 825.386,687.633 825.945,687.633 826.504,687.633 827.064,687.633 827.623,687.633 828.182,687.633 828.741,687.633 829.301,687.633 829.86,687.633 830.419,687.633 830.978,687.633 831.538,687.633 832.097,687.633 832.656,687.633 833.215,687.633 833.775,687.633 834.334,687.633 834.893,687.633 835.452,687.633 836.012,687.633 836.571,687.633 837.13,687.633 837.689,687.633 838.249,687.633 838.808,687.633 839.367,687.633 839.926,687.633 840.486,687.633 841.045,687.633 841.604,687.633 842.163,687.633 842.723,687.633 843.282,687.633 843.841,687.633 844.4,687.633 844.96,687.633 845.519,687.633 846.078,687.633 846.637,687.633 847.197,687.633 847.756,687.633 848.315,687.633 848.874,687.633 849.434,687.633 849.993,687.633 850.552,687.633 851.111,687.633 851.671,687.633 852.23,687.633 852.789,687.633 853.348,687.633 853.908,687.633 854.467,687.633 855.026,687.633 855.585,687.633 856.145,687.633 856.704,687.633 857.263,687.633 857.822,687.633 858.382,687.633 858.941,687.633 859.5,687.633 860.059,687.633 860.619,687.633 861.178,687.633 861.737,687.633 862.296,687.633 862.856,687.633 863.415,687.633 863.974,687.633 864.533,687.633 865.093,687.633 865.652,687.633 866.211,687.633 866.77,687.633 867.33,687.633 867.889,687.633 868.448,687.633 869.007,687.633 869.567,687.633 870.126,687.633 870.685,687.633 871.244,687.633 871.804,687.633 872.363,687.633 872.922,687.633 873.481,687.633 874.041,687.633 874.6,687.633 875.159,687.633 875.718,687.633 876.278,687.633 876.837,687.633 877.396,687.633 877.955,687.633 878.515,687.633 879.074,687.633 879.633,687.633 880.192,687.633 880.752,687.633 881.311,687.633 881.87,687.633 882.429,687.633 882.989,687.633 883.548,687.633 884.107,687.633 884.666,687.633 885.226,687.633 885.785,687.633 886.344,687.633 886.903,687.633 887.463,687.633 888.022,687.633 888.581,687.633 889.14,687.633 889.7,687.633 890.259,687.633 890.818,687.633 891.377,687.633 891.937,687.633 892.496,687.633 893.055,687.633 893.614,687.633 894.174,687.633 894.733,687.633 895.292,687.633 895.851,687.633 896.411,687.633 896.97,687.633 897.529,687.633 898.088,687.633 898.648,687.633 899.207,687.633 899.766,687.633 900.325,687.633 900.885,687.633 901.444,687.633 902.003,687.633 902.562,687.633 903.122,687.633 903.681,687.633 904.24,687.633 904.799,687.633 905.359,687.633 905.918,687.633 906.477,687.633 907.036,687.633 907.596,687.633 908.155,687.633 908.714,687.633 909.273,687.633 909.833,687.633 910.392,687.633 910.951,687.633 911.51,687.633 912.07,687.633 912.629,687.633 913.188,687.633 913.747,687.633 914.307,687.633 914.866,687.633 915.425,687.633 915.984,687.633 916.544,687.633 917.103,687.633 917.662,687.633 918.221,687.633 918.781,687.633 919.34,687.633 919.899,687.633 920.458,687.633 921.018,687.633 921.577,687.633 922.136,687.633 922.695,687.633 923.255,687.633 923.814,687.633 924.373,687.633 924.932,687.633 925.492,687.633 926.051,687.633 926.61,687.633 927.169,687.633 927.729,687.633 928.288,687.633 928.847,687.633 929.406,687.633 929.966,687.633 930.525,687.633 931.084,687.633 931.644,687.633 932.203,687.633 932.762,687.633 933.321,687.633 933.881,687.633 934.44,687.633 934.999,687.633 935.558,687.633 936.118,687.633 936.677,687.633 937.236,687.633 937.795,687.633 938.355,687.633 938.914,687.633 939.473,687.633 940.032,687.633 940.592,687.633 941.151,687.633 941.71,687.633 942.269,687.633 942.829,687.633 943.388,687.633 943.947,687.633 944.506,687.633 945.066,687.633 945.625,687.633 946.184,687.633 946.743,687.633 947.303,687.633 947.862,687.633 948.421,687.633 948.98,687.633 949.54,687.633 950.099,687.633 950.658,687.633 951.217,687.633 951.777,687.633 952.336,687.633 952.895,687.633 953.454,687.633 954.014,687.633 954.573,687.633 955.132,687.633 955.691,687.633 956.251,687.633 956.81,687.633 957.369,687.633 957.928,687.633 958.488,687.633 959.047,687.633 959.606,687.633 960.165,687.633 960.725,687.633 961.284,687.633 961.843,687.633 962.402,687.633 962.962,687.633 963.521,687.633 964.08,687.633 964.639,687.633 965.199,687.633 965.758,687.633 966.317,687.633 966.876,687.633 967.436,687.633 967.995,687.633 968.554,687.633 969.113,687.633 969.673,687.633 970.232,687.633 970.791,687.633 971.35,687.633 971.91,687.633 972.469,687.633 973.028,687.633 973.587,687.633 974.147,687.633 974.706,687.633 975.265,687.633 975.824,687.633 976.384,687.633 976.943,687.633 977.502,687.633 978.061,687.633 978.621,687.633 979.18,687.633 979.739,687.633 980.298,687.633 980.858,687.633 981.417,687.633 981.976,687.633 982.535,687.633 983.095,687.633 983.654,687.633 984.213,687.633 984.772,687.633 985.332,687.633 985.891,687.633 986.45,687.633 987.009,687.633 987.569,687.633 988.128,687.633 988.687,687.633 989.246,687.633 989.806,687.633 990.365,687.633 990.924,687.633 991.483,687.633 992.043,687.633 992.602,687.633 993.161,687.633 993.72,687.633 994.28,687.633 994.839,687.633 995.398,687.633 995.957,687.633 996.517,687.633 997.076,687.633 997.635,687.633 998.194,687.633 998.754,687.633 999.313,687.633 999.872,687.633 1000.43,687.633 1000.99,687.633 1001.55,687.633 1002.11,687.633 1002.67,687.633 1003.23,687.633 1003.79,687.633 1004.35,687.633 1004.91,687.633 1005.46,687.633 1006.02,687.633 1006.58,687.633 1007.14,687.633 1007.7,687.633 1008.26,687.633 1008.82,687.633 1009.38,687.633 1009.94,687.633 1010.5,687.633 1011.06,687.633 1011.62,687.633 1012.18,687.633 1012.73,687.633 1013.29,687.633 1013.85,687.633 1014.41,687.633 1014.97,687.633 1015.53,687.633 1016.09,687.633 1016.65,687.633 1017.21,687.633 1017.77,687.633 1018.33,687.633 1018.89,687.633 1019.45,687.633 1020.01,687.633 1020.56,687.633 1021.12,687.633 1021.68,687.633 1022.24,687.633 1022.8,687.633 1023.36,687.633 1023.92,687.633 1024.48,687.633 1025.04,687.633 1025.6,687.633 1026.16,687.633 1026.72,687.633 1027.28,687.633 1027.83,687.633 1028.39,687.633 1028.95,687.633 1029.51,687.633 1030.07,687.633 1030.63,687.633 1031.19,687.633 1031.75,687.633 1032.31,687.633 1032.87,687.633 1033.43,687.633 1033.99,687.633 1034.55,687.633 1035.1,687.633 1035.66,687.633 1036.22,687.633 1036.78,687.633 1037.34,687.633 1037.9,687.633 1038.46,687.633 1039.02,687.633 1039.58,687.633 1040.14,687.633 1040.7,687.633 1041.26,687.633 1041.82,687.633 1042.38,687.633 1042.93,687.633 1043.49,687.633 1044.05,687.633 1044.61,687.633 1045.17,687.633 1045.73,687.633 1046.29,687.633 1046.85,687.633 1047.41,687.633 1047.97,687.633 1048.53,687.633 1049.09,687.633 1049.65,687.633 1050.2,687.633 1050.76,687.633 1051.32,687.633 1051.88,687.633 1052.44,687.633 1053,687.633 1053.56,687.633 1054.12,687.633 1054.68,687.633 1055.24,687.633 1055.8,687.633 1056.36,687.633 1056.92,687.633 1057.48,687.633 1058.03,687.633 1058.59,687.633 1059.15,687.633 1059.71,687.633 1060.27,687.633 1060.83,687.633 1061.39,687.633 1061.95,687.633 1062.51,687.633 1063.07,687.633 1063.63,687.633 1064.19,687.633 1064.75,687.633 1065.3,687.633 1065.86,687.633 1066.42,687.633 1066.98,687.633 1067.54,687.633 1068.1,687.633 1068.66,687.633 1069.22,687.633 1069.78,687.633 1070.34,687.633 1070.9,687.633 1071.46,687.633 1072.02,687.633 1072.57,687.633 1073.13,687.633 1073.69,687.633 1074.25,687.633 1074.81,687.633 1075.37,687.633 1075.93,687.633 1076.49,687.633 1077.05,687.633 1077.61,687.633 1078.17,687.633 1078.73,687.633 1079.29,687.633 1079.85,687.633 1080.4,687.633 1080.96,687.633 1081.52,687.633 1082.08,687.633 1082.64,687.633 1083.2,687.633 1083.76,687.633 1084.32,687.633 1084.88,687.633 1085.44,687.633 1086,687.633 1086.56,687.633 1087.12,687.633 1087.67,687.633 1088.23,687.633 1088.79,687.633 1089.35,687.633 1089.91,687.633 1090.47,687.633 1091.03,687.633 1091.59,687.633 1092.15,687.633 1092.71,687.633 1093.27,687.633 1093.83,687.633 1094.39,687.633 1094.94,687.633 1095.5,687.633 1096.06,687.633 1096.62,687.633 1097.18,687.633 1097.74,687.633 1098.3,687.633 1098.86,687.633 1099.42,687.633 1099.98,687.633 1100.54,687.633 1101.1,687.633 1101.66,687.633 1102.22,687.633 1102.77,687.633 1103.33,687.633 1103.89,687.633 1104.45,687.633 1105.01,687.633 1105.57,687.633 1106.13,687.633 1106.69,687.633 1107.25,687.633 1107.81,687.633 1108.37,687.633 1108.93,687.633 1109.49,687.633 1110.04,687.633 1110.6,687.633 1111.16,687.633 1111.72,687.633 1112.28,687.633 1112.84,687.633 1113.4,687.633 1113.96,687.633 1114.52,687.633 1115.08,687.633 1115.64,687.633 1116.2,687.633 1116.76,687.633 1117.31,687.633 1117.87,687.633 1118.43,687.633 1118.99,687.633 1119.55,687.633 1120.11,687.633 1120.67,687.633 1121.23,687.633 1121.79,687.633 1122.35,687.633 1122.91,687.633 1123.47,687.633 1124.03,687.633 1124.59,687.633 1125.14,687.633 1125.7,687.633 1126.26,687.633 1126.82,687.633 1127.38,687.633 1127.94,687.633 1128.5,687.633 1129.06,687.633 1129.62,687.633 1130.18,687.633 1130.74,687.633 1131.3,687.633 1131.86,687.633 1132.41,687.633 1132.97,687.633 1133.53,687.633 1134.09,687.633 1134.65,687.633 1135.21,687.633 1135.77,687.633 1136.33,687.633 1136.89,687.633 1137.45,687.633 1138.01,687.633 1138.57,687.633 1139.13,687.633 1139.68,687.633 1140.24,687.633 1140.8,687.633 1141.36,687.633 1141.92,687.633 1142.48,687.633 1143.04,687.633 1143.6,687.633 1144.16,687.633 1144.72,687.633 1145.28,687.633 1145.84,687.633 1146.4,687.633 1146.96,687.633 1147.51,687.633 1148.07,687.633 1148.63,687.633 1149.19,687.633 1149.75,687.633 1150.31,687.633 1150.87,687.633 1151.43,687.633 1151.99,687.633 1152.55,687.633 1153.11,687.633 1153.67,687.633 1154.23,687.633 1154.78,687.633 1155.34,687.633 1155.9,687.633 1156.46,687.633 1157.02,687.633 1157.58,687.633 1158.14,687.633 1158.7,687.633 1159.26,687.633 1159.82,687.633 1160.38,687.633 1160.94,687.633 1161.5,687.633 1162.05,687.633 1162.61,687.633 1163.17,687.633 1163.73,687.633 1164.29,687.633 1164.85,687.633 1165.41,687.633 1165.97,687.633 1166.53,687.633 1167.09,687.633 1167.65,687.633 1168.21,687.633 1168.77,687.633 1169.33,687.633 1169.88,687.633 1170.44,687.633 1171,687.633 1171.56,687.633 1172.12,687.633 1172.68,687.633 1173.24,687.633 1173.8,687.633 1174.36,687.633 1174.92,687.633 1175.48,687.633 1176.04,687.633 1176.6,687.633 1177.15,687.633 1177.71,687.633 1178.27,687.633 1178.83,687.633 1179.39,687.633 1179.95,687.633 1180.51,687.633 1181.07,687.633 1181.63,687.633 1182.19,687.633 1182.75,687.633 1183.31,687.633 1183.87,687.633 1184.43,687.633 1184.98,687.633 1185.54,687.633 1186.1,687.633 1186.66,687.633 1187.22,687.633 1187.78,687.633 1188.34,687.633 1188.9,687.633 1189.46,687.633 1190.02,687.633 1190.58,687.633 1191.14,687.633 1191.7,687.633 1192.25,687.633 1192.81,687.633 1193.37,687.633 1193.93,687.633 1194.49,687.633 1195.05,687.633 1195.61,687.633 1196.17,687.633 1196.73,687.633 1197.29,687.633 1197.85,687.633 1198.41,687.633 1198.97,687.633 1199.52,687.633 1200.08,687.633 1200.64,687.633 1201.2,687.633 1201.76,687.633 1202.32,687.633 1202.88,687.633 1203.44,687.633 1204,687.633 1204.56,687.633 1205.12,687.633 1205.68,687.633 1206.24,687.633 1206.8,687.633 1207.35,687.633 1207.91,687.633 1208.47,687.633 1209.03,687.633 1209.59,687.633 1210.15,687.633 1210.71,687.633 1211.27,687.633 1211.83,687.633 1212.39,687.633 1212.95,687.633 1213.51,687.633 1214.07,687.633 1214.62,687.633 1215.18,687.633 1215.74,687.633 1216.3,687.633 1216.86,687.633 1217.42,687.633 1217.98,687.633 1218.54,687.633 1219.1,687.633 1219.66,687.633 1220.22,687.633 1220.78,687.633 1221.34,687.633 1221.89,687.633 1222.45,687.633 1223.01,687.633 1223.57,687.633 1224.13,687.633 1224.69,687.633 1225.25,687.633 1225.81,687.633 1226.37,687.633 1226.93,687.633 1227.49,687.633 1228.05,687.633 1228.61,687.633 1229.17,687.633 1229.72,687.633 1230.28,687.633 1230.84,687.633 1231.4,687.633 1231.96,687.633 1232.52,687.633 1233.08,687.633 1233.64,687.633 1234.2,687.633 1234.76,687.633 1235.32,687.633 1235.88,687.633 1236.44,687.633 1236.99,687.633 1237.55,687.633 1238.11,687.633 1238.67,687.633 1239.23,687.633 1239.79,687.633 1240.35,687.633 1240.91,687.633 1241.47,687.633 1242.03,687.633 1242.59,687.633 1243.15,687.633 1243.71,687.633 1244.26,687.633 1244.82,687.633 1245.38,687.633 1245.94,687.633 1246.5,687.633 1247.06,687.633 1247.62,687.633 1248.18,687.633 1248.74,687.633 1249.3,687.633 1249.86,687.633 1250.42,687.633 1250.98,687.633 1251.54,687.633 1252.09,687.633 1252.65,687.633 1253.21,687.633 1253.77,687.633 1254.33,687.633 1254.89,687.633 1255.45,687.633 1256.01,687.633 1256.57,687.633 1257.13,687.633 1257.69,687.633 1258.25,687.633 1258.81,687.633 1259.36,687.633 1259.92,687.633 1260.48,687.633 1261.04,687.633 1261.6,687.633 1262.16,687.633 1262.72,687.633 1263.28,687.633 1263.84,687.633 1264.4,687.633 1264.96,687.633 1265.52,687.633 1266.08,687.633 1266.63,687.633 1267.19,687.633 1267.75,687.633 1268.31,687.633 1268.87,687.633 1269.43,687.633 1269.99,687.633 1270.55,687.633 1271.11,687.633 1271.67,687.633 1272.23,687.633 1272.79,687.633 1273.35,687.633 1273.91,687.633 1274.46,687.633 1275.02,687.633 1275.58,687.633 1276.14,687.633 1276.7,687.633 1277.26,687.633 1277.82,687.633 1278.38,687.633 1278.94,687.633 1279.5,687.633 1280.06,687.633 1280.62,687.633 1281.18,687.633 1281.73,687.633 1282.29,687.633 1282.85,687.633 1283.41,687.633 1283.97,687.633 1284.53,687.633 1285.09,687.633 1285.65,687.633 1286.21,687.633 1286.77,687.633 1287.33,687.633 1287.89,687.633 1288.45,687.633 1289,687.633 1289.56,687.633 1290.12,687.633 1290.68,687.633 1291.24,687.633 1291.8,687.633 1292.36,687.633 1292.92,687.633 1293.48,687.633 1294.04,687.633 1294.6,687.633 1295.16,687.633 1295.72,687.633 1296.28,687.633 1296.83,687.633 1297.39,687.633 1297.95,687.633 1298.51,687.633 1299.07,687.633 1299.63,687.633 1300.19,687.633 1300.75,687.633 1301.31,687.633 1301.87,687.633 1302.43,687.633 1302.99,687.633 1303.55,687.633 1304.1,687.633 1304.66,687.633 1305.22,687.633 1305.78,687.633 1306.34,687.633 1306.9,687.633 1307.46,687.633 1308.02,687.633 1308.58,687.633 1309.14,687.633 1309.7,687.633 1310.26,687.633 1310.82,687.633 1311.38,687.633 1311.93,687.633 1312.49,687.633 1313.05,687.633 1313.61,687.633 1314.17,687.633 1314.73,687.633 1315.29,687.633 1315.85,687.633 1316.41,687.633 1316.97,687.633 1317.53,687.633 1318.09,687.633 1318.65,687.633 1319.2,687.633 1319.76,687.633 1320.32,687.633 1320.88,687.633 1321.44,687.633 1322,687.633 1322.56,687.633 1323.12,687.633 1323.68,687.633 1324.24,687.633 1324.8,687.633 1325.36,687.633 1325.92,687.633 1326.47,687.633 1327.03,687.633 1327.59,687.633 1328.15,687.633 1328.71,687.633 1329.27,687.633 1329.83,687.633 1330.39,687.633 1330.95,687.633 1331.51,687.633 1332.07,687.633 1332.63,687.633 1333.19,687.633 1333.75,687.633 1334.3,687.633 1334.86,687.633 1335.42,687.633 1335.98,687.633 1336.54,687.633 1337.1,687.633 1337.66,687.633 1338.22,687.633 1338.78,687.633 1339.34,687.633 1339.9,687.633 1340.46,687.633 1341.02,687.633 1341.57,687.633 1342.13,687.633 1342.69,687.633 1343.25,687.633 1343.81,687.633 1344.37,687.633 1344.93,687.633 1345.49,687.633 1346.05,687.633 1346.61,687.633 1347.17,687.633 1347.73,687.633 1348.29,687.633 1348.84,687.633 1349.4,687.633 1349.96,687.633 1350.52,687.633 1351.08,687.633 1351.64,687.633 1352.2,687.633 1352.76,687.633 1353.32,687.633 1353.88,687.633 1354.44,687.633 1355,687.633 1355.56,687.633 1356.12,687.633 1356.67,687.633 1357.23,687.633 1357.79,687.633 1358.35,687.633 1358.91,687.633 1359.47,687.633 1360.03,687.633 1360.59,687.633 1361.15,687.633 1361.71,687.633 1362.27,687.633 1362.83,687.633 1363.39,687.633 1363.94,687.633 1364.5,687.633 1365.06,687.633 1365.62,687.633 1366.18,687.633 1366.74,687.633 1367.3,687.633 1367.86,687.633 1368.42,687.633 1368.98,687.633 1369.54,687.633 1370.1,687.633 1370.66,687.633 1371.21,687.633 1371.77,687.633 1372.33,687.633 1372.89,687.633 1373.45,687.633 1374.01,687.633 1374.57,687.633 1375.13,687.633 1375.69,687.633 1376.25,687.633 1376.81,687.633 1377.37,687.633 1377.93,687.633 1378.49,687.633 1379.04,687.633 1379.6,687.633 1380.16,687.633 1380.72,687.633 1381.28,687.633 1381.84,687.633 1382.4,687.633 1382.96,687.633 1383.52,687.633 1384.08,687.633 1384.64,687.633 1385.2,687.633 1385.76,687.633 1386.31,687.633 1386.87,687.633 1387.43,687.633 1387.99,687.633 1388.55,687.633 1389.11,687.633 1389.67,687.633 1390.23,687.633 1390.79,687.633 1391.35,687.633 1391.91,687.633 1392.47,687.633 1393.03,687.633 1393.58,687.633 1394.14,687.633 1394.7,687.633 1395.26,687.633 1395.82,687.633 1396.38,687.633 1396.94,687.633 1397.5,687.633 1398.06,687.633 1398.62,687.633 1399.18,687.633 1399.74,687.633 1400.3,687.633 1400.86,687.633 1401.41,687.633 1401.97,687.633 1402.53,687.633 1403.09,687.633 1403.65,687.633 1404.21,687.633 1404.77,687.633 1405.33,687.633 1405.89,687.633 1406.45,687.633 1407.01,687.633 1407.57,687.633 1408.13,687.633 1408.68,687.633 1409.24,687.633 1409.8,687.633 1410.36,687.633 1410.92,687.633 1411.48,687.633 1412.04,687.633 1412.6,687.633 1413.16,687.633 1413.72,687.633 1414.28,687.633 1414.84,687.633 1415.4,687.633 1415.95,687.633 1416.51,687.633 1417.07,687.633 1417.63,687.633 1418.19,687.633 1418.75,687.633 1419.31,687.633 1419.87,687.633 1420.43,687.633 1420.99,687.633 1421.55,687.633 1422.11,687.633 1422.67,687.633 1423.23,687.633 1423.78,687.633 1424.34,687.633 1424.9,687.633 1425.46,687.633 1426.02,687.633 1426.58,687.633 1427.14,687.633 1427.7,687.633 1428.26,687.633 1428.82,687.633 1429.38,687.633 1429.94,687.633 1430.5,687.633 1431.05,687.633 1431.61,687.633 1432.17,687.633 1432.73,687.633 1433.29,687.633 1433.85,687.633 1434.41,687.633 1434.97,687.633 1435.53,687.633 1436.09,687.633 1436.65,687.633 1437.21,687.633 1437.77,687.633 1438.33,687.633 1438.88,687.633 1439.44,687.633 1440,687.633 1440.56,687.633 1441.12,687.633 1441.68,687.633 1442.24,687.633 1442.8,687.633 1443.36,687.633 1443.92,687.633 1444.48,687.633 1445.04,687.633 1445.6,687.633 1446.15,687.633 1446.71,687.633 1447.27,687.633 1447.83,687.633 1448.39,687.633 1448.95,687.633 1449.51,687.633 1450.07,687.633 1450.63,687.633 1451.19,687.633 1451.75,687.633 1452.31,687.633 1452.87,687.633 1453.42,687.633 1453.98,687.633 1454.54,687.633 1455.1,687.633 1455.66,687.633 1456.22,687.633 1456.78,687.633 1457.34,687.633 1457.9,687.633 1458.46,687.633 1459.02,687.633 1459.58,687.633 1460.14,687.633 1460.7,687.633 1461.25,687.633 1461.81,687.633 1462.37,687.633 1462.93,687.633 1463.49,687.633 1464.05,687.633 1464.61,687.633 1465.17,687.633 1465.73,687.633 1466.29,687.633 1466.85,687.633 1467.41,687.633 1467.97,687.633 1468.52,687.633 1469.08,687.633 1469.64,687.633 1470.2,687.633 1470.76,687.633 1471.32,687.633 1471.88,687.633 1472.44,687.633 1473,687.633 1473.56,687.633 1474.12,687.633 1474.68,687.633 1475.24,687.633 1475.79,687.633 1476.35,687.633 1476.91,687.633 1477.47,687.633 1478.03,687.633 1478.59,687.633 1479.15,687.633 1479.71,687.633 1480.27,687.633 1480.83,687.633 1481.39,687.633 1481.95,687.633 1482.51,687.633 1483.07,687.633 1483.62,687.633 1484.18,687.633 1484.74,687.633 1485.3,687.633 1485.86,687.633 1486.42,687.633 1486.98,687.633 1487.54,687.633 1488.1,687.633 1488.66,687.633 1489.22,687.633 1489.78,687.633 1490.34,687.633 1490.89,687.633 1491.45,687.633 1492.01,687.633 1492.57,687.633 1493.13,687.633 1493.69,687.633 1494.25,687.633 1494.81,687.633 1495.37,687.633 1495.93,687.633 1496.49,687.633 1497.05,687.633 1497.61,687.633 1498.16,687.633 1498.72,687.633 1499.28,687.633 1499.84,687.633 1500.4,687.633 1500.96,687.633 1501.52,687.633 1502.08,687.633 1502.64,687.633 1503.2,687.633 1503.76,687.633 1504.32,687.633 1504.88,687.633 1505.44,687.633 1505.99,687.633 1506.55,687.633 1507.11,687.633 1507.67,687.633 1508.23,687.633 1508.79,687.633 1509.35,687.633 1509.91,687.633 1510.47,687.633 1511.03,687.633 1511.59,687.633 1512.15,687.633 1512.71,687.633 1513.26,687.633 1513.82,687.633 1514.38,687.633 1514.94,687.633 1515.5,687.633 1516.06,687.633 1516.62,687.633 1517.18,687.633 1517.74,687.633 1518.3,687.633 1518.86,687.633 1519.42,687.633 1519.98,687.633 1520.53,687.633 1521.09,687.633 1521.65,687.633 1522.21,687.633 1522.77,687.633 1523.33,687.633 1523.89,687.633 1524.45,687.633 1525.01,687.633 1525.57,687.633 1526.13,687.633 1526.69,687.633 1527.25,687.633 1527.81,687.633 1528.36,687.633 1528.92,687.633 1529.48,687.633 1530.04,687.633 1530.6,687.633 1531.16,687.633 1531.72,687.633 1532.28,687.633 1532.84,687.633 1533.4,687.633 1533.96,687.633 1534.52,687.633 1535.08,687.633 1535.63,687.633 1536.19,687.633 1536.75,687.633 1537.31,687.633 1537.87,687.633 1538.43,687.633 1538.99,687.633 1539.55,687.633 1540.11,687.633 1540.67,687.633 1541.23,687.633 1541.79,687.633 1542.35,687.633 1542.9,687.633 1543.46,687.633 1544.02,687.633 1544.58,687.633 1545.14,687.633 1545.7,687.633 1546.26,687.633 1546.82,687.633 1547.38,687.633 1547.94,687.633 1548.5,687.633 1549.06,687.633 1549.62,687.633 1550.18,687.633 1550.73,687.633 1551.29,687.633 1551.85,687.633 1552.41,687.633 1552.97,687.633 1553.53,687.633 1554.09,687.633 1554.65,687.633 1555.21,687.633 1555.77,687.633 1556.33,687.633 1556.89,687.633 1557.45,687.633 1558,687.633 1558.56,687.633 1559.12,687.633 1559.68,687.633 1560.24,687.633 1560.8,687.633 1561.36,687.633 1561.92,687.633 1562.48,687.633 1563.04,687.633 1563.6,687.633 1564.16,687.633 1564.72,687.633 1565.28,687.633 1565.83,687.633 1566.39,687.633 1566.95,687.633 1567.51,687.633 1568.07,687.633 1568.63,687.633 1569.19,687.633 1569.75,687.633 1570.31,687.633 1570.87,687.633 1571.43,687.633 1571.99,687.633 1572.55,687.633 1573.1,687.633 1573.66,687.633 1574.22,687.633 1574.78,687.633 1575.34,687.633 1575.9,687.633 1576.46,687.633 1577.02,687.633 1577.58,687.633 1578.14,687.633 1578.7,687.633 1579.26,687.633 1579.82,687.633 1580.37,687.633 1580.93,687.633 1581.49,687.633 1582.05,687.633 1582.61,687.633 1583.17,687.633 1583.73,687.633 1584.29,687.633 1584.85,687.633 1585.41,687.633 1585.97,687.633 1586.53,687.633 1587.09,687.633 1587.65,687.633 1588.2,687.633 1588.76,687.633 1589.32,687.633 1589.88,687.633 1590.44,687.633 1591,687.633 1591.56,687.633 1592.12,687.633 1592.68,687.633 1593.24,687.633 1593.8,687.633 1594.36,687.633 1594.92,687.633 1595.47,687.633 1596.03,687.633 1596.59,687.633 1597.15,687.633 1597.71,687.633 1598.27,687.633 1598.83,687.633 1599.39,687.633 1599.95,687.633 1600.51,687.633 1601.07,687.633 1601.63,687.633 1602.19,687.633 1602.74,687.633 1603.3,687.633 1603.86,687.633 1604.42,687.633 1604.98,687.633 1605.54,687.633 1606.1,687.633 1606.66,687.633 1607.22,687.633 1607.78,687.633 1608.34,687.633 1608.9,687.633 1609.46,687.633 1610.02,687.633 1610.57,687.633 1611.13,687.633 1611.69,687.633 1612.25,687.633 1612.81,687.633 1613.37,687.633 1613.93,687.633 1614.49,687.633 1615.05,687.633 1615.61,687.633 1616.17,687.633 1616.73,687.633 1617.29,687.633 1617.84,687.633 1618.4,687.633 1618.96,687.633 1619.52,687.633 1620.08,687.633 1620.64,687.633 1621.2,687.633 1621.76,687.633 1622.32,687.633 1622.88,687.633 1623.44,687.633 1624,687.633 1624.56,687.633 1625.11,687.633 1625.67,687.633 1626.23,687.633 1626.79,687.633 1627.35,687.633 1627.91,687.633 1628.47,687.633 1629.03,687.633 1629.59,687.633 1630.15,687.633 1630.71,687.633 1631.27,687.633 1631.83,687.633 1632.39,687.633 1632.94,687.633 1633.5,687.633 1634.06,687.633 1634.62,687.633 1635.18,687.633 1635.74,687.633 1636.3,687.633 1636.86,687.633 1637.42,687.633 1637.98,687.633 1638.54,687.633 1639.1,687.633 1639.66,687.633 1640.21,687.633 1640.77,687.633 1641.33,687.633 1641.89,687.633 1642.45,687.633 1643.01,687.633 1643.57,687.633 1644.13,687.633 1644.69,687.633 1645.25,687.633 1645.81,687.633 1646.37,687.633 1646.93,687.633 1647.48,687.633 1648.04,687.633 1648.6,687.633 1649.16,687.633 1649.72,687.633 1650.28,687.633 1650.84,687.633 1651.4,687.633 1651.96,687.633 1652.52,687.633 1653.08,687.633 1653.64,687.633 1654.2,687.633 1654.76,687.633 1655.31,687.633 1655.87,687.633 1656.43,687.633 1656.99,687.633 1657.55,687.633 1658.11,687.633 1658.67,687.633 1659.23,687.633 1659.79,687.633 1660.35,687.633 1660.91,687.633 1661.47,687.633 1662.03,687.633 1662.58,687.633 1663.14,687.633 1663.7,687.633 1664.26,687.633 1664.82,687.633 1665.38,687.633 1665.94,687.633 1666.5,687.633 1667.06,687.633 1667.62,687.633 1668.18,687.633 1668.74,687.633 1669.3,687.633 1669.85,687.633 1670.41,687.633 1670.97,687.633 1671.53,687.633 1672.09,687.633 1672.65,687.633 1673.21,687.633 1673.77,687.633 1674.33,687.633 1674.89,687.633 1675.45,687.633 1676.01,687.633 1676.57,687.633 1677.13,687.633 1677.68,687.633 1678.24,687.633 1678.8,687.633 1679.36,687.633 1679.92,687.633 1680.48,687.633 1681.04,687.633 1681.6,687.633 1682.16,687.633 1682.72,687.633 1683.28,687.633 1683.84,687.633 1684.4,687.633 1684.95,687.633 1685.51,687.633 1686.07,687.633 1686.63,687.633 1687.19,687.633 1687.75,687.633 1688.31,687.633 1688.87,687.633 1689.43,687.633 1689.99,687.633 1690.55,687.633 1691.11,687.633 1691.67,687.633 1692.23,687.633 1692.78,687.633 1693.34,687.633 1693.9,687.633 1694.46,687.633 1695.02,687.633 1695.58,687.633 1696.14,687.633 1696.7,687.633 1697.26,687.633 1697.82,687.633 1698.38,687.633 1698.94,687.633 1699.5,687.633 1700.05,687.633 1700.61,687.633 1701.17,687.633 1701.73,687.633 1702.29,687.633 1702.85,687.633 1703.41,687.633 1703.97,687.633 1704.53,687.633 1705.09,687.633 1705.65,687.633 1706.21,687.633 1706.77,687.633 1707.32,687.633 1707.88,687.633 1708.44,687.633 1709,687.633 1709.56,687.633 1710.12,687.633 1710.68,687.633 1711.24,687.633 1711.8,687.633 1712.36,687.633 1712.92,687.633 1713.48,687.633 1714.04,687.633 1714.6,687.633 1715.15,687.633 1715.71,687.633 1716.27,687.633 1716.83,687.633 1717.39,687.633 1717.95,687.633 1718.51,687.633 1719.07,687.633 1719.63,687.633 1720.19,687.633 1720.75,687.633 1721.31,687.633 1721.87,687.633 1722.42,687.633 1722.98,687.633 1723.54,687.633 1724.1,687.633 1724.66,687.633 1725.22,687.633 1725.78,687.633 1726.34,687.633 1726.9,687.633 1727.46,687.633 1728.02,687.633 1728.58,687.633 1729.14,687.633 1729.69,687.633 1730.25,687.633 1730.81,687.633 1731.37,687.633 1731.93,687.633 1732.49,687.633 1733.05,687.633 1733.61,687.633 1734.17,687.633 1734.73,687.633 1735.29,687.633 1735.85,687.633 1736.41,687.633 1736.97,687.633 1737.52,687.633 1738.08,687.633 1738.64,687.633 1739.2,687.633 1739.76,687.633 1740.32,687.633 1740.88,687.633 1741.44,687.633 1742,687.633 1742.56,687.633 1743.12,687.633 1743.68,687.633 1744.24,687.633 1744.79,687.633 1745.35,687.633 1745.91,687.633 1746.47,687.633 1747.03,687.633 1747.59,687.633 1748.15,687.633 1748.71,687.633 1749.27,687.633 1749.83,687.633 1750.39,687.633 1750.95,687.633 1751.51,687.633 1752.06,687.633 1752.62,687.633 1753.18,687.633 1753.74,687.633 1754.3,687.633 1754.86,687.633 1755.42,687.633 1755.98,687.633 1756.54,687.633 1757.1,687.633 1757.66,687.633 1758.22,687.633 1758.78,687.633 1759.34,687.633 1759.89,687.633 1760.45,687.633 1761.01,687.633 1761.57,687.633 1762.13,687.633 1762.69,687.633 1763.25,687.633 1763.81,687.633 1764.37,687.633 1764.93,687.633 1765.49,687.633 1766.05,687.633 1766.61,687.633 1767.16,687.633 1767.72,687.633 1768.28,687.633 1768.84,687.633 1769.4,687.633 1769.96,687.633 1770.52,687.633 1771.08,687.633 1771.64,687.633 1772.2,687.633 1772.76,687.633 1773.32,687.633 1773.88,687.633 1774.43,687.633 1774.99,687.633 1775.55,687.633 1776.11,687.633 1776.67,687.633 1777.23,687.633 1777.79,687.633 1778.35,687.633 1778.91,687.633 1779.47,687.633 1780.03,687.633 1780.59,687.633 1781.15,687.633 1781.71,687.633 1782.26,687.633 1782.82,687.633 1783.38,687.633 1783.94,687.633 1784.5,687.633 1785.06,687.633 1785.62,687.633 1786.18,687.633 1786.74,687.633 1787.3,687.633 1787.86,687.633 1788.42,687.633 1788.98,687.633 1789.53,687.633 1790.09,687.633 1790.65,687.633 1791.21,687.633 1791.77,687.633 1792.33,687.633 1792.89,687.633 1793.45,687.633 1794.01,687.633 1794.57,687.633 1795.13,687.633 1795.69,687.633 1796.25,687.633 1796.8,687.633 1797.36,687.633 1797.92,687.633 1798.48,687.633 1799.04,687.633 1799.6,687.633 1800.16,687.633 1800.72,687.633 1801.28,687.633 1801.84,687.633 1802.4,687.633 1802.96,687.633 1803.52,687.633 1804.08,687.633 1804.63,687.633 1805.19,687.633 1805.75,687.633 1806.31,687.633 1806.87,687.633 1807.43,687.633 1807.99,687.633 1808.55,687.633 1809.11,687.633 1809.67,687.633 1810.23,687.633 1810.79,687.633 1811.35,687.633 1811.9,687.633 1812.46,687.633 1813.02,687.633 1813.58,687.633 1814.14,687.633 1814.7,687.633 1815.26,687.633 1815.82,687.633 1816.38,687.633 1816.94,687.633 1817.5,687.633 1818.06,687.633 1818.62,687.633 1819.18,687.633 1819.73,687.633 1820.29,687.633 1820.85,687.633 1821.41,687.633 1821.97,687.633 1822.53,687.633 1823.09,687.633 1823.65,687.633 1824.21,687.633 1824.77,687.633 1825.33,687.633 1825.89,687.633 1826.45,687.633 1827,687.633 1827.56,687.633 1828.12,687.633 1828.68,687.633 1829.24,687.633 1829.8,687.633 1830.36,687.633 1830.92,687.633 1831.48,687.633 1832.04,687.633 1832.6,687.633 1833.16,687.633 1833.72,687.633 1834.27,687.633 1834.83,687.633 1835.39,687.633 1835.95,687.633 1836.51,687.633 1837.07,687.633 1837.63,687.633 1838.19,687.633 \"/>\n<path clip-path=\"url(#clip683)\" d=\"M720.247 684.841 L720.806 684.841 L721.365 684.841 L721.924 684.841 L722.484 684.841 L723.043 684.841 L723.602 684.841 L724.161 684.841 L724.721 684.841 L725.28 684.841 L725.839 684.841 L726.398 684.841 L726.958 684.841 L727.517 684.841 L728.076 684.841 L728.635 684.841 L729.195 684.841 L729.754 684.841 L730.313 684.841 L730.872 684.841 L731.432 684.841 L731.991 684.841 L732.55 684.841 L733.109 684.841 L733.669 684.841 L734.228 684.841 L734.787 684.841 L735.346 684.841 L735.906 684.841 L736.465 684.841 L737.024 684.841 L737.583 684.841 L738.143 684.841 L738.702 684.841 L739.261 684.841 L739.82 684.841 L740.38 684.841 L740.939 684.841 L741.498 684.841 L742.057 684.841 L742.617 684.841 L743.176 684.841 L743.735 684.841 L744.294 684.841 L744.854 684.841 L745.413 684.841 L745.972 684.841 L746.531 684.841 L747.091 684.841 L747.65 684.841 L748.209 684.841 L748.768 684.841 L749.328 684.841 L749.887 684.841 L750.446 684.841 L751.005 684.841 L751.565 684.841 L752.124 684.841 L752.683 684.841 L753.242 684.841 L753.802 684.841 L754.361 684.841 L754.92 684.841 L755.479 684.841 L756.039 684.841 L756.598 684.841 L757.157 684.841 L757.716 684.841 L758.276 684.841 L758.835 684.841 L759.394 684.841 L759.953 684.841 L760.513 684.841 L761.072 684.841 L761.631 684.841 L762.19 684.841 L762.75 684.841 L763.309 684.841 L763.868 684.841 L764.427 684.841 L764.987 684.841 L765.546 684.841 L766.105 684.841 L766.664 684.841 L767.224 684.841 L767.783 684.841 L768.342 684.841 L768.901 684.841 L769.461 684.841 L770.02 684.841 L770.579 684.841 L771.138 684.841 L771.698 684.841 L772.257 684.841 L772.816 684.841 L773.375 684.841 L773.935 684.841 L774.494 684.841 L775.053 684.841 L775.612 684.841 L776.172 684.841 L776.731 684.841 L777.29 684.841 L777.849 684.841 L778.409 684.841 L778.968 684.841 L779.527 684.841 L780.086 684.841 L780.646 684.841 L781.205 684.841 L781.764 684.841 L782.323 684.841 L782.883 684.841 L783.442 684.841 L784.001 684.841 L784.56 684.841 L785.12 684.841 L785.679 684.841 L786.238 684.841 L786.797 684.841 L787.357 684.841 L787.916 684.841 L788.475 684.841 L789.034 684.841 L789.594 684.841 L790.153 684.841 L790.712 684.841 L791.271 684.841 L791.831 684.841 L792.39 684.841 L792.949 684.841 L793.508 684.841 L794.068 684.841 L794.627 684.841 L795.186 684.841 L795.745 684.841 L796.305 684.841 L796.864 684.841 L797.423 684.841 L797.982 684.841 L798.542 684.841 L799.101 684.841 L799.66 684.841 L800.219 684.841 L800.779 684.841 L801.338 684.841 L801.897 684.841 L802.456 684.841 L803.016 684.841 L803.575 684.841 L804.134 684.841 L804.693 684.841 L805.253 684.841 L805.812 684.841 L806.371 684.841 L806.931 684.841 L807.49 684.841 L808.049 684.841 L808.608 684.841 L809.168 684.841 L809.727 684.841 L810.286 684.841 L810.845 684.841 L811.405 684.841 L811.964 684.841 L812.523 684.841 L813.082 684.841 L813.642 684.841 L814.201 684.841 L814.76 684.841 L815.319 684.841 L815.879 684.841 L816.438 684.841 L816.997 684.841 L817.556 684.841 L818.116 684.841 L818.675 684.841 L819.234 684.841 L819.793 684.841 L820.353 684.841 L820.912 684.841 L821.471 684.841 L822.03 684.841 L822.59 684.841 L823.149 684.841 L823.708 684.841 L824.267 684.841 L824.827 684.841 L825.386 684.841 L825.945 684.841 L826.504 684.841 L827.064 684.841 L827.623 684.841 L828.182 684.841 L828.741 684.841 L829.301 684.841 L829.86 684.841 L830.419 684.841 L830.978 684.841 L831.538 684.841 L832.097 684.841 L832.656 684.841 L833.215 684.841 L833.775 684.841 L834.334 684.841 L834.893 684.841 L835.452 684.841 L836.012 684.841 L836.571 684.841 L837.13 684.841 L837.689 684.841 L838.249 684.841 L838.808 684.841 L839.367 684.841 L839.926 684.841 L840.486 684.841 L841.045 684.841 L841.604 684.841 L842.163 684.841 L842.723 684.841 L843.282 684.841 L843.841 684.841 L844.4 684.841 L844.96 684.841 L845.519 684.841 L846.078 684.841 L846.637 684.841 L847.197 684.841 L847.756 684.841 L848.315 684.841 L848.874 684.841 L849.434 684.841 L849.993 684.841 L850.552 684.841 L851.111 684.841 L851.671 684.841 L852.23 684.841 L852.789 684.841 L853.348 684.841 L853.908 684.841 L854.467 684.841 L855.026 684.841 L855.585 684.841 L856.145 684.841 L856.704 684.841 L857.263 684.841 L857.822 684.841 L858.382 684.841 L858.941 684.841 L859.5 684.841 L860.059 684.841 L860.619 684.841 L861.178 684.841 L861.737 684.841 L862.296 684.841 L862.856 684.841 L863.415 684.841 L863.974 684.841 L864.533 684.841 L865.093 684.841 L865.652 684.841 L866.211 684.841 L866.77 684.841 L867.33 684.841 L867.889 684.841 L868.448 684.841 L869.007 684.841 L869.567 684.841 L870.126 684.841 L870.685 684.841 L871.244 684.841 L871.804 684.841 L872.363 684.841 L872.922 684.841 L873.481 684.841 L874.041 684.841 L874.6 684.841 L875.159 684.841 L875.718 684.841 L876.278 684.841 L876.837 684.841 L877.396 684.841 L877.955 684.841 L878.515 684.841 L879.074 684.841 L879.633 684.841 L880.192 684.841 L880.752 684.841 L881.311 684.841 L881.87 684.841 L882.429 684.841 L882.989 684.841 L883.548 684.841 L884.107 684.841 L884.666 684.841 L885.226 684.841 L885.785 684.841 L886.344 684.841 L886.903 684.841 L887.463 684.841 L888.022 684.841 L888.581 684.841 L889.14 684.841 L889.7 684.841 L890.259 684.841 L890.818 684.841 L891.377 684.841 L891.937 684.841 L892.496 684.841 L893.055 684.841 L893.614 684.841 L894.174 684.841 L894.733 684.841 L895.292 684.841 L895.851 684.841 L896.411 684.841 L896.97 684.841 L897.529 684.841 L898.088 684.841 L898.648 684.841 L899.207 684.841 L899.766 684.841 L900.325 684.841 L900.885 684.841 L901.444 684.841 L902.003 684.841 L902.562 684.841 L903.122 684.841 L903.681 684.841 L904.24 684.841 L904.799 684.841 L905.359 684.841 L905.918 684.841 L906.477 684.841 L907.036 684.841 L907.596 684.841 L908.155 684.841 L908.714 684.841 L909.273 684.841 L909.833 684.841 L910.392 684.841 L910.951 684.841 L911.51 684.841 L912.07 684.841 L912.629 684.841 L913.188 684.841 L913.747 684.841 L914.307 684.841 L914.866 684.841 L915.425 684.841 L915.984 684.841 L916.544 684.841 L917.103 684.841 L917.662 684.841 L918.221 684.841 L918.781 684.841 L919.34 684.841 L919.899 684.841 L920.458 684.841 L921.018 684.841 L921.577 684.841 L922.136 684.841 L922.695 684.841 L923.255 684.841 L923.814 684.841 L924.373 684.841 L924.932 684.841 L925.492 684.841 L926.051 684.841 L926.61 684.841 L927.169 684.841 L927.729 684.841 L928.288 684.841 L928.847 684.841 L929.406 684.841 L929.966 684.841 L930.525 684.841 L931.084 684.841 L931.644 684.841 L932.203 684.841 L932.762 684.841 L933.321 684.841 L933.881 684.841 L934.44 684.841 L934.999 684.841 L935.558 684.841 L936.118 684.841 L936.677 684.841 L937.236 684.841 L937.795 684.841 L938.355 684.841 L938.914 684.841 L939.473 684.841 L940.032 684.841 L940.592 684.841 L941.151 684.841 L941.71 684.841 L942.269 684.841 L942.829 684.841 L943.388 684.841 L943.947 684.841 L944.506 684.841 L945.066 684.841 L945.625 684.841 L946.184 684.841 L946.743 684.841 L947.303 684.841 L947.862 684.841 L948.421 684.841 L948.98 684.841 L949.54 684.841 L950.099 684.841 L950.658 684.841 L951.217 684.841 L951.777 684.841 L952.336 684.841 L952.895 684.841 L953.454 684.841 L954.014 684.841 L954.573 684.841 L955.132 684.841 L955.691 684.841 L956.251 684.841 L956.81 684.841 L957.369 684.841 L957.928 684.841 L958.488 684.841 L959.047 684.841 L959.606 684.841 L960.165 684.841 L960.725 684.841 L961.284 684.841 L961.843 684.841 L962.402 684.841 L962.962 684.841 L963.521 684.841 L964.08 684.841 L964.639 684.841 L965.199 684.841 L965.758 684.841 L966.317 684.841 L966.876 684.841 L967.436 684.841 L967.995 684.841 L968.554 684.841 L969.113 684.841 L969.673 684.841 L970.232 684.841 L970.791 684.841 L971.35 684.841 L971.91 684.841 L972.469 684.841 L973.028 684.841 L973.587 684.841 L974.147 684.841 L974.706 684.841 L975.265 684.841 L975.824 684.841 L976.384 684.841 L976.943 684.841 L977.502 684.841 L978.061 684.841 L978.621 684.841 L979.18 684.841 L979.739 684.841 L980.298 684.841 L980.858 684.841 L981.417 684.841 L981.976 684.841 L982.535 684.841 L983.095 684.841 L983.654 684.841 L984.213 684.841 L984.772 684.841 L985.332 684.841 L985.891 684.841 L986.45 684.841 L987.009 684.841 L987.569 684.841 L988.128 684.841 L988.687 684.841 L989.246 684.841 L989.806 684.841 L990.365 684.841 L990.924 684.841 L991.483 684.841 L992.043 684.841 L992.602 684.841 L993.161 684.841 L993.72 684.841 L994.28 684.841 L994.839 684.841 L995.398 684.841 L995.957 684.841 L996.517 684.841 L997.076 684.841 L997.635 684.841 L998.194 684.841 L998.754 684.841 L999.313 684.841 L999.872 684.841 L1000.43 684.841 L1000.99 684.841 L1001.55 684.841 L1002.11 684.841 L1002.67 684.841 L1003.23 684.841 L1003.79 684.841 L1004.35 684.841 L1004.91 684.841 L1005.46 684.841 L1006.02 684.841 L1006.58 684.841 L1007.14 684.841 L1007.7 684.841 L1008.26 684.841 L1008.82 684.841 L1009.38 684.841 L1009.94 684.841 L1010.5 684.841 L1011.06 684.841 L1011.62 684.841 L1012.18 684.841 L1012.73 684.841 L1013.29 684.841 L1013.85 684.841 L1014.41 684.841 L1014.97 684.841 L1015.53 684.841 L1016.09 684.841 L1016.65 684.841 L1017.21 684.841 L1017.77 684.841 L1018.33 684.841 L1018.89 684.841 L1019.45 684.841 L1020.01 684.841 L1020.56 684.841 L1021.12 684.841 L1021.68 684.841 L1022.24 684.841 L1022.8 684.841 L1023.36 684.841 L1023.92 684.841 L1024.48 684.841 L1025.04 684.841 L1025.6 684.841 L1026.16 684.841 L1026.72 684.841 L1027.28 684.841 L1027.83 684.841 L1028.39 684.841 L1028.95 684.841 L1029.51 684.841 L1030.07 684.841 L1030.63 684.841 L1031.19 684.841 L1031.75 684.841 L1032.31 684.841 L1032.87 684.841 L1033.43 684.841 L1033.99 684.841 L1034.55 684.841 L1035.1 684.841 L1035.66 684.841 L1036.22 684.841 L1036.78 684.841 L1037.34 684.841 L1037.9 684.841 L1038.46 684.841 L1039.02 684.841 L1039.58 684.841 L1040.14 684.841 L1040.7 684.841 L1041.26 684.841 L1041.82 684.841 L1042.38 684.841 L1042.93 684.841 L1043.49 684.841 L1044.05 684.841 L1044.61 684.841 L1045.17 684.841 L1045.73 684.841 L1046.29 684.841 L1046.85 684.841 L1047.41 684.841 L1047.97 684.841 L1048.53 684.841 L1049.09 684.841 L1049.65 684.841 L1050.2 684.841 L1050.76 684.841 L1051.32 684.841 L1051.88 684.841 L1052.44 684.841 L1053 684.841 L1053.56 684.841 L1054.12 684.841 L1054.68 684.841 L1055.24 684.841 L1055.8 684.841 L1056.36 684.841 L1056.92 684.841 L1057.48 684.841 L1058.03 684.841 L1058.59 684.841 L1059.15 684.841 L1059.71 684.841 L1060.27 684.841 L1060.83 684.841 L1061.39 684.841 L1061.95 684.841 L1062.51 684.841 L1063.07 684.841 L1063.63 684.841 L1064.19 684.841 L1064.75 684.841 L1065.3 684.841 L1065.86 684.841 L1066.42 684.841 L1066.98 684.841 L1067.54 684.841 L1068.1 684.841 L1068.66 684.841 L1069.22 684.841 L1069.78 684.841 L1070.34 684.841 L1070.9 684.841 L1071.46 684.841 L1072.02 684.841 L1072.57 684.841 L1073.13 684.841 L1073.69 684.841 L1074.25 684.841 L1074.81 684.841 L1075.37 684.841 L1075.93 684.841 L1076.49 684.841 L1077.05 684.841 L1077.61 684.841 L1078.17 684.841 L1078.73 684.841 L1079.29 684.841 L1079.85 684.841 L1080.4 684.841 L1080.96 684.841 L1081.52 684.841 L1082.08 684.841 L1082.64 684.841 L1083.2 684.841 L1083.76 684.841 L1084.32 684.841 L1084.88 684.841 L1085.44 684.841 L1086 684.841 L1086.56 684.841 L1087.12 684.841 L1087.67 684.841 L1088.23 684.841 L1088.79 684.841 L1089.35 684.841 L1089.91 684.841 L1090.47 684.841 L1091.03 684.841 L1091.59 684.841 L1092.15 684.841 L1092.71 684.841 L1093.27 684.841 L1093.83 684.841 L1094.39 684.841 L1094.94 684.841 L1095.5 684.841 L1096.06 684.841 L1096.62 684.841 L1097.18 684.841 L1097.74 684.841 L1098.3 684.841 L1098.86 684.841 L1099.42 684.841 L1099.98 684.841 L1100.54 684.841 L1101.1 684.841 L1101.66 684.841 L1102.22 684.841 L1102.77 684.841 L1103.33 684.841 L1103.89 684.841 L1104.45 684.841 L1105.01 684.841 L1105.57 684.841 L1106.13 684.841 L1106.69 684.841 L1107.25 684.841 L1107.81 684.841 L1108.37 684.841 L1108.93 684.841 L1109.49 684.841 L1110.04 684.841 L1110.6 684.841 L1111.16 684.841 L1111.72 684.841 L1112.28 684.841 L1112.84 684.841 L1113.4 684.841 L1113.96 684.841 L1114.52 684.841 L1115.08 684.841 L1115.64 684.841 L1116.2 684.841 L1116.76 684.841 L1117.31 684.841 L1117.87 684.841 L1118.43 684.841 L1118.99 684.841 L1119.55 684.841 L1120.11 684.841 L1120.67 684.841 L1121.23 684.841 L1121.79 684.841 L1122.35 684.841 L1122.91 684.841 L1123.47 684.841 L1124.03 684.841 L1124.59 684.841 L1125.14 684.841 L1125.7 684.841 L1126.26 684.841 L1126.82 684.841 L1127.38 684.841 L1127.94 684.841 L1128.5 684.841 L1129.06 684.841 L1129.62 684.841 L1130.18 684.841 L1130.74 684.841 L1131.3 684.841 L1131.86 684.841 L1132.41 684.841 L1132.97 684.841 L1133.53 684.841 L1134.09 684.841 L1134.65 684.841 L1135.21 684.841 L1135.77 684.841 L1136.33 684.841 L1136.89 684.841 L1137.45 684.841 L1138.01 684.841 L1138.57 684.841 L1139.13 684.841 L1139.68 684.841 L1140.24 684.841 L1140.8 684.841 L1141.36 684.841 L1141.92 684.841 L1142.48 684.841 L1143.04 684.841 L1143.6 684.841 L1144.16 684.841 L1144.72 684.841 L1145.28 684.841 L1145.84 684.841 L1146.4 684.841 L1146.96 684.841 L1147.51 684.841 L1148.07 684.841 L1148.63 684.841 L1149.19 684.841 L1149.75 684.841 L1150.31 684.841 L1150.87 684.841 L1151.43 684.841 L1151.99 684.841 L1152.55 684.841 L1153.11 684.841 L1153.67 684.841 L1154.23 684.841 L1154.78 684.841 L1155.34 684.841 L1155.9 684.841 L1156.46 684.841 L1157.02 684.841 L1157.58 684.841 L1158.14 684.841 L1158.7 684.841 L1159.26 684.841 L1159.82 684.841 L1160.38 684.841 L1160.94 684.841 L1161.5 684.841 L1162.05 684.841 L1162.61 684.841 L1163.17 684.841 L1163.73 684.841 L1164.29 684.841 L1164.85 684.841 L1165.41 684.841 L1165.97 684.841 L1166.53 684.841 L1167.09 684.841 L1167.65 684.841 L1168.21 684.841 L1168.77 684.841 L1169.33 684.841 L1169.88 684.841 L1170.44 684.841 L1171 684.841 L1171.56 684.841 L1172.12 684.841 L1172.68 684.841 L1173.24 684.841 L1173.8 684.841 L1174.36 684.841 L1174.92 684.841 L1175.48 684.841 L1176.04 684.841 L1176.6 684.841 L1177.15 684.841 L1177.71 684.841 L1178.27 684.841 L1178.83 684.841 L1179.39 684.841 L1179.95 684.841 L1180.51 684.841 L1181.07 684.841 L1181.63 684.841 L1182.19 684.841 L1182.75 684.841 L1183.31 684.841 L1183.87 684.841 L1184.43 684.841 L1184.98 684.841 L1185.54 684.841 L1186.1 684.841 L1186.66 684.841 L1187.22 684.841 L1187.78 684.841 L1188.34 684.841 L1188.9 684.841 L1189.46 684.841 L1190.02 684.841 L1190.58 684.841 L1191.14 684.841 L1191.7 684.841 L1192.25 684.841 L1192.81 684.841 L1193.37 684.841 L1193.93 684.841 L1194.49 684.841 L1195.05 684.841 L1195.61 684.841 L1196.17 684.841 L1196.73 684.841 L1197.29 684.841 L1197.85 684.841 L1198.41 684.841 L1198.97 684.841 L1199.52 684.841 L1200.08 684.841 L1200.64 684.841 L1201.2 684.841 L1201.76 684.841 L1202.32 684.841 L1202.88 684.841 L1203.44 684.841 L1204 684.841 L1204.56 684.841 L1205.12 684.841 L1205.68 684.841 L1206.24 684.841 L1206.8 684.841 L1207.35 684.841 L1207.91 684.841 L1208.47 684.841 L1209.03 684.841 L1209.59 684.841 L1210.15 684.841 L1210.71 684.841 L1211.27 684.841 L1211.83 684.841 L1212.39 684.841 L1212.95 684.841 L1213.51 684.841 L1214.07 684.841 L1214.62 684.841 L1215.18 684.841 L1215.74 684.841 L1216.3 684.841 L1216.86 684.841 L1217.42 684.841 L1217.98 684.841 L1218.54 684.841 L1219.1 684.841 L1219.66 684.841 L1220.22 684.841 L1220.78 684.841 L1221.34 684.841 L1221.89 684.841 L1222.45 684.841 L1223.01 684.841 L1223.57 684.841 L1224.13 684.841 L1224.69 684.841 L1225.25 684.841 L1225.81 684.841 L1226.37 684.841 L1226.93 684.841 L1227.49 684.841 L1228.05 684.841 L1228.61 684.841 L1229.17 684.841 L1229.72 684.841 L1230.28 684.841 L1230.84 684.841 L1231.4 684.841 L1231.96 684.841 L1232.52 684.841 L1233.08 684.841 L1233.64 684.841 L1234.2 684.841 L1234.76 684.841 L1235.32 684.841 L1235.88 684.841 L1236.44 684.841 L1236.99 684.841 L1237.55 684.841 L1238.11 684.841 L1238.67 684.841 L1239.23 684.841 L1239.79 684.841 L1240.35 684.841 L1240.91 684.841 L1241.47 684.841 L1242.03 684.841 L1242.59 684.841 L1243.15 684.841 L1243.71 684.841 L1244.26 684.841 L1244.82 684.841 L1245.38 684.841 L1245.94 684.841 L1246.5 684.841 L1247.06 684.841 L1247.62 684.841 L1248.18 684.841 L1248.74 684.841 L1249.3 684.841 L1249.86 684.841 L1250.42 684.841 L1250.98 684.841 L1251.54 684.841 L1252.09 684.841 L1252.65 684.841 L1253.21 684.841 L1253.77 684.841 L1254.33 684.841 L1254.89 684.841 L1255.45 684.841 L1256.01 684.841 L1256.57 684.841 L1257.13 684.841 L1257.69 684.841 L1258.25 684.841 L1258.81 684.841 L1259.36 684.841 L1259.92 684.841 L1260.48 684.841 L1261.04 684.841 L1261.6 684.841 L1262.16 684.841 L1262.72 684.841 L1263.28 684.841 L1263.84 684.841 L1264.4 684.841 L1264.96 684.841 L1265.52 684.841 L1266.08 684.841 L1266.63 684.841 L1267.19 684.841 L1267.75 684.841 L1268.31 684.841 L1268.87 684.841 L1269.43 684.841 L1269.99 684.841 L1270.55 684.841 L1271.11 684.841 L1271.67 684.841 L1272.23 684.841 L1272.79 684.841 L1273.35 684.841 L1273.91 684.841 L1274.46 684.841 L1275.02 684.841 L1275.58 684.841 L1276.14 684.841 L1276.7 684.841 L1277.26 684.841 L1277.82 684.841 L1278.38 684.841 L1278.94 684.841 L1279.5 684.841 L1280.06 684.841 L1280.62 684.841 L1281.18 684.841 L1281.73 684.841 L1282.29 684.841 L1282.85 684.841 L1283.41 684.841 L1283.97 684.841 L1284.53 684.841 L1285.09 684.841 L1285.65 684.841 L1286.21 684.841 L1286.77 684.841 L1287.33 684.841 L1287.89 684.841 L1288.45 684.841 L1289 684.841 L1289.56 684.841 L1290.12 684.841 L1290.68 684.841 L1291.24 684.841 L1291.8 684.841 L1292.36 684.841 L1292.92 684.841 L1293.48 684.841 L1294.04 684.841 L1294.6 684.841 L1295.16 684.841 L1295.72 684.841 L1296.28 684.841 L1296.83 684.841 L1297.39 684.841 L1297.95 684.841 L1298.51 684.841 L1299.07 684.841 L1299.63 684.841 L1300.19 684.841 L1300.75 684.841 L1301.31 684.841 L1301.87 684.841 L1302.43 684.841 L1302.99 684.841 L1303.55 684.841 L1304.1 684.841 L1304.66 684.841 L1305.22 684.841 L1305.78 684.841 L1306.34 684.841 L1306.9 684.841 L1307.46 684.841 L1308.02 684.841 L1308.58 684.841 L1309.14 684.841 L1309.7 684.841 L1310.26 684.841 L1310.82 684.841 L1311.38 684.841 L1311.93 684.841 L1312.49 684.841 L1313.05 684.841 L1313.61 684.841 L1314.17 684.841 L1314.73 684.841 L1315.29 684.841 L1315.85 684.841 L1316.41 684.841 L1316.97 684.841 L1317.53 684.841 L1318.09 684.841 L1318.65 684.841 L1319.2 684.841 L1319.76 684.841 L1320.32 684.841 L1320.88 684.841 L1321.44 684.841 L1322 684.841 L1322.56 684.841 L1323.12 684.841 L1323.68 684.841 L1324.24 684.841 L1324.8 684.841 L1325.36 684.841 L1325.92 684.841 L1326.47 684.841 L1327.03 684.841 L1327.59 684.841 L1328.15 684.841 L1328.71 684.841 L1329.27 684.841 L1329.83 684.841 L1330.39 684.841 L1330.95 684.841 L1331.51 684.841 L1332.07 684.841 L1332.63 684.841 L1333.19 684.841 L1333.75 684.841 L1334.3 684.841 L1334.86 684.841 L1335.42 684.841 L1335.98 684.841 L1336.54 684.841 L1337.1 684.841 L1337.66 684.841 L1338.22 684.841 L1338.78 684.841 L1339.34 684.841 L1339.9 684.841 L1340.46 684.841 L1341.02 684.841 L1341.57 684.841 L1342.13 684.841 L1342.69 684.841 L1343.25 684.841 L1343.81 684.841 L1344.37 684.841 L1344.93 684.841 L1345.49 684.841 L1346.05 684.841 L1346.61 684.841 L1347.17 684.841 L1347.73 684.841 L1348.29 684.841 L1348.84 684.841 L1349.4 684.841 L1349.96 684.841 L1350.52 684.841 L1351.08 684.841 L1351.64 684.841 L1352.2 684.841 L1352.76 684.841 L1353.32 684.841 L1353.88 684.841 L1354.44 684.841 L1355 684.841 L1355.56 684.841 L1356.12 684.841 L1356.67 684.841 L1357.23 684.841 L1357.79 684.841 L1358.35 684.841 L1358.91 684.841 L1359.47 684.841 L1360.03 684.841 L1360.59 684.841 L1361.15 684.841 L1361.71 684.841 L1362.27 684.841 L1362.83 684.841 L1363.39 684.841 L1363.94 684.841 L1364.5 684.841 L1365.06 684.841 L1365.62 684.841 L1366.18 684.841 L1366.74 684.841 L1367.3 684.841 L1367.86 684.841 L1368.42 684.841 L1368.98 684.841 L1369.54 684.841 L1370.1 684.841 L1370.66 684.841 L1371.21 684.841 L1371.77 684.841 L1372.33 684.841 L1372.89 684.841 L1373.45 684.841 L1374.01 684.841 L1374.57 684.841 L1375.13 684.841 L1375.69 684.841 L1376.25 684.841 L1376.81 684.841 L1377.37 684.841 L1377.93 684.841 L1378.49 684.841 L1379.04 684.841 L1379.6 684.841 L1380.16 684.841 L1380.72 684.841 L1381.28 684.841 L1381.84 684.841 L1382.4 684.841 L1382.96 684.841 L1383.52 684.841 L1384.08 684.841 L1384.64 684.841 L1385.2 684.841 L1385.76 684.841 L1386.31 684.841 L1386.87 684.841 L1387.43 684.841 L1387.99 684.841 L1388.55 684.841 L1389.11 684.841 L1389.67 684.841 L1390.23 684.841 L1390.79 684.841 L1391.35 684.841 L1391.91 684.841 L1392.47 684.841 L1393.03 684.841 L1393.58 684.841 L1394.14 684.841 L1394.7 684.841 L1395.26 684.841 L1395.82 684.841 L1396.38 684.841 L1396.94 684.841 L1397.5 684.841 L1398.06 684.841 L1398.62 684.841 L1399.18 684.841 L1399.74 684.841 L1400.3 684.841 L1400.86 684.841 L1401.41 684.841 L1401.97 684.841 L1402.53 684.841 L1403.09 684.841 L1403.65 684.841 L1404.21 684.841 L1404.77 684.841 L1405.33 684.841 L1405.89 684.841 L1406.45 684.841 L1407.01 684.841 L1407.57 684.841 L1408.13 684.841 L1408.68 684.841 L1409.24 684.841 L1409.8 684.841 L1410.36 684.841 L1410.92 684.841 L1411.48 684.841 L1412.04 684.841 L1412.6 684.841 L1413.16 684.841 L1413.72 684.841 L1414.28 684.841 L1414.84 684.841 L1415.4 684.841 L1415.95 684.841 L1416.51 684.841 L1417.07 684.841 L1417.63 684.841 L1418.19 684.841 L1418.75 684.841 L1419.31 684.841 L1419.87 684.841 L1420.43 684.841 L1420.99 684.841 L1421.55 684.841 L1422.11 684.841 L1422.67 684.841 L1423.23 684.841 L1423.78 684.841 L1424.34 684.841 L1424.9 684.841 L1425.46 684.841 L1426.02 684.841 L1426.58 684.841 L1427.14 684.841 L1427.7 684.841 L1428.26 684.841 L1428.82 684.841 L1429.38 684.841 L1429.94 684.841 L1430.5 684.841 L1431.05 684.841 L1431.61 684.841 L1432.17 684.841 L1432.73 684.841 L1433.29 684.841 L1433.85 684.841 L1434.41 684.841 L1434.97 684.841 L1435.53 684.841 L1436.09 684.841 L1436.65 684.841 L1437.21 684.841 L1437.77 684.841 L1438.33 684.841 L1438.88 684.841 L1439.44 684.841 L1440 684.841 L1440.56 684.841 L1441.12 684.841 L1441.68 684.841 L1442.24 684.841 L1442.8 684.841 L1443.36 684.841 L1443.92 684.841 L1444.48 684.841 L1445.04 684.841 L1445.6 684.841 L1446.15 684.841 L1446.71 684.841 L1447.27 684.841 L1447.83 684.841 L1448.39 684.841 L1448.95 684.841 L1449.51 684.841 L1450.07 684.841 L1450.63 684.841 L1451.19 684.841 L1451.75 684.841 L1452.31 684.841 L1452.87 684.841 L1453.42 684.841 L1453.98 684.841 L1454.54 684.841 L1455.1 684.841 L1455.66 684.841 L1456.22 684.841 L1456.78 684.841 L1457.34 684.841 L1457.9 684.841 L1458.46 684.841 L1459.02 684.841 L1459.58 684.841 L1460.14 684.841 L1460.7 684.841 L1461.25 684.841 L1461.81 684.841 L1462.37 684.841 L1462.93 684.841 L1463.49 684.841 L1464.05 684.841 L1464.61 684.841 L1465.17 684.841 L1465.73 684.841 L1466.29 684.841 L1466.85 684.841 L1467.41 684.841 L1467.97 684.841 L1468.52 684.841 L1469.08 684.841 L1469.64 684.841 L1470.2 684.841 L1470.76 684.841 L1471.32 684.841 L1471.88 684.841 L1472.44 684.841 L1473 684.841 L1473.56 684.841 L1474.12 684.841 L1474.68 684.841 L1475.24 684.841 L1475.79 684.841 L1476.35 684.841 L1476.91 684.841 L1477.47 684.841 L1478.03 684.841 L1478.59 684.841 L1479.15 684.841 L1479.71 684.841 L1480.27 684.841 L1480.83 684.841 L1481.39 684.841 L1481.95 684.841 L1482.51 684.841 L1483.07 684.841 L1483.62 684.841 L1484.18 684.841 L1484.74 684.841 L1485.3 684.841 L1485.86 684.841 L1486.42 684.841 L1486.98 684.841 L1487.54 684.841 L1488.1 684.841 L1488.66 684.841 L1489.22 684.841 L1489.78 684.841 L1490.34 684.841 L1490.89 684.841 L1491.45 684.841 L1492.01 684.841 L1492.57 684.841 L1493.13 684.841 L1493.69 684.841 L1494.25 684.841 L1494.81 684.841 L1495.37 684.841 L1495.93 684.841 L1496.49 684.841 L1497.05 684.841 L1497.61 684.841 L1498.16 684.841 L1498.72 684.841 L1499.28 684.841 L1499.84 684.841 L1500.4 684.841 L1500.96 684.841 L1501.52 684.841 L1502.08 684.841 L1502.64 684.841 L1503.2 684.841 L1503.76 684.841 L1504.32 684.841 L1504.88 684.841 L1505.44 684.841 L1505.99 684.841 L1506.55 684.841 L1507.11 684.841 L1507.67 684.841 L1508.23 684.841 L1508.79 684.841 L1509.35 684.841 L1509.91 684.841 L1510.47 684.841 L1511.03 684.841 L1511.59 684.841 L1512.15 684.841 L1512.71 684.841 L1513.26 684.841 L1513.82 684.841 L1514.38 684.841 L1514.94 684.841 L1515.5 684.841 L1516.06 684.841 L1516.62 684.841 L1517.18 684.841 L1517.74 684.841 L1518.3 684.841 L1518.86 684.841 L1519.42 684.841 L1519.98 684.841 L1520.53 684.841 L1521.09 684.841 L1521.65 684.841 L1522.21 684.841 L1522.77 684.841 L1523.33 684.841 L1523.89 684.841 L1524.45 684.841 L1525.01 684.841 L1525.57 684.841 L1526.13 684.841 L1526.69 684.841 L1527.25 684.841 L1527.81 684.841 L1528.36 684.841 L1528.92 684.841 L1529.48 684.841 L1530.04 684.841 L1530.6 684.841 L1531.16 684.841 L1531.72 684.841 L1532.28 684.841 L1532.84 684.841 L1533.4 684.841 L1533.96 684.841 L1534.52 684.841 L1535.08 684.841 L1535.63 684.841 L1536.19 684.841 L1536.75 684.841 L1537.31 684.841 L1537.87 684.841 L1538.43 684.841 L1538.99 684.841 L1539.55 684.841 L1540.11 684.841 L1540.67 684.841 L1541.23 684.841 L1541.79 684.841 L1542.35 684.841 L1542.9 684.841 L1543.46 684.841 L1544.02 684.841 L1544.58 684.841 L1545.14 684.841 L1545.7 684.841 L1546.26 684.841 L1546.82 684.841 L1547.38 684.841 L1547.94 684.841 L1548.5 684.841 L1549.06 684.841 L1549.62 684.841 L1550.18 684.841 L1550.73 684.841 L1551.29 684.841 L1551.85 684.841 L1552.41 684.841 L1552.97 684.841 L1553.53 684.841 L1554.09 684.841 L1554.65 684.841 L1555.21 684.841 L1555.77 684.841 L1556.33 684.841 L1556.89 684.841 L1557.45 684.841 L1558 684.841 L1558.56 684.841 L1559.12 684.841 L1559.68 684.841 L1560.24 684.841 L1560.8 684.841 L1561.36 684.841 L1561.92 684.841 L1562.48 684.841 L1563.04 684.841 L1563.6 684.841 L1564.16 684.841 L1564.72 684.841 L1565.28 684.841 L1565.83 684.841 L1566.39 684.841 L1566.95 684.841 L1567.51 684.841 L1568.07 684.841 L1568.63 684.841 L1569.19 684.841 L1569.75 684.841 L1570.31 684.841 L1570.87 684.841 L1571.43 684.841 L1571.99 684.841 L1572.55 684.841 L1573.1 684.841 L1573.66 684.841 L1574.22 684.841 L1574.78 684.841 L1575.34 684.841 L1575.9 684.841 L1576.46 684.841 L1577.02 684.841 L1577.58 684.841 L1578.14 684.841 L1578.7 684.841 L1579.26 684.841 L1579.82 684.841 L1580.37 684.841 L1580.93 684.841 L1581.49 684.841 L1582.05 684.841 L1582.61 684.841 L1583.17 684.841 L1583.73 684.841 L1584.29 684.841 L1584.85 684.841 L1585.41 684.841 L1585.97 684.841 L1586.53 684.841 L1587.09 684.841 L1587.65 684.841 L1588.2 684.841 L1588.76 684.841 L1589.32 684.841 L1589.88 684.841 L1590.44 684.841 L1591 684.841 L1591.56 684.841 L1592.12 684.841 L1592.68 684.841 L1593.24 684.841 L1593.8 684.841 L1594.36 684.841 L1594.92 684.841 L1595.47 684.841 L1596.03 684.841 L1596.59 684.841 L1597.15 684.841 L1597.71 684.841 L1598.27 684.841 L1598.83 684.841 L1599.39 684.841 L1599.95 684.841 L1600.51 684.841 L1601.07 684.841 L1601.63 684.841 L1602.19 684.841 L1602.74 684.841 L1603.3 684.841 L1603.86 684.841 L1604.42 684.841 L1604.98 684.841 L1605.54 684.841 L1606.1 684.841 L1606.66 684.841 L1607.22 684.841 L1607.78 684.841 L1608.34 684.841 L1608.9 684.841 L1609.46 684.841 L1610.02 684.841 L1610.57 684.841 L1611.13 684.841 L1611.69 684.841 L1612.25 684.841 L1612.81 684.841 L1613.37 684.841 L1613.93 684.841 L1614.49 684.841 L1615.05 684.841 L1615.61 684.841 L1616.17 684.841 L1616.73 684.841 L1617.29 684.841 L1617.84 684.841 L1618.4 684.841 L1618.96 684.841 L1619.52 684.841 L1620.08 684.841 L1620.64 684.841 L1621.2 684.841 L1621.76 684.841 L1622.32 684.841 L1622.88 684.841 L1623.44 684.841 L1624 684.841 L1624.56 684.841 L1625.11 684.841 L1625.67 684.841 L1626.23 684.841 L1626.79 684.841 L1627.35 684.841 L1627.91 684.841 L1628.47 684.841 L1629.03 684.841 L1629.59 684.841 L1630.15 684.841 L1630.71 684.841 L1631.27 684.841 L1631.83 684.841 L1632.39 684.841 L1632.94 684.841 L1633.5 684.841 L1634.06 684.841 L1634.62 684.841 L1635.18 684.841 L1635.74 684.841 L1636.3 684.841 L1636.86 684.841 L1637.42 684.841 L1637.98 684.841 L1638.54 684.841 L1639.1 684.841 L1639.66 684.841 L1640.21 684.841 L1640.77 684.841 L1641.33 684.841 L1641.89 684.841 L1642.45 684.841 L1643.01 684.841 L1643.57 684.841 L1644.13 684.841 L1644.69 684.841 L1645.25 684.841 L1645.81 684.841 L1646.37 684.841 L1646.93 684.841 L1647.48 684.841 L1648.04 684.841 L1648.6 684.841 L1649.16 684.841 L1649.72 684.841 L1650.28 684.841 L1650.84 684.841 L1651.4 684.841 L1651.96 684.841 L1652.52 684.841 L1653.08 684.841 L1653.64 684.841 L1654.2 684.841 L1654.76 684.841 L1655.31 684.841 L1655.87 684.841 L1656.43 684.841 L1656.99 684.841 L1657.55 684.841 L1658.11 684.841 L1658.67 684.841 L1659.23 684.841 L1659.79 684.841 L1660.35 684.841 L1660.91 684.841 L1661.47 684.841 L1662.03 684.841 L1662.58 684.841 L1663.14 684.841 L1663.7 684.841 L1664.26 684.841 L1664.82 684.841 L1665.38 684.841 L1665.94 684.841 L1666.5 684.841 L1667.06 684.841 L1667.62 684.841 L1668.18 684.841 L1668.74 684.841 L1669.3 684.841 L1669.85 684.841 L1670.41 684.841 L1670.97 684.841 L1671.53 684.841 L1672.09 684.841 L1672.65 684.841 L1673.21 684.841 L1673.77 684.841 L1674.33 684.841 L1674.89 684.841 L1675.45 684.841 L1676.01 684.841 L1676.57 684.841 L1677.13 684.841 L1677.68 684.841 L1678.24 684.841 L1678.8 684.841 L1679.36 684.841 L1679.92 684.841 L1680.48 684.841 L1681.04 684.841 L1681.6 684.841 L1682.16 684.841 L1682.72 684.841 L1683.28 684.841 L1683.84 684.841 L1684.4 684.841 L1684.95 684.841 L1685.51 684.841 L1686.07 684.841 L1686.63 684.841 L1687.19 684.841 L1687.75 684.841 L1688.31 684.841 L1688.87 684.841 L1689.43 684.841 L1689.99 684.841 L1690.55 684.841 L1691.11 684.841 L1691.67 684.841 L1692.23 684.841 L1692.78 684.841 L1693.34 684.841 L1693.9 684.841 L1694.46 684.841 L1695.02 684.841 L1695.58 684.841 L1696.14 684.841 L1696.7 684.841 L1697.26 684.841 L1697.82 684.841 L1698.38 684.841 L1698.94 684.841 L1699.5 684.841 L1700.05 684.841 L1700.61 684.841 L1701.17 684.841 L1701.73 684.841 L1702.29 684.841 L1702.85 684.841 L1703.41 684.841 L1703.97 684.841 L1704.53 684.841 L1705.09 684.841 L1705.65 684.841 L1706.21 684.841 L1706.77 684.841 L1707.32 684.841 L1707.88 684.841 L1708.44 684.841 L1709 684.841 L1709.56 684.841 L1710.12 684.841 L1710.68 684.841 L1711.24 684.841 L1711.8 684.841 L1712.36 684.841 L1712.92 684.841 L1713.48 684.841 L1714.04 684.841 L1714.6 684.841 L1715.15 684.841 L1715.71 684.841 L1716.27 684.841 L1716.83 684.841 L1717.39 684.841 L1717.95 684.841 L1718.51 684.841 L1719.07 684.841 L1719.63 684.841 L1720.19 684.841 L1720.75 684.841 L1721.31 684.841 L1721.87 684.841 L1722.42 684.841 L1722.98 684.841 L1723.54 684.841 L1724.1 684.841 L1724.66 684.841 L1725.22 684.841 L1725.78 684.841 L1726.34 684.841 L1726.9 684.841 L1727.46 684.841 L1728.02 684.841 L1728.58 684.841 L1729.14 684.841 L1729.69 684.841 L1730.25 684.841 L1730.81 684.841 L1731.37 684.841 L1731.93 684.841 L1732.49 684.841 L1733.05 684.841 L1733.61 684.841 L1734.17 684.841 L1734.73 684.841 L1735.29 684.841 L1735.85 684.841 L1736.41 684.841 L1736.97 684.841 L1737.52 684.841 L1738.08 684.841 L1738.64 684.841 L1739.2 684.841 L1739.76 684.841 L1740.32 684.841 L1740.88 684.841 L1741.44 684.841 L1742 684.841 L1742.56 684.841 L1743.12 684.841 L1743.68 684.841 L1744.24 684.841 L1744.79 684.841 L1745.35 684.841 L1745.91 684.841 L1746.47 684.841 L1747.03 684.841 L1747.59 684.841 L1748.15 684.841 L1748.71 684.841 L1749.27 684.841 L1749.83 684.841 L1750.39 684.841 L1750.95 684.841 L1751.51 684.841 L1752.06 684.841 L1752.62 684.841 L1753.18 684.841 L1753.74 684.841 L1754.3 684.841 L1754.86 684.841 L1755.42 684.841 L1755.98 684.841 L1756.54 684.841 L1757.1 684.841 L1757.66 684.841 L1758.22 684.841 L1758.78 684.841 L1759.34 684.841 L1759.89 684.841 L1760.45 684.841 L1761.01 684.841 L1761.57 684.841 L1762.13 684.841 L1762.69 684.841 L1763.25 684.841 L1763.81 684.841 L1764.37 684.841 L1764.93 684.841 L1765.49 684.841 L1766.05 684.841 L1766.61 684.841 L1767.16 684.841 L1767.72 684.841 L1768.28 684.841 L1768.84 684.841 L1769.4 684.841 L1769.96 684.841 L1770.52 684.841 L1771.08 684.841 L1771.64 684.841 L1772.2 684.841 L1772.76 684.841 L1773.32 684.841 L1773.88 684.841 L1774.43 684.841 L1774.99 684.841 L1775.55 684.841 L1776.11 684.841 L1776.67 684.841 L1777.23 684.841 L1777.79 684.841 L1778.35 684.841 L1778.91 684.841 L1779.47 684.841 L1780.03 684.841 L1780.59 684.841 L1781.15 684.841 L1781.71 684.841 L1782.26 684.841 L1782.82 684.841 L1783.38 684.841 L1783.94 684.841 L1784.5 684.841 L1785.06 684.841 L1785.62 684.841 L1786.18 684.841 L1786.74 684.841 L1787.3 684.841 L1787.86 684.841 L1788.42 684.841 L1788.98 684.841 L1789.53 684.841 L1790.09 684.841 L1790.65 684.841 L1791.21 684.841 L1791.77 684.841 L1792.33 684.841 L1792.89 684.841 L1793.45 684.841 L1794.01 684.841 L1794.57 684.841 L1795.13 684.841 L1795.69 684.841 L1796.25 684.841 L1796.8 684.841 L1797.36 684.841 L1797.92 684.841 L1798.48 684.841 L1799.04 684.841 L1799.6 684.841 L1800.16 684.841 L1800.72 684.841 L1801.28 684.841 L1801.84 684.841 L1802.4 684.841 L1802.96 684.841 L1803.52 684.841 L1804.08 684.841 L1804.63 684.841 L1805.19 684.841 L1805.75 684.841 L1806.31 684.841 L1806.87 684.841 L1807.43 684.841 L1807.99 684.841 L1808.55 684.841 L1809.11 684.841 L1809.67 684.841 L1810.23 684.841 L1810.79 684.841 L1811.35 684.841 L1811.9 684.841 L1812.46 684.841 L1813.02 684.841 L1813.58 684.841 L1814.14 684.841 L1814.7 684.841 L1815.26 684.841 L1815.82 684.841 L1816.38 684.841 L1816.94 684.841 L1817.5 684.841 L1818.06 684.841 L1818.62 684.841 L1819.18 684.841 L1819.73 684.841 L1820.29 684.841 L1820.85 684.841 L1821.41 684.841 L1821.97 684.841 L1822.53 684.841 L1823.09 684.841 L1823.65 684.841 L1824.21 684.841 L1824.77 684.841 L1825.33 684.841 L1825.89 684.841 L1826.45 684.841 L1827 684.841 L1827.56 684.841 L1828.12 684.841 L1828.68 684.841 L1829.24 684.841 L1829.8 684.841 L1830.36 684.841 L1830.92 684.841 L1831.48 684.841 L1832.04 684.841 L1832.6 684.841 L1833.16 684.841 L1833.72 684.841 L1834.27 684.841 L1834.83 684.841 L1835.39 684.841 L1835.95 684.841 L1836.51 684.841 L1837.07 684.841 L1837.63 684.841 L1838.19 684.841 L1838.19 683.452 L1837.63 683.452 L1837.07 683.452 L1836.51 683.452 L1835.95 683.452 L1835.39 683.452 L1834.83 683.452 L1834.27 683.452 L1833.72 683.452 L1833.16 683.452 L1832.6 683.452 L1832.04 683.452 L1831.48 683.452 L1830.92 683.452 L1830.36 683.452 L1829.8 683.452 L1829.24 683.452 L1828.68 683.452 L1828.12 683.452 L1827.56 683.452 L1827 683.452 L1826.45 683.452 L1825.89 683.452 L1825.33 683.452 L1824.77 683.452 L1824.21 683.452 L1823.65 683.452 L1823.09 683.452 L1822.53 683.452 L1821.97 683.452 L1821.41 683.452 L1820.85 683.452 L1820.29 683.452 L1819.73 683.452 L1819.18 683.452 L1818.62 683.452 L1818.06 683.452 L1817.5 683.452 L1816.94 683.452 L1816.38 683.452 L1815.82 683.452 L1815.26 683.452 L1814.7 683.452 L1814.14 683.452 L1813.58 683.452 L1813.02 683.452 L1812.46 683.452 L1811.9 683.452 L1811.35 683.452 L1810.79 683.452 L1810.23 683.452 L1809.67 683.452 L1809.11 683.452 L1808.55 683.452 L1807.99 683.452 L1807.43 683.452 L1806.87 683.452 L1806.31 683.452 L1805.75 683.452 L1805.19 683.452 L1804.63 683.452 L1804.08 683.452 L1803.52 683.452 L1802.96 683.452 L1802.4 683.452 L1801.84 683.452 L1801.28 683.452 L1800.72 683.452 L1800.16 683.452 L1799.6 683.452 L1799.04 683.452 L1798.48 683.452 L1797.92 683.452 L1797.36 683.452 L1796.8 683.452 L1796.25 683.452 L1795.69 683.452 L1795.13 683.452 L1794.57 683.452 L1794.01 683.452 L1793.45 683.452 L1792.89 683.452 L1792.33 683.452 L1791.77 683.452 L1791.21 683.452 L1790.65 683.452 L1790.09 683.452 L1789.53 683.452 L1788.98 683.452 L1788.42 683.452 L1787.86 683.452 L1787.3 683.452 L1786.74 683.452 L1786.18 683.452 L1785.62 683.452 L1785.06 683.452 L1784.5 683.452 L1783.94 683.452 L1783.38 683.452 L1782.82 683.452 L1782.26 683.452 L1781.71 683.452 L1781.15 683.452 L1780.59 683.452 L1780.03 683.452 L1779.47 683.452 L1778.91 683.452 L1778.35 683.452 L1777.79 683.452 L1777.23 683.452 L1776.67 683.452 L1776.11 683.452 L1775.55 683.452 L1774.99 683.452 L1774.43 683.452 L1773.88 683.452 L1773.32 683.452 L1772.76 683.452 L1772.2 683.452 L1771.64 683.452 L1771.08 683.452 L1770.52 683.452 L1769.96 683.452 L1769.4 683.452 L1768.84 683.452 L1768.28 683.452 L1767.72 683.452 L1767.16 683.452 L1766.61 683.452 L1766.05 683.452 L1765.49 683.452 L1764.93 683.452 L1764.37 683.452 L1763.81 683.452 L1763.25 683.452 L1762.69 683.452 L1762.13 683.452 L1761.57 683.452 L1761.01 683.452 L1760.45 683.452 L1759.89 683.452 L1759.34 683.452 L1758.78 683.452 L1758.22 683.452 L1757.66 683.452 L1757.1 683.452 L1756.54 683.452 L1755.98 683.452 L1755.42 683.452 L1754.86 683.452 L1754.3 683.452 L1753.74 683.452 L1753.18 683.452 L1752.62 683.452 L1752.06 683.452 L1751.51 683.452 L1750.95 683.452 L1750.39 683.452 L1749.83 683.452 L1749.27 683.452 L1748.71 683.452 L1748.15 683.452 L1747.59 683.452 L1747.03 683.452 L1746.47 683.452 L1745.91 683.452 L1745.35 683.452 L1744.79 683.452 L1744.24 683.452 L1743.68 683.452 L1743.12 683.452 L1742.56 683.452 L1742 683.452 L1741.44 683.452 L1740.88 683.452 L1740.32 683.452 L1739.76 683.452 L1739.2 683.452 L1738.64 683.452 L1738.08 683.452 L1737.52 683.452 L1736.97 683.452 L1736.41 683.452 L1735.85 683.452 L1735.29 683.452 L1734.73 683.452 L1734.17 683.452 L1733.61 683.452 L1733.05 683.452 L1732.49 683.452 L1731.93 683.452 L1731.37 683.452 L1730.81 683.452 L1730.25 683.452 L1729.69 683.452 L1729.14 683.452 L1728.58 683.452 L1728.02 683.452 L1727.46 683.452 L1726.9 683.452 L1726.34 683.452 L1725.78 683.452 L1725.22 683.452 L1724.66 683.452 L1724.1 683.452 L1723.54 683.452 L1722.98 683.452 L1722.42 683.452 L1721.87 683.452 L1721.31 683.452 L1720.75 683.452 L1720.19 683.452 L1719.63 683.452 L1719.07 683.452 L1718.51 683.452 L1717.95 683.452 L1717.39 683.452 L1716.83 683.452 L1716.27 683.452 L1715.71 683.452 L1715.15 683.452 L1714.6 683.452 L1714.04 683.452 L1713.48 683.452 L1712.92 683.452 L1712.36 683.452 L1711.8 683.452 L1711.24 683.452 L1710.68 683.452 L1710.12 683.452 L1709.56 683.452 L1709 683.452 L1708.44 683.452 L1707.88 683.452 L1707.32 683.452 L1706.77 683.452 L1706.21 683.452 L1705.65 683.452 L1705.09 683.452 L1704.53 683.452 L1703.97 683.452 L1703.41 683.452 L1702.85 683.452 L1702.29 683.452 L1701.73 683.452 L1701.17 683.452 L1700.61 683.452 L1700.05 683.452 L1699.5 683.452 L1698.94 683.452 L1698.38 683.452 L1697.82 683.452 L1697.26 683.452 L1696.7 683.452 L1696.14 683.452 L1695.58 683.452 L1695.02 683.452 L1694.46 683.452 L1693.9 683.452 L1693.34 683.452 L1692.78 683.452 L1692.23 683.452 L1691.67 683.452 L1691.11 683.452 L1690.55 683.452 L1689.99 683.452 L1689.43 683.452 L1688.87 683.452 L1688.31 683.452 L1687.75 683.452 L1687.19 683.452 L1686.63 683.452 L1686.07 683.452 L1685.51 683.452 L1684.95 683.452 L1684.4 683.452 L1683.84 683.452 L1683.28 683.452 L1682.72 683.452 L1682.16 683.452 L1681.6 683.452 L1681.04 683.452 L1680.48 683.452 L1679.92 683.452 L1679.36 683.452 L1678.8 683.452 L1678.24 683.452 L1677.68 683.452 L1677.13 683.452 L1676.57 683.452 L1676.01 683.452 L1675.45 683.452 L1674.89 683.452 L1674.33 683.452 L1673.77 683.452 L1673.21 683.452 L1672.65 683.452 L1672.09 683.452 L1671.53 683.452 L1670.97 683.452 L1670.41 683.452 L1669.85 683.452 L1669.3 683.452 L1668.74 683.452 L1668.18 683.452 L1667.62 683.452 L1667.06 683.452 L1666.5 683.452 L1665.94 683.452 L1665.38 683.452 L1664.82 683.452 L1664.26 683.452 L1663.7 683.452 L1663.14 683.452 L1662.58 683.452 L1662.03 683.452 L1661.47 683.452 L1660.91 683.452 L1660.35 683.452 L1659.79 683.452 L1659.23 683.452 L1658.67 683.452 L1658.11 683.452 L1657.55 683.452 L1656.99 683.452 L1656.43 683.452 L1655.87 683.452 L1655.31 683.452 L1654.76 683.452 L1654.2 683.452 L1653.64 683.452 L1653.08 683.452 L1652.52 683.452 L1651.96 683.452 L1651.4 683.452 L1650.84 683.452 L1650.28 683.452 L1649.72 683.452 L1649.16 683.452 L1648.6 683.452 L1648.04 683.452 L1647.48 683.452 L1646.93 683.452 L1646.37 683.452 L1645.81 683.452 L1645.25 683.452 L1644.69 683.452 L1644.13 683.452 L1643.57 683.452 L1643.01 683.452 L1642.45 683.452 L1641.89 683.452 L1641.33 683.452 L1640.77 683.452 L1640.21 683.452 L1639.66 683.452 L1639.1 683.452 L1638.54 683.452 L1637.98 683.452 L1637.42 683.452 L1636.86 683.452 L1636.3 683.452 L1635.74 683.452 L1635.18 683.452 L1634.62 683.452 L1634.06 683.452 L1633.5 683.452 L1632.94 683.452 L1632.39 683.452 L1631.83 683.452 L1631.27 683.452 L1630.71 683.452 L1630.15 683.452 L1629.59 683.452 L1629.03 683.452 L1628.47 683.452 L1627.91 683.452 L1627.35 683.452 L1626.79 683.452 L1626.23 683.452 L1625.67 683.452 L1625.11 683.452 L1624.56 683.452 L1624 683.452 L1623.44 683.452 L1622.88 683.452 L1622.32 683.452 L1621.76 683.452 L1621.2 683.452 L1620.64 683.452 L1620.08 683.452 L1619.52 683.452 L1618.96 683.452 L1618.4 683.452 L1617.84 683.452 L1617.29 683.452 L1616.73 683.452 L1616.17 683.452 L1615.61 683.452 L1615.05 683.452 L1614.49 683.452 L1613.93 683.452 L1613.37 683.452 L1612.81 683.452 L1612.25 683.452 L1611.69 683.452 L1611.13 683.452 L1610.57 683.452 L1610.02 683.452 L1609.46 683.452 L1608.9 683.452 L1608.34 683.452 L1607.78 683.452 L1607.22 683.452 L1606.66 683.452 L1606.1 683.452 L1605.54 683.452 L1604.98 683.452 L1604.42 683.452 L1603.86 683.452 L1603.3 683.452 L1602.74 683.452 L1602.19 683.452 L1601.63 683.452 L1601.07 683.452 L1600.51 683.452 L1599.95 683.452 L1599.39 683.452 L1598.83 683.452 L1598.27 683.452 L1597.71 683.452 L1597.15 683.452 L1596.59 683.452 L1596.03 683.452 L1595.47 683.452 L1594.92 683.452 L1594.36 683.452 L1593.8 683.452 L1593.24 683.452 L1592.68 683.452 L1592.12 683.452 L1591.56 683.452 L1591 683.452 L1590.44 683.452 L1589.88 683.452 L1589.32 683.452 L1588.76 683.452 L1588.2 683.452 L1587.65 683.452 L1587.09 683.452 L1586.53 683.452 L1585.97 683.452 L1585.41 683.452 L1584.85 683.452 L1584.29 683.452 L1583.73 683.452 L1583.17 683.452 L1582.61 683.452 L1582.05 683.452 L1581.49 683.452 L1580.93 683.452 L1580.37 683.452 L1579.82 683.452 L1579.26 683.452 L1578.7 683.452 L1578.14 683.452 L1577.58 683.452 L1577.02 683.452 L1576.46 683.452 L1575.9 683.452 L1575.34 683.452 L1574.78 683.452 L1574.22 683.452 L1573.66 683.452 L1573.1 683.452 L1572.55 683.452 L1571.99 683.452 L1571.43 683.452 L1570.87 683.452 L1570.31 683.452 L1569.75 683.452 L1569.19 683.452 L1568.63 683.452 L1568.07 683.452 L1567.51 683.452 L1566.95 683.452 L1566.39 683.452 L1565.83 683.452 L1565.28 683.452 L1564.72 683.452 L1564.16 683.452 L1563.6 683.452 L1563.04 683.452 L1562.48 683.452 L1561.92 683.452 L1561.36 683.452 L1560.8 683.452 L1560.24 683.452 L1559.68 683.452 L1559.12 683.452 L1558.56 683.452 L1558 683.452 L1557.45 683.452 L1556.89 683.452 L1556.33 683.452 L1555.77 683.452 L1555.21 683.452 L1554.65 683.452 L1554.09 683.452 L1553.53 683.452 L1552.97 683.452 L1552.41 683.452 L1551.85 683.452 L1551.29 683.452 L1550.73 683.452 L1550.18 683.452 L1549.62 683.452 L1549.06 683.452 L1548.5 683.452 L1547.94 683.452 L1547.38 683.452 L1546.82 683.452 L1546.26 683.452 L1545.7 683.452 L1545.14 683.452 L1544.58 683.452 L1544.02 683.452 L1543.46 683.452 L1542.9 683.452 L1542.35 683.452 L1541.79 683.452 L1541.23 683.452 L1540.67 683.452 L1540.11 683.452 L1539.55 683.452 L1538.99 683.452 L1538.43 683.452 L1537.87 683.452 L1537.31 683.452 L1536.75 683.452 L1536.19 683.452 L1535.63 683.452 L1535.08 683.452 L1534.52 683.452 L1533.96 683.452 L1533.4 683.452 L1532.84 683.452 L1532.28 683.452 L1531.72 683.452 L1531.16 683.452 L1530.6 683.452 L1530.04 683.452 L1529.48 683.452 L1528.92 683.452 L1528.36 683.452 L1527.81 683.452 L1527.25 683.452 L1526.69 683.452 L1526.13 683.452 L1525.57 683.452 L1525.01 683.452 L1524.45 683.452 L1523.89 683.452 L1523.33 683.452 L1522.77 683.452 L1522.21 683.452 L1521.65 683.452 L1521.09 683.452 L1520.53 683.452 L1519.98 683.452 L1519.42 683.452 L1518.86 683.452 L1518.3 683.452 L1517.74 683.452 L1517.18 683.452 L1516.62 683.452 L1516.06 683.452 L1515.5 683.452 L1514.94 683.452 L1514.38 683.452 L1513.82 683.452 L1513.26 683.452 L1512.71 683.452 L1512.15 683.452 L1511.59 683.452 L1511.03 683.452 L1510.47 683.452 L1509.91 683.452 L1509.35 683.452 L1508.79 683.452 L1508.23 683.452 L1507.67 683.452 L1507.11 683.452 L1506.55 683.452 L1505.99 683.452 L1505.44 683.452 L1504.88 683.452 L1504.32 683.452 L1503.76 683.452 L1503.2 683.452 L1502.64 683.452 L1502.08 683.452 L1501.52 683.452 L1500.96 683.452 L1500.4 683.452 L1499.84 683.452 L1499.28 683.452 L1498.72 683.452 L1498.16 683.452 L1497.61 683.452 L1497.05 683.452 L1496.49 683.452 L1495.93 683.452 L1495.37 683.452 L1494.81 683.452 L1494.25 683.452 L1493.69 683.452 L1493.13 683.452 L1492.57 683.452 L1492.01 683.452 L1491.45 683.452 L1490.89 683.452 L1490.34 683.452 L1489.78 683.452 L1489.22 683.452 L1488.66 683.452 L1488.1 683.452 L1487.54 683.452 L1486.98 683.452 L1486.42 683.452 L1485.86 683.452 L1485.3 683.452 L1484.74 683.452 L1484.18 683.452 L1483.62 683.452 L1483.07 683.452 L1482.51 683.452 L1481.95 683.452 L1481.39 683.452 L1480.83 683.452 L1480.27 683.452 L1479.71 683.452 L1479.15 683.452 L1478.59 683.452 L1478.03 683.452 L1477.47 683.452 L1476.91 683.452 L1476.35 683.452 L1475.79 683.452 L1475.24 683.452 L1474.68 683.452 L1474.12 683.452 L1473.56 683.452 L1473 683.452 L1472.44 683.452 L1471.88 683.452 L1471.32 683.452 L1470.76 683.452 L1470.2 683.452 L1469.64 683.452 L1469.08 683.452 L1468.52 683.452 L1467.97 683.452 L1467.41 683.452 L1466.85 683.452 L1466.29 683.452 L1465.73 683.452 L1465.17 683.452 L1464.61 683.452 L1464.05 683.452 L1463.49 683.452 L1462.93 683.452 L1462.37 683.452 L1461.81 683.452 L1461.25 683.452 L1460.7 683.452 L1460.14 683.452 L1459.58 683.452 L1459.02 683.452 L1458.46 683.452 L1457.9 683.452 L1457.34 683.452 L1456.78 683.452 L1456.22 683.452 L1455.66 683.452 L1455.1 683.452 L1454.54 683.452 L1453.98 683.452 L1453.42 683.452 L1452.87 683.452 L1452.31 683.452 L1451.75 683.452 L1451.19 683.452 L1450.63 683.452 L1450.07 683.452 L1449.51 683.452 L1448.95 683.452 L1448.39 683.452 L1447.83 683.452 L1447.27 683.452 L1446.71 683.452 L1446.15 683.452 L1445.6 683.452 L1445.04 683.452 L1444.48 683.452 L1443.92 683.452 L1443.36 683.452 L1442.8 683.452 L1442.24 683.452 L1441.68 683.452 L1441.12 683.452 L1440.56 683.452 L1440 683.452 L1439.44 683.452 L1438.88 683.452 L1438.33 683.452 L1437.77 683.452 L1437.21 683.452 L1436.65 683.452 L1436.09 683.452 L1435.53 683.452 L1434.97 683.452 L1434.41 683.452 L1433.85 683.452 L1433.29 683.452 L1432.73 683.452 L1432.17 683.452 L1431.61 683.452 L1431.05 683.452 L1430.5 683.452 L1429.94 683.452 L1429.38 683.452 L1428.82 683.452 L1428.26 683.452 L1427.7 683.452 L1427.14 683.452 L1426.58 683.452 L1426.02 683.452 L1425.46 683.452 L1424.9 683.452 L1424.34 683.452 L1423.78 683.452 L1423.23 683.452 L1422.67 683.452 L1422.11 683.452 L1421.55 683.452 L1420.99 683.452 L1420.43 683.452 L1419.87 683.452 L1419.31 683.452 L1418.75 683.452 L1418.19 683.452 L1417.63 683.452 L1417.07 683.452 L1416.51 683.452 L1415.95 683.452 L1415.4 683.452 L1414.84 683.452 L1414.28 683.452 L1413.72 683.452 L1413.16 683.452 L1412.6 683.452 L1412.04 683.452 L1411.48 683.452 L1410.92 683.452 L1410.36 683.452 L1409.8 683.452 L1409.24 683.452 L1408.68 683.452 L1408.13 683.452 L1407.57 683.452 L1407.01 683.452 L1406.45 683.452 L1405.89 683.452 L1405.33 683.452 L1404.77 683.452 L1404.21 683.452 L1403.65 683.452 L1403.09 683.452 L1402.53 683.452 L1401.97 683.452 L1401.41 683.452 L1400.86 683.452 L1400.3 683.452 L1399.74 683.452 L1399.18 683.452 L1398.62 683.452 L1398.06 683.452 L1397.5 683.452 L1396.94 683.452 L1396.38 683.452 L1395.82 683.452 L1395.26 683.452 L1394.7 683.452 L1394.14 683.452 L1393.58 683.452 L1393.03 683.452 L1392.47 683.452 L1391.91 683.452 L1391.35 683.452 L1390.79 683.452 L1390.23 683.452 L1389.67 683.452 L1389.11 683.452 L1388.55 683.452 L1387.99 683.452 L1387.43 683.452 L1386.87 683.452 L1386.31 683.452 L1385.76 683.452 L1385.2 683.452 L1384.64 683.452 L1384.08 683.452 L1383.52 683.452 L1382.96 683.452 L1382.4 683.452 L1381.84 683.452 L1381.28 683.452 L1380.72 683.452 L1380.16 683.452 L1379.6 683.452 L1379.04 683.452 L1378.49 683.452 L1377.93 683.452 L1377.37 683.452 L1376.81 683.452 L1376.25 683.452 L1375.69 683.452 L1375.13 683.452 L1374.57 683.452 L1374.01 683.452 L1373.45 683.452 L1372.89 683.452 L1372.33 683.452 L1371.77 683.452 L1371.21 683.452 L1370.66 683.452 L1370.1 683.452 L1369.54 683.452 L1368.98 683.452 L1368.42 683.452 L1367.86 683.452 L1367.3 683.452 L1366.74 683.452 L1366.18 683.452 L1365.62 683.452 L1365.06 683.452 L1364.5 683.452 L1363.94 683.452 L1363.39 683.452 L1362.83 683.452 L1362.27 683.452 L1361.71 683.452 L1361.15 683.452 L1360.59 683.452 L1360.03 683.452 L1359.47 683.452 L1358.91 683.452 L1358.35 683.452 L1357.79 683.452 L1357.23 683.452 L1356.67 683.452 L1356.12 683.452 L1355.56 683.452 L1355 683.452 L1354.44 683.452 L1353.88 683.452 L1353.32 683.452 L1352.76 683.452 L1352.2 683.452 L1351.64 683.452 L1351.08 683.452 L1350.52 683.452 L1349.96 683.452 L1349.4 683.452 L1348.84 683.452 L1348.29 683.452 L1347.73 683.452 L1347.17 683.452 L1346.61 683.452 L1346.05 683.452 L1345.49 683.452 L1344.93 683.452 L1344.37 683.452 L1343.81 683.452 L1343.25 683.452 L1342.69 683.452 L1342.13 683.452 L1341.57 683.452 L1341.02 683.452 L1340.46 683.452 L1339.9 683.452 L1339.34 683.452 L1338.78 683.452 L1338.22 683.452 L1337.66 683.452 L1337.1 683.452 L1336.54 683.452 L1335.98 683.452 L1335.42 683.452 L1334.86 683.452 L1334.3 683.452 L1333.75 683.452 L1333.19 683.452 L1332.63 683.452 L1332.07 683.452 L1331.51 683.452 L1330.95 683.452 L1330.39 683.452 L1329.83 683.452 L1329.27 683.452 L1328.71 683.452 L1328.15 683.452 L1327.59 683.452 L1327.03 683.452 L1326.47 683.452 L1325.92 683.452 L1325.36 683.452 L1324.8 683.452 L1324.24 683.452 L1323.68 683.452 L1323.12 683.452 L1322.56 683.452 L1322 683.452 L1321.44 683.452 L1320.88 683.452 L1320.32 683.452 L1319.76 683.452 L1319.2 683.452 L1318.65 683.452 L1318.09 683.452 L1317.53 683.452 L1316.97 683.452 L1316.41 683.452 L1315.85 683.452 L1315.29 683.452 L1314.73 683.452 L1314.17 683.452 L1313.61 683.452 L1313.05 683.452 L1312.49 683.452 L1311.93 683.452 L1311.38 683.452 L1310.82 683.452 L1310.26 683.452 L1309.7 683.452 L1309.14 683.452 L1308.58 683.452 L1308.02 683.452 L1307.46 683.452 L1306.9 683.452 L1306.34 683.452 L1305.78 683.452 L1305.22 683.452 L1304.66 683.452 L1304.1 683.452 L1303.55 683.452 L1302.99 683.452 L1302.43 683.452 L1301.87 683.452 L1301.31 683.452 L1300.75 683.452 L1300.19 683.452 L1299.63 683.452 L1299.07 683.452 L1298.51 683.452 L1297.95 683.452 L1297.39 683.452 L1296.83 683.452 L1296.28 683.452 L1295.72 683.452 L1295.16 683.452 L1294.6 683.452 L1294.04 683.452 L1293.48 683.452 L1292.92 683.452 L1292.36 683.452 L1291.8 683.452 L1291.24 683.452 L1290.68 683.452 L1290.12 683.452 L1289.56 683.452 L1289 683.452 L1288.45 683.452 L1287.89 683.452 L1287.33 683.452 L1286.77 683.452 L1286.21 683.452 L1285.65 683.452 L1285.09 683.452 L1284.53 683.452 L1283.97 683.452 L1283.41 683.452 L1282.85 683.452 L1282.29 683.452 L1281.73 683.452 L1281.18 683.452 L1280.62 683.452 L1280.06 683.452 L1279.5 683.452 L1278.94 683.452 L1278.38 683.452 L1277.82 683.452 L1277.26 683.452 L1276.7 683.452 L1276.14 683.452 L1275.58 683.452 L1275.02 683.452 L1274.46 683.452 L1273.91 683.452 L1273.35 683.452 L1272.79 683.452 L1272.23 683.452 L1271.67 683.452 L1271.11 683.452 L1270.55 683.452 L1269.99 683.452 L1269.43 683.452 L1268.87 683.452 L1268.31 683.452 L1267.75 683.452 L1267.19 683.452 L1266.63 683.452 L1266.08 683.452 L1265.52 683.452 L1264.96 683.452 L1264.4 683.452 L1263.84 683.452 L1263.28 683.452 L1262.72 683.452 L1262.16 683.452 L1261.6 683.452 L1261.04 683.452 L1260.48 683.452 L1259.92 683.452 L1259.36 683.452 L1258.81 683.452 L1258.25 683.452 L1257.69 683.452 L1257.13 683.452 L1256.57 683.452 L1256.01 683.452 L1255.45 683.452 L1254.89 683.452 L1254.33 683.452 L1253.77 683.452 L1253.21 683.452 L1252.65 683.452 L1252.09 683.452 L1251.54 683.452 L1250.98 683.452 L1250.42 683.452 L1249.86 683.452 L1249.3 683.452 L1248.74 683.452 L1248.18 683.452 L1247.62 683.452 L1247.06 683.452 L1246.5 683.452 L1245.94 683.452 L1245.38 683.452 L1244.82 683.452 L1244.26 683.452 L1243.71 683.452 L1243.15 683.452 L1242.59 683.452 L1242.03 683.452 L1241.47 683.452 L1240.91 683.452 L1240.35 683.452 L1239.79 683.452 L1239.23 683.452 L1238.67 683.452 L1238.11 683.452 L1237.55 683.452 L1236.99 683.452 L1236.44 683.452 L1235.88 683.452 L1235.32 683.452 L1234.76 683.452 L1234.2 683.452 L1233.64 683.452 L1233.08 683.452 L1232.52 683.452 L1231.96 683.452 L1231.4 683.452 L1230.84 683.452 L1230.28 683.452 L1229.72 683.452 L1229.17 683.452 L1228.61 683.452 L1228.05 683.452 L1227.49 683.452 L1226.93 683.452 L1226.37 683.452 L1225.81 683.452 L1225.25 683.452 L1224.69 683.452 L1224.13 683.452 L1223.57 683.452 L1223.01 683.452 L1222.45 683.452 L1221.89 683.452 L1221.34 683.452 L1220.78 683.452 L1220.22 683.452 L1219.66 683.452 L1219.1 683.452 L1218.54 683.452 L1217.98 683.452 L1217.42 683.452 L1216.86 683.452 L1216.3 683.452 L1215.74 683.452 L1215.18 683.452 L1214.62 683.452 L1214.07 683.452 L1213.51 683.452 L1212.95 683.452 L1212.39 683.452 L1211.83 683.452 L1211.27 683.452 L1210.71 683.452 L1210.15 683.452 L1209.59 683.452 L1209.03 683.452 L1208.47 683.452 L1207.91 683.452 L1207.35 683.452 L1206.8 683.452 L1206.24 683.452 L1205.68 683.452 L1205.12 683.452 L1204.56 683.452 L1204 683.452 L1203.44 683.452 L1202.88 683.452 L1202.32 683.452 L1201.76 683.452 L1201.2 683.452 L1200.64 683.452 L1200.08 683.452 L1199.52 683.452 L1198.97 683.452 L1198.41 683.452 L1197.85 683.452 L1197.29 683.452 L1196.73 683.452 L1196.17 683.452 L1195.61 683.452 L1195.05 683.452 L1194.49 683.452 L1193.93 683.452 L1193.37 683.452 L1192.81 683.452 L1192.25 683.452 L1191.7 683.452 L1191.14 683.452 L1190.58 683.452 L1190.02 683.452 L1189.46 683.452 L1188.9 683.452 L1188.34 683.452 L1187.78 683.452 L1187.22 683.452 L1186.66 683.452 L1186.1 683.452 L1185.54 683.452 L1184.98 683.452 L1184.43 683.452 L1183.87 683.452 L1183.31 683.452 L1182.75 683.452 L1182.19 683.452 L1181.63 683.452 L1181.07 683.452 L1180.51 683.452 L1179.95 683.452 L1179.39 683.452 L1178.83 683.452 L1178.27 683.452 L1177.71 683.452 L1177.15 683.452 L1176.6 683.452 L1176.04 683.452 L1175.48 683.452 L1174.92 683.452 L1174.36 683.452 L1173.8 683.452 L1173.24 683.452 L1172.68 683.452 L1172.12 683.452 L1171.56 683.452 L1171 683.452 L1170.44 683.452 L1169.88 683.452 L1169.33 683.452 L1168.77 683.452 L1168.21 683.452 L1167.65 683.452 L1167.09 683.452 L1166.53 683.452 L1165.97 683.452 L1165.41 683.452 L1164.85 683.452 L1164.29 683.452 L1163.73 683.452 L1163.17 683.452 L1162.61 683.452 L1162.05 683.452 L1161.5 683.452 L1160.94 683.452 L1160.38 683.452 L1159.82 683.452 L1159.26 683.452 L1158.7 683.452 L1158.14 683.452 L1157.58 683.452 L1157.02 683.452 L1156.46 683.452 L1155.9 683.452 L1155.34 683.452 L1154.78 683.452 L1154.23 683.452 L1153.67 683.452 L1153.11 683.452 L1152.55 683.452 L1151.99 683.452 L1151.43 683.452 L1150.87 683.452 L1150.31 683.452 L1149.75 683.452 L1149.19 683.452 L1148.63 683.452 L1148.07 683.452 L1147.51 683.452 L1146.96 683.452 L1146.4 683.452 L1145.84 683.452 L1145.28 683.452 L1144.72 683.452 L1144.16 683.452 L1143.6 683.452 L1143.04 683.452 L1142.48 683.452 L1141.92 683.452 L1141.36 683.452 L1140.8 683.452 L1140.24 683.452 L1139.68 683.452 L1139.13 683.452 L1138.57 683.452 L1138.01 683.452 L1137.45 683.452 L1136.89 683.452 L1136.33 683.452 L1135.77 683.452 L1135.21 683.452 L1134.65 683.452 L1134.09 683.452 L1133.53 683.452 L1132.97 683.452 L1132.41 683.452 L1131.86 683.452 L1131.3 683.452 L1130.74 683.452 L1130.18 683.452 L1129.62 683.452 L1129.06 683.452 L1128.5 683.452 L1127.94 683.452 L1127.38 683.452 L1126.82 683.452 L1126.26 683.452 L1125.7 683.452 L1125.14 683.452 L1124.59 683.452 L1124.03 683.452 L1123.47 683.452 L1122.91 683.452 L1122.35 683.452 L1121.79 683.452 L1121.23 683.452 L1120.67 683.452 L1120.11 683.452 L1119.55 683.452 L1118.99 683.452 L1118.43 683.452 L1117.87 683.452 L1117.31 683.452 L1116.76 683.452 L1116.2 683.452 L1115.64 683.452 L1115.08 683.452 L1114.52 683.452 L1113.96 683.452 L1113.4 683.452 L1112.84 683.452 L1112.28 683.452 L1111.72 683.452 L1111.16 683.452 L1110.6 683.452 L1110.04 683.452 L1109.49 683.452 L1108.93 683.452 L1108.37 683.452 L1107.81 683.452 L1107.25 683.452 L1106.69 683.452 L1106.13 683.452 L1105.57 683.452 L1105.01 683.452 L1104.45 683.452 L1103.89 683.452 L1103.33 683.452 L1102.77 683.452 L1102.22 683.452 L1101.66 683.452 L1101.1 683.452 L1100.54 683.452 L1099.98 683.452 L1099.42 683.452 L1098.86 683.452 L1098.3 683.452 L1097.74 683.452 L1097.18 683.452 L1096.62 683.452 L1096.06 683.452 L1095.5 683.452 L1094.94 683.452 L1094.39 683.452 L1093.83 683.452 L1093.27 683.452 L1092.71 683.452 L1092.15 683.452 L1091.59 683.452 L1091.03 683.452 L1090.47 683.452 L1089.91 683.452 L1089.35 683.452 L1088.79 683.452 L1088.23 683.452 L1087.67 683.452 L1087.12 683.452 L1086.56 683.452 L1086 683.452 L1085.44 683.452 L1084.88 683.452 L1084.32 683.452 L1083.76 683.452 L1083.2 683.452 L1082.64 683.452 L1082.08 683.452 L1081.52 683.452 L1080.96 683.452 L1080.4 683.452 L1079.85 683.452 L1079.29 683.452 L1078.73 683.452 L1078.17 683.452 L1077.61 683.452 L1077.05 683.452 L1076.49 683.452 L1075.93 683.452 L1075.37 683.452 L1074.81 683.452 L1074.25 683.452 L1073.69 683.452 L1073.13 683.452 L1072.57 683.452 L1072.02 683.452 L1071.46 683.452 L1070.9 683.452 L1070.34 683.452 L1069.78 683.452 L1069.22 683.452 L1068.66 683.452 L1068.1 683.452 L1067.54 683.452 L1066.98 683.452 L1066.42 683.452 L1065.86 683.452 L1065.3 683.452 L1064.75 683.452 L1064.19 683.452 L1063.63 683.452 L1063.07 683.452 L1062.51 683.452 L1061.95 683.452 L1061.39 683.452 L1060.83 683.452 L1060.27 683.452 L1059.71 683.452 L1059.15 683.452 L1058.59 683.452 L1058.03 683.452 L1057.48 683.452 L1056.92 683.452 L1056.36 683.452 L1055.8 683.452 L1055.24 683.452 L1054.68 683.452 L1054.12 683.452 L1053.56 683.452 L1053 683.452 L1052.44 683.452 L1051.88 683.452 L1051.32 683.452 L1050.76 683.452 L1050.2 683.452 L1049.65 683.452 L1049.09 683.452 L1048.53 683.452 L1047.97 683.452 L1047.41 683.452 L1046.85 683.452 L1046.29 683.452 L1045.73 683.452 L1045.17 683.452 L1044.61 683.452 L1044.05 683.452 L1043.49 683.452 L1042.93 683.452 L1042.38 683.452 L1041.82 683.452 L1041.26 683.452 L1040.7 683.452 L1040.14 683.452 L1039.58 683.452 L1039.02 683.452 L1038.46 683.452 L1037.9 683.452 L1037.34 683.452 L1036.78 683.452 L1036.22 683.452 L1035.66 683.452 L1035.1 683.452 L1034.55 683.452 L1033.99 683.452 L1033.43 683.452 L1032.87 683.452 L1032.31 683.452 L1031.75 683.452 L1031.19 683.452 L1030.63 683.452 L1030.07 683.452 L1029.51 683.452 L1028.95 683.452 L1028.39 683.452 L1027.83 683.452 L1027.28 683.452 L1026.72 683.452 L1026.16 683.452 L1025.6 683.452 L1025.04 683.452 L1024.48 683.452 L1023.92 683.452 L1023.36 683.452 L1022.8 683.452 L1022.24 683.452 L1021.68 683.452 L1021.12 683.452 L1020.56 683.452 L1020.01 683.452 L1019.45 683.452 L1018.89 683.452 L1018.33 683.452 L1017.77 683.452 L1017.21 683.452 L1016.65 683.452 L1016.09 683.452 L1015.53 683.452 L1014.97 683.452 L1014.41 683.452 L1013.85 683.452 L1013.29 683.452 L1012.73 683.452 L1012.18 683.452 L1011.62 683.452 L1011.06 683.452 L1010.5 683.452 L1009.94 683.452 L1009.38 683.452 L1008.82 683.452 L1008.26 683.452 L1007.7 683.452 L1007.14 683.452 L1006.58 683.452 L1006.02 683.452 L1005.46 683.452 L1004.91 683.452 L1004.35 683.452 L1003.79 683.452 L1003.23 683.452 L1002.67 683.452 L1002.11 683.452 L1001.55 683.452 L1000.99 683.452 L1000.43 683.452 L999.872 683.452 L999.313 683.452 L998.754 683.452 L998.194 683.452 L997.635 683.452 L997.076 683.452 L996.517 683.452 L995.957 683.452 L995.398 683.452 L994.839 683.452 L994.28 683.452 L993.72 683.452 L993.161 683.452 L992.602 683.452 L992.043 683.452 L991.483 683.452 L990.924 683.452 L990.365 683.452 L989.806 683.452 L989.246 683.452 L988.687 683.452 L988.128 683.452 L987.569 683.452 L987.009 683.452 L986.45 683.452 L985.891 683.452 L985.332 683.452 L984.772 683.452 L984.213 683.452 L983.654 683.452 L983.095 683.452 L982.535 683.452 L981.976 683.452 L981.417 683.452 L980.858 683.452 L980.298 683.452 L979.739 683.452 L979.18 683.452 L978.621 683.452 L978.061 683.452 L977.502 683.452 L976.943 683.452 L976.384 683.452 L975.824 683.452 L975.265 683.452 L974.706 683.452 L974.147 683.452 L973.587 683.452 L973.028 683.452 L972.469 683.452 L971.91 683.452 L971.35 683.452 L970.791 683.452 L970.232 683.452 L969.673 683.452 L969.113 683.452 L968.554 683.452 L967.995 683.452 L967.436 683.452 L966.876 683.452 L966.317 683.452 L965.758 683.452 L965.199 683.452 L964.639 683.452 L964.08 683.452 L963.521 683.452 L962.962 683.452 L962.402 683.452 L961.843 683.452 L961.284 683.452 L960.725 683.452 L960.165 683.452 L959.606 683.452 L959.047 683.452 L958.488 683.452 L957.928 683.452 L957.369 683.452 L956.81 683.452 L956.251 683.452 L955.691 683.452 L955.132 683.452 L954.573 683.452 L954.014 683.452 L953.454 683.452 L952.895 683.452 L952.336 683.452 L951.777 683.452 L951.217 683.452 L950.658 683.452 L950.099 683.452 L949.54 683.452 L948.98 683.452 L948.421 683.452 L947.862 683.452 L947.303 683.452 L946.743 683.452 L946.184 683.452 L945.625 683.452 L945.066 683.452 L944.506 683.452 L943.947 683.452 L943.388 683.452 L942.829 683.452 L942.269 683.452 L941.71 683.452 L941.151 683.452 L940.592 683.452 L940.032 683.452 L939.473 683.452 L938.914 683.452 L938.355 683.452 L937.795 683.452 L937.236 683.452 L936.677 683.452 L936.118 683.452 L935.558 683.452 L934.999 683.452 L934.44 683.452 L933.881 683.452 L933.321 683.452 L932.762 683.452 L932.203 683.452 L931.644 683.452 L931.084 683.452 L930.525 683.452 L929.966 683.452 L929.406 683.452 L928.847 683.452 L928.288 683.452 L927.729 683.452 L927.169 683.452 L926.61 683.452 L926.051 683.452 L925.492 683.452 L924.932 683.452 L924.373 683.452 L923.814 683.452 L923.255 683.452 L922.695 683.452 L922.136 683.452 L921.577 683.452 L921.018 683.452 L920.458 683.452 L919.899 683.452 L919.34 683.452 L918.781 683.452 L918.221 683.452 L917.662 683.452 L917.103 683.452 L916.544 683.452 L915.984 683.452 L915.425 683.452 L914.866 683.452 L914.307 683.452 L913.747 683.452 L913.188 683.452 L912.629 683.452 L912.07 683.452 L911.51 683.452 L910.951 683.452 L910.392 683.452 L909.833 683.452 L909.273 683.452 L908.714 683.452 L908.155 683.452 L907.596 683.452 L907.036 683.452 L906.477 683.452 L905.918 683.452 L905.359 683.452 L904.799 683.452 L904.24 683.452 L903.681 683.452 L903.122 683.452 L902.562 683.452 L902.003 683.452 L901.444 683.452 L900.885 683.452 L900.325 683.452 L899.766 683.452 L899.207 683.452 L898.648 683.452 L898.088 683.452 L897.529 683.452 L896.97 683.452 L896.411 683.452 L895.851 683.452 L895.292 683.452 L894.733 683.452 L894.174 683.452 L893.614 683.452 L893.055 683.452 L892.496 683.452 L891.937 683.452 L891.377 683.452 L890.818 683.452 L890.259 683.452 L889.7 683.452 L889.14 683.452 L888.581 683.452 L888.022 683.452 L887.463 683.452 L886.903 683.452 L886.344 683.452 L885.785 683.452 L885.226 683.452 L884.666 683.452 L884.107 683.452 L883.548 683.452 L882.989 683.452 L882.429 683.452 L881.87 683.452 L881.311 683.452 L880.752 683.452 L880.192 683.452 L879.633 683.452 L879.074 683.452 L878.515 683.452 L877.955 683.452 L877.396 683.452 L876.837 683.452 L876.278 683.452 L875.718 683.452 L875.159 683.452 L874.6 683.452 L874.041 683.452 L873.481 683.452 L872.922 683.452 L872.363 683.452 L871.804 683.452 L871.244 683.452 L870.685 683.452 L870.126 683.452 L869.567 683.452 L869.007 683.452 L868.448 683.452 L867.889 683.452 L867.33 683.452 L866.77 683.452 L866.211 683.452 L865.652 683.452 L865.093 683.452 L864.533 683.452 L863.974 683.452 L863.415 683.452 L862.856 683.452 L862.296 683.452 L861.737 683.452 L861.178 683.452 L860.619 683.452 L860.059 683.452 L859.5 683.452 L858.941 683.452 L858.382 683.452 L857.822 683.452 L857.263 683.452 L856.704 683.452 L856.145 683.452 L855.585 683.452 L855.026 683.452 L854.467 683.452 L853.908 683.452 L853.348 683.452 L852.789 683.452 L852.23 683.452 L851.671 683.452 L851.111 683.452 L850.552 683.452 L849.993 683.452 L849.434 683.452 L848.874 683.452 L848.315 683.452 L847.756 683.452 L847.197 683.452 L846.637 683.452 L846.078 683.452 L845.519 683.452 L844.96 683.452 L844.4 683.452 L843.841 683.452 L843.282 683.452 L842.723 683.452 L842.163 683.452 L841.604 683.452 L841.045 683.452 L840.486 683.452 L839.926 683.452 L839.367 683.452 L838.808 683.452 L838.249 683.452 L837.689 683.452 L837.13 683.452 L836.571 683.452 L836.012 683.452 L835.452 683.452 L834.893 683.452 L834.334 683.452 L833.775 683.452 L833.215 683.452 L832.656 683.452 L832.097 683.452 L831.538 683.452 L830.978 683.452 L830.419 683.452 L829.86 683.452 L829.301 683.452 L828.741 683.452 L828.182 683.452 L827.623 683.452 L827.064 683.452 L826.504 683.452 L825.945 683.452 L825.386 683.452 L824.827 683.452 L824.267 683.452 L823.708 683.452 L823.149 683.452 L822.59 683.452 L822.03 683.452 L821.471 683.452 L820.912 683.452 L820.353 683.452 L819.793 683.452 L819.234 683.452 L818.675 683.452 L818.116 683.452 L817.556 683.452 L816.997 683.452 L816.438 683.452 L815.879 683.452 L815.319 683.452 L814.76 683.452 L814.201 683.452 L813.642 683.452 L813.082 683.452 L812.523 683.452 L811.964 683.452 L811.405 683.452 L810.845 683.452 L810.286 683.452 L809.727 683.452 L809.168 683.452 L808.608 683.452 L808.049 683.452 L807.49 683.452 L806.931 683.452 L806.371 683.452 L805.812 683.452 L805.253 683.452 L804.693 683.452 L804.134 683.452 L803.575 683.452 L803.016 683.452 L802.456 683.452 L801.897 683.452 L801.338 683.452 L800.779 683.452 L800.219 683.452 L799.66 683.452 L799.101 683.452 L798.542 683.452 L797.982 683.452 L797.423 683.452 L796.864 683.452 L796.305 683.452 L795.745 683.452 L795.186 683.452 L794.627 683.452 L794.068 683.452 L793.508 683.452 L792.949 683.452 L792.39 683.452 L791.831 683.452 L791.271 683.452 L790.712 683.452 L790.153 683.452 L789.594 683.452 L789.034 683.452 L788.475 683.452 L787.916 683.452 L787.357 683.452 L786.797 683.452 L786.238 683.452 L785.679 683.452 L785.12 683.452 L784.56 683.452 L784.001 683.452 L783.442 683.452 L782.883 683.452 L782.323 683.452 L781.764 683.452 L781.205 683.452 L780.646 683.452 L780.086 683.452 L779.527 683.452 L778.968 683.452 L778.409 683.452 L777.849 683.452 L777.29 683.452 L776.731 683.452 L776.172 683.452 L775.612 683.452 L775.053 683.452 L774.494 683.452 L773.935 683.452 L773.375 683.452 L772.816 683.452 L772.257 683.452 L771.698 683.452 L771.138 683.452 L770.579 683.452 L770.02 683.452 L769.461 683.452 L768.901 683.452 L768.342 683.452 L767.783 683.452 L767.224 683.452 L766.664 683.452 L766.105 683.452 L765.546 683.452 L764.987 683.452 L764.427 683.452 L763.868 683.452 L763.309 683.452 L762.75 683.452 L762.19 683.452 L761.631 683.452 L761.072 683.452 L760.513 683.452 L759.953 683.452 L759.394 683.452 L758.835 683.452 L758.276 683.452 L757.716 683.452 L757.157 683.452 L756.598 683.452 L756.039 683.452 L755.479 683.452 L754.92 683.452 L754.361 683.452 L753.802 683.452 L753.242 683.452 L752.683 683.452 L752.124 683.452 L751.565 683.452 L751.005 683.452 L750.446 683.452 L749.887 683.452 L749.328 683.452 L748.768 683.452 L748.209 683.452 L747.65 683.452 L747.091 683.452 L746.531 683.452 L745.972 683.452 L745.413 683.452 L744.854 683.452 L744.294 683.452 L743.735 683.452 L743.176 683.452 L742.617 683.452 L742.057 683.452 L741.498 683.452 L740.939 683.452 L740.38 683.452 L739.82 683.452 L739.261 683.452 L738.702 683.452 L738.143 683.452 L737.583 683.452 L737.024 683.452 L736.465 683.452 L735.906 683.452 L735.346 683.452 L734.787 683.452 L734.228 683.452 L733.669 683.452 L733.109 683.452 L732.55 683.452 L731.991 683.452 L731.432 683.452 L730.872 683.452 L730.313 683.452 L729.754 683.452 L729.195 683.452 L728.635 683.452 L728.076 683.452 L727.517 683.452 L726.958 683.452 L726.398 683.452 L725.839 683.452 L725.28 683.452 L724.721 683.452 L724.161 683.452 L723.602 683.452 L723.043 683.452 L722.484 683.452 L721.924 683.452 L721.365 683.452 L720.806 683.452 L720.247 683.452  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip683)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.132 720.806,684.132 721.365,684.132 721.924,684.132 722.484,684.132 723.043,684.132 723.602,684.132 724.161,684.132 724.721,684.132 725.28,684.132 725.839,684.132 726.398,684.132 726.958,684.132 727.517,684.132 728.076,684.132 728.635,684.132 729.195,684.132 729.754,684.132 730.313,684.132 730.872,684.132 731.432,684.132 731.991,684.132 732.55,684.132 733.109,684.132 733.669,684.132 734.228,684.132 734.787,684.132 735.346,684.132 735.906,684.132 736.465,684.132 737.024,684.132 737.583,684.132 738.143,684.132 738.702,684.132 739.261,684.132 739.82,684.132 740.38,684.132 740.939,684.132 741.498,684.132 742.057,684.132 742.617,684.132 743.176,684.132 743.735,684.132 744.294,684.132 744.854,684.132 745.413,684.132 745.972,684.132 746.531,684.132 747.091,684.132 747.65,684.132 748.209,684.132 748.768,684.132 749.328,684.132 749.887,684.132 750.446,684.132 751.005,684.132 751.565,684.132 752.124,684.132 752.683,684.132 753.242,684.132 753.802,684.132 754.361,684.132 754.92,684.132 755.479,684.132 756.039,684.132 756.598,684.132 757.157,684.132 757.716,684.132 758.276,684.132 758.835,684.132 759.394,684.132 759.953,684.132 760.513,684.132 761.072,684.132 761.631,684.132 762.19,684.132 762.75,684.132 763.309,684.132 763.868,684.132 764.427,684.132 764.987,684.132 765.546,684.132 766.105,684.132 766.664,684.132 767.224,684.132 767.783,684.132 768.342,684.132 768.901,684.132 769.461,684.132 770.02,684.132 770.579,684.132 771.138,684.132 771.698,684.132 772.257,684.132 772.816,684.132 773.375,684.132 773.935,684.132 774.494,684.132 775.053,684.132 775.612,684.132 776.172,684.132 776.731,684.132 777.29,684.132 777.849,684.132 778.409,684.132 778.968,684.132 779.527,684.132 780.086,684.132 780.646,684.132 781.205,684.132 781.764,684.132 782.323,684.132 782.883,684.132 783.442,684.132 784.001,684.132 784.56,684.132 785.12,684.132 785.679,684.132 786.238,684.132 786.797,684.132 787.357,684.132 787.916,684.132 788.475,684.132 789.034,684.132 789.594,684.132 790.153,684.132 790.712,684.132 791.271,684.132 791.831,684.132 792.39,684.132 792.949,684.132 793.508,684.132 794.068,684.132 794.627,684.132 795.186,684.132 795.745,684.132 796.305,684.132 796.864,684.132 797.423,684.132 797.982,684.132 798.542,684.132 799.101,684.132 799.66,684.132 800.219,684.132 800.779,684.132 801.338,684.132 801.897,684.132 802.456,684.132 803.016,684.132 803.575,684.132 804.134,684.132 804.693,684.132 805.253,684.132 805.812,684.132 806.371,684.132 806.931,684.132 807.49,684.132 808.049,684.132 808.608,684.132 809.168,684.132 809.727,684.132 810.286,684.132 810.845,684.132 811.405,684.132 811.964,684.132 812.523,684.132 813.082,684.132 813.642,684.132 814.201,684.132 814.76,684.132 815.319,684.132 815.879,684.132 816.438,684.132 816.997,684.132 817.556,684.132 818.116,684.132 818.675,684.132 819.234,684.132 819.793,684.132 820.353,684.132 820.912,684.132 821.471,684.132 822.03,684.132 822.59,684.132 823.149,684.132 823.708,684.132 824.267,684.132 824.827,684.132 825.386,684.132 825.945,684.132 826.504,684.132 827.064,684.132 827.623,684.132 828.182,684.132 828.741,684.132 829.301,684.132 829.86,684.132 830.419,684.132 830.978,684.132 831.538,684.132 832.097,684.132 832.656,684.132 833.215,684.132 833.775,684.132 834.334,684.132 834.893,684.132 835.452,684.132 836.012,684.132 836.571,684.132 837.13,684.132 837.689,684.132 838.249,684.132 838.808,684.132 839.367,684.132 839.926,684.132 840.486,684.132 841.045,684.132 841.604,684.132 842.163,684.132 842.723,684.132 843.282,684.132 843.841,684.132 844.4,684.132 844.96,684.132 845.519,684.132 846.078,684.132 846.637,684.132 847.197,684.132 847.756,684.132 848.315,684.132 848.874,684.132 849.434,684.132 849.993,684.132 850.552,684.132 851.111,684.132 851.671,684.132 852.23,684.132 852.789,684.132 853.348,684.132 853.908,684.132 854.467,684.132 855.026,684.132 855.585,684.132 856.145,684.132 856.704,684.132 857.263,684.132 857.822,684.132 858.382,684.132 858.941,684.132 859.5,684.132 860.059,684.132 860.619,684.132 861.178,684.132 861.737,684.132 862.296,684.132 862.856,684.132 863.415,684.132 863.974,684.132 864.533,684.132 865.093,684.132 865.652,684.132 866.211,684.132 866.77,684.132 867.33,684.132 867.889,684.132 868.448,684.132 869.007,684.132 869.567,684.132 870.126,684.132 870.685,684.132 871.244,684.132 871.804,684.132 872.363,684.132 872.922,684.132 873.481,684.132 874.041,684.132 874.6,684.132 875.159,684.132 875.718,684.132 876.278,684.132 876.837,684.132 877.396,684.132 877.955,684.132 878.515,684.132 879.074,684.132 879.633,684.132 880.192,684.132 880.752,684.132 881.311,684.132 881.87,684.132 882.429,684.132 882.989,684.132 883.548,684.132 884.107,684.132 884.666,684.132 885.226,684.132 885.785,684.132 886.344,684.132 886.903,684.132 887.463,684.132 888.022,684.132 888.581,684.132 889.14,684.132 889.7,684.132 890.259,684.132 890.818,684.132 891.377,684.132 891.937,684.132 892.496,684.132 893.055,684.132 893.614,684.132 894.174,684.132 894.733,684.132 895.292,684.132 895.851,684.132 896.411,684.132 896.97,684.132 897.529,684.132 898.088,684.132 898.648,684.132 899.207,684.132 899.766,684.132 900.325,684.132 900.885,684.132 901.444,684.132 902.003,684.132 902.562,684.132 903.122,684.132 903.681,684.132 904.24,684.132 904.799,684.132 905.359,684.132 905.918,684.132 906.477,684.132 907.036,684.132 907.596,684.132 908.155,684.132 908.714,684.132 909.273,684.132 909.833,684.132 910.392,684.132 910.951,684.132 911.51,684.132 912.07,684.132 912.629,684.132 913.188,684.132 913.747,684.132 914.307,684.132 914.866,684.132 915.425,684.132 915.984,684.132 916.544,684.132 917.103,684.132 917.662,684.132 918.221,684.132 918.781,684.132 919.34,684.132 919.899,684.132 920.458,684.132 921.018,684.132 921.577,684.132 922.136,684.132 922.695,684.132 923.255,684.132 923.814,684.132 924.373,684.132 924.932,684.132 925.492,684.132 926.051,684.132 926.61,684.132 927.169,684.132 927.729,684.132 928.288,684.132 928.847,684.132 929.406,684.132 929.966,684.132 930.525,684.132 931.084,684.132 931.644,684.132 932.203,684.132 932.762,684.132 933.321,684.132 933.881,684.132 934.44,684.132 934.999,684.132 935.558,684.132 936.118,684.132 936.677,684.132 937.236,684.132 937.795,684.132 938.355,684.132 938.914,684.132 939.473,684.132 940.032,684.132 940.592,684.132 941.151,684.132 941.71,684.132 942.269,684.132 942.829,684.132 943.388,684.132 943.947,684.132 944.506,684.132 945.066,684.132 945.625,684.132 946.184,684.132 946.743,684.132 947.303,684.132 947.862,684.132 948.421,684.132 948.98,684.132 949.54,684.132 950.099,684.132 950.658,684.132 951.217,684.132 951.777,684.132 952.336,684.132 952.895,684.132 953.454,684.132 954.014,684.132 954.573,684.132 955.132,684.132 955.691,684.132 956.251,684.132 956.81,684.132 957.369,684.132 957.928,684.132 958.488,684.132 959.047,684.132 959.606,684.132 960.165,684.132 960.725,684.132 961.284,684.132 961.843,684.132 962.402,684.132 962.962,684.132 963.521,684.132 964.08,684.132 964.639,684.132 965.199,684.132 965.758,684.132 966.317,684.132 966.876,684.132 967.436,684.132 967.995,684.132 968.554,684.132 969.113,684.132 969.673,684.132 970.232,684.132 970.791,684.132 971.35,684.132 971.91,684.132 972.469,684.132 973.028,684.132 973.587,684.132 974.147,684.132 974.706,684.132 975.265,684.132 975.824,684.132 976.384,684.132 976.943,684.132 977.502,684.132 978.061,684.132 978.621,684.132 979.18,684.132 979.739,684.132 980.298,684.132 980.858,684.132 981.417,684.132 981.976,684.132 982.535,684.132 983.095,684.132 983.654,684.132 984.213,684.132 984.772,684.132 985.332,684.132 985.891,684.132 986.45,684.132 987.009,684.132 987.569,684.132 988.128,684.132 988.687,684.132 989.246,684.132 989.806,684.132 990.365,684.132 990.924,684.132 991.483,684.132 992.043,684.132 992.602,684.132 993.161,684.132 993.72,684.132 994.28,684.132 994.839,684.132 995.398,684.132 995.957,684.132 996.517,684.132 997.076,684.132 997.635,684.132 998.194,684.132 998.754,684.132 999.313,684.132 999.872,684.132 1000.43,684.132 1000.99,684.132 1001.55,684.132 1002.11,684.132 1002.67,684.132 1003.23,684.132 1003.79,684.132 1004.35,684.132 1004.91,684.132 1005.46,684.132 1006.02,684.132 1006.58,684.132 1007.14,684.132 1007.7,684.132 1008.26,684.132 1008.82,684.132 1009.38,684.132 1009.94,684.132 1010.5,684.132 1011.06,684.132 1011.62,684.132 1012.18,684.132 1012.73,684.132 1013.29,684.132 1013.85,684.132 1014.41,684.132 1014.97,684.132 1015.53,684.132 1016.09,684.132 1016.65,684.132 1017.21,684.132 1017.77,684.132 1018.33,684.132 1018.89,684.132 1019.45,684.132 1020.01,684.132 1020.56,684.132 1021.12,684.132 1021.68,684.132 1022.24,684.132 1022.8,684.132 1023.36,684.132 1023.92,684.132 1024.48,684.132 1025.04,684.132 1025.6,684.132 1026.16,684.132 1026.72,684.132 1027.28,684.132 1027.83,684.132 1028.39,684.132 1028.95,684.132 1029.51,684.132 1030.07,684.132 1030.63,684.132 1031.19,684.132 1031.75,684.132 1032.31,684.132 1032.87,684.132 1033.43,684.132 1033.99,684.132 1034.55,684.132 1035.1,684.132 1035.66,684.132 1036.22,684.132 1036.78,684.132 1037.34,684.132 1037.9,684.132 1038.46,684.132 1039.02,684.132 1039.58,684.132 1040.14,684.132 1040.7,684.132 1041.26,684.132 1041.82,684.132 1042.38,684.132 1042.93,684.132 1043.49,684.132 1044.05,684.132 1044.61,684.132 1045.17,684.132 1045.73,684.132 1046.29,684.132 1046.85,684.132 1047.41,684.132 1047.97,684.132 1048.53,684.132 1049.09,684.132 1049.65,684.132 1050.2,684.132 1050.76,684.132 1051.32,684.132 1051.88,684.132 1052.44,684.132 1053,684.132 1053.56,684.132 1054.12,684.132 1054.68,684.132 1055.24,684.132 1055.8,684.132 1056.36,684.132 1056.92,684.132 1057.48,684.132 1058.03,684.132 1058.59,684.132 1059.15,684.132 1059.71,684.132 1060.27,684.132 1060.83,684.132 1061.39,684.132 1061.95,684.132 1062.51,684.132 1063.07,684.132 1063.63,684.132 1064.19,684.132 1064.75,684.132 1065.3,684.132 1065.86,684.132 1066.42,684.132 1066.98,684.132 1067.54,684.132 1068.1,684.132 1068.66,684.132 1069.22,684.132 1069.78,684.132 1070.34,684.132 1070.9,684.132 1071.46,684.132 1072.02,684.132 1072.57,684.132 1073.13,684.132 1073.69,684.132 1074.25,684.132 1074.81,684.132 1075.37,684.132 1075.93,684.132 1076.49,684.132 1077.05,684.132 1077.61,684.132 1078.17,684.132 1078.73,684.132 1079.29,684.132 1079.85,684.132 1080.4,684.132 1080.96,684.132 1081.52,684.132 1082.08,684.132 1082.64,684.132 1083.2,684.132 1083.76,684.132 1084.32,684.132 1084.88,684.132 1085.44,684.132 1086,684.132 1086.56,684.132 1087.12,684.132 1087.67,684.132 1088.23,684.132 1088.79,684.132 1089.35,684.132 1089.91,684.132 1090.47,684.132 1091.03,684.132 1091.59,684.132 1092.15,684.132 1092.71,684.132 1093.27,684.132 1093.83,684.132 1094.39,684.132 1094.94,684.132 1095.5,684.132 1096.06,684.132 1096.62,684.132 1097.18,684.132 1097.74,684.132 1098.3,684.132 1098.86,684.132 1099.42,684.132 1099.98,684.132 1100.54,684.132 1101.1,684.132 1101.66,684.132 1102.22,684.132 1102.77,684.132 1103.33,684.132 1103.89,684.132 1104.45,684.132 1105.01,684.132 1105.57,684.132 1106.13,684.132 1106.69,684.132 1107.25,684.132 1107.81,684.132 1108.37,684.132 1108.93,684.132 1109.49,684.132 1110.04,684.132 1110.6,684.132 1111.16,684.132 1111.72,684.132 1112.28,684.132 1112.84,684.132 1113.4,684.132 1113.96,684.132 1114.52,684.132 1115.08,684.132 1115.64,684.132 1116.2,684.132 1116.76,684.132 1117.31,684.132 1117.87,684.132 1118.43,684.132 1118.99,684.132 1119.55,684.132 1120.11,684.132 1120.67,684.132 1121.23,684.132 1121.79,684.132 1122.35,684.132 1122.91,684.132 1123.47,684.132 1124.03,684.132 1124.59,684.132 1125.14,684.132 1125.7,684.132 1126.26,684.132 1126.82,684.132 1127.38,684.132 1127.94,684.132 1128.5,684.132 1129.06,684.132 1129.62,684.132 1130.18,684.132 1130.74,684.132 1131.3,684.132 1131.86,684.132 1132.41,684.132 1132.97,684.132 1133.53,684.132 1134.09,684.132 1134.65,684.132 1135.21,684.132 1135.77,684.132 1136.33,684.132 1136.89,684.132 1137.45,684.132 1138.01,684.132 1138.57,684.132 1139.13,684.132 1139.68,684.132 1140.24,684.132 1140.8,684.132 1141.36,684.132 1141.92,684.132 1142.48,684.132 1143.04,684.132 1143.6,684.132 1144.16,684.132 1144.72,684.132 1145.28,684.132 1145.84,684.132 1146.4,684.132 1146.96,684.132 1147.51,684.132 1148.07,684.132 1148.63,684.132 1149.19,684.132 1149.75,684.132 1150.31,684.132 1150.87,684.132 1151.43,684.132 1151.99,684.132 1152.55,684.132 1153.11,684.132 1153.67,684.132 1154.23,684.132 1154.78,684.132 1155.34,684.132 1155.9,684.132 1156.46,684.132 1157.02,684.132 1157.58,684.132 1158.14,684.132 1158.7,684.132 1159.26,684.132 1159.82,684.132 1160.38,684.132 1160.94,684.132 1161.5,684.132 1162.05,684.132 1162.61,684.132 1163.17,684.132 1163.73,684.132 1164.29,684.132 1164.85,684.132 1165.41,684.132 1165.97,684.132 1166.53,684.132 1167.09,684.132 1167.65,684.132 1168.21,684.132 1168.77,684.132 1169.33,684.132 1169.88,684.132 1170.44,684.132 1171,684.132 1171.56,684.132 1172.12,684.132 1172.68,684.132 1173.24,684.132 1173.8,684.132 1174.36,684.132 1174.92,684.132 1175.48,684.132 1176.04,684.132 1176.6,684.132 1177.15,684.132 1177.71,684.132 1178.27,684.132 1178.83,684.132 1179.39,684.132 1179.95,684.132 1180.51,684.132 1181.07,684.132 1181.63,684.132 1182.19,684.132 1182.75,684.132 1183.31,684.132 1183.87,684.132 1184.43,684.132 1184.98,684.132 1185.54,684.132 1186.1,684.132 1186.66,684.132 1187.22,684.132 1187.78,684.132 1188.34,684.132 1188.9,684.132 1189.46,684.132 1190.02,684.132 1190.58,684.132 1191.14,684.132 1191.7,684.132 1192.25,684.132 1192.81,684.132 1193.37,684.132 1193.93,684.132 1194.49,684.132 1195.05,684.132 1195.61,684.132 1196.17,684.132 1196.73,684.132 1197.29,684.132 1197.85,684.132 1198.41,684.132 1198.97,684.132 1199.52,684.132 1200.08,684.132 1200.64,684.132 1201.2,684.132 1201.76,684.132 1202.32,684.132 1202.88,684.132 1203.44,684.132 1204,684.132 1204.56,684.132 1205.12,684.132 1205.68,684.132 1206.24,684.132 1206.8,684.132 1207.35,684.132 1207.91,684.132 1208.47,684.132 1209.03,684.132 1209.59,684.132 1210.15,684.132 1210.71,684.132 1211.27,684.132 1211.83,684.132 1212.39,684.132 1212.95,684.132 1213.51,684.132 1214.07,684.132 1214.62,684.132 1215.18,684.132 1215.74,684.132 1216.3,684.132 1216.86,684.132 1217.42,684.132 1217.98,684.132 1218.54,684.132 1219.1,684.132 1219.66,684.132 1220.22,684.132 1220.78,684.132 1221.34,684.132 1221.89,684.132 1222.45,684.132 1223.01,684.132 1223.57,684.132 1224.13,684.132 1224.69,684.132 1225.25,684.132 1225.81,684.132 1226.37,684.132 1226.93,684.132 1227.49,684.132 1228.05,684.132 1228.61,684.132 1229.17,684.132 1229.72,684.132 1230.28,684.132 1230.84,684.132 1231.4,684.132 1231.96,684.132 1232.52,684.132 1233.08,684.132 1233.64,684.132 1234.2,684.132 1234.76,684.132 1235.32,684.132 1235.88,684.132 1236.44,684.132 1236.99,684.132 1237.55,684.132 1238.11,684.132 1238.67,684.132 1239.23,684.132 1239.79,684.132 1240.35,684.132 1240.91,684.132 1241.47,684.132 1242.03,684.132 1242.59,684.132 1243.15,684.132 1243.71,684.132 1244.26,684.132 1244.82,684.132 1245.38,684.132 1245.94,684.132 1246.5,684.132 1247.06,684.132 1247.62,684.132 1248.18,684.132 1248.74,684.132 1249.3,684.132 1249.86,684.132 1250.42,684.132 1250.98,684.132 1251.54,684.132 1252.09,684.132 1252.65,684.132 1253.21,684.132 1253.77,684.132 1254.33,684.132 1254.89,684.132 1255.45,684.132 1256.01,684.132 1256.57,684.132 1257.13,684.132 1257.69,684.132 1258.25,684.132 1258.81,684.132 1259.36,684.132 1259.92,684.132 1260.48,684.132 1261.04,684.132 1261.6,684.132 1262.16,684.132 1262.72,684.132 1263.28,684.132 1263.84,684.132 1264.4,684.132 1264.96,684.132 1265.52,684.132 1266.08,684.132 1266.63,684.132 1267.19,684.132 1267.75,684.132 1268.31,684.132 1268.87,684.132 1269.43,684.132 1269.99,684.132 1270.55,684.132 1271.11,684.132 1271.67,684.132 1272.23,684.132 1272.79,684.132 1273.35,684.132 1273.91,684.132 1274.46,684.132 1275.02,684.132 1275.58,684.132 1276.14,684.132 1276.7,684.132 1277.26,684.132 1277.82,684.132 1278.38,684.132 1278.94,684.132 1279.5,684.132 1280.06,684.132 1280.62,684.132 1281.18,684.132 1281.73,684.132 1282.29,684.132 1282.85,684.132 1283.41,684.132 1283.97,684.132 1284.53,684.132 1285.09,684.132 1285.65,684.132 1286.21,684.132 1286.77,684.132 1287.33,684.132 1287.89,684.132 1288.45,684.132 1289,684.132 1289.56,684.132 1290.12,684.132 1290.68,684.132 1291.24,684.132 1291.8,684.132 1292.36,684.132 1292.92,684.132 1293.48,684.132 1294.04,684.132 1294.6,684.132 1295.16,684.132 1295.72,684.132 1296.28,684.132 1296.83,684.132 1297.39,684.132 1297.95,684.132 1298.51,684.132 1299.07,684.132 1299.63,684.132 1300.19,684.132 1300.75,684.132 1301.31,684.132 1301.87,684.132 1302.43,684.132 1302.99,684.132 1303.55,684.132 1304.1,684.132 1304.66,684.132 1305.22,684.132 1305.78,684.132 1306.34,684.132 1306.9,684.132 1307.46,684.132 1308.02,684.132 1308.58,684.132 1309.14,684.132 1309.7,684.132 1310.26,684.132 1310.82,684.132 1311.38,684.132 1311.93,684.132 1312.49,684.132 1313.05,684.132 1313.61,684.132 1314.17,684.132 1314.73,684.132 1315.29,684.132 1315.85,684.132 1316.41,684.132 1316.97,684.132 1317.53,684.132 1318.09,684.132 1318.65,684.132 1319.2,684.132 1319.76,684.132 1320.32,684.132 1320.88,684.132 1321.44,684.132 1322,684.132 1322.56,684.132 1323.12,684.132 1323.68,684.132 1324.24,684.132 1324.8,684.132 1325.36,684.132 1325.92,684.132 1326.47,684.132 1327.03,684.132 1327.59,684.132 1328.15,684.132 1328.71,684.132 1329.27,684.132 1329.83,684.132 1330.39,684.132 1330.95,684.132 1331.51,684.132 1332.07,684.132 1332.63,684.132 1333.19,684.132 1333.75,684.132 1334.3,684.132 1334.86,684.132 1335.42,684.132 1335.98,684.132 1336.54,684.132 1337.1,684.132 1337.66,684.132 1338.22,684.132 1338.78,684.132 1339.34,684.132 1339.9,684.132 1340.46,684.132 1341.02,684.132 1341.57,684.132 1342.13,684.132 1342.69,684.132 1343.25,684.132 1343.81,684.132 1344.37,684.132 1344.93,684.132 1345.49,684.132 1346.05,684.132 1346.61,684.132 1347.17,684.132 1347.73,684.132 1348.29,684.132 1348.84,684.132 1349.4,684.132 1349.96,684.132 1350.52,684.132 1351.08,684.132 1351.64,684.132 1352.2,684.132 1352.76,684.132 1353.32,684.132 1353.88,684.132 1354.44,684.132 1355,684.132 1355.56,684.132 1356.12,684.132 1356.67,684.132 1357.23,684.132 1357.79,684.132 1358.35,684.132 1358.91,684.132 1359.47,684.132 1360.03,684.132 1360.59,684.132 1361.15,684.132 1361.71,684.132 1362.27,684.132 1362.83,684.132 1363.39,684.132 1363.94,684.132 1364.5,684.132 1365.06,684.132 1365.62,684.132 1366.18,684.132 1366.74,684.132 1367.3,684.132 1367.86,684.132 1368.42,684.132 1368.98,684.132 1369.54,684.132 1370.1,684.132 1370.66,684.132 1371.21,684.132 1371.77,684.132 1372.33,684.132 1372.89,684.132 1373.45,684.132 1374.01,684.132 1374.57,684.132 1375.13,684.132 1375.69,684.132 1376.25,684.132 1376.81,684.132 1377.37,684.132 1377.93,684.132 1378.49,684.132 1379.04,684.132 1379.6,684.132 1380.16,684.132 1380.72,684.132 1381.28,684.132 1381.84,684.132 1382.4,684.132 1382.96,684.132 1383.52,684.132 1384.08,684.132 1384.64,684.132 1385.2,684.132 1385.76,684.132 1386.31,684.132 1386.87,684.132 1387.43,684.132 1387.99,684.132 1388.55,684.132 1389.11,684.132 1389.67,684.132 1390.23,684.132 1390.79,684.132 1391.35,684.132 1391.91,684.132 1392.47,684.132 1393.03,684.132 1393.58,684.132 1394.14,684.132 1394.7,684.132 1395.26,684.132 1395.82,684.132 1396.38,684.132 1396.94,684.132 1397.5,684.132 1398.06,684.132 1398.62,684.132 1399.18,684.132 1399.74,684.132 1400.3,684.132 1400.86,684.132 1401.41,684.132 1401.97,684.132 1402.53,684.132 1403.09,684.132 1403.65,684.132 1404.21,684.132 1404.77,684.132 1405.33,684.132 1405.89,684.132 1406.45,684.132 1407.01,684.132 1407.57,684.132 1408.13,684.132 1408.68,684.132 1409.24,684.132 1409.8,684.132 1410.36,684.132 1410.92,684.132 1411.48,684.132 1412.04,684.132 1412.6,684.132 1413.16,684.132 1413.72,684.132 1414.28,684.132 1414.84,684.132 1415.4,684.132 1415.95,684.132 1416.51,684.132 1417.07,684.132 1417.63,684.132 1418.19,684.132 1418.75,684.132 1419.31,684.132 1419.87,684.132 1420.43,684.132 1420.99,684.132 1421.55,684.132 1422.11,684.132 1422.67,684.132 1423.23,684.132 1423.78,684.132 1424.34,684.132 1424.9,684.132 1425.46,684.132 1426.02,684.132 1426.58,684.132 1427.14,684.132 1427.7,684.132 1428.26,684.132 1428.82,684.132 1429.38,684.132 1429.94,684.132 1430.5,684.132 1431.05,684.132 1431.61,684.132 1432.17,684.132 1432.73,684.132 1433.29,684.132 1433.85,684.132 1434.41,684.132 1434.97,684.132 1435.53,684.132 1436.09,684.132 1436.65,684.132 1437.21,684.132 1437.77,684.132 1438.33,684.132 1438.88,684.132 1439.44,684.132 1440,684.132 1440.56,684.132 1441.12,684.132 1441.68,684.132 1442.24,684.132 1442.8,684.132 1443.36,684.132 1443.92,684.132 1444.48,684.132 1445.04,684.132 1445.6,684.132 1446.15,684.132 1446.71,684.132 1447.27,684.132 1447.83,684.132 1448.39,684.132 1448.95,684.132 1449.51,684.132 1450.07,684.132 1450.63,684.132 1451.19,684.132 1451.75,684.132 1452.31,684.132 1452.87,684.132 1453.42,684.132 1453.98,684.132 1454.54,684.132 1455.1,684.132 1455.66,684.132 1456.22,684.132 1456.78,684.132 1457.34,684.132 1457.9,684.132 1458.46,684.132 1459.02,684.132 1459.58,684.132 1460.14,684.132 1460.7,684.132 1461.25,684.132 1461.81,684.132 1462.37,684.132 1462.93,684.132 1463.49,684.132 1464.05,684.132 1464.61,684.132 1465.17,684.132 1465.73,684.132 1466.29,684.132 1466.85,684.132 1467.41,684.132 1467.97,684.132 1468.52,684.132 1469.08,684.132 1469.64,684.132 1470.2,684.132 1470.76,684.132 1471.32,684.132 1471.88,684.132 1472.44,684.132 1473,684.132 1473.56,684.132 1474.12,684.132 1474.68,684.132 1475.24,684.132 1475.79,684.132 1476.35,684.132 1476.91,684.132 1477.47,684.132 1478.03,684.132 1478.59,684.132 1479.15,684.132 1479.71,684.132 1480.27,684.132 1480.83,684.132 1481.39,684.132 1481.95,684.132 1482.51,684.132 1483.07,684.132 1483.62,684.132 1484.18,684.132 1484.74,684.132 1485.3,684.132 1485.86,684.132 1486.42,684.132 1486.98,684.132 1487.54,684.132 1488.1,684.132 1488.66,684.132 1489.22,684.132 1489.78,684.132 1490.34,684.132 1490.89,684.132 1491.45,684.132 1492.01,684.132 1492.57,684.132 1493.13,684.132 1493.69,684.132 1494.25,684.132 1494.81,684.132 1495.37,684.132 1495.93,684.132 1496.49,684.132 1497.05,684.132 1497.61,684.132 1498.16,684.132 1498.72,684.132 1499.28,684.132 1499.84,684.132 1500.4,684.132 1500.96,684.132 1501.52,684.132 1502.08,684.132 1502.64,684.132 1503.2,684.132 1503.76,684.132 1504.32,684.132 1504.88,684.132 1505.44,684.132 1505.99,684.132 1506.55,684.132 1507.11,684.132 1507.67,684.132 1508.23,684.132 1508.79,684.132 1509.35,684.132 1509.91,684.132 1510.47,684.132 1511.03,684.132 1511.59,684.132 1512.15,684.132 1512.71,684.132 1513.26,684.132 1513.82,684.132 1514.38,684.132 1514.94,684.132 1515.5,684.132 1516.06,684.132 1516.62,684.132 1517.18,684.132 1517.74,684.132 1518.3,684.132 1518.86,684.132 1519.42,684.132 1519.98,684.132 1520.53,684.132 1521.09,684.132 1521.65,684.132 1522.21,684.132 1522.77,684.132 1523.33,684.132 1523.89,684.132 1524.45,684.132 1525.01,684.132 1525.57,684.132 1526.13,684.132 1526.69,684.132 1527.25,684.132 1527.81,684.132 1528.36,684.132 1528.92,684.132 1529.48,684.132 1530.04,684.132 1530.6,684.132 1531.16,684.132 1531.72,684.132 1532.28,684.132 1532.84,684.132 1533.4,684.132 1533.96,684.132 1534.52,684.132 1535.08,684.132 1535.63,684.132 1536.19,684.132 1536.75,684.132 1537.31,684.132 1537.87,684.132 1538.43,684.132 1538.99,684.132 1539.55,684.132 1540.11,684.132 1540.67,684.132 1541.23,684.132 1541.79,684.132 1542.35,684.132 1542.9,684.132 1543.46,684.132 1544.02,684.132 1544.58,684.132 1545.14,684.132 1545.7,684.132 1546.26,684.132 1546.82,684.132 1547.38,684.132 1547.94,684.132 1548.5,684.132 1549.06,684.132 1549.62,684.132 1550.18,684.132 1550.73,684.132 1551.29,684.132 1551.85,684.132 1552.41,684.132 1552.97,684.132 1553.53,684.132 1554.09,684.132 1554.65,684.132 1555.21,684.132 1555.77,684.132 1556.33,684.132 1556.89,684.132 1557.45,684.132 1558,684.132 1558.56,684.132 1559.12,684.132 1559.68,684.132 1560.24,684.132 1560.8,684.132 1561.36,684.132 1561.92,684.132 1562.48,684.132 1563.04,684.132 1563.6,684.132 1564.16,684.132 1564.72,684.132 1565.28,684.132 1565.83,684.132 1566.39,684.132 1566.95,684.132 1567.51,684.132 1568.07,684.132 1568.63,684.132 1569.19,684.132 1569.75,684.132 1570.31,684.132 1570.87,684.132 1571.43,684.132 1571.99,684.132 1572.55,684.132 1573.1,684.132 1573.66,684.132 1574.22,684.132 1574.78,684.132 1575.34,684.132 1575.9,684.132 1576.46,684.132 1577.02,684.132 1577.58,684.132 1578.14,684.132 1578.7,684.132 1579.26,684.132 1579.82,684.132 1580.37,684.132 1580.93,684.132 1581.49,684.132 1582.05,684.132 1582.61,684.132 1583.17,684.132 1583.73,684.132 1584.29,684.132 1584.85,684.132 1585.41,684.132 1585.97,684.132 1586.53,684.132 1587.09,684.132 1587.65,684.132 1588.2,684.132 1588.76,684.132 1589.32,684.132 1589.88,684.132 1590.44,684.132 1591,684.132 1591.56,684.132 1592.12,684.132 1592.68,684.132 1593.24,684.132 1593.8,684.132 1594.36,684.132 1594.92,684.132 1595.47,684.132 1596.03,684.132 1596.59,684.132 1597.15,684.132 1597.71,684.132 1598.27,684.132 1598.83,684.132 1599.39,684.132 1599.95,684.132 1600.51,684.132 1601.07,684.132 1601.63,684.132 1602.19,684.132 1602.74,684.132 1603.3,684.132 1603.86,684.132 1604.42,684.132 1604.98,684.132 1605.54,684.132 1606.1,684.132 1606.66,684.132 1607.22,684.132 1607.78,684.132 1608.34,684.132 1608.9,684.132 1609.46,684.132 1610.02,684.132 1610.57,684.132 1611.13,684.132 1611.69,684.132 1612.25,684.132 1612.81,684.132 1613.37,684.132 1613.93,684.132 1614.49,684.132 1615.05,684.132 1615.61,684.132 1616.17,684.132 1616.73,684.132 1617.29,684.132 1617.84,684.132 1618.4,684.132 1618.96,684.132 1619.52,684.132 1620.08,684.132 1620.64,684.132 1621.2,684.132 1621.76,684.132 1622.32,684.132 1622.88,684.132 1623.44,684.132 1624,684.132 1624.56,684.132 1625.11,684.132 1625.67,684.132 1626.23,684.132 1626.79,684.132 1627.35,684.132 1627.91,684.132 1628.47,684.132 1629.03,684.132 1629.59,684.132 1630.15,684.132 1630.71,684.132 1631.27,684.132 1631.83,684.132 1632.39,684.132 1632.94,684.132 1633.5,684.132 1634.06,684.132 1634.62,684.132 1635.18,684.132 1635.74,684.132 1636.3,684.132 1636.86,684.132 1637.42,684.132 1637.98,684.132 1638.54,684.132 1639.1,684.132 1639.66,684.132 1640.21,684.132 1640.77,684.132 1641.33,684.132 1641.89,684.132 1642.45,684.132 1643.01,684.132 1643.57,684.132 1644.13,684.132 1644.69,684.132 1645.25,684.132 1645.81,684.132 1646.37,684.132 1646.93,684.132 1647.48,684.132 1648.04,684.132 1648.6,684.132 1649.16,684.132 1649.72,684.132 1650.28,684.132 1650.84,684.132 1651.4,684.132 1651.96,684.132 1652.52,684.132 1653.08,684.132 1653.64,684.132 1654.2,684.132 1654.76,684.132 1655.31,684.132 1655.87,684.132 1656.43,684.132 1656.99,684.132 1657.55,684.132 1658.11,684.132 1658.67,684.132 1659.23,684.132 1659.79,684.132 1660.35,684.132 1660.91,684.132 1661.47,684.132 1662.03,684.132 1662.58,684.132 1663.14,684.132 1663.7,684.132 1664.26,684.132 1664.82,684.132 1665.38,684.132 1665.94,684.132 1666.5,684.132 1667.06,684.132 1667.62,684.132 1668.18,684.132 1668.74,684.132 1669.3,684.132 1669.85,684.132 1670.41,684.132 1670.97,684.132 1671.53,684.132 1672.09,684.132 1672.65,684.132 1673.21,684.132 1673.77,684.132 1674.33,684.132 1674.89,684.132 1675.45,684.132 1676.01,684.132 1676.57,684.132 1677.13,684.132 1677.68,684.132 1678.24,684.132 1678.8,684.132 1679.36,684.132 1679.92,684.132 1680.48,684.132 1681.04,684.132 1681.6,684.132 1682.16,684.132 1682.72,684.132 1683.28,684.132 1683.84,684.132 1684.4,684.132 1684.95,684.132 1685.51,684.132 1686.07,684.132 1686.63,684.132 1687.19,684.132 1687.75,684.132 1688.31,684.132 1688.87,684.132 1689.43,684.132 1689.99,684.132 1690.55,684.132 1691.11,684.132 1691.67,684.132 1692.23,684.132 1692.78,684.132 1693.34,684.132 1693.9,684.132 1694.46,684.132 1695.02,684.132 1695.58,684.132 1696.14,684.132 1696.7,684.132 1697.26,684.132 1697.82,684.132 1698.38,684.132 1698.94,684.132 1699.5,684.132 1700.05,684.132 1700.61,684.132 1701.17,684.132 1701.73,684.132 1702.29,684.132 1702.85,684.132 1703.41,684.132 1703.97,684.132 1704.53,684.132 1705.09,684.132 1705.65,684.132 1706.21,684.132 1706.77,684.132 1707.32,684.132 1707.88,684.132 1708.44,684.132 1709,684.132 1709.56,684.132 1710.12,684.132 1710.68,684.132 1711.24,684.132 1711.8,684.132 1712.36,684.132 1712.92,684.132 1713.48,684.132 1714.04,684.132 1714.6,684.132 1715.15,684.132 1715.71,684.132 1716.27,684.132 1716.83,684.132 1717.39,684.132 1717.95,684.132 1718.51,684.132 1719.07,684.132 1719.63,684.132 1720.19,684.132 1720.75,684.132 1721.31,684.132 1721.87,684.132 1722.42,684.132 1722.98,684.132 1723.54,684.132 1724.1,684.132 1724.66,684.132 1725.22,684.132 1725.78,684.132 1726.34,684.132 1726.9,684.132 1727.46,684.132 1728.02,684.132 1728.58,684.132 1729.14,684.132 1729.69,684.132 1730.25,684.132 1730.81,684.132 1731.37,684.132 1731.93,684.132 1732.49,684.132 1733.05,684.132 1733.61,684.132 1734.17,684.132 1734.73,684.132 1735.29,684.132 1735.85,684.132 1736.41,684.132 1736.97,684.132 1737.52,684.132 1738.08,684.132 1738.64,684.132 1739.2,684.132 1739.76,684.132 1740.32,684.132 1740.88,684.132 1741.44,684.132 1742,684.132 1742.56,684.132 1743.12,684.132 1743.68,684.132 1744.24,684.132 1744.79,684.132 1745.35,684.132 1745.91,684.132 1746.47,684.132 1747.03,684.132 1747.59,684.132 1748.15,684.132 1748.71,684.132 1749.27,684.132 1749.83,684.132 1750.39,684.132 1750.95,684.132 1751.51,684.132 1752.06,684.132 1752.62,684.132 1753.18,684.132 1753.74,684.132 1754.3,684.132 1754.86,684.132 1755.42,684.132 1755.98,684.132 1756.54,684.132 1757.1,684.132 1757.66,684.132 1758.22,684.132 1758.78,684.132 1759.34,684.132 1759.89,684.132 1760.45,684.132 1761.01,684.132 1761.57,684.132 1762.13,684.132 1762.69,684.132 1763.25,684.132 1763.81,684.132 1764.37,684.132 1764.93,684.132 1765.49,684.132 1766.05,684.132 1766.61,684.132 1767.16,684.132 1767.72,684.132 1768.28,684.132 1768.84,684.132 1769.4,684.132 1769.96,684.132 1770.52,684.132 1771.08,684.132 1771.64,684.132 1772.2,684.132 1772.76,684.132 1773.32,684.132 1773.88,684.132 1774.43,684.132 1774.99,684.132 1775.55,684.132 1776.11,684.132 1776.67,684.132 1777.23,684.132 1777.79,684.132 1778.35,684.132 1778.91,684.132 1779.47,684.132 1780.03,684.132 1780.59,684.132 1781.15,684.132 1781.71,684.132 1782.26,684.132 1782.82,684.132 1783.38,684.132 1783.94,684.132 1784.5,684.132 1785.06,684.132 1785.62,684.132 1786.18,684.132 1786.74,684.132 1787.3,684.132 1787.86,684.132 1788.42,684.132 1788.98,684.132 1789.53,684.132 1790.09,684.132 1790.65,684.132 1791.21,684.132 1791.77,684.132 1792.33,684.132 1792.89,684.132 1793.45,684.132 1794.01,684.132 1794.57,684.132 1795.13,684.132 1795.69,684.132 1796.25,684.132 1796.8,684.132 1797.36,684.132 1797.92,684.132 1798.48,684.132 1799.04,684.132 1799.6,684.132 1800.16,684.132 1800.72,684.132 1801.28,684.132 1801.84,684.132 1802.4,684.132 1802.96,684.132 1803.52,684.132 1804.08,684.132 1804.63,684.132 1805.19,684.132 1805.75,684.132 1806.31,684.132 1806.87,684.132 1807.43,684.132 1807.99,684.132 1808.55,684.132 1809.11,684.132 1809.67,684.132 1810.23,684.132 1810.79,684.132 1811.35,684.132 1811.9,684.132 1812.46,684.132 1813.02,684.132 1813.58,684.132 1814.14,684.132 1814.7,684.132 1815.26,684.132 1815.82,684.132 1816.38,684.132 1816.94,684.132 1817.5,684.132 1818.06,684.132 1818.62,684.132 1819.18,684.132 1819.73,684.132 1820.29,684.132 1820.85,684.132 1821.41,684.132 1821.97,684.132 1822.53,684.132 1823.09,684.132 1823.65,684.132 1824.21,684.132 1824.77,684.132 1825.33,684.132 1825.89,684.132 1826.45,684.132 1827,684.132 1827.56,684.132 1828.12,684.132 1828.68,684.132 1829.24,684.132 1829.8,684.132 1830.36,684.132 1830.92,684.132 1831.48,684.132 1832.04,684.132 1832.6,684.132 1833.16,684.132 1833.72,684.132 1834.27,684.132 1834.83,684.132 1835.39,684.132 1835.95,684.132 1836.51,684.132 1837.07,684.132 1837.63,684.132 1838.19,684.132 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.035465226224385 ± 0.02082669442174621\nProjected Energy: -4.017838875938779 ± (0.003571791538719893, 0.0034199131607302036)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.456267</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4397e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3946e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.786e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.192e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.615e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.175e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V} <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer\n\n2D grid of vectors stored in a simple buffer with collective MPI communication support.\n\nSee append_collections!, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n+1. The data sent from rank r will be stored in the (r-1)-st column.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
